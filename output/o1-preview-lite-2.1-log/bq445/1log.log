2025-01-25 07:00:23 - openai._base_client - INFO - Retrying request to /chat/completions in 0.499749 seconds
2025-01-25 07:01:19 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:01:27 - root - INFO - SQL:
SELECT
     start_position,
     end_position,
     reference_bases,
     alternate_bases
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
   WHERE
     start_position BETWEEN 41196312 AND 41322420
   LIMIT 100;
Results:
Too long, hard cut:
start_position,end_position,reference_bases,alternate_bases
41267769,41267770,G,"[{'alt': 'T', 'AC': 1, 'AF': 3.98629e-06, 'allele_type': 'snv', 'n_alt_alleles': 1, 'pab_max': 0.229481, 'gq_hist_alt_bin_freq': '0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1', 'gq_hist_all_bin_freq': '20|15|26|80|174|160|516|929|671|1725|2428|1471|6235|988|5393|1441|6631|722|7151|88972', 'dp_hist_alt_bin_freq': '0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0', 'dp_hist_alt_n_larger': 0, 'dp_hist_all_bin_freq': '19|254|1369|3899|8921|9985|19283|39297|20507|11809|5358|2243|1027|549|338|220|161|104|95|86', 'dp_hist_all_n_larger': 224, 'ab_hist_alt_bin_freq': '0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0', 'AC_nfe_seu': 1, 'AF_nfe_seu': 8.72144e-05, 'nhomalt_nfe_seu': 0, 'controls_AC_afr_male': 0, 'controls_AF_afr_male': 0.0, 'controls_nhomalt_afr_male': 0, 'non_neuro_AC_eas_kor': 0, 'non_neuro_AF_eas_kor': 0.0, 'non_neuro_nhomalt_eas_kor': 0, 'non_topmed_AC_amr': 0, 'non_topmed_AF_amr': 0.0, 'non_topmed_nhomalt_amr': 0, 'non_cancer_AC_asj_female': 0, 'non_cancer_AF_asj_female': 0.0, 'non_cancer_nhomalt_asj_female': 0, 'AC_raw': 1, 'AF_raw': 3.97621e-06, 'nhomalt_raw': 0, 'AC_fin_female': 0, 'AF_fin_female': 0.0, 'nhomalt_fin_female': 0, 'non_cancer_AC_oth_female': 0, 'non_cancer_AF_oth_female': 0.0, 'non_cancer_nhomalt_oth_female': 0, 'AC_nfe_bgr': 0, 'AF_nfe_bgr': 0.0, 'nhomalt_nfe_bgr': 0, 'non_neuro_AC_asj_female': 0, 'non_neuro_AF_asj_female': 0.0, 'non_neuro_nhomalt_asj_female': 0, 'AC_sas_male': 0, 'AF_sas_male': 0.0, 'nhomalt_sas_male': 0, 'non_neuro_AC_afr_male': 0, 'non_neuro_AF_afr_male': 0.0, 'non_neuro_nhomalt_afr_male': 0, 'AC_afr_male': 0, 'AF_afr_male': 0.0, 'nhomalt_afr_male': 0, 'AC_afr': 0, 'AF_afr': 0.0, 'nhomalt_afr': 0, 'controls_AC_nfe_swe': 0, 'controls_AF_nfe_swe': 0.0, 'controls_nhomalt_nfe_swe': 0, 'non_neuro_AC_afr_female': 0, 'non_neuro_AF_afr_female': 0.0, 'non_neuro_nhomalt_afr_female': 0, 'non_topmed_AC_amr_female': 0, 'non_topmed_AF_amr_female': 0.0, 'non_topmed_nhomalt_amr_female': 0, 'non_cancer_AC_female': 0, 'non_cancer_AF_female': 0.0, 'non_cancer_nhomalt_female': 0, 'non_cancer_AC_nfe_onf': 0, 'non_cancer_AF_nfe_onf': 0.0, 'non_cancer_nhomalt_nfe_onf': 0, 'non_cancer_AC_male': 0, 'non_cancer_AF_male': 0.0, 'non_cancer_nhomalt_male': 0, 'non_topmed_AC_oth_female': 0, 'non_topmed_AF_oth_female': 0.0, 'non_topmed_nhomalt_oth_female': 0, 'AC_eas_female': 0, 'AF_eas_female': 0.0, 'nhomalt_eas_female': 0, 'non_cancer_AC_sas_female': 0, 'non_cancer_AF_sas_female': 0.0, 'non_cancer_nhomalt_sas_female': 0, 'AC_afr_female': 0, 'AF_afr_female': 0.0, 'nhomalt_afr_female': 0, 'AC_sas': 0, 'AF_sas': 0.0, 'nhomalt_sas': 0, 'non_neuro_AC_female': 0, 'non_neuro_AF_female': 0.0, 'non_neuro_nhomalt_female': 0, 'controls_AC_afr': 0, 'controls_AF_afr': 0.0, 'controls_nhomalt_afr': 0, 'non_neuro_AC_eas_jpn': 0, 'non_neuro_AF_eas_jpn': 0.0, 'non_neuro_nhomalt_eas_jpn': 0, 'AC_nfe_onf': 0, 'AF_nfe_onf': 0.0, 'nhomalt_nfe_onf': 0, 'non_cancer_AC_amr_male': 0, 'non_cancer_AF_amr_male': 0.0, 'non_cancer_nhomalt_amr_male': 0, 'controls_AC_fin_male': 0, 'controls_AF_fin_male': 0.0, 'controls_nhomalt_fin_male': 0, 'non_neuro_AC_nfe_nwe': 0, 'non_neuro_AF_nfe_nwe': 0.0, 'non_neuro_nhomalt_nfe_nwe': 0, 'AC_fin_male': 0, 'AF_fin_male': 0.0, 'nhomalt_fin_male': 0, 'AC_nfe_female': 0, 'AF_nfe_female': 0.0, 'nhomalt_nfe_female': 0, 'AC_amr': 0, 'AF_amr': 0.0, 'nhomalt_amr': 0, 'non_topmed_AC_nfe_male': 1, 'non_topmed_AF_nfe_male': 1.59541e-05, 'non_topmed_nhomalt_nfe_male': 0, 'non_neuro_AC_sas': 0, 'non_neuro_AF_sas': 0.0, 'non_neuro_nhomalt_sas': 0, 'non_cancer_AC_fin_male': 0, 'non_cancer_AF_fin_male': 0.0, 'non_cancer_nhomalt_fin_male': 0, 'non_cancer_AC_nfe_seu': 0, 'non_cancer_AF_nfe_seu': 0.0, 'non_cancer_nhomalt_nfe_seu': 0, 'AC_eas': 0, 'AF_eas': 0.0, 'nhomalt_eas': 0, 'nhomalt': 0, 'non_neuro_AC_nfe_female': 0, 'non_neuro_AF_nfe_female': 0.0, 'non_neuro_nhomalt_nfe_female': 0, 'non_neuro_AC_afr': 0, 'non_neuro_AF_afr': 0.0, 'non_neuro_nhomalt_afr': 0, 'controls_AC_raw': 0, 'controls_AF_raw': 0.0, 'controls_nhomalt_raw': 0, 'non_cancer_AC_eas': 0, 'non_cancer_AF_eas': 0.0, 'non_cancer_nhomalt_eas': 0, 'non_cancer_AC_amr_female': 0, 'non_cancer_AF_amr_female': 0.0, 'non_cancer_nhomalt_amr_female': 0, 'non_neuro_AC_nfe_swe': 0, 'non_neuro_AF_nfe_swe': 0.0, 'non_neuro_nhomalt_nfe_swe': 0, 'controls_AC_male': 0, 'controls_AF_male': 0.0, 'controls_nhomalt_male': 0, 'non_topmed_AC_male': 1, 'non_topmed_AF_male': 7.50582e-06, 'non_topmed_nhomalt_male': 0, 'controls_AC_eas_jpn': 0, 'controls_AF_eas_jpn': 0.0, 'controls_nhomalt_eas_jpn': 0, 'controls_AC_nfe_female': 0, 'controls_AF_nfe_female': 0.0, 'controls_nhomalt_nfe_female': 0, 'non_neuro_AC_amr': 0, 'non_neuro_AF_amr': 0.0, 'non_neuro_nhomalt_amr': 0, 'non_neuro_AC_eas_female': 0, 'non_neuro_AF_eas_female': 0.0, 'non_neuro_nhomalt_eas_female': 0, 'AC_asj_male': 0, 'AF_asj_male': 0.0, 'nhomalt_asj_male': 0, 'controls_AC_nfe_male': 0, 'controls_AF_nfe_male': 0.0, 'controls_nhomalt_nfe_male'

2025-01-25 07:01:31 - root - INFO - SQL:
SELECT
     start_position,
     end_position,
     reference_bases,
     alternate_bases.alt
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND EXISTS (
       SELECT 1 FROM UNNEST(vep) AS vep
       WHERE vep.SYMBOL = 'BRCA1'
         AND vep.Consequence LIKE '%missense_variant%'
     )
   LIMIT 100;
Results:
start_position,end_position,reference_bases,alt
41219709,41219710,C,A
41219708,41219709,G,A
41219707,41219708,A,G
41219705,41219706,C,T
41219701,41219702,T,C
41219699,41219700,T,C
41219696,41219697,A,G
41219693,41219694,C,T
41219693,41219694,C,A
41219681,41219682,G,A
41219678,41219679,T,C
41219675,41219676,T,C
41219674,41219675,G,A
41219662,41219663,A,G
41219659,41219660,A,G
41219656,41219657,G,A
41219630,41219631,T,G
41219624,41219625,C,G
41215957,41215958,A,T
41215952,41215953,C,G
41215947,41215948,G,A
41215946,41215947,C,T
41215925,41215926,C,G
41215920,41215921,C,T
41215919,41215920,G,C
41215919,41215920,G,A
41215919,41215920,G,T
41215917,41215918,C,T
41215914,41215915,C,T
41215904,41215905,A,G
41215387,41215388,C,A
41215386,41215387,A,T
41215384,41215385,T,C
41215366,41215367,T,C
41215353,41215354,T,C
41209147,41209148,T,A
41209147,41209148,T,C
41209124,41209125,C,T
41209100,41209101,G,C
41209093,41209094,C,T
41209085,41209086,C,G
41203126,41203127,C,G
41203105,41203106,T,C
41203100,41203101,G,C
41203094,41203095,T,A
41203087,41203088,A,C
41203084,41203085,G,A
41267769,41267770,G,T
41267758,41267759,C,T
41267772,41267773,A,C
41267746,41267747,A,T
41267748,41267749,A,G
41267783,41267784,G,C
41267743,41267744,T,G
41267742,41267743,T,G
41267790,41267791,T,C

2025-01-25 07:01:59 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:01:59 - root - INFO - I see that you're encountering an error with your SQL query:

```
SELECT DISTINCT
     vep.SYMBOL
FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
WHERE
     start_position BETWEEN 41196312 AND 41322420
LIMIT 100;
```

**Error Message:**
```
Unrecognized name: vep at [5:13]
```

The error occurs because the `vep` column is not a top-level field in the table `v2_1_1_exomes__chr17`. In the gnomAD v2.1.1 dataset, the `vep` annotations are nested within the `alternate_bases` array. Here's how the relevant part of the schema looks:

- `alternate_bases` (ARRAY of STRUCT)
  - `alt` (STRING)
  - `vep` (ARRAY of STRUCT)
    - `Consequence` (STRING)
    - `SYMBOL` (STRING)
    - ... (other VEP annotation fields)

To access the `vep` data, you need to:

1. **Unnest the `alternate_bases` array** to access each alternate allele.
2. **Unnest the `vep` array** within each alternate allele to access the VEP annotations.

Here's the corrected SQL query:

```sql
SELECT DISTINCT
  vep.SYMBOL
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
  UNNEST(alternate_bases) AS alt,
  UNNEST(alt.vep) AS vep
WHERE
  start_position BETWEEN 41196312 AND 41322420
LIMIT 100;
```

**Explanation:**

- `UNNEST(alternate_bases) AS alt`: This unnests the `alternate_bases` array so you can access each alternate allele individually.
- `UNNEST(alt.vep) AS vep`: This unnests the `vep` array within each `alt` to access the VEP annotations.
- `vep.SYMBOL`: Now, you can access the `SYMBOL` field from the VEP annotations.

**Additional Example: Retrieve Missense Variants in BRCA1**

If you want to retrieve the first missense variants in the BRCA1 gene region based on their protein positions, you can use the following query:

```sql
SELECT
  vep.Protein_position,
  CONCAT("chr", reference_name, ":", start_position, "_", reference_bases, "/", alt.alt) AS Variant_ID,
  vep.Consequence
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
  UNNEST(alternate_bases) AS alt,
  UNNEST(alt.vep) AS vep
WHERE
  start_position BETWEEN 41196312 AND 41322420
  AND vep.SYMBOL = 'BRCA1'
  AND vep.Consequence LIKE '%missense_variant%'
ORDER BY
  CAST(SPLIT(vep.Protein_position, "/")[OFFSET(0)] AS INT64) -- Handle positions like "123/1000"
LIMIT 10;
```

**Notes:**

- **Protein Position Parsing:** The `vep.Protein_position` field sometimes contains values like `"123/1863"`. To extract the numeric position, we use `SPLIT` and `OFFSET(0)` to get the first part before the slash.
- **Ordering Variants:** We cast the protein position to `INT64` for proper ordering.
- **Variant ID Formation:** We concatenate fields to form a variant identifier like `"chr17:41196312_A/G"`.

**Sample Output Format:**

```csv
Protein_position,Variant_ID,Consequence
123,"chr17:41196312_A/G","missense_variant"
456,"chr17:41234567_C/T","missense_variant"
...
```

(Attention: answer includes columns and data types)

**Summary:**

- The error was due to not properly accessing the nested `vep` field.
- By correctly unnesting `alternate_bases` and `vep`, you can access the desired annotations.
- Use the corrected SQL queries to retrieve information about missense variants in the BRCA1 gene.

Let me know if you have any more questions or need further assistance!
2025-01-25 07:03:00 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:03:00 - root - INFO - SQL:
SELECT DISTINCT
  vep.SYMBOL
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
  UNNEST(alternate_bases) AS alt,
  UNNEST(alt.vep) AS vep
WHERE
  start_position BETWEEN 41196312 AND 41322420
LIMIT 100;
Results:
SYMBOL
BRCA1
""
RPL21P4
NBR2
CTD-3199J23.6

2025-01-25 07:03:33 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:03:33 - root - INFO - I see that you're encountering an error with your SQL query:

```sql
SELECT
     start_position,
     vep.SYMBOL,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
   LIMIT 100
```

**Error Message:**

```
400 Unrecognized name: vep at [7:13]; reason: invalidQuery, location: query, message: Unrecognized name: vep at [7:13]
```

---

**Explanation:**

The error occurs because the `vep` field is **not a top-level field** in the table `v2_1_1_exomes__chr17`. Instead, `vep` is nested within the `alternate_bases` array. To access the fields within `vep`, you need to:

1. **Unnest the `alternate_bases` array** to access each alternate allele (`alt`).
2. **Unnest the `vep` array** within each `alt` to access the VEP annotations.

---

**Corrected SQL Query:**

```sql
SELECT
     start_position,
     vep.SYMBOL,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
   LIMIT 100;
```

**Explanation of Corrections:**

- `UNNEST(alternate_bases) AS alt`:
  - This step unnests the `alternate_bases` array, allowing you to access each alternate allele (`alt`).
- `UNNEST(alt.vep) AS vep`:
  - This step unnests the `vep` array within each `alt`, giving you access to the VEP annotations like `vep.SYMBOL` and `vep.Consequence`.
- The `WHERE` clause and `LIMIT` remain the same.

---

**Additional Examples:**

If you encounter similar errors in other queries, ensure that you're correctly unnesting the necessary fields. Here's how you can adjust similar queries:

1. **Accessing `vep` Fields:**

   - **Incorrect:**

     ```sql
     UNNEST(vep) AS vep
     ```

   - **Correct:**

     ```sql
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
     ```

2. **Example Corrected Query:**

   Retrieve variants with their consequences:

   ```sql
   SELECT
     start_position,
     vep.SYMBOL,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
   LIMIT 100;
   ```

---

**Testing the Corrected Query:**

By running the corrected query, you should now get results without any errors. Here's an example of expected output:

```csv
start_position,SYMBOL,Consequence
41219678,BRCA1,"missense_variant"
41219681,BRCA1,"missense_variant"
41215919,BRCA1,"missense_variant"
...
```

(Attention: The output includes columns and their data types.)

---

**Summary:**

- The `vep` field is nested within `alternate_bases`. You must unnest `alternate_bases` before accessing `vep`.
- Always check the table schema to understand the nesting structure.
- Ensure you adjust your `UNNEST` clauses accordingly.

---

**Let me know if you need further assistance or have more questions!**
2025-01-25 07:04:08 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:04:08 - root - INFO - I see that you're still encountering an error with your SQL query:

```sql
SELECT
     start_position,
     vep.SYMBOL,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
   LIMIT 100
```

**Error Message:**

```
400 Unrecognized name: vep at [7:13]; reason: invalidQuery, location: query, message: Unrecognized name: vep at [7:13]
```

---

**Explanation:**

The error occurs because the `vep` field is **not a top-level field** in the table `v2_1_1_exomes__chr17`. Instead, `vep` is nested within the `alternate_bases` array. To access the `vep` data, you need to:

1. **Unnest the `alternate_bases` array** to access each alternate base (`alt`).
2. **Unnest the `vep` array** within each `alt` to access the VEP annotations.

---

**Corrected SQL Query:**

```sql
SELECT
     start_position,
     vep.SYMBOL,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
   LIMIT 100
```

---

**Explanation of Corrections:**

- **Unnesting `alternate_bases`:**  
  ```sql
  UNNEST(alternate_bases) AS alt
  ```
  This step flattens the `alternate_bases` array, allowing you to access each alternate allele individually.

- **Unnesting `vep` within `alternate_bases`:**  
  ```sql
  UNNEST(alt.vep) AS vep
  ```
  This step accesses the `vep` annotations nested within each `alternate_bases` entry (`alt`).

- **Accessing `vep` Fields:**  
  Now that `vep` is properly unnested, you can access `vep.SYMBOL` and `vep.Consequence` in your `SELECT` statement and `WHERE` clause.

---

**Why This Works:**

- **Structure of the Data:**  
  In the `v2_1_1_exomes__chr17` table, the columns are structured as follows:
  - `alternate_bases` is an array of records (`STRUCT`s).
    - Each element (`alt`) in `alternate_bases` represents an alternate allele.
    - Within each `alt`, there is a `vep` field which is itself an array of VEP annotations.
      - Each `vep` record contains fields like `SYMBOL`, `Consequence`, `Protein_position`, etc.

- **Accessing Nested Fields:**  
  By unnesting both `alternate_bases` and `alt.vep`, you can access the nested VEP annotations for each alternate allele.

---

**Testing the Corrected Query:**

When you run the corrected query, it should execute without errors and return results similar to:

```csv
start_position,SYMBOL,Consequence
41219678,BRCA1,"missense_variant"
41219681,BRCA1,"missense_variant"
41219693,BRCA1,"missense_variant"
...
```

---

**Additional Tips:**

- **Consistent Unnesting:**  
  Whenever you need to access nested fields within arrays, ensure you unnest each level sequentially.

- **Understanding the Schema:**  
  It's helpful to review the table schema to understand how the data is nested. You can use the BigQuery web UI to inspect the table and its fields.

---

**Let me know if you have any further questions or need additional assistance!**
2025-01-25 07:04:38 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:04:38 - root - INFO - I understand that you're still encountering the same error with your SQL query. Let's address this step by step to ensure you have a query that runs successfully.

**Your Current Query:**

```sql
SELECT
     start_position,
     vep.SYMBOL,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
   LIMIT 100
```

**Error Message:**

```
400 Unrecognized name: vep at [7:13]; reason: invalidQuery, location: query, message: Unrecognized name: vep at [7:13]
```

---

### **Explanation:**

- **Issue:** The `vep` field is **not a top-level field** in the table. It is nested within the `alternate_bases` array.
- **Result:** You cannot unnest `vep` directly from the table; you must first unnest `alternate_bases`, then unnest `vep` from within each `alternate_bases` record.

---

### **Corrected Query:**

Please replace your query with the following **exactly**:

```sql
SELECT
     start_position,
     vep.SYMBOL,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
   CROSS JOIN
     UNNEST(alternate_bases) AS alt
   CROSS JOIN
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
   LIMIT 100
```

**Key Changes:**

- **Unnest `alternate_bases` first:**

  ```sql
  UNNEST(alternate_bases) AS alt
  ```

- **Unnest `vep` from within `alt`:**

  ```sql
  UNNEST(alt.vep) AS vep
  ```

- **Use `CROSS JOIN` for clarity:**

  This explicitly indicates that you're joining each row with the unnested arrays.

---

### **Why This Works:**

- **Data Structure Understanding:**

  - `alternate_bases` is an **array of structs**. Each element (`alt`) represents an alternate allele.
  - Within each `alt`, there is a `vep` field, which is an **array of annotations**.
  
- **Accessing Nested Fields:**

  - By first unnesting `alternate_bases`, you can work with each alternate allele individually.
  - Then, unnesting `vep` within `alt` allows you to access the annotations for each alternate allele.

---

### **Please Try This:**

Copy and paste the corrected query into your BigQuery console or wherever you're running the query, and execute it. It should run without errors and return the desired results.

---

### **Sample Output:**

You should see results similar to:

| start_position | SYMBOL | Consequence       |
|----------------|--------|-------------------|
| 41219681       | BRCA1  | missense_variant  |
| 41219693       | BRCA1  | missense_variant  |
| 41267769       | BRCA1  | missense_variant  |
| ...            | ...    | ...               |

---

### **Additional Tips:**

- **Avoid Using the Old Query:**

  Make sure you **completely replace** your old query with the corrected one. Do not mix parts of the old query with the new one.

- **Understanding Joins:**

  Using `CROSS JOIN` with `UNNEST` makes it clear how arrays are being flattened.

- **Consistency:**

  For any other queries where you need to access fields nested within `alternate_bases`, remember to first unnest `alternate_bases`, then unnest the nested fields within it.

---

### **Final Note:**

I apologize if my previous explanations weren't clear enough. I hope this corrected query resolves the error you've been facing. If you have any more issues or questions, please let me know, and I'll be happy to assist further!
2025-01-25 07:04:39 - root - INFO - SQL:
SELECT
     start_position,
     vep.SYMBOL,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
   LIMIT 100
Results:
400 Unrecognized name: vep at [7:13]; reason: invalidQuery, location: query, message: Unrecognized name: vep at [7:13]

Location: US
Job ID: 87f280ab-13cb-43f6-b020-0fbc4bf8afae

2025-01-25 07:04:42 - root - INFO - SQL:
SELECT
     start_position,
     vep.SYMBOL,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
   LIMIT 100
Results:
start_position,SYMBOL,Consequence
41267769,BRCA1,intron_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant&NMD_transcript_variant
41267769,BRCA1,missense_variant&NMD_transcript_variant
41267769,BRCA1,non_coding_transcript_exon_variant&non_coding_transcript_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant&NMD_transcript_variant
41267769,BRCA1,intron_variant
41267769,BRCA1,intron_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,intron_variant
41267769,BRCA1,intron_variant
41267769,BRCA1,intron_variant
41267769,BRCA1,intron_variant
41267758,BRCA1,intron_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant&NMD_transcript_variant
41267758,BRCA1,missense_variant&NMD_transcript_variant
41267758,BRCA1,non_coding_transcript_exon_variant&non_coding_transcript_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant&NMD_transcript_variant
41267758,BRCA1,intron_variant
41267758,BRCA1,intron_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,intron_variant
41267758,BRCA1,intron_variant
41267758,BRCA1,intron_variant
41267758,BRCA1,intron_variant
41267772,BRCA1,intron_variant
41267772,BRCA1,missense_variant
41267772,BRCA1,missense_variant
41267772,BRCA1,missense_variant
41267772,BRCA1,missense_variant
41267772,BRCA1,missense_variant
41267772,BRCA1,missense_variant&NMD_transcript_variant
41267772,BRCA1,missense_variant&NMD_transcript_variant

2025-01-25 07:05:36 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:05:36 - root - INFO - I'm sorry to hear that you're still encountering the same error with your SQL query. Let's work through this step by step to resolve the issue.

---

### **Your Current Query:**

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
   ORDER BY
     CAST(vep.Protein_position AS INT)
   LIMIT 100;
```

### **Error Message:**

```
400 Unrecognized name: vep at [7:13]; reason: invalidQuery, location: query, message: Unrecognized name: vep at [7:13]
```

---

### **Explanation:**

- **Issue:** The `vep` field is **not a top-level field** in the `v2_1_1_exomes__chr17` table. It is nested within the `alternate_bases` array.
- **Result:** You cannot unnest `vep` directly from the table. You must first unnest `alternate_bases`, then unnest `vep` from within each `alternate_bases` record.

---

### **Corrected SQL Query:**

Please replace your query with the following **exactly**:

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
   CROSS JOIN
     UNNEST(alternate_bases) AS alt
   CROSS JOIN
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
   ORDER BY
     CAST(SPLIT(vep.Protein_position, '/')[SAFE_OFFSET(0)] AS INT64)
   LIMIT 100;
```

---

### **Explanation of Corrections:**

1. **Unnesting `alternate_bases`:**

   ```sql
   CROSS JOIN
     UNNEST(alternate_bases) AS alt
   ```

   - This step flattens the `alternate_bases` array, allowing access to each alternate allele individually.

2. **Unnesting `vep` within `alt`:**

   ```sql
   CROSS JOIN
     UNNEST(alt.vep) AS vep
   ```

   - After accessing an alternate allele (`alt`), we unnest the `vep` array within it to access the VEP annotations.

3. **Ordering by Protein Position:**

   ```sql
   ORDER BY
     CAST(SPLIT(vep.Protein_position, '/')[SAFE_OFFSET(0)] AS INT64)
   ```

   - The `Protein_position` field sometimes contains values like `"123/1863"`.
   - We use `SPLIT` to extract the numeric part before the `/`.
   - `SAFE_OFFSET(0)` safely handles situations where `Protein_position` might not contain a `/`.
   - `CAST` converts the extracted string to an integer for ordering.

---

### **Sample Output Format:**

```csv
Protein_position,start_position,Consequence
"300",41219693,"missense_variant"
"301",41219696,"missense_variant"
"302",41219699,"missense_variant"
...
```

(Attention: The output includes columns and their data types.)

---

### **Please Try Running This Corrected Query:**

Copy and paste the corrected query into your BigQuery console and execute it. It should run without errors and return the desired results.

---

### **Additional Notes:**

- **Ensure Full Replacement:**

  - **Important:** Make sure to **fully replace** your previous query with the corrected one. Do **not** mix parts of the old query with the new one.
  - The error persists because the incorrect query is being used.

- **Understanding the Data Structure:**

  - **Table Schema:**
    - In the `v2_1_1_exomes__chr17` table, the structure is as follows:
      - `alternate_bases` (ARRAY of STRUCT)
        - `alt` (STRING)
        - `vep` (ARRAY of STRUCT)
          - `Consequence` (STRING)
          - `Protein_position` (STRING)
          - `SYMBOL` (STRING)
          - *... other VEP fields ...*
  - **Accessing Nested Fields:**
    - You **must** unnest `alternate_bases` before you can unnest `vep`.
    - Directly unnesting `vep` from the main table will result in the error you're seeing.

- **Using `CROSS JOIN`:**

  - By using `CROSS JOIN`, we explicitly indicate that we're flattening the arrays for each row.

- **Breaking Down the Query:**

  - **Step 1:** Start with the base table.
  - **Step 2:** Unnest `alternate_bases` to access individual alternate alleles.
  - **Step 3:** For each `alt`, unnest `vep` to access VEP annotations.
  - **Step 4:** Apply filters in the `WHERE` clause based on `start_position` and `vep` fields.
  - **Step 5:** Use `ORDER BY` to sort the results.

---

### **If You Continue to Encounter Issues:**

- **Check for Hidden Characters:**

  - Sometimes, copying and pasting can introduce hidden characters or formatting issues.
  - Try typing out the query manually or paste it into a plain text editor before copying it into BigQuery.

- **Review the Table Schema:**

  - In the BigQuery UI, navigate to the `v2_1_1_exomes__chr17` table and review the schema to familiarize yourself with its structure.

- **Test the Query in Smaller Parts:**

  - **Step 1:** Run a simple query to unnest `alternate_bases` and view its content:

    ```sql
    SELECT
      start_position,
      alt.alt
    FROM
      `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
    CROSS JOIN
      UNNEST(alternate_bases) AS alt
    WHERE
      start_position BETWEEN 41196312 AND 41322420
    LIMIT 10;
    ```

  - **Step 2:** Add the `vep` unnesting:

    ```sql
    SELECT
      start_position,
      alt.alt,
      vep.SYMBOL
    FROM
      `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
    CROSS JOIN
      UNNEST(alternate_bases) AS alt
    CROSS JOIN
      UNNEST(alt.vep) AS vep
    WHERE
      start_position BETWEEN 41196312 AND 41322420
    LIMIT 10;
    ```

  - **Step 3:** Apply your desired filters and add the `Protein_position` field.

---

### **Final Thoughts:**

- **Consistency is Key:**

  - Ensure that you're consistently unnesting the fields as required.
  - Any deviation from the correct unnesting sequence will result in errors.

- **Reaching Out:**

  - If you're still experiencing issues, please share any new error messages or concerns.
  - I'm here to help you resolve this so you can proceed with your analysis.

---

### **Summary:**

- Replace your current query with the corrected one provided.
- Ensure that you're unnesting `alternate_bases` and then `vep` properly.
- Run the query exactly as provided to avoid errors.
- Let me know if this helps or if you need further assistance.

---

**Feel free to run the corrected query, and let me know if everything works or if you have any more questions!**
2025-01-25 07:06:03 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:06:03 - root - INFO - I understand that you're still encountering the same error when running your SQL query. It seems the issue persists because the query you're using hasn't been fully corrected to account for the nested structure of the data in the `v2_1_1_exomes__chr17` table.

---

### **Your Current Query:**

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
   ORDER BY
     CAST(vep.Protein_position AS INT)
   LIMIT 100
```

**Error Message:**

```
400 Unrecognized name: vep at [7:13]; reason: invalidQuery, location: query, message: Unrecognized name: vep at [7:13]
```

---

### **Explanation of the Issue:**

The `vep` field is not directly accessible from the main table; it's nested within the `alternate_bases` array. To access fields within `vep`, you need to:

1. **Unnest the `alternate_bases` array** to access each alternate allele (denoted as `alt`).
2. **Unnest the `vep` array** within each `alt` to access the VEP annotations.

---

### **Corrected SQL Query:**

Please use the following corrected query:

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
   CROSS JOIN
     UNNEST(alternate_bases) AS alt
   CROSS JOIN
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
   ORDER BY
     CAST(SPLIT(vep.Protein_position, '/')[SAFE_OFFSET(0)] AS INT64)
   LIMIT 100;
```

---

### **Explanation of the Corrections:**

1. **Unnest `alternate_bases`:**
   - `UNNEST(alternate_bases) AS alt`
   - This step brings each element of the `alternate_bases` array into individual rows, allowing you to access the nested `vep` array within each `alt`.

2. **Unnest `vep` within `alt`:**
   - `UNNEST(alt.vep) AS vep`
   - This step accesses the `vep` array nested within each `alt`.

3. **Accessing Fields:**
   - With `vep` properly unnested, you can now access `vep.Protein_position`, `vep.Consequence`, and other VEP annotation fields.

4. **Ordering by Protein Position:**
   - `CAST(SPLIT(vep.Protein_position, '/')[SAFE_OFFSET(0)] AS INT64)`
   - This handles cases where `Protein_position` might be in the format `"123/1863"` by splitting on `'/'` and taking the first part.

---

### **Why the Original Query Didn't Work:**

In your original query, you tried to unnest `vep` directly from the main table:

```sql
UNNEST(vep) AS vep
```

This doesn't work because `vep` is nested inside `alternate_bases`, not directly within the table. You need to first unnest `alternate_bases` before you can access `vep`.

---

### **Steps to Ensure Success:**

1. **Copy the Corrected Query Exactly:**
   - Ensure you're using the corrected query without mixing it with parts of the old query.

2. **Check for Hidden Characters:**
   - When copying and pasting, make sure there are no hidden characters or formatting issues.

3. **Run the Query:**
   - Execute the corrected query in your BigQuery console.

---

### **Sample Output:**

You should receive results similar to:

| Protein_position | start_position | Consequence       |
|------------------|----------------|-------------------|
| 169              | 41219647       | missense_variant  |
| 170              | 41219650       | missense_variant  |
| 171              | 41219653       | missense_variant  |
| ...              | ...            | ...               |

---

### **Additional Tips:**

- **Understanding Data Structure:**
  - **Table Schema Overview:**
    - **`alternate_bases`:** An array containing alternate allele information.
    - **`alt.vep`:** An array within each `alternate_bases` element containing VEP annotations.

- **Using `CROSS JOIN` with `UNNEST`:**
  - This approach makes the unnesting process explicit and can help avoid confusion.

- **Ordering by Protein Position Safely:**
  - Using `SAFE_OFFSET(0)` avoids errors if `vep.Protein_position` doesn't contain a `'/'`.

---

### **Confirming the Solution:**

After running the corrected query, you should no longer see the error and will get the desired results. This will allow you to proceed with retrieving the first missense variants based on their protein positions within the BRCA1 gene region.

---

### **Final Notes:**

- **Consistency:**
  - Always ensure you're unnesting in the correct order: first `alternate_bases`, then `vep` within `alternate_bases`.

- **Asking for Help:**
  - If you still encounter issues, please let me know, and provide any new error messages so I can assist further.

---

I hope this helps you resolve the error. Let me know if you have any more questions or need additional assistance!
2025-01-25 07:06:38 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:06:38 - root - INFO - I'm sorry to hear that you're still encountering the same error with your SQL query. Let's address this step by step to resolve the issue.

---

### **Understanding the Issue:**

In your query, you're trying to unnest the `vep` field directly from the main table:

```sql
UNNEST(vep) AS vep
```

However, in the `v2_1_1_exomes__chr17` table, the `vep` field is **not** a top-level field. Instead, it is nested within the `alternate_bases` array. This means you need to first unnest `alternate_bases` before accessing `vep`.

---

### **Your Current Query:**

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
   ORDER BY
     CAST(vep.Protein_position AS INT)
   LIMIT 100;
```

---

### **Corrected Query:**

Please replace your entire query with the following corrected version:

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
   CROSS JOIN
     UNNEST(alternate_bases) AS alt
   CROSS JOIN
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
   ORDER BY
     CAST(SPLIT(vep.Protein_position, '/')[SAFE_OFFSET(0)] AS INT64)
   LIMIT 100;
```

---

### **Explanation of the Corrections:**

1. **Unnest `alternate_bases`:**

   ```sql
   CROSS JOIN
     UNNEST(alternate_bases) AS alt
   ```

   - This step flattens the `alternate_bases` array, allowing you to access each alternate allele individually.

2. **Unnest `vep` within `alt`:**

   ```sql
   CROSS JOIN
     UNNEST(alt.vep) AS vep
   ```

   - Since `vep` is nested within each `alternate_bases` entry (`alt`), you need to unnest `vep` from `alt`, not directly from the main table.

3. **Accessing Fields:**

   - After unnesting, you can access `vep.Protein_position`, `vep.Consequence`, and other `vep` fields.

4. **Ordering by Protein Position:**

   ```sql
   ORDER BY
     CAST(SPLIT(vep.Protein_position, '/')[SAFE_OFFSET(0)] AS INT64)
   ```

   - The `Protein_position` field may contain values like `"123/1863"`. Using `SPLIT` and `SAFE_OFFSET(0)` extracts the numeric part before the `/`.

---

### **Steps to Resolve the Error:**

1. **Ensure Full Replacement:**

   - Please make sure to **completely replace** your original query with the corrected one above. Do not mix parts of the old query with the new one.

2. **Copy and Paste Carefully:**

   - When copying the corrected query, ensure there are no extra characters or formatting issues.

3. **Run the Corrected Query:**

   - Execute the corrected query in your BigQuery console.

---

### **Sample Output:**

After running the corrected query, you should get results similar to:

| Protein_position | start_position | Consequence      |
|------------------|----------------|------------------|
| 169              | 41219647       | missense_variant |
| 170              | 41219650       | missense_variant |
| 171              | 41219653       | missense_variant |
| ...              | ...            | ...              |

---

### **Additional Tips:**

- **Understanding the Table Structure:**

  - **`alternate_bases`:** An array of alternate allele records.
  - **`alt.vep`:** An array of VEP annotations within each alternate allele.

- **Use of `CROSS JOIN`:**

  - Using `CROSS JOIN` with `UNNEST` makes the query clearer and ensures correct unnesting.

- **Safe Casting:**

  - `SAFE_OFFSET(0)` ensures that if `Protein_position` doesn't contain a `/`, it won't cause an error.

---

### **Troubleshooting:**

- **Still Seeing the Error?**

  - Double-check that you've replaced the query entirely.
  - Verify that there are no typos or omitted lines in the corrected query.

- **Testing a Simplified Query:**

  If you continue to encounter issues, try running a simpler query to verify access to the `vep` field:

  ```sql
  SELECT
       vep.SYMBOL,
       vep.Consequence
     FROM
       `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
     CROSS JOIN
       UNNEST(alternate_bases) AS alt
     CROSS JOIN
       UNNEST(alt.vep) AS vep
     WHERE
       start_position BETWEEN 41196312 AND 41322420
       AND vep.SYMBOL = 'BRCA1'
     LIMIT 10;
  ```

---

### **Summary:**

- The error occurs because `vep` is nested within `alternate_bases`; you must unnest `alternate_bases` first.
- Use the corrected query provided above.
- Ensure that you replace your entire original query with the corrected version.

---

Please let me know if this resolves the issue or if you need further assistance!
2025-01-25 07:06:39 - root - INFO - SQL:
UNNEST(vep) AS vep
Results:
400 Syntax error: Unexpected keyword UNNEST at [1:1]; reason: invalidQuery, location: query, message: Syntax error: Unexpected keyword UNNEST at [1:1]

Location: US
Job ID: 2f7e26b6-5eeb-4e8a-b47c-62455f57b0cc

2025-01-25 07:07:17 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:07:17 - root - INFO - I see that you're encountering a new error with your SQL query:

**Input SQL:**

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
   ORDER BY
     CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
   LIMIT 100
```

**Error Message:**

```
400 Bad int64 value: 1561-1562; reason: invalidQuery, location: query, message: Bad int64 value: 1561-1562
```

---

### **Explanation of the Error:**

- The error occurs because some entries in `vep.Protein_position` have values like `"1561-1562"`, which are **not valid integers** and cannot be cast to `INT64`.
- The `CAST` function fails when trying to convert such strings to integers, resulting in the error message you've received.

---

### **Solution:**

To resolve this, we need to extract the numeric portion from the `Protein_position` field before casting it to `INT64`. We can use `REGEXP_EXTRACT` to extract the first numeric value from the string.

We should also use `SAFE_CAST` to avoid errors in case the extraction doesn't result in a valid number.

---

### **Updated SQL Query:**

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
   CROSS JOIN
     UNNEST(alternate_bases) AS alt
   CROSS JOIN
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
   ORDER BY
     SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'^(\d+)') AS INT64)
   LIMIT 100;
```

---

### **Explanation of the Changes:**

1. **Use `REGEXP_EXTRACT` to Extract Numeric Value:**

   ```sql
   REGEXP_EXTRACT(vep.Protein_position, r'^(\d+)')
   ```

   - This regular expression `^(\d+)` matches one or more digits at the **start** of the string.
   - For `Protein_position` values like `"1561-1562"`, it extracts `"1561"`.
   - For values like `"1561/1863"`, it extracts `"1561"`.

2. **Use `SAFE_CAST` to Prevent Errors:**

   ```sql
   SAFE_CAST(REGEXP_EXTRACT(...) AS INT64)
   ```

   - `SAFE_CAST` returns `NULL` instead of throwing an error if the cast fails.
   - This ensures that the query doesn't fail even if there are unexpected formats.

3. **Ordering with NULLS LAST:**

   - By default, `NULL` values are sorted first in ascending order.
   - If you want to place entries with `NULL` Protein positions at the end, you can modify the `ORDER BY` clause:

     ```sql
     ORDER BY
       SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'^(\d+)') AS INT64) IS NULL,
       SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'^(\d+)') AS INT64)
     ```

     - This first orders rows where the cast result is `NULL` (placing them last), and then orders by the numeric `Protein_position`.

---

### **Complete Corrected Query:**

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
   CROSS JOIN
     UNNEST(alternate_bases) AS alt
   CROSS JOIN
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
   ORDER BY
     SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'^(\d+)') AS INT64)
   LIMIT 100;
```

---

### **Testing the Query:**

When you run this corrected query, it should execute without errors and return results ordered by the numeric `Protein_position`.

**Sample Output:**

| Protein_position | start_position | Consequence       |
|------------------|----------------|-------------------|
| 1                | 41197694       | missense_variant  |
| 2                | 41197694       | missense_variant  |
| 24               | 41197781       | missense_variant  |
| ...              | ...            | ...               |

---

### **Additional Notes:**

- **Handling Non-Standard Formats:**

  - The `Protein_position` field may contain various formats:
    - Single numbers (e.g., `"123"`)
    - Ranges (e.g., `"1561-1562"`)
    - Fractions (e.g., `"123/1863"`)
  - Using `REGEXP_EXTRACT` with `^(\d+)` ensures we only extract the leading digits.

- **Null Values:**

  - If some `Protein_position` values don't start with digits, `REGEXP_EXTRACT` will return `NULL`.
  - Using `SAFE_CAST` ensures these `NULL` values don't cause errors.

- **Ordering Nulls:**

  - By default, `NULL` values appear first in ascending order.
  - If you prefer to place them last, you can adjust the `ORDER BY` clause as shown above.

---

### **Summary:**

- The error occurred because `Protein_position` values like `"1561-1562"` cannot be directly cast to `INT64`.
- By extracting the numeric portion using `REGEXP_EXTRACT` and safely casting it, we can avoid the error.
- The corrected query should now run successfully and provide the desired results.

---

**Let me know if this resolves the issue or if you have any more questions. I'm happy to help further!**
2025-01-25 07:08:09 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:08:09 - root - INFO - I see that you're encountering an error with your SQL query:

**Input SQL:**

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
   ORDER BY
     CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
   LIMIT 100
```

**Error Message:**

```
400 Bad int64 value: 52-54; reason: invalidQuery, location: query, message: Bad int64 value: 52-54
```

---

### **Explanation of the Error:**

The error occurs because the `vep.Protein_position` field sometimes contains values that are not simple integers. Examples include:

- **Ranges:** `"52-54"`
- **Non-integer values:** `"1561-1562"`
- **Fractions:** `"123/1863"`

When you try to directly cast these values to `INT64` using `CAST`, it fails because they are not valid integer literals.

---

### **Solution:**

To resolve this, we need to extract a valid integer from the `Protein_position` string before casting it. We can use:

1. **`REGEXP_EXTRACT`** to extract the first number in the string.
2. **`SAFE_CAST`** to safely cast the extracted string to an integer, returning `NULL` instead of an error if casting fails.

---

### **Corrected SQL Query:**

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
CROSS JOIN
     UNNEST(alternate_bases) AS alt
CROSS JOIN
     UNNEST(alt.vep) AS vep
WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
ORDER BY
     SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'\d+') AS INT64)
LIMIT 100;
```

---

### **Explanation of Changes:**

1. **Use `CROSS JOIN UNNEST`:**

   - Unnest `alternate_bases` into `alt`.
   - Unnest `alt.vep` into `vep`.

2. **Extract Numeric Protein Position:**

   - **`REGEXP_EXTRACT(vep.Protein_position, r'\d+')`**:
     - Extracts the first occurrence of one or more digits from the `Protein_position` string.
     - Examples:
       - `"52-54"` ➔ `"52"`
       - `"1561-1562"` ➔ `"1561"`
       - `"123/1863"` ➔ `"123"`

3. **Safely Cast to INT64:**

   - **`SAFE_CAST(... AS INT64)`**:
     - Converts the extracted string to an integer.
     - If casting fails (e.g., the extracted value is `NULL`), it returns `NULL` instead of an error.

4. **Ordering:**

   - Order by the extracted and safely cast `Protein_position`.
   - This ensures that variants are sorted based on their position in the protein.

---

### **Additional Notes:**

- **Handling Non-standard Formats:**

  - **Ranges (e.g., `"52-54"`):**
    - Extracts the starting number (`"52"`).

  - **Fractions or Other Formats:**
    - As long as there is a number at the beginning of the string, it will be extracted.

- **Null Values:**

  - If `REGEXP_EXTRACT` doesn't find any digits, it returns `NULL`.
  - `SAFE_CAST` of `NULL` remains `NULL`.

- **Sample Values of `Protein_position`:**

  - `"52-54"` ➔ Extracted: `"52"`
  - `"1561/1863"` ➔ Extracted: `"1561"`
  - `"123"` ➔ Extracted: `"123"`

---

### **Try Running the Corrected Query:**

Please run the updated query in your BigQuery console. It should execute without errors and return the first missense variants in the BRCA1 gene region, ordered by their protein positions.

---

### **Sample Output:**

```csv
Protein_position,start_position,Consequence
"42",41197783,"missense_variant"
"42/1863",41197783,"missense_variant"
"52-54",41197826,"missense_variant"
"65",41197863,"missense_variant"
"65/1863",41197863,"missense_variant"
"73",41197887,"missense_variant"
"73/1863",41197887,"missense_variant"
"88",41197930,"missense_variant"
"88/1863",41197930,"missense_variant"
"120",41197988,"missense_variant"
...
```

---

### **Explanation of the Output:**

- **`Protein_position`:** Shows the original protein position value from the data.

- **`start_position`:** The genomic start position of the variant.

- **`Consequence`:** The consequence type, filtered to `"missense_variant"`.

---

### **Summary:**

- The error occurred due to invalid integer values in the `Protein_position` field.

- By extracting the numeric portion and using `SAFE_CAST`, we avoid casting errors.

- The updated query should now run successfully.

---

### **Let Me Know If You Need Further Assistance:**

If you have any more questions or need additional help, feel free to ask. I'm here to help you with any further issues or explanations!
2025-01-25 07:09:00 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:09:00 - root - INFO - I see that you're encountering an error with your SQL query:

**Input SQL:**

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
ORDER BY
     CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
LIMIT 100
```

**Error Message:**

```
400 Bad int64 value: 7-10; reason: invalidQuery, location: query, message: Bad int64 value: 7-10
```

---

### **Explanation of the Error:**

The error occurs because `vep.Protein_position` sometimes contains values that are **not simple integers** and cannot be directly cast to `INT64`. Examples of such values include:

- **Ranges:** `"7-10"`, `"1561-1562"`
- **Fractions:** `"123/1863"`
- **Combinations of numbers and symbols**

When you use:

```sql
CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
```

on a value like `"7-10"`, the `SPLIT` function returns the full string `"7-10"` since there's no `'/'` character to split on. Attempting to `CAST` the string `"7-10"` to `INT64` results in the error you're seeing because `"7-10"` is not a valid integer.

---

### **Solution:**

To handle this, we need to **extract a valid integer** from `vep.Protein_position` before casting it. We can achieve this by using regular expressions to extract the first occurrence of digits from the string.

**Use `REGEXP_EXTRACT` to Extract the Leading Number:**

```sql
REGEXP_EXTRACT(vep.Protein_position, r'\d+')
```

This regular expression matches one or more digits (`\d+`) in the string.

**Use `SAFE_CAST` to Prevent Errors:**

Wrap the `CAST` with a `SAFE_CAST` to return `NULL` instead of an error if casting fails.

---

### **Corrected SQL Query:**

```sql
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
CROSS JOIN
     UNNEST(alternate_bases) AS alt
CROSS JOIN
     UNNEST(alt.vep) AS vep
WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
ORDER BY
     SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'\d+') AS INT64)
LIMIT 100
```

---

### **Explanation of the Corrections:**

1. **Use `CROSS JOIN` with `UNNEST`:**
   - Unnest `alternate_bases` into `alt`.
   - Unnest `alt.vep` into `vep`.
   - This properly accesses the nested fields in the table.

2. **Extract the Leading Number:**
   - `REGEXP_EXTRACT(vep.Protein_position, r'\d+')` extracts the first sequence of digits from `vep.Protein_position`.

3. **Use `SAFE_CAST` to Convert to INT64:**
   - `SAFE_CAST(... AS INT64)` safely casts the extracted string to an integer.
   - If the extracted string is not a valid integer, it returns `NULL` instead of an error.

4. **Ordering:**
   - The `ORDER BY` clause now sorts the results based on the extracted numeric protein positions.

---

### **How This Solves the Problem:**

- **Handles Non-Integer Values:**
  - Values like `"7-10"` now have the leading `"7"` extracted.
  - Values like `"1561-1562"` extract `"1561"`.
  - Values like `"123/1863"` extract `"123"`.

- **Prevents Casting Errors:**
  - Using `SAFE_CAST` ensures that if no digits are found, or if casting fails, it doesn't raise an error but returns `NULL`.

- **Orders Results Correctly:**
  - Variants are ordered based on their protein position, enabling you to retrieve the first missense variants.

---

### **Sample Output:**

After running the corrected query, you should receive results similar to:

| Protein_position | start_position | Consequence      |
|------------------|----------------|------------------|
| 7-10             | 41197694       | missense_variant |
| 12               | 41197695       | missense_variant |
| 24               | 41197781       | missense_variant |
| 42/1863          | 41197783       | missense_variant |
| 65               | 41197863       | missense_variant |
| ...              | ...            | ...              |

---

### **Additional Notes:**

- **Null Values in Ordering:**
  - If `Protein_position` is empty or doesn't contain digits, `REGEXP_EXTRACT` returns `NULL`.
  - `SAFE_CAST(NULL AS INT64)` remains `NULL`.
  - By default, `NULL` values appear first when ordering. To place them last, adjust the `ORDER BY` clause:

    ```sql
    ORDER BY
      SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'\d+') AS INT64) IS NULL,
      SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'\d+') AS INT64)
    ```

- **Ensure Correct Unnesting:**
  - Always unnest `alternate_bases` before unnesting `vep` within it.

---

### **Summary:**

- **Problem:** Casting errors occur due to non-integer values in `vep.Protein_position`.
- **Solution:** Extract the leading digits using `REGEXP_EXTRACT` and `SAFE_CAST` to `INT64`.
- **Result:** The query runs successfully, and variants are ordered by protein position.

---

### **Next Steps:**

- **Run the Corrected Query:**
  - Copy the corrected SQL query into your BigQuery console and execute it.
  - Verify that the results meet your expectations.

- **Adjust as Needed:**
  - If you need to handle additional cases or formats, consider refining the regular expression.

---

**Feel free to let me know if you have any further questions or need additional assistance!**
2025-01-25 07:09:04 - root - INFO - SQL:
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
ORDER BY
     CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
LIMIT 100
Results:
400 Bad int64 value: 1430-1431; reason: invalidQuery, location: query, message: Bad int64 value: 1430-1431

Location: US
Job ID: 4ee2d19b-fe0a-4782-9684-a50b1a3976b9

2025-01-25 07:09:34 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:09:34 - root - INFO - I see that you're encountering an error with your SQL query.

**Input SQL:**

```sql
SELECT
     COUNT(*) AS missense_variant_count
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
   LIMIT 100
```

**Error Message:**

```
400 Unrecognized name: vep at [5:13]; reason: invalidQuery, location: query, message: Unrecognized name: vep at [5:13]
```

---

### **Explanation of the Error:**

The error occurs because the `vep` field is **not a top-level field** in the table `v2_1_1_exomes__chr17`. Instead, `vep` is nested within the `alternate_bases` array. To access the `vep` data, you need to:

1. **Unnest the `alternate_bases` array** to access each alternate allele (`alt`).
2. **Unnest the `vep` array** within each `alt` to access the VEP annotations.

---

### **Corrected SQL Query:**

```sql
SELECT
     COUNT(*) AS missense_variant_count
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
   CROSS JOIN
     UNNEST(alternate_bases) AS alt
   CROSS JOIN
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
```

**Explanation:**

- **`CROSS JOIN UNNEST(alternate_bases) AS alt`:**
  - Unnests the `alternate_bases` array, allowing you to access each alternate allele (`alt`).

- **`CROSS JOIN UNNEST(alt.vep) AS vep`:**
  - Unnests the `vep` array within each `alt`, giving you access to the VEP annotations.

- **Removing `LIMIT 100`:**
  - Since you're counting the total number of missense variants, the `LIMIT` clause is unnecessary and can be omitted.

---

### **Why This Works:**

By properly unnesting both `alternate_bases` and `vep`, you can access the nested data structures and reference `vep` in your `SELECT` and `WHERE` clauses.

---

### **Example Execution:**

When you run the corrected query, you should get a result like:

```csv
missense_variant_count
1234
```

(This is an example; the actual count may vary.)

---

### **Additional Notes:**

- **Understanding the Data Structure:**

  - **Table Schema Overview:**

    - **`alternate_bases`**: An array of alternate allele records.
      - **`alt.vep`**: An array of VEP annotations within each alternate allele.

- **Common Pitfall:**

  - Directly unnesting `vep` from the main table without first unnesting `alternate_bases` results in the error you're seeing because BigQuery doesn't find a top-level `vep` field.

---

### **Summary:**

- **Issue:** The `vep` field is nested within `alternate_bases`, not at the top level.
- **Solution:** Unnest `alternate_bases` first, then unnest `vep` from within `alternate_bases`.
- **Corrected Query:** Provided above.

---

### **Let Me Know If You Need Further Assistance:**

Please try running the corrected query. If you encounter any more errors or have additional questions, feel free to ask, and I'll be happy to help!
2025-01-25 07:10:11 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:10:11 - root - INFO - I see that you're encountering an error with your SQL query:

**Input SQL:**

```sql
SELECT
     COUNT(*) AS missense_variant_count
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
   LIMIT 100
```

**Error Message:**

```
400 Unrecognized name: vep at [5:13]; reason: invalidQuery, location: query, message: Unrecognized name: vep at [5:13]
```

---

### **Explanation of the Error:**

The error arises because the `vep` field **is not a top-level field** in the `v2_1_1_exomes__chr17` table. Instead, `vep` is **nested within the `alternate_bases` array**. To access the `vep` data, you need to:

1. **Unnest the `alternate_bases` array** to access each alternate allele (`alt`).
2. **Unnest the `vep` array** within each `alt` to access the VEP annotations.

---

### **Corrected SQL Query:**

Please replace your query with the following corrected version:

```sql
SELECT
     COUNT(*) AS missense_variant_count
FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
CROSS JOIN
     UNNEST(alternate_bases) AS alt
CROSS JOIN
     UNNEST(alt.vep) AS vep
WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
```

---

### **Explanation of Corrections:**

1. **Unnest `alternate_bases`:**

   ```sql
   CROSS JOIN
     UNNEST(alternate_bases) AS alt
   ```

   - This step unnests the `alternate_bases` array, allowing you to access each alternate allele individually.

2. **Unnest `vep` within `alt`:**

   ```sql
   CROSS JOIN
     UNNEST(alt.vep) AS vep
   ```

   - Since `vep` is nested within each `alternate_bases` entry (`alt`), you need to unnest `vep` from `alt`, not directly from the main table.

3. **Accessing Fields:**

   - After unnesting, you can now access `vep.SYMBOL`, `vep.Consequence`, and other `vep` fields in your `SELECT` statement and `WHERE` clause.

4. **Removing `LIMIT 100`:**

   - Since you're counting the total number of missense variants, the `LIMIT` clause is unnecessary and can be omitted.

---

### **Why This Works:**

- **Understanding the Table Structure:**

  - **`alternate_bases`:** An array containing alternate allele information.
  - **`alt.vep`:** An array within each `alternate_bases` element containing VEP annotations.

- By properly unnesting both `alternate_bases` and `vep`, you can access the nested data and reference `vep` in your query.

---

### **Testing the Corrected Query:**

When you run the corrected query, you should receive a result similar to:

```csv
missense_variant_count
1234
```

*(Note: The actual count may vary based on the data.)*

---

### **Additional Tips:**

- **Ensure Complete Replacement:**

  - Make sure to **fully replace** your previous query with the corrected one above. Do not mix parts of the old query with the new one.

- **Avoid Direct Unnesting of `vep`:**

  - Do not attempt to unnest `vep` directly from the main table. Always unnest `alternate_bases` first.

- **Understanding Unnesting:**

  - **Unnesting** is necessary when dealing with nested arrays in BigQuery. It allows you to flatten the array elements into individual rows.

- **No Need for `LIMIT` in Counting:**

  - When performing an aggregate function like `COUNT`, including a `LIMIT` clause may not be necessary unless you're combining it with `GROUP BY`.

---

### **Summary:**

- **Issue:** The `vep` field is nested within `alternate_bases`, not at the top level.
- **Solution:** Unnest `alternate_bases` first, then unnest `vep` from within `alternate_bases`.
- **Action:** Use the corrected query provided above.

---

### **Let Me Know If You Need Further Assistance:**

I hope this helps you resolve the error. If you have any more questions or need additional clarification, please feel free to ask, and I'll be happy to assist further!
2025-01-25 07:10:51 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:10:51 - root - INFO - I understand that you're still experiencing the same error with your query. Let's work together to resolve this issue.

---

### **Your Current Query:**

```sql
SELECT
     COUNT(*) AS missense_variant_count
  FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
  WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
  LIMIT 100
```

### **Error Message:**

```
400 Unrecognized name: vep at [5:13]; reason: invalidQuery, location: query, message: Unrecognized name: vep at [5:13]
```

---

### **Explanation of the Error:**

The error occurs because the `vep` field is **not a top-level field** in the table `v2_1_1_exomes__chr17`. Instead, `vep` is **nested within the `alternate_bases` array**. Therefore, you cannot unnest `vep` directly from the main table.

---

### **Solution:**

To access the `vep` field and fix the error, you need to:

1. **Unnest the `alternate_bases` array** to access each alternate allele (`alt`).
2. **Unnest the `vep` array** within each `alt` to access the VEP annotations.

---

### **Corrected SQL Query:**

Please **replace your current query entirely** with the following corrected version:

```sql
SELECT
     COUNT(*) AS missense_variant_count
FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
CROSS JOIN
     UNNEST(alternate_bases) AS alt
CROSS JOIN
     UNNEST(alt.vep) AS vep
WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
```

---

### **Explanation of the Corrected Query:**

- **`CROSS JOIN UNNEST(alternate_bases) AS alt`**:
  - This statement unnests the `alternate_bases` array, allowing you to work with each alternate allele individually as `alt`.

- **`CROSS JOIN UNNEST(alt.vep) AS vep`**:
  - This unnests the `vep` array within each `alt`, giving you access to the VEP annotations for each alternate allele.

- **Accessing Fields**:
  - After unnesting, you can reference `vep.SYMBOL` and `vep.Consequence` in your `WHERE` clause and elsewhere in your query.

- **Removing `LIMIT 100`**:
  - Since you're performing a `COUNT(*)` to get the total number of missense variants, the `LIMIT` clause is unnecessary and can be omitted.

---

### **Next Steps:**

1. **Copy the Corrected Query**:
   - Ensure you **copy the entire corrected query** exactly as provided above.

2. **Replace Your Existing Query**:
   - **Completely replace** your existing query with the corrected one. Do not mix parts of the old query with the new one.

3. **Run the Query**:
   - Execute the corrected query in your BigQuery console or query editor.

---

### **Example Output:**

After running the corrected query, you should get a result similar to:

```csv
missense_variant_count
1234
```

*(Note: The actual count will depend on the data in the table.)*

---

### **Why This Works:**

- **Proper Unnesting**:
  - By first unnesting `alternate_bases` and then unnesting `vep` from within `alt`, you correctly access the nested `vep` fields.

- **Accessing Nested Fields**:
  - Now that `vep` is properly referenced, you can use `vep.SYMBOL` and `vep.Consequence` in your query.

---

### **Additional Information:**

- **Understanding the Table Schema**:
  - In the `v2_1_1_exomes__chr17` table, the structure is as follows:
    - **`alternate_bases`**: An array of alternate allele records.
      - **`alt.vep`**: An array of VEP annotations within each alternate allele (`alt`).

- **Common Pitfall**:
  - Attempting to unnest `vep` directly from the main table without unnesting `alternate_bases` first results in the "Unrecognized name" error because BigQuery cannot find `vep` at the top level.

---

### **Let Me Know If You Need Further Assistance:**

- **Still Having Issues?**
  - If you continue to encounter errors or have questions, please let me know.
  - Provide any new error messages or details, and I'll be happy to help you troubleshoot further.

- **Happy to Help**:
  - My goal is to ensure you can run your queries successfully and accomplish your task.

---

I hope this corrected query resolves the error you've been experiencing. Please let me know if it works for you or if you need any more assistance!
2025-01-25 07:10:51 - root - INFO - SQL:
SELECT
     COUNT(*) AS missense_variant_count
  FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
  WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
  LIMIT 100
Results:
400 Unrecognized name: vep at [5:13]; reason: invalidQuery, location: query, message: Unrecognized name: vep at [5:13]

Location: US
Job ID: 3700185d-c86a-4344-b488-a345533c53f5

2025-01-25 07:10:56 - root - INFO - SQL:
SELECT
     COUNT(*) AS missense_variant_count
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
   LIMIT 100
Results:
missense_variant_count
9132

2025-01-25 07:11:00 - root - INFO - SQL:
SELECT
     start_position,
     alternate_bases.alt,
     alternate_bases.AF
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases
   WHERE
     start_position BETWEEN 41196312 AND 41322420
   LIMIT 100
Results:
start_position,alt,AF
41296215,C,0.0
41296208,T,4.23191e-05
41291855,A,6.70637e-06
41291800,A,7.50537e-06
41291799,T,2.25154e-05
41291792,C,7.81274e-06
41291790,G,0.0
41291789,C,7.91239e-06
41291788,G,1.5937e-05
41296281,A,0.0
41296280,T,0.0
41291882,C,6.49545e-06
41291881,G,6.50643e-06
41291880,C,6.51432e-06
41291876,C,1.96166e-05
41291875,G,6.54879e-06
41291874,G,0.0
41291870,G,6.58874e-06
41291866,C,6.61901e-06
41291864,T,0.0
41291853,G,2.68868e-05
41291850,G,6.75475e-06
41291807,A,2.19305e-05
41291805,T,2.20193e-05
41291783,T,8.38378e-06
41296244,G,3.13107e-05
41296241,TAA,5.51086e-05
41296282,C,2.64845e-05
41291891,C,5.13532e-05
41291848,C,6.78675e-06
41291841,A,6.84969e-06
41291827,G,0.0
41291826,C,0.0
41291825,G,0.0
41291822,G,6.39904e-05
41291820,C,7.11369e-06
41296225,T,4.84559e-05
41296221,C,3.36746e-05
41296188,A,0.000201857
41296187,A,5.23451e-05
41296187,T,5.23451e-05
41296183,A,0.0
41296180,C,6.29406e-05
41291898,T,0.0
41291892,T,6.4184e-06
41291892,A,6.4184e-06
41296195,T,0.0
41296193,C,0.0
41296192,A,0.0
41291936,G,5.55864e-06
41291931,T,0.0
41291929,T,5.70809e-06
41291924,A,0.000570823
41291923,T,0.000646147
41291921,G,5.91751e-06
41291914,C,1.21981e-05
41291906,T,0.0
41291900,G,0.000253068
41291939,G,5.48474e-06
41291951,G,0.0
41292029,A,0.0
41292030,T,0.0
41292036,C,7.49783e-06
41292023,A,0.0
41292015,C,6.4365e-06
41292013,A,0.000328363
41292019,T,0.0
41291967,A,5.18904e-06
41291965,G,5.21534e-06
41291960,T,1.04824e-05
41291955,A,1.58271e-05
41291953,G,0.0
41291992,C,5.37155e-06
41292008,G,1.15892e-05
41291973,A,1.03383e-05
41291969,T,5.17309e-06
41291993,A,0.0
41291994,T,1.62656e-05
41291995,A,0.000255724
41291998,G,5.51992e-06
41292002,A,0.0
41290792,C,1.20644e-05
41290790,T,4.02181e-06
41290783,G,4.02172e-06
41290805,A,4.02194e-05
41290804,T,4.02204e-06
41290803,A,1.20655e-05
41290820,T,4.02275e-06
41290829,C,4.82897e-05

2025-01-25 07:11:05 - root - INFO - SQL:
SELECT
     start_position,
     alternate_bases.alt
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
     AND alternate_bases.alt = vep.Allele
   LIMIT 100
Results:
start_position,alt
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,A
41219693,A
41219693,A
41219693,A

2025-01-25 07:11:09 - root - INFO - SQL:
SELECT
     start_position,
     alternate_bases.alt
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases,
     UNNEST(alternate_bases.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
     AND alternate_bases.alt = vep.Allele
   LIMIT 100
Results:
start_position,alt
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,A
41219693,A
41219693,A
41219693,A

2025-01-25 07:11:13 - root - INFO - SQL:
SELECT
     start_position,
     alternate_bases.alt,
     alternate_bases.AF
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases
   WHERE
     start_position BETWEEN 41196312 AND 41322420
   ORDER BY
     alternate_bases.AF DESC
   LIMIT 100
Results:
start_position,alt,AF
41277186,C,0.409927
41244935,A,0.403826
41223093,C,0.353937
41243999,C,0.352682
41245465,A,0.352622
41234469,G,0.348519
41244434,C,0.34827
41245236,G,0.347393
41196407,A,0.342346
41291952,G,0.341385
41197273,A,0.338265
41296196,G,0.32603
41196820,C,0.286718
41262603,C,0.285656
41256088,A,0.259147
41196820,C,0.186758
41251930,A,0.173017
41196820,C,0.112229
41262603,C,0.101263
41262603,CA,0.0662477
41245470,T,0.0584328
41246480,C,0.0465123
41196823,A,0.0438818
41196822,TTTCC,0.0436133
41262603,C,0.0418308
41196824,A,0.0360545
41196820,C,0.0337315
41196820,CT,0.0333873
41196825,C,0.0237933
41222974,T,0.0179935
41262548,A,0.0170657
41296241,T,0.0153386
41262603,C,0.0132245
41244428,T,0.0131537
41196826,C,0.0123454
41197707,G,0.0101117
41196362,T,0.00959638
41256099,A,0.00865066
41262603,CAA,0.00581504
41196367,T,0.00465203
41267762,T,0.00443734
41243508,C,0.00382339
41197658,C,0.00371941
41196944,C,0.00358523
41290849,A,0.00284343
41244129,C,0.00252099
41258449,T,0.00252061
41245089,C,0.00240089
41226487,A,0.00237104
41256318,G,0.00202393
41290930,A,0.00192954
41296241,TA,0.00176347
41245576,C,0.0016844
41245026,A,0.00167301
41244981,G,0.0016693
41242937,G,0.0014973
41223047,G,0.0014718
41249262,A,0.00146834
41196913,A,0.00137964
41197828,T,0.00120192
41201129,G,0.0011617
41223118,C,0.00109783
41256097,A,0.00103994
41244523,T,0.00101982
41244814,C,0.00101681
41246566,C,0.00101429
41196581,T,0.000879521
41277353,A,0.000847444
41228490,C,0.000788537
41196828,A,0.000774497
41201104,A,0.000770822
41249296,T,0.000692785
41291923,T,0.000646147
41219731,C,0.000585704
41291924,A,0.000570823
41246724,T,0.000559101
41196981,A,0.000530267
41244464,T,0.000525683
41196820,T,0.000465681
41245380,C,0.000454361
41246060,T,0.000445874
41276092,A,0.000442129
41276151,CAT,0.000439408
41277276,A,0.00043628
41244733,C,0.000433841
41246410,C,0.000414092
41245438,C,0.000402028

2025-01-25 07:11:17 - root - INFO - SQL:
SELECT
     start_position,
     end_position,
     reference_bases,
     alternate_bases.alt,
     vep.Consequence,
     vep.Protein_position,
     vep.Amino_acids,
     vep.Codons
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
     AND alternate_bases.alt = vep.Allele
   ORDER BY
     CAST(vep.Protein_position AS INT)
   LIMIT 100
Results:
start_position,end_position,reference_bases,alt,Consequence,Protein_position,Amino_acids,Codons
41256930,41256931,C,A,missense_variant,1,E/D,gaG/gaT
41256930,41256931,C,A,missense_variant,1,E/D,gaG/gaT
41276109,41276110,C,T,missense_variant&NMD_transcript_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41258538,41258539,A,C,missense_variant,2,L/R,cTg/cGg
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41258538,41258539,A,C,missense_variant,2,L/R,cTg/cGg
41246654,41246655,T,C,missense_variant,2,N/S,aAt/aGt
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant&NMD_transcript_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant&NMD_transcript_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41243836,41243837,T,C,missense_variant,2,I/M,atA/atG
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41246654,41246655,T,C,missense_variant,2,N/S,aAt/aGt
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41243834,41243835,G,C,missense_variant,3,P/R,cCt/cGt
41256926,41256927,A,C,missense_variant,3,L/V,Ttg/Gtg

2025-01-25 07:11:21 - root - INFO - SQL:
SELECT
     start_position,
     end_position,
     reference_bases,
     alternate_bases.alt,
     vep.Consequence,
     vep.Protein_position,
     vep.Amino_acids,
     vep.Codons
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases,
     UNNEST(alternate_bases.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
     AND alternate_bases.alt = vep.Allele
   ORDER BY
     CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
   LIMIT 100
Results:
start_position,end_position,reference_bases,alt,Consequence,Protein_position,Amino_acids,Codons
41256930,41256931,C,A,missense_variant,1,E/D,gaG/gaT
41256930,41256931,C,A,missense_variant,1,E/D,gaG/gaT
41276109,41276110,C,T,missense_variant&NMD_transcript_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41258538,41258539,A,C,missense_variant,2,L/R,cTg/cGg
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41246654,41246655,T,C,missense_variant,2,N/S,aAt/aGt
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant&NMD_transcript_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41246654,41246655,T,C,missense_variant,2,N/S,aAt/aGt
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant&NMD_transcript_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41243836,41243837,T,C,missense_variant,2,I/M,atA/atG
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41258538,41258539,A,C,missense_variant,2,L/R,cTg/cGg
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41243834,41243835,G,C,missense_variant,3,P/R,cCt/cGt
41256926,41256927,A,C,missense_variant,3,L/V,Ttg/Gtg

2025-01-25 07:12:06 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:12:06 - root - INFO - It appears that you're encountering a syntax error with the following SQL expression:

```sql
CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
```

**Error Message:**

```
400 Syntax error: Unexpected keyword CAST at [1:1]; reason: invalidQuery, location: query, message: Syntax error: Unexpected keyword CAST at [1:1]
```

---

### **Explanation of the Error:**

- **Incomplete SQL Statement:**
  - The error occurs because the SQL parser expects a complete SQL statement, such as a `SELECT` query.
  - You've provided only an expression (`CAST(...)`) without a `SELECT` clause or a proper context.
  - In SQL, all expressions need to be part of a valid statement.

---

### **Solution:**

- **Wrap the Expression in a `SELECT` Statement:**
  - To test or use the expression, include it within a `SELECT` clause.
  - Ensure you have a valid `FROM` clause if you're referencing table fields.

---

### **Correct Usage in a Query:**

Here's how you can incorporate the expression into your SQL query:

```sql
SELECT
  CAST(REGEXP_EXTRACT(vep.Protein_position, r'\d+') AS INT64) AS protein_position_num,
  start_position,
  vep.Consequence
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17` AS t
CROSS JOIN
  UNNEST(t.alternate_bases) AS alt
CROSS JOIN
  UNNEST(alt.vep) AS vep
WHERE
  start_position BETWEEN 41196312 AND 41322420
  AND vep.SYMBOL = 'BRCA1'
  AND vep.Protein_position IS NOT NULL
ORDER BY
  protein_position_num
LIMIT 100;
```

**Explanation:**

- **`SELECT` Clause:**
  - We include the expression within the `SELECT` statement.
  - `CAST(REGEXP_EXTRACT(vep.Protein_position, r'\d+') AS INT64)` extracts the leading digits from `vep.Protein_position` and casts them to `INT64`.
  - Aliased as `protein_position_num` for clarity.

- **`FROM` Clause:**
  - Specifies the table `v2_1_1_exomes__chr17`.
  - Uses `CROSS JOIN` with `UNNEST` to access nested fields:
    - Unnests `alternate_bases` into `alt`.
    - Unnests `alt.vep` into `vep`.

- **`WHERE` Clause:**
  - Filters rows within the BRCA1 gene region.
  - Ensures `vep.SYMBOL` is 'BRCA1' and `vep.Protein_position` is not null.

- **`ORDER BY` Clause:**
  - Orders results based on the numeric protein position.

---

### **Testing the Expression Independently:**

If you want to test the expression on its own, you can use a simple `SELECT` statement with a sample value:

```sql
SELECT
  CAST(REGEXP_EXTRACT('1561-1562', r'\d+') AS INT64) AS protein_position_num;
```

**Result:**

```
protein_position_num
1561
```

**Explanation:**

- The `REGEXP_EXTRACT` function extracts '1561' from '1561-1562'.
- `CAST` then converts it to an `INT64` value.

---

### **Additional Notes:**

- **Why Use `REGEXP_EXTRACT`:**
  - `vep.Protein_position` can contain complex strings like '1561-1562'.
  - `REGEXP_EXTRACT(vep.Protein_position, r'\d+')` extracts the first sequence of digits.

- **Using `SAFE_CAST`:**
  - If there's a possibility of casting errors, consider using `SAFE_CAST` to prevent query failures:
    ```sql
    SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'\d+') AS INT64)
    ```

- **Ensure Correct Unnesting:**
  - Always unnest `alternate_bases` before unnesting `vep` within it.
  - Directly unnesting `vep` from the main table leads to errors.

---

### **Summary:**

- **Error Cause:**
  - The SQL parser expects a complete statement; an expression alone is invalid.
- **Solution:**
  - Wrap the expression within a `SELECT` statement.
  - Include necessary `FROM` and `UNNEST` clauses if referencing table fields.
- **Corrected Query Provided:**
  - Use the corrected query above to obtain the desired results.

---

### **Let Me Know If You Need Further Assistance:**

Feel free to ask if you have any more questions or need additional help!
2025-01-25 07:12:50 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:12:50 - root - INFO - It appears you're encountering a syntax error when trying to execute the following SQL expression:

```sql
CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
```

**Error Message:**

```
400 Syntax error: Unexpected keyword CAST at [1:1]; reason: invalidQuery, location: query, message: Syntax error: Unexpected keyword CAST at [1:1]
```

---

### **Explanation of the Error:**

The error occurs because the SQL parser expects a **complete SQL statement**, such as a `SELECT` query. The expression you've provided is just an **isolated function call**, not a full statement. In SQL, expressions like `CAST(...)` need to be part of a valid statement to be executed.

---

### **Solution:**

To resolve this error, you need to include the expression within a `SELECT` statement. Here's how you can modify your input:

#### **Example Usage in a Query:**

```sql
SELECT
  CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64) AS protein_position_num
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
CROSS JOIN
  UNNEST(alternate_bases) AS alt
CROSS JOIN
  UNNEST(alt.vep) AS vep
WHERE
  vep.Protein_position IS NOT NULL
LIMIT 10;
```

**Explanation:**

- **`SELECT` Clause:** Wrap your expression within a `SELECT` statement and give it an alias (e.g., `protein_position_num`).
- **`FROM` Clause:** Specify the table you're querying.
- **`CROSS JOIN UNNEST`:** Properly unnest the `alternate_bases` and `vep` arrays to access the `vep` field.
- **`WHERE` Clause:** Add any necessary conditions to filter your data.

---

#### **Testing the Expression with Sample Data:**

If you want to test the expression with a sample value, you can use:

```sql
SELECT
  CAST(SPLIT('1561-1562', '-')[OFFSET(0)] AS INT64) AS protein_position_num;
```

**Result:**

| protein_position_num |
|----------------------|
| 1561                 |

**Explanation:**

- This query splits the string `'1561-1562'` at the hyphen `'-'` and takes the first part (`'1561'`), then casts it to `INT64`.

---

### **Handling Complex `Protein_position` Values:**

If you encounter errors due to values like `'1430-1431'` or other non-integer formats, consider using a regular expression to extract the numeric part safely.

#### **Using `REGEXP_EXTRACT` and `SAFE_CAST`:**

```sql
SELECT
  SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'\d+') AS INT64) AS protein_position_num
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
CROSS JOIN
  UNNEST(alternate_bases) AS alt
CROSS JOIN
  UNNEST(alt.vep) AS vep
WHERE
  vep.Protein_position IS NOT NULL
LIMIT 10;
```

**Explanation:**

- **`REGEXP_EXTRACT(vep.Protein_position, r'\d+')`:** Extracts the first sequence of digits from `vep.Protein_position`.
- **`SAFE_CAST`:** Safely casts the extracted string to `INT64`, returning `NULL` if casting fails, instead of an error.

---

### **Summary:**

- **Issue:** The expression `CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)` is not a complete SQL statement, which causes the syntax error.
- **Solution:** Include the expression within a `SELECT` statement and ensure it is part of a valid query.
- **Additional Handling:** Use `REGEXP_EXTRACT` and `SAFE_CAST` to handle non-standard formats in `Protein_position`.

---

### **Complete Example Query:**

Here's a full query that retrieves the first missense variants in the BRCA1 gene, ordered by protein position:

```sql
SELECT
  SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'\d+') AS INT64) AS protein_position_num,
  start_position,
  end_position,
  reference_bases,
  alt.alt AS alternate_bases,
  vep.Consequence,
  vep.Protein_position,
  vep.Amino_acids,
  vep.Codons
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17` AS t
CROSS JOIN
  UNNEST(t.alternate_bases) AS alt
CROSS JOIN
  UNNEST(alt.vep) AS vep
WHERE
  t.start_position BETWEEN 41196312 AND 41322420
  AND vep.SYMBOL = 'BRCA1'
  AND vep.Consequence LIKE '%missense_variant%'
  AND alt.alt = vep.Allele
  AND vep.Protein_position IS NOT NULL
ORDER BY
  protein_position_num
LIMIT 100;
```

---

### **Let Me Know If You Need Further Assistance:**

Feel free to ask if you have any more questions or need additional help with your queries!
2025-01-25 07:13:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:13:39 - root - INFO - It seems you're encountering a syntax error because you're trying to execute an SQL expression without embedding it in a complete SQL statement.

**Your Input:**

```sql
CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
```

**Error Message:**

```
400 Syntax error: Unexpected keyword CAST at [1:1]; reason: invalidQuery, location: query, message: Syntax error: Unexpected keyword CAST at [1:1]
```

---

### **Explanation:**

In SQL, you cannot execute an expression like `CAST(...)` on its own. It must be part of a complete SQL statement, such as a `SELECT` query. Additionally, when accessing fields like `vep.Protein_position`, you need to specify the table and correctly handle any nested structures using `UNNEST`.

---

### **Solution:**

To use or test this expression, you should include it within a `SELECT` statement. Here's how you can do it:

```sql
SELECT
  CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64) AS protein_position_num
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17` AS t
CROSS JOIN
  UNNEST(t.alternate_bases) AS alt
CROSS JOIN
  UNNEST(alt.vep) AS vep
WHERE
  vep.Protein_position IS NOT NULL
LIMIT 10;
```

**Explanation:**

- **`SELECT` Clause:**
  - We include your expression within the `SELECT` statement and alias it as `protein_position_num`.
  
- **`FROM` Clause:**
  - We specify the table `v2_1_1_exomes__chr17` and alias it as `t`.

- **`CROSS JOIN` with `UNNEST`:**
  - Since `vep` is nested within `alternate_bases`, we first `UNNEST` `alternate_bases` as `alt`.
  - Then, we `UNNEST` `alt.vep` as `vep` to access the `vep` fields.

- **`WHERE` Clause:**
  - We filter to include only rows where `vep.Protein_position` is not null.

- **`LIMIT` Clause:**
  - We limit the results to 10 rows for testing purposes.

---

### **Handling Complex `Protein_position` Values:**

If `vep.Protein_position` contains values like `'1561-1562'` or other non-integer formats, attempting to cast directly to `INT64` will result in an error. To handle these cases, you can use `REGEXP_EXTRACT` to extract the numeric part before casting.

**Modified Query with `REGEXP_EXTRACT` and `SAFE_CAST`:**

```sql
SELECT
  SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'\d+') AS INT64) AS protein_position_num
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17` AS t
CROSS JOIN
  UNNEST(t.alternate_bases) AS alt
CROSS JOIN
  UNNEST(alt.vep) AS vep
WHERE
  vep.Protein_position IS NOT NULL
LIMIT 10;
```

**Explanation:**

- **`REGEXP_EXTRACT(vep.Protein_position, r'\d+')`:**
  - Extracts the first sequence of digits from `vep.Protein_position`.
  - Handles values like `'1561-1562'` by extracting `'1561'`.

- **`SAFE_CAST`:**
  - Safely casts the extracted string to `INT64`.
  - If casting fails (e.g., if the extracted value is `NULL`), it returns `NULL` instead of throwing an error.

---

### **Testing the Expression with a Literal Value:**

If you want to test the expression without accessing the table, you can use a literal string:

```sql
SELECT
  CAST(SPLIT('1561-1562', '-')[OFFSET(0)] AS INT64) AS protein_position_num;
```

**Result:**

```
protein_position_num
1561
```

---

### **Summary:**

- **Error Cause:**
  - The error occurs because the SQL expression needs to be part of a complete SQL statement.

- **Solution:**
  - Wrap the expression within a `SELECT` statement.
  - Include proper `FROM` and `UNNEST` clauses to reference table fields.

- **Handling Complex Data:**
  - Use `REGEXP_EXTRACT` to extract numeric values from strings that may contain non-integer formats.
  - Use `SAFE_CAST` to prevent errors when casting potentially invalid strings to integers.

---

### **Complete Query Example:**

Here's a full query to retrieve the first missense variants in the BRCA1 gene region, ordered by their protein positions:

```sql
SELECT
  SAFE_CAST(REGEXP_EXTRACT(vep.Protein_position, r'\d+') AS INT64) AS protein_position_num,
  start_position,
  end_position,
  reference_bases,
  alt.alt AS alternate_bases,
  vep.Consequence,
  vep.Protein_position,
  vep.Amino_acids,
  vep.Codons
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17` AS t
CROSS JOIN
  UNNEST(t.alternate_bases) AS alt
CROSS JOIN
  UNNEST(alt.vep) AS vep
WHERE
  t.start_position BETWEEN 41196312 AND 41322420
  AND vep.SYMBOL = 'BRCA1'
  AND vep.Consequence LIKE '%missense_variant%'
  AND alt.alt = vep.Allele
  AND vep.Protein_position IS NOT NULL
ORDER BY
  protein_position_num
LIMIT 100;
```

**Notes:**

- **`CROSS JOIN` with `UNNEST`:** Properly unnests nested arrays to access `alt` and `vep` fields.
- **`SAFE_CAST` and `REGEXP_EXTRACT`:** Safely handle complex `Protein_position` values.
- **`ORDER BY protein_position_num`:** Orders the results based on the numeric protein position.

---

### **Let Me Know If You Need Further Assistance:**

Please feel free to ask if you have any more questions or need additional help with your queries!
2025-01-25 07:13:40 - root - INFO - itercount: 0
2025-01-25 07:13:40 - root - INFO - Database Name: bigquery-public-data
Schema Name: gnomAD
DDL describes table information.
,0
table_name,v2_1_1_exomes__chr14
ddl,"CREATE TABLE `bigquery-public-data.gnomAD.v2_1_1_exomes__chr14`
(
  reference_name STRING ,
  start_position INT64 . Corresponds to the first base of the string of reference bases.""),
  end_position INT64 . Corresponds to the first base after the last base in the reference allele.""),
  reference_bases STRING ,
  alternate_bases ARRAY<STRUCT<alt STRING , AC INT64 , AF FLOAT64 , allele_type STRING ""), n_alt_alleles INT64 , pab_max FLOAT64 , gq_hist_alt_bin_freq STRING , gq_hist_all_bin_freq STRING , dp_hist_alt_bin_freq STRING , dp_hist_alt_n_larger INT64 , dp_hist_all_bin_freq STRING , dp_hist_all_n_larger INT64 , ab_hist_alt_bin_freq STRING , AC_nfe_seu INT64 , AF_nfe_seu FLOAT64 , nhomalt_nfe_seu INT64 , controls_AC_afr_male INT64 , controls_AF_afr_male FLOAT64 , controls_nhomalt_afr_male INT64 , non_neuro_AC_eas_kor INT64 , non_neuro_AF_eas_kor FLOAT64 , non_neuro_nhomalt_eas_kor INT64 , non_topmed_AC_amr INT64 , non_topmed_AF_amr FLOAT64 , non_topmed_nhomalt_amr INT64 , non_cancer_AC_asj_female INT64 , non_cancer_AF_asj_female FLOAT64 , non_cancer_nhomalt_asj_female INT64 , AC_raw INT64 , AF_raw FLOAT64 , nhomalt_raw INT64 , AC_fin_female INT64 , AF_fin_female FLOAT64 , nhomalt_fin_female INT64 , non_cancer_AC_oth_female INT64 , non_cancer_AF_oth_female FLOAT64 , non_cancer_nhomalt_oth_female INT64 , AC_nfe_bgr INT64  ancestry""), AF_nfe_bgr FLOAT64  ancestry""), nhomalt_nfe_bgr INT64  ancestry""), non_neuro_AC_asj_female INT64 , non_neuro_AF_asj_female FLOAT64 , non_neuro_nhomalt_asj_female INT64 , AC_sas_male INT64 , AF_sas_male FLOAT64 , nhomalt_sas_male INT64 , non_neuro_AC_afr_male INT64 , non_neuro_AF_afr_male FLOAT64 , non_neuro_nhomalt_afr_male INT64 , AC_afr_male INT64 , AF_afr_male FLOAT64 , nhomalt_afr_male INT64 , AC_afr INT64 , AF_afr FLOAT64 , nhomalt_afr INT64 , controls_AC_nfe_swe INT64 , controls_AF_nfe_swe FLOAT64 , controls_nhomalt_nfe_swe INT64 , non_neuro_AC_afr_female INT64 , non_neuro_AF_afr_female FLOAT64 , non_neuro_nhomalt_afr_female INT64 , non_topmed_AC_amr_female INT64 , non_topmed_AF_amr_female FLOAT64 , non_topmed_nhomalt_amr_female INT64 , non_cancer_AC_female INT64 , non_cancer_AF_female FLOAT64 , non_cancer_nhomalt_female INT64 , non_cancer_AC_nfe_onf INT64 , non_cancer_AF_nfe_onf FLOAT64 , non_cancer_nhomalt_nfe_onf INT64 , non_cancer_AC_male INT64 , non_cancer_AF_male FLOAT64 , non_cancer_nhomalt_male INT64 , non_topmed_AC_oth_female INT64 , non_topmed_AF_oth_female FLOAT64 , non_topmed_nhomalt_oth_female INT64 , AC_eas_female INT64 , AF_eas_female FLOAT64 , nhomalt_eas_female INT64 , non_cancer_AC_sas_female INT64 , non_cancer_AF_sas_female FLOAT64 , non_cancer_nhomalt_sas_female INT64 , AC_afr_female INT64 , AF_afr_female FLOAT64 , nhomalt_afr_female INT64 , AC_sas INT64 , AF_sas FLOAT64 , nhomalt_sas INT64 , non_neuro_AC_female INT64 , non_neuro_AF_female FLOAT64 , non_neuro_nhomalt_female INT64 , controls_AC_afr INT64 , controls_AF_afr FLOAT64 , controls_nhomalt_afr INT64 , non_neuro_AC_eas_jpn INT64 , non_neuro_AF_eas_jpn FLOAT64 , non_neuro_nhomalt_eas_jpn INT64 , AC_nfe_onf INT64 , AF_nfe_onf FLOAT64 , nhomalt_nfe_onf INT64 , non_cancer_AC_amr_male INT64 , non_cancer_AF_amr_male FLOAT64 , non_cancer_nhomalt_amr_male INT64 , controls_AC_fin_male INT64 , controls_AF_fin_male FLOAT64 , controls_nhomalt_fin_male INT64 , non_neuro_AC_nfe_nwe INT64 , non_neuro_AF_nfe_nwe FLOAT64 , non_neuro_nhomalt_nfe_nwe INT64 , AC_fin_male INT64 , AF_fin_male FLOAT64 , nhomalt_fin_male INT64 , AC_nfe_female INT64 , AF_nfe_female FLOAT64 , nhomalt_nfe_female INT64 , AC_amr INT64 , AF_amr FLOAT64 , nhomalt_amr INT64 , non_topmed_AC_nfe_male INT64 , non_topmed_AF_nfe_male FLOAT64 , non_topmed_nhomalt_nfe_male INT64 , non_neuro_AC_sas INT64 , non_neuro_AF_sas FLOAT64 , non_neuro_nhomalt_sas INT64 , non_cancer_AC_fin_male INT64 , non_cancer_AF_fin_male FLOAT64 , non_cancer_nhomalt_fin_male INT64 , non_cancer_AC_nfe_seu INT64 , non_cancer_AF_nfe_seu FLOAT64 , non_cancer_nhomalt_nfe_seu INT64 , AC_eas INT64 , AF_eas FLOAT64 , nhomalt_eas INT64 , nhomalt INT64 , non_neuro_AC_nfe_female INT64 , non_neuro_AF_nfe_female FLOAT64 , non_neuro_nhomalt_nfe_female INT64 , non_neuro_AC_afr INT64 , non_neuro_AF_afr FLOAT64 , non_neuro_nhomalt_afr INT64 , controls_AC_raw INT64 , controls_AF_raw FLOAT64 , controls_nhomalt_raw INT64 , non_cancer_AC_eas INT64 , non_cancer_AF_eas FLOAT64 , non_cancer_nhomalt_eas INT64 , non_cancer_AC_amr_female INT64 , non_cancer_AF_amr_female FLOAT64 , non_cancer_nhomalt_amr_female INT64 , non_neuro_AC_nfe_swe INT64 , non_neuro_AF_nfe_swe FLOAT64 , non_neuro_nhomalt_nfe_swe INT64 , controls_AC_male INT64 , controls_AF_male FLOAT64 , controls_nhomalt_male INT64 , non_topmed_AC_male INT64 , non_topmed_AF_male FLOAT64 , non_topmed_nhomalt_male INT64 , controls_AC_eas_jpn INT64 , controls_AF_eas_jpn FLOAT64 , controls_nhomalt_eas_jpn INT64 , controls_AC_nfe_female INT64 , controls_AF_nfe_female FLOAT64 , controls_nhomalt_nfe_female INT64 , non_neuro_AC_amr INT64 , non_neuro_AF_amr FLOAT64 , non_neuro_nhomalt_amr INT64 , non_neuro_AC_eas_female INT64 , non_neuro_AF_eas_female FLOAT64 , non_neuro_nhomalt_eas_female INT64 , AC_asj_male INT64 , AF_asj_male FLOAT64 , nhomalt_asj_male INT64 , controls_AC_nfe_male INT64 , controls_AF_nfe_male FLOAT64 , controls_nhomalt_nfe_male INT64 , non_neuro_AC_fin INT64 , non_neuro_AF_fin FLOAT64 , non_neuro_nhomalt_fin INT64 , non_topmed_AC_sas INT64 , non_topmed_AF_sas FLOAT64 , non_topmed_nhomalt_sas INT64 , non_cancer_AC_nfe_female INT64 , non_cancer_AF_nfe_female FLOAT64 , non_cancer_nhomalt_nfe_female INT64 , AC_oth_female INT64 , AF_oth_female FLOAT64 , nhomalt_oth_female INT64 , non_cancer_AC_asj INT64 , non_cancer_AF_asj FLOAT64 , non_cancer_nhomalt_asj INT64 , AC_nfe_swe INT64 , AF_nfe_swe FLOAT64 , nhomalt_nfe_swe INT64 , controls_AC_nfe INT64 , controls_AF_nfe FLOAT64 , controls_nhomalt_nfe INT64 , controls_AC_oth_female INT64 , controls_AF_oth_female FLOAT64 , controls_nhomalt_oth_female INT64 , controls_AC_asj INT64 , controls_AF_asj FLOAT64 , controls_nhomalt_asj INT64 , non_neuro_AC_amr_male INT64 , non_neuro_AF_amr_male FLOAT64 , non_neuro_nhomalt_amr_male INT64 , controls_AC_nfe_nwe INT64 , controls_AF_nfe_nwe FLOAT64 , controls_nhomalt_nfe_nwe INT64 , AC_nfe_nwe INT64 , AF_nfe_nwe FLOAT64 , nhomalt_nfe_nwe INT64 , controls_AC_nfe_seu INT64 , controls_AF_nfe_seu FLOAT64 , controls_nhomalt_nfe_seu INT64 , controls_AC_sas_female INT64 , controls_AF_sas_female FLOAT64 , controls_nhomalt_sas_female INT64 , non_neuro_AC_amr_female INT64 , non_neuro_AF_amr_female FLOAT64 , non_neuro_nhomalt_amr_female INT64 , non_cancer_AC_eas_jpn INT64 , non_cancer_AF_eas_jpn FLOAT64 , non_cancer_nhomalt_eas_jpn INT64 , non_neuro_AC_nfe_onf INT64 , non_neuro_AF_nfe_onf FLOAT64 , non_neuro_nhomalt_nfe_onf INT64 , non_topmed_AC_eas_male INT64 , non_topmed_AF_eas_male FLOAT64 , non_topmed_nhomalt_eas_male INT64 , AC_eas_jpn INT64 , AF_eas_jpn FLOAT64 , nhomalt_eas_jpn INT64 , non_cancer_AC_afr_male INT64 , non_cancer_AF_afr_male FLOAT64 , non_cancer_nhomalt_afr_male INT64 , non_cancer_AC_afr INT64 , non_cancer_AF_afr FLOAT64 , non_cancer_nhomalt_afr INT64 , controls_AC_amr_female INT64 , controls_AF_amr_female FLOAT64 , controls_nhomalt_amr_female INT64 , non_neuro_AC_fin_male INT64 , non_neuro_AF_fin_male FLOAT64 , non_neuro_nhomalt_fin_male INT64 , AC_female INT64 , AF_female FLOAT64 , nhomalt_female INT64 , non_neuro_AC_nfe_bgr INT64  ancestry in the non_neuro subset""), non_neuro_AF_nfe_bgr FLOAT64  ancestry in the non_neuro subset""), non_neuro_nhomalt_nfe_bgr INT64  ancestry in the non_neuro subset""), non_neuro_AC_oth_male INT64 , non_neuro_AF_oth_male FLOAT64 , non_neuro_nhomalt_oth_male INT64 , non_topmed_AC_nfe_est INT64 , non_topmed_AF_nfe_est FLOAT64 , non_topmed_nhomalt_nfe_est INT64 , non_topmed_AC_nfe_nwe INT64 , non_topmed_AF_nfe_nwe FLOAT64 , non_topmed_nhomalt_nfe_nwe INT64 , non_topmed_AC_amr_male INT64 , non_topmed_AF_amr_male FLOAT64 , non_topmed_nhomalt_amr_male INT64 , non_cancer_AC_amr INT64 , non_cancer_AF_amr FLOAT64 , non_cancer_nhomalt_amr INT64 , non_topmed_AC_nfe_swe INT64 , non_topmed_AF_nfe_swe FLOAT64 , non_topmed_nhomalt_nfe_swe INT64 , non_topmed_AC_nfe_onf INT64 , non_topmed_AF_nfe_onf FLOAT64 , non_topmed_nhomalt_nfe_onf INT64 , controls_AC_eas_kor INT64 , controls_AF_eas_kor FLOAT64 , controls_nhomalt_eas_kor INT64 , non_topmed_AC_eas_oea INT64 , non_topmed_AF_eas_oea FLOAT64 , non_topmed_nhomalt_eas_oea INT64 , controls_AC_eas_male INT64 , controls_AF_eas_male FLOAT64 , controls_nhomalt_eas_male INT64 , controls_AC_oth_male INT64 , controls_AF_oth_male FLOAT64 , controls_nhomalt_oth_male INT64 , non_topmed_AC INT64 , non_topmed_AF FLOAT64 , non_topmed_nhomalt INT64 , controls_AC_fin INT64 , controls_AF_fin FLOAT64 , controls_nhomalt_fin INT64 , AC_eas_kor INT64 , AF_eas_kor FLOAT64 , nhomalt_eas_kor INT64 , non_neuro_AC_nfe INT64 , non_neuro_AF_nfe FLOAT64 , non_neuro_nhomalt_nfe INT64 , non_neuro_AC_fin_female INT64 , non_neuro_AF_fin_female FLOAT64 , non_neuro_nhomalt_fin_female INT64 , non_cancer_AC_nfe_male INT64 , non_cancer_AF_nfe_male FLOAT64 , non_cancer_nhomalt_nfe_male INT64 , controls_AC_eas_oea INT64 , controls_AF_eas_oea FLOAT64 , controls_nhomalt_eas_oea INT64 , non_topmed_AC_nfe_seu INT64 , non_topmed_AF_nfe_seu FLOAT64 , non_topmed_nhomalt_nfe_seu INT64 , controls_AC_eas_female INT64 , controls_AF_eas_female FLOAT64 , controls_nhomalt_eas_female INT64 , non_topmed_AC_asj INT64 , non_topmed_AF_asj FLOAT64 , non_topmed_nhomalt_asj INT64 , controls_AC_nfe_onf INT64 , controls_AF_nfe_onf FLOAT64 , controls_nhomalt_nfe_onf INT64 , non_neuro_AC INT64 , non_neuro_AF FLOAT64 , non_neuro_nhomalt INT64 , AC_eas_oea INT64 , AF_eas_oea FLOAT64 , nhomalt_eas_oea INT64 , non_topmed_AC_nfe INT64 , non_topmed_AF_nfe FLOAT64 , non_topmed_nhomalt_nfe INT64 , non_cancer_AC_oth INT64 , non_cancer_AF_oth FLOAT64 , non_cancer_nhomalt_oth INT64 , non_topmed_AC_raw INT64 , non_topmed_AF_raw FLOAT64 , non_topmed_nhomalt_raw INT64 , non_neuro_AC_nfe_est INT64 , non_neuro_AF_nfe_est FLOAT64 , non_neuro_nhomalt_nfe_est INT64 , non_topmed_AC_oth_male INT64 , non_topmed_AF_oth_male FLOAT64 , non_topmed_nhomalt_oth_male INT64 , non_cancer_AC_oth_male INT64 , non_cancer_AF_oth_male FLOAT64 , non_cancer_nhomalt_oth_male INT64 , AC_nfe_est INT64 , AF_nfe_est FLOAT64 , nhomalt_nfe_est INT64 , non_cancer_AC_afr_female INT64 , non_cancer_AF_afr_female FLOAT64 , non_cancer_nhomalt_afr_female INT64 , non_topmed_AC_afr_male INT64 , non_topmed_AF_afr_male FLOAT64 , non_topmed_nhomalt_afr_male INT64 , AC_eas_male INT64 , AF_eas_male FLOAT64 , nhomalt_eas_male INT64 , controls_AC_eas INT64 , controls_AF_eas FLOAT64 , controls_nhomalt_eas INT64 , non_neuro_AC_eas_male INT64 , non_neuro_AF_eas_male FLOAT64 , non_neuro_nhomalt_eas_male INT64 , non_cancer_AC_nfe_nwe INT64 , non_cancer_AF_nfe_nwe FLOAT64 , non_cancer_nhomalt_nfe_nwe INT64 , controls_AC_sas INT64 , controls_AF_sas FLOAT64 , controls_nhomalt_sas INT64 , non_neuro_AC_sas_male INT64 , non_neuro_AF_sas_male FLOAT64 , non_neuro_nhomalt_sas_male INT64 , non_neuro_AC_asj_male INT64 , non_neuro_AF_asj_male FLOAT64 , non_neuro_nhomalt_asj_male INT64 , non_cancer_AC_nfe_bgr INT64  ancestry in the non_cancer subset""), non_cancer_AF_nfe_bgr FLOAT64  ancestry in the non_cancer subset""), non_cancer_nhomalt_nfe_bgr INT64  ancestry in the non_cancer subset""), controls_AC_oth INT64 , controls_AF_oth FLOAT64 , controls_nhomalt_oth INT64 , non_cancer_AC_eas_female INT64 , non_cancer_AF_eas_female FLOAT64 , non_cancer_nhomalt_eas_female INT64 , AC_nfe INT64 , AF_nfe FLOAT64 , nhomalt_nfe INT64 , non_topmed_AC_female INT64 , non_topmed_AF_female FLOAT64 , non_topmed_nhomalt_female INT64 , non_neuro_AC_asj INT64 , non_neuro_AF_asj FLOAT64 , non_neuro_nhomalt_asj INT64 , non_topmed_AC_eas_female INT64 , non_topmed_AF_eas_female FLOAT64 , non_topmed_nhomalt_eas_female INT64 , non_neuro_AC_raw INT64 , non_neuro_AF_raw FLOAT64 , non_neuro_nhomalt_raw INT64 , non_topmed_AC_eas INT64 , non_topmed_AF_eas FLOAT64 , non_topmed_nhomalt_eas INT64 , non_topmed_AC_fin_male INT64 , non_topmed_AF_fin_male FLOAT64 , non_topmed_nhomalt_fin_male INT64 , non_cancer_AC_asj_male INT64 , non_cancer_AF_asj_male FLOAT64 , non_cancer_nhomalt_asj_male INT64 , AC_fin INT64 , AF_fin FLOAT64 , nhomalt_fin INT64 , AC_nfe_male INT64 , AF_nfe_male FLOAT64 , nhomalt_nfe_male INT64 , non_topmed_AC_eas_kor INT64 , non_topmed_AF_eas_kor FLOAT64 , non_topmed_nhomalt_eas_kor INT64 , controls_AC_amr_male INT64 , controls_AF_amr_male FLOAT64 , controls_nhomalt_amr_male INT64 , non_neuro_AC_eas_oea INT64 , non_neuro_AF_eas_oea FLOAT64 , non_neuro_nhomalt_eas_oea INT64 , AC_sas_female INT64 , AF_sas_female FLOAT64 , nhomalt_sas_female INT64 , controls_AC_afr_female INT64 , controls_AF_afr_female FLOAT64 , controls_nhomalt_afr_female INT64 , controls_AC_amr INT64 , controls_AF_amr FLOAT64 , controls_nhomalt_amr INT64 , non_topmed_AC_eas_jpn INT64 , non_topmed_AF_eas_jpn FLOAT64 , non_topmed_nhomalt_eas_jpn INT64 , AC_asj_female INT64 , AF_asj_female FLOAT64 , nhomalt_asj_female INT64 , non_topmed_AC_nfe_bgr INT64  ancestry in the non_topmed subset""), non_topmed_AF_nfe_bgr FLOAT64  ancestry in the non_topmed subset""), non_topmed_nhomalt_nfe_bgr INT64  ancestry in the non_topmed subset""), non_cancer_AC_nfe_est INT64 , non_cancer_AF_nfe_est FLOAT64 , non_cancer_nhomalt_nfe_est INT64 , non_neuro_AC_eas INT64 , non_neuro_AF_eas FLOAT64 , non_neuro_nhomalt_eas INT64 , non_cancer_AC_nfe INT64 , non_cancer_AF_nfe FLOAT64 , non_cancer_nhomalt_nfe INT64 , non_neuro_AC_male INT64 , non_neuro_AF_male FLOAT64 , non_neuro_nhomalt_male INT64 , non_neuro_AC_sas_female INT64 , non_neuro_AF_sas_female FLOAT64 , non_neuro_nhomalt_sas_female INT64 , AC_asj INT64 , AF_asj FLOAT64 , nhomalt_asj INT64 , controls_AC_nfe_est INT64 , controls_AF_nfe_est FLOAT64 , controls_nhomalt_nfe_est INT64 , non_topmed_AC_asj_female INT64 , non_topmed_AF_asj_female FLOAT64 , non_topmed_nhomalt_asj_female INT64 , non_cancer_AC_nfe_swe INT64 , non_cancer_AF_nfe_swe FLOAT64 , non_cancer_nhomalt_nfe_swe INT64 , non_cancer_AC INT64 , non_cancer_AF FLOAT64 , non_cancer_nhomalt INT64 , non_topmed_AC_oth INT64 , non_topmed_AF_oth FLOAT64 , non_topmed_nhomalt_oth INT64 , non_topmed_AC_fin_female INT64 , non_topmed_AF_fin_female FLOAT64 , non_topmed_nhomalt_fin_female INT64 , non_cancer_AC_fin_female INT64 , non_cancer_AF_fin_female FLOAT64 , non_cancer_nhomalt_fin_female INT64 , AC_oth INT64 , AF_oth FLOAT64 , nhomalt_oth INT64 , non_neuro_AC_nfe_male INT64 , non_neuro_AF_nfe_male FLOAT64 , non_neuro_nhomalt_nfe_male INT64 , controls_AC_female INT64 , controls_AF_female FLOAT64 , controls_nhomalt_female INT64 , non_cancer_AC_fin INT64 , non_cancer_AF_fin FLOAT64 , non_cancer_nhomalt_fin INT64 , non_topmed_AC_fin INT64 , non_topmed_AF_fin FLOAT64 , non_topmed_nhomalt_fin INT64 , non_cancer_AC_eas_oea INT64 , non_cancer_AF_eas_oea FLOAT64 , non_cancer_nhomalt_eas_oea INT64 , non_topmed_AC_nfe_female INT64 , non_topmed_AF_nfe_female FLOAT64 , non_topmed_nhomalt_nfe_female INT64 , non_cancer_AC_sas_male INT64 , non_cancer_AF_sas_male FLOAT64 , non_cancer_nhomalt_sas_male INT64 , controls_AC_asj_male INT64 , controls_AF_asj_male FLOAT64 , controls_nhomalt_asj_male INT64 , non_cancer_AC_raw INT64 , non_cancer_AF_raw FLOAT64 , non_cancer_nhomalt_raw INT64 , non_cancer_AC_eas_male INT64 , non_cancer_AF_eas_male FLOAT64 , non_cancer_nhomalt_eas_male INT64 , non_topmed_AC_asj_male INT64 , non_topmed_AF_asj_male FLOAT64 , non_topmed_nhomalt_asj_male INT64 , non_neuro_AC_oth INT64 , non_neuro_AF_oth FLOAT64 , non_neuro_nhomalt_oth INT64 , AC_male INT64 , AF_male FLOAT64 , nhomalt_male INT64 , controls_AC_fin_female INT64 , controls_AF_fin_female FLOAT64 , controls_nhomalt_fin_female INT64 , controls_AC_nfe_bgr INT64  ancestry in the controls subset""), controls_AF_nfe_bgr FLOAT64  ancestry in the controls subset""), controls_nhomalt_nfe_bgr INT64  ancestry in the controls subset""), controls_AC_asj_female INT64 , controls_AF_asj_female FLOAT64 , controls_nhomalt_asj_female INT64 , AC_amr_male INT64 , AF_amr_male FLOAT64 , nhomalt_amr_male INT64 , AC_amr_female INT64 , AF_amr_female FLOAT64 , nhomalt_amr_female INT64 , non_topmed_AC_sas_male INT64 , non_topmed_AF_sas_male FLOAT64 , non_topmed_nhomalt_sas_male INT64 , AC_oth_male INT64 , AF_oth_male FLOAT64 , nhomalt_oth_male INT64 , non_cancer_AC_sas INT64 , non_cancer_AF_sas FLOAT64 , non_cancer_nhomalt_sas INT64 , non_neuro_AC_nfe_seu INT64 , non_neuro_AF_nfe_seu FLOAT64 , non_neuro_nhomalt_nfe_seu INT64 , non_cancer_AC_eas_kor INT64 , non_cancer_AF_eas_kor FLOAT64 , non_cancer_nhomalt_eas_kor INT64 , non_topmed_AC_afr_female INT64 , non_topmed_AF_afr_female FLOAT64 , non_topmed_nhomalt_afr_female INT64 , controls_AC_sas_male INT64 , controls_AF_sas_male FLOAT64 , controls_nhomalt_sas_male INT64 , non_topmed_AC_sas_female INT64 , non_topmed_AF_sas_female FLOAT64 , non_topmed_nhomalt_sas_female INT64 , non_topmed_AC_afr INT64 , non_topmed_AF_afr FLOAT64 , non_topmed_nhomalt_afr INT64 , controls_AC INT64 , controls_AF FLOAT64 , controls_nhomalt INT64 , non_neuro_AC_oth_female INT64 , non_neuro_AF_oth_female FLOAT64 , non_neuro_nhomalt_oth_female INT64 , non_topmed_faf95_amr FLOAT64  for samples of Latino ancestry in the non_topmed subset""), non_topmed_faf99_amr FLOAT64  for samples of Latino ancestry in the non_topmed subset""), faf95_afr FLOAT64  for samples of African-American/African ancestry""), faf99_afr FLOAT64  for samples of African-American/African ancestry""), faf95_sas FLOAT64  for samples of South Asian ancestry""), faf99_sas FLOAT64  for samples of South Asian ancestry""), controls_faf95_afr FLOAT64  for samples of African-American/African ancestry in the controls subset""), controls_faf99_afr FLOAT64  for samples of African-American/African ancestry in the controls subset""), faf95_amr FLOAT64  for samples of Latino ancestry""), faf99_amr FLOAT64  for samples of Latino ancestry""), non_neuro_faf95_sas FLOAT64  for samples of South Asian ancestry in the non_neuro subset""), non_neuro_faf99_sas FLOAT64  for samples of South Asian ancestry in the non_neuro subset""), faf95_eas FLOAT64  for samples of East Asian ancestry""), faf99_eas FLOAT64  for samples of East Asian ancestry""), faf95 FLOAT64  for samples""), faf99 FLOAT64  for samples""), non_neuro_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_neuro subset""), non_neuro_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_neuro subset""), non_cancer_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_cancer subset""), non_cancer_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_cancer subset""), non_neuro_faf95_amr FLOAT64  for samples of Latino ancestry in the non_neuro subset""), non_neuro_faf99_amr FLOAT64  for samples of Latino ancestry in the non_neuro subset""), non_topmed_faf95_sas FLOAT64  for samples of South Asian ancestry in the non_topmed subset""), non_topmed_faf99_sas FLOAT64  for samples of South Asian ancestry in the non_topmed subset""), controls_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the controls subset""), controls_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the controls subset""), non_cancer_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_cancer subset""), non_cancer_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_cancer subset""), non_cancer_faf95_amr FLOAT64  for samples of Latino ancestry in the non_cancer subset""), non_cancer_faf99_amr FLOAT64  for samples of Latino ancestry in the non_cancer subset""), non_topmed_faf95 FLOAT64  for samples in the non_topmed subset""), non_topmed_faf99 FLOAT64  for samples in the non_topmed subset""), non_neuro_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_neuro subset""), non_neuro_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_neuro subset""), non_neuro_faf95 FLOAT64  for samples in the non_neuro subset""), non_neuro_faf99 FLOAT64  for samples in the non_neuro subset""), non_topmed_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_topmed subset""), non_topmed_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_topmed subset""), controls_faf95_eas FLOAT64  for samples of East Asian ancestry in the controls subset""), controls_faf99_eas FLOAT64  for samples of East Asian ancestry in the controls subset""), controls_faf95_sas FLOAT64  for samples of South Asian ancestry in the controls subset""), controls_faf99_sas FLOAT64  for samples of South Asian ancestry in the controls subset""), faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry""), faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry""), non_topmed_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_topmed subset""), non_topmed_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_topmed subset""), controls_faf95_amr FLOAT64  for samples of Latino ancestry in the controls subset""), controls_faf99_amr FLOAT64  for samples of Latino ancestry in the controls subset""), non_neuro_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_neuro subset""), non_neuro_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_neuro subset""), non_cancer_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_cancer subset""), non_cancer_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_cancer subset""), non_cancer_faf95 FLOAT64  for samples in the non_cancer subset""), non_cancer_faf99 FLOAT64  for samples in the non_cancer subset""), non_cancer_faf95_sas FLOAT64  for samples of South Asian ancestry in the non_cancer subset""), non_cancer_faf99_sas FLOAT64  for samples of South Asian ancestry in the non_cancer subset""), non_topmed_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_topmed subset""), non_topmed_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_topmed subset""), controls_faf95 FLOAT64  for samples in the controls subset""), controls_faf99 FLOAT64  for samples in the controls subset""), popmax STRING , AC_popmax INT64 , AN_popmax INT64 , AF_popmax FLOAT64 ""), nhomalt_popmax INT64 , age_hist_het_bin_freq STRING , age_hist_het_n_smaller INT64 , age_hist_het_n_larger INT64 , age_hist_hom_bin_freq STRING , age_hist_hom_n_smaller INT64 , age_hist_hom_n_larger INT64 , non_topmed_popmax STRING , non_topmed_AC_popmax INT64 , non_topmed_AN_popmax INT64 , non_topmed_AF_popmax FLOAT64  in the non_topmed subset""), non_topmed_nhomalt_popmax INT64 , non_neuro_popmax STRING , non_neuro_AC_popmax INT64 , non_neuro_AN_popmax INT64 , non_neuro_AF_popmax FLOAT64  in the non_neuro subset""), non_neuro_nhomalt_popmax INT64 , non_cancer_popmax STRING , non_cancer_AC_popmax INT64 , non_cancer_AN_popmax INT64 , non_cancer_AF_popmax FLOAT64  in the non_cancer subset""), non_cancer_nhomalt_popmax INT64 , controls_popmax STRING , controls_AC_popmax INT64 , controls_AN_popmax INT64 , controls_AF_popmax FLOAT64  in the controls subset""), controls_nhomalt_popmax INT64 , vep ARRAY<STRUCT<allele STRING , Consequence STRING , IMPACT STRING , SYMBOL STRING , Gene STRING , Feature_type STRING , Feature STRING , BIOTYPE STRING , EXON STRING ""), INTRON STRING ""), HGVSc STRING , HGVSp STRING , cDNA_position STRING , CDS_position STRING , Protein_position STRING , Amino_acids STRING , Codons STRING , Existing_variation STRING , ALLELE_NUM INT64 , DISTANCE INT64 , STRAND INT64  on which the transcript/feature lies""), FLAGS STRING ""), VARIANT_CLASS STRING , MINIMISED INT64 , SYMBOL_SOURCE STRING , HGNC_ID INT64 , CANONICAL STRING , TSL STRING , APPRIS STRING , CCDS STRING , ENSP STRING , SWISSPROT STRING , TREMBL STRING , UNIPARC STRING , GENE_PHENO INT64 , SIFT STRING ""), PolyPhen STRING , DOMAINS STRING , HGVS_OFFSET INT64 , GMAF STRING , AFR_MAF STRING , AMR_MAF STRING , EAS_MAF STRING , EUR_MAF STRING , SAS_MAF STRING , AA_MAF STRING , EA_MAF STRING , ExAC_MAF STRING , ExAC_Adj_MAF STRING , ExAC_AFR_MAF STRING , ExAC_AMR_MAF STRING , ExAC_EAS_MAF STRING , ExAC_FIN_MAF STRING , ExAC_NFE_MAF STRING , ExAC_OTH_MAF STRING , ExAC_SAS_MAF STRING , CLIN_SIG STRING , SOMATIC STRING ; multiple values correspond to multiple values in the Existing_variation field""), PHENO STRING , PUBMED STRING  of publications that cite existing variant""), MOTIF_NAME STRING , MOTIF_POS INT64 , HIGH_INF_POS STRING ""), MOTIF_SCORE_CHANGE FLOAT64 , LoF STRING , LoF_filter STRING , LoF_flags STRING , LoF_info STRING >> >> .""),
  names ARRAY<STRING> .""),
  quality FLOAT64 ). Higher values imply better quality.""),
  filter ARRAY<STRING>  or \""PASS\"" indicating the variant has passed all filters.""),
  call ARRAY<STRUCT<name STRING , genotype ARRAY<INT64> , phaseset STRING . \""*\"" is used in cases where the genotype is phased, but no phase set (\""PS\"" in FORMAT) was specified."")>> ,
  AN INT64 ,
  rf_tp_probability FLOAT64 ,
  FS FLOAT64 ,
  InbreedingCoeff FLOAT64 ,
  MQ FLOAT64 ,
  MQRankSum FLOAT64 ,
  QD FLOAT64 ,
  ReadPosRankSum FLOAT64 ,
  SOR FLOAT64 ,
  VQSR_POSITIVE_TRAIN_SITE BOOL ,
  VQSR_NEGATIVE_TRAIN_SITE BOOL ,
  BaseQRankSum FLOAT64 ,
  ClippingRankSum FLOAT64 ,
  DP INT64 ,
  VQSLOD FLOAT64 ,
  VQSR_culprit STRING ,
  segdup BOOL ,
  lcr BOOL ,
  decoy BOOL ,
  nonpar BOOL  falls outside a pseudoautosomal region""),
  rf_positive_label BOOL ,
  rf_negative_label BOOL ,
  rf_label STRING ,
  rf_train BOOL ,
  transmitted_singleton BOOL ""),
  variant_type STRING ""),
  was_mixed BOOL ,
  has_star BOOL  observed elsewhere in the callset""),
  AN_nfe_seu INT64 ,
  controls_AN_afr_male INT64 ,
  non_neuro_AN_eas_kor INT64 ,
  non_topmed_AN_amr INT64 ,
  non_cancer_AN_asj_female INT64 ,
  AN_raw INT64 ,
  AN_fin_female INT64 ,
  non_cancer_AN_oth_female INT64 ,
  AN_nfe_bgr INT64  ancestry""),
  non_neuro_AN_asj_female INT64 ,
  AN_sas_male INT64 ,
  non_neuro_AN_afr_male INT64 ,
  AN_afr_male INT64 ,
  AN_afr INT64 ,
  controls_AN_nfe_swe INT64 ,
  non_neuro_AN_afr_female INT64 ,
  non_topmed_AN_amr_female INT64 ,
  non_cancer_AN_female INT64 ,
  non_cancer_AN_nfe_onf INT64 ,
  non_cancer_AN_male INT64 ,
  non_topmed_AN_oth_female INT64 ,
  AN_eas_female INT64 ,
  non_cancer_AN_sas_female INT64 ,
  AN_afr_female INT64 ,
  AN_sas INT64 ,
  non_neuro_AN_female INT64 ,
  controls_AN_afr INT64 ,
  non_neuro_AN_eas_jpn INT64 ,
  AN_nfe_onf INT64 ,
  non_cancer_AN_amr_male INT64 ,
  controls_AN_fin_male INT64 ,
  non_neuro_AN_nfe_nwe INT64 ,
  AN_fin_male INT64 ,
  AN_nfe_female INT64 ,
  AN_amr INT64 ,
  non_topmed_AN_nfe_male INT64 ,
  non_neuro_AN_sas INT64 ,
  non_cancer_AN_fin_male INT64 ,
  non_cancer_AN_nfe_seu INT64 ,
  AN_eas INT64 ,
  non_neuro_AN_nfe_female INT64 ,
  non_neuro_AN_afr INT64 ,
  controls_AN_raw INT64 ,
  non_cancer_AN_eas INT64 ,
  non_cancer_AN_amr_female INT64 ,
  non_neuro_AN_nfe_swe INT64 ,
  controls_AN_male INT64 ,
  non_topmed_AN_male INT64 ,
  controls_AN_eas_jpn INT64 ,
  controls_AN_nfe_female INT64 ,
  non_neuro_AN_amr INT64 ,
  non_neuro_AN_eas_female INT64 ,
  AN_asj_male INT64 ,
  controls_AN_nfe_male INT64 ,
  non_neuro_AN_fin INT64 ,
  non_topmed_AN_sas INT64 ,
  non_cancer_AN_nfe_female INT64 ,
  AN_oth_female INT64 ,
  non_cancer_AN_asj INT64 ,
  AN_nfe_swe INT64 ,
  controls_AN_nfe INT64 ,
  controls_AN_oth_female INT64 ,
  controls_AN_asj INT64 ,
  non_neuro_AN_amr_male INT64 ,
  controls_AN_nfe_nwe INT64 ,
  AN_nfe_nwe INT64 ,
  controls_AN_nfe_seu INT64 ,
  controls_AN_sas_female INT64 ,
  non_neuro_AN_amr_female INT64 ,
  non_cancer_AN_eas_jpn INT64 ,
  non_neuro_AN_nfe_onf INT64 ,
  non_topmed_AN_eas_male INT64 ,
  AN_eas_jpn INT64 ,
  non_cancer_AN_afr_male INT64 ,
  non_cancer_AN_afr INT64 ,
  controls_AN_amr_female INT64 ,
  non_neuro_AN_fin_male INT64 ,
  AN_female INT64 ,
  non_neuro_AN_nfe_bgr INT64  ancestry in the non_neuro subset""),
  non_neuro_AN_oth_male INT64 ,
  non_topmed_AN_nfe_est INT64 ,
  non_topmed_AN_nfe_nwe INT64 ,
  non_topmed_AN_amr_male INT64 ,
  non_cancer_AN_amr INT64 ,
  non_topmed_AN_nfe_swe INT64 ,
  non_topmed_AN_nfe_onf INT64 ,
  controls_AN_eas_kor INT64 ,
  non_topmed_AN_eas_oea INT64 ,
  controls_AN_eas_male INT64 ,
  controls_AN_oth_male INT64 ,
  non_topmed_AN INT64 ,
  controls_AN_fin INT64 ,
  AN_eas_kor INT64 ,
  non_neuro_AN_nfe INT64 ,
  non_neuro_AN_fin_female INT64 ,
  non_cancer_AN_nfe_male INT64 ,
  controls_AN_eas_oea INT64 ,
  non_topmed_AN_nfe_seu INT64 ,
  controls_AN_eas_female INT64 ,
  non_topmed_AN_asj INT64 ,
  controls_AN_nfe_onf INT64 ,
  non_neuro_AN INT64 ,
  AN_eas_oea INT64 ,
  non_topmed_AN_nfe INT64 ,
  non_cancer_AN_oth INT64 ,
  non_topmed_AN_raw INT64 ,
  non_neuro_AN_nfe_est INT64 ,
  non_topmed_AN_oth_male INT64 ,
  non_cancer_AN_oth_male INT64 ,
  AN_nfe_est INT64 ,
  non_cancer_AN_afr_female INT64 ,
  non_topmed_AN_afr_male INT64 ,
  AN_eas_male INT64 ,
  controls_AN_eas INT64 ,
  non_neuro_AN_eas_male INT64 ,
  non_cancer_AN_nfe_nwe INT64 ,
  controls_AN_sas INT64 ,
  non_neuro_AN_sas_male INT64 ,
  non_neuro_AN_asj_male INT64 ,
  non_cancer_AN_nfe_bgr INT64  ancestry in the non_cancer subset""),
  controls_AN_oth INT64 ,
  non_cancer_AN_eas_female INT64 ,
  AN_nfe INT64 ,
  non_topmed_AN_female INT64 ,
  non_neuro_AN_asj INT64 ,
  non_topmed_AN_eas_female INT64 ,
  non_neuro_AN_raw INT64 ,
  non_topmed_AN_eas INT64 ,
  non_topmed_AN_fin_male INT64 ,
  non_cancer_AN_asj_male INT64 ,
  AN_fin INT64 ,
  AN_nfe_male INT64 ,
  non_topmed_AN_eas_kor INT64 ,
  controls_AN_amr_male INT64 ,
  non_neuro_AN_eas_oea INT64 ,
  AN_sas_female INT64 ,
  controls_AN_afr_female INT64 ,
  controls_AN_amr INT64 ,
  non_topmed_AN_eas_jpn INT64 ,
  AN_asj_female INT64 ,
  non_topmed_AN_nfe_bgr INT64  ancestry in the non_topmed subset""),
  non_cancer_AN_nfe_est INT64 ,
  non_neuro_AN_eas INT64 ,
  non_cancer_AN_nfe INT64 ,
  non_neuro_AN_male INT64 ,
  non_neuro_AN_sas_female INT64 ,
  AN_asj INT64 ,
  controls_AN_nfe_est INT64 ,
  non_topmed_AN_asj_female INT64 ,
  non_cancer_AN_nfe_swe INT64 ,
  non_cancer_AN INT64 ,
  non_topmed_AN_oth INT64 ,
  non_topmed_AN_fin_female INT64 ,
  non_cancer_AN_fin_female INT64 ,
  AN_oth INT64 ,
  non_neuro_AN_nfe_male INT64 ,
  controls_AN_female INT64 ,
  non_cancer_AN_fin INT64 ,
  non_topmed_AN_fin INT64 ,
  non_cancer_AN_eas_oea INT64 ,
  non_topmed_AN_nfe_female INT64 ,
  non_cancer_AN_sas_male INT64 ,
  controls_AN_asj_male INT64 ,
  non_cancer_AN_raw INT64 ,
  non_cancer_AN_eas_male INT64 ,
  non_topmed_AN_asj_male INT64 ,
  non_neuro_AN_oth INT64 ,
  AN_male INT64 ,
  controls_AN_fin_female INT64 ,
  controls_AN_nfe_bgr INT64  ancestry in the controls subset""),
  controls_AN_asj_female INT64 ,
  AN_amr_male INT64 ,
  AN_amr_female INT64 ,
  non_topmed_AN_sas_male INT64 ,
  AN_oth_male INT64 ,
  non_cancer_AN_sas INT64 ,
  non_neuro_AN_nfe_seu INT64 ,
  non_cancer_AN_eas_kor INT64 ,
  non_topmed_AN_afr_female INT64 ,
  controls_AN_sas_male INT64 ,
  non_topmed_AN_sas_female INT64 ,
  non_topmed_AN_afr INT64 ,
  controls_AN INT64 ,
  non_neuro_AN_oth_female INT64 
)
PARTITION BY RANGE_BUCKET(start_position, GENERATE_ARRAY(0, 107333160, 26840))
CLUSTER BY start_position, end_position;"

Some other tables have the similar structure: ['v2_1_1_exomes__chr14', 'v2_1_1_exomes__chr10', 'v2_1_1_exomes__chr13', 'v2_1_1_exomes__chr15', 'v2_1_1_exomes__chr12', 'v2_1_1_exomes__chr7', 'v2_1_1_exomes__chr18', 'v2_1_1_exomes__chr20', 'v2_1_1_exomes__chr16', 'v2_1_1_exomes__chr17', 'v2_1_1_exomes__chr4', 'v2_1_1_exomes__chr8', 'v2_1_1_exomes__chr22', 'v2_1_1_exomes__chr5', 'v2_1_1_exomes__chr2', 'v2_1_1_exomes__chr6', 'v2_1_1_exomes__chr11', 'v2_1_1_exomes__chr9', 'v2_1_1_exomes__chr21', 'v2_1_1_exomes__chr1', 'v2_1_1_exomes__chr3', 'v2_1_1_exomes__chr19']
,1
table_name,v3_genomes__chr12
ddl,"CREATE TABLE `bigquery-public-data.gnomAD.v3_genomes__chr12`
(
  reference_name STRING ,
  start_position INT64 . Corresponds to the first base of the string of reference bases.""),
  end_position INT64 . Corresponds to the first base after the last base in the reference allele.""),
  reference_bases STRING ,
  alternate_bases ARRAY<STRUCT<alt STRING , AC INT64 , AF FLOAT64 , n_alt_alleles INT64 , AC_asj_female INT64 , AF_asj_female FLOAT64 , nhomalt_asj_female INT64 , AC_eas_female INT64 , AF_eas_female FLOAT64 , nhomalt_eas_female INT64 , AC_afr_male INT64 , AF_afr_male FLOAT64 , nhomalt_afr_male INT64 , AC_female INT64 , AF_female FLOAT64 , nhomalt_female INT64 , AC_fin_male INT64 , AF_fin_male FLOAT64 , nhomalt_fin_male INT64 , AC_oth_female INT64 , AF_oth_female FLOAT64 , nhomalt_oth_female INT64 , AC_ami INT64 , AF_ami FLOAT64 , nhomalt_ami INT64 , AC_oth INT64 , AF_oth FLOAT64 , nhomalt_oth INT64 , AC_male INT64 , AF_male FLOAT64 , nhomalt_male INT64 , AC_ami_female INT64 , AF_ami_female FLOAT64 , nhomalt_ami_female INT64 , AC_afr INT64 , AF_afr FLOAT64 , nhomalt_afr INT64 , AC_eas_male INT64 , AF_eas_male FLOAT64 , nhomalt_eas_male INT64 , AC_sas INT64 , AF_sas FLOAT64 , nhomalt_sas INT64 , AC_nfe_female INT64 , AF_nfe_female FLOAT64 , nhomalt_nfe_female INT64 , AC_asj_male INT64 , AF_asj_male FLOAT64 , nhomalt_asj_male INT64 , AC_raw INT64 , AF_raw FLOAT64 , nhomalt_raw INT64 , AC_oth_male INT64 , AF_oth_male FLOAT64 , nhomalt_oth_male INT64 , AC_nfe_male INT64 , AF_nfe_male FLOAT64 , nhomalt_nfe_male INT64 , AC_asj INT64 , AF_asj FLOAT64 , nhomalt_asj INT64 , AC_amr_male INT64 , AF_amr_male FLOAT64 , nhomalt_amr_male INT64 , nhomalt INT64 , AC_amr_female INT64 , AF_amr_female FLOAT64 , nhomalt_amr_female INT64 , AC_sas_female INT64 , AF_sas_female FLOAT64 , nhomalt_sas_female INT64 , AC_fin INT64 , AF_fin FLOAT64 , nhomalt_fin INT64 , AC_afr_female INT64 , AF_afr_female FLOAT64 , nhomalt_afr_female INT64 , AC_sas_male INT64 , AF_sas_male FLOAT64 , nhomalt_sas_male INT64 , AC_amr INT64 , AF_amr FLOAT64 , nhomalt_amr INT64 , AC_nfe INT64 , AF_nfe FLOAT64 , nhomalt_nfe INT64 , AC_eas INT64 , AF_eas FLOAT64 , nhomalt_eas INT64 , AC_ami_male INT64 , AF_ami_male FLOAT64 , nhomalt_ami_male INT64 , AC_fin_female INT64 , AF_fin_female FLOAT64 , nhomalt_fin_female INT64 , faf95_afr FLOAT64  for samples of African-American/African ancestry""), faf99_afr FLOAT64  for samples of African-American/African ancestry""), faf95_sas FLOAT64  for samples of South Asian ancestry""), faf99_sas FLOAT64  for samples of South Asian ancestry""), faf95_amr FLOAT64  for samples of Latino ancestry""), faf99_amr FLOAT64  for samples of Latino ancestry""), faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry""), faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry""), faf95_eas FLOAT64  for samples of East Asian ancestry""), faf99_eas FLOAT64  for samples of East Asian ancestry""), vep ARRAY<STRUCT<allele STRING , Consequence STRING , IMPACT STRING , SYMBOL STRING , Gene STRING , Feature_type STRING , Feature STRING , BIOTYPE STRING , EXON STRING ""), INTRON STRING ""), empty STRING >> >> .""),
  names ARRAY<STRING> .""),
  quality FLOAT64 ). Higher values imply better quality.""),
  filter ARRAY<STRING>  or \""PASS\"" indicating the variant has passed all filters.""),
  call ARRAY<STRUCT<name STRING , genotype ARRAY<INT64> , phaseset STRING . \""*\"" is used in cases where the genotype is phased, but no phase set (\""PS\"" in FORMAT) was specified."")>> ,
  AN INT64 ,
  non_par BOOL ,
  lcr BOOL ,
  variant_type STRING ""),
  ReadPosRankSum FLOAT64 ,
  MQRankSum FLOAT64 ,
  RAW_MQ FLOAT64 ,
  DP INT64 ,
  MQ_DP INT64 ,
  VarDP INT64 ,
  MQ FLOAT64 ,
  QD FLOAT64 ,
  FS FLOAT64 ,
  SB ARRAY<INT64> ,
  InbreedingCoeff FLOAT64 ,
  AS_VQSLOD FLOAT64 ,
  NEGATIVE_TRAIN_SITE BOOL ,
  POSITIVE_TRAIN_SITE BOOL ,
  culprit STRING ,
  SOR FLOAT64 ,
  AN_asj_female INT64 ,
  AN_eas_female INT64 ,
  AN_afr_male INT64 ,
  AN_female INT64 ,
  AN_fin_male INT64 ,
  AN_oth_female INT64 ,
  AN_ami INT64 ,
  AN_oth INT64 ,
  AN_male INT64 ,
  AN_ami_female INT64 ,
  AN_afr INT64 ,
  AN_eas_male INT64 ,
  AN_sas INT64 ,
  AN_nfe_female INT64 ,
  AN_asj_male INT64 ,
  AN_raw INT64 ,
  AN_oth_male INT64 ,
  AN_nfe_male INT64 ,
  AN_asj INT64 ,
  AN_amr_male INT64 ,
  AN_amr_female INT64 ,
  AN_sas_female INT64 ,
  AN_fin INT64 ,
  AN_afr_female INT64 ,
  AN_sas_male INT64 ,
  AN_amr INT64 ,
  AN_nfe INT64 ,
  AN_eas INT64 ,
  AN_ami_male INT64 ,
  AN_fin_female INT64 ,
  faf95_adj FLOAT64 ,
  faf99_adj FLOAT64 
)
PARTITION BY RANGE_BUCKET(start_position, GENERATE_ARRAY(0, 133886520, 33480))
CLUSTER BY start_position, end_position;"

Some other tables have the similar structure: ['v3_genomes__chr12', 'v3_genomes__chr4', 'v3_genomes__chr10', 'v3_genomes__chr14', 'v3_genomes__chr22', 'v3_genomes__chr6', 'v3_genomes__chr1', 'v3_genomes__chr3', 'v3_genomes__chr21', 'v3_genomes__chr13', 'v3_genomes__chr2', 'v3_genomes__chr16', 'v3_genomes__chr20', 'v3_genomes__chr18', 'v3_genomes__chr19', 'v3_genomes__chr11', 'v3_genomes__chr5', 'v3_genomes__chr7', 'v3_genomes__chr17', 'v3_genomes__chr15', 'v3_genomes__chr9', 'v3_genomes__chr8']
,2
table_name,v2_1_1_genomes__chr5
ddl,"CREATE TABLE `bigquery-public-data.gnomAD.v2_1_1_genomes__chr5`
(
  reference_name STRING ,
  start_position INT64 . Corresponds to the first base of the string of reference bases.""),
  end_position INT64 . Corresponds to the first base after the last base in the reference allele.""),
  reference_bases STRING ,
  alternate_bases ARRAY<STRUCT<alt STRING , AC INT64 , AF FLOAT64 , allele_type STRING ""), n_alt_alleles INT64 , pab_max FLOAT64 , gq_hist_alt_bin_freq STRING , gq_hist_all_bin_freq STRING , dp_hist_alt_bin_freq STRING , dp_hist_alt_n_larger INT64 , dp_hist_all_bin_freq STRING , dp_hist_all_n_larger INT64 , ab_hist_alt_bin_freq STRING , AC_nfe_seu INT64 , AF_nfe_seu FLOAT64 , nhomalt_nfe_seu INT64 , controls_AC_afr_male INT64 , controls_AF_afr_male FLOAT64 , controls_nhomalt_afr_male INT64 , non_topmed_AC_amr INT64 , non_topmed_AF_amr FLOAT64 , non_topmed_nhomalt_amr INT64 , AC_raw INT64 , AF_raw FLOAT64 , nhomalt_raw INT64 , AC_fin_female INT64 , AF_fin_female FLOAT64 , nhomalt_fin_female INT64 , non_neuro_AC_asj_female INT64 , non_neuro_AF_asj_female FLOAT64 , non_neuro_nhomalt_asj_female INT64 , non_neuro_AC_afr_male INT64 , non_neuro_AF_afr_male FLOAT64 , non_neuro_nhomalt_afr_male INT64 , AC_afr_male INT64 , AF_afr_male FLOAT64 , nhomalt_afr_male INT64 , AC_afr INT64 , AF_afr FLOAT64 , nhomalt_afr INT64 , non_neuro_AC_afr_female INT64 , non_neuro_AF_afr_female FLOAT64 , non_neuro_nhomalt_afr_female INT64 , non_topmed_AC_amr_female INT64 , non_topmed_AF_amr_female FLOAT64 , non_topmed_nhomalt_amr_female INT64 , non_topmed_AC_oth_female INT64 , non_topmed_AF_oth_female FLOAT64 , non_topmed_nhomalt_oth_female INT64 , AC_eas_female INT64 , AF_eas_female FLOAT64 , nhomalt_eas_female INT64 , AC_afr_female INT64 , AF_afr_female FLOAT64 , nhomalt_afr_female INT64 , non_neuro_AC_female INT64 , non_neuro_AF_female FLOAT64 , non_neuro_nhomalt_female INT64 , controls_AC_afr INT64 , controls_AF_afr FLOAT64 , controls_nhomalt_afr INT64 , AC_nfe_onf INT64 , AF_nfe_onf FLOAT64 , nhomalt_nfe_onf INT64 , controls_AC_fin_male INT64 , controls_AF_fin_male FLOAT64 , controls_nhomalt_fin_male INT64 , non_neuro_AC_nfe_nwe INT64 , non_neuro_AF_nfe_nwe FLOAT64 , non_neuro_nhomalt_nfe_nwe INT64 , AC_fin_male INT64 , AF_fin_male FLOAT64 , nhomalt_fin_male INT64 , AC_nfe_female INT64 , AF_nfe_female FLOAT64 , nhomalt_nfe_female INT64 , AC_amr INT64 , AF_amr FLOAT64 , nhomalt_amr INT64 , non_topmed_AC_nfe_male INT64 , non_topmed_AF_nfe_male FLOAT64 , non_topmed_nhomalt_nfe_male INT64 , AC_eas INT64 , AF_eas FLOAT64 , nhomalt_eas INT64 , nhomalt INT64 , non_neuro_AC_nfe_female INT64 , non_neuro_AF_nfe_female FLOAT64 , non_neuro_nhomalt_nfe_female INT64 , non_neuro_AC_afr INT64 , non_neuro_AF_afr FLOAT64 , non_neuro_nhomalt_afr INT64 , controls_AC_raw INT64 , controls_AF_raw FLOAT64 , controls_nhomalt_raw INT64 , controls_AC_male INT64 , controls_AF_male FLOAT64 , controls_nhomalt_male INT64 , non_topmed_AC_male INT64 , non_topmed_AF_male FLOAT64 , non_topmed_nhomalt_male INT64 , controls_AC_nfe_female INT64 , controls_AF_nfe_female FLOAT64 , controls_nhomalt_nfe_female INT64 , non_neuro_AC_amr INT64 , non_neuro_AF_amr FLOAT64 , non_neuro_nhomalt_amr INT64 , non_neuro_AC_eas_female INT64 , non_neuro_AF_eas_female FLOAT64 , non_neuro_nhomalt_eas_female INT64 , AC_asj_male INT64 , AF_asj_male FLOAT64 , nhomalt_asj_male INT64 , controls_AC_nfe_male INT64 , controls_AF_nfe_male FLOAT64 , controls_nhomalt_nfe_male INT64 , non_neuro_AC_fin INT64 , non_neuro_AF_fin FLOAT64 , non_neuro_nhomalt_fin INT64 , AC_oth_female INT64 , AF_oth_female FLOAT64 , nhomalt_oth_female INT64 , controls_AC_nfe INT64 , controls_AF_nfe FLOAT64 , controls_nhomalt_nfe INT64 , controls_AC_oth_female INT64 , controls_AF_oth_female FLOAT64 , controls_nhomalt_oth_female INT64 , controls_AC_asj INT64 , controls_AF_asj FLOAT64 , controls_nhomalt_asj INT64 , non_neuro_AC_amr_male INT64 , non_neuro_AF_amr_male FLOAT64 , non_neuro_nhomalt_amr_male INT64 , controls_AC_nfe_nwe INT64 , controls_AF_nfe_nwe FLOAT64 , controls_nhomalt_nfe_nwe INT64 , AC_nfe_nwe INT64 , AF_nfe_nwe FLOAT64 , nhomalt_nfe_nwe INT64 , controls_AC_nfe_seu INT64 , controls_AF_nfe_seu FLOAT64 , controls_nhomalt_nfe_seu INT64 , non_neuro_AC_amr_female INT64 , non_neuro_AF_amr_female FLOAT64 , non_neuro_nhomalt_amr_female INT64 , non_neuro_AC_nfe_onf INT64 , non_neuro_AF_nfe_onf FLOAT64 , non_neuro_nhomalt_nfe_onf INT64 , non_topmed_AC_eas_male INT64 , non_topmed_AF_eas_male FLOAT64 , non_topmed_nhomalt_eas_male INT64 , controls_AC_amr_female INT64 , controls_AF_amr_female FLOAT64 , controls_nhomalt_amr_female INT64 , non_neuro_AC_fin_male INT64 , non_neuro_AF_fin_male FLOAT64 , non_neuro_nhomalt_fin_male INT64 , AC_female INT64 , AF_female FLOAT64 , nhomalt_female INT64 , non_neuro_AC_oth_male INT64 , non_neuro_AF_oth_male FLOAT64 , non_neuro_nhomalt_oth_male INT64 , non_topmed_AC_nfe_est INT64 , non_topmed_AF_nfe_est FLOAT64 , non_topmed_nhomalt_nfe_est INT64 , non_topmed_AC_nfe_nwe INT64 , non_topmed_AF_nfe_nwe FLOAT64 , non_topmed_nhomalt_nfe_nwe INT64 , non_topmed_AC_amr_male INT64 , non_topmed_AF_amr_male FLOAT64 , non_topmed_nhomalt_amr_male INT64 , non_topmed_AC_nfe_onf INT64 , non_topmed_AF_nfe_onf FLOAT64 , non_topmed_nhomalt_nfe_onf INT64 , controls_AC_eas_male INT64 , controls_AF_eas_male FLOAT64 , controls_nhomalt_eas_male INT64 , controls_AC_oth_male INT64 , controls_AF_oth_male FLOAT64 , controls_nhomalt_oth_male INT64 , non_topmed_AC INT64 , non_topmed_AF FLOAT64 , non_topmed_nhomalt INT64 , controls_AC_fin INT64 , controls_AF_fin FLOAT64 , controls_nhomalt_fin INT64 , non_neuro_AC_nfe INT64 , non_neuro_AF_nfe FLOAT64 , non_neuro_nhomalt_nfe INT64 , non_neuro_AC_fin_female INT64 , non_neuro_AF_fin_female FLOAT64 , non_neuro_nhomalt_fin_female INT64 , non_topmed_AC_nfe_seu INT64 , non_topmed_AF_nfe_seu FLOAT64 , non_topmed_nhomalt_nfe_seu INT64 , controls_AC_eas_female INT64 , controls_AF_eas_female FLOAT64 , controls_nhomalt_eas_female INT64 , non_topmed_AC_asj INT64 , non_topmed_AF_asj FLOAT64 , non_topmed_nhomalt_asj INT64 , controls_AC_nfe_onf INT64 , controls_AF_nfe_onf FLOAT64 , controls_nhomalt_nfe_onf INT64 , non_neuro_AC INT64 , non_neuro_AF FLOAT64 , non_neuro_nhomalt INT64 , non_topmed_AC_nfe INT64 , non_topmed_AF_nfe FLOAT64 , non_topmed_nhomalt_nfe INT64 , non_topmed_AC_raw INT64 , non_topmed_AF_raw FLOAT64 , non_topmed_nhomalt_raw INT64 , non_neuro_AC_nfe_est INT64 , non_neuro_AF_nfe_est FLOAT64 , non_neuro_nhomalt_nfe_est INT64 , non_topmed_AC_oth_male INT64 , non_topmed_AF_oth_male FLOAT64 , non_topmed_nhomalt_oth_male INT64 , AC_nfe_est INT64 , AF_nfe_est FLOAT64 , nhomalt_nfe_est INT64 , non_topmed_AC_afr_male INT64 , non_topmed_AF_afr_male FLOAT64 , non_topmed_nhomalt_afr_male INT64 , AC_eas_male INT64 , AF_eas_male FLOAT64 , nhomalt_eas_male INT64 , controls_AC_eas INT64 , controls_AF_eas FLOAT64 , controls_nhomalt_eas INT64 , non_neuro_AC_eas_male INT64 , non_neuro_AF_eas_male FLOAT64 , non_neuro_nhomalt_eas_male INT64 , non_neuro_AC_asj_male INT64 , non_neuro_AF_asj_male FLOAT64 , non_neuro_nhomalt_asj_male INT64 , controls_AC_oth INT64 , controls_AF_oth FLOAT64 , controls_nhomalt_oth INT64 , AC_nfe INT64 , AF_nfe FLOAT64 , nhomalt_nfe INT64 , non_topmed_AC_female INT64 , non_topmed_AF_female FLOAT64 , non_topmed_nhomalt_female INT64 , non_neuro_AC_asj INT64 , non_neuro_AF_asj FLOAT64 , non_neuro_nhomalt_asj INT64 , non_topmed_AC_eas_female INT64 , non_topmed_AF_eas_female FLOAT64 , non_topmed_nhomalt_eas_female INT64 , non_neuro_AC_raw INT64 , non_neuro_AF_raw FLOAT64 , non_neuro_nhomalt_raw INT64 , non_topmed_AC_eas INT64 , non_topmed_AF_eas FLOAT64 , non_topmed_nhomalt_eas INT64 , non_topmed_AC_fin_male INT64 , non_topmed_AF_fin_male FLOAT64 , non_topmed_nhomalt_fin_male INT64 , AC_fin INT64 , AF_fin FLOAT64 , nhomalt_fin INT64 , AC_nfe_male INT64 , AF_nfe_male FLOAT64 , nhomalt_nfe_male INT64 , controls_AC_amr_male INT64 , controls_AF_amr_male FLOAT64 , controls_nhomalt_amr_male INT64 , controls_AC_afr_female INT64 , controls_AF_afr_female FLOAT64 , controls_nhomalt_afr_female INT64 , controls_AC_amr INT64 , controls_AF_amr FLOAT64 , controls_nhomalt_amr INT64 , AC_asj_female INT64 , AF_asj_female FLOAT64 , nhomalt_asj_female INT64 , non_neuro_AC_eas INT64 , non_neuro_AF_eas FLOAT64 , non_neuro_nhomalt_eas INT64 , non_neuro_AC_male INT64 , non_neuro_AF_male FLOAT64 , non_neuro_nhomalt_male INT64 , AC_asj INT64 , AF_asj FLOAT64 , nhomalt_asj INT64 , controls_AC_nfe_est INT64 , controls_AF_nfe_est FLOAT64 , controls_nhomalt_nfe_est INT64 , non_topmed_AC_asj_female INT64 , non_topmed_AF_asj_female FLOAT64 , non_topmed_nhomalt_asj_female INT64 , non_topmed_AC_oth INT64 , non_topmed_AF_oth FLOAT64 , non_topmed_nhomalt_oth INT64 , non_topmed_AC_fin_female INT64 , non_topmed_AF_fin_female FLOAT64 , non_topmed_nhomalt_fin_female INT64 , AC_oth INT64 , AF_oth FLOAT64 , nhomalt_oth INT64 , non_neuro_AC_nfe_male INT64 , non_neuro_AF_nfe_male FLOAT64 , non_neuro_nhomalt_nfe_male INT64 , controls_AC_female INT64 , controls_AF_female FLOAT64 , controls_nhomalt_female INT64 , non_topmed_AC_fin INT64 , non_topmed_AF_fin FLOAT64 , non_topmed_nhomalt_fin INT64 , non_topmed_AC_nfe_female INT64 , non_topmed_AF_nfe_female FLOAT64 , non_topmed_nhomalt_nfe_female INT64 , controls_AC_asj_male INT64 , controls_AF_asj_male FLOAT64 , controls_nhomalt_asj_male INT64 , non_topmed_AC_asj_male INT64 , non_topmed_AF_asj_male FLOAT64 , non_topmed_nhomalt_asj_male INT64 , non_neuro_AC_oth INT64 , non_neuro_AF_oth FLOAT64 , non_neuro_nhomalt_oth INT64 , AC_male INT64 , AF_male FLOAT64 , nhomalt_male INT64 , controls_AC_fin_female INT64 , controls_AF_fin_female FLOAT64 , controls_nhomalt_fin_female INT64 , controls_AC_asj_female INT64 , controls_AF_asj_female FLOAT64 , controls_nhomalt_asj_female INT64 , AC_amr_male INT64 , AF_amr_male FLOAT64 , nhomalt_amr_male INT64 , AC_amr_female INT64 , AF_amr_female FLOAT64 , nhomalt_amr_female INT64 , AC_oth_male INT64 , AF_oth_male FLOAT64 , nhomalt_oth_male INT64 , non_neuro_AC_nfe_seu INT64 , non_neuro_AF_nfe_seu FLOAT64 , non_neuro_nhomalt_nfe_seu INT64 , non_topmed_AC_afr_female INT64 , non_topmed_AF_afr_female FLOAT64 , non_topmed_nhomalt_afr_female INT64 , non_topmed_AC_afr INT64 , non_topmed_AF_afr FLOAT64 , non_topmed_nhomalt_afr INT64 , controls_AC INT64 , controls_AF FLOAT64 , controls_nhomalt INT64 , non_neuro_AC_oth_female INT64 , non_neuro_AF_oth_female FLOAT64 , non_neuro_nhomalt_oth_female INT64 , non_topmed_faf95_amr FLOAT64  for samples of Latino ancestry in the non_topmed subset""), non_topmed_faf99_amr FLOAT64  for samples of Latino ancestry in the non_topmed subset""), faf95_afr FLOAT64  for samples of African-American/African ancestry""), faf99_afr FLOAT64  for samples of African-American/African ancestry""), controls_faf95_afr FLOAT64  for samples of African-American/African ancestry in the controls subset""), controls_faf99_afr FLOAT64  for samples of African-American/African ancestry in the controls subset""), faf95_amr FLOAT64  for samples of Latino ancestry""), faf99_amr FLOAT64  for samples of Latino ancestry""), faf95_eas FLOAT64  for samples of East Asian ancestry""), faf99_eas FLOAT64  for samples of East Asian ancestry""), faf95 FLOAT64  for samples""), faf99 FLOAT64  for samples""), non_neuro_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_neuro subset""), non_neuro_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_neuro subset""), non_neuro_faf95_amr FLOAT64  for samples of Latino ancestry in the non_neuro subset""), non_neuro_faf99_amr FLOAT64  for samples of Latino ancestry in the non_neuro subset""), controls_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the controls subset""), controls_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the controls subset""), non_topmed_faf95 FLOAT64  for samples in the non_topmed subset""), non_topmed_faf99 FLOAT64  for samples in the non_topmed subset""), non_neuro_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_neuro subset""), non_neuro_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_neuro subset""), non_neuro_faf95 FLOAT64  for samples in the non_neuro subset""), non_neuro_faf99 FLOAT64  for samples in the non_neuro subset""), non_topmed_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_topmed subset""), non_topmed_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_topmed subset""), controls_faf95_eas FLOAT64  for samples of East Asian ancestry in the controls subset""), controls_faf99_eas FLOAT64  for samples of East Asian ancestry in the controls subset""), faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry""), faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry""), non_topmed_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_topmed subset""), non_topmed_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_topmed subset""), controls_faf95_amr FLOAT64  for samples of Latino ancestry in the controls subset""), controls_faf99_amr FLOAT64  for samples of Latino ancestry in the controls subset""), non_neuro_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_neuro subset""), non_neuro_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_neuro subset""), non_topmed_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_topmed subset""), non_topmed_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_topmed subset""), controls_faf95 FLOAT64  for samples in the controls subset""), controls_faf99 FLOAT64  for samples in the controls subset""), controls_popmax STRING , controls_AC_popmax INT64 , controls_AN_popmax INT64 , controls_AF_popmax FLOAT64  in the controls subset""), controls_nhomalt_popmax INT64 , popmax STRING , AC_popmax INT64 , AN_popmax INT64 , AF_popmax FLOAT64 ""), nhomalt_popmax INT64 , age_hist_het_bin_freq STRING , age_hist_het_n_smaller INT64 , age_hist_het_n_larger INT64 , age_hist_hom_bin_freq STRING , age_hist_hom_n_smaller INT64 , age_hist_hom_n_larger INT64 , non_neuro_popmax STRING , non_neuro_AC_popmax INT64 , non_neuro_AN_popmax INT64 , non_neuro_AF_popmax FLOAT64  in the non_neuro subset""), non_neuro_nhomalt_popmax INT64 , non_topmed_popmax STRING , non_topmed_AC_popmax INT64 , non_topmed_AN_popmax INT64 , non_topmed_AF_popmax FLOAT64  in the non_topmed subset""), non_topmed_nhomalt_popmax INT64 , vep ARRAY<STRUCT<allele STRING , Consequence STRING , IMPACT STRING , SYMBOL STRING , Gene STRING , Feature_type STRING , Feature STRING , BIOTYPE STRING , EXON STRING ""), INTRON STRING ""), HGVSc STRING , HGVSp STRING , cDNA_position STRING , CDS_position STRING , Protein_position STRING , Amino_acids STRING , Codons STRING , Existing_variation STRING , ALLELE_NUM INT64 , DISTANCE INT64 , STRAND INT64  on which the transcript/feature lies""), FLAGS STRING ""), VARIANT_CLASS STRING , MINIMISED INT64 , SYMBOL_SOURCE STRING , HGNC_ID INT64 , CANONICAL STRING , TSL STRING , APPRIS STRING , CCDS STRING , ENSP STRING , SWISSPROT STRING , TREMBL STRING , UNIPARC STRING , GENE_PHENO INT64 , SIFT STRING ""), PolyPhen STRING , DOMAINS STRING , HGVS_OFFSET INT64 , GMAF STRING , AFR_MAF STRING , AMR_MAF STRING , EAS_MAF STRING , EUR_MAF STRING , SAS_MAF STRING , AA_MAF STRING , EA_MAF STRING , ExAC_MAF STRING , ExAC_Adj_MAF STRING , ExAC_AFR_MAF STRING , ExAC_AMR_MAF STRING , ExAC_EAS_MAF STRING , ExAC_FIN_MAF STRING , ExAC_NFE_MAF STRING , ExAC_OTH_MAF STRING , ExAC_SAS_MAF STRING , CLIN_SIG STRING , SOMATIC STRING ; multiple values correspond to multiple values in the Existing_variation field""), PHENO STRING , PUBMED STRING  of publications that cite existing variant""), MOTIF_NAME STRING , MOTIF_POS INT64 , HIGH_INF_POS STRING ""), MOTIF_SCORE_CHANGE FLOAT64 , LoF STRING , LoF_filter STRING , LoF_flags STRING , LoF_info STRING >> >> .""),
  names ARRAY<STRING> .""),
  quality FLOAT64 ). Higher values imply better quality.""),
  filter ARRAY<STRING>  or \""PASS\"" indicating the variant has passed all filters.""),
  call ARRAY<STRUCT<name STRING , genotype ARRAY<INT64> , phaseset STRING . \""*\"" is used in cases where the genotype is phased, but no phase set (\""PS\"" in FORMAT) was specified."")>> ,
  AN INT64 ,
  rf_tp_probability FLOAT64 ,
  FS FLOAT64 ,
  InbreedingCoeff FLOAT64 ,
  MQ FLOAT64 ,
  MQRankSum FLOAT64 ,
  QD FLOAT64 ,
  ReadPosRankSum FLOAT64 ,
  SOR FLOAT64 ,
  VQSR_POSITIVE_TRAIN_SITE BOOL ,
  VQSR_NEGATIVE_TRAIN_SITE BOOL ,
  BaseQRankSum FLOAT64 ,
  ClippingRankSum FLOAT64 ,
  DP INT64 ,
  VQSLOD FLOAT64 ,
  VQSR_culprit STRING ,
  segdup BOOL ,
  lcr BOOL ,
  decoy BOOL ,
  nonpar BOOL  falls outside a pseudoautosomal region""),
  rf_positive_label BOOL ,
  rf_negative_label BOOL ,
  rf_label STRING ,
  rf_train BOOL ,
  transmitted_singleton BOOL ""),
  variant_type STRING ""),
  was_mixed BOOL ,
  has_star BOOL  observed elsewhere in the callset""),
  AN_nfe_seu INT64 ,
  controls_AN_afr_male INT64 ,
  non_topmed_AN_amr INT64 ,
  AN_raw INT64 ,
  AN_fin_female INT64 ,
  non_neuro_AN_asj_female INT64 ,
  non_neuro_AN_afr_male INT64 ,
  AN_afr_male INT64 ,
  AN_afr INT64 ,
  non_neuro_AN_afr_female INT64 ,
  non_topmed_AN_amr_female INT64 ,
  non_topmed_AN_oth_female INT64 ,
  AN_eas_female INT64 ,
  AN_afr_female INT64 ,
  non_neuro_AN_female INT64 ,
  controls_AN_afr INT64 ,
  AN_nfe_onf INT64 ,
  controls_AN_fin_male INT64 ,
  non_neuro_AN_nfe_nwe INT64 ,
  AN_fin_male INT64 ,
  AN_nfe_female INT64 ,
  AN_amr INT64 ,
  non_topmed_AN_nfe_male INT64 ,
  AN_eas INT64 ,
  non_neuro_AN_nfe_female INT64 ,
  non_neuro_AN_afr INT64 ,
  controls_AN_raw INT64 ,
  controls_AN_male INT64 ,
  non_topmed_AN_male INT64 ,
  controls_AN_nfe_female INT64 ,
  non_neuro_AN_amr INT64 ,
  non_neuro_AN_eas_female INT64 ,
  AN_asj_male INT64 ,
  controls_AN_nfe_male INT64 ,
  non_neuro_AN_fin INT64 ,
  AN_oth_female INT64 ,
  controls_AN_nfe INT64 ,
  controls_AN_oth_female INT64 ,
  controls_AN_asj INT64 ,
  non_neuro_AN_amr_male INT64 ,
  controls_AN_nfe_nwe INT64 ,
  AN_nfe_nwe INT64 ,
  controls_AN_nfe_seu INT64 ,
  non_neuro_AN_amr_female INT64 ,
  non_neuro_AN_nfe_onf INT64 ,
  non_topmed_AN_eas_male INT64 ,
  controls_AN_amr_female INT64 ,
  non_neuro_AN_fin_male INT64 ,
  AN_female INT64 ,
  non_neuro_AN_oth_male INT64 ,
  non_topmed_AN_nfe_est INT64 ,
  non_topmed_AN_nfe_nwe INT64 ,
  non_topmed_AN_amr_male INT64 ,
  non_topmed_AN_nfe_onf INT64 ,
  controls_AN_eas_male INT64 ,
  controls_AN_oth_male INT64 ,
  non_topmed_AN INT64 ,
  controls_AN_fin INT64 ,
  non_neuro_AN_nfe INT64 ,
  non_neuro_AN_fin_female INT64 ,
  non_topmed_AN_nfe_seu INT64 ,
  controls_AN_eas_female INT64 ,
  non_topmed_AN_asj INT64 ,
  controls_AN_nfe_onf INT64 ,
  non_neuro_AN INT64 ,
  non_topmed_AN_nfe INT64 ,
  non_topmed_AN_raw INT64 ,
  non_neuro_AN_nfe_est INT64 ,
  non_topmed_AN_oth_male INT64 ,
  AN_nfe_est INT64 ,
  non_topmed_AN_afr_male INT64 ,
  AN_eas_male INT64 ,
  controls_AN_eas INT64 ,
  non_neuro_AN_eas_male INT64 ,
  non_neuro_AN_asj_male INT64 ,
  controls_AN_oth INT64 ,
  AN_nfe INT64 ,
  non_topmed_AN_female INT64 ,
  non_neuro_AN_asj INT64 ,
  non_topmed_AN_eas_female INT64 ,
  non_neuro_AN_raw INT64 ,
  non_topmed_AN_eas INT64 ,
  non_topmed_AN_fin_male INT64 ,
  AN_fin INT64 ,
  AN_nfe_male INT64 ,
  controls_AN_amr_male INT64 ,
  controls_AN_afr_female INT64 ,
  controls_AN_amr INT64 ,
  AN_asj_female INT64 ,
  non_neuro_AN_eas INT64 ,
  non_neuro_AN_male INT64 ,
  AN_asj INT64 ,
  controls_AN_nfe_est INT64 ,
  non_topmed_AN_asj_female INT64 ,
  non_topmed_AN_oth INT64 ,
  non_topmed_AN_fin_female INT64 ,
  AN_oth INT64 ,
  non_neuro_AN_nfe_male INT64 ,
  controls_AN_female INT64 ,
  non_topmed_AN_fin INT64 ,
  non_topmed_AN_nfe_female INT64 ,
  controls_AN_asj_male INT64 ,
  non_topmed_AN_asj_male INT64 ,
  non_neuro_AN_oth INT64 ,
  AN_male INT64 ,
  controls_AN_fin_female INT64 ,
  controls_AN_asj_female INT64 ,
  AN_amr_male INT64 ,
  AN_amr_female INT64 ,
  AN_oth_male INT64 ,
  non_neuro_AN_nfe_seu INT64 ,
  non_topmed_AN_afr_female INT64 ,
  non_topmed_AN_afr INT64 ,
  controls_AN INT64 ,
  non_neuro_AN_oth_female INT64 
)
PARTITION BY RANGE_BUCKET(start_position, GENERATE_ARRAY(0, 181514610, 45390))
CLUSTER BY start_position, end_position;"

Some other tables have the similar structure: ['v2_1_1_genomes__chr5', 'v2_1_1_genomes__chr12', 'v2_1_1_genomes__chr16', 'v2_1_1_genomes__chr20', 'v2_1_1_genomes__chr2', 'v2_1_1_genomes__chr6', 'v2_1_1_genomes__chr22', 'v2_1_1_genomes__chr4', 'v2_1_1_genomes__chr9', 'v2_1_1_genomes__chr19', 'v2_1_1_genomes__chr18', 'v2_1_1_genomes__chr10', 'v2_1_1_genomes__chr17', 'v2_1_1_genomes__chr11', 'v2_1_1_genomes__chr8', 'v2_1_1_genomes__chr15', 'v2_1_1_genomes__chr21', 'v2_1_1_genomes__chr3', 'v2_1_1_genomes__chr1', 'v2_1_1_genomes__chr7', 'v2_1_1_genomes__chr14', 'v2_1_1_genomes__chr13']
,3
table_name,v2_1_1_genomes__chrX
ddl,"CREATE TABLE `bigquery-public-data.gnomAD.v2_1_1_genomes__chrX`
(
  reference_name STRING ,
  start_position INT64 . Corresponds to the first base of the string of reference bases.""),
  end_position INT64 . Corresponds to the first base after the last base in the reference allele.""),
  reference_bases STRING ,
  alternate_bases ARRAY<STRUCT<alt STRING , AC INT64 , AF FLOAT64 , allele_type STRING ""), n_alt_alleles INT64 , pab_max FLOAT64 , gq_hist_alt_bin_freq STRING , gq_hist_all_bin_freq STRING , dp_hist_alt_bin_freq STRING , dp_hist_alt_n_larger INT64 , dp_hist_all_bin_freq STRING , dp_hist_all_n_larger INT64 , ab_hist_alt_bin_freq STRING , AC_nfe_seu INT64 , AF_nfe_seu FLOAT64 , nhomalt_nfe_seu INT64 , controls_AC_afr_male INT64 , controls_AF_afr_male FLOAT64 , controls_nhomalt_afr_male INT64 , non_topmed_AC_amr INT64 , non_topmed_AF_amr FLOAT64 , non_topmed_nhomalt_amr INT64 , AC_raw INT64 , AF_raw FLOAT64 , nhomalt_raw INT64 , AC_fin_female INT64 , AF_fin_female FLOAT64 , nhomalt_fin_female INT64 , non_neuro_AC_asj_female INT64 , non_neuro_AF_asj_female FLOAT64 , non_neuro_nhomalt_asj_female INT64 , non_neuro_AC_afr_male INT64 , non_neuro_AF_afr_male FLOAT64 , non_neuro_nhomalt_afr_male INT64 , AC_afr_male INT64 , AF_afr_male FLOAT64 , nhomalt_afr_male INT64 , AC_afr INT64 , AF_afr FLOAT64 , nhomalt_afr INT64 , non_neuro_AC_afr_female INT64 , non_neuro_AF_afr_female FLOAT64 , non_neuro_nhomalt_afr_female INT64 , non_topmed_AC_amr_female INT64 , non_topmed_AF_amr_female FLOAT64 , non_topmed_nhomalt_amr_female INT64 , non_topmed_AC_oth_female INT64 , non_topmed_AF_oth_female FLOAT64 , non_topmed_nhomalt_oth_female INT64 , AC_eas_female INT64 , AF_eas_female FLOAT64 , nhomalt_eas_female INT64 , AC_afr_female INT64 , AF_afr_female FLOAT64 , nhomalt_afr_female INT64 , non_neuro_AC_female INT64 , non_neuro_AF_female FLOAT64 , non_neuro_nhomalt_female INT64 , controls_AC_afr INT64 , controls_AF_afr FLOAT64 , controls_nhomalt_afr INT64 , AC_nfe_onf INT64 , AF_nfe_onf FLOAT64 , nhomalt_nfe_onf INT64 , controls_AC_fin_male INT64 , controls_AF_fin_male FLOAT64 , controls_nhomalt_fin_male INT64 , non_neuro_AC_nfe_nwe INT64 , non_neuro_AF_nfe_nwe FLOAT64 , non_neuro_nhomalt_nfe_nwe INT64 , AC_fin_male INT64 , AF_fin_male FLOAT64 , nhomalt_fin_male INT64 , AC_nfe_female INT64 , AF_nfe_female FLOAT64 , nhomalt_nfe_female INT64 , AC_amr INT64 , AF_amr FLOAT64 , nhomalt_amr INT64 , non_topmed_AC_nfe_male INT64 , non_topmed_AF_nfe_male FLOAT64 , non_topmed_nhomalt_nfe_male INT64 , AC_eas INT64 , AF_eas FLOAT64 , nhomalt_eas INT64 , nhomalt INT64 , non_neuro_AC_nfe_female INT64 , non_neuro_AF_nfe_female FLOAT64 , non_neuro_nhomalt_nfe_female INT64 , non_neuro_AC_afr INT64 , non_neuro_AF_afr FLOAT64 , non_neuro_nhomalt_afr INT64 , controls_AC_raw INT64 , controls_AF_raw FLOAT64 , controls_nhomalt_raw INT64 , controls_AC_male INT64 , controls_AF_male FLOAT64 , controls_nhomalt_male INT64 , non_topmed_AC_male INT64 , non_topmed_AF_male FLOAT64 , non_topmed_nhomalt_male INT64 , controls_AC_nfe_female INT64 , controls_AF_nfe_female FLOAT64 , controls_nhomalt_nfe_female INT64 , non_neuro_AC_amr INT64 , non_neuro_AF_amr FLOAT64 , non_neuro_nhomalt_amr INT64 , non_neuro_AC_eas_female INT64 , non_neuro_AF_eas_female FLOAT64 , non_neuro_nhomalt_eas_female INT64 , AC_asj_male INT64 , AF_asj_male FLOAT64 , nhomalt_asj_male INT64 , controls_AC_nfe_male INT64 , controls_AF_nfe_male FLOAT64 , controls_nhomalt_nfe_male INT64 , non_neuro_AC_fin INT64 , non_neuro_AF_fin FLOAT64 , non_neuro_nhomalt_fin INT64 , AC_oth_female INT64 , AF_oth_female FLOAT64 , nhomalt_oth_female INT64 , controls_AC_nfe INT64 , controls_AF_nfe FLOAT64 , controls_nhomalt_nfe INT64 , controls_AC_oth_female INT64 , controls_AF_oth_female FLOAT64 , controls_nhomalt_oth_female INT64 , controls_AC_asj INT64 , controls_AF_asj FLOAT64 , controls_nhomalt_asj INT64 , non_neuro_AC_amr_male INT64 , non_neuro_AF_amr_male FLOAT64 , non_neuro_nhomalt_amr_male INT64 , controls_AC_nfe_nwe INT64 , controls_AF_nfe_nwe FLOAT64 , controls_nhomalt_nfe_nwe INT64 , AC_nfe_nwe INT64 , AF_nfe_nwe FLOAT64 , nhomalt_nfe_nwe INT64 , controls_AC_nfe_seu INT64 , controls_AF_nfe_seu FLOAT64 , controls_nhomalt_nfe_seu INT64 , non_neuro_AC_amr_female INT64 , non_neuro_AF_amr_female FLOAT64 , non_neuro_nhomalt_amr_female INT64 , non_neuro_AC_nfe_onf INT64 , non_neuro_AF_nfe_onf FLOAT64 , non_neuro_nhomalt_nfe_onf INT64 , non_topmed_AC_eas_male INT64 , non_topmed_AF_eas_male FLOAT64 , non_topmed_nhomalt_eas_male INT64 , controls_AC_amr_female INT64 , controls_AF_amr_female FLOAT64 , controls_nhomalt_amr_female INT64 , non_neuro_AC_fin_male INT64 , non_neuro_AF_fin_male FLOAT64 , non_neuro_nhomalt_fin_male INT64 , AC_female INT64 , AF_female FLOAT64 , nhomalt_female INT64 , non_neuro_AC_oth_male INT64 , non_neuro_AF_oth_male FLOAT64 , non_neuro_nhomalt_oth_male INT64 , non_topmed_AC_nfe_est INT64 , non_topmed_AF_nfe_est FLOAT64 , non_topmed_nhomalt_nfe_est INT64 , non_topmed_AC_nfe_nwe INT64 , non_topmed_AF_nfe_nwe FLOAT64 , non_topmed_nhomalt_nfe_nwe INT64 , non_topmed_AC_amr_male INT64 , non_topmed_AF_amr_male FLOAT64 , non_topmed_nhomalt_amr_male INT64 , non_topmed_AC_nfe_onf INT64 , non_topmed_AF_nfe_onf FLOAT64 , non_topmed_nhomalt_nfe_onf INT64 , controls_AC_eas_male INT64 , controls_AF_eas_male FLOAT64 , controls_nhomalt_eas_male INT64 , controls_AC_oth_male INT64 , controls_AF_oth_male FLOAT64 , controls_nhomalt_oth_male INT64 , non_topmed_AC INT64 , non_topmed_AF FLOAT64 , non_topmed_nhomalt INT64 , controls_AC_fin INT64 , controls_AF_fin FLOAT64 , controls_nhomalt_fin INT64 , non_neuro_AC_nfe INT64 , non_neuro_AF_nfe FLOAT64 , non_neuro_nhomalt_nfe INT64 , non_neuro_AC_fin_female INT64 , non_neuro_AF_fin_female FLOAT64 , non_neuro_nhomalt_fin_female INT64 , non_topmed_AC_nfe_seu INT64 , non_topmed_AF_nfe_seu FLOAT64 , non_topmed_nhomalt_nfe_seu INT64 , controls_AC_eas_female INT64 , controls_AF_eas_female FLOAT64 , controls_nhomalt_eas_female INT64 , non_topmed_AC_asj INT64 , non_topmed_AF_asj FLOAT64 , non_topmed_nhomalt_asj INT64 , controls_AC_nfe_onf INT64 , controls_AF_nfe_onf FLOAT64 , controls_nhomalt_nfe_onf INT64 , non_neuro_AC INT64 , non_neuro_AF FLOAT64 , non_neuro_nhomalt INT64 , non_topmed_AC_nfe INT64 , non_topmed_AF_nfe FLOAT64 , non_topmed_nhomalt_nfe INT64 , non_topmed_AC_raw INT64 , non_topmed_AF_raw FLOAT64 , non_topmed_nhomalt_raw INT64 , non_neuro_AC_nfe_est INT64 , non_neuro_AF_nfe_est FLOAT64 , non_neuro_nhomalt_nfe_est INT64 , non_topmed_AC_oth_male INT64 , non_topmed_AF_oth_male FLOAT64 , non_topmed_nhomalt_oth_male INT64 , AC_nfe_est INT64 , AF_nfe_est FLOAT64 , nhomalt_nfe_est INT64 , non_topmed_AC_afr_male INT64 , non_topmed_AF_afr_male FLOAT64 , non_topmed_nhomalt_afr_male INT64 , AC_eas_male INT64 , AF_eas_male FLOAT64 , nhomalt_eas_male INT64 , controls_AC_eas INT64 , controls_AF_eas FLOAT64 , controls_nhomalt_eas INT64 , non_neuro_AC_eas_male INT64 , non_neuro_AF_eas_male FLOAT64 , non_neuro_nhomalt_eas_male INT64 , non_neuro_AC_asj_male INT64 , non_neuro_AF_asj_male FLOAT64 , non_neuro_nhomalt_asj_male INT64 , controls_AC_oth INT64 , controls_AF_oth FLOAT64 , controls_nhomalt_oth INT64 , AC_nfe INT64 , AF_nfe FLOAT64 , nhomalt_nfe INT64 , non_topmed_AC_female INT64 , non_topmed_AF_female FLOAT64 , non_topmed_nhomalt_female INT64 , non_neuro_AC_asj INT64 , non_neuro_AF_asj FLOAT64 , non_neuro_nhomalt_asj INT64 , non_topmed_AC_eas_female INT64 , non_topmed_AF_eas_female FLOAT64 , non_topmed_nhomalt_eas_female INT64 , non_neuro_AC_raw INT64 , non_neuro_AF_raw FLOAT64 , non_neuro_nhomalt_raw INT64 , non_topmed_AC_eas INT64 , non_topmed_AF_eas FLOAT64 , non_topmed_nhomalt_eas INT64 , non_topmed_AC_fin_male INT64 , non_topmed_AF_fin_male FLOAT64 , non_topmed_nhomalt_fin_male INT64 , AC_fin INT64 , AF_fin FLOAT64 , nhomalt_fin INT64 , AC_nfe_male INT64 , AF_nfe_male FLOAT64 , nhomalt_nfe_male INT64 , controls_AC_amr_male INT64 , controls_AF_amr_male FLOAT64 , controls_nhomalt_amr_male INT64 , controls_AC_afr_female INT64 , controls_AF_afr_female FLOAT64 , controls_nhomalt_afr_female INT64 , controls_AC_amr INT64 , controls_AF_amr FLOAT64 , controls_nhomalt_amr INT64 , AC_asj_female INT64 , AF_asj_female FLOAT64 , nhomalt_asj_female INT64 , non_neuro_AC_eas INT64 , non_neuro_AF_eas FLOAT64 , non_neuro_nhomalt_eas INT64 , non_neuro_AC_male INT64 , non_neuro_AF_male FLOAT64 , non_neuro_nhomalt_male INT64 , AC_asj INT64 , AF_asj FLOAT64 , nhomalt_asj INT64 , controls_AC_nfe_est INT64 , controls_AF_nfe_est FLOAT64 , controls_nhomalt_nfe_est INT64 , non_topmed_AC_asj_female INT64 , non_topmed_AF_asj_female FLOAT64 , non_topmed_nhomalt_asj_female INT64 , non_topmed_AC_oth INT64 , non_topmed_AF_oth FLOAT64 , non_topmed_nhomalt_oth INT64 , non_topmed_AC_fin_female INT64 , non_topmed_AF_fin_female FLOAT64 , non_topmed_nhomalt_fin_female INT64 , AC_oth INT64 , AF_oth FLOAT64 , nhomalt_oth INT64 , non_neuro_AC_nfe_male INT64 , non_neuro_AF_nfe_male FLOAT64 , non_neuro_nhomalt_nfe_male INT64 , controls_AC_female INT64 , controls_AF_female FLOAT64 , controls_nhomalt_female INT64 , non_topmed_AC_fin INT64 , non_topmed_AF_fin FLOAT64 , non_topmed_nhomalt_fin INT64 , non_topmed_AC_nfe_female INT64 , non_topmed_AF_nfe_female FLOAT64 , non_topmed_nhomalt_nfe_female INT64 , controls_AC_asj_male INT64 , controls_AF_asj_male FLOAT64 , controls_nhomalt_asj_male INT64 , non_topmed_AC_asj_male INT64 , non_topmed_AF_asj_male FLOAT64 , non_topmed_nhomalt_asj_male INT64 , non_neuro_AC_oth INT64 , non_neuro_AF_oth FLOAT64 , non_neuro_nhomalt_oth INT64 , AC_male INT64 , AF_male FLOAT64 , nhomalt_male INT64 , controls_AC_fin_female INT64 , controls_AF_fin_female FLOAT64 , controls_nhomalt_fin_female INT64 , controls_AC_asj_female INT64 , controls_AF_asj_female FLOAT64 , controls_nhomalt_asj_female INT64 , AC_amr_male INT64 , AF_amr_male FLOAT64 , nhomalt_amr_male INT64 , AC_amr_female INT64 , AF_amr_female FLOAT64 , nhomalt_amr_female INT64 , AC_oth_male INT64 , AF_oth_male FLOAT64 , nhomalt_oth_male INT64 , non_neuro_AC_nfe_seu INT64 , non_neuro_AF_nfe_seu FLOAT64 , non_neuro_nhomalt_nfe_seu INT64 , non_topmed_AC_afr_female INT64 , non_topmed_AF_afr_female FLOAT64 , non_topmed_nhomalt_afr_female INT64 , non_topmed_AC_afr INT64 , non_topmed_AF_afr FLOAT64 , non_topmed_nhomalt_afr INT64 , controls_AC INT64 , controls_AF FLOAT64 , controls_nhomalt INT64 , non_neuro_AC_oth_female INT64 , non_neuro_AF_oth_female FLOAT64 , non_neuro_nhomalt_oth_female INT64 , non_topmed_faf95_amr FLOAT64  for samples of Latino ancestry in the non_topmed subset""), non_topmed_faf99_amr FLOAT64  for samples of Latino ancestry in the non_topmed subset""), faf95_afr FLOAT64  for samples of African-American/African ancestry""), faf99_afr FLOAT64  for samples of African-American/African ancestry""), controls_faf95_afr FLOAT64  for samples of African-American/African ancestry in the controls subset""), controls_faf99_afr FLOAT64  for samples of African-American/African ancestry in the controls subset""), faf95_amr FLOAT64  for samples of Latino ancestry""), faf99_amr FLOAT64  for samples of Latino ancestry""), faf95_eas FLOAT64  for samples of East Asian ancestry""), faf99_eas FLOAT64  for samples of East Asian ancestry""), faf95 FLOAT64  for samples""), faf99 FLOAT64  for samples""), non_neuro_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_neuro subset""), non_neuro_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_neuro subset""), non_neuro_faf95_amr FLOAT64  for samples of Latino ancestry in the non_neuro subset""), non_neuro_faf99_amr FLOAT64  for samples of Latino ancestry in the non_neuro subset""), controls_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the controls subset""), controls_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the controls subset""), non_topmed_faf95 FLOAT64  for samples in the non_topmed subset""), non_topmed_faf99 FLOAT64  for samples in the non_topmed subset""), non_neuro_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_neuro subset""), non_neuro_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_neuro subset""), non_neuro_faf95 FLOAT64  for samples in the non_neuro subset""), non_neuro_faf99 FLOAT64  for samples in the non_neuro subset""), non_topmed_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_topmed subset""), non_topmed_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_topmed subset""), controls_faf95_eas FLOAT64  for samples of East Asian ancestry in the controls subset""), controls_faf99_eas FLOAT64  for samples of East Asian ancestry in the controls subset""), faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry""), faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry""), non_topmed_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_topmed subset""), non_topmed_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_topmed subset""), controls_faf95_amr FLOAT64  for samples of Latino ancestry in the controls subset""), controls_faf99_amr FLOAT64  for samples of Latino ancestry in the controls subset""), non_neuro_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_neuro subset""), non_neuro_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_neuro subset""), non_topmed_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_topmed subset""), non_topmed_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_topmed subset""), controls_faf95 FLOAT64  for samples in the controls subset""), controls_faf99 FLOAT64  for samples in the controls subset""), controls_popmax STRING , controls_AC_popmax INT64 , controls_AN_popmax INT64 , controls_AF_popmax FLOAT64  in the controls subset""), controls_nhomalt_popmax INT64 , popmax STRING , AC_popmax INT64 , AN_popmax INT64 , AF_popmax FLOAT64 ""), nhomalt_popmax INT64 , age_hist_het_bin_freq STRING , age_hist_het_n_smaller INT64 , age_hist_het_n_larger INT64 , age_hist_hom_bin_freq STRING , age_hist_hom_n_smaller INT64 , age_hist_hom_n_larger INT64 , non_neuro_popmax STRING , non_neuro_AC_popmax INT64 , non_neuro_AN_popmax INT64 , non_neuro_AF_popmax FLOAT64  in the non_neuro subset""), non_neuro_nhomalt_popmax INT64 , non_topmed_popmax STRING , non_topmed_AC_popmax INT64 , non_topmed_AN_popmax INT64 , non_topmed_AF_popmax FLOAT64  in the non_topmed subset""), non_topmed_nhomalt_popmax INT64 , vep ARRAY<STRUCT<allele STRING , Consequence STRING , IMPACT STRING , SYMBOL STRING , Gene STRING , Feature_type STRING , Feature STRING , BIOTYPE STRING , EXON STRING ""), INTRON STRING ""), HGVSc STRING , HGVSp STRING , cDNA_position STRING , CDS_position STRING , Protein_position STRING , Amino_acids STRING , Codons STRING , Existing_variation STRING , ALLELE_NUM INT64 , DISTANCE INT64 , STRAND INT64  on which the transcript/feature lies""), FLAGS STRING ""), VARIANT_CLASS STRING , MINIMISED INT64 , SYMBOL_SOURCE STRING , HGNC_ID INT64 , CANONICAL STRING , TSL STRING , APPRIS STRING , CCDS STRING , ENSP STRING , SWISSPROT STRING , TREMBL STRING , UNIPARC STRING , GENE_PHENO INT64 , SIFT STRING ""), PolyPhen STRING , DOMAINS STRING , HGVS_OFFSET INT64 , GMAF STRING , AFR_MAF STRING , AMR_MAF STRING , EAS_MAF STRING , EUR_MAF STRING , SAS_MAF STRING , AA_MAF STRING , EA_MAF STRING , ExAC_MAF STRING , ExAC_Adj_MAF STRING , ExAC_AFR_MAF STRING , ExAC_AMR_MAF STRING , ExAC_EAS_MAF STRING , ExAC_FIN_MAF STRING , ExAC_NFE_MAF STRING , ExAC_OTH_MAF STRING , ExAC_SAS_MAF STRING , CLIN_SIG STRING , SOMATIC STRING ; multiple values correspond to multiple values in the Existing_variation field""), PHENO STRING , PUBMED STRING  of publications that cite existing variant""), MOTIF_NAME STRING , MOTIF_POS INT64 , HIGH_INF_POS STRING ""), MOTIF_SCORE_CHANGE FLOAT64 , LoF STRING , LoF_filter STRING , LoF_flags STRING , LoF_info STRING >> >> .""),
  names ARRAY<STRING> .""),
  quality FLOAT64 ). Higher values imply better quality.""),
  filter ARRAY<STRING>  or \""PASS\"" indicating the variant has passed all filters.""),
  call ARRAY<STRUCT<name STRING , genotype ARRAY<INT64> , phaseset STRING . \""*\"" is used in cases where the genotype is phased, but no phase set (\""PS\"" in FORMAT) was specified."")>> ,
  AN INT64 ,
  rf_tp_probability FLOAT64 ,
  FS FLOAT64 ,
  InbreedingCoeff FLOAT64 ,
  MQ FLOAT64 ,
  MQRankSum FLOAT64 ,
  QD FLOAT64 ,
  ReadPosRankSum FLOAT64 ,
  SOR FLOAT64 ,
  VQSR_POSITIVE_TRAIN_SITE BOOL ,
  VQSR_NEGATIVE_TRAIN_SITE BOOL ,
  BaseQRankSum FLOAT64 ,
  ClippingRankSum FLOAT64 ,
  DP INT64 ,
  VQSLOD FLOAT64 ,
  VQSR_culprit STRING ,
  segdup BOOL ,
  lcr BOOL ,
  decoy BOOL ,
  nonpar BOOL  falls outside a pseudoautosomal region""),
  rf_positive_label BOOL ,
  rf_negative_label BOOL ,
  rf_label STRING ,
  rf_train BOOL ,
  transmitted_singleton BOOL ""),
  variant_type STRING ""),
  was_mixed BOOL ,
  has_star BOOL  observed elsewhere in the callset""),
  AN_nfe_seu INT64 ,
  controls_AN_afr_male INT64 ,
  non_topmed_AN_amr INT64 ,
  AN_raw INT64 ,
  AN_fin_female INT64 ,
  non_neuro_AN_asj_female INT64 ,
  non_neuro_AN_afr_male INT64 ,
  AN_afr_male INT64 ,
  AN_afr INT64 ,
  non_neuro_AN_afr_female INT64 ,
  non_topmed_AN_amr_female INT64 ,
  non_topmed_AN_oth_female INT64 ,
  AN_eas_female INT64 ,
  AN_afr_female INT64 ,
  non_neuro_AN_female INT64 ,
  controls_AN_afr INT64 ,
  AN_nfe_onf INT64 ,
  controls_AN_fin_male INT64 ,
  non_neuro_AN_nfe_nwe INT64 ,
  AN_fin_male INT64 ,
  AN_nfe_female INT64 ,
  AN_amr INT64 ,
  non_topmed_AN_nfe_male INT64 ,
  AN_eas INT64 ,
  non_neuro_AN_nfe_female INT64 ,
  non_neuro_AN_afr INT64 ,
  controls_AN_raw INT64 ,
  controls_AN_male INT64 ,
  non_topmed_AN_male INT64 ,
  controls_AN_nfe_female INT64 ,
  non_neuro_AN_amr INT64 ,
  non_neuro_AN_eas_female INT64 ,
  AN_asj_male INT64 ,
  controls_AN_nfe_male INT64 ,
  non_neuro_AN_fin INT64 ,
  AN_oth_female INT64 ,
  controls_AN_nfe INT64 ,
  controls_AN_oth_female INT64 ,
  controls_AN_asj INT64 ,
  non_neuro_AN_amr_male INT64 ,
  controls_AN_nfe_nwe INT64 ,
  AN_nfe_nwe INT64 ,
  controls_AN_nfe_seu INT64 ,
  non_neuro_AN_amr_female INT64 ,
  non_neuro_AN_nfe_onf INT64 ,
  non_topmed_AN_eas_male INT64 ,
  controls_AN_amr_female INT64 ,
  non_neuro_AN_fin_male INT64 ,
  AN_female INT64 ,
  non_neuro_AN_oth_male INT64 ,
  non_topmed_AN_nfe_est INT64 ,
  non_topmed_AN_nfe_nwe INT64 ,
  non_topmed_AN_amr_male INT64 ,
  non_topmed_AN_nfe_onf INT64 ,
  controls_AN_eas_male INT64 ,
  controls_AN_oth_male INT64 ,
  non_topmed_AN INT64 ,
  controls_AN_fin INT64 ,
  non_neuro_AN_nfe INT64 ,
  non_neuro_AN_fin_female INT64 ,
  non_topmed_AN_nfe_seu INT64 ,
  controls_AN_eas_female INT64 ,
  non_topmed_AN_asj INT64 ,
  controls_AN_nfe_onf INT64 ,
  non_neuro_AN INT64 ,
  non_topmed_AN_nfe INT64 ,
  non_topmed_AN_raw INT64 ,
  non_neuro_AN_nfe_est INT64 ,
  non_topmed_AN_oth_male INT64 ,
  AN_nfe_est INT64 ,
  non_topmed_AN_afr_male INT64 ,
  AN_eas_male INT64 ,
  controls_AN_eas INT64 ,
  non_neuro_AN_eas_male INT64 ,
  non_neuro_AN_asj_male INT64 ,
  controls_AN_oth INT64 ,
  AN_nfe INT64 ,
  non_topmed_AN_female INT64 ,
  non_neuro_AN_asj INT64 ,
  non_topmed_AN_eas_female INT64 ,
  non_neuro_AN_raw INT64 ,
  non_topmed_AN_eas INT64 ,
  non_topmed_AN_fin_male INT64 ,
  AN_fin INT64 ,
  AN_nfe_male INT64 ,
  controls_AN_amr_male INT64 ,
  controls_AN_afr_female INT64 ,
  controls_AN_amr INT64 ,
  AN_asj_female INT64 ,
  non_neuro_AN_eas INT64 ,
  non_neuro_AN_male INT64 ,
  AN_asj INT64 ,
  controls_AN_nfe_est INT64 ,
  non_topmed_AN_asj_female INT64 ,
  non_topmed_AN_oth INT64 ,
  non_topmed_AN_fin_female INT64 ,
  AN_oth INT64 ,
  non_neuro_AN_nfe_male INT64 ,
  controls_AN_female INT64 ,
  non_topmed_AN_fin INT64 ,
  non_topmed_AN_nfe_female INT64 ,
  controls_AN_asj_male INT64 ,
  non_topmed_AN_asj_male INT64 ,
  non_neuro_AN_oth INT64 ,
  AN_male INT64 ,
  controls_AN_fin_female INT64 ,
  controls_AN_asj_female INT64 ,
  AN_amr_male INT64 ,
  AN_amr_female INT64 ,
  AN_oth_male INT64 ,
  non_neuro_AN_nfe_seu INT64 ,
  non_topmed_AN_afr_female INT64 ,
  non_topmed_AN_afr INT64 ,
  controls_AN INT64 ,
  non_neuro_AN_oth_female INT64 
)
PARTITION BY RANGE_BUCKET(start_position, GENERATE_ARRAY(0, 156080970, 39030))
CLUSTER BY start_position, end_position;"

,4
table_name,v2_1_1_exomes__chrX
ddl,"CREATE TABLE `bigquery-public-data.gnomAD.v2_1_1_exomes__chrX`
(
  reference_name STRING ,
  start_position INT64 . Corresponds to the first base of the string of reference bases.""),
  end_position INT64 . Corresponds to the first base after the last base in the reference allele.""),
  reference_bases STRING ,
  alternate_bases ARRAY<STRUCT<alt STRING , AC INT64 , AF FLOAT64 , allele_type STRING ""), n_alt_alleles INT64 , pab_max FLOAT64 , gq_hist_alt_bin_freq STRING , gq_hist_all_bin_freq STRING , dp_hist_alt_bin_freq STRING , dp_hist_alt_n_larger INT64 , dp_hist_all_bin_freq STRING , dp_hist_all_n_larger INT64 , ab_hist_alt_bin_freq STRING , AC_nfe_seu INT64 , AF_nfe_seu FLOAT64 , nhomalt_nfe_seu INT64 , controls_AC_afr_male INT64 , controls_AF_afr_male FLOAT64 , controls_nhomalt_afr_male INT64 , non_neuro_AC_eas_kor INT64 , non_neuro_AF_eas_kor FLOAT64 , non_neuro_nhomalt_eas_kor INT64 , non_topmed_AC_amr INT64 , non_topmed_AF_amr FLOAT64 , non_topmed_nhomalt_amr INT64 , non_cancer_AC_asj_female INT64 , non_cancer_AF_asj_female FLOAT64 , non_cancer_nhomalt_asj_female INT64 , AC_raw INT64 , AF_raw FLOAT64 , nhomalt_raw INT64 , AC_fin_female INT64 , AF_fin_female FLOAT64 , nhomalt_fin_female INT64 , non_cancer_AC_oth_female INT64 , non_cancer_AF_oth_female FLOAT64 , non_cancer_nhomalt_oth_female INT64 , AC_nfe_bgr INT64  ancestry""), AF_nfe_bgr FLOAT64  ancestry""), nhomalt_nfe_bgr INT64  ancestry""), non_neuro_AC_asj_female INT64 , non_neuro_AF_asj_female FLOAT64 , non_neuro_nhomalt_asj_female INT64 , AC_sas_male INT64 , AF_sas_male FLOAT64 , nhomalt_sas_male INT64 , non_neuro_AC_afr_male INT64 , non_neuro_AF_afr_male FLOAT64 , non_neuro_nhomalt_afr_male INT64 , AC_afr_male INT64 , AF_afr_male FLOAT64 , nhomalt_afr_male INT64 , AC_afr INT64 , AF_afr FLOAT64 , nhomalt_afr INT64 , controls_AC_nfe_swe INT64 , controls_AF_nfe_swe FLOAT64 , controls_nhomalt_nfe_swe INT64 , non_neuro_AC_afr_female INT64 , non_neuro_AF_afr_female FLOAT64 , non_neuro_nhomalt_afr_female INT64 , non_topmed_AC_amr_female INT64 , non_topmed_AF_amr_female FLOAT64 , non_topmed_nhomalt_amr_female INT64 , non_cancer_AC_female INT64 , non_cancer_AF_female FLOAT64 , non_cancer_nhomalt_female INT64 , non_cancer_AC_nfe_onf INT64 , non_cancer_AF_nfe_onf FLOAT64 , non_cancer_nhomalt_nfe_onf INT64 , non_cancer_AC_male INT64 , non_cancer_AF_male FLOAT64 , non_cancer_nhomalt_male INT64 , non_topmed_AC_oth_female INT64 , non_topmed_AF_oth_female FLOAT64 , non_topmed_nhomalt_oth_female INT64 , AC_eas_female INT64 , AF_eas_female FLOAT64 , nhomalt_eas_female INT64 , non_cancer_AC_sas_female INT64 , non_cancer_AF_sas_female FLOAT64 , non_cancer_nhomalt_sas_female INT64 , AC_afr_female INT64 , AF_afr_female FLOAT64 , nhomalt_afr_female INT64 , AC_sas INT64 , AF_sas FLOAT64 , nhomalt_sas INT64 , non_neuro_AC_female INT64 , non_neuro_AF_female FLOAT64 , non_neuro_nhomalt_female INT64 , controls_AC_afr INT64 , controls_AF_afr FLOAT64 , controls_nhomalt_afr INT64 , non_neuro_AC_eas_jpn INT64 , non_neuro_AF_eas_jpn FLOAT64 , non_neuro_nhomalt_eas_jpn INT64 , AC_nfe_onf INT64 , AF_nfe_onf FLOAT64 , nhomalt_nfe_onf INT64 , non_cancer_AC_amr_male INT64 , non_cancer_AF_amr_male FLOAT64 , non_cancer_nhomalt_amr_male INT64 , controls_AC_fin_male INT64 , controls_AF_fin_male FLOAT64 , controls_nhomalt_fin_male INT64 , non_neuro_AC_nfe_nwe INT64 , non_neuro_AF_nfe_nwe FLOAT64 , non_neuro_nhomalt_nfe_nwe INT64 , AC_fin_male INT64 , AF_fin_male FLOAT64 , nhomalt_fin_male INT64 , AC_nfe_female INT64 , AF_nfe_female FLOAT64 , nhomalt_nfe_female INT64 , AC_amr INT64 , AF_amr FLOAT64 , nhomalt_amr INT64 , non_topmed_AC_nfe_male INT64 , non_topmed_AF_nfe_male FLOAT64 , non_topmed_nhomalt_nfe_male INT64 , non_neuro_AC_sas INT64 , non_neuro_AF_sas FLOAT64 , non_neuro_nhomalt_sas INT64 , non_cancer_AC_fin_male INT64 , non_cancer_AF_fin_male FLOAT64 , non_cancer_nhomalt_fin_male INT64 , non_cancer_AC_nfe_seu INT64 , non_cancer_AF_nfe_seu FLOAT64 , non_cancer_nhomalt_nfe_seu INT64 , AC_eas INT64 , AF_eas FLOAT64 , nhomalt_eas INT64 , nhomalt INT64 , non_neuro_AC_nfe_female INT64 , non_neuro_AF_nfe_female FLOAT64 , non_neuro_nhomalt_nfe_female INT64 , non_neuro_AC_afr INT64 , non_neuro_AF_afr FLOAT64 , non_neuro_nhomalt_afr INT64 , controls_AC_raw INT64 , controls_AF_raw FLOAT64 , controls_nhomalt_raw INT64 , non_cancer_AC_eas INT64 , non_cancer_AF_eas FLOAT64 , non_cancer_nhomalt_eas INT64 , non_cancer_AC_amr_female INT64 , non_cancer_AF_amr_female FLOAT64 , non_cancer_nhomalt_amr_female INT64 , non_neuro_AC_nfe_swe INT64 , non_neuro_AF_nfe_swe FLOAT64 , non_neuro_nhomalt_nfe_swe INT64 , controls_AC_male INT64 , controls_AF_male FLOAT64 , controls_nhomalt_male INT64 , non_topmed_AC_male INT64 , non_topmed_AF_male FLOAT64 , non_topmed_nhomalt_male INT64 , controls_AC_eas_jpn INT64 , controls_AF_eas_jpn FLOAT64 , controls_nhomalt_eas_jpn INT64 , controls_AC_nfe_female INT64 , controls_AF_nfe_female FLOAT64 , controls_nhomalt_nfe_female INT64 , non_neuro_AC_amr INT64 , non_neuro_AF_amr FLOAT64 , non_neuro_nhomalt_amr INT64 , non_neuro_AC_eas_female INT64 , non_neuro_AF_eas_female FLOAT64 , non_neuro_nhomalt_eas_female INT64 , AC_asj_male INT64 , AF_asj_male FLOAT64 , nhomalt_asj_male INT64 , controls_AC_nfe_male INT64 , controls_AF_nfe_male FLOAT64 , controls_nhomalt_nfe_male INT64 , non_neuro_AC_fin INT64 , non_neuro_AF_fin FLOAT64 , non_neuro_nhomalt_fin INT64 , non_topmed_AC_sas INT64 , non_topmed_AF_sas FLOAT64 , non_topmed_nhomalt_sas INT64 , non_cancer_AC_nfe_female INT64 , non_cancer_AF_nfe_female FLOAT64 , non_cancer_nhomalt_nfe_female INT64 , AC_oth_female INT64 , AF_oth_female FLOAT64 , nhomalt_oth_female INT64 , non_cancer_AC_asj INT64 , non_cancer_AF_asj FLOAT64 , non_cancer_nhomalt_asj INT64 , AC_nfe_swe INT64 , AF_nfe_swe FLOAT64 , nhomalt_nfe_swe INT64 , controls_AC_nfe INT64 , controls_AF_nfe FLOAT64 , controls_nhomalt_nfe INT64 , controls_AC_oth_female INT64 , controls_AF_oth_female FLOAT64 , controls_nhomalt_oth_female INT64 , controls_AC_asj INT64 , controls_AF_asj FLOAT64 , controls_nhomalt_asj INT64 , non_neuro_AC_amr_male INT64 , non_neuro_AF_amr_male FLOAT64 , non_neuro_nhomalt_amr_male INT64 , controls_AC_nfe_nwe INT64 , controls_AF_nfe_nwe FLOAT64 , controls_nhomalt_nfe_nwe INT64 , AC_nfe_nwe INT64 , AF_nfe_nwe FLOAT64 , nhomalt_nfe_nwe INT64 , controls_AC_nfe_seu INT64 , controls_AF_nfe_seu FLOAT64 , controls_nhomalt_nfe_seu INT64 , controls_AC_sas_female INT64 , controls_AF_sas_female FLOAT64 , controls_nhomalt_sas_female INT64 , non_neuro_AC_amr_female INT64 , non_neuro_AF_amr_female FLOAT64 , non_neuro_nhomalt_amr_female INT64 , non_cancer_AC_eas_jpn INT64 , non_cancer_AF_eas_jpn FLOAT64 , non_cancer_nhomalt_eas_jpn INT64 , non_neuro_AC_nfe_onf INT64 , non_neuro_AF_nfe_onf FLOAT64 , non_neuro_nhomalt_nfe_onf INT64 , non_topmed_AC_eas_male INT64 , non_topmed_AF_eas_male FLOAT64 , non_topmed_nhomalt_eas_male INT64 , AC_eas_jpn INT64 , AF_eas_jpn FLOAT64 , nhomalt_eas_jpn INT64 , non_cancer_AC_afr_male INT64 , non_cancer_AF_afr_male FLOAT64 , non_cancer_nhomalt_afr_male INT64 , non_cancer_AC_afr INT64 , non_cancer_AF_afr FLOAT64 , non_cancer_nhomalt_afr INT64 , controls_AC_amr_female INT64 , controls_AF_amr_female FLOAT64 , controls_nhomalt_amr_female INT64 , non_neuro_AC_fin_male INT64 , non_neuro_AF_fin_male FLOAT64 , non_neuro_nhomalt_fin_male INT64 , AC_female INT64 , AF_female FLOAT64 , nhomalt_female INT64 , non_neuro_AC_nfe_bgr INT64  ancestry in the non_neuro subset""), non_neuro_AF_nfe_bgr FLOAT64  ancestry in the non_neuro subset""), non_neuro_nhomalt_nfe_bgr INT64  ancestry in the non_neuro subset""), non_neuro_AC_oth_male INT64 , non_neuro_AF_oth_male FLOAT64 , non_neuro_nhomalt_oth_male INT64 , non_topmed_AC_nfe_est INT64 , non_topmed_AF_nfe_est FLOAT64 , non_topmed_nhomalt_nfe_est INT64 , non_topmed_AC_nfe_nwe INT64 , non_topmed_AF_nfe_nwe FLOAT64 , non_topmed_nhomalt_nfe_nwe INT64 , non_topmed_AC_amr_male INT64 , non_topmed_AF_amr_male FLOAT64 , non_topmed_nhomalt_amr_male INT64 , non_cancer_AC_amr INT64 , non_cancer_AF_amr FLOAT64 , non_cancer_nhomalt_amr INT64 , non_topmed_AC_nfe_swe INT64 , non_topmed_AF_nfe_swe FLOAT64 , non_topmed_nhomalt_nfe_swe INT64 , non_topmed_AC_nfe_onf INT64 , non_topmed_AF_nfe_onf FLOAT64 , non_topmed_nhomalt_nfe_onf INT64 , controls_AC_eas_kor INT64 , controls_AF_eas_kor FLOAT64 , controls_nhomalt_eas_kor INT64 , non_topmed_AC_eas_oea INT64 , non_topmed_AF_eas_oea FLOAT64 , non_topmed_nhomalt_eas_oea INT64 , controls_AC_eas_male INT64 , controls_AF_eas_male FLOAT64 , controls_nhomalt_eas_male INT64 , controls_AC_oth_male INT64 , controls_AF_oth_male FLOAT64 , controls_nhomalt_oth_male INT64 , non_topmed_AC INT64 , non_topmed_AF FLOAT64 , non_topmed_nhomalt INT64 , controls_AC_fin INT64 , controls_AF_fin FLOAT64 , controls_nhomalt_fin INT64 , AC_eas_kor INT64 , AF_eas_kor FLOAT64 , nhomalt_eas_kor INT64 , non_neuro_AC_nfe INT64 , non_neuro_AF_nfe FLOAT64 , non_neuro_nhomalt_nfe INT64 , non_neuro_AC_fin_female INT64 , non_neuro_AF_fin_female FLOAT64 , non_neuro_nhomalt_fin_female INT64 , non_cancer_AC_nfe_male INT64 , non_cancer_AF_nfe_male FLOAT64 , non_cancer_nhomalt_nfe_male INT64 , controls_AC_eas_oea INT64 , controls_AF_eas_oea FLOAT64 , controls_nhomalt_eas_oea INT64 , non_topmed_AC_nfe_seu INT64 , non_topmed_AF_nfe_seu FLOAT64 , non_topmed_nhomalt_nfe_seu INT64 , controls_AC_eas_female INT64 , controls_AF_eas_female FLOAT64 , controls_nhomalt_eas_female INT64 , non_topmed_AC_asj INT64 , non_topmed_AF_asj FLOAT64 , non_topmed_nhomalt_asj INT64 , controls_AC_nfe_onf INT64 , controls_AF_nfe_onf FLOAT64 , controls_nhomalt_nfe_onf INT64 , non_neuro_AC INT64 , non_neuro_AF FLOAT64 , non_neuro_nhomalt INT64 , AC_eas_oea INT64 , AF_eas_oea FLOAT64 , nhomalt_eas_oea INT64 , non_topmed_AC_nfe INT64 , non_topmed_AF_nfe FLOAT64 , non_topmed_nhomalt_nfe INT64 , non_cancer_AC_oth INT64 , non_cancer_AF_oth FLOAT64 , non_cancer_nhomalt_oth INT64 , non_topmed_AC_raw INT64 , non_topmed_AF_raw FLOAT64 , non_topmed_nhomalt_raw INT64 , non_neuro_AC_nfe_est INT64 , non_neuro_AF_nfe_est FLOAT64 , non_neuro_nhomalt_nfe_est INT64 , non_topmed_AC_oth_male INT64 , non_topmed_AF_oth_male FLOAT64 , non_topmed_nhomalt_oth_male INT64 , non_cancer_AC_oth_male INT64 , non_cancer_AF_oth_male FLOAT64 , non_cancer_nhomalt_oth_male INT64 , AC_nfe_est INT64 , AF_nfe_est FLOAT64 , nhomalt_nfe_est INT64 , non_cancer_AC_afr_female INT64 , non_cancer_AF_afr_female FLOAT64 , non_cancer_nhomalt_afr_female INT64 , non_topmed_AC_afr_male INT64 , non_topmed_AF_afr_male FLOAT64 , non_topmed_nhomalt_afr_male INT64 , AC_eas_male INT64 , AF_eas_male FLOAT64 , nhomalt_eas_male INT64 , controls_AC_eas INT64 , controls_AF_eas FLOAT64 , controls_nhomalt_eas INT64 , non_neuro_AC_eas_male INT64 , non_neuro_AF_eas_male FLOAT64 , non_neuro_nhomalt_eas_male INT64 , non_cancer_AC_nfe_nwe INT64 , non_cancer_AF_nfe_nwe FLOAT64 , non_cancer_nhomalt_nfe_nwe INT64 , controls_AC_sas INT64 , controls_AF_sas FLOAT64 , controls_nhomalt_sas INT64 , non_neuro_AC_sas_male INT64 , non_neuro_AF_sas_male FLOAT64 , non_neuro_nhomalt_sas_male INT64 , non_neuro_AC_asj_male INT64 , non_neuro_AF_asj_male FLOAT64 , non_neuro_nhomalt_asj_male INT64 , non_cancer_AC_nfe_bgr INT64  ancestry in the non_cancer subset""), non_cancer_AF_nfe_bgr FLOAT64  ancestry in the non_cancer subset""), non_cancer_nhomalt_nfe_bgr INT64  ancestry in the non_cancer subset""), controls_AC_oth INT64 , controls_AF_oth FLOAT64 , controls_nhomalt_oth INT64 , non_cancer_AC_eas_female INT64 , non_cancer_AF_eas_female FLOAT64 , non_cancer_nhomalt_eas_female INT64 , AC_nfe INT64 , AF_nfe FLOAT64 , nhomalt_nfe INT64 , non_topmed_AC_female INT64 , non_topmed_AF_female FLOAT64 , non_topmed_nhomalt_female INT64 , non_neuro_AC_asj INT64 , non_neuro_AF_asj FLOAT64 , non_neuro_nhomalt_asj INT64 , non_topmed_AC_eas_female INT64 , non_topmed_AF_eas_female FLOAT64 , non_topmed_nhomalt_eas_female INT64 , non_neuro_AC_raw INT64 , non_neuro_AF_raw FLOAT64 , non_neuro_nhomalt_raw INT64 , non_topmed_AC_eas INT64 , non_topmed_AF_eas FLOAT64 , non_topmed_nhomalt_eas INT64 , non_topmed_AC_fin_male INT64 , non_topmed_AF_fin_male FLOAT64 , non_topmed_nhomalt_fin_male INT64 , non_cancer_AC_asj_male INT64 , non_cancer_AF_asj_male FLOAT64 , non_cancer_nhomalt_asj_male INT64 , AC_fin INT64 , AF_fin FLOAT64 , nhomalt_fin INT64 , AC_nfe_male INT64 , AF_nfe_male FLOAT64 , nhomalt_nfe_male INT64 , non_topmed_AC_eas_kor INT64 , non_topmed_AF_eas_kor FLOAT64 , non_topmed_nhomalt_eas_kor INT64 , controls_AC_amr_male INT64 , controls_AF_amr_male FLOAT64 , controls_nhomalt_amr_male INT64 , non_neuro_AC_eas_oea INT64 , non_neuro_AF_eas_oea FLOAT64 , non_neuro_nhomalt_eas_oea INT64 , AC_sas_female INT64 , AF_sas_female FLOAT64 , nhomalt_sas_female INT64 , controls_AC_afr_female INT64 , controls_AF_afr_female FLOAT64 , controls_nhomalt_afr_female INT64 , controls_AC_amr INT64 , controls_AF_amr FLOAT64 , controls_nhomalt_amr INT64 , non_topmed_AC_eas_jpn INT64 , non_topmed_AF_eas_jpn FLOAT64 , non_topmed_nhomalt_eas_jpn INT64 , AC_asj_female INT64 , AF_asj_female FLOAT64 , nhomalt_asj_female INT64 , non_topmed_AC_nfe_bgr INT64  ancestry in the non_topmed subset""), non_topmed_AF_nfe_bgr FLOAT64  ancestry in the non_topmed subset""), non_topmed_nhomalt_nfe_bgr INT64  ancestry in the non_topmed subset""), non_cancer_AC_nfe_est INT64 , non_cancer_AF_nfe_est FLOAT64 , non_cancer_nhomalt_nfe_est INT64 , non_neuro_AC_eas INT64 , non_neuro_AF_eas FLOAT64 , non_neuro_nhomalt_eas INT64 , non_cancer_AC_nfe INT64 , non_cancer_AF_nfe FLOAT64 , non_cancer_nhomalt_nfe INT64 , non_neuro_AC_male INT64 , non_neuro_AF_male FLOAT64 , non_neuro_nhomalt_male INT64 , non_neuro_AC_sas_female INT64 , non_neuro_AF_sas_female FLOAT64 , non_neuro_nhomalt_sas_female INT64 , AC_asj INT64 , AF_asj FLOAT64 , nhomalt_asj INT64 , controls_AC_nfe_est INT64 , controls_AF_nfe_est FLOAT64 , controls_nhomalt_nfe_est INT64 , non_topmed_AC_asj_female INT64 , non_topmed_AF_asj_female FLOAT64 , non_topmed_nhomalt_asj_female INT64 , non_cancer_AC_nfe_swe INT64 , non_cancer_AF_nfe_swe FLOAT64 , non_cancer_nhomalt_nfe_swe INT64 , non_cancer_AC INT64 , non_cancer_AF FLOAT64 , non_cancer_nhomalt INT64 , non_topmed_AC_oth INT64 , non_topmed_AF_oth FLOAT64 , non_topmed_nhomalt_oth INT64 , non_topmed_AC_fin_female INT64 , non_topmed_AF_fin_female FLOAT64 , non_topmed_nhomalt_fin_female INT64 , non_cancer_AC_fin_female INT64 , non_cancer_AF_fin_female FLOAT64 , non_cancer_nhomalt_fin_female INT64 , AC_oth INT64 , AF_oth FLOAT64 , nhomalt_oth INT64 , non_neuro_AC_nfe_male INT64 , non_neuro_AF_nfe_male FLOAT64 , non_neuro_nhomalt_nfe_male INT64 , controls_AC_female INT64 , controls_AF_female FLOAT64 , controls_nhomalt_female INT64 , non_cancer_AC_fin INT64 , non_cancer_AF_fin FLOAT64 , non_cancer_nhomalt_fin INT64 , non_topmed_AC_fin INT64 , non_topmed_AF_fin FLOAT64 , non_topmed_nhomalt_fin INT64 , non_cancer_AC_eas_oea INT64 , non_cancer_AF_eas_oea FLOAT64 , non_cancer_nhomalt_eas_oea INT64 , non_topmed_AC_nfe_female INT64 , non_topmed_AF_nfe_female FLOAT64 , non_topmed_nhomalt_nfe_female INT64 , non_cancer_AC_sas_male INT64 , non_cancer_AF_sas_male FLOAT64 , non_cancer_nhomalt_sas_male INT64 , controls_AC_asj_male INT64 , controls_AF_asj_male FLOAT64 , controls_nhomalt_asj_male INT64 , non_cancer_AC_raw INT64 , non_cancer_AF_raw FLOAT64 , non_cancer_nhomalt_raw INT64 , non_cancer_AC_eas_male INT64 , non_cancer_AF_eas_male FLOAT64 , non_cancer_nhomalt_eas_male INT64 , non_topmed_AC_asj_male INT64 , non_topmed_AF_asj_male FLOAT64 , non_topmed_nhomalt_asj_male INT64 , non_neuro_AC_oth INT64 , non_neuro_AF_oth FLOAT64 , non_neuro_nhomalt_oth INT64 , AC_male INT64 , AF_male FLOAT64 , nhomalt_male INT64 , controls_AC_fin_female INT64 , controls_AF_fin_female FLOAT64 , controls_nhomalt_fin_female INT64 , controls_AC_nfe_bgr INT64  ancestry in the controls subset""), controls_AF_nfe_bgr FLOAT64  ancestry in the controls subset""), controls_nhomalt_nfe_bgr INT64  ancestry in the controls subset""), controls_AC_asj_female INT64 , controls_AF_asj_female FLOAT64 , controls_nhomalt_asj_female INT64 , AC_amr_male INT64 , AF_amr_male FLOAT64 , nhomalt_amr_male INT64 , AC_amr_female INT64 , AF_amr_female FLOAT64 , nhomalt_amr_female INT64 , non_topmed_AC_sas_male INT64 , non_topmed_AF_sas_male FLOAT64 , non_topmed_nhomalt_sas_male INT64 , AC_oth_male INT64 , AF_oth_male FLOAT64 , nhomalt_oth_male INT64 , non_cancer_AC_sas INT64 , non_cancer_AF_sas FLOAT64 , non_cancer_nhomalt_sas INT64 , non_neuro_AC_nfe_seu INT64 , non_neuro_AF_nfe_seu FLOAT64 , non_neuro_nhomalt_nfe_seu INT64 , non_cancer_AC_eas_kor INT64 , non_cancer_AF_eas_kor FLOAT64 , non_cancer_nhomalt_eas_kor INT64 , non_topmed_AC_afr_female INT64 , non_topmed_AF_afr_female FLOAT64 , non_topmed_nhomalt_afr_female INT64 , controls_AC_sas_male INT64 , controls_AF_sas_male FLOAT64 , controls_nhomalt_sas_male INT64 , non_topmed_AC_sas_female INT64 , non_topmed_AF_sas_female FLOAT64 , non_topmed_nhomalt_sas_female INT64 , non_topmed_AC_afr INT64 , non_topmed_AF_afr FLOAT64 , non_topmed_nhomalt_afr INT64 , controls_AC INT64 , controls_AF FLOAT64 , controls_nhomalt INT64 , non_neuro_AC_oth_female INT64 , non_neuro_AF_oth_female FLOAT64 , non_neuro_nhomalt_oth_female INT64 , non_topmed_faf95_amr FLOAT64  for samples of Latino ancestry in the non_topmed subset""), non_topmed_faf99_amr FLOAT64  for samples of Latino ancestry in the non_topmed subset""), faf95_afr FLOAT64  for samples of African-American/African ancestry""), faf99_afr FLOAT64  for samples of African-American/African ancestry""), faf95_sas FLOAT64  for samples of South Asian ancestry""), faf99_sas FLOAT64  for samples of South Asian ancestry""), controls_faf95_afr FLOAT64  for samples of African-American/African ancestry in the controls subset""), controls_faf99_afr FLOAT64  for samples of African-American/African ancestry in the controls subset""), faf95_amr FLOAT64  for samples of Latino ancestry""), faf99_amr FLOAT64  for samples of Latino ancestry""), non_neuro_faf95_sas FLOAT64  for samples of South Asian ancestry in the non_neuro subset""), non_neuro_faf99_sas FLOAT64  for samples of South Asian ancestry in the non_neuro subset""), faf95_eas FLOAT64  for samples of East Asian ancestry""), faf99_eas FLOAT64  for samples of East Asian ancestry""), faf95 FLOAT64  for samples""), faf99 FLOAT64  for samples""), non_neuro_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_neuro subset""), non_neuro_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_neuro subset""), non_cancer_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_cancer subset""), non_cancer_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_cancer subset""), non_neuro_faf95_amr FLOAT64  for samples of Latino ancestry in the non_neuro subset""), non_neuro_faf99_amr FLOAT64  for samples of Latino ancestry in the non_neuro subset""), non_topmed_faf95_sas FLOAT64  for samples of South Asian ancestry in the non_topmed subset""), non_topmed_faf99_sas FLOAT64  for samples of South Asian ancestry in the non_topmed subset""), controls_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the controls subset""), controls_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the controls subset""), non_cancer_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_cancer subset""), non_cancer_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_cancer subset""), non_cancer_faf95_amr FLOAT64  for samples of Latino ancestry in the non_cancer subset""), non_cancer_faf99_amr FLOAT64  for samples of Latino ancestry in the non_cancer subset""), non_topmed_faf95 FLOAT64  for samples in the non_topmed subset""), non_topmed_faf99 FLOAT64  for samples in the non_topmed subset""), non_neuro_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_neuro subset""), non_neuro_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_neuro subset""), non_neuro_faf95 FLOAT64  for samples in the non_neuro subset""), non_neuro_faf99 FLOAT64  for samples in the non_neuro subset""), non_topmed_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_topmed subset""), non_topmed_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_topmed subset""), controls_faf95_eas FLOAT64  for samples of East Asian ancestry in the controls subset""), controls_faf99_eas FLOAT64  for samples of East Asian ancestry in the controls subset""), controls_faf95_sas FLOAT64  for samples of South Asian ancestry in the controls subset""), controls_faf99_sas FLOAT64  for samples of South Asian ancestry in the controls subset""), faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry""), faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry""), non_topmed_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_topmed subset""), non_topmed_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_topmed subset""), controls_faf95_amr FLOAT64  for samples of Latino ancestry in the controls subset""), controls_faf99_amr FLOAT64  for samples of Latino ancestry in the controls subset""), non_neuro_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_neuro subset""), non_neuro_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_neuro subset""), non_cancer_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_cancer subset""), non_cancer_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_cancer subset""), non_cancer_faf95 FLOAT64  for samples in the non_cancer subset""), non_cancer_faf99 FLOAT64  for samples in the non_cancer subset""), non_cancer_faf95_sas FLOAT64  for samples of South Asian ancestry in the non_cancer subset""), non_cancer_faf99_sas FLOAT64  for samples of South Asian ancestry in the non_cancer subset""), non_topmed_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_topmed subset""), non_topmed_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_topmed subset""), controls_faf95 FLOAT64  for samples in the controls subset""), controls_faf99 FLOAT64  for samples in the controls subset""), popmax STRING , AC_popmax INT64 , AN_popmax INT64 , AF_popmax FLOAT64 ""), nhomalt_popmax INT64 , age_hist_het_bin_freq STRING , age_hist_het_n_smaller INT64 , age_hist_het_n_larger INT64 , age_hist_hom_bin_freq STRING , age_hist_hom_n_smaller INT64 , age_hist_hom_n_larger INT64 , non_topmed_popmax STRING , non_topmed_AC_popmax INT64 , non_topmed_AN_popmax INT64 , non_topmed_AF_popmax FLOAT64  in the non_topmed subset""), non_topmed_nhomalt_popmax INT64 , non_neuro_popmax STRING , non_neuro_AC_popmax INT64 , non_neuro_AN_popmax INT64 , non_neuro_AF_popmax FLOAT64  in the non_neuro subset""), non_neuro_nhomalt_popmax INT64 , non_cancer_popmax STRING , non_cancer_AC_popmax INT64 , non_cancer_AN_popmax INT64 , non_cancer_AF_popmax FLOAT64  in the non_cancer subset""), non_cancer_nhomalt_popmax INT64 , controls_popmax STRING , controls_AC_popmax INT64 , controls_AN_popmax INT64 , controls_AF_popmax FLOAT64  in the controls subset""), controls_nhomalt_popmax INT64 , vep ARRAY<STRUCT<allele STRING , Consequence STRING , IMPACT STRING , SYMBOL STRING , Gene STRING , Feature_type STRING , Feature STRING , BIOTYPE STRING , EXON STRING ""), INTRON STRING ""), HGVSc STRING , HGVSp STRING , cDNA_position STRING , CDS_position STRING , Protein_position STRING , Amino_acids STRING , Codons STRING , Existing_variation STRING , ALLELE_NUM INT64 , DISTANCE INT64 , STRAND INT64  on which the transcript/feature lies""), FLAGS STRING ""), VARIANT_CLASS STRING , MINIMISED INT64 , SYMBOL_SOURCE STRING , HGNC_ID INT64 , CANONICAL STRING , TSL STRING , APPRIS STRING , CCDS STRING , ENSP STRING , SWISSPROT STRING , TREMBL STRING , UNIPARC STRING , GENE_PHENO INT64 , SIFT STRING ""), PolyPhen STRING , DOMAINS STRING , HGVS_OFFSET INT64 , GMAF STRING , AFR_MAF STRING , AMR_MAF STRING , EAS_MAF STRING , EUR_MAF STRING , SAS_MAF STRING , AA_MAF STRING , EA_MAF STRING , ExAC_MAF STRING , ExAC_Adj_MAF STRING , ExAC_AFR_MAF STRING , ExAC_AMR_MAF STRING , ExAC_EAS_MAF STRING , ExAC_FIN_MAF STRING , ExAC_NFE_MAF STRING , ExAC_OTH_MAF STRING , ExAC_SAS_MAF STRING , CLIN_SIG STRING , SOMATIC STRING ; multiple values correspond to multiple values in the Existing_variation field""), PHENO STRING , PUBMED STRING  of publications that cite existing variant""), MOTIF_NAME STRING , MOTIF_POS INT64 , HIGH_INF_POS STRING ""), MOTIF_SCORE_CHANGE FLOAT64 , LoF STRING , LoF_filter STRING , LoF_flags STRING , LoF_info STRING >> >> .""),
  names ARRAY<STRING> .""),
  quality FLOAT64 ). Higher values imply better quality.""),
  filter ARRAY<STRING>  or \""PASS\"" indicating the variant has passed all filters.""),
  call ARRAY<STRUCT<name STRING , genotype ARRAY<INT64> , phaseset STRING . \""*\"" is used in cases where the genotype is phased, but no phase set (\""PS\"" in FORMAT) was specified."")>> ,
  AN INT64 ,
  rf_tp_probability FLOAT64 ,
  FS FLOAT64 ,
  InbreedingCoeff FLOAT64 ,
  MQ FLOAT64 ,
  MQRankSum FLOAT64 ,
  QD FLOAT64 ,
  ReadPosRankSum FLOAT64 ,
  SOR FLOAT64 ,
  VQSR_POSITIVE_TRAIN_SITE BOOL ,
  VQSR_NEGATIVE_TRAIN_SITE BOOL ,
  BaseQRankSum FLOAT64 ,
  ClippingRankSum FLOAT64 ,
  DP INT64 ,
  VQSLOD FLOAT64 ,
  VQSR_culprit STRING ,
  segdup BOOL ,
  lcr BOOL ,
  decoy BOOL ,
  nonpar BOOL  falls outside a pseudoautosomal region""),
  rf_positive_label BOOL ,
  rf_negative_label BOOL ,
  rf_label STRING ,
  rf_train BOOL ,
  transmitted_singleton BOOL ""),
  variant_type STRING ""),
  was_mixed BOOL ,
  has_star BOOL  observed elsewhere in the callset""),
  AN_nfe_seu INT64 ,
  controls_AN_afr_male INT64 ,
  non_neuro_AN_eas_kor INT64 ,
  non_topmed_AN_amr INT64 ,
  non_cancer_AN_asj_female INT64 ,
  AN_raw INT64 ,
  AN_fin_female INT64 ,
  non_cancer_AN_oth_female INT64 ,
  AN_nfe_bgr INT64  ancestry""),
  non_neuro_AN_asj_female INT64 ,
  AN_sas_male INT64 ,
  non_neuro_AN_afr_male INT64 ,
  AN_afr_male INT64 ,
  AN_afr INT64 ,
  controls_AN_nfe_swe INT64 ,
  non_neuro_AN_afr_female INT64 ,
  non_topmed_AN_amr_female INT64 ,
  non_cancer_AN_female INT64 ,
  non_cancer_AN_nfe_onf INT64 ,
  non_cancer_AN_male INT64 ,
  non_topmed_AN_oth_female INT64 ,
  AN_eas_female INT64 ,
  non_cancer_AN_sas_female INT64 ,
  AN_afr_female INT64 ,
  AN_sas INT64 ,
  non_neuro_AN_female INT64 ,
  controls_AN_afr INT64 ,
  non_neuro_AN_eas_jpn INT64 ,
  AN_nfe_onf INT64 ,
  non_cancer_AN_amr_male INT64 ,
  controls_AN_fin_male INT64 ,
  non_neuro_AN_nfe_nwe INT64 ,
  AN_fin_male INT64 ,
  AN_nfe_female INT64 ,
  AN_amr INT64 ,
  non_topmed_AN_nfe_male INT64 ,
  non_neuro_AN_sas INT64 ,
  non_cancer_AN_fin_male INT64 ,
  non_cancer_AN_nfe_seu INT64 ,
  AN_eas INT64 ,
  non_neuro_AN_nfe_female INT64 ,
  non_neuro_AN_afr INT64 ,
  controls_AN_raw INT64 ,
  non_cancer_AN_eas INT64 ,
  non_cancer_AN_amr_female INT64 ,
  non_neuro_AN_nfe_swe INT64 ,
  controls_AN_male INT64 ,
  non_topmed_AN_male INT64 ,
  controls_AN_eas_jpn INT64 ,
  controls_AN_nfe_female INT64 ,
  non_neuro_AN_amr INT64 ,
  non_neuro_AN_eas_female INT64 ,
  AN_asj_male INT64 ,
  controls_AN_nfe_male INT64 ,
  non_neuro_AN_fin INT64 ,
  non_topmed_AN_sas INT64 ,
  non_cancer_AN_nfe_female INT64 ,
  AN_oth_female INT64 ,
  non_cancer_AN_asj INT64 ,
  AN_nfe_swe INT64 ,
  controls_AN_nfe INT64 ,
  controls_AN_oth_female INT64 ,
  controls_AN_asj INT64 ,
  non_neuro_AN_amr_male INT64 ,
  controls_AN_nfe_nwe INT64 ,
  AN_nfe_nwe INT64 ,
  controls_AN_nfe_seu INT64 ,
  controls_AN_sas_female INT64 ,
  non_neuro_AN_amr_female INT64 ,
  non_cancer_AN_eas_jpn INT64 ,
  non_neuro_AN_nfe_onf INT64 ,
  non_topmed_AN_eas_male INT64 ,
  AN_eas_jpn INT64 ,
  non_cancer_AN_afr_male INT64 ,
  non_cancer_AN_afr INT64 ,
  controls_AN_amr_female INT64 ,
  non_neuro_AN_fin_male INT64 ,
  AN_female INT64 ,
  non_neuro_AN_nfe_bgr INT64  ancestry in the non_neuro subset""),
  non_neuro_AN_oth_male INT64 ,
  non_topmed_AN_nfe_est INT64 ,
  non_topmed_AN_nfe_nwe INT64 ,
  non_topmed_AN_amr_male INT64 ,
  non_cancer_AN_amr INT64 ,
  non_topmed_AN_nfe_swe INT64 ,
  non_topmed_AN_nfe_onf INT64 ,
  controls_AN_eas_kor INT64 ,
  non_topmed_AN_eas_oea INT64 ,
  controls_AN_eas_male INT64 ,
  controls_AN_oth_male INT64 ,
  non_topmed_AN INT64 ,
  controls_AN_fin INT64 ,
  AN_eas_kor INT64 ,
  non_neuro_AN_nfe INT64 ,
  non_neuro_AN_fin_female INT64 ,
  non_cancer_AN_nfe_male INT64 ,
  controls_AN_eas_oea INT64 ,
  non_topmed_AN_nfe_seu INT64 ,
  controls_AN_eas_female INT64 ,
  non_topmed_AN_asj INT64 ,
  controls_AN_nfe_onf INT64 ,
  non_neuro_AN INT64 ,
  AN_eas_oea INT64 ,
  non_topmed_AN_nfe INT64 ,
  non_cancer_AN_oth INT64 ,
  non_topmed_AN_raw INT64 ,
  non_neuro_AN_nfe_est INT64 ,
  non_topmed_AN_oth_male INT64 ,
  non_cancer_AN_oth_male INT64 ,
  AN_nfe_est INT64 ,
  non_cancer_AN_afr_female INT64 ,
  non_topmed_AN_afr_male INT64 ,
  AN_eas_male INT64 ,
  controls_AN_eas INT64 ,
  non_neuro_AN_eas_male INT64 ,
  non_cancer_AN_nfe_nwe INT64 ,
  controls_AN_sas INT64 ,
  non_neuro_AN_sas_male INT64 ,
  non_neuro_AN_asj_male INT64 ,
  non_cancer_AN_nfe_bgr INT64  ancestry in the non_cancer subset""),
  controls_AN_oth INT64 ,
  non_cancer_AN_eas_female INT64 ,
  AN_nfe INT64 ,
  non_topmed_AN_female INT64 ,
  non_neuro_AN_asj INT64 ,
  non_topmed_AN_eas_female INT64 ,
  non_neuro_AN_raw INT64 ,
  non_topmed_AN_eas INT64 ,
  non_topmed_AN_fin_male INT64 ,
  non_cancer_AN_asj_male INT64 ,
  AN_fin INT64 ,
  AN_nfe_male INT64 ,
  non_topmed_AN_eas_kor INT64 ,
  controls_AN_amr_male INT64 ,
  non_neuro_AN_eas_oea INT64 ,
  AN_sas_female INT64 ,
  controls_AN_afr_female INT64 ,
  controls_AN_amr INT64 ,
  non_topmed_AN_eas_jpn INT64 ,
  AN_asj_female INT64 ,
  non_topmed_AN_nfe_bgr INT64  ancestry in the non_topmed subset""),
  non_cancer_AN_nfe_est INT64 ,
  non_neuro_AN_eas INT64 ,
  non_cancer_AN_nfe INT64 ,
  non_neuro_AN_male INT64 ,
  non_neuro_AN_sas_female INT64 ,
  AN_asj INT64 ,
  controls_AN_nfe_est INT64 ,
  non_topmed_AN_asj_female INT64 ,
  non_cancer_AN_nfe_swe INT64 ,
  non_cancer_AN INT64 ,
  non_topmed_AN_oth INT64 ,
  non_topmed_AN_fin_female INT64 ,
  non_cancer_AN_fin_female INT64 ,
  AN_oth INT64 ,
  non_neuro_AN_nfe_male INT64 ,
  controls_AN_female INT64 ,
  non_cancer_AN_fin INT64 ,
  non_topmed_AN_fin INT64 ,
  non_cancer_AN_eas_oea INT64 ,
  non_topmed_AN_nfe_female INT64 ,
  non_cancer_AN_sas_male INT64 ,
  controls_AN_asj_male INT64 ,
  non_cancer_AN_raw INT64 ,
  non_cancer_AN_eas_male INT64 ,
  non_topmed_AN_asj_male INT64 ,
  non_neuro_AN_oth INT64 ,
  AN_male INT64 ,
  controls_AN_fin_female INT64 ,
  controls_AN_nfe_bgr INT64  ancestry in the controls subset""),
  controls_AN_asj_female INT64 ,
  AN_amr_male INT64 ,
  AN_amr_female INT64 ,
  non_topmed_AN_sas_male INT64 ,
  AN_oth_male INT64 ,
  non_cancer_AN_sas INT64 ,
  non_neuro_AN_nfe_seu INT64 ,
  non_cancer_AN_eas_kor INT64 ,
  non_topmed_AN_afr_female INT64 ,
  controls_AN_sas_male INT64 ,
  non_topmed_AN_sas_female INT64 ,
  non_topmed_AN_afr INT64 ,
  controls_AN INT64 ,
  non_neuro_AN_oth_female INT64 
)
PARTITION BY RANGE_BUCKET(start_position, GENERATE_ARRAY(0, 156080970, 39030))
CLUSTER BY start_position, end_position;"

,5
table_name,v2_1_1_exomes__chrY
ddl,"CREATE TABLE `bigquery-public-data.gnomAD.v2_1_1_exomes__chrY`
(
  reference_name STRING ,
  start_position INT64 . Corresponds to the first base of the string of reference bases.""),
  end_position INT64 . Corresponds to the first base after the last base in the reference allele.""),
  reference_bases STRING ,
  alternate_bases ARRAY<STRUCT<alt STRING , AC INT64 , AF FLOAT64 , allele_type STRING ""), n_alt_alleles INT64 , pab_max FLOAT64 , gq_hist_alt_bin_freq STRING , gq_hist_all_bin_freq STRING , dp_hist_alt_bin_freq STRING , dp_hist_alt_n_larger INT64 , dp_hist_all_bin_freq STRING , dp_hist_all_n_larger INT64 , ab_hist_alt_bin_freq STRING , AC_nfe_seu INT64 , AF_nfe_seu FLOAT64 , nhomalt_nfe_seu INT64 , controls_AC_afr_male INT64 , controls_AF_afr_male FLOAT64 , controls_nhomalt_afr_male INT64 , non_neuro_AC_eas_kor INT64 , non_neuro_AF_eas_kor FLOAT64 , non_neuro_nhomalt_eas_kor INT64 , non_topmed_AC_amr INT64 , non_topmed_AF_amr FLOAT64 , non_topmed_nhomalt_amr INT64 , non_cancer_AC_asj_female INT64 , non_cancer_AF_asj_female FLOAT64 , non_cancer_nhomalt_asj_female INT64 , AC_raw INT64 , AF_raw FLOAT64 , nhomalt_raw INT64 , AC_fin_female INT64 , AF_fin_female FLOAT64 , nhomalt_fin_female INT64 , non_cancer_AC_oth_female INT64 , non_cancer_AF_oth_female FLOAT64 , non_cancer_nhomalt_oth_female INT64 , AC_nfe_bgr INT64  ancestry""), AF_nfe_bgr FLOAT64  ancestry""), nhomalt_nfe_bgr INT64  ancestry""), non_neuro_AC_asj_female INT64 , non_neuro_AF_asj_female FLOAT64 , non_neuro_nhomalt_asj_female INT64 , AC_sas_male INT64 , AF_sas_male FLOAT64 , nhomalt_sas_male INT64 , non_neuro_AC_afr_male INT64 , non_neuro_AF_afr_male FLOAT64 , non_neuro_nhomalt_afr_male INT64 , AC_afr_male INT64 , AF_afr_male FLOAT64 , nhomalt_afr_male INT64 , AC_afr INT64 , AF_afr FLOAT64 , nhomalt_afr INT64 , controls_AC_nfe_swe INT64 , controls_AF_nfe_swe FLOAT64 , controls_nhomalt_nfe_swe INT64 , non_neuro_AC_afr_female INT64 , non_neuro_AF_afr_female FLOAT64 , non_neuro_nhomalt_afr_female INT64 , non_topmed_AC_amr_female INT64 , non_topmed_AF_amr_female FLOAT64 , non_topmed_nhomalt_amr_female INT64 , non_cancer_AC_female INT64 , non_cancer_AF_female FLOAT64 , non_cancer_nhomalt_female INT64 , non_cancer_AC_nfe_onf INT64 , non_cancer_AF_nfe_onf FLOAT64 , non_cancer_nhomalt_nfe_onf INT64 , non_cancer_AC_male INT64 , non_cancer_AF_male FLOAT64 , non_cancer_nhomalt_male INT64 , non_topmed_AC_oth_female INT64 , non_topmed_AF_oth_female FLOAT64 , non_topmed_nhomalt_oth_female INT64 , AC_eas_female INT64 , AF_eas_female FLOAT64 , nhomalt_eas_female INT64 , non_cancer_AC_sas_female INT64 , non_cancer_AF_sas_female FLOAT64 , non_cancer_nhomalt_sas_female INT64 , AC_afr_female INT64 , AF_afr_female FLOAT64 , nhomalt_afr_female INT64 , AC_sas INT64 , AF_sas FLOAT64 , nhomalt_sas INT64 , non_neuro_AC_female INT64 , non_neuro_AF_female FLOAT64 , non_neuro_nhomalt_female INT64 , controls_AC_afr INT64 , controls_AF_afr FLOAT64 , controls_nhomalt_afr INT64 , non_neuro_AC_eas_jpn INT64 , non_neuro_AF_eas_jpn FLOAT64 , non_neuro_nhomalt_eas_jpn INT64 , AC_nfe_onf INT64 , AF_nfe_onf FLOAT64 , nhomalt_nfe_onf INT64 , non_cancer_AC_amr_male INT64 , non_cancer_AF_amr_male FLOAT64 , non_cancer_nhomalt_amr_male INT64 , controls_AC_fin_male INT64 , controls_AF_fin_male FLOAT64 , controls_nhomalt_fin_male INT64 , non_neuro_AC_nfe_nwe INT64 , non_neuro_AF_nfe_nwe FLOAT64 , non_neuro_nhomalt_nfe_nwe INT64 , AC_fin_male INT64 , AF_fin_male FLOAT64 , nhomalt_fin_male INT64 , AC_nfe_female INT64 , AF_nfe_female FLOAT64 , nhomalt_nfe_female INT64 , AC_amr INT64 , AF_amr FLOAT64 , nhomalt_amr INT64 , non_topmed_AC_nfe_male INT64 , non_topmed_AF_nfe_male FLOAT64 , non_topmed_nhomalt_nfe_male INT64 , non_neuro_AC_sas INT64 , non_neuro_AF_sas FLOAT64 , non_neuro_nhomalt_sas INT64 , non_cancer_AC_fin_male INT64 , non_cancer_AF_fin_male FLOAT64 , non_cancer_nhomalt_fin_male INT64 , non_cancer_AC_nfe_seu INT64 , non_cancer_AF_nfe_seu FLOAT64 , non_cancer_nhomalt_nfe_seu INT64 , AC_eas INT64 , AF_eas FLOAT64 , nhomalt_eas INT64 , nhomalt INT64 , non_neuro_AC_nfe_female INT64 , non_neuro_AF_nfe_female FLOAT64 , non_neuro_nhomalt_nfe_female INT64 , non_neuro_AC_afr INT64 , non_neuro_AF_afr FLOAT64 , non_neuro_nhomalt_afr INT64 , controls_AC_raw INT64 , controls_AF_raw FLOAT64 , controls_nhomalt_raw INT64 , non_cancer_AC_eas INT64 , non_cancer_AF_eas FLOAT64 , non_cancer_nhomalt_eas INT64 , non_cancer_AC_amr_female INT64 , non_cancer_AF_amr_female FLOAT64 , non_cancer_nhomalt_amr_female INT64 , non_neuro_AC_nfe_swe INT64 , non_neuro_AF_nfe_swe FLOAT64 , non_neuro_nhomalt_nfe_swe INT64 , controls_AC_male INT64 , controls_AF_male FLOAT64 , controls_nhomalt_male INT64 , non_topmed_AC_male INT64 , non_topmed_AF_male FLOAT64 , non_topmed_nhomalt_male INT64 , controls_AC_eas_jpn INT64 , controls_AF_eas_jpn FLOAT64 , controls_nhomalt_eas_jpn INT64 , controls_AC_nfe_female INT64 , controls_AF_nfe_female FLOAT64 , controls_nhomalt_nfe_female INT64 , non_neuro_AC_amr INT64 , non_neuro_AF_amr FLOAT64 , non_neuro_nhomalt_amr INT64 , non_neuro_AC_eas_female INT64 , non_neuro_AF_eas_female FLOAT64 , non_neuro_nhomalt_eas_female INT64 , AC_asj_male INT64 , AF_asj_male FLOAT64 , nhomalt_asj_male INT64 , controls_AC_nfe_male INT64 , controls_AF_nfe_male FLOAT64 , controls_nhomalt_nfe_male INT64 , non_neuro_AC_fin INT64 , non_neuro_AF_fin FLOAT64 , non_neuro_nhomalt_fin INT64 , non_topmed_AC_sas INT64 , non_topmed_AF_sas FLOAT64 , non_topmed_nhomalt_sas INT64 , non_cancer_AC_nfe_female INT64 , non_cancer_AF_nfe_female FLOAT64 , non_cancer_nhomalt_nfe_female INT64 , AC_oth_female INT64 , AF_oth_female FLOAT64 , nhomalt_oth_female INT64 , non_cancer_AC_asj INT64 , non_cancer_AF_asj FLOAT64 , non_cancer_nhomalt_asj INT64 , AC_nfe_swe INT64 , AF_nfe_swe FLOAT64 , nhomalt_nfe_swe INT64 , controls_AC_nfe INT64 , controls_AF_nfe FLOAT64 , controls_nhomalt_nfe INT64 , controls_AC_oth_female INT64 , controls_AF_oth_female FLOAT64 , controls_nhomalt_oth_female INT64 , controls_AC_asj INT64 , controls_AF_asj FLOAT64 , controls_nhomalt_asj INT64 , non_neuro_AC_amr_male INT64 , non_neuro_AF_amr_male FLOAT64 , non_neuro_nhomalt_amr_male INT64 , controls_AC_nfe_nwe INT64 , controls_AF_nfe_nwe FLOAT64 , controls_nhomalt_nfe_nwe INT64 , AC_nfe_nwe INT64 , AF_nfe_nwe FLOAT64 , nhomalt_nfe_nwe INT64 , controls_AC_nfe_seu INT64 , controls_AF_nfe_seu FLOAT64 , controls_nhomalt_nfe_seu INT64 , controls_AC_sas_female INT64 , controls_AF_sas_female FLOAT64 , controls_nhomalt_sas_female INT64 , non_neuro_AC_amr_female INT64 , non_neuro_AF_amr_female FLOAT64 , non_neuro_nhomalt_amr_female INT64 , non_cancer_AC_eas_jpn INT64 , non_cancer_AF_eas_jpn FLOAT64 , non_cancer_nhomalt_eas_jpn INT64 , non_neuro_AC_nfe_onf INT64 , non_neuro_AF_nfe_onf FLOAT64 , non_neuro_nhomalt_nfe_onf INT64 , non_topmed_AC_eas_male INT64 , non_topmed_AF_eas_male FLOAT64 , non_topmed_nhomalt_eas_male INT64 , AC_eas_jpn INT64 , AF_eas_jpn FLOAT64 , nhomalt_eas_jpn INT64 , non_cancer_AC_afr_male INT64 , non_cancer_AF_afr_male FLOAT64 , non_cancer_nhomalt_afr_male INT64 , non_cancer_AC_afr INT64 , non_cancer_AF_afr FLOAT64 , non_cancer_nhomalt_afr INT64 , controls_AC_amr_female INT64 , controls_AF_amr_female FLOAT64 , controls_nhomalt_amr_female INT64 , non_neuro_AC_fin_male INT64 , non_neuro_AF_fin_male FLOAT64 , non_neuro_nhomalt_fin_male INT64 , AC_female INT64 , AF_female FLOAT64 , nhomalt_female INT64 , non_neuro_AC_nfe_bgr INT64  ancestry in the non_neuro subset""), non_neuro_AF_nfe_bgr FLOAT64  ancestry in the non_neuro subset""), non_neuro_nhomalt_nfe_bgr INT64  ancestry in the non_neuro subset""), non_neuro_AC_oth_male INT64 , non_neuro_AF_oth_male FLOAT64 , non_neuro_nhomalt_oth_male INT64 , non_topmed_AC_nfe_est INT64 , non_topmed_AF_nfe_est FLOAT64 , non_topmed_nhomalt_nfe_est INT64 , non_topmed_AC_nfe_nwe INT64 , non_topmed_AF_nfe_nwe FLOAT64 , non_topmed_nhomalt_nfe_nwe INT64 , non_topmed_AC_amr_male INT64 , non_topmed_AF_amr_male FLOAT64 , non_topmed_nhomalt_amr_male INT64 , non_cancer_AC_amr INT64 , non_cancer_AF_amr FLOAT64 , non_cancer_nhomalt_amr INT64 , non_topmed_AC_nfe_swe INT64 , non_topmed_AF_nfe_swe FLOAT64 , non_topmed_nhomalt_nfe_swe INT64 , non_topmed_AC_nfe_onf INT64 , non_topmed_AF_nfe_onf FLOAT64 , non_topmed_nhomalt_nfe_onf INT64 , controls_AC_eas_kor INT64 , controls_AF_eas_kor FLOAT64 , controls_nhomalt_eas_kor INT64 , non_topmed_AC_eas_oea INT64 , non_topmed_AF_eas_oea FLOAT64 , non_topmed_nhomalt_eas_oea INT64 , controls_AC_eas_male INT64 , controls_AF_eas_male FLOAT64 , controls_nhomalt_eas_male INT64 , controls_AC_oth_male INT64 , controls_AF_oth_male FLOAT64 , controls_nhomalt_oth_male INT64 , non_topmed_AC INT64 , non_topmed_AF FLOAT64 , non_topmed_nhomalt INT64 , controls_AC_fin INT64 , controls_AF_fin FLOAT64 , controls_nhomalt_fin INT64 , AC_eas_kor INT64 , AF_eas_kor FLOAT64 , nhomalt_eas_kor INT64 , non_neuro_AC_nfe INT64 , non_neuro_AF_nfe FLOAT64 , non_neuro_nhomalt_nfe INT64 , non_neuro_AC_fin_female INT64 , non_neuro_AF_fin_female FLOAT64 , non_neuro_nhomalt_fin_female INT64 , non_cancer_AC_nfe_male INT64 , non_cancer_AF_nfe_male FLOAT64 , non_cancer_nhomalt_nfe_male INT64 , controls_AC_eas_oea INT64 , controls_AF_eas_oea FLOAT64 , controls_nhomalt_eas_oea INT64 , non_topmed_AC_nfe_seu INT64 , non_topmed_AF_nfe_seu FLOAT64 , non_topmed_nhomalt_nfe_seu INT64 , controls_AC_eas_female INT64 , controls_AF_eas_female FLOAT64 , controls_nhomalt_eas_female INT64 , non_topmed_AC_asj INT64 , non_topmed_AF_asj FLOAT64 , non_topmed_nhomalt_asj INT64 , controls_AC_nfe_onf INT64 , controls_AF_nfe_onf FLOAT64 , controls_nhomalt_nfe_onf INT64 , non_neuro_AC INT64 , non_neuro_AF FLOAT64 , non_neuro_nhomalt INT64 , AC_eas_oea INT64 , AF_eas_oea FLOAT64 , nhomalt_eas_oea INT64 , non_topmed_AC_nfe INT64 , non_topmed_AF_nfe FLOAT64 , non_topmed_nhomalt_nfe INT64 , non_cancer_AC_oth INT64 , non_cancer_AF_oth FLOAT64 , non_cancer_nhomalt_oth INT64 , non_topmed_AC_raw INT64 , non_topmed_AF_raw FLOAT64 , non_topmed_nhomalt_raw INT64 , non_neuro_AC_nfe_est INT64 , non_neuro_AF_nfe_est FLOAT64 , non_neuro_nhomalt_nfe_est INT64 , non_topmed_AC_oth_male INT64 , non_topmed_AF_oth_male FLOAT64 , non_topmed_nhomalt_oth_male INT64 , non_cancer_AC_oth_male INT64 , non_cancer_AF_oth_male FLOAT64 , non_cancer_nhomalt_oth_male INT64 , AC_nfe_est INT64 , AF_nfe_est FLOAT64 , nhomalt_nfe_est INT64 , non_cancer_AC_afr_female INT64 , non_cancer_AF_afr_female FLOAT64 , non_cancer_nhomalt_afr_female INT64 , non_topmed_AC_afr_male INT64 , non_topmed_AF_afr_male FLOAT64 , non_topmed_nhomalt_afr_male INT64 , AC_eas_male INT64 , AF_eas_male FLOAT64 , nhomalt_eas_male INT64 , controls_AC_eas INT64 , controls_AF_eas FLOAT64 , controls_nhomalt_eas INT64 , non_neuro_AC_eas_male INT64 , non_neuro_AF_eas_male FLOAT64 , non_neuro_nhomalt_eas_male INT64 , non_cancer_AC_nfe_nwe INT64 , non_cancer_AF_nfe_nwe FLOAT64 , non_cancer_nhomalt_nfe_nwe INT64 , controls_AC_sas INT64 , controls_AF_sas FLOAT64 , controls_nhomalt_sas INT64 , non_neuro_AC_sas_male INT64 , non_neuro_AF_sas_male FLOAT64 , non_neuro_nhomalt_sas_male INT64 , non_neuro_AC_asj_male INT64 , non_neuro_AF_asj_male FLOAT64 , non_neuro_nhomalt_asj_male INT64 , non_cancer_AC_nfe_bgr INT64  ancestry in the non_cancer subset""), non_cancer_AF_nfe_bgr FLOAT64  ancestry in the non_cancer subset""), non_cancer_nhomalt_nfe_bgr INT64  ancestry in the non_cancer subset""), controls_AC_oth INT64 , controls_AF_oth FLOAT64 , controls_nhomalt_oth INT64 , non_cancer_AC_eas_female INT64 , non_cancer_AF_eas_female FLOAT64 , non_cancer_nhomalt_eas_female INT64 , AC_nfe INT64 , AF_nfe FLOAT64 , nhomalt_nfe INT64 , non_topmed_AC_female INT64 , non_topmed_AF_female FLOAT64 , non_topmed_nhomalt_female INT64 , non_neuro_AC_asj INT64 , non_neuro_AF_asj FLOAT64 , non_neuro_nhomalt_asj INT64 , non_topmed_AC_eas_female INT64 , non_topmed_AF_eas_female FLOAT64 , non_topmed_nhomalt_eas_female INT64 , non_neuro_AC_raw INT64 , non_neuro_AF_raw FLOAT64 , non_neuro_nhomalt_raw INT64 , non_topmed_AC_eas INT64 , non_topmed_AF_eas FLOAT64 , non_topmed_nhomalt_eas INT64 , non_topmed_AC_fin_male INT64 , non_topmed_AF_fin_male FLOAT64 , non_topmed_nhomalt_fin_male INT64 , non_cancer_AC_asj_male INT64 , non_cancer_AF_asj_male FLOAT64 , non_cancer_nhomalt_asj_male INT64 , AC_fin INT64 , AF_fin FLOAT64 , nhomalt_fin INT64 , AC_nfe_male INT64 , AF_nfe_male FLOAT64 , nhomalt_nfe_male INT64 , non_topmed_AC_eas_kor INT64 , non_topmed_AF_eas_kor FLOAT64 , non_topmed_nhomalt_eas_kor INT64 , controls_AC_amr_male INT64 , controls_AF_amr_male FLOAT64 , controls_nhomalt_amr_male INT64 , non_neuro_AC_eas_oea INT64 , non_neuro_AF_eas_oea FLOAT64 , non_neuro_nhomalt_eas_oea INT64 , AC_sas_female INT64 , AF_sas_female FLOAT64 , nhomalt_sas_female INT64 , controls_AC_afr_female INT64 , controls_AF_afr_female FLOAT64 , controls_nhomalt_afr_female INT64 , controls_AC_amr INT64 , controls_AF_amr FLOAT64 , controls_nhomalt_amr INT64 , non_topmed_AC_eas_jpn INT64 , non_topmed_AF_eas_jpn FLOAT64 , non_topmed_nhomalt_eas_jpn INT64 , AC_asj_female INT64 , AF_asj_female FLOAT64 , nhomalt_asj_female INT64 , non_topmed_AC_nfe_bgr INT64  ancestry in the non_topmed subset""), non_topmed_AF_nfe_bgr FLOAT64  ancestry in the non_topmed subset""), non_topmed_nhomalt_nfe_bgr INT64  ancestry in the non_topmed subset""), non_cancer_AC_nfe_est INT64 , non_cancer_AF_nfe_est FLOAT64 , non_cancer_nhomalt_nfe_est INT64 , non_neuro_AC_eas INT64 , non_neuro_AF_eas FLOAT64 , non_neuro_nhomalt_eas INT64 , non_cancer_AC_nfe INT64 , non_cancer_AF_nfe FLOAT64 , non_cancer_nhomalt_nfe INT64 , non_neuro_AC_male INT64 , non_neuro_AF_male FLOAT64 , non_neuro_nhomalt_male INT64 , non_neuro_AC_sas_female INT64 , non_neuro_AF_sas_female FLOAT64 , non_neuro_nhomalt_sas_female INT64 , AC_asj INT64 , AF_asj FLOAT64 , nhomalt_asj INT64 , controls_AC_nfe_est INT64 , controls_AF_nfe_est FLOAT64 , controls_nhomalt_nfe_est INT64 , non_topmed_AC_asj_female INT64 , non_topmed_AF_asj_female FLOAT64 , non_topmed_nhomalt_asj_female INT64 , non_cancer_AC_nfe_swe INT64 , non_cancer_AF_nfe_swe FLOAT64 , non_cancer_nhomalt_nfe_swe INT64 , non_cancer_AC INT64 , non_cancer_AF FLOAT64 , non_cancer_nhomalt INT64 , non_topmed_AC_oth INT64 , non_topmed_AF_oth FLOAT64 , non_topmed_nhomalt_oth INT64 , non_topmed_AC_fin_female INT64 , non_topmed_AF_fin_female FLOAT64 , non_topmed_nhomalt_fin_female INT64 , non_cancer_AC_fin_female INT64 , non_cancer_AF_fin_female FLOAT64 , non_cancer_nhomalt_fin_female INT64 , AC_oth INT64 , AF_oth FLOAT64 , nhomalt_oth INT64 , non_neuro_AC_nfe_male INT64 , non_neuro_AF_nfe_male FLOAT64 , non_neuro_nhomalt_nfe_male INT64 , controls_AC_female INT64 , controls_AF_female FLOAT64 , controls_nhomalt_female INT64 , non_cancer_AC_fin INT64 , non_cancer_AF_fin FLOAT64 , non_cancer_nhomalt_fin INT64 , non_topmed_AC_fin INT64 , non_topmed_AF_fin FLOAT64 , non_topmed_nhomalt_fin INT64 , non_cancer_AC_eas_oea INT64 , non_cancer_AF_eas_oea FLOAT64 , non_cancer_nhomalt_eas_oea INT64 , non_topmed_AC_nfe_female INT64 , non_topmed_AF_nfe_female FLOAT64 , non_topmed_nhomalt_nfe_female INT64 , non_cancer_AC_sas_male INT64 , non_cancer_AF_sas_male FLOAT64 , non_cancer_nhomalt_sas_male INT64 , controls_AC_asj_male INT64 , controls_AF_asj_male FLOAT64 , controls_nhomalt_asj_male INT64 , non_cancer_AC_raw INT64 , non_cancer_AF_raw FLOAT64 , non_cancer_nhomalt_raw INT64 , non_cancer_AC_eas_male INT64 , non_cancer_AF_eas_male FLOAT64 , non_cancer_nhomalt_eas_male INT64 , non_topmed_AC_asj_male INT64 , non_topmed_AF_asj_male FLOAT64 , non_topmed_nhomalt_asj_male INT64 , non_neuro_AC_oth INT64 , non_neuro_AF_oth FLOAT64 , non_neuro_nhomalt_oth INT64 , AC_male INT64 , AF_male FLOAT64 , nhomalt_male INT64 , controls_AC_fin_female INT64 , controls_AF_fin_female FLOAT64 , controls_nhomalt_fin_female INT64 , controls_AC_nfe_bgr INT64  ancestry in the controls subset""), controls_AF_nfe_bgr FLOAT64  ancestry in the controls subset""), controls_nhomalt_nfe_bgr INT64  ancestry in the controls subset""), controls_AC_asj_female INT64 , controls_AF_asj_female FLOAT64 , controls_nhomalt_asj_female INT64 , AC_amr_male INT64 , AF_amr_male FLOAT64 , nhomalt_amr_male INT64 , AC_amr_female INT64 , AF_amr_female FLOAT64 , nhomalt_amr_female INT64 , non_topmed_AC_sas_male INT64 , non_topmed_AF_sas_male FLOAT64 , non_topmed_nhomalt_sas_male INT64 , AC_oth_male INT64 , AF_oth_male FLOAT64 , nhomalt_oth_male INT64 , non_cancer_AC_sas INT64 , non_cancer_AF_sas FLOAT64 , non_cancer_nhomalt_sas INT64 , non_neuro_AC_nfe_seu INT64 , non_neuro_AF_nfe_seu FLOAT64 , non_neuro_nhomalt_nfe_seu INT64 , non_cancer_AC_eas_kor INT64 , non_cancer_AF_eas_kor FLOAT64 , non_cancer_nhomalt_eas_kor INT64 , non_topmed_AC_afr_female INT64 , non_topmed_AF_afr_female FLOAT64 , non_topmed_nhomalt_afr_female INT64 , controls_AC_sas_male INT64 , controls_AF_sas_male FLOAT64 , controls_nhomalt_sas_male INT64 , non_topmed_AC_sas_female INT64 , non_topmed_AF_sas_female FLOAT64 , non_topmed_nhomalt_sas_female INT64 , non_topmed_AC_afr INT64 , non_topmed_AF_afr FLOAT64 , non_topmed_nhomalt_afr INT64 , controls_AC INT64 , controls_AF FLOAT64 , controls_nhomalt INT64 , non_neuro_AC_oth_female INT64 , non_neuro_AF_oth_female FLOAT64 , non_neuro_nhomalt_oth_female INT64 , non_topmed_faf95_amr FLOAT64  for samples of Latino ancestry in the non_topmed subset""), non_topmed_faf99_amr FLOAT64  for samples of Latino ancestry in the non_topmed subset""), faf95_afr FLOAT64  for samples of African-American/African ancestry""), faf99_afr FLOAT64  for samples of African-American/African ancestry""), faf95_sas FLOAT64  for samples of South Asian ancestry""), faf99_sas FLOAT64  for samples of South Asian ancestry""), controls_faf95_afr FLOAT64  for samples of African-American/African ancestry in the controls subset""), controls_faf99_afr FLOAT64  for samples of African-American/African ancestry in the controls subset""), faf95_amr FLOAT64  for samples of Latino ancestry""), faf99_amr FLOAT64  for samples of Latino ancestry""), non_neuro_faf95_sas FLOAT64  for samples of South Asian ancestry in the non_neuro subset""), non_neuro_faf99_sas FLOAT64  for samples of South Asian ancestry in the non_neuro subset""), faf95_eas FLOAT64  for samples of East Asian ancestry""), faf99_eas FLOAT64  for samples of East Asian ancestry""), faf95 FLOAT64  for samples""), faf99 FLOAT64  for samples""), non_neuro_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_neuro subset""), non_neuro_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_neuro subset""), non_cancer_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_cancer subset""), non_cancer_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_cancer subset""), non_neuro_faf95_amr FLOAT64  for samples of Latino ancestry in the non_neuro subset""), non_neuro_faf99_amr FLOAT64  for samples of Latino ancestry in the non_neuro subset""), non_topmed_faf95_sas FLOAT64  for samples of South Asian ancestry in the non_topmed subset""), non_topmed_faf99_sas FLOAT64  for samples of South Asian ancestry in the non_topmed subset""), controls_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the controls subset""), controls_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the controls subset""), non_cancer_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_cancer subset""), non_cancer_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_cancer subset""), non_cancer_faf95_amr FLOAT64  for samples of Latino ancestry in the non_cancer subset""), non_cancer_faf99_amr FLOAT64  for samples of Latino ancestry in the non_cancer subset""), non_topmed_faf95 FLOAT64  for samples in the non_topmed subset""), non_topmed_faf99 FLOAT64  for samples in the non_topmed subset""), non_neuro_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_neuro subset""), non_neuro_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_neuro subset""), non_neuro_faf95 FLOAT64  for samples in the non_neuro subset""), non_neuro_faf99 FLOAT64  for samples in the non_neuro subset""), non_topmed_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_topmed subset""), non_topmed_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_topmed subset""), controls_faf95_eas FLOAT64  for samples of East Asian ancestry in the controls subset""), controls_faf99_eas FLOAT64  for samples of East Asian ancestry in the controls subset""), controls_faf95_sas FLOAT64  for samples of South Asian ancestry in the controls subset""), controls_faf99_sas FLOAT64  for samples of South Asian ancestry in the controls subset""), faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry""), faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry""), non_topmed_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_topmed subset""), non_topmed_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_topmed subset""), controls_faf95_amr FLOAT64  for samples of Latino ancestry in the controls subset""), controls_faf99_amr FLOAT64  for samples of Latino ancestry in the controls subset""), non_neuro_faf95_eas FLOAT64  for samples of East Asian ancestry in the non_neuro subset""), non_neuro_faf99_eas FLOAT64  for samples of East Asian ancestry in the non_neuro subset""), non_cancer_faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_cancer subset""), non_cancer_faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry in the non_cancer subset""), non_cancer_faf95 FLOAT64  for samples in the non_cancer subset""), non_cancer_faf99 FLOAT64  for samples in the non_cancer subset""), non_cancer_faf95_sas FLOAT64  for samples of South Asian ancestry in the non_cancer subset""), non_cancer_faf99_sas FLOAT64  for samples of South Asian ancestry in the non_cancer subset""), non_topmed_faf95_afr FLOAT64  for samples of African-American/African ancestry in the non_topmed subset""), non_topmed_faf99_afr FLOAT64  for samples of African-American/African ancestry in the non_topmed subset""), controls_faf95 FLOAT64  for samples in the controls subset""), controls_faf99 FLOAT64  for samples in the controls subset""), popmax STRING , AC_popmax INT64 , AN_popmax INT64 , AF_popmax FLOAT64 ""), nhomalt_popmax INT64 , age_hist_het_bin_freq STRING , age_hist_het_n_smaller INT64 , age_hist_het_n_larger INT64 , age_hist_hom_bin_freq STRING , age_hist_hom_n_smaller INT64 , age_hist_hom_n_larger INT64 , non_topmed_popmax STRING , non_topmed_AC_popmax INT64 , non_topmed_AN_popmax INT64 , non_topmed_AF_popmax FLOAT64  in the non_topmed subset""), non_topmed_nhomalt_popmax INT64 , non_neuro_popmax STRING , non_neuro_AC_popmax INT64 , non_neuro_AN_popmax INT64 , non_neuro_AF_popmax FLOAT64  in the non_neuro subset""), non_neuro_nhomalt_popmax INT64 , non_cancer_popmax STRING , non_cancer_AC_popmax INT64 , non_cancer_AN_popmax INT64 , non_cancer_AF_popmax FLOAT64  in the non_cancer subset""), non_cancer_nhomalt_popmax INT64 , controls_popmax STRING , controls_AC_popmax INT64 , controls_AN_popmax INT64 , controls_AF_popmax FLOAT64  in the controls subset""), controls_nhomalt_popmax INT64 , vep ARRAY<STRUCT<allele STRING , Consequence STRING , IMPACT STRING , SYMBOL STRING , Gene STRING , Feature_type STRING , Feature STRING , BIOTYPE STRING , EXON STRING ""), INTRON STRING ""), HGVSc STRING , HGVSp STRING , cDNA_position STRING , CDS_position STRING , Protein_position STRING , Amino_acids STRING , Codons STRING , Existing_variation STRING , ALLELE_NUM INT64 , DISTANCE INT64 , STRAND INT64  on which the transcript/feature lies""), FLAGS STRING ""), VARIANT_CLASS STRING , MINIMISED INT64 , SYMBOL_SOURCE STRING , HGNC_ID INT64 , CANONICAL STRING , TSL STRING , APPRIS STRING , CCDS STRING , ENSP STRING , SWISSPROT STRING , TREMBL STRING , UNIPARC STRING , GENE_PHENO INT64 , SIFT STRING ""), PolyPhen STRING , DOMAINS STRING , HGVS_OFFSET INT64 , GMAF STRING , AFR_MAF STRING , AMR_MAF STRING , EAS_MAF STRING , EUR_MAF STRING , SAS_MAF STRING , AA_MAF STRING , EA_MAF STRING , ExAC_MAF STRING , ExAC_Adj_MAF STRING , ExAC_AFR_MAF STRING , ExAC_AMR_MAF STRING , ExAC_EAS_MAF STRING , ExAC_FIN_MAF STRING , ExAC_NFE_MAF STRING , ExAC_OTH_MAF STRING , ExAC_SAS_MAF STRING , CLIN_SIG STRING , SOMATIC STRING ; multiple values correspond to multiple values in the Existing_variation field""), PHENO STRING , PUBMED STRING  of publications that cite existing variant""), MOTIF_NAME STRING , MOTIF_POS INT64 , HIGH_INF_POS STRING ""), MOTIF_SCORE_CHANGE FLOAT64 , LoF STRING , LoF_filter STRING , LoF_flags STRING , LoF_info STRING >> >> .""),
  names ARRAY<STRING> .""),
  quality FLOAT64 ). Higher values imply better quality.""),
  filter ARRAY<STRING>  or \""PASS\"" indicating the variant has passed all filters.""),
  call ARRAY<STRUCT<name STRING , genotype ARRAY<INT64> , phaseset STRING . \""*\"" is used in cases where the genotype is phased, but no phase set (\""PS\"" in FORMAT) was specified."")>> ,
  AN INT64 ,
  rf_tp_probability FLOAT64 ,
  FS FLOAT64 ,
  InbreedingCoeff FLOAT64 ,
  MQ FLOAT64 ,
  MQRankSum FLOAT64 ,
  QD FLOAT64 ,
  ReadPosRankSum FLOAT64 ,
  SOR FLOAT64 ,
  VQSR_POSITIVE_TRAIN_SITE BOOL ,
  VQSR_NEGATIVE_TRAIN_SITE BOOL ,
  BaseQRankSum FLOAT64 ,
  ClippingRankSum FLOAT64 ,
  DP INT64 ,
  VQSLOD FLOAT64 ,
  VQSR_culprit STRING ,
  segdup BOOL ,
  lcr BOOL ,
  decoy BOOL ,
  nonpar BOOL  falls outside a pseudoautosomal region""),
  rf_positive_label BOOL ,
  rf_negative_label BOOL ,
  rf_label STRING ,
  rf_train BOOL ,
  transmitted_singleton BOOL ""),
  variant_type STRING ""),
  was_mixed BOOL ,
  has_star BOOL  observed elsewhere in the callset""),
  AN_nfe_seu INT64 ,
  controls_AN_afr_male INT64 ,
  non_neuro_AN_eas_kor INT64 ,
  non_topmed_AN_amr INT64 ,
  non_cancer_AN_asj_female INT64 ,
  AN_raw INT64 ,
  AN_fin_female INT64 ,
  non_cancer_AN_oth_female INT64 ,
  AN_nfe_bgr INT64  ancestry""),
  non_neuro_AN_asj_female INT64 ,
  AN_sas_male INT64 ,
  non_neuro_AN_afr_male INT64 ,
  AN_afr_male INT64 ,
  AN_afr INT64 ,
  controls_AN_nfe_swe INT64 ,
  non_neuro_AN_afr_female INT64 ,
  non_topmed_AN_amr_female INT64 ,
  non_cancer_AN_female INT64 ,
  non_cancer_AN_nfe_onf INT64 ,
  non_cancer_AN_male INT64 ,
  non_topmed_AN_oth_female INT64 ,
  AN_eas_female INT64 ,
  non_cancer_AN_sas_female INT64 ,
  AN_afr_female INT64 ,
  AN_sas INT64 ,
  non_neuro_AN_female INT64 ,
  controls_AN_afr INT64 ,
  non_neuro_AN_eas_jpn INT64 ,
  AN_nfe_onf INT64 ,
  non_cancer_AN_amr_male INT64 ,
  controls_AN_fin_male INT64 ,
  non_neuro_AN_nfe_nwe INT64 ,
  AN_fin_male INT64 ,
  AN_nfe_female INT64 ,
  AN_amr INT64 ,
  non_topmed_AN_nfe_male INT64 ,
  non_neuro_AN_sas INT64 ,
  non_cancer_AN_fin_male INT64 ,
  non_cancer_AN_nfe_seu INT64 ,
  AN_eas INT64 ,
  non_neuro_AN_nfe_female INT64 ,
  non_neuro_AN_afr INT64 ,
  controls_AN_raw INT64 ,
  non_cancer_AN_eas INT64 ,
  non_cancer_AN_amr_female INT64 ,
  non_neuro_AN_nfe_swe INT64 ,
  controls_AN_male INT64 ,
  non_topmed_AN_male INT64 ,
  controls_AN_eas_jpn INT64 ,
  controls_AN_nfe_female INT64 ,
  non_neuro_AN_amr INT64 ,
  non_neuro_AN_eas_female INT64 ,
  AN_asj_male INT64 ,
  controls_AN_nfe_male INT64 ,
  non_neuro_AN_fin INT64 ,
  non_topmed_AN_sas INT64 ,
  non_cancer_AN_nfe_female INT64 ,
  AN_oth_female INT64 ,
  non_cancer_AN_asj INT64 ,
  AN_nfe_swe INT64 ,
  controls_AN_nfe INT64 ,
  controls_AN_oth_female INT64 ,
  controls_AN_asj INT64 ,
  non_neuro_AN_amr_male INT64 ,
  controls_AN_nfe_nwe INT64 ,
  AN_nfe_nwe INT64 ,
  controls_AN_nfe_seu INT64 ,
  controls_AN_sas_female INT64 ,
  non_neuro_AN_amr_female INT64 ,
  non_cancer_AN_eas_jpn INT64 ,
  non_neuro_AN_nfe_onf INT64 ,
  non_topmed_AN_eas_male INT64 ,
  AN_eas_jpn INT64 ,
  non_cancer_AN_afr_male INT64 ,
  non_cancer_AN_afr INT64 ,
  controls_AN_amr_female INT64 ,
  non_neuro_AN_fin_male INT64 ,
  AN_female INT64 ,
  non_neuro_AN_nfe_bgr INT64  ancestry in the non_neuro subset""),
  non_neuro_AN_oth_male INT64 ,
  non_topmed_AN_nfe_est INT64 ,
  non_topmed_AN_nfe_nwe INT64 ,
  non_topmed_AN_amr_male INT64 ,
  non_cancer_AN_amr INT64 ,
  non_topmed_AN_nfe_swe INT64 ,
  non_topmed_AN_nfe_onf INT64 ,
  controls_AN_eas_kor INT64 ,
  non_topmed_AN_eas_oea INT64 ,
  controls_AN_eas_male INT64 ,
  controls_AN_oth_male INT64 ,
  non_topmed_AN INT64 ,
  controls_AN_fin INT64 ,
  AN_eas_kor INT64 ,
  non_neuro_AN_nfe INT64 ,
  non_neuro_AN_fin_female INT64 ,
  non_cancer_AN_nfe_male INT64 ,
  controls_AN_eas_oea INT64 ,
  non_topmed_AN_nfe_seu INT64 ,
  controls_AN_eas_female INT64 ,
  non_topmed_AN_asj INT64 ,
  controls_AN_nfe_onf INT64 ,
  non_neuro_AN INT64 ,
  AN_eas_oea INT64 ,
  non_topmed_AN_nfe INT64 ,
  non_cancer_AN_oth INT64 ,
  non_topmed_AN_raw INT64 ,
  non_neuro_AN_nfe_est INT64 ,
  non_topmed_AN_oth_male INT64 ,
  non_cancer_AN_oth_male INT64 ,
  AN_nfe_est INT64 ,
  non_cancer_AN_afr_female INT64 ,
  non_topmed_AN_afr_male INT64 ,
  AN_eas_male INT64 ,
  controls_AN_eas INT64 ,
  non_neuro_AN_eas_male INT64 ,
  non_cancer_AN_nfe_nwe INT64 ,
  controls_AN_sas INT64 ,
  non_neuro_AN_sas_male INT64 ,
  non_neuro_AN_asj_male INT64 ,
  non_cancer_AN_nfe_bgr INT64  ancestry in the non_cancer subset""),
  controls_AN_oth INT64 ,
  non_cancer_AN_eas_female INT64 ,
  AN_nfe INT64 ,
  non_topmed_AN_female INT64 ,
  non_neuro_AN_asj INT64 ,
  non_topmed_AN_eas_female INT64 ,
  non_neuro_AN_raw INT64 ,
  non_topmed_AN_eas INT64 ,
  non_topmed_AN_fin_male INT64 ,
  non_cancer_AN_asj_male INT64 ,
  AN_fin INT64 ,
  AN_nfe_male INT64 ,
  non_topmed_AN_eas_kor INT64 ,
  controls_AN_amr_male INT64 ,
  non_neuro_AN_eas_oea INT64 ,
  AN_sas_female INT64 ,
  controls_AN_afr_female INT64 ,
  controls_AN_amr INT64 ,
  non_topmed_AN_eas_jpn INT64 ,
  AN_asj_female INT64 ,
  non_topmed_AN_nfe_bgr INT64  ancestry in the non_topmed subset""),
  non_cancer_AN_nfe_est INT64 ,
  non_neuro_AN_eas INT64 ,
  non_cancer_AN_nfe INT64 ,
  non_neuro_AN_male INT64 ,
  non_neuro_AN_sas_female INT64 ,
  AN_asj INT64 ,
  controls_AN_nfe_est INT64 ,
  non_topmed_AN_asj_female INT64 ,
  non_cancer_AN_nfe_swe INT64 ,
  non_cancer_AN INT64 ,
  non_topmed_AN_oth INT64 ,
  non_topmed_AN_fin_female INT64 ,
  non_cancer_AN_fin_female INT64 ,
  AN_oth INT64 ,
  non_neuro_AN_nfe_male INT64 ,
  controls_AN_female INT64 ,
  non_cancer_AN_fin INT64 ,
  non_topmed_AN_fin INT64 ,
  non_cancer_AN_eas_oea INT64 ,
  non_topmed_AN_nfe_female INT64 ,
  non_cancer_AN_sas_male INT64 ,
  controls_AN_asj_male INT64 ,
  non_cancer_AN_raw INT64 ,
  non_cancer_AN_eas_male INT64 ,
  non_topmed_AN_asj_male INT64 ,
  non_neuro_AN_oth INT64 ,
  AN_male INT64 ,
  controls_AN_fin_female INT64 ,
  controls_AN_nfe_bgr INT64  ancestry in the controls subset""),
  controls_AN_asj_female INT64 ,
  AN_amr_male INT64 ,
  AN_amr_female INT64 ,
  non_topmed_AN_sas_male INT64 ,
  AN_oth_male INT64 ,
  non_cancer_AN_sas INT64 ,
  non_neuro_AN_nfe_seu INT64 ,
  non_cancer_AN_eas_kor INT64 ,
  non_topmed_AN_afr_female INT64 ,
  controls_AN_sas_male INT64 ,
  non_topmed_AN_sas_female INT64 ,
  non_topmed_AN_afr INT64 ,
  controls_AN INT64 ,
  non_neuro_AN_oth_female INT64 
)
PARTITION BY RANGE_BUCKET(start_position, GENERATE_ARRAY(0, 57265680, 14320))
CLUSTER BY start_position, end_position;"

,6
table_name,v3_genomes__chrX
ddl,"CREATE TABLE `bigquery-public-data.gnomAD.v3_genomes__chrX`
(
  reference_name STRING ,
  start_position INT64 . Corresponds to the first base of the string of reference bases.""),
  end_position INT64 . Corresponds to the first base after the last base in the reference allele.""),
  reference_bases STRING ,
  alternate_bases ARRAY<STRUCT<alt STRING , AC INT64 , AF FLOAT64 , n_alt_alleles INT64 , AC_asj_female INT64 , AF_asj_female FLOAT64 , nhomalt_asj_female INT64 , AC_eas_female INT64 , AF_eas_female FLOAT64 , nhomalt_eas_female INT64 , AC_afr_male INT64 , AF_afr_male FLOAT64 , nhomalt_afr_male INT64 , AC_female INT64 , AF_female FLOAT64 , nhomalt_female INT64 , AC_fin_male INT64 , AF_fin_male FLOAT64 , nhomalt_fin_male INT64 , AC_oth_female INT64 , AF_oth_female FLOAT64 , nhomalt_oth_female INT64 , AC_ami INT64 , AF_ami FLOAT64 , nhomalt_ami INT64 , AC_oth INT64 , AF_oth FLOAT64 , nhomalt_oth INT64 , AC_male INT64 , AF_male FLOAT64 , nhomalt_male INT64 , AC_ami_female INT64 , AF_ami_female FLOAT64 , nhomalt_ami_female INT64 , AC_afr INT64 , AF_afr FLOAT64 , nhomalt_afr INT64 , AC_eas_male INT64 , AF_eas_male FLOAT64 , nhomalt_eas_male INT64 , AC_sas INT64 , AF_sas FLOAT64 , nhomalt_sas INT64 , AC_nfe_female INT64 , AF_nfe_female FLOAT64 , nhomalt_nfe_female INT64 , AC_asj_male INT64 , AF_asj_male FLOAT64 , nhomalt_asj_male INT64 , AC_raw INT64 , AF_raw FLOAT64 , nhomalt_raw INT64 , AC_oth_male INT64 , AF_oth_male FLOAT64 , nhomalt_oth_male INT64 , AC_nfe_male INT64 , AF_nfe_male FLOAT64 , nhomalt_nfe_male INT64 , AC_asj INT64 , AF_asj FLOAT64 , nhomalt_asj INT64 , AC_amr_male INT64 , AF_amr_male FLOAT64 , nhomalt_amr_male INT64 , nhomalt INT64 , AC_amr_female INT64 , AF_amr_female FLOAT64 , nhomalt_amr_female INT64 , AC_sas_female INT64 , AF_sas_female FLOAT64 , nhomalt_sas_female INT64 , AC_fin INT64 , AF_fin FLOAT64 , nhomalt_fin INT64 , AC_afr_female INT64 , AF_afr_female FLOAT64 , nhomalt_afr_female INT64 , AC_sas_male INT64 , AF_sas_male FLOAT64 , nhomalt_sas_male INT64 , AC_amr INT64 , AF_amr FLOAT64 , nhomalt_amr INT64 , AC_nfe INT64 , AF_nfe FLOAT64 , nhomalt_nfe INT64 , AC_eas INT64 , AF_eas FLOAT64 , nhomalt_eas INT64 , AC_ami_male INT64 , AF_ami_male FLOAT64 , nhomalt_ami_male INT64 , AC_fin_female INT64 , AF_fin_female FLOAT64 , nhomalt_fin_female INT64 , faf95_afr FLOAT64  for samples of African-American/African ancestry""), faf99_afr FLOAT64  for samples of African-American/African ancestry""), faf95_sas FLOAT64  for samples of South Asian ancestry""), faf99_sas FLOAT64  for samples of South Asian ancestry""), faf95_amr FLOAT64  for samples of Latino ancestry""), faf99_amr FLOAT64  for samples of Latino ancestry""), faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry""), faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry""), faf95_eas FLOAT64  for samples of East Asian ancestry""), faf99_eas FLOAT64  for samples of East Asian ancestry""), vep ARRAY<STRUCT<allele STRING , Consequence STRING , IMPACT STRING , SYMBOL STRING , Gene STRING , Feature_type STRING , Feature STRING , BIOTYPE STRING , EXON STRING ""), INTRON STRING ""), empty STRING >> >> .""),
  names ARRAY<STRING> .""),
  quality FLOAT64 ). Higher values imply better quality.""),
  filter ARRAY<STRING>  or \""PASS\"" indicating the variant has passed all filters.""),
  call ARRAY<STRUCT<name STRING , genotype ARRAY<INT64> , phaseset STRING . \""*\"" is used in cases where the genotype is phased, but no phase set (\""PS\"" in FORMAT) was specified."")>> ,
  AN INT64 ,
  non_par BOOL ,
  lcr BOOL ,
  variant_type STRING ""),
  ReadPosRankSum FLOAT64 ,
  MQRankSum FLOAT64 ,
  RAW_MQ FLOAT64 ,
  DP INT64 ,
  MQ_DP INT64 ,
  VarDP INT64 ,
  MQ FLOAT64 ,
  QD FLOAT64 ,
  FS FLOAT64 ,
  SB ARRAY<INT64> ,
  InbreedingCoeff FLOAT64 ,
  AS_VQSLOD FLOAT64 ,
  NEGATIVE_TRAIN_SITE BOOL ,
  POSITIVE_TRAIN_SITE BOOL ,
  culprit STRING ,
  SOR FLOAT64 ,
  AN_asj_female INT64 ,
  AN_eas_female INT64 ,
  AN_afr_male INT64 ,
  AN_female INT64 ,
  AN_fin_male INT64 ,
  AN_oth_female INT64 ,
  AN_ami INT64 ,
  AN_oth INT64 ,
  AN_male INT64 ,
  AN_ami_female INT64 ,
  AN_afr INT64 ,
  AN_eas_male INT64 ,
  AN_sas INT64 ,
  AN_nfe_female INT64 ,
  AN_asj_male INT64 ,
  AN_raw INT64 ,
  AN_oth_male INT64 ,
  AN_nfe_male INT64 ,
  AN_asj INT64 ,
  AN_amr_male INT64 ,
  AN_amr_female INT64 ,
  AN_sas_female INT64 ,
  AN_fin INT64 ,
  AN_afr_female INT64 ,
  AN_sas_male INT64 ,
  AN_amr INT64 ,
  AN_nfe INT64 ,
  AN_eas INT64 ,
  AN_ami_male INT64 ,
  AN_fin_female INT64 ,
  faf95_adj FLOAT64 ,
  faf99_adj FLOAT64 
)
PARTITION BY RANGE_BUCKET(start_position, GENERATE_ARRAY(0, 156080970, 39030))
CLUSTER BY start_position, end_position;"

,7
table_name,v3_genomes__chrY
ddl,"CREATE TABLE `bigquery-public-data.gnomAD.v3_genomes__chrY`
(
  reference_name STRING ,
  start_position INT64 . Corresponds to the first base of the string of reference bases.""),
  end_position INT64 . Corresponds to the first base after the last base in the reference allele.""),
  reference_bases STRING ,
  alternate_bases ARRAY<STRUCT<alt STRING , AC INT64 , AF FLOAT64 , n_alt_alleles INT64 , AC_asj_female INT64 , AF_asj_female FLOAT64 , nhomalt_asj_female INT64 , AC_eas_female INT64 , AF_eas_female FLOAT64 , nhomalt_eas_female INT64 , AC_afr_male INT64 , AF_afr_male FLOAT64 , nhomalt_afr_male INT64 , AC_female INT64 , AF_female FLOAT64 , nhomalt_female INT64 , AC_fin_male INT64 , AF_fin_male FLOAT64 , nhomalt_fin_male INT64 , AC_oth_female INT64 , AF_oth_female FLOAT64 , nhomalt_oth_female INT64 , AC_ami INT64 , AF_ami FLOAT64 , nhomalt_ami INT64 , AC_oth INT64 , AF_oth FLOAT64 , nhomalt_oth INT64 , AC_male INT64 , AF_male FLOAT64 , nhomalt_male INT64 , AC_ami_female INT64 , AF_ami_female FLOAT64 , nhomalt_ami_female INT64 , AC_afr INT64 , AF_afr FLOAT64 , nhomalt_afr INT64 , AC_eas_male INT64 , AF_eas_male FLOAT64 , nhomalt_eas_male INT64 , AC_sas INT64 , AF_sas FLOAT64 , nhomalt_sas INT64 , AC_nfe_female INT64 , AF_nfe_female FLOAT64 , nhomalt_nfe_female INT64 , AC_asj_male INT64 , AF_asj_male FLOAT64 , nhomalt_asj_male INT64 , AC_raw INT64 , AF_raw FLOAT64 , nhomalt_raw INT64 , AC_oth_male INT64 , AF_oth_male FLOAT64 , nhomalt_oth_male INT64 , AC_nfe_male INT64 , AF_nfe_male FLOAT64 , nhomalt_nfe_male INT64 , AC_asj INT64 , AF_asj FLOAT64 , nhomalt_asj INT64 , AC_amr_male INT64 , AF_amr_male FLOAT64 , nhomalt_amr_male INT64 , nhomalt INT64 , AC_amr_female INT64 , AF_amr_female FLOAT64 , nhomalt_amr_female INT64 , AC_sas_female INT64 , AF_sas_female FLOAT64 , nhomalt_sas_female INT64 , AC_fin INT64 , AF_fin FLOAT64 , nhomalt_fin INT64 , AC_afr_female INT64 , AF_afr_female FLOAT64 , nhomalt_afr_female INT64 , AC_sas_male INT64 , AF_sas_male FLOAT64 , nhomalt_sas_male INT64 , AC_amr INT64 , AF_amr FLOAT64 , nhomalt_amr INT64 , AC_nfe INT64 , AF_nfe FLOAT64 , nhomalt_nfe INT64 , AC_eas INT64 , AF_eas FLOAT64 , nhomalt_eas INT64 , AC_ami_male INT64 , AF_ami_male FLOAT64 , nhomalt_ami_male INT64 , AC_fin_female INT64 , AF_fin_female FLOAT64 , nhomalt_fin_female INT64 , faf95_afr FLOAT64  for samples of African-American/African ancestry""), faf99_afr FLOAT64  for samples of African-American/African ancestry""), faf95_sas FLOAT64  for samples of South Asian ancestry""), faf99_sas FLOAT64  for samples of South Asian ancestry""), faf95_amr FLOAT64  for samples of Latino ancestry""), faf99_amr FLOAT64  for samples of Latino ancestry""), faf95_nfe FLOAT64  for samples of Non-Finnish European ancestry""), faf99_nfe FLOAT64  for samples of Non-Finnish European ancestry""), faf95_eas FLOAT64  for samples of East Asian ancestry""), faf99_eas FLOAT64  for samples of East Asian ancestry""), vep ARRAY<STRUCT<allele STRING , Consequence STRING , IMPACT STRING , SYMBOL STRING , Gene STRING , Feature_type STRING , Feature STRING , BIOTYPE STRING , EXON STRING ""), INTRON STRING ""), empty STRING >> >> .""),
  names ARRAY<STRING> .""),
  quality FLOAT64 ). Higher values imply better quality.""),
  filter ARRAY<STRING>  or \""PASS\"" indicating the variant has passed all filters.""),
  call ARRAY<STRUCT<name STRING , genotype ARRAY<INT64> , phaseset STRING . \""*\"" is used in cases where the genotype is phased, but no phase set (\""PS\"" in FORMAT) was specified."")>> ,
  AN INT64 ,
  non_par BOOL ,
  lcr BOOL ,
  variant_type STRING ""),
  ReadPosRankSum FLOAT64 ,
  MQRankSum FLOAT64 ,
  RAW_MQ FLOAT64 ,
  DP INT64 ,
  MQ_DP INT64 ,
  VarDP INT64 ,
  MQ FLOAT64 ,
  QD FLOAT64 ,
  FS FLOAT64 ,
  SB ARRAY<INT64> ,
  InbreedingCoeff FLOAT64 ,
  AS_VQSLOD FLOAT64 ,
  NEGATIVE_TRAIN_SITE BOOL ,
  POSITIVE_TRAIN_SITE BOOL ,
  culprit STRING ,
  SOR FLOAT64 ,
  AN_asj_female INT64 ,
  AN_eas_female INT64 ,
  AN_afr_male INT64 ,
  AN_female INT64 ,
  AN_fin_male INT64 ,
  AN_oth_female INT64 ,
  AN_ami INT64 ,
  AN_oth INT64 ,
  AN_male INT64 ,
  AN_ami_female INT64 ,
  AN_afr INT64 ,
  AN_eas_male INT64 ,
  AN_sas INT64 ,
  AN_nfe_female INT64 ,
  AN_asj_male INT64 ,
  AN_raw INT64 ,
  AN_oth_male INT64 ,
  AN_nfe_male INT64 ,
  AN_asj INT64 ,
  AN_amr_male INT64 ,
  AN_amr_female INT64 ,
  AN_sas_female INT64 ,
  AN_fin INT64 ,
  AN_afr_female INT64 ,
  AN_sas_male INT64 ,
  AN_amr INT64 ,
  AN_nfe INT64 ,
  AN_eas INT64 ,
  AN_ami_male INT64 ,
  AN_fin_female INT64 ,
  faf95_adj FLOAT64 ,
  faf99_adj FLOAT64 
)
PARTITION BY RANGE_BUCKET(start_position, GENERATE_ARRAY(0, 57265680, 14320))
CLUSTER BY start_position, end_position;"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'bigquery-public-data': {'gnomAD': ['v2_1_1_exomes__chr1', 'v2_1_1_exomes__chr10', 'v2_1_1_exomes__chr11', 'v2_1_1_exomes__chr12', 'v2_1_1_exomes__chr13', 'v2_1_1_exomes__chr14', 'v2_1_1_exomes__chr15', 'v2_1_1_exomes__chr16', 'v2_1_1_exomes__chr17', 'v2_1_1_exomes__chr18', 'v2_1_1_exomes__chr19', 'v2_1_1_exomes__chr2', 'v2_1_1_exomes__chr20', 'v2_1_1_exomes__chr21', 'v2_1_1_exomes__chr22', 'v2_1_1_exomes__chr3', 'v2_1_1_exomes__chr4', 'v2_1_1_exomes__chr5', 'v2_1_1_exomes__chr6', 'v2_1_1_exomes__chr7', 'v2_1_1_exomes__chr8', 'v2_1_1_exomes__chr9', 'v2_1_1_exomes__chrX', 'v2_1_1_exomes__chrY', 'v2_1_1_genomes__chr1', 'v2_1_1_genomes__chr10', 'v2_1_1_genomes__chr11', 'v2_1_1_genomes__chr12', 'v2_1_1_genomes__chr13', 'v2_1_1_genomes__chr14', 'v2_1_1_genomes__chr15', 'v2_1_1_genomes__chr16', 'v2_1_1_genomes__chr17', 'v2_1_1_genomes__chr18', 'v2_1_1_genomes__chr19', 'v2_1_1_genomes__chr2', 'v2_1_1_genomes__chr20', 'v2_1_1_genomes__chr21', 'v2_1_1_genomes__chr22', 'v2_1_1_genomes__chr3', 'v2_1_1_genomes__chr4', 'v2_1_1_genomes__chr5', 'v2_1_1_genomes__chr6', 'v2_1_1_genomes__chr7', 'v2_1_1_genomes__chr8', 'v2_1_1_genomes__chr9', 'v2_1_1_genomes__chrX', 'v3_genomes__chr1', 'v3_genomes__chr10', 'v3_genomes__chr11', 'v3_genomes__chr12', 'v3_genomes__chr13', 'v3_genomes__chr14', 'v3_genomes__chr15', 'v3_genomes__chr16', 'v3_genomes__chr17', 'v3_genomes__chr18', 'v3_genomes__chr19', 'v3_genomes__chr2', 'v3_genomes__chr20', 'v3_genomes__chr21', 'v3_genomes__chr22', 'v3_genomes__chr3', 'v3_genomes__chr4', 'v3_genomes__chr5', 'v3_genomes__chr6', 'v3_genomes__chr7', 'v3_genomes__chr8', 'v3_genomes__chr9', 'v3_genomes__chrX', 'v3_genomes__chrY']}}
Begin Exploring Related Columns
**Relevant Table:**

- `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`

**Relevant Columns and Potential Usage:**

- `reference_name`: Identify the chromosome; should be 'chr17' for BRCA1.
- `start_position`: Used to locate variants within the BRCA1 gene region.
- `end_position`: Used along with `start_position` to define the variant's genomic location.
- `alternate_bases`: Contains information about the alternate alleles.
- `alternate_bases.alt`: Specific alternate allele sequences.
- `vep`: An array of VEP annotations for each variant.
- `vep.SYMBOL`: Gene symbol; used to filter for 'BRCA1'.
- `vep.Consequence`: Consequence types; used to filter for 'missense_variant'.
- `vep.Protein_position`: Protein position of the variant; used to order variants.
- `vep.Allele`: Alternate allele associated with the VEP annotation.

**Conditions That May Be Used:**

- `reference_name = 'chr17'`: Ensure we're looking at chromosome 17.
- `start_position BETWEEN 41196312 AND 41322420`: Filter variants within the BRCA1 gene region (hg19 coordinates).
- `vep.SYMBOL = 'BRCA1'`: Select annotations relevant to BRCA1.
- `vep.Consequence LIKE '%missense_variant%'`: Filter for missense variants.
- `ORDER BY CAST(vep.Protein_position AS INT)`: Order variants by protein position.
- `LIMIT 100`: Limit the number of results.

---

**SQL Queries:**

1. **Retrieve basic variant positions within BRCA1:**

   ```sql
   SELECT
     start_position,
     end_position,
     reference_bases,
     alternate_bases
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
   WHERE
     start_position BETWEEN 41196312 AND 41322420
   LIMIT 100;
   ```

2. **Get variants with 'missense_variant' consequence in BRCA1:**

   ```sql
   SELECT
     start_position,
     end_position,
     reference_bases,
     alternate_bases.alt
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND EXISTS (
       SELECT 1 FROM UNNEST(vep) AS vep
       WHERE vep.SYMBOL = 'BRCA1'
         AND vep.Consequence LIKE '%missense_variant%'
     )
   LIMIT 100;
   ```

3. **List distinct gene symbols in the BRCA1 region:**

   ```sql
   SELECT DISTINCT
     vep.SYMBOL
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
   LIMIT 100;
   ```

4. **Retrieve variants with their consequences:**

   ```sql
   SELECT
     start_position,
     vep.SYMBOL,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
   LIMIT 100;
   ```

5. **Get variants ordered by protein position:**

   ```sql
   SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
   ORDER BY
     CAST(vep.Protein_position AS INT)
   LIMIT 100;
   ```

6. **Count missense variants in BRCA1:**

   ```sql
   SELECT
     COUNT(*) AS missense_variant_count
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
   LIMIT 100;
   ```

7. **Retrieve variants with allele frequency (AF):**

   ```sql
   SELECT
     start_position,
     alternate_bases.alt,
     alternate_bases.AF
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases
   WHERE
     start_position BETWEEN 41196312 AND 41322420
   LIMIT 100;
   ```

8. **Get variants with specific alternate alleles in BRCA1:**

   ```sql
   SELECT
     start_position,
     alternate_bases.alt
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
     AND alternate_bases.alt = vep.Allele
   LIMIT 100;
   ```

9. **Find variants with highest allele frequency in BRCA1:**

   ```sql
   SELECT
     start_position,
     alternate_bases.alt,
     alternate_bases.AF
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases
   WHERE
     start_position BETWEEN 41196312 AND 41322420
   ORDER BY
     alternate_bases.AF DESC
   LIMIT 100;
   ```

10. **Retrieve detailed information for missense variants in BRCA1:**

    ```sql
    SELECT
      start_position,
      end_position,
      reference_bases,
      alternate_bases.alt,
      vep.Consequence,
      vep.Protein_position,
      vep.Amino_acids,
      vep.Codons
    FROM
      `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
      UNNEST(alternate_bases) AS alternate_bases,
      UNNEST(vep) AS vep
    WHERE
      start_position BETWEEN 41196312 AND 41322420
      AND vep.SYMBOL = 'BRCA1'
      AND vep.Consequence LIKE '%missense_variant%'
      AND alternate_bases.alt = vep.Allele
    ORDER BY
      CAST(vep.Protein_position AS INT)
    LIMIT 100;
    ```

---

These queries help in exploring the data related to the BRCA1 gene in the gnomAD v2.1.1 dataset. They range from basic retrievals to more complex queries involving joins and conditions on nested fields.Query:
SELECT
     start_position,
     end_position,
     reference_bases,
     alternate_bases
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`
   WHERE
     start_position BETWEEN 41196312 AND 41322420
   LIMIT 100;
Answer:
Too long, hard cut:
start_position,end_position,reference_bases,alternate_bases
41267769,41267770,G,"[{'alt': 'T', 'AC': 1, 'AF': 3.98629e-06, 'allele_type': 'snv', 'n_alt_alleles': 1, 'pab_max': 0.229481, 'gq_hist_alt_bin_freq': '0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1', 'gq_hist_all_bin_freq': '20|15|26|80|174|160|516|929|671|1725|2428|1471|6235|988|5393|1441|6631|722|7151|88972', 'dp_hist_alt_bin_freq': '0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0', 'dp_hist_alt_n_larger': 0, 'dp_hist_all_bin_freq': '19|254|1369|3899|8921|9985|19283|39297|20507|11809|5358|2243|1027|549|338|220|161|104|95|86', 'dp_hist_all_n_larger': 224, 'ab_hist_alt_bin_freq': '0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0', 'AC_nfe_seu': 1, 'AF_nfe_seu': 8.72144e-05, 'nhomalt_nfe_seu': 0, 'controls_AC_afr_male': 0, 'controls_AF_afr_male': 0.0, 'controls_nhomalt_afr_male': 0, 'non_neuro_AC_eas_kor': 0, 'non_neuro_AF_eas_kor': 0.0, 'non_neuro_nhomalt_eas_kor': 0, 'non_topmed_AC_amr': 0, 'non_topmed_AF_amr': 0.0, 'non_topmed_nhomalt_amr': 0, 'non_cancer_AC_asj_female': 0, 'non_cancer_AF_asj_female': 0.0, 'non_cancer_nhomalt_asj_female': 0, 'AC_raw': 1, 'AF_raw': 3.97621e-06, 'nhomalt_raw': 0, 'AC_fin_female': 0, 'AF_fin_female': 0.0, 'nhomalt_fin_female': 0, 'non_cancer_AC_oth_female': 0, 'non_cancer_AF_oth_female': 0.0, 'non_cancer_nhomalt_oth_female': 0, 'AC_nfe_bgr': 0, 'AF_nfe_bgr': 0.0, 'nhomalt_nfe_bgr': 0, 'non_neuro_AC_asj_female': 0, 'non_neuro_AF_asj_female': 0.0, 'non_neuro_nhomalt_asj_female': 0, 'AC_sas_male': 0, 'AF_sas_male': 0.0, 'nhomalt_sas_male': 0, 'non_neuro_AC_afr_male': 0, 'non_neuro_AF_afr_male': 0.0, 'non_neuro_nhomalt_afr_male': 0, 'AC_afr_male': 0, 'AF_afr_male': 0.0, 'nhomalt_afr_male': 0, 'AC_afr': 0, 'AF_afr': 0.0, 'nhomalt_afr': 0, 'controls_AC_nfe_swe': 0, 'controls_AF_nfe_swe': 0.0, 'controls_nhomalt_nfe_swe': 0, 'non_neuro_AC_afr_female': 0, 'non_neuro_AF_afr_female': 0.0, 'non_neuro_nhomalt_afr_female': 0, 'non_topmed_AC_amr_female': 0, 'non_topmed_AF_amr_female': 0.0, 'non_topmed_nhomalt_amr_female': 0, 'non_cancer_AC_female': 0, 'non_cancer_AF_female': 0.0, 'non_cancer_nhomalt_female': 0, 'non_cancer_AC_nfe_onf': 0, 'non_cancer_AF_nfe_onf': 0.0, 'non_cancer_nhomalt_nfe_onf': 0, 'non_cancer_AC_male': 0, 'non_cancer_AF_male': 0.0, 'non_cancer_nhomalt_male': 0, 'non_topmed_AC_oth_female': 0, 'non_topmed_AF_oth_female': 0.0, 'non_topmed_nhomalt_oth_female': 0, 'AC_eas_female': 0, 'AF_eas_female': 0.0, 'nhomalt_eas_female': 0, 'non_cancer_AC_sas_female': 0, 'non_cancer_AF_sas_female': 0.0, 'non_cancer_nhomalt_sas_female': 0, 'AC_afr_female': 0, 'AF_afr_female': 0.0, 'nhomalt_afr_female': 0, 'AC_sas': 0, 'AF_sas': 0.0, 'nhomalt_sas': 0, 'non_neuro_AC_female': 0, 'non_neuro_AF_female': 0.0, 'non_neuro_nhomalt_female': 0, 'controls_AC_afr': 0, 'controls_AF_afr': 0.0, 'controls_nhomalt_afr': 0, 'non_neuro_AC_eas_jpn': 0, 'non_neuro_AF_eas_jpn': 0.0, 'non_neuro_nhomalt_eas_jpn': 0, 'AC_nfe_onf': 0, 'AF_nfe_onf': 0.0, 'nhomalt_nfe_onf': 0, 'non_cancer_AC_amr_male': 0, 'non_cancer_AF_amr_male': 0.0, 'non_cancer_nhomalt_amr_male': 0, 'controls_AC_fin_male': 0, 'controls_AF_fin_male': 0.0, 'controls_nhomalt_fin_male': 0, 'non_neuro_AC_nfe_nwe': 0, 'non_neuro_AF_nfe_nwe': 0.0, 'non_neuro_nhomalt_nfe_nwe': 0, 'AC_fin_male': 0, 'AF_fin_male': 0.0, 'nhomalt_fin_male': 0, 'AC_nfe_female': 0, 'AF_nfe_female': 0.0, 'nhomalt_nfe_female': 0, 'AC_amr': 0, 'AF_amr': 0.0, 'nhomalt_amr': 0, 'non_topmed_AC_nfe_male': 1, 'non_topmed_AF_nfe_male': 1.59541e-05, 'non_topmed_nhomalt_nfe_male': 0, 'non_neuro_AC_sas': 0, 'non_neuro_AF_sas': 0.0, 'non_neuro_nhomalt_sas': 0, 'non_cancer_AC_fin_male': 0, 'non_cancer_AF_fin_male': 0.0, 'non_cancer_nhomalt_fin_male': 0, 'non_cancer_AC_nfe_seu': 0, 'non_cancer_AF_nfe_seu': 0.0, 'non_cancer_nhomalt_nfe_seu': 0, 'AC_eas': 0, 'AF_eas': 0.0, 'nhomalt_eas': 0, 'nhomalt': 0, 'non_neuro_AC_nfe_female': 0, 'non_neuro_AF_nfe_female': 0.0, 'non_neuro_nhomalt_nfe_female': 0, 'non_neuro_AC_afr': 0, 'non_neuro_AF_afr': 0.0, 'non_neuro_nhomalt_afr': 0, 'controls_AC_raw': 0, 'controls_AF_raw': 0.0, 'controls_nhomalt_raw': 0, 'non_cancer_AC_eas': 0, 'non_cancer_AF_eas': 0.0, 'non_cancer_nhomalt_eas': 0, 'non_cancer_AC_amr_female': 0, 'non_cancer_AF_amr_female': 0.0, 'non_cancer_nhomalt_amr_female': 0, 'non_neuro_AC_nfe_swe': 0, 'non_neuro_AF_nfe_swe': 0.0, 'non_neuro_nhomalt_nfe_swe': 0, 'controls_AC_male': 0, 'controls_AF_male': 0.0, 'controls_nhomalt_male': 0, 'non_topmed_AC_male': 1, 'non_topmed_AF_male': 7.50582e-06, 'non_topmed_nhomalt_male': 0, 'controls_AC_eas_jpn': 0, 'controls_AF_eas_jpn': 0.0, 'controls_nhomalt_eas_jpn': 0, 'controls_AC_nfe_female': 0, 'controls_AF_nfe_female': 0.0, 'controls_nhomalt_nfe_female': 0, 'non_neuro_AC_amr': 0, 'non_neuro_AF_amr': 0.0, 'non_neuro_nhomalt_amr': 0, 'non_neuro_AC_eas_female': 0, 'non_neuro_AF_eas_female': 0.0, 'non_neuro_nhomalt_eas_female': 0, 'AC_asj_male': 0, 'AF_asj_male': 0.0, 'nhomalt_asj_male': 0, 'controls_AC_nfe_male': 0, 'controls_AF_nfe_male': 0.0, 'controls_nhomalt_nfe_male'
Query:
SELECT
     start_position,
     end_position,
     reference_bases,
     alternate_bases.alt
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND EXISTS (
       SELECT 1 FROM UNNEST(vep) AS vep
       WHERE vep.SYMBOL = 'BRCA1'
         AND vep.Consequence LIKE '%missense_variant%'
     )
   LIMIT 100;
Answer:
start_position,end_position,reference_bases,alt
41219709,41219710,C,A
41219708,41219709,G,A
41219707,41219708,A,G
41219705,41219706,C,T
41219701,41219702,T,C
41219699,41219700,T,C
41219696,41219697,A,G
41219693,41219694,C,T
41219693,41219694,C,A
41219681,41219682,G,A
41219678,41219679,T,C
41219675,41219676,T,C
41219674,41219675,G,A
41219662,41219663,A,G
41219659,41219660,A,G
41219656,41219657,G,A
41219630,41219631,T,G
41219624,41219625,C,G
41215957,41215958,A,T
41215952,41215953,C,G
41215947,41215948,G,A
41215946,41215947,C,T
41215925,41215926,C,G
41215920,41215921,C,T
41215919,41215920,G,C
41215919,41215920,G,A
41215919,41215920,G,T
41215917,41215918,C,T
41215914,41215915,C,T
41215904,41215905,A,G
41215387,41215388,C,A
41215386,41215387,A,T
41215384,41215385,T,C
41215366,41215367,T,C
41215353,41215354,T,C
41209147,41209148,T,A
41209147,41209148,T,C
41209124,41209125,C,T
41209100,41209101,G,C
41209093,41209094,C,T
41209085,41209086,C,G
41203126,41203127,C,G
41203105,41203106,T,C
41203100,41203101,G,C
41203094,41203095,T,A
41203087,41203088,A,C
41203084,41203085,G,A
41267769,41267770,G,T
41267758,41267759,C,T
41267772,41267773,A,C
41267746,41267747,A,T
41267748,41267749,A,G
41267783,41267784,G,C
41267743,41267744,T,G
41267742,41267743,T,G
41267790,41267791,T,C
Query:
SELECT DISTINCT
  vep.SYMBOL
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
  UNNEST(alternate_bases) AS alt,
  UNNEST(alt.vep) AS vep
WHERE
  start_position BETWEEN 41196312 AND 41322420
LIMIT 100;
Answer:
SYMBOL
BRCA1
""
RPL21P4
NBR2
CTD-3199J23.6
Query:
SELECT
     start_position,
     vep.SYMBOL,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
   LIMIT 100
Answer:
400 Unrecognized name: vep at [7:13]; reason: invalidQuery, location: query, message: Unrecognized name: vep at [7:13]

Location: US
Job ID: 87f280ab-13cb-43f6-b020-0fbc4bf8afae
Query:
SELECT
     start_position,
     vep.SYMBOL,
     vep.Consequence
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
   LIMIT 100
Answer:
start_position,SYMBOL,Consequence
41267769,BRCA1,intron_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant&NMD_transcript_variant
41267769,BRCA1,missense_variant&NMD_transcript_variant
41267769,BRCA1,non_coding_transcript_exon_variant&non_coding_transcript_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,missense_variant&NMD_transcript_variant
41267769,BRCA1,intron_variant
41267769,BRCA1,intron_variant
41267769,BRCA1,missense_variant
41267769,BRCA1,intron_variant
41267769,BRCA1,intron_variant
41267769,BRCA1,intron_variant
41267769,BRCA1,intron_variant
41267758,BRCA1,intron_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant&NMD_transcript_variant
41267758,BRCA1,missense_variant&NMD_transcript_variant
41267758,BRCA1,non_coding_transcript_exon_variant&non_coding_transcript_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,missense_variant&NMD_transcript_variant
41267758,BRCA1,intron_variant
41267758,BRCA1,intron_variant
41267758,BRCA1,missense_variant
41267758,BRCA1,intron_variant
41267758,BRCA1,intron_variant
41267758,BRCA1,intron_variant
41267758,BRCA1,intron_variant
41267772,BRCA1,intron_variant
41267772,BRCA1,missense_variant
41267772,BRCA1,missense_variant
41267772,BRCA1,missense_variant
41267772,BRCA1,missense_variant
41267772,BRCA1,missense_variant
41267772,BRCA1,missense_variant&NMD_transcript_variant
41267772,BRCA1,missense_variant&NMD_transcript_variant
Query:
UNNEST(vep) AS vep
Answer:
400 Syntax error: Unexpected keyword UNNEST at [1:1]; reason: invalidQuery, location: query, message: Syntax error: Unexpected keyword UNNEST at [1:1]

Location: US
Job ID: 2f7e26b6-5eeb-4e8a-b47c-62455f57b0cc
Query:
SELECT
     vep.Protein_position,
     start_position,
     vep.Consequence
FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Protein_position IS NOT NULL
ORDER BY
     CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
LIMIT 100
Answer:
400 Bad int64 value: 1430-1431; reason: invalidQuery, location: query, message: Bad int64 value: 1430-1431

Location: US
Job ID: 4ee2d19b-fe0a-4782-9684-a50b1a3976b9
Query:
SELECT
     COUNT(*) AS missense_variant_count
  FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(vep) AS vep
  WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
  LIMIT 100
Answer:
400 Unrecognized name: vep at [5:13]; reason: invalidQuery, location: query, message: Unrecognized name: vep at [5:13]

Location: US
Job ID: 3700185d-c86a-4344-b488-a345533c53f5
Query:
SELECT
     COUNT(*) AS missense_variant_count
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alt,
     UNNEST(alt.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
   LIMIT 100
Answer:
missense_variant_count
9132
Query:
SELECT
     start_position,
     alternate_bases.alt,
     alternate_bases.AF
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases
   WHERE
     start_position BETWEEN 41196312 AND 41322420
   LIMIT 100
Answer:
start_position,alt,AF
41296215,C,0.0
41296208,T,4.23191e-05
41291855,A,6.70637e-06
41291800,A,7.50537e-06
41291799,T,2.25154e-05
41291792,C,7.81274e-06
41291790,G,0.0
41291789,C,7.91239e-06
41291788,G,1.5937e-05
41296281,A,0.0
41296280,T,0.0
41291882,C,6.49545e-06
41291881,G,6.50643e-06
41291880,C,6.51432e-06
41291876,C,1.96166e-05
41291875,G,6.54879e-06
41291874,G,0.0
41291870,G,6.58874e-06
41291866,C,6.61901e-06
41291864,T,0.0
41291853,G,2.68868e-05
41291850,G,6.75475e-06
41291807,A,2.19305e-05
41291805,T,2.20193e-05
41291783,T,8.38378e-06
41296244,G,3.13107e-05
41296241,TAA,5.51086e-05
41296282,C,2.64845e-05
41291891,C,5.13532e-05
41291848,C,6.78675e-06
41291841,A,6.84969e-06
41291827,G,0.0
41291826,C,0.0
41291825,G,0.0
41291822,G,6.39904e-05
41291820,C,7.11369e-06
41296225,T,4.84559e-05
41296221,C,3.36746e-05
41296188,A,0.000201857
41296187,A,5.23451e-05
41296187,T,5.23451e-05
41296183,A,0.0
41296180,C,6.29406e-05
41291898,T,0.0
41291892,T,6.4184e-06
41291892,A,6.4184e-06
41296195,T,0.0
41296193,C,0.0
41296192,A,0.0
41291936,G,5.55864e-06
41291931,T,0.0
41291929,T,5.70809e-06
41291924,A,0.000570823
41291923,T,0.000646147
41291921,G,5.91751e-06
41291914,C,1.21981e-05
41291906,T,0.0
41291900,G,0.000253068
41291939,G,5.48474e-06
41291951,G,0.0
41292029,A,0.0
41292030,T,0.0
41292036,C,7.49783e-06
41292023,A,0.0
41292015,C,6.4365e-06
41292013,A,0.000328363
41292019,T,0.0
41291967,A,5.18904e-06
41291965,G,5.21534e-06
41291960,T,1.04824e-05
41291955,A,1.58271e-05
41291953,G,0.0
41291992,C,5.37155e-06
41292008,G,1.15892e-05
41291973,A,1.03383e-05
41291969,T,5.17309e-06
41291993,A,0.0
41291994,T,1.62656e-05
41291995,A,0.000255724
41291998,G,5.51992e-06
41292002,A,0.0
41290792,C,1.20644e-05
41290790,T,4.02181e-06
41290783,G,4.02172e-06
41290805,A,4.02194e-05
41290804,T,4.02204e-06
41290803,A,1.20655e-05
41290820,T,4.02275e-06
41290829,C,4.82897e-05
Query:
SELECT
     start_position,
     alternate_bases.alt
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
     AND alternate_bases.alt = vep.Allele
   LIMIT 100
Answer:
start_position,alt
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,A
41219693,A
41219693,A
41219693,A
Query:
SELECT
     start_position,
     alternate_bases.alt
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases,
     UNNEST(alternate_bases.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
     AND alternate_bases.alt = vep.Allele
   LIMIT 100
Answer:
start_position,alt
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219709,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219708,A
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219707,G
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219705,T
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219701,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219699,C
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219696,G
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,T
41219693,A
41219693,A
41219693,A
41219693,A
Query:
SELECT
     start_position,
     alternate_bases.alt,
     alternate_bases.AF
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases
   WHERE
     start_position BETWEEN 41196312 AND 41322420
   ORDER BY
     alternate_bases.AF DESC
   LIMIT 100
Answer:
start_position,alt,AF
41277186,C,0.409927
41244935,A,0.403826
41223093,C,0.353937
41243999,C,0.352682
41245465,A,0.352622
41234469,G,0.348519
41244434,C,0.34827
41245236,G,0.347393
41196407,A,0.342346
41291952,G,0.341385
41197273,A,0.338265
41296196,G,0.32603
41196820,C,0.286718
41262603,C,0.285656
41256088,A,0.259147
41196820,C,0.186758
41251930,A,0.173017
41196820,C,0.112229
41262603,C,0.101263
41262603,CA,0.0662477
41245470,T,0.0584328
41246480,C,0.0465123
41196823,A,0.0438818
41196822,TTTCC,0.0436133
41262603,C,0.0418308
41196824,A,0.0360545
41196820,C,0.0337315
41196820,CT,0.0333873
41196825,C,0.0237933
41222974,T,0.0179935
41262548,A,0.0170657
41296241,T,0.0153386
41262603,C,0.0132245
41244428,T,0.0131537
41196826,C,0.0123454
41197707,G,0.0101117
41196362,T,0.00959638
41256099,A,0.00865066
41262603,CAA,0.00581504
41196367,T,0.00465203
41267762,T,0.00443734
41243508,C,0.00382339
41197658,C,0.00371941
41196944,C,0.00358523
41290849,A,0.00284343
41244129,C,0.00252099
41258449,T,0.00252061
41245089,C,0.00240089
41226487,A,0.00237104
41256318,G,0.00202393
41290930,A,0.00192954
41296241,TA,0.00176347
41245576,C,0.0016844
41245026,A,0.00167301
41244981,G,0.0016693
41242937,G,0.0014973
41223047,G,0.0014718
41249262,A,0.00146834
41196913,A,0.00137964
41197828,T,0.00120192
41201129,G,0.0011617
41223118,C,0.00109783
41256097,A,0.00103994
41244523,T,0.00101982
41244814,C,0.00101681
41246566,C,0.00101429
41196581,T,0.000879521
41277353,A,0.000847444
41228490,C,0.000788537
41196828,A,0.000774497
41201104,A,0.000770822
41249296,T,0.000692785
41291923,T,0.000646147
41219731,C,0.000585704
41291924,A,0.000570823
41246724,T,0.000559101
41196981,A,0.000530267
41244464,T,0.000525683
41196820,T,0.000465681
41245380,C,0.000454361
41246060,T,0.000445874
41276092,A,0.000442129
41276151,CAT,0.000439408
41277276,A,0.00043628
41244733,C,0.000433841
41246410,C,0.000414092
41245438,C,0.000402028
Query:
SELECT
     start_position,
     end_position,
     reference_bases,
     alternate_bases.alt,
     vep.Consequence,
     vep.Protein_position,
     vep.Amino_acids,
     vep.Codons
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases,
     UNNEST(vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
     AND alternate_bases.alt = vep.Allele
   ORDER BY
     CAST(vep.Protein_position AS INT)
   LIMIT 100
Answer:
start_position,end_position,reference_bases,alt,Consequence,Protein_position,Amino_acids,Codons
41256930,41256931,C,A,missense_variant,1,E/D,gaG/gaT
41256930,41256931,C,A,missense_variant,1,E/D,gaG/gaT
41276109,41276110,C,T,missense_variant&NMD_transcript_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41258538,41258539,A,C,missense_variant,2,L/R,cTg/cGg
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41258538,41258539,A,C,missense_variant,2,L/R,cTg/cGg
41246654,41246655,T,C,missense_variant,2,N/S,aAt/aGt
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant&NMD_transcript_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant&NMD_transcript_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41243836,41243837,T,C,missense_variant,2,I/M,atA/atG
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41246654,41246655,T,C,missense_variant,2,N/S,aAt/aGt
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41243834,41243835,G,C,missense_variant,3,P/R,cCt/cGt
41256926,41256927,A,C,missense_variant,3,L/V,Ttg/Gtg
Query:
SELECT
     start_position,
     end_position,
     reference_bases,
     alternate_bases.alt,
     vep.Consequence,
     vep.Protein_position,
     vep.Amino_acids,
     vep.Codons
   FROM
     `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
     UNNEST(alternate_bases) AS alternate_bases,
     UNNEST(alternate_bases.vep) AS vep
   WHERE
     start_position BETWEEN 41196312 AND 41322420
     AND vep.SYMBOL = 'BRCA1'
     AND vep.Consequence LIKE '%missense_variant%'
     AND alternate_bases.alt = vep.Allele
   ORDER BY
     CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
   LIMIT 100
Answer:
start_position,end_position,reference_bases,alt,Consequence,Protein_position,Amino_acids,Codons
41256930,41256931,C,A,missense_variant,1,E/D,gaG/gaT
41256930,41256931,C,A,missense_variant,1,E/D,gaG/gaT
41276109,41276110,C,T,missense_variant&NMD_transcript_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41258538,41258539,A,C,missense_variant,2,L/R,cTg/cGg
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41246654,41246655,T,C,missense_variant,2,N/S,aAt/aGt
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant&NMD_transcript_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41246654,41246655,T,C,missense_variant,2,N/S,aAt/aGt
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant&NMD_transcript_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41243836,41243837,T,C,missense_variant,2,I/M,atA/atG
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41258538,41258539,A,C,missense_variant,2,L/R,cTg/cGg
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41276109,41276110,C,T,missense_variant,2,D/N,Gat/Aat
41243834,41243835,G,C,missense_variant,3,P/R,cCt/cGt
41256926,41256927,A,C,missense_variant,3,L/V,Ttg/Gtg
End Exploring Related Columns
Task: Find the start and end positions of the BRCA1 gene, and retrieve the first missense variants based on their protein positions within this region. The variants must have a consequence type of "missense_variant". Using data from the gnomAD v2.1.1 version.

Please answer only one complete SQL in bigquery dialect in ```sql``` format.
Usage example: ```sql
SELECT `column_name` FROM `database.schema.table` WHERE ... ``` (Replace `database`, `schema`, and `table` with actual names. Enclose column names and table identifiers with backticks.)
Follow the answer format like: The BRCA1 gene is located on chromosome 17, from position 41,196,311 to 41,322,420.

Below are the first missense variants within the BRCA1 gene region, based on their protein positions. Each variant has a consequence type of "missense_variant".

```csv
Protein_Position,Variant_ID,Consequence
protein_pos1:int,variant_id1:str,"missense_variant"
protein_pos2:int,variant_id2:str,"missense_variant"
...
```

(Attention: answer includes columns and data types).
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'bigquery-public-data': {'gnomAD': ['v2_1_1_exomes__chr1', 'v2_1_1_exomes__chr10', 'v2_1_1_exomes__chr11', 'v2_1_1_exomes__chr12', 'v2_1_1_exomes__chr13', 'v2_1_1_exomes__chr14', 'v2_1_1_exomes__chr15', 'v2_1_1_exomes__chr16', 'v2_1_1_exomes__chr17', 'v2_1_1_exomes__chr18', 'v2_1_1_exomes__chr19', 'v2_1_1_exomes__chr2', 'v2_1_1_exomes__chr20', 'v2_1_1_exomes__chr21', 'v2_1_1_exomes__chr22', 'v2_1_1_exomes__chr3', 'v2_1_1_exomes__chr4', 'v2_1_1_exomes__chr5', 'v2_1_1_exomes__chr6', 'v2_1_1_exomes__chr7', 'v2_1_1_exomes__chr8', 'v2_1_1_exomes__chr9', 'v2_1_1_exomes__chrX', 'v2_1_1_exomes__chrY', 'v2_1_1_genomes__chr1', 'v2_1_1_genomes__chr10', 'v2_1_1_genomes__chr11', 'v2_1_1_genomes__chr12', 'v2_1_1_genomes__chr13', 'v2_1_1_genomes__chr14', 'v2_1_1_genomes__chr15', 'v2_1_1_genomes__chr16', 'v2_1_1_genomes__chr17', 'v2_1_1_genomes__chr18', 'v2_1_1_genomes__chr19', 'v2_1_1_genomes__chr2', 'v2_1_1_genomes__chr20', 'v2_1_1_genomes__chr21', 'v2_1_1_genomes__chr22', 'v2_1_1_genomes__chr3', 'v2_1_1_genomes__chr4', 'v2_1_1_genomes__chr5', 'v2_1_1_genomes__chr6', 'v2_1_1_genomes__chr7', 'v2_1_1_genomes__chr8', 'v2_1_1_genomes__chr9', 'v2_1_1_genomes__chrX', 'v3_genomes__chr1', 'v3_genomes__chr10', 'v3_genomes__chr11', 'v3_genomes__chr12', 'v3_genomes__chr13', 'v3_genomes__chr14', 'v3_genomes__chr15', 'v3_genomes__chr16', 'v3_genomes__chr17', 'v3_genomes__chr18', 'v3_genomes__chr19', 'v3_genomes__chr2', 'v3_genomes__chr20', 'v3_genomes__chr21', 'v3_genomes__chr22', 'v3_genomes__chr3', 'v3_genomes__chr4', 'v3_genomes__chr5', 'v3_genomes__chr6', 'v3_genomes__chr7', 'v3_genomes__chr8', 'v3_genomes__chr9', 'v3_genomes__chrX', 'v3_genomes__chrY']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-25 07:14:35 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:14:35 - root - INFO - ```sql
SELECT
  CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64) AS Protein_Position,
  CONCAT(CAST(start_position AS STRING), '_', reference_bases, '/', alternate_bases.alt) AS Variant_ID,
  vep.Consequence
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
  UNNEST(alternate_bases) AS alternate_bases,
  UNNEST(alternate_bases.vep) AS vep
WHERE
  start_position BETWEEN 41196312 AND 41322420
  AND vep.SYMBOL = 'BRCA1'
  AND vep.Consequence LIKE '%missense_variant%'
  AND alternate_bases.alt = vep.Allele
ORDER BY
  CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
LIMIT 100;
```
2025-01-25 07:14:39 - root - INFO - itercount: 1
2025-01-25 07:14:39 - root - INFO - 0
2025-01-25 07:14:39 - root - INFO - results: 
Protein_Position,Variant_ID,Consequence
1,41256930_C/A,missense_variant
1,41256930_C/A,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant&NMD_transcript_variant
2,41276109_C/T,missense_variant
2,41246654_T/C,missense_variant
2,41243836_T/C,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant&NMD_transcript_variant
2,41276109_C/T,missense_variant&NMD_transcript_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41258538_A/C,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41258538_A/C,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41246654_T/C,missense_variant
3,41256926_A/C,missense_variant
3,41256926_A/C,missense_variant
3,41246652_C/A,missense_variant
3,41258536_T/C,missense_variant
3,41226487_C/A,missense_variant
3,41243834_G/C,missense_variant
3,41243834_G/A,missense_variant
3,41246652_C/A,missense_variant
3,41247877_C/T,missense_variant
3,41258536_T/C,missense_variant
4,41243832_A/T,missense_variant
4,41246647_T/G,missense_variant
4,41246647_T/G,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41246646_T/C,missense_variant
5,41256919_A/G,missense_variant
5,41246646_T/C,missense_variant
5,41256919_A/G,missense_variant
5,41258530_G/A,missense_variant
5,41247871_C/A,missense_variant
5,41276099_G/A,missense_variant
5,41258530_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant&NMD_transcript_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant&NMD_transcript_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant&NMD_transcript_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41215957_A/T,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant&NMD_transcript_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant&NMD_transcript_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant&NMD_transcript_variant
6,41258526_T/C,missense_variant
6,41258526_T/C,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
7,41276094_G/T,missense_variant
7,41276094_G/T,missense_variant&NMD_transcript_variant
7,41276094_G/A,missense_variant
7,41276094_G/A,missense_variant
7,41276094_G/A,missense_variant
7,41276094_G/T,missense_variant
7,41276094_G/T,missense_variant
7,41276094_G/A,missense_variant&NMD_transcript_variant
7,41276094_G/T,missense_variant
7,41276094_G/A,missense_variant
7,41276094_G/T,missense_variant
7,41276093_C/T,missense_variant
7,41276093_C/T,missense_variant
7,41276093_C/T,missense_variant
7,41276094_G/T,missense_variant&NMD_transcript_variant
7,41276094_G/A,missense_variant&NMD_transcript_variant
7,41276093_C/T,missense_variant
7,41276094_G/A,missense_variant
7,41276093_C/T,missense_variant


2025-01-25 07:14:39 - root - INFO - Please check the answer again by reviewing Find the start and end positions of the BRCA1 gene, and retrieve the first missense variants based on their protein positions within this region. The variants must have a consequence type of "missense_variant". Using data from the gnomAD v2.1.1 version., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: The BRCA1 gene is located on chromosome 17, from position 41,196,311 to 41,322,420.

Below are the first missense variants within the BRCA1 gene region, based on their protein positions. Each variant has a consequence type of "missense_variant".

```csv
Protein_Position,Variant_ID,Consequence
protein_pos1:int,variant_id1:str,"missense_variant"
protein_pos2:int,variant_id2:str,"missense_variant"
...
```

(Attention: answer includes columns and data types) The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Protein_Position,Variant_ID,Consequence
1,41256930_C/A,missense_variant
1,41256930_C/A,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant&NMD_transcript_variant
2,41276109_C/T,missense_variant
2,41246654_T/C,missense_variant
2,41243836_T/C,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant&NMD_transcript_variant
2,41276109_C/T,missense_variant&NMD_transcript_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41258538_A/C,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41258538_A/C,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41246654_T/C,missense_variant
3,41256926_A/C,missense_variant
3,41256926_A/C,missense_variant
3,41246652_C/A,missense_variant
3,41258536_T/C,missense_variant
3,41226487_C/A,missense_variant
3,41243834_G/C,missense_variant
3,41243834_G/A,missense_variant
3,41246652_C/A,missense_variant
3,41247877_C/T,missense_variant
3,41258536_T/C,missense_variant
4,41243832_A/T,missense_variant
4,41246647_T/G,missense_variant
4,41246647_T/G,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41246646_T/C,missense_variant
5,41256919_A/G,missense_variant
5,41246646_T/C,missense_variant
5,41256919_A/G,missense_variant
5,41258530_G/A,missense_variant
5,41247871_C/A,missense_variant
5,41276099_G/A,missense_variant
5,41258530_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant&NMD_transcript_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant&NMD_transcript_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant&NMD_transcript_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41276099_G/A,missense_variant
5,41215957_A/T,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant&NMD_transcript_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant&NMD_transcript_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant&NMD_transcript_variant
6,41258526_T/C,missense_variant
6,41258526_T/C,missense_variant
6,41276097_G/A,missense_variant
6,41276097_G/A,missense_variant
7,41276094_G/T,missense_variant
7,41276094_G/T,missense_variant&NMD_transcript_variant
7,41276094_G/A,missense_variant
7,41276094_G/A,missense_variant
7,41276094_G/A,missense_variant
7,41276094_G/T,missense_variant
7,41276094_G/T,missense_variant
7,41276094_G/A,missense_variant&NMD_transcript_variant
7,41276094_G/T,missense_variant
7,41276094_G/A,missense_variant
7,41276094_G/T,missense_variant
7,41276093_C/T,missense_variant
7,41276093_C/T,missense_variant
7,41276093_C/T,missense_variant
7,41276094_G/T,missense_variant&NMD_transcript_variant
7,41276094_G/A,missense_variant&NMD_transcript_variant
7,41276093_C/T,missense_variant
7,41276094_G/A,missense_variant
7,41276093_C/T,missense_variant
Current sql:
SELECT
  CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64) AS Protein_Position,
  CONCAT(CAST(start_position AS STRING), '_', reference_bases, '/', alternate_bases.alt) AS Variant_ID,
  vep.Consequence
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
  UNNEST(alternate_bases) AS alternate_bases,
  UNNEST(alternate_bases.vep) AS vep
WHERE
  start_position BETWEEN 41196312 AND 41322420
  AND vep.SYMBOL = 'BRCA1'
  AND vep.Consequence LIKE '%missense_variant%'
  AND alternate_bases.alt = vep.Allele
ORDER BY
  CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
LIMIT 100;
2025-01-25 07:15:26 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:15:26 - root - INFO - The BRCA1 gene is located on chromosome 17, from position 41,196,311 to 41,322,420.

Below are the first missense variants within the BRCA1 gene region, based on their protein positions. Each variant has a consequence type of "missense_variant".

```csv
Protein_Position:int,Variant_ID:str,Consequence:str
1,41256930_C/A,"missense_variant"
1,41256930_C/A,"missense_variant"
2,41276109_C/T,"missense_variant"
2,41276109_C/T,"missense_variant"
2,41276109_C/T,"missense_variant&NMD_transcript_variant"
2,41276109_C/T,"missense_variant"
2,41246654_T/C,"missense_variant"
2,41243836_T/C,"missense_variant"
2,41276109_C/T,"missense_variant"
2,41276109_C/T,"missense_variant"
```

**SQL Query:**

```sql
SELECT
  CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64) AS Protein_Position,
  CONCAT(CAST(start_position AS STRING), '_', reference_bases, '/', alternate_bases.alt) AS Variant_ID,
  vep.Consequence
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
  UNNEST(alternate_bases) AS alternate_bases,
  UNNEST(alternate_bases.vep) AS vep
WHERE
  start_position BETWEEN 41196311 AND 41322420
  AND vep.SYMBOL = 'BRCA1'
  AND vep.Consequence LIKE '%missense_variant%'
  AND alternate_bases.alt = vep.Allele
ORDER BY
  CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
LIMIT 10;
```
2025-01-25 07:15:31 - root - INFO - itercount: 2
2025-01-25 07:15:31 - root - INFO - 0
2025-01-25 07:15:31 - root - INFO - results: 
Protein_Position,Variant_ID,Consequence
1,41256930_C/A,missense_variant
1,41256930_C/A,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant&NMD_transcript_variant


2025-01-25 07:15:31 - root - INFO - Please check the answer again by reviewing Find the start and end positions of the BRCA1 gene, and retrieve the first missense variants based on their protein positions within this region. The variants must have a consequence type of "missense_variant". Using data from the gnomAD v2.1.1 version., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: The BRCA1 gene is located on chromosome 17, from position 41,196,311 to 41,322,420.

Below are the first missense variants within the BRCA1 gene region, based on their protein positions. Each variant has a consequence type of "missense_variant".

```csv
Protein_Position,Variant_ID,Consequence
protein_pos1:int,variant_id1:str,"missense_variant"
protein_pos2:int,variant_id2:str,"missense_variant"
...
```

(Attention: answer includes columns and data types) The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Protein_Position,Variant_ID,Consequence
1,41256930_C/A,missense_variant
1,41256930_C/A,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant
2,41276109_C/T,missense_variant&NMD_transcript_variant
Current sql:
SELECT
  CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64) AS Protein_Position,
  CONCAT(CAST(start_position AS STRING), '_', reference_bases, '/', alternate_bases.alt) AS Variant_ID,
  vep.Consequence
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
  UNNEST(alternate_bases) AS alternate_bases,
  UNNEST(alternate_bases.vep) AS vep
WHERE
  start_position BETWEEN 41196311 AND 41322420
  AND vep.SYMBOL = 'BRCA1'
  AND vep.Consequence LIKE '%missense_variant%'
  AND alternate_bases.alt = vep.Allele
ORDER BY
  CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
LIMIT 10;
2025-01-25 07:16:14 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 07:16:14 - root - INFO - The BRCA1 gene is located on chromosome 17, from position 41,196,311 to 41,322,420.

Below are the first missense variants within the BRCA1 gene region, based on their protein positions. Each variant has a consequence type of "missense_variant".

```csv
Protein_Position:int,Variant_ID:str,Consequence:str
1,41256930_C/A,"missense_variant"
1,41256930_C/A,"missense_variant"
2,41276109_C/T,"missense_variant"
2,41276109_C/T,"missense_variant"
2,41276109_C/T,"missense_variant"
2,41276109_C/T,"missense_variant"
2,41246654_T/C,"missense_variant"
2,41243836_T/C,"missense_variant"
2,41276109_C/T,"missense_variant"
2,41276109_C/T,"missense_variant"
```

**SQL Query:**

```sql
SELECT
  CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64) AS Protein_Position,
  CONCAT(CAST(start_position AS STRING), '_', reference_bases, '/', alternate_bases.alt) AS Variant_ID,
  vep.Consequence
FROM
  `bigquery-public-data.gnomAD.v2_1_1_exomes__chr17`,
  UNNEST(alternate_bases) AS alternate_bases,
  UNNEST(alternate_bases.vep) AS vep
WHERE
  start_position BETWEEN 41196311 AND 41322420
  AND vep.SYMBOL = 'BRCA1'
  AND vep.Consequence LIKE '%missense_variant%'
  AND alternate_bases.alt = vep.Allele
ORDER BY
  CAST(SPLIT(vep.Protein_position, '/')[OFFSET(0)] AS INT64)
LIMIT 10;
```
2025-01-25 07:16:18 - root - INFO - itercount: 3
2025-01-25 07:16:18 - root - INFO - 0
2025-01-25 07:16:18 - root - INFO - Total iteration counts: 3
