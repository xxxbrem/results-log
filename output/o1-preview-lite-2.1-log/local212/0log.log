2025-01-24 09:20:00 - openai._base_client - INFO - Retrying request to /chat/completions in 0.443784 seconds
2025-01-24 09:21:41 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 09:21:42 - root - INFO - SQL:
SELECT DISTINCT driver_id FROM "deliveries" LIMIT 100;
Results:
driver_id
8378.0
2473.0
7615.0
10463.0
16430.0
14513.0
""
9996.0
23092.0
25575.0
9392.0
15156.0
29669.0
10514.0
7396.0
14702.0
26154.0
15561.0
15898.0
14059.0
12893.0
21923.0
4190.0
24830.0
9828.0
9043.0
23093.0
24584.0
358.0
12077.0
30854.0
8456.0
6165.0
25651.0
12023.0
2355.0
26075.0
5628.0
12136.0
17907.0
5250.0
9211.0
9025.0
15661.0
14382.0
726.0
30574.0
29966.0
5052.0
430.0
4937.0
938.0
22901.0
731.0
28171.0
8940.0
27294.0
10259.0
3834.0
512.0
8266.0
10614.0
29378.0
357.0
13043.0
1113.0
5623.0
24571.0
11466.0
17477.0
9509.0
26879.0
22260.0
6161.0
14511.0
6361.0
25798.0
17227.0
5128.0
2945.0
25409.0
425.0
888.0
10560.0
30030.0
26588.0
26052.0
6662.0
13527.0
8958.0
6656.0
174.0
2061.0
28169.0
510.0
28072.0
15061.0
7638.0
2837.0
29077.0

2025-01-24 09:21:42 - root - INFO - SQL:
SELECT
        delivery_id,
        driver_id,
        delivery_order_id
    FROM "deliveries"
    LIMIT 100;
Results:
delivery_id,driver_id,delivery_order_id
2174658,8378.0,68413340
2174660,2473.0,68414309
2174661,7615.0,68416230
2174663,8378.0,68412721
2174675,10463.0,68414018
2174680,16430.0,68415103
2174693,14513.0,68416643
2174695,,68417783
2174696,9996.0,68415457
2174697,23092.0,68414563
2174699,9996.0,68415140
2174705,9996.0,68416059
2174707,25575.0,68417307
2174708,9996.0,68416059
2174712,9392.0,68415947
2174713,15156.0,68416226
2174715,29669.0,68417646
2174720,10514.0,68416227
2174724,7396.0,68416397
2174729,14702.0,68418089
2174733,26154.0,68415344
2174734,26154.0,68415474
2174735,26154.0,68414512
2174737,15561.0,68418430
2174739,15898.0,68419302
2174743,14059.0,68419091
2174744,12893.0,68418711
2174749,21923.0,68419094
2174751,4190.0,68421547
2174754,24830.0,68419146
2174755,24830.0,68419684
2174756,9828.0,68420053
2174757,9043.0,68420869
2174759,23093.0,68421551
2174764,24584.0,68422045
2174765,358.0,68419140
2174767,12077.0,68420592
2174769,30854.0,68420589
2174771,8456.0,68417544
2174775,6165.0,68420308
2174790,25651.0,68422281
2174791,12023.0,68424656
2174792,2355.0,68422076
2174797,26075.0,68422614
2174799,5628.0,68419848
2174801,12136.0,68421987
2174803,17907.0,68417778
2174804,5250.0,68423847
2174805,9211.0,68422671
2174806,9025.0,68417799
2174808,15661.0,68422092
2174810,14382.0,68423162
2174813,10514.0,68417497
2174824,726.0,68419305
2174825,30574.0,68419373
2174829,29966.0,68424659
2174830,5052.0,68425021
2174831,30574.0,68424433
2174834,430.0,68419797
2174838,4937.0,68423762
2174839,938.0,68423643
2174840,22901.0,68418092
2174843,25651.0,68424216
2174845,,68424547
2174847,731.0,68426376
2174849,25651.0,68425058
2174850,28171.0,68427952
2174851,25651.0,68425821
2174852,8940.0,68423588
2174859,27294.0,68428840
2174862,10259.0,68426619
2174864,25651.0,68424858
2174865,25651.0,68426187
2174866,358.0,68426421
2174867,25651.0,68426427
2174876,3834.0,68430224
2174878,512.0,68429364
2174880,8266.0,68429550
2174882,10614.0,68428396
2174883,,68427057
2174884,29378.0,68428503
2174888,357.0,68426471
2174890,13043.0,68429631
2174891,1113.0,68426696
2174892,5623.0,68427588
2174893,24571.0,68424660
2174897,11466.0,68430182
2174898,1113.0,68427057
2174900,17477.0,68430452
2174901,9509.0,68430526
2174903,26879.0,68420776
2174904,357.0,68428457
2174905,23093.0,68430552
2174906,22260.0,68434112
2174910,6161.0,68430487
2174911,25651.0,68429530
2174912,14511.0,68415543
2174913,5628.0,68429881
2174917,10514.0,68421071
2174918,7396.0,68426262

2025-01-24 09:21:42 - root - INFO - SQL:
SELECT
        order_id,
        delivery_order_id,
        order_moment_delivered
    FROM "orders"
    LIMIT 100;
Results:
order_id,delivery_order_id,order_moment_delivered
68405119,68405119,
68405123,68405123,
68405206,68405206,
68405465,68405465,
68406064,68406064,
68408108,68408108,
68408109,68408109,
68409030,68409030,
68410055,68410055,
68412121,68412121,
68412122,68412122,
68412123,68412123,
68412131,68412131,
68412134,68412134,
68412148,68412148,
68412322,68412322,
68412444,68412444,
68412721,68412721,
68413340,68413340,
68414018,68414018,
68414309,68414309,
68414512,68414512,
68414563,68414563,
68414907,68414907,
68415103,68415103,
68415140,68415140,
68415344,68415344,
68415457,68415457,
68415474,68415474,
68415543,68415543,
68415947,68415947,
68416059,68416059,
68416226,68416226,
68416227,68416227,
68416230,68416230,
68416339,68416339,
68416397,68416397,
68416643,68416643,
68417189,68417189,
68417307,68417307,
68417497,68417497,
68417544,68417544,1/1/2021 4:22:19 PM
68417646,68417646,
68417778,68417778,
68417783,68417783,
68417787,68417787,
68417799,68417799,
68418089,68418089,
68418092,68418092,
68418430,68418430,
68418711,68418711,
68419091,68419091,
68419094,68419094,
68419140,68419140,
68419146,68419146,
68419302,68419302,
68419305,68419305,
68419373,68419373,
68419684,68419684,
68419797,68419797,
68419848,68419848,
68420053,68420053,
68420308,68420308,
68420589,68420589,
68420592,68420592,
68420776,68420776,
68420869,68420869,
68421071,68421071,
68421547,68421547,
68421551,68421551,
68421917,68421917,
68421987,68421987,
68422045,68422045,
68422076,68422076,
68422092,68422092,
68422281,68422281,
68422614,68422614,
68422671,68422671,1/1/2021 3:56:45 PM
68422740,68422740,
68423110,68423110,
68423162,68423162,
68423436,68423436,
68423588,68423588,
68423643,68423643,
68423762,68423762,
68423847,68423847,
68424216,68424216,
68424238,68424238,
68424433,68424433,
68424547,68424547,
68424656,68424656,
68424659,68424659,
68424660,68424660,
68424858,68424858,
68425021,68425021,
68425058,68425058,
68425821,68425821,
68426187,68426187,
68426262,68426262,
68426299,68426299,

2025-01-24 09:21:42 - root - INFO - SQL:
SELECT
        d.driver_id,
        o.order_moment_delivered
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    LIMIT 100;
Results:
driver_id,order_moment_delivered
8378.0,
2473.0,
7615.0,
8378.0,
10463.0,
16430.0,
14513.0,
,
9996.0,
23092.0,
9996.0,
9996.0,
25575.0,
9996.0,
9392.0,
15156.0,
29669.0,
10514.0,
7396.0,
14702.0,
26154.0,
26154.0,
26154.0,
15561.0,
15898.0,
14059.0,
12893.0,
21923.0,
4190.0,
24830.0,
24830.0,
9828.0,
9043.0,
23093.0,
24584.0,
358.0,
12077.0,
30854.0,
8456.0,1/1/2021 4:22:19 PM
6165.0,
25651.0,
12023.0,
2355.0,
26075.0,
5628.0,
12136.0,
17907.0,
5250.0,
9211.0,1/1/2021 3:56:45 PM
9025.0,
15661.0,
14382.0,
10514.0,
726.0,
30574.0,
29966.0,
5052.0,
30574.0,
430.0,
4937.0,
938.0,
22901.0,
25651.0,
,
731.0,
25651.0,
28171.0,
25651.0,
8940.0,
27294.0,
10259.0,
25651.0,
25651.0,
358.0,
25651.0,
3834.0,
512.0,
8266.0,
10614.0,
,
29378.0,
357.0,
13043.0,
1113.0,
5623.0,
24571.0,
11466.0,
1113.0,
17477.0,
9509.0,
26879.0,
357.0,
23093.0,
22260.0,
6161.0,
25651.0,
14511.0,
5628.0,
10514.0,
7396.0,

2025-01-24 09:22:02 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 09:22:02 - root - INFO - ```sql
SELECT
    d.driver_id,
    (CAST(COUNT(*) AS FLOAT) / COUNT(DISTINCT date(o.order_moment_delivered))) AS average_daily_deliveries
FROM "deliveries" AS d
JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
WHERE o.order_moment_delivered IS NOT NULL
GROUP BY d.driver_id
ORDER BY average_daily_deliveries DESC
LIMIT 5;
```
2025-01-24 09:23:08 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 09:23:08 - root - INFO - SQL:
SELECT
    d.driver_id,
    (CAST(COUNT(*) AS FLOAT) / COUNT(DISTINCT date(o.order_moment_delivered))) AS average_daily_deliveries
FROM "deliveries" AS d
JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
WHERE o.order_moment_delivered IS NOT NULL
GROUP BY d.driver_id
ORDER BY average_daily_deliveries DESC
LIMIT 5;
Results:
driver_id,average_daily_deliveries
66457,
66243,
66145,
66101,
66099,

2025-01-24 09:24:12 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 09:24:12 - root - INFO - Certainly! The empty values in the `delivery_date` and `deliveries_count` columns indicate that the `date()` function isn't properly parsing the `order_moment_delivered` column, likely due to its format.

The `order_moment_delivered` column appears to have dates in the format like `'1/1/2021 4:22:19 PM'`, which is not recognized by SQLite's `date()` function. To extract the date properly, we'll use string functions to parse the date portion from the timestamp.

Here's the corrected SQL query:

```sql
SELECT
    d.driver_id,
    substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1) AS delivery_date,
    COUNT(*) AS deliveries_count
FROM "deliveries" AS d
JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
GROUP BY d.driver_id, delivery_date
LIMIT 100;
```

**Explanation:**

- **`substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1)`**:
  - `instr(o.order_moment_delivered, ' ')` finds the position of the first space character, which separates the date and time.
  - `substr()` extracts the substring from the first character to the character before the first space, effectively capturing the date portion (e.g., `'1/1/2021'`).
- **`WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''`**:
  - Ensures that we only process records where `order_moment_delivered` has a value.
- **`GROUP BY d.driver_id, delivery_date`**:
  - Groups the deliveries by driver and date to count the number of deliveries per driver per day.

**Alternative Using `order_moment_created`:**

If the `order_moment_delivered` column has many empty values, and `order_moment_created` contains more complete data, you can use it instead:

```sql
SELECT
    d.driver_id,
    substr(o.order_moment_created, 1, instr(o.order_moment_created, ' ') - 1) AS delivery_date,
    COUNT(*) AS deliveries_count
FROM "deliveries" AS d
JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
WHERE o.order_moment_created IS NOT NULL AND o.order_moment_created != ''
GROUP BY d.driver_id, delivery_date
LIMIT 100;
```

**Note:**

- Make sure that the date formats in your data are consistently structured to match this parsing method.
- Adjust the `LIMIT` clause as needed for your data set.
- Replace `order_moment_delivered` with `order_moment_created` or another timestamp column if it provides more complete data.

By correctly parsing the date portion from the timestamp, this query should yield non-empty values in the `delivery_date` and `deliveries_count` columns.
2025-01-24 09:25:14 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 09:25:14 - root - INFO - SQL:
SELECT
    d.driver_id,
    substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1) AS delivery_date,
    COUNT(*) AS deliveries_count
FROM "deliveries" AS d
JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
GROUP BY d.driver_id, delivery_date
LIMIT 100;
Results:
driver_id,delivery_date,deliveries_count
,1/1/2021,1
,1/10/2021,1
,1/11/2021,6
,1/12/2021,3
,1/14/2021,3
,1/15/2021,5
,1/16/2021,3
,1/17/2021,3
,1/18/2021,1
,1/19/2021,4
,1/2/2021,4
,1/20/2021,2
,1/21/2021,2
,1/22/2021,2
,1/23/2021,6
,1/24/2021,2
,1/25/2021,3
,1/26/2021,1
,1/27/2021,7
,1/28/2021,10
,1/29/2021,7
,1/3/2021,4
,1/30/2021,4
,1/31/2021,4
,1/4/2021,4
,1/5/2021,3
,1/6/2021,4
,1/7/2021,2
,1/8/2021,2
,1/9/2021,5
,2/1/2021,6
,2/10/2021,13
,2/11/2021,6
,2/12/2021,10
,2/13/2021,6
,2/14/2021,4
,2/16/2021,7
,2/17/2021,9
,2/18/2021,4
,2/19/2021,9
,2/2/2021,3
,2/20/2021,6
,2/21/2021,9
,2/22/2021,4
,2/23/2021,3
,2/24/2021,3
,2/25/2021,6
,2/26/2021,10
,2/27/2021,13
,2/28/2021,4
,2/3/2021,12
,2/4/2021,6
,2/5/2021,2
,2/6/2021,10
,2/7/2021,11
,2/8/2021,8
,2/9/2021,7
,3/1/2021,3
,3/10/2021,7
,3/11/2021,2
,3/12/2021,3
,3/13/2021,7
,3/14/2021,3
,3/15/2021,26
,3/16/2021,13
,3/17/2021,8
,3/18/2021,9
,3/19/2021,7
,3/2/2021,3
,3/20/2021,23
,3/21/2021,6
,3/22/2021,38
,3/23/2021,39
,3/24/2021,7
,3/25/2021,11
,3/26/2021,14
,3/27/2021,16
,3/28/2021,8
,3/29/2021,5
,3/3/2021,8
,3/30/2021,5
,3/31/2021,11
,3/4/2021,12
,3/5/2021,4
,3/6/2021,8
,3/7/2021,3
,3/8/2021,6
,3/9/2021,4
,4/1/2021,12
,4/10/2021,5
,4/11/2021,5
,4/12/2021,8
,4/13/2021,6
,4/14/2021,12
,4/15/2021,16
,4/16/2021,13
,4/17/2021,6
,4/18/2021,6
,4/19/2021,14
,4/2/2021,8

2025-01-24 09:25:14 - root - INFO - SQL:
SELECT
        d.driver_id,
        COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1)) AS days_worked
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
    GROUP BY d.driver_id
    LIMIT 100
Results:
driver_id,days_worked
,121
138.0,6
140.0,17
143.0,1
148.0,21
165.0,2
172.0,6
174.0,16
187.0,6
196.0,27
202.0,12
210.0,1
217.0,20
224.0,1
228.0,6
245.0,3
298.0,6
301.0,2
303.0,5
313.0,19
319.0,2
340.0,1
343.0,9
344.0,5
345.0,11
356.0,11
357.0,11
358.0,27
366.0,29
367.0,21
372.0,6
378.0,32
379.0,1
380.0,17
387.0,18
388.0,1
390.0,2
407.0,4
409.0,26
410.0,4
414.0,1
415.0,2
425.0,10
426.0,5
430.0,36
446.0,1
448.0,28
454.0,10
456.0,10
457.0,1
458.0,11
459.0,5
463.0,2
464.0,17
466.0,1
474.0,6
488.0,4
491.0,25
494.0,41
508.0,5
509.0,1
510.0,3
511.0,5
512.0,4
526.0,34
532.0,2
539.0,2
545.0,9
546.0,2
564.0,4
574.0,2
581.0,16
583.0,6
596.0,14
598.0,44
599.0,2
619.0,4
620.0,1
622.0,2
625.0,1
626.0,5
627.0,48
632.0,7
633.0,3
639.0,44
642.0,14
651.0,1
653.0,6
655.0,2
664.0,1
711.0,1
713.0,22
726.0,11
730.0,1
731.0,2
738.0,1
749.0,8
754.0,15
758.0,18
759.0,13

2025-01-24 09:25:15 - root - INFO - SQL:
SELECT
        d.driver_id,
        COUNT(*) AS total_deliveries,
        COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1)) AS days_worked
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
    GROUP BY d.driver_id
    LIMIT 100
Results:
driver_id,total_deliveries,days_worked
,826,121
138.0,6,6
140.0,24,17
143.0,1,1
148.0,29,21
165.0,2,2
172.0,6,6
174.0,17,16
187.0,6,6
196.0,35,27
202.0,15,12
210.0,1,1
217.0,24,20
224.0,1,1
228.0,7,6
245.0,4,3
298.0,8,6
301.0,4,2
303.0,5,5
313.0,28,19
319.0,2,2
340.0,1,1
343.0,10,9
344.0,7,5
345.0,13,11
356.0,14,11
357.0,12,11
358.0,39,27
366.0,34,29
367.0,28,21
372.0,11,6
378.0,42,32
379.0,2,1
380.0,17,17
387.0,20,18
388.0,3,1
390.0,2,2
407.0,5,4
409.0,48,26
410.0,5,4
414.0,1,1
415.0,4,2
425.0,11,10
426.0,5,5
430.0,48,36
446.0,1,1
448.0,39,28
454.0,13,10
456.0,14,10
457.0,1,1
458.0,12,11
459.0,7,5
463.0,3,2
464.0,20,17
466.0,1,1
474.0,8,6
488.0,4,4
491.0,35,25
494.0,54,41
508.0,7,5
509.0,1,1
510.0,3,3
511.0,5,5
512.0,6,4
526.0,52,34
532.0,2,2
539.0,2,2
545.0,10,9
546.0,2,2
564.0,7,4
574.0,3,2
581.0,21,16
583.0,9,6
596.0,20,14
598.0,71,44
599.0,3,2
619.0,4,4
620.0,1,1
622.0,2,2
625.0,1,1
626.0,6,5
627.0,72,48
632.0,7,7
633.0,3,3
639.0,66,44
642.0,26,14
651.0,1,1
653.0,7,6
655.0,3,2
664.0,1,1
711.0,1,1
713.0,33,22
726.0,14,11
730.0,1,1
731.0,2,2
738.0,1,1
749.0,9,8
754.0,28,15
758.0,32,18
759.0,13,13

2025-01-24 09:25:15 - root - INFO - SQL:
SELECT
        d.driver_id,
        (CAST(COUNT(*) AS FLOAT) / COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1))) AS average_daily_deliveries
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
    GROUP BY d.driver_id
    LIMIT 100
Results:
driver_id,average_daily_deliveries
,6.8264462809917354
138.0,1.0
140.0,1.411764705882353
143.0,1.0
148.0,1.380952380952381
165.0,1.0
172.0,1.0
174.0,1.0625
187.0,1.0
196.0,1.2962962962962963
202.0,1.25
210.0,1.0
217.0,1.2
224.0,1.0
228.0,1.1666666666666667
245.0,1.3333333333333333
298.0,1.3333333333333333
301.0,2.0
303.0,1.0
313.0,1.4736842105263157
319.0,1.0
340.0,1.0
343.0,1.1111111111111112
344.0,1.4
345.0,1.1818181818181819
356.0,1.2727272727272727
357.0,1.0909090909090908
358.0,1.4444444444444444
366.0,1.1724137931034482
367.0,1.3333333333333333
372.0,1.8333333333333333
378.0,1.3125
379.0,2.0
380.0,1.0
387.0,1.1111111111111112
388.0,3.0
390.0,1.0
407.0,1.25
409.0,1.8461538461538463
410.0,1.25
414.0,1.0
415.0,2.0
425.0,1.1
426.0,1.0
430.0,1.3333333333333333
446.0,1.0
448.0,1.3928571428571428
454.0,1.3
456.0,1.4
457.0,1.0
458.0,1.0909090909090908
459.0,1.4
463.0,1.5
464.0,1.1764705882352942
466.0,1.0
474.0,1.3333333333333333
488.0,1.0
491.0,1.4
494.0,1.3170731707317074
508.0,1.4
509.0,1.0
510.0,1.0
511.0,1.0
512.0,1.5
526.0,1.5294117647058822
532.0,1.0
539.0,1.0
545.0,1.1111111111111112
546.0,1.0
564.0,1.75
574.0,1.5
581.0,1.3125
583.0,1.5
596.0,1.4285714285714286
598.0,1.6136363636363635
599.0,1.5
619.0,1.0
620.0,1.0
622.0,1.0
625.0,1.0
626.0,1.2
627.0,1.5
632.0,1.0
633.0,1.0
639.0,1.5
642.0,1.8571428571428572
651.0,1.0
653.0,1.1666666666666667
655.0,1.5
664.0,1.0
711.0,1.0
713.0,1.5
726.0,1.2727272727272727
730.0,1.0
731.0,1.0
738.0,1.0
749.0,1.125
754.0,1.8666666666666667
758.0,1.7777777777777777
759.0,1.0

2025-01-24 09:25:15 - root - INFO - SQL:
SELECT
        d.driver_id,
        (CAST(COUNT(*) AS FLOAT) / COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1))) AS average_daily_deliveries
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
    GROUP BY d.driver_id
    ORDER BY average_daily_deliveries DESC
    LIMIT 5
Results:
driver_id,average_daily_deliveries
,6.8264462809917354
874.0,4.5
29812.0,4.0
17643.0,4.0
33568.0,3.5

2025-01-24 09:25:20 - root - INFO - SQL:
SELECT
        dr.driver_id,
        dr.driver_modal,
        dr.driver_type,
        (CAST(COUNT(d.delivery_id) AS FLOAT) / COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1))) AS average_daily_deliveries
    FROM "drivers" AS dr
    JOIN "deliveries" AS d ON dr.driver_id = d.driver_id
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
    GROUP BY dr.driver_id, dr.driver_modal, dr.driver_type
    LIMIT 100
Results:
driver_id,driver_modal,driver_type,average_daily_deliveries
138,MOTOBOY,FREELANCE,1.0
140,MOTOBOY,FREELANCE,1.411764705882353
143,BIKER,FREELANCE,1.0
148,MOTOBOY,FREELANCE,1.380952380952381
165,MOTOBOY,FREELANCE,1.0
172,MOTOBOY,FREELANCE,1.0
174,BIKER,FREELANCE,1.0625
187,BIKER,FREELANCE,1.0
196,BIKER,FREELANCE,1.2962962962962963
202,BIKER,FREELANCE,1.25
210,MOTOBOY,FREELANCE,1.0
217,MOTOBOY,LOGISTIC OPERATOR,1.2
224,BIKER,FREELANCE,1.0
228,MOTOBOY,FREELANCE,1.1666666666666667
245,MOTOBOY,FREELANCE,1.3333333333333333
298,MOTOBOY,LOGISTIC OPERATOR,1.3333333333333333
301,MOTOBOY,LOGISTIC OPERATOR,2.0
303,MOTOBOY,LOGISTIC OPERATOR,1.0
313,MOTOBOY,LOGISTIC OPERATOR,1.4736842105263157
319,MOTOBOY,FREELANCE,1.0
340,MOTOBOY,FREELANCE,1.0
343,BIKER,FREELANCE,1.1111111111111112
344,BIKER,FREELANCE,1.4
345,MOTOBOY,FREELANCE,1.1818181818181819
356,MOTOBOY,LOGISTIC OPERATOR,1.2727272727272727
357,MOTOBOY,LOGISTIC OPERATOR,1.0909090909090908
358,MOTOBOY,LOGISTIC OPERATOR,1.4444444444444444
366,MOTOBOY,FREELANCE,1.1724137931034482
367,MOTOBOY,LOGISTIC OPERATOR,1.3333333333333333
372,MOTOBOY,FREELANCE,1.8333333333333333
378,MOTOBOY,FREELANCE,1.3125
379,MOTOBOY,LOGISTIC OPERATOR,2.0
380,MOTOBOY,LOGISTIC OPERATOR,1.0
387,MOTOBOY,LOGISTIC OPERATOR,1.1111111111111112
388,MOTOBOY,LOGISTIC OPERATOR,3.0
390,MOTOBOY,FREELANCE,1.0
407,BIKER,FREELANCE,1.25
409,MOTOBOY,FREELANCE,1.8461538461538463
410,BIKER,FREELANCE,1.25
414,BIKER,FREELANCE,1.0
415,BIKER,FREELANCE,2.0
425,BIKER,FREELANCE,1.1
426,BIKER,FREELANCE,1.0
430,BIKER,FREELANCE,1.3333333333333333
446,MOTOBOY,FREELANCE,1.0
448,MOTOBOY,FREELANCE,1.3928571428571428
454,MOTOBOY,FREELANCE,1.3
456,MOTOBOY,FREELANCE,1.4
457,MOTOBOY,FREELANCE,1.0
458,MOTOBOY,FREELANCE,1.0909090909090908
459,MOTOBOY,FREELANCE,1.4
463,MOTOBOY,LOGISTIC OPERATOR,1.5
464,MOTOBOY,LOGISTIC OPERATOR,1.1764705882352942
466,MOTOBOY,FREELANCE,1.0
474,MOTOBOY,FREELANCE,1.3333333333333333
488,MOTOBOY,FREELANCE,1.0
491,MOTOBOY,LOGISTIC OPERATOR,1.4
494,MOTOBOY,LOGISTIC OPERATOR,1.3170731707317074
508,MOTOBOY,FREELANCE,1.4
509,MOTOBOY,FREELANCE,1.0
510,MOTOBOY,FREELANCE,1.0
511,MOTOBOY,LOGISTIC OPERATOR,1.0
512,MOTOBOY,FREELANCE,1.5
526,MOTOBOY,LOGISTIC OPERATOR,1.5294117647058822
532,BIKER,FREELANCE,1.0
539,MOTOBOY,FREELANCE,1.0
545,MOTOBOY,LOGISTIC OPERATOR,1.1111111111111112
546,MOTOBOY,LOGISTIC OPERATOR,1.0
564,MOTOBOY,LOGISTIC OPERATOR,1.75
574,MOTOBOY,LOGISTIC OPERATOR,1.5
581,MOTOBOY,FREELANCE,1.3125
583,BIKER,FREELANCE,1.5
596,MOTOBOY,FREELANCE,1.4285714285714286
598,MOTOBOY,LOGISTIC OPERATOR,1.6136363636363635
599,MOTOBOY,FREELANCE,1.5
619,MOTOBOY,FREELANCE,1.0
620,MOTOBOY,LOGISTIC OPERATOR,1.0
622,MOTOBOY,LOGISTIC OPERATOR,1.0
625,MOTOBOY,LOGISTIC OPERATOR,1.0
626,MOTOBOY,LOGISTIC OPERATOR,1.2
627,MOTOBOY,LOGISTIC OPERATOR,1.5
632,BIKER,FREELANCE,1.0
633,BIKER,FREELANCE,1.0
639,MOTOBOY,LOGISTIC OPERATOR,1.5
642,MOTOBOY,FREELANCE,1.8571428571428572
651,MOTOBOY,LOGISTIC OPERATOR,1.0
653,MOTOBOY,LOGISTIC OPERATOR,1.1666666666666667
655,MOTOBOY,LOGISTIC OPERATOR,1.5
664,MOTOBOY,LOGISTIC OPERATOR,1.0
711,MOTOBOY,LOGISTIC OPERATOR,1.0
713,MOTOBOY,FREELANCE,1.5
726,BIKER,FREELANCE,1.2727272727272727
730,MOTOBOY,LOGISTIC OPERATOR,1.0
731,MOTOBOY,FREELANCE,1.0
738,MOTOBOY,FREELANCE,1.0
749,MOTOBOY,LOGISTIC OPERATOR,1.125
754,MOTOBOY,LOGISTIC OPERATOR,1.8666666666666667
758,MOTOBOY,FREELANCE,1.7777777777777777
759,MOTOBOY,FREELANCE,1.0
760,MOTOBOY,FREELANCE,1.4814814814814814

2025-01-24 09:25:20 - root - INFO - SQL:
SELECT
        d.driver_id,
        COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1)) AS days_active
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
    GROUP BY d.driver_id
    ORDER BY days_active DESC
    LIMIT 100
Results:
driver_id,days_active
,121
11522.0,69
902.0,61
4536.0,60
30449.0,54
3780.0,51
627.0,48
15086.0,47
2156.0,47
26223.0,46
18715.0,46
15561.0,46
38926.0,45
5171.0,45
794.0,45
14805.0,44
2354.0,44
639.0,44
598.0,44
26879.0,43
11171.0,43
10294.0,43
10019.0,43
4737.0,42
33044.0,41
27711.0,41
9806.0,41
7615.0,41
7549.0,41
975.0,41
494.0,41
28598.0,40
27050.0,39
12620.0,39
25989.0,38
14433.0,38
9391.0,38
5403.0,38
1301.0,38
34079.0,37
31999.0,37
26332.0,37
20121.0,37
29533.0,36
20495.0,36
430.0,36
38928.0,35
32130.0,35
26511.0,34
17035.0,34
14059.0,34
1855.0,34
526.0,34
43323.0,33
41924.0,33
20248.0,33
10293.0,33
39789.0,32
34729.0,32
31050.0,32
29865.0,32
25592.0,32
13074.0,32
7799.0,32
378.0,32
15231.0,31
10560.0,31
2519.0,31
40908.0,30
32109.0,30
31639.0,30
23219.0,30
18748.0,30
14666.0,30
12975.0,30
7773.0,30
5250.0,30
29966.0,29
19928.0,29
10927.0,29
9043.0,29
5528.0,29
366.0,29
36257.0,28
21923.0,28
10292.0,28
448.0,28
36132.0,27
33556.0,27
33349.0,27
32241.0,27
26520.0,27
21154.0,27
14509.0,27
8133.0,27
2836.0,27
789.0,27
760.0,27
358.0,27
196.0,27

2025-01-24 09:25:21 - root - INFO - SQL:
SELECT
        driver_id,
        delivery_month,
        AVG(daily_deliveries) AS average_monthly_deliveries
    FROM (
        SELECT
            d.driver_id,
            substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1) AS delivery_date,
            CASE
                WHEN instr(o.order_moment_delivered, '/') = 2 THEN substr(o.order_moment_delivered, 1, 1)
                WHEN instr(o.order_moment_delivered, '/') = 3 THEN substr(o.order_moment_delivered, 1, 2)
                ELSE NULL
            END AS delivery_month,
            COUNT(*) AS daily_deliveries
        FROM "deliveries" AS d
        JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
        WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
        GROUP BY d.driver_id, delivery_date
    ) AS daily_stats
    WHERE delivery_month IS NOT NULL
    GROUP BY driver_id, delivery_month
    LIMIT 100
Results:
driver_id,delivery_month,average_monthly_deliveries
,1,3.6
,2,7.074074074074074
,3,10.290322580645162
,4,6.8
,5,1.3333333333333333
138.0,1,1.0
138.0,2,1.0
140.0,1,1.0
140.0,2,2.0
140.0,3,1.1666666666666667
140.0,4,1.5714285714285714
143.0,1,1.0
148.0,1,1.4166666666666667
148.0,2,1.25
148.0,3,1.5
148.0,4,1.0
165.0,4,1.0
172.0,4,1.0
174.0,1,1.0
174.0,2,1.0
174.0,3,1.0
174.0,4,1.1666666666666667
187.0,2,1.0
187.0,3,1.0
187.0,4,1.0
196.0,1,1.5
196.0,2,1.0
196.0,3,1.5555555555555556
196.0,4,1.1428571428571428
196.0,5,1.0
202.0,1,1.4
202.0,2,1.0
202.0,3,1.5
202.0,4,1.0
210.0,1,1.0
217.0,1,1.2727272727272727
217.0,2,1.125
217.0,4,1.0
224.0,3,1.0
228.0,1,1.1666666666666667
245.0,1,2.0
245.0,2,1.0
245.0,3,1.0
298.0,1,1.4
298.0,3,1.0
301.0,3,3.0
301.0,4,1.0
303.0,1,1.0
303.0,2,1.0
313.0,1,1.8181818181818181
313.0,2,1.0
313.0,3,1.0
319.0,1,1.0
340.0,4,1.0
343.0,1,1.1666666666666667
343.0,2,1.0
344.0,1,1.0
344.0,2,3.0
345.0,2,1.0
345.0,3,1.3333333333333333
345.0,4,1.0
356.0,1,1.25
356.0,2,1.3333333333333333
357.0,1,1.0
357.0,2,1.2
357.0,3,1.0
358.0,1,1.4285714285714286
358.0,2,1.3333333333333333
358.0,3,1.5454545454545454
366.0,1,1.3333333333333333
366.0,2,1.1666666666666667
366.0,3,1.0
366.0,4,1.125
367.0,1,1.1111111111111112
367.0,2,2.0
367.0,3,1.3333333333333333
367.0,4,1.2
372.0,3,1.8333333333333333
378.0,1,1.0625
378.0,2,1.6666666666666667
378.0,3,1.0
378.0,4,1.8333333333333333
379.0,2,2.0
380.0,1,1.0
380.0,2,1.0
380.0,3,1.0
380.0,4,1.0
387.0,1,1.0
387.0,2,1.2222222222222223
387.0,3,1.0
388.0,3,3.0
390.0,4,1.0
407.0,1,1.0
407.0,2,1.5
407.0,4,1.0
409.0,1,1.1428571428571428
409.0,2,1.8
409.0,3,2.2142857142857144
410.0,1,1.25
414.0,2,1.0

2025-01-24 09:25:21 - root - INFO - SQL:
SELECT
        driver_id,
        COUNT(*) AS total_deliveries
    FROM "deliveries"
    WHERE driver_id IS NOT NULL
    GROUP BY driver_id
    ORDER BY total_deliveries DESC
    LIMIT 5
Results:
driver_id,total_deliveries
25651,10912
26223,8576
17457,930
11063,905
7615,896

2025-01-24 09:25:23 - root - INFO - SQL:
SELECT
        dr.driver_id,
        dr.driver_modal,
        dr.driver_type
    FROM "drivers" AS dr
    LEFT JOIN "deliveries" AS d ON dr.driver_id = d.driver_id
    WHERE d.driver_id IS NULL AND dr.driver_id IS NOT NULL
    LIMIT 100
Results:
driver_id,driver_modal,driver_type
4172,MOTOBOY,FREELANCE
4201,MOTOBOY,FREELANCE
4302,MOTOBOY,FREELANCE
4517,MOTOBOY,FREELANCE
4651,MOTOBOY,FREELANCE
4816,MOTOBOY,FREELANCE
4823,MOTOBOY,FREELANCE
4840,MOTOBOY,FREELANCE
5339,MOTOBOY,FREELANCE
5581,MOTOBOY,FREELANCE
5643,MOTOBOY,FREELANCE
5972,MOTOBOY,FREELANCE
7967,MOTOBOY,FREELANCE
8672,MOTOBOY,FREELANCE
9244,MOTOBOY,FREELANCE
9560,MOTOBOY,FREELANCE
9724,MOTOBOY,FREELANCE
10042,MOTOBOY,FREELANCE
10047,MOTOBOY,FREELANCE
10194,MOTOBOY,FREELANCE
10214,MOTOBOY,FREELANCE
10225,MOTOBOY,FREELANCE
10242,MOTOBOY,FREELANCE
10297,MOTOBOY,FREELANCE
10337,BIKER,FREELANCE
10379,MOTOBOY,FREELANCE
10381,MOTOBOY,FREELANCE
10382,MOTOBOY,FREELANCE
10397,MOTOBOY,FREELANCE
10654,MOTOBOY,FREELANCE
10998,MOTOBOY,FREELANCE
11114,MOTOBOY,FREELANCE
11419,MOTOBOY,FREELANCE
11806,BIKER,FREELANCE
11928,MOTOBOY,FREELANCE
12117,MOTOBOY,FREELANCE
12639,MOTOBOY,FREELANCE
12695,MOTOBOY,FREELANCE
13162,MOTOBOY,FREELANCE
13351,MOTOBOY,FREELANCE
13758,MOTOBOY,FREELANCE
15249,MOTOBOY,FREELANCE
15816,MOTOBOY,FREELANCE
15832,MOTOBOY,FREELANCE
16626,MOTOBOY,FREELANCE
17511,MOTOBOY,FREELANCE
18687,MOTOBOY,FREELANCE
18910,MOTOBOY,FREELANCE
20772,MOTOBOY,FREELANCE
22566,MOTOBOY,FREELANCE
22693,MOTOBOY,FREELANCE
23458,MOTOBOY,FREELANCE
23488,MOTOBOY,FREELANCE
24369,MOTOBOY,FREELANCE
24431,MOTOBOY,FREELANCE
25484,MOTOBOY,FREELANCE
25493,MOTOBOY,FREELANCE
25597,MOTOBOY,FREELANCE
25621,MOTOBOY,FREELANCE
25997,MOTOBOY,FREELANCE
26299,MOTOBOY,FREELANCE
26464,MOTOBOY,FREELANCE
26526,MOTOBOY,FREELANCE
26535,MOTOBOY,FREELANCE
26546,MOTOBOY,FREELANCE
26589,MOTOBOY,FREELANCE
26660,MOTOBOY,FREELANCE
26679,MOTOBOY,FREELANCE
26899,MOTOBOY,FREELANCE
26944,MOTOBOY,FREELANCE
26988,MOTOBOY,FREELANCE
27048,MOTOBOY,FREELANCE
27492,MOTOBOY,FREELANCE
27502,MOTOBOY,FREELANCE
27720,MOTOBOY,FREELANCE
27739,MOTOBOY,FREELANCE
27831,MOTOBOY,FREELANCE
27931,MOTOBOY,FREELANCE
28038,MOTOBOY,FREELANCE
28179,MOTOBOY,FREELANCE
28246,MOTOBOY,FREELANCE
28336,MOTOBOY,FREELANCE
28447,MOTOBOY,FREELANCE
28706,BIKER,FREELANCE
28906,MOTOBOY,FREELANCE
28939,MOTOBOY,FREELANCE
29016,MOTOBOY,FREELANCE
29082,MOTOBOY,FREELANCE
29398,MOTOBOY,FREELANCE
29449,MOTOBOY,FREELANCE
29462,MOTOBOY,FREELANCE
30762,MOTOBOY,FREELANCE
30786,MOTOBOY,FREELANCE
31067,BIKER,FREELANCE
32291,MOTOBOY,FREELANCE
32308,MOTOBOY,FREELANCE
34122,MOTOBOY,FREELANCE
34260,MOTOBOY,FREELANCE
34279,MOTOBOY,FREELANCE
34359,MOTOBOY,FREELANCE

2025-01-24 09:25:23 - root - INFO - itercount: 0
2025-01-24 09:25:23 - root - INFO - Table: channelsDDL:
CREATE TABLE channels (
        channel_id INTEGER PRIMARY KEY,
        channel_name VARCHAR(50),
        channel_type VARCHAR(50)
    )
Table: driversDDL:
CREATE TABLE drivers (
        driver_id INTEGER PRIMARY KEY,
        driver_modal VARCHAR(50),
        driver_type VARCHAR(50)
    )
Table: deliveriesDDL:
CREATE TABLE deliveries (
        delivery_id INTEGER PRIMARY KEY,
        delivery_order_id INTEGER,
        driver_id INTEGER NULL,
        delivery_distance_meters DECIMAL(10, 2),
        delivery_status VARCHAR(50)
    )
Table: hubsDDL:
CREATE TABLE hubs (
        hub_id INTEGER PRIMARY KEY,
        hub_name VARCHAR(50),
        hub_city VARCHAR(50),
        hub_state CHAR(2),
        hub_latitude DECIMAL(9, 6),
        hub_longitude DECIMAL(9, 6)
    )
Table: paymentsDDL:
CREATE TABLE payments (
        payment_id INTEGER PRIMARY KEY,
        payment_order_id INTEGER,
        payment_amount DECIMAL(10, 2),
        payment_fee DECIMAL(10, 2),
        payment_method VARCHAR(50),
        payment_status VARCHAR(50)
    )
Table: storesDDL:
CREATE TABLE stores (
        store_id INTEGER PRIMARY KEY,
        hub_id INTEGER,
        store_name VARCHAR(50),
        store_segment VARCHAR(50),
        store_plan_price DECIMAL(10, 2),
        store_latitude DECIMAL(9, 6),
        store_longitude DECIMAL(9, 6)
    )
Table: ordersDDL:
CREATE TABLE orders (
        order_id INTEGER PRIMARY KEY,
        store_id INTEGER,
        channel_id INTEGER,
        payment_order_id INTEGER,
        delivery_order_id INTEGER,
        order_status VARCHAR(50),
        order_amount DECIMAL(10, 2),
        order_delivery_fee DECIMAL(10, 2),
        order_delivery_cost DECIMAL(10, 2),
        order_created_hour INTEGER,
        order_created_minute INTEGER,
        order_created_day INTEGER,
        order_created_month INTEGER,
        order_created_year INTEGER,
        order_moment_created DATETIME,
        order_moment_accepted DATETIME,
        order_moment_ready DATETIME,
        order_moment_collected DATETIME,
        order_moment_in_expedition DATETIME,
        order_moment_delivering DATETIME,
        order_moment_delivered DATETIME,
        order_moment_finished DATETIME,
        order_metric_collected_time DECIMAL(10, 2),
        order_metric_paused_time DECIMAL(10, 2),
        order_metric_production_time DECIMAL(10, 2),
        order_metric_walking_time DECIMAL(10, 2),
        order_metric_expediton_speed_time DECIMAL(10, 2),
        order_metric_transit_time DECIMAL(10, 2),
        order_metric_cycle_time DECIMAL(10, 2)
    )
External knowledge that might be helpful: 
None
The table structure information is (table names): 
['channels', 'drivers', 'deliveries', 'hubs', 'payments', 'stores', 'orders']
Begin Exploring Related Columns
To find the 5 delivery drivers with the highest average number of daily deliveries, we need to consider the relevant tables, columns, and conditions. Here's the breakdown:

**Relevant Tables and Columns:**

- **`deliveries` table:**
  - `driver_id`: Identifies the driver for each delivery.
  - `delivery_order_id`: Links to the order associated with the delivery.

- **`orders` table:**
  - `delivery_order_id`: Used to join with the `deliveries` table.
  - `order_moment_delivered`: Contains the timestamp of when the order was delivered. We can extract the delivery date from this column.

**Potential Conditions:**

- **Join Condition:** We need to join the `deliveries` and `orders` tables on `delivery_order_id` to associate each delivery with its delivery time.
- **Date Extraction:** We will extract the date from `order_moment_delivered` to group deliveries by day.
- **Grouping:** Group the data by `driver_id` and delivery date to count the number of deliveries per driver per day.
- **Aggregation:** Calculate the average number of daily deliveries for each driver.
- **Ordering:** Order the results in descending order to find the drivers with the highest averages.

**SQLite SQL Queries (from simple to complex):**

1. **Retrieve distinct driver IDs from the deliveries table:**

    ```sql
    SELECT DISTINCT driver_id FROM "deliveries" LIMIT 100;
    ```

2. **List all deliveries with their driver IDs and delivery order IDs:**

    ```sql
    SELECT
        delivery_id,
        driver_id,
        delivery_order_id
    FROM "deliveries"
    LIMIT 100;
    ```

3. **Get all orders with their delivery order IDs and delivery timestamps:**

    ```sql
    SELECT
        order_id,
        delivery_order_id,
        order_moment_delivered
    FROM "orders"
    LIMIT 100;
    ```

4. **Join deliveries and orders to get driver IDs and delivery timestamps:**

    ```sql
    SELECT
        d.driver_id,
        o.order_moment_delivered
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    LIMIT 100;
    ```

5. **Extract the delivery date from the timestamp:**

    ```sql
    SELECT
        d.driver_id,
        date(o.order_moment_delivered) AS delivery_date
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    LIMIT 100;
    ```

6. **Count the number of deliveries per driver per day:**

    ```sql
    SELECT
        d.driver_id,
        date(o.order_moment_delivered) AS delivery_date,
        COUNT(*) AS deliveries_count
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    GROUP BY d.driver_id, date(o.order_moment_delivered)
    LIMIT 100;
    ```

7. **Calculate the total days each driver worked (made deliveries):**

    ```sql
    SELECT
        d.driver_id,
        COUNT(DISTINCT date(o.order_moment_delivered)) AS days_worked
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    GROUP BY d.driver_id
    LIMIT 100;
    ```

8. **Compute total deliveries and total days for each driver:**

    ```sql
    SELECT
        d.driver_id,
        COUNT(*) AS total_deliveries,
        COUNT(DISTINCT date(o.order_moment_delivered)) AS days_worked
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    GROUP BY d.driver_id
    LIMIT 100;
    ```

9. **Calculate the average daily deliveries for each driver:**

    ```sql
    SELECT
        d.driver_id,
        (CAST(COUNT(*) AS FLOAT) / COUNT(DISTINCT date(o.order_moment_delivered))) AS average_daily_deliveries
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    GROUP BY d.driver_id
    LIMIT 100;
    ```

10. **Find the top 5 drivers with the highest average daily deliveries:**

    ```sql
    SELECT
        d.driver_id,
        (CAST(COUNT(*) AS FLOAT) / COUNT(DISTINCT date(o.order_moment_delivered))) AS average_daily_deliveries
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    GROUP BY d.driver_id
    ORDER BY average_daily_deliveries DESC
    LIMIT 5;
    ```

11. **List driver details along with their average daily deliveries:**

    ```sql
    SELECT
        dr.driver_id,
        dr.driver_modal,
        dr.driver_type,
        (CAST(COUNT(d.delivery_id) AS FLOAT) / COUNT(DISTINCT date(o.order_moment_delivered))) AS average_daily_deliveries
    FROM "drivers" AS dr
    JOIN "deliveries" AS d ON dr.driver_id = d.driver_id
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    GROUP BY dr.driver_id, dr.driver_modal, dr.driver_type
    LIMIT 100;
    ```

12. **Find drivers who made deliveries on the most days:**

    ```sql
    SELECT
        d.driver_id,
        COUNT(DISTINCT date(o.order_moment_delivered)) AS days_active
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    GROUP BY d.driver_id
    ORDER BY days_active DESC
    LIMIT 100;
    ```

13. **Calculate the average number of deliveries per driver per month:**

    ```sql
    SELECT
        d.driver_id,
        strftime('%Y-%m', o.order_moment_delivered) AS delivery_month,
        AVG(daily_deliveries) AS average_monthly_deliveries
    FROM (
        SELECT
            d.driver_id,
            date(o.order_moment_delivered) AS delivery_date,
            COUNT(*) AS daily_deliveries
        FROM "deliveries" AS d
        JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
        GROUP BY d.driver_id, delivery_date
    ) AS daily_stats
    GROUP BY d.driver_id, delivery_month
    LIMIT 100;
    ```

14. **Find the 5 drivers with the highest total deliveries:**

    ```sql
    SELECT
        driver_id,
        COUNT(*) AS total_deliveries
    FROM "deliveries"
    GROUP BY driver_id
    ORDER BY total_deliveries DESC
    LIMIT 5;
    ```

15. **Identify drivers who haven't made any deliveries:**

    ```sql
    SELECT
        dr.driver_id,
        dr.driver_modal,
        dr.driver_type
    FROM "drivers" AS dr
    LEFT JOIN "deliveries" AS d ON dr.driver_id = d.driver_id
    WHERE d.driver_id IS NULL
    LIMIT 100;
    ```

These queries help us understand the data and compute the necessary metrics to solve the task. The final query (number 10) directly addresses the task by finding the 5 drivers with the highest average number of daily deliveries.

**Note:** All queries are written in SQLite SQL format, using `LIMIT 100` where applicable, and do not use Common Table Expressions (CTEs).

---

**Task Result:**

Based on the above analysis, we find the 5 delivery drivers with the highest average number of daily deliveries as follows:

```csv
driver_id,average_daily_deliveries
driver_id1:int,average1:float
driver_id2:int,average2:float
driver_id3:int,average3:float
driver_id4:int,average4:float
driver_id5:int,average5:float
(Attention: answer in 5 rows)
```

This table lists the top 5 drivers (`driver_id`) along with their corresponding average number of deliveries per day (`average_daily_deliveries`).Query:
SELECT DISTINCT driver_id FROM "deliveries" LIMIT 100;
Answer:
driver_id
8378.0
2473.0
7615.0
10463.0
16430.0
14513.0
""
9996.0
23092.0
25575.0
9392.0
15156.0
29669.0
10514.0
7396.0
14702.0
26154.0
15561.0
15898.0
14059.0
12893.0
21923.0
4190.0
24830.0
9828.0
9043.0
23093.0
24584.0
358.0
12077.0
30854.0
8456.0
6165.0
25651.0
12023.0
2355.0
26075.0
5628.0
12136.0
17907.0
5250.0
9211.0
9025.0
15661.0
14382.0
726.0
30574.0
29966.0
5052.0
430.0
4937.0
938.0
22901.0
731.0
28171.0
8940.0
27294.0
10259.0
3834.0
512.0
8266.0
10614.0
29378.0
357.0
13043.0
1113.0
5623.0
24571.0
11466.0
17477.0
9509.0
26879.0
22260.0
6161.0
14511.0
6361.0
25798.0
17227.0
5128.0
2945.0
25409.0
425.0
888.0
10560.0
30030.0
26588.0
26052.0
6662.0
13527.0
8958.0
6656.0
174.0
2061.0
28169.0
510.0
28072.0
15061.0
7638.0
2837.0
29077.0
Query:
SELECT
        delivery_id,
        driver_id,
        delivery_order_id
    FROM "deliveries"
    LIMIT 100;
Answer:
delivery_id,driver_id,delivery_order_id
2174658,8378.0,68413340
2174660,2473.0,68414309
2174661,7615.0,68416230
2174663,8378.0,68412721
2174675,10463.0,68414018
2174680,16430.0,68415103
2174693,14513.0,68416643
2174695,,68417783
2174696,9996.0,68415457
2174697,23092.0,68414563
2174699,9996.0,68415140
2174705,9996.0,68416059
2174707,25575.0,68417307
2174708,9996.0,68416059
2174712,9392.0,68415947
2174713,15156.0,68416226
2174715,29669.0,68417646
2174720,10514.0,68416227
2174724,7396.0,68416397
2174729,14702.0,68418089
2174733,26154.0,68415344
2174734,26154.0,68415474
2174735,26154.0,68414512
2174737,15561.0,68418430
2174739,15898.0,68419302
2174743,14059.0,68419091
2174744,12893.0,68418711
2174749,21923.0,68419094
2174751,4190.0,68421547
2174754,24830.0,68419146
2174755,24830.0,68419684
2174756,9828.0,68420053
2174757,9043.0,68420869
2174759,23093.0,68421551
2174764,24584.0,68422045
2174765,358.0,68419140
2174767,12077.0,68420592
2174769,30854.0,68420589
2174771,8456.0,68417544
2174775,6165.0,68420308
2174790,25651.0,68422281
2174791,12023.0,68424656
2174792,2355.0,68422076
2174797,26075.0,68422614
2174799,5628.0,68419848
2174801,12136.0,68421987
2174803,17907.0,68417778
2174804,5250.0,68423847
2174805,9211.0,68422671
2174806,9025.0,68417799
2174808,15661.0,68422092
2174810,14382.0,68423162
2174813,10514.0,68417497
2174824,726.0,68419305
2174825,30574.0,68419373
2174829,29966.0,68424659
2174830,5052.0,68425021
2174831,30574.0,68424433
2174834,430.0,68419797
2174838,4937.0,68423762
2174839,938.0,68423643
2174840,22901.0,68418092
2174843,25651.0,68424216
2174845,,68424547
2174847,731.0,68426376
2174849,25651.0,68425058
2174850,28171.0,68427952
2174851,25651.0,68425821
2174852,8940.0,68423588
2174859,27294.0,68428840
2174862,10259.0,68426619
2174864,25651.0,68424858
2174865,25651.0,68426187
2174866,358.0,68426421
2174867,25651.0,68426427
2174876,3834.0,68430224
2174878,512.0,68429364
2174880,8266.0,68429550
2174882,10614.0,68428396
2174883,,68427057
2174884,29378.0,68428503
2174888,357.0,68426471
2174890,13043.0,68429631
2174891,1113.0,68426696
2174892,5623.0,68427588
2174893,24571.0,68424660
2174897,11466.0,68430182
2174898,1113.0,68427057
2174900,17477.0,68430452
2174901,9509.0,68430526
2174903,26879.0,68420776
2174904,357.0,68428457
2174905,23093.0,68430552
2174906,22260.0,68434112
2174910,6161.0,68430487
2174911,25651.0,68429530
2174912,14511.0,68415543
2174913,5628.0,68429881
2174917,10514.0,68421071
2174918,7396.0,68426262
Query:
SELECT
        order_id,
        delivery_order_id,
        order_moment_delivered
    FROM "orders"
    LIMIT 100;
Answer:
order_id,delivery_order_id,order_moment_delivered
68405119,68405119,
68405123,68405123,
68405206,68405206,
68405465,68405465,
68406064,68406064,
68408108,68408108,
68408109,68408109,
68409030,68409030,
68410055,68410055,
68412121,68412121,
68412122,68412122,
68412123,68412123,
68412131,68412131,
68412134,68412134,
68412148,68412148,
68412322,68412322,
68412444,68412444,
68412721,68412721,
68413340,68413340,
68414018,68414018,
68414309,68414309,
68414512,68414512,
68414563,68414563,
68414907,68414907,
68415103,68415103,
68415140,68415140,
68415344,68415344,
68415457,68415457,
68415474,68415474,
68415543,68415543,
68415947,68415947,
68416059,68416059,
68416226,68416226,
68416227,68416227,
68416230,68416230,
68416339,68416339,
68416397,68416397,
68416643,68416643,
68417189,68417189,
68417307,68417307,
68417497,68417497,
68417544,68417544,1/1/2021 4:22:19 PM
68417646,68417646,
68417778,68417778,
68417783,68417783,
68417787,68417787,
68417799,68417799,
68418089,68418089,
68418092,68418092,
68418430,68418430,
68418711,68418711,
68419091,68419091,
68419094,68419094,
68419140,68419140,
68419146,68419146,
68419302,68419302,
68419305,68419305,
68419373,68419373,
68419684,68419684,
68419797,68419797,
68419848,68419848,
68420053,68420053,
68420308,68420308,
68420589,68420589,
68420592,68420592,
68420776,68420776,
68420869,68420869,
68421071,68421071,
68421547,68421547,
68421551,68421551,
68421917,68421917,
68421987,68421987,
68422045,68422045,
68422076,68422076,
68422092,68422092,
68422281,68422281,
68422614,68422614,
68422671,68422671,1/1/2021 3:56:45 PM
68422740,68422740,
68423110,68423110,
68423162,68423162,
68423436,68423436,
68423588,68423588,
68423643,68423643,
68423762,68423762,
68423847,68423847,
68424216,68424216,
68424238,68424238,
68424433,68424433,
68424547,68424547,
68424656,68424656,
68424659,68424659,
68424660,68424660,
68424858,68424858,
68425021,68425021,
68425058,68425058,
68425821,68425821,
68426187,68426187,
68426262,68426262,
68426299,68426299,
Query:
SELECT
        d.driver_id,
        o.order_moment_delivered
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    LIMIT 100;
Answer:
driver_id,order_moment_delivered
8378.0,
2473.0,
7615.0,
8378.0,
10463.0,
16430.0,
14513.0,
,
9996.0,
23092.0,
9996.0,
9996.0,
25575.0,
9996.0,
9392.0,
15156.0,
29669.0,
10514.0,
7396.0,
14702.0,
26154.0,
26154.0,
26154.0,
15561.0,
15898.0,
14059.0,
12893.0,
21923.0,
4190.0,
24830.0,
24830.0,
9828.0,
9043.0,
23093.0,
24584.0,
358.0,
12077.0,
30854.0,
8456.0,1/1/2021 4:22:19 PM
6165.0,
25651.0,
12023.0,
2355.0,
26075.0,
5628.0,
12136.0,
17907.0,
5250.0,
9211.0,1/1/2021 3:56:45 PM
9025.0,
15661.0,
14382.0,
10514.0,
726.0,
30574.0,
29966.0,
5052.0,
30574.0,
430.0,
4937.0,
938.0,
22901.0,
25651.0,
,
731.0,
25651.0,
28171.0,
25651.0,
8940.0,
27294.0,
10259.0,
25651.0,
25651.0,
358.0,
25651.0,
3834.0,
512.0,
8266.0,
10614.0,
,
29378.0,
357.0,
13043.0,
1113.0,
5623.0,
24571.0,
11466.0,
1113.0,
17477.0,
9509.0,
26879.0,
357.0,
23093.0,
22260.0,
6161.0,
25651.0,
14511.0,
5628.0,
10514.0,
7396.0,
Query:
SELECT
    d.driver_id,
    (CAST(COUNT(*) AS FLOAT) / COUNT(DISTINCT date(o.order_moment_delivered))) AS average_daily_deliveries
FROM "deliveries" AS d
JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
WHERE o.order_moment_delivered IS NOT NULL
GROUP BY d.driver_id
ORDER BY average_daily_deliveries DESC
LIMIT 5;
Answer:
driver_id,average_daily_deliveries
66457,
66243,
66145,
66101,
66099,
Query:
SELECT
    d.driver_id,
    substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1) AS delivery_date,
    COUNT(*) AS deliveries_count
FROM "deliveries" AS d
JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
GROUP BY d.driver_id, delivery_date
LIMIT 100;
Answer:
driver_id,delivery_date,deliveries_count
,1/1/2021,1
,1/10/2021,1
,1/11/2021,6
,1/12/2021,3
,1/14/2021,3
,1/15/2021,5
,1/16/2021,3
,1/17/2021,3
,1/18/2021,1
,1/19/2021,4
,1/2/2021,4
,1/20/2021,2
,1/21/2021,2
,1/22/2021,2
,1/23/2021,6
,1/24/2021,2
,1/25/2021,3
,1/26/2021,1
,1/27/2021,7
,1/28/2021,10
,1/29/2021,7
,1/3/2021,4
,1/30/2021,4
,1/31/2021,4
,1/4/2021,4
,1/5/2021,3
,1/6/2021,4
,1/7/2021,2
,1/8/2021,2
,1/9/2021,5
,2/1/2021,6
,2/10/2021,13
,2/11/2021,6
,2/12/2021,10
,2/13/2021,6
,2/14/2021,4
,2/16/2021,7
,2/17/2021,9
,2/18/2021,4
,2/19/2021,9
,2/2/2021,3
,2/20/2021,6
,2/21/2021,9
,2/22/2021,4
,2/23/2021,3
,2/24/2021,3
,2/25/2021,6
,2/26/2021,10
,2/27/2021,13
,2/28/2021,4
,2/3/2021,12
,2/4/2021,6
,2/5/2021,2
,2/6/2021,10
,2/7/2021,11
,2/8/2021,8
,2/9/2021,7
,3/1/2021,3
,3/10/2021,7
,3/11/2021,2
,3/12/2021,3
,3/13/2021,7
,3/14/2021,3
,3/15/2021,26
,3/16/2021,13
,3/17/2021,8
,3/18/2021,9
,3/19/2021,7
,3/2/2021,3
,3/20/2021,23
,3/21/2021,6
,3/22/2021,38
,3/23/2021,39
,3/24/2021,7
,3/25/2021,11
,3/26/2021,14
,3/27/2021,16
,3/28/2021,8
,3/29/2021,5
,3/3/2021,8
,3/30/2021,5
,3/31/2021,11
,3/4/2021,12
,3/5/2021,4
,3/6/2021,8
,3/7/2021,3
,3/8/2021,6
,3/9/2021,4
,4/1/2021,12
,4/10/2021,5
,4/11/2021,5
,4/12/2021,8
,4/13/2021,6
,4/14/2021,12
,4/15/2021,16
,4/16/2021,13
,4/17/2021,6
,4/18/2021,6
,4/19/2021,14
,4/2/2021,8
Query:
SELECT
        d.driver_id,
        COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1)) AS days_worked
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
    GROUP BY d.driver_id
    LIMIT 100
Answer:
driver_id,days_worked
,121
138.0,6
140.0,17
143.0,1
148.0,21
165.0,2
172.0,6
174.0,16
187.0,6
196.0,27
202.0,12
210.0,1
217.0,20
224.0,1
228.0,6
245.0,3
298.0,6
301.0,2
303.0,5
313.0,19
319.0,2
340.0,1
343.0,9
344.0,5
345.0,11
356.0,11
357.0,11
358.0,27
366.0,29
367.0,21
372.0,6
378.0,32
379.0,1
380.0,17
387.0,18
388.0,1
390.0,2
407.0,4
409.0,26
410.0,4
414.0,1
415.0,2
425.0,10
426.0,5
430.0,36
446.0,1
448.0,28
454.0,10
456.0,10
457.0,1
458.0,11
459.0,5
463.0,2
464.0,17
466.0,1
474.0,6
488.0,4
491.0,25
494.0,41
508.0,5
509.0,1
510.0,3
511.0,5
512.0,4
526.0,34
532.0,2
539.0,2
545.0,9
546.0,2
564.0,4
574.0,2
581.0,16
583.0,6
596.0,14
598.0,44
599.0,2
619.0,4
620.0,1
622.0,2
625.0,1
626.0,5
627.0,48
632.0,7
633.0,3
639.0,44
642.0,14
651.0,1
653.0,6
655.0,2
664.0,1
711.0,1
713.0,22
726.0,11
730.0,1
731.0,2
738.0,1
749.0,8
754.0,15
758.0,18
759.0,13
Query:
SELECT
        d.driver_id,
        COUNT(*) AS total_deliveries,
        COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1)) AS days_worked
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
    GROUP BY d.driver_id
    LIMIT 100
Answer:
driver_id,total_deliveries,days_worked
,826,121
138.0,6,6
140.0,24,17
143.0,1,1
148.0,29,21
165.0,2,2
172.0,6,6
174.0,17,16
187.0,6,6
196.0,35,27
202.0,15,12
210.0,1,1
217.0,24,20
224.0,1,1
228.0,7,6
245.0,4,3
298.0,8,6
301.0,4,2
303.0,5,5
313.0,28,19
319.0,2,2
340.0,1,1
343.0,10,9
344.0,7,5
345.0,13,11
356.0,14,11
357.0,12,11
358.0,39,27
366.0,34,29
367.0,28,21
372.0,11,6
378.0,42,32
379.0,2,1
380.0,17,17
387.0,20,18
388.0,3,1
390.0,2,2
407.0,5,4
409.0,48,26
410.0,5,4
414.0,1,1
415.0,4,2
425.0,11,10
426.0,5,5
430.0,48,36
446.0,1,1
448.0,39,28
454.0,13,10
456.0,14,10
457.0,1,1
458.0,12,11
459.0,7,5
463.0,3,2
464.0,20,17
466.0,1,1
474.0,8,6
488.0,4,4
491.0,35,25
494.0,54,41
508.0,7,5
509.0,1,1
510.0,3,3
511.0,5,5
512.0,6,4
526.0,52,34
532.0,2,2
539.0,2,2
545.0,10,9
546.0,2,2
564.0,7,4
574.0,3,2
581.0,21,16
583.0,9,6
596.0,20,14
598.0,71,44
599.0,3,2
619.0,4,4
620.0,1,1
622.0,2,2
625.0,1,1
626.0,6,5
627.0,72,48
632.0,7,7
633.0,3,3
639.0,66,44
642.0,26,14
651.0,1,1
653.0,7,6
655.0,3,2
664.0,1,1
711.0,1,1
713.0,33,22
726.0,14,11
730.0,1,1
731.0,2,2
738.0,1,1
749.0,9,8
754.0,28,15
758.0,32,18
759.0,13,13
Query:
SELECT
        d.driver_id,
        (CAST(COUNT(*) AS FLOAT) / COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1))) AS average_daily_deliveries
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
    GROUP BY d.driver_id
    LIMIT 100
Answer:
driver_id,average_daily_deliveries
,6.8264462809917354
138.0,1.0
140.0,1.411764705882353
143.0,1.0
148.0,1.380952380952381
165.0,1.0
172.0,1.0
174.0,1.0625
187.0,1.0
196.0,1.2962962962962963
202.0,1.25
210.0,1.0
217.0,1.2
224.0,1.0
228.0,1.1666666666666667
245.0,1.3333333333333333
298.0,1.3333333333333333
301.0,2.0
303.0,1.0
313.0,1.4736842105263157
319.0,1.0
340.0,1.0
343.0,1.1111111111111112
344.0,1.4
345.0,1.1818181818181819
356.0,1.2727272727272727
357.0,1.0909090909090908
358.0,1.4444444444444444
366.0,1.1724137931034482
367.0,1.3333333333333333
372.0,1.8333333333333333
378.0,1.3125
379.0,2.0
380.0,1.0
387.0,1.1111111111111112
388.0,3.0
390.0,1.0
407.0,1.25
409.0,1.8461538461538463
410.0,1.25
414.0,1.0
415.0,2.0
425.0,1.1
426.0,1.0
430.0,1.3333333333333333
446.0,1.0
448.0,1.3928571428571428
454.0,1.3
456.0,1.4
457.0,1.0
458.0,1.0909090909090908
459.0,1.4
463.0,1.5
464.0,1.1764705882352942
466.0,1.0
474.0,1.3333333333333333
488.0,1.0
491.0,1.4
494.0,1.3170731707317074
508.0,1.4
509.0,1.0
510.0,1.0
511.0,1.0
512.0,1.5
526.0,1.5294117647058822
532.0,1.0
539.0,1.0
545.0,1.1111111111111112
546.0,1.0
564.0,1.75
574.0,1.5
581.0,1.3125
583.0,1.5
596.0,1.4285714285714286
598.0,1.6136363636363635
599.0,1.5
619.0,1.0
620.0,1.0
622.0,1.0
625.0,1.0
626.0,1.2
627.0,1.5
632.0,1.0
633.0,1.0
639.0,1.5
642.0,1.8571428571428572
651.0,1.0
653.0,1.1666666666666667
655.0,1.5
664.0,1.0
711.0,1.0
713.0,1.5
726.0,1.2727272727272727
730.0,1.0
731.0,1.0
738.0,1.0
749.0,1.125
754.0,1.8666666666666667
758.0,1.7777777777777777
759.0,1.0
Query:
SELECT
        d.driver_id,
        (CAST(COUNT(*) AS FLOAT) / COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1))) AS average_daily_deliveries
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
    GROUP BY d.driver_id
    ORDER BY average_daily_deliveries DESC
    LIMIT 5
Answer:
driver_id,average_daily_deliveries
,6.8264462809917354
874.0,4.5
29812.0,4.0
17643.0,4.0
33568.0,3.5
Query:
SELECT
        dr.driver_id,
        dr.driver_modal,
        dr.driver_type,
        (CAST(COUNT(d.delivery_id) AS FLOAT) / COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1))) AS average_daily_deliveries
    FROM "drivers" AS dr
    JOIN "deliveries" AS d ON dr.driver_id = d.driver_id
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
    GROUP BY dr.driver_id, dr.driver_modal, dr.driver_type
    LIMIT 100
Answer:
driver_id,driver_modal,driver_type,average_daily_deliveries
138,MOTOBOY,FREELANCE,1.0
140,MOTOBOY,FREELANCE,1.411764705882353
143,BIKER,FREELANCE,1.0
148,MOTOBOY,FREELANCE,1.380952380952381
165,MOTOBOY,FREELANCE,1.0
172,MOTOBOY,FREELANCE,1.0
174,BIKER,FREELANCE,1.0625
187,BIKER,FREELANCE,1.0
196,BIKER,FREELANCE,1.2962962962962963
202,BIKER,FREELANCE,1.25
210,MOTOBOY,FREELANCE,1.0
217,MOTOBOY,LOGISTIC OPERATOR,1.2
224,BIKER,FREELANCE,1.0
228,MOTOBOY,FREELANCE,1.1666666666666667
245,MOTOBOY,FREELANCE,1.3333333333333333
298,MOTOBOY,LOGISTIC OPERATOR,1.3333333333333333
301,MOTOBOY,LOGISTIC OPERATOR,2.0
303,MOTOBOY,LOGISTIC OPERATOR,1.0
313,MOTOBOY,LOGISTIC OPERATOR,1.4736842105263157
319,MOTOBOY,FREELANCE,1.0
340,MOTOBOY,FREELANCE,1.0
343,BIKER,FREELANCE,1.1111111111111112
344,BIKER,FREELANCE,1.4
345,MOTOBOY,FREELANCE,1.1818181818181819
356,MOTOBOY,LOGISTIC OPERATOR,1.2727272727272727
357,MOTOBOY,LOGISTIC OPERATOR,1.0909090909090908
358,MOTOBOY,LOGISTIC OPERATOR,1.4444444444444444
366,MOTOBOY,FREELANCE,1.1724137931034482
367,MOTOBOY,LOGISTIC OPERATOR,1.3333333333333333
372,MOTOBOY,FREELANCE,1.8333333333333333
378,MOTOBOY,FREELANCE,1.3125
379,MOTOBOY,LOGISTIC OPERATOR,2.0
380,MOTOBOY,LOGISTIC OPERATOR,1.0
387,MOTOBOY,LOGISTIC OPERATOR,1.1111111111111112
388,MOTOBOY,LOGISTIC OPERATOR,3.0
390,MOTOBOY,FREELANCE,1.0
407,BIKER,FREELANCE,1.25
409,MOTOBOY,FREELANCE,1.8461538461538463
410,BIKER,FREELANCE,1.25
414,BIKER,FREELANCE,1.0
415,BIKER,FREELANCE,2.0
425,BIKER,FREELANCE,1.1
426,BIKER,FREELANCE,1.0
430,BIKER,FREELANCE,1.3333333333333333
446,MOTOBOY,FREELANCE,1.0
448,MOTOBOY,FREELANCE,1.3928571428571428
454,MOTOBOY,FREELANCE,1.3
456,MOTOBOY,FREELANCE,1.4
457,MOTOBOY,FREELANCE,1.0
458,MOTOBOY,FREELANCE,1.0909090909090908
459,MOTOBOY,FREELANCE,1.4
463,MOTOBOY,LOGISTIC OPERATOR,1.5
464,MOTOBOY,LOGISTIC OPERATOR,1.1764705882352942
466,MOTOBOY,FREELANCE,1.0
474,MOTOBOY,FREELANCE,1.3333333333333333
488,MOTOBOY,FREELANCE,1.0
491,MOTOBOY,LOGISTIC OPERATOR,1.4
494,MOTOBOY,LOGISTIC OPERATOR,1.3170731707317074
508,MOTOBOY,FREELANCE,1.4
509,MOTOBOY,FREELANCE,1.0
510,MOTOBOY,FREELANCE,1.0
511,MOTOBOY,LOGISTIC OPERATOR,1.0
512,MOTOBOY,FREELANCE,1.5
526,MOTOBOY,LOGISTIC OPERATOR,1.5294117647058822
532,BIKER,FREELANCE,1.0
539,MOTOBOY,FREELANCE,1.0
545,MOTOBOY,LOGISTIC OPERATOR,1.1111111111111112
546,MOTOBOY,LOGISTIC OPERATOR,1.0
564,MOTOBOY,LOGISTIC OPERATOR,1.75
574,MOTOBOY,LOGISTIC OPERATOR,1.5
581,MOTOBOY,FREELANCE,1.3125
583,BIKER,FREELANCE,1.5
596,MOTOBOY,FREELANCE,1.4285714285714286
598,MOTOBOY,LOGISTIC OPERATOR,1.6136363636363635
599,MOTOBOY,FREELANCE,1.5
619,MOTOBOY,FREELANCE,1.0
620,MOTOBOY,LOGISTIC OPERATOR,1.0
622,MOTOBOY,LOGISTIC OPERATOR,1.0
625,MOTOBOY,LOGISTIC OPERATOR,1.0
626,MOTOBOY,LOGISTIC OPERATOR,1.2
627,MOTOBOY,LOGISTIC OPERATOR,1.5
632,BIKER,FREELANCE,1.0
633,BIKER,FREELANCE,1.0
639,MOTOBOY,LOGISTIC OPERATOR,1.5
642,MOTOBOY,FREELANCE,1.8571428571428572
651,MOTOBOY,LOGISTIC OPERATOR,1.0
653,MOTOBOY,LOGISTIC OPERATOR,1.1666666666666667
655,MOTOBOY,LOGISTIC OPERATOR,1.5
664,MOTOBOY,LOGISTIC OPERATOR,1.0
711,MOTOBOY,LOGISTIC OPERATOR,1.0
713,MOTOBOY,FREELANCE,1.5
726,BIKER,FREELANCE,1.2727272727272727
730,MOTOBOY,LOGISTIC OPERATOR,1.0
731,MOTOBOY,FREELANCE,1.0
738,MOTOBOY,FREELANCE,1.0
749,MOTOBOY,LOGISTIC OPERATOR,1.125
754,MOTOBOY,LOGISTIC OPERATOR,1.8666666666666667
758,MOTOBOY,FREELANCE,1.7777777777777777
759,MOTOBOY,FREELANCE,1.0
760,MOTOBOY,FREELANCE,1.4814814814814814
Query:
SELECT
        d.driver_id,
        COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1)) AS days_active
    FROM "deliveries" AS d
    JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
    WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
    GROUP BY d.driver_id
    ORDER BY days_active DESC
    LIMIT 100
Answer:
driver_id,days_active
,121
11522.0,69
902.0,61
4536.0,60
30449.0,54
3780.0,51
627.0,48
15086.0,47
2156.0,47
26223.0,46
18715.0,46
15561.0,46
38926.0,45
5171.0,45
794.0,45
14805.0,44
2354.0,44
639.0,44
598.0,44
26879.0,43
11171.0,43
10294.0,43
10019.0,43
4737.0,42
33044.0,41
27711.0,41
9806.0,41
7615.0,41
7549.0,41
975.0,41
494.0,41
28598.0,40
27050.0,39
12620.0,39
25989.0,38
14433.0,38
9391.0,38
5403.0,38
1301.0,38
34079.0,37
31999.0,37
26332.0,37
20121.0,37
29533.0,36
20495.0,36
430.0,36
38928.0,35
32130.0,35
26511.0,34
17035.0,34
14059.0,34
1855.0,34
526.0,34
43323.0,33
41924.0,33
20248.0,33
10293.0,33
39789.0,32
34729.0,32
31050.0,32
29865.0,32
25592.0,32
13074.0,32
7799.0,32
378.0,32
15231.0,31
10560.0,31
2519.0,31
40908.0,30
32109.0,30
31639.0,30
23219.0,30
18748.0,30
14666.0,30
12975.0,30
7773.0,30
5250.0,30
29966.0,29
19928.0,29
10927.0,29
9043.0,29
5528.0,29
366.0,29
36257.0,28
21923.0,28
10292.0,28
448.0,28
36132.0,27
33556.0,27
33349.0,27
32241.0,27
26520.0,27
21154.0,27
14509.0,27
8133.0,27
2836.0,27
789.0,27
760.0,27
358.0,27
196.0,27
Query:
SELECT
        driver_id,
        delivery_month,
        AVG(daily_deliveries) AS average_monthly_deliveries
    FROM (
        SELECT
            d.driver_id,
            substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1) AS delivery_date,
            CASE
                WHEN instr(o.order_moment_delivered, '/') = 2 THEN substr(o.order_moment_delivered, 1, 1)
                WHEN instr(o.order_moment_delivered, '/') = 3 THEN substr(o.order_moment_delivered, 1, 2)
                ELSE NULL
            END AS delivery_month,
            COUNT(*) AS daily_deliveries
        FROM "deliveries" AS d
        JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
        WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
        GROUP BY d.driver_id, delivery_date
    ) AS daily_stats
    WHERE delivery_month IS NOT NULL
    GROUP BY driver_id, delivery_month
    LIMIT 100
Answer:
driver_id,delivery_month,average_monthly_deliveries
,1,3.6
,2,7.074074074074074
,3,10.290322580645162
,4,6.8
,5,1.3333333333333333
138.0,1,1.0
138.0,2,1.0
140.0,1,1.0
140.0,2,2.0
140.0,3,1.1666666666666667
140.0,4,1.5714285714285714
143.0,1,1.0
148.0,1,1.4166666666666667
148.0,2,1.25
148.0,3,1.5
148.0,4,1.0
165.0,4,1.0
172.0,4,1.0
174.0,1,1.0
174.0,2,1.0
174.0,3,1.0
174.0,4,1.1666666666666667
187.0,2,1.0
187.0,3,1.0
187.0,4,1.0
196.0,1,1.5
196.0,2,1.0
196.0,3,1.5555555555555556
196.0,4,1.1428571428571428
196.0,5,1.0
202.0,1,1.4
202.0,2,1.0
202.0,3,1.5
202.0,4,1.0
210.0,1,1.0
217.0,1,1.2727272727272727
217.0,2,1.125
217.0,4,1.0
224.0,3,1.0
228.0,1,1.1666666666666667
245.0,1,2.0
245.0,2,1.0
245.0,3,1.0
298.0,1,1.4
298.0,3,1.0
301.0,3,3.0
301.0,4,1.0
303.0,1,1.0
303.0,2,1.0
313.0,1,1.8181818181818181
313.0,2,1.0
313.0,3,1.0
319.0,1,1.0
340.0,4,1.0
343.0,1,1.1666666666666667
343.0,2,1.0
344.0,1,1.0
344.0,2,3.0
345.0,2,1.0
345.0,3,1.3333333333333333
345.0,4,1.0
356.0,1,1.25
356.0,2,1.3333333333333333
357.0,1,1.0
357.0,2,1.2
357.0,3,1.0
358.0,1,1.4285714285714286
358.0,2,1.3333333333333333
358.0,3,1.5454545454545454
366.0,1,1.3333333333333333
366.0,2,1.1666666666666667
366.0,3,1.0
366.0,4,1.125
367.0,1,1.1111111111111112
367.0,2,2.0
367.0,3,1.3333333333333333
367.0,4,1.2
372.0,3,1.8333333333333333
378.0,1,1.0625
378.0,2,1.6666666666666667
378.0,3,1.0
378.0,4,1.8333333333333333
379.0,2,2.0
380.0,1,1.0
380.0,2,1.0
380.0,3,1.0
380.0,4,1.0
387.0,1,1.0
387.0,2,1.2222222222222223
387.0,3,1.0
388.0,3,3.0
390.0,4,1.0
407.0,1,1.0
407.0,2,1.5
407.0,4,1.0
409.0,1,1.1428571428571428
409.0,2,1.8
409.0,3,2.2142857142857144
410.0,1,1.25
414.0,2,1.0
Query:
SELECT
        driver_id,
        COUNT(*) AS total_deliveries
    FROM "deliveries"
    WHERE driver_id IS NOT NULL
    GROUP BY driver_id
    ORDER BY total_deliveries DESC
    LIMIT 5
Answer:
driver_id,total_deliveries
25651,10912
26223,8576
17457,930
11063,905
7615,896
Query:
SELECT
        dr.driver_id,
        dr.driver_modal,
        dr.driver_type
    FROM "drivers" AS dr
    LEFT JOIN "deliveries" AS d ON dr.driver_id = d.driver_id
    WHERE d.driver_id IS NULL AND dr.driver_id IS NOT NULL
    LIMIT 100
Answer:
driver_id,driver_modal,driver_type
4172,MOTOBOY,FREELANCE
4201,MOTOBOY,FREELANCE
4302,MOTOBOY,FREELANCE
4517,MOTOBOY,FREELANCE
4651,MOTOBOY,FREELANCE
4816,MOTOBOY,FREELANCE
4823,MOTOBOY,FREELANCE
4840,MOTOBOY,FREELANCE
5339,MOTOBOY,FREELANCE
5581,MOTOBOY,FREELANCE
5643,MOTOBOY,FREELANCE
5972,MOTOBOY,FREELANCE
7967,MOTOBOY,FREELANCE
8672,MOTOBOY,FREELANCE
9244,MOTOBOY,FREELANCE
9560,MOTOBOY,FREELANCE
9724,MOTOBOY,FREELANCE
10042,MOTOBOY,FREELANCE
10047,MOTOBOY,FREELANCE
10194,MOTOBOY,FREELANCE
10214,MOTOBOY,FREELANCE
10225,MOTOBOY,FREELANCE
10242,MOTOBOY,FREELANCE
10297,MOTOBOY,FREELANCE
10337,BIKER,FREELANCE
10379,MOTOBOY,FREELANCE
10381,MOTOBOY,FREELANCE
10382,MOTOBOY,FREELANCE
10397,MOTOBOY,FREELANCE
10654,MOTOBOY,FREELANCE
10998,MOTOBOY,FREELANCE
11114,MOTOBOY,FREELANCE
11419,MOTOBOY,FREELANCE
11806,BIKER,FREELANCE
11928,MOTOBOY,FREELANCE
12117,MOTOBOY,FREELANCE
12639,MOTOBOY,FREELANCE
12695,MOTOBOY,FREELANCE
13162,MOTOBOY,FREELANCE
13351,MOTOBOY,FREELANCE
13758,MOTOBOY,FREELANCE
15249,MOTOBOY,FREELANCE
15816,MOTOBOY,FREELANCE
15832,MOTOBOY,FREELANCE
16626,MOTOBOY,FREELANCE
17511,MOTOBOY,FREELANCE
18687,MOTOBOY,FREELANCE
18910,MOTOBOY,FREELANCE
20772,MOTOBOY,FREELANCE
22566,MOTOBOY,FREELANCE
22693,MOTOBOY,FREELANCE
23458,MOTOBOY,FREELANCE
23488,MOTOBOY,FREELANCE
24369,MOTOBOY,FREELANCE
24431,MOTOBOY,FREELANCE
25484,MOTOBOY,FREELANCE
25493,MOTOBOY,FREELANCE
25597,MOTOBOY,FREELANCE
25621,MOTOBOY,FREELANCE
25997,MOTOBOY,FREELANCE
26299,MOTOBOY,FREELANCE
26464,MOTOBOY,FREELANCE
26526,MOTOBOY,FREELANCE
26535,MOTOBOY,FREELANCE
26546,MOTOBOY,FREELANCE
26589,MOTOBOY,FREELANCE
26660,MOTOBOY,FREELANCE
26679,MOTOBOY,FREELANCE
26899,MOTOBOY,FREELANCE
26944,MOTOBOY,FREELANCE
26988,MOTOBOY,FREELANCE
27048,MOTOBOY,FREELANCE
27492,MOTOBOY,FREELANCE
27502,MOTOBOY,FREELANCE
27720,MOTOBOY,FREELANCE
27739,MOTOBOY,FREELANCE
27831,MOTOBOY,FREELANCE
27931,MOTOBOY,FREELANCE
28038,MOTOBOY,FREELANCE
28179,MOTOBOY,FREELANCE
28246,MOTOBOY,FREELANCE
28336,MOTOBOY,FREELANCE
28447,MOTOBOY,FREELANCE
28706,BIKER,FREELANCE
28906,MOTOBOY,FREELANCE
28939,MOTOBOY,FREELANCE
29016,MOTOBOY,FREELANCE
29082,MOTOBOY,FREELANCE
29398,MOTOBOY,FREELANCE
29449,MOTOBOY,FREELANCE
29462,MOTOBOY,FREELANCE
30762,MOTOBOY,FREELANCE
30786,MOTOBOY,FREELANCE
31067,BIKER,FREELANCE
32291,MOTOBOY,FREELANCE
32308,MOTOBOY,FREELANCE
34122,MOTOBOY,FREELANCE
34260,MOTOBOY,FREELANCE
34279,MOTOBOY,FREELANCE
34359,MOTOBOY,FREELANCE
End Exploring Related Columns
Task: Can you find 5 delivery drivers with the highest average number of daily deliveries?

Please answer only one complete SQL in sqlite dialect in ```sql``` format.
Usage example: ```sql
SELECT DISTINCT "column_name" FROM "table_name" WHERE ... ``` (Replace "table_name" with the actual table name. Enclose table and column names with double quotations if they contain special characters or match reserved keywords.)
Follow the answer format like: To find the 5 delivery drivers with the highest average number of daily deliveries, we can analyze the `deliveries` table, grouping by `driver_id` and calculating the average daily deliveries for each driver. Below is the requested data in CSV format:

```csv
driver_id,average_daily_deliveries
driver_id1:int,average1:float
driver_id2:int,average2:float
driver_id3:int,average3:float
driver_id4:int,average4:float
driver_id5:int,average5:float
(Attention: answer in 5 rows)
```

This table lists the top 5 drivers (`driver_id`) along with their corresponding average number of deliveries per day (`average_daily_deliveries`)..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: 

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-24 09:25:43 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 09:25:43 - root - INFO - To find the 5 delivery drivers with the highest average number of daily deliveries, we can use the following SQL query:

```sql
SELECT
    d.driver_id,
    (CAST(COUNT(*) AS FLOAT) / COUNT(DISTINCT substr(o.order_moment_delivered, 1, instr(o.order_moment_delivered, ' ') - 1))) AS average_daily_deliveries
FROM "deliveries" AS d
JOIN "orders" AS o ON d.delivery_order_id = o.delivery_order_id
WHERE o.order_moment_delivered IS NOT NULL AND o.order_moment_delivered != ''
GROUP BY d.driver_id
ORDER BY average_daily_deliveries DESC
LIMIT 5;
```
2025-01-24 09:25:43 - root - INFO - itercount: 1
2025-01-24 09:25:43 - root - INFO - 0
