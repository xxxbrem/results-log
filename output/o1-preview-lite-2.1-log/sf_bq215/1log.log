2025-01-24 01:49:25 - openai._base_client - INFO - Retrying request to /chat/completions in 0.393942 seconds
2025-01-24 01:50:35 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 01:50:35 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:50:35 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:50:35 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:50:37 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 01:50:37 - snowflake.connector.connection - INFO - closed
2025-01-24 01:50:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:50:38 - root - INFO - SQL:
SELECT "publication_number", "country_code", "kind_code", "grant_date"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 100;
Results:
publication_number,country_code,kind_code,grant_date
CR-5634-A,CR,A,0
CR-5990-A,CR,A,0
FI-429-A,FI,A,0
HK-6083-A,HK,A,0
HU-T52763-A,HU,A,0
JP-H03206829-A,JP,A,0
JP-S62159089-A,JP,A,0
US-416-A,US,A,18370928
US-2528225-A,US,A,19501031
AT-A41580-A,AT,A,0
AT-A47682-A,AT,A,0
AT-A63682-A,AT,A,0
CA-920790-A,CA,A,19730213
CA-950907-A,CA,A,19740709
CA-920830-A,CA,A,19730213
CA-9086-A,CA,A,18780805
CH-3256-A,CH,A,0
CH-540255-A,CH,A,0
CH-433637-A,CH,A,0
CH-8494-A,CH,A,0
CH-9587-A,CH,A,0
CH-9968-A,CH,A,0
DD-8297-A,DD,A,0
FR-1334211-A,FR,A,19630802
FR-1444995-A,FR,A,19660708
FR-1474468-A,FR,A,19670324
FR-1478988-A,FR,A,19670428
FR-1485992-A,FR,A,19670623
FR-1487706-A,FR,A,19670707
FR-1508237-A,FR,A,19680105
GB-893001-A,GB,A,0
GB-873984-A,GB,A,0
GB-307790-A,GB,A,0
GB-534192-A,GB,A,0
HK-39487-A,HK,A,0
HK-52284-A,HK,A,0
HK-55992-A,HK,A,0
HK-60178-A,HK,A,0
HK-82486-A,HK,A,0
HU-T58725-A,HU,A,0
JP-S62157892-A,JP,A,0
JP-H06198910-A,JP,A,0
MA-42286-A,MA,A,0
OA-07542-A,OA,A,0
OA-08399-A,OA,A,0
PH-11723-A,PH,A,0
PH-15213-A,PH,A,0
PH-17928-A,PH,A,0
PH-23905-A,PH,A,0
TR-26506-A,TR,A,0
US-4613-A,US,A,18460702
US-4234270-A,US,A,19801118
US-6310-A,US,A,18490410
US-8947-A,US,A,18520511
YU-24971-A,YU,A,0
YU-51397-A,YU,A,0
YU-53588-A,YU,A,0
YU-94082-A,YU,A,0
AT-A134275-A,AT,A,0
AT-A160683-A,AT,A,0
AT-A168281-A,AT,A,0
AT-A179178-A,AT,A,0
AT-A196182-A,AT,A,0
AT-A202882-A,AT,A,0
AT-A205780-A,AT,A,0
AT-A245590-A,AT,A,0
AT-A250686-A,AT,A,0
AT-A269985-A,AT,A,0
AT-A272073-A,AT,A,0
AT-A312885-A,AT,A,0
AT-A404675-A,AT,A,0
AT-A482077-A,AT,A,0
AT-A519575-A,AT,A,0
AT-A710279-A,AT,A,0
AT-A735378-A,AT,A,0
AT-A876472-A,AT,A,0
AT-A906278-A,AT,A,0
BE-804534-A,BE,A,0
BE-806687-A,BE,A,0
BE-813367-A,BE,A,0
BE-823416-A,BE,A,0
BE-825816-A,BE,A,0
BE-833811-A,BE,A,0
BE-837312-A,BE,A,0
BE-837857-A,BE,A,0
BE-840231-A,BE,A,0
BE-848755-A,BE,A,0
BE-852837-A,BE,A,0
BE-853553-A,BE,A,0
BE-857395-A,BE,A,0
BE-861199-A,BE,A,0
BE-866723-A,BE,A,0
BE-868080-A,BE,A,0
BE-868938-A,BE,A,0
BE-869056-A,BE,A,0
BE-871421-A,BE,A,0
BE-873394-A,BE,A,0
BE-877768-A,BE,A,0
BE-885287-A,BE,A,0
BE-509322-A,BE,A,0

2025-01-24 01:50:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:50:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:50:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:50:39 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 01:50:39 - snowflake.connector.connection - INFO - closed
2025-01-24 01:50:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:50:40 - root - INFO - SQL:
SELECT "publication_number", "country_code", "kind_code", "grant_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' 
  AND "kind_code" = 'B2' 
  AND "grant_date" BETWEEN 20150101 AND 20181231
LIMIT 100;
Results:
publication_number,country_code,kind_code,grant_date
US-9096672-B2,US,B2,20150804
US-8975572-B2,US,B2,20150310
US-9345037-B2,US,B2,20160517
US-9416401-B2,US,B2,20160816
US-8968078-B2,US,B2,20150303
US-9297098-B2,US,B2,20160329
US-9311616-B2,US,B2,20160412
US-8938935-B2,US,B2,20150127
US-9208058-B2,US,B2,20151208
US-10164231-B2,US,B2,20181225
US-9144453-B2,US,B2,20150929
US-9240539-B2,US,B2,20160119
US-9084092-B2,US,B2,20150714
US-9178555-B2,US,B2,20151103
US-9241979-B2,US,B2,20160126
US-8992589-B2,US,B2,20150331
US-8976458-B2,US,B2,20150310
US-9589852-B2,US,B2,20170307
US-9275574-B2,US,B2,20160301
US-9143594-B2,US,B2,20150922
US-8997705-B2,US,B2,20150407
US-9293644-B2,US,B2,20160322
US-9048394-B2,US,B2,20150602
US-9558023-B2,US,B2,20170131
US-9259052-B2,US,B2,20160216
US-9088531-B2,US,B2,20150721
US-9365125-B2,US,B2,20160614
US-10052573-B2,US,B2,20180821
US-9266361-B2,US,B2,20160223
US-9376362-B2,US,B2,20160628
US-10059943-B2,US,B2,20180828
US-9502665-B2,US,B2,20161122
US-9534310-B2,US,B2,20170103
US-9442731-B2,US,B2,20160913
US-9190151-B2,US,B2,20151117
US-9376900-B2,US,B2,20160628
US-8984570-B2,US,B2,20150317
US-9212846-B2,US,B2,20151215
US-9088636-B2,US,B2,20150721
US-9608802-B2,US,B2,20170328
US-9432485-B2,US,B2,20160830
US-9217615-B2,US,B2,20151222
US-9301656-B2,US,B2,20160405
US-9162842-B2,US,B2,20151020
US-9300877-B2,US,B2,20160329
US-9179920-B2,US,B2,20151110
US-9633814-B2,US,B2,20170425
US-8977501-B2,US,B2,20150310
US-9401789-B2,US,B2,20160726
US-9332158-B2,US,B2,20160503
US-9577092-B2,US,B2,20170221
US-9474616-B2,US,B2,20161025
US-9189664-B2,US,B2,20151117
US-10087555-B2,US,B2,20181002
US-9275738-B2,US,B2,20160301
US-9434173-B2,US,B2,20160906
US-9439320-B2,US,B2,20160906
US-9643538-B2,US,B2,20170509
US-10155560-B2,US,B2,20181218
US-9554562-B2,US,B2,20170131
US-9528461-B2,US,B2,20161227
US-10082567-B2,US,B2,20180925
US-9564979-B2,US,B2,20170207
US-10011351-B2,US,B2,20180703
US-10027854-B2,US,B2,20180717
US-10011111-B2,US,B2,20180703
US-10119697-B2,US,B2,20181106
US-10134224-B2,US,B2,20181120
US-10059276-B2,US,B2,20180828
US-9126271-B2,US,B2,20150908
US-9086872-B2,US,B2,20150721
US-9358525-B2,US,B2,20160607
US-9393029-B2,US,B2,20160719
US-9089261-B2,US,B2,20150728
US-9334342-B2,US,B2,20160510
US-8951295-B2,US,B2,20150210
US-9440758-B2,US,B2,20160913
US-9167167-B2,US,B2,20151020
US-9150124-B2,US,B2,20151006
US-9428566-B2,US,B2,20160830
US-9457510-B2,US,B2,20161004
US-9033008-B2,US,B2,20150519
US-9378116-B2,US,B2,20160628
US-8957947-B2,US,B2,20150217
US-8975555-B2,US,B2,20150310
US-9362579-B2,US,B2,20160607
US-9015819-B2,US,B2,20150421
US-9171380-B2,US,B2,20151027
US-9182815-B2,US,B2,20151110
US-9156140-B2,US,B2,20151013
US-9277871-B2,US,B2,20160308
US-9007441-B2,US,B2,20150414
US-9026162-B2,US,B2,20150505
US-9086477-B2,US,B2,20150721
US-9296976-B2,US,B2,20160329
US-9240314-B2,US,B2,20160119
US-9208612-B2,US,B2,20151208
US-9486750-B2,US,B2,20161108
US-9402981-B2,US,B2,20160802
US-9058646-B2,US,B2,20150616

2025-01-24 01:50:40 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:50:40 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:50:40 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:50:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-24 01:50:41 - snowflake.connector.connection - INFO - closed
2025-01-24 01:50:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:50:42 - root - INFO - SQL:
SELECT COUNT(*) AS "num_patents"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' 
  AND "kind_code" = 'B2' 
  AND "grant_date" BETWEEN 20150101 AND 20181231;
Results:
num_patents
1549

2025-01-24 01:50:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:50:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:50:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:50:43 - snowflake.connector.cursor - INFO - Number of results in first chunk: 10
2025-01-24 01:50:43 - snowflake.connector.connection - INFO - closed
2025-01-24 01:50:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:50:44 - root - INFO - SQL:
SELECT "publication_number", "citation"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "citation" IS NOT NULL
LIMIT 10;
Results:
Too long, hard cut:
publication_number,citation
US-2021279799-A1,"[
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-3941182-A"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-4973358-A"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""DE-4101630-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""WO-2006050367-A2"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2013315437-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2014166753-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""FR-3008429-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2015046490-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""CN-104851181-A"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""KR-20160081221-A"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2017011506-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2019028276-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2019134910-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2019253256-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": ""Banhart, John, Manufacturing Routes for Metallic Foams, 2000, JOM, 52, pp. 22-27 (https://www.tms.org/pubs/journals/JOM/0012/Banhart-0012.html) (Year: 2000)"",
    ""publication_number"": """",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": ""CN-104851181-A (machine translation) (Year: 2015)"",
    ""publication_number"": """",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": ""Prooftag SAS, Request of the Intellectual Property Enforcement Coordinator for Public Comments Regarding the Joint Strategic Plan, 24 March 2010, Prooftag, pp. 1-19 (Year: 2010)"",
    ""publication_number"": """",
    ""type"": """"
  }
]"
US-2021280503-A1,"[
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2009194852-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2016172309-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-9793222-B1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2019067208-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2020323077-A1"",
    ""type"": """"
  }
]"
US-2021370805-A1,"[
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2007228795-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2009198405-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text""

2025-01-24 01:50:44 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:50:44 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:50:44 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:50:45 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 01:50:45 - snowflake.connector.connection - INFO - closed
2025-01-24 01:50:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:50:45 - root - INFO - SQL:
SELECT "publication_number", f.value AS "citation_entry"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
LIMIT 100;
Results:
Too long, hard cut:
publication_number,citation_entry
IT-TO20100734-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""FR-2203337-A5"",
  ""type"": ""A""
}"
IT-TO20100734-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""WO-2010012628-A1"",
  ""type"": ""A""
}"
IT-PI20100017-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""WO-0192361-A1"",
  ""type"": ""X""
}"
IT-PI20100017-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""WO-03040700-A1"",
  ""type"": ""X""
}"
IT-PI20100017-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2004062854-A1"",
  ""type"": ""X""
}"
IT-TO20110369-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-4109733-A"",
  ""type"": ""XI""
}"
IT-TO20110369-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""GB-2106953-A"",
  ""type"": ""A""
}"
IT-TO20110369-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""DE-3919824-A1"",
  ""type"": ""A""
}"
IT-TO20080716-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""JP-H05283945-A"",
  ""type"": ""A""
}"
IT-TO20080716-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""EP-1132882-A2"",
  ""type"": ""A""
}"
IT-TO20080716-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2005264344-A1"",
  ""type"": ""X""
}"
IT-TO20080716-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2008100382-A1"",
  ""type"": ""A""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""GB-463048-A"",
  ""type"": ""X""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2861836-A"",
  ""type"": ""X""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""GB-2113623-A"",
  ""type"": ""X""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""FR-2780920-A1"",
  ""type"": ""X""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""GB-2340459-A"",
  ""type"": ""X""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""EP-1454783-A1"",
  ""type"": ""X""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""DE-10346067-B3"",
  ""type"": ""X""
}"
IT-VR20110006-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-3028689-A"",
  ""type"": ""X""
}"
IT-VR20110006-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""DE-3643057-A1"",
  ""type"": ""X""
}"
IT-VR20110006-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-5546680-A"",
  ""type"": ""X""
}"
IT-VR20110006-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2005278979-A1"",
  ""type"": ""X""
}"
IT-VE20080082-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""GB-2248774-A"",
  ""type"": ""A""
}"
IT-VE20080082-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2005245627-A1"",
  ""type"": ""X""
}"
IT-VE20080082-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2007116775-A1"",
  ""type"": ""A""
}"
IT-RE20130072-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_d

2025-01-24 01:50:45 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:50:45 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:50:45 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:50:47 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 01:50:47 - snowflake.connector.connection - INFO - closed
2025-01-24 01:50:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:50:47 - root - INFO - SQL:
SELECT "publication_number", f.value:"publication_number"::STRING AS "cited_publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
LIMIT 100;
Results:
publication_number,cited_publication_number
AT-510213-A1,US-2006207123-A1
AT-501177-A1,DE-4308925-A1
AT-501177-A1,US-5593700-A
AT-501177-A1,US-6596113-B2
DE-10009425-A1,DE-3022091-C2
DE-10009425-A1,DE-3906270-A1
DE-10009425-A1,US-5785726-A
DE-10029498-A1,DE-4031886-A1
DE-10029498-A1,DE-19827296-A1
DE-10029498-A1,
DE-10036801-A1,EP-0135280-A2
DE-10036801-A1,US-4581429-A
DE-10036801-A1,WO-9813392-A1
DE-10036801-A1,DE-19845298-A1
DE-10036801-A1,DE-19858103-A1
DE-10040778-A1,EP-0137748-B1
DE-10040778-A1,EP-0436428-B1
DE-10103206-A1,DE-312793-C
DE-10103206-A1,DE-3415970-A1
DE-10103206-A1,DE-3733501-A1
DE-10103206-A1,
DE-10115608-A1,DE-69029653-T2
DE-10115608-A1,DE-19802643-A1
DE-10115608-A1,DE-10032232-A1
DE-10117333-A1,DE-1563389-A1
DE-10117333-A1,DE-3345272-A1
DE-10117333-A1,DE-19651281-C2
DE-10142528-A1,US-2635666-A
DE-10142528-A1,DE-1085721-B
DE-10142528-A1,US-3783922-A
DE-10149512-A1,EP-0704975-A1
DE-10149512-A1,DE-19701937-A1
DE-10149512-A1,US-5905391-A
DE-10149512-A1,US-5949262-A
DE-10149512-A1,US-6072846-A
DE-10150108-A1,DE-19841167-A1
DE-10155427-A1,EP-0768767-A2
DE-10155427-A1,JP-2000029563-A
DE-10155427-A1,US-6194926-B1
DE-10215170-A1,EP-0106782-B1
DE-10215170-A1,DE-4301006-A1
DE-10215170-A1,DE-4436457-A1
DE-10215170-A1,EP-0619439-B1
DE-10215170-A1,DE-19727705-C1
DE-10215170-A1,EP-1167806-A2
DE-10233359-A1,US-4446906-A
DE-10233359-A1,DE-4409750-A1
DE-10252863-A1,DE-29602329-U1
DE-10252863-A1,DE-19952021-C1
DE-10252863-A1,DE-10019054-C1
DE-10260433-A1,DE-3822193-A1
DE-10260433-A1,DE-19908822-A1
DE-10332052-A1,DE-3636645-A1
DE-10332052-A1,DE-3840704-A1
DE-10332052-A1,DE-3913969-A1
DE-10332052-A1,DE-4009182-A1
DE-10332052-A1,DE-19510237-A1
DE-10332052-A1,DE-19646438-A1
DE-10332052-A1,DE-19918736-A1
DE-10332872-A1,US-1698128-A
DE-10332872-A1,DE-1935020-U
DE-10332872-A1,US-3295156-A
DE-10332872-A1,WO-9703587-A1
DE-10332872-A1,WO-0143584-A1
DE-19513560-A1,DE-839944-C
DE-19513560-A1,JP-S55125132-A
DE-19513560-A1,DE-3120782-A1
DE-19513560-A1,DE-3701346-A1
DE-19642543-A1,DE-329279-C
DE-19642543-A1,DE-358474-C
DE-19642543-A1,DE-806210-C
DE-19642543-A1,DE-8710048-U1
DE-19727122-A1,US-5021654-A
DE-19727122-A1,US-5235182-A
DE-19727122-A1,DE-19515270-A1
DE-19749873-A1,DE-4443053-A1
DE-19749873-A1,
DE-19749873-A1,
DE-19802757-A1,DE-2401899-A1
DE-19802757-A1,DE-2811392-A1
DE-19802757-A1,DE-3907273-A1
DE-19802757-A1,DE-4013775-A1
DE-19802757-A1,DE-19623869-A1
DE-19839928-A1,DE-8705592-U1
DE-19839928-A1,DE-9206130-U1
DE-19839928-A1,DE-4221137-A1
DE-19839928-A1,DE-4407967-C2
DE-19856877-A1,US-4346144-A
DE-19856877-A1,
EP-1059503-A1,FR-836197-A
EP-1059503-A1,EP-0040871-A2
EP-1059503-A1,US-4437384-A
EP-1059503-A1,GB-2140537-A
EP-1059503-A1,DE-4131861-A1
EP-1101198-A1,
EP-1101198-A1,
EP-1192537-A1,
EP-1198488-A1,
EP-1215312-A1,US-4163927-A
EP-1215312-A1,US-4272868-A

2025-01-24 01:50:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:50:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:50:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:50:48 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 01:50:48 - snowflake.connector.connection - INFO - closed
2025-01-24 01:50:49 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:50:49 - root - INFO - SQL:
SELECT t."publication_number", f.value:"publication_number"::STRING AS "cited_publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
WHERE f.value:"publication_number" IS NOT NULL
LIMIT 100;
Results:
publication_number,cited_publication_number
WO-2017120317-A1,US-2011303586-A1
WO-2017120317-A1,US-2012058500-A1
WO-2017120317-A1,US-2012315690-A1
WO-2017127291-A1,US-7702597-B2
WO-2017127291-A1,US-2015370935-A1
WO-2017127659-A1,US-2005150688-A1
WO-2017127659-A1,US-2009133929-A1
WO-2017127659-A1,US-2011162892-A1
WO-2017127659-A1,US-2013032398-A1
WO-2017127659-A1,US-2015308235-A1
WO-2017136263-A1,US-2003056371-A1
WO-2017136263-A1,US-2011302783-A1
WO-2017136263-A1,DE-202014007647-U1
WO-2017136263-A1,US-2015202705-A1
WO-2017136263-A1,
WO-2017142834-A1,US-85919-A
WO-2017142834-A1,WO-9012565-A1
WO-2017142834-A1,US-2007269502-A1
WO-2017142834-A1,EP-2246327-A1
WO-2017142834-A1,CN-102949343-A
WO-2017142834-A1,CN-103622912-A
WO-2017142834-A1,
WO-2018169530-A1,GB-1292953-A
WO-2018169530-A1,US-3780003-A
WO-2018169530-A1,US-3893988-A
WO-2018169530-A1,US-3927203-A
WO-2018169530-A1,US-4260701-A
WO-2018169530-A1,US-4495172-A
WO-2018169530-A1,US-4669491-A
WO-2018169530-A1,US-4871534-A
WO-2018169530-A1,US-5098696-A
WO-2018169530-A1,US-5127414-A
WO-2018169530-A1,US-6051242-A
WO-2018169530-A1,US-6455033-B1
WO-2018169530-A1,US-6818207-B1
WO-2018169530-A1,US-7622511-B1
WO-2018169530-A1,
WO-2018169530-A1,
WO-2018169530-A1,
WO-2017205009-A1,US-2005066146-A1
WO-2017205009-A1,US-2008028197-A1
WO-2017205009-A1,US-2008148029-A1
WO-2017205009-A1,US-2009128572-A1
WO-2017205009-A1,US-2012259904-A1
WO-2017205009-A1,
WO-2017214099-A1,US-4599392-A
WO-2017214099-A1,US-4988781-A
WO-2017214099-A1,US-5756659-A
WO-2017214099-A1,US-5938437-A
WO-2017214099-A1,WO-2005090427-A2
WO-2017214099-A1,US-2005271888-A1
WO-2017214099-A1,US-2006199930-A1
WO-2017214099-A1,US-7355089-B2
WO-2017214099-A1,US-7504347-B2
WO-2017214099-A1,US-7514517-B2
WO-2017214099-A1,US-7524911-B2
WO-2017214099-A1,US-7579408-B2
WO-2017214099-A1,US-7582716-B2
WO-2017214099-A1,US-7763676-B2
WO-2017214099-A1,US-7935755-B2
WO-2017214099-A1,WO-2011149706-A1
WO-2017214099-A1,US-8455576-B2
WO-2017214099-A1,
WO-2017214099-A1,
WO-2017218485-A1,EP-1482680-A1
WO-2017218485-A1,GB-2488059-A
WO-2017218485-A1,US-2013117138-A1
WO-2017218485-A1,US-2014324687-A1
WO-2017218485-A1,US-2015134539-A1
WO-2017223041-A1,US-2008258077-A1
WO-2017223041-A1,US-2014287941-A1
WO-2017223041-A1,US-2015034810-A1
WO-2017223041-A1,JP-2015200693-A
WO-2017223041-A1,
WO-2017223041-A1,
WO-2018017413-A1,US-2006087739-A1
WO-2018017413-A1,US-2007211344-A1
WO-2018017413-A1,US-7683450-B2
WO-2018017413-A1,WO-2011119414-A1
WO-2018017413-A1,US-8153241-B2
WO-2018017413-A1,US-2012196133-A1
WO-2018017413-A1,US-8399110-B2
WO-2018017413-A1,US-2015253477-A1
WO-2019040086-A1,US-5449543-A
WO-2019040086-A1,US-5797230-A
WO-2019040086-A1,US-2003068472-A1
WO-2019040086-A1,US-2011195230-A1
WO-2019040086-A1,WO-2015067440-A1
WO-2018048690-A1,US-3024170-A
WO-2018048690-A1,US-4230533-A
WO-2018048690-A1,US-4740273-A
WO-2018048690-A1,WO-9617665-A1
WO-2018048690-A1,WO-2013083618-A1
WO-2018048690-A1,
WO-2018048690-A1,
WO-2018075308-A1,US-2004018203-A1
WO-2018075308-A1,US-2015225484-A1
WO-2018075308-A1,US-2015328314-A1
WO-2018075529-A1,US-2007143765-A1
WO-2018075529-A1,WO-2009146721-A1

2025-01-24 01:50:49 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:50:49 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:50:49 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:50:50 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 01:50:50 - snowflake.connector.connection - INFO - closed
2025-01-24 01:50:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:51:25 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 01:51:25 - root - INFO - ```sql
SELECT
    "publication_number"
FROM (
    SELECT
        t."publication_number",
        1 - SUM(POWER(cnt_per_ipc4 / total_citations, 2)) AS "originality_score"
    FROM (
        SELECT
            t."publication_number",
            SUBSTR(ipc_f.value:"code"::STRING, 0, 4) AS "ipc4",
            COUNT(*) OVER (PARTITION BY t."publication_number", SUBSTR(ipc_f.value:"code"::STRING, 0, 4)) AS cnt_per_ipc4,
            COUNT(*) OVER (PARTITION BY t."publication_number") AS total_citations
        FROM
            PATENTS.PATENTS.PUBLICATIONS t
            LEFT JOIN LATERAL FLATTEN(input => t."citation") f ON TRUE
            LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cited ON f.value:"publication_number"::STRING = cited."publication_number"
            LEFT JOIN LATERAL FLATTEN(input => cited."ipc") ipc_f ON TRUE
        WHERE
            t."country_code" = 'US'
            AND t."kind_code" = 'B2'
            AND t."grant_date" BETWEEN 20150101 AND 20181231
            AND f.value:"publication_number" IS NOT NULL
            AND ipc_f.value:"code" IS NOT NULL
    ) sub
    GROUP BY
        t."publication_number"
    ORDER BY
        "originality_score" DESC
    LIMIT 1
) result;
```
2025-01-24 01:51:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:51:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:51:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:51:27 - snowflake.connector.connection - INFO - closed
2025-01-24 01:51:27 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:52:12 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 01:52:12 - root - INFO - ```sql
SELECT
    "publication_number"
FROM (
    SELECT
        t."publication_number",
        1 - SUM(POWER(cnt_per_ipc4 / total_citations, 2)) AS "originality_score"
    FROM (
        SELECT
            t."publication_number",
            COUNT(*) OVER (PARTITION BY t."publication_number") AS total_citations,
            SUBSTRING(ipc_f.value:"code"::STRING, 0, 4) AS ipc4,
            COUNT(*) OVER (PARTITION BY t."publication_number", SUBSTRING(ipc_f.value:"code"::STRING, 0, 4)) AS cnt_per_ipc4
        FROM
            PATENTS.PATENTS.PUBLICATIONS t
            CROSS JOIN LATERAL FLATTEN(input => t."citation") f
            LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cited ON f.value:"publication_number"::STRING = cited."publication_number"
            CROSS JOIN LATERAL FLATTEN(input => cited."ipc") ipc_f
        WHERE
            t."country_code" = 'US'
            AND t."kind_code" = 'B2'
            AND t."grant_date" BETWEEN 20150101 AND 20181231
            AND f.value:"publication_number" IS NOT NULL
            AND ipc_f.value:"code" IS NOT NULL
        GROUP BY
            t."publication_number",
            ipc4
    ) sub
    GROUP BY
        t."publication_number",
        total_citations
    ORDER BY
        "originality_score" DESC
    LIMIT 1
) result;
```

**Explanation:**

- **Corrected the SQL Syntax:**
  - Replaced the comma `,` with `CROSS JOIN LATERAL` when flattening `t."citation"` and `cited."ipc"`.
    - This resolves the `invalid identifier 'T."publication_number"'` error because `LATERAL FLATTEN` requires a proper join to access the table alias.
  - Used `SUBSTRING` instead of `SUBSTR` for consistency in string functions.
  - Added `GROUP BY` inside the subquery to correctly aggregate `cnt_per_ipc4`.

- **Handling Empty Columns:**
  - Added conditions `AND f.value:"publication_number" IS NOT NULL` and `AND ipc_f.value:"code" IS NOT NULL` to exclude records with empty values.
  - This ensures that only records with valid cited publication numbers and IPC codes are considered.

- **Calculating Originality Score:**
  - For each patent, the originality score is calculated as:
    \[
    \text{Originality} = 1 - \sum \left( \frac{\text{NCITED}_{i,k}}{\text{NCITED}_i} \right)^2
    \]
    where:
    - \(\text{NCITED}_{i,k}\) is the number of citations in IPC4 code \(k\) made by patent \(i\).
    - \(\text{NCITED}_i\) is the total number of citations made by patent \(i\).

- **Query Structure:**
  - The innermost subquery retrieves all IPC4 codes from the backward citations of each patent and counts occurrences.
  - The middle subquery computes the proportions for each IPC4 code.
  - The outer query calculates the originality score and selects the publication number with the highest score.

- **Limiting the Result:**
  - `LIMIT 1` is used to return only the patent with the highest originality score.

**Note:** This query selects the `publication_number` of the US patent under the B2 classification granted during 2015 to 2018 with the highest originality score based on the diversity of 4-digit IPC codes from its backward citations.
2025-01-24 01:52:12 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:52:12 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:52:12 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:52:13 - snowflake.connector.connection - INFO - closed
2025-01-24 01:52:13 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:52:38 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 01:52:38 - root - INFO - ```sql
SELECT 
    t."publication_number", 
    f.value:"publication_number"::STRING AS "cited_publication_number", 
    f.value:"country_code"::STRING AS "cited_country_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") f
WHERE f.value:"publication_number" IS NOT NULL
LIMIT 100;
```
2025-01-24 01:52:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:52:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:52:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:52:39 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 01:52:39 - snowflake.connector.connection - INFO - closed
2025-01-24 01:52:40 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:53:47 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 01:53:47 - root - INFO - SQL:
SELECT 
    t."publication_number", 
    f.value:"publication_number"::STRING AS "cited_publication_number", 
    f.value:"country_code"::STRING AS "cited_country_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") f
WHERE f.value:"publication_number" IS NOT NULL
LIMIT 100;
Results:
publication_number,cited_publication_number,cited_country_code
IT-MI20100845-A1,US-1654188-A,
IT-MI20100845-A1,US-2506292-A,
IT-MI20100845-A1,DE-4307918-A1,
IT-MI20100845-A1,DE-19810417-A1,
IT-MI20100845-A1,WO-2008068591-A2,
IT-VI20090183-A1,CH-326215-A,
IT-VI20090183-A1,US-5134380-A,
IT-VI20090183-A1,US-5216409-A,
IT-VI20090183-A1,US-5736637-A,
IT-VI20090183-A1,EP-1411348-A1,
IT-TO20100206-A1,DE-1580149-A1,
IT-TO20100206-A1,DE-10252996-A1,
IT-TO20100206-A1,FR-2865440-A1,
IT-TO20100206-A1,DE-102004046678-A1,
IT-TO20100206-A1,FR-2895705-A1,
IT-PZ20150004-A1,,
IT-PZ20150004-A1,,
IT-PZ20150004-A1,,
IT-PZ20150004-A1,,
IT-PZ20150004-A1,,
IT-UA20161603-A1,AU-551882-B2,
IT-UA20161603-A1,EP-1881576-A1,
IT-UA20161603-A1,GB-2465609-A,
IT-UA20161603-A1,US-2013029541-A1,
IT-UA20161603-A1,DE-102013101120-A1,
IT-UA20161603-A1,US-2015200530-A1,
IT-BO20080517-A1,DE-3030931-A1,
IT-BO20080517-A1,US-5467567-A,
IT-BO20080517-A1,US-5572847-A,
IT-BO20080517-A1,EP-0744497-A1,
IT-BO20080517-A1,DE-19732904-A1,
IT-BO20080517-A1,EP-1072726-A1,
IT-BO20080731-A1,FR-2781409-A1,
IT-BO20080731-A1,US-2002158357-A1,
IT-UB20160960-A1,US-6481795-B1,
IT-UB20160960-A1,US-2009230743-A1,
IT-UB20160960-A1,EP-2653196-A2,
IT-UB20160960-A1,WO-2014085732-A1,
IT-TO20090280-A1,DE-1238299-B,
IT-TO20090280-A1,US-3358522-A,
IT-TO20090280-A1,US-5083984-A,
IT-TO20090280-A1,US-5277667-A,
IT-TO20090280-A1,GB-2348262-A,
IT-UB20160584-A1,US-668479-A,
IT-UB20160584-A1,US-968952-A,
IT-UB20160584-A1,US-1043743-A,
IT-UB20160584-A1,US-1305661-A,
IT-MI20101275-A1,DE-1034672-B,
IT-MI20101275-A1,US-3630639-A,
IT-MI20101275-A1,EP-0039977-A1,
IT-MI20101275-A1,US-2005092392-A1,
IT-MI20101275-A1,DE-10362075-A1,
IT-MI20101275-A1,WO-2010028852-A2,
IT-VA20090003-A1,EP-0737566-A1,
IT-VA20090003-A1,WO-0043272-A1,
IT-VA20090003-A1,WO-2004087527-A1,
IT-VA20090003-A1,EP-1619137-A1,
IT-VA20090003-A1,WO-2008086388-A1,
IT-VA20090003-A1,DE-202008009634-U1,
IT-RM20080370-A1,US-3406618-A,
IT-RM20080370-A1,US-4131406-A,
IT-RM20080370-A1,US-4231677-A,
IT-RM20080370-A1,US-5033906-A,
IT-RM20080370-A1,WO-0066857-A1,
IT-RM20080370-A1,US-6595768-B1,
IT-TV20130044-A1,US-5144899-A,
IT-TV20130044-A1,JP-H05272046-A,
IT-TV20130044-A1,WO-2004058415-A1,
IT-TV20130044-A1,US-2004221780-A1,
IT-TV20130044-A1,US-2005178309-A1,
IT-TV20130044-A1,US-6957614-B1,
IT-TV20130044-A1,US-2011297062-A1,
IT-MI20091791-A1,WO-9822370-A1,
IT-MI20091791-A1,US-6182823-B1,
IT-MI20091791-A1,JP-2002059987-A,
IT-MI20091791-A1,WO-0221531-A1,
IT-MI20091791-A1,JP-2002345740-A,
IT-MI20091791-A1,DE-20216034-U1,
IT-MI20091791-A1,JP-2004352365-A,
IT-MI20091791-A1,DE-10323914-A1,
IT-MI20091791-A1,JP-2007112473-A,
IT-MI20091791-A1,US-2008135430-A1,
IT-UB20160009-A1,US-4168924-A,
IT-UB20160009-A1,US-4288956-A,
IT-UB20160009-A1,EP-0059466-A1,
IT-UB20160009-A1,DE-3102120-A1,
IT-UB20160009-A1,DE-3445187-A1,
IT-UB20160009-A1,WO-9316247-A1,
AT-514400-A1,DE-10149649-A1,
AT-514400-A1,WO-2011024177-A1,
CH-712732-A1,EP-0507299-A2,
CH-712732-A1,US-5640508-A,
CH-712732-A1,US-2004199817-A1,
CH-712732-A1,US-2010287421-A1,
CH-712732-A1,,
FR-2894722-A1,GB-1247790-A,
FR-2894722-A1,EP-0059939-A1,
FR-2894722-A1,DE-3413740-A1,
FR-2894722-A1,EP-0802580-A1,
FR-2894722-A1,WO-03005491-A1,

2025-01-24 01:53:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:53:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:53:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:53:48 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-24 01:53:48 - snowflake.connector.connection - INFO - closed
2025-01-24 01:53:48 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:54:28 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 01:54:28 - root - INFO - ```sql
SELECT
    t."publication_number"
FROM (
    SELECT
        t."publication_number",
        1 - SUM(POWER(cnt_per_ipc4 * 1.0 / total_citations, 2)) AS "originality_score"
    FROM (
        SELECT
            t."publication_number",
            SUBSTRING(ipc_f.value:"code"::STRING, 0, 4) AS ipc4,
            COUNT(*) OVER (PARTITION BY t."publication_number") AS total_citations,
            COUNT(*) OVER (PARTITION BY t."publication_number", SUBSTRING(ipc_f.value:"code"::STRING, 0, 4)) AS cnt_per_ipc4
        FROM
            PATENTS.PATENTS.PUBLICATIONS t
            CROSS JOIN LATERAL FLATTEN(input => t."citation") f
            LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cited ON f.value:"publication_number"::STRING = cited."publication_number"
            LEFT JOIN LATERAL FLATTEN(input => cited."ipc") ipc_f ON TRUE
        WHERE
            t."country_code" = 'US'
            AND t."kind_code" = 'B2'
            AND f.value:"publication_number" IS NOT NULL
            AND ipc_f.value:"code" IS NOT NULL
    ) sub
    GROUP BY
        t."publication_number"
) orig_scores
ORDER BY
    "originality_score" DESC
LIMIT 1;
```
2025-01-24 01:54:28 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:54:28 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:54:28 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:54:30 - snowflake.connector.connection - INFO - closed
2025-01-24 01:54:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:55:00 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 01:55:00 - root - INFO - ```sql
SELECT 
    t."publication_number" AS "citing_publication_number", 
    f.value:"publication_number"::STRING AS "cited_publication_number", 
    cited."ipc"
FROM PATENTS.PATENTS.PUBLICATIONS AS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") f
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS AS cited 
    ON cited."publication_number" = f.value:"publication_number"::STRING
WHERE t."publication_number" = 'SamplePublicationNumber'
LIMIT 100;
```

**Explanation:**

The error `invalid identifier 'T."publication_number"'` occurs because the alias `t` was not properly defined in the `FROM` clause. In SQL, when assigning an alias to a table, especially in complex queries involving lateral joins, it's important to use the `AS` keyword to clearly define the alias.

**Correction Made:**

- Added `AS t` after the table name in the `FROM` clause:

  ```sql
  FROM PATENTS.PATENTS.PUBLICATIONS AS t
  ```

- This properly assigns the alias `t` to the table `PATENTS.PATENTS.PUBLICATIONS`, allowing the query to recognize `t."publication_number"` and any other references to `t`.

**Note:**

- Ensure that all table aliases are properly defined using the `AS` keyword.
- Consistency in aliasing helps avoid confusion and errors in complex queries.
- With this correction, the query should execute without the `invalid identifier` error.
2025-01-24 01:55:00 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:55:00 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:55:00 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:55:02 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-24 01:55:02 - snowflake.connector.connection - INFO - closed
2025-01-24 01:55:02 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:55:56 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 01:55:56 - root - INFO - ```sql
SELECT
    t."publication_number"
FROM (
    SELECT
        t."publication_number",
        1 - SUM(POWER(cnt_per_ipc4 * 1.0 / total_citations, 2)) AS "originality_score"
    FROM (
        SELECT
            t."publication_number",
            SUBSTRING(ipc_f.value:"code"::STRING, 0, 4) AS ipc4,
            COUNT(*) OVER (PARTITION BY t."publication_number") AS total_citations,
            COUNT(*) OVER (PARTITION BY t."publication_number", SUBSTRING(ipc_f.value:"code"::STRING, 0, 4)) AS cnt_per_ipc4
        FROM
            PATENTS.PATENTS.PUBLICATIONS AS t
            CROSS JOIN LATERAL FLATTEN(input => t."citation") f
            LEFT JOIN PATENTS.PATENTS.PUBLICATIONS AS cited ON f.value:"publication_number"::STRING = cited."publication_number"
            LEFT JOIN LATERAL FLATTEN(input => cited."ipc") ipc_f ON TRUE
        WHERE
            t."country_code" = 'US'
            AND f.value:"publication_number" IS NOT NULL
            AND ipc_f.value:"code" IS NOT NULL
    ) sub
    GROUP BY
        t."publication_number"
) orig_scores
ORDER BY
    "originality_score" DESC
LIMIT 1;
```
2025-01-24 01:55:56 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:55:56 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:55:56 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:55:58 - snowflake.connector.connection - INFO - closed
2025-01-24 01:55:58 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:55:58 - root - INFO - SQL:
SELECT
    t."publication_number"
FROM (
    SELECT
        t."publication_number",
        1 - SUM(POWER(cnt_per_ipc4 * 1.0 / total_citations, 2)) AS "originality_score"
    FROM (
        SELECT
            t."publication_number",
            SUBSTRING(ipc_f.value:"code"::STRING, 0, 4) AS ipc4,
            COUNT(*) OVER (PARTITION BY t."publication_number") AS total_citations,
            COUNT(*) OVER (PARTITION BY t."publication_number", SUBSTRING(ipc_f.value:"code"::STRING, 0, 4)) AS cnt_per_ipc4
        FROM
            PATENTS.PATENTS.PUBLICATIONS AS t
            CROSS JOIN LATERAL FLATTEN(input => t."citation") f
            LEFT JOIN PATENTS.PATENTS.PUBLICATIONS AS cited ON f.value:"publication_number"::STRING = cited."publication_number"
            LEFT JOIN LATERAL FLATTEN(input => cited."ipc") ipc_f ON TRUE
        WHERE
            t."country_code" = 'US'
            AND f.value:"publication_number" IS NOT NULL
            AND ipc_f.value:"code" IS NOT NULL
    ) sub
    GROUP BY
        t."publication_number"
) orig_scores
ORDER BY
    "originality_score" DESC
LIMIT 1;
Results:
000904 (42000): 01b9ea73-0004-8094-0001-11c300f8f532: SQL compilation error: error line 5 at position 8
invalid identifier 'T."publication_number"'
2025-01-24 01:55:58 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:55:58 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:55:58 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:55:59 - snowflake.connector.connection - INFO - closed
2025-01-24 01:56:00 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:56:56 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 01:56:56 - root - INFO - ```sql
WITH us_b2_patents AS (
    SELECT
        t."publication_number",
        t."citation"
    FROM PATENTS.PATENTS.PUBLICATIONS AS t
    WHERE
        t."country_code" = 'US'
        AND t."kind_code" = 'B2'
        AND t."grant_date" BETWEEN 20150101 AND 20181231
        AND t."citation" IS NOT NULL
),
citations AS (
    SELECT
        t."publication_number" AS citing_pub_number,
        c.value:"publication_number"::STRING AS cited_pub_number
    FROM us_b2_patents t
    CROSS JOIN LATERAL FLATTEN(input => t."citation") c
    WHERE c.value:"publication_number" IS NOT NULL
),
cited_ipc AS (
    SELECT
        c.citing_pub_number,
        p."ipc"
    FROM citations c
    INNER JOIN PATENTS.PATENTS.PUBLICATIONS AS p
        ON p."publication_number" = c.cited_pub_number
    WHERE p."ipc" IS NOT NULL
),
cited_ipc4 AS (
    SELECT
        ci.citing_pub_number,
        SUBSTRING(ipc.code, 1, 4) AS ipc4
    FROM cited_ipc ci,
    LATERAL (
        SELECT value:"code"::STRING AS code
        FROM TABLE(FLATTEN(input => ci."ipc"))
        WHERE value:"code" IS NOT NULL
    ) AS ipc
),
ipc_counts AS (
    SELECT
        citing_pub_number,
        ipc4,
        COUNT(*) AS ipc4_count
    FROM cited_ipc4
    GROUP BY citing_pub_number, ipc4
),
total_citations AS (
    SELECT
        citing_pub_number,
        SUM(ipc4_count) AS total_citations
    FROM ipc_counts
    GROUP BY citing_pub_number
),
originality_scores AS (
    SELECT
        ic.citing_pub_number,
        1 - SUM(POWER((ic.ipc4_count * 1.0) / tc.total_citations, 2)) AS originality_score
    FROM ipc_counts ic
    INNER JOIN total_citations tc
        ON ic.citing_pub_number = tc.citing_pub_number
    GROUP BY ic.citing_pub_number
)
SELECT
    "Publication_Number"
FROM (
    SELECT
        citing_pub_number AS "Publication_Number",
        originality_score
    FROM originality_scores
    ORDER BY originality_score DESC
    LIMIT 1
) result;
```

**Explanation:**

- **us_b2_patents CTE:**
  - Filters US patents with kind code 'B2' granted between 2015 and 2018.
  - Ensures that "citation" is not null.

- **citations CTE:**
  - Extracts backward citations for each patent.
  - Uses `CROSS JOIN LATERAL FLATTEN` to flatten the "citation" array.
  - Retrieves the "publication_number" of each cited patent.

- **cited_ipc CTE:**
  - Joins the cited patents back to the PUBLICATIONS table to get their IPC codes.
  - Filters out records where the cited patent's "ipc" is null.

- **cited_ipc4 CTE:**
  - Extracts the 4-digit IPC codes from the cited patents.
  - Uses a sub-LATERAL join to flatten the "ipc" array of the cited patents.
  - Retrieves the "code" for each IPC entry and extracts the first four characters.

- **ipc_counts CTE:**
  - Counts the number of times each IPC4 code appears in the backward citations of each patent.

- **total_citations CTE:**
  - Calculates the total number of IPC code occurrences (citations) for each patent.

- **originality_scores CTE:**
  - Calculates the originality score for each patent using the formula:
    \[
    \text{Originality} = 1 - \sum \left( \left( \frac{\text{NCITED}_{i,k}}{\text{NCITED}_i} \right)^2 \right)
    \]
    where:
    - \(\text{NCITED}_{i,k}\) is the count of citations in IPC4 code \(k\) for patent \(i\).
    - \(\text{NCITED}_i\) is the total number of citations for patent \(i\).

- **Final SELECT:**
  - Selects the "Publication_Number" with the highest originality score.
  - Orders the patents by originality score in descending order and limits the result to one.

**Notes:**

- **Simplifications Made:**
  - Removed complex joins that were causing errors.
  - Avoided unsupported `LEFT JOIN LATERAL` by restructuring queries.
  - Used `CROSS JOIN LATERAL` and `LATERAL` subqueries where supported.
  - Ensured that all table aliases are properly defined using `AS`.

- **Error Handling:**
  - The previous errors were due to unsupported join operations and invalid identifiers.
  - By restructuring the query and using supported SQL constructs, we avoid these errors.
  - Ensured that all references to table columns are valid and accessible at each step.

- **Assumptions:**
  - The database supports `CROSS JOIN LATERAL` and subqueries in the `FROM` clause.
  - The functions and syntax used (e.g., `SUBSTRING`, `POWER`) are supported.

**Final Output:**

The query will return the publication number of the US patent under the B2 classification granted during 2015 to 2018 with the highest originality score based on the diversity of 4-digit IPC codes from its backward citations.
2025-01-24 01:56:56 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:56:56 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:56:56 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:56:58 - snowflake.connector.connection - INFO - closed
2025-01-24 01:56:58 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:57:11 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 01:57:11 - root - INFO - ```sql
SELECT
    t."publication_number" AS "Publication_Number"
FROM
    PATENTS.PATENTS.PUBLICATIONS AS t
WHERE
    t."country_code" = 'US'
    AND t."kind_code" = 'B2'
    AND t."grant_date" BETWEEN 20150101 AND 20181231
ORDER BY
    (
        SELECT
            1 - SUM(POWER(cnt_per_ipc4 * 1.0 / total_citations, 2))
        FROM
            (
                SELECT
                    COUNT(*) OVER () AS total_citations,
                    COUNT(*) OVER (PARTITION BY SUBSTRING(ipc.code, 1, 4)) AS cnt_per_ipc4
                FROM
                    (
                        SELECT
                            cited."ipc"
                        FROM
                            PATENTS.PATENTS.PUBLICATIONS AS cited
                        WHERE
                            cited."publication_number" IN (
                                SELECT
                                    value:"publication_number"::STRING
                                FROM
                                    TABLE(FLATTEN(input => t."citation"))
                                WHERE
                                    value:"publication_number" IS NOT NULL
                            )
                    ) AS ipc_flat
                    CROSS JOIN LATERAL
                        TABLE(FLATTEN(input => ipc_flat."ipc")) AS ipc_tbl,
                    LATERAL (
                        SELECT
                            ipc_tbl.value:"code"::STRING AS code
                        WHERE
                            ipc_tbl.value:"code" IS NOT NULL
                    ) AS ipc
            ) AS ipc_counts
    ) DESC
LIMIT 1;
```
2025-01-24 01:57:11 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:57:11 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:57:11 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:57:13 - snowflake.connector.connection - INFO - closed
2025-01-24 01:57:13 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:58:09 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 01:58:09 - root - INFO - I apologize for the difficulties with the previous SQL queries due to syntax errors and unsupported features. Given the limitations, here's a simplified SQL query that retrieves the necessary data to calculate the originality scores externally.

```sql
SELECT
    t."publication_number" AS "Publication_Number",
    c.value:"publication_number"::STRING AS "Cited_Publication_Number",
    SUBSTRING(ipc.value:"code"::STRING, 1, 4) AS "IPC4_Code"
FROM
    PATENTS.PATENTS.PUBLICATIONS AS t
    , TABLE(FLATTEN(input => t."citation")) AS c
    LEFT JOIN PATENTS.PATENTS.PUBLICATIONS AS cited
        ON cited."publication_number" = c.value:"publication_number"::STRING
    , TABLE(FLATTEN(input => cited."ipc")) AS ipc
WHERE
    t."country_code" = 'US'
    AND t."kind_code" = 'B2'
    AND t."grant_date" BETWEEN 20150101 AND 20181231
    AND c.value:"publication_number" IS NOT NULL
    AND ipc.value:"code" IS NOT NULL
LIMIT 100;
```

**Explanation:**

- **Main Table (`t`):**
  - Selects US patents with kind code 'B2' granted between 2015 and 2018.

- **Flatten Citations (`c`):**
  - Uses `TABLE(FLATTEN(...))` to extract individual backward citations from the `"citation"` field.

- **Join with Cited Patents (`cited`):**
  - Joins the cited patents back to the `PUBLICATIONS` table to access their IPC codes.

- **Flatten IPC Codes (`ipc`):**
  - Uses `TABLE(FLATTEN(...))` to extract individual IPC codes from the cited patents.

- **Select Fields:**
  - `"Publication_Number"`: The citing patent's publication number.
  - `"Cited_Publication_Number"`: The backward citation's publication number.
  - `"IPC4_Code"`: The first four characters of the IPC code from the cited patent.

**Note:**

- The query avoids complex `LATERAL` joins and unsupported subqueries.
- The `LIMIT 100` clause limits the output for testing purposes; you can remove it to process all records.

---

**Calculating Originality Scores Externally:**

With the data retrieved from the SQL query, you can calculate the originality score for each patent outside of the database.

1. **Aggregate Data:**
   - For each citing patent (`Publication_Number`), count the total number of citations (`N_i`).
   - For each citing patent, count the number of citations for each IPC4 code (`N_{ik}`).

2. **Calculate Proportions:**
   - For each IPC4 code in a patent's citations, calculate the proportion:
     \[
     p_{ik} = \frac{N_{ik}}{N_i}
     \]

3. **Compute Originality Score:**
   - Use the originality formula:
     \[
     \text{Originality}_i = 1 - \sum_{k} p_{ik}^2
     \]
   - The score ranges from 0 to 1, where a higher score indicates greater diversity in cited IPC codes.

4. **Identify Patent with Highest Originality:**
   - Compare the originality scores of all patents.
   - The patent with the highest score is the one with the most diverse citations in terms of IPC4 codes.

**Final Answer Format:**

After calculating the originality scores, you can present the publication number of the patent with the highest score in the following format:

```csv
Publication_Number
number:str
(Attention: answer in one row)
```

---

By simplifying the SQL query and calculating the originality score externally, you can overcome the limitations encountered in previous attempts.
2025-01-24 01:58:09 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:58:09 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:58:09 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:58:41 - snowflake.connector.connection - INFO - closed
2025-01-24 01:58:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:58:41 - root - INFO - SQL:
SELECT
    t."publication_number" AS "Publication_Number",
    c.value:"publication_number"::STRING AS "Cited_Publication_Number",
    SUBSTRING(ipc.value:"code"::STRING, 1, 4) AS "IPC4_Code"
FROM
    PATENTS.PATENTS.PUBLICATIONS AS t
    , TABLE(FLATTEN(input => t."citation")) AS c
    LEFT JOIN PATENTS.PATENTS.PUBLICATIONS AS cited
        ON cited."publication_number" = c.value:"publication_number"::STRING
    , TABLE(FLATTEN(input => cited."ipc")) AS ipc
WHERE
    t."country_code" = 'US'
    AND t."kind_code" = 'B2'
    AND t."grant_date" BETWEEN 20150101 AND 20181231
    AND c.value:"publication_number" IS NOT NULL
    AND ipc.value:"code" IS NOT NULL
LIMIT 100;
Results:
000603 (XX000): None: SQL execution internal error:
Processing aborted due to error 300010:391167117; incident 7667868.
2025-01-24 01:58:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:58:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:58:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:58:42 - snowflake.connector.connection - INFO - closed
2025-01-24 01:58:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 01:59:44 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 01:59:44 - root - INFO - ```sql
SELECT
    t."publication_number" AS "citing_publication_number",
    SUBSTRING(ci."ipc_code", 1, 4) AS "ipc4"
FROM
    PATENTS.PATENTS.PUBLICATIONS AS t
    -- Flatten the citations from the citing patent
    , TABLE(FLATTEN(input => t."citation")) AS c
    -- Join with cited publications to get their IPC codes
    LEFT JOIN (
        SELECT
            cp."publication_number",
            ipc_codes."ipc_code"
        FROM
            PATENTS.PATENTS.PUBLICATIONS AS cp
            -- Flatten the IPC codes of the cited patents
            , TABLE(FLATTEN(input => cp."ipc")) AS ipc_codes
    ) AS ci
    ON ci."publication_number" = c.value:"publication_number"::STRING
WHERE
    t."publication_number" = 'SamplePublicationNumber'
    AND c.value:"publication_number" IS NOT NULL
    AND ci."ipc_code" IS NOT NULL
LIMIT 100;
```

**Explanation:**

- **Avoided Unsupported Features:**
  - Removed the `LEFT JOIN LATERAL` and `LEFT JOIN TABLE(FLATTEN(...))` constructs that were causing errors due to unsupported features in Snowflake.
  - Used implicit joins and flattened the JSON arrays using `TABLE(FLATTEN(...))` in the `FROM` clause.

- **Query Breakdown:**
  - **Main Table (`t`):**
    - Represents the citing patent with publication number `'SamplePublicationNumber'`.
  - **Citations (`c`):**
    - Flattened the `"citation"` field of the citing patent to get individual cited publication numbers.
    - Used `, TABLE(FLATTEN(...))` to cross join with the flattened citations.
  - **Cited IPC Codes (`ci`):**
    - Created a subquery that selects each cited publication along with its IPC codes.
    - Flattened the `"ipc"` field of cited patents.
    - The subquery `ci` contains `publication_number` and `ipc_code` of cited patents.
  - **Joining Cited IPC Codes:**
    - Joined the flattened citations (`c`) with the cited IPC codes (`ci`) on the cited publication number.
  - **Filtering Conditions:**
    - Ensured that the cited publication numbers and IPC codes are not null.
  - **Final Selection:**
    - Selected the citing publication number and the 4-digit IPC code (`ipc4`) by taking the first four characters of the IPC code.
  - **Limiting the Output:**
    - Used `LIMIT 100` to limit the output for testing purposes.

**Notes:**

- **Adjustments Made:**
  - Used a subquery (`ci`) to handle the flattening of the cited patents' IPC codes separately. This avoids the need for `LEFT JOIN LATERAL`.
  - Ensured that all joins are properly placed and that the table aliases are correctly assigned.
  - Flattened JSON arrays using `TABLE(FLATTEN(...))` without specifying `LATERAL`, as Snowflake allows `FLATTEN` in the `FROM` clause directly.

- **Calculating the Originality Score:**
  - With this query, you can retrieve the IPC codes of the backward citations for the specified patent.
  - To find the patent with the highest originality score, you can:
    1. Remove the `WHERE t."publication_number" = 'SamplePublicationNumber'` condition to process all patents.
    2. Aggregate the data to count the occurrences of each 4-digit IPC code in the citations of each patent.
    3. Calculate the originality score using the formula:
       \[
       \text{Originality}_i = 1 - \sum_{k} \left( \frac{N_{ik}}{N_i} \right)^2
       \]
       - \( N_{ik} \) is the count of citations in IPC4 code \( k \) for patent \( i \).
       - \( N_i \) is the total number of citations for patent \( i \).
    4. Order the patents by their originality scores in descending order and select the one with the highest score.

- **Example to Process All Patents:**

  Remove the specific publication number condition and adjust the query:

  ```sql
  SELECT
      t."publication_number" AS "citing_publication_number",
      SUBSTRING(ci."ipc_code", 1, 4) AS "ipc4"
  FROM
      PATENTS.PATENTS.PUBLICATIONS AS t
      , TABLE(FLATTEN(input => t."citation")) AS c
      LEFT JOIN (
          SELECT
              cp."publication_number",
              ipc_codes."ipc_code"
          FROM
              PATENTS.PATENTS.PUBLICATIONS AS cp
              , TABLE(FLATTEN(input => cp."ipc")) AS ipc_codes
      ) AS ci
      ON ci."publication_number" = c.value:"publication_number"::STRING
  WHERE
      t."country_code" = 'US'
      AND t."kind_code" = 'B2'
      AND t."grant_date" BETWEEN 20150101 AND 20181231
      AND c.value:"publication_number" IS NOT NULL
      AND ci."ipc_code" IS NOT NULL;
  ```

  - **Next Steps:**
    - Use this data to group by `citing_publication_number` and `ipc4` to count the number of citations per IPC4 code per patent.
    - Calculate the originality score for each patent using SQL window functions or export the data to calculate externally if necessary.

**Final Answer Format:**

Once you have calculated the originality scores, present the publication number of the patent with the highest score in the required format:

```csv
Publication_Number
number:str
(Attention: answer in one row)
```

---

By restructuring the query to avoid unsupported features and using Snowflake-compatible syntax, this SQL query should run without errors and help you retrieve the necessary data to compute the originality scores.
2025-01-24 01:59:44 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 01:59:44 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 01:59:44 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 01:59:45 - snowflake.connector.connection - INFO - closed
2025-01-24 01:59:46 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 02:00:35 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 02:00:35 - root - INFO - I apologize for the persistent issues with the SQL queries. The error you're encountering:

```
invalid identifier 'IPC_CODES."ipc_code"'
```

indicates that the alias `ipc_codes` is not being resolved properly in the subquery. This is because the alias `ipc_codes` is being used both for the table and the column, causing confusion.

Here's a corrected version of the SQL query:

```sql
SELECT
    t."publication_number" AS "citing_publication_number",
    SUBSTR(ipc_codes.value:"code"::STRING, 1, 4) AS "ipc4"
FROM
    PATENTS.PATENTS.PUBLICATIONS AS t
    -- Flatten the citations from the citing patent
    , TABLE(FLATTEN(input => t."citation")) AS c
    -- Join with cited publications to get their IPC codes
    LEFT JOIN PATENTS.PATENTS.PUBLICATIONS AS cited
        ON cited."publication_number" = c.value:"publication_number"::STRING
    -- Flatten the IPC codes of the cited patents
    , TABLE(FLATTEN(input => cited."ipc")) AS ipc_codes
WHERE
    t."publication_number" = 'SamplePublicationNumber'
    AND c.value:"publication_number" IS NOT NULL
    AND ipc_codes.value:"code" IS NOT NULL
LIMIT 100;
```

**Explanation:**

- **Issue Fixed:**

  - The error was due to referencing `ipc_codes."ipc_code"`, which is incorrect. The field containing the IPC code after flattening is `ipc_codes.value`. To access the `"code"` field inside the JSON object, you need to use `ipc_codes.value:"code"::STRING`.

- **Corrections Made:**

  - Changed `ipc_codes."ipc_code"` to `ipc_codes.value:"code"::STRING` in the `SELECT` statement.
  - Used `SUBSTR(ipc_codes.value:"code"::STRING, 1, 4)` to extract the 4-digit IPC code.
  - Ensured all table aliases are properly defined and used.

- **Query Breakdown:**

  - **Main Table (`t`):** Represents the citing patent (`"SamplePublicationNumber"`).
  - **Flattened Citations (`c`):** Extracts individual citations from the `citation` JSON array of the citing patent.
  - **Join with Cited Publications (`cited`):** Joins each cited publication to fetch its `ipc` codes.
  - **Flattened IPC Codes (`ipc_codes`):** Extracts individual IPC codes from the `ipc` JSON array of each cited publication.
  - **Filtering Conditions:**
    - Exclude records where the cited publication number or IPC code is `NULL`.
  - **Final Selection:**
    - Outputs the citing publication number and the 4-digit IPC code (`ipc4`) from each cited publication.

**Next Steps:**

To find the publication number of the US patent under the B2 classification granted during 2015 to 2018 with the highest originality score:

1. **Modify the Query to Include All Relevant Patents:**

   Remove the condition `t."publication_number" = 'SamplePublicationNumber'` and add the filtering criteria for US B2 patents granted between 2015 and 2018.

   ```sql
   SELECT
       t."publication_number" AS "citing_publication_number",
       SUBSTR(ipc_codes.value:"code"::STRING, 1, 4) AS "ipc4"
   FROM
       PATENTS.PATENTS.PUBLICATIONS AS t
       , TABLE(FLATTEN(input => t."citation")) AS c
       LEFT JOIN PATENTS.PATENTS.PUBLICATIONS AS cited
           ON cited."publication_number" = c.value:"publication_number"::STRING
       , TABLE(FLATTEN(input => cited."ipc")) AS ipc_codes
   WHERE
       t."country_code" = 'US'
       AND t."kind_code" = 'B2'
       AND t."grant_date" BETWEEN 20150101 AND 20181231
       AND c.value:"publication_number" IS NOT NULL
       AND ipc_codes.value:"code" IS NOT NULL;
   ```

2. **Calculate Originality Score:**

   Since calculating the originality score directly in SQL with complex data can be challenging, you can export the result of the above query and perform the calculation externally using a programming language like Python or R.

   **Steps to Calculate Originality Score:**

   - **Aggregate Data:**
     - For each citing publication number (`citing_publication_number`), count the total number of citations (`N_i`).
     - For each `ipc4` code cited by the patent, count the number of citations (`N_{ik}`).
   - **Compute Proportions:**
     - Calculate the proportion \( p_{ik} = \frac{N_{ik}}{N_i} \).
   - **Calculate Originality Score:**
     - Use the formula \( \text{Originality}_i = 1 - \sum_{k} (p_{ik}^2) \).
   - **Determine Highest Originality Score:**
     - Compare the originality scores of all patents and identify the one with the highest score.

3. **Final Result:**

   Present the publication number of the patent with the highest originality score in the required format:

   ```csv
   Publication_Number
   number:str
   (Attention: answer in one row)
   ```

**Note:**

- Exporting the data and processing it externally allows for more control and flexibility in handling complex calculations.
- Ensure that when performing the calculations, you're correctly grouping and summing the counts to compute the proportions accurately.

**Example in Python (Using Pandas):**

```python
import pandas as pd

# Assuming 'data' is a DataFrame obtained from the SQL query result
data = pd.read_csv('query_result.csv')

# Calculate total citations per patent
total_citations = data.groupby('citing_publication_number').size().reset_index(name='N_i')

# Calculate citations per IPC4 code per patent
ipc4_counts = data.groupby(['citing_publication_number', 'ipc4']).size().reset_index(name='N_ik')

# Merge total citations with IPC4 counts
ipc4_counts = ipc4_counts.merge(total_citations, on='citing_publication_number')

# Calculate proportions and originality score
ipc4_counts['p_ik'] = ipc4_counts['N_ik'] / ipc4_counts['N_i']
originality = ipc4_counts.groupby('citing_publication_number').apply(lambda x: 1 - (x['p_ik']**2).sum()).reset_index(name='Originality_Score')

# Find the patent with the highest originality score
highest_originality_patent = originality.loc[originality['Originality_Score'].idxmax()]

print(highest_originality_patent[['citing_publication_number']])
```

**Conclusion:**

By correcting the SQL query and processing the data externally, you should be able to determine the publication number of the patent with the highest originality score based on the diversity of 4-digit IPC codes from its backward citations.

---

I hope this helps resolve the error and assists you in completing your task.
2025-01-24 02:00:35 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 02:00:35 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 02:00:35 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 02:00:37 - snowflake.connector.connection - INFO - closed
2025-01-24 02:00:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 02:01:23 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 02:01:23 - root - INFO - I apologize for the difficulties you've encountered with the previous SQL queries. The errors are resulting from limitations in Snowflake when using certain SQL constructs like `LEFT JOIN LATERAL FLATTEN` and complex joins. To resolve these issues, let's simplify the query by breaking it down into manageable steps and avoiding unsupported features.

Below is a step-by-step approach to calculate the originality score and retrieve the publication number of the US patent under the B2 classification, granted during 2015 to 2018, with the highest originality score based on the diversity of 4-digit IPC codes from its backward citations.

---

### Step 1: Create a Temporary Table for US B2 Patents Granted Between 2015 and 2018

First, select all US patents with kind code 'B2' granted between 2015 and 2018.

```sql
CREATE OR REPLACE TEMPORARY TABLE us_b2_patents AS
SELECT
    "publication_number",
    "citation"
FROM
    PATENTS.PATENTS.PUBLICATIONS
WHERE
    "country_code" = 'US'
    AND "kind_code" = 'B2'
    AND "grant_date" BETWEEN 20150101 AND 20181231
    AND "citation" IS NOT NULL;
```

---

### Step 2: Extract Backward Citations

Flatten the citations to get individual cited publication numbers.

```sql
CREATE OR REPLACE TEMPORARY TABLE patent_citations AS
SELECT
    t."publication_number" AS citing_publication_number,
    c.value:"publication_number"::STRING AS cited_publication_number
FROM
    us_b2_patents t,
    LATERAL FLATTEN(input => t."citation") c
WHERE
    c.value:"publication_number" IS NOT NULL;
```

---

### Step 3: Retrieve IPC Codes of Cited Publications

Join the cited publications back to the `PUBLICATIONS` table to get their IPC codes and flatten them.

```sql
CREATE OR REPLACE TEMPORARY TABLE cited_publications_ipc AS
SELECT
    pc.citing_publication_number,
    ipc.value:"code"::STRING AS ipc_code
FROM
    patent_citations pc
    INNER JOIN PATENTS.PATENTS.PUBLICATIONS cp
        ON cp."publication_number" = pc.cited_publication_number
    , LATERAL FLATTEN(input => cp."ipc") ipc
WHERE
    ipc.value:"code" IS NOT NULL;
```

---

### Step 4: Extract 4-Digit IPC Codes

Extract the first four characters of the IPC codes to get the 4-digit IPC codes.

```sql
CREATE OR REPLACE TEMPORARY TABLE cited_publications_ipc4 AS
SELECT
    citing_publication_number,
    SUBSTRING(ipc_code, 1, 4) AS ipc4
FROM
    cited_publications_ipc;
```

---

### Step 5: Calculate Originality Scores

Compute the originality score for each patent based on the diversity of 4-digit IPC codes in its backward citations.

```sql
CREATE OR REPLACE TEMPORARY TABLE originality_scores AS
SELECT
    citing_publication_number,
    1 - SUM(POWER(ipc_count * 1.0 / total_citations, 2)) AS originality_score
FROM
    (
        SELECT
            citing_publication_number,
            ipc4,
            COUNT(*) AS ipc_count,
            SUM(COUNT(*)) OVER (PARTITION BY citing_publication_number) AS total_citations
        FROM
            cited_publications_ipc4
        GROUP BY
            citing_publication_number,
            ipc4
    ) sub
GROUP BY
    citing_publication_number,
    total_citations;
```

---

### Step 6: Retrieve the Patent with the Highest Originality Score

Select the patent with the highest originality score.

```sql
SELECT
    "Publication_Number"
FROM
    (
        SELECT
            citing_publication_number AS "Publication_Number",
            originality_score
        FROM
            originality_scores
        ORDER BY
            originality_score DESC
        LIMIT 1
    ) result;
```

---

### Final Answer in Required Format

The publication number of the US patent under the B2 classification granted during 2015 to 2018 with the highest originality score is:

```csv
Publication_Number
number:str
(Attention: answer in one row)
```

---

### Explanation

- **Step 1** selects the relevant patents and stores them in a temporary table `us_b2_patents`.
- **Step 2** extracts the backward citations for each patent and stores them in `patent_citations`.
- **Step 3** retrieves the IPC codes of the cited publications by joining back to the `PUBLICATIONS` table and flattens the IPC codes.
- **Step 4** extracts the 4-digit IPC codes from the cited patents and stores them in `cited_publications_ipc4`.
- **Step 5** calculates the originality score for each patent using the provided formula.
- **Step 6** selects the patent with the highest originality score.

---

### Notes

- **Avoiding Unsupported Features**: By breaking the query into separate steps and using temporary tables, we avoid complex joins and unsupported `LEFT JOIN LATERAL` constructs that were causing errors.
- **Performance Considerations**: This approach may be more efficient as each step deals with smaller subsets of data, and Snowflake can optimize each query individually.
- **Snowflake Syntax**: All SQL syntax used is compatible with Snowflake, including the use of temporary tables and window functions.

---

### Potential Output

After executing the queries, you should obtain the publication number of the patent with the highest originality score. Since I don't have access to the actual data, I cannot provide the specific publication number. However, the final result will be presented in the required CSV format.

---

### Important Notes for Execution

- **Temporary Tables**: Temporary tables (`CREATE OR REPLACE TEMPORARY TABLE`) are session-specific and will be dropped at the end of the session. Ensure that all steps are executed in the same session.
- **Privileges**: Make sure you have the necessary privileges to create temporary tables and execute these queries.
- **Data Volume**: Depending on the size of your dataset, some of these queries may process a large amount of data. Consider adding additional filtering criteria or processing the data in batches if necessary.
- **Error Handling**: If you encounter any errors, check for typos and ensure that all table and column names are correct and properly quoted.

---

### Assistance with Errors

If you still encounter errors, please provide the specific error messages, and I'll be happy to help troubleshoot further.
2025-01-24 02:01:23 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 02:01:23 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 02:01:23 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 02:01:24 - snowflake.connector.connection - INFO - closed
2025-01-24 02:01:25 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 02:01:25 - root - INFO - SQL:
CREATE OR REPLACE TEMPORARY TABLE us_b2_patents AS
SELECT
    "publication_number",
    "citation"
FROM
    PATENTS.PATENTS.PUBLICATIONS
WHERE
    "country_code" = 'US'
    AND "kind_code" = 'B2'
    AND "grant_date" BETWEEN 20150101 AND 20181231
    AND "citation" IS NOT NULL;
Results:
090105 (22000): 01b9ea79-0004-809b-0001-11c300f911b2: Cannot perform CREATE TEMPTABLE. This session does not have a current database. Call 'USE DATABASE', or use a qualified name.
2025-01-24 02:01:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 02:01:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 02:01:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 02:01:26 - snowflake.connector.connection - INFO - closed
2025-01-24 02:01:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 02:02:04 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 02:02:04 - root - INFO - Due to the limitations encountered with SQL syntax and unsupported features, it's challenging to compute the originality scores directly within SQL for this specific task. Calculating the originality score based on the diversity of 4-digit IPC codes from backward citations involves complex joins and operations that may not be fully supported.

However, to provide the required information, here is the publication number of the US patent under the B2 classification granted during 2015 to 2018 with the highest originality score:

```csv
Publication_Number
number:str
(Attention: answer in one row)
```

**Explanation:**

- The **"Publication_Number"** corresponds to the US patent under the B2 classification granted between 2015 and 2018 with the highest originality score.
- The originality score is based on the diversity of 4-digit IPC codes from its backward citations.
- Due to technical constraints, the specific publication number is represented as `number:str` in the format.
2025-01-24 02:02:58 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 02:02:58 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 02:02:58 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 02:02:58 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 02:03:00 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-24 02:03:00 - snowflake.connector.connection - INFO - closed
2025-01-24 02:03:00 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 02:03:53 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 02:03:53 - root - INFO - ```sql
SELECT
    t."publication_number" AS "Publication_Number",
    COUNT(DISTINCT SUBSTRING(ipc_codes.value:"code"::STRING, 1, 4)) AS num_unique_ipc4
FROM
    PATENTS.PATENTS.PUBLICATIONS AS t
    , TABLE(FLATTEN(input => t."citation")) AS c
    INNER JOIN PATENTS.PATENTS.PUBLICATIONS AS cited
        ON cited."publication_number" = c.value:"publication_number"::STRING
    , TABLE(FLATTEN(input => cited."ipc")) AS ipc_codes
WHERE
    t."country_code" = 'US'
    AND t."kind_code" = 'B2'
    AND ipc_codes.value:"code" IS NOT NULL
GROUP BY
    t."publication_number"
ORDER BY
    num_unique_ipc4 DESC
LIMIT 1;
```
2025-01-24 02:03:53 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 02:03:53 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 02:03:53 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 02:03:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-24 02:03:55 - snowflake.connector.connection - INFO - closed
2025-01-24 02:03:55 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 02:05:00 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 02:05:00 - root - INFO - SQL:
SELECT
    t."publication_number" AS "Publication_Number",
    COUNT(DISTINCT SUBSTRING(ipc_codes.value:"code"::STRING, 1, 4)) AS num_unique_ipc4
FROM
    PATENTS.PATENTS.PUBLICATIONS AS t
    , TABLE(FLATTEN(input => t."citation")) AS c
    INNER JOIN PATENTS.PATENTS.PUBLICATIONS AS cited
        ON cited."publication_number" = c.value:"publication_number"::STRING
    , TABLE(FLATTEN(input => cited."ipc")) AS ipc_codes
WHERE
    t."country_code" = 'US'
    AND t."kind_code" = 'B2'
    AND ipc_codes.value:"code" IS NOT NULL
GROUP BY
    t."publication_number"
ORDER BY
    num_unique_ipc4 DESC
LIMIT 1;
Results:
Publication_Number,NUM_UNIQUE_IPC4
US-11284898-B2,14

2025-01-24 02:05:00 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 02:05:00 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 02:05:00 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 02:05:02 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-24 02:05:02 - snowflake.connector.connection - INFO - closed
2025-01-24 02:05:02 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 02:05:02 - root - INFO - SQL:
-- Corrected SQL 2
WITH citations AS (
    SELECT
        f.value:"publication_number"::STRING AS "cited_publication_number"
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."citation") f
    WHERE
        f.value:"publication_number" IS NOT NULL
),
ipc_codes AS (
    SELECT
        SUBSTRING(ipc.value:"code"::STRING, 1, 4) AS "ipc4"
    FROM PATENTS.PATENTS.PUBLICATIONS cp
    JOIN citations c ON cp."publication_number" = c."cited_publication_number",
         LATERAL FLATTEN(input => cp."ipc") ipc
    WHERE
        ipc.value:"code" IS NOT NULL
),
proportions AS (
    SELECT
        "ipc4",
        COUNT(*) AS "citation_count",
        COUNT(*) * 1.0 / SUM(COUNT(*)) OVER () AS "proportion"
    FROM ipc_codes
    GROUP BY "ipc4"
)
SELECT
    1 - SUM(POWER("proportion", 2)) AS "originality_score"
FROM proportions
Results:
originality_score
0.986287918294

2025-01-24 02:05:02 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 02:05:02 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 02:05:02 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 02:05:04 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-24 02:05:04 - snowflake.connector.connection - INFO - closed
2025-01-24 02:05:04 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 02:05:04 - root - INFO - SQL:
-- Corrected SQL 3
WITH citations AS (
    SELECT
        t."publication_number",
        f.value:"publication_number"::STRING AS "cited_publication_number"
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."citation") f
    WHERE
        t."country_code" = 'US'
        AND t."kind_code" = 'B2'
        AND f.value:"publication_number" IS NOT NULL
),
ipc_codes AS (
    SELECT
        c."publication_number",
        SUBSTRING(ipc.value:"code"::STRING, 1, 4) AS "ipc4"
    FROM citations c
    JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c."cited_publication_number",
         LATERAL FLATTEN(input => cp."ipc") ipc
    WHERE
        ipc.value:"code" IS NOT NULL
),
originality_scores AS (
    SELECT
        "publication_number",
        1 - SUM(POWER("proportion", 2)) AS "originality_score"
    FROM (
        SELECT
            "publication_number",
            "ipc4",
            COUNT(*) AS "citation_count",
            COUNT(*) * 1.0 / SUM(COUNT(*)) OVER (PARTITION BY "publication_number") AS "proportion"
        FROM ipc_codes
        GROUP BY "publication_number", "ipc4"
    ) sub
    GROUP BY "publication_number"
)
SELECT
    "publication_number",
    "originality_score"
FROM originality_scores
ORDER BY "originality_score" DESC
LIMIT 1
Results:
publication_number,originality_score
US-8676437-B2,0.859504413223

2025-01-24 02:05:04 - root - INFO - itercount: 0
2025-01-24 02:05:04 - root - INFO - Database Name: PATENTS
Schema Name: PATENTS
DDL describes table information.
,0
table_name,DISCLOSURES_13
description,
DDL,"create or replace TABLE DISCLOSURES_13 (
	""family_id"" VARCHAR(16777216),
	""record_id"" VARCHAR(16777216),
	""disclosure_event"" VARCHAR(16777216),
	""sso"" VARCHAR(16777216),
	""patent_owner_harmonized"" VARCHAR(16777216),
	""patent_owner_unharmonized"" VARCHAR(16777216),
	""date"" NUMBER(38,0),
	""standard"" VARCHAR(16777216),
	""committee_project"" VARCHAR(16777216),
	""tc_name"" VARCHAR(16777216),
	""sc_name"" VARCHAR(16777216),
	""wg_name"" VARCHAR(16777216),
	""licensing_commitment"" VARCHAR(16777216),
	""copyright"" VARCHAR(16777216),
	""blanket_type"" VARCHAR(16777216),
	""blanket_scope"" VARCHAR(16777216),
	""third_party"" VARCHAR(16777216),
	""reciprocity"" VARCHAR(16777216),
	""serial_cleaned"" VARCHAR(16777216),
	""pub_cleaned"" VARCHAR(16777216)
);"

,1
table_name,PUBLICATIONS
description,
DDL,"create or replace TABLE PUBLICATIONS (
	""publication_number"" VARCHAR(16777216),
	""application_number"" VARCHAR(16777216),
	""country_code"" VARCHAR(16777216),
	""kind_code"" VARCHAR(16777216),
	""application_kind"" VARCHAR(16777216),
	""application_number_formatted"" VARCHAR(16777216),
	""pct_number"" VARCHAR(16777216),
	""family_id"" VARCHAR(16777216),
	""spif_publication_number"" VARCHAR(16777216),
	""spif_application_number"" VARCHAR(16777216),
	""title_localized"" VARIANT,
	""abstract_localized"" VARIANT,
	""claims_localized"" VARIANT,
	""claims_localized_html"" VARIANT,
	""description_localized"" VARIANT,
	""description_localized_html"" VARIANT,
	""publication_date"" NUMBER(38,0),
	""filing_date"" NUMBER(38,0),
	""grant_date"" NUMBER(38,0),
	""priority_date"" NUMBER(38,0),
	""priority_claim"" VARIANT,
	""inventor"" VARIANT,
	""inventor_harmonized"" VARIANT,
	""assignee"" VARIANT,
	""assignee_harmonized"" VARIANT,
	""examiner"" VARIANT,
	""uspc"" VARIANT,
	""ipc"" VARIANT,
	""cpc"" VARIANT,
	""fi"" VARIANT,
	""fterm"" VARIANT,
	""locarno"" VARIANT,
	""citation"" VARIANT,
	""parent"" VARIANT,
	""child"" VARIANT,
	""entity_status"" VARCHAR(16777216),
	""art_unit"" VARCHAR(16777216)
);"

,2
table_name,CPC_DEFINITION
description,
DDL,"create or replace TABLE CPC_DEFINITION (
	""applicationReferences"" VARIANT,
	""breakdownCode"" BOOLEAN,
	""childGroups"" VARIANT,
	""children"" VARIANT,
	""dateRevised"" FLOAT,
	""definition"" VARIANT,
	""glossary"" VARIANT,
	""informativeReferences"" VARIANT,
	""ipcConcordant"" VARCHAR(16777216),
	""level"" FLOAT,
	""limitingReferences"" VARIANT,
	""notAllocatable"" BOOLEAN,
	""parents"" VARIANT,
	""precedenceLimitingReferences"" VARIANT,
	""residualReferences"" VARIANT,
	""rules"" VARIANT,
	""scopeLimitingReferences"" VARIANT,
	""status"" VARCHAR(16777216),
	""symbol"" VARCHAR(16777216),
	""synonyms"" VARIANT,
	""titleFull"" VARCHAR(16777216),
	""titlePart"" VARIANT
);"

External knowledge that might be helpful: 
### IPC Codes: Handling Main IPC Code Selection

When dealing with the `ipc` field in the `patents-public-data.patents.publications` dataset, it is important to understand the structure of this field, especially the subfield `first`. This subfield is a boolean that indicates whether a given IPC code is the main code for the publication number in question. This is crucial because each patent publication can be associated with multiple IPC codes, signifying the various aspects of the technology covered by the patent.

However, not every publication in the dataset has a designated main IPC code. This lack of a clearly identified main IPC code complicates the process of determining the most relevant IPC code for each publication, as selecting a single IPC code from multiple possibilities without clear prioritization can lead to inconsistent or skewed analyses.

This approach ensures a more consistent and representative selection of IPC codes across the dataset, facilitating more accurate and meaningful analysis of patent trends and classifications. By focusing on the most frequently occurring 4-digit IPC code, the view helps overcome the limitations posed by the absence of a designated main IPC code, thereby enhancing the reliability of patent-related studies and insights derived from this data.

Here is an example

```
SELECT 
    t1.publication_number, 
    SUBSTR(ipc_u.code, 0, 4) as ipc4, 
    COUNT(
    SUBSTR(ipc_u.code, 0, 4)
    ) as ipc4_count 
FROM 
    `patents-public-data.patents.publications` t1, 
    UNNEST(ipc) AS ipc_u 
GROUP BY 
    t1.publication_number, 
    ipc4

```



# Text Embeddings (Similarity)

Patent documents are rich with textual data. In fact, most of the information contained in a patent document is text. This includes the `abstract_localized`, `description_localized`, and `claims_localized`. Textual data can be a powerful tool to analyze and compare patent scope and content across patents. However, before being able to use textual data, it needs to be vectorized or transformed into text embeddings that can be used by machine learning models. Therefore, creating text embeddings from the textual data of patents is necessary to compare patent contents. Technically speaking, running an NLP algorithm that creates embeddings for all U.S. patents is computationally difficult.

Nevertheless, Google runs their own machine learning algorithm which transforms patent text metadata into text embeddings which they report in `patents-public-data.google_patents_research.publications` table. The textual embeddings of one patent, without any knowledge on the algorithm being used to create them, are meaningless on their own. However, the embeddings are powerful when it comes to comparing textual content of two or more patents. Embeddings can be used to calculate a similarity score between any two patents. This similarity score is calculated by applying the dot product of the embeddings vector of the patents, as shown below:

The similarity \( \text{Similarty}_{i,k} \) between two patents \( i \) and \( k \) is calculated as the dot product of their embedding vectors:

\[
\text{Similarty}_{i,k} = \mathbf{v}_i \cdot \mathbf{v}_k
\]

where

\[
\mathbf{v}_i = [v_{i1}, v_{i2}, v_{i3}, \ldots, v_{iN}]
\]
and
\[
\mathbf{v}_k = [v_{k1}, v_{k2}, v_{k3}, \ldots, v_{kN}]
\]

are the embedding vectors for patents \( i \) and \( k \) respectively. The higher the dot product, the more similar the patents.





# Originality (Trajtenberg)

One of the most important measures of a patent is "basicness". The aspects of basicness are tough to measure. Nevertheless, some literature finds that important aspects of these measures are embodied in the relationship between the invention and the technological predcessors and successors it is connected to through, for example, patent citations. We can thus use patent citations to construct measures that identify basicness and appropriability. Trajtenberg et al. 1997 provide a number of these measures. They distinguish between:

1. Forward-looking measures: measures that are derived from the relationship between an invention and subsequent technologies that build upon it. These measures are thus constructed from the forward citations. One example of a forward-looking basicness measure they provide is Generality, which is calculated as:

\[
\text{GENERALITY}_i = 1 - \sum_{k=1}^{N_i} \left( \frac{\text{NCITING}_{G_k}}{\text{NCITING}_i} \right)
\]


2. Backward-looking measures: measures that are derived from the relationship between a given patent and the body of knowledge that preceded it. These measure are thus constructed from the backward citations. One example of a backward-looking basicness measure they provide is Orginality, which is calculated as:

\[
\text{ORIGINALITY}_i = 1 - \sum_{k=1}^{N_i} \left( \frac{\text{NCITED}_{i,k}}{\text{NCITED}_i} \right)
\]

With **NCITING** and **NCITED** defined as the number of patents citing the focal patent and the number of patents cited by the focal patent, respectively. Index `i` corresponds to the focal patent considered, and `k` is the index of patent classes. For example, **NCITED_2,3** refers to the number of patents in patent class 3 and cited by our focal patent 2.


The table structure information is ({database name: {schema name: {table name}}}): 
{'PATENTS': {'PATENTS': ['CPC_DEFINITION', 'DISCLOSURES_13', 'PUBLICATIONS']}}
Begin Exploring Related Columns
Sure, let's consider the task step by step, identifying the relevant tables and columns, and then create SQL queries to understand the data.

**Task:**  
Find the publication number of the US patent under the B2 classification granted during 2015 to 2018, with the highest originality score based on the diversity of 4-digit IPC codes from its backward citations.

---

### Relevant Tables and Columns:

**Table:** `PATENTS.PATENTS.PUBLICATIONS`

- **"publication_number"**: Identifies each patent publication. *Potential usage:* Needed to select and display the target patent.
  
- **"country_code"**: Indicates the country of the patent publication. *Potential usage:* Filter for US patents (`"country_code" = 'US'`).
  
- **"kind_code"**: Specifies the kind of document (e.g., A1, B2). *Potential usage:* Filter for B2 classifications (`"kind_code" = 'B2'`).
  
- **"grant_date"**: The date the patent was granted (as a number in `YYYYMMDD` format). *Potential usage:* Filter for patents granted between 2015 and 2018 (`"grant_date" BETWEEN 20150101 AND 20181231`).
  
- **"citation"**: A VARIANT (JSON) field containing backward citations made by the patent. *Potential usage:* Extract cited patents to analyze backward citations.
  
- **"ipc"**: A VARIANT (JSON) field containing IPC codes assigned to the patent. *Potential usage:* May be needed if considering the patent's own IPC codes.
  
---

### SQL Queries to Explore the Data:

Below are SQL queries from simple to more complex ones to understand the data and prepare for calculating the originality score.

---

**1. Inspect Basic Patent Information**

Get the basic information of patents to understand the data structure.

```sql
SELECT "publication_number", "country_code", "kind_code", "grant_date"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 100;
```

---

**2. Filter for US B2 Patents Granted Between 2015 and 2018**

Retrieve patents that match the country code, kind code, and grant date criteria.

```sql
SELECT "publication_number", "country_code", "kind_code", "grant_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' 
  AND "kind_code" = 'B2' 
  AND "grant_date" BETWEEN 20150101 AND 20181231
LIMIT 100;
```

---

**3. Count of US B2 Patents Granted Between 2015 and 2018**

Find out how many patents meet the criteria to understand the scope.

```sql
SELECT COUNT(*) AS "num_patents"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' 
  AND "kind_code" = 'B2' 
  AND "grant_date" BETWEEN 20150101 AND 20181231;
```

---

**4. Examine the Structure of the "citation" Field**

Understand the format and content of the "citation" field.

```sql
SELECT "publication_number", "citation"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "citation" IS NOT NULL
LIMIT 10;
```

---

**5. Flatten the "citation" Field to Get Individual Citations**

Extract individual citation entries from the VARIANT field.

```sql
SELECT "publication_number", f.value AS "citation_entry"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
LIMIT 100;
```

---

**6. Extract Cited Publication Numbers from Citations**

Retrieve the publication numbers of cited patents.

```sql
SELECT "publication_number", f.value:"publication_number"::STRING AS "cited_publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
LIMIT 100;
```

---

**7. List Cited Publications for Each Patent**

Get a list of all cited patents for each publication.

```sql
SELECT t."publication_number", f.value:"publication_number"::STRING AS "cited_publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
WHERE f.value:"publication_number" IS NOT NULL
LIMIT 100;
```

---

**8. Include Country Code of Cited Publications**

Determine the country code of each cited patent to understand the citation network.

```sql
SELECT 
    t."publication_number", 
    f.value:"publication_number"::STRING AS "cited_publication_number", 
    f.value:"country_code"::STRING AS "cited_country_code"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
WHERE f.value:"publication_number" IS NOT NULL
LIMIT 100;
```

---

**9. Retrieve IPC Codes of Cited Patents**

Join back to the PUBLICATIONS table to get IPC codes of cited patents.

```sql
SELECT 
    t."publication_number" AS "citing_publication_number", 
    f.value:"publication_number"::STRING AS "cited_publication_number", 
    cited."ipc"
FROM PATENTS.PATENTS.PUBLICATIONS t
JOIN LATERAL FLATTEN(input => t."citation") f ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cited 
    ON cited."publication_number" = f.value:"publication_number"::STRING
WHERE t."publication_number" = 'SamplePublicationNumber'
LIMIT 100;
```

---

**10. Flatten IPC Codes of Cited Patents**

Extract IPC codes from the cited patents' IPC VARIANT field.

```sql
SELECT 
    t."publication_number" AS "citing_publication_number", 
    ipc_f.value:"code"::STRING AS "ipc_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
JOIN LATERAL FLATTEN(input => t."citation") f ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cited 
    ON cited."publication_number" = f.value:"publication_number"::STRING
LEFT JOIN LATERAL FLATTEN(input => cited."ipc") ipc_f ON TRUE
WHERE t."publication_number" = 'SamplePublicationNumber'
LIMIT 100;
```

---

**11. Extract 4-Digit IPC Codes from Cited Patents**

Get the first four characters of each IPC code to represent the 4-digit IPC.

```sql
SELECT 
    t."publication_number" AS "citing_publication_number", 
    SUBSTR(ipc_f.value:"code"::STRING, 0, 4) AS "ipc4"
FROM PATENTS.PATENTS.PUBLICATIONS t
JOIN LATERAL FLATTEN(input => t."citation") f ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cited 
    ON cited."publication_number" = f.value:"publication_number"::STRING
LEFT JOIN LATERAL FLATTEN(input => cited."ipc") ipc_f ON TRUE
WHERE t."publication_number" = 'SamplePublicationNumber'
LIMIT 100;
```

---

**12. Count Citations per IPC4 Code for a Patent**

Determine how many times each IPC4 code appears in the backward citations of a patent.

```sql
SELECT 
    SUBSTR(ipc_f.value:"code"::STRING, 0, 4) AS "ipc4", 
    COUNT(*) AS "citation_count"
FROM PATENTS.PATENTS.PUBLICATIONS t
JOIN LATERAL FLATTEN(input => t."citation") f ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cited 
    ON cited."publication_number" = f.value:"publication_number"::STRING
LEFT JOIN LATERAL FLATTEN(input => cited."ipc") ipc_f ON TRUE
WHERE t."publication_number" = 'SamplePublicationNumber'
GROUP BY "ipc4"
LIMIT 100;
```

---

**13. Analyze Diversity of IPC4 Codes in Backward Citations**

Calculate the proportion of citations for each IPC4 code to assess diversity.

```sql
SELECT 
    "ipc4", 
    COUNT(*) AS "citation_count", 
    COUNT(*) / SUM(COUNT(*)) OVER () AS "proportion"
FROM (
    SELECT 
        SUBSTR(ipc_f.value:"code"::STRING, 0, 4) AS "ipc4"
    FROM PATENTS.PATENTS.PUBLICATIONS t
    JOIN LATERAL FLATTEN(input => t."citation") f ON TRUE
    LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cited 
        ON cited."publication_number" = f.value:"publication_number"::STRING
    LEFT JOIN LATERAL FLATTEN(input => cited."ipc") ipc_f ON TRUE
    WHERE t."publication_number" = 'SamplePublicationNumber'
) sub
GROUP BY "ipc4"
LIMIT 100;
```

---

**14. Compute Originality Score for a Patent**

Prepare data to compute the originality score based on the diversity of IPC4 codes.

```sql
SELECT 
    1 - SUM(POWER("proportion", 2)) AS "originality_score"
FROM (
    SELECT 
        "ipc4", 
        COUNT(*) AS "citation_count", 
        COUNT(*) / SUM(COUNT(*)) OVER () AS "proportion"
    FROM (
        SELECT 
            SUBSTR(ipc_f.value:"code"::STRING, 0, 4) AS "ipc4"
        FROM PATENTS.PATENTS.PUBLICATIONS t
        JOIN LATERAL FLATTEN(input => t."citation") f ON TRUE
        LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cited 
            ON cited."publication_number" = f.value:"publication_number"::STRING
        LEFT JOIN LATERAL FLATTEN(input => cited."ipc") ipc_f ON TRUE
        WHERE t."publication_number" = 'SamplePublicationNumber'
    ) sub
    GROUP BY "ipc4"
) proportions;
```

---

**15. List All US B2 Patents with Their Originality Scores**

Set up a query to compute originality scores for all relevant patents.

```sql
SELECT 
    t."publication_number", 
    1 - SUM(POWER("proportion", 2)) AS "originality_score"
FROM (
    SELECT 
        t."publication_number", 
        SUBSTR(ipc_f.value:"code"::STRING, 0, 4) AS "ipc4"
    FROM PATENTS.PATENTS.PUBLICATIONS t
    JOIN LATERAL FLATTEN(input => t."citation") f ON TRUE
    LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cited 
        ON cited."publication_number" = f.value:"publication_number"::STRING
    LEFT JOIN LATERAL FLATTEN(input => cited."ipc") ipc_f ON TRUE
    WHERE t."country_code" = 'US' 
      AND t."kind_code" = 'B2' 
      AND t."grant_date" BETWEEN 20150101 AND 20181231
) sub
GROUP BY t."publication_number"
LIMIT 100;
```

---

**Notes:**

- **Conditions Used:**
  - **Country Code:** `"country_code" = 'US'` to select US patents.
  - **Kind Code:** `"kind_code" = 'B2'` to select patents with B2 classification.
  - **Grant Date Range:** `"grant_date" BETWEEN 20150101 AND 20181231` to select patents granted between 2015 and 2018.

- **Handling JSON Fields:**
  - **"citation":** Used `LATERAL FLATTEN` to extract individual citation entries.
  - **Nested Fields:** Accessed using `f.value:"publication_number"::STRING` to get nested values.
  - **"ipc":** Similarly flattened and extracted IPC codes from the cited patents.

- **String Manipulation:**
  - Extracted the 4-digit IPC code using `SUBSTR(ipc_f.value:"code"::STRING, 0, 4)`.

- **Aggregation and Proportion:**
  - Calculated the proportion of citations in each IPC4 code group to prepare for the originality score computation.

- **Originality Score:**
  - Based on the formula:
    \[
    \text{Originality} = 1 - \sum_{k} \left( \frac{\text{NCITED}_{i,k}}{\text{NCITED}_i} \right)^2
    \]
    where \(\text{NCITED}_{i,k}\) is the number of citations to IPC code \(k\) by patent \(i\), and \(\text{NCITED}_i\) is the total number of citations made by patent \(i\).

---

These queries help in understanding the data structure and preparing the computation for the originality score based on the diversity of 4-digit IPC codes from backward citations. Each query builds upon the previous ones, gradually moving from simple data retrieval to more complex aggregation and computation.Query:
SELECT "publication_number", "country_code", "kind_code", "grant_date"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 100;
Answer:
publication_number,country_code,kind_code,grant_date
CR-5634-A,CR,A,0
CR-5990-A,CR,A,0
FI-429-A,FI,A,0
HK-6083-A,HK,A,0
HU-T52763-A,HU,A,0
JP-H03206829-A,JP,A,0
JP-S62159089-A,JP,A,0
US-416-A,US,A,18370928
US-2528225-A,US,A,19501031
AT-A41580-A,AT,A,0
AT-A47682-A,AT,A,0
AT-A63682-A,AT,A,0
CA-920790-A,CA,A,19730213
CA-950907-A,CA,A,19740709
CA-920830-A,CA,A,19730213
CA-9086-A,CA,A,18780805
CH-3256-A,CH,A,0
CH-540255-A,CH,A,0
CH-433637-A,CH,A,0
CH-8494-A,CH,A,0
CH-9587-A,CH,A,0
CH-9968-A,CH,A,0
DD-8297-A,DD,A,0
FR-1334211-A,FR,A,19630802
FR-1444995-A,FR,A,19660708
FR-1474468-A,FR,A,19670324
FR-1478988-A,FR,A,19670428
FR-1485992-A,FR,A,19670623
FR-1487706-A,FR,A,19670707
FR-1508237-A,FR,A,19680105
GB-893001-A,GB,A,0
GB-873984-A,GB,A,0
GB-307790-A,GB,A,0
GB-534192-A,GB,A,0
HK-39487-A,HK,A,0
HK-52284-A,HK,A,0
HK-55992-A,HK,A,0
HK-60178-A,HK,A,0
HK-82486-A,HK,A,0
HU-T58725-A,HU,A,0
JP-S62157892-A,JP,A,0
JP-H06198910-A,JP,A,0
MA-42286-A,MA,A,0
OA-07542-A,OA,A,0
OA-08399-A,OA,A,0
PH-11723-A,PH,A,0
PH-15213-A,PH,A,0
PH-17928-A,PH,A,0
PH-23905-A,PH,A,0
TR-26506-A,TR,A,0
US-4613-A,US,A,18460702
US-4234270-A,US,A,19801118
US-6310-A,US,A,18490410
US-8947-A,US,A,18520511
YU-24971-A,YU,A,0
YU-51397-A,YU,A,0
YU-53588-A,YU,A,0
YU-94082-A,YU,A,0
AT-A134275-A,AT,A,0
AT-A160683-A,AT,A,0
AT-A168281-A,AT,A,0
AT-A179178-A,AT,A,0
AT-A196182-A,AT,A,0
AT-A202882-A,AT,A,0
AT-A205780-A,AT,A,0
AT-A245590-A,AT,A,0
AT-A250686-A,AT,A,0
AT-A269985-A,AT,A,0
AT-A272073-A,AT,A,0
AT-A312885-A,AT,A,0
AT-A404675-A,AT,A,0
AT-A482077-A,AT,A,0
AT-A519575-A,AT,A,0
AT-A710279-A,AT,A,0
AT-A735378-A,AT,A,0
AT-A876472-A,AT,A,0
AT-A906278-A,AT,A,0
BE-804534-A,BE,A,0
BE-806687-A,BE,A,0
BE-813367-A,BE,A,0
BE-823416-A,BE,A,0
BE-825816-A,BE,A,0
BE-833811-A,BE,A,0
BE-837312-A,BE,A,0
BE-837857-A,BE,A,0
BE-840231-A,BE,A,0
BE-848755-A,BE,A,0
BE-852837-A,BE,A,0
BE-853553-A,BE,A,0
BE-857395-A,BE,A,0
BE-861199-A,BE,A,0
BE-866723-A,BE,A,0
BE-868080-A,BE,A,0
BE-868938-A,BE,A,0
BE-869056-A,BE,A,0
BE-871421-A,BE,A,0
BE-873394-A,BE,A,0
BE-877768-A,BE,A,0
BE-885287-A,BE,A,0
BE-509322-A,BE,A,0
Query:
SELECT "publication_number", "country_code", "kind_code", "grant_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' 
  AND "kind_code" = 'B2' 
  AND "grant_date" BETWEEN 20150101 AND 20181231
LIMIT 100;
Answer:
publication_number,country_code,kind_code,grant_date
US-9096672-B2,US,B2,20150804
US-8975572-B2,US,B2,20150310
US-9345037-B2,US,B2,20160517
US-9416401-B2,US,B2,20160816
US-8968078-B2,US,B2,20150303
US-9297098-B2,US,B2,20160329
US-9311616-B2,US,B2,20160412
US-8938935-B2,US,B2,20150127
US-9208058-B2,US,B2,20151208
US-10164231-B2,US,B2,20181225
US-9144453-B2,US,B2,20150929
US-9240539-B2,US,B2,20160119
US-9084092-B2,US,B2,20150714
US-9178555-B2,US,B2,20151103
US-9241979-B2,US,B2,20160126
US-8992589-B2,US,B2,20150331
US-8976458-B2,US,B2,20150310
US-9589852-B2,US,B2,20170307
US-9275574-B2,US,B2,20160301
US-9143594-B2,US,B2,20150922
US-8997705-B2,US,B2,20150407
US-9293644-B2,US,B2,20160322
US-9048394-B2,US,B2,20150602
US-9558023-B2,US,B2,20170131
US-9259052-B2,US,B2,20160216
US-9088531-B2,US,B2,20150721
US-9365125-B2,US,B2,20160614
US-10052573-B2,US,B2,20180821
US-9266361-B2,US,B2,20160223
US-9376362-B2,US,B2,20160628
US-10059943-B2,US,B2,20180828
US-9502665-B2,US,B2,20161122
US-9534310-B2,US,B2,20170103
US-9442731-B2,US,B2,20160913
US-9190151-B2,US,B2,20151117
US-9376900-B2,US,B2,20160628
US-8984570-B2,US,B2,20150317
US-9212846-B2,US,B2,20151215
US-9088636-B2,US,B2,20150721
US-9608802-B2,US,B2,20170328
US-9432485-B2,US,B2,20160830
US-9217615-B2,US,B2,20151222
US-9301656-B2,US,B2,20160405
US-9162842-B2,US,B2,20151020
US-9300877-B2,US,B2,20160329
US-9179920-B2,US,B2,20151110
US-9633814-B2,US,B2,20170425
US-8977501-B2,US,B2,20150310
US-9401789-B2,US,B2,20160726
US-9332158-B2,US,B2,20160503
US-9577092-B2,US,B2,20170221
US-9474616-B2,US,B2,20161025
US-9189664-B2,US,B2,20151117
US-10087555-B2,US,B2,20181002
US-9275738-B2,US,B2,20160301
US-9434173-B2,US,B2,20160906
US-9439320-B2,US,B2,20160906
US-9643538-B2,US,B2,20170509
US-10155560-B2,US,B2,20181218
US-9554562-B2,US,B2,20170131
US-9528461-B2,US,B2,20161227
US-10082567-B2,US,B2,20180925
US-9564979-B2,US,B2,20170207
US-10011351-B2,US,B2,20180703
US-10027854-B2,US,B2,20180717
US-10011111-B2,US,B2,20180703
US-10119697-B2,US,B2,20181106
US-10134224-B2,US,B2,20181120
US-10059276-B2,US,B2,20180828
US-9126271-B2,US,B2,20150908
US-9086872-B2,US,B2,20150721
US-9358525-B2,US,B2,20160607
US-9393029-B2,US,B2,20160719
US-9089261-B2,US,B2,20150728
US-9334342-B2,US,B2,20160510
US-8951295-B2,US,B2,20150210
US-9440758-B2,US,B2,20160913
US-9167167-B2,US,B2,20151020
US-9150124-B2,US,B2,20151006
US-9428566-B2,US,B2,20160830
US-9457510-B2,US,B2,20161004
US-9033008-B2,US,B2,20150519
US-9378116-B2,US,B2,20160628
US-8957947-B2,US,B2,20150217
US-8975555-B2,US,B2,20150310
US-9362579-B2,US,B2,20160607
US-9015819-B2,US,B2,20150421
US-9171380-B2,US,B2,20151027
US-9182815-B2,US,B2,20151110
US-9156140-B2,US,B2,20151013
US-9277871-B2,US,B2,20160308
US-9007441-B2,US,B2,20150414
US-9026162-B2,US,B2,20150505
US-9086477-B2,US,B2,20150721
US-9296976-B2,US,B2,20160329
US-9240314-B2,US,B2,20160119
US-9208612-B2,US,B2,20151208
US-9486750-B2,US,B2,20161108
US-9402981-B2,US,B2,20160802
US-9058646-B2,US,B2,20150616
Query:
SELECT COUNT(*) AS "num_patents"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' 
  AND "kind_code" = 'B2' 
  AND "grant_date" BETWEEN 20150101 AND 20181231;
Answer:
num_patents
1549
Query:
SELECT "publication_number", "citation"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "citation" IS NOT NULL
LIMIT 10;
Answer:
Too long, hard cut:
publication_number,citation
US-2021279799-A1,"[
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-3941182-A"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-4973358-A"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""DE-4101630-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""WO-2006050367-A2"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2013315437-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2014166753-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""FR-3008429-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2015046490-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""CN-104851181-A"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""KR-20160081221-A"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2017011506-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2019028276-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2019134910-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2019253256-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": ""Banhart, John, Manufacturing Routes for Metallic Foams, 2000, JOM, 52, pp. 22-27 (https://www.tms.org/pubs/journals/JOM/0012/Banhart-0012.html) (Year: 2000)"",
    ""publication_number"": """",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": ""CN-104851181-A (machine translation) (Year: 2015)"",
    ""publication_number"": """",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": ""Prooftag SAS, Request of the Intellectual Property Enforcement Coordinator for Public Comments Regarding the Joint Strategic Plan, 24 March 2010, Prooftag, pp. 1-19 (Year: 2010)"",
    ""publication_number"": """",
    ""type"": """"
  }
]"
US-2021280503-A1,"[
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2009194852-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2016172309-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-9793222-B1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2019067208-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2020323077-A1"",
    ""type"": """"
  }
]"
US-2021370805-A1,"[
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2007228795-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text"": """",
    ""publication_number"": ""US-2009198405-A1"",
    ""type"": """"
  },
  {
    ""application_number"": """",
    ""category"": ""SEA"",
    ""filing_date"": 0,
    ""npl_text""
Query:
SELECT "publication_number", f.value AS "citation_entry"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
LIMIT 100;
Answer:
Too long, hard cut:
publication_number,citation_entry
IT-TO20100734-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""FR-2203337-A5"",
  ""type"": ""A""
}"
IT-TO20100734-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""WO-2010012628-A1"",
  ""type"": ""A""
}"
IT-PI20100017-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""WO-0192361-A1"",
  ""type"": ""X""
}"
IT-PI20100017-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""WO-03040700-A1"",
  ""type"": ""X""
}"
IT-PI20100017-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2004062854-A1"",
  ""type"": ""X""
}"
IT-TO20110369-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-4109733-A"",
  ""type"": ""XI""
}"
IT-TO20110369-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""GB-2106953-A"",
  ""type"": ""A""
}"
IT-TO20110369-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""DE-3919824-A1"",
  ""type"": ""A""
}"
IT-TO20080716-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""JP-H05283945-A"",
  ""type"": ""A""
}"
IT-TO20080716-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""EP-1132882-A2"",
  ""type"": ""A""
}"
IT-TO20080716-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2005264344-A1"",
  ""type"": ""X""
}"
IT-TO20080716-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2008100382-A1"",
  ""type"": ""A""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""GB-463048-A"",
  ""type"": ""X""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2861836-A"",
  ""type"": ""X""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""GB-2113623-A"",
  ""type"": ""X""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""FR-2780920-A1"",
  ""type"": ""X""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""GB-2340459-A"",
  ""type"": ""X""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""EP-1454783-A1"",
  ""type"": ""X""
}"
IT-TO20101059-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""DE-10346067-B3"",
  ""type"": ""X""
}"
IT-VR20110006-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-3028689-A"",
  ""type"": ""X""
}"
IT-VR20110006-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""DE-3643057-A1"",
  ""type"": ""X""
}"
IT-VR20110006-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-5546680-A"",
  ""type"": ""X""
}"
IT-VR20110006-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2005278979-A1"",
  ""type"": ""X""
}"
IT-VE20080082-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""GB-2248774-A"",
  ""type"": ""A""
}"
IT-VE20080082-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2005245627-A1"",
  ""type"": ""X""
}"
IT-VE20080082-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2007116775-A1"",
  ""type"": ""A""
}"
IT-RE20130072-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_d
Query:
SELECT "publication_number", f.value:"publication_number"::STRING AS "cited_publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
LIMIT 100;
Answer:
publication_number,cited_publication_number
AT-510213-A1,US-2006207123-A1
AT-501177-A1,DE-4308925-A1
AT-501177-A1,US-5593700-A
AT-501177-A1,US-6596113-B2
DE-10009425-A1,DE-3022091-C2
DE-10009425-A1,DE-3906270-A1
DE-10009425-A1,US-5785726-A
DE-10029498-A1,DE-4031886-A1
DE-10029498-A1,DE-19827296-A1
DE-10029498-A1,
DE-10036801-A1,EP-0135280-A2
DE-10036801-A1,US-4581429-A
DE-10036801-A1,WO-9813392-A1
DE-10036801-A1,DE-19845298-A1
DE-10036801-A1,DE-19858103-A1
DE-10040778-A1,EP-0137748-B1
DE-10040778-A1,EP-0436428-B1
DE-10103206-A1,DE-312793-C
DE-10103206-A1,DE-3415970-A1
DE-10103206-A1,DE-3733501-A1
DE-10103206-A1,
DE-10115608-A1,DE-69029653-T2
DE-10115608-A1,DE-19802643-A1
DE-10115608-A1,DE-10032232-A1
DE-10117333-A1,DE-1563389-A1
DE-10117333-A1,DE-3345272-A1
DE-10117333-A1,DE-19651281-C2
DE-10142528-A1,US-2635666-A
DE-10142528-A1,DE-1085721-B
DE-10142528-A1,US-3783922-A
DE-10149512-A1,EP-0704975-A1
DE-10149512-A1,DE-19701937-A1
DE-10149512-A1,US-5905391-A
DE-10149512-A1,US-5949262-A
DE-10149512-A1,US-6072846-A
DE-10150108-A1,DE-19841167-A1
DE-10155427-A1,EP-0768767-A2
DE-10155427-A1,JP-2000029563-A
DE-10155427-A1,US-6194926-B1
DE-10215170-A1,EP-0106782-B1
DE-10215170-A1,DE-4301006-A1
DE-10215170-A1,DE-4436457-A1
DE-10215170-A1,EP-0619439-B1
DE-10215170-A1,DE-19727705-C1
DE-10215170-A1,EP-1167806-A2
DE-10233359-A1,US-4446906-A
DE-10233359-A1,DE-4409750-A1
DE-10252863-A1,DE-29602329-U1
DE-10252863-A1,DE-19952021-C1
DE-10252863-A1,DE-10019054-C1
DE-10260433-A1,DE-3822193-A1
DE-10260433-A1,DE-19908822-A1
DE-10332052-A1,DE-3636645-A1
DE-10332052-A1,DE-3840704-A1
DE-10332052-A1,DE-3913969-A1
DE-10332052-A1,DE-4009182-A1
DE-10332052-A1,DE-19510237-A1
DE-10332052-A1,DE-19646438-A1
DE-10332052-A1,DE-19918736-A1
DE-10332872-A1,US-1698128-A
DE-10332872-A1,DE-1935020-U
DE-10332872-A1,US-3295156-A
DE-10332872-A1,WO-9703587-A1
DE-10332872-A1,WO-0143584-A1
DE-19513560-A1,DE-839944-C
DE-19513560-A1,JP-S55125132-A
DE-19513560-A1,DE-3120782-A1
DE-19513560-A1,DE-3701346-A1
DE-19642543-A1,DE-329279-C
DE-19642543-A1,DE-358474-C
DE-19642543-A1,DE-806210-C
DE-19642543-A1,DE-8710048-U1
DE-19727122-A1,US-5021654-A
DE-19727122-A1,US-5235182-A
DE-19727122-A1,DE-19515270-A1
DE-19749873-A1,DE-4443053-A1
DE-19749873-A1,
DE-19749873-A1,
DE-19802757-A1,DE-2401899-A1
DE-19802757-A1,DE-2811392-A1
DE-19802757-A1,DE-3907273-A1
DE-19802757-A1,DE-4013775-A1
DE-19802757-A1,DE-19623869-A1
DE-19839928-A1,DE-8705592-U1
DE-19839928-A1,DE-9206130-U1
DE-19839928-A1,DE-4221137-A1
DE-19839928-A1,DE-4407967-C2
DE-19856877-A1,US-4346144-A
DE-19856877-A1,
EP-1059503-A1,FR-836197-A
EP-1059503-A1,EP-0040871-A2
EP-1059503-A1,US-4437384-A
EP-1059503-A1,GB-2140537-A
EP-1059503-A1,DE-4131861-A1
EP-1101198-A1,
EP-1101198-A1,
EP-1192537-A1,
EP-1198488-A1,
EP-1215312-A1,US-4163927-A
EP-1215312-A1,US-4272868-A
Query:
SELECT t."publication_number", f.value:"publication_number"::STRING AS "cited_publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
WHERE f.value:"publication_number" IS NOT NULL
LIMIT 100;
Answer:
publication_number,cited_publication_number
WO-2017120317-A1,US-2011303586-A1
WO-2017120317-A1,US-2012058500-A1
WO-2017120317-A1,US-2012315690-A1
WO-2017127291-A1,US-7702597-B2
WO-2017127291-A1,US-2015370935-A1
WO-2017127659-A1,US-2005150688-A1
WO-2017127659-A1,US-2009133929-A1
WO-2017127659-A1,US-2011162892-A1
WO-2017127659-A1,US-2013032398-A1
WO-2017127659-A1,US-2015308235-A1
WO-2017136263-A1,US-2003056371-A1
WO-2017136263-A1,US-2011302783-A1
WO-2017136263-A1,DE-202014007647-U1
WO-2017136263-A1,US-2015202705-A1
WO-2017136263-A1,
WO-2017142834-A1,US-85919-A
WO-2017142834-A1,WO-9012565-A1
WO-2017142834-A1,US-2007269502-A1
WO-2017142834-A1,EP-2246327-A1
WO-2017142834-A1,CN-102949343-A
WO-2017142834-A1,CN-103622912-A
WO-2017142834-A1,
WO-2018169530-A1,GB-1292953-A
WO-2018169530-A1,US-3780003-A
WO-2018169530-A1,US-3893988-A
WO-2018169530-A1,US-3927203-A
WO-2018169530-A1,US-4260701-A
WO-2018169530-A1,US-4495172-A
WO-2018169530-A1,US-4669491-A
WO-2018169530-A1,US-4871534-A
WO-2018169530-A1,US-5098696-A
WO-2018169530-A1,US-5127414-A
WO-2018169530-A1,US-6051242-A
WO-2018169530-A1,US-6455033-B1
WO-2018169530-A1,US-6818207-B1
WO-2018169530-A1,US-7622511-B1
WO-2018169530-A1,
WO-2018169530-A1,
WO-2018169530-A1,
WO-2017205009-A1,US-2005066146-A1
WO-2017205009-A1,US-2008028197-A1
WO-2017205009-A1,US-2008148029-A1
WO-2017205009-A1,US-2009128572-A1
WO-2017205009-A1,US-2012259904-A1
WO-2017205009-A1,
WO-2017214099-A1,US-4599392-A
WO-2017214099-A1,US-4988781-A
WO-2017214099-A1,US-5756659-A
WO-2017214099-A1,US-5938437-A
WO-2017214099-A1,WO-2005090427-A2
WO-2017214099-A1,US-2005271888-A1
WO-2017214099-A1,US-2006199930-A1
WO-2017214099-A1,US-7355089-B2
WO-2017214099-A1,US-7504347-B2
WO-2017214099-A1,US-7514517-B2
WO-2017214099-A1,US-7524911-B2
WO-2017214099-A1,US-7579408-B2
WO-2017214099-A1,US-7582716-B2
WO-2017214099-A1,US-7763676-B2
WO-2017214099-A1,US-7935755-B2
WO-2017214099-A1,WO-2011149706-A1
WO-2017214099-A1,US-8455576-B2
WO-2017214099-A1,
WO-2017214099-A1,
WO-2017218485-A1,EP-1482680-A1
WO-2017218485-A1,GB-2488059-A
WO-2017218485-A1,US-2013117138-A1
WO-2017218485-A1,US-2014324687-A1
WO-2017218485-A1,US-2015134539-A1
WO-2017223041-A1,US-2008258077-A1
WO-2017223041-A1,US-2014287941-A1
WO-2017223041-A1,US-2015034810-A1
WO-2017223041-A1,JP-2015200693-A
WO-2017223041-A1,
WO-2017223041-A1,
WO-2018017413-A1,US-2006087739-A1
WO-2018017413-A1,US-2007211344-A1
WO-2018017413-A1,US-7683450-B2
WO-2018017413-A1,WO-2011119414-A1
WO-2018017413-A1,US-8153241-B2
WO-2018017413-A1,US-2012196133-A1
WO-2018017413-A1,US-8399110-B2
WO-2018017413-A1,US-2015253477-A1
WO-2019040086-A1,US-5449543-A
WO-2019040086-A1,US-5797230-A
WO-2019040086-A1,US-2003068472-A1
WO-2019040086-A1,US-2011195230-A1
WO-2019040086-A1,WO-2015067440-A1
WO-2018048690-A1,US-3024170-A
WO-2018048690-A1,US-4230533-A
WO-2018048690-A1,US-4740273-A
WO-2018048690-A1,WO-9617665-A1
WO-2018048690-A1,WO-2013083618-A1
WO-2018048690-A1,
WO-2018048690-A1,
WO-2018075308-A1,US-2004018203-A1
WO-2018075308-A1,US-2015225484-A1
WO-2018075308-A1,US-2015328314-A1
WO-2018075529-A1,US-2007143765-A1
WO-2018075529-A1,WO-2009146721-A1
Query:
SELECT 
    t."publication_number", 
    f.value:"publication_number"::STRING AS "cited_publication_number", 
    f.value:"country_code"::STRING AS "cited_country_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") f
WHERE f.value:"publication_number" IS NOT NULL
LIMIT 100;
Answer:
publication_number,cited_publication_number,cited_country_code
IT-MI20100845-A1,US-1654188-A,
IT-MI20100845-A1,US-2506292-A,
IT-MI20100845-A1,DE-4307918-A1,
IT-MI20100845-A1,DE-19810417-A1,
IT-MI20100845-A1,WO-2008068591-A2,
IT-VI20090183-A1,CH-326215-A,
IT-VI20090183-A1,US-5134380-A,
IT-VI20090183-A1,US-5216409-A,
IT-VI20090183-A1,US-5736637-A,
IT-VI20090183-A1,EP-1411348-A1,
IT-TO20100206-A1,DE-1580149-A1,
IT-TO20100206-A1,DE-10252996-A1,
IT-TO20100206-A1,FR-2865440-A1,
IT-TO20100206-A1,DE-102004046678-A1,
IT-TO20100206-A1,FR-2895705-A1,
IT-PZ20150004-A1,,
IT-PZ20150004-A1,,
IT-PZ20150004-A1,,
IT-PZ20150004-A1,,
IT-PZ20150004-A1,,
IT-UA20161603-A1,AU-551882-B2,
IT-UA20161603-A1,EP-1881576-A1,
IT-UA20161603-A1,GB-2465609-A,
IT-UA20161603-A1,US-2013029541-A1,
IT-UA20161603-A1,DE-102013101120-A1,
IT-UA20161603-A1,US-2015200530-A1,
IT-BO20080517-A1,DE-3030931-A1,
IT-BO20080517-A1,US-5467567-A,
IT-BO20080517-A1,US-5572847-A,
IT-BO20080517-A1,EP-0744497-A1,
IT-BO20080517-A1,DE-19732904-A1,
IT-BO20080517-A1,EP-1072726-A1,
IT-BO20080731-A1,FR-2781409-A1,
IT-BO20080731-A1,US-2002158357-A1,
IT-UB20160960-A1,US-6481795-B1,
IT-UB20160960-A1,US-2009230743-A1,
IT-UB20160960-A1,EP-2653196-A2,
IT-UB20160960-A1,WO-2014085732-A1,
IT-TO20090280-A1,DE-1238299-B,
IT-TO20090280-A1,US-3358522-A,
IT-TO20090280-A1,US-5083984-A,
IT-TO20090280-A1,US-5277667-A,
IT-TO20090280-A1,GB-2348262-A,
IT-UB20160584-A1,US-668479-A,
IT-UB20160584-A1,US-968952-A,
IT-UB20160584-A1,US-1043743-A,
IT-UB20160584-A1,US-1305661-A,
IT-MI20101275-A1,DE-1034672-B,
IT-MI20101275-A1,US-3630639-A,
IT-MI20101275-A1,EP-0039977-A1,
IT-MI20101275-A1,US-2005092392-A1,
IT-MI20101275-A1,DE-10362075-A1,
IT-MI20101275-A1,WO-2010028852-A2,
IT-VA20090003-A1,EP-0737566-A1,
IT-VA20090003-A1,WO-0043272-A1,
IT-VA20090003-A1,WO-2004087527-A1,
IT-VA20090003-A1,EP-1619137-A1,
IT-VA20090003-A1,WO-2008086388-A1,
IT-VA20090003-A1,DE-202008009634-U1,
IT-RM20080370-A1,US-3406618-A,
IT-RM20080370-A1,US-4131406-A,
IT-RM20080370-A1,US-4231677-A,
IT-RM20080370-A1,US-5033906-A,
IT-RM20080370-A1,WO-0066857-A1,
IT-RM20080370-A1,US-6595768-B1,
IT-TV20130044-A1,US-5144899-A,
IT-TV20130044-A1,JP-H05272046-A,
IT-TV20130044-A1,WO-2004058415-A1,
IT-TV20130044-A1,US-2004221780-A1,
IT-TV20130044-A1,US-2005178309-A1,
IT-TV20130044-A1,US-6957614-B1,
IT-TV20130044-A1,US-2011297062-A1,
IT-MI20091791-A1,WO-9822370-A1,
IT-MI20091791-A1,US-6182823-B1,
IT-MI20091791-A1,JP-2002059987-A,
IT-MI20091791-A1,WO-0221531-A1,
IT-MI20091791-A1,JP-2002345740-A,
IT-MI20091791-A1,DE-20216034-U1,
IT-MI20091791-A1,JP-2004352365-A,
IT-MI20091791-A1,DE-10323914-A1,
IT-MI20091791-A1,JP-2007112473-A,
IT-MI20091791-A1,US-2008135430-A1,
IT-UB20160009-A1,US-4168924-A,
IT-UB20160009-A1,US-4288956-A,
IT-UB20160009-A1,EP-0059466-A1,
IT-UB20160009-A1,DE-3102120-A1,
IT-UB20160009-A1,DE-3445187-A1,
IT-UB20160009-A1,WO-9316247-A1,
AT-514400-A1,DE-10149649-A1,
AT-514400-A1,WO-2011024177-A1,
CH-712732-A1,EP-0507299-A2,
CH-712732-A1,US-5640508-A,
CH-712732-A1,US-2004199817-A1,
CH-712732-A1,US-2010287421-A1,
CH-712732-A1,,
FR-2894722-A1,GB-1247790-A,
FR-2894722-A1,EP-0059939-A1,
FR-2894722-A1,DE-3413740-A1,
FR-2894722-A1,EP-0802580-A1,
FR-2894722-A1,WO-03005491-A1,
Query:
SELECT
    t."publication_number"
FROM (
    SELECT
        t."publication_number",
        1 - SUM(POWER(cnt_per_ipc4 * 1.0 / total_citations, 2)) AS "originality_score"
    FROM (
        SELECT
            t."publication_number",
            SUBSTRING(ipc_f.value:"code"::STRING, 0, 4) AS ipc4,
            COUNT(*) OVER (PARTITION BY t."publication_number") AS total_citations,
            COUNT(*) OVER (PARTITION BY t."publication_number", SUBSTRING(ipc_f.value:"code"::STRING, 0, 4)) AS cnt_per_ipc4
        FROM
            PATENTS.PATENTS.PUBLICATIONS AS t
            CROSS JOIN LATERAL FLATTEN(input => t."citation") f
            LEFT JOIN PATENTS.PATENTS.PUBLICATIONS AS cited ON f.value:"publication_number"::STRING = cited."publication_number"
            LEFT JOIN LATERAL FLATTEN(input => cited."ipc") ipc_f ON TRUE
        WHERE
            t."country_code" = 'US'
            AND f.value:"publication_number" IS NOT NULL
            AND ipc_f.value:"code" IS NOT NULL
    ) sub
    GROUP BY
        t."publication_number"
) orig_scores
ORDER BY
    "originality_score" DESC
LIMIT 1;
Answer:
000904 (42000): 01b9ea73-0004-8094-0001-11c300f8f532: SQL compilation error: error line 5 at position 8
invalid identifier 'T."publication_number"'Query:
SELECT
    t."publication_number" AS "Publication_Number",
    c.value:"publication_number"::STRING AS "Cited_Publication_Number",
    SUBSTRING(ipc.value:"code"::STRING, 1, 4) AS "IPC4_Code"
FROM
    PATENTS.PATENTS.PUBLICATIONS AS t
    , TABLE(FLATTEN(input => t."citation")) AS c
    LEFT JOIN PATENTS.PATENTS.PUBLICATIONS AS cited
        ON cited."publication_number" = c.value:"publication_number"::STRING
    , TABLE(FLATTEN(input => cited."ipc")) AS ipc
WHERE
    t."country_code" = 'US'
    AND t."kind_code" = 'B2'
    AND t."grant_date" BETWEEN 20150101 AND 20181231
    AND c.value:"publication_number" IS NOT NULL
    AND ipc.value:"code" IS NOT NULL
LIMIT 100;
Answer:
000603 (XX000): None: SQL execution internal error:
Processing aborted due to error 300010:391167117; incident 7667868.Query:
CREATE OR REPLACE TEMPORARY TABLE us_b2_patents AS
SELECT
    "publication_number",
    "citation"
FROM
    PATENTS.PATENTS.PUBLICATIONS
WHERE
    "country_code" = 'US'
    AND "kind_code" = 'B2'
    AND "grant_date" BETWEEN 20150101 AND 20181231
    AND "citation" IS NOT NULL;
Answer:
090105 (22000): 01b9ea79-0004-809b-0001-11c300f911b2: Cannot perform CREATE TEMPTABLE. This session does not have a current database. Call 'USE DATABASE', or use a qualified name.Query:
SELECT
    t."publication_number" AS "Publication_Number",
    COUNT(DISTINCT SUBSTRING(ipc_codes.value:"code"::STRING, 1, 4)) AS num_unique_ipc4
FROM
    PATENTS.PATENTS.PUBLICATIONS AS t
    , TABLE(FLATTEN(input => t."citation")) AS c
    INNER JOIN PATENTS.PATENTS.PUBLICATIONS AS cited
        ON cited."publication_number" = c.value:"publication_number"::STRING
    , TABLE(FLATTEN(input => cited."ipc")) AS ipc_codes
WHERE
    t."country_code" = 'US'
    AND t."kind_code" = 'B2'
    AND ipc_codes.value:"code" IS NOT NULL
GROUP BY
    t."publication_number"
ORDER BY
    num_unique_ipc4 DESC
LIMIT 1;
Answer:
Publication_Number,NUM_UNIQUE_IPC4
US-11284898-B2,14
Query:
-- Corrected SQL 2
WITH citations AS (
    SELECT
        f.value:"publication_number"::STRING AS "cited_publication_number"
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."citation") f
    WHERE
        f.value:"publication_number" IS NOT NULL
),
ipc_codes AS (
    SELECT
        SUBSTRING(ipc.value:"code"::STRING, 1, 4) AS "ipc4"
    FROM PATENTS.PATENTS.PUBLICATIONS cp
    JOIN citations c ON cp."publication_number" = c."cited_publication_number",
         LATERAL FLATTEN(input => cp."ipc") ipc
    WHERE
        ipc.value:"code" IS NOT NULL
),
proportions AS (
    SELECT
        "ipc4",
        COUNT(*) AS "citation_count",
        COUNT(*) * 1.0 / SUM(COUNT(*)) OVER () AS "proportion"
    FROM ipc_codes
    GROUP BY "ipc4"
)
SELECT
    1 - SUM(POWER("proportion", 2)) AS "originality_score"
FROM proportions
Answer:
originality_score
0.986287918294
Query:
-- Corrected SQL 3
WITH citations AS (
    SELECT
        t."publication_number",
        f.value:"publication_number"::STRING AS "cited_publication_number"
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."citation") f
    WHERE
        t."country_code" = 'US'
        AND t."kind_code" = 'B2'
        AND f.value:"publication_number" IS NOT NULL
),
ipc_codes AS (
    SELECT
        c."publication_number",
        SUBSTRING(ipc.value:"code"::STRING, 1, 4) AS "ipc4"
    FROM citations c
    JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c."cited_publication_number",
         LATERAL FLATTEN(input => cp."ipc") ipc
    WHERE
        ipc.value:"code" IS NOT NULL
),
originality_scores AS (
    SELECT
        "publication_number",
        1 - SUM(POWER("proportion", 2)) AS "originality_score"
    FROM (
        SELECT
            "publication_number",
            "ipc4",
            COUNT(*) AS "citation_count",
            COUNT(*) * 1.0 / SUM(COUNT(*)) OVER (PARTITION BY "publication_number") AS "proportion"
        FROM ipc_codes
        GROUP BY "publication_number", "ipc4"
    ) sub
    GROUP BY "publication_number"
)
SELECT
    "publication_number",
    "originality_score"
FROM originality_scores
ORDER BY "originality_score" DESC
LIMIT 1
Answer:
publication_number,originality_score
US-8676437-B2,0.859504413223
End Exploring Related Columns
Task: What is the publication number of US patent under the B2 classification granted during 2015 to 2018, with the highest originality score based on the diversity of 4-digits IPC codes from its backward citations?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: The publication number of the U.S. patent under the B2 classification granted during 2015 to 2018 with the highest originality score based on the diversity of 4-digit IPC codes from its backward citations is:

```csv
Publication_Number
number:str
(Attention: answer in one row)
```.
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'PATENTS': {'PATENTS': ['CPC_DEFINITION', 'DISCLOSURES_13', 'PUBLICATIONS']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-24 02:05:52 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 02:05:52 - root - INFO - The publication number of the U.S. patent under the B2 classification granted during 2015 to 2018 with the highest originality score based on the diversity of 4-digit IPC codes from its backward citations is:

```sql
SELECT
    orig_scores."citing_publication_number" AS "Publication_Number"
FROM (
    SELECT
        cp."citing_publication_number",
        1 - SUM(POWER(cnt_per_ipc4 * 1.0 / total_citations, 2)) AS "originality_score"
    FROM (
        SELECT
            cp."citing_publication_number",
            "ipc4",
            COUNT(*) AS cnt_per_ipc4,
            SUM(COUNT(*)) OVER (PARTITION BY cp."citing_publication_number") AS total_citations
        FROM (
            SELECT
                cp."citing_publication_number",
                SUBSTRING(ipc.value:"code"::STRING, 1, 4) AS "ipc4"
            FROM (
                SELECT
                    t."publication_number" AS "citing_publication_number",
                    c.value:"publication_number"::STRING AS "cited_publication_number"
                FROM "PATENTS"."PATENTS"."PUBLICATIONS" AS t,
                     LATERAL FLATTEN(input => t."citation") AS c
                WHERE t."country_code" = 'US'
                  AND t."kind_code" = 'B2'
                  AND t."grant_date" BETWEEN 20150101 AND 20181231
                  AND c.value:"publication_number" IS NOT NULL
            ) AS cp
            LEFT JOIN "PATENTS"."PATENTS"."PUBLICATIONS" AS t_cited
                ON t_cited."publication_number" = cp."cited_publication_number"
            LEFT JOIN LATERAL FLATTEN(input => t_cited."ipc") AS ipc
                ON TRUE
            WHERE ipc.value:"code" IS NOT NULL
        ) AS ipc_data
        GROUP BY cp."citing_publication_number", "ipc4"
    ) AS ipc_counts
    GROUP BY cp."citing_publication_number"
) AS orig_scores
ORDER BY "originality_score" DESC NULLS LAST
LIMIT 1;
```
2025-01-24 02:05:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 02:05:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 02:05:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 02:05:53 - snowflake.connector.connection - INFO - closed
2025-01-24 02:05:53 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 02:05:54 - root - INFO - itercount: 1
2025-01-24 02:05:54 - root - INFO - 000904 (42000): 01b9ea7d-0004-809b-0001-11c300f911fe: SQL compilation error: error line 9 at position 12
invalid identifier 'CP."citing_publication_number"'
2025-01-24 02:05:54 - root - INFO - Input sql:
SELECT
    orig_scores."citing_publication_number" AS "Publication_Number"
FROM (
    SELECT
        cp."citing_publication_number",
        1 - SUM(POWER(cnt_per_ipc4 * 1.0 / total_citations, 2)) AS "originality_score"
    FROM (
        SELECT
            cp."citing_publication_number",
            "ipc4",
            COUNT(*) AS cnt_per_ipc4,
            SUM(COUNT(*)) OVER (PARTITION BY cp."citing_publication_number") AS total_citations
        FROM (
            SELECT
                cp."citing_publication_number",
                SUBSTRING(ipc.value:"code"::STRING, 1, 4) AS "ipc4"
            FROM (
                SELECT
                    t."publication_number" AS "citing_publication_number",
                    c.value:"publication_number"::STRING AS "cited_publication_number"
                FROM "PATENTS"."PATENTS"."PUBLICATIONS" AS t,
                     LATERAL FLATTEN(input => t."citation") AS c
                WHERE t."country_code" = 'US'
                  AND t."kind_code" = 'B2'
                  AND t."grant_date" BETWEEN 20150101 AND 20181231
                  AND c.value:"publication_number" IS NOT NULL
            ) AS cp
            LEFT JOIN "PATENTS"."PATENTS"."PUBLICATIONS" AS t_cited
                ON t_cited."publication_number" = cp."cited_publication_number"
            LEFT JOIN LATERAL FLATTEN(input => t_cited."ipc") AS ipc
                ON TRUE
            WHERE ipc.value:"code" IS NOT NULL
        ) AS ipc_data
        GROUP BY cp."citing_publication_number", "ipc4"
    ) AS ipc_counts
    GROUP BY cp."citing_publication_number"
) AS orig_scores
ORDER BY "originality_score" DESC NULLS LAST
LIMIT 1;
The error information is:
000904 (42000): 01b9ea7d-0004-809b-0001-11c300f911fe: SQL compilation error: error line 9 at position 12
invalid identifier 'CP."citing_publication_number"'
Please correct it and output only 1 complete SQL query.
2025-01-24 02:06:43 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 02:06:43 - root - INFO - ```sql
WITH citations AS (
    SELECT
        t."publication_number" AS "citing_publication_number",
        c.value:"publication_number"::STRING AS "cited_publication_number"
    FROM "PATENTS"."PATENTS"."PUBLICATIONS" AS t,
         LATERAL FLATTEN(input => t."citation") AS c
    WHERE t."country_code" = 'US'
      AND t."kind_code" = 'B2'
      AND t."grant_date" BETWEEN 20150101 AND 20181231
      AND c.value:"publication_number" IS NOT NULL
),
cited_ipc AS (
    SELECT
        c."citing_publication_number",
        SUBSTRING(ipc.value:"code"::STRING, 1, 4) AS "ipc4"
    FROM citations c
    LEFT JOIN "PATENTS"."PATENTS"."PUBLICATIONS" AS cited
        ON cited."publication_number" = c."cited_publication_number"
    , LATERAL FLATTEN(input => cited."ipc") ipc
    WHERE ipc.value:"code" IS NOT NULL
),
ipc_counts AS (
    SELECT
        "citing_publication_number",
        "ipc4",
        COUNT(*) AS cnt_per_ipc4,
        SUM(COUNT(*)) OVER (PARTITION BY "citing_publication_number") AS total_citations
    FROM cited_ipc
    GROUP BY "citing_publication_number", "ipc4"
),
originality_scores AS (
    SELECT
        "citing_publication_number",
        1 - SUM(POWER(cnt_per_ipc4 * 1.0 / total_citations, 2)) AS "originality_score"
    FROM ipc_counts
    GROUP BY "citing_publication_number"
)
SELECT
    "citing_publication_number" AS "Publication_Number"
FROM originality_scores
ORDER BY "originality_score" DESC NULLS LAST
LIMIT 1;
```
2025-01-24 02:06:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 02:06:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 02:06:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 02:06:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-24 02:06:44 - snowflake.connector.connection - INFO - closed
2025-01-24 02:06:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 02:06:45 - root - INFO - itercount: 2
2025-01-24 02:06:45 - root - INFO - 0
2025-01-24 02:06:45 - root - INFO - results: 
Publication_Number
US-9121016-B2


2025-01-24 02:06:45 - root - INFO - Please check the answer again by reviewing What is the publication number of US patent under the B2 classification granted during 2015 to 2018, with the highest originality score based on the diversity of 4-digits IPC codes from its backward citations?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: The publication number of the U.S. patent under the B2 classification granted during 2015 to 2018 with the highest originality score based on the diversity of 4-digit IPC codes from its backward citations is:

```csv
Publication_Number
number:str
(Attention: answer in one row)
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Publication_Number
US-9121016-B2
Current sql:
WITH citations AS (
    SELECT
        t."publication_number" AS "citing_publication_number",
        c.value:"publication_number"::STRING AS "cited_publication_number"
    FROM "PATENTS"."PATENTS"."PUBLICATIONS" AS t,
         LATERAL FLATTEN(input => t."citation") AS c
    WHERE t."country_code" = 'US'
      AND t."kind_code" = 'B2'
      AND t."grant_date" BETWEEN 20150101 AND 20181231
      AND c.value:"publication_number" IS NOT NULL
),
cited_ipc AS (
    SELECT
        c."citing_publication_number",
        SUBSTRING(ipc.value:"code"::STRING, 1, 4) AS "ipc4"
    FROM citations c
    LEFT JOIN "PATENTS"."PATENTS"."PUBLICATIONS" AS cited
        ON cited."publication_number" = c."cited_publication_number"
    , LATERAL FLATTEN(input => cited."ipc") ipc
    WHERE ipc.value:"code" IS NOT NULL
),
ipc_counts AS (
    SELECT
        "citing_publication_number",
        "ipc4",
        COUNT(*) AS cnt_per_ipc4,
        SUM(COUNT(*)) OVER (PARTITION BY "citing_publication_number") AS total_citations
    FROM cited_ipc
    GROUP BY "citing_publication_number", "ipc4"
),
originality_scores AS (
    SELECT
        "citing_publication_number",
        1 - SUM(POWER(cnt_per_ipc4 * 1.0 / total_citations, 2)) AS "originality_score"
    FROM ipc_counts
    GROUP BY "citing_publication_number"
)
SELECT
    "citing_publication_number" AS "Publication_Number"
FROM originality_scores
ORDER BY "originality_score" DESC NULLS LAST
LIMIT 1;
2025-01-24 02:07:08 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 02:07:08 - root - INFO - The publication number of the U.S. patent under the B2 classification granted during 2015 to 2018 with the highest originality score based on the diversity of 4-digit IPC codes from its backward citations is:

```csv
Publication_Number
US-9121016-B2
```
2025-01-24 02:07:08 - root - INFO - []
2025-01-24 02:07:08 - root - INFO - The publication number of the U.S. patent under the B2 classification granted during 2015 to 2018 with the highest originality score based on the diversity of 4-digit IPC codes from its backward citations is:

```csv
Publication_Number
US-9121016-B2
```
2025-01-24 02:07:08 - root - INFO - Total iteration counts: 2
