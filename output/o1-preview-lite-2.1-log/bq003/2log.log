2025-01-27 21:21:25 - openai._base_client - INFO - Retrying request to /chat/completions in 0.404919 seconds
2025-01-27 21:22:07 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 21:23:00 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 21:23:00 - root - INFO - ```sql
WITH purchase_stats AS (
  SELECT
    FORMAT_DATE('%b-%Y', PARSE_DATE('%Y%m%d', date)) AS Month,
    COUNT(DISTINCT fullVisitorId) AS num_visitors,
    SUM(totals.pageviews) AS total_pageviews
  FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
  WHERE
    totals.transactions > 0
    AND _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
  GROUP BY
    Month
),
nonpurchase_stats AS (
  SELECT
    FORMAT_DATE('%b-%Y', PARSE_DATE('%Y%m%d', date)) AS Month,
    COUNT(DISTINCT fullVisitorId) AS num_visitors,
    SUM(totals.pageviews) AS total_pageviews
  FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
  WHERE
    (totals.transactions IS NULL OR totals.transactions = 0)
    AND _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
  GROUP BY
    Month
)
SELECT
  COALESCE(p.Month, np.Month) AS Month,
  SAFE_DIVIDE(p.total_pageviews, p.num_visitors) AS Average_Pageviews_Per_Visitor_Purchase_Sessions,
  SAFE_DIVIDE(np.total_pageviews, np.num_visitors) AS Average_Pageviews_Per_Visitor_NonPurchase_Sessions
FROM
  purchase_stats p
FULL OUTER JOIN
  nonpurchase_stats np
ON p.Month = np.Month
ORDER BY
  PARSE_DATE('%b-%Y', COALESCE(p.Month, np.Month));
```
2025-01-27 21:24:33 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 21:24:33 - root - INFO - SQL:
WITH purchase_stats AS (
  SELECT
    FORMAT_DATE('%b-%Y', PARSE_DATE('%Y%m%d', date)) AS Month,
    COUNT(DISTINCT fullVisitorId) AS num_visitors,
    SUM(totals.pageviews) AS total_pageviews
  FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
  WHERE
    totals.transactions > 0
    AND _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
  GROUP BY
    Month
),
nonpurchase_stats AS (
  SELECT
    FORMAT_DATE('%b-%Y', PARSE_DATE('%Y%m%d', date)) AS Month,
    COUNT(DISTINCT fullVisitorId) AS num_visitors,
    SUM(totals.pageviews) AS total_pageviews
  FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
  WHERE
    (totals.transactions IS NULL OR totals.transactions = 0)
    AND _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
  GROUP BY
    Month
)
SELECT
  COALESCE(p.Month, np.Month) AS Month,
  SAFE_DIVIDE(p.total_pageviews, p.num_visitors) AS Average_Pageviews_Per_Visitor_Purchase_Sessions,
  SAFE_DIVIDE(np.total_pageviews, np.num_visitors) AS Average_Pageviews_Per_Visitor_NonPurchase_Sessions
FROM
  purchase_stats p
FULL OUTER JOIN
  nonpurchase_stats np
ON p.Month = np.Month
ORDER BY
  PARSE_DATE('%b-%Y', COALESCE(p.Month, np.Month));
Results:
Month,Average_Pageviews_Per_Visitor_Purchase_Sessions,Average_Pageviews_Per_Visitor_NonPurchase_Sessions
Apr-2017,25.889655172413793,3.9798882277405
May-2017,23.61137440758294,4.446640392565975
Jun-2017,25.735763097949885,4.074559876184948
Jul-2017,27.720954356846473,4.191840874707743

2025-01-27 21:24:36 - root - INFO - SQL:
SELECT DISTINCT
    fullVisitorId
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170601' AND '20170630'
    AND fullVisitorId IS NOT NULL
LIMIT 100
Results:
fullVisitorId
9360633006498929847
7806950251446529341
4054257133014680116
6216704296990011635
3397610502524811924
3024604175831545813
3295018661361045041
1580383424602281338
9025138844201073062
3147342618739796829
3106876994416910527
2708904124166541970
9978168680595402110
5275775064063360620
8948603980388395747
0102527091741838919
5163583516335012312
6433335740023478596
0616530401183877867
8540727781618255431
7614754259965350887
4771562245452001312
2643945659489447376
1654123811097330881
2833722119498685942
5423437990262090686
5182834157628720649
4116720743881459837
4102118060900872415
5408240703525920538
2019475323321472449
5811368078800551365
1448804382547115644
6981327168047231026
6818733154977508907
1929825906857788866
4943391671462674780
0445330545116237877
1390832589475698965
7498695963354635199
1874362581208539474
6409706937264223608
4197827579135539744
9483984397746763720
346885686921823722
2421079405718443269
0040167112632479499
053290547587561700
5224340584514824287
5733692207901219261
6334752200433896374
59610610245489730
7604240739225278642
5740507455576555700
3587322123098196368
5633567733894973104
4215347458239853405
797570140181406249
2329907261017199121
4236804695584389388
2609662723174562105
7955119319945903918
1453691519754231663
0585429360683727579
118693013666336005
5099152215575652082
3321468456507455052
1967714500985800234
9886185329436227725
5147671905670825040
2617130631644928720
7337032665655052118
8625893538363280348
2396474645403671421
0574532869120704768
1780164102560353072
195211903498796959
885414612950156758
6786078921190711272
5108822671423693111
7987988291009067421
4070011008028471596
4791434072523951564
0080174123526113575
4995571571321873996
1394944415824242197
1565336502487513164
9099665130358829858
7332435401058074359
667986354481650626
5683375032802593078
1089302353269042996
7871589494395627666
5028628847906015742
9123880248743158224
5945853845194254234
7445235885559107095
2915046804632479934
1017891555036502730
3572645318086002757

2025-01-27 21:24:40 - root - INFO - SQL:
SELECT
    date,
    COUNT(*) AS session_count
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170501' AND '20170531'
    AND date IS NOT NULL
GROUP BY
    date
LIMIT 100
Results:
date,session_count
20170506,1383
20170502,2564
20170522,2248
20170525,2228
20170510,2024
20170503,2588
20170504,2806
20170526,2009
20170527,1502
20170524,2406
20170508,2025
20170514,1290
20170511,2218
20170523,2129
20170507,1400
20170520,1855
20170519,2223
20170530,2199
20170528,1463
20170505,1960
20170512,1932
20170509,2108
20170513,1251
20170517,3117
20170515,2360
20170521,1645
20170501,2588
20170529,1745
20170518,2715
20170531,2292
20170516,3098

2025-01-27 21:24:43 - root - INFO - SQL:
SELECT
    fullVisitorId,
    date,
    totals.pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'
    AND totals.transactions > 0
    AND totals.pageviews IS NOT NULL
LIMIT 100
Results:
fullVisitorId,date,pageviews
0548744394505098293,20170725,16
0652202420147185334,20170725,17
8277644417832306861,20170725,18
5763555354582854124,20170725,17
452384137560800015,20170725,17
7731162068091223593,20170725,22
4921798700570421930,20170725,20
6968323948324124881,20170725,21
3454415788904146693,20170725,25
8528973034561269758,20170725,20
689318192161645703,20170725,24
3156235512146749592,20170725,25
165109760635455356,20170725,25
3273268557987890623,20170725,25
1563065767696461622,20170725,21
4140153693332318188,20170725,24
7115815619589342932,20170725,25
6052206455243513477,20170725,26
6366523937097011266,20170725,22
9598226286194728257,20170725,31
5135901390896357467,20170725,27
6568405082195988335,20170725,38
1675608109098320028,20170725,46
0743501820485430157,20170725,47
1164110348121511511,20170725,48
7803437096506812413,20170725,46
0082806901961150595,20170725,51
0795389678082168807,20170725,10
2338178303528914061,20170725,13
1424355572088327868,20170725,12
1152695544079009829,20170725,14
963845761761571092,20170725,13
1182675562893088634,20170725,17
2141032560407740130,20170725,15
2491238829943520906,20170725,20
9654518257837426461,20170725,18
0640433429877929929,20170726,15
6642261851584081073,20170726,16
7771380615067157220,20170726,16
8421245050853915723,20170726,16
5584411114546174652,20170726,15
3092487309701391768,20170726,20
2249724102559347990,20170726,18
3424918216070852195,20170726,22
3310309019453934499,20170726,22
8375075536798804409,20170726,24
8308144532481482080,20170726,25
0604314853571328266,20170726,27
3743916662879082495,20170726,26
9846963060470956023,20170726,26
5248418277725722133,20170726,25
8657427332734176422,20170726,25
397440133393463294,20170726,26
7701571111733834937,20170726,33
4410953563194536742,20170726,17
1761084588077503545,20170726,29
5840295243911523760,20170726,31
4807930160918189094,20170726,35
1247282406356396417,20170726,36
4140559214164857738,20170726,27
3854579461029873656,20170726,36
8382560140451028355,20170726,44
4883249725302903151,20170726,34
4146222468180363567,20170726,39
0780253600713375371,20170726,35
5962830800899970265,20170726,56

2025-01-27 21:24:46 - root - INFO - SQL:
SELECT
    AVG(totals.pageviews) AS avg_pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170430'
    AND totals.pageviews IS NOT NULL
LIMIT 100
Results:
avg_pageviews
3.6141182079589975

2025-01-27 21:24:49 - root - INFO - SQL:
SELECT
    fullVisitorId,
    date,
    totals.pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170501' AND '20170531'
    AND (totals.transactions IS NULL OR totals.transactions = 0)
    AND totals.pageviews IS NOT NULL
LIMIT 100
Results:
fullVisitorId,date,pageviews
9465627723765293158,20170525,1
9465627723765293158,20170525,1
1414204044244891943,20170525,1
9750816837395702230,20170525,1
2819782835074265550,20170525,1
64524021944200033,20170525,1
2855197097810063056,20170525,1
9616151806647084184,20170525,1
0749981983046598170,20170525,1
6403193286671633428,20170525,1
7924531604867905213,20170525,1
4340944648693399996,20170525,1
0890513848478667207,20170525,1
0019461609427849381,20170525,1
2622804847932256881,20170525,1
3050233930775027906,20170525,1
9312785599058728449,20170525,1
8911885932461083612,20170525,1
6018775005072216201,20170525,1
7920335467117869930,20170525,1
9165655000214758678,20170525,1
4495630210023235809,20170525,1
5949120730113679746,20170525,1
7162106732146582534,20170525,1
7880222623656547870,20170525,1
6384491035770796085,20170525,1
4081753376264569133,20170525,1
5447127046645933627,20170525,1
6456044035214556392,20170525,1
4777605442232989801,20170525,1
866669097783440908,20170525,1
9682254037266128369,20170525,1
1178803796478835500,20170525,1
7430392083322547589,20170525,1
6163610418760015991,20170525,1
7325969506529115169,20170525,1
8029081283135949333,20170525,1
7590447219760056121,20170525,1
4968697644997497439,20170525,1
1726688099803417412,20170525,1
0595580883508076750,20170525,1
7905033160928824760,20170525,1
2404909131117412302,20170525,1
6227547781901937136,20170525,1
6680046196386345849,20170525,1
3498622590153039194,20170525,1
6241955761571337783,20170525,1
4620579310827537948,20170525,1
3010275200462016316,20170525,1
5991537787598523165,20170525,1
2091584468428238973,20170525,1
8179084755529166884,20170525,1
7667465752506922497,20170525,1
7987807624871420171,20170525,1
655572661582643067,20170525,1
4601373753986538222,20170525,1
8233429133043038425,20170525,1
1515020338916282310,20170525,1
0934424251746172432,20170525,1
9401537436854044850,20170525,1
5427455284763834699,20170525,1
7958727783070094606,20170525,1
2455040687167141824,20170525,1
6994824949009035909,20170525,1
1182702137000598591,20170525,1
164234189715216102,20170525,1

2025-01-27 21:24:56 - root - INFO - SQL:
SELECT
    EXTRACT(MONTH FROM PARSE_DATE('%Y%m%d', date)) AS month,
    AVG(totals.pageviews) AS avg_pageviews_purchase
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.transactions > 0
    AND totals.pageviews IS NOT NULL
GROUP BY
    month
LIMIT 100
Results:
month,avg_pageviews_purchase
4,24.27155172413793
6,23.88583509513742
7,25.91949563530553
5,22.34080717488789

2025-01-27 21:25:04 - root - INFO - SQL:
SELECT
    EXTRACT(MONTH FROM PARSE_DATE('%Y%m%d', date)) AS month,
    AVG(totals.pageviews) AS avg_pageviews_nonpurchase
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND (totals.transactions IS NULL OR totals.transactions = 0)
    AND totals.pageviews IS NOT NULL
GROUP BY
    month
LIMIT 100
Results:
month,avg_pageviews_nonpurchase
7,3.445644033067193
6,3.363097804391218
5,3.582477275557216
4,3.32450030970978

2025-01-27 21:25:11 - root - INFO - SQL:
SELECT
    EXTRACT(MONTH FROM PARSE_DATE('%Y%m%d', date)) AS month,
    COUNT(DISTINCT fullVisitorId) AS unique_visitors
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND date IS NOT NULL
    AND fullVisitorId IS NOT NULL
GROUP BY
    month
LIMIT 100
Results:
month,unique_visitors
4,55681
6,52067
7,58569
5,52233

2025-01-27 21:25:19 - root - INFO - SQL:
SELECT
    fullVisitorId,
    date,
    totals.pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
ORDER BY
    totals.pageviews DESC
LIMIT 100
Results:
fullVisitorId,date,pageviews
0804281778755290192,20170425,223
1957458976293878100,20170420,202
1957458976293878100,20170419,201
8388931032955052746,20170729,186
057693500927581077,20170722,175
6789528963693848193,20170729,169
332494308387844831,20170701,168
0807236855616914537,20170412,154
1957458976293878100,20170407,151
1280993661204347450,20170716,145
3361857074092840747,20170707,139
8637158932301658318,20170531,139
9703644597836409304,20170523,136
9929765185063189624,20170411,133
7498695963354635199,20170502,132
7483600664917507409,20170731,122
8787132658319095913,20170425,121
0968874458654116846,20170403,120
485196789418021564,20170521,118
3855473804472998317,20170529,118
512867189138675160,20170719,117
4828702923179484007,20170608,114
1997401331704594416,20170414,114
4955298442921379457,20170426,113
844607763689454773,20170607,112
9560188227657174682,20170630,111
3353672870584339810,20170402,110
9417857471295131045,20170713,109
8353360074725418910,20170626,109
5286653810282194817,20170717,108
8787132658319095913,20170426,108
9929765185063189624,20170411,107
7834453494868539530,20170405,105
1957458976293878100,20170608,104
9100736417133253199,20170717,103
0567111192024013209,20170528,102
4906173885819330212,20170415,100
2136452381524374196,20170514,99
7933171750259720017,20170628,99
2943746373898362304,20170529,99
3800524542852050538,20170714,98
6419312684856935815,20170606,98
2690813835058334348,20170406,97
7320316463607490470,20170618,96
1377584857523991044,20170425,93
4382710169252447985,20170625,93
7483600664917507409,20170530,93
2969418676126258798,20170727,93
47511660497565285,20170720,93
8520669029121182420,20170407,92
1656927552400476520,20170717,92
5921470851641568524,20170408,91
6949496197162068722,20170615,91
6761167285196973718,20170717,91
0035322769016923863,20170412,90
4606811175305315310,20170726,90
245211595613401326,20170626,90
44209895816200509,20170511,90
7834453494868539530,20170404,89
9972741982974257535,20170423,89
3640513475847511726,20170728,89
301568042851919466,20170522,89
4462535658579373069,20170715,89
3984247832072653802,20170711,88
0778450426111896201,20170410,88

2025-01-27 21:25:22 - root - INFO - SQL:
SELECT
    fullVisitorId,
    AVG(totals.pageviews) AS avg_pageviews_per_visitor
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170601' AND '20170630'
    AND totals.transactions > 0
    AND totals.pageviews IS NOT NULL
GROUP BY
    fullVisitorId
LIMIT 100
Results:
fullVisitorId,avg_pageviews_per_visitor
6820200829240883942,14.0
9717690429113938490,13.0
8135224127864726768,20.0
2584325239090818797,18.0
5438973470974624883,21.0
9801630253390309535,36.0
9226278380512438191,37.0
5520985287231906451,15.0
9220624765783417577,24.0
6722355366831429055,16.0
2573691084209115534,23.0
2940621972871301246,26.0
2623046443543317941,33.0
924091465796731445,46.0
0968815662109493799,36.0
9793419613813560755,13.0
872868652972070012,15.0
9705361545058587946,17.0
6183580574407648205,19.0
6068721773356724228,13.0
4352760646905266733,16.0
4878479233087678463,16.0
4474128110841843619,18.0
6006657047016577071,16.0
6998123451602955017,19.0
6207808178177919930,18.5
5871441013780996077,25.0
2536718676534980101,20.0
8207927310589023961,28.0
4495098615981928560,30.0
0403854633867059264,29.0
7665584448967359272,37.0
7505999967306814340,39.0
6703621215961449720,49.0
980432803323288584,59.0
5001626019499127935,21.0
633090494027651510,20.0
9692965964258784311,26.0
1350238261946976509,40.0
9227772112500941696,13.0
2544471402172631001,14.0
5135901390896357467,16.0
3161406189281338784,22.0
8846681432728347342,23.0
7170833000891918188,24.0
9664379686822682449,31.0
659736568334808305,30.0
4497523886443399219,37.0
6296763059019207281,46.0
9372380334741229572,18.0
1337744272385974839,19.0
2811132188167803677,19.0
5947969981378635810,26.0
5397689762316048105,44.0
5185645869012304658,30.5
3041665208670915405,41.0
2533003348216867648,56.0
2180515369167502520,13.666666666666666
6984760030997730219,18.0
6359330005069703105,15.0
5988082186046287943,21.0
5274178488388033997,33.0
2087690429996100452,11.0
3836209289653625827,11.0
0992883166330459343,15.0
116147939572219012,18.0
9320164337521602239,40.0

2025-01-27 21:25:55 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 21:25:55 - root - INFO - ```sql
SELECT
    fullVisitorId,
    date,
    totals.pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NULL
LIMIT 100;
```
2025-01-27 21:26:37 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 21:26:37 - root - INFO - SQL:
SELECT
    fullVisitorId,
    date,
    totals.pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NULL
LIMIT 100;
Results:
fullVisitorId,date,pageviews
342293839886391327,20170418,
7524172425421392206,20170418,
2386169796638986389,20170507,
1443544156347007192,20170628,
2296031074257755185,20170708,
8347293108136969989,20170725,
318356747629561030,20170725,
689318192161645703,20170725,
4486961999346450732,20170707,
5474675640269393137,20170724,
7839060813395976488,20170724,
1806046855786021685,20170724,
4467977904156144789,20170702,
8500551927888309875,20170516,
4493424018596739717,20170516,
1091802616723319272,20170406,
1657777210941923786,20170517,
5816628350060068820,20170720,
1378666356226377234,20170704,
559525260205715507,20170731,
1869599090210681270,20170525,
597410560122002668,20170605,
5762097961486229983,20170723,
6520014152855797192,20170723,
7287092188974669232,20170602,
397699574323551811,20170414,
1869599090210681270,20170523,
0579129954956666086,20170619,
9091016244317556602,20170619,
8398956356337075647,20170627,
8039815940362823018,20170426,
2878042683639005958,20170620,
8717262821534000131,20170520,
4031993507382416569,20170501,
5753996978342385595,20170722,
4550233534945277564,20170403,
1745704968375207603,20170425,
1459360539535171755,20170711,

2025-01-27 21:26:43 - root - INFO - SQL:
SELECT
    fullVisitorId,
    date,
    totals.pageviews,
    totals.transactions
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.transactions > 0
    AND totals.pageviews IS NOT NULL
LIMIT 100
Results:
fullVisitorId,date,pageviews,transactions
3028833598226517640,20170502,10,1
6768316228601904493,20170502,9,1
3182530876752588535,20170502,11,1
8053647597306727204,20170502,12,1
9913737248744802178,20170502,11,1
8198644197116666636,20170502,12,1
5516160305654218647,20170502,13,1
5265060535305335127,20170502,12,1
2336992111054994391,20170502,13,1
6215409591124058773,20170502,12,1
4463337271590211636,20170502,13,1
0981755101938488888,20170502,13,1
0487480427659606163,20170502,13,1
6774994701357708261,20170502,14,1
6589067113499479000,20170502,14,1
198049799955668412,20170502,15,1
1833282132105102358,20170502,13,1
5047879966390554745,20170502,15,1
1733292548126989965,20170502,15,1
8532055883431477965,20170502,13,1
3862093055992617004,20170502,16,1
5536585753094480600,20170502,14,1
3287424336851494398,20170502,13,1
0764484494612548101,20170502,17,1
4422531930916613183,20170502,16,1
4314785522549943313,20170502,13,1
3182137775133532420,20170502,16,1
6855063825045549554,20170502,16,1
8793305437694814320,20170502,18,1
7875893829613781625,20170502,18,1
2082463322705444336,20170502,16,1
5512744925410659627,20170502,17,1
9946704516426299877,20170502,17,1
2571702649159032063,20170502,16,1
2602171406058495760,20170502,12,1
8726813153683135107,20170502,19,1
0693664182055359688,20170502,17,1
3448395334687442693,20170502,20,1
0511506099436408879,20170502,20,1
2310334534790814231,20170502,21,1
4560598885300753163,20170502,21,1
0634506282991036601,20170502,23,1
7939195923933153052,20170502,24,1
2456900971869384659,20170502,23,1
4556039598367991486,20170502,20,1
0660738563067658683,20170502,22,1
4118472468366626985,20170502,17,1
965001845233995898,20170502,24,2
7723283988655524549,20170502,22,1
0552165022845624889,20170502,22,1
8749354080686070265,20170502,22,1
4855915470226632443,20170502,22,1
9909403981445501787,20170502,23,1

2025-01-27 21:26:47 - root - INFO - SQL:
SELECT
    device.deviceCategory,
    AVG(totals.pageviews) AS avg_pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170501' AND '20170531'
    AND totals.pageviews IS NOT NULL
GROUP BY
    device.deviceCategory
LIMIT 100
Results:
deviceCategory,avg_pageviews
desktop,4.184541911648755
mobile,3.2464119995683607
tablet,3.753896636587367

2025-01-27 21:26:53 - root - INFO - SQL:
SELECT
    date,
    AVG(totals.pageviews) AS avg_pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
GROUP BY
    date
ORDER BY
    avg_pageviews DESC
LIMIT 10
Results:
date,avg_pageviews
20170521,4.3300911854103346
20170519,4.321637426900583
20170524,4.291354945968412
20170721,4.28924598269468
20170514,4.28449612403101
20170731,4.243986254295529
20170522,4.242437722419928
20170719,4.205648369132852
20170717,4.186821415200303
20170523,4.18233082706767

2025-01-27 21:26:53 - root - INFO - itercount: 0
2025-01-27 21:26:53 - root - INFO - Database Name: bigquery-public-data
Schema Name: google_analytics_sample
DDL describes table information.
,0
table_name,ga_sessions_20170127
ddl,"CREATE TABLE `bigquery-public-data.google_analytics_sample.ga_sessions_20170127`
(
  visitorId INT64,
  visitNumber INT64,
  visitId INT64,
  visitStartTime INT64,
  date STRING,
  totals STRUCT<visits INT64, hits INT64, pageviews INT64, timeOnSite INT64, bounces INT64, transactions INT64, transactionRevenue INT64, newVisits INT64, screenviews INT64, uniqueScreenviews INT64, timeOnScreen INT64, totalTransactionRevenue INT64, sessionQualityDim INT64>,
  trafficSource STRUCT<referralPath STRING, campaign STRING, source STRING, medium STRING, keyword STRING, adContent STRING, adwordsClickInfo STRUCT<campaignId INT64, adGroupId INT64, creativeId INT64, criteriaId INT64, page INT64, slot STRING, criteriaParameters STRING, gclId STRING, customerId INT64, adNetworkType STRING, targetingCriteria STRUCT<boomUserlistId INT64>, isVideoAd BOOL>, isTrueDirect BOOL, campaignCode STRING>,
  device STRUCT<browser STRING, browserVersion STRING, browserSize STRING, operatingSystem STRING, operatingSystemVersion STRING, isMobile BOOL, mobileDeviceBranding STRING, mobileDeviceModel STRING, mobileInputSelector STRING, mobileDeviceInfo STRING, mobileDeviceMarketingName STRING, flashVersion STRING, javaEnabled BOOL, language STRING, screenColors STRING, screenResolution STRING, deviceCategory STRING>,
  geoNetwork STRUCT<continent STRING, subContinent STRING, country STRING, region STRING, metro STRING, city STRING, cityId STRING, networkDomain STRING, latitude STRING, longitude STRING, networkLocation STRING>,
  customDimensions ARRAY<STRUCT<index INT64, value STRING>>,
  hits ARRAY<STRUCT<hitNumber INT64, time INT64, hour INT64, minute INT64, isSecure BOOL, isInteraction BOOL, isEntrance BOOL, isExit BOOL, referer STRING, page STRUCT<pagePath STRING, hostname STRING, pageTitle STRING, searchKeyword STRING, searchCategory STRING, pagePathLevel1 STRING, pagePathLevel2 STRING, pagePathLevel3 STRING, pagePathLevel4 STRING>, transaction STRUCT<transactionId STRING, transactionRevenue INT64, transactionTax INT64, transactionShipping INT64, affiliation STRING, currencyCode STRING, localTransactionRevenue INT64, localTransactionTax INT64, localTransactionShipping INT64, transactionCoupon STRING>, item STRUCT<transactionId STRING, productName STRING, productCategory STRING, productSku STRING, itemQuantity INT64, itemRevenue INT64, currencyCode STRING, localItemRevenue INT64>, contentInfo STRUCT<contentDescription STRING>, appInfo STRUCT<name STRING, version STRING, id STRING, installerId STRING, appInstallerId STRING, appName STRING, appVersion STRING, appId STRING, screenName STRING, landingScreenName STRING, exitScreenName STRING, screenDepth STRING>, exceptionInfo STRUCT<description STRING, isFatal BOOL, exceptions INT64, fatalExceptions INT64>, eventInfo STRUCT<eventCategory STRING, eventAction STRING, eventLabel STRING, eventValue INT64>, product ARRAY<STRUCT<productSKU STRING, v2ProductName STRING, v2ProductCategory STRING, productVariant STRING, productBrand STRING, productRevenue INT64, localProductRevenue INT64, productPrice INT64, localProductPrice INT64, productQuantity INT64, productRefundAmount INT64, localProductRefundAmount INT64, isImpression BOOL, isClick BOOL, customDimensions ARRAY<STRUCT<index INT64, value STRING>>, customMetrics ARRAY<STRUCT<index INT64, value INT64>>, productListName STRING, productListPosition INT64>>, promotion ARRAY<STRUCT<promoId STRING, promoName STRING, promoCreative STRING, promoPosition STRING>>, promotionActionInfo STRUCT<promoIsView BOOL, promoIsClick BOOL>, refund STRUCT<refundAmount INT64, localRefundAmount INT64>, eCommerceAction STRUCT<action_type STRING, step INT64, option STRING>, experiment ARRAY<STRUCT<experimentId STRING, experimentVariant STRING>>, publisher STRUCT<dfpClicks INT64, dfpImpressions INT64, dfpMatchedQueries INT64, dfpMeasurableImpressions INT64, dfpQueries INT64, dfpRevenueCpm INT64, dfpRevenueCpc INT64, dfpViewableImpressions INT64, dfpPagesViewed INT64, adsenseBackfillDfpClicks INT64, adsenseBackfillDfpImpressions INT64, adsenseBackfillDfpMatchedQueries INT64, adsenseBackfillDfpMeasurableImpressions INT64, adsenseBackfillDfpQueries INT64, adsenseBackfillDfpRevenueCpm INT64, adsenseBackfillDfpRevenueCpc INT64, adsenseBackfillDfpViewableImpressions INT64, adsenseBackfillDfpPagesViewed INT64, adxBackfillDfpClicks INT64, adxBackfillDfpImpressions INT64, adxBackfillDfpMatchedQueries INT64, adxBackfillDfpMeasurableImpressions INT64, adxBackfillDfpQueries INT64, adxBackfillDfpRevenueCpm INT64, adxBackfillDfpRevenueCpc INT64, adxBackfillDfpViewableImpressions INT64, adxBackfillDfpPagesViewed INT64, adxClicks INT64, adxImpressions INT64, adxMatchedQueries INT64, adxMeasurableImpressions INT64, adxQueries INT64, adxRevenue INT64, adxViewableImpressions INT64, adxPagesViewed INT64, adsViewed INT64, adsUnitsViewed INT64, adsUnitsMatched INT64, viewableAdsViewed INT64, measurableAdsViewed INT64, adsPagesViewed INT64, adsClicked INT64, adsRevenue INT64, dfpAdGroup STRING, dfpAdUnits STRING, dfpNetworkId STRING>, customVariables ARRAY<STRUCT<index INT64, customVarName STRING, customVarValue STRING>>, customDimensions ARRAY<STRUCT<index INT64, value STRING>>, customMetrics ARRAY<STRUCT<index INT64, value INT64>>, type STRING, social STRUCT<socialInteractionNetwork STRING, socialInteractionAction STRING, socialInteractions INT64, socialInteractionTarget STRING, socialNetwork STRING, uniqueSocialInteractions INT64, hasSocialSourceReferral STRING, socialInteractionNetworkAction STRING>, latencyTracking STRUCT<pageLoadSample INT64, pageLoadTime INT64, pageDownloadTime INT64, redirectionTime INT64, speedMetricsSample INT64, domainLookupTime INT64, serverConnectionTime INT64, serverResponseTime INT64, domLatencyMetricsSample INT64, domInteractiveTime INT64, domContentLoadedTime INT64, userTimingValue INT64, userTimingSample INT64, userTimingVariable STRING, userTimingCategory STRING, userTimingLabel STRING>, sourcePropertyInfo STRUCT<sourcePropertyDisplayName STRING, sourcePropertyTrackingId STRING>, contentGroup STRUCT<contentGroup1 STRING, contentGroup2 STRING, contentGroup3 STRING, contentGroup4 STRING, contentGroup5 STRING, previousContentGroup1 STRING, previousContentGroup2 STRING, previousContentGroup3 STRING, previousContentGroup4 STRING, previousContentGroup5 STRING, contentGroupUniqueViews1 INT64, contentGroupUniqueViews2 INT64, contentGroupUniqueViews3 INT64, contentGroupUniqueViews4 INT64, contentGroupUniqueViews5 INT64>, dataSource STRING, publisher_infos ARRAY<STRUCT<dfpClicks INT64, dfpImpressions INT64, dfpMatchedQueries INT64, dfpMeasurableImpressions INT64, dfpQueries INT64, dfpRevenueCpm INT64, dfpRevenueCpc INT64, dfpViewableImpressions INT64, dfpPagesViewed INT64, adsenseBackfillDfpClicks INT64, adsenseBackfillDfpImpressions INT64, adsenseBackfillDfpMatchedQueries INT64, adsenseBackfillDfpMeasurableImpressions INT64, adsenseBackfillDfpQueries INT64, adsenseBackfillDfpRevenueCpm INT64, adsenseBackfillDfpRevenueCpc INT64, adsenseBackfillDfpViewableImpressions INT64, adsenseBackfillDfpPagesViewed INT64, adxBackfillDfpClicks INT64, adxBackfillDfpImpressions INT64, adxBackfillDfpMatchedQueries INT64, adxBackfillDfpMeasurableImpressions INT64, adxBackfillDfpQueries INT64, adxBackfillDfpRevenueCpm INT64, adxBackfillDfpRevenueCpc INT64, adxBackfillDfpViewableImpressions INT64, adxBackfillDfpPagesViewed INT64, adxClicks INT64, adxImpressions INT64, adxMatchedQueries INT64, adxMeasurableImpressions INT64, adxQueries INT64, adxRevenue INT64, adxViewableImpressions INT64, adxPagesViewed INT64, adsViewed INT64, adsUnitsViewed INT64, adsUnitsMatched INT64, viewableAdsViewed INT64, measurableAdsViewed INT64, adsPagesViewed INT64, adsClicked INT64, adsRevenue INT64, dfpAdGroup STRING, dfpAdUnits STRING, dfpNetworkId STRING>>>>,
  fullVisitorId STRING,
  userId STRING,
  channelGrouping STRING,
  socialEngagementType STRING
);"

Some other tables have the similar structure: ['ga_sessions_20170127', 'ga_sessions_20160916', 'ga_sessions_20170710', 'ga_sessions_20170604', 'ga_sessions_20161003', 'ga_sessions_20170705', 'ga_sessions_20170611', 'ga_sessions_20161013', 'ga_sessions_20161113', 'ga_sessions_20170605', 'ga_sessions_20170415', 'ga_sessions_20160808', 'ga_sessions_20160820', 'ga_sessions_20170316', 'ga_sessions_20161027', 'ga_sessions_20170729', 'ga_sessions_20170219', 'ga_sessions_20170513', 'ga_sessions_20170227', 'ga_sessions_20170629', 'ga_sessions_20170724', 'ga_sessions_20170321', 'ga_sessions_20170305', 'ga_sessions_20170515', 'ga_sessions_20161109', 'ga_sessions_20170731', 'ga_sessions_20160926', 'ga_sessions_20170224', 'ga_sessions_20161124', 'ga_sessions_20161230', 'ga_sessions_20161202', 'ga_sessions_20161101', 'ga_sessions_20170407', 'ga_sessions_20160824', 'ga_sessions_20170125', 'ga_sessions_20170424', 'ga_sessions_20160912', 'ga_sessions_20170725', 'ga_sessions_20170625', 'ga_sessions_20170526', 'ga_sessions_20160922', 'ga_sessions_20170701', 'ga_sessions_20161125', 'ga_sessions_20160910', 'ga_sessions_20161102', 'ga_sessions_20160903', 'ga_sessions_20160828', 'ga_sessions_20170507', 'ga_sessions_20170205', 'ga_sessions_20170328', 'ga_sessions_20170616', 'ga_sessions_20170524', 'ga_sessions_20170608', 'ga_sessions_20160902', 'ga_sessions_20170408', 'ga_sessions_20160907', 'ga_sessions_20170708', 'ga_sessions_20170107', 'ga_sessions_20170308', 'ga_sessions_20160801', 'ga_sessions_20170528', 'ga_sessions_20170113', 'ga_sessions_20170426', 'ga_sessions_20160908', 'ga_sessions_20170619', 'ga_sessions_20170302', 'ga_sessions_20161012', 'ga_sessions_20170320', 'ga_sessions_20170713', 'ga_sessions_20161217', 'ga_sessions_20170119', 'ga_sessions_20170505', 'ga_sessions_20161119', 'ga_sessions_20170303', 'ga_sessions_20170413', 'ga_sessions_20170204', 'ga_sessions_20170203', 'ga_sessions_20160915', 'ga_sessions_20170122', 'ga_sessions_20170721', 'ga_sessions_20170506', 'ga_sessions_20170630', 'ga_sessions_20170102', 'ga_sessions_20170719', 'ga_sessions_20170715', 'ga_sessions_20170727', 'ga_sessions_20161220', 'ga_sessions_20161210', 'ga_sessions_20170325', 'ga_sessions_20170602', 'ga_sessions_20160909', 'ga_sessions_20170404', 'ga_sessions_20170613', 'ga_sessions_20170210', 'ga_sessions_20170720', 'ga_sessions_20161106', 'ga_sessions_20160817', 'ga_sessions_20170614', 'ga_sessions_20161123', 'ga_sessions_20170314', 'ga_sessions_20170421', 'ga_sessions_20170124', 'ga_sessions_20170131', 'ga_sessions_20170106', 'ga_sessions_20160827', 'ga_sessions_20161203', 'ga_sessions_20160918', 'ga_sessions_20161117', 'ga_sessions_20160919', 'ga_sessions_20161104', 'ga_sessions_20170109', 'ga_sessions_20170128', 'ga_sessions_20170212', 'ga_sessions_20161030', 'ga_sessions_20170329', 'ga_sessions_20160816', 'ga_sessions_20170226', 'ga_sessions_20170412', 'ga_sessions_20170116', 'ga_sessions_20170510', 'ga_sessions_20160930', 'ga_sessions_20161216', 'ga_sessions_20170523', 'ga_sessions_20170429', 'ga_sessions_20170423', 'ga_sessions_20170112', 'ga_sessions_20170718', 'ga_sessions_20170104', 'ga_sessions_20170222', 'ga_sessions_20170417', 'ga_sessions_20170609', 'ga_sessions_20170430', 'ga_sessions_20161114', 'ga_sessions_20160804', 'ga_sessions_20170503', 'ga_sessions_20161206', 'ga_sessions_20170105', 'ga_sessions_20170714', 'ga_sessions_20161130', 'ga_sessions_20170525', 'ga_sessions_20170712', 'ga_sessions_20161122', 'ga_sessions_20160929', 'ga_sessions_20161223', 'ga_sessions_20170110', 'ga_sessions_20170108', 'ga_sessions_20170722', 'ga_sessions_20161009', 'ga_sessions_20170213', 'ga_sessions_20161031', 'ga_sessions_20170530', 'ga_sessions_20170115', 'ga_sessions_20170330', 'ga_sessions_20161121', 'ga_sessions_20170706', 'ga_sessions_20160805', 'ga_sessions_20160807', 'ga_sessions_20160822', 'ga_sessions_20170313', 'ga_sessions_20170410', 'ga_sessions_20170309', 'ga_sessions_20160809', 'ga_sessions_20170402', 'ga_sessions_20170512', 'ga_sessions_20170621', 'ga_sessions_20161005', 'ga_sessions_20160928', 'ga_sessions_20170703', 'ga_sessions_20170208', 'ga_sessions_20170301', 'ga_sessions_20161215', 'ga_sessions_20170723', 'ga_sessions_20170103', 'ga_sessions_20161128', 'ga_sessions_20170519', 'ga_sessions_20170322', 'ga_sessions_20161110', 'ga_sessions_20160914', 'ga_sessions_20160901', 'ga_sessions_20170218', 'ga_sessions_20161029', 'ga_sessions_20170501', 'ga_sessions_20170612', 'ga_sessions_20170618', 'ga_sessions_20170422', 'ga_sessions_20161227', 'ga_sessions_20170716', 'ga_sessions_20170801', 'ga_sessions_20170615', 'ga_sessions_20170304', 'ga_sessions_20170215', 'ga_sessions_20170403', 'ga_sessions_20170730', 'ga_sessions_20170702', 'ga_sessions_20160905', 'ga_sessions_20161225', 'ga_sessions_20170318', 'ga_sessions_20170504', 'ga_sessions_20161115', 'ga_sessions_20161008', 'ga_sessions_20170311', 'ga_sessions_20170418', 'ga_sessions_20161016', 'ga_sessions_20161214', 'ga_sessions_20161231', 'ga_sessions_20161010', 'ga_sessions_20161219', 'ga_sessions_20161218', 'ga_sessions_20170207', 'ga_sessions_20170522', 'ga_sessions_20170326', 'ga_sessions_20161020', 'ga_sessions_20161014', 'ga_sessions_20160806', 'ga_sessions_20170401', 'ga_sessions_20161213', 'ga_sessions_20160823', 'ga_sessions_20161006', 'ga_sessions_20170217', 'ga_sessions_20161222', 'ga_sessions_20160925', 'ga_sessions_20160810', 'ga_sessions_20170414', 'ga_sessions_20161120', 'ga_sessions_20170225', 'ga_sessions_20170323', 'ga_sessions_20170123', 'ga_sessions_20170201', 'ga_sessions_20170620', 'ga_sessions_20170425', 'ga_sessions_20170511', 'ga_sessions_20170331', 'ga_sessions_20160830', 'ga_sessions_20170117', 'ga_sessions_20170606', 'ga_sessions_20161129', 'ga_sessions_20170709', 'ga_sessions_20161107', 'ga_sessions_20161127', 'ga_sessions_20170111', 'ga_sessions_20170221', 'ga_sessions_20160811', 'ga_sessions_20170514', 'ga_sessions_20160802', 'ga_sessions_20160819', 'ga_sessions_20160814', 'ga_sessions_20170223', 'ga_sessions_20160825', 'ga_sessions_20170202', 'ga_sessions_20170206', 'ga_sessions_20170728', 'ga_sessions_20170324', 'ga_sessions_20170114', 'ga_sessions_20161205', 'ga_sessions_20160821', 'ga_sessions_20170624', 'ga_sessions_20170508', 'ga_sessions_20161111', 'ga_sessions_20170312', 'ga_sessions_20170405', 'ga_sessions_20160913', 'ga_sessions_20161004', 'ga_sessions_20161001', 'ga_sessions_20161209', 'ga_sessions_20170623', 'ga_sessions_20170603', 'ga_sessions_20170626', 'ga_sessions_20161228', 'ga_sessions_20170521', 'ga_sessions_20161017', 'ga_sessions_20161019', 'ga_sessions_20170129', 'ga_sessions_20161018', 'ga_sessions_20170118', 'ga_sessions_20161208', 'ga_sessions_20170416', 'ga_sessions_20161204', 'ga_sessions_20170120', 'ga_sessions_20170610', 'ga_sessions_20161221', 'ga_sessions_20170306', 'ga_sessions_20161207', 'ga_sessions_20161224', 'ga_sessions_20160803', 'ga_sessions_20170411', 'ga_sessions_20161015', 'ga_sessions_20160927', 'ga_sessions_20170628', 'ga_sessions_20161002', 'ga_sessions_20170726', 'ga_sessions_20160831', 'ga_sessions_20170327', 'ga_sessions_20170529', 'ga_sessions_20161126', 'ga_sessions_20170214', 'ga_sessions_20170420', 'ga_sessions_20160906', 'ga_sessions_20170406', 'ga_sessions_20161108', 'ga_sessions_20170527', 'ga_sessions_20170607', 'ga_sessions_20160829', 'ga_sessions_20160917', 'ga_sessions_20170717', 'ga_sessions_20161024', 'ga_sessions_20161201', 'ga_sessions_20160924', 'ga_sessions_20161112', 'ga_sessions_20170707', 'ga_sessions_20161226', 'ga_sessions_20161103', 'ga_sessions_20161118', 'ga_sessions_20170126', 'ga_sessions_20170317', 'ga_sessions_20170531', 'ga_sessions_20170315', 'ga_sessions_20160812', 'ga_sessions_20161007', 'ga_sessions_20170711', 'ga_sessions_20170310', 'ga_sessions_20170130', 'ga_sessions_20170622', 'ga_sessions_20160921', 'ga_sessions_20160911', 'ga_sessions_20161211', 'ga_sessions_20170419', 'ga_sessions_20170228', 'ga_sessions_20170307', 'ga_sessions_20170516', 'ga_sessions_20170520', 'ga_sessions_20161023', 'ga_sessions_20170428', 'ga_sessions_20170704', 'ga_sessions_20161011', 'ga_sessions_20160826', 'ga_sessions_20170627', 'ga_sessions_20170216', 'ga_sessions_20170101', 'ga_sessions_20161116', 'ga_sessions_20161028', 'ga_sessions_20161105', 'ga_sessions_20170617', 'ga_sessions_20160818', 'ga_sessions_20160813', 'ga_sessions_20170517', 'ga_sessions_20170427', 'ga_sessions_20170209', 'ga_sessions_20170409', 'ga_sessions_20170502', 'ga_sessions_20161022', 'ga_sessions_20161026', 'ga_sessions_20161025', 'ga_sessions_20160815', 'ga_sessions_20170601', 'ga_sessions_20170121', 'ga_sessions_20170518', 'ga_sessions_20161021', 'ga_sessions_20170319', 'ga_sessions_20170220', 'ga_sessions_20161229', 'ga_sessions_20160904', 'ga_sessions_20170509', 'ga_sessions_20160920', 'ga_sessions_20161212', 'ga_sessions_20170211', 'ga_sessions_20160923']
External knowledge that might be helpful: 
## Documents about Google Analytics Sample - ga_sessions

This article explains the format and schema of the data that is imported into BigQuery.

## Datasets

For each Analytics view that is enabled for BigQuery integration, a dataset is added using the view ID as the name.

## Tables

Within each dataset, a table is imported for each day of export. Daily tables have the format "ga\_sessions\_YYYYMMDD".

Intraday data is imported at least three times a day. Intraday tables have the format "ga\_sessions\_intraday\_YYYYMMDD". During the same day, each import of intraday data overwrites the previous import in the same table.

When the daily import is complete, the intraday table from the previous day is deleted. For the current day, until the first intraday import, there is no intraday table. If an intraday-table write fails, then the previous day's intraday table is preserved.

Data for the current day is not final until the daily import is complete. You may notice differences between intraday and daily data based on active user sessions that cross the time boundary of last intraday import.

## Rows

Each row within a table corresponds to a session in Analytics 360.

## Columns

The columns within the export are listed below. In BigQuery, some columns may have nested fields and messages within them.

| Field Name | Data Type | Description |
| --- | --- | --- |
| clientId | STRING | Unhashed version of the Client ID for a given user associated with any given visit/session. |
| fullVisitorId | STRING | The unique visitor ID. |
| visitorId | NULL | This field is deprecated. Use "fullVisitorId" instead. |
| userId | STRING | Overridden User ID sent to Analytics. |
| visitNumber | INTEGER | The session number for this user. If this is the first session, then this is set to 1. |
| visitId | INTEGER | An identifier for this session. This is part of the value usually stored as the _utmb cookie. This is only unique to the user. For a completely unique ID, you should use a combination of fullVisitorId and visitId. |
| visitStartTime | INTEGER | The timestamp (expressed as POSIX time). |
| date | STRING | The date of the session in YYYYMMDD format. |
| totals | RECORD | This section contains aggregate values across the session. |
| totals.bounces | INTEGER | Total bounces (for convenience). For a bounced session, the value is 1, otherwise it is null. |
| totals.hits | INTEGER | Total number of hits within the session. |
| totals.newVisits | INTEGER | Total number of new users in session (for convenience). If this is the first visit, this value is 1, otherwise it is null. |
| totals.pageviews | INTEGER | Total number of pageviews within the session. |
| totals.screenviews | INTEGER | Total number of screenviews within the session. |
| totals.sessionQualityDim | INTEGER | An estimate of how close a particular session was to transacting, ranging from 1 to 100, calculated for each session. A value closer to 1 indicates a low session quality, or far from transacting, while a value closer to 100 indicates a high session quality, or very close to transacting. A value of 0 indicates that Session Quality is not calculated for the selected time range. |
| totals.timeOnScreen | INTEGER | The total time on screen in seconds. |
| totals.timeOnSite | INTEGER | Total time of the session expressed in seconds. |
| totals.totalTransactionRevenue | INTEGER | Total transaction revenue, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| totals.transactionRevenue | INTEGER | This field is deprecated. Use "totals.totalTransactionRevenue" instead (see above). |
| totals.transactions | INTEGER | Total number of ecommerce transactions within the session. |
| totals.UniqueScreenViews | INTEGER | Total number of unique screenviews within the session. |
| totals.visits | INTEGER | The number of sessions (for convenience). This value is 1 for sessions with interaction events. The value is null if there are no interaction events in the session. |
| trafficSource | RECORD | This section contains information about the Traffic Source from which the session originated. |
| trafficSource.adContent | STRING | The ad content of the traffic source. Can be set by the utm_content URL parameter. |
| trafficSource.adwordsClickInfo | RECORD | This section contains information about the Google Ads click info if there is any associated with this session. Analytics uses the last non-direct click model. |
| trafficSource.<br>      adwordsClickInfo.adGroupId | INTEGER | The Google ad-group ID. |
| trafficSource.<br>      adwordsClickInfo.adNetworkType | STRING | Network Type. Takes one of the following values: {“Google Search", "Content", "Search partners", "Ad Exchange", "Yahoo Japan Search", "Yahoo Japan AFS", “unknown”} |
| trafficSource.<br>      adwordsClickInfo.campaignId | INTEGER | The Google Ads campaign ID. |
| trafficSource.<br>      adwordsClickInfo.creativeId | INTEGER | The Google ad ID. |
| trafficSource.<br>      adwordsClickInfo.criteriaId | INTEGER | The ID for the targeting criterion. |
| trafficSource.<br>      adwordsClickInfo.criteriaParameters | STRING | Descriptive string for the targeting criterion. |
| trafficSource.<br>      adwordsClickInfo.customerId | INTEGER | The Google Ads Customer ID. |
| trafficSource.<br>      adwordsClickInfo.gclId | STRING | The Google Click ID. |
| trafficSource.<br>      adwordsClickInfo.isVideoAd | BOOLEAN | True if it is a Trueview video ad. |
| trafficSource.<br>      adwordsClickInfo.page | INTEGER | Page number in search results where the ad was shown. |
| trafficSource.<br>      adwordsClickInfo.slot | STRING | Position of the Ad. Takes one of the following values:{“RHS", "Top"} |
| trafficSource.<br>      adwordsClickInfo.targetingCriteria | RECORD | Google Ads targeting criteria for a click. There are multiple types of targeting criteria, but should have only one value for each criterion. |
| trafficSource.<br>      adwordsClickInfo.targetingCriteria.<br>      boomUserlistId | INTEGER | Remarketing list ID (if any) in Google Ads, derived from matching_criteria in click record. |
| trafficSource.campaign | STRING | The campaign value. Usually set by the utm_campaign URL parameter. |
| trafficSource.campaignCode | STRING | Value of the utm_id campaign tracking parameter, used for manual campaign tracking. |
| trafficSource.isTrueDirect | BOOLEAN | True if the source of the session was Direct (meaning the user typed the name of your website URL into the browser or came to your site via a bookmark), This field will also be true if 2 successive but distinct sessions have exactly the same campaign details. Otherwise NULL. |
| trafficSource.keyword | STRING | The keyword of the traffic source, usually set when the trafficSource.medium is "organic" or "cpc". Can be set by the utm_term URL parameter. |
| trafficSource.medium | STRING | The medium of the traffic source. Could be "organic", "cpc", "referral", or the value of the utm_medium URL parameter. |
| trafficSource.referralPath | STRING | If trafficSource.medium is "referral", then this is set to the path of the referrer. (The host name of the referrer is in trafficSource.source.) |
| trafficSource.source | STRING | The source of the traffic source. Could be the name of the search engine, the referring hostname, or a value of the utm_source URL parameter. |
| socialEngagementType | STRING | Engagement type, either "Socially Engaged" or "Not Socially Engaged". |
| channelGrouping | STRING | The Default Channel Group associated with an end user's session for this View. |
| device | RECORD | This section contains information about the user devices. |
| device.browser | STRING | The browser used (e.g., "Chrome" or "Firefox"). |
| device.browserSize | STRING | The viewport size of users' browsers. This captures the initial dimensions of the viewport in pixels and is formatted as width x height, for example, 1920x960. |
| device.browserVersion | STRING | The version of the browser used. |
| device.deviceCategory | STRING | The type of device (Mobile, Tablet, Desktop). |
| device.mobileDeviceInfo | STRING | The branding, model, and marketing name used to identify the mobile device. |
| device.mobileDeviceMarketingName | STRING | The marketing name used for the mobile device. |
| device.mobileDeviceModel | STRING | The mobile device model. |
| device.mobileInputSelector | STRING | Selector (e.g., touchscreen, joystick, clickwheel, stylus) used on the mobile device. |
| device.operatingSystem | STRING | The operating system of the device (e.g., "Macintosh" or "Windows"). |
| device.operatingSystemVersion | STRING | The version of the operating system. |
| device.isMobile<br><br>      This field is deprecated. Use device.deviceCategory instead. | BOOLEAN | If the user is on a mobile device, this value is true, otherwise false. |
| device.mobileDeviceBranding | STRING | The brand or manufacturer of the device. |
| device.flashVersion | STRING | The version of the Adobe Flash plugin that is installed on the browser. |
| device.javaEnabled | BOOLEAN | Whether or not Java is enabled in the browser. |
| device.language | STRING | The language the device is set to use. Expressed as the IETF language code. |
| device.screenColors | STRING | Number of colors supported by the display, expressed as the bit-depth (e.g., "8-bit", "24-bit", etc.). |
| device.screenResolution | STRING | The resolution of the device's screen, expressed in pixel width x height (e.g., "800x600"). |
| customDimensions | RECORD | This section contains any user-level or session-level custom dimensions that are set for a session. This is a repeated field and has an entry for each dimension that is set. |
| customDimensions.index | INTEGER | The index of the custom dimension. |
| customDimensions.value | STRING | The value of the custom dimension. |
| geoNetwork | RECORD | This section contains information about the geography of the user. |
| geoNetwork.continent | STRING | The continent from which sessions originated, based on IP address. |
| geoNetwork.subContinent | STRING | The sub-continent from which sessions originated, based on IP address of the visitor. |
| geoNetwork.country | STRING | The country from which sessions originated, based on IP address. |
| geoNetwork.region | STRING | The region from which sessions originate, derived from IP addresses. In the U.S., a region is a state, such as New York. |
| geoNetwork.metro | STRING | The Designated Market Area (DMA) from which sessions originate. |
| geoNetwork.city | STRING | Users' city, derived from their IP addresses or Geographical IDs. |
| geoNetwork.cityId | STRING | Users' city ID, derived from their IP addresses or Geographical IDs. |
| geoNetwork.latitude | STRING | The approximate latitude of users' city, derived from their IP addresses or Geographical IDs. Locations north of the equator have positive latitudes and locations south of the equator have negative latitudes. |
| geoNetwork.longitude | STRING | The approximate longitude of users' city, derived from their IP addresses or Geographical IDs. Locations east of the prime meridian have positive longitudes and locations west of the prime meridian have negative longitudes. |
| geoNetwork.networkDomain | STRING | [No longer supported]<br>The domain name of user's ISP, derived from the domain name registered to the ISP's IP address. |
| geoNetwork.networkLocation | STRING | [No longer supported]<br>The names of the service providers used to reach the property. For example, if most users of the website come via the major cable internet service providers, its value will be these service providers' names. |
| hits | RECORD | This row and nested fields are populated for any and all types of hits. |
| hits.dataSource | STRING | The data source of a hit. By default, hits sent from analytics.js are reported as "web" and hits sent from the mobile SDKs are reported as "app". |
| hits.sourcePropertyInfo | RECORD | This section contains information about source property for rollup properties |
| hits.sourcePropertyInfo.<br>      sourcePropertyDisplayName | STRING | Source property display name of Roll-Up Properties. This is valid for only Roll-Up Properties. |
| hits.sourcePropertyInfo.<br>      sourcePropertyTrackingId | STRING | Source property tracking ID of roll-up properties. This is valid for only roll-up properties. |
| hits.eCommerceAction | RECORD | This section contains all of the ecommerce hits that occurred during the session. This is a repeated field and has an entry for each hit that was collected. |
| hits.eCommerceAction.action_type | STRING | The action type. Click through of product lists = 1, Product detail views = 2, Add product(s) to cart = 3, Remove product(s) from cart = 4, Check out = 5, Completed purchase = 6, Refund of purchase = 7, Checkout options = 8, Unknown = 0.<br>Usually this action type applies to all the products in a hit, with the following exception: when hits.product.isImpression = TRUE, the corresponding product is a product impression that is seen while the product action is taking place (i.e., a "product in list view"). |
| hits.eCommerceAction.option | STRING | This field is populated when a checkout option is specified. For example, a shipping option such as option = 'Fedex'. |
| hits.eCommerceAction.step | INTEGER | This field is populated when a checkout step is specified with the hit. |
| hits.exceptionInfo.exceptions | INTEGER | The number of exceptions sent to Google Analytics. |
| hits.exceptionInfo.fatalExceptions | INTEGER | The number of exceptions sent to Google Analytics where isFatal is set to true. |
| hits.experiment | RECORD | This row and the nested fields are populated for each hit that contains data for an experiment. |
| hits.experiment.experimentId | STRING | The ID of the experiment. |
| hits.experiment.experimentVariant | STRING | The variation or combination of variations present in a hit for an experiment. |
| hits.hitNumber | INTEGER | The sequenced hit number. For the first hit of each session, this is set to 1. |
| hits.hour | INTEGER | The hour in which the hit occurred (0 to 23). |
| hits.isSecure | BOOLEAN | This field is deprecated. |
| hits.isEntrance | BOOLEAN | If this hit was the first pageview or screenview hit of a session, this is set to true. |
| hits.isExit | BOOLEAN | If this hit was the last pageview or screenview hit of a session, this is set to true.<br>There is no comparable field for a Google Analytics 4 property. |
| hits.isInteraction | BOOLEAN | If this hit was an interaction, this is set to true. If this was a non-interaction hit (i.e., an event with interaction set to false), this is false. |
| hits.latencyTracking | RECORD | This section contains information about events in the Navigation Timing API. |
| hits.latencyTracking.domainLookupTime | INTEGER | The total time (in milliseconds) all samples spent in DNS lookup for this page. |
| hits.latencyTracking.domContentLoadedTime | INTEGER | The time (in milliseconds), including the network time from users' locations to the site's server, the browser takes to parse the document and execute deferred and parser-inserted scripts (DOMContentLoaded). |
| hits.latencyTracking.domInteractiveTime | INTEGER | The time (in milliseconds), including the network time from users' locations to the site's server, the browser takes to parse the document (DOMInteractive). |
| hits.latencyTracking.domLatencyMetricsSample | INTEGER | Sample set (or count) of pageviews used to calculate the averages for site speed DOM metrics. |
| hits.latencyTracking.pageDownloadTime | INTEGER | The total time (in milliseconds) to download this page among all samples. |
| hits.latencyTracking.pageLoadSample | INTEGER | The sample set (or count) of pageviews used to calculate the average page load time. |
| hits.latencyTracking.pageLoadTime | INTEGER | Total time (in milliseconds), from pageview initiation (e.g., a click on a page link) to page load completion in the browser, the pages in the sample set take to load. |
| hits.latencyTracking.redirectionTime | INTEGER | The total time (in milliseconds) all samples spent in redirects before fetching this page. If there are no redirects, this is 0. |
| hits.latencyTracking.serverConnectionTime | INTEGER | Total time (in milliseconds) all samples spent in establishing a TCP connection to this page. |
| hits.latencyTracking.serverResponseTime | INTEGER | The total time (in milliseconds) the site's server takes to respond to users' requests among all samples; this includes the network time from users' locations to the server. |
| hits.latencyTracking.speedMetricsSample | INTEGER | The sample set (or count) of pageviews used to calculate the averages of site speed metrics. |
| hits.latencyTracking.userTimingCategory | STRING | For easier reporting purposes, this is used to categorize all user timing variables into logical groups. |
| hits.latencyTracking.userTimingLabel | STRING | The name of the resource's action being tracked. |
| hits.latencyTracking.userTimingSample | INTEGER | The number of hits sent for a particular userTimingCategory, userTimingLabel, or userTimingVariable. |
| hits.latencyTracking.userTimingValue | INTEGER | Total number of milliseconds for user timing. |
| hits.latencyTracking.userTimingVariable | STRING | Variable used to add flexibility to visualize user timings in the reports. |
| hits.minute | INTEGER | The minute in which the hit occurred (0 to 59). |
| hits.product.isImpression | BOOLEAN | TRUE if at least one user viewed this product (i.e., at least one impression) when it appeared in the product list. |
| hits.product.isClick | BOOLEAN | Whether users clicked this product when it appeared in the product list. |
| hits.product.customDimensions | RECORD | This section is populated for all hits containing product scope Custom Dimensions. |
| hits.product.customDimensions.index | INTEGER | The product scope Custom Dimensions index. |
| hits.product.customDimensions.value | STRING | The product scope Custom Dimensions value. |
| hits.product.customMetrics | RECORD | This section is populated for all hits containing product scope Custom Metrics. |
| hits.product.customMetrics.index | INTEGER | The product scope Custom Metrics index. |
| hits.product.customMetrics.value | INTEGER | The product scope Custom Metrics value. |
| hits.product.productListName | STRING | Name of the list in which the product is shown, or in which a click occurred. For example, "Home Page Promotion", "Also Viewed", "Recommended For You", "Search Results List", etc. |
| hits.product.productListPosition | INTEGER | Position of the product in the list in which it is shown. |
| hits.publisher.<br>      adsenseBackfillDfpClicks | INTEGER | The number of clicks on AdSense ads that served as Google Ad Manager backfill. |
| hits.publisher.<br>      adsenseBackfillDfpImpressions | INTEGER | The number of AdSense ad impressions that were served as Google Ad Manager backfill. |
| hits.publisher.<br>      adsenseBackfillDfpMatchedQueries | INTEGER | The number of ad requests where AdSense was trafficked as backfill and returned an ad creative to the page. |
| hits.publisher.<br>      adsenseBackfillDfpMeasurableImpressions | INTEGER | The number of ad impressions filled by AdSense that viewability measurements were able to take into account (includes both in-view and not-in-view ads). |
| hits.publisheradsenseBackfillDfpPagesViewed | INTEGER | The number of Google Analytics pageviews where Google Ad Manager recorded AdSense revenue. |
| hits.publisher.adsenseBackfillDfpQueries | INTEGER | The number of ad requests made to AdSense by Google Ad Manager. |
| hits.publisher.<br>      adsenseBackfillDfpRevenueCpc | INTEGER | The CPC revenue associated with the resultant AdSense ad clicks. |
| hits.publisher.<br>      adsenseBackfillDfpRevenueCpm | INTEGER | The CPM revenue associated with the served AdSense ad impressions. |
| hits.publisher.<br>      adsenseBackfillDfpViewableImpressions | INTEGER | The number of AdSense impressions that met Google Ad Manager’s viewability standard. |
| hits.publisher.adxBackfillDfpClicks | INTEGER | The number of clicks on Google Ad Manager ads served as Google Ad Manager backfill. |
| hits.publisher.<br>      adxBackfillDfpImpressions | INTEGER | The number of Google Ad Manager ad impressions that were served as Google Ad Manager backfill. |
| hits.publisher.<br>      adxBackfillDfpMatchedQueries | INTEGER | The number of ad requests where Google Ad Manager was trafficked as backfill and returned an ad creative to the page. |
| hits.publisher.<br>      adxBackfillDfpMeasurableImpressions | INTEGER | The number of ad impressions filled by Google Ad Manager that viewability measurements are able to take into account (includes both in-view and not-in-view ads). |
| hits.publisher.<br>      adxBackfillDfpPagesViewed | INTEGER | The number of Google Analytics pageviews where Google Ad Manager recorded revenue. |
| hits.publisher.<br>      adxBackfillDfpQueries | INTEGER | The number of ad requests made to Google Ad Manager by Google Ad Manager. |
| hits.publisher.<br>      adxBackfillDfpRevenueCpc | INTEGER | The CPC revenue associated with the resultant Google Ad Manager ad clicks. |
| hits.publisher.<br>      adxBackfillDfpRevenueCpm | INTEGER | The CPM revenue associated with the served Google Ad Manager ad impressions. |
| hits.publisher.<br>      adxBackfillDfpViewableImpressions | INTEGER | The number of Google Ad Manager impressions that met Google Ad Manager’s viewability standard. |
| hits.publisher.dfpAdGroup | STRING | The Google Ad Manager Line Item ID of the ad that served. |
| hits.publisher.dfpAdUnits | STRING | The IDs of the Google Ad Manager Ad Units present in the ad request. |
| hits.publisher.dfpClicks | INTEGER | The number of times Google Ad Manager ads were clicked. |
| hits.publisher.dfpImpressions | INTEGER | A Google Ad Manager ad impression is reported whenever an individual ad is displayed. For example, when a page with two ad units is viewed once, we display two impressions. |
| hits.publisher.dfpMatchedQueries | INTEGER | The number of ad requests where a creative was returned to the page. |
| hits.publisher.dfpMeasurableImpressions | INTEGER | The number of ad impressions that viewability measurements are able to take into account (includes both in-view and not-in-view ads). |
| hits.publisher.dfpNetworkId | STRING | The Google Ad Manager network ID that the ad request was sent to. |
| hits.publisher.dfpPagesViewed | INTEGER | The number of Google Analytics pageviews where Google Ad Manager recorded revenue. |
| hits.publisher.dfpQueries | INTEGER | The number of ad requests made to Google Ad Manager. |
| hits.publisher.dfpRevenueCpc | INTEGER | The CPC revenue associated with the resultant ad clicks, based on the rate-field value for each clicked ad in Google Ad Manager. |
| hits.publisher.dfpRevenueCpm | INTEGER | The CPM revenue associated with the served ad impressions, based on the rate-field value for each served ad in Google Ad Manager. |
| hits.publisher.dfpViewableImpressions | INTEGER | The number of impressions that met Google Ad Manager’s viewability standard. |
| hits.time | INTEGER | The number of milliseconds after the visitStartTime when this hit was registered. The first hit has a hits.time of 0 |
| hits.transaction.transactionCoupon | STRING | The coupon code associated with the transaction. |
| hits.referrer | STRING | The referring page, if the session has a goal completion or transaction. If this page is from the same domain, this is blank. |
| hits.refund | RECORD | This row and nested fields are populated for each hit that contains Enhanced Ecommerce REFUND information. |
| hits.refund.localRefundAmount | INTEGER | Refund amount in local currency, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.refund.refundAmount | INTEGER | Refund amount, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.social | RECORD | This section is populated for each hit with type = "SOCIAL". |
| hits.social.hasSocialSourceReferral | STRING | A string, either Yes or No, that indicates whether sessions to the property are from a social source. |
| hits.social.socialInteractionAction | STRING | The social action passed with the social tracking code (Share, Tweet, etc.). |
| hits.social.socialInteractionNetwork | STRING | The the network passed with the social tracking code, e.g., Twitter. |
| hits.social.socialInteractionNetworkAction | STRING | For social interactions, this represents the social network being tracked. |
| hits.social.socialInteractions | INTEGER | The total number of social interactions. |
| hits.social.socialInteractionTarget | STRING | For social interactions, this is the URL (or resource) which receives the social network action. |
| hits.social.socialNetwork | STRING | The social network name. This is related to the referring social network for traffic sources; e.g., Blogger. |
| hits.social.uniqueSocialInteractions | INTEGER | The number of sessions during which the specified social action(s) occurred at least once. This is based on the the unique combination of socialInteractionNetwork, socialInteractionAction, and socialInteractionTarget. |
| hits.type | STRING | The type of hit. One of: "PAGE", "TRANSACTION", "ITEM", "EVENT", "SOCIAL", "APPVIEW", "EXCEPTION".<br>Timing hits are considered an event type in the Analytics backend. When you query time-related fields (e.g., hits.latencyTracking.pageLoadTime), choose hits.type as Event if you want to use hit.type in your queries. |
| hits.page | RECORD | This section is populated for each hit with type = "PAGE". |
| hits.page.pagePath | STRING | The URL path of the page. |
| hits.page.pagePathLevel1 | STRING | This dimension rolls up all the page paths in the 1st hierarchical level in pagePath. |
| hits.page.pagePathLevel2 | STRING | This dimension rolls up all the page paths in the 2nd hierarchical level in pagePath. |
| hits.page.pagePathLevel3 | STRING | This dimension rolls up all the page paths in the 3d hierarchical level in pagePath. |
| hits.page.pagePathLevel4 | STRING | This dimension rolls up all the page paths into hierarchical levels. Up to 4 pagePath levels may be specified. All additional levels in the pagePath hierarchy are also rolled up in this dimension. |
| hits.page.hostname | STRING | The hostname of the URL. |
| hits.page.pageTitle | STRING | The page title. |
| hits.page.searchKeyword | STRING | If this was a search results page, this is the keyword entered. |
| hits.product | RECORD | This row and nested fields will be populated for each hit that contains Enhanced Ecommerce PRODUCT data. |
| hits.product.localProductPrice | INTEGER | The price of the product in local currency, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.product.localProductRefundAmount | INTEGER | The amount processed as part of a refund for a product in local currency, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.product.localProductRevenue | INTEGER | The revenue of the product in local currency, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.product.productBrand | STRING | The brand associated with the product. |
| hits.product.productPrice | INTEGER | The price of the product, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.product.productQuantity | INTEGER | The quantity of the product purchased. |
| hits.product.productRefundAmount | INTEGER | The amount processed as part of a refund for a product, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.product.productRevenue | INTEGER | The revenue of the product, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.product.productSKU | STRING | Product SKU. |
| hits.product.productVariant | STRING | Product Variant. |
| hits.product.v2ProductCategory | STRING | Product Category. |
| hits.product.v2ProductName | STRING | Product Name. |
| hits.promotion | RECORD | This row and nested fields are populated for each hit that contains Enhanced Ecommerce PROMOTION information. |
| hits.promotion.promoCreative | STRING | The text or creative variation associated with the promotion. |
| hits.promotion.promoId | STRING | Promotion ID. |
| hits.promotion.promoName | STRING | Promotion Name. |
| hits.promotion.promoPosition | STRING | Promotion position on site. |
| hits.promotionActionInfo | RECORD | This row and nested fields are populated for each hit that contains Enhanced Ecommerce PROMOTION action information. |
| hits.promotionActionInfo.promoIsView | BOOLEAN | True if the Enhanced Ecommerce action is a promo view. |
| hits.promotionActionInfo.promoIsClick | BOOLEAN | True if the Enhanced Ecommerce action is a promo click. |
| hits.page.searchCategory | STRING | If this was a search-results page, this is the category selected. |
| hits.transaction | RECORD | This section is populated for each hit with type = "TRANSACTION". |
| hits.transaction.transactionId | STRING | The transaction ID of the ecommerce transaction. |
| hits.transaction.transactionRevenue | INTEGER | Total transaction revenue, expressed as the value passed to Analytics multiplied by 10^6. (e.g., 2.40 would be given as 2400000). |
| hits.transaction.transactionTax | INTEGER | Total transaction tax, expressed as the value passed to Analytics multiplied by 10^6. (e.g., 2.40 would be given as 2400000). |
| hits.transaction.transactionShipping | INTEGER | Total transaction shipping cost, expressed as the value passed to Analytics multiplied by 10^6. (e.g., 2.40 would be given as 2400000). |
| hits.transaction.affiliation | STRING | The affiliate information passed to the ecommerce tracking code. |
| hits.transaction.currencyCode | STRING | The local currency code for the transaction. |
| hits.transaction.localTransactionRevenue | INTEGER | Total transaction revenue in local currency, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.transaction.localTransactionTax | INTEGER | Total transaction tax in local currency, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.transaction.localTransactionShipping | INTEGER | Total transaction shipping cost in local currency, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.item | RECORD | This section will be populated for each hit with type = "ITEM". |
| hits.item.transactionId | STRING | The transaction ID of the ecommerce transaction. |
| hits.item.productName | STRING | The name of the product. |
| hits.item.productCategory | STRING | The category of the product. |
| hits.item.productSku | STRING | The SKU or product ID. |
| hits.item.itemQuantity | INTEGER | The quantity of the product sold. |
| hits.item.itemRevenue | INTEGER | Total revenue from the item, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.item.currencyCode | STRING | The local currency code for the transaction. |
| hits.item.localItemRevenue | INTEGER | Total revenue from this item in local currency, expressed as the value passed to Analytics multiplied by 10^6 (e.g., 2.40 would be given as 2400000). |
| hits.contentGroup | RECORD | This section contains information about content grouping. Learn more |
| hits.contentGroup.contentGroupX | STRING | The content group on a property. A content group is a collection of content that provides a logical structure that can be determined by tracking-code or page-title/URL regex match, or predefined rules. (Index X can range from 1 to 5.) |
| hits.contentGroup.previousContentGroupX | STRING | Content group that was visited before another content group. (Index X can range from 1 to 5.) |
| hits.contentGroup.contentGroupUniqueViewsX | STRING | The number of unique content group views. Content group views in different sessions are counted as unique content group views. Both the pagePath and pageTitle are used to determine content group view uniqueness. (Index X can range from 1 to 5.) |
| hits.contentInfo | RECORD | This section will be populated for each hit with type = "APPVIEW". |
| hits.contentInfo.contentDescription | STRING | The description of the content being viewed as passed to the SDK. |
| hits.appInfo | RECORD | This section will be populated for each hit with type = "APPVIEW" or "EXCEPTION". |
| hits.appInfo.appInstallerId | STRING | ID of the installer (e.g., Google Play Store) from which the app was downloaded. |
| hits.appInfo.appName | STRING | The name of the application. |
| hits.appInfo.appVersion | STRING | The version of the application. |
| hits.appInfo.appId | STRING | The ID of the application. |
| hits.appInfo.screenName | STRING | The name of the screen. |
| hits.appInfo.landingScreenName | STRING | The landing screen of the session. |
| hits.appInfo.exitScreenName | STRING | The exit screen of the session. |
| hits.appInfo.screenDepth | STRING | The number of screenviews per session reported as a string. Can be useful for historgrams. |
| hits.exceptionInfo | RECORD | This section is populated for each hit with type = "EXCEPTION". |
| hits.exceptionInfo.description | STRING | The exception description. |
| hits.exceptionInfo.isFatal | BOOLEAN | If the exception was fatal, this is set to true. |
| hits.eventInfo | RECORD | This section is populated for each hit with type = "EVENT". |
| hits.eventInfo.eventCategory | STRING | The event category. |
| hits.eventInfo.eventAction | STRING | The event action. |
| hits.eventInfo.eventLabel | STRING | The event label. |
| hits.eventInfo.eventValue | INTEGER | The event value. |
| hits.customVariables | RECORD | This section contains any hit-level custom variables. This is a repeated field and has an entry for each variable that is set. |
| hits.customVariables.index | INTEGER | The index of the custom variable. |
| hits.customVariables.customVarName | STRING | The custom variable name. |
| hits.customVariables.customVarValue | STRING | The custom variable value. |
| hits.customDimensions | RECORD | This section contains any hit-level custom dimensions. This is a repeated field and has an entry for each dimension that is set. |
| hits.customDimensions.index | INTEGER | The index of the custom dimension. |
| hits.customDimensions.value | STRING | The value of the custom dimension. |
| hits.customMetrics | RECORD | This section contains any hit-level custom metrics. This is a repeated field and has an entry for each metric that is set. |
| hits.customMetrics.index | INTEGER | The index of the custom metric. |
| hits.customMetrics.value | INTEGER | The value of the custom metric. |
| privacy_info.ads_storage | STRING | Whether ad targeting is enabled for a user.<br>Possible values: TRUE, FALSE, UNKNOWN |
| privacy_info.analytics_storage | STRING | Whether Analytics storage is enabled for the user.<br>Possible values: TRUE, FALSE, UNKNOWN |
| privacy_info.uses_transient_token | STRING | Whether a web user has denied Analytics storage and the developer has enabled measurement without cookies based on transient tokens in server data.<br>Possible values: TRUE, FALSE, UNKNOWN |
The table structure information is ({database name: {schema name: {table name}}}): 
{'bigquery-public-data': {'google_analytics_sample': ['ga_sessions_20160801', 'ga_sessions_20160802', 'ga_sessions_20160803', 'ga_sessions_20160804', 'ga_sessions_20160805', 'ga_sessions_20160806', 'ga_sessions_20160807', 'ga_sessions_20160808', 'ga_sessions_20160809', 'ga_sessions_20160810', 'ga_sessions_20160811', 'ga_sessions_20160812', 'ga_sessions_20160813', 'ga_sessions_20160814', 'ga_sessions_20160815', 'ga_sessions_20160816', 'ga_sessions_20160817', 'ga_sessions_20160818', 'ga_sessions_20160819', 'ga_sessions_20160820', 'ga_sessions_20160821', 'ga_sessions_20160822', 'ga_sessions_20160823', 'ga_sessions_20160824', 'ga_sessions_20160825', 'ga_sessions_20160826', 'ga_sessions_20160827', 'ga_sessions_20160828', 'ga_sessions_20160829', 'ga_sessions_20160830', 'ga_sessions_20160831', 'ga_sessions_20160901', 'ga_sessions_20160902', 'ga_sessions_20160903', 'ga_sessions_20160904', 'ga_sessions_20160905', 'ga_sessions_20160906', 'ga_sessions_20160907', 'ga_sessions_20160908', 'ga_sessions_20160909', 'ga_sessions_20160910', 'ga_sessions_20160911', 'ga_sessions_20160912', 'ga_sessions_20160913', 'ga_sessions_20160914', 'ga_sessions_20160915', 'ga_sessions_20160916', 'ga_sessions_20160917', 'ga_sessions_20160918', 'ga_sessions_20160919', 'ga_sessions_20160920', 'ga_sessions_20160921', 'ga_sessions_20160922', 'ga_sessions_20160923', 'ga_sessions_20160924', 'ga_sessions_20160925', 'ga_sessions_20160926', 'ga_sessions_20160927', 'ga_sessions_20160928', 'ga_sessions_20160929', 'ga_sessions_20160930', 'ga_sessions_20161001', 'ga_sessions_20161002', 'ga_sessions_20161003', 'ga_sessions_20161004', 'ga_sessions_20161005', 'ga_sessions_20161006', 'ga_sessions_20161007', 'ga_sessions_20161008', 'ga_sessions_20161009', 'ga_sessions_20161010', 'ga_sessions_20161011', 'ga_sessions_20161012', 'ga_sessions_20161013', 'ga_sessions_20161014', 'ga_sessions_20161015', 'ga_sessions_20161016', 'ga_sessions_20161017', 'ga_sessions_20161018', 'ga_sessions_20161019', 'ga_sessions_20161020', 'ga_sessions_20161021', 'ga_sessions_20161022', 'ga_sessions_20161023', 'ga_sessions_20161024', 'ga_sessions_20161025', 'ga_sessions_20161026', 'ga_sessions_20161027', 'ga_sessions_20161028', 'ga_sessions_20161029', 'ga_sessions_20161030', 'ga_sessions_20161031', 'ga_sessions_20161101', 'ga_sessions_20161102', 'ga_sessions_20161103', 'ga_sessions_20161104', 'ga_sessions_20161105', 'ga_sessions_20161106', 'ga_sessions_20161107', 'ga_sessions_20161108', 'ga_sessions_20161109', 'ga_sessions_20161110', 'ga_sessions_20161111', 'ga_sessions_20161112', 'ga_sessions_20161113', 'ga_sessions_20161114', 'ga_sessions_20161115', 'ga_sessions_20161116', 'ga_sessions_20161117', 'ga_sessions_20161118', 'ga_sessions_20161119', 'ga_sessions_20161120', 'ga_sessions_20161121', 'ga_sessions_20161122', 'ga_sessions_20161123', 'ga_sessions_20161124', 'ga_sessions_20161125', 'ga_sessions_20161126', 'ga_sessions_20161127', 'ga_sessions_20161128', 'ga_sessions_20161129', 'ga_sessions_20161130', 'ga_sessions_20161201', 'ga_sessions_20161202', 'ga_sessions_20161203', 'ga_sessions_20161204', 'ga_sessions_20161205', 'ga_sessions_20161206', 'ga_sessions_20161207', 'ga_sessions_20161208', 'ga_sessions_20161209', 'ga_sessions_20161210', 'ga_sessions_20161211', 'ga_sessions_20161212', 'ga_sessions_20161213', 'ga_sessions_20161214', 'ga_sessions_20161215', 'ga_sessions_20161216', 'ga_sessions_20161217', 'ga_sessions_20161218', 'ga_sessions_20161219', 'ga_sessions_20161220', 'ga_sessions_20161221', 'ga_sessions_20161222', 'ga_sessions_20161223', 'ga_sessions_20161224', 'ga_sessions_20161225', 'ga_sessions_20161226', 'ga_sessions_20161227', 'ga_sessions_20161228', 'ga_sessions_20161229', 'ga_sessions_20161230', 'ga_sessions_20161231', 'ga_sessions_20170101', 'ga_sessions_20170102', 'ga_sessions_20170103', 'ga_sessions_20170104', 'ga_sessions_20170105', 'ga_sessions_20170106', 'ga_sessions_20170107', 'ga_sessions_20170108', 'ga_sessions_20170109', 'ga_sessions_20170110', 'ga_sessions_20170111', 'ga_sessions_20170112', 'ga_sessions_20170113', 'ga_sessions_20170114', 'ga_sessions_20170115', 'ga_sessions_20170116', 'ga_sessions_20170117', 'ga_sessions_20170118', 'ga_sessions_20170119', 'ga_sessions_20170120', 'ga_sessions_20170121', 'ga_sessions_20170122', 'ga_sessions_20170123', 'ga_sessions_20170124', 'ga_sessions_20170125', 'ga_sessions_20170126', 'ga_sessions_20170127', 'ga_sessions_20170128', 'ga_sessions_20170129', 'ga_sessions_20170130', 'ga_sessions_20170131', 'ga_sessions_20170201', 'ga_sessions_20170202', 'ga_sessions_20170203', 'ga_sessions_20170204', 'ga_sessions_20170205', 'ga_sessions_20170206', 'ga_sessions_20170207', 'ga_sessions_20170208', 'ga_sessions_20170209', 'ga_sessions_20170210', 'ga_sessions_20170211', 'ga_sessions_20170212', 'ga_sessions_20170213', 'ga_sessions_20170214', 'ga_sessions_20170215', 'ga_sessions_20170216', 'ga_sessions_20170217', 'ga_sessions_20170218', 'ga_sessions_20170219', 'ga_sessions_20170220', 'ga_sessions_20170221', 'ga_sessions_20170222', 'ga_sessions_20170223', 'ga_sessions_20170224', 'ga_sessions_20170225', 'ga_sessions_20170226', 'ga_sessions_20170227', 'ga_sessions_20170228', 'ga_sessions_20170301', 'ga_sessions_20170302', 'ga_sessions_20170303', 'ga_sessions_20170304', 'ga_sessions_20170305', 'ga_sessions_20170306', 'ga_sessions_20170307', 'ga_sessions_20170308', 'ga_sessions_20170309', 'ga_sessions_20170310', 'ga_sessions_20170311', 'ga_sessions_20170312', 'ga_sessions_20170313', 'ga_sessions_20170314', 'ga_sessions_20170315', 'ga_sessions_20170316', 'ga_sessions_20170317', 'ga_sessions_20170318', 'ga_sessions_20170319', 'ga_sessions_20170320', 'ga_sessions_20170321', 'ga_sessions_20170322', 'ga_sessions_20170323', 'ga_sessions_20170324', 'ga_sessions_20170325', 'ga_sessions_20170326', 'ga_sessions_20170327', 'ga_sessions_20170328', 'ga_sessions_20170329', 'ga_sessions_20170330', 'ga_sessions_20170331', 'ga_sessions_20170401', 'ga_sessions_20170402', 'ga_sessions_20170403', 'ga_sessions_20170404', 'ga_sessions_20170405', 'ga_sessions_20170406', 'ga_sessions_20170407', 'ga_sessions_20170408', 'ga_sessions_20170409', 'ga_sessions_20170410', 'ga_sessions_20170411', 'ga_sessions_20170412', 'ga_sessions_20170413', 'ga_sessions_20170414', 'ga_sessions_20170415', 'ga_sessions_20170416', 'ga_sessions_20170417', 'ga_sessions_20170418', 'ga_sessions_20170419', 'ga_sessions_20170420', 'ga_sessions_20170421', 'ga_sessions_20170422', 'ga_sessions_20170423', 'ga_sessions_20170424', 'ga_sessions_20170425', 'ga_sessions_20170426', 'ga_sessions_20170427', 'ga_sessions_20170428', 'ga_sessions_20170429', 'ga_sessions_20170430', 'ga_sessions_20170501', 'ga_sessions_20170502', 'ga_sessions_20170503', 'ga_sessions_20170504', 'ga_sessions_20170505', 'ga_sessions_20170506', 'ga_sessions_20170507', 'ga_sessions_20170508', 'ga_sessions_20170509', 'ga_sessions_20170510', 'ga_sessions_20170511', 'ga_sessions_20170512', 'ga_sessions_20170513', 'ga_sessions_20170514', 'ga_sessions_20170515', 'ga_sessions_20170516', 'ga_sessions_20170517', 'ga_sessions_20170518', 'ga_sessions_20170519', 'ga_sessions_20170520', 'ga_sessions_20170521', 'ga_sessions_20170522', 'ga_sessions_20170523', 'ga_sessions_20170524', 'ga_sessions_20170525', 'ga_sessions_20170526', 'ga_sessions_20170527', 'ga_sessions_20170528', 'ga_sessions_20170529', 'ga_sessions_20170530', 'ga_sessions_20170531', 'ga_sessions_20170601', 'ga_sessions_20170602', 'ga_sessions_20170603', 'ga_sessions_20170604', 'ga_sessions_20170605', 'ga_sessions_20170606', 'ga_sessions_20170607', 'ga_sessions_20170608', 'ga_sessions_20170609', 'ga_sessions_20170610', 'ga_sessions_20170611', 'ga_sessions_20170612', 'ga_sessions_20170613', 'ga_sessions_20170614', 'ga_sessions_20170615', 'ga_sessions_20170616', 'ga_sessions_20170617', 'ga_sessions_20170618', 'ga_sessions_20170619', 'ga_sessions_20170620', 'ga_sessions_20170621', 'ga_sessions_20170622', 'ga_sessions_20170623', 'ga_sessions_20170624', 'ga_sessions_20170625', 'ga_sessions_20170626', 'ga_sessions_20170627', 'ga_sessions_20170628', 'ga_sessions_20170629', 'ga_sessions_20170630', 'ga_sessions_20170701', 'ga_sessions_20170702', 'ga_sessions_20170703', 'ga_sessions_20170704', 'ga_sessions_20170705', 'ga_sessions_20170706', 'ga_sessions_20170707', 'ga_sessions_20170708', 'ga_sessions_20170709', 'ga_sessions_20170710', 'ga_sessions_20170711', 'ga_sessions_20170712', 'ga_sessions_20170713', 'ga_sessions_20170714', 'ga_sessions_20170715', 'ga_sessions_20170716', 'ga_sessions_20170717', 'ga_sessions_20170718', 'ga_sessions_20170719', 'ga_sessions_20170720', 'ga_sessions_20170721', 'ga_sessions_20170722', 'ga_sessions_20170723', 'ga_sessions_20170724', 'ga_sessions_20170725', 'ga_sessions_20170726', 'ga_sessions_20170727', 'ga_sessions_20170728', 'ga_sessions_20170729', 'ga_sessions_20170730', 'ga_sessions_20170731', 'ga_sessions_20170801']}}
Begin Exploring Related Columns
**Relevant Columns and Potential Usage:**

- **`date`**: Used to filter sessions from April to July 2017.
- **`fullVisitorId`**: Identifies unique visitors.
- **`totals.pageviews`**: Provides the number of pageviews for each session.
- **`totals.transactions`**: Determines if a session is a purchase session (`totals.transactions` > 0) or a non-purchase session (`totals.transactions` IS NULL or = 0).

**Conditions that May Be Used:**

- Filter data where `date` is between '20170401' and '20170731'.
- Identify purchase sessions with `totals.transactions` > 0.
- Identify non-purchase sessions with `totals.transactions` IS NULL or `totals.transactions` = 0.

---

**Sample BigQuery SQL Queries:**

1. **Retrieve Pageviews and Transactions Between April and July 2017:**
   ```sql
   SELECT
     date,
     totals.pageviews,
     totals.transactions
   FROM
     `bigquery-public-data.google_analytics_sample.ga_sessions_*`
   WHERE
     _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
   LIMIT 100;
   ```

2. **List Distinct Visitors in June 2017:**
   ```sql
   SELECT DISTINCT
     fullVisitorId
   FROM
     `bigquery-public-data.google_analytics_sample.ga_sessions_*`
   WHERE
     _TABLE_SUFFIX BETWEEN '20170601' AND '20170630'
   LIMIT 100;
   ```

3. **Count Sessions Per Day in May 2017:**
   ```sql
   SELECT
     date,
     COUNT(*) AS session_count
   FROM
     `bigquery-public-data.google_analytics_sample.ga_sessions_*`
   WHERE
     _TABLE_SUFFIX BETWEEN '20170501' AND '20170531'
   GROUP BY
     date
   LIMIT 100;
   ```

4. **Get Pageviews for Purchase Sessions in July 2017:**
   ```sql
   SELECT
     fullVisitorId,
     date,
     totals.pageviews
   FROM
     `bigquery-public-data.google_analytics_sample.ga_sessions_*`
   WHERE
     _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'
     AND totals.transactions > 0
   LIMIT 100;
   ```

5. **Calculate Average Pageviews Per Session in April 2017:**
   ```sql
   SELECT
     AVG(totals.pageviews) AS avg_pageviews
   FROM
     `bigquery-public-data.google_analytics_sample.ga_sessions_*`
   WHERE
     _TABLE_SUFFIX BETWEEN '20170401' AND '20170430'
   LIMIT 100;
   ```

6. **Identify Non-Purchase Sessions and Their Pageviews in May 2017:**
   ```sql
   SELECT
     fullVisitorId,
     date,
     totals.pageviews
   FROM
     `bigquery-public-data.google_analytics_sample.ga_sessions_*`
   WHERE
     _TABLE_SUFFIX BETWEEN '20170501' AND '20170531'
     AND (totals.transactions IS NULL OR totals.transactions = 0)
   LIMIT 100;
   ```

7. **Compute Average Pageviews for Purchase Sessions for Each Month:**
   ```sql
   SELECT
     EXTRACT(MONTH FROM PARSE_DATE('%Y%m%d', date)) AS month,
     AVG(totals.pageviews) AS avg_pageviews_purchase
   FROM
     `bigquery-public-data.google_analytics_sample.ga_sessions_*`
   WHERE
     _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
     AND totals.transactions > 0
   GROUP BY
     month
   LIMIT 100;
   ```

8. **Compute Average Pageviews for Non-Purchase Sessions for Each Month:**
   ```sql
   SELECT
     EXTRACT(MONTH FROM PARSE_DATE('%Y%m%d', date)) AS month,
     AVG(totals.pageviews) AS avg_pageviews_nonpurchase
   FROM
     `bigquery-public-data.google_analytics_sample.ga_sessions_*`
   WHERE
     _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
     AND (totals.transactions IS NULL OR totals.transactions = 0)
   GROUP BY
     month
   LIMIT 100;
   ```

9. **Count Unique Visitors by Month:**
   ```sql
   SELECT
     EXTRACT(MONTH FROM PARSE_DATE('%Y%m%d', date)) AS month,
     COUNT(DISTINCT fullVisitorId) AS unique_visitors
   FROM
     `bigquery-public-data.google_analytics_sample.ga_sessions_*`
   WHERE
     _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
   GROUP BY
     month
   LIMIT 100;
   ```

10. **Retrieve Sessions with High Pageviews (Top 100) Between April and July 2017:**
    ```sql
    SELECT
      fullVisitorId,
      date,
      totals.pageviews
    FROM
      `bigquery-public-data.google_analytics_sample.ga_sessions_*`
    WHERE
      _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    ORDER BY
      totals.pageviews DESC
    LIMIT 100;
    ```

11. **Calculate Average Pageviews Per Visitor for Purchase Sessions in June 2017:**
    ```sql
    SELECT
      fullVisitorId,
      AVG(totals.pageviews) AS avg_pageviews_per_visitor
    FROM
      `bigquery-public-data.google_analytics_sample.ga_sessions_*`
    WHERE
      _TABLE_SUFFIX BETWEEN '20170601' AND '20170630'
      AND totals.transactions > 0
    GROUP BY
      fullVisitorId
    LIMIT 100;
    ```

12. **List Sessions Without Pageviews Between April and July 2017:**
    ```sql
    SELECT
      fullVisitorId,
      date,
      totals.pageviews
    FROM
      `bigquery-public-data.google_analytics_sample.ga_sessions_*`
    WHERE
      _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
      AND totals.pageviews = 0
    LIMIT 100;
    ```

13. **Retrieve Sessions with Transactions and High Pageviews:**
    ```sql
    SELECT
      fullVisitorId,
      date,
      totals.pageviews,
      totals.transactions
    FROM
      `bigquery-public-data.google_analytics_sample.ga_sessions_*`
    WHERE
      _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
      AND totals.transactions > 0
      AND totals.pageviews >= 5
    LIMIT 100;
    ```

14. **Compare Pageviews Between Mobile and Desktop Users in May 2017:**
    ```sql
    SELECT
      device.deviceCategory,
      AVG(totals.pageviews) AS avg_pageviews
    FROM
      `bigquery-public-data.google_analytics_sample.ga_sessions_*`
    WHERE
      _TABLE_SUFFIX BETWEEN '20170501' AND '20170531'
    GROUP BY
      device.deviceCategory
    LIMIT 100;
    ```

15. **Find the Top 10 Days with Highest Average Pageviews per Session:**
    ```sql
    SELECT
      date,
      AVG(totals.pageviews) AS avg_pageviews
    FROM
      `bigquery-public-data.google_analytics_sample.ga_sessions_*`
    WHERE
      _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    GROUP BY
      date
    ORDER BY
      avg_pageviews DESC
    LIMIT 10;
    ```

These queries help in understanding the data distribution and are steps toward calculating the average pageviews per visitor for purchase and non-purchase sessions from April to July 2017.Query:
WITH purchase_stats AS (
  SELECT
    FORMAT_DATE('%b-%Y', PARSE_DATE('%Y%m%d', date)) AS Month,
    COUNT(DISTINCT fullVisitorId) AS num_visitors,
    SUM(totals.pageviews) AS total_pageviews
  FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
  WHERE
    totals.transactions > 0
    AND _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
  GROUP BY
    Month
),
nonpurchase_stats AS (
  SELECT
    FORMAT_DATE('%b-%Y', PARSE_DATE('%Y%m%d', date)) AS Month,
    COUNT(DISTINCT fullVisitorId) AS num_visitors,
    SUM(totals.pageviews) AS total_pageviews
  FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
  WHERE
    (totals.transactions IS NULL OR totals.transactions = 0)
    AND _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
  GROUP BY
    Month
)
SELECT
  COALESCE(p.Month, np.Month) AS Month,
  SAFE_DIVIDE(p.total_pageviews, p.num_visitors) AS Average_Pageviews_Per_Visitor_Purchase_Sessions,
  SAFE_DIVIDE(np.total_pageviews, np.num_visitors) AS Average_Pageviews_Per_Visitor_NonPurchase_Sessions
FROM
  purchase_stats p
FULL OUTER JOIN
  nonpurchase_stats np
ON p.Month = np.Month
ORDER BY
  PARSE_DATE('%b-%Y', COALESCE(p.Month, np.Month));
Answer:
Month,Average_Pageviews_Per_Visitor_Purchase_Sessions,Average_Pageviews_Per_Visitor_NonPurchase_Sessions
Apr-2017,25.889655172413793,3.9798882277405
May-2017,23.61137440758294,4.446640392565975
Jun-2017,25.735763097949885,4.074559876184948
Jul-2017,27.720954356846473,4.191840874707743
Query:
SELECT DISTINCT
    fullVisitorId
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170601' AND '20170630'
    AND fullVisitorId IS NOT NULL
LIMIT 100
Answer:
fullVisitorId
9360633006498929847
7806950251446529341
4054257133014680116
6216704296990011635
3397610502524811924
3024604175831545813
3295018661361045041
1580383424602281338
9025138844201073062
3147342618739796829
3106876994416910527
2708904124166541970
9978168680595402110
5275775064063360620
8948603980388395747
0102527091741838919
5163583516335012312
6433335740023478596
0616530401183877867
8540727781618255431
7614754259965350887
4771562245452001312
2643945659489447376
1654123811097330881
2833722119498685942
5423437990262090686
5182834157628720649
4116720743881459837
4102118060900872415
5408240703525920538
2019475323321472449
5811368078800551365
1448804382547115644
6981327168047231026
6818733154977508907
1929825906857788866
4943391671462674780
0445330545116237877
1390832589475698965
7498695963354635199
1874362581208539474
6409706937264223608
4197827579135539744
9483984397746763720
346885686921823722
2421079405718443269
0040167112632479499
053290547587561700
5224340584514824287
5733692207901219261
6334752200433896374
59610610245489730
7604240739225278642
5740507455576555700
3587322123098196368
5633567733894973104
4215347458239853405
797570140181406249
2329907261017199121
4236804695584389388
2609662723174562105
7955119319945903918
1453691519754231663
0585429360683727579
118693013666336005
5099152215575652082
3321468456507455052
1967714500985800234
9886185329436227725
5147671905670825040
2617130631644928720
7337032665655052118
8625893538363280348
2396474645403671421
0574532869120704768
1780164102560353072
195211903498796959
885414612950156758
6786078921190711272
5108822671423693111
7987988291009067421
4070011008028471596
4791434072523951564
0080174123526113575
4995571571321873996
1394944415824242197
1565336502487513164
9099665130358829858
7332435401058074359
667986354481650626
5683375032802593078
1089302353269042996
7871589494395627666
5028628847906015742
9123880248743158224
5945853845194254234
7445235885559107095
2915046804632479934
1017891555036502730
3572645318086002757
Query:
SELECT
    date,
    COUNT(*) AS session_count
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170501' AND '20170531'
    AND date IS NOT NULL
GROUP BY
    date
LIMIT 100
Answer:
date,session_count
20170506,1383
20170502,2564
20170522,2248
20170525,2228
20170510,2024
20170503,2588
20170504,2806
20170526,2009
20170527,1502
20170524,2406
20170508,2025
20170514,1290
20170511,2218
20170523,2129
20170507,1400
20170520,1855
20170519,2223
20170530,2199
20170528,1463
20170505,1960
20170512,1932
20170509,2108
20170513,1251
20170517,3117
20170515,2360
20170521,1645
20170501,2588
20170529,1745
20170518,2715
20170531,2292
20170516,3098
Query:
SELECT
    fullVisitorId,
    date,
    totals.pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170701' AND '20170731'
    AND totals.transactions > 0
    AND totals.pageviews IS NOT NULL
LIMIT 100
Answer:
fullVisitorId,date,pageviews
0548744394505098293,20170725,16
0652202420147185334,20170725,17
8277644417832306861,20170725,18
5763555354582854124,20170725,17
452384137560800015,20170725,17
7731162068091223593,20170725,22
4921798700570421930,20170725,20
6968323948324124881,20170725,21
3454415788904146693,20170725,25
8528973034561269758,20170725,20
689318192161645703,20170725,24
3156235512146749592,20170725,25
165109760635455356,20170725,25
3273268557987890623,20170725,25
1563065767696461622,20170725,21
4140153693332318188,20170725,24
7115815619589342932,20170725,25
6052206455243513477,20170725,26
6366523937097011266,20170725,22
9598226286194728257,20170725,31
5135901390896357467,20170725,27
6568405082195988335,20170725,38
1675608109098320028,20170725,46
0743501820485430157,20170725,47
1164110348121511511,20170725,48
7803437096506812413,20170725,46
0082806901961150595,20170725,51
0795389678082168807,20170725,10
2338178303528914061,20170725,13
1424355572088327868,20170725,12
1152695544079009829,20170725,14
963845761761571092,20170725,13
1182675562893088634,20170725,17
2141032560407740130,20170725,15
2491238829943520906,20170725,20
9654518257837426461,20170725,18
0640433429877929929,20170726,15
6642261851584081073,20170726,16
7771380615067157220,20170726,16
8421245050853915723,20170726,16
5584411114546174652,20170726,15
3092487309701391768,20170726,20
2249724102559347990,20170726,18
3424918216070852195,20170726,22
3310309019453934499,20170726,22
8375075536798804409,20170726,24
8308144532481482080,20170726,25
0604314853571328266,20170726,27
3743916662879082495,20170726,26
9846963060470956023,20170726,26
5248418277725722133,20170726,25
8657427332734176422,20170726,25
397440133393463294,20170726,26
7701571111733834937,20170726,33
4410953563194536742,20170726,17
1761084588077503545,20170726,29
5840295243911523760,20170726,31
4807930160918189094,20170726,35
1247282406356396417,20170726,36
4140559214164857738,20170726,27
3854579461029873656,20170726,36
8382560140451028355,20170726,44
4883249725302903151,20170726,34
4146222468180363567,20170726,39
0780253600713375371,20170726,35
5962830800899970265,20170726,56
Query:
SELECT
    AVG(totals.pageviews) AS avg_pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170430'
    AND totals.pageviews IS NOT NULL
LIMIT 100
Answer:
avg_pageviews
3.6141182079589975
Query:
SELECT
    fullVisitorId,
    date,
    totals.pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170501' AND '20170531'
    AND (totals.transactions IS NULL OR totals.transactions = 0)
    AND totals.pageviews IS NOT NULL
LIMIT 100
Answer:
fullVisitorId,date,pageviews
9465627723765293158,20170525,1
9465627723765293158,20170525,1
1414204044244891943,20170525,1
9750816837395702230,20170525,1
2819782835074265550,20170525,1
64524021944200033,20170525,1
2855197097810063056,20170525,1
9616151806647084184,20170525,1
0749981983046598170,20170525,1
6403193286671633428,20170525,1
7924531604867905213,20170525,1
4340944648693399996,20170525,1
0890513848478667207,20170525,1
0019461609427849381,20170525,1
2622804847932256881,20170525,1
3050233930775027906,20170525,1
9312785599058728449,20170525,1
8911885932461083612,20170525,1
6018775005072216201,20170525,1
7920335467117869930,20170525,1
9165655000214758678,20170525,1
4495630210023235809,20170525,1
5949120730113679746,20170525,1
7162106732146582534,20170525,1
7880222623656547870,20170525,1
6384491035770796085,20170525,1
4081753376264569133,20170525,1
5447127046645933627,20170525,1
6456044035214556392,20170525,1
4777605442232989801,20170525,1
866669097783440908,20170525,1
9682254037266128369,20170525,1
1178803796478835500,20170525,1
7430392083322547589,20170525,1
6163610418760015991,20170525,1
7325969506529115169,20170525,1
8029081283135949333,20170525,1
7590447219760056121,20170525,1
4968697644997497439,20170525,1
1726688099803417412,20170525,1
0595580883508076750,20170525,1
7905033160928824760,20170525,1
2404909131117412302,20170525,1
6227547781901937136,20170525,1
6680046196386345849,20170525,1
3498622590153039194,20170525,1
6241955761571337783,20170525,1
4620579310827537948,20170525,1
3010275200462016316,20170525,1
5991537787598523165,20170525,1
2091584468428238973,20170525,1
8179084755529166884,20170525,1
7667465752506922497,20170525,1
7987807624871420171,20170525,1
655572661582643067,20170525,1
4601373753986538222,20170525,1
8233429133043038425,20170525,1
1515020338916282310,20170525,1
0934424251746172432,20170525,1
9401537436854044850,20170525,1
5427455284763834699,20170525,1
7958727783070094606,20170525,1
2455040687167141824,20170525,1
6994824949009035909,20170525,1
1182702137000598591,20170525,1
164234189715216102,20170525,1
Query:
SELECT
    EXTRACT(MONTH FROM PARSE_DATE('%Y%m%d', date)) AS month,
    AVG(totals.pageviews) AS avg_pageviews_purchase
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.transactions > 0
    AND totals.pageviews IS NOT NULL
GROUP BY
    month
LIMIT 100
Answer:
month,avg_pageviews_purchase
4,24.27155172413793
6,23.88583509513742
7,25.91949563530553
5,22.34080717488789
Query:
SELECT
    EXTRACT(MONTH FROM PARSE_DATE('%Y%m%d', date)) AS month,
    AVG(totals.pageviews) AS avg_pageviews_nonpurchase
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND (totals.transactions IS NULL OR totals.transactions = 0)
    AND totals.pageviews IS NOT NULL
GROUP BY
    month
LIMIT 100
Answer:
month,avg_pageviews_nonpurchase
7,3.445644033067193
6,3.363097804391218
5,3.582477275557216
4,3.32450030970978
Query:
SELECT
    EXTRACT(MONTH FROM PARSE_DATE('%Y%m%d', date)) AS month,
    COUNT(DISTINCT fullVisitorId) AS unique_visitors
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND date IS NOT NULL
    AND fullVisitorId IS NOT NULL
GROUP BY
    month
LIMIT 100
Answer:
month,unique_visitors
4,55681
6,52067
7,58569
5,52233
Query:
SELECT
    fullVisitorId,
    date,
    totals.pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
ORDER BY
    totals.pageviews DESC
LIMIT 100
Answer:
fullVisitorId,date,pageviews
0804281778755290192,20170425,223
1957458976293878100,20170420,202
1957458976293878100,20170419,201
8388931032955052746,20170729,186
057693500927581077,20170722,175
6789528963693848193,20170729,169
332494308387844831,20170701,168
0807236855616914537,20170412,154
1957458976293878100,20170407,151
1280993661204347450,20170716,145
3361857074092840747,20170707,139
8637158932301658318,20170531,139
9703644597836409304,20170523,136
9929765185063189624,20170411,133
7498695963354635199,20170502,132
7483600664917507409,20170731,122
8787132658319095913,20170425,121
0968874458654116846,20170403,120
485196789418021564,20170521,118
3855473804472998317,20170529,118
512867189138675160,20170719,117
4828702923179484007,20170608,114
1997401331704594416,20170414,114
4955298442921379457,20170426,113
844607763689454773,20170607,112
9560188227657174682,20170630,111
3353672870584339810,20170402,110
9417857471295131045,20170713,109
8353360074725418910,20170626,109
5286653810282194817,20170717,108
8787132658319095913,20170426,108
9929765185063189624,20170411,107
7834453494868539530,20170405,105
1957458976293878100,20170608,104
9100736417133253199,20170717,103
0567111192024013209,20170528,102
4906173885819330212,20170415,100
2136452381524374196,20170514,99
7933171750259720017,20170628,99
2943746373898362304,20170529,99
3800524542852050538,20170714,98
6419312684856935815,20170606,98
2690813835058334348,20170406,97
7320316463607490470,20170618,96
1377584857523991044,20170425,93
4382710169252447985,20170625,93
7483600664917507409,20170530,93
2969418676126258798,20170727,93
47511660497565285,20170720,93
8520669029121182420,20170407,92
1656927552400476520,20170717,92
5921470851641568524,20170408,91
6949496197162068722,20170615,91
6761167285196973718,20170717,91
0035322769016923863,20170412,90
4606811175305315310,20170726,90
245211595613401326,20170626,90
44209895816200509,20170511,90
7834453494868539530,20170404,89
9972741982974257535,20170423,89
3640513475847511726,20170728,89
301568042851919466,20170522,89
4462535658579373069,20170715,89
3984247832072653802,20170711,88
0778450426111896201,20170410,88
Query:
SELECT
    fullVisitorId,
    AVG(totals.pageviews) AS avg_pageviews_per_visitor
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170601' AND '20170630'
    AND totals.transactions > 0
    AND totals.pageviews IS NOT NULL
GROUP BY
    fullVisitorId
LIMIT 100
Answer:
fullVisitorId,avg_pageviews_per_visitor
6820200829240883942,14.0
9717690429113938490,13.0
8135224127864726768,20.0
2584325239090818797,18.0
5438973470974624883,21.0
9801630253390309535,36.0
9226278380512438191,37.0
5520985287231906451,15.0
9220624765783417577,24.0
6722355366831429055,16.0
2573691084209115534,23.0
2940621972871301246,26.0
2623046443543317941,33.0
924091465796731445,46.0
0968815662109493799,36.0
9793419613813560755,13.0
872868652972070012,15.0
9705361545058587946,17.0
6183580574407648205,19.0
6068721773356724228,13.0
4352760646905266733,16.0
4878479233087678463,16.0
4474128110841843619,18.0
6006657047016577071,16.0
6998123451602955017,19.0
6207808178177919930,18.5
5871441013780996077,25.0
2536718676534980101,20.0
8207927310589023961,28.0
4495098615981928560,30.0
0403854633867059264,29.0
7665584448967359272,37.0
7505999967306814340,39.0
6703621215961449720,49.0
980432803323288584,59.0
5001626019499127935,21.0
633090494027651510,20.0
9692965964258784311,26.0
1350238261946976509,40.0
9227772112500941696,13.0
2544471402172631001,14.0
5135901390896357467,16.0
3161406189281338784,22.0
8846681432728347342,23.0
7170833000891918188,24.0
9664379686822682449,31.0
659736568334808305,30.0
4497523886443399219,37.0
6296763059019207281,46.0
9372380334741229572,18.0
1337744272385974839,19.0
2811132188167803677,19.0
5947969981378635810,26.0
5397689762316048105,44.0
5185645869012304658,30.5
3041665208670915405,41.0
2533003348216867648,56.0
2180515369167502520,13.666666666666666
6984760030997730219,18.0
6359330005069703105,15.0
5988082186046287943,21.0
5274178488388033997,33.0
2087690429996100452,11.0
3836209289653625827,11.0
0992883166330459343,15.0
116147939572219012,18.0
9320164337521602239,40.0
Query:
SELECT
    fullVisitorId,
    date,
    totals.pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NULL
LIMIT 100;
Answer:
fullVisitorId,date,pageviews
342293839886391327,20170418,
7524172425421392206,20170418,
2386169796638986389,20170507,
1443544156347007192,20170628,
2296031074257755185,20170708,
8347293108136969989,20170725,
318356747629561030,20170725,
689318192161645703,20170725,
4486961999346450732,20170707,
5474675640269393137,20170724,
7839060813395976488,20170724,
1806046855786021685,20170724,
4467977904156144789,20170702,
8500551927888309875,20170516,
4493424018596739717,20170516,
1091802616723319272,20170406,
1657777210941923786,20170517,
5816628350060068820,20170720,
1378666356226377234,20170704,
559525260205715507,20170731,
1869599090210681270,20170525,
597410560122002668,20170605,
5762097961486229983,20170723,
6520014152855797192,20170723,
7287092188974669232,20170602,
397699574323551811,20170414,
1869599090210681270,20170523,
0579129954956666086,20170619,
9091016244317556602,20170619,
8398956356337075647,20170627,
8039815940362823018,20170426,
2878042683639005958,20170620,
8717262821534000131,20170520,
4031993507382416569,20170501,
5753996978342385595,20170722,
4550233534945277564,20170403,
1745704968375207603,20170425,
1459360539535171755,20170711,
Query:
SELECT
    fullVisitorId,
    date,
    totals.pageviews,
    totals.transactions
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.transactions > 0
    AND totals.pageviews IS NOT NULL
LIMIT 100
Answer:
fullVisitorId,date,pageviews,transactions
3028833598226517640,20170502,10,1
6768316228601904493,20170502,9,1
3182530876752588535,20170502,11,1
8053647597306727204,20170502,12,1
9913737248744802178,20170502,11,1
8198644197116666636,20170502,12,1
5516160305654218647,20170502,13,1
5265060535305335127,20170502,12,1
2336992111054994391,20170502,13,1
6215409591124058773,20170502,12,1
4463337271590211636,20170502,13,1
0981755101938488888,20170502,13,1
0487480427659606163,20170502,13,1
6774994701357708261,20170502,14,1
6589067113499479000,20170502,14,1
198049799955668412,20170502,15,1
1833282132105102358,20170502,13,1
5047879966390554745,20170502,15,1
1733292548126989965,20170502,15,1
8532055883431477965,20170502,13,1
3862093055992617004,20170502,16,1
5536585753094480600,20170502,14,1
3287424336851494398,20170502,13,1
0764484494612548101,20170502,17,1
4422531930916613183,20170502,16,1
4314785522549943313,20170502,13,1
3182137775133532420,20170502,16,1
6855063825045549554,20170502,16,1
8793305437694814320,20170502,18,1
7875893829613781625,20170502,18,1
2082463322705444336,20170502,16,1
5512744925410659627,20170502,17,1
9946704516426299877,20170502,17,1
2571702649159032063,20170502,16,1
2602171406058495760,20170502,12,1
8726813153683135107,20170502,19,1
0693664182055359688,20170502,17,1
3448395334687442693,20170502,20,1
0511506099436408879,20170502,20,1
2310334534790814231,20170502,21,1
4560598885300753163,20170502,21,1
0634506282991036601,20170502,23,1
7939195923933153052,20170502,24,1
2456900971869384659,20170502,23,1
4556039598367991486,20170502,20,1
0660738563067658683,20170502,22,1
4118472468366626985,20170502,17,1
965001845233995898,20170502,24,2
7723283988655524549,20170502,22,1
0552165022845624889,20170502,22,1
8749354080686070265,20170502,22,1
4855915470226632443,20170502,22,1
9909403981445501787,20170502,23,1
Query:
SELECT
    device.deviceCategory,
    AVG(totals.pageviews) AS avg_pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170501' AND '20170531'
    AND totals.pageviews IS NOT NULL
GROUP BY
    device.deviceCategory
LIMIT 100
Answer:
deviceCategory,avg_pageviews
desktop,4.184541911648755
mobile,3.2464119995683607
tablet,3.753896636587367
Query:
SELECT
    date,
    AVG(totals.pageviews) AS avg_pageviews
FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
GROUP BY
    date
ORDER BY
    avg_pageviews DESC
LIMIT 10
Answer:
date,avg_pageviews
20170521,4.3300911854103346
20170519,4.321637426900583
20170524,4.291354945968412
20170721,4.28924598269468
20170514,4.28449612403101
20170731,4.243986254295529
20170522,4.242437722419928
20170719,4.205648369132852
20170717,4.186821415200303
20170523,4.18233082706767
End Exploring Related Columns
Task: Compare the average pageviews per visitor between purchase and non-purchase sessions for each month from April to July in 2017.

Please answer only one complete SQL in bigquery dialect in ```sql``` format.
Usage example: ```sql
SELECT `column_name` FROM `database.schema.table` WHERE ... ``` (Replace `database`, `schema`, and `table` with actual names. Enclose column names and table identifiers with backticks.)
Follow the answer format like: ```csv
Month,Average_Pageviews_per_Visitor_Purchase_Sessions,Average_Pageviews_per_Visitor_NonPurchase_Sessions
Apr-2017:str,avg_purchase:float > 0,avg_nonpurchase:float > 0
May-2017:str,avg_purchase:float > 0,avg_nonpurchase:float > 0
Jun-2017:str,avg_purchase:float > 0,avg_nonpurchase:float > 0
Jul-2017:str,avg_purchase:float > 0,avg_nonpurchase:float > 0
(Attention: answer in four rows)
```

The table above compares the average pageviews per visitor between purchase and non-purchase sessions for each month from April to July in 2017. The average pageviews per visitor are presented for both purchase sessions and non-purchase sessions. All values are greater than 0..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'bigquery-public-data': {'google_analytics_sample': ['ga_sessions_20160801', 'ga_sessions_20160802', 'ga_sessions_20160803', 'ga_sessions_20160804', 'ga_sessions_20160805', 'ga_sessions_20160806', 'ga_sessions_20160807', 'ga_sessions_20160808', 'ga_sessions_20160809', 'ga_sessions_20160810', 'ga_sessions_20160811', 'ga_sessions_20160812', 'ga_sessions_20160813', 'ga_sessions_20160814', 'ga_sessions_20160815', 'ga_sessions_20160816', 'ga_sessions_20160817', 'ga_sessions_20160818', 'ga_sessions_20160819', 'ga_sessions_20160820', 'ga_sessions_20160821', 'ga_sessions_20160822', 'ga_sessions_20160823', 'ga_sessions_20160824', 'ga_sessions_20160825', 'ga_sessions_20160826', 'ga_sessions_20160827', 'ga_sessions_20160828', 'ga_sessions_20160829', 'ga_sessions_20160830', 'ga_sessions_20160831', 'ga_sessions_20160901', 'ga_sessions_20160902', 'ga_sessions_20160903', 'ga_sessions_20160904', 'ga_sessions_20160905', 'ga_sessions_20160906', 'ga_sessions_20160907', 'ga_sessions_20160908', 'ga_sessions_20160909', 'ga_sessions_20160910', 'ga_sessions_20160911', 'ga_sessions_20160912', 'ga_sessions_20160913', 'ga_sessions_20160914', 'ga_sessions_20160915', 'ga_sessions_20160916', 'ga_sessions_20160917', 'ga_sessions_20160918', 'ga_sessions_20160919', 'ga_sessions_20160920', 'ga_sessions_20160921', 'ga_sessions_20160922', 'ga_sessions_20160923', 'ga_sessions_20160924', 'ga_sessions_20160925', 'ga_sessions_20160926', 'ga_sessions_20160927', 'ga_sessions_20160928', 'ga_sessions_20160929', 'ga_sessions_20160930', 'ga_sessions_20161001', 'ga_sessions_20161002', 'ga_sessions_20161003', 'ga_sessions_20161004', 'ga_sessions_20161005', 'ga_sessions_20161006', 'ga_sessions_20161007', 'ga_sessions_20161008', 'ga_sessions_20161009', 'ga_sessions_20161010', 'ga_sessions_20161011', 'ga_sessions_20161012', 'ga_sessions_20161013', 'ga_sessions_20161014', 'ga_sessions_20161015', 'ga_sessions_20161016', 'ga_sessions_20161017', 'ga_sessions_20161018', 'ga_sessions_20161019', 'ga_sessions_20161020', 'ga_sessions_20161021', 'ga_sessions_20161022', 'ga_sessions_20161023', 'ga_sessions_20161024', 'ga_sessions_20161025', 'ga_sessions_20161026', 'ga_sessions_20161027', 'ga_sessions_20161028', 'ga_sessions_20161029', 'ga_sessions_20161030', 'ga_sessions_20161031', 'ga_sessions_20161101', 'ga_sessions_20161102', 'ga_sessions_20161103', 'ga_sessions_20161104', 'ga_sessions_20161105', 'ga_sessions_20161106', 'ga_sessions_20161107', 'ga_sessions_20161108', 'ga_sessions_20161109', 'ga_sessions_20161110', 'ga_sessions_20161111', 'ga_sessions_20161112', 'ga_sessions_20161113', 'ga_sessions_20161114', 'ga_sessions_20161115', 'ga_sessions_20161116', 'ga_sessions_20161117', 'ga_sessions_20161118', 'ga_sessions_20161119', 'ga_sessions_20161120', 'ga_sessions_20161121', 'ga_sessions_20161122', 'ga_sessions_20161123', 'ga_sessions_20161124', 'ga_sessions_20161125', 'ga_sessions_20161126', 'ga_sessions_20161127', 'ga_sessions_20161128', 'ga_sessions_20161129', 'ga_sessions_20161130', 'ga_sessions_20161201', 'ga_sessions_20161202', 'ga_sessions_20161203', 'ga_sessions_20161204', 'ga_sessions_20161205', 'ga_sessions_20161206', 'ga_sessions_20161207', 'ga_sessions_20161208', 'ga_sessions_20161209', 'ga_sessions_20161210', 'ga_sessions_20161211', 'ga_sessions_20161212', 'ga_sessions_20161213', 'ga_sessions_20161214', 'ga_sessions_20161215', 'ga_sessions_20161216', 'ga_sessions_20161217', 'ga_sessions_20161218', 'ga_sessions_20161219', 'ga_sessions_20161220', 'ga_sessions_20161221', 'ga_sessions_20161222', 'ga_sessions_20161223', 'ga_sessions_20161224', 'ga_sessions_20161225', 'ga_sessions_20161226', 'ga_sessions_20161227', 'ga_sessions_20161228', 'ga_sessions_20161229', 'ga_sessions_20161230', 'ga_sessions_20161231', 'ga_sessions_20170101', 'ga_sessions_20170102', 'ga_sessions_20170103', 'ga_sessions_20170104', 'ga_sessions_20170105', 'ga_sessions_20170106', 'ga_sessions_20170107', 'ga_sessions_20170108', 'ga_sessions_20170109', 'ga_sessions_20170110', 'ga_sessions_20170111', 'ga_sessions_20170112', 'ga_sessions_20170113', 'ga_sessions_20170114', 'ga_sessions_20170115', 'ga_sessions_20170116', 'ga_sessions_20170117', 'ga_sessions_20170118', 'ga_sessions_20170119', 'ga_sessions_20170120', 'ga_sessions_20170121', 'ga_sessions_20170122', 'ga_sessions_20170123', 'ga_sessions_20170124', 'ga_sessions_20170125', 'ga_sessions_20170126', 'ga_sessions_20170127', 'ga_sessions_20170128', 'ga_sessions_20170129', 'ga_sessions_20170130', 'ga_sessions_20170131', 'ga_sessions_20170201', 'ga_sessions_20170202', 'ga_sessions_20170203', 'ga_sessions_20170204', 'ga_sessions_20170205', 'ga_sessions_20170206', 'ga_sessions_20170207', 'ga_sessions_20170208', 'ga_sessions_20170209', 'ga_sessions_20170210', 'ga_sessions_20170211', 'ga_sessions_20170212', 'ga_sessions_20170213', 'ga_sessions_20170214', 'ga_sessions_20170215', 'ga_sessions_20170216', 'ga_sessions_20170217', 'ga_sessions_20170218', 'ga_sessions_20170219', 'ga_sessions_20170220', 'ga_sessions_20170221', 'ga_sessions_20170222', 'ga_sessions_20170223', 'ga_sessions_20170224', 'ga_sessions_20170225', 'ga_sessions_20170226', 'ga_sessions_20170227', 'ga_sessions_20170228', 'ga_sessions_20170301', 'ga_sessions_20170302', 'ga_sessions_20170303', 'ga_sessions_20170304', 'ga_sessions_20170305', 'ga_sessions_20170306', 'ga_sessions_20170307', 'ga_sessions_20170308', 'ga_sessions_20170309', 'ga_sessions_20170310', 'ga_sessions_20170311', 'ga_sessions_20170312', 'ga_sessions_20170313', 'ga_sessions_20170314', 'ga_sessions_20170315', 'ga_sessions_20170316', 'ga_sessions_20170317', 'ga_sessions_20170318', 'ga_sessions_20170319', 'ga_sessions_20170320', 'ga_sessions_20170321', 'ga_sessions_20170322', 'ga_sessions_20170323', 'ga_sessions_20170324', 'ga_sessions_20170325', 'ga_sessions_20170326', 'ga_sessions_20170327', 'ga_sessions_20170328', 'ga_sessions_20170329', 'ga_sessions_20170330', 'ga_sessions_20170331', 'ga_sessions_20170401', 'ga_sessions_20170402', 'ga_sessions_20170403', 'ga_sessions_20170404', 'ga_sessions_20170405', 'ga_sessions_20170406', 'ga_sessions_20170407', 'ga_sessions_20170408', 'ga_sessions_20170409', 'ga_sessions_20170410', 'ga_sessions_20170411', 'ga_sessions_20170412', 'ga_sessions_20170413', 'ga_sessions_20170414', 'ga_sessions_20170415', 'ga_sessions_20170416', 'ga_sessions_20170417', 'ga_sessions_20170418', 'ga_sessions_20170419', 'ga_sessions_20170420', 'ga_sessions_20170421', 'ga_sessions_20170422', 'ga_sessions_20170423', 'ga_sessions_20170424', 'ga_sessions_20170425', 'ga_sessions_20170426', 'ga_sessions_20170427', 'ga_sessions_20170428', 'ga_sessions_20170429', 'ga_sessions_20170430', 'ga_sessions_20170501', 'ga_sessions_20170502', 'ga_sessions_20170503', 'ga_sessions_20170504', 'ga_sessions_20170505', 'ga_sessions_20170506', 'ga_sessions_20170507', 'ga_sessions_20170508', 'ga_sessions_20170509', 'ga_sessions_20170510', 'ga_sessions_20170511', 'ga_sessions_20170512', 'ga_sessions_20170513', 'ga_sessions_20170514', 'ga_sessions_20170515', 'ga_sessions_20170516', 'ga_sessions_20170517', 'ga_sessions_20170518', 'ga_sessions_20170519', 'ga_sessions_20170520', 'ga_sessions_20170521', 'ga_sessions_20170522', 'ga_sessions_20170523', 'ga_sessions_20170524', 'ga_sessions_20170525', 'ga_sessions_20170526', 'ga_sessions_20170527', 'ga_sessions_20170528', 'ga_sessions_20170529', 'ga_sessions_20170530', 'ga_sessions_20170531', 'ga_sessions_20170601', 'ga_sessions_20170602', 'ga_sessions_20170603', 'ga_sessions_20170604', 'ga_sessions_20170605', 'ga_sessions_20170606', 'ga_sessions_20170607', 'ga_sessions_20170608', 'ga_sessions_20170609', 'ga_sessions_20170610', 'ga_sessions_20170611', 'ga_sessions_20170612', 'ga_sessions_20170613', 'ga_sessions_20170614', 'ga_sessions_20170615', 'ga_sessions_20170616', 'ga_sessions_20170617', 'ga_sessions_20170618', 'ga_sessions_20170619', 'ga_sessions_20170620', 'ga_sessions_20170621', 'ga_sessions_20170622', 'ga_sessions_20170623', 'ga_sessions_20170624', 'ga_sessions_20170625', 'ga_sessions_20170626', 'ga_sessions_20170627', 'ga_sessions_20170628', 'ga_sessions_20170629', 'ga_sessions_20170630', 'ga_sessions_20170701', 'ga_sessions_20170702', 'ga_sessions_20170703', 'ga_sessions_20170704', 'ga_sessions_20170705', 'ga_sessions_20170706', 'ga_sessions_20170707', 'ga_sessions_20170708', 'ga_sessions_20170709', 'ga_sessions_20170710', 'ga_sessions_20170711', 'ga_sessions_20170712', 'ga_sessions_20170713', 'ga_sessions_20170714', 'ga_sessions_20170715', 'ga_sessions_20170716', 'ga_sessions_20170717', 'ga_sessions_20170718', 'ga_sessions_20170719', 'ga_sessions_20170720', 'ga_sessions_20170721', 'ga_sessions_20170722', 'ga_sessions_20170723', 'ga_sessions_20170724', 'ga_sessions_20170725', 'ga_sessions_20170726', 'ga_sessions_20170727', 'ga_sessions_20170728', 'ga_sessions_20170729', 'ga_sessions_20170730', 'ga_sessions_20170731', 'ga_sessions_20170801']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
You need to follow the format's positive signs.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-27 21:27:33 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 21:27:33 - root - INFO - ```sql
WITH sessions AS (
  SELECT
    FORMAT_DATE('%b-%Y', PARSE_DATE('%Y%m%d', date)) AS Month,
    fullVisitorId,
    totals.pageviews,
    CASE
      WHEN totals.transactions > 0 THEN 'Purchase'
      ELSE 'NonPurchase'
    END AS session_type
  FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
    AND fullVisitorId IS NOT NULL
),
visitor_pageviews AS (
  SELECT
    Month,
    session_type,
    fullVisitorId,
    SUM(totals.pageviews) AS total_pageviews_per_visitor
  FROM
    sessions
  GROUP BY
    Month, session_type, fullVisitorId
)
SELECT
  Month,
  ROUND(AVG(IF(session_type = 'Purchase', total_pageviews_per_visitor, NULL)), 4) AS Average_Pageviews_per_Visitor_Purchase_Sessions,
  ROUND(AVG(IF(session_type = 'NonPurchase', total_pageviews_per_visitor, NULL)), 4) AS Average_Pageviews_per_Visitor_NonPurchase_Sessions
FROM
  visitor_pageviews
GROUP BY
  Month
ORDER BY
  PARSE_DATE('%b-%Y', Month);
```
2025-01-27 21:27:34 - root - INFO - itercount: 1
2025-01-27 21:27:34 - root - INFO - 400 Unrecognized name: totals at [22:9]; reason: invalidQuery, location: query, message: Unrecognized name: totals at [22:9]

Location: US
Job ID: 07d61016-69eb-46b8-bc85-69f6d3253ff3

2025-01-27 21:27:34 - root - INFO - Input sql:
WITH sessions AS (
  SELECT
    FORMAT_DATE('%b-%Y', PARSE_DATE('%Y%m%d', date)) AS Month,
    fullVisitorId,
    totals.pageviews,
    CASE
      WHEN totals.transactions > 0 THEN 'Purchase'
      ELSE 'NonPurchase'
    END AS session_type
  FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
    AND fullVisitorId IS NOT NULL
),
visitor_pageviews AS (
  SELECT
    Month,
    session_type,
    fullVisitorId,
    SUM(totals.pageviews) AS total_pageviews_per_visitor
  FROM
    sessions
  GROUP BY
    Month, session_type, fullVisitorId
)
SELECT
  Month,
  ROUND(AVG(IF(session_type = 'Purchase', total_pageviews_per_visitor, NULL)), 4) AS Average_Pageviews_per_Visitor_Purchase_Sessions,
  ROUND(AVG(IF(session_type = 'NonPurchase', total_pageviews_per_visitor, NULL)), 4) AS Average_Pageviews_per_Visitor_NonPurchase_Sessions
FROM
  visitor_pageviews
GROUP BY
  Month
ORDER BY
  PARSE_DATE('%b-%Y', Month);
The error information is:
400 Unrecognized name: totals at [22:9]; reason: invalidQuery, location: query, message: Unrecognized name: totals at [22:9]

Location: US
Job ID: 07d61016-69eb-46b8-bc85-69f6d3253ff3

Please correct it and output only 1 complete SQL query.You need to follow the format's positive signs.

2025-01-27 21:27:58 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 21:27:58 - root - INFO - ```sql
WITH sessions AS (
  SELECT
    FORMAT_DATE('%b-%Y', PARSE_DATE('%Y%m%d', date)) AS Month,
    fullVisitorId,
    totals.pageviews AS pageviews,
    CASE
      WHEN totals.transactions > 0 THEN 'Purchase'
      ELSE 'NonPurchase'
    END AS session_type
  FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
    AND fullVisitorId IS NOT NULL
),
visitor_pageviews AS (
  SELECT
    Month,
    session_type,
    fullVisitorId,
    SUM(pageviews) AS total_pageviews_per_visitor
  FROM
    sessions
  GROUP BY
    Month, session_type, fullVisitorId
)
SELECT
  Month,
  ROUND(AVG(IF(session_type = 'Purchase', total_pageviews_per_visitor, NULL)), 4) AS Average_Pageviews_per_Visitor_Purchase_Sessions,
  ROUND(AVG(IF(session_type = 'NonPurchase', total_pageviews_per_visitor, NULL)), 4) AS Average_Pageviews_per_Visitor_NonPurchase_Sessions
FROM
  visitor_pageviews
GROUP BY
  Month
ORDER BY
  PARSE_DATE('%b-%Y', Month);
```
2025-01-27 21:28:06 - root - INFO - itercount: 2
2025-01-27 21:28:06 - root - INFO - 0
2025-01-27 21:28:06 - root - INFO - results: 
Month,Average_Pageviews_per_Visitor_Purchase_Sessions,Average_Pageviews_per_Visitor_NonPurchase_Sessions
Apr-2017,25.8897,3.9799
May-2017,23.6114,4.4466
Jun-2017,25.7358,4.0746
Jul-2017,27.721,4.1918


2025-01-27 21:28:06 - root - INFO - Please check the answer again by reviewing Compare the average pageviews per visitor between purchase and non-purchase sessions for each month from April to July in 2017., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Month,Average_Pageviews_per_Visitor_Purchase_Sessions,Average_Pageviews_per_Visitor_NonPurchase_Sessions
Apr-2017:str,avg_purchase:float > 0,avg_nonpurchase:float > 0
May-2017:str,avg_purchase:float > 0,avg_nonpurchase:float > 0
Jun-2017:str,avg_purchase:float > 0,avg_nonpurchase:float > 0
Jul-2017:str,avg_purchase:float > 0,avg_nonpurchase:float > 0
(Attention: answer in four rows)
```

The table above compares the average pageviews per visitor between purchase and non-purchase sessions for each month from April to July in 2017. The average pageviews per visitor are presented for both purchase sessions and non-purchase sessions. All values are greater than 0. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Month,Average_Pageviews_per_Visitor_Purchase_Sessions,Average_Pageviews_per_Visitor_NonPurchase_Sessions
Apr-2017,25.8897,3.9799
May-2017,23.6114,4.4466
Jun-2017,25.7358,4.0746
Jul-2017,27.721,4.1918
Current sql:
WITH sessions AS (
  SELECT
    FORMAT_DATE('%b-%Y', PARSE_DATE('%Y%m%d', date)) AS Month,
    fullVisitorId,
    totals.pageviews AS pageviews,
    CASE
      WHEN totals.transactions > 0 THEN 'Purchase'
      ELSE 'NonPurchase'
    END AS session_type
  FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
    AND fullVisitorId IS NOT NULL
),
visitor_pageviews AS (
  SELECT
    Month,
    session_type,
    fullVisitorId,
    SUM(pageviews) AS total_pageviews_per_visitor
  FROM
    sessions
  GROUP BY
    Month, session_type, fullVisitorId
)
SELECT
  Month,
  ROUND(AVG(IF(session_type = 'Purchase', total_pageviews_per_visitor, NULL)), 4) AS Average_Pageviews_per_Visitor_Purchase_Sessions,
  ROUND(AVG(IF(session_type = 'NonPurchase', total_pageviews_per_visitor, NULL)), 4) AS Average_Pageviews_per_Visitor_NonPurchase_Sessions
FROM
  visitor_pageviews
GROUP BY
  Month
ORDER BY
  PARSE_DATE('%b-%Y', Month);You need to follow the format's positive signs.

2025-01-27 21:28:42 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 21:28:42 - root - INFO - ```sql
WITH sessions AS (
  SELECT
    FORMAT_DATE('%b-%Y', PARSE_DATE('%Y%m%d', date)) AS Month,
    fullVisitorId,
    totals.pageviews AS pageviews,
    CASE
      WHEN totals.transactions > 0 THEN 'Purchase'
      ELSE 'NonPurchase'
    END AS session_type
  FROM
    `bigquery-public-data.google_analytics_sample.ga_sessions_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20170401' AND '20170731'
    AND totals.pageviews IS NOT NULL
    AND fullVisitorId IS NOT NULL
),
visitor_pageviews AS (
  SELECT
    Month,
    session_type,
    fullVisitorId,
    SUM(pageviews) AS total_pageviews_per_visitor
  FROM
    sessions
  GROUP BY
    Month, session_type, fullVisitorId
)
SELECT
  Month,
  ROUND(AVG(IF(session_type = 'Purchase', total_pageviews_per_visitor, NULL)), 4) AS Average_Pageviews_per_Visitor_Purchase_Sessions,
  ROUND(AVG(IF(session_type = 'NonPurchase', total_pageviews_per_visitor, NULL)), 4) AS Average_Pageviews_per_Visitor_NonPurchase_Sessions
FROM
  visitor_pageviews
GROUP BY
  Month
ORDER BY
  PARSE_DATE('%b-%Y', Month);
```
2025-01-27 21:28:48 - root - INFO - itercount: 3
2025-01-27 21:28:48 - root - INFO - 0
2025-01-27 21:28:48 - root - INFO - Total iteration counts: 3
