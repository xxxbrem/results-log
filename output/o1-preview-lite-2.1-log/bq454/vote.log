After reviewing the SQL queries and their corresponding results, **`1result.sql`** best addresses the task for the following reasons:

- **Per-Super Population Allele Frequency Calculation**: `1result.sql` calculates the allele frequency of each variant within each super population by summing the counts of alternate alleles and dividing by the total number of alleles in that super population. This ensures that the allele frequency threshold (≥ 0.05) is applied per super population.

- **Identification of Common Variants Shared by Super Populations**: By filtering variants that are common (AF ≥ 0.05) in each super population and then grouping them, the query identifies variants shared by different combinations of super populations. This aligns with the task's requirement to count variants shared among various super population combinations.

- **Exclusion of Sex Chromosomes**: The query explicitly excludes sex chromosomes (`NOT IN ('X', 'Y', 'MT')`), focusing the analysis on autosomal chromosomes as specified.

- **Inclusion of Variant Types and Sample Counts**: The query provides counts of common variants per variant type (e.g., SNP, INDEL, SV) and includes sample counts and total population sizes for each super population, fulfilling all aspects of the task.

- **Handling Diploid Genotypes and Biallelic Variants**: By ensuring that only diploid genotypes and biallelic variants are considered, the query maintains data consistency and simplifies allele frequency calculations.

**Comparison with Other Queries**:

- **`0result.sql`**: While this query identifies variants with overall allele frequency ≥ 0.05 and associates them with super populations where samples carry non-reference genotypes, it doesn't calculate allele frequencies within each super population. This may include variants that are not common (AF < 0.05) in specific super populations, which doesn't fully meet the task's requirements.

- **`2result.sql`**: This query calculates common variants per super population but doesn't consider combinations of super populations. It also combines 'EAS' and 'SAS' into 'ASN', which doesn't align precisely with the original super populations specified. Additionally, it relies on pre-computed allele frequency fields (`AFR_AF`, `AMR_AF`, etc.) rather than calculating allele frequencies from genotype data.

**Therefore,** `1result.sql` **is the correct SQL script that comprehensively addresses the task.**

```plaintext
1result.sql
```