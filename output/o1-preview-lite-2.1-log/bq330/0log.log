2025-01-24 03:28:57 - openai._base_client - INFO - Retrying request to /chat/completions in 0.452857 seconds
2025-01-24 03:29:48 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 03:30:18 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 03:30:18 - root - INFO - Thank you for bringing this to my attention. The error occurs because the column `city` does not exist in the table `bigquery-public-data.fdic_banks.locations`. The correct column name is `branch_city`.

Here is the corrected SQL query:

```sql
SELECT
  institution_name,
  branch_name,
  branch_address,
  branch_city,
  zip_code,
  state
FROM
  `bigquery-public-data.fdic_banks.locations`
WHERE
  state = 'CO'
LIMIT 100;
```

This query should now run without errors.

---

**Explanation:**

- **Issue:** The column `city` is not present in the `locations` table.
- **Solution:** Replace `city` with `branch_city`, which is the correct column name representing the city where the branch is located.

---

If you'd like, I can revisit the previous queries to ensure all column names are correct based on the table schemas.

**Revised Sample SQL Queries with Correct Column Names:**

1. **List all bank locations in Colorado:**
   ```sql
   SELECT
     institution_name,
     branch_name,
     branch_address,
     branch_city,
     zip_code,
     state
   FROM
     `bigquery-public-data.fdic_banks.locations`
   WHERE
     state = 'CO'
   LIMIT 100;
   ```

2. **Get distinct ZIP codes of bank locations in Colorado:**
   ```sql
   SELECT DISTINCT
     zip_code
   FROM
     `bigquery-public-data.fdic_banks.locations`
   WHERE
     state = 'CO'
   LIMIT 100;
   ```

3. **Retrieve ZIP code geometries for Colorado:**
   ```sql
   SELECT
     zip_code,
     state_code,
     zip_code_geom
   FROM
     `bigquery-public-data.geo_us_boundaries.zip_codes`
   WHERE
     state_code = 'CO'
   LIMIT 100;
   ```

4. **List all block groups in Colorado with their geometries:**
   ```sql
   SELECT
     geo_id,
     blockgroup_ce,
     blockgroup_geom
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   LIMIT 100;
   ```

5. **Find the state FIPS code for Colorado in block groups:**
   ```sql
   SELECT DISTINCT
     state_fips_code
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   LIMIT 100;
   ```

6. **Calculate the area of each block group in Colorado:**
   ```sql
   SELECT
     geo_id,
     area_land_meters
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   LIMIT 100;
   ```

7. **Join bank locations with ZIP code geometries on ZIP code:**
   ```sql
   SELECT
     b.institution_name,
     b.branch_name,
     b.zip_code,
     z.zip_code_geom
   FROM
     `bigquery-public-data.fdic_banks.locations` AS b
   JOIN
     `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
   ON
     b.zip_code = z.zip_code
   WHERE
     b.state = 'CO'
     AND z.state_code = 'CO'
   LIMIT 100;
   ```

8. **Find ZIP codes in Colorado with the number of bank locations:**
   ```sql
   SELECT
     zip_code,
     COUNT(*) AS bank_count
   FROM
     `bigquery-public-data.fdic_banks.locations`
   WHERE
     state = 'CO'
   GROUP BY
     zip_code
   ORDER BY
     bank_count DESC
   LIMIT 100;
   ```

9. **List block groups intersecting with a specific ZIP code area:**
   ```sql
   SELECT
     b.geo_id,
     b.blockgroup_geom
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
   JOIN
     `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
   ON
     ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
   WHERE
     z.zip_code = '80202'
     AND z.state_code = 'CO'
   LIMIT 100;
   ```

10. **Calculate the overlap area between block groups and ZIP codes:**
    ```sql
    SELECT
      b.geo_id,
      z.zip_code,
      ST_AREA(ST_INTERSECTION(b.blockgroup_geom, z.zip_code_geom)) AS overlap_area
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
    JOIN
      `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
    ON
      ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
    WHERE
      z.state_code = 'CO'
    LIMIT 100;
    ```

11. **Compute the overlap ratio for block groups and ZIP codes:**
    ```sql
    SELECT
      b.geo_id,
      z.zip_code,
      ST_AREA(ST_INTERSECTION(b.blockgroup_geom, z.zip_code_geom)) / ST_AREA(b.blockgroup_geom) AS overlap_ratio
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
    JOIN
      `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
    ON
      ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
    WHERE
      z.state_code = 'CO'
    LIMIT 100;
    ```

12. **Count bank locations per block group in Colorado:**
    ```sql
    SELECT
      b.geo_id,
      COUNT(l.branch_name) AS bank_count
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
    JOIN
      `bigquery-public-data.fdic_banks.locations` AS l
    ON
      ST_CONTAINS(b.blockgroup_geom, ST_GEOGPOINT(l.longitude, l.latitude))
    WHERE
      l.state = 'CO'
    GROUP BY
      b.geo_id
    LIMIT 100;
    ```
    *Note: The `locations` table may not have `latitude` and `longitude` columns. If not available, we might need to obtain the geographic coordinates from address information or use approximate methods.*

13. **Identify ZIP codes with the highest bank concentration per block group:**
    ```sql
    SELECT
      z.zip_code,
      SUM(bg.bank_count) / COUNT(DISTINCT bg.geo_id) AS bank_concentration
    FROM
      (
        SELECT
          b.geo_id,
          z.zip_code,
          COUNT(l.branch_name) AS bank_count
        FROM
          `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
        JOIN
          `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
        ON
          ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
        LEFT JOIN
          `bigquery-public-data.fdic_banks.locations` AS l
        ON
          l.zip_code = z.zip_code
          AND l.state = 'CO'
        WHERE
          z.state_code = 'CO'
        GROUP BY
          b.geo_id,
          z.zip_code
      ) AS bg
    GROUP BY
      z.zip_code
    ORDER BY
      bank_concentration DESC
    LIMIT 100;
    ```

14. **Retrieve state FIPS codes from the ZIP codes table:**
    ```sql
    SELECT DISTINCT
      state_code,
      state_fips_code
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100;
    ```

15. **Check the functional status of ZIP code areas in Colorado:**
    ```sql
    SELECT DISTINCT
      zip_code,
      functional_status
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100;
    ```

16. **List ZIP codes in Colorado along with their counties:**
    ```sql
    SELECT DISTINCT
      zip_code,
      county
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100;
    ```

17. **Find the total area of each ZIP code in Colorado:**
    ```sql
    SELECT
      zip_code,
      ST_AREA(zip_code_geom) AS area_meters
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100;
    ```

18. **Explore the MAF/TIGER feature class codes in block groups:**
    ```sql
    SELECT DISTINCT
      mtfcc_feature_class_code
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
    LIMIT 100;
    ```

19. **List the bank institutions operating in Colorado:**
    ```sql
    SELECT DISTINCT
      institution_name
    FROM
      `bigquery-public-data.fdic_banks.locations`
    WHERE
      state = 'CO'
    LIMIT 100;
    ```

20. **Check the translated legal/statistical area descriptions in block groups:**
    ```sql
    SELECT DISTINCT
      lsad_name
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
    LIMIT 100;
    ```

---

These revised queries should help avoid any further errors related to incorrect column names. Be sure to cross-reference the column names with the table schemas when writing SQL queries.

If you have any more questions or need further assistance, please let me know.
2025-01-24 03:31:51 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 03:31:51 - root - INFO - SQL:
SELECT
  institution_name,
  branch_name,
  branch_address,
  branch_city,
  zip_code,
  state
FROM
  `bigquery-public-data.fdic_banks.locations`
WHERE
  state = 'CO'
LIMIT 100;
Results:
institution_name,branch_name,branch_address,branch_city,zip_code,state
"Armed Forces Bank, National Association",FORT CARSON FACILITY,"6384 Wetzel Avenue, Building 1512",Fort Carson,80913,CO
The Huntington National Bank,BRIARGATE CROSSING BRANCH,9265 North Union Boulevard,Colorado Springs,80920,CO
The Huntington National Bank,HANDCOCK & ACADEMY BRANCH,2930 South Academy Boulevard,Colorado Springs,80916,CO
The Huntington National Bank,CENTENNIAL & FILLMORE BRANCH,3290 Centennial Boulevard,Colorado Springs,80907,CO
U.S. Bank National Association,GARDEN OF THE GODS BRANCH,1125 Garden Of The Gods Road,Colorado Springs,80907,CO
U.S. Bank National Association,CHAPEL HILLS BRANCH,1520 Briargate Boulevard,Colorado Springs,80920,CO
U.S. Bank National Association,POWER AND STETSON KING SOOPERS BRANC,6030 Stetson Hills Boulevard,Colorado Springs,80922,CO
"Wells Fargo Bank, National Association",COLORADO SPRINGS SOUTH BRANCH,1800 South Nevada Avenue,Colorado Springs,80905,CO
"Wells Fargo Bank, National Association",GARDEN OF THE GODS BRANCH,560 Garden Of The Gods Road,Colorado Springs,80907,CO
Integrity Bank & Trust,Integrity Bank & Trust,1275 Village Ridge Pt,Monument,80132,CO
"UMB Bank, National Association",VALLEY BANKING CENTER,502 Security Boulevard,Colorado Springs,80911,CO
Adams Bank & Trust,Interquest Branch,"1359 Interquest Parkway, Suite 150",Colorado Springs,80921,CO
ANB Bank,CASCADE BRANCH,15 West Cimarron Street,Colorado Springs,80903,CO
Independent Bank,COLORADO SPRINGS BROADMOOR,155 Lake Avenue,Colorado Springs,80906,CO
Independent Bank,DOWNTOWN BANK,501 South Tejon,Colorado Springs,80903,CO
Independent Bank,CASCADE AVENUE LPO,"104 S. Cascade Avenue, Suite 2014",Colorado Springs,80903,CO
The Central Trust Bank,COLORADO SPRINGS BRANCH,5278 North Nevada Avenue Suite 100,Colorado Springs,80918,CO
5Star Bank,5 STAR BANK - DOWNTOWN BRANCH,"Peterson Air Force Base, 455 W. Paine St., Bldg. 1485",Colorado Springs,80914,CO
"JPMorgan Chase Bank, National Association",NORWOOD BANKING CENTER BRANCH,7390 Duryea Drive,Colorado Springs,80923,CO
"JPMorgan Chase Bank, National Association",Briargate and Academy Branch,7685 N Academy Blvd,Colorado Springs,80920,CO
"JPMorgan Chase Bank, National Association",SPRINGS RANCH BRANCH,3750 Bloomington Street,Colorado Springs,80922,CO
"JPMorgan Chase Bank, National Association",MERIDIAN & WOODMAN BNKING CTR BRANCH,11555 Meridian Market View,Falcon,80831,CO
"JPMorgan Chase Bank, National Association",UPTOWN COLORADO SPRINGS BRANCH,402 North Tejon Street,Colorado Springs,80903,CO
"Wells Fargo Bank, National Association",BRIARGATE BRANCH,8620 North Union Boulevard,Colorado Springs,80920,CO

2025-01-24 03:31:53 - root - INFO - SQL:
SELECT DISTINCT
     zip_code
   FROM
     `bigquery-public-data.fdic_banks.locations`
   WHERE
     state = 'CO'
   LIMIT 100
Results:
zip_code
80913
80920
80916
80907
80922
80905
80132
80911
80921
80903
80906
80918
80914
80923
80831
80915
80909
80817
80904
80932
80808
80924
80917
80933
80840
81301
81302
81303
81122
81137
80521
80524
80528
80525
80549
80517
80538
80513
80537
80526
80534
80751
80728
81501
81506
81505
81520
81521
81624
81504
81526
81503
81401
81425
81422
80723
80654
80701
81427
81432
80424
80443
80435
80498
80863
80813
81101
81147
81073
81090
81057
81054
81201
81211
80810
80825
81140
81063
81252
81416
81413
81419
81415
81428
81324
80446
80442
80447
80482
80459
81230
81224
81235
81089
80480
81036
80807
80815
80836
80461

2025-01-24 03:32:00 - root - INFO - SQL:
SELECT
     zip_code,
     state_code,
     zip_code_geom
   FROM
     `bigquery-public-data.geo_us_boundaries.zip_codes`
   WHERE
     state_code = 'CO'
   LIMIT 100
Results:
Too long, hard cut:
zip_code,state_code,zip_code_geom
81610,CO,"POLYGON((-109.051091 40.436404, -109.051128 40.436417, -109.051079 40.434582, -109.051071 40.434381, -109.051002 40.431667, -109.050934 40.42901, -109.050927 40.428784, -109.050925 40.428698, -109.05091 40.428183, -109.050891 40.418882, -109.050883 40.415013, -109.050883 40.414928, -109.050883 40.414675, -109.050883 40.414591, -109.050879 40.412969, -109.05087 40.408105, -109.050867 40.406484, -109.05086 40.403827, -109.050845 40.395858, -109.05084 40.393203, -109.050839 40.392971, -109.050838 40.392282, -109.05084 40.392053, -109.050835 40.390109, -109.050823 40.384776, -109.050821 40.38428, -109.050817 40.382338, -109.050811 40.379751, -109.050801 40.374967, -109.050832 40.371996, -109.05086 40.369412, -109.050859 40.369143, -109.05086 40.368339, -109.050861 40.368071, -109.050861 40.367419, -109.050864 40.365465, -109.050865 40.364814, -109.050866 40.363124, -109.050872 40.358054, -109.050874 40.356365, -109.050874 40.355506, -109.050877 40.352932, -109.050879 40.352074, -109.05088 40.349797, -109.050885 40.342968, -109.050886 40.34154, -109.050887 40.340692, -109.050887 40.339791, -109.05089 40.337092, -109.050891 40.336192, -109.050892 40.334625, -109.050895 40.329928, -109.050896 40.328928, -109.050896 40.328917, -109.050896 40.328897, -109.050897 40.328872, -109.050897 40.328858, -109.050896 40.328768, -109.050897 40.328362, -109.050897 40.328347, -109.050898 40.328102, -109.050898 40.327552, -109.0509 40.327006, -109.050901 40.326477, -109.050903 40.325993, -109.050902 40.325971, -109.050902 40.325864, -109.050905 40.325577, -109.050904 40.325434, -109.050903 40.3251, -109.050905 40.324177, -109.050906 40.323269, -109.050907 40.32235, -109.050908 40.321458, -109.050909 40.320536, -109.050909 40.319628, -109.05091 40.318741, -109.050911 40.317836, -109.050912 40.316917, -109.050913 40.316015, -109.050913 40.315401, -109.050913 40.315366, -109.050914 40.314698, -109.050915 40.313999, -109.050915 40.313296, -109.050916 40.312612, -109.050917 40.31194, -109.050917 40.311254, -109.050918 40.310573, -109.050919 40.309896, -109.050921 40.309228, -109.050921 40.308844, -109.050923 40.307783, -109.050926 40.306575, -109.050928 40.305403, -109.05093 40.304208, -109.050932 40.303034, -109.050937 40.301357, -109.05094 40.300362, -109.05094 40.300331, -109.05094 40.300301, -109.05094 40.300258, -109.050943 40.299522, -109.050947 40.297854, -109.050948 40.297745, -109.050952 40.296528, -109.050963 40.292775, -109.050972 40.289857, -109.050972 40.289747, -109.050973 40.289584, -109.050981 40.287535, -109.05098 40.287416, -109.050991 40.284916, -109.050991 40.283903, -109.050994 40.283049, -109.050999 40.28018, -109.051 40.279681, -109.051 40.279658, -109.051002 40.278567, -109.051013 40.273833, -109.051012 40.273537, -109.051015 40.273323, -109.051013 40.273044, -109.051016 40.272151, -109.051024 40.271834, -109.051017 40.271723, -109.050931 40.271645, -109.050931 40.271431, -109.05102 40.269895, -109.051021 40.269193, -109.051026 40.267495, -109.051023 40.266581, -109.05102 40.266181, -109.051001 40.262593, -109.050983 40.259276, -109.050974 40.257675, -109.050974 40.257629, -109.050966 40.256344, -109.050957 40.254665, -109.050951 40.253756, -109.050946 40.252838, -109.050943 40.2524, -109.050945 40.251964, -109.050945 40.251921, -109.050945 40.25189, -109.050947 40.251521, -109.050948 40.251315, -109.05095 40.25065, -109.050958 40.248283, -109.050964 40.246498, -109.050973 40.243105, -109.050979 40.241903, -109.050981 40.241861, -109.050992 40.237366, -109.050977 40.233365, -109.050976 40.233107, -109.050837 40.233155, -109.050836 40.233013, -109.050975 40.232827, -109.050969 40.231111, -109.050928 40.230928, -109.050967 40.230886, -109.050965 40.230169, -109.050949 40.222647, -109.05045 40.222666, -109.049328 40.222682, -109.048955 40.222687, -109.048264 40.222696, -109.046194 40.222724, -109.045504 40.222734, -109.044716 40.222713, -109.042354 40.22265, -109.041705 40.222633, -109.041567 40.222633, -109.038834 40.222629, -109.030636 40.222618, -109.027904 40.222615, -109.027718 40.222615, -109.026941 40.222716, -109.025789 40.22271, -109.019425 40.222681, -109.01774 40.222674, -109.017306 40.222672, -109.013907 40.222656, -109.008338 40.22263, -109.003719 40.222561, -109.000671 40.222516, -109.000324 40.222518, -109.000286 40.222518, -109.000175 40.222518, -109.000139 40.222519, -108.999914 40.222517, -108.999243 40.222519, -108.99902 40.222521, -108.997655 40.222524, -108.993017 40.222533, -108.976555 40.222566, -108.975008 40.222569, -108.969006 40.222581, -108.968026 40.222582, -108.965086 40.222587, -108.964107 40.22259, -108.963948 40.22259, -108.96347 40.222592, -108.963312 40.222593, -108.961553 40.222596, -108.956278 40.222607, -108.955381 40.222609, -108.954519 40.222611, -108.953611 40.222612, -108.950885 40.222616, -108.949979 40.22262, -108.944209 40.22263, -108.926907 40.222665, -108.92114 40.222678, -108.920938 40.222678, -108.920334 40.222678, -108.92

2025-01-24 03:32:04 - root - INFO - SQL:
SELECT
     geo_id,
     blockgroup_ce,
     blockgroup_geom
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   LIMIT 100
Results:
Too long, hard cut:
geo_id,blockgroup_ce,blockgroup_geom
080010089011,1,"POLYGON((-104.968863 39.791317, -104.968861 39.790974, -104.968622 39.790974, -104.960638 39.790979, -104.960505 39.790974, -104.960268 39.790966, -104.959612 39.791465, -104.959176 39.791795, -104.958125 39.792593, -104.956987 39.793456, -104.956327 39.793957, -104.955479 39.794601, -104.955356 39.794686, -104.95459 39.794686, -104.952983 39.794687, -104.952578 39.794691, -104.949739 39.794687, -104.949658 39.794687, -104.949601 39.794687, -104.948734 39.794679, -104.948325 39.794669, -104.947887 39.794671, -104.947434 39.794654, -104.945971 39.794601, -104.945106 39.794599, -104.944024 39.794596, -104.942863 39.794595, -104.942734 39.794586, -104.942675 39.794602, -104.942049 39.794601, -104.941702 39.794601, -104.941286 39.794601, -104.940553 39.794601, -104.940476 39.794601, -104.940479 39.793466, -104.940481 39.79279, -104.940482 39.792601, -104.940482 39.792358, -104.940483 39.792209, -104.940484 39.791919, -104.940485 39.791629, -104.940487 39.791129, -104.940487 39.791076, -104.940487 39.791002, -104.940079 39.791001, -104.939964 39.791002, -104.939882 39.790994, -104.939665 39.791602, -104.939565 39.791846, -104.939274 39.792568, -104.93925 39.792622, -104.939731 39.792011, -104.939296 39.793215, -104.938927 39.793634, -104.938206 39.794471, -104.937826 39.794881, -104.937736 39.794864, -104.937478 39.795165, -104.936736 39.795993, -104.936421 39.796405, -104.936249 39.796632, -104.936108 39.796773, -104.936052 39.796831, -104.935811 39.797073, -104.93572 39.797171, -104.935616 39.797285, -104.935516 39.797396, -104.935414 39.797508, -104.935334 39.797596, -104.935275 39.797661, -104.934676 39.798317, -104.934246 39.798814, -104.93349 39.79966, -104.933295 39.79989, -104.933104 39.800117, -104.932888 39.800371, -104.932745 39.80058, -104.932558 39.800867, -104.932456 39.801043, -104.932185 39.801558, -104.93206 39.801834, -104.93197 39.802049, -104.931872 39.802299, -104.931803 39.802508, -104.931677 39.802961, -104.931815 39.803248, -104.93178 39.803421, -104.931717 39.803886, -104.931704 39.804086, -104.931708 39.805509, -104.931913 39.805509, -104.933451 39.805512, -104.934879 39.805515, -104.93708 39.805497, -104.937442 39.805491, -104.937542 39.805485, -104.937609 39.805476, -104.937658 39.805465, -104.9377 39.805447, -104.937741 39.805423, -104.93777 39.8054, -104.937822 39.805348, -104.937842 39.805318, -104.937862 39.805276, -104.937873 39.805241, -104.937885 39.804515, -104.937866 39.804291, -104.937853 39.804067, -104.937853 39.803865, -104.938608 39.804439, -104.93939 39.805021, -104.940357 39.805754, -104.940726 39.806044, -104.940884 39.806053, -104.941185 39.806245, -104.94123 39.806427, -104.941178 39.806479, -104.941125 39.806522, -104.94095 39.806647, -104.940191 39.807222, -104.94006 39.807356, -104.940035 39.807388, -104.940003 39.807471, -104.939999 39.80757, -104.940009 39.807613, -104.94003 39.807667, -104.940055 39.807711, -104.940166 39.807855, -104.94034 39.808076, -104.940393 39.808176, -104.940427 39.808286, -104.940441 39.808421, -104.940456 39.809797, -104.940445 39.811365, -104.940423 39.812723, -104.940415 39.816381, -104.940417 39.817159, -104.940416 39.817856, -104.940416 39.818348, -104.940408 39.820014, -104.940398 39.820438, -104.940388 39.822008, -104.940387 39.823615, -104.940181 39.823614, -104.939772 39.823612, -104.939662 39.823611, -104.939119 39.823609, -104.938637 39.823608, -104.93857 39.823607, -104.938013 39.823604, -104.936216 39.823613, -104.936049 39.823613, -104.935088 39.823613, -104.935001 39.823614, -104.934955 39.823614, -104.934799 39.823614, -104.933868 39.823615, -104.932713 39.823613, -104.932676 39.823613, -104.931509 39.823626, -104.930347 39.82362, -104.930178 39.823548, -104.930084 39.823508, -104.930111 39.823465, -104.930383 39.823034, -104.93022 39.822973, -104.929931 39.823435, -104.929814 39.82362, -104.929374 39.824323, -104.928951 39.825006, -104.928649 39.825482, -104.927881 39.826698, -104.927636 39.8271, -104.927554 39.827235, -104.92712 39.827976, -104.926639 39.828899, -104.926402 39.829415, -104.926042 39.830273, -104.925853 39.830749, -104.925799 39.830884, -104.925898 39.830883, -104.926001 39.830883, -104.926607 39.830879, -104.928978 39.830871, -104.93136 39.830874, -104.931488 39.830874, -104.932091 39.830874, -104.93286 39.830874, -104.932989 39.830874, -104.933436 39.830875, -104.933498 39.830875, -104.933873 39.830875, -104.933954 39.830875, -104.935148 39.830867, -104.935215 39.830866, -104.936245 39.830865, -104.936832 39.830867, -104.938217 39.83086, -104.938361 39.830859, -104.938742 39.830858, -104.93892 39.830858, -104.939 39.830857, -104.93912 39.830857, -104.939214 39.830858, -104.939798 39.830864, -104.940367 39.830861, -104.94048 39.830861, -104.940777 39.83086, -104.941467 39.830859, -104.941874 39.830862, -104.942606 39.830873, -104.942949 39.83088, -104.944611 39.83088, -104.944742 39.83088, -104.944933 39.830881, -104.945403 39.830868, -104.945683 39

2025-01-24 03:32:05 - root - INFO - SQL:
SELECT DISTINCT
     state_fips_code
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   LIMIT 100
Results:
state_fips_code
08

2025-01-24 03:32:07 - root - INFO - SQL:
SELECT
     geo_id,
     area_land_meters
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   LIMIT 100
Results:
geo_id,area_land_meters
080010089011,6362241
080010093251,1287314
080010085451,729291
080010085261,5303216
080010085481,1244440
080010092061,1295355
080010081001,2695015
080010085501,678027
080010091031,1574941
080010094101,1384324
080010085341,858369
080010096061,974868
080010602001,1167117
080010094081,3815938
080010150001,3188348
080010085291,1273581
080010085231,14822474
080010600001,16531242
080010085331,1199768
080010085241,983834
080010082001,918845
080010096081,528151
080010085061,438783
080010085371,11972043
080010093201,1269332
080010085411,36314275
080010088021,5813423
080010085351,15324196
080010097511,1880296
080010084021,1730915904
080010086031,1862820
080010083081,3109704
080010094011,1690226
080010085361,7255394
080010085391,12476751
080010085441,2608402
080010085401,13074273
080010612001,10613359
080010092041,1259929
080010083531,77606503
080010086041,1502294
080010085511,8739314
080010084011,477831641
080010601001,3318758
080010083091,10819573
080019887001,67545120
080039600001,289292770
080039601001,91868200
080039602001,10166947
080050056121,2564752
080050056251,602718
080050065011,1681545
080050820001,1545434
080050071061,163765074
080050049511,157730
080050862001,726327
080050056231,2485929
080050056271,1189541
080050068541,8440936
080050056241,1998744
080050067051,5057809
080050067121,2589155
080050056201,426621
080050858001,975972
080050056221,3100537
080050060001,1771406
080050056211,1167421
080050056111,1474530
080050055521,1551589
080050056191,2128913
080050071031,165400293
080050071011,192632341
080050067081,904463
080050055531,1405887
080050067041,1221300
080050056361,5113457
080079404001,607252571
080079742001,56162360
080079743001,661107701
080079744001,1339185197
080099647001,661515845
080119667001,3376823501
080130128001,5790132
080130609001,3333356
080130130031,4229652
080130127091,9706908
080130132051,4192987
080130125011,3197023
080130127101,5033978
080130132011,58546097
080130132121,4262108

2025-01-24 03:32:12 - root - INFO - SQL:
SELECT
     b.institution_name,
     b.branch_name,
     b.zip_code,
     z.zip_code_geom
   FROM
     `bigquery-public-data.fdic_banks.locations` AS b
   JOIN
     `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
   ON
     b.zip_code = z.zip_code
   WHERE
     b.state = 'CO'
     AND z.state_code = 'CO'
   LIMIT 100
Results:
Too long, hard cut:
institution_name,branch_name,zip_code,zip_code_geom
The Bank of Denver,The Bank of Denver,80218,"POLYGON((-104.979144 39.716875, -104.979149 39.716515, -104.978927 39.716518, -104.978712 39.71652, -104.978264 39.716526, -104.978043 39.71653, -104.977816 39.716528, -104.97747 39.716525, -104.977137 39.716527, -104.976911 39.716529, -104.976679 39.716529, -104.97633 39.716529, -104.975983 39.716529, -104.975751 39.716529, -104.975517 39.716529, -104.97511 39.71653, -104.974816 39.716531, -104.974583 39.716533, -104.974344 39.716532, -104.973962 39.716531, -104.973629 39.716531, -104.973391 39.716531, -104.973391 39.716761, -104.973394 39.717452, -104.973395 39.717683, -104.973362 39.717785, -104.973264 39.718092, -104.973232 39.718195, -104.973235 39.718236, -104.973244 39.718359, -104.973248 39.718401, -104.97307 39.71836, -104.972954 39.718334, -104.972539 39.718235, -104.972362 39.718193, -104.972106 39.718132, -104.971852 39.718075, -104.971774 39.718061, -104.971551 39.718003, -104.971413 39.717983, -104.971326 39.717961, -104.971209 39.717917, -104.970983 39.717853, -104.970895 39.717799, -104.970751 39.717735, -104.970587 39.717699, -104.970334 39.717608, -104.970136 39.717528, -104.97009 39.7175, -104.97002 39.717447, -104.969865 39.717347, -104.969791 39.717293, -104.969772 39.717276, -104.969721 39.717229, -104.969215 39.716716, -104.969145 39.716655, -104.969078 39.716607, -104.96899 39.716569, -104.968905 39.716514, -104.968793 39.716412, -104.968714 39.716318, -104.968491 39.716081, -104.968459 39.716035, -104.968344 39.715895, -104.968196 39.715736, -104.968038 39.715593, -104.967971 39.715527, -104.967567 39.715204, -104.967398 39.715113, -104.967292 39.715047, -104.967162 39.714956, -104.967014 39.714866, -104.966788 39.71475, -104.966675 39.714683, -104.966366 39.714468, -104.966309 39.714424, -104.966243 39.714382, -104.966151 39.714333, -104.966056 39.714288, -104.96596 39.714253, -104.965875 39.714233, -104.965596 39.71421, -104.965507 39.714195, -104.965313 39.714136, -104.96525 39.71413, -104.965176 39.714135, -104.964839 39.714216, -104.964743 39.714243, -104.964601 39.714297, -104.964516 39.714335, -104.964384 39.714404, -104.964043 39.714607, -104.963891 39.714634, -104.963827 39.714661, -104.963709 39.714723, -104.963465 39.714777, -104.963376 39.714808, -104.963319 39.71484, -104.963198 39.714933, -104.96312 39.715001, -104.963024 39.715063, -104.962956 39.715082, -104.962788 39.715121, -104.962634 39.715157, -104.962471 39.715184, -104.962291 39.715227, -104.962081 39.715287, -104.9619 39.715349, -104.961588 39.715432, -104.961361 39.715475, -104.96105 39.715494, -104.960848 39.715518, -104.960473 39.715546, -104.960335 39.715562, -104.960207 39.715572, -104.960066 39.715607, -104.959914 39.715548, -104.959458 39.715371, -104.959307 39.715312, -104.959307 39.71538, -104.959308 39.715587, -104.959309 39.715656, -104.959309 39.715794, -104.959311 39.716073, -104.959311 39.716209, -104.959312 39.716348, -104.959313 39.716655, -104.95932 39.718186, -104.964563 39.718176, -104.964566 39.718344, -104.963356 39.718343, -104.963364 39.720964, -104.963699 39.720963, -104.964037 39.720963, -104.964041 39.721632, -104.964044 39.721968, -104.963904 39.72197, -104.963697 39.721975, -104.963518 39.722007, -104.963492 39.722023, -104.963376 39.722101, -104.963269 39.722331, -104.963276 39.722421, -104.963287 39.722538, -104.963305 39.722746, -104.963316 39.722818, -104.963418 39.723005, -104.96346 39.723169, -104.963465 39.723421, -104.963473 39.723766, -104.963473 39.723919, -104.963474 39.724096, -104.963466 39.724327, -104.963456 39.724378, -104.963453 39.724395, -104.963413 39.724526, -104.963423 39.725533, -104.96365 39.725602, -104.964806 39.725598, -104.964806 39.725685, -104.964808 39.725899, -104.964815 39.726804, -104.964815 39.726895, -104.964818 39.727106, -104.964817 39.727145, -104.964814 39.727265, -104.964814 39.727305, -104.965025 39.727304, -104.965658 39.727304, -104.96587 39.727304, -104.965872 39.727661, -104.965878 39.728735, -104.965881 39.729093, -104.965846 39.729247, -104.965832 39.729315, -104.965732 39.729455, -104.965564 39.729616, -104.965547 39.729634, -104.965457 39.729732, -104.965247 39.729829, -104.965234 39.729836, -104.965003 39.729994, -104.964746 39.730255, -104.96473 39.730282, -104.964619 39.730484, -104.964635 39.730528, -104.964683 39.73066, -104.9647 39.730705, -104.964658 39.731255, -104.964532 39.732905, -104.964491 39.733456, -104.964486 39.733491, -104.964472 39.733599, -104.964468 39.733635, -104.964465 39.73366, -104.964446 39.733922, -104.964433 39.734105, -104.964445 39.734418, -104.964504 39.734727, -104.96452 39.734779, -104.964608 39.735054, -104.96451 39.735053, -104.964219 39.735053, -104.964122 39.735053, -104.964093 39.735053, -104.964111 39.736155, -104.964115 39.736581, -104.964122 39.73682, -104.964514 39.73682, -104.964773 39.73682, -104.964772 39.737135, -104.964771 39.737225, -104.964768 39.738081, -104.964768 39.738397, -104.964509

2025-01-24 03:32:13 - root - INFO - SQL:
SELECT
     zip_code,
     COUNT(*) AS bank_count
   FROM
     `bigquery-public-data.fdic_banks.locations`
   WHERE
     state = 'CO'
   GROUP BY
     zip_code
   ORDER BY
     bank_count DESC
   LIMIT 100
Results:
zip_code,bank_count
80111,33
80202,31
80501,30
80206,30
80112,24
80903,24
80634,24
80525,24
80302,20
80920,18
80134,16
81301,15
80537,15
80301,14
80012,14
80401,13
81501,13
80601,13
80524,13
80918,12
80016,12
80222,12
80020,12
80226,11
81611,11
81401,11
80550,10
80104,10
80122,10
80538,10
80015,10
80021,10
80211,10
80123,10
81003,9
80124,9
80228,9
80921,9
81505,9
81212,9
80234,9
80011,9
80906,9
80002,9
80127,8
81008,8
80027,8
81101,8
80203,8
80631,8
80013,8
80126,8
81601,8
80022,8
81321,8
81005,8
80129,8
80229,8
80439,8
80487,8
80233,7
80207,7
81082,7
80528,7
80907,7
81620,7
80909,7
80224,7
81147,7
80227,7
81416,7
80030,7
80108,7
80110,7
81632,7
80751,7
80026,7
80033,6
80504,6
81623,6
81052,6
81657,6
80701,6
81050,6
81621,6
80120,6
80246,6
80014,6
80915,6
80807,6
80231,6
81007,6
80424,6
80521,6
80005,5
80214,5
80007,5
80723,5
80241,5
80443,5

2025-01-24 03:32:15 - root - INFO - SQL:
SELECT
     b.geo_id,
     b.blockgroup_geom
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
   JOIN
     `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
   ON
     ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
   WHERE
     z.zip_code = '80202'
     AND z.state_code = 'CO'
   LIMIT 100
Results:
Too long, hard cut:
geo_id,blockgroup_geom
080310027011,"POLYGON((-104.987409 39.738667, -104.987413 39.738431, -104.987409 39.738114, -104.987397 39.737165, -104.987393 39.736849, -104.98714 39.736848, -104.986381 39.736847, -104.986129 39.736847, -104.985874 39.736845, -104.985111 39.736842, -104.984857 39.736841, -104.984609 39.736841, -104.983866 39.736841, -104.983619 39.736842, -104.983503 39.736878, -104.983359 39.736878, -104.982566 39.736883, -104.982302 39.736885, -104.982061 39.736884, -104.981663 39.736883, -104.981338 39.736883, -104.981097 39.736883, -104.980853 39.736881, -104.980123 39.736878, -104.97988 39.736877, -104.979885 39.737186, -104.9799 39.738116, -104.979905 39.738426, -104.979906 39.738745, -104.979909 39.739701, -104.97991 39.740021, -104.980148 39.740022, -104.980492 39.740023, -104.980863 39.740025, -104.981102 39.740026, -104.981346 39.740025, -104.98171 39.740024, -104.982081 39.740024, -104.982327 39.740024, -104.982578 39.740025, -104.982963 39.740028, -104.983332 39.740038, -104.983584 39.740045, -104.984856 39.740059, -104.986135 39.740062, -104.986258 39.740113, -104.986377 39.740112, -104.987136 39.740107, -104.987389 39.740106, -104.98739 39.740012, -104.987393 39.739712, -104.987394 39.739614, -104.987397 39.739377, -104.987409 39.738667))"
080310017013,"POLYGON((-105.000919 39.751906, -105.000025 39.751218, -104.999857 39.751085, -104.999353 39.750686, -104.999186 39.750554, -104.998942 39.750736, -104.998213 39.751284, -104.997971 39.751468, -104.997726 39.751657, -104.996992 39.752226, -104.996748 39.752416, -104.996502 39.752601, -104.995766 39.753158, -104.995521 39.753344, -104.995271 39.753541, -104.994521 39.754135, -104.994272 39.754334, -104.994443 39.754462, -104.994958 39.754849, -104.99513 39.754978, -104.995148 39.754992, -104.995316 39.755119, -104.99582 39.755501, -104.995989 39.755629, -104.996246 39.755442, -104.997019 39.754881, -104.997277 39.754695, -104.997517 39.754512, -104.99824 39.753964, -104.998481 39.753782, -104.998731 39.753596, -104.999483 39.753039, -104.999734 39.752854, -105.000919 39.751906))"
080310026011,"POLYGON((-104.987416 39.744885, -104.987419 39.744833, -104.987393 39.743949, -104.98739 39.743836, -104.987387 39.74374, -104.987378 39.743452, -104.987376 39.743357, -104.987264 39.743292, -104.987137 39.74329, -104.98637 39.743281, -104.986115 39.743279, -104.985861 39.743278, -104.985099 39.743276, -104.984846 39.743276, -104.984594 39.743275, -104.983839 39.743272, -104.983588 39.743271, -104.983338 39.743271, -104.982588 39.743271, -104.982338 39.743271, -104.982087 39.743271, -104.981334 39.743271, -104.981084 39.743271, -104.980845 39.743269, -104.98013 39.743264, -104.979892 39.743263, -104.979889 39.743582, -104.979882 39.744541, -104.97988 39.744861, -104.97988 39.745124, -104.979883 39.745914, -104.979884 39.746178, -104.980123 39.746178, -104.98084 39.74618, -104.98108 39.746181, -104.981078 39.746453, -104.981074 39.747272, -104.981074 39.747545, -104.981321 39.747546, -104.981678 39.747547, -104.982062 39.747549, -104.98231 39.74755, -104.982565 39.74755, -104.983124 39.747551, -104.983333 39.747551, -104.98359 39.747551, -104.983659 39.747552, -104.983866 39.747556, -104.983936 39.747558, -104.984119 39.747557, -104.984217 39.747557, -104.984668 39.747548, -104.98476 39.747547, -104.984851 39.747548, -104.984938 39.747545, -104.984996 39.747545, -104.985091 39.747547, -104.985376 39.747565, -104.985431 39.74757, -104.985479 39.747576, -104.985574 39.747596, -104.985676 39.747526, -104.986105 39.747526, -104.987201 39.747522, -104.987386 39.747345, -104.9874 39.747357, -104.987397 39.746973, -104.987408 39.746192, -104.987407 39.745966, -104.987407 39.745931, -104.987407 39.745466, -104.987407 39.745288, -104.987407 39.745062, -104.987416 39.744885))"
080310017012,"POLYGON((-105.008186 39.754791, -105.008183 39.754717, -105.008173 39.754646, -105.008167 39.754545, -105.008153 39.754495, -105.008108 39.754328, -105.008039 39.754158, -105.007983 39.753996, -105.007948 39.75386, -105.007917 39.7537, -105.007896 39.75364, -105.007889 39.75362, -105.007859 39.75356, -105.007827 39.753508, -105.007771 39.753445, -105.007723 39.753403, -105.007609 39.753305, -105.007409 39.753152, -105.007387 39.753136, -105.006968 39.75279, -105.006503 39.752445, -105.00646 39.752412, -105.006445 39.752401, -105.006144 39.752165, -105.006123 39.752148, -105.00606 39.7521, -105.00604 39.752084, -105.005991 39.752046, -105.00596 39.752021, -105.005929 39.751997, -105.00585 39.751934, -105.005411 39.751586, -105.005279 39.751487, -105.005086 39.751342, -105.004947 39.751238, -105.004774 39.751107, -105.004537 39.750921, -105.004443 39.750848, -105.0044 39.750817, -105.00436 39.750788, -105.004243 39.750701, -105.004204 39.750673, -105.004027 39.750544, -105.003784 39.750366, -105.003521 39.750132, -105.003404 39.750028, -105.003355 39.749991, -105.003207 39.750131, -105.002988 39.750295, -105.002334 39.750789, -105.002116 39.750954, -105.000919 39.751906, -1

2025-01-24 03:32:19 - root - INFO - SQL:
SELECT
     b.geo_id,
     z.zip_code,
     ST_AREA(ST_INTERSECTION(b.blockgroup_geom, z.zip_code_geom)) AS overlap_area
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
   JOIN
     `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
   ON
     ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
   WHERE
     z.state_code = 'CO'
   LIMIT 100
Results:
geo_id,zip_code,overlap_area
080010092061,80233,141256.03311582826
080010092061,80229,1163802.489742706
080010094081,80234,0.0
080010094081,80020,0.0
080010094081,80031,3862115.666012861
080039600001,81144,48291880.17351292
080039600001,81125,15741620.912798611
080039600001,81146,87815580.50845598
080039600001,81136,65523649.98947624
080039600001,81101,72027112.89723413
080050060001,80110,1820808.4140619503
080050060001,80113,0.0
080050055521,80110,1586076.1119503216
080050055521,80236,25988.300771663893
080299650001,81419,330072297.4320261
080299650001,81410,13131571.73190844
080299650001,81624,0.0
080299650001,81413,14675034.725899218
080299650001,81416,0.0
080299650001,81428,0.0
080299650001,81418,0.0
080559609001,81055,38808641.891346976
080590098401,80004,576380.4580578145
080590159001,80465,0.0
080590159001,80235,2578905.8867011587
080590159001,80127,0.0
080590159001,80123,0.0
080590159001,80227,0.0
080590112021,80214,0.0
080590112021,80215,0.0
080590112021,80226,1295586.092010205
080590108011,80033,0.0
080590108011,80215,2326342.7448091987
080590108011,80401,0.0
080590098311,80003,0.0
080590098311,80031,1145294.5698660596
080590098311,80021,195878.62800308762
080690018081,80526,0.0
080690018081,80538,12929187.48457149
080690018081,80537,0.0
080690026001,80513,15918020.802041417
080690026001,80504,1344658.9217887078
080690026001,80503,0.0
080690025031,80535,52082553.77984268
080690025031,80512,0.0
080690025031,80524,76639499.4659474
080690025031,80612,46062547.28915688
080690025031,80549,423832949.5699172
080690025031,80536,238062215.8191296
080690028011,80515,6728289.383182158
080690028011,80517,8631369.65797736
080690020071,80537,887476.0788965261
080839694001,81321,4056206.6737186
081010031031,81001,0.0
081010031031,81003,0.0
081010031031,81006,7502604.052806813
081159683001,80737,581951382.8060559
081159683001,80734,0.0
081159683001,80731,23878768.987261157
081159683001,80749,401356301.9685954
081159683001,80726,0.0
081159683001,80721,0.0
081159683001,80728,0.0
081159683001,80744,271756215.3307316
081230019021,80603,26341484.39766938
081230019021,80642,55759515.397632845

2025-01-24 03:32:22 - root - INFO - SQL:
SELECT
      b.geo_id,
      z.zip_code,
      ST_AREA(ST_INTERSECTION(b.blockgroup_geom, z.zip_code_geom)) / ST_AREA(b.blockgroup_geom) AS overlap_ratio
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
    JOIN
      `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
    ON
      ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
    WHERE
      z.state_code = 'CO'
    LIMIT 100
Results:
geo_id,zip_code,overlap_ratio
080050071061,80107,0.0
080050071061,80015,0.0
080050071061,80018,0.0
080050071061,80137,0.0
080050071061,80138,0.0
080050071061,80016,0.30443196580237775
080050071061,80102,0.6955680341975702
080050067041,80210,0.0
080050067041,80237,0.0
080050067041,80222,0.0
080050067041,80121,0.0
080050067041,80113,0.9999999999951285
080350140091,80134,1.0
080410076011,80908,0.5653780443944734
080410076011,80927,0.0
080410076011,80831,0.43462195560561345
080410076011,80923,0.0
080410076011,80106,0.0
080559606001,81089,1.0
080590120461,80123,1.0
080590098151,80005,0.9998399755917295
080590098151,80021,0.00016002440825378572
080590605001,80020,0.0
080590605001,80021,0.9999999999999079
080590102061,80005,1.0
080959676001,80734,0.7618626052326029
080959676001,80737,0.0
080959676001,80721,0.23813739476742868
080959676001,80744,0.0
080959676001,80758,0.0
080010095531,80229,0.0
080010095531,80221,0.9999999999999835
080010085491,80233,0.0
080010085491,80241,0.0
080010085491,80602,0.9999999999998357
080050872001,80224,0.3284200240559386
080050872001,80231,0.6715799759440632
080050067131,80112,0.016097226054111003
080050067131,80111,0.9839027739459013
080130126051,80301,0.0
080130126051,80303,1.000000000000037
080219749001,81140,0.0
080219749001,81151,1.0
080310068131,80014,0.0
080310068131,80231,1.000000000000563
080310034011,80218,0.0
080310034011,80206,0.0
080310034011,80209,1.0000000000561784
080310042011,80207,0.9999999999994972
080310042011,80220,0.0
080310157001,80236,0.9729621549377707
080310157001,80219,0.027037845062389817
080350139041,80134,0.014812106827165028
080350139041,80138,0.9851878931721524
080410070001,80908,0.0
080410070001,80921,0.0
080410070001,80840,0.0
080410070001,80920,1.0000000000000517
080410030001,80903,0.0
080410030001,80906,0.022307461146906158
080410030001,80905,0.9776925388530138
080410030001,80904,0.0
080410021011,80909,1.0
080410039061,80840,0.0
080410039061,80920,1.0
080410074001,80118,0.0
080410074001,80132,0.9999999999998154

2025-01-24 03:32:25 - root - INFO - SQL:
SELECT
      b.geo_id,
      COUNT(l.branch_name) AS bank_count
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
    JOIN
      `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
    ON
      ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
    JOIN
      `bigquery-public-data.fdic_banks.locations` AS l
    ON
      l.zip_code = z.zip_code
      AND l.state = 'CO'
    WHERE
      z.state_code = 'CO'
    GROUP BY
      b.geo_id
    LIMIT 100
Results:
geo_id,bank_count
080010085481,9
080130606001,22
080350139111,19
080410045111,15
080590098371,14
080599800001,36
080619601001,19
080690016011,37
080759659001,7
081059770001,10
080010085381,8
080010094061,7
080010093071,13
080010094111,16
080050826001,3
080050823001,11
080050848001,10
080050077041,18
080050852001,22
080140312001,30
080149802001,23
080310040051,17
080310083061,3
080310032021,35
080310083051,3
080310050021,9
080310046021,5
080310009041,1
080350141281,16
080410037091,12
080410002021,12
080459520021,5
080459517021,8
080519637001,5
080590604001,16
080770011021,2
080839693001,8
081010022001,1
081010009041,4
080010096062,4
080010085332,15
080050056342,30
080050056292,42
080459518022,16
080590105032,9
080690013012,13
080990001002,7
080010096032,11
080050068552,69
080310032022,35
080310007022,1
080310036012,4
080310014032,19
080410029002,12
080770011012,2
081010010002,4
080010085293,21
080010085453,9
080299651003,7
080590120453,23
080870001003,7
080930001003,12
080010080003,4
080130607003,8
080140306003,21
080310083053,3
080310041013,11
080410045063,6
080590107013,11
081010026003,8
081230022053,10
080279701004,2
080050056114,8
080310068144,6
080350144064,2
080410060004,8
080439786004,9
080459516004,8
080870007004,5
080010083535,9
080010085075,12
080010085265,9
080310036025,4
080519638005,3
080590120395,8
080010085371,21
080010088021,8
080010086031,17
080010601001,30
080050056221,21
080130132051,17
080370007021,6
080410075001,32
080439782001,11
080590120601,13
080590098241,10
080590098361,14
080690025011,13
080690016051,44
080690023001,20

2025-01-24 03:32:28 - root - INFO - SQL:
SELECT
      bg.zip_code,
      SUM(bg.bank_count) / COUNT(DISTINCT bg.geo_id) AS bank_concentration
    FROM
      (
        SELECT
          b.geo_id,
          z.zip_code,
          COUNT(l.branch_name) AS bank_count
        FROM
          `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
        JOIN
          `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
        ON
          ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
        LEFT JOIN
          `bigquery-public-data.fdic_banks.locations` AS l
        ON
          l.zip_code = z.zip_code
          AND l.state = 'CO'
        WHERE
          z.state_code = 'CO'
        GROUP BY
          b.geo_id,
          z.zip_code
      ) AS bg
    GROUP BY
      bg.zip_code
    ORDER BY
      bank_concentration DESC
    LIMIT 100
Results:
zip_code,bank_concentration
80111,33.0
80202,31.0
80501,30.0
80206,30.0
80634,24.0
80112,24.0
80525,24.0
80903,24.0
80302,20.0
80920,18.0
80134,16.0
81301,15.0
80537,15.0
80301,14.0
80012,14.0
80401,13.0
80601,13.0
80524,13.0
81501,13.0
80016,12.0
80222,12.0
80020,12.0
80918,12.0
81611,11.0
80226,11.0
81401,11.0
80015,10.0
80550,10.0
80122,10.0
80538,10.0
80104,10.0
80211,10.0
80021,10.0
80123,10.0
80234,9.0
80906,9.0
80002,9.0
81003,9.0
81505,9.0
80011,9.0
80921,9.0
80228,9.0
81212,9.0
80124,9.0
81321,8.0
81008,8.0
81601,8.0
80631,8.0
80129,8.0
80022,8.0
80027,8.0
81101,8.0
80439,8.0
80013,8.0
81005,8.0
80229,8.0
80203,8.0
80487,8.0
80126,8.0
80127,8.0
80224,7.0
80233,7.0
80907,7.0
80207,7.0
80026,7.0
81416,7.0
81082,7.0
80030,7.0
81147,7.0
80108,7.0
80528,7.0
80110,7.0
81632,7.0
80227,7.0
80751,7.0
81620,7.0
80909,7.0
80701,6.0
80504,6.0
80246,6.0
80807,6.0
81050,6.0
80424,6.0
81007,6.0
80521,6.0
81657,6.0
80014,6.0
81623,6.0
81052,6.0
81621,6.0
80120,6.0
80231,6.0
80033,6.0
80915,6.0
80113,5.0
80723,5.0
80433,5.0
80219,5.0
80218,5.0
80005,5.0

2025-01-24 03:32:30 - root - INFO - SQL:
SELECT DISTINCT
      state_code,
      state_fips_code
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100
Results:
state_code,state_fips_code
CO,08

2025-01-24 03:32:32 - root - INFO - SQL:
SELECT DISTINCT
      zip_code,
      functional_status
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100
Results:
zip_code,functional_status
81610,S
81027,S
80218,S
81144,S
80015,S
81226,S
80294,S
81235,S
80013,S
80535,S
80229,S
81055,S
80212,S
80742,S
80758,S
81654,S
81033,S
80820,S
80459,S
80920,S
80601,S
80538,S
81241,S
80831,S
80203,S
80205,S
80440,S
80021,S
80454,S
80644,S
81242,S
80110,S
80723,S
81041,S
81426,S
80620,S
80526,S
81504,S
80005,S
81657,S
80513,S
80230,S
80304,S
80221,S
81121,S
80455,S
80424,S
80106,S
80816,S
81615,S
81137,S
80524,S
81082,S
81084,S
80134,S
81335,S
80801,S
80135,S
80449,S
80109,S
80612,S
80482,S
80137,S
80120,S
80528,S
80236,S
81501,S
80906,S
81418,S
81232,S
80530,S
80802,S
81624,S
80809,S
80922,S
80825,S
80204,S
80520,S
81523,S
80024,S
80652,S
80504,S
80804,S
80736,S
80231,S
80624,S
80432,S
80026,S
81071,S
81130,S
80207,S
80927,S
81253,S
81004,S
80112,S
80904,S
80438,S
81640,S
80546,S
81128,S

2025-01-24 03:32:33 - root - INFO - SQL:
SELECT DISTINCT
      zip_code,
      county
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100
Results:
zip_code,county
81610,Moffat County
81027,Las Animas County
80218,Denver County
81144,Rio Grande County
80015,"Arapahoe County, Adams County, Arapahoe County, Douglas County"
81226,Fremont County
80294,Denver County
81235,Hinsdale County
80013,"Adams County, Arapahoe County, Douglas County"
80535,Larimer County
80229,"Adams County, Weld County, Adams County"
81055,Huerfano County
80212,"Jefferson County, Denver County, Adams County"
80742,Weld County
80758,Yuma County
81654,Pitkin County
81033,Crowley County
80820,Park County
80459,Grand County
80920,El Paso County
80601,"Adams County, Weld County, Adams County"
80538,"Larimer County, Larimer County, Weld County"
81241,Gunnison County
80831,El Paso County
80203,Denver County
80205,Denver County
80440,Park County
80021,"Adams County, Jefferson County, Broomfield County"
80454,Jefferson County
80644,Weld County
81242,Chaffee County
80110,"Denver County, Arapahoe County, Arapahoe County, Douglas County, Jefferson County"
80723,Morgan County
81041,Prowers County
81426,San Miguel County
80620,Weld County
80526,Larimer County
81504,Mesa County
80005,"Adams County, Jefferson County"
81657,Eagle County
80513,"Weld County, Larimer County, Weld County"
80230,Denver County
80304,Boulder County
80221,"Denver County, Adams County, Weld County, Adams County, Adams County, Jefferson County"
81121,Archuleta County
80455,Boulder County
80424,Summit County
80106,"El Paso County, Elbert County"
80816,Teller County
81615,Pitkin County
81137,"La Plata County, San Juan County, Archuleta County"
80524,"Larimer County, Weld County"
81082,Las Animas County
81084,Baca County
80134,Douglas County
81335,Montezuma
80801,Washington
80135,Douglas County
80449,Park
80109,Douglas County
80612,Weld
80482,Grand County
80137,"Adams County, Arapahoe County, Adams County, Arapahoe County, Douglas County"
80120,"Arapahoe County, Douglas County, Arapahoe County, Douglas County, Jefferson County"
80528,"Larimer County, Larimer County, Weld County"
80236,"Denver County, Arapahoe County"
81501,Mesa County
80906,El Paso County
81418,Delta County
81232,
80530,Weld County
80802,Cheyenne
81624,Mesa County
80809,"El Paso County, El Paso County, Teller County"
80922,El Paso County
80825,Cheyenne County
80204,Denver County
80520,Weld County
81523,Mesa
80024,Adams County
80652,Weld
80504,"Weld County, Boulder County, Weld County, Boulder County"
80804,Lincoln County
80736,Logan County
80231,"Denver County, Adams County, Arapahoe County, Douglas County"
80624,Weld
80432,Park
80026,"Boulder County, Weld County, Boulder County"
81071,Kiowa County

2025-01-24 03:32:35 - root - INFO - SQL:
SELECT
      zip_code,
      ST_AREA(zip_code_geom) AS area_meters
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100
Results:
zip_code,area_meters
81610,803922339.2096646
81027,1603568261.225964
80218,4132408.375291279
81144,732787523.9827209
80015,37648673.18475815
81226,213717689.34895796
80294,15443.154771979707
81235,1399498013.7456834
80013,36174621.9947797
80535,114889328.4483473
80229,35079870.13072035
81055,666456966.2109804
80212,10332623.73986801
80742,1153486416.0006454
80758,1797671534.5882936
81654,229317666.48037755
81033,837342.7255962265
80820,765745035.065434
80459,1514700512.899586
80920,32699884.126805704
80601,71133825.01669435
80538,292204172.12505877
81241,52639644.58849215
80831,491538522.4707144
80203,2776423.9122466757
80205,11930825.988476401
80440,687720781.133277
80021,48701992.05060018
80454,11054279.214061378
80644,416332001.3847022
81242,5721721.724412766
80110,16823212.85584419
80723,751511920.5284646
81041,1189895529.3877463
81426,43798373.990922876
80620,17296514.71406093
80526,103999584.97029957
81504,29488909.48795909
80005,29814361.525391117
81657,288312198.12838244
80513,179228837.94030917
80230,6436523.061141231
80304,23717138.589239176
80221,24102923.18962938
81121,121181274.32681262
80455,89862182.87557161
80424,326844545.5102536
80106,455105119.4502262
80816,482038996.6126729
81615,66399298.04798712
81137,675091995.2586471
80524,353553390.1447639
81082,1552838532.7454312
81084,628579846.9018514
80134,146016985.82479683
81335,70198712.64251223
80801,401391409.49837136
80135,856226479.0297672
80449,1557833615.5861938
80109,68254567.83983938
80612,420875139.12548023
80482,335865540.56268495
80137,272021483.2980798
80120,22419512.481585342
80528,52991655.12494056
80236,8314870.887043324
81501,21114060.21083813
80906,121122686.03110282
81418,53371052.180538125
81232,4947456.774599835
80530,4912757.721958659
80802,1036672752.5226264
81624,1448088155.8210258
80809,131619929.20149417
80922,15485757.230253695
80825,1712398341.7294083
80204,14385906.869100865
80520,1042614.7636448124
81523,855180266.3287809
80024,105775.16164518277
80652,485117451.3696893
80504,266423402.33268538
80804,870484796.875308
80736,294497521.1902669
80231,12222702.232793234
80624,81875998.51582573
80432,283253058.3267621
80026,58819275.373623826
81071,1476113238.1356487
81130,2463434342.7965274
80207,11815284.057686727

2025-01-24 03:32:37 - root - INFO - SQL:
SELECT DISTINCT
      mtfcc_feature_class_code
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
    LIMIT 100
Results:
mtfcc_feature_class_code
G5030

2025-01-24 03:32:38 - root - INFO - SQL:
SELECT DISTINCT
      institution_name
    FROM
      `bigquery-public-data.fdic_banks.locations`
    WHERE
      state = 'CO'
    LIMIT 100
Results:
institution_name
"Armed Forces Bank, National Association"
The Huntington National Bank
U.S. Bank National Association
"Wells Fargo Bank, National Association"
Integrity Bank & Trust
"UMB Bank, National Association"
Adams Bank & Trust
ANB Bank
Independent Bank
The Central Trust Bank
5Star Bank
"JPMorgan Chase Bank, National Association"
InBank
FirstBank
Kirkpatrick Bank
Bank of Colorado
KeyBank National Association
"Zions Bancorporation, N.A."
"Bank of America, National Association"
Pikes Peak National Bank
The First National Bank of Las Animas
Waypoint Bank
"Academy Bank, National Association"
NBH Bank
Farmers State Bank of Calhan
American Bank of Commerce
The State Bank
Herring Bank
"PNC Bank, National Association"
First Interstate Bank
United Business Bank
"TBK BANK, SSB"
The Pueblo Bank and Trust Company
Stockmens Bank
Glacier Bank
Rocky Mountain Bank & Trust
Riverstone Bank
Farmers & Stockmens Bank
The Eastern Colorado Bank
Four Corners Community Bank
First Southwest Bank
Alpine Bank
First National Bank of Omaha
Bank of Estes Park
Points West Community Bank
Mountain Valley Bank
First Western Trust Bank
Farmers Bank
Bank of the West
First National Bank
Gateway First Bank
Equitable Savings and Loan Association
Verus Bank of Commerce
The First National Bank of Fleming
First FarmBank
Grand Valley Bank
Bank of England
Oakstar Bank
Home Loan State Bank
Timberline Bank
The Citizens State Bank of Ouray
The Farmers State Bank of Brush
High Plains Bank
"Golden Belt Bank, FSA"
FMS Bank
Wray State Bank
Park State Bank & Trust
"RG Bank, A Savings and Loan Association"
Frontier Bank
Alamosa State Bank
San Luis Valley Federal Bank
Community State Bank
McClave State Bank
High Country Bank
The Bank of Burlington
First Colorado National Bank
HTLF Bank
Gunnison Savings and Loan Association
The Gunnison Bank and Trust Company
The First National Bank in Trinidad
"GNBank, National Association"
MNB BANK
The First National Bank of Hugo
Century Savings and Loan Association
Del Norte Bank
The Dolores State Bank
"First National Bank, Cortez"
Fowler State Bank
The Colorado Bank and Trust Company of La Junta
First Pioneer National Bank
"Sunflower Bank, National Association"
FNB Bank
Commerce Bank
First-Citizens Bank & Trust Company
Mountain View Bank of Commerce
North Valley Bank
"BOKF, National Association"
CoreFirst Bank & Trust
"Morgan Stanley Private Bank, National Association"
"United Fidelity Bank, fsb"

2025-01-24 03:32:40 - root - INFO - SQL:
SELECT DISTINCT
      lsad_name
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
    LIMIT 100
Results:
lsad_name
Block Group 1
Block Group 2
Block Group 3
Block Group 4
Block Group 5
Block Group 6
Block Group 7
Block Group 8

2025-01-24 03:32:40 - root - INFO - itercount: 0
2025-01-24 03:32:40 - root - INFO - Database Name: bigquery-public-data
Schema Name: census_utility
DDL describes table information.
,0
table_name,lsad_codes
ddl,"CREATE TABLE `bigquery-public-data.census_utility.lsad_codes`
(
  lsad_code STRING,
  lsad_description STRING,
  associated_geographic_entities STRING
)
OPTIONS(
  description=""The legal/statistical area description (LSAD) codes describe the particular typology for each geographic entity. For legal entities, the LSAD reflects the term that appears in legal documentation pertaining to the entity, such as a treaty, charter, legislation, resolution, or ordinance. For statistical entities, the LSAD is the term assigned by the Census Bureau or other agency defining the entity. The LSAD code is a two-character field that corresponds to a description of the legal or statistical type of entity and identifies whether the LSAD term should be capitalized and should precede or follow the name of the geographic entity. Note that the same LSAD code is assigned to entities at different levels of the geographic hierarchy when they share the same LSAD. For example, the Census Bureau assigns the same LSAD code (\""21\"") to boroughs in New York and Connecticut, although they are county subdivisions in the former and incorporated places in the latter.\n\nThese codes can be found in the TIGER/Line products, gazetteer files, and other products. The table below describes each code and which geographic entities each code is valid for.""
);"

,1
table_name,mtfcc_feature_class_codes
ddl,"CREATE TABLE `bigquery-public-data.census_utility.mtfcc_feature_class_codes`
(
  feature_class_code STRING,
  feature_class STRING,
  superclass STRING,
  point BOOL,
  linear BOOL,
  areal BOOL,
  description STRING
);"

,2
table_name,fips_class_code
ddl,"CREATE TABLE `bigquery-public-data.census_utility.fips_class_code`
(
  fips_class_code STRING,
  code_description STRING
);"

,3
table_name,functional_status_codes
ddl,"CREATE TABLE `bigquery-public-data.census_utility.functional_status_codes`
(
  functional_status_code STRING,
  code_description STRING,
  associated_geographic_entity STRING
);"

,4
table_name,fips_codes_all
ddl,"CREATE TABLE `bigquery-public-data.census_utility.fips_codes_all`
(
  summary_level STRING,
  summary_level_name STRING,
  state_fips_code STRING,
  county_fips_code STRING,
  county_subdivision_fips_code STRING,
  place_fips_code STRING,
  consolidated_city_fips_code STRING,
  area_name STRING
);"

,5
table_name,fips_codes_states
ddl,"CREATE TABLE `bigquery-public-data.census_utility.fips_codes_states`
(
  state_fips_code STRING,
  state_postal_abbreviation STRING,
  state_name STRING,
  state_gnisid STRING
);"

Database Name: bigquery-public-data
Schema Name: fda_food
DDL describes table information.
,0
table_name,food_enforcement
ddl,"CREATE TABLE `bigquery-public-data.fda_food.food_enforcement`
(
  classification STRING OPTIONS(description=""Numerical designation (I, II, or III) that is assigned by FDA to a particular product recall that indicates the relative degree of health hazard. Class I = Dangerous or defective products that predictably could cause serious health problems or death. Examples include: food found to contain botulinum toxin, food with undeclared allergens, a label mix-up on a lifesaving drug, or a defective artificial heart valve. Class II = Products that might cause a temporary health problem, or pose only a slight threat of a serious nature. Example: a drug that is under-strength but that is not used to treat life-threatening situations. Class III = Products that are unlikely to cause any adverse health reaction, but that violate FDA labeling or manufacturing laws. Examples include: a minor container defect and lack of English labeling in a retail food.""),
  center_classification_date DATE OPTIONS(description=""""),
  report_date DATE OPTIONS(description=""Date that the FDA issued the enforcement report for the product recall.""),
  postal_code STRING OPTIONS(description=""""),
  termination_date DATE OPTIONS(description=""""),
  recall_initiation_date DATE OPTIONS(description=""Date that the firm first began notifying the public or their consignees of the recall.""),
  recall_number STRING OPTIONS(description=""A numerical designation assigned by FDA to a specific recall event used for tracking purposes.""),
  city STRING OPTIONS(description=""The city in which the recalling firm is located.""),
  event_id INT64 OPTIONS(description=""A numerical designation assigned by FDA to a specific recall event used for tracking purposes.""),
  distribution_pattern STRING OPTIONS(description=""General area of initial distribution such as, “Distributors in 6 states: NY, VA, TX, GA, FL and MA; the Virgin Islands; Canada and Japan”. The term “nationwide” is defined to mean the fifty states or a significant portion. Note that subsequent distribution by the consignees to other parties may not be included.""),
  recalling_firm STRING OPTIONS(description=""The firm that initiates a recall or, in the case of an FDA requested recall or FDA mandated recall, the firm that has primary responsibility for the manufacture and (or) marketing of the product to be recalled.""),
  voluntary_mandated STRING OPTIONS(description=""Describes who initiated the recall. Recalls are almost always voluntary, meaning initiated by a firm. A recall is deemed voluntary when the firm voluntarily removes or corrects marketed products or the FDA requests the marketed products be removed or corrected. A recall is mandated when the firm was ordered by the FDA to remove or correct the marketed products, under section 518(e) of the FD&C Act, National Childhood Vaccine Injury Act of 1986, 21 CFR 1271.440, Infant Formula Act of 1980 and its 1986 amendments, or the Food Safety Modernization Act (FSMA).""),
  state STRING OPTIONS(description=""The U.S. state in which the recalling firm is located.""),
  reason_for_recall STRING OPTIONS(description=""Information describing how the product is defective and violates the FD&C Act or related statutes.""),
  initial_firm_notification STRING OPTIONS(description=""The method(s) by which the firm initially notified the public or their consignees of a recall. A consignee is a person or firm named in a bill of lading to whom or to whose order the product has or will be delivered.""),
  status STRING OPTIONS(description=""On-Going = A recall which is currently in progress.  Completed = The recall action reaches the point at which the firm has actually retrieved and impounded all outstanding product that could reasonably be expected to be recovered, or has completed all product corrections. Terminated = FDA has determined that all reasonable efforts have been made to remove or correct the violative product in accordance with the recall strategy, and proper disposition has been made according to the degree of hazard. Pending = Actions that have been determined to be recalls, but that remain in the process of being classified.""),
  product_type STRING OPTIONS(description=""""),
  country STRING OPTIONS(description=""The country in which the recalling firm is located.""),
  product_description STRING OPTIONS(description=""Brief description of the product being recalled.""),
  code_info STRING OPTIONS(description=""A list of all lot and/or serial numbers, product numbers, packer or manufacturer numbers, sell or use by dates, etc., which appear on the product or its labeling.""),
  address_1 STRING OPTIONS(description=""""),
  address_2 STRING OPTIONS(description=""""),
  product_quantity STRING OPTIONS(description=""The amount of defective product subject to recall.""),
  more_code_info STRING OPTIONS(description="""")
);"

,1
table_name,food_events
ddl,"CREATE TABLE `bigquery-public-data.fda_food.food_events`
(
  report_number STRING OPTIONS(description=""The report number""),
  reactions STRING OPTIONS(description=""Information on the reactions or symptoms experienced by the individual involved""),
  outcomes STRING OPTIONS(description=""Information on known outcomes or consequences of the adverse event. For more info, refer: https://open.fda.gov/food/event/reference/""),
  products_brand_name STRING OPTIONS(description=""The reported brand name of the product.""),
  products_industry_code STRING OPTIONS(description=""The FDA industry code for the product. Results in this endpoint are generally limited to products tagged with industry codes related to human food and nutritional supplements or cosmetics.  For more info, refer: https://open.fda.gov/food/event/reference/""),
  products_role STRING OPTIONS(description=""""),
  products_industry_name STRING OPTIONS(description=""The FDA industry name associated with the product.""),
  date_created DATE OPTIONS(description=""Date the report was received by FDA.""),
  date_started DATE OPTIONS(description=""Date of the adverse event (when it was considered to have started).""),
  consumer_gender STRING OPTIONS(description=""The reported gender of the consumer. Female = Female Male = Male Not Available = Unknown""),
  consumer_age FLOAT64 OPTIONS(description=""The reported age of the consumer at the time of the adverse event report, expressed in the unit in the field age_unit""),
  consumer_age_unit STRING OPTIONS(description=""Encodes the unit in which the age of the consumer is expressed.  Day(s) = age is expressed in days Week(s) = age is expressed in weeks Month(s) = age is expressed in months Year(s) = age is expressed in years Decade(s) = age is expressed in decades Not Available = Unknown"")
);"

Database Name: bigquery-public-data
Schema Name: fdic_banks
DDL describes table information.
,0
table_name,locations
ddl,"CREATE TABLE `bigquery-public-data.fdic_banks.locations`
(
  fdic_certificate_number STRING OPTIONS(description=""A unique number assigned by the FDIC used to identify institutions and for the issuance of insurance certificates.""),
  institution_name STRING OPTIONS(description=""The legal name of the institution.""),
  branch_name STRING OPTIONS(description=""Name of the branch.""),
  branch_number STRING OPTIONS(description=""The branch's corresponding office number.""),
  main_office BOOL OPTIONS(description=""The main office for the institution.""),
  branch_address STRING OPTIONS(description=""Street address at which the branch is physically located.""),
  branch_city STRING OPTIONS(description=""City in which branch is physically located.""),
  zip_code STRING OPTIONS(description=""The first five digits of the full postal zip code representing physical location of the branch.""),
  branch_county STRING OPTIONS(description=""County where the branch is physically located.""),
  county_fips_code STRING OPTIONS(description=""A five digit number representing the state and county in which the institution is physically located.  The first two digits represent the FIPS state numeric code and the last three digits represent the FIPS county numeric code.""),
  state STRING OPTIONS(description=""State abbreviation in which the branch is physically located. The FDIC Act defines state as any State of the United States, the District of Columbia, and any territory of the United States, Puerto Rico, Guam, American Samoa, the Trust Territory of the Pacific Islands, the Virgin Island, and the Northern Mariana Islands.""),
  state_name STRING OPTIONS(description=""State in which the  branch is physically located. The FDIC Act defines state as any State of the United States, the District of Columbia, and any territory of the United States, Puerto Rico, Guam, American Samoa, the Trust Territory of the Pacific Islands, the Virgin Island, and the Northern Mariana Islands.""),
  institution_class STRING OPTIONS(description=""\""A classification code assigned by the FDIC based on the institution's charter type (commercial bank or savings institution), charter agent (state or federal), Federal Reserve membership status (Fed member, Fed nonmember) and its primary federal regulator (state chartered institutions are subject to both federal and state supervision). N -Commercial bank, national (federal) charter and Fed member, supervised by the Office of the Comptroller of the Currency (OCC) NM -Commercial bank, state charter and Fed nonmember, supervised by the FDIC OI - Insured U.S. branch of a foreign chartered institution (IBA) SA - Savings associations, state or federal charter, supervised by the Office of Thrift Supervision (OTS) SB - Savings banks, state charter, supervised by the FDIC SM - Commercial bank, state charter and Fed member, supervised by the Federal Reserve (FRB)\""""),
  cbsa_fips_code STRING OPTIONS(description=""Numeric code of the Core Based Statistical Area (CBSA) as defined by the US Census Bureau Office of Management and Budget.""),
  cbsa_name STRING OPTIONS(description=""Name of the Core Based Statistical Area (CBSA) as defined by the US Census Bureau Office of Management and Budget.""),
  cbsa_division_flag BOOL OPTIONS(description=""A flag indicating member of a Core Based Statistical Division as defined by the US Census Bureau Office of Management and Budget.""),
  cbsa_division_fips_code INT64 OPTIONS(description=""Numeric code of the Core Based Statistical Division as defined by the US Census Bureau Office of Management and Budget.""),
  cbsa_division_name STRING OPTIONS(description=""Name of the Core Based Statistical Division as defined by the US Census Bureau Office of Management and Budget.""),
  cbsa_metro_flag BOOL OPTIONS(description=""A flag used to indicate whether an branch is in a Metropolitan Statistical Area as defined by the US Census Bureau Office of Management and Budget""),
  cbsa_metro_fips_code STRING OPTIONS(description=""Numeric code of the Metropolitan Statistical Area as defined by the US Census Bureau Office of Management and Budget""),
  cbsa_metro_name STRING OPTIONS(description=""Name of the Metropolitan Statistical Area as defined by the US Census Bureau Office of Management and Budget""),
  cbsa_micro_flag BOOL OPTIONS(description=""A flag (1=Yes) used to indicate whether an branch is in a Micropolitan Statistical Area as defined by the US Census Bureau Office of Management and Budget""),
  csa_flag BOOL OPTIONS(description=""Flag (1=Yes) indicating member of a Combined Statistical Area (CSA) as defined by the US Census Bureau Office of Management and Budget""),
  csa_fips_code STRING OPTIONS(description=""Numeric code of the Combined Statistical Area (CSA) as defined by the US Census Bureau Office of Management and Budget""),
  csa_name STRING OPTIONS(description=""Name of the Combined Statistical Area (CSA) as defined by the US Census Bureau Office of Management and Budget""),
  date_established DATE OPTIONS(description=""The date on which the branch began operations.""),
  fdic_uninum STRING OPTIONS(description=""This is the FDIC UNINUM of the institution that owns the branch. A UNINUM is a unique sequentially number added to the FDIC database for both banks and branches. There is no pattern imbedded within the number. The FI_UNINUM is updated with every merger or purchase of branches to reflect the most current owner.""),
  last_updated DATE OPTIONS(description=""The day the institution information was updated.""),
  service_type STRING OPTIONS(description=""\""Define the various types of offices of FDIC-insured institutions. 11 -  Full Service Brick and Mortar Office 12 -  Full Service Retail Office 13 -  Full Service Cyber Office 14 -  Full Service Mobile Office 15 -  Full Service Home/Phone Banking 16 -  Full Service Seasonal Office 21 -  Limited Service Administrative Office 22 -  Limited Service Military Facility 23 -  Limited Service Facility Office 24 -  Limited Service Loan Production Office 25 -  Limited Service Consumer Credit Office 26 -  Limited Service Contractual Office 27 -  Limited Service Messenger Office 28 -  Limited Service Retail Office 29 -  Limited Service Mobile Office 30 -  Limited Service Trust Office\""""),
  branch_fdic_uninum STRING OPTIONS(description=""Unique Identification Number for a Branch Office as assigned by the FDIC"")
);"

,1
table_name,institutions
ddl,"CREATE TABLE `bigquery-public-data.fdic_banks.institutions`
(
  fdic_certificate_number STRING OPTIONS(description=""A unique number assigned by the FDIC used to identify institutions and for the issuance of insurance certificates.""),
  institution_name STRING OPTIONS(description=""The legal name of the institution.""),
  state_name STRING OPTIONS(description=""State in which the the institution is physically located. The FDIC Act defines state as any State of the United States, the District of Columbia, and any territory of the United States, Puerto Rico, Guam, American Samoa, the Trust Territory of the Pacific Islands, the Virgin Island, and the Northern Mariana Islands.""),
  fdic_id STRING OPTIONS(description=""FDIC's unique identifier number for holding companies, banks, branches and nondeposit subsidiaries.""),
  docket STRING OPTIONS(description=""An identification number assigned to institutions chartered by the office of thrift supervision or members of the federal housing finance board (FHFB) and formerly by the federal home loan bank board.  The value is \""00000\"" for institutions not members of the FHFB.""),
  active BOOL OPTIONS(description=""Institutions that are currently open and insured by the FDIC""),
  address STRING OPTIONS(description=""Street address at which the institution or one of its branches is physically located.""),
  total_assets INT64 OPTIONS(description=""The sum of all assets owned by the institution including cash, loans, securities, bank premises and other assets. This total does not include off-balance-sheet accounts.""),
  bank_charter_class STRING OPTIONS(description=""A classification code assigned by the FDIC based on the institution's charter type (commercial bank or savings institution), charter agent (state or federal), Federal Reserve membership status (Fed member, Fed nonmember)and its primary federal regulator (state chartered institutions are subject to both federal and state supervision).   N = commercial bank, national (federal) charter and Fed member, supervised by the Office of the Comptroller of the Currency (OCC)  SM = commercial bank, state charter and Fed member, supervised by the Federal Reserve (FRB)  NM = commercial bank, state charter and Fed nonmember, supervised by the FDIC  SB = savings banks, state charter, supervised by the FDIC  SA = savings associations, state or federal charter, supervised by the Office of Thrift Supervision (OTS)  OI = insured U.S. branch of a foreign chartered institution (IBA)""),
  change_code_1 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_2 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_3 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_4 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_5 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_6 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_7 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_8 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_9 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_10 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_11 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_12 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_13 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_14 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  change_code_15 STRING OPTIONS(description=""FDIC code used to signify a structural event relating to an institution.  The definitions of the codes are available in the `bigquery-public-data.fdic_banks.change_codes`""),
  occ_charter STRING OPTIONS(description=""A unique number assigned by the Office of the Comptroller of the Currency (OCC) used to identify institutions that it has chartered and regulates (i.e. national  banks).""),
  chartering_agency STRING OPTIONS(description=""All Chartering Agencies - State and Federal  Comptroller of the Currency - Chartering authority for nationally chartered commercial banks and for federally chartered savings associations (The Office of Thrift Supervision (OTS) before 7/21/11)  State (includes U.S. Territories) - Chartering authority for institutions that are not chartered by the OCC or OTS""),
  conservatorship BOOL OPTIONS(description=""A flag that indicates if an institution is being operated in government conservatorship.""),
  city STRING OPTIONS(description=""City in which an institution's headquarters or one of its branches is physically located.""),
  category_code STRING OPTIONS(description=""Numeric code which identifies the major and minor categories of an institution.  Definitions of these are available in`bigquery-public-data.fdic_banks.category_code`""),
  county_fips_code STRING OPTIONS(description=""A five digit number representing the state and county in which the institution is physically located.  The first two digits represent the FIPS state numeric code and the last three digits represent the FIPS county numeric code.""),
  county_name STRING OPTIONS(description=""County where the institution is physically located (abbreviated if the county name exceeds 16 characters).""),
  established_date DATE OPTIONS(description=""The date on which the institution began operations.""),
  last_updated DATE OPTIONS(description=""Date the data was last updated""),
  effective_date DATE OPTIONS(description=""Effective Start Date of the data contained in this row.""),
  end_effective_date DATE OPTIONS(description=""The date that ends or closes out the last structural event relating to an institution. For closed institutions, this date represents the day that the institution became inactive.""),
  denovo_institute BOOL OPTIONS(description=""A flag used to indicate whether an institution is a new institution (not a recharter). This flag is set quarterly. For instance, if REPDTE is 3/31/98 and DENOVO equals 1, the institution was a denovo during the first quarter of 1998.""),
  total_deposits INT64 OPTIONS(description=""The sum of all deposits including demand deposits, money market deposits, other savings deposits, time deposits and deposits in foreign offices.""),
  equity_capital INT64 OPTIONS(description=""Total equity capital (includes preferred and common stock, surplus and undivided profits).""),
  fdic_geo_region STRING OPTIONS(description=""The FDIC Office assigned to the geographic area.  The eight FDIC Regions and their respective states are:    Boston - Connecticut, Maine, Massachusetts, New Hampshire, Rhode Island, Vermont  New York - Delaware, District of Columbia, Maryland, New Jersey, New York, Pennsylvania, Puerto Rico, U.S. Virgin Islands  Atlanta - Alabama, Florida, Georgia, North Carolina, South Carolina, Virginia, West Virginia  Memphis - Arkansas, Kentucky, Louisiana, Mississippi, Tennessee  Chicago - Illinois, Indiana, Michigan, Ohio, Wisconsin   Kansas City - Iowa, Kansas, Minnesota, Missouri, Nebraska, North Dakota, South Dakota  Dallas - Colorado, New Mexico, Oklahoma, Texas  San Francisco - Alaska, American Samoa, Arizona, California, Guam, Hawaii, Idaho, Montana, Nevada, Oregon, States of Micronesia, Utah, Washington, Wyoming""),
  fdic_supervisory_region STRING OPTIONS(description=""The supervisory FDIC office assigned to the institution.  The eight FDIC Supervisory Regions and their respective states are:    Boston - Connecticut, Maine, Massachusetts, New Hampshire, Rhode Island, Vermont  New York - Delaware, District of Columbia, Maryland, New Jersey, New York, Pennsylvania, Puerto Rico, U.S. Virgin Islands  Atlanta - Alabama, Florida, Georgia, North Carolina, South Carolina, Virginia, West Virginia  Memphis - Arkansas, Kentucky, Louisiana, Mississippi, Tennessee  Chicago - Illinois, Indiana, Michigan, Ohio, Wisconsin   Kansas City - Iowa, Kansas, Minnesota, Missouri, Nebraska, North Dakota, South Dakota  Dallas - Colorado, New Mexico, Oklahoma, Texas  San Francisco - Alaska, American Samoa, Arizona, California, Guam, Hawaii, Idaho, Montana, Nevada, Oregon, States of Micronesia, Utah, Washington, Wyoming""),
  fdic_supervisory_region_code STRING OPTIONS(description=""\""A numeric value associated with the name of an FDIC supervisory region  2 - New York - states: Connecticut, Delaware, Maine, Maryland, Massachusetts, New Hampshire, New Jersey, New York, Pennsylvania, Puerto Rico, Rhode Island, Vermont, Virgin Islands  5 - Atlanta - states: Alabama, Florida, Georgia, North Carolina, South Carolina, Virginia  9 - Chicago - states: Illinois, Indiana, Kentucky, Michigan, Ohio  11 - Kansas City - states: Iowa, Kansas, Minnesota, Missouri, Nebraska, North Dakota, South Dakota  13 - Dallas - states: Arkansas, Colorado, Louisiana, Mississippi, New Mexico, Oklahoma, Tennessee, Texas  14 - San Francisco - states: Alaska, American Samoa, Arizona, California, Federated States of Micronesia, Guam, Hawaii, Idaho, Montana, Nevada, Oregon, Utah, Washington, Wyoming  15 - Washington Office - Division of Risk Management Supervision (RMS)  16 - Washington Office - The Office of Complex Financial Institutions (CFI) \""""),
  fed_reserve_district STRING OPTIONS(description=""""),
  fed_reserve_district_id STRING OPTIONS(description=""A number used to identify the Federal Reserve district in which the institution is located. 01 = Boston,  02 - New York, 03 = Philadelphia,  04 = Cleveland, 05 = Richmond, 06 = Atlanta, 07 = Chicago, 08 - St. Louis, 09 = Minneapolis, 10 - Kansas city, 11 = Dallas, 12 - San Francisco""),
  fed_reserve_unique_id STRING OPTIONS(description=""A unique number assigned by the Federal Reserve board as the entity's unique identifier""),
  federal_charter BOOL OPTIONS(description=""A flag used to indicate whether the institution is chartered by an agent of the federal government.""),
  fdic_field_office STRING OPTIONS(description=""The FDIC Field Office where an institution is physically located.""),
  iba BOOL OPTIONS(description=""Includes Bank Insurance Fund insured branches in the U.S. established by banks chartered and headquartered in foreign countries.  These institutions are regulated by one of the three Federal commercial bank regulators and submit financial data to the Federal Reserve.""),
  inactive_flag BOOL OPTIONS(description=""Institutions that are currently closed but were once insured by the FDIC.""),
  insurance_fund_membership STRING OPTIONS(description=""Deposit Insurance Fund (DIF), Bank Insurance Fund (BIF), Savings Association Insurance Fund (SAIF)""),
  secondary_insurance_fund STRING OPTIONS(description=""As a result of the establishment of a single Deposit Insurance Fund (DIF) effective April 1, 2006, the Secondary Insurance fund is no longer applicable. previously both bif and saif bank insurance fund - institutions that are members of the bank insurance fund savings association insurance fund - Institutions that are members of the Savings Association Insurance Fund""),
  deposit_insurance_date DATE OPTIONS(description=""The date that an institution obtained federal deposit insurance.""),
  credit_card_institution BOOL OPTIONS(description=""Institutions with total loans greater than 50% of total assets and credit card loans greater than 50% of total loans, including loans that have been securitized and sold.""),
  bank_insurance_fund_member BOOL OPTIONS(description=""Institutions who are members of the Bank Insurance Fund. As of April 1, 2006 BIF was merged together with the Savings Institution Insurance Fund (SAIF) to create a single Deposit Insurance Fund (DIF).  All FDIC insured BIF member institutions, that are still active or open, are now insured members of DIF.""),
  insured_commercial_bank BOOL OPTIONS(description=""Includes commercial banks insured by the FDIC.  These institutions are regulated by one of the three Federal commercial bank regulators (FDIC, Federal Reserve Board, or Office of the Comptroller of the Currency).  They submit financial reports to the Federal Reserve (state member banks) or the FDIC (state non-member banks and national banks).""),
  deposit_insurance_fund_member BOOL OPTIONS(description=""\""A flag used to indicate whether an institution is insured under the Deposit Insurance Fund (DIF).  As of April 1, 2006 the Bank Insurance Fund (BIF) was merged together with the Savings Institution Insurance Fund (SAIF) to create a single Deposit Insurance Fund (DIF).  All FDIC insured BIF and SAIF member institutions that are still active or open are now insured members of DIF.    False = No, not DIF insured and True = Yes, DIF insured.  Note that institutions that became inactive prior to April 2006 will also have false value.   \""""),
  fdic_insured BOOL OPTIONS(description=""Includes institutions insured by the FDIC.""),
  saif_insured BOOL OPTIONS(description=""Institutions who are members of the Savings Association Insurance Fund. As of April 1, 2006 SAIF was merged together with the Bank Insurance Fund (BIF) to create a single Deposit Insurance Fund (DIF).  All FDIC insured SAIF member institutions, that are still active or open, are now insured members of DIF.""),
  insured_savings_institute BOOL OPTIONS(description=""Includes savings institutions insured by the FDIC that operate under state or federal banking codes applicable to thrift institutions.  These institutions are regulated by and submit financial reports to one of two Federal regulators (FDIC or Office of Thrift Supervision).""),
  new_cert_number STRING OPTIONS(description=""A new certificate number of an already existing FDIC-insured institution resulting from either a merger or an acquisition.""),
  oakar_institute BOOL OPTIONS(description=""A member of one insurance fund that acquired deposits insured by the other fund, where that portion of the buyer's deposits remained insured by, and assessable by, the other fund.""),
  ots_region STRING OPTIONS(description=""Prior to 7/21/11, the Office of Thrift Supervision (OTS) Region in which the institution is physically located. The five OTS Regions and their respective states are: Northeast - Connecticut, Delaware, Maine, Massachusetts, New Hampshire, New Jersey, New York, Pennsylvania, Rhode Island, Vermont, West Virginia Southeast - Alabama, District of Columbia, Florida, Georgia, Maryland, North Carolina, Puerto Rico, South Carolina, U.S. Virgin Islands, Virginia Central - Illinois, Indiana, Kentucky, Michigan, Ohio, Tennessee, Wisconsin Midwest - Arkansas, Colorado, Iowa, Kansas, Louisiana, Minnesota, Mississippi, Missouri, Nebraska, New Mexico, North Dakota, Oklahoma, South Dakota, Texas West - Alaska, American Samoa, Arizona, California, Guam, Hawaii, Idaho, Montana, Nevada, States of Micronesia, Oregon, Utah, Washington, Wyoming \""""),
  last_structural_change DATE OPTIONS(description=""A date field indicating the date that a change to this record was processed. Standard format = \""CCYYMMDD\"" (Length = 8) which has been converted to Month, Day, Year format for display purposes.""),
  qbp_region STRING OPTIONS(description=""The Quarterly Banking Profile (QBP) Commercial Bank Region in which the institution is physically located.""),
  regulator STRING OPTIONS(description=""""),
  report_date DATE OPTIONS(description=""The last day of the financial reporting period selected.""),
  reporting_period_end_date DATE OPTIONS(description=""The financial reporting period selected in CCYYMM format.""),
  state_chartered BOOL OPTIONS(description=""A flag that indicates if an institution is state chartered.""),
  return_on_assets FLOAT64 OPTIONS(description=""Net income after taxes and extraordinary items (annualized) as a percent of average total assets.""),
  roa_quarterly FLOAT64 OPTIONS(description=""Quarterly net income after taxes and extraordinary items as a percent of average total assets.""),
  roa_pretax FLOAT64 OPTIONS(description=""Annualized pre-tax net income as a percent of average assets. Note: Includes extraordinary items and other adjustments, net of taxes.""),
  row_pretax_quarterly FLOAT64 OPTIONS(description=""Quarterly pre-tax net income as a percent of average assets. Note: Includes extraordinary items and other adjustments, net of taxes.""),
  return_on_equity FLOAT64 OPTIONS(description=""Annualized net income as a percent of average equity on a consolidated basis.     Note: If retained earnings are  negative, the ratio is shown as NA.""),
  roe_quarterly FLOAT64 OPTIONS(description=""Quarterly net income (including gains or losses on securities and extraordinary items) as a percentage of average total equity capital.""),
  run_date DATE OPTIONS(description=""The day the institution information was updated.""),
  sasser_institute BOOL OPTIONS(description=""OTS supervised savings associations that converted their charter to that of a commercial or savings bank.  Converted associations remain members of the SAIF, but they become subject to supervision by one of the three federal banking agencies. Not Applicable as of March 31, 2006.""),
  law_sasser BOOL OPTIONS(description=""A flag associated with OTS supervised savings associations that converted their charter to that of a commercial or savings bank.  Converted associations remain members of the SAIF, but they become subject to supervision by one of the three federal banking agencies. Not Applicable as of March 31, 2006.""),
  state STRING OPTIONS(description=""2 letter postal abbreviation for the state in which the the headquarters are physically located. The FDIC Act defines state as any State of the United States, the District of Columbia, and any territory of the United States, Puerto Rico, Guam, American Samoa, the Trust Territory of the Pacific Islands, the Virgin Island, and the Northern Mariana Islands.""),
  state_fips_code STRING OPTIONS(description=""2 digit FIPS code to uniquely identify the state""),
  trade_name_1 STRING OPTIONS(description=""Trade name other than the institution's legal name used to identify one of the institution's physical offices at which deposits are accepted or solicited from the public""),
  trade_name_2 STRING OPTIONS(description=""Trade name other than the institution's legal name used to identify one of the institution's physical offices at which deposits are accepted or solicited from the public""),
  trade_name_3 STRING OPTIONS(description=""Trade name other than the institution's legal name used to identify one of the institution's physical offices at which deposits are accepted or solicited from the public""),
  trade_name_4 STRING OPTIONS(description=""Trade name other than the institution's legal name used to identify one of the institution's physical offices at which deposits are accepted or solicited from the public""),
  trade_name_5 STRING OPTIONS(description=""Trade name other than the institution's legal name used to identify one of the institution's physical offices at which deposits are accepted or solicited from the public""),
  trade_name_6 STRING OPTIONS(description=""Trade name other than the institution's legal name used to identify one of the institution's physical offices at which deposits are accepted or solicited from the public""),
  zip_code STRING OPTIONS(description=""The first three, four, or five digits of the full postal zip code representing physical location of the institution or its branch office.""),
  occ_district STRING OPTIONS(description=""The Office of the Comptroller of the Currency (OCC) District in which the institution is physically located. The six OCC Districts and their respective states are: Northeast - Connecticut, Delaware, District of Columbia, Maine, Maryland, Massachusetts, New Hampshire, New Jersey, New York, Pennsylvania, Puerto Rico, Rhode Island, Vermont, U.S. Virgin Islands  Southeast - Alabama, Florida, Georgia, Mississippi, North Carolina, South Carolina, Tennessee, Virginia, West Virginia  Central - Illinois, Indiana, Kentucky, Michigan, Ohio, Wisconsin  Midwest - Iowa, Kansas, Minnesota, Missouri, Nebraska, North Dakota, South Dakota  Southwest - Arkansas, Louisiana, New Mexico, Oklahoma, Texas  West - Alaska, American Samoa, Arizona, California, Colorado, Guam, Hawaii, Idaho, Montana, Nevada, Oregon, States of Micronesia, Utah, Washington, Wyoming""),
  ultimate_cert_number STRING OPTIONS(description=""The cert number of the last successor or acquirer of the institution""),
  cfpb_supervisory_flag BOOL OPTIONS(description=""Indicates secondary supervision by CFPB""),
  cfpb_supervisory_start_date DATE OPTIONS(description=""Date the institution began secondary supervision by CFPB""),
  cfpb_supervisory_end_date DATE OPTIONS(description=""Date the institution ended supervision by CFPB""),
  offices_count INT64 OPTIONS(description=""""),
  parent_fdic_cert STRING OPTIONS(description=""FDIC certificate number of the parent bank or savings institution with which the reported institution;s financial data has been consolidated. Beginning in March 1997, both the Thrift Financial Reports and Call Reports are completed on a fully consolidated basis. Previously, the consolidation of subsidiary depository institutions was prohibited. Now, parent institutions are required to file consolidated reports, while their subsidiary financial institutions are still required to file separate reports. Click on the certificate number to identify the parent bank or thrift.""),
  parent_parcert STRING OPTIONS(description=""The PARCERT number identifies the subsidiary institutions parent certificate number. Beginning in March 1997, both the Thrift Financial Reports and Call Reports are completed on a fully consolidated basis. Previously, the consolidation of subsidiary depository institutions was prohibited. Now, parent institutions are required to file consolidated reports, while their subsidiary financial institutions are still required to file separate reports.""),
  high_holder_city STRING OPTIONS(description=""City in which the headquarters of the institution's regulatory high holder are physically located.""),
  total_domestic_deposits INT64 OPTIONS(description=""The sum of all domestic office deposits, including demand deposits, money market deposits, other savings deposits and time deposits.""),
  ffiec_call_report_filer BOOL OPTIONS(description=""A flag that indicates whether and institution filed an FFIEC 031 Call Report. Commercial banks with domestic and foreign offices are required to file such a report.""),
  holding_company_flag BOOL OPTIONS(description=""A flag used to indicate whether an institution is a member of a multibank holding company""),
  ag_lending_flag BOOL OPTIONS(description=""A flag used to indicate whether an institution is an agricultural lending institution""),
  ownership_type STRING OPTIONS(description=""Banking institutions fall into one of two ownership types, stock or non-stock. An institution which sells stock to raise capital is called a stock institution. It is owned by the shareholders who benefit from profits earned by the institution. A non-stock institution, or mutual institution, is owned and controlled solely by its depositors. A mutual does not issue capital stock.""),
  top_holder STRING OPTIONS(description=""Regulatory top holder is assigned by the Federal Reserve Board based on ownership and control percentages. \""Note: Information on bank holding companies is only as of quarter-end. Regulatory top holder is any company that directly or indirectly owns, controls or has power to vote 25 percent or more of a bank's or direct holding company's shares or controls in any manner the election of a majority of the directors or trustees of a bank or direct holding company or exercises a controlling influence over the management or policies of a bank or direct holding company. Information on Thrift Holding Companies that own Savings Associations but do not own banks is not currently available in the ID System. Source: Federal Reserve Board National Information Center data base.\""""),
  net_income INT64 OPTIONS(description=""Net interest income plus total noninterest income plus realized gains (losses) on securities and extraordinary items, less total noninterest expense, loan loss provisions and income taxes.""),
  quarterly_net_income INT64 OPTIONS(description=""Quarterly net interest income plus total noninterest income plus realized gains (losses) on securities and extraordinary items, less total noninterest expense, loan loss provisions and income taxes.""),
  office_count_domestic INT64 OPTIONS(description=""The number of domestic offices (including headquarters) operated by active institutions in the 50 states of the U.S.A.""),
  office_count_foreign INT64 OPTIONS(description=""The number of foreign offices (outside the U.S.) operated by the institution.""),
  office_count_us_territories INT64 OPTIONS(description=""The number of offices operated by an FDIC-insured institution in all commonwealths and terrirtories of the US, along with those in freely associated states under the Compact of Free Association""),
  rssd_id STRING OPTIONS(description=""The unique number assigned by the Federal Reserve Board to the regulatory high holding company of the institution.""),
  holding_company_state STRING OPTIONS(description=""State location of the regulatory high holding company (either direct or indirect owner).""),
  subchap_s_indicator BOOL OPTIONS(description=""""),
  trust_powers_status STRING OPTIONS(description=""\""A flag used to indicate an institution's Trust Powers Granted status. 0 = No Trust Power Granted 1 = Trust Power Granted Where Trust Power has been granted specific codes are: 00 - Trust powers not know 10 - Full trust powers granted 11 - Full trust powers granted, exercised 12 - Full trust powers granted, not exercised 20 - Limited trust powers granted 21 - Limited trust powers granted, exercised 22 - Limited trust powers granted, not exercised 30 - Trust powers not granted 31 - Trust powers not granted, but exercised \""""),
  asset_concentration_hierarchy STRING OPTIONS(description=""\""Asset Concentration Hierarchy - An indicator of an institution's primary specialization in terms of asset concentration 1 - International Specialization 2 - Agricultural Specialization 3 - Credit-card Specialization  4 - Commercial Lending Specialization  5 - Mortgage Lending Specialization 6 - Consumer Lending SpecializationI 7 - Other Specialized < $1 Billion  8 - All Other < $1 Billion  9 - All Other > $1 Billion\""""),
  primary_specialization STRING OPTIONS(description=""\"" Name associated with the numeric indicator (SPECGRP) of an institution's primary specialization in terms of asset concentration: 1 - International Specialization 2 - Agricultural Specialization 3 - Credit-card Specialization  4 - Commercial Lending Specialization  5 - Mortgage Lending Specialization 6 - Consumer Lending SpecializationI 7 - Other Specialized < $1 Billion  8 - All Other < $1 Billion  9 - All Other > $1 Billion\""""),
  csa_name STRING OPTIONS(description=""\""The name associated with the numeric code that the U.S. Census Bureau Office of Management and Budget assigns for the combined statistical area (CSA) per the 2000 standards. If an institution is not defined as a CSA, the value of the field will be blank. For more information see: http://www.census.gov/population/www/estimates/metroarea.html . \""""),
  csa_fips_code STRING OPTIONS(description=""The numeric code that the U.S. Census Bureau Office of Management and Budget assigns for the combined statistical area (CSA) per the 2000 standards. If an institution is not defined as a CSA, the value of the field will be zero. For more information see: http://www.census.gov/population/www/estimates/metroarea.html .""),
  csa_indicator BOOL OPTIONS(description=""A flag used to indicate whether an institution is in a Combined Statistical Area.""),
  cbsa_name STRING OPTIONS(description=""The name associated with the numeric code that the U.S. Census Bureau Office of Management and Budget assigns for the CBSA. The 2000 standards provide that each CBSA must contain at least one urban area of 10,000 or more population. Metropolitan and micropolitan statistical areas are two categories of core based statistical areas. If an institution is not defined as a CBSA, the value of the field will be zero. For more information see: http://www.census.gov/population/www/estimates/metroarea.html .""),
  cbsa_fips_code STRING OPTIONS(description=""The numeric code that the U.S. Census Bureaus Office of Management and Budget assigns for the CBSA. The 2000 standards provide that each CBSA must contain at least one urban area of 10,000 or more population. Metropolitan and micropolitan statistical areas are two categories of core based statistical areas. If an institution is not defined as a CBSA, the value of the field will be zero. For more information see: http://www.census.gov/population/www/estimates/metroarea.html .""),
  cbsa_metro_flag BOOL OPTIONS(description=""A flag used to indicate whether an institution is in a metropolitan statistical area. The US Census bureau office of Management and Budget defines the metropolitan statistical area. A core based statistical area associated with at least one urbanized area that has a population of at least 50,000. The metropolitan statistical area comprises the central county or counties containing the core, plus adjacent outlying counties having a high degree of social and economic integration with the central county as measured through commuting.""),
  cbsa_micro_flag BOOL OPTIONS(description=""A flag used to indicate whether an institution is in a micropolitan statistical area. The US Census bureau office of Management and Budget defines the micropolitan statistical area. A core based statistical area associated with at least one urbanized area that has a population of at least 50,000. The micropolitan statistical area comprises the central county or counties containing the core, plus adjacent outlying counties having a high degree of social and economic integration with the central county as measured through commuting.""),
  cbsa_division_name STRING OPTIONS(description=""\""The name associated with the numeric code given by the US Census Bureau office of Management and Budget (2000 standards) that represents the core based statistical division (CBSADIV). A    metropolitan division is a county or group of counties    within a core based statistical area that contains a core    with a population of at least 2.5 million. A CBSA metropolitan    division consists of one or more main/secondary counties    that represent an employment center or centers, plus    adjacent counties associated with the main county or    counties through commuting ties. If an institution is not defined as a CBSA division the value of the field will be zero.\""""),
  cbsa_division_fips_code STRING OPTIONS(description=""The numeric code given by the US Census Bureau office of Management and Budget that represents the core based statistical division (CBSADIV) under the year 2000 standards. A metropolitan division is a county or group of counties within a core based statistical area that contains a core with a population of at least 2.5 million. A CBSA metropolitan division consists of one or more main/secondary counties that represent an employment center or centers, plus adjacent counties associated with the main county or counties through commuting ties. If an institution is not defined as a CBSA division the value of the field will be zero.""),
  cbsa_division_flag BOOL OPTIONS(description=""A flag used to indicate whether an institution is in a CBSA division"")
);"

Database Name: bigquery-public-data
Schema Name: geo_census_blockgroups
DDL describes table information.
,0
table_name,blockgroups_23
ddl,"CREATE TABLE `bigquery-public-data.geo_census_blockgroups.blockgroups_23`
(
  geo_id STRING OPTIONS(description=""Unique identifier for each block group. Census block group identifier; a concatenation of the current state FIPS code, county FIPS code, census tract code, and block group number.""),
  state_fips_code STRING OPTIONS(description=""Two digit FIPS code that uniquely identifies each state. See https://www.census.gov/geo/reference/ansi_statetables.html for more information State names and their corresponding FIPS codes are available as a BigQuery Public Dataset: `bigquery-public-data.census_utility.fips_codes_states`""),
  county_fips_code STRING OPTIONS(description=""Four-digit county FIPS code. County names and their corresponding FIPS codes can be found in BigQuery: `bigquery-public-data.census_utility.fips_codes_all`""),
  tract_ce STRING OPTIONS(description=""Current Census tract code""),
  blockgroup_ce STRING OPTIONS(description=""Current block group number""),
  lsad_name STRING OPTIONS(description=""Current translated legal/statistical area description and the block group number""),
  mtfcc_feature_class_code STRING OPTIONS(description=""MAF/TIGER feature class code (G5030)""),
  functional_status STRING OPTIONS(description=""Current functional status""),
  area_land_meters INT64 OPTIONS(description=""Current land area""),
  area_water_meters INT64 OPTIONS(description=""Current water area""),
  internal_point_lat FLOAT64 OPTIONS(description=""Latitude of the block group's internal point, which is the point at or closest to the block group's geographic center""),
  internal_point_lon FLOAT64 OPTIONS(description=""Longitude of the block group's internal point, which is the point at or closest to the block group's geographic center""),
  internal_point_geom GEOGRAPHY OPTIONS(description=""Geographical representation of the block group's internal point, which is the point at or closest to the block group's geographic center""),
  blockgroup_geom GEOGRAPHY OPTIONS(description=""Geographical representation of the polygon that defines the perimeter of the block group. This column should be used as the GEO column for visualization in BigQuery Geo Viz"")
);"

Some other tables have the similar structure: ['blockgroups_23', 'blockgroups_72', 'blockgroups_20', 'blockgroups_15', 'blockgroups_66', 'blockgroups_06', 'blockgroups_42', 'blockgroups_29', 'blockgroups_32', 'blockgroups_01', 'blockgroups_51', 'blockgroups_36', 'blockgroups_47', 'blockgroups_21', 'blockgroups_16', 'blockgroups_13', 'blockgroups_53', 'blockgroups_31', 'blockgroups_19', 'blockgroups_02', 'blockgroups_10', 'blockgroups_40', 'blockgroups_17', 'blockgroups_49', 'blockgroups_05', 'blockgroups_09', 'blockgroups_04', 'blockgroups_46', 'blockgroups_56', 'blockgroups_34', 'blockgroups_28', 'blockgroups_69', 'blockgroups_78', 'blockgroups_50', 'blockgroups_08', 'blockgroups_35', 'blockgroups_37', 'blockgroups_44', 'blockgroups_25', 'blockgroups_48', 'blockgroups_39', 'blockgroups_55', 'blockgroups_26', 'blockgroups_11', 'blockgroups_12', 'blockgroups_24', 'blockgroups_45', 'blockgroups_30', 'blockgroups_38', 'blockgroups_33', 'blockgroups_60', 'blockgroups_54', 'blockgroups_18', 'blockgroups_27', 'blockgroups_22', 'blockgroups_41']
,1
table_name,us_blockgroups_national
ddl,"CREATE TABLE `bigquery-public-data.geo_census_blockgroups.us_blockgroups_national`
(
  geo_id STRING OPTIONS(description=""Unique identifier for each block group. Census block group identifier; a concatenation of the current state FIPS code, county FIPS code, census tract code, and block group number.""),
  state_fips_code STRING OPTIONS(description=""Two digit FIPS code that uniquely identifies each state. See https://www.census.gov/geo/reference/ansi_statetables.html for more information State names and their corresponding FIPS codes are available as a BigQuery Public Dataset: `bigquery-public-data.census_utility.fips_codes_states`""),
  state_name STRING OPTIONS(description=""Full text name of the state that contains the block group""),
  county_fips_code STRING OPTIONS(description=""Four-digit county FIPS code. County names and their corresponding FIPS codes can be found in BigQuery: `bigquery-public-data.census_utility.fips_codes_all`""),
  county_name STRING OPTIONS(description=""Full text name of the country that contains the block group""),
  tract_ce STRING OPTIONS(description=""Current Census tract code""),
  blockgroup_ce STRING OPTIONS(description=""Current block group number""),
  lsad_name STRING OPTIONS(description=""Current translated legal/statistical area description and the block group number""),
  mtfcc_feature_class_code STRING OPTIONS(description=""MAF/TIGER feature class code (G5030)""),
  functional_status STRING OPTIONS(description=""Current functional status""),
  area_land_meters INT64 OPTIONS(description=""Current land area""),
  area_water_meters INT64 OPTIONS(description=""Current water area""),
  internal_point_lat FLOAT64 OPTIONS(description=""Latitude of the block group's internal point, which is the point at or closest to the block group's geographic center""),
  internal_point_lon FLOAT64 OPTIONS(description=""Longitude of the block group's internal point, which is the point at or closest to the block group's geographic center""),
  internal_point_geom GEOGRAPHY OPTIONS(description=""Geographical representation of the block group's internal point, which is the point at or closest to the block group's geographic center""),
  blockgroup_geom GEOGRAPHY OPTIONS(description=""Geographical representation of the polygon that defines the perimeter of the block group. This column should be used as the GEO column for visualization in BigQuery Geo Viz"")
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY state_fips_code, county_fips_code;"

Database Name: bigquery-public-data
Schema Name: geo_us_boundaries
DDL describes table information.
,0
table_name,coastline
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.coastline`
(
  name STRING,
  coastline_geom GEOGRAPHY
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY name;"

,1
table_name,csa
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.csa`
(
  geo_id STRING,
  csa_code STRING,
  name STRING,
  lsad_name STRING,
  msa_lsad_code STRING,
  mtfcc_feature_class_code STRING,
  area_land_meters FLOAT64,
  area_water_meters FLOAT64,
  internal_point_lon FLOAT64,
  internal_point_lat FLOAT64,
  internal_point_geom GEOGRAPHY,
  csa_geom GEOGRAPHY
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY name, lsad_name;"

,2
table_name,railways
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.railways`
(
  geo_id INT64,
  full_name STRING,
  mtfcc_feature_class_code STRING,
  railway_geom STRING
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY full_name, mtfcc_feature_class_code;"

,3
table_name,cbsa
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.cbsa`
(
  geo_id STRING,
  csa_geo_id STRING,
  cbsa_fips_code STRING,
  name STRING,
  lsad_name STRING,
  lsad_code STRING,
  msa_indicator STRING,
  mtfcc_feature_class_code STRING,
  area_land_meters FLOAT64,
  area_water_meters FLOAT64,
  internal_point_latitude FLOAT64,
  internal_point_longitude FLOAT64,
  internal_point_geom GEOGRAPHY,
  cbsa_geom GEOGRAPHY
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY csa_geo_id, msa_indicator;"

,4
table_name,adjacent_counties
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.adjacent_counties`
(
  county STRING,
  state STRING,
  county_fips_code STRING,
  neighbors ARRAY<STRING>,
  neighbors_state ARRAY<STRING>,
  neighbors_fips_code ARRAY<STRING>
);"

,5
table_name,counties
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.counties`
(
  geo_id STRING,
  state_fips_code STRING,
  county_fips_code STRING,
  county_gnis_code STRING,
  county_name STRING,
  lsad_name STRING,
  lsad_code STRING,
  fips_class_code STRING,
  mtfcc_feature_class_code STRING,
  csa_fips_code STRING,
  cbsa_fips_code STRING,
  met_div_fips_code STRING,
  functional_status STRING,
  area_land_meters INT64,
  area_water_meters INT64,
  int_point_lat FLOAT64,
  int_point_lon FLOAT64,
  int_point_geom GEOGRAPHY,
  county_geom GEOGRAPHY
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY state_fips_code, county_name, csa_fips_code, cbsa_fips_code;"

,6
table_name,adjacent_states
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.adjacent_states`
(
  state STRING,
  state_name STRING,
  state_fips_code STRING,
  neighbors_state ARRAY<STRING>,
  neighbors_fips_code ARRAY<STRING>
);"

,7
table_name,metropolitan_divisions
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.metropolitan_divisions`
(
  geo_id STRING,
  csa_code STRING,
  cbsa_code STRING,
  metdiv_code STRING,
  name STRING,
  lsad_name STRING,
  lsad_code STRING,
  mtfcc_feature_class_code STRING,
  area_land_meters FLOAT64,
  area_water_meters FLOAT64,
  internal_point_latitude FLOAT64,
  internal_point_longitude FLOAT64,
  internal_point_geom GEOGRAPHY,
  metdiv_geom GEOGRAPHY
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY name, csa_code, cbsa_code;"

,8
table_name,states
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.states`
(
  geo_id STRING,
  region_code STRING,
  division_code STRING,
  state_fips_code STRING,
  state_gnis_code STRING,
  state STRING,
  state_name STRING,
  lsad_code STRING,
  mtfcc_feature_class_code STRING,
  functional_status STRING,
  area_land_meters INT64,
  area_water_meters INT64,
  int_point_lat FLOAT64,
  int_point_lon FLOAT64,
  int_point_geom GEOGRAPHY,
  state_geom GEOGRAPHY
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY state, state_name, region_code, division_code;"

,9
table_name,cnecta
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.cnecta`
(
  geo_id STRING,
  cnecta_fips_code STRING,
  name STRING,
  name_lsad STRING,
  lsad STRING,
  mtfcc_feature_class_code STRING,
  area_land_meters INT64,
  area_water_meters INT64,
  int_point_lat FLOAT64,
  int_point_lon FLOAT64,
  cnecta_geom GEOGRAPHY
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY name_lsad, name, cnecta_fips_code, geo_id;"

,10
table_name,congress_district_116
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.congress_district_116`
(
  geo_id STRING,
  state_fips_code STRING,
  district_fips_code STRING,
  lsad_name STRING,
  lsad_code STRING,
  congress_session STRING,
  mtfcc_feature_class_code STRING,
  functional_status BOOL,
  area_land_meters INT64,
  area_water_meters INT64,
  int_point_lat FLOAT64,
  int_point_lon FLOAT64,
  int_point_geom GEOGRAPHY,
  district_geom GEOGRAPHY
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY state_fips_code, functional_status, lsad_name;"

Some other tables have the similar structure: ['congress_district_116', 'congress_district_115']
,11
table_name,zip_codes
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.zip_codes`
(
  zip_code STRING,
  city STRING,
  county STRING,
  state_fips_code STRING,
  state_code STRING,
  state_name STRING,
  fips_class_code STRING,
  mtfcc_feature_class_code STRING,
  functional_status STRING,
  area_land_meters FLOAT64,
  area_water_meters FLOAT64,
  internal_point_lat FLOAT64,
  internal_point_lon FLOAT64,
  internal_point_geom GEOGRAPHY,
  zip_code_geom GEOGRAPHY
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY zip_code_geom, state_code, state_name, county;"

,12
table_name,nws_forecast_regions
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.nws_forecast_regions`
(
  state STRING OPTIONS(description=""""),
  cwa STRING OPTIONS(description=""""),
  time_zone STRING OPTIONS(description=""""),
  fe_area STRING OPTIONS(description=""""),
  zone STRING OPTIONS(description=""""),
  name STRING OPTIONS(description=""""),
  state_zone STRING OPTIONS(description=""""),
  lon FLOAT64 OPTIONS(description=""""),
  lat FLOAT64 OPTIONS(description=""""),
  shortname STRING OPTIONS(description=""""),
  shape_geometry GEOGRAPHY OPTIONS(description="""")
);"

,13
table_name,urban_areas
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.urban_areas`
(
  geo_id STRING,
  urban_area_code STRING,
  name STRING,
  lsad_name STRING,
  area_lsad_code STRING,
  mtfcc_feature_class_code STRING,
  type STRING,
  functional_status STRING,
  area_land_meters FLOAT64,
  area_water_meters FLOAT64,
  internal_point_lon FLOAT64,
  internal_point_lat FLOAT64,
  internal_point_geom GEOGRAPHY,
  urban_area_geom GEOGRAPHY
)
PARTITION BY DATE(_PARTITIONTIME)
CLUSTER BY lsad_name, type;"

,14
table_name,national_outline
ddl,"CREATE TABLE `bigquery-public-data.geo_us_boundaries.national_outline`
(
  us_outline_geom GEOGRAPHY,
  aff_geo_id STRING,
  geo_id STRING,
  name STRING
);"

External knowledge that might be helpful: 
# Calculation Method: Overlap Ratio and Bank Location Data

This document describes the method used to calculate the number of bank institutions per postal code area (ZIP code) by combining geospatial data and bank location data, focusing on the overlap between postal code areas and census block groups.

## 1. Geospatial Intersection of Postal Code Areas and Census Block Groups
We are using two geographical units:
- **ZIP Code Areas**: Represented by geometries from the ZIP code boundaries dataset.
- **Census Block Groups**: Represented by geometries from the national census block groups dataset.

### Key Calculation:
- The method calculates the area of overlap between each ZIP code's geometry and each block group's geometry.
- The ratio of this intersection area to the total block group area is computed as the **overlap ratio**.

This overlap ratio represents the proportion of a block group that falls within a given ZIP code.

## 2. Bank Location Distribution Based on Overlap Ratio
The next step involves distributing the number of bank locations to the overlapping census block groups based on the calculated overlap ratio.

### Key Calculation:
- For each block group, the number of bank locations is proportionally assigned based on the overlap size. The total number of bank locations in a ZIP code is distributed to the block groups using the overlap ratio.

This provides the number of bank institutions for each block group, adjusted for the overlap with ZIP code areas.

## 3. Aggregation by ZIP Code Area
Finally, the results are aggregated by ZIP code to determine which postal code has the highest number of bank institutions.

### Key Calculation:
- The process involves grouping by ZIP code and finding the maximum number of bank locations per block group.

The table structure information is ({database name: {schema name: {table name}}}): 
{'bigquery-public-data': {'census_utility': ['fips_class_code', 'fips_codes_all', 'fips_codes_states', 'functional_status_codes', 'lsad_codes', 'mtfcc_feature_class_codes'], 'fda_food': ['food_enforcement', 'food_events'], 'fdic_banks': ['institutions', 'locations'], 'geo_census_blockgroups': ['blockgroups_01', 'blockgroups_02', 'blockgroups_04', 'blockgroups_05', 'blockgroups_06', 'blockgroups_08', 'blockgroups_09', 'blockgroups_10', 'blockgroups_11', 'blockgroups_12', 'blockgroups_13', 'blockgroups_15', 'blockgroups_16', 'blockgroups_17', 'blockgroups_18', 'blockgroups_19', 'blockgroups_20', 'blockgroups_21', 'blockgroups_22', 'blockgroups_23', 'blockgroups_24', 'blockgroups_25', 'blockgroups_26', 'blockgroups_27', 'blockgroups_28', 'blockgroups_29', 'blockgroups_30', 'blockgroups_31', 'blockgroups_32', 'blockgroups_33', 'blockgroups_34', 'blockgroups_35', 'blockgroups_36', 'blockgroups_37', 'blockgroups_38', 'blockgroups_39', 'blockgroups_40', 'blockgroups_41', 'blockgroups_42', 'blockgroups_44', 'blockgroups_45', 'blockgroups_46', 'blockgroups_47', 'blockgroups_48', 'blockgroups_49', 'blockgroups_50', 'blockgroups_51', 'blockgroups_53', 'blockgroups_54', 'blockgroups_55', 'blockgroups_56', 'blockgroups_60', 'blockgroups_66', 'blockgroups_69', 'blockgroups_72', 'blockgroups_78', 'us_blockgroups_national'], 'geo_us_boundaries': ['adjacent_counties', 'adjacent_states', 'cbsa', 'cnecta', 'coastline', 'congress_district_115', 'congress_district_116', 'counties', 'csa', 'metropolitan_divisions', 'national_outline', 'nws_forecast_regions', 'railways', 'states', 'urban_areas', 'zip_codes']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

1. **Table:** `bigquery-public-data.fdic_banks.locations`
   - **Columns:**
     - `state`: Filter bank locations in Colorado (`state` = 'CO').
     - `zip_code`: Identify the ZIP code of each bank location.
     - `branch_geom`: (If available) Use the geographical point of the branch for spatial analysis.
     - `branch_address`: For additional location details.
     - `institution_name`: To identify bank institutions.

2. **Table:** `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   - **Columns:**
     - `geo_id`: Unique identifier for each block group in Colorado.
     - `blockgroup_geom`: Geometry of the block group for spatial calculations.
     - `area_land_meters`: Total land area of the block group.
     - `state_fips_code`: Confirming the state FIPS code for Colorado ('08').

3. **Table:** `bigquery-public-data.geo_us_boundaries.zip_codes`
   - **Columns:**
     - `zip_code`: ZIP code identifier.
     - `state_code`: Filter ZIP codes within Colorado (`state_code` = 'CO').
     - `zip_code_geom`: Geometry of the ZIP code area for spatial calculations.
     - `state_fips_code`: State FIPS code to confirm the state.

**Potential Conditions:**

- **Filter bank locations to Colorado:** `state = 'CO'`
- **Filter ZIP codes to Colorado:** `state_code = 'CO'` or `state_fips_code = '08'`
- **Spatial Overlap Condition:** Use `ST_INTERSECTS` to find overlapping geometries between block groups and ZIP code areas.
- **Calculate Overlap Ratio:** Use `ST_AREA` and `ST_INTERSECTION` functions to compute the area of overlap and the overlap ratio.

---

**Sample SQL Queries:**

1. **List all bank locations in Colorado:**
   ```sql
   SELECT
     institution_name,
     branch_name,
     branch_address,
     city,
     zip_code,
     state
   FROM
     `bigquery-public-data.fdic_banks.locations`
   WHERE
     state = 'CO'
   LIMIT 100;
   ```

2. **Get distinct ZIP codes of bank locations in Colorado:**
   ```sql
   SELECT DISTINCT
     zip_code
   FROM
     `bigquery-public-data.fdic_banks.locations`
   WHERE
     state = 'CO'
   LIMIT 100;
   ```

3. **Retrieve ZIP code geometries for Colorado:**
   ```sql
   SELECT
     zip_code,
     state_code,
     zip_code_geom
   FROM
     `bigquery-public-data.geo_us_boundaries.zip_codes`
   WHERE
     state_code = 'CO'
   LIMIT 100;
   ```

4. **List all block groups in Colorado with their geometries:**
   ```sql
   SELECT
     geo_id,
     blockgroup_ce,
     blockgroup_geom
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   LIMIT 100;
   ```

5. **Find the state FIPS code for Colorado in block groups:**
   ```sql
   SELECT DISTINCT
     state_fips_code
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   LIMIT 100;
   ```

6. **Calculate the area of each block group in Colorado:**
   ```sql
   SELECT
     geo_id,
     area_land_meters
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   LIMIT 100;
   ```

7. **Join bank locations with ZIP code geometries on ZIP code:**
   ```sql
   SELECT
     b.institution_name,
     b.branch_name,
     b.zip_code,
     z.zip_code_geom
   FROM
     `bigquery-public-data.fdic_banks.locations` AS b
   JOIN
     `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
   ON
     b.zip_code = z.zip_code
   WHERE
     b.state = 'CO'
     AND z.state_code = 'CO'
   LIMIT 100;
   ```

8. **Find ZIP codes in Colorado with the number of bank locations:**
   ```sql
   SELECT
     zip_code,
     COUNT(*) AS bank_count
   FROM
     `bigquery-public-data.fdic_banks.locations`
   WHERE
     state = 'CO'
   GROUP BY
     zip_code
   ORDER BY
     bank_count DESC
   LIMIT 100;
   ```

9. **List block groups intersecting with a specific ZIP code area:**
   ```sql
   SELECT
     b.geo_id,
     b.blockgroup_geom
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
   JOIN
     `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
   ON
     ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
   WHERE
     z.zip_code = '80202'
     AND z.state_code = 'CO'
   LIMIT 100;
   ```

10. **Calculate the overlap area between block groups and ZIP codes:**
    ```sql
    SELECT
      b.geo_id,
      z.zip_code,
      ST_AREA(ST_INTERSECTION(b.blockgroup_geom, z.zip_code_geom)) AS overlap_area
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
    JOIN
      `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
    ON
      ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
    WHERE
      z.state_code = 'CO'
    LIMIT 100;
    ```

11. **Compute the overlap ratio for block groups and ZIP codes:**
    ```sql
    SELECT
      b.geo_id,
      z.zip_code,
      ST_AREA(ST_INTERSECTION(b.blockgroup_geom, z.zip_code_geom)) / ST_AREA(b.blockgroup_geom) AS overlap_ratio
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
    JOIN
      `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
    ON
      ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
    WHERE
      z.state_code = 'CO'
    LIMIT 100;
    ```

12. **Count bank locations per block group in Colorado:**
    ```sql
    SELECT
      b.geo_id,
      COUNT(l.branch_name) AS bank_count
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
    JOIN
      `bigquery-public-data.fdic_banks.locations` AS l
    ON
      ST_CONTAINS(b.blockgroup_geom, ST_GEOGPOINT(l.longitude, l.latitude))
    WHERE
      l.state = 'CO'
    GROUP BY
      b.geo_id
    LIMIT 100;
    ```
    *Note: Assuming `longitude` and `latitude` columns exist in `locations` table.*

13. **Identify ZIP codes with the highest bank concentration per block group:**
    ```sql
    SELECT
      z.zip_code,
      SUM(bank_count) / COUNT(DISTINCT b.geo_id) AS bank_concentration
    FROM
      (
        SELECT
          b.geo_id,
          z.zip_code,
          COUNT(l.branch_name) AS bank_count
        FROM
          `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
        JOIN
          `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
        ON
          ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
        LEFT JOIN
          `bigquery-public-data.fdic_banks.locations` AS l
        ON
          l.zip_code = z.zip_code
          AND l.state = 'CO'
        WHERE
          z.state_code = 'CO'
        GROUP BY
          b.geo_id,
          z.zip_code
      ) AS bg
    GROUP BY
      z.zip_code
    ORDER BY
      bank_concentration DESC
    LIMIT 100;
    ```

14. **Retrieve state FIPS codes from the ZIP codes table:**
    ```sql
    SELECT DISTINCT
      state_code,
      state_fips_code
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100;
    ```

15. **Check the functional status of ZIP code areas in Colorado:**
    ```sql
    SELECT DISTINCT
      zip_code,
      functional_status
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100;
    ```

16. **List ZIP codes in Colorado along with their counties:**
    ```sql
    SELECT DISTINCT
      zip_code,
      county
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100;
    ```

17. **Find the total area of each ZIP code in Colorado:**
    ```sql
    SELECT
      zip_code,
      ST_AREA(zip_code_geom) AS area_meters
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100;
    ```

18. **Explore the MAF/TIGER feature class codes in block groups:**
    ```sql
    SELECT DISTINCT
      mtfcc_feature_class_code
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
    LIMIT 100;
    ```

19. **List the bank institutions operating in Colorado:**
    ```sql
    SELECT DISTINCT
      institution_name
    FROM
      `bigquery-public-data.fdic_banks.locations`
    WHERE
      state = 'CO'
    LIMIT 100;
    ```

20. **Check the legal/statistical area descriptions in block groups:**
    ```sql
    SELECT DISTINCT
      lsad_name
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
    LIMIT 100;
    ```

---

These queries help in understanding the data and relationships between bank locations, ZIP codes, and census block groups in Colorado. They lay the groundwork for calculating the concentration of bank locations per block group based on spatial overlaps.Query:
SELECT
  institution_name,
  branch_name,
  branch_address,
  branch_city,
  zip_code,
  state
FROM
  `bigquery-public-data.fdic_banks.locations`
WHERE
  state = 'CO'
LIMIT 100;
Answer:
institution_name,branch_name,branch_address,branch_city,zip_code,state
"Armed Forces Bank, National Association",FORT CARSON FACILITY,"6384 Wetzel Avenue, Building 1512",Fort Carson,80913,CO
The Huntington National Bank,BRIARGATE CROSSING BRANCH,9265 North Union Boulevard,Colorado Springs,80920,CO
The Huntington National Bank,HANDCOCK & ACADEMY BRANCH,2930 South Academy Boulevard,Colorado Springs,80916,CO
The Huntington National Bank,CENTENNIAL & FILLMORE BRANCH,3290 Centennial Boulevard,Colorado Springs,80907,CO
U.S. Bank National Association,GARDEN OF THE GODS BRANCH,1125 Garden Of The Gods Road,Colorado Springs,80907,CO
U.S. Bank National Association,CHAPEL HILLS BRANCH,1520 Briargate Boulevard,Colorado Springs,80920,CO
U.S. Bank National Association,POWER AND STETSON KING SOOPERS BRANC,6030 Stetson Hills Boulevard,Colorado Springs,80922,CO
"Wells Fargo Bank, National Association",COLORADO SPRINGS SOUTH BRANCH,1800 South Nevada Avenue,Colorado Springs,80905,CO
"Wells Fargo Bank, National Association",GARDEN OF THE GODS BRANCH,560 Garden Of The Gods Road,Colorado Springs,80907,CO
Integrity Bank & Trust,Integrity Bank & Trust,1275 Village Ridge Pt,Monument,80132,CO
"UMB Bank, National Association",VALLEY BANKING CENTER,502 Security Boulevard,Colorado Springs,80911,CO
Adams Bank & Trust,Interquest Branch,"1359 Interquest Parkway, Suite 150",Colorado Springs,80921,CO
ANB Bank,CASCADE BRANCH,15 West Cimarron Street,Colorado Springs,80903,CO
Independent Bank,COLORADO SPRINGS BROADMOOR,155 Lake Avenue,Colorado Springs,80906,CO
Independent Bank,DOWNTOWN BANK,501 South Tejon,Colorado Springs,80903,CO
Independent Bank,CASCADE AVENUE LPO,"104 S. Cascade Avenue, Suite 2014",Colorado Springs,80903,CO
The Central Trust Bank,COLORADO SPRINGS BRANCH,5278 North Nevada Avenue Suite 100,Colorado Springs,80918,CO
5Star Bank,5 STAR BANK - DOWNTOWN BRANCH,"Peterson Air Force Base, 455 W. Paine St., Bldg. 1485",Colorado Springs,80914,CO
"JPMorgan Chase Bank, National Association",NORWOOD BANKING CENTER BRANCH,7390 Duryea Drive,Colorado Springs,80923,CO
"JPMorgan Chase Bank, National Association",Briargate and Academy Branch,7685 N Academy Blvd,Colorado Springs,80920,CO
"JPMorgan Chase Bank, National Association",SPRINGS RANCH BRANCH,3750 Bloomington Street,Colorado Springs,80922,CO
"JPMorgan Chase Bank, National Association",MERIDIAN & WOODMAN BNKING CTR BRANCH,11555 Meridian Market View,Falcon,80831,CO
"JPMorgan Chase Bank, National Association",UPTOWN COLORADO SPRINGS BRANCH,402 North Tejon Street,Colorado Springs,80903,CO
"Wells Fargo Bank, National Association",BRIARGATE BRANCH,8620 North Union Boulevard,Colorado Springs,80920,CO
Query:
SELECT DISTINCT
     zip_code
   FROM
     `bigquery-public-data.fdic_banks.locations`
   WHERE
     state = 'CO'
   LIMIT 100
Answer:
zip_code
80913
80920
80916
80907
80922
80905
80132
80911
80921
80903
80906
80918
80914
80923
80831
80915
80909
80817
80904
80932
80808
80924
80917
80933
80840
81301
81302
81303
81122
81137
80521
80524
80528
80525
80549
80517
80538
80513
80537
80526
80534
80751
80728
81501
81506
81505
81520
81521
81624
81504
81526
81503
81401
81425
81422
80723
80654
80701
81427
81432
80424
80443
80435
80498
80863
80813
81101
81147
81073
81090
81057
81054
81201
81211
80810
80825
81140
81063
81252
81416
81413
81419
81415
81428
81324
80446
80442
80447
80482
80459
81230
81224
81235
81089
80480
81036
80807
80815
80836
80461
Query:
SELECT
     zip_code,
     state_code,
     zip_code_geom
   FROM
     `bigquery-public-data.geo_us_boundaries.zip_codes`
   WHERE
     state_code = 'CO'
   LIMIT 100
Answer:
Too long, hard cut:
zip_code,state_code,zip_code_geom
81610,CO,"POLYGON((-109.051091 40.436404, -109.051128 40.436417, -109.051079 40.434582, -109.051071 40.434381, -109.051002 40.431667, -109.050934 40.42901, -109.050927 40.428784, -109.050925 40.428698, -109.05091 40.428183, -109.050891 40.418882, -109.050883 40.415013, -109.050883 40.414928, -109.050883 40.414675, -109.050883 40.414591, -109.050879 40.412969, -109.05087 40.408105, -109.050867 40.406484, -109.05086 40.403827, -109.050845 40.395858, -109.05084 40.393203, -109.050839 40.392971, -109.050838 40.392282, -109.05084 40.392053, -109.050835 40.390109, -109.050823 40.384776, -109.050821 40.38428, -109.050817 40.382338, -109.050811 40.379751, -109.050801 40.374967, -109.050832 40.371996, -109.05086 40.369412, -109.050859 40.369143, -109.05086 40.368339, -109.050861 40.368071, -109.050861 40.367419, -109.050864 40.365465, -109.050865 40.364814, -109.050866 40.363124, -109.050872 40.358054, -109.050874 40.356365, -109.050874 40.355506, -109.050877 40.352932, -109.050879 40.352074, -109.05088 40.349797, -109.050885 40.342968, -109.050886 40.34154, -109.050887 40.340692, -109.050887 40.339791, -109.05089 40.337092, -109.050891 40.336192, -109.050892 40.334625, -109.050895 40.329928, -109.050896 40.328928, -109.050896 40.328917, -109.050896 40.328897, -109.050897 40.328872, -109.050897 40.328858, -109.050896 40.328768, -109.050897 40.328362, -109.050897 40.328347, -109.050898 40.328102, -109.050898 40.327552, -109.0509 40.327006, -109.050901 40.326477, -109.050903 40.325993, -109.050902 40.325971, -109.050902 40.325864, -109.050905 40.325577, -109.050904 40.325434, -109.050903 40.3251, -109.050905 40.324177, -109.050906 40.323269, -109.050907 40.32235, -109.050908 40.321458, -109.050909 40.320536, -109.050909 40.319628, -109.05091 40.318741, -109.050911 40.317836, -109.050912 40.316917, -109.050913 40.316015, -109.050913 40.315401, -109.050913 40.315366, -109.050914 40.314698, -109.050915 40.313999, -109.050915 40.313296, -109.050916 40.312612, -109.050917 40.31194, -109.050917 40.311254, -109.050918 40.310573, -109.050919 40.309896, -109.050921 40.309228, -109.050921 40.308844, -109.050923 40.307783, -109.050926 40.306575, -109.050928 40.305403, -109.05093 40.304208, -109.050932 40.303034, -109.050937 40.301357, -109.05094 40.300362, -109.05094 40.300331, -109.05094 40.300301, -109.05094 40.300258, -109.050943 40.299522, -109.050947 40.297854, -109.050948 40.297745, -109.050952 40.296528, -109.050963 40.292775, -109.050972 40.289857, -109.050972 40.289747, -109.050973 40.289584, -109.050981 40.287535, -109.05098 40.287416, -109.050991 40.284916, -109.050991 40.283903, -109.050994 40.283049, -109.050999 40.28018, -109.051 40.279681, -109.051 40.279658, -109.051002 40.278567, -109.051013 40.273833, -109.051012 40.273537, -109.051015 40.273323, -109.051013 40.273044, -109.051016 40.272151, -109.051024 40.271834, -109.051017 40.271723, -109.050931 40.271645, -109.050931 40.271431, -109.05102 40.269895, -109.051021 40.269193, -109.051026 40.267495, -109.051023 40.266581, -109.05102 40.266181, -109.051001 40.262593, -109.050983 40.259276, -109.050974 40.257675, -109.050974 40.257629, -109.050966 40.256344, -109.050957 40.254665, -109.050951 40.253756, -109.050946 40.252838, -109.050943 40.2524, -109.050945 40.251964, -109.050945 40.251921, -109.050945 40.25189, -109.050947 40.251521, -109.050948 40.251315, -109.05095 40.25065, -109.050958 40.248283, -109.050964 40.246498, -109.050973 40.243105, -109.050979 40.241903, -109.050981 40.241861, -109.050992 40.237366, -109.050977 40.233365, -109.050976 40.233107, -109.050837 40.233155, -109.050836 40.233013, -109.050975 40.232827, -109.050969 40.231111, -109.050928 40.230928, -109.050967 40.230886, -109.050965 40.230169, -109.050949 40.222647, -109.05045 40.222666, -109.049328 40.222682, -109.048955 40.222687, -109.048264 40.222696, -109.046194 40.222724, -109.045504 40.222734, -109.044716 40.222713, -109.042354 40.22265, -109.041705 40.222633, -109.041567 40.222633, -109.038834 40.222629, -109.030636 40.222618, -109.027904 40.222615, -109.027718 40.222615, -109.026941 40.222716, -109.025789 40.22271, -109.019425 40.222681, -109.01774 40.222674, -109.017306 40.222672, -109.013907 40.222656, -109.008338 40.22263, -109.003719 40.222561, -109.000671 40.222516, -109.000324 40.222518, -109.000286 40.222518, -109.000175 40.222518, -109.000139 40.222519, -108.999914 40.222517, -108.999243 40.222519, -108.99902 40.222521, -108.997655 40.222524, -108.993017 40.222533, -108.976555 40.222566, -108.975008 40.222569, -108.969006 40.222581, -108.968026 40.222582, -108.965086 40.222587, -108.964107 40.22259, -108.963948 40.22259, -108.96347 40.222592, -108.963312 40.222593, -108.961553 40.222596, -108.956278 40.222607, -108.955381 40.222609, -108.954519 40.222611, -108.953611 40.222612, -108.950885 40.222616, -108.949979 40.22262, -108.944209 40.22263, -108.926907 40.222665, -108.92114 40.222678, -108.920938 40.222678, -108.920334 40.222678, -108.92
Query:
SELECT
     geo_id,
     blockgroup_ce,
     blockgroup_geom
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   LIMIT 100
Answer:
Too long, hard cut:
geo_id,blockgroup_ce,blockgroup_geom
080010089011,1,"POLYGON((-104.968863 39.791317, -104.968861 39.790974, -104.968622 39.790974, -104.960638 39.790979, -104.960505 39.790974, -104.960268 39.790966, -104.959612 39.791465, -104.959176 39.791795, -104.958125 39.792593, -104.956987 39.793456, -104.956327 39.793957, -104.955479 39.794601, -104.955356 39.794686, -104.95459 39.794686, -104.952983 39.794687, -104.952578 39.794691, -104.949739 39.794687, -104.949658 39.794687, -104.949601 39.794687, -104.948734 39.794679, -104.948325 39.794669, -104.947887 39.794671, -104.947434 39.794654, -104.945971 39.794601, -104.945106 39.794599, -104.944024 39.794596, -104.942863 39.794595, -104.942734 39.794586, -104.942675 39.794602, -104.942049 39.794601, -104.941702 39.794601, -104.941286 39.794601, -104.940553 39.794601, -104.940476 39.794601, -104.940479 39.793466, -104.940481 39.79279, -104.940482 39.792601, -104.940482 39.792358, -104.940483 39.792209, -104.940484 39.791919, -104.940485 39.791629, -104.940487 39.791129, -104.940487 39.791076, -104.940487 39.791002, -104.940079 39.791001, -104.939964 39.791002, -104.939882 39.790994, -104.939665 39.791602, -104.939565 39.791846, -104.939274 39.792568, -104.93925 39.792622, -104.939731 39.792011, -104.939296 39.793215, -104.938927 39.793634, -104.938206 39.794471, -104.937826 39.794881, -104.937736 39.794864, -104.937478 39.795165, -104.936736 39.795993, -104.936421 39.796405, -104.936249 39.796632, -104.936108 39.796773, -104.936052 39.796831, -104.935811 39.797073, -104.93572 39.797171, -104.935616 39.797285, -104.935516 39.797396, -104.935414 39.797508, -104.935334 39.797596, -104.935275 39.797661, -104.934676 39.798317, -104.934246 39.798814, -104.93349 39.79966, -104.933295 39.79989, -104.933104 39.800117, -104.932888 39.800371, -104.932745 39.80058, -104.932558 39.800867, -104.932456 39.801043, -104.932185 39.801558, -104.93206 39.801834, -104.93197 39.802049, -104.931872 39.802299, -104.931803 39.802508, -104.931677 39.802961, -104.931815 39.803248, -104.93178 39.803421, -104.931717 39.803886, -104.931704 39.804086, -104.931708 39.805509, -104.931913 39.805509, -104.933451 39.805512, -104.934879 39.805515, -104.93708 39.805497, -104.937442 39.805491, -104.937542 39.805485, -104.937609 39.805476, -104.937658 39.805465, -104.9377 39.805447, -104.937741 39.805423, -104.93777 39.8054, -104.937822 39.805348, -104.937842 39.805318, -104.937862 39.805276, -104.937873 39.805241, -104.937885 39.804515, -104.937866 39.804291, -104.937853 39.804067, -104.937853 39.803865, -104.938608 39.804439, -104.93939 39.805021, -104.940357 39.805754, -104.940726 39.806044, -104.940884 39.806053, -104.941185 39.806245, -104.94123 39.806427, -104.941178 39.806479, -104.941125 39.806522, -104.94095 39.806647, -104.940191 39.807222, -104.94006 39.807356, -104.940035 39.807388, -104.940003 39.807471, -104.939999 39.80757, -104.940009 39.807613, -104.94003 39.807667, -104.940055 39.807711, -104.940166 39.807855, -104.94034 39.808076, -104.940393 39.808176, -104.940427 39.808286, -104.940441 39.808421, -104.940456 39.809797, -104.940445 39.811365, -104.940423 39.812723, -104.940415 39.816381, -104.940417 39.817159, -104.940416 39.817856, -104.940416 39.818348, -104.940408 39.820014, -104.940398 39.820438, -104.940388 39.822008, -104.940387 39.823615, -104.940181 39.823614, -104.939772 39.823612, -104.939662 39.823611, -104.939119 39.823609, -104.938637 39.823608, -104.93857 39.823607, -104.938013 39.823604, -104.936216 39.823613, -104.936049 39.823613, -104.935088 39.823613, -104.935001 39.823614, -104.934955 39.823614, -104.934799 39.823614, -104.933868 39.823615, -104.932713 39.823613, -104.932676 39.823613, -104.931509 39.823626, -104.930347 39.82362, -104.930178 39.823548, -104.930084 39.823508, -104.930111 39.823465, -104.930383 39.823034, -104.93022 39.822973, -104.929931 39.823435, -104.929814 39.82362, -104.929374 39.824323, -104.928951 39.825006, -104.928649 39.825482, -104.927881 39.826698, -104.927636 39.8271, -104.927554 39.827235, -104.92712 39.827976, -104.926639 39.828899, -104.926402 39.829415, -104.926042 39.830273, -104.925853 39.830749, -104.925799 39.830884, -104.925898 39.830883, -104.926001 39.830883, -104.926607 39.830879, -104.928978 39.830871, -104.93136 39.830874, -104.931488 39.830874, -104.932091 39.830874, -104.93286 39.830874, -104.932989 39.830874, -104.933436 39.830875, -104.933498 39.830875, -104.933873 39.830875, -104.933954 39.830875, -104.935148 39.830867, -104.935215 39.830866, -104.936245 39.830865, -104.936832 39.830867, -104.938217 39.83086, -104.938361 39.830859, -104.938742 39.830858, -104.93892 39.830858, -104.939 39.830857, -104.93912 39.830857, -104.939214 39.830858, -104.939798 39.830864, -104.940367 39.830861, -104.94048 39.830861, -104.940777 39.83086, -104.941467 39.830859, -104.941874 39.830862, -104.942606 39.830873, -104.942949 39.83088, -104.944611 39.83088, -104.944742 39.83088, -104.944933 39.830881, -104.945403 39.830868, -104.945683 39
Query:
SELECT DISTINCT
     state_fips_code
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   LIMIT 100
Answer:
state_fips_code
08
Query:
SELECT
     geo_id,
     area_land_meters
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
   LIMIT 100
Answer:
geo_id,area_land_meters
080010089011,6362241
080010093251,1287314
080010085451,729291
080010085261,5303216
080010085481,1244440
080010092061,1295355
080010081001,2695015
080010085501,678027
080010091031,1574941
080010094101,1384324
080010085341,858369
080010096061,974868
080010602001,1167117
080010094081,3815938
080010150001,3188348
080010085291,1273581
080010085231,14822474
080010600001,16531242
080010085331,1199768
080010085241,983834
080010082001,918845
080010096081,528151
080010085061,438783
080010085371,11972043
080010093201,1269332
080010085411,36314275
080010088021,5813423
080010085351,15324196
080010097511,1880296
080010084021,1730915904
080010086031,1862820
080010083081,3109704
080010094011,1690226
080010085361,7255394
080010085391,12476751
080010085441,2608402
080010085401,13074273
080010612001,10613359
080010092041,1259929
080010083531,77606503
080010086041,1502294
080010085511,8739314
080010084011,477831641
080010601001,3318758
080010083091,10819573
080019887001,67545120
080039600001,289292770
080039601001,91868200
080039602001,10166947
080050056121,2564752
080050056251,602718
080050065011,1681545
080050820001,1545434
080050071061,163765074
080050049511,157730
080050862001,726327
080050056231,2485929
080050056271,1189541
080050068541,8440936
080050056241,1998744
080050067051,5057809
080050067121,2589155
080050056201,426621
080050858001,975972
080050056221,3100537
080050060001,1771406
080050056211,1167421
080050056111,1474530
080050055521,1551589
080050056191,2128913
080050071031,165400293
080050071011,192632341
080050067081,904463
080050055531,1405887
080050067041,1221300
080050056361,5113457
080079404001,607252571
080079742001,56162360
080079743001,661107701
080079744001,1339185197
080099647001,661515845
080119667001,3376823501
080130128001,5790132
080130609001,3333356
080130130031,4229652
080130127091,9706908
080130132051,4192987
080130125011,3197023
080130127101,5033978
080130132011,58546097
080130132121,4262108
Query:
SELECT
     b.institution_name,
     b.branch_name,
     b.zip_code,
     z.zip_code_geom
   FROM
     `bigquery-public-data.fdic_banks.locations` AS b
   JOIN
     `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
   ON
     b.zip_code = z.zip_code
   WHERE
     b.state = 'CO'
     AND z.state_code = 'CO'
   LIMIT 100
Answer:
Too long, hard cut:
institution_name,branch_name,zip_code,zip_code_geom
The Bank of Denver,The Bank of Denver,80218,"POLYGON((-104.979144 39.716875, -104.979149 39.716515, -104.978927 39.716518, -104.978712 39.71652, -104.978264 39.716526, -104.978043 39.71653, -104.977816 39.716528, -104.97747 39.716525, -104.977137 39.716527, -104.976911 39.716529, -104.976679 39.716529, -104.97633 39.716529, -104.975983 39.716529, -104.975751 39.716529, -104.975517 39.716529, -104.97511 39.71653, -104.974816 39.716531, -104.974583 39.716533, -104.974344 39.716532, -104.973962 39.716531, -104.973629 39.716531, -104.973391 39.716531, -104.973391 39.716761, -104.973394 39.717452, -104.973395 39.717683, -104.973362 39.717785, -104.973264 39.718092, -104.973232 39.718195, -104.973235 39.718236, -104.973244 39.718359, -104.973248 39.718401, -104.97307 39.71836, -104.972954 39.718334, -104.972539 39.718235, -104.972362 39.718193, -104.972106 39.718132, -104.971852 39.718075, -104.971774 39.718061, -104.971551 39.718003, -104.971413 39.717983, -104.971326 39.717961, -104.971209 39.717917, -104.970983 39.717853, -104.970895 39.717799, -104.970751 39.717735, -104.970587 39.717699, -104.970334 39.717608, -104.970136 39.717528, -104.97009 39.7175, -104.97002 39.717447, -104.969865 39.717347, -104.969791 39.717293, -104.969772 39.717276, -104.969721 39.717229, -104.969215 39.716716, -104.969145 39.716655, -104.969078 39.716607, -104.96899 39.716569, -104.968905 39.716514, -104.968793 39.716412, -104.968714 39.716318, -104.968491 39.716081, -104.968459 39.716035, -104.968344 39.715895, -104.968196 39.715736, -104.968038 39.715593, -104.967971 39.715527, -104.967567 39.715204, -104.967398 39.715113, -104.967292 39.715047, -104.967162 39.714956, -104.967014 39.714866, -104.966788 39.71475, -104.966675 39.714683, -104.966366 39.714468, -104.966309 39.714424, -104.966243 39.714382, -104.966151 39.714333, -104.966056 39.714288, -104.96596 39.714253, -104.965875 39.714233, -104.965596 39.71421, -104.965507 39.714195, -104.965313 39.714136, -104.96525 39.71413, -104.965176 39.714135, -104.964839 39.714216, -104.964743 39.714243, -104.964601 39.714297, -104.964516 39.714335, -104.964384 39.714404, -104.964043 39.714607, -104.963891 39.714634, -104.963827 39.714661, -104.963709 39.714723, -104.963465 39.714777, -104.963376 39.714808, -104.963319 39.71484, -104.963198 39.714933, -104.96312 39.715001, -104.963024 39.715063, -104.962956 39.715082, -104.962788 39.715121, -104.962634 39.715157, -104.962471 39.715184, -104.962291 39.715227, -104.962081 39.715287, -104.9619 39.715349, -104.961588 39.715432, -104.961361 39.715475, -104.96105 39.715494, -104.960848 39.715518, -104.960473 39.715546, -104.960335 39.715562, -104.960207 39.715572, -104.960066 39.715607, -104.959914 39.715548, -104.959458 39.715371, -104.959307 39.715312, -104.959307 39.71538, -104.959308 39.715587, -104.959309 39.715656, -104.959309 39.715794, -104.959311 39.716073, -104.959311 39.716209, -104.959312 39.716348, -104.959313 39.716655, -104.95932 39.718186, -104.964563 39.718176, -104.964566 39.718344, -104.963356 39.718343, -104.963364 39.720964, -104.963699 39.720963, -104.964037 39.720963, -104.964041 39.721632, -104.964044 39.721968, -104.963904 39.72197, -104.963697 39.721975, -104.963518 39.722007, -104.963492 39.722023, -104.963376 39.722101, -104.963269 39.722331, -104.963276 39.722421, -104.963287 39.722538, -104.963305 39.722746, -104.963316 39.722818, -104.963418 39.723005, -104.96346 39.723169, -104.963465 39.723421, -104.963473 39.723766, -104.963473 39.723919, -104.963474 39.724096, -104.963466 39.724327, -104.963456 39.724378, -104.963453 39.724395, -104.963413 39.724526, -104.963423 39.725533, -104.96365 39.725602, -104.964806 39.725598, -104.964806 39.725685, -104.964808 39.725899, -104.964815 39.726804, -104.964815 39.726895, -104.964818 39.727106, -104.964817 39.727145, -104.964814 39.727265, -104.964814 39.727305, -104.965025 39.727304, -104.965658 39.727304, -104.96587 39.727304, -104.965872 39.727661, -104.965878 39.728735, -104.965881 39.729093, -104.965846 39.729247, -104.965832 39.729315, -104.965732 39.729455, -104.965564 39.729616, -104.965547 39.729634, -104.965457 39.729732, -104.965247 39.729829, -104.965234 39.729836, -104.965003 39.729994, -104.964746 39.730255, -104.96473 39.730282, -104.964619 39.730484, -104.964635 39.730528, -104.964683 39.73066, -104.9647 39.730705, -104.964658 39.731255, -104.964532 39.732905, -104.964491 39.733456, -104.964486 39.733491, -104.964472 39.733599, -104.964468 39.733635, -104.964465 39.73366, -104.964446 39.733922, -104.964433 39.734105, -104.964445 39.734418, -104.964504 39.734727, -104.96452 39.734779, -104.964608 39.735054, -104.96451 39.735053, -104.964219 39.735053, -104.964122 39.735053, -104.964093 39.735053, -104.964111 39.736155, -104.964115 39.736581, -104.964122 39.73682, -104.964514 39.73682, -104.964773 39.73682, -104.964772 39.737135, -104.964771 39.737225, -104.964768 39.738081, -104.964768 39.738397, -104.964509
Query:
SELECT
     zip_code,
     COUNT(*) AS bank_count
   FROM
     `bigquery-public-data.fdic_banks.locations`
   WHERE
     state = 'CO'
   GROUP BY
     zip_code
   ORDER BY
     bank_count DESC
   LIMIT 100
Answer:
zip_code,bank_count
80111,33
80202,31
80501,30
80206,30
80112,24
80903,24
80634,24
80525,24
80302,20
80920,18
80134,16
81301,15
80537,15
80301,14
80012,14
80401,13
81501,13
80601,13
80524,13
80918,12
80016,12
80222,12
80020,12
80226,11
81611,11
81401,11
80550,10
80104,10
80122,10
80538,10
80015,10
80021,10
80211,10
80123,10
81003,9
80124,9
80228,9
80921,9
81505,9
81212,9
80234,9
80011,9
80906,9
80002,9
80127,8
81008,8
80027,8
81101,8
80203,8
80631,8
80013,8
80126,8
81601,8
80022,8
81321,8
81005,8
80129,8
80229,8
80439,8
80487,8
80233,7
80207,7
81082,7
80528,7
80907,7
81620,7
80909,7
80224,7
81147,7
80227,7
81416,7
80030,7
80108,7
80110,7
81632,7
80751,7
80026,7
80033,6
80504,6
81623,6
81052,6
81657,6
80701,6
81050,6
81621,6
80120,6
80246,6
80014,6
80915,6
80807,6
80231,6
81007,6
80424,6
80521,6
80005,5
80214,5
80007,5
80723,5
80241,5
80443,5
Query:
SELECT
     b.geo_id,
     b.blockgroup_geom
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
   JOIN
     `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
   ON
     ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
   WHERE
     z.zip_code = '80202'
     AND z.state_code = 'CO'
   LIMIT 100
Answer:
Too long, hard cut:
geo_id,blockgroup_geom
080310027011,"POLYGON((-104.987409 39.738667, -104.987413 39.738431, -104.987409 39.738114, -104.987397 39.737165, -104.987393 39.736849, -104.98714 39.736848, -104.986381 39.736847, -104.986129 39.736847, -104.985874 39.736845, -104.985111 39.736842, -104.984857 39.736841, -104.984609 39.736841, -104.983866 39.736841, -104.983619 39.736842, -104.983503 39.736878, -104.983359 39.736878, -104.982566 39.736883, -104.982302 39.736885, -104.982061 39.736884, -104.981663 39.736883, -104.981338 39.736883, -104.981097 39.736883, -104.980853 39.736881, -104.980123 39.736878, -104.97988 39.736877, -104.979885 39.737186, -104.9799 39.738116, -104.979905 39.738426, -104.979906 39.738745, -104.979909 39.739701, -104.97991 39.740021, -104.980148 39.740022, -104.980492 39.740023, -104.980863 39.740025, -104.981102 39.740026, -104.981346 39.740025, -104.98171 39.740024, -104.982081 39.740024, -104.982327 39.740024, -104.982578 39.740025, -104.982963 39.740028, -104.983332 39.740038, -104.983584 39.740045, -104.984856 39.740059, -104.986135 39.740062, -104.986258 39.740113, -104.986377 39.740112, -104.987136 39.740107, -104.987389 39.740106, -104.98739 39.740012, -104.987393 39.739712, -104.987394 39.739614, -104.987397 39.739377, -104.987409 39.738667))"
080310017013,"POLYGON((-105.000919 39.751906, -105.000025 39.751218, -104.999857 39.751085, -104.999353 39.750686, -104.999186 39.750554, -104.998942 39.750736, -104.998213 39.751284, -104.997971 39.751468, -104.997726 39.751657, -104.996992 39.752226, -104.996748 39.752416, -104.996502 39.752601, -104.995766 39.753158, -104.995521 39.753344, -104.995271 39.753541, -104.994521 39.754135, -104.994272 39.754334, -104.994443 39.754462, -104.994958 39.754849, -104.99513 39.754978, -104.995148 39.754992, -104.995316 39.755119, -104.99582 39.755501, -104.995989 39.755629, -104.996246 39.755442, -104.997019 39.754881, -104.997277 39.754695, -104.997517 39.754512, -104.99824 39.753964, -104.998481 39.753782, -104.998731 39.753596, -104.999483 39.753039, -104.999734 39.752854, -105.000919 39.751906))"
080310026011,"POLYGON((-104.987416 39.744885, -104.987419 39.744833, -104.987393 39.743949, -104.98739 39.743836, -104.987387 39.74374, -104.987378 39.743452, -104.987376 39.743357, -104.987264 39.743292, -104.987137 39.74329, -104.98637 39.743281, -104.986115 39.743279, -104.985861 39.743278, -104.985099 39.743276, -104.984846 39.743276, -104.984594 39.743275, -104.983839 39.743272, -104.983588 39.743271, -104.983338 39.743271, -104.982588 39.743271, -104.982338 39.743271, -104.982087 39.743271, -104.981334 39.743271, -104.981084 39.743271, -104.980845 39.743269, -104.98013 39.743264, -104.979892 39.743263, -104.979889 39.743582, -104.979882 39.744541, -104.97988 39.744861, -104.97988 39.745124, -104.979883 39.745914, -104.979884 39.746178, -104.980123 39.746178, -104.98084 39.74618, -104.98108 39.746181, -104.981078 39.746453, -104.981074 39.747272, -104.981074 39.747545, -104.981321 39.747546, -104.981678 39.747547, -104.982062 39.747549, -104.98231 39.74755, -104.982565 39.74755, -104.983124 39.747551, -104.983333 39.747551, -104.98359 39.747551, -104.983659 39.747552, -104.983866 39.747556, -104.983936 39.747558, -104.984119 39.747557, -104.984217 39.747557, -104.984668 39.747548, -104.98476 39.747547, -104.984851 39.747548, -104.984938 39.747545, -104.984996 39.747545, -104.985091 39.747547, -104.985376 39.747565, -104.985431 39.74757, -104.985479 39.747576, -104.985574 39.747596, -104.985676 39.747526, -104.986105 39.747526, -104.987201 39.747522, -104.987386 39.747345, -104.9874 39.747357, -104.987397 39.746973, -104.987408 39.746192, -104.987407 39.745966, -104.987407 39.745931, -104.987407 39.745466, -104.987407 39.745288, -104.987407 39.745062, -104.987416 39.744885))"
080310017012,"POLYGON((-105.008186 39.754791, -105.008183 39.754717, -105.008173 39.754646, -105.008167 39.754545, -105.008153 39.754495, -105.008108 39.754328, -105.008039 39.754158, -105.007983 39.753996, -105.007948 39.75386, -105.007917 39.7537, -105.007896 39.75364, -105.007889 39.75362, -105.007859 39.75356, -105.007827 39.753508, -105.007771 39.753445, -105.007723 39.753403, -105.007609 39.753305, -105.007409 39.753152, -105.007387 39.753136, -105.006968 39.75279, -105.006503 39.752445, -105.00646 39.752412, -105.006445 39.752401, -105.006144 39.752165, -105.006123 39.752148, -105.00606 39.7521, -105.00604 39.752084, -105.005991 39.752046, -105.00596 39.752021, -105.005929 39.751997, -105.00585 39.751934, -105.005411 39.751586, -105.005279 39.751487, -105.005086 39.751342, -105.004947 39.751238, -105.004774 39.751107, -105.004537 39.750921, -105.004443 39.750848, -105.0044 39.750817, -105.00436 39.750788, -105.004243 39.750701, -105.004204 39.750673, -105.004027 39.750544, -105.003784 39.750366, -105.003521 39.750132, -105.003404 39.750028, -105.003355 39.749991, -105.003207 39.750131, -105.002988 39.750295, -105.002334 39.750789, -105.002116 39.750954, -105.000919 39.751906, -1
Query:
SELECT
     b.geo_id,
     z.zip_code,
     ST_AREA(ST_INTERSECTION(b.blockgroup_geom, z.zip_code_geom)) AS overlap_area
   FROM
     `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
   JOIN
     `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
   ON
     ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
   WHERE
     z.state_code = 'CO'
   LIMIT 100
Answer:
geo_id,zip_code,overlap_area
080010092061,80233,141256.03311582826
080010092061,80229,1163802.489742706
080010094081,80234,0.0
080010094081,80020,0.0
080010094081,80031,3862115.666012861
080039600001,81144,48291880.17351292
080039600001,81125,15741620.912798611
080039600001,81146,87815580.50845598
080039600001,81136,65523649.98947624
080039600001,81101,72027112.89723413
080050060001,80110,1820808.4140619503
080050060001,80113,0.0
080050055521,80110,1586076.1119503216
080050055521,80236,25988.300771663893
080299650001,81419,330072297.4320261
080299650001,81410,13131571.73190844
080299650001,81624,0.0
080299650001,81413,14675034.725899218
080299650001,81416,0.0
080299650001,81428,0.0
080299650001,81418,0.0
080559609001,81055,38808641.891346976
080590098401,80004,576380.4580578145
080590159001,80465,0.0
080590159001,80235,2578905.8867011587
080590159001,80127,0.0
080590159001,80123,0.0
080590159001,80227,0.0
080590112021,80214,0.0
080590112021,80215,0.0
080590112021,80226,1295586.092010205
080590108011,80033,0.0
080590108011,80215,2326342.7448091987
080590108011,80401,0.0
080590098311,80003,0.0
080590098311,80031,1145294.5698660596
080590098311,80021,195878.62800308762
080690018081,80526,0.0
080690018081,80538,12929187.48457149
080690018081,80537,0.0
080690026001,80513,15918020.802041417
080690026001,80504,1344658.9217887078
080690026001,80503,0.0
080690025031,80535,52082553.77984268
080690025031,80512,0.0
080690025031,80524,76639499.4659474
080690025031,80612,46062547.28915688
080690025031,80549,423832949.5699172
080690025031,80536,238062215.8191296
080690028011,80515,6728289.383182158
080690028011,80517,8631369.65797736
080690020071,80537,887476.0788965261
080839694001,81321,4056206.6737186
081010031031,81001,0.0
081010031031,81003,0.0
081010031031,81006,7502604.052806813
081159683001,80737,581951382.8060559
081159683001,80734,0.0
081159683001,80731,23878768.987261157
081159683001,80749,401356301.9685954
081159683001,80726,0.0
081159683001,80721,0.0
081159683001,80728,0.0
081159683001,80744,271756215.3307316
081230019021,80603,26341484.39766938
081230019021,80642,55759515.397632845
Query:
SELECT
      b.geo_id,
      z.zip_code,
      ST_AREA(ST_INTERSECTION(b.blockgroup_geom, z.zip_code_geom)) / ST_AREA(b.blockgroup_geom) AS overlap_ratio
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
    JOIN
      `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
    ON
      ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
    WHERE
      z.state_code = 'CO'
    LIMIT 100
Answer:
geo_id,zip_code,overlap_ratio
080050071061,80107,0.0
080050071061,80015,0.0
080050071061,80018,0.0
080050071061,80137,0.0
080050071061,80138,0.0
080050071061,80016,0.30443196580237775
080050071061,80102,0.6955680341975702
080050067041,80210,0.0
080050067041,80237,0.0
080050067041,80222,0.0
080050067041,80121,0.0
080050067041,80113,0.9999999999951285
080350140091,80134,1.0
080410076011,80908,0.5653780443944734
080410076011,80927,0.0
080410076011,80831,0.43462195560561345
080410076011,80923,0.0
080410076011,80106,0.0
080559606001,81089,1.0
080590120461,80123,1.0
080590098151,80005,0.9998399755917295
080590098151,80021,0.00016002440825378572
080590605001,80020,0.0
080590605001,80021,0.9999999999999079
080590102061,80005,1.0
080959676001,80734,0.7618626052326029
080959676001,80737,0.0
080959676001,80721,0.23813739476742868
080959676001,80744,0.0
080959676001,80758,0.0
080010095531,80229,0.0
080010095531,80221,0.9999999999999835
080010085491,80233,0.0
080010085491,80241,0.0
080010085491,80602,0.9999999999998357
080050872001,80224,0.3284200240559386
080050872001,80231,0.6715799759440632
080050067131,80112,0.016097226054111003
080050067131,80111,0.9839027739459013
080130126051,80301,0.0
080130126051,80303,1.000000000000037
080219749001,81140,0.0
080219749001,81151,1.0
080310068131,80014,0.0
080310068131,80231,1.000000000000563
080310034011,80218,0.0
080310034011,80206,0.0
080310034011,80209,1.0000000000561784
080310042011,80207,0.9999999999994972
080310042011,80220,0.0
080310157001,80236,0.9729621549377707
080310157001,80219,0.027037845062389817
080350139041,80134,0.014812106827165028
080350139041,80138,0.9851878931721524
080410070001,80908,0.0
080410070001,80921,0.0
080410070001,80840,0.0
080410070001,80920,1.0000000000000517
080410030001,80903,0.0
080410030001,80906,0.022307461146906158
080410030001,80905,0.9776925388530138
080410030001,80904,0.0
080410021011,80909,1.0
080410039061,80840,0.0
080410039061,80920,1.0
080410074001,80118,0.0
080410074001,80132,0.9999999999998154
Query:
SELECT
      b.geo_id,
      COUNT(l.branch_name) AS bank_count
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
    JOIN
      `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
    ON
      ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
    JOIN
      `bigquery-public-data.fdic_banks.locations` AS l
    ON
      l.zip_code = z.zip_code
      AND l.state = 'CO'
    WHERE
      z.state_code = 'CO'
    GROUP BY
      b.geo_id
    LIMIT 100
Answer:
geo_id,bank_count
080010085481,9
080130606001,22
080350139111,19
080410045111,15
080590098371,14
080599800001,36
080619601001,19
080690016011,37
080759659001,7
081059770001,10
080010085381,8
080010094061,7
080010093071,13
080010094111,16
080050826001,3
080050823001,11
080050848001,10
080050077041,18
080050852001,22
080140312001,30
080149802001,23
080310040051,17
080310083061,3
080310032021,35
080310083051,3
080310050021,9
080310046021,5
080310009041,1
080350141281,16
080410037091,12
080410002021,12
080459520021,5
080459517021,8
080519637001,5
080590604001,16
080770011021,2
080839693001,8
081010022001,1
081010009041,4
080010096062,4
080010085332,15
080050056342,30
080050056292,42
080459518022,16
080590105032,9
080690013012,13
080990001002,7
080010096032,11
080050068552,69
080310032022,35
080310007022,1
080310036012,4
080310014032,19
080410029002,12
080770011012,2
081010010002,4
080010085293,21
080010085453,9
080299651003,7
080590120453,23
080870001003,7
080930001003,12
080010080003,4
080130607003,8
080140306003,21
080310083053,3
080310041013,11
080410045063,6
080590107013,11
081010026003,8
081230022053,10
080279701004,2
080050056114,8
080310068144,6
080350144064,2
080410060004,8
080439786004,9
080459516004,8
080870007004,5
080010083535,9
080010085075,12
080010085265,9
080310036025,4
080519638005,3
080590120395,8
080010085371,21
080010088021,8
080010086031,17
080010601001,30
080050056221,21
080130132051,17
080370007021,6
080410075001,32
080439782001,11
080590120601,13
080590098241,10
080590098361,14
080690025011,13
080690016051,44
080690023001,20
Query:
SELECT
      bg.zip_code,
      SUM(bg.bank_count) / COUNT(DISTINCT bg.geo_id) AS bank_concentration
    FROM
      (
        SELECT
          b.geo_id,
          z.zip_code,
          COUNT(l.branch_name) AS bank_count
        FROM
          `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
        JOIN
          `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
        ON
          ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
        LEFT JOIN
          `bigquery-public-data.fdic_banks.locations` AS l
        ON
          l.zip_code = z.zip_code
          AND l.state = 'CO'
        WHERE
          z.state_code = 'CO'
        GROUP BY
          b.geo_id,
          z.zip_code
      ) AS bg
    GROUP BY
      bg.zip_code
    ORDER BY
      bank_concentration DESC
    LIMIT 100
Answer:
zip_code,bank_concentration
80111,33.0
80202,31.0
80501,30.0
80206,30.0
80634,24.0
80112,24.0
80525,24.0
80903,24.0
80302,20.0
80920,18.0
80134,16.0
81301,15.0
80537,15.0
80301,14.0
80012,14.0
80401,13.0
80601,13.0
80524,13.0
81501,13.0
80016,12.0
80222,12.0
80020,12.0
80918,12.0
81611,11.0
80226,11.0
81401,11.0
80015,10.0
80550,10.0
80122,10.0
80538,10.0
80104,10.0
80211,10.0
80021,10.0
80123,10.0
80234,9.0
80906,9.0
80002,9.0
81003,9.0
81505,9.0
80011,9.0
80921,9.0
80228,9.0
81212,9.0
80124,9.0
81321,8.0
81008,8.0
81601,8.0
80631,8.0
80129,8.0
80022,8.0
80027,8.0
81101,8.0
80439,8.0
80013,8.0
81005,8.0
80229,8.0
80203,8.0
80487,8.0
80126,8.0
80127,8.0
80224,7.0
80233,7.0
80907,7.0
80207,7.0
80026,7.0
81416,7.0
81082,7.0
80030,7.0
81147,7.0
80108,7.0
80528,7.0
80110,7.0
81632,7.0
80227,7.0
80751,7.0
81620,7.0
80909,7.0
80701,6.0
80504,6.0
80246,6.0
80807,6.0
81050,6.0
80424,6.0
81007,6.0
80521,6.0
81657,6.0
80014,6.0
81623,6.0
81052,6.0
81621,6.0
80120,6.0
80231,6.0
80033,6.0
80915,6.0
80113,5.0
80723,5.0
80433,5.0
80219,5.0
80218,5.0
80005,5.0
Query:
SELECT DISTINCT
      state_code,
      state_fips_code
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100
Answer:
state_code,state_fips_code
CO,08
Query:
SELECT DISTINCT
      zip_code,
      functional_status
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100
Answer:
zip_code,functional_status
81610,S
81027,S
80218,S
81144,S
80015,S
81226,S
80294,S
81235,S
80013,S
80535,S
80229,S
81055,S
80212,S
80742,S
80758,S
81654,S
81033,S
80820,S
80459,S
80920,S
80601,S
80538,S
81241,S
80831,S
80203,S
80205,S
80440,S
80021,S
80454,S
80644,S
81242,S
80110,S
80723,S
81041,S
81426,S
80620,S
80526,S
81504,S
80005,S
81657,S
80513,S
80230,S
80304,S
80221,S
81121,S
80455,S
80424,S
80106,S
80816,S
81615,S
81137,S
80524,S
81082,S
81084,S
80134,S
81335,S
80801,S
80135,S
80449,S
80109,S
80612,S
80482,S
80137,S
80120,S
80528,S
80236,S
81501,S
80906,S
81418,S
81232,S
80530,S
80802,S
81624,S
80809,S
80922,S
80825,S
80204,S
80520,S
81523,S
80024,S
80652,S
80504,S
80804,S
80736,S
80231,S
80624,S
80432,S
80026,S
81071,S
81130,S
80207,S
80927,S
81253,S
81004,S
80112,S
80904,S
80438,S
81640,S
80546,S
81128,S
Query:
SELECT DISTINCT
      zip_code,
      county
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100
Answer:
zip_code,county
81610,Moffat County
81027,Las Animas County
80218,Denver County
81144,Rio Grande County
80015,"Arapahoe County, Adams County, Arapahoe County, Douglas County"
81226,Fremont County
80294,Denver County
81235,Hinsdale County
80013,"Adams County, Arapahoe County, Douglas County"
80535,Larimer County
80229,"Adams County, Weld County, Adams County"
81055,Huerfano County
80212,"Jefferson County, Denver County, Adams County"
80742,Weld County
80758,Yuma County
81654,Pitkin County
81033,Crowley County
80820,Park County
80459,Grand County
80920,El Paso County
80601,"Adams County, Weld County, Adams County"
80538,"Larimer County, Larimer County, Weld County"
81241,Gunnison County
80831,El Paso County
80203,Denver County
80205,Denver County
80440,Park County
80021,"Adams County, Jefferson County, Broomfield County"
80454,Jefferson County
80644,Weld County
81242,Chaffee County
80110,"Denver County, Arapahoe County, Arapahoe County, Douglas County, Jefferson County"
80723,Morgan County
81041,Prowers County
81426,San Miguel County
80620,Weld County
80526,Larimer County
81504,Mesa County
80005,"Adams County, Jefferson County"
81657,Eagle County
80513,"Weld County, Larimer County, Weld County"
80230,Denver County
80304,Boulder County
80221,"Denver County, Adams County, Weld County, Adams County, Adams County, Jefferson County"
81121,Archuleta County
80455,Boulder County
80424,Summit County
80106,"El Paso County, Elbert County"
80816,Teller County
81615,Pitkin County
81137,"La Plata County, San Juan County, Archuleta County"
80524,"Larimer County, Weld County"
81082,Las Animas County
81084,Baca County
80134,Douglas County
81335,Montezuma
80801,Washington
80135,Douglas County
80449,Park
80109,Douglas County
80612,Weld
80482,Grand County
80137,"Adams County, Arapahoe County, Adams County, Arapahoe County, Douglas County"
80120,"Arapahoe County, Douglas County, Arapahoe County, Douglas County, Jefferson County"
80528,"Larimer County, Larimer County, Weld County"
80236,"Denver County, Arapahoe County"
81501,Mesa County
80906,El Paso County
81418,Delta County
81232,
80530,Weld County
80802,Cheyenne
81624,Mesa County
80809,"El Paso County, El Paso County, Teller County"
80922,El Paso County
80825,Cheyenne County
80204,Denver County
80520,Weld County
81523,Mesa
80024,Adams County
80652,Weld
80504,"Weld County, Boulder County, Weld County, Boulder County"
80804,Lincoln County
80736,Logan County
80231,"Denver County, Adams County, Arapahoe County, Douglas County"
80624,Weld
80432,Park
80026,"Boulder County, Weld County, Boulder County"
81071,Kiowa County
Query:
SELECT
      zip_code,
      ST_AREA(zip_code_geom) AS area_meters
    FROM
      `bigquery-public-data.geo_us_boundaries.zip_codes`
    WHERE
      state_code = 'CO'
    LIMIT 100
Answer:
zip_code,area_meters
81610,803922339.2096646
81027,1603568261.225964
80218,4132408.375291279
81144,732787523.9827209
80015,37648673.18475815
81226,213717689.34895796
80294,15443.154771979707
81235,1399498013.7456834
80013,36174621.9947797
80535,114889328.4483473
80229,35079870.13072035
81055,666456966.2109804
80212,10332623.73986801
80742,1153486416.0006454
80758,1797671534.5882936
81654,229317666.48037755
81033,837342.7255962265
80820,765745035.065434
80459,1514700512.899586
80920,32699884.126805704
80601,71133825.01669435
80538,292204172.12505877
81241,52639644.58849215
80831,491538522.4707144
80203,2776423.9122466757
80205,11930825.988476401
80440,687720781.133277
80021,48701992.05060018
80454,11054279.214061378
80644,416332001.3847022
81242,5721721.724412766
80110,16823212.85584419
80723,751511920.5284646
81041,1189895529.3877463
81426,43798373.990922876
80620,17296514.71406093
80526,103999584.97029957
81504,29488909.48795909
80005,29814361.525391117
81657,288312198.12838244
80513,179228837.94030917
80230,6436523.061141231
80304,23717138.589239176
80221,24102923.18962938
81121,121181274.32681262
80455,89862182.87557161
80424,326844545.5102536
80106,455105119.4502262
80816,482038996.6126729
81615,66399298.04798712
81137,675091995.2586471
80524,353553390.1447639
81082,1552838532.7454312
81084,628579846.9018514
80134,146016985.82479683
81335,70198712.64251223
80801,401391409.49837136
80135,856226479.0297672
80449,1557833615.5861938
80109,68254567.83983938
80612,420875139.12548023
80482,335865540.56268495
80137,272021483.2980798
80120,22419512.481585342
80528,52991655.12494056
80236,8314870.887043324
81501,21114060.21083813
80906,121122686.03110282
81418,53371052.180538125
81232,4947456.774599835
80530,4912757.721958659
80802,1036672752.5226264
81624,1448088155.8210258
80809,131619929.20149417
80922,15485757.230253695
80825,1712398341.7294083
80204,14385906.869100865
80520,1042614.7636448124
81523,855180266.3287809
80024,105775.16164518277
80652,485117451.3696893
80504,266423402.33268538
80804,870484796.875308
80736,294497521.1902669
80231,12222702.232793234
80624,81875998.51582573
80432,283253058.3267621
80026,58819275.373623826
81071,1476113238.1356487
81130,2463434342.7965274
80207,11815284.057686727
Query:
SELECT DISTINCT
      mtfcc_feature_class_code
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
    LIMIT 100
Answer:
mtfcc_feature_class_code
G5030
Query:
SELECT DISTINCT
      institution_name
    FROM
      `bigquery-public-data.fdic_banks.locations`
    WHERE
      state = 'CO'
    LIMIT 100
Answer:
institution_name
"Armed Forces Bank, National Association"
The Huntington National Bank
U.S. Bank National Association
"Wells Fargo Bank, National Association"
Integrity Bank & Trust
"UMB Bank, National Association"
Adams Bank & Trust
ANB Bank
Independent Bank
The Central Trust Bank
5Star Bank
"JPMorgan Chase Bank, National Association"
InBank
FirstBank
Kirkpatrick Bank
Bank of Colorado
KeyBank National Association
"Zions Bancorporation, N.A."
"Bank of America, National Association"
Pikes Peak National Bank
The First National Bank of Las Animas
Waypoint Bank
"Academy Bank, National Association"
NBH Bank
Farmers State Bank of Calhan
American Bank of Commerce
The State Bank
Herring Bank
"PNC Bank, National Association"
First Interstate Bank
United Business Bank
"TBK BANK, SSB"
The Pueblo Bank and Trust Company
Stockmens Bank
Glacier Bank
Rocky Mountain Bank & Trust
Riverstone Bank
Farmers & Stockmens Bank
The Eastern Colorado Bank
Four Corners Community Bank
First Southwest Bank
Alpine Bank
First National Bank of Omaha
Bank of Estes Park
Points West Community Bank
Mountain Valley Bank
First Western Trust Bank
Farmers Bank
Bank of the West
First National Bank
Gateway First Bank
Equitable Savings and Loan Association
Verus Bank of Commerce
The First National Bank of Fleming
First FarmBank
Grand Valley Bank
Bank of England
Oakstar Bank
Home Loan State Bank
Timberline Bank
The Citizens State Bank of Ouray
The Farmers State Bank of Brush
High Plains Bank
"Golden Belt Bank, FSA"
FMS Bank
Wray State Bank
Park State Bank & Trust
"RG Bank, A Savings and Loan Association"
Frontier Bank
Alamosa State Bank
San Luis Valley Federal Bank
Community State Bank
McClave State Bank
High Country Bank
The Bank of Burlington
First Colorado National Bank
HTLF Bank
Gunnison Savings and Loan Association
The Gunnison Bank and Trust Company
The First National Bank in Trinidad
"GNBank, National Association"
MNB BANK
The First National Bank of Hugo
Century Savings and Loan Association
Del Norte Bank
The Dolores State Bank
"First National Bank, Cortez"
Fowler State Bank
The Colorado Bank and Trust Company of La Junta
First Pioneer National Bank
"Sunflower Bank, National Association"
FNB Bank
Commerce Bank
First-Citizens Bank & Trust Company
Mountain View Bank of Commerce
North Valley Bank
"BOKF, National Association"
CoreFirst Bank & Trust
"Morgan Stanley Private Bank, National Association"
"United Fidelity Bank, fsb"
Query:
SELECT DISTINCT
      lsad_name
    FROM
      `bigquery-public-data.geo_census_blockgroups.blockgroups_08`
    LIMIT 100
Answer:
lsad_name
Block Group 1
Block Group 2
Block Group 3
Block Group 4
Block Group 5
Block Group 6
Block Group 7
Block Group 8
End Exploring Related Columns
Task: Which Colorado zip code has the highest concentration of bank locations per block group, based on the overlap between zip codes and block groups?

Please answer only one complete SQL in bigquery dialect in ```sql``` format.
Usage example: ```sql
SELECT `column_name` FROM `database.schema.table` WHERE ... ``` (Replace `database`, `schema`, and `table` with actual names. Enclose column names and table identifiers with backticks.)
Follow the answer format like: ```csv
Zip_Code,Concentration
80202,5.5
(Attention: answer in one row)
```

The Colorado ZIP code **80202**, located in downtown Denver, has the highest concentration of bank locations per block group, based on the overlap between zip codes and block groups..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'bigquery-public-data': {'census_utility': ['fips_class_code', 'fips_codes_all', 'fips_codes_states', 'functional_status_codes', 'lsad_codes', 'mtfcc_feature_class_codes'], 'fda_food': ['food_enforcement', 'food_events'], 'fdic_banks': ['institutions', 'locations'], 'geo_census_blockgroups': ['blockgroups_01', 'blockgroups_02', 'blockgroups_04', 'blockgroups_05', 'blockgroups_06', 'blockgroups_08', 'blockgroups_09', 'blockgroups_10', 'blockgroups_11', 'blockgroups_12', 'blockgroups_13', 'blockgroups_15', 'blockgroups_16', 'blockgroups_17', 'blockgroups_18', 'blockgroups_19', 'blockgroups_20', 'blockgroups_21', 'blockgroups_22', 'blockgroups_23', 'blockgroups_24', 'blockgroups_25', 'blockgroups_26', 'blockgroups_27', 'blockgroups_28', 'blockgroups_29', 'blockgroups_30', 'blockgroups_31', 'blockgroups_32', 'blockgroups_33', 'blockgroups_34', 'blockgroups_35', 'blockgroups_36', 'blockgroups_37', 'blockgroups_38', 'blockgroups_39', 'blockgroups_40', 'blockgroups_41', 'blockgroups_42', 'blockgroups_44', 'blockgroups_45', 'blockgroups_46', 'blockgroups_47', 'blockgroups_48', 'blockgroups_49', 'blockgroups_50', 'blockgroups_51', 'blockgroups_53', 'blockgroups_54', 'blockgroups_55', 'blockgroups_56', 'blockgroups_60', 'blockgroups_66', 'blockgroups_69', 'blockgroups_72', 'blockgroups_78', 'us_blockgroups_national'], 'geo_us_boundaries': ['adjacent_counties', 'adjacent_states', 'cbsa', 'cnecta', 'coastline', 'congress_district_115', 'congress_district_116', 'counties', 'csa', 'metropolitan_divisions', 'national_outline', 'nws_forecast_regions', 'railways', 'states', 'urban_areas', 'zip_codes']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-24 03:33:29 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 03:33:29 - root - INFO - ```sql
WITH bank_counts_per_zip AS (
    SELECT
        l.zip_code,
        COUNT(*) AS bank_count
    FROM
        `bigquery-public-data.fdic_banks.locations` l
    WHERE
        l.state = 'CO'
    GROUP BY
        l.zip_code
),
blockgroup_zip_overlap AS (
    SELECT
        b.geo_id,
        z.zip_code,
        ST_AREA(ST_INTERSECTION(b.blockgroup_geom, z.zip_code_geom)) / ST_AREA(b.blockgroup_geom) AS overlap_ratio
    FROM
        `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
        JOIN `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
        ON ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
    WHERE
        z.state_code = 'CO'
),
adjusted_bank_counts AS (
    SELECT
        b.geo_id,
        b.zip_code,
        bc.bank_count,
        b.overlap_ratio,
        bc.bank_count * b.overlap_ratio AS adjusted_bank_count
    FROM
        blockgroup_zip_overlap b
        JOIN bank_counts_per_zip bc
        ON b.zip_code = bc.zip_code
)
SELECT
    zip_code,
    SUM(adjusted_bank_count) / COUNT(DISTINCT geo_id) AS bank_concentration
FROM
    adjusted_bank_counts
GROUP BY
    zip_code
ORDER BY
    bank_concentration DESC
LIMIT 1;
```
2025-01-24 03:33:34 - root - INFO - itercount: 1
2025-01-24 03:33:34 - root - INFO - 0
2025-01-24 03:33:34 - root - INFO - results: 
zip_code,bank_concentration
80501,18.687389148481007


2025-01-24 03:33:34 - root - INFO - Please check the answer again by reviewing Which Colorado zip code has the highest concentration of bank locations per block group, based on the overlap between zip codes and block groups?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
Zip_Code,Concentration
80202,5.5
(Attention: answer in one row)
```

The Colorado ZIP code **80202**, located in downtown Denver, has the highest concentration of bank locations per block group, based on the overlap between zip codes and block groups. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
zip_code,bank_concentration
80501,18.687389148481007
Current sql:
WITH bank_counts_per_zip AS (
    SELECT
        l.zip_code,
        COUNT(*) AS bank_count
    FROM
        `bigquery-public-data.fdic_banks.locations` l
    WHERE
        l.state = 'CO'
    GROUP BY
        l.zip_code
),
blockgroup_zip_overlap AS (
    SELECT
        b.geo_id,
        z.zip_code,
        ST_AREA(ST_INTERSECTION(b.blockgroup_geom, z.zip_code_geom)) / ST_AREA(b.blockgroup_geom) AS overlap_ratio
    FROM
        `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
        JOIN `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
        ON ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
    WHERE
        z.state_code = 'CO'
),
adjusted_bank_counts AS (
    SELECT
        b.geo_id,
        b.zip_code,
        bc.bank_count,
        b.overlap_ratio,
        bc.bank_count * b.overlap_ratio AS adjusted_bank_count
    FROM
        blockgroup_zip_overlap b
        JOIN bank_counts_per_zip bc
        ON b.zip_code = bc.zip_code
)
SELECT
    zip_code,
    SUM(adjusted_bank_count) / COUNT(DISTINCT geo_id) AS bank_concentration
FROM
    adjusted_bank_counts
GROUP BY
    zip_code
ORDER BY
    bank_concentration DESC
LIMIT 1;Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-24 03:34:37 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 03:34:37 - root - INFO - Upon reviewing the data and recalculating the bank concentration per block group based on the overlap between ZIP codes and block groups, the Colorado ZIP code with the highest concentration of bank locations per block group is **80501**.

Here is the final SQL query:

```sql
WITH bank_counts_per_zip AS (
    SELECT
        l.zip_code,
        COUNT(*) AS bank_count
    FROM
        `bigquery-public-data.fdic_banks.locations` l
    WHERE
        l.state = 'CO'
    GROUP BY
        l.zip_code
),
blockgroup_zip_overlap AS (
    SELECT
        b.geo_id,
        z.zip_code,
        ST_AREA(ST_INTERSECTION(b.blockgroup_geom, z.zip_code_geom)) / ST_AREA(b.blockgroup_geom) AS overlap_ratio
    FROM
        `bigquery-public-data.geo_census_blockgroups.blockgroups_08` AS b
        JOIN `bigquery-public-data.geo_us_boundaries.zip_codes` AS z
        ON ST_INTERSECTS(b.blockgroup_geom, z.zip_code_geom)
    WHERE
        z.state_code = 'CO'
),
adjusted_bank_counts AS (
    SELECT
        b.geo_id,
        b.zip_code,
        bc.bank_count,
        b.overlap_ratio,
        bc.bank_count * b.overlap_ratio AS adjusted_bank_count
    FROM
        blockgroup_zip_overlap b
        JOIN bank_counts_per_zip bc
        ON b.zip_code = bc.zip_code
)
SELECT
    zip_code,
    ROUND(SUM(adjusted_bank_count) / COUNT(DISTINCT geo_id), 4) AS bank_concentration
FROM
    adjusted_bank_counts
GROUP BY
    zip_code
ORDER BY
    bank_concentration DESC
LIMIT 1;
```

And the resulting output:

```csv
Zip_Code,Concentration
80501,18.6874
```

This result indicates that ZIP code **80501** has the highest concentration of bank locations per block group in Colorado when considering the overlap between ZIP codes and census block groups.
2025-01-24 03:34:43 - root - INFO - itercount: 2
2025-01-24 03:34:43 - root - INFO - 0
2025-01-24 03:34:43 - root - INFO - Total iteration counts: 2
