After comparing the SQL queries and their results, **`1result.sql`** is the correct SQL for the task.

**Reasoning:**

1. **Customer Inclusion:**
   - **`1result.sql`** selects customers from the `"customer_transactions"` table, which includes all customers who have had any transaction activity. Since the task specifies that balances should be shown for customers with transactions, this approach is appropriate.
   - **`0result.sql`** uses the `"customer_nodes"` table, potentially including customers who have never had transactions. While this includes all possible customers, it may introduce customers with zero balances throughout, which might not be necessary.
   - **`2result.sql`** also selects customers from `"customer_transactions"`, similar to **`1result.sql`**.

2. **Monthly Changes Calculation:**
   - **`1result.sql`** calculates the `"monthly_change"` by considering `"txn_type"` explicitly:
     - Deposits are added as positive amounts.
     - Withdrawals and purchases are subtracted as negative amounts.
     - Any other transaction types are ignored (treated as zero), which avoids unexpected results from unknown transaction types.
   - **`2result.sql`** treats any transaction type other than 'deposit' as a negative amount. This could incorrectly deduct amounts for transaction types that should not affect the balance negatively.
   - **`0result.sql`** handles transaction types similarly to **`1result.sql`** but may include customers without any transactions.

3. **Handling of Months with No Activity:**
   - All three SQL queries correctly generate all combinations of customers and months using a `CROSS JOIN`, ensuring that months with no transactions are included for each customer.
   - **`1result.sql`** ensures that `"monthly_change"` is set to zero for months without activity using `COALESCE`.

4. **Cumulative Balance Calculation:**
   - **`1result.sql`** computes the cumulative balance (closing balance) using a window function that sums `"monthly_change"` over time, ordered by month for each customer.
   - It uses `"month"` directly in the `ORDER BY` clause of the window function, ensuring that balances are accumulated in the correct chronological order.
   - **`0result.sql`** introduces a row number (`rn`) to order months, which is an extra step and unnecessary when months can be ordered directly.
   - **`2result.sql`** also orders by `"month"` but, due to its handling of `"txn_type"`, may introduce incorrect cumulative balances.

5. **Rounding of Amounts:**
   - **`1result.sql`** rounds the final results after summing, which minimizes cumulative rounding errors.
   - **`2result.sql`** rounds transaction amounts before summing, which can introduce inaccuracies in the cumulative totals.

**Conclusion:**

**`1result.sql`** best meets the requirements by:

- Including all relevant customers (those with transactions).
- Correctly calculating monthly changes.
- Accurately computing cumulative balances in the right order.
- Including months with no activity for each customer.
- Handling transaction types appropriately to prevent incorrect deductions.

---

Therefore, the correct SQL is:

```plaintext
1result.sql
```