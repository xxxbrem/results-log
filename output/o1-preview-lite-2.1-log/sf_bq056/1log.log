2025-01-19 22:51:51 - openai._base_client - INFO - Retrying request to /chat/completions in 0.446293 seconds
2025-01-19 22:52:32 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:52:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:52:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:52:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:52:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 22:52:33 - snowflake.connector.connection - INFO - closed
2025-01-19 22:52:34 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:53:14 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:53:14 - root - INFO - ```sql
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT DISTINCT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w1
  JOIN "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w2
    ON w1."id" < w2."id"
  JOIN "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    ON s."state_name" = 'California'
  WHERE
    ST_INTERSECTS(w1."geometry", s."state_geom")
    AND ST_INTERSECTS(w2."geometry", s."state_geom")
    AND ST_INTERSECTS(w1."geometry", w2."geometry")
    AND w1."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
    AND w2."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
    AND (
      w1."all_tags"['bridge'] IS NULL
      OR w1."all_tags"['bridge']::STRING = 'no'
    )
    AND (
      w2."all_tags"['bridge'] IS NULL
      OR w2."all_tags"['bridge']::STRING = 'no'
    )
    AND NOT EXISTS (
      SELECT 1
      FROM TABLE(FLATTEN(input => w1."nodes")) n1
      JOIN TABLE(FLATTEN(input => w2."nodes")) n2 ON n1.value = n2.value
    )
) sub;
```
2025-01-19 22:53:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:53:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:53:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:53:15 - snowflake.connector.connection - INFO - closed
2025-01-19 22:53:15 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:54:04 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:54:04 - root - INFO - ```sql
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT DISTINCT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w1
  JOIN "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w2
    ON w1."id" < w2."id"
  JOIN "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    ON s."state_name" = 'California'
  WHERE
    ST_INTERSECTS(
      ST_GEOGRAPHYFROMWKB(w1."geometry"),
      ST_GEOGRAPHYFROMWKB(s."state_geom")
    )
    AND ST_INTERSECTS(
      ST_GEOGRAPHYFROMWKB(w2."geometry"),
      ST_GEOGRAPHYFROMWKB(s."state_geom")
    )
    AND ST_INTERSECTS(
      ST_GEOGRAPHYFROMWKB(w1."geometry"),
      ST_GEOGRAPHYFROMWKB(w2."geometry")
    )
    AND w1."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
    AND w2."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
    AND (
      w1."all_tags"['bridge'] IS NULL
      OR w1."all_tags"['bridge']::STRING = 'no'
    )
    AND (
      w2."all_tags"['bridge'] IS NULL
      OR w2."all_tags"['bridge']::STRING = 'no'
    )
    AND NOT EXISTS (
      SELECT 1
      FROM TABLE(FLATTEN(input => w1."nodes")) n1
      JOIN TABLE(FLATTEN(input => w2."nodes")) n2 ON n1.value = n2.value
    )
) sub;
```
2025-01-19 22:54:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:54:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:54:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:54:05 - snowflake.connector.connection - INFO - closed
2025-01-19 22:54:05 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:54:46 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:54:46 - root - INFO - ```sql
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w1
  JOIN "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w2
    ON w1."id" < w2."id"
  CROSS JOIN "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
  WHERE
    s."state_name" = 'California'
    AND ST_INTERSECTS(
      ST_GEOGRAPHYFROMWKB(w1."geometry"),
      ST_GEOGRAPHYFROMWKB(s."state_geom")
    )
    AND ST_INTERSECTS(
      ST_GEOGRAPHYFROMWKB(w2."geometry"),
      ST_GEOGRAPHYFROMWKB(s."state_geom")
    )
    AND ST_INTERSECTS(
      ST_GEOGRAPHYFROMWKB(w1."geometry"),
      ST_GEOGRAPHYFROMWKB(w2."geometry")
    )
    AND w1."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
    AND w2."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
    AND (
      w1."all_tags"['bridge'] IS NULL
      OR w1."all_tags"['bridge']::STRING = 'no'
    )
    AND (
      w2."all_tags"['bridge'] IS NULL
      OR w2."all_tags"['bridge']::STRING = 'no'
    )
    AND ARRAY_SIZE(ARRAY_INTERSECTION(w1."nodes", w2."nodes")) = 0
) sub;
```
2025-01-19 22:54:46 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:54:46 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:54:46 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:54:48 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 22:54:48 - snowflake.connector.connection - INFO - closed
2025-01-19 22:54:48 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:56:17 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:56:17 - root - INFO - SQL:
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w1
  JOIN "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w2
    ON w1."id" < w2."id"
  CROSS JOIN "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
  WHERE
    s."state_name" = 'California'
    AND ST_INTERSECTS(
      ST_GEOGRAPHYFROMWKB(w1."geometry"),
      ST_GEOGRAPHYFROMWKB(s."state_geom")
    )
    AND ST_INTERSECTS(
      ST_GEOGRAPHYFROMWKB(w2."geometry"),
      ST_GEOGRAPHYFROMWKB(s."state_geom")
    )
    AND ST_INTERSECTS(
      ST_GEOGRAPHYFROMWKB(w1."geometry"),
      ST_GEOGRAPHYFROMWKB(w2."geometry")
    )
    AND w1."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
    AND w2."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
    AND (
      w1."all_tags"['bridge'] IS NULL
      OR w1."all_tags"['bridge']::STRING = 'no'
    )
    AND (
      w2."all_tags"['bridge'] IS NULL
      OR w2."all_tags"['bridge']::STRING = 'no'
    )
    AND ARRAY_SIZE(ARRAY_INTERSECTION(w1."nodes", w2."nodes")) = 0
) sub;
Results:
number_of_pairs
0

2025-01-19 22:56:17 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:56:17 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:56:17 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:56:18 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-19 22:56:18 - snowflake.connector.connection - INFO - closed
2025-01-19 22:56:19 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:57:07 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:57:07 - root - INFO - ```sql
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w1
  JOIN "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w2
    ON w1."id" < w2."id"
  CROSS JOIN "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
  WHERE
    s."state_name" = 'California'
    AND ST_INTERSECTS(
      ST_GEOMETRYFROMWKB(w1."geometry", 4326),
      ST_GEOMETRYFROMWKB(s."state_geom", 4326)
    )
    AND ST_INTERSECTS(
      ST_GEOMETRYFROMWKB(w2."geometry", 4326),
      ST_GEOMETRYFROMWKB(s."state_geom", 4326)
    )
    AND ST_INTERSECTS(
      ST_GEOMETRYFROMWKB(w1."geometry", 4326),
      ST_GEOMETRYFROMWKB(w2."geometry", 4326)
    )
) sub;
```
2025-01-19 22:57:07 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:57:07 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:57:07 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:00:57 - snowflake.connector.connection - INFO - closed
2025-01-19 23:00:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:01:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:01:39 - root - INFO - ```sql
SELECT w."id", w."all_tags"['highway']::STRING AS "highway_type"
FROM (
  SELECT * FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
  SAMPLE (0.1 PERCENT)
) w
LIMIT 1000;
```
2025-01-19 23:01:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:01:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:01:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:01:41 - snowflake.connector.connection - INFO - closed
2025-01-19 23:01:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:02:02 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:02:02 - root - INFO - ```sql
SELECT w."id", w."all_tags"['highway']::STRING AS "highway_type"
FROM (
  SELECT * FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
  SAMPLE (1 PERCENT)
) w
WHERE w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
LIMIT 1000;
```
2025-01-19 23:02:02 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:02:02 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:02:02 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:02:03 - snowflake.connector.connection - INFO - closed
2025-01-19 23:02:04 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:02:04 - root - INFO - SQL:
SELECT w."id", w."all_tags"['highway']::STRING AS "highway_type"
FROM (
  SELECT * FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
  SAMPLE (1 PERCENT)
) w
WHERE w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
LIMIT 1000;
Results:
001003 (42000): 01b9d346-0004-7b17-0001-11c300f0297a: SQL compilation error:
syntax error line 4 at position 12 unexpected 'PERCENT'.
2025-01-19 23:02:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:02:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:02:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:02:05 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-19 23:02:05 - snowflake.connector.connection - INFO - closed
2025-01-19 23:02:05 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:02:06 - root - INFO - SQL:
SELECT w."id", w."all_tags"['bridge']::STRING AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
WHERE w."all_tags"['bridge'] IS NULL
LIMIT 1000
Results:
Too long, hard cut:
id,bridge_tag
73165139,
75218666,
75207289,
75205347,
72995142,
73978150,
73975367,
73932029,
72983297,
79494876,
72998704,
75152196,
75279777,
75268171,
73996196,
74115282,
75230281,
75141313,
75216506,
75228571,
75204754,
75202353,
75217714,
74115373,
75204413,
73975353,
75206290,
75201368,
75235185,
73996882,
75215401,
73192060,
72957727,
79497739,
75279539,
79497792,
72961752,
79488712,
74116584,
73182731,
74114742,
75142130,
75214036,
73934663,
73996429,
73929304,
73077581,
73935017,
75229234,
74116443,
75230098,
75217729,
73975348,
75216626,
72986785,
75200768,
75217675,
75150740,
79489443,
75207292,
75279172,
75283696,
73937597,
75217094,
79497656,
74119246,
79494291,
75283649,
73069432,
79488588,
73980243,
73984601,
72969205,
73940964,
73077594,
75227779,
75147720,
73939739,
75282261,
73930775,
75217176,
73996685,
73984737,
75205433,
73072872,
73931785,
75216553,
73162713,
75283030,
73997345,
73994419,
75213787,
75227551,
75143467,
73182877,
73939773,
75146252,
73938710,
73997766,
75226673,
75214344,
74114918,
72995005,
72955462,
72961326,
75229460,
73184383,
73999931,
73986833,
75282841,
75216087,
73196783,
75204078,
75218220,
75215661,
73163439,
75234944,
74116151,
75232984,
73081100,
73197240,
75200644,
73164976,
74115550,
73975383,
73076983,
73939351,
75215924,
73179814,
73998045,
73940380,
75215290,
75202953,
73934683,
75218563,
75279128,
79497478,
75217898,
75279926,
73931093,
75207065,
75227307,
75140279,
72960370,
73180988,
74125548,
75140766,
75218317,
74115520,
73997196,
75217315,
75215909,
73932353,
75200599,
79488860,
75280457,
74120057,
74114861,
73977643,
75205025,
75200451,
75216272,
74123283,
75230318,
72989953,
75283253,
72954840,
75217501,
75148238,
72984615,
75229143,
73182356,
75284502,
75142512,
75235626,
79489609,
73995886,
75229771,
79497724,
73535851,
73995732,
75217586,
75142284,
74119381,
75233995,
75200203,
79497606,
75203239,
75213167,
75227015,
72958461,
75215459,
73963644,
73997912,
79489107,
75203011,
75201037,
73985221,
73931026,
75215169,
73939933,
75143607,
75145170,
75216088,
75230692,
75213043,
75206945,
79488208,
75216669,
75204801,
75200363,
75145524,
75200625,
72984929,
73164095,
75229906,
75216581,
79490111,
75202680,
72985955,
74113851,
74115912,
73997363,
75215574,
73079649,
75215666,
75141325,
72962542,
75230710,
73963912,
73994618,
73534440,
75284685,
72968516,
79489249,
75218258,
75217223,
75216586,
73975489,
73986196,
75217073,
73995512,
74122767,
75282447,
75230902,
75207386,
75218628,
75231297,
74116597,
73075529,
75216700,
75282851,
73190914,
75217538,
73984736,
75140544,
745915504,
745915510,
745915497,
745915511,
745915514,
745915491,
745915496,
745915488,
745915507,
745915509,
745915499,
745915524,
745915486,
745915489,
745915525,
745915479,
745915520,
745915505,
745915521,
286363110,
160134741,
160134747,
605339187,
912914876,
824266741,
824266740,
289451433,
289451432,
196220541,
196220537,
196220538,
196220517,
196220504,
196220479,
196220549,
196220522,
196220529,
196220526,
196220555,
196220567,
196220505,
196220501,
196220552,
196220524,
196220565,
196220520,
196220548,
196220540,
196220536,
196220509,
196220502,
196220518,
196220516,
196220510,
196220534,
196220531,
196220508,
196220511,
196220564,
196220506,
196220513,
196220545,
196220561,
196220562,
196220519,
196220512,
196220532,
196220530,
196220514,
196220507,
196220566,
196220539,
193221962,
204474337,
204485212,
908557838,
162593974,
833970710,
833970706,
833970707,
833970711,
833970709,
833970712,
833970708,
210884399,
210884395,
210884398,
210127125,
210127133,
210127131,
210127128,
210127129,
210127123,
210127132,
210127126,
778936650,
295437602,
324578516,
324578520,
324578512,
324578515,
324578518,
324578514,
324578517,
324578521,
324578513,
201347577,
201347576,
834271973,
834271972,
834271971,
201448585,
201448588,
201448587,
201448586,
201480288,
275067270,
275067273,
275067269,
202580043,
732759638,
732759637,
732759636,
732759635,
275864479,
836197924,
836197925,
836197926,
393507409,
393507410,
167492227,
167492224,
167492226,
421576128,
181678374,
181678375,
181678373,
181678376,
173215756,
675277205,
675277206,
191139196,
191139193,
202491870,
202491869,
202491871,
745963657,
745963659,
745963660,
745963658,
473636400,
473636425,
473636402,
473636390,
473636398,
473636394,
473636443,
473636404,
748861372,
748861373,
748861377,
748861378,
748861374,
748861376,
748861375,
230605385,
230605389,
230605388,
230605387,
230605390,
230605386,
226644954,
226644953,
230621848,
230621821,
230621818,
230621826,
230621808,
230621831,
230621862,
230621807,
230621890,
230621891,
230621887,
230621880,
230621840,
230621882,
230621853,
230621869,
230621817,
230621879,
230621784,
230621787,
230621852,
230621874,
230621830,
230621844,
230621798,
230621837,
230621843,
230621805,
230621845,
230621783,
230621816,
230621804,
230621790,
230621877,
230621833,
230621819,
230621838,
230621806,
230621841,
230621815,
230621875,
230621825,
230621796,
230621864,
230621889,
230621829,
230621822,
230621

2025-01-19 23:02:06 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:02:06 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:02:06 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:02:08 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:02:08 - snowflake.connector.connection - INFO - closed
2025-01-19 23:02:08 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:02:08 - root - INFO - SQL:
SELECT s."state_name", s."state_geom"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
WHERE s."state_name" = 'California'
LIMIT 1000
Results:
Too long, hard cut:
state_name,state_geom
California,"bytearray(b'\x01\x06\x00\x00\x00\x07\x00\x00\x00\x01\x03\x00\x00\x00\x01\x00\x00\x00\x88\x01\x00\x00\xcf\x1b\xb5\xc2\xf4\xdd]\xc0\x12\rR\xf0\x14\x08A@\x99\x87\xda6\x8c\xde]\xc0R\x80(\x981\tA@\xb2\xf6w\xb6G\xdf]\xc0\xdc\x80\xcf\x0f#\nA@\x8b\x05L\xe0\xd6\xdf]\xc0LJA\xb7\x97\nA@""q\x8f\xa5\x0f\xe0]\xc0\xf4\xd3\x7f\xd6\xfc\nA@w\x85>X\xc6\xe0]\xc0\xf8\xbdM\x7f\xf6\x0bA@\xbf\xa41ZG\xe1]\xc0r1\x06\xd6q\x0cA@\xe9\xf7\x8b\xd9\x92\xe1]\xc0\x11i\x1b\x7f\xa2\x0cA@\x1e\xe7\xc4\x1e\xda\xe1]\xc0\xa7\xb1\xbd\x16\xf4\x0cA@\xe2""\xf7tu\xe2]\xc0_\xc9U,~\rA@\xed\xbf\\\x8b\x16\xe3]\xc0H\x08V\xd5\xcb\rA@#\xfc\x19\xde\xac\xe3]\xc0\xac\x9f\xfe\xb3\xe6\rA@\xc9\xca/\x831\xe4]\xc0WA\x0ct\xed\rA@\x10\x07\tQ\xbe\xe4]\xc0\xde\xa2\x93\xa5\xd6\rA@\xec\x89\xae\x0b?\xe5]\xc0\x00\x12M\xa0\x88\rA@u_\xcelW\xe5]\xc0\xa6*mq\x8d\rA@1\x9dd\xab\xcb\xe5]\xc0\x7f\x9b\xc5\x8b\x85\rA@lHj\xa1d\xe6]\xc0\x0b\xc7\xf3\x19P\rA@\xa6\xbe\xba*P\xe7]\xc0\x83\x16\x120\xba\x0cA@\xcd\xd3G\xe0\x0f\xe8]\xc0\xfa\xb7\xcb~\xdd\x0bA@\xaf\xd7\x82\xde\x1b\xe8]\xc0\xec~\x15\xe0\xbb\x0bA@i\x8e\xac\xfc2\xe8]\xc0r\xb9\xc1P\x87\x0bA@i\xfc\xc2+I\xe8]\xc0\xe3\x0f\x06\x9e{\x0bA@\x1a\x1e\x89\x97\xa7\xe8]\xc0!\xc2\xbf\x08\x1a\x0bA@?$\n-\xeb\xe8]\xc0\x0b~\x1bb\xbc\nA@ \xd9\xearJ\xe9]\xc0\xcep\x03>?\nA@\xef\xc9\xc3B\xad\xe9]\xc06Y\xa3\x1e\xa2\tA@\xbf\x88\xb6c\xea\xe9]\xc0zq\xe2\xab\x1d\tA@(\x9f\x1e\xdb2\xea]\xc0\xc1\xa1\xb7xx\tA@\xaf\xdeo\xb4\xe3\xea]\xc0\x19\xac8\xd5Z\nA@A_z\xfbs\xeb]\xc0\x91|%\x90\x12\x0bA@S\xf7\x8f\x85\xe8\xeb]\xc0h\xc4\xcc>\x8f\x0bA@\x839\x08:Z\xec]\xc0\x87\xf2\x05-$\x0cA@\xc8\xff\xe4\xef\xde\xec]\xc0\x11\xb4\xc9\xe1\x93\x0cA@6\xae\x7f\xd7g\xed]\xc0gur\x86\xe2\x0cA@\xdb\xc9nf\xf4\xed]\xc0\x18/\xdd$\x06\rA@\xd51uWv\xee]\xc0\xd2\x9f\xfdH\x11\rA@%\x13~\xa9\x9f\xee]\xc0\xf9\xed\xeb\xc09\rA@\x99\xcc?\xfa&\xef]\xc0\xebJ\xcbH\xbd\rA@\x98\x90\x9d\xb7\xb1\xef]\xc0\x03\xc9;\x872\x0eA@\xaf\xba\x9c\x12\x10\xf0]\xc0""\x0fD\x16i\x0eA@\x97x\xce\x16\x10\xf0]\xc0P8\xbb\xb5L\x0eA@_\xa1\x0f\x96\xb1\xf0]\xc0\xa0\xfc\xdd;j\x0eA@\xeed\xfe\xd17\xf1]\xc0\x0f\x02\xf2%T\x0eA@Q\xf9\xd7\xf2\xca\xf1]\xc0tI\xd5v\x13\x0eA@\x99\xa42\xc5\x1c\xf2]\xc0W\xc6\x86n\xf6\rA@\xb2\xa1\x9b\xfd\x81\xf2]\xc0Y\x868\xd6\xc5\rA@\xb2q\x8b\xf9\xb9\xf2]\xc0V\x0e-\xb2\x9d\rA@\x8f\x05\x13\x7f\x14\xf3]\xc0\xe5\x01,\xf2\xeb\rA@\xb3\x9e\xe8\xba\xf0\xf3]\xc0\n\x85\x088\x84\x0eA@\x15L\xc3\xf0\x11\xf5]\xc0!\xfc\x8b\xa01\x0fA@\x14\x9de\x16\xa1\xf5]\xc0C\x12\xbd\x8cb\x0fA@A\xc1\xc5\x8a\x1a\xf6]\xc0n\xc2\xbd2o\x0fA@+\x96\xe9\x97\x88\xf6]\xc0r\x9c\xdb\x84{\x0fA@\xba\xc6\xf5\xef\xfa\xf6]\xc0\x04\xdb\x88\'\xbb\x0fA@Wv\xc1\xe0\x9a\xf7]\xc0\x9f\xf7\xc6\x10\x00\x10A@W\xb2c#\x10\xf8]\xc0U\xd2\x8ao(\x10A@W\xb2c#\x10\xf8]\xc0x:W\x94\x12\x10A@\x0b\x9e\xd0\xebO\xf8]\xc0p\xca\xdc|#\x10A@\xde Z+\xda\xf8]\xc0\xd6\x14\xc8\xec,\x10A@X\xb3\\6:\xf9]\xc0Q`\x01L\x19\x10A@\x8d\xa2\x95{\x81\xf9]\xc0\xee\xaa\x07\xccC\x10A@\xc9D\xd8\xf0\xf4\xf9]\xc0zIc\xb4\x8e\x10A@\x01VG\x8et\xfa]\xc0\xe4\xd1\x8d\xb0\xa8\x10A@\x81\xeb\x8a\x19\xe1\xfa]\xc0}\xeb\xc3z\xa3\x10A@\x05l\x95`q\xfb]\xc0\xae\xd7\xf4\xa0\xa0\x10A@""?\xa9\xf6\xe9\xfb]\xc04/\x87\xddw\x10A@Y\xae\xb7\xcdT\xfc]\xc0\xbb\xe8+H3\x10A@>\xc0!T\xa9\xfc]\xc0.\x84\x9c\xf7\xff\x0fA@\xc6Q\xb9\x89Z\xfd]\xc0j\xb93\x13\x0c\x0fA@!\x8f\xe0F\xca\xfd]\xc0<k\xb7]h\x0eA@%\x80)\x03\x07\xfe]\xc0""\xc6k^\xd5\rA@\xfb\xb9\xa1);\xfe]\xc0R\x05\xa3\x92:\rA@\xfb\xb7Y\xbcX\xfe]\xc0L\xd5=\xb2\xb9\x0cA@\x83\xeb\x18W\\\xfe]\xc0\xf6\x8e\x1a\x13b\x0cA@\xea\xd9:8\xd8\xfe]\xc0\xdd\x01\x9e\xb4p\x0bA@\xb6\x86R{\x11\xff]\xc0\x8en\x84EE\nA@\x18ip[[\xff]\xc0\x8e>\xe6\x03\x02\tA@\xa4\x933\x14w\xff]\xc0GG9\x98M\x08A@\\`\x1d\xc7\x0f\x00^\xc0\x10[z4\xd5\tA@\\`\x1d\xc7\x0f\x00^\xc0b\x12.\xe4\x11\nA@\xd3o\xedDI\x00^\xc0\x92[\x93nK\nA@\xe6\x05\xd8G\xa7\x00^\xc0\x97:\xc8\xeb\xc1\nA@""\xcb\x82\x89?\x01^\xc0\x9e\xa2\xeaW:\x0bA@\xbcf\x80\x0b\xb2\x01^\xc0\xfb\xfdb\xb6d\x0bA@\xad\xa4\x15\xdfP\x02^\xc0\x15\xe5\xd2\xf8\x85\x0bA@ R\x9a\xcd\xe3\x02^\xc0#i7\xfa\x98\x0bA@a\x02E,b\x03^\xc0\xf6\x1cX\x8e\x90\x0bA@\x0c}\xb0\x8c\r\x04^\xc0&\xff\x93\xbf{\x0bA@\x06\x81\x95C\x8b\x04^\xc0\xf266;R\x0bA@\xffV\xb2c#\x05^\xc0\xbb\xab\x1e0\x0f\x0bA@\xbe\x8e\xc6\xa1~\x05^\xc0\xbe1\x04\x00\xc7\nA@\x065|\x0b\xeb\x05^\xc0\x8f\xf3\xfe?N\nA@\xbf\x00\x89&P\x06^\xc0\xfa\x02z\xe1\xce\tA@\xdd\na5\x96\x06^\xc0\xc6\xdf\xf6\x04\x89\tA@D\x08V\xd5\xcb\x06^\xc0\xb3\xff\x01\xd6\xaa\tA@E\xe4\x823\xf8\x06^\xc0\xc7@\x9e]\xbe\tA@_|\xd1\x1e/\x07^\xc0\xf8\xe1 !\xca\tA@*\xd4a\x85[\x07^\xc0\x96\xb1\xa1\x9b\xfd\tA@\xf8\xcc >\xb0\x07^\xc0\xf1#~\xc5\x1a\nA@\x05X\xe4\xd7\x0f\x08^\xc0\x94\xb7#\x9c\x16\nA@\xf5\x84%\x1eP\x08^\xc0U\xc8\x95z\x16\nA@\xe2\xb04\xf0\xa3\x08^\xc0\x82L2r\x16\nA@\xadE\xd2n\xf4\x08^\xc0\x0f C\xc7\x0e\nA@\x03\xcf\xbd\x87K\t^\xc0\xd6O\xffY\xf3\tA@\x9d\xf9cZ\x9b\t^\xc03+\xdb\x87\xbc\tA@r5\xb2+-\n^\xc0\xe1\xb3up\xb0\tA@{\xdb\xda\xc2\xf3\n^\xc0\xa4\x1a\xf6{b\tA@""\xc4\x95\xb3w\x0b^\xc0-\x0f\xd2S\xe4\x08A@\xbdk\xd0\x97\xde\x0b^\xc0\xa9+\x9f\xe5y\x08A@`\x99\xb7\xea:\x0c^\xc0;\x0f\xee\xce\xda\x07A@\x81l ]l\x0c^\xc0PKs+\x84\x07A@X\x9e\xce\x15\xa5\x0c^\

2025-01-19 23:02:08 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:02:08 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:02:08 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:02:12 - snowflake.connector.cursor - INFO - Number of results in first chunk: 379
2025-01-19 23:02:13 - snowflake.connector.connection - INFO - closed
2025-01-19 23:02:13 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:02:14 - root - INFO - SQL:
SELECT w."id", w."geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
     "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
WHERE s."state_name" = 'California'
  AND ST_INTERSECTS(
        ST_GEOGRAPHYFROMWKB(w."geometry"),
        ST_GEOGRAPHYFROMWKB(s."state_geom")
      )
LIMIT 1000
Results:
Too long, hard cut:
id,geometry
173040551,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x000\xf9\x9f\xfc]\xcf]\xc0Mx\xae\x94\n\xcdA@\xe0\xa3Y4x\xcf]\xc0\x01\x7fB\x87\n\xcdA@\xbe\xa9\xa3>$\xd0]\xc0\xc6\xf6\xff\x16\t\xcdA@\x17\tm9\x97\xd0]\xc0\x91+\xf5,\x08\xcdA@\x9a[!\xac\xc6\xd0]\xc0\xcc]K\xc8\x07\xcdA@\xf9\xe1 !\xca\xd0]\xc0U\xe51\xb9\x07\xcdA@')"
173040548,"bytearray(b""\x01\x02\x00\x00\x00\r\x00\x00\x00\x05\x7f\xael\xd5\xd0]\xc0U\xe51\xb9\x07\xcdA@ \xd7<\xfd\xd6\xd0]\xc0\xd8\x95;\xd8\x07\xcdA@\xc7,{\x12\xd8\xd0]\xc0\xbb\xf2Y\x9e\x07\xcdA@\x87p\xcc\xb2\'\xd1]\xc0tF\x94\xf6\x06\xcdA@%\xcb\xeen\x8a\xd1]\xc0\\\x1ekF\x06\xcdA@\xb3\xce\xf8\xbe\xb8\xd1]\xc0\x86\xe5\xcf\xb7\x05\xcdA@\xd9\xed\xb3\xcaL\xd2]\xc0i\x00o\x81\x04\xcdA@\x04~\xe8\xdd\xb3\xd2]\xc04\xab-+\x03\xcdA@q\x1cx\xb5\xdc\xd2]\xc0\xec\x12\xd5[\x03\xcdA@\x14\xab\x06an\xd3]\xc0\xa0\xa9\xd7-\x02\xcdA@1\x84\x9c\xf7\xff\xd3]\xc0S@\xda\xff\x00\xcdA@\x1b\xbf\xf0J\x92\xd4]\xc0d\xdf\x15\xc1\xff\xccA@\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@"")"
173040547,"bytearray(b""\x01\x02\x00\x00\x00\x0b\x00\x00\x00\xc5\xe0\xabgR\xcf]\xc0\xd8-\xa7\xa9\n\xcdA@\x99\x94\'\xb5<\xcf]\xc00\x17LW\x0b\xcdA@\xf0f\xb2$\xe5\xce]\xc0*\xca\xa5\xf1\x0b\xcdA@\x1b^\xb5\xd7\xa7\xce]\xc04\x8c\xccm\x0c\xcdA@\xe7& \xdcS\xce]\xc0;\x1b\xf2\xcf\x0c\xcdA@m\xcf,\tP\xce]\xc0$\xd9#\xd4\x0c\xcdA@C\x8e\xadg\x08\xce]\xc0)\x96[Z\r\xcdA@y\xe2\x83\xe8\xda\xcd]\xc0/\xf7n\x98\r\xcdA@\xd1]\x12g\xc5\xcd]\xc0\x89\\\x15M\x0c\xcdA@\xcd\x9a\x0eS\x91\xcd]\xc0\xd1\xe68\xb7\t\xcdA@\x8a\x90_\xe4\x8a\xcd]\xc0NdA\xbc\t\xcdA@"")"
10674916,"bytearray(b'\x01\x02\x00\x00\x00\x18\x00\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@_\xab\xf3^k\xc3]\xc0@\xdd@\x81w\xe5A@d\xde\xf4xk\xc3]\xc0@,@\x80\xb1\xe5A@\x93\xbb\x19\x7fl\xc3]\xc0;\xac\xcb\x84\xba\xe6A@\xce\xbc\xc1\xbcl\xc3]\xc0vA\x8e\xf7\xf4\xe6A@\xcf\x18\xe6\x04m\xc3]\xc0\x84\x89\x9aC\xad\xe7A@\xc9\x9d-{m\xc3]\xc0rKPh\xfe\xe7A@\x04\x9f\xd5\xb8m\xc3]\xc0|\x7f\x83\xf6\xea\xe8A@:\xc9\xa0$n\xc3]\xc0\xc2\xd7|\x01b\xe9A@7\x81\xe9\xb4n\xc3]\xc0\x03\x16e\xdb\x0e\xeaA@n}\xa2\xfcn\xc3]\xc0:tz\xde\x8d\xeaA@W\xdc\x13\x7fo\xc3]\xc0T\xaf[\x04\xc6\xeaA@n\xd9\xc6Do\xc3]\xc0\x08k\xady\x9f\xebA@\xa3\x8d\xc8\x1cp\xc3]\xc0\x01\xd6O\xa4\xa0\xecA@\xd2j\xed""q\xc3]\xc0\xdbx\xc1\xf1\xc6\xedA@,\x9cI@q\xc3]\xc00\x19\xc7H\xf6\xedA@%\x83\xedqp\xc3]\xc0\xcb\xdeR\xce\x17\xeeA@\x1aQ5\xd5n\xc3]\xc0\xabO(\xfa2\xeeA@o\xcb\x91\xdfl\xc3]\xc0\x1e#4\xddF\xeeA@\xae\xb0\xcfRh\xc3]\xc0\x88\x164\x88j\xeeA@\xe0\xfe\\4d\xc3]\xc0\xa0\x08\x98\xaf\x81\xeeA@{\xfd\xa45a\xc3]\xc0\xbb\xd0\\\xa7\x91\xeeA@\xf9\xb4/E^\xc3]\xc0In\xa8s\xa0\xeeA@\xd1D\x8ecZ\xc3]\xc0\x93\xc8>\xc8\xb2\xeeA@')"
242834036,"bytearray(b'\x01\x02\x00\x00\x00$\x00\x00\x00\xf0cq\xa4X\xc3]\xc0;\xfc\x7f\xe6\xbd\xeeA@\\\xadnPV\xc3]\xc0\x14T\xf9C\xd8\xeeA@\x0b\xb2\xaf\x86U\xc3]\xc0\xd5&\xa9\xa7\xea\xeeA@\xc20`\xc9U\xc3]\xc0b\xe6\x96\xb1\xfc\xeeA@\t\xda\x897W\xc3]\xc0_\x95\xb0\xdb\x0c\xefA@\xcd.\xce\xceX\xc3]\xc0]\xba\x93\x99\x1c\xefA@%\xc7\xe7_\\\xc3]\xc0\xb7E\x99\r2\xefA@v\x15\xf7\xc4_\xc3]\xc0\xcd\xd4$xC\xefA@J\xfd\x067c\xc3]\xc0\xca\xc5\xbd\x9eT\xefA@\xf0\x1e\xfb\xb4e\xc3]\xc0\xbbB\x1f,c\xefA@A\x8aK\x9fg\xc3]\xc0\xaf\x8390o\xefA@5\x07\x08\xe6h\xc3]\xc0\xdb\x11\x98\x98x\xefA@\x82\xb5 Jj\xc3]\xc0\x87r\xa2]\x85\xefA@\xac\x8dVZk\xc3]\xc0\xb4\x9f \x0c\x97\xefA@\xc3\x87m\xe6k\xc3]\xc0\x8cr\x1fo\xa8\xefA@F\x977\x87k\xc3]\xc0\xef\xc8Xm\xfe\xefA@W\x02)\xb1k\xc3]\xc0\x9e\xb5\xdb.4\xf1A@\xd5\th""l\xc3]\xc0\x03\xd1\x932\xa9\xf1A@\xa5\x85\xcb*l\xc3]\xc0s-Z\x80\xb6\xf1A@\xe6tYLl\xc3]\xc0xADj\xda\xf1A@\x10""\x19rl\xc3]\xc0\xb3b\xb8:\x00\xf2A@5\xe1\xf2\xb3l\xc3]\xc0e\xee\x10\xb5#\xf2A@\xce\xea\xd3\xe0l\xc3]\xc0:\x16%2\xbd\xf2A@\xce\xbc\xc1\xbcl\xc3]\xc0\x0c[\x0eO\n\xf5A@\x05C\xb1pm\xc3]\xc0\xdf \x10\x9e\xbf\xf5A@7\x81\xe9\xb4n\xc3]\xc0\xfc1R\x94\xf0\xf6A@9\xf7\xb2Hn\xc3]\xc0\x0461n\xb4\xf7A@m5\xeb\x8co\xc3]\xc0x\xb1\xd5\x8a\xdb\xf8A@\xa41\xa4\xd4o\xc3]\xc0u\xee\x87\xe9\x8c\xf9A@:S\xd7\x90n\xc3]\xc0)\x07\xb3\t0\xfbA@\x03\x15\x9fLm\xc3]\xc0\xa1F|\x82\x1f\xfcA@\xcd`\x9dtl\xc3]\xc0\xcdDl\x0b*\xfdA@\x99d\xe4,l\xc3]\xc0Z\x9a\x00h9\xfdA@\xe0\x89\x0f\xa2k\xc3]\xc0\xa1\xb9\x98\xb0G\xfdA@\x99\xaf7\xd6j\xc3]\xc0\xf7\xe1\xc5gW\xfdA@:7m\xc6i\xc3]\xc0\xa1\xa6\xf1fh\xfdA@')"
184549563,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x00\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@\x19\xe4\xd3\x08""\xd5]\xc0\xa8\x02\xeey\xfe\xccA@\xf4u\xcfp9\xd5]\xc0$\x80\xf6~\xfe\xccA@\x80I*SL\xd5]\xc0\x89Eg\xf4\xfe\xccA@\x1a\x111\xcaX\xd5]\xc0\xd1\x0b\xd2\xe7\xfe\xccA@x\xb4q\xc4Z\xd5]\xc0\xe9M\xa0\xe3\xfe\xccA@')"
41501711,"bytearray(b'\x01\x02\x00\x00\x00H\x01\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@.\xfc\xe0|j\xc3]\xc0Z\xba\'\xb4Q\xe4A@\x00\x05\x17+j\xc3]\xc0\xc4B\xadi\xde\xe3A@:7m\xc6i\xc3]\xc0!\x08\x90\xa1c\xe3A@\x88\xeeY\xd7h\xc3]\xc0\xd6\xc9\x19\x8a;\xe2A@e\x18w\x83h\xc3]\xc0\xe6\x93\x15\xc3\xd5\xe1A@\x8f\xb1\xc9\xd0g\xc3]\xc0\x01\x82\xde\xc0\x89\xe1A@s\xe0\xd5rg\xc3]\xc0\xf0ne\x89\xce\xe0A@[\xcf\xb5\xd4f\xc3]\xc0(\xab3\x08\xbd\xe0A@$I\xc6 f\xc3]\xc0\x89@\x9aV\xaf\xe0A@\xf0\xc2\xd6le\xc3]\xc0\xd9b\x12\x

2025-01-19 23:02:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:02:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:02:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:02:15 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-19 23:02:15 - snowflake.connector.connection - INFO - closed
2025-01-19 23:02:15 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:03:25 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:03:25 - root - INFO - ```sql
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM (
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE 
      w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w."geometry" IS NOT NULL
    LIMIT 1000
  ) w1
  JOIN (
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE 
      w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w."geometry" IS NOT NULL
    LIMIT 1000
  ) w2
    ON w1."id" < w2."id"
  WHERE ST_INTERSECTS(
    ST_GEOGRAPHYFROMWKB(w1."geometry"),
    ST_GEOGRAPHYFROMWKB(w2."geometry")
  )
) sub;
```
2025-01-19 23:03:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:03:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:03:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:03:26 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:03:26 - snowflake.connector.connection - INFO - closed
2025-01-19 23:03:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:04:38 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:04:38 - root - INFO - SQL:
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM (
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE 
      w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w."geometry" IS NOT NULL
    LIMIT 1000
  ) w1
  JOIN (
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE 
      w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w."geometry" IS NOT NULL
    LIMIT 1000
  ) w2
    ON w1."id" < w2."id"
  WHERE ST_INTERSECTS(
    ST_GEOGRAPHYFROMWKB(w1."geometry"),
    ST_GEOGRAPHYFROMWKB(w2."geometry")
  )
) sub;
Results:
number_of_pairs
0

2025-01-19 23:04:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:04:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:04:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:04:42 - snowflake.connector.cursor - INFO - Number of results in first chunk: 240
2025-01-19 23:04:43 - snowflake.connector.connection - INFO - closed
2025-01-19 23:04:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:04:43 - root - INFO - SQL:
SELECT w."id", w."all_tags"['bridge']::STRING AS "bridge_tag", w."geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
     "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
WHERE w."all_tags"['bridge'] IS NULL
  AND s."state_name" = 'California'
  AND ST_INTERSECTS(
        ST_GEOMETRYFROMWKB(w."geometry", 4326),
        ST_GEOMETRYFROMWKB(s."state_geom", 4326)
      )
LIMIT 1000
Results:
Too long, hard cut:
id,bridge_tag,geometry
745915504,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x9e!\xc1\xf9y$^\xc0X\t\xcc\xf9\x18|A@\xaa\xb8q\x8by$^\xc0}\xf9S\x99\x18|A@\xdb\xf7\xf2Ly$^\xc0\xa0YmY\x19|A@(\x1c\xd5Dz$^\xc04-\xb12\x1a|A@\x13}\x99\x83{$^\xc0\xb9\xd5\xbd_\x16|A@?\xd4l\xd4y$^\xc0\xae\xd1\x17\xe7\x14|A@o\xb7\xc9My$^\xc0N\xc3\xa6\x84\x16|A@!E\xf8rz$^\xc05\xc3W\x85\x17|A@\x9e!\xc1\xf9y$^\xc0X\t\xcc\xf9\x18|A@')
745915510,,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00`\xd2\xce\x1f\x89$^\xc0\xa8\xd8\x98\xd7\x11|A@h<\xb6\n\x87$^\xc0z\xfe\x0f\x0b\x10|A@\x8d\xa2\x07>\x86$^\xc0,A\xeb\x86\x12|A@\x858 S\x88$^\xc0[\x1btS\x14|A@`\xd2\xce\x1f\x89$^\xc0\xa8\xd8\x98\xd7\x11|A@')"
745915497,,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00@\xc67ow$^\xc0\xcb\xe7\xcb\xc1""|A@6\xf0\xa3\x1av$^\xc0lA\xef\x8d!|A@\xd6\x01\x10wu$^\xc0\x0c\x8f\xa2s#|A@\xe1\xd7\xa3\xcbv$^\xc0\xff\xf4U\xa8$|A@@\xc67ow$^\xc0\xcb\xe7\xcb\xc1""|A@')"
745915511,,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\xb3n\xcdg\x8a$^\xc0\x88p\x82%\r|A@1N2(\x89$^\xc0\xb7\xb2\x9f \x0c|A@\x8b\xf5W\xd9\x88$^\xc0\xca1\xfe""\r|A@8V\xbdW\x88$^\xc0\x88\xe6K\xb9\x0c|A@\x1b\x9c\xd2\x0b\x88$^\xc05*p\xb2\r|A@\x80J:o\x88$^\xc0\x9b\xc1\xce\x03\x0e|A@\xd2\xbe^\x06\x88$^\xc0\x8dU\x94\\\x0f|A@\r0\x98d\x89$^\xc0\xce\x86\xa1z\x10|A@\xb3n\xcdg\x8a$^\xc0\x88p\x82%\r|A@')"
745915514,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\xde\xa8_3\x8a$^\xc0k\xd3\xd8^\x0b|A@<$\xc6|\x8a$^\xc0\xca76\x96\x0b|A@\x94\x834\xbe\x8a$^\xc0\x95l+\xac\n|A@\xdd}\xe9H\x89$^\xc0=\xf9O\x92\t|A@\xa27&\xd5\x88$^\xc0H+\x08/\x0b|A@\xfc\xc1\n\x01\x8a$^\xc0A:\x86\x11\x0c|A@\xde\xa8_3\x8a$^\xc0k\xd3\xd8^\x0b|A@')
745915491,,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00[_\xc9\xfar$^\xc0}\xf7\xd8\xa7-|A@76\x96\x0bp$^\xc0at\xd4,+|A@W;\xd4\x00o$^\xc0*\r\xeb|.|A@\xf6)\xc7dq$^\xc0\xe1\xca~\x820|A@\xaf\x91n\x95q$^\xc0\xe6\x17%\xe8/|A@flC r$^\xc0L\xdd\x95]0|A@[_\xc9\xfar$^\xc0}\xf7\xd8\xa7-|A@')"
745915496,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00q\xc6\xd5mu$^\xc04\xeer\xb6%|A@\x95F\xcc\xecs$^\xc0\xb3q\xb3.$|A@\xe2p\xe6Ws$^\xc0]m \xb8%|A@\rR\xf0\x14r$^\xc0v\x11Ko$|A@\xef\r\xcf\\q$^\xc0\xab\x1e\xd5U&|A@\xa1\xac\xce t$^\xc0\x807\x93%)|A@q\xc6\xd5mu$^\xc04\xeer\xb6%|A@')
745915488,,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\xde]\xc2\xfcp$^\xc0\x18\x04\xa0\x9bG|A@W\xf3\x1c\x91o$^\xc0\xd5\xd2\x92}F|A@cE\xb2\xecn$^\xc0\xc9z\xc5\xaeH|A@&\xba\xd3Bn$^\xc0\xc3\xbd\x8d(H|A@\xec\xbb\xc7>m$^\xc0\xdf\x82\x11\xa0K|A@\xaf\xb1KTo$^\xc0\'qVDM|A@\xde]\xc2\xfcp$^\xc0\x18\x04\xa0\x9bG|A@"")"
745915507,,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00$\x80\xf6~~$^\xc0\xa17\xcb\x1b\x16|A@8\xf4\xbbU|$^\xc0\xf6\xdf9J\x14|A@\xa8\x84\'\xf4z$^\xc0\xedl~\xb2\x18|A@\x96\x10b\x1d}$^\xc0\x99\xc4\x0f\x84\x1a|A@$\x80\xf6~~$^\xc0\xa17\xcb\x1b\x16|A@"")"
745915509,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00v\xff\xb3A\x81$^\xc0n\xaf\xbb/\x1d|A@i\x00o\x81\x84$^\xc0%S\xaa\xe9\x1f|A@z7\x16\x14\x86$^\xc0\xb7\x95\x03\xe2\x1a|A@@\xf7\x8a\x13\x84$^\xc0v\xac\xad3\x19|A@\xce\xf6\x8dT\x84$^\xc0F\x14\xa4c\x18|A@\x176^\x15\x83$^\xc0<\x9a4W\x17|A@v\xff\xb3A\x81$^\xc0n\xaf\xbb/\x1d|A@')
745915499,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x8f!\x008v$^\xc0\x90e\xc1\xc4\x1f|A@^\xdf\xe2<w$^\xc0\xc50\xcc\xae |A@px\xe6\x8aw$^\xc0%%\x98\xc5\x1f|A@\xd0\xa3\x98rt$^\xc0\x8c\xc8f\xfd\x1c|A@\xff*\xd1\xa3s$^\xc0s\x94\xcdf\x1f|A@\x9b\xa1\xa7\xb7u$^\xc0\xd7%\xf4D!|A@\x8f!\x008v$^\xc0\x90e\xc1\xc4\x1f|A@')
745915524,,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x003\xea\x10\xee\x84$^\xc0\x95\x1b\xfbH\x00|A@?\xe0\x81\x01\x84$^\xc0<2V\x9b\xff{A@\x8d!\xa5~\x83$^\xc0\xcaB*{\x01|A@\x82+4k\x84$^\xc0\x8el\xf8\'\x02|A@3\xea\x10\xee\x84$^\xc0\x95\x1b\xfbH\x00|A@"")"
745915486,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00R?\xb9\xb7l$^\xc01\xe2L]C|A@\xcaMy\x19j$^\xc0 \x978\xf2@|A@_U\x07\x8ai$^\xc0<\x06\xd0\x94B|A@N\x1b\xc4\xbdh$^\xc0\x01d\xe8\xd8A|A@\xfaM\x17\x18h$^\xc0\xba\xf3i\xbaC|A@\xac\xdbE=i$^\xc0\x84\xac]\xc9D|A@\xca\xc3B\xadi$^\xc0\xefN\xe3\x83C|A@\x1c\xa2\xc0\xf1k$^\xc0q\x83\xeb\x9bE|A@R?\xb9\xb7l$^\xc01\xe2L]C|A@')
745915489,,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\xe26dMv$^\xc0\xffK\x08\x0cH|A@\x17~p>u$^\xc0\xbdv\x1f6G|A@\x87d\xc8\xb1u$^\xc0<\xfa_\xaeE|A@\xcc\x06>\xabq$^\xc0\xf6\x11S}B|A@,@%\xf8p$^\xc0\xe3\xe2\xa8\xdcD|A@\xd6f\x08ls$^\xc0\xa6\xaa\x1a\xceF|A@\xe9\x19\xb1\x05s$^\xc0X}d)H|A@\xc5\tL\xa7u$^\xc0\xb02\xbf?J|A@\xe26dMv$^\xc0\xffK\x08\x0cH|A@')"
745915525,,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00f\x05\xd09\x89$^\xc0\xd6L\x08g\x01|A@2\x1d\x84\xca\x89$^\xc0\x83\x9c\x9cF\xff{A@,\xdcMK\x87$^\xc0=\x80E~\xfd{A@-$\x05\xbb\x86$^\xc0\x8f0\xb1\x9e\xff{A@f\x05\xd09\x89$^\xc0\xd6L\x08g\x01|A@')"
745915479,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00 \xc0}xq$^\xc0vW\xd1zS|A@\xf1

2025-01-19 23:04:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:04:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:04:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:04:45 - snowflake.connector.cursor - INFO - Number of results in first chunk: 191
2025-01-19 23:04:46 - snowflake.connector.connection - INFO - closed
2025-01-19 23:04:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:04:47 - root - INFO - SQL:
SELECT w."id", w."nodes"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
LIMIT 1000
Results:
Too long, hard cut:
id,nodes
173040551,"[
  {
    ""id"": 1838668185
  },
  {
    ""id"": 1838668181
  },
  {
    ""id"": 1838668180
  },
  {
    ""id"": 87858841
  },
  {
    ""id"": 88194718
  },
  {
    ""id"": 1838668176
  }
]"
173040548,"[
  {
    ""id"": 1838668177
  },
  {
    ""id"": 1838668178
  },
  {
    ""id"": 88623927
  },
  {
    ""id"": 88298455
  },
  {
    ""id"": 1838668175
  },
  {
    ""id"": 87919839
  },
  {
    ""id"": 88429304
  },
  {
    ""id"": 1838668174
  },
  {
    ""id"": 88474960
  },
  {
    ""id"": 88496672
  },
  {
    ""id"": 88915381
  },
  {
    ""id"": 88539904
  },
  {
    ""id"": 88954641
  }
]"
173040547,"[
  {
    ""id"": 1838668183
  },
  {
    ""id"": 1838668187
  },
  {
    ""id"": 88411534
  },
  {
    ""id"": 1838668189
  },
  {
    ""id"": 2474579817
  },
  {
    ""id"": 89411891
  },
  {
    ""id"": 88524028
  },
  {
    ""id"": 6594013791
  },
  {
    ""id"": 1838668200
  },
  {
    ""id"": 392496627
  },
  {
    ""id"": 1838668206
  }
]"
10674916,"[
  {
    ""id"": 89419435
  },
  {
    ""id"": 94555770
  },
  {
    ""id"": 94555771
  },
  {
    ""id"": 94555773
  },
  {
    ""id"": 94008743
  },
  {
    ""id"": 94555776
  },
  {
    ""id"": 94555777
  },
  {
    ""id"": 94555778
  },
  {
    ""id"": 94024064
  },
  {
    ""id"": 94555779
  },
  {
    ""id"": 94555780
  },
  {
    ""id"": 94555781
  },
  {
    ""id"": 94555784
  },
  {
    ""id"": 94555785
  },
  {
    ""id"": 94001720
  },
  {
    ""id"": 5121015985
  },
  {
    ""id"": 5121015986
  },
  {
    ""id"": 5121015987
  },
  {
    ""id"": 94555787
  },
  {
    ""id"": 94555788
  },
  {
    ""id"": 94555789
  },
  {
    ""id"": 94555790
  },
  {
    ""id"": 94555791
  },
  {
    ""id"": 94555792
  }
]"
242834036,"[
  {
    ""id"": 94555793
  },
  {
    ""id"": 94555794
  },
  {
    ""id"": 3037671617
  },
  {
    ""id"": 3037671618
  },
  {
    ""id"": 3037671620
  },
  {
    ""id"": 94555795
  },
  {
    ""id"": 94555796
  },
  {
    ""id"": 94555797
  },
  {
    ""id"": 94555798
  },
  {
    ""id"": 94555799
  },
  {
    ""id"": 94555800
  },
  {
    ""id"": 3037671622
  },
  {
    ""id"": 3037671623
  },
  {
    ""id"": 94555801
  },
  {
    ""id"": 3037671624
  },
  {
    ""id"": 94555802
  },
  {
    ""id"": 94555803
  },
  {
    ""id"": 94056505
  },
  {
    ""id"": 94555804
  },
  {
    ""id"": 94555805
  },
  {
    ""id"": 94555806
  },
  {
    ""id"": 94552771
  },
  {
    ""id"": 94555807
  },
  {
    ""id"": 94555808
  },
  {
    ""id"": 94555809
  },
  {
    ""id"": 94555810
  },
  {
    ""id"": 94555811
  },
  {
    ""id"": 94555812
  },
  {
    ""id"": 94555813
  },
  {
    ""id"": 94555814
  },
  {
    ""id"": 94555815
  },
  {
    ""id"": 94555816
  },
  {
    ""id"": 8675464814
  },
  {
    ""id"": 94031520
  },
  {
    ""id"": 94555817
  },
  {
    ""id"": 94555818
  }
]"
184549563,"[
  {
    ""id"": 88954641
  },
  {
    ""id"": 2466367062
  },
  {
    ""id"": 2466367063
  },
  {
    ""id"": 2466367064
  },
  {
    ""id"": 2466367065
  },
  {
    ""id"": 89039603
  }
]"
41501711,"[
  {
    ""id"": 89419435
  },
  {
    ""id"": 88319804
  },
  {
    ""id"": 89419434
  },
  {
    ""id"": 88319785
  },
  {
    ""id"": 89419433
  },
  {
    ""id"": 89419432
  },
  {
    ""id"": 89242729
  },
  {
    ""id"": 89419431
  },
  {
    ""id"": 89419430
  },
  {
    ""id"": 89419429
  },
  {
    ""id"": 89419428
  },
  {
    ""id"": 89419427
  },
  {
    ""id"": 89419425
  },
  {
    ""id"": 89419423
  },
  {
    ""id"": 89419421
  },
  {
    ""id"": 89419419
  },
  {
    ""id"": 89419417
  },
  {
    ""id"": 89419415
  },
  {
    ""id"": 89419412
  },
  {
    ""id"": 89419402
  },
  {
    ""id"": 89419400
  },
  {
    ""id"": 89419397
  },
  {
    ""id"": 89419394
  },
  {
    ""id"": 89419391
  },
  {
    ""id"": 89419389
  },
  {
    ""id"": 87958577
  },
  {
    ""id"": 89419386
  },
  {
    ""id"": 89419383
  },
  {
    ""id"": 89419382
  },
  {
    ""id"": 88540806
  },
  {
    ""id"": 88205040
  },
  {
    ""id"": 89419344
  },
  {
    ""id"": 89419342
  },
  {
    ""id"": 89419341
  },
  {
    ""id"": 89419339
  },
  {
    ""id"": 89419335
  },
  {
    ""id"": 89419333
  },
  {
    ""id"": 89419329
  },
  {
    ""id"": 89419326
  },
  {
    ""id"": 3977502996
  },
  {
    ""id"": 3977502995
  },
  {
    ""id"": 89419324
  },
  {
    ""id"": 88720806
  },
  {
    ""id"": 89419318
  },
  {
    ""id"": 89271860
  },
  {
    ""id"": 89419316
  },
  {
    ""id"": 89419313
  },
  {
    ""id"": 89419310
  },
  {
    ""id"": 89419308
  },
  {
    ""id"": 89419306
  },
  {
    ""id"": 89419304
  },
  {
    ""id"": 89419302
  },
  {
    ""id"": 89419300
  },
  {
    ""id"": 89419298
  },
  {
    ""id"": 88902187
  },
  {
    ""id"": 89419296
  },
  {
    ""id"": 89419294
  },
  {
    ""id"": 89419292
  },
  {
    ""id"": 89419290
  },
  {
    ""id"": 89419287
  },
  {
    ""id"": 89419285
  },
  {
    ""id"": 89419282
  },
  {
    ""id"": 89419281
  },
  {
    ""id"": 89419279
  },
  {
    ""id"": 89419277
  

2025-01-19 23:04:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:04:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:04:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:04:48 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-19 23:04:48 - snowflake.connector.connection - INFO - closed
2025-01-19 23:04:49 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:04:49 - root - INFO - SQL:
SELECT w."id",
       w."all_tags"['highway']::STRING AS "highway_type",
       w."all_tags"['bridge']::STRING AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
LIMIT 1000
Results:
Too long, hard cut:
id,highway_type,bridge_tag
173040551,,
173040548,,
173040547,,
10674916,,
242834036,,
184549563,,
41501711,,
211929584,,
196505970,,
420253598,,
306458161,,
172557065,,
10441459,,
10570561,,
329397904,,
329397905,,
614148150,,
10441460,,
167891278,,
167891286,,
10441474,,
268669674,,
988752632,,
172557067,,
854182808,,
988752631,,
988752640,,
167891268,,
432591061,,
988752635,,
988752630,,
988752634,,
988752638,,
119334084,,
115023390,,
128133647,,
215373337,,
416730752,,
211929583,,
215373338,,
527757555,,
119334044,,
27054486,,
119334050,,
922801797,,
416730770,,
119334023,,
674108455,,
674108452,,
435488138,,
435488159,,
119334087,,
10400404,,
306458163,,
306458175,,
306458178,,
10562019,,
10441397,,
115016149,,
345650208,,
306458186,,
720592801,,
720592802,,
720592803,,
306458181,,
16256056,,
117809218,,
33194954,,
184247603,,
16263509,,
261460910,,
268669675,,
268782634,,
268669673,,
268782631,,
306458158,,
306458157,,
306458159,,
306458160,,
306458155,,
306458156,,
242834035,,
420253599,,
10406392,,
215373335,,
215373336,,
172557070,,
988752636,,
432591052,,
988752639,,
178944703,,
527757553,,
115016200,,
306458184,,
160263703,,
268782632,,
268782633,,
173040552,,
173040550,,
173040549,,
42047223,,
119237663,,
119237652,,
806364008,,
172998476,,
614148157,,
614148186,,
614148189,,
614148156,,
178685971,,
178685967,,
184198340,,
178685970,,
178685966,,
178685973,,
178685974,,
178685969,,
184198337,,
178685956,,
716004770,,
716004900,,
970314297,,
835417674,,
716004764,,
970314300,,
751812640,,
716004898,,
184081688,,
716004771,,
835417673,,
970314299,,
970314298,,
184081700,,
716005664,,
186248362,,
42046405,,
184081692,,
716004901,,
42046402,,
119237655,,
716005662,,
172211747,,
172211755,,
60417032,,
253128477,,
60417191,,
435094876,,
435094874,,
184081598,,
185142210,,
106447192,,
119524714,,
184081698,,
106801230,,
751753003,,
751753002,,
184081694,,
119237654,,
184549524,,
60920112,,
844750910,,
60920183,,
844750920,,
184549516,,
60920256,,
844750906,,
844750922,,
172777678,,
64378425,,
30613315,,
435580191,,
106871218,,
33194941,,
33194942,,
106871216,,
186090924,,
206524851,,
175178755,,
206524855,,
206524854,,
41288977,,
175178758,,
614148188,,
806364007,,
614148167,,
48759000,,
614148165,,
419726772,,
48754610,,
48768739,,
36055571,,
36055569,,
173041187,,
48768736,,
48754613,,
48754623,,
48759039,,
246449638,,
117445687,,
48754621,,
117445694,,
867614403,,
867174737,,
435094863,,
10561000,,
435094864,,
60418055,,
32869993,,
435094862,,
60418057,,
32870277,,
435094866,,
188720945,,
751753004,,
60417029,,
751753005,,
867174736,,
60418170,,
435094861,,
867313404,,
867313401,,
867313403,,
32869991,,
32870280,,
60418168,,
253128480,,
60417602,,
751753009,,
66165269,,
751753008,,
60417498,,
751753007,,
184081657,,
188720933,,
184081651,,
45536127,,
106447194,,
170080273,,
184081618,,
170080277,,
185142209,,
172050957,,
106706501,,
106706503,,
106735170,,
10570562,,
115023385,,
306458174,,
306458171,,
306458173,,
171255338,,
306458166,,
306458169,,
306458172,,
306458165,,
306458170,,
778166637,,
306458162,,
27190718,,
119334077,,
346085717,,
346085707,,
184515005,,
115020617,,
306458167,,
525602185,,
525602182,,
178685962,,
178685961,,
178685963,,
178685960,,
178685964,,
178685958,,
106706502,,
106706500,,
173041190,,
806364005,,
42046404,,
42046406,,
178685957,,
178685959,,
253128478,,
32870276,,
172211751,,
435094875,,
435094873,,
172211745,,
106801329,,
106801242,,
60920245,,
844750921,,
844750911,,
232438352,,
844750907,,
844750923,,
64378435,,
64378426,,
64378423,,
64378429,,
30613302,,
30613316,,
41288907,,
175178757,,
175178756,,
41288978,,
206524852,,
206524853,,
806364006,,
48768740,,
48768738,,
173041186,,
419726773,,
48754633,,
48754628,,
48759038,,
48754625,,
48754634,,
48759043,,
106871212,,
106871211,,
253128479,,
188720938,,
60615868,,
188720941,,
32870279,,
60418175,,
32869992,,
60418167,,
60418056,,
60417598,,
172211742,,
60417031,,
435094867,,
32869990,,
106447196,,
106447193,,
172050955,,
172050956,,
306458164,,
171255346,,
115020618,,
16234409,,
186090931,,
306458185,,
16256106,,
186837200,,
16261077,,
322886707,,
210933416,,
196505960,,
60615708,,
10564867,,
184247605,,
60418461,,
346547493,,
867313400,,
60615707,,
60418479,,
60418460,,
16249605,,
210933437,,
210933402,,
210933429,,
210933415,,
322886708,,
322886709,,
33194946,,
574424565,,
210933419,,
841932509,,
44580796,,
73965789,,
175370308,,
175355315,,
72854930,,
72950236,,
72947355,,
72951344,,
72950740,,
527212979,,
857504156,,
73964711,,
329397918,,
329397919,,
73975726,,
73975239,,
75127005,,
75133252,,
75126854,,
75124656,,
75129487,,
75132484,,
75125164,,
75126666,,
75119572,,
75122001,,
75120999,,
75121771,,
75133436,,
75122590,,
75118668,,
75127336,,
75122302,,
73966595,,
73966225,,
73970011,,
73966592,,
75123472,,
73969462,,
73966393,,
73966165,,
73969363,,
73967189,,
73970989,,
73965813,,
73967411,,
73966508,,
73967834,,
73969091,,
75142119,,
75140704,,
75142576,,
75140850,,
72848399,,
72948282,,
72854282,,
7284

2025-01-19 23:04:49 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:04:49 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:04:49 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:04:51 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-19 23:04:51 - snowflake.connector.connection - INFO - closed
2025-01-19 23:04:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:05:38 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:05:38 - root - INFO - ```sql
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM (
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    LIMIT 100
  ) w1
  CROSS JOIN (
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    LIMIT 100
  ) w2
  WHERE w1."id" < w2."id"
    AND ST_INTERSECTS(
      ST_GEOMETRYFROMWKB(w1."geometry", 4326),
      ST_GEOMETRYFROMWKB(w2."geometry", 4326)
    )
) sub;
```
2025-01-19 23:05:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:05:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:05:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:05:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:05:40 - snowflake.connector.connection - INFO - closed
2025-01-19 23:05:40 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:06:48 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:06:48 - root - INFO - SQL:
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM (
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    LIMIT 100
  ) w1
  CROSS JOIN (
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    LIMIT 100
  ) w2
  WHERE w1."id" < w2."id"
    AND ST_INTERSECTS(
      ST_GEOMETRYFROMWKB(w1."geometry", 4326),
      ST_GEOMETRYFROMWKB(w2."geometry", 4326)
    )
) sub;
Results:
number_of_pairs
98

2025-01-19 23:06:48 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:06:48 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:06:48 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:06:49 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-19 23:06:49 - snowflake.connector.connection - INFO - closed
2025-01-19 23:06:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:07:27 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:07:27 - root - INFO - ```sql
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM (
    SELECT w."id", ST_GEOMETRYFROMWKB(w."geometry", 4326) AS geom
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w."geometry" IS NOT NULL
    LIMIT 100
  ) w1
  CROSS JOIN (
    SELECT w."id", ST_GEOMETRYFROMWKB(w."geometry", 4326) AS geom
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w."geometry" IS NOT NULL
    LIMIT 100
  ) w2
  WHERE w1."id" < w2."id"
    AND ST_INTERSECTS(w1.geom, w2.geom)
) sub;
```
2025-01-19 23:07:27 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:07:27 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:07:27 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:07:28 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:07:28 - snowflake.connector.connection - INFO - closed
2025-01-19 23:07:28 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:08:02 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:08:02 - root - INFO - SQL:
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM (
    SELECT w."id", ST_GEOMETRYFROMWKB(w."geometry", 4326) AS geom
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w."geometry" IS NOT NULL
    LIMIT 100
  ) w1
  CROSS JOIN (
    SELECT w."id", ST_GEOMETRYFROMWKB(w."geometry", 4326) AS geom
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w."geometry" IS NOT NULL
    LIMIT 100
  ) w2
  WHERE w1."id" < w2."id"
    AND ST_INTERSECTS(w1.geom, w2.geom)
) sub;
Results:
number_of_pairs
0

2025-01-19 23:08:02 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:08:02 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:08:02 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:08:04 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-19 23:08:04 - snowflake.connector.connection - INFO - closed
2025-01-19 23:08:04 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:08:20 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:08:20 - root - INFO - ```sql
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM (
    SELECT w."id", ST_GEOMETRYFROMWKB(w."geometry", 4326) AS geom
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."geometry" IS NOT NULL
    LIMIT 100
  ) w1
  CROSS JOIN (
    SELECT w."id", ST_GEOMETRYFROMWKB(w."geometry", 4326) AS geom
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."geometry" IS NOT NULL
    LIMIT 100
  ) w2
  WHERE w1."id" < w2."id"
    AND ST_INTERSECTS(w1.geom, w2.geom)
) sub;
```
2025-01-19 23:08:20 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:08:20 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:08:20 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:08:22 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:08:22 - snowflake.connector.connection - INFO - closed
2025-01-19 23:08:22 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:09:03 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:09:03 - root - INFO - SQL:
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM (
    SELECT w."id", ST_GEOMETRYFROMWKB(w."geometry", 4326) AS geom
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."geometry" IS NOT NULL
    LIMIT 100
  ) w1
  CROSS JOIN (
    SELECT w."id", ST_GEOMETRYFROMWKB(w."geometry", 4326) AS geom
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."geometry" IS NOT NULL
    LIMIT 100
  ) w2
  WHERE w1."id" < w2."id"
    AND ST_INTERSECTS(w1.geom, w2.geom)
) sub;
Results:
number_of_pairs
98

2025-01-19 23:09:03 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:09:03 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:09:03 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:09:05 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-19 23:09:05 - snowflake.connector.connection - INFO - closed
2025-01-19 23:09:05 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:09:05 - root - INFO - SQL:
SELECT w."id", w."geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
WHERE w."geometry" IS NOT NULL
LIMIT 100
Results:
Too long, hard cut:
id,geometry
173040551,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x000\xf9\x9f\xfc]\xcf]\xc0Mx\xae\x94\n\xcdA@\xe0\xa3Y4x\xcf]\xc0\x01\x7fB\x87\n\xcdA@\xbe\xa9\xa3>$\xd0]\xc0\xc6\xf6\xff\x16\t\xcdA@\x17\tm9\x97\xd0]\xc0\x91+\xf5,\x08\xcdA@\x9a[!\xac\xc6\xd0]\xc0\xcc]K\xc8\x07\xcdA@\xf9\xe1 !\xca\xd0]\xc0U\xe51\xb9\x07\xcdA@')"
173040548,"bytearray(b""\x01\x02\x00\x00\x00\r\x00\x00\x00\x05\x7f\xael\xd5\xd0]\xc0U\xe51\xb9\x07\xcdA@ \xd7<\xfd\xd6\xd0]\xc0\xd8\x95;\xd8\x07\xcdA@\xc7,{\x12\xd8\xd0]\xc0\xbb\xf2Y\x9e\x07\xcdA@\x87p\xcc\xb2\'\xd1]\xc0tF\x94\xf6\x06\xcdA@%\xcb\xeen\x8a\xd1]\xc0\\\x1ekF\x06\xcdA@\xb3\xce\xf8\xbe\xb8\xd1]\xc0\x86\xe5\xcf\xb7\x05\xcdA@\xd9\xed\xb3\xcaL\xd2]\xc0i\x00o\x81\x04\xcdA@\x04~\xe8\xdd\xb3\xd2]\xc04\xab-+\x03\xcdA@q\x1cx\xb5\xdc\xd2]\xc0\xec\x12\xd5[\x03\xcdA@\x14\xab\x06an\xd3]\xc0\xa0\xa9\xd7-\x02\xcdA@1\x84\x9c\xf7\xff\xd3]\xc0S@\xda\xff\x00\xcdA@\x1b\xbf\xf0J\x92\xd4]\xc0d\xdf\x15\xc1\xff\xccA@\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@"")"
173040547,"bytearray(b""\x01\x02\x00\x00\x00\x0b\x00\x00\x00\xc5\xe0\xabgR\xcf]\xc0\xd8-\xa7\xa9\n\xcdA@\x99\x94\'\xb5<\xcf]\xc00\x17LW\x0b\xcdA@\xf0f\xb2$\xe5\xce]\xc0*\xca\xa5\xf1\x0b\xcdA@\x1b^\xb5\xd7\xa7\xce]\xc04\x8c\xccm\x0c\xcdA@\xe7& \xdcS\xce]\xc0;\x1b\xf2\xcf\x0c\xcdA@m\xcf,\tP\xce]\xc0$\xd9#\xd4\x0c\xcdA@C\x8e\xadg\x08\xce]\xc0)\x96[Z\r\xcdA@y\xe2\x83\xe8\xda\xcd]\xc0/\xf7n\x98\r\xcdA@\xd1]\x12g\xc5\xcd]\xc0\x89\\\x15M\x0c\xcdA@\xcd\x9a\x0eS\x91\xcd]\xc0\xd1\xe68\xb7\t\xcdA@\x8a\x90_\xe4\x8a\xcd]\xc0NdA\xbc\t\xcdA@"")"
10674916,"bytearray(b'\x01\x02\x00\x00\x00\x18\x00\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@_\xab\xf3^k\xc3]\xc0@\xdd@\x81w\xe5A@d\xde\xf4xk\xc3]\xc0@,@\x80\xb1\xe5A@\x93\xbb\x19\x7fl\xc3]\xc0;\xac\xcb\x84\xba\xe6A@\xce\xbc\xc1\xbcl\xc3]\xc0vA\x8e\xf7\xf4\xe6A@\xcf\x18\xe6\x04m\xc3]\xc0\x84\x89\x9aC\xad\xe7A@\xc9\x9d-{m\xc3]\xc0rKPh\xfe\xe7A@\x04\x9f\xd5\xb8m\xc3]\xc0|\x7f\x83\xf6\xea\xe8A@:\xc9\xa0$n\xc3]\xc0\xc2\xd7|\x01b\xe9A@7\x81\xe9\xb4n\xc3]\xc0\x03\x16e\xdb\x0e\xeaA@n}\xa2\xfcn\xc3]\xc0:tz\xde\x8d\xeaA@W\xdc\x13\x7fo\xc3]\xc0T\xaf[\x04\xc6\xeaA@n\xd9\xc6Do\xc3]\xc0\x08k\xady\x9f\xebA@\xa3\x8d\xc8\x1cp\xc3]\xc0\x01\xd6O\xa4\xa0\xecA@\xd2j\xed""q\xc3]\xc0\xdbx\xc1\xf1\xc6\xedA@,\x9cI@q\xc3]\xc00\x19\xc7H\xf6\xedA@%\x83\xedqp\xc3]\xc0\xcb\xdeR\xce\x17\xeeA@\x1aQ5\xd5n\xc3]\xc0\xabO(\xfa2\xeeA@o\xcb\x91\xdfl\xc3]\xc0\x1e#4\xddF\xeeA@\xae\xb0\xcfRh\xc3]\xc0\x88\x164\x88j\xeeA@\xe0\xfe\\4d\xc3]\xc0\xa0\x08\x98\xaf\x81\xeeA@{\xfd\xa45a\xc3]\xc0\xbb\xd0\\\xa7\x91\xeeA@\xf9\xb4/E^\xc3]\xc0In\xa8s\xa0\xeeA@\xd1D\x8ecZ\xc3]\xc0\x93\xc8>\xc8\xb2\xeeA@')"
242834036,"bytearray(b'\x01\x02\x00\x00\x00$\x00\x00\x00\xf0cq\xa4X\xc3]\xc0;\xfc\x7f\xe6\xbd\xeeA@\\\xadnPV\xc3]\xc0\x14T\xf9C\xd8\xeeA@\x0b\xb2\xaf\x86U\xc3]\xc0\xd5&\xa9\xa7\xea\xeeA@\xc20`\xc9U\xc3]\xc0b\xe6\x96\xb1\xfc\xeeA@\t\xda\x897W\xc3]\xc0_\x95\xb0\xdb\x0c\xefA@\xcd.\xce\xceX\xc3]\xc0]\xba\x93\x99\x1c\xefA@%\xc7\xe7_\\\xc3]\xc0\xb7E\x99\r2\xefA@v\x15\xf7\xc4_\xc3]\xc0\xcd\xd4$xC\xefA@J\xfd\x067c\xc3]\xc0\xca\xc5\xbd\x9eT\xefA@\xf0\x1e\xfb\xb4e\xc3]\xc0\xbbB\x1f,c\xefA@A\x8aK\x9fg\xc3]\xc0\xaf\x8390o\xefA@5\x07\x08\xe6h\xc3]\xc0\xdb\x11\x98\x98x\xefA@\x82\xb5 Jj\xc3]\xc0\x87r\xa2]\x85\xefA@\xac\x8dVZk\xc3]\xc0\xb4\x9f \x0c\x97\xefA@\xc3\x87m\xe6k\xc3]\xc0\x8cr\x1fo\xa8\xefA@F\x977\x87k\xc3]\xc0\xef\xc8Xm\xfe\xefA@W\x02)\xb1k\xc3]\xc0\x9e\xb5\xdb.4\xf1A@\xd5\th""l\xc3]\xc0\x03\xd1\x932\xa9\xf1A@\xa5\x85\xcb*l\xc3]\xc0s-Z\x80\xb6\xf1A@\xe6tYLl\xc3]\xc0xADj\xda\xf1A@\x10""\x19rl\xc3]\xc0\xb3b\xb8:\x00\xf2A@5\xe1\xf2\xb3l\xc3]\xc0e\xee\x10\xb5#\xf2A@\xce\xea\xd3\xe0l\xc3]\xc0:\x16%2\xbd\xf2A@\xce\xbc\xc1\xbcl\xc3]\xc0\x0c[\x0eO\n\xf5A@\x05C\xb1pm\xc3]\xc0\xdf \x10\x9e\xbf\xf5A@7\x81\xe9\xb4n\xc3]\xc0\xfc1R\x94\xf0\xf6A@9\xf7\xb2Hn\xc3]\xc0\x0461n\xb4\xf7A@m5\xeb\x8co\xc3]\xc0x\xb1\xd5\x8a\xdb\xf8A@\xa41\xa4\xd4o\xc3]\xc0u\xee\x87\xe9\x8c\xf9A@:S\xd7\x90n\xc3]\xc0)\x07\xb3\t0\xfbA@\x03\x15\x9fLm\xc3]\xc0\xa1F|\x82\x1f\xfcA@\xcd`\x9dtl\xc3]\xc0\xcdDl\x0b*\xfdA@\x99d\xe4,l\xc3]\xc0Z\x9a\x00h9\xfdA@\xe0\x89\x0f\xa2k\xc3]\xc0\xa1\xb9\x98\xb0G\xfdA@\x99\xaf7\xd6j\xc3]\xc0\xf7\xe1\xc5gW\xfdA@:7m\xc6i\xc3]\xc0\xa1\xa6\xf1fh\xfdA@')"
184549563,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x00\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@\x19\xe4\xd3\x08""\xd5]\xc0\xa8\x02\xeey\xfe\xccA@\xf4u\xcfp9\xd5]\xc0$\x80\xf6~\xfe\xccA@\x80I*SL\xd5]\xc0\x89Eg\xf4\xfe\xccA@\x1a\x111\xcaX\xd5]\xc0\xd1\x0b\xd2\xe7\xfe\xccA@x\xb4q\xc4Z\xd5]\xc0\xe9M\xa0\xe3\xfe\xccA@')"
41501711,"bytearray(b'\x01\x02\x00\x00\x00H\x01\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@.\xfc\xe0|j\xc3]\xc0Z\xba\'\xb4Q\xe4A@\x00\x05\x17+j\xc3]\xc0\xc4B\xadi\xde\xe3A@:7m\xc6i\xc3]\xc0!\x08\x90\xa1c\xe3A@\x88\xeeY\xd7h\xc3]\xc0\xd6\xc9\x19\x8a;\xe2A@e\x18w\x83h\xc3]\xc0\xe6\x93\x15\xc3\xd5\xe1A@\x8f\xb1\xc9\xd0g\xc3]\xc0\x01\x82\xde\xc0\x89\xe1A@s\xe0\xd5rg\xc3]\xc0\xf0ne\x89\xce\xe0A@[\xcf\xb5\xd4f\xc3]\xc0(\xab3\x08\xbd\xe0A@$I\xc6 f\xc3]\xc0\x89@\x9aV\xaf\xe0A@\xf0\xc2\xd6le\xc3]\xc0\xd9b\x12\x

2025-01-19 23:09:05 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:09:05 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:09:05 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:09:07 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:09:07 - snowflake.connector.connection - INFO - closed
2025-01-19 23:09:07 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:09:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:09:39 - root - INFO - ```sql
SELECT 
  COALESCE(w."all_tags"['bridge']::STRING, 'no') AS "bridge_tag",
  COUNT(DISTINCT w."id") AS "road_count"
FROM (
  SELECT *
  FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
  WHERE w."geometry" IS NOT NULL
  LIMIT 1000
) w
GROUP BY 1
LIMIT 100;
```
2025-01-19 23:09:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:09:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:09:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:09:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:09:40 - snowflake.connector.connection - INFO - closed
2025-01-19 23:09:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:10:01 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:10:01 - root - INFO - SQL:
SELECT 
  COALESCE(w."all_tags"['bridge']::STRING, 'no') AS "bridge_tag",
  COUNT(DISTINCT w."id") AS "road_count"
FROM (
  SELECT *
  FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
  WHERE w."geometry" IS NOT NULL
  LIMIT 1000
) w
GROUP BY 1
LIMIT 100;
Results:
bridge_tag,road_count
no,1000

2025-01-19 23:10:01 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:10:01 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:10:01 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:10:03 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-19 23:10:03 - snowflake.connector.connection - INFO - closed
2025-01-19 23:10:03 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:10:03 - root - INFO - SQL:
SELECT w."id", w."nodes"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
WHERE w."nodes" IS NOT NULL
LIMIT 100
Results:
Too long, hard cut:
id,nodes
745915504,"[
  {
    ""id"": 6981008133
  },
  {
    ""id"": 6981008132
  },
  {
    ""id"": 6981008131
  },
  {
    ""id"": 6981008130
  },
  {
    ""id"": 6981008129
  },
  {
    ""id"": 6981008128
  },
  {
    ""id"": 6981008127
  },
  {
    ""id"": 6981008126
  },
  {
    ""id"": 6981008133
  }
]"
745915510,"[
  {
    ""id"": 6981008163
  },
  {
    ""id"": 6981008162
  },
  {
    ""id"": 6981008161
  },
  {
    ""id"": 6981008160
  },
  {
    ""id"": 6981008163
  }
]"
745915497,"[
  {
    ""id"": 6981008091
  },
  {
    ""id"": 6981008090
  },
  {
    ""id"": 6981008089
  },
  {
    ""id"": 6981008088
  },
  {
    ""id"": 6981008091
  }
]"
745915511,"[
  {
    ""id"": 6981008171
  },
  {
    ""id"": 6981008170
  },
  {
    ""id"": 6981008169
  },
  {
    ""id"": 6981008168
  },
  {
    ""id"": 6981008167
  },
  {
    ""id"": 6981008166
  },
  {
    ""id"": 6981008165
  },
  {
    ""id"": 6981008164
  },
  {
    ""id"": 6981008171
  }
]"
745915514,"[
  {
    ""id"": 6981008193
  },
  {
    ""id"": 6981008192
  },
  {
    ""id"": 6981008191
  },
  {
    ""id"": 6981008190
  },
  {
    ""id"": 6981008189
  },
  {
    ""id"": 6981008188
  },
  {
    ""id"": 6981008193
  }
]"
745915491,"[
  {
    ""id"": 6981008063
  },
  {
    ""id"": 6981008062
  },
  {
    ""id"": 6981008061
  },
  {
    ""id"": 6981008060
  },
  {
    ""id"": 6981008059
  },
  {
    ""id"": 6981008058
  },
  {
    ""id"": 6981008063
  }
]"
745915496,"[
  {
    ""id"": 6981008087
  },
  {
    ""id"": 6981008086
  },
  {
    ""id"": 6981008085
  },
  {
    ""id"": 6981008084
  },
  {
    ""id"": 6981008083
  },
  {
    ""id"": 6981008082
  },
  {
    ""id"": 6981008087
  }
]"
745915488,"[
  {
    ""id"": 6981008037
  },
  {
    ""id"": 6981008036
  },
  {
    ""id"": 6981008035
  },
  {
    ""id"": 6981008034
  },
  {
    ""id"": 6981008033
  },
  {
    ""id"": 6981008032
  },
  {
    ""id"": 6981008037
  }
]"
745915507,"[
  {
    ""id"": 6981008147
  },
  {
    ""id"": 6981008146
  },
  {
    ""id"": 6981008145
  },
  {
    ""id"": 6981008144
  },
  {
    ""id"": 6981008147
  }
]"
745915509,"[
  {
    ""id"": 6981008159
  },
  {
    ""id"": 6981008158
  },
  {
    ""id"": 6981008157
  },
  {
    ""id"": 6981008156
  },
  {
    ""id"": 6981008155
  },
  {
    ""id"": 6981008154
  },
  {
    ""id"": 6981008159
  }
]"
745915499,"[
  {
    ""id"": 6981008101
  },
  {
    ""id"": 6981008100
  },
  {
    ""id"": 6981008099
  },
  {
    ""id"": 6981008098
  },
  {
    ""id"": 6981008097
  },
  {
    ""id"": 6981008096
  },
  {
    ""id"": 6981008101
  }
]"
745915524,"[
  {
    ""id"": 6981008244
  },
  {
    ""id"": 6981008243
  },
  {
    ""id"": 6981008242
  },
  {
    ""id"": 6981008241
  },
  {
    ""id"": 6981008244
  }
]"
745915486,"[
  {
    ""id"": 6981008021
  },
  {
    ""id"": 6981008020
  },
  {
    ""id"": 6981008019
  },
  {
    ""id"": 6981008018
  },
  {
    ""id"": 6981008017
  },
  {
    ""id"": 6981008016
  },
  {
    ""id"": 6981008015
  },
  {
    ""id"": 6981008014
  },
  {
    ""id"": 6981008021
  }
]"
745915489,"[
  {
    ""id"": 6981008045
  },
  {
    ""id"": 6981008044
  },
  {
    ""id"": 6981008043
  },
  {
    ""id"": 6981008042
  },
  {
    ""id"": 6981008041
  },
  {
    ""id"": 6981008040
  },
  {
    ""id"": 6981008039
  },
  {
    ""id"": 6981008038
  },
  {
    ""id"": 6981008045
  }
]"
745915525,"[
  {
    ""id"": 6981008248
  },
  {
    ""id"": 6981008247
  },
  {
    ""id"": 6981008246
  },
  {
    ""id"": 6981008245
  },
  {
    ""id"": 6981008248
  }
]"
745915479,"[
  {
    ""id"": 6980996677
  },
  {
    ""id"": 6980996676
  },
  {
    ""id"": 6980996675
  },
  {
    ""id"": 6980996674
  },
  {
    ""id"": 6980996677
  }
]"
745915520,"[
  {
    ""id"": 6981008221
  },
  {
    ""id"": 6981008220
  },
  {
    ""id"": 6981008219
  },
  {
    ""id"": 6981008218
  },
  {
    ""id"": 6981008221
  }
]"
745915505,"[
  {
    ""id"": 6981008139
  },
  {
    ""id"": 6981008138
  },
  {
    ""id"": 6981008137
  },
  {
    ""id"": 6981008136
  },
  {
    ""id"": 6981008135
  },
  {
    ""id"": 6981008134
  },
  {
    ""id"": 6981008139
  }
]"
745915521,"[
  {
    ""id"": 6981008229
  },
  {
    ""id"": 6981008228
  },
  {
    ""id"": 6981008227
  },
  {
    ""id"": 6981008226
  },
  {
    ""id"": 6981008225
  },
  {
    ""id"": 6981008224
  },
  {
    ""id"": 6981008223
  },
  {
    ""id"": 6981008222
  },
  {
    ""id"": 6981008229
  }
]"
286363110,"[
  {
    ""id"": 2900197843
  },
  {
    ""id"": 2193277414
  },
  {
    ""id"": 2193277135
  },
  {
    ""id"": 2900197844
  },
  {
    ""id"": 2900197843
  }
]"
160134741,"[
  {
    ""id"": 1722067981
  },
  {
    ""id"": 1722067961
  },
  {
    ""id"": 1722067957
  },
  {
    ""id"": 1722067939
  },
  {
    ""id"": 1722067937
  },
  {
    ""id"": 1722067969
  },
  {
    ""id"": 1722067981
  }
]"
160134747,"[
  {
    ""id"": 1722068044
  },
  {
    ""id"": 1722068034
  },
  {
    ""id"": 1722068013
  },
  {
    ""id"": 1722068027
  },
  {
    ""id"": 1722068

2025-01-19 23:10:03 - root - INFO - itercount: 0
2025-01-19 23:10:03 - root - INFO - Database Name: GEO_OPENSTREETMAP_BOUNDARIES
Schema Name: GEO_OPENSTREETMAP
DDL describes table information.
,0
table_name,HISTORY_NODES
description,
DDL,"create or replace TABLE HISTORY_NODES (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT,
	""latitude"" NUMBER(38,9),
	""longitude"" NUMBER(38,9)
);"

,1
table_name,HISTORY_RELATIONS
description,
DDL,"create or replace TABLE HISTORY_RELATIONS (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""members"" VARIANT,
	""all_tags"" VARIANT
);"

,2
table_name,PLANET_LAYERS
description,
DDL,"create or replace TABLE PLANET_LAYERS (
	""layer_code"" NUMBER(38,0),
	""layer_class"" VARCHAR(16777216),
	""layer_name"" VARCHAR(16777216),
	""gdal_type"" VARCHAR(16777216),
	""osm_id"" NUMBER(38,0),
	""osm_way_id"" NUMBER(38,0),
	""osm_timestamp"" NUMBER(38,0),
	""osm_version"" NUMBER(38,0),
	""all_tags"" VARIANT,
	""geometry"" BINARY(8388608)
);"

,3
table_name,PLANET_FEATURES_POINTS
description,
DDL,"create or replace TABLE PLANET_FEATURES_POINTS (
	""osm_id"" NUMBER(38,0),
	""osm_version"" NUMBER(38,0),
	""osm_way_id"" NUMBER(38,0),
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT
);"

,4
table_name,PLANET_WAYS
description,
DDL,"create or replace TABLE PLANET_WAYS (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT,
	""nodes"" VARIANT
);"

,5
table_name,HISTORY_CHANGESETS
description,
DDL,"create or replace TABLE HISTORY_CHANGESETS (
	""id"" NUMBER(38,0),
	""osm_timestamp_min"" NUMBER(38,0),
	""osm_timestamp_max"" NUMBER(38,0),
	""relations"" VARIANT,
	""ways"" VARIANT,
	""nodes"" VARIANT
);"

,6
table_name,HISTORY_LAYERS
description,
DDL,"create or replace TABLE HISTORY_LAYERS (
	""layer_code"" NUMBER(38,0),
	""layer_class"" VARCHAR(16777216),
	""layer_name"" VARCHAR(16777216),
	""osm_id"" NUMBER(38,0),
	""osm_way_id"" NUMBER(38,0),
	""osm_timestamp"" NUMBER(38,0),
	""osm_version"" NUMBER(38,0),
	""all_tags"" VARIANT,
	""geometry"" BINARY(8388608),
	""gdal_type"" VARCHAR(16777216)
);"

,7
table_name,PLANET_NODES
description,
DDL,"create or replace TABLE PLANET_NODES (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT,
	""latitude"" NUMBER(38,9),
	""longitude"" NUMBER(38,9)
);"

,8
table_name,PLANET_RELATIONS
description,
DDL,"create or replace TABLE PLANET_RELATIONS (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT,
	""members"" VARIANT
);"

,9
table_name,PLANET_FEATURES
description,
DDL,"create or replace TABLE PLANET_FEATURES (
	""feature_type"" VARCHAR(16777216),
	""osm_id"" NUMBER(38,0),
	""osm_way_id"" NUMBER(38,0),
	""osm_version"" NUMBER(38,0),
	""osm_timestamp"" NUMBER(38,0),
	""all_tags"" VARIANT,
	""geometry"" BINARY(8388608)
);"

Database Name: GEO_OPENSTREETMAP_BOUNDARIES
Schema Name: GEO_US_BOUNDARIES
DDL describes table information.
,0
table_name,ADJACENT_COUNTIES
description,
DDL,"create or replace TABLE ADJACENT_COUNTIES (
	""county"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""neighbors"" VARIANT,
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

,1
table_name,NWS_FORECAST_REGIONS
description,
DDL,"create or replace TABLE NWS_FORECAST_REGIONS (
	""state"" VARCHAR(16777216),
	""cwa"" VARCHAR(16777216),
	""time_zone"" VARCHAR(16777216),
	""fe_area"" VARCHAR(16777216),
	""zone"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""state_zone"" VARCHAR(16777216),
	""lon"" FLOAT,
	""lat"" FLOAT,
	""shortname"" VARCHAR(16777216),
	""shape_geometry"" BINARY(8388608)
);"

,2
table_name,ZIP_CODES
description,
DDL,"create or replace TABLE ZIP_CODES (
	""zip_code"" VARCHAR(16777216),
	""city"" VARCHAR(16777216),
	""county"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_code"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""zip_code_geom"" BINARY(8388608)
);"

,3
table_name,COASTLINE
description,
DDL,"create or replace TABLE COASTLINE (
	""name"" VARCHAR(16777216),
	""coastline_geom"" BINARY(8388608)
);"

,4
table_name,CONGRESS_DISTRICT_115
description,
DDL,"create or replace TABLE CONGRESS_DISTRICT_115 (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""district_fips_code"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""congress_session"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" BOOLEAN,
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""district_geom"" BINARY(8388608)
);"

Some other tables have the similar structure: ['CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116']
,5
table_name,COUNTIES
description,
DDL,"create or replace TABLE COUNTIES (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_gnis_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""csa_fips_code"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""met_div_fips_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""county_geom"" BINARY(8388608)
);"

,6
table_name,METROPOLITAN_DIVISIONS
description,
DDL,"create or replace TABLE METROPOLITAN_DIVISIONS (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""cbsa_code"" VARCHAR(16777216),
	""metdiv_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""metdiv_geom"" BINARY(8388608)
);"

,7
table_name,NATIONAL_OUTLINE
description,
DDL,"create or replace TABLE NATIONAL_OUTLINE (
	""us_outline_geom"" BINARY(8388608),
	""aff_geo_id"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""name"" VARCHAR(16777216)
);"

,8
table_name,URBAN_AREAS
description,
DDL,"create or replace TABLE URBAN_AREAS (
	""geo_id"" VARCHAR(16777216),
	""urban_area_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""area_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""urban_area_geom"" BINARY(8388608)
);"

,9
table_name,ADJACENT_STATES
description,
DDL,"create or replace TABLE ADJACENT_STATES (
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

,10
table_name,CNECTA
description,
DDL,"create or replace TABLE CNECTA (
	""geo_id"" VARCHAR(16777216),
	""cnecta_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""cnecta_geom"" BINARY(8388608)
);"

,11
table_name,CSA
description,
DDL,"create or replace TABLE CSA (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""msa_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""csa_geom"" BINARY(8388608)
);"

,12
table_name,RAILWAYS
description,
DDL,"create or replace TABLE RAILWAYS (
	""geo_id"" NUMBER(38,0),
	""full_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""railway_geom"" VARCHAR(16777216)
);"

,13
table_name,CBSA
description,
DDL,"create or replace TABLE CBSA (
	""geo_id"" VARCHAR(16777216),
	""csa_geo_id"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""msa_indicator"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""cbsa_geom"" BINARY(8388608)
);"

,14
table_name,STATES
description,
DDL,"create or replace TABLE STATES (
	""geo_id"" VARCHAR(16777216),
	""region_code"" VARCHAR(16777216),
	""division_code"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_gnis_code"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""state_geom"" BINARY(8388608)
);"

External knowledge that might be helpful: 
Categories: Geospatial functions


## ST_INTERSECTS

Returns TRUE if the two GEOGRAPHY objects or the two GEOMETRY objects intersect (i.e. share any portion of space).

Note This function does not support using a GeometryCollection or FeatureCollection as input values.

Tip You can use the search optimization service to improve the performance of queries that call this function.
For details, see Search Optimization Service.

See also:ST_DISJOINT


## Syntax

ST_INTERSECTS( <geography_expression_1> , <geography_expression_2> )

ST_INTERSECTS( <geometry_expression_1> , <geometry_expression_2> )


## Arguments


geography_expression_1A GEOGRAPHY object.

geography_expression_2A GEOGRAPHY object.

geometry_expression_1A GEOMETRY object.

geometry_expression_2A GEOMETRY object.


## Returns

BOOLEAN.

## Usage notes


For GEOMETRY objects, the function reports an error if the two input GEOMETRY objects have different SRIDs.


## Examples


## GEOGRAPHY examples

This shows a simple use of the ST_INTERSECTS function:

SELECT ST_INTERSECTS(
    TO_GEOGRAPHY('POLYGON((0 0, 2 0, 2 2, 0 2, 0 0))'),
    TO_GEOGRAPHY('POLYGON((1 1, 3 1, 3 3, 1 3, 1 1))')
    );
+---------------------------------------------------------+
| ST_INTERSECTS(                                          |
|     TO_GEOGRAPHY('POLYGON((0 0, 2 0, 2 2, 0 2, 0 0))'), |
|     TO_GEOGRAPHY('POLYGON((1 1, 3 1, 3 3, 1 3, 1 1))')  |
|     )                                                   |
|---------------------------------------------------------|
| True                                                    |
+---------------------------------------------------------+



## GEOMETRY examples

This shows a simple use of the ST_INTERSECTS function:

SELECT ST_INTERSECTS(
  TO_GEOMETRY('POLYGON((0 0, 0 2, 2 2, 2 0, 0 0))'),
  TO_GEOMETRY('POLYGON((1 1, 3 1, 3 3, 1 3, 1 1))') );

+------------------------------------------------------+
| ST_INTERSECTS(                                       |
|   TO_GEOMETRY('POLYGON((0 0, 0 2, 2 2, 2 0, 0 0))'), |
|   TO_GEOMETRY('POLYGON((1 1, 3 1, 3 3, 1 3, 1 1))')  |
| )                                                    |
|------------------------------------------------------|
| True                                                 |
+------------------------------------------------------+
The table structure information is ({database name: {schema name: {table name}}}): 
{'GEO_OPENSTREETMAP_BOUNDARIES': {'GEO_OPENSTREETMAP': ['HISTORY_CHANGESETS', 'HISTORY_LAYERS', 'HISTORY_NODES', 'HISTORY_RELATIONS', 'PLANET_FEATURES', 'PLANET_FEATURES_POINTS', 'PLANET_LAYERS', 'PLANET_NODES', 'PLANET_RELATIONS', 'PLANET_WAYS'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'ADJACENT_STATES', 'CBSA', 'CNECTA', 'COASTLINE', 'CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116', 'COUNTIES', 'CSA', 'METROPOLITAN_DIVISIONS', 'NATIONAL_OUTLINE', 'NWS_FORECAST_REGIONS', 'RAILWAYS', 'STATES', 'URBAN_AREAS', 'ZIP_CODES']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

1. **Table**: `"GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"`
   - `"id"`: Unique identifier for each way; useful for identifying and pairing roads.
   - `"geometry"`: Spatial data of the way; used to determine overlaps between roads.
   - `"all_tags"`: Contains tags related to each way; used to extract the `"highway"` classification and check for the `"bridge"` tag.
   - `"nodes"`: Contains node information; used to determine if roads share nodes.

2. **Table**: `"GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"`
   - `"state_name"`: Name of the state; used to filter for California.
   - `"state_geom"`: Geometry of the state; used to spatially join with road geometries in California.

**Potential Conditions:**

- Filtering roads classified as `"motorway"`, `"trunk"`, `"primary"`, `"secondary"`, or `"residential"` from the `"highway"` tag.
- Excluding roads that have a `"bridge"` tag.
- Selecting roads within California by checking if the road geometry intersects with California's geometry.
- Identifying roads that overlap without sharing nodes.
- Extracting and comparing node information to ensure roads do not share nodes.

---

**Sample SQL Queries:**

1. **Retrieve distinct highway classifications:**
   ```sql
   SELECT DISTINCT w."all_tags":"highway"::STRING AS "highway_type"
   FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
   LIMIT 1000;
   ```

2. **List all roads classified as motorway, trunk, primary, secondary, or residential:**
   ```sql
   SELECT w."id", w."all_tags":"highway"::STRING AS "highway_type"
   FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
   WHERE w."all_tags":"highway"::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
   LIMIT 1000;
   ```

3. **Extract roads without the bridge tag:**
   ```sql
   SELECT w."id", w."all_tags":"bridge"::STRING AS "bridge_tag"
   FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
   WHERE w."all_tags":"bridge" IS NULL
   LIMIT 1000;
   ```

4. **Get the geometry of California from the states table:**
   ```sql
   SELECT s."state_name", s."state_geom"
   FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
   WHERE s."state_name" = 'California'
   LIMIT 1000;
   ```

5. **Select roads within California by spatial intersection:**
   ```sql
   SELECT w."id", w."geometry"
   FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
        "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
   WHERE s."state_name" = 'California'
     AND ST_INTERSECTS(w."geometry", s."state_geom")
   LIMIT 1000;
   ```

6. **Identify roads classified as desired types within California:**
   ```sql
   SELECT w."id", w."all_tags":"highway"::STRING AS "highway_type", w."geometry"
   FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
        "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
   WHERE w."all_tags":"highway"::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
     AND s."state_name" = 'California'
     AND ST_INTERSECTS(w."geometry", s."state_geom")
   LIMIT 1000;
   ```

7. **Retrieve roads without bridge tags within California:**
   ```sql
   SELECT w."id", w."all_tags":"bridge"::STRING AS "bridge_tag", w."geometry"
   FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
        "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
   WHERE w."all_tags":"bridge" IS NULL
     AND s."state_name" = 'California'
     AND ST_INTERSECTS(w."geometry", s."state_geom")
   LIMIT 1000;
   ```

8. **Explore node information for roads to check for shared nodes:**
   ```sql
   SELECT w."id", w."nodes"
   FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
   LIMIT 1000;
   ```

9. **List roads with their highway type and bridge status:**
   ```sql
   SELECT w."id", w."all_tags":"highway"::STRING AS "highway_type", w."all_tags":"bridge"::STRING AS "bridge_tag"
   FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
   LIMIT 1000;
   ```

10. **Find potential overlapping roads without shared nodes:**
    ```sql
    SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2", w1."geometry", w2."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w1,
         "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w2,
         "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE w1."id" < w2."id"
      AND w1."all_tags":"highway"::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w2."all_tags":"highway"::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w1."all_tags":"bridge" IS NULL
      AND w2."all_tags":"bridge" IS NULL
      AND s."state_name" = 'California'
      AND ST_INTERSECTS(w1."geometry", s."state_geom")
      AND ST_INTERSECTS(w2."geometry", s."state_geom")
      AND ST_INTERSECTS(w1."geometry", w2."geometry")
      AND NOT EXISTS (
          SELECT 1
          FROM LATERAL FLATTEN(input => w1."nodes") n1,
               LATERAL FLATTEN(input => w2."nodes") n2
          WHERE n1.value = n2.value
      )
    LIMIT 1000;
    ```

11. **Count the number of roads per highway classification in California:**
    ```sql
    SELECT w."all_tags":"highway"::STRING AS "highway_type", COUNT(DISTINCT w."id") AS "road_count"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
      AND ST_INTERSECTS(w."geometry", s."state_geom")
    GROUP BY w."all_tags":"highway"::STRING
    LIMIT 1000;
    ```

12. **Retrieve sample geometries of roads for visualization:**
    ```sql
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."all_tags":"highway"::STRING = 'motorway'
    LIMIT 1000;
    ```

13. **Identify roads that intersect with a specific area in California:**
    ```sql
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE ST_INTERSECTS(w."geometry", TO_GEOGRAPHY('POLYGON((...))'))
    LIMIT 1000;
    ```

14. **Explore the distribution of bridge tags among roads in California:**
    ```sql
    SELECT w."all_tags":"bridge"::STRING AS "bridge_tag", COUNT(DISTINCT w."id") AS "road_count"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
      AND ST_INTERSECTS(w."geometry", s."state_geom")
    GROUP BY w."all_tags":"bridge"::STRING
    LIMIT 1000;
    ```

15. **List roads along with their nodes for further analysis:**
    ```sql
    SELECT w."id", w."nodes"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."all_tags":"highway"::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
    LIMIT 1000;
    ```

---

These queries help in understanding the data related to roads in California, their classifications, bridge statuses, spatial locations, and node information. They provide insights necessary for analyzing overlapping roads without shared nodes and without bridge tags, as specified in the task.Query:
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w1
  JOIN "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w2
    ON w1."id" < w2."id"
  CROSS JOIN "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
  WHERE
    s."state_name" = 'California'
    AND ST_INTERSECTS(
      ST_GEOGRAPHYFROMWKB(w1."geometry"),
      ST_GEOGRAPHYFROMWKB(s."state_geom")
    )
    AND ST_INTERSECTS(
      ST_GEOGRAPHYFROMWKB(w2."geometry"),
      ST_GEOGRAPHYFROMWKB(s."state_geom")
    )
    AND ST_INTERSECTS(
      ST_GEOGRAPHYFROMWKB(w1."geometry"),
      ST_GEOGRAPHYFROMWKB(w2."geometry")
    )
    AND w1."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
    AND w2."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
    AND (
      w1."all_tags"['bridge'] IS NULL
      OR w1."all_tags"['bridge']::STRING = 'no'
    )
    AND (
      w2."all_tags"['bridge'] IS NULL
      OR w2."all_tags"['bridge']::STRING = 'no'
    )
    AND ARRAY_SIZE(ARRAY_INTERSECTION(w1."nodes", w2."nodes")) = 0
) sub;
Answer:
number_of_pairs
0
Query:
SELECT w."id", w."all_tags"['highway']::STRING AS "highway_type"
FROM (
  SELECT * FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
  SAMPLE (1 PERCENT)
) w
WHERE w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
LIMIT 1000;
Answer:
001003 (42000): 01b9d346-0004-7b17-0001-11c300f0297a: SQL compilation error:
syntax error line 4 at position 12 unexpected 'PERCENT'.Query:
SELECT w."id", w."all_tags"['bridge']::STRING AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
WHERE w."all_tags"['bridge'] IS NULL
LIMIT 1000
Answer:
Too long, hard cut:
id,bridge_tag
73165139,
75218666,
75207289,
75205347,
72995142,
73978150,
73975367,
73932029,
72983297,
79494876,
72998704,
75152196,
75279777,
75268171,
73996196,
74115282,
75230281,
75141313,
75216506,
75228571,
75204754,
75202353,
75217714,
74115373,
75204413,
73975353,
75206290,
75201368,
75235185,
73996882,
75215401,
73192060,
72957727,
79497739,
75279539,
79497792,
72961752,
79488712,
74116584,
73182731,
74114742,
75142130,
75214036,
73934663,
73996429,
73929304,
73077581,
73935017,
75229234,
74116443,
75230098,
75217729,
73975348,
75216626,
72986785,
75200768,
75217675,
75150740,
79489443,
75207292,
75279172,
75283696,
73937597,
75217094,
79497656,
74119246,
79494291,
75283649,
73069432,
79488588,
73980243,
73984601,
72969205,
73940964,
73077594,
75227779,
75147720,
73939739,
75282261,
73930775,
75217176,
73996685,
73984737,
75205433,
73072872,
73931785,
75216553,
73162713,
75283030,
73997345,
73994419,
75213787,
75227551,
75143467,
73182877,
73939773,
75146252,
73938710,
73997766,
75226673,
75214344,
74114918,
72995005,
72955462,
72961326,
75229460,
73184383,
73999931,
73986833,
75282841,
75216087,
73196783,
75204078,
75218220,
75215661,
73163439,
75234944,
74116151,
75232984,
73081100,
73197240,
75200644,
73164976,
74115550,
73975383,
73076983,
73939351,
75215924,
73179814,
73998045,
73940380,
75215290,
75202953,
73934683,
75218563,
75279128,
79497478,
75217898,
75279926,
73931093,
75207065,
75227307,
75140279,
72960370,
73180988,
74125548,
75140766,
75218317,
74115520,
73997196,
75217315,
75215909,
73932353,
75200599,
79488860,
75280457,
74120057,
74114861,
73977643,
75205025,
75200451,
75216272,
74123283,
75230318,
72989953,
75283253,
72954840,
75217501,
75148238,
72984615,
75229143,
73182356,
75284502,
75142512,
75235626,
79489609,
73995886,
75229771,
79497724,
73535851,
73995732,
75217586,
75142284,
74119381,
75233995,
75200203,
79497606,
75203239,
75213167,
75227015,
72958461,
75215459,
73963644,
73997912,
79489107,
75203011,
75201037,
73985221,
73931026,
75215169,
73939933,
75143607,
75145170,
75216088,
75230692,
75213043,
75206945,
79488208,
75216669,
75204801,
75200363,
75145524,
75200625,
72984929,
73164095,
75229906,
75216581,
79490111,
75202680,
72985955,
74113851,
74115912,
73997363,
75215574,
73079649,
75215666,
75141325,
72962542,
75230710,
73963912,
73994618,
73534440,
75284685,
72968516,
79489249,
75218258,
75217223,
75216586,
73975489,
73986196,
75217073,
73995512,
74122767,
75282447,
75230902,
75207386,
75218628,
75231297,
74116597,
73075529,
75216700,
75282851,
73190914,
75217538,
73984736,
75140544,
745915504,
745915510,
745915497,
745915511,
745915514,
745915491,
745915496,
745915488,
745915507,
745915509,
745915499,
745915524,
745915486,
745915489,
745915525,
745915479,
745915520,
745915505,
745915521,
286363110,
160134741,
160134747,
605339187,
912914876,
824266741,
824266740,
289451433,
289451432,
196220541,
196220537,
196220538,
196220517,
196220504,
196220479,
196220549,
196220522,
196220529,
196220526,
196220555,
196220567,
196220505,
196220501,
196220552,
196220524,
196220565,
196220520,
196220548,
196220540,
196220536,
196220509,
196220502,
196220518,
196220516,
196220510,
196220534,
196220531,
196220508,
196220511,
196220564,
196220506,
196220513,
196220545,
196220561,
196220562,
196220519,
196220512,
196220532,
196220530,
196220514,
196220507,
196220566,
196220539,
193221962,
204474337,
204485212,
908557838,
162593974,
833970710,
833970706,
833970707,
833970711,
833970709,
833970712,
833970708,
210884399,
210884395,
210884398,
210127125,
210127133,
210127131,
210127128,
210127129,
210127123,
210127132,
210127126,
778936650,
295437602,
324578516,
324578520,
324578512,
324578515,
324578518,
324578514,
324578517,
324578521,
324578513,
201347577,
201347576,
834271973,
834271972,
834271971,
201448585,
201448588,
201448587,
201448586,
201480288,
275067270,
275067273,
275067269,
202580043,
732759638,
732759637,
732759636,
732759635,
275864479,
836197924,
836197925,
836197926,
393507409,
393507410,
167492227,
167492224,
167492226,
421576128,
181678374,
181678375,
181678373,
181678376,
173215756,
675277205,
675277206,
191139196,
191139193,
202491870,
202491869,
202491871,
745963657,
745963659,
745963660,
745963658,
473636400,
473636425,
473636402,
473636390,
473636398,
473636394,
473636443,
473636404,
748861372,
748861373,
748861377,
748861378,
748861374,
748861376,
748861375,
230605385,
230605389,
230605388,
230605387,
230605390,
230605386,
226644954,
226644953,
230621848,
230621821,
230621818,
230621826,
230621808,
230621831,
230621862,
230621807,
230621890,
230621891,
230621887,
230621880,
230621840,
230621882,
230621853,
230621869,
230621817,
230621879,
230621784,
230621787,
230621852,
230621874,
230621830,
230621844,
230621798,
230621837,
230621843,
230621805,
230621845,
230621783,
230621816,
230621804,
230621790,
230621877,
230621833,
230621819,
230621838,
230621806,
230621841,
230621815,
230621875,
230621825,
230621796,
230621864,
230621889,
230621829,
230621822,
230621
Query:
SELECT s."state_name", s."state_geom"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
WHERE s."state_name" = 'California'
LIMIT 1000
Answer:
Too long, hard cut:
state_name,state_geom
California,"bytearray(b'\x01\x06\x00\x00\x00\x07\x00\x00\x00\x01\x03\x00\x00\x00\x01\x00\x00\x00\x88\x01\x00\x00\xcf\x1b\xb5\xc2\xf4\xdd]\xc0\x12\rR\xf0\x14\x08A@\x99\x87\xda6\x8c\xde]\xc0R\x80(\x981\tA@\xb2\xf6w\xb6G\xdf]\xc0\xdc\x80\xcf\x0f#\nA@\x8b\x05L\xe0\xd6\xdf]\xc0LJA\xb7\x97\nA@""q\x8f\xa5\x0f\xe0]\xc0\xf4\xd3\x7f\xd6\xfc\nA@w\x85>X\xc6\xe0]\xc0\xf8\xbdM\x7f\xf6\x0bA@\xbf\xa41ZG\xe1]\xc0r1\x06\xd6q\x0cA@\xe9\xf7\x8b\xd9\x92\xe1]\xc0\x11i\x1b\x7f\xa2\x0cA@\x1e\xe7\xc4\x1e\xda\xe1]\xc0\xa7\xb1\xbd\x16\xf4\x0cA@\xe2""\xf7tu\xe2]\xc0_\xc9U,~\rA@\xed\xbf\\\x8b\x16\xe3]\xc0H\x08V\xd5\xcb\rA@#\xfc\x19\xde\xac\xe3]\xc0\xac\x9f\xfe\xb3\xe6\rA@\xc9\xca/\x831\xe4]\xc0WA\x0ct\xed\rA@\x10\x07\tQ\xbe\xe4]\xc0\xde\xa2\x93\xa5\xd6\rA@\xec\x89\xae\x0b?\xe5]\xc0\x00\x12M\xa0\x88\rA@u_\xcelW\xe5]\xc0\xa6*mq\x8d\rA@1\x9dd\xab\xcb\xe5]\xc0\x7f\x9b\xc5\x8b\x85\rA@lHj\xa1d\xe6]\xc0\x0b\xc7\xf3\x19P\rA@\xa6\xbe\xba*P\xe7]\xc0\x83\x16\x120\xba\x0cA@\xcd\xd3G\xe0\x0f\xe8]\xc0\xfa\xb7\xcb~\xdd\x0bA@\xaf\xd7\x82\xde\x1b\xe8]\xc0\xec~\x15\xe0\xbb\x0bA@i\x8e\xac\xfc2\xe8]\xc0r\xb9\xc1P\x87\x0bA@i\xfc\xc2+I\xe8]\xc0\xe3\x0f\x06\x9e{\x0bA@\x1a\x1e\x89\x97\xa7\xe8]\xc0!\xc2\xbf\x08\x1a\x0bA@?$\n-\xeb\xe8]\xc0\x0b~\x1bb\xbc\nA@ \xd9\xearJ\xe9]\xc0\xcep\x03>?\nA@\xef\xc9\xc3B\xad\xe9]\xc06Y\xa3\x1e\xa2\tA@\xbf\x88\xb6c\xea\xe9]\xc0zq\xe2\xab\x1d\tA@(\x9f\x1e\xdb2\xea]\xc0\xc1\xa1\xb7xx\tA@\xaf\xdeo\xb4\xe3\xea]\xc0\x19\xac8\xd5Z\nA@A_z\xfbs\xeb]\xc0\x91|%\x90\x12\x0bA@S\xf7\x8f\x85\xe8\xeb]\xc0h\xc4\xcc>\x8f\x0bA@\x839\x08:Z\xec]\xc0\x87\xf2\x05-$\x0cA@\xc8\xff\xe4\xef\xde\xec]\xc0\x11\xb4\xc9\xe1\x93\x0cA@6\xae\x7f\xd7g\xed]\xc0gur\x86\xe2\x0cA@\xdb\xc9nf\xf4\xed]\xc0\x18/\xdd$\x06\rA@\xd51uWv\xee]\xc0\xd2\x9f\xfdH\x11\rA@%\x13~\xa9\x9f\xee]\xc0\xf9\xed\xeb\xc09\rA@\x99\xcc?\xfa&\xef]\xc0\xebJ\xcbH\xbd\rA@\x98\x90\x9d\xb7\xb1\xef]\xc0\x03\xc9;\x872\x0eA@\xaf\xba\x9c\x12\x10\xf0]\xc0""\x0fD\x16i\x0eA@\x97x\xce\x16\x10\xf0]\xc0P8\xbb\xb5L\x0eA@_\xa1\x0f\x96\xb1\xf0]\xc0\xa0\xfc\xdd;j\x0eA@\xeed\xfe\xd17\xf1]\xc0\x0f\x02\xf2%T\x0eA@Q\xf9\xd7\xf2\xca\xf1]\xc0tI\xd5v\x13\x0eA@\x99\xa42\xc5\x1c\xf2]\xc0W\xc6\x86n\xf6\rA@\xb2\xa1\x9b\xfd\x81\xf2]\xc0Y\x868\xd6\xc5\rA@\xb2q\x8b\xf9\xb9\xf2]\xc0V\x0e-\xb2\x9d\rA@\x8f\x05\x13\x7f\x14\xf3]\xc0\xe5\x01,\xf2\xeb\rA@\xb3\x9e\xe8\xba\xf0\xf3]\xc0\n\x85\x088\x84\x0eA@\x15L\xc3\xf0\x11\xf5]\xc0!\xfc\x8b\xa01\x0fA@\x14\x9de\x16\xa1\xf5]\xc0C\x12\xbd\x8cb\x0fA@A\xc1\xc5\x8a\x1a\xf6]\xc0n\xc2\xbd2o\x0fA@+\x96\xe9\x97\x88\xf6]\xc0r\x9c\xdb\x84{\x0fA@\xba\xc6\xf5\xef\xfa\xf6]\xc0\x04\xdb\x88\'\xbb\x0fA@Wv\xc1\xe0\x9a\xf7]\xc0\x9f\xf7\xc6\x10\x00\x10A@W\xb2c#\x10\xf8]\xc0U\xd2\x8ao(\x10A@W\xb2c#\x10\xf8]\xc0x:W\x94\x12\x10A@\x0b\x9e\xd0\xebO\xf8]\xc0p\xca\xdc|#\x10A@\xde Z+\xda\xf8]\xc0\xd6\x14\xc8\xec,\x10A@X\xb3\\6:\xf9]\xc0Q`\x01L\x19\x10A@\x8d\xa2\x95{\x81\xf9]\xc0\xee\xaa\x07\xccC\x10A@\xc9D\xd8\xf0\xf4\xf9]\xc0zIc\xb4\x8e\x10A@\x01VG\x8et\xfa]\xc0\xe4\xd1\x8d\xb0\xa8\x10A@\x81\xeb\x8a\x19\xe1\xfa]\xc0}\xeb\xc3z\xa3\x10A@\x05l\x95`q\xfb]\xc0\xae\xd7\xf4\xa0\xa0\x10A@""?\xa9\xf6\xe9\xfb]\xc04/\x87\xddw\x10A@Y\xae\xb7\xcdT\xfc]\xc0\xbb\xe8+H3\x10A@>\xc0!T\xa9\xfc]\xc0.\x84\x9c\xf7\xff\x0fA@\xc6Q\xb9\x89Z\xfd]\xc0j\xb93\x13\x0c\x0fA@!\x8f\xe0F\xca\xfd]\xc0<k\xb7]h\x0eA@%\x80)\x03\x07\xfe]\xc0""\xc6k^\xd5\rA@\xfb\xb9\xa1);\xfe]\xc0R\x05\xa3\x92:\rA@\xfb\xb7Y\xbcX\xfe]\xc0L\xd5=\xb2\xb9\x0cA@\x83\xeb\x18W\\\xfe]\xc0\xf6\x8e\x1a\x13b\x0cA@\xea\xd9:8\xd8\xfe]\xc0\xdd\x01\x9e\xb4p\x0bA@\xb6\x86R{\x11\xff]\xc0\x8en\x84EE\nA@\x18ip[[\xff]\xc0\x8e>\xe6\x03\x02\tA@\xa4\x933\x14w\xff]\xc0GG9\x98M\x08A@\\`\x1d\xc7\x0f\x00^\xc0\x10[z4\xd5\tA@\\`\x1d\xc7\x0f\x00^\xc0b\x12.\xe4\x11\nA@\xd3o\xedDI\x00^\xc0\x92[\x93nK\nA@\xe6\x05\xd8G\xa7\x00^\xc0\x97:\xc8\xeb\xc1\nA@""\xcb\x82\x89?\x01^\xc0\x9e\xa2\xeaW:\x0bA@\xbcf\x80\x0b\xb2\x01^\xc0\xfb\xfdb\xb6d\x0bA@\xad\xa4\x15\xdfP\x02^\xc0\x15\xe5\xd2\xf8\x85\x0bA@ R\x9a\xcd\xe3\x02^\xc0#i7\xfa\x98\x0bA@a\x02E,b\x03^\xc0\xf6\x1cX\x8e\x90\x0bA@\x0c}\xb0\x8c\r\x04^\xc0&\xff\x93\xbf{\x0bA@\x06\x81\x95C\x8b\x04^\xc0\xf266;R\x0bA@\xffV\xb2c#\x05^\xc0\xbb\xab\x1e0\x0f\x0bA@\xbe\x8e\xc6\xa1~\x05^\xc0\xbe1\x04\x00\xc7\nA@\x065|\x0b\xeb\x05^\xc0\x8f\xf3\xfe?N\nA@\xbf\x00\x89&P\x06^\xc0\xfa\x02z\xe1\xce\tA@\xdd\na5\x96\x06^\xc0\xc6\xdf\xf6\x04\x89\tA@D\x08V\xd5\xcb\x06^\xc0\xb3\xff\x01\xd6\xaa\tA@E\xe4\x823\xf8\x06^\xc0\xc7@\x9e]\xbe\tA@_|\xd1\x1e/\x07^\xc0\xf8\xe1 !\xca\tA@*\xd4a\x85[\x07^\xc0\x96\xb1\xa1\x9b\xfd\tA@\xf8\xcc >\xb0\x07^\xc0\xf1#~\xc5\x1a\nA@\x05X\xe4\xd7\x0f\x08^\xc0\x94\xb7#\x9c\x16\nA@\xf5\x84%\x1eP\x08^\xc0U\xc8\x95z\x16\nA@\xe2\xb04\xf0\xa3\x08^\xc0\x82L2r\x16\nA@\xadE\xd2n\xf4\x08^\xc0\x0f C\xc7\x0e\nA@\x03\xcf\xbd\x87K\t^\xc0\xd6O\xffY\xf3\tA@\x9d\xf9cZ\x9b\t^\xc03+\xdb\x87\xbc\tA@r5\xb2+-\n^\xc0\xe1\xb3up\xb0\tA@{\xdb\xda\xc2\xf3\n^\xc0\xa4\x1a\xf6{b\tA@""\xc4\x95\xb3w\x0b^\xc0-\x0f\xd2S\xe4\x08A@\xbdk\xd0\x97\xde\x0b^\xc0\xa9+\x9f\xe5y\x08A@`\x99\xb7\xea:\x0c^\xc0;\x0f\xee\xce\xda\x07A@\x81l ]l\x0c^\xc0PKs+\x84\x07A@X\x9e\xce\x15\xa5\x0c^\
Query:
SELECT w."id", w."geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
     "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
WHERE s."state_name" = 'California'
  AND ST_INTERSECTS(
        ST_GEOGRAPHYFROMWKB(w."geometry"),
        ST_GEOGRAPHYFROMWKB(s."state_geom")
      )
LIMIT 1000
Answer:
Too long, hard cut:
id,geometry
173040551,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x000\xf9\x9f\xfc]\xcf]\xc0Mx\xae\x94\n\xcdA@\xe0\xa3Y4x\xcf]\xc0\x01\x7fB\x87\n\xcdA@\xbe\xa9\xa3>$\xd0]\xc0\xc6\xf6\xff\x16\t\xcdA@\x17\tm9\x97\xd0]\xc0\x91+\xf5,\x08\xcdA@\x9a[!\xac\xc6\xd0]\xc0\xcc]K\xc8\x07\xcdA@\xf9\xe1 !\xca\xd0]\xc0U\xe51\xb9\x07\xcdA@')"
173040548,"bytearray(b""\x01\x02\x00\x00\x00\r\x00\x00\x00\x05\x7f\xael\xd5\xd0]\xc0U\xe51\xb9\x07\xcdA@ \xd7<\xfd\xd6\xd0]\xc0\xd8\x95;\xd8\x07\xcdA@\xc7,{\x12\xd8\xd0]\xc0\xbb\xf2Y\x9e\x07\xcdA@\x87p\xcc\xb2\'\xd1]\xc0tF\x94\xf6\x06\xcdA@%\xcb\xeen\x8a\xd1]\xc0\\\x1ekF\x06\xcdA@\xb3\xce\xf8\xbe\xb8\xd1]\xc0\x86\xe5\xcf\xb7\x05\xcdA@\xd9\xed\xb3\xcaL\xd2]\xc0i\x00o\x81\x04\xcdA@\x04~\xe8\xdd\xb3\xd2]\xc04\xab-+\x03\xcdA@q\x1cx\xb5\xdc\xd2]\xc0\xec\x12\xd5[\x03\xcdA@\x14\xab\x06an\xd3]\xc0\xa0\xa9\xd7-\x02\xcdA@1\x84\x9c\xf7\xff\xd3]\xc0S@\xda\xff\x00\xcdA@\x1b\xbf\xf0J\x92\xd4]\xc0d\xdf\x15\xc1\xff\xccA@\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@"")"
173040547,"bytearray(b""\x01\x02\x00\x00\x00\x0b\x00\x00\x00\xc5\xe0\xabgR\xcf]\xc0\xd8-\xa7\xa9\n\xcdA@\x99\x94\'\xb5<\xcf]\xc00\x17LW\x0b\xcdA@\xf0f\xb2$\xe5\xce]\xc0*\xca\xa5\xf1\x0b\xcdA@\x1b^\xb5\xd7\xa7\xce]\xc04\x8c\xccm\x0c\xcdA@\xe7& \xdcS\xce]\xc0;\x1b\xf2\xcf\x0c\xcdA@m\xcf,\tP\xce]\xc0$\xd9#\xd4\x0c\xcdA@C\x8e\xadg\x08\xce]\xc0)\x96[Z\r\xcdA@y\xe2\x83\xe8\xda\xcd]\xc0/\xf7n\x98\r\xcdA@\xd1]\x12g\xc5\xcd]\xc0\x89\\\x15M\x0c\xcdA@\xcd\x9a\x0eS\x91\xcd]\xc0\xd1\xe68\xb7\t\xcdA@\x8a\x90_\xe4\x8a\xcd]\xc0NdA\xbc\t\xcdA@"")"
10674916,"bytearray(b'\x01\x02\x00\x00\x00\x18\x00\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@_\xab\xf3^k\xc3]\xc0@\xdd@\x81w\xe5A@d\xde\xf4xk\xc3]\xc0@,@\x80\xb1\xe5A@\x93\xbb\x19\x7fl\xc3]\xc0;\xac\xcb\x84\xba\xe6A@\xce\xbc\xc1\xbcl\xc3]\xc0vA\x8e\xf7\xf4\xe6A@\xcf\x18\xe6\x04m\xc3]\xc0\x84\x89\x9aC\xad\xe7A@\xc9\x9d-{m\xc3]\xc0rKPh\xfe\xe7A@\x04\x9f\xd5\xb8m\xc3]\xc0|\x7f\x83\xf6\xea\xe8A@:\xc9\xa0$n\xc3]\xc0\xc2\xd7|\x01b\xe9A@7\x81\xe9\xb4n\xc3]\xc0\x03\x16e\xdb\x0e\xeaA@n}\xa2\xfcn\xc3]\xc0:tz\xde\x8d\xeaA@W\xdc\x13\x7fo\xc3]\xc0T\xaf[\x04\xc6\xeaA@n\xd9\xc6Do\xc3]\xc0\x08k\xady\x9f\xebA@\xa3\x8d\xc8\x1cp\xc3]\xc0\x01\xd6O\xa4\xa0\xecA@\xd2j\xed""q\xc3]\xc0\xdbx\xc1\xf1\xc6\xedA@,\x9cI@q\xc3]\xc00\x19\xc7H\xf6\xedA@%\x83\xedqp\xc3]\xc0\xcb\xdeR\xce\x17\xeeA@\x1aQ5\xd5n\xc3]\xc0\xabO(\xfa2\xeeA@o\xcb\x91\xdfl\xc3]\xc0\x1e#4\xddF\xeeA@\xae\xb0\xcfRh\xc3]\xc0\x88\x164\x88j\xeeA@\xe0\xfe\\4d\xc3]\xc0\xa0\x08\x98\xaf\x81\xeeA@{\xfd\xa45a\xc3]\xc0\xbb\xd0\\\xa7\x91\xeeA@\xf9\xb4/E^\xc3]\xc0In\xa8s\xa0\xeeA@\xd1D\x8ecZ\xc3]\xc0\x93\xc8>\xc8\xb2\xeeA@')"
242834036,"bytearray(b'\x01\x02\x00\x00\x00$\x00\x00\x00\xf0cq\xa4X\xc3]\xc0;\xfc\x7f\xe6\xbd\xeeA@\\\xadnPV\xc3]\xc0\x14T\xf9C\xd8\xeeA@\x0b\xb2\xaf\x86U\xc3]\xc0\xd5&\xa9\xa7\xea\xeeA@\xc20`\xc9U\xc3]\xc0b\xe6\x96\xb1\xfc\xeeA@\t\xda\x897W\xc3]\xc0_\x95\xb0\xdb\x0c\xefA@\xcd.\xce\xceX\xc3]\xc0]\xba\x93\x99\x1c\xefA@%\xc7\xe7_\\\xc3]\xc0\xb7E\x99\r2\xefA@v\x15\xf7\xc4_\xc3]\xc0\xcd\xd4$xC\xefA@J\xfd\x067c\xc3]\xc0\xca\xc5\xbd\x9eT\xefA@\xf0\x1e\xfb\xb4e\xc3]\xc0\xbbB\x1f,c\xefA@A\x8aK\x9fg\xc3]\xc0\xaf\x8390o\xefA@5\x07\x08\xe6h\xc3]\xc0\xdb\x11\x98\x98x\xefA@\x82\xb5 Jj\xc3]\xc0\x87r\xa2]\x85\xefA@\xac\x8dVZk\xc3]\xc0\xb4\x9f \x0c\x97\xefA@\xc3\x87m\xe6k\xc3]\xc0\x8cr\x1fo\xa8\xefA@F\x977\x87k\xc3]\xc0\xef\xc8Xm\xfe\xefA@W\x02)\xb1k\xc3]\xc0\x9e\xb5\xdb.4\xf1A@\xd5\th""l\xc3]\xc0\x03\xd1\x932\xa9\xf1A@\xa5\x85\xcb*l\xc3]\xc0s-Z\x80\xb6\xf1A@\xe6tYLl\xc3]\xc0xADj\xda\xf1A@\x10""\x19rl\xc3]\xc0\xb3b\xb8:\x00\xf2A@5\xe1\xf2\xb3l\xc3]\xc0e\xee\x10\xb5#\xf2A@\xce\xea\xd3\xe0l\xc3]\xc0:\x16%2\xbd\xf2A@\xce\xbc\xc1\xbcl\xc3]\xc0\x0c[\x0eO\n\xf5A@\x05C\xb1pm\xc3]\xc0\xdf \x10\x9e\xbf\xf5A@7\x81\xe9\xb4n\xc3]\xc0\xfc1R\x94\xf0\xf6A@9\xf7\xb2Hn\xc3]\xc0\x0461n\xb4\xf7A@m5\xeb\x8co\xc3]\xc0x\xb1\xd5\x8a\xdb\xf8A@\xa41\xa4\xd4o\xc3]\xc0u\xee\x87\xe9\x8c\xf9A@:S\xd7\x90n\xc3]\xc0)\x07\xb3\t0\xfbA@\x03\x15\x9fLm\xc3]\xc0\xa1F|\x82\x1f\xfcA@\xcd`\x9dtl\xc3]\xc0\xcdDl\x0b*\xfdA@\x99d\xe4,l\xc3]\xc0Z\x9a\x00h9\xfdA@\xe0\x89\x0f\xa2k\xc3]\xc0\xa1\xb9\x98\xb0G\xfdA@\x99\xaf7\xd6j\xc3]\xc0\xf7\xe1\xc5gW\xfdA@:7m\xc6i\xc3]\xc0\xa1\xa6\xf1fh\xfdA@')"
184549563,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x00\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@\x19\xe4\xd3\x08""\xd5]\xc0\xa8\x02\xeey\xfe\xccA@\xf4u\xcfp9\xd5]\xc0$\x80\xf6~\xfe\xccA@\x80I*SL\xd5]\xc0\x89Eg\xf4\xfe\xccA@\x1a\x111\xcaX\xd5]\xc0\xd1\x0b\xd2\xe7\xfe\xccA@x\xb4q\xc4Z\xd5]\xc0\xe9M\xa0\xe3\xfe\xccA@')"
41501711,"bytearray(b'\x01\x02\x00\x00\x00H\x01\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@.\xfc\xe0|j\xc3]\xc0Z\xba\'\xb4Q\xe4A@\x00\x05\x17+j\xc3]\xc0\xc4B\xadi\xde\xe3A@:7m\xc6i\xc3]\xc0!\x08\x90\xa1c\xe3A@\x88\xeeY\xd7h\xc3]\xc0\xd6\xc9\x19\x8a;\xe2A@e\x18w\x83h\xc3]\xc0\xe6\x93\x15\xc3\xd5\xe1A@\x8f\xb1\xc9\xd0g\xc3]\xc0\x01\x82\xde\xc0\x89\xe1A@s\xe0\xd5rg\xc3]\xc0\xf0ne\x89\xce\xe0A@[\xcf\xb5\xd4f\xc3]\xc0(\xab3\x08\xbd\xe0A@$I\xc6 f\xc3]\xc0\x89@\x9aV\xaf\xe0A@\xf0\xc2\xd6le\xc3]\xc0\xd9b\x12\x
Query:
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM (
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE 
      w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w."geometry" IS NOT NULL
    LIMIT 1000
  ) w1
  JOIN (
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE 
      w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w."geometry" IS NOT NULL
    LIMIT 1000
  ) w2
    ON w1."id" < w2."id"
  WHERE ST_INTERSECTS(
    ST_GEOGRAPHYFROMWKB(w1."geometry"),
    ST_GEOGRAPHYFROMWKB(w2."geometry")
  )
) sub;
Answer:
number_of_pairs
0
Query:
SELECT w."id", w."all_tags"['bridge']::STRING AS "bridge_tag", w."geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
     "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
WHERE w."all_tags"['bridge'] IS NULL
  AND s."state_name" = 'California'
  AND ST_INTERSECTS(
        ST_GEOMETRYFROMWKB(w."geometry", 4326),
        ST_GEOMETRYFROMWKB(s."state_geom", 4326)
      )
LIMIT 1000
Answer:
Too long, hard cut:
id,bridge_tag,geometry
745915504,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\x9e!\xc1\xf9y$^\xc0X\t\xcc\xf9\x18|A@\xaa\xb8q\x8by$^\xc0}\xf9S\x99\x18|A@\xdb\xf7\xf2Ly$^\xc0\xa0YmY\x19|A@(\x1c\xd5Dz$^\xc04-\xb12\x1a|A@\x13}\x99\x83{$^\xc0\xb9\xd5\xbd_\x16|A@?\xd4l\xd4y$^\xc0\xae\xd1\x17\xe7\x14|A@o\xb7\xc9My$^\xc0N\xc3\xa6\x84\x16|A@!E\xf8rz$^\xc05\xc3W\x85\x17|A@\x9e!\xc1\xf9y$^\xc0X\t\xcc\xf9\x18|A@')
745915510,,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00`\xd2\xce\x1f\x89$^\xc0\xa8\xd8\x98\xd7\x11|A@h<\xb6\n\x87$^\xc0z\xfe\x0f\x0b\x10|A@\x8d\xa2\x07>\x86$^\xc0,A\xeb\x86\x12|A@\x858 S\x88$^\xc0[\x1btS\x14|A@`\xd2\xce\x1f\x89$^\xc0\xa8\xd8\x98\xd7\x11|A@')"
745915497,,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00@\xc67ow$^\xc0\xcb\xe7\xcb\xc1""|A@6\xf0\xa3\x1av$^\xc0lA\xef\x8d!|A@\xd6\x01\x10wu$^\xc0\x0c\x8f\xa2s#|A@\xe1\xd7\xa3\xcbv$^\xc0\xff\xf4U\xa8$|A@@\xc67ow$^\xc0\xcb\xe7\xcb\xc1""|A@')"
745915511,,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\xb3n\xcdg\x8a$^\xc0\x88p\x82%\r|A@1N2(\x89$^\xc0\xb7\xb2\x9f \x0c|A@\x8b\xf5W\xd9\x88$^\xc0\xca1\xfe""\r|A@8V\xbdW\x88$^\xc0\x88\xe6K\xb9\x0c|A@\x1b\x9c\xd2\x0b\x88$^\xc05*p\xb2\r|A@\x80J:o\x88$^\xc0\x9b\xc1\xce\x03\x0e|A@\xd2\xbe^\x06\x88$^\xc0\x8dU\x94\\\x0f|A@\r0\x98d\x89$^\xc0\xce\x86\xa1z\x10|A@\xb3n\xcdg\x8a$^\xc0\x88p\x82%\r|A@')"
745915514,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\xde\xa8_3\x8a$^\xc0k\xd3\xd8^\x0b|A@<$\xc6|\x8a$^\xc0\xca76\x96\x0b|A@\x94\x834\xbe\x8a$^\xc0\x95l+\xac\n|A@\xdd}\xe9H\x89$^\xc0=\xf9O\x92\t|A@\xa27&\xd5\x88$^\xc0H+\x08/\x0b|A@\xfc\xc1\n\x01\x8a$^\xc0A:\x86\x11\x0c|A@\xde\xa8_3\x8a$^\xc0k\xd3\xd8^\x0b|A@')
745915491,,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00[_\xc9\xfar$^\xc0}\xf7\xd8\xa7-|A@76\x96\x0bp$^\xc0at\xd4,+|A@W;\xd4\x00o$^\xc0*\r\xeb|.|A@\xf6)\xc7dq$^\xc0\xe1\xca~\x820|A@\xaf\x91n\x95q$^\xc0\xe6\x17%\xe8/|A@flC r$^\xc0L\xdd\x95]0|A@[_\xc9\xfar$^\xc0}\xf7\xd8\xa7-|A@')"
745915496,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00q\xc6\xd5mu$^\xc04\xeer\xb6%|A@\x95F\xcc\xecs$^\xc0\xb3q\xb3.$|A@\xe2p\xe6Ws$^\xc0]m \xb8%|A@\rR\xf0\x14r$^\xc0v\x11Ko$|A@\xef\r\xcf\\q$^\xc0\xab\x1e\xd5U&|A@\xa1\xac\xce t$^\xc0\x807\x93%)|A@q\xc6\xd5mu$^\xc04\xeer\xb6%|A@')
745915488,,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\xde]\xc2\xfcp$^\xc0\x18\x04\xa0\x9bG|A@W\xf3\x1c\x91o$^\xc0\xd5\xd2\x92}F|A@cE\xb2\xecn$^\xc0\xc9z\xc5\xaeH|A@&\xba\xd3Bn$^\xc0\xc3\xbd\x8d(H|A@\xec\xbb\xc7>m$^\xc0\xdf\x82\x11\xa0K|A@\xaf\xb1KTo$^\xc0\'qVDM|A@\xde]\xc2\xfcp$^\xc0\x18\x04\xa0\x9bG|A@"")"
745915507,,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00$\x80\xf6~~$^\xc0\xa17\xcb\x1b\x16|A@8\xf4\xbbU|$^\xc0\xf6\xdf9J\x14|A@\xa8\x84\'\xf4z$^\xc0\xedl~\xb2\x18|A@\x96\x10b\x1d}$^\xc0\x99\xc4\x0f\x84\x1a|A@$\x80\xf6~~$^\xc0\xa17\xcb\x1b\x16|A@"")"
745915509,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00v\xff\xb3A\x81$^\xc0n\xaf\xbb/\x1d|A@i\x00o\x81\x84$^\xc0%S\xaa\xe9\x1f|A@z7\x16\x14\x86$^\xc0\xb7\x95\x03\xe2\x1a|A@@\xf7\x8a\x13\x84$^\xc0v\xac\xad3\x19|A@\xce\xf6\x8dT\x84$^\xc0F\x14\xa4c\x18|A@\x176^\x15\x83$^\xc0<\x9a4W\x17|A@v\xff\xb3A\x81$^\xc0n\xaf\xbb/\x1d|A@')
745915499,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\x8f!\x008v$^\xc0\x90e\xc1\xc4\x1f|A@^\xdf\xe2<w$^\xc0\xc50\xcc\xae |A@px\xe6\x8aw$^\xc0%%\x98\xc5\x1f|A@\xd0\xa3\x98rt$^\xc0\x8c\xc8f\xfd\x1c|A@\xff*\xd1\xa3s$^\xc0s\x94\xcdf\x1f|A@\x9b\xa1\xa7\xb7u$^\xc0\xd7%\xf4D!|A@\x8f!\x008v$^\xc0\x90e\xc1\xc4\x1f|A@')
745915524,,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x003\xea\x10\xee\x84$^\xc0\x95\x1b\xfbH\x00|A@?\xe0\x81\x01\x84$^\xc0<2V\x9b\xff{A@\x8d!\xa5~\x83$^\xc0\xcaB*{\x01|A@\x82+4k\x84$^\xc0\x8el\xf8\'\x02|A@3\xea\x10\xee\x84$^\xc0\x95\x1b\xfbH\x00|A@"")"
745915486,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00R?\xb9\xb7l$^\xc01\xe2L]C|A@\xcaMy\x19j$^\xc0 \x978\xf2@|A@_U\x07\x8ai$^\xc0<\x06\xd0\x94B|A@N\x1b\xc4\xbdh$^\xc0\x01d\xe8\xd8A|A@\xfaM\x17\x18h$^\xc0\xba\xf3i\xbaC|A@\xac\xdbE=i$^\xc0\x84\xac]\xc9D|A@\xca\xc3B\xadi$^\xc0\xefN\xe3\x83C|A@\x1c\xa2\xc0\xf1k$^\xc0q\x83\xeb\x9bE|A@R?\xb9\xb7l$^\xc01\xe2L]C|A@')
745915489,,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\xe26dMv$^\xc0\xffK\x08\x0cH|A@\x17~p>u$^\xc0\xbdv\x1f6G|A@\x87d\xc8\xb1u$^\xc0<\xfa_\xaeE|A@\xcc\x06>\xabq$^\xc0\xf6\x11S}B|A@,@%\xf8p$^\xc0\xe3\xe2\xa8\xdcD|A@\xd6f\x08ls$^\xc0\xa6\xaa\x1a\xceF|A@\xe9\x19\xb1\x05s$^\xc0X}d)H|A@\xc5\tL\xa7u$^\xc0\xb02\xbf?J|A@\xe26dMv$^\xc0\xffK\x08\x0cH|A@')"
745915525,,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00f\x05\xd09\x89$^\xc0\xd6L\x08g\x01|A@2\x1d\x84\xca\x89$^\xc0\x83\x9c\x9cF\xff{A@,\xdcMK\x87$^\xc0=\x80E~\xfd{A@-$\x05\xbb\x86$^\xc0\x8f0\xb1\x9e\xff{A@f\x05\xd09\x89$^\xc0\xd6L\x08g\x01|A@')"
745915479,,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00 \xc0}xq$^\xc0vW\xd1zS|A@\xf1
Query:
SELECT w."id", w."nodes"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
LIMIT 1000
Answer:
Too long, hard cut:
id,nodes
173040551,"[
  {
    ""id"": 1838668185
  },
  {
    ""id"": 1838668181
  },
  {
    ""id"": 1838668180
  },
  {
    ""id"": 87858841
  },
  {
    ""id"": 88194718
  },
  {
    ""id"": 1838668176
  }
]"
173040548,"[
  {
    ""id"": 1838668177
  },
  {
    ""id"": 1838668178
  },
  {
    ""id"": 88623927
  },
  {
    ""id"": 88298455
  },
  {
    ""id"": 1838668175
  },
  {
    ""id"": 87919839
  },
  {
    ""id"": 88429304
  },
  {
    ""id"": 1838668174
  },
  {
    ""id"": 88474960
  },
  {
    ""id"": 88496672
  },
  {
    ""id"": 88915381
  },
  {
    ""id"": 88539904
  },
  {
    ""id"": 88954641
  }
]"
173040547,"[
  {
    ""id"": 1838668183
  },
  {
    ""id"": 1838668187
  },
  {
    ""id"": 88411534
  },
  {
    ""id"": 1838668189
  },
  {
    ""id"": 2474579817
  },
  {
    ""id"": 89411891
  },
  {
    ""id"": 88524028
  },
  {
    ""id"": 6594013791
  },
  {
    ""id"": 1838668200
  },
  {
    ""id"": 392496627
  },
  {
    ""id"": 1838668206
  }
]"
10674916,"[
  {
    ""id"": 89419435
  },
  {
    ""id"": 94555770
  },
  {
    ""id"": 94555771
  },
  {
    ""id"": 94555773
  },
  {
    ""id"": 94008743
  },
  {
    ""id"": 94555776
  },
  {
    ""id"": 94555777
  },
  {
    ""id"": 94555778
  },
  {
    ""id"": 94024064
  },
  {
    ""id"": 94555779
  },
  {
    ""id"": 94555780
  },
  {
    ""id"": 94555781
  },
  {
    ""id"": 94555784
  },
  {
    ""id"": 94555785
  },
  {
    ""id"": 94001720
  },
  {
    ""id"": 5121015985
  },
  {
    ""id"": 5121015986
  },
  {
    ""id"": 5121015987
  },
  {
    ""id"": 94555787
  },
  {
    ""id"": 94555788
  },
  {
    ""id"": 94555789
  },
  {
    ""id"": 94555790
  },
  {
    ""id"": 94555791
  },
  {
    ""id"": 94555792
  }
]"
242834036,"[
  {
    ""id"": 94555793
  },
  {
    ""id"": 94555794
  },
  {
    ""id"": 3037671617
  },
  {
    ""id"": 3037671618
  },
  {
    ""id"": 3037671620
  },
  {
    ""id"": 94555795
  },
  {
    ""id"": 94555796
  },
  {
    ""id"": 94555797
  },
  {
    ""id"": 94555798
  },
  {
    ""id"": 94555799
  },
  {
    ""id"": 94555800
  },
  {
    ""id"": 3037671622
  },
  {
    ""id"": 3037671623
  },
  {
    ""id"": 94555801
  },
  {
    ""id"": 3037671624
  },
  {
    ""id"": 94555802
  },
  {
    ""id"": 94555803
  },
  {
    ""id"": 94056505
  },
  {
    ""id"": 94555804
  },
  {
    ""id"": 94555805
  },
  {
    ""id"": 94555806
  },
  {
    ""id"": 94552771
  },
  {
    ""id"": 94555807
  },
  {
    ""id"": 94555808
  },
  {
    ""id"": 94555809
  },
  {
    ""id"": 94555810
  },
  {
    ""id"": 94555811
  },
  {
    ""id"": 94555812
  },
  {
    ""id"": 94555813
  },
  {
    ""id"": 94555814
  },
  {
    ""id"": 94555815
  },
  {
    ""id"": 94555816
  },
  {
    ""id"": 8675464814
  },
  {
    ""id"": 94031520
  },
  {
    ""id"": 94555817
  },
  {
    ""id"": 94555818
  }
]"
184549563,"[
  {
    ""id"": 88954641
  },
  {
    ""id"": 2466367062
  },
  {
    ""id"": 2466367063
  },
  {
    ""id"": 2466367064
  },
  {
    ""id"": 2466367065
  },
  {
    ""id"": 89039603
  }
]"
41501711,"[
  {
    ""id"": 89419435
  },
  {
    ""id"": 88319804
  },
  {
    ""id"": 89419434
  },
  {
    ""id"": 88319785
  },
  {
    ""id"": 89419433
  },
  {
    ""id"": 89419432
  },
  {
    ""id"": 89242729
  },
  {
    ""id"": 89419431
  },
  {
    ""id"": 89419430
  },
  {
    ""id"": 89419429
  },
  {
    ""id"": 89419428
  },
  {
    ""id"": 89419427
  },
  {
    ""id"": 89419425
  },
  {
    ""id"": 89419423
  },
  {
    ""id"": 89419421
  },
  {
    ""id"": 89419419
  },
  {
    ""id"": 89419417
  },
  {
    ""id"": 89419415
  },
  {
    ""id"": 89419412
  },
  {
    ""id"": 89419402
  },
  {
    ""id"": 89419400
  },
  {
    ""id"": 89419397
  },
  {
    ""id"": 89419394
  },
  {
    ""id"": 89419391
  },
  {
    ""id"": 89419389
  },
  {
    ""id"": 87958577
  },
  {
    ""id"": 89419386
  },
  {
    ""id"": 89419383
  },
  {
    ""id"": 89419382
  },
  {
    ""id"": 88540806
  },
  {
    ""id"": 88205040
  },
  {
    ""id"": 89419344
  },
  {
    ""id"": 89419342
  },
  {
    ""id"": 89419341
  },
  {
    ""id"": 89419339
  },
  {
    ""id"": 89419335
  },
  {
    ""id"": 89419333
  },
  {
    ""id"": 89419329
  },
  {
    ""id"": 89419326
  },
  {
    ""id"": 3977502996
  },
  {
    ""id"": 3977502995
  },
  {
    ""id"": 89419324
  },
  {
    ""id"": 88720806
  },
  {
    ""id"": 89419318
  },
  {
    ""id"": 89271860
  },
  {
    ""id"": 89419316
  },
  {
    ""id"": 89419313
  },
  {
    ""id"": 89419310
  },
  {
    ""id"": 89419308
  },
  {
    ""id"": 89419306
  },
  {
    ""id"": 89419304
  },
  {
    ""id"": 89419302
  },
  {
    ""id"": 89419300
  },
  {
    ""id"": 89419298
  },
  {
    ""id"": 88902187
  },
  {
    ""id"": 89419296
  },
  {
    ""id"": 89419294
  },
  {
    ""id"": 89419292
  },
  {
    ""id"": 89419290
  },
  {
    ""id"": 89419287
  },
  {
    ""id"": 89419285
  },
  {
    ""id"": 89419282
  },
  {
    ""id"": 89419281
  },
  {
    ""id"": 89419279
  },
  {
    ""id"": 89419277
  
Query:
SELECT w."id",
       w."all_tags"['highway']::STRING AS "highway_type",
       w."all_tags"['bridge']::STRING AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
LIMIT 1000
Answer:
Too long, hard cut:
id,highway_type,bridge_tag
173040551,,
173040548,,
173040547,,
10674916,,
242834036,,
184549563,,
41501711,,
211929584,,
196505970,,
420253598,,
306458161,,
172557065,,
10441459,,
10570561,,
329397904,,
329397905,,
614148150,,
10441460,,
167891278,,
167891286,,
10441474,,
268669674,,
988752632,,
172557067,,
854182808,,
988752631,,
988752640,,
167891268,,
432591061,,
988752635,,
988752630,,
988752634,,
988752638,,
119334084,,
115023390,,
128133647,,
215373337,,
416730752,,
211929583,,
215373338,,
527757555,,
119334044,,
27054486,,
119334050,,
922801797,,
416730770,,
119334023,,
674108455,,
674108452,,
435488138,,
435488159,,
119334087,,
10400404,,
306458163,,
306458175,,
306458178,,
10562019,,
10441397,,
115016149,,
345650208,,
306458186,,
720592801,,
720592802,,
720592803,,
306458181,,
16256056,,
117809218,,
33194954,,
184247603,,
16263509,,
261460910,,
268669675,,
268782634,,
268669673,,
268782631,,
306458158,,
306458157,,
306458159,,
306458160,,
306458155,,
306458156,,
242834035,,
420253599,,
10406392,,
215373335,,
215373336,,
172557070,,
988752636,,
432591052,,
988752639,,
178944703,,
527757553,,
115016200,,
306458184,,
160263703,,
268782632,,
268782633,,
173040552,,
173040550,,
173040549,,
42047223,,
119237663,,
119237652,,
806364008,,
172998476,,
614148157,,
614148186,,
614148189,,
614148156,,
178685971,,
178685967,,
184198340,,
178685970,,
178685966,,
178685973,,
178685974,,
178685969,,
184198337,,
178685956,,
716004770,,
716004900,,
970314297,,
835417674,,
716004764,,
970314300,,
751812640,,
716004898,,
184081688,,
716004771,,
835417673,,
970314299,,
970314298,,
184081700,,
716005664,,
186248362,,
42046405,,
184081692,,
716004901,,
42046402,,
119237655,,
716005662,,
172211747,,
172211755,,
60417032,,
253128477,,
60417191,,
435094876,,
435094874,,
184081598,,
185142210,,
106447192,,
119524714,,
184081698,,
106801230,,
751753003,,
751753002,,
184081694,,
119237654,,
184549524,,
60920112,,
844750910,,
60920183,,
844750920,,
184549516,,
60920256,,
844750906,,
844750922,,
172777678,,
64378425,,
30613315,,
435580191,,
106871218,,
33194941,,
33194942,,
106871216,,
186090924,,
206524851,,
175178755,,
206524855,,
206524854,,
41288977,,
175178758,,
614148188,,
806364007,,
614148167,,
48759000,,
614148165,,
419726772,,
48754610,,
48768739,,
36055571,,
36055569,,
173041187,,
48768736,,
48754613,,
48754623,,
48759039,,
246449638,,
117445687,,
48754621,,
117445694,,
867614403,,
867174737,,
435094863,,
10561000,,
435094864,,
60418055,,
32869993,,
435094862,,
60418057,,
32870277,,
435094866,,
188720945,,
751753004,,
60417029,,
751753005,,
867174736,,
60418170,,
435094861,,
867313404,,
867313401,,
867313403,,
32869991,,
32870280,,
60418168,,
253128480,,
60417602,,
751753009,,
66165269,,
751753008,,
60417498,,
751753007,,
184081657,,
188720933,,
184081651,,
45536127,,
106447194,,
170080273,,
184081618,,
170080277,,
185142209,,
172050957,,
106706501,,
106706503,,
106735170,,
10570562,,
115023385,,
306458174,,
306458171,,
306458173,,
171255338,,
306458166,,
306458169,,
306458172,,
306458165,,
306458170,,
778166637,,
306458162,,
27190718,,
119334077,,
346085717,,
346085707,,
184515005,,
115020617,,
306458167,,
525602185,,
525602182,,
178685962,,
178685961,,
178685963,,
178685960,,
178685964,,
178685958,,
106706502,,
106706500,,
173041190,,
806364005,,
42046404,,
42046406,,
178685957,,
178685959,,
253128478,,
32870276,,
172211751,,
435094875,,
435094873,,
172211745,,
106801329,,
106801242,,
60920245,,
844750921,,
844750911,,
232438352,,
844750907,,
844750923,,
64378435,,
64378426,,
64378423,,
64378429,,
30613302,,
30613316,,
41288907,,
175178757,,
175178756,,
41288978,,
206524852,,
206524853,,
806364006,,
48768740,,
48768738,,
173041186,,
419726773,,
48754633,,
48754628,,
48759038,,
48754625,,
48754634,,
48759043,,
106871212,,
106871211,,
253128479,,
188720938,,
60615868,,
188720941,,
32870279,,
60418175,,
32869992,,
60418167,,
60418056,,
60417598,,
172211742,,
60417031,,
435094867,,
32869990,,
106447196,,
106447193,,
172050955,,
172050956,,
306458164,,
171255346,,
115020618,,
16234409,,
186090931,,
306458185,,
16256106,,
186837200,,
16261077,,
322886707,,
210933416,,
196505960,,
60615708,,
10564867,,
184247605,,
60418461,,
346547493,,
867313400,,
60615707,,
60418479,,
60418460,,
16249605,,
210933437,,
210933402,,
210933429,,
210933415,,
322886708,,
322886709,,
33194946,,
574424565,,
210933419,,
841932509,,
44580796,,
73965789,,
175370308,,
175355315,,
72854930,,
72950236,,
72947355,,
72951344,,
72950740,,
527212979,,
857504156,,
73964711,,
329397918,,
329397919,,
73975726,,
73975239,,
75127005,,
75133252,,
75126854,,
75124656,,
75129487,,
75132484,,
75125164,,
75126666,,
75119572,,
75122001,,
75120999,,
75121771,,
75133436,,
75122590,,
75118668,,
75127336,,
75122302,,
73966595,,
73966225,,
73970011,,
73966592,,
75123472,,
73969462,,
73966393,,
73966165,,
73969363,,
73967189,,
73970989,,
73965813,,
73967411,,
73966508,,
73967834,,
73969091,,
75142119,,
75140704,,
75142576,,
75140850,,
72848399,,
72948282,,
72854282,,
7284
Query:
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM (
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    LIMIT 100
  ) w1
  CROSS JOIN (
    SELECT w."id", w."geometry"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    LIMIT 100
  ) w2
  WHERE w1."id" < w2."id"
    AND ST_INTERSECTS(
      ST_GEOMETRYFROMWKB(w1."geometry", 4326),
      ST_GEOMETRYFROMWKB(w2."geometry", 4326)
    )
) sub;
Answer:
number_of_pairs
98
Query:
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM (
    SELECT w."id", ST_GEOMETRYFROMWKB(w."geometry", 4326) AS geom
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w."geometry" IS NOT NULL
    LIMIT 100
  ) w1
  CROSS JOIN (
    SELECT w."id", ST_GEOMETRYFROMWKB(w."geometry", 4326) AS geom
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND w."geometry" IS NOT NULL
    LIMIT 100
  ) w2
  WHERE w1."id" < w2."id"
    AND ST_INTERSECTS(w1.geom, w2.geom)
) sub;
Answer:
number_of_pairs
0
Query:
SELECT COUNT(*) AS "number_of_pairs"
FROM (
  SELECT w1."id" AS "way_id_1", w2."id" AS "way_id_2"
  FROM (
    SELECT w."id", ST_GEOMETRYFROMWKB(w."geometry", 4326) AS geom
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."geometry" IS NOT NULL
    LIMIT 100
  ) w1
  CROSS JOIN (
    SELECT w."id", ST_GEOMETRYFROMWKB(w."geometry", 4326) AS geom
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    WHERE w."geometry" IS NOT NULL
    LIMIT 100
  ) w2
  WHERE w1."id" < w2."id"
    AND ST_INTERSECTS(w1.geom, w2.geom)
) sub;
Answer:
number_of_pairs
98
Query:
SELECT w."id", w."geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
WHERE w."geometry" IS NOT NULL
LIMIT 100
Answer:
Too long, hard cut:
id,geometry
173040551,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x000\xf9\x9f\xfc]\xcf]\xc0Mx\xae\x94\n\xcdA@\xe0\xa3Y4x\xcf]\xc0\x01\x7fB\x87\n\xcdA@\xbe\xa9\xa3>$\xd0]\xc0\xc6\xf6\xff\x16\t\xcdA@\x17\tm9\x97\xd0]\xc0\x91+\xf5,\x08\xcdA@\x9a[!\xac\xc6\xd0]\xc0\xcc]K\xc8\x07\xcdA@\xf9\xe1 !\xca\xd0]\xc0U\xe51\xb9\x07\xcdA@')"
173040548,"bytearray(b""\x01\x02\x00\x00\x00\r\x00\x00\x00\x05\x7f\xael\xd5\xd0]\xc0U\xe51\xb9\x07\xcdA@ \xd7<\xfd\xd6\xd0]\xc0\xd8\x95;\xd8\x07\xcdA@\xc7,{\x12\xd8\xd0]\xc0\xbb\xf2Y\x9e\x07\xcdA@\x87p\xcc\xb2\'\xd1]\xc0tF\x94\xf6\x06\xcdA@%\xcb\xeen\x8a\xd1]\xc0\\\x1ekF\x06\xcdA@\xb3\xce\xf8\xbe\xb8\xd1]\xc0\x86\xe5\xcf\xb7\x05\xcdA@\xd9\xed\xb3\xcaL\xd2]\xc0i\x00o\x81\x04\xcdA@\x04~\xe8\xdd\xb3\xd2]\xc04\xab-+\x03\xcdA@q\x1cx\xb5\xdc\xd2]\xc0\xec\x12\xd5[\x03\xcdA@\x14\xab\x06an\xd3]\xc0\xa0\xa9\xd7-\x02\xcdA@1\x84\x9c\xf7\xff\xd3]\xc0S@\xda\xff\x00\xcdA@\x1b\xbf\xf0J\x92\xd4]\xc0d\xdf\x15\xc1\xff\xccA@\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@"")"
173040547,"bytearray(b""\x01\x02\x00\x00\x00\x0b\x00\x00\x00\xc5\xe0\xabgR\xcf]\xc0\xd8-\xa7\xa9\n\xcdA@\x99\x94\'\xb5<\xcf]\xc00\x17LW\x0b\xcdA@\xf0f\xb2$\xe5\xce]\xc0*\xca\xa5\xf1\x0b\xcdA@\x1b^\xb5\xd7\xa7\xce]\xc04\x8c\xccm\x0c\xcdA@\xe7& \xdcS\xce]\xc0;\x1b\xf2\xcf\x0c\xcdA@m\xcf,\tP\xce]\xc0$\xd9#\xd4\x0c\xcdA@C\x8e\xadg\x08\xce]\xc0)\x96[Z\r\xcdA@y\xe2\x83\xe8\xda\xcd]\xc0/\xf7n\x98\r\xcdA@\xd1]\x12g\xc5\xcd]\xc0\x89\\\x15M\x0c\xcdA@\xcd\x9a\x0eS\x91\xcd]\xc0\xd1\xe68\xb7\t\xcdA@\x8a\x90_\xe4\x8a\xcd]\xc0NdA\xbc\t\xcdA@"")"
10674916,"bytearray(b'\x01\x02\x00\x00\x00\x18\x00\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@_\xab\xf3^k\xc3]\xc0@\xdd@\x81w\xe5A@d\xde\xf4xk\xc3]\xc0@,@\x80\xb1\xe5A@\x93\xbb\x19\x7fl\xc3]\xc0;\xac\xcb\x84\xba\xe6A@\xce\xbc\xc1\xbcl\xc3]\xc0vA\x8e\xf7\xf4\xe6A@\xcf\x18\xe6\x04m\xc3]\xc0\x84\x89\x9aC\xad\xe7A@\xc9\x9d-{m\xc3]\xc0rKPh\xfe\xe7A@\x04\x9f\xd5\xb8m\xc3]\xc0|\x7f\x83\xf6\xea\xe8A@:\xc9\xa0$n\xc3]\xc0\xc2\xd7|\x01b\xe9A@7\x81\xe9\xb4n\xc3]\xc0\x03\x16e\xdb\x0e\xeaA@n}\xa2\xfcn\xc3]\xc0:tz\xde\x8d\xeaA@W\xdc\x13\x7fo\xc3]\xc0T\xaf[\x04\xc6\xeaA@n\xd9\xc6Do\xc3]\xc0\x08k\xady\x9f\xebA@\xa3\x8d\xc8\x1cp\xc3]\xc0\x01\xd6O\xa4\xa0\xecA@\xd2j\xed""q\xc3]\xc0\xdbx\xc1\xf1\xc6\xedA@,\x9cI@q\xc3]\xc00\x19\xc7H\xf6\xedA@%\x83\xedqp\xc3]\xc0\xcb\xdeR\xce\x17\xeeA@\x1aQ5\xd5n\xc3]\xc0\xabO(\xfa2\xeeA@o\xcb\x91\xdfl\xc3]\xc0\x1e#4\xddF\xeeA@\xae\xb0\xcfRh\xc3]\xc0\x88\x164\x88j\xeeA@\xe0\xfe\\4d\xc3]\xc0\xa0\x08\x98\xaf\x81\xeeA@{\xfd\xa45a\xc3]\xc0\xbb\xd0\\\xa7\x91\xeeA@\xf9\xb4/E^\xc3]\xc0In\xa8s\xa0\xeeA@\xd1D\x8ecZ\xc3]\xc0\x93\xc8>\xc8\xb2\xeeA@')"
242834036,"bytearray(b'\x01\x02\x00\x00\x00$\x00\x00\x00\xf0cq\xa4X\xc3]\xc0;\xfc\x7f\xe6\xbd\xeeA@\\\xadnPV\xc3]\xc0\x14T\xf9C\xd8\xeeA@\x0b\xb2\xaf\x86U\xc3]\xc0\xd5&\xa9\xa7\xea\xeeA@\xc20`\xc9U\xc3]\xc0b\xe6\x96\xb1\xfc\xeeA@\t\xda\x897W\xc3]\xc0_\x95\xb0\xdb\x0c\xefA@\xcd.\xce\xceX\xc3]\xc0]\xba\x93\x99\x1c\xefA@%\xc7\xe7_\\\xc3]\xc0\xb7E\x99\r2\xefA@v\x15\xf7\xc4_\xc3]\xc0\xcd\xd4$xC\xefA@J\xfd\x067c\xc3]\xc0\xca\xc5\xbd\x9eT\xefA@\xf0\x1e\xfb\xb4e\xc3]\xc0\xbbB\x1f,c\xefA@A\x8aK\x9fg\xc3]\xc0\xaf\x8390o\xefA@5\x07\x08\xe6h\xc3]\xc0\xdb\x11\x98\x98x\xefA@\x82\xb5 Jj\xc3]\xc0\x87r\xa2]\x85\xefA@\xac\x8dVZk\xc3]\xc0\xb4\x9f \x0c\x97\xefA@\xc3\x87m\xe6k\xc3]\xc0\x8cr\x1fo\xa8\xefA@F\x977\x87k\xc3]\xc0\xef\xc8Xm\xfe\xefA@W\x02)\xb1k\xc3]\xc0\x9e\xb5\xdb.4\xf1A@\xd5\th""l\xc3]\xc0\x03\xd1\x932\xa9\xf1A@\xa5\x85\xcb*l\xc3]\xc0s-Z\x80\xb6\xf1A@\xe6tYLl\xc3]\xc0xADj\xda\xf1A@\x10""\x19rl\xc3]\xc0\xb3b\xb8:\x00\xf2A@5\xe1\xf2\xb3l\xc3]\xc0e\xee\x10\xb5#\xf2A@\xce\xea\xd3\xe0l\xc3]\xc0:\x16%2\xbd\xf2A@\xce\xbc\xc1\xbcl\xc3]\xc0\x0c[\x0eO\n\xf5A@\x05C\xb1pm\xc3]\xc0\xdf \x10\x9e\xbf\xf5A@7\x81\xe9\xb4n\xc3]\xc0\xfc1R\x94\xf0\xf6A@9\xf7\xb2Hn\xc3]\xc0\x0461n\xb4\xf7A@m5\xeb\x8co\xc3]\xc0x\xb1\xd5\x8a\xdb\xf8A@\xa41\xa4\xd4o\xc3]\xc0u\xee\x87\xe9\x8c\xf9A@:S\xd7\x90n\xc3]\xc0)\x07\xb3\t0\xfbA@\x03\x15\x9fLm\xc3]\xc0\xa1F|\x82\x1f\xfcA@\xcd`\x9dtl\xc3]\xc0\xcdDl\x0b*\xfdA@\x99d\xe4,l\xc3]\xc0Z\x9a\x00h9\xfdA@\xe0\x89\x0f\xa2k\xc3]\xc0\xa1\xb9\x98\xb0G\xfdA@\x99\xaf7\xd6j\xc3]\xc0\xf7\xe1\xc5gW\xfdA@:7m\xc6i\xc3]\xc0\xa1\xa6\xf1fh\xfdA@')"
184549563,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x00\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@\x19\xe4\xd3\x08""\xd5]\xc0\xa8\x02\xeey\xfe\xccA@\xf4u\xcfp9\xd5]\xc0$\x80\xf6~\xfe\xccA@\x80I*SL\xd5]\xc0\x89Eg\xf4\xfe\xccA@\x1a\x111\xcaX\xd5]\xc0\xd1\x0b\xd2\xe7\xfe\xccA@x\xb4q\xc4Z\xd5]\xc0\xe9M\xa0\xe3\xfe\xccA@')"
41501711,"bytearray(b'\x01\x02\x00\x00\x00H\x01\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@.\xfc\xe0|j\xc3]\xc0Z\xba\'\xb4Q\xe4A@\x00\x05\x17+j\xc3]\xc0\xc4B\xadi\xde\xe3A@:7m\xc6i\xc3]\xc0!\x08\x90\xa1c\xe3A@\x88\xeeY\xd7h\xc3]\xc0\xd6\xc9\x19\x8a;\xe2A@e\x18w\x83h\xc3]\xc0\xe6\x93\x15\xc3\xd5\xe1A@\x8f\xb1\xc9\xd0g\xc3]\xc0\x01\x82\xde\xc0\x89\xe1A@s\xe0\xd5rg\xc3]\xc0\xf0ne\x89\xce\xe0A@[\xcf\xb5\xd4f\xc3]\xc0(\xab3\x08\xbd\xe0A@$I\xc6 f\xc3]\xc0\x89@\x9aV\xaf\xe0A@\xf0\xc2\xd6le\xc3]\xc0\xd9b\x12\x
Query:
SELECT 
  COALESCE(w."all_tags"['bridge']::STRING, 'no') AS "bridge_tag",
  COUNT(DISTINCT w."id") AS "road_count"
FROM (
  SELECT *
  FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
  WHERE w."geometry" IS NOT NULL
  LIMIT 1000
) w
GROUP BY 1
LIMIT 100;
Answer:
bridge_tag,road_count
no,1000
Query:
SELECT w."id", w."nodes"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
WHERE w."nodes" IS NOT NULL
LIMIT 100
Answer:
Too long, hard cut:
id,nodes
745915504,"[
  {
    ""id"": 6981008133
  },
  {
    ""id"": 6981008132
  },
  {
    ""id"": 6981008131
  },
  {
    ""id"": 6981008130
  },
  {
    ""id"": 6981008129
  },
  {
    ""id"": 6981008128
  },
  {
    ""id"": 6981008127
  },
  {
    ""id"": 6981008126
  },
  {
    ""id"": 6981008133
  }
]"
745915510,"[
  {
    ""id"": 6981008163
  },
  {
    ""id"": 6981008162
  },
  {
    ""id"": 6981008161
  },
  {
    ""id"": 6981008160
  },
  {
    ""id"": 6981008163
  }
]"
745915497,"[
  {
    ""id"": 6981008091
  },
  {
    ""id"": 6981008090
  },
  {
    ""id"": 6981008089
  },
  {
    ""id"": 6981008088
  },
  {
    ""id"": 6981008091
  }
]"
745915511,"[
  {
    ""id"": 6981008171
  },
  {
    ""id"": 6981008170
  },
  {
    ""id"": 6981008169
  },
  {
    ""id"": 6981008168
  },
  {
    ""id"": 6981008167
  },
  {
    ""id"": 6981008166
  },
  {
    ""id"": 6981008165
  },
  {
    ""id"": 6981008164
  },
  {
    ""id"": 6981008171
  }
]"
745915514,"[
  {
    ""id"": 6981008193
  },
  {
    ""id"": 6981008192
  },
  {
    ""id"": 6981008191
  },
  {
    ""id"": 6981008190
  },
  {
    ""id"": 6981008189
  },
  {
    ""id"": 6981008188
  },
  {
    ""id"": 6981008193
  }
]"
745915491,"[
  {
    ""id"": 6981008063
  },
  {
    ""id"": 6981008062
  },
  {
    ""id"": 6981008061
  },
  {
    ""id"": 6981008060
  },
  {
    ""id"": 6981008059
  },
  {
    ""id"": 6981008058
  },
  {
    ""id"": 6981008063
  }
]"
745915496,"[
  {
    ""id"": 6981008087
  },
  {
    ""id"": 6981008086
  },
  {
    ""id"": 6981008085
  },
  {
    ""id"": 6981008084
  },
  {
    ""id"": 6981008083
  },
  {
    ""id"": 6981008082
  },
  {
    ""id"": 6981008087
  }
]"
745915488,"[
  {
    ""id"": 6981008037
  },
  {
    ""id"": 6981008036
  },
  {
    ""id"": 6981008035
  },
  {
    ""id"": 6981008034
  },
  {
    ""id"": 6981008033
  },
  {
    ""id"": 6981008032
  },
  {
    ""id"": 6981008037
  }
]"
745915507,"[
  {
    ""id"": 6981008147
  },
  {
    ""id"": 6981008146
  },
  {
    ""id"": 6981008145
  },
  {
    ""id"": 6981008144
  },
  {
    ""id"": 6981008147
  }
]"
745915509,"[
  {
    ""id"": 6981008159
  },
  {
    ""id"": 6981008158
  },
  {
    ""id"": 6981008157
  },
  {
    ""id"": 6981008156
  },
  {
    ""id"": 6981008155
  },
  {
    ""id"": 6981008154
  },
  {
    ""id"": 6981008159
  }
]"
745915499,"[
  {
    ""id"": 6981008101
  },
  {
    ""id"": 6981008100
  },
  {
    ""id"": 6981008099
  },
  {
    ""id"": 6981008098
  },
  {
    ""id"": 6981008097
  },
  {
    ""id"": 6981008096
  },
  {
    ""id"": 6981008101
  }
]"
745915524,"[
  {
    ""id"": 6981008244
  },
  {
    ""id"": 6981008243
  },
  {
    ""id"": 6981008242
  },
  {
    ""id"": 6981008241
  },
  {
    ""id"": 6981008244
  }
]"
745915486,"[
  {
    ""id"": 6981008021
  },
  {
    ""id"": 6981008020
  },
  {
    ""id"": 6981008019
  },
  {
    ""id"": 6981008018
  },
  {
    ""id"": 6981008017
  },
  {
    ""id"": 6981008016
  },
  {
    ""id"": 6981008015
  },
  {
    ""id"": 6981008014
  },
  {
    ""id"": 6981008021
  }
]"
745915489,"[
  {
    ""id"": 6981008045
  },
  {
    ""id"": 6981008044
  },
  {
    ""id"": 6981008043
  },
  {
    ""id"": 6981008042
  },
  {
    ""id"": 6981008041
  },
  {
    ""id"": 6981008040
  },
  {
    ""id"": 6981008039
  },
  {
    ""id"": 6981008038
  },
  {
    ""id"": 6981008045
  }
]"
745915525,"[
  {
    ""id"": 6981008248
  },
  {
    ""id"": 6981008247
  },
  {
    ""id"": 6981008246
  },
  {
    ""id"": 6981008245
  },
  {
    ""id"": 6981008248
  }
]"
745915479,"[
  {
    ""id"": 6980996677
  },
  {
    ""id"": 6980996676
  },
  {
    ""id"": 6980996675
  },
  {
    ""id"": 6980996674
  },
  {
    ""id"": 6980996677
  }
]"
745915520,"[
  {
    ""id"": 6981008221
  },
  {
    ""id"": 6981008220
  },
  {
    ""id"": 6981008219
  },
  {
    ""id"": 6981008218
  },
  {
    ""id"": 6981008221
  }
]"
745915505,"[
  {
    ""id"": 6981008139
  },
  {
    ""id"": 6981008138
  },
  {
    ""id"": 6981008137
  },
  {
    ""id"": 6981008136
  },
  {
    ""id"": 6981008135
  },
  {
    ""id"": 6981008134
  },
  {
    ""id"": 6981008139
  }
]"
745915521,"[
  {
    ""id"": 6981008229
  },
  {
    ""id"": 6981008228
  },
  {
    ""id"": 6981008227
  },
  {
    ""id"": 6981008226
  },
  {
    ""id"": 6981008225
  },
  {
    ""id"": 6981008224
  },
  {
    ""id"": 6981008223
  },
  {
    ""id"": 6981008222
  },
  {
    ""id"": 6981008229
  }
]"
286363110,"[
  {
    ""id"": 2900197843
  },
  {
    ""id"": 2193277414
  },
  {
    ""id"": 2193277135
  },
  {
    ""id"": 2900197844
  },
  {
    ""id"": 2900197843
  }
]"
160134741,"[
  {
    ""id"": 1722067981
  },
  {
    ""id"": 1722067961
  },
  {
    ""id"": 1722067957
  },
  {
    ""id"": 1722067939
  },
  {
    ""id"": 1722067937
  },
  {
    ""id"": 1722067969
  },
  {
    ""id"": 1722067981
  }
]"
160134747,"[
  {
    ""id"": 1722068044
  },
  {
    ""id"": 1722068034
  },
  {
    ""id"": 1722068013
  },
  {
    ""id"": 1722068027
  },
  {
    ""id"": 1722068
End Exploring Related Columns
Task: How many different pairs of roads classified as motorway, trunk, primary, secondary, or residential in California overlap each other without sharing nodes and do not have a bridge tag, where these roads are tagged with 'highway', analyzed through planet ways

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
number_of_pairs
value:int
(Attention: answer in one row)
```

The number of different pairs of roads in California classified as motorway, trunk, primary, secondary, or residential that overlap each other without sharing nodes and do not have a bridge tag is represented above. This count reflects the pairs of roads tagged with 'highway' in the `PLANET_WAYS` table, meeting the specified criteria..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'GEO_OPENSTREETMAP_BOUNDARIES': {'GEO_OPENSTREETMAP': ['HISTORY_CHANGESETS', 'HISTORY_LAYERS', 'HISTORY_NODES', 'HISTORY_RELATIONS', 'PLANET_FEATURES', 'PLANET_FEATURES_POINTS', 'PLANET_LAYERS', 'PLANET_NODES', 'PLANET_RELATIONS', 'PLANET_WAYS'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'ADJACENT_STATES', 'CBSA', 'CNECTA', 'COASTLINE', 'CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116', 'COUNTIES', 'CSA', 'METROPOLITAN_DIVISIONS', 'NATIONAL_OUTLINE', 'NWS_FORECAST_REGIONS', 'RAILWAYS', 'STATES', 'URBAN_AREAS', 'ZIP_CODES']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.

2025-01-19 23:10:42 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:10:42 - root - INFO - ```sql
WITH california_state AS (
    SELECT ST_GEOGRAPHYFROMWKB(s."state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_in_california AS (
    SELECT
        w."id",
        ST_GEOGRAPHYFROMWKB(w."geometry") AS "geom",
        w."nodes"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         california_state s
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR w."all_tags"['bridge']::STRING = 'no')
      AND ST_INTERSECTS(
          ST_GEOGRAPHYFROMWKB(w."geometry"),
          s."geom"
      )
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1."nodes", w2."nodes")) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;
```
2025-01-19 23:10:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:10:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:10:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:10:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:10:44 - snowflake.connector.connection - INFO - closed
2025-01-19 23:10:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:10:45 - root - INFO - itercount: 1
2025-01-19 23:10:45 - root - INFO - 0
2025-01-19 23:10:45 - root - INFO - results: 
number_of_pairs
0


2025-01-19 23:10:45 - root - INFO - Please check the answer again by reviewing How many different pairs of roads classified as motorway, trunk, primary, secondary, or residential in California overlap each other without sharing nodes and do not have a bridge tag, where these roads are tagged with 'highway', analyzed through planet ways, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
number_of_pairs
value:int
(Attention: answer in one row)
```

The number of different pairs of roads in California classified as motorway, trunk, primary, secondary, or residential that overlap each other without sharing nodes and do not have a bridge tag is represented above. This count reflects the pairs of roads tagged with 'highway' in the `PLANET_WAYS` table, meeting the specified criteria. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
number_of_pairs
0
Current sql:
WITH california_state AS (
    SELECT ST_GEOGRAPHYFROMWKB(s."state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_in_california AS (
    SELECT
        w."id",
        ST_GEOGRAPHYFROMWKB(w."geometry") AS "geom",
        w."nodes"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         california_state s
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR w."all_tags"['bridge']::STRING = 'no')
      AND ST_INTERSECTS(
          ST_GEOGRAPHYFROMWKB(w."geometry"),
          s."geom"
      )
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1."nodes", w2."nodes")) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;Empty results in Column ['number_of_pairs']. Please correct them.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:11:16 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:11:16 - root - INFO - ```sql
WITH california_state AS (
    SELECT ST_GEOGRAPHYFROMWKB(s."state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_in_california AS (
    SELECT
        w."id",
        ST_GEOGRAPHYFROMWKB(w."geometry") AS "geom",
        w."nodes"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         california_state s
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR w."all_tags"['bridge']::STRING = 'no')
      AND ST_INTERSECTS(
          ST_GEOGRAPHYFROMWKB(w."geometry"),
          s."geom"
      )
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1."nodes", w2."nodes")) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;
```
2025-01-19 23:11:16 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:11:16 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:11:16 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:11:17 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:11:17 - snowflake.connector.connection - INFO - closed
2025-01-19 23:11:17 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:11:17 - root - INFO - itercount: 2
2025-01-19 23:11:17 - root - INFO - 0
2025-01-19 23:11:17 - root - INFO - results: 
number_of_pairs
0


2025-01-19 23:11:17 - root - INFO - Please check the answer again by reviewing How many different pairs of roads classified as motorway, trunk, primary, secondary, or residential in California overlap each other without sharing nodes and do not have a bridge tag, where these roads are tagged with 'highway', analyzed through planet ways, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
number_of_pairs
value:int
(Attention: answer in one row)
```

The number of different pairs of roads in California classified as motorway, trunk, primary, secondary, or residential that overlap each other without sharing nodes and do not have a bridge tag is represented above. This count reflects the pairs of roads tagged with 'highway' in the `PLANET_WAYS` table, meeting the specified criteria. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
number_of_pairs
0
Current sql:
WITH california_state AS (
    SELECT ST_GEOGRAPHYFROMWKB(s."state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_in_california AS (
    SELECT
        w."id",
        ST_GEOGRAPHYFROMWKB(w."geometry") AS "geom",
        w."nodes"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         california_state s
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR w."all_tags"['bridge']::STRING = 'no')
      AND ST_INTERSECTS(
          ST_GEOGRAPHYFROMWKB(w."geometry"),
          s."geom"
      )
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1."nodes", w2."nodes")) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;Empty results in Column ['number_of_pairs']. Please correct them.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:12:33 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:12:33 - root - INFO - ```sql
WITH california_state AS (
    SELECT ST_GEOGFROMWKB(s."state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOGFROMWKB(w."geometry") AS "geom",
        ARRAY_AGG(n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         TABLE(FLATTEN(input => w."nodes")) n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR w."all_tags"['bridge']::STRING = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;
```
2025-01-19 23:12:33 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:12:33 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:12:33 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:12:35 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:12:35 - snowflake.connector.connection - INFO - closed
2025-01-19 23:12:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:12:35 - root - INFO - itercount: 3
2025-01-19 23:12:35 - root - INFO - 0
2025-01-19 23:12:35 - root - INFO - results: 
number_of_pairs
0


2025-01-19 23:12:35 - root - INFO - Please check the answer again by reviewing How many different pairs of roads classified as motorway, trunk, primary, secondary, or residential in California overlap each other without sharing nodes and do not have a bridge tag, where these roads are tagged with 'highway', analyzed through planet ways, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
number_of_pairs
value:int
(Attention: answer in one row)
```

The number of different pairs of roads in California classified as motorway, trunk, primary, secondary, or residential that overlap each other without sharing nodes and do not have a bridge tag is represented above. This count reflects the pairs of roads tagged with 'highway' in the `PLANET_WAYS` table, meeting the specified criteria. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
number_of_pairs
0
Current sql:
WITH california_state AS (
    SELECT ST_GEOGFROMWKB(s."state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOGFROMWKB(w."geometry") AS "geom",
        ARRAY_AGG(n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         TABLE(FLATTEN(input => w."nodes")) n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR w."all_tags"['bridge']::STRING = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;Empty results in Column ['number_of_pairs']. Please correct them.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:13:44 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:13:44 - root - INFO - ```sql
WITH california_state AS (
    SELECT ST_GEOGRAPHYFROMWKB(s."state_geom", 4326) AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOGRAPHYFROMWKB(w."geometry", 4326) AS "geom",
        ARRAY_AGG(n.value["id"]::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         TABLE(FLATTEN(input => w."nodes")) n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR w."all_tags"['bridge']::STRING = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;
```
2025-01-19 23:13:44 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:13:44 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:13:44 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:13:46 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:13:46 - snowflake.connector.connection - INFO - closed
2025-01-19 23:13:46 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:13:46 - root - INFO - itercount: 4
2025-01-19 23:13:46 - root - INFO - 0
2025-01-19 23:13:46 - root - INFO - results: 
number_of_pairs
0


2025-01-19 23:13:46 - root - INFO - Please check the answer again by reviewing How many different pairs of roads classified as motorway, trunk, primary, secondary, or residential in California overlap each other without sharing nodes and do not have a bridge tag, where these roads are tagged with 'highway', analyzed through planet ways, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
number_of_pairs
value:int
(Attention: answer in one row)
```

The number of different pairs of roads in California classified as motorway, trunk, primary, secondary, or residential that overlap each other without sharing nodes and do not have a bridge tag is represented above. This count reflects the pairs of roads tagged with 'highway' in the `PLANET_WAYS` table, meeting the specified criteria. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
number_of_pairs
0
Current sql:
WITH california_state AS (
    SELECT ST_GEOGRAPHYFROMWKB(s."state_geom", 4326) AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOGRAPHYFROMWKB(w."geometry", 4326) AS "geom",
        ARRAY_AGG(n.value["id"]::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         TABLE(FLATTEN(input => w."nodes")) n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR w."all_tags"['bridge']::STRING = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;Empty results in Column ['number_of_pairs']. Please correct them.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:14:23 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:14:23 - root - INFO - ```sql
WITH california_state AS (
    SELECT ST_GEOGRAPHYFROMWKB(s."state_geom", 4326) AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOGRAPHYFROMWKB(w."geometry", 4326) AS "geom",
        ARRAY_AGG(n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         TABLE(FLATTEN(input => w."nodes")) n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR w."all_tags"['bridge']::STRING = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;
```
2025-01-19 23:14:23 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:14:23 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:14:23 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:14:25 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:14:25 - snowflake.connector.connection - INFO - closed
2025-01-19 23:14:25 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:14:25 - root - INFO - itercount: 5
2025-01-19 23:14:25 - root - INFO - 0
2025-01-19 23:14:25 - root - INFO - results: 
number_of_pairs
0


2025-01-19 23:14:25 - root - INFO - Please check the answer again by reviewing How many different pairs of roads classified as motorway, trunk, primary, secondary, or residential in California overlap each other without sharing nodes and do not have a bridge tag, where these roads are tagged with 'highway', analyzed through planet ways, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
number_of_pairs
value:int
(Attention: answer in one row)
```

The number of different pairs of roads in California classified as motorway, trunk, primary, secondary, or residential that overlap each other without sharing nodes and do not have a bridge tag is represented above. This count reflects the pairs of roads tagged with 'highway' in the `PLANET_WAYS` table, meeting the specified criteria. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
number_of_pairs
0
Current sql:
WITH california_state AS (
    SELECT ST_GEOGRAPHYFROMWKB(s."state_geom", 4326) AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOGRAPHYFROMWKB(w."geometry", 4326) AS "geom",
        ARRAY_AGG(n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         TABLE(FLATTEN(input => w."nodes")) n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR w."all_tags"['bridge']::STRING = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;Empty results in Column ['number_of_pairs']. Please correct them.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:15:22 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:15:22 - root - INFO - ```sql
WITH california_state AS (
    SELECT ST_GEOGRAPHYFROMWKB(s."state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOGRAPHYFROMWKB(w."geometry") AS "geom",
        ARRAY_AGG(DISTINCT n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         TABLE(FLATTEN(input => w."nodes")) n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR w."all_tags"['bridge']::STRING = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;
```
2025-01-19 23:15:22 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:15:22 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:15:22 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:15:24 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:15:24 - snowflake.connector.connection - INFO - closed
2025-01-19 23:15:25 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:15:25 - root - INFO - itercount: 6
2025-01-19 23:15:25 - root - INFO - 0
2025-01-19 23:15:25 - root - INFO - results: 
number_of_pairs
0


2025-01-19 23:15:25 - root - INFO - Please check the answer again by reviewing How many different pairs of roads classified as motorway, trunk, primary, secondary, or residential in California overlap each other without sharing nodes and do not have a bridge tag, where these roads are tagged with 'highway', analyzed through planet ways, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
number_of_pairs
value:int
(Attention: answer in one row)
```

The number of different pairs of roads in California classified as motorway, trunk, primary, secondary, or residential that overlap each other without sharing nodes and do not have a bridge tag is represented above. This count reflects the pairs of roads tagged with 'highway' in the `PLANET_WAYS` table, meeting the specified criteria. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
number_of_pairs
0
Current sql:
WITH california_state AS (
    SELECT ST_GEOGRAPHYFROMWKB(s."state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOGRAPHYFROMWKB(w."geometry") AS "geom",
        ARRAY_AGG(DISTINCT n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         TABLE(FLATTEN(input => w."nodes")) n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR w."all_tags"['bridge']::STRING = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;Empty results in Column ['number_of_pairs']. Please correct them.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:16:24 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:16:24 - root - INFO - ```sql
WITH california_state AS (
    SELECT ST_GEOGFROMWKB(s."state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOGFROMWKB(w."geometry") AS "geom",
        ARRAY_AGG(DISTINCT n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         TABLE(FLATTEN(input => w."nodes")) n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR LOWER(w."all_tags"['bridge']::STRING) = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;
```
2025-01-19 23:16:24 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:16:24 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:16:24 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:16:25 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:16:25 - snowflake.connector.connection - INFO - closed
2025-01-19 23:16:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:16:26 - root - INFO - itercount: 7
2025-01-19 23:16:26 - root - INFO - 0
2025-01-19 23:16:26 - root - INFO - results: 
number_of_pairs
0


2025-01-19 23:16:26 - root - INFO - Please check the answer again by reviewing How many different pairs of roads classified as motorway, trunk, primary, secondary, or residential in California overlap each other without sharing nodes and do not have a bridge tag, where these roads are tagged with 'highway', analyzed through planet ways, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
number_of_pairs
value:int
(Attention: answer in one row)
```

The number of different pairs of roads in California classified as motorway, trunk, primary, secondary, or residential that overlap each other without sharing nodes and do not have a bridge tag is represented above. This count reflects the pairs of roads tagged with 'highway' in the `PLANET_WAYS` table, meeting the specified criteria. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
number_of_pairs
0
Current sql:
WITH california_state AS (
    SELECT ST_GEOGFROMWKB(s."state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
    LIMIT 1
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOGFROMWKB(w."geometry") AS "geom",
        ARRAY_AGG(DISTINCT n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         TABLE(FLATTEN(input => w."nodes")) n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR LOWER(w."all_tags"['bridge']::STRING) = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;Empty results in Column ['number_of_pairs']. Please correct them.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:17:02 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:17:02 - root - INFO - ```sql
WITH california_state AS (
    SELECT ST_GEOMETRYFROMWKB(s."state_geom", 4326) AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOMETRYFROMWKB(w."geometry", 4326) AS "geom",
        ARRAY_AGG(DISTINCT n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    LEFT JOIN TABLE(FLATTEN(input => w."nodes")) n ON TRUE
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR LOWER(w."all_tags"['bridge']::STRING) = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;
```
2025-01-19 23:17:02 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:17:02 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:17:02 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:17:03 - snowflake.connector.connection - INFO - closed
2025-01-19 23:17:03 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:17:03 - root - INFO - itercount: 8
2025-01-19 23:17:03 - root - INFO - 000002 (0A000): 01b9d355-0004-7d02-0001-11c300f01c86: Unsupported feature 'lateral table function called with OUTER JOIN syntax or a join predicate (ON clause)'.
2025-01-19 23:17:03 - root - INFO - Input sql:
WITH california_state AS (
    SELECT ST_GEOMETRYFROMWKB(s."state_geom", 4326) AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOMETRYFROMWKB(w."geometry", 4326) AS "geom",
        ARRAY_AGG(DISTINCT n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w
    LEFT JOIN TABLE(FLATTEN(input => w."nodes")) n ON TRUE
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR LOWER(w."all_tags"['bridge']::STRING) = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;
The error information is:
000002 (0A000): 01b9d355-0004-7d02-0001-11c300f01c86: Unsupported feature 'lateral table function called with OUTER JOIN syntax or a join predicate (ON clause)'.
Please correct it and output only 1 complete SQL query.Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:17:31 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:17:31 - root - INFO - ```sql
WITH california_state AS (
    SELECT ST_GEOMETRYFROMWKB(s."state_geom", 4326) AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOMETRYFROMWKB(w."geometry", 4326) AS "geom",
        ARRAY_AGG(DISTINCT n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         LATERAL FLATTEN(input => w."nodes") n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR LOWER(w."all_tags"['bridge']::STRING) = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;
```
2025-01-19 23:17:31 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:17:31 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:17:31 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:17:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:17:33 - snowflake.connector.connection - INFO - closed
2025-01-19 23:17:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:17:33 - root - INFO - itercount: 9
2025-01-19 23:17:33 - root - INFO - 0
2025-01-19 23:17:33 - root - INFO - results: 
number_of_pairs
0


2025-01-19 23:17:33 - root - INFO - Please check the answer again by reviewing How many different pairs of roads classified as motorway, trunk, primary, secondary, or residential in California overlap each other without sharing nodes and do not have a bridge tag, where these roads are tagged with 'highway', analyzed through planet ways, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
number_of_pairs
value:int
(Attention: answer in one row)
```

The number of different pairs of roads in California classified as motorway, trunk, primary, secondary, or residential that overlap each other without sharing nodes and do not have a bridge tag is represented above. This count reflects the pairs of roads tagged with 'highway' in the `PLANET_WAYS` table, meeting the specified criteria. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
number_of_pairs
0
Current sql:
WITH california_state AS (
    SELECT ST_GEOMETRYFROMWKB(s."state_geom", 4326) AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOMETRYFROMWKB(w."geometry", 4326) AS "geom",
        ARRAY_AGG(DISTINCT n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         LATERAL FLATTEN(input => w."nodes") n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR LOWER(w."all_tags"['bridge']::STRING) = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;Empty results in Column ['number_of_pairs']. Please correct them.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:17:59 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:17:59 - root - INFO - ```sql
WITH california_state AS (
    SELECT ST_GEOGRAPHYFROMWKB(s."state_geom", 4326) AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES" s
    WHERE s."state_name" = 'California'
),
roads_with_nodes AS (
    SELECT
        w."id",
        ST_GEOGRAPHYFROMWKB(w."geometry", 4326) AS "geom",
        ARRAY_AGG(DISTINCT n.value:"id"::NUMBER) AS node_ids
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" w,
         LATERAL FLATTEN(input => w."nodes") n
    WHERE w."geometry" IS NOT NULL
      AND w."nodes" IS NOT NULL
      AND w."all_tags"['highway']::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (w."all_tags"['bridge'] IS NULL OR LOWER(w."all_tags"['bridge']::STRING) = 'no')
    GROUP BY w."id", w."geometry"
),
roads_in_california AS (
    SELECT w.*
    FROM roads_with_nodes w
    CROSS JOIN california_state s
    WHERE ST_INTERSECTS(w."geom", s."geom")
),
pairs AS (
    SELECT
        w1."id" AS "way_id_1",
        w2."id" AS "way_id_2"
    FROM roads_in_california w1
    JOIN roads_in_california w2
      ON w1."id" < w2."id"
     AND ST_INTERSECTS(w1."geom", w2."geom")
     AND ARRAY_SIZE(ARRAY_INTERSECTION(w1.node_ids, w2.node_ids)) = 0
)
SELECT COUNT(*) AS "number_of_pairs"
FROM pairs;
```
2025-01-19 23:17:59 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:17:59 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:17:59 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:18:01 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:18:01 - snowflake.connector.connection - INFO - closed
2025-01-19 23:18:02 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:18:02 - root - INFO - Total iteration counts: 10
