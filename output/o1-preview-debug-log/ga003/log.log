2025-01-19 09:27:20 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 09:28:00 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 09:28:02 - root - INFO - SQL:
-- 1. Get distinct event names on September 15, 2018
SELECT DISTINCT `event_name`
FROM `firebase-public-project.analytics_153293282.events_20180915`
LIMIT 1000;
Results:
event_name
first_open
app_update
os_update
app_exception
level_retry_quickplay
level_fail
error
level_complete
level_up
level_reset
completed_5_levels
use_extra_steps
spend_virtual_currency
no_more_extra_steps
ad_reward
firebase_campaign
app_remove
challenge_a_friend
level_end
post_score
level_retry
level_start
screen_view
session_start
select_content
user_engagement
level_end_quickplay
level_fail_quickplay
level_reset_quickplay
level_start_quickplay
level_complete_quickplay

2025-01-19 09:28:03 - root - INFO - SQL:
-- 2. List all distinct keys in event_params
SELECT DISTINCT ep.key
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
LIMIT 1000;
Results:
key
system_app
system_app_update
update_with_analytics
previous_first_open_count
firebase_conversion
firebase_event_origin
firebase_screen_id
previous_app_version
firebase_screen_class
previous_os_version
timestamp
fatal
board
level
level_name
error_value
firebase_error
firebase_screen
value
virtual_currency_name
item_name
ad_unit_code
type
source
medium
click_timestamp
gclid
ad_event_id
score
time
firebase_previous_class
firebase_previous_id
firebase_previous_screen
content_type
item_id
engagement_time_msec

2025-01-19 09:28:05 - root - INFO - SQL:
-- 3. Get sample values of 'score' from event_params
SELECT ep.value.int_value AS score
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
WHERE ep.key = 'score'
LIMIT 1000;
Results:
score
""
""
""
1.0
3.0
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
3.0
0.0
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
0.0
3.0
2.0
1.0
4.0
1.0
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
3.0
2.0
2.0
2.0
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
2.0
2.0
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
2.0
2.0
0.0
1.0
0.0
3.0
0.0
1.0
3.0
3.0
4.0
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""

2025-01-19 09:28:27 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 09:28:27 - root - INFO - ```sql
-- Retrieve scores and board types for 'level_complete_quickplay' events
SELECT
  ep_score.value.int_value AS score,
  ep_board.value.string_value AS board_type
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t
JOIN UNNEST(t.event_params) AS ep_score ON ep_score.key = 'score'
JOIN UNNEST(t.event_params) AS ep_board ON ep_board.key = 'board_type'
WHERE t.event_name = 'level_complete_quickplay'
LIMIT 1000;
```
2025-01-19 09:28:59 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 09:28:59 - root - INFO - ```sql
-- Retrieve scores and board types from events on September 15, 2018
SELECT
  MAX(CASE WHEN ep.key = 'score' THEN ep.value.int_value END) AS score,
  MAX(CASE WHEN ep.key = 'board' THEN ep.value.string_value END) AS board
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t
LEFT JOIN UNNEST(t.event_params) AS ep
GROUP BY t.event_timestamp
HAVING score IS NOT NULL AND board IS NOT NULL
LIMIT 1000;
```
2025-01-19 09:29:46 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 09:29:46 - root - INFO - ```sql
SELECT
  MAX(CASE WHEN ep.key = 'value' OR ep.key = 'score' THEN ep.value.int_value END) AS score,
  MAX(CASE WHEN ep.key = 'board' THEN ep.value.string_value END) AS board
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
GROUP BY t.event_timestamp
HAVING score IS NOT NULL AND board IS NOT NULL
LIMIT 1000;
```
2025-01-19 09:30:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 09:30:39 - root - INFO - SQL:
SELECT
  MAX(CASE WHEN ep.key = 'value' OR ep.key = 'score' THEN ep.value.int_value END) AS score,
  MAX(CASE WHEN ep.key = 'board' THEN ep.value.string_value END) AS board
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
GROUP BY t.event_timestamp
HAVING score IS NOT NULL AND board IS NOT NULL
LIMIT 1000;
Results:
Too long, hard cut:
score,board
19,S
22,S
21,S
21,S
19,S
22,S
22,S
34,L
36,L
28,M
30,M
21,S
21,S
21,S
22,S
20,S
20,S
20,S
22,S
22,S
21,S
19,S
22,S
22,S
20,S
29,M
21,S
20,S
20,S
22,S
21,S
22,S
19,S
21,S
20,S
21,S
21,S
19,S
18,S
18,S
19,S
21,S
22,S
20,S
18,S
21,S
21,S
22,S
22,S
22,S
22,S
22,S
21,S
19,S
20,S
22,S
18,S
21,S
20,S
20,S
22,S
22,S
20,S
21,S
22,S
21,S
22,S
22,S
22,S
20,S
21,S
19,S
21,S
22,S
20,S
22,S
19,S
19,S
20,S
19,S
20,S
29,M
30,M
21,S
20,S
18,S
22,S
19,S
22,S
22,S
20,S
21,S
21,S
19,S
22,S
21,S
16,S
21,S
21,S
20,S
22,S
19,S
20,S
21,S
22,S
19,S
18,S
22,S
20,S
20,S
22,S
21,S
20,S
21,S
19,S
22,S
20,S
20,S
22,S
19,S
20,S
21,S
22,S
21,S
19,S
19,S
22,S
22,S
21,S
22,S
22,S
22,S
22,S
21,S
19,S
21,S
19,S
21,S
21,S
22,S
20,S
19,S
22,S
22,S
21,S
21,S
18,S
19,S
18,S
20,S
22,S
19,S
19,S
20,S
19,S
19,S
29,M
17,S
19,S
22,S
20,S
18,S
20,S
21,S
20,S
22,S
21,S
19,S
18,S
21,S
20,S
22,S
22,S
21,S
21,S
17,S
20,S
18,S
22,S
22,S
21,S
19,S
28,M
30,M
27,M
29,M
20,S
20,S
25,M
20,S
20,S
20,S
19,S
20,S
22,S
21,S
17,S
21,S
23,S
22,S
22,S
21,S
21,S
20,S
21,S
20,S
20,S
22,S
20,S
19,S
18,S
21,S
32,L
34,L
34,L
33,L
31,L
35,L
34,L
32,L
20,S
17,S
19,S
22,S
30,M
18,S
21,S
20,S
21,S
19,S
20,S
21,S
20,S
21,S
22,S
22,S
22,S
22,S
22,S
21,S
22,S
20,S
22,S
22,S
21,S
21,S
19,S
18,S
22,S
19,S
21,S
22,S
21,S
22,S
20,S
21,S
22,S
22,S
21,S
21,S
21,S
22,S
21,S
20,S
22,S
22,S
22,S
22,S
22,S
22,S
20,S
22,S
22,S
20,S
20,S
21,S
22,S
20,S
22,S
22,S
21,S
20,S
22,S
18,S
22,S
20,S
22,S
22,S
20,S
18,S
21,S
21,S
22,S
22,S
22,S
22,S
21,S
22,S
21,S
21,S
21,S
19,S
22,S
20,S
20,S
22,S
22,S
22,S
22,S
19,S
22,S
21,S
20,S
22,S
19,S
21,S
19,S
22,S
22,S
22,S
22,S
22,S
22,S
22,S
21,S
22,S
21,S
22,S
22,S
21,S
17,S
22,S
22,S
22,S
21,S
22,S
20,S
18,S
21,S
22,S
21,S
22,S
19,S
20,S
21,S
21,S
22,S
21,S
17,S
20,S
20,S
17,S
20,S
22,S
20,S
20,S
20,S
21,S
20,S
22,S
19,S
36,L
20,S
18,S
21,S
21,S
23,S
19,S
22,S
22,S
20,S
21,S
18,S
22,S
20,S
21,S
21,S
20,S
18,S
19,S
22,S
21,S
17,S
19,S
28,M
28,M
20,S
20,S
20,S
21,S
21,S
20,S
19,S
18,S
20,S
20,S
21,S
20,S
20,S
20,S
20,S
17,S
20,S
20,S
18,S
20,S
21,S
19,S
20,S
19,S
21,S
22,S
17,S
21,S
20,S
21,S
19,S
19,S
21,S
20,S
22,S
22,S
22,S
21,S
21,S
20,S
21,S
19,S
19,S
17,S
20,S
20,S
20,S
20,S
18,S
19,S
17,S
20,S
22,S
19,S
20,S
19,S
20,S
20,S
20,S
19,S
22,S
18,S
15,S
21,S
22,S
22,S
21,S
20,S
20,S
21,S
19,S
20,S
19,S
20,S
22,S
21,S
21,S
19,S
20,S
21,S
18,S
20,S
20,S
19,S
20,S
20,S
22,S
18,S
20,S
22,S
18,S
22,S
19,S
21,S
19,S
21,S
21,S
19,S
22,S
18,S
21,S
18,S
22,S
21,S
19,S
20,S
20,S
20,S
21,S
20,S
20,S
18,S
18,S
20,S
21,S
18,S
21,S
22,S
19,S
21,S
22,S
21,S
17,S
19,S
16,S
19,S
21,S
20,S
18,S
20,S
18,S
22,S
22,S
19,S
19,S
17,S
19,S
22,S
19,S
22,S
21,S
17,S
17,S
19,S
20,S
19,S
21,S
20,S
22,S
21,S
22,S
21,S
20,S
21,S
20,S
21,S
22,S
21,S
21,S
21,S
22,S
21,S
19,S
19,S
20,S
22,S
18,S
22,S
22,S
22,S
19,S
22,S
21,S
18,S
20,S
20,S
19,S
21,S
22,S
20,S
21,S
21,S
19,S
21,S
20,S
16,S
20,S
22,S
22,S
20,S
22,S
22,S
21,S
20,S
19,S
20,S
20,S
20,S
22,S
20,S
19,S
24,S
22,S
20,S
21,S
19,S
22,S
20,S
21,S
18,S
21,S
21,S
20,S
22,S
21,S
22,S
21,S
22,S
19,S
22,S
19,S
22,S
21,S
21,S
20,S
22,S
22,S
19,S
20,S
21,S
18,S
21,S
18,S
22,S
22,S
22,S
22,S
21,S
20,S
22,S
22,S
21,S
18,S
21,S
22,S
22,S
22,S
22,S
22,S
21,S
20,S
21,S
22,S
17,S
22,S
21,S
20,S
22,S
22,S
21,S
18,S
21,S
22,S
22,S
21,S
22,S
17,S
21,S
21,S
21,S
22,S
22,S
21,S
20,S
30,M
17,S
20,S
23,S
22,S
21,S
19,S
20,S
20,S
20,S
21,S
17,S
34,L
36,L
34,L
28,S
19,S
21,S
20,S
21,S
18,S
22,S
22,S
19,S
22,S
21,S
21,S
20,S
20,S
21,S
19,S
18,S
17,S
18,S
19,S
20,S
19,S
14,S
20,S
19,S
17,S
21,S
19,S
19,S
22,S
22,S
20,S
21,S
24,S
28,S
22,S
22,S
20,S
22,S
20,S
22,S
20,S
22,S
20,S
17,S
21,S
19,S
21,S
22,S
19,S
19,S
21,S
20,S
21,S
18,S
22,S
21,S
20,S
20,S
22,S
21,S
20,S
22,S
20,S
19,S
20,S
18,S
22,S
21,S
21,S
21,S
19,S
19,S
20,S
20,S
18,S
22,S
21,S
19,S
20,S
18,S
20,S
20,S
21,S
20,S
22,S
21,S
26,M
22,S
21,S
20,S
22,S
20,S
22,S
20,S
19,S
18,S
20,S
18,S
19,S
21,S
22,S
22,S
19,S
20,S
22,S
21,S
18,S
22,S
19,S
22,S
20,S
22,S
22,S
22,S
21,S
19,S
22,S
20,S
22,S
22,S
21,S
21,S
20,S
21,S
18,S
22,S
22,S
20,S
19,S
18,S
19,S
22,S
20,S
20,S
20,S
22,S
19,S
21,S
21,S
22,S
21,S
19,S
19,S
19,S
20,S
22,S
22,S
19,S
20,S
20,S
34,L
30,M
22,S
21,S
19,S
22,S
20,S
21,S
19,S
20,S
20,S
21,S
20,S
21,S
20,S
22,S
21,S
20,S
20,S
20,S
22,S
21,S
22,S
19,S
22,S
21,S
19,S
19,S
18,S
20,S
22,S
21,S
20,S
21,S
22,S
21,S
22,S
18,S
22,S
22,S
21,S
21,S
20,S
18,S
20,S
19,S
22,S
19,S
22,S
19,S
22,S
20,S
22,S
20,S
21,S
22,S
22,S
17,S
20,S
21,S
22,S
20,S
22,S
28,M
28,M
29,M
28,M
28,M
25,M
28,M
20,S
35,L
36,L
36,L
16,S
22,S
21,S
21,S
20,S
18,S
20,S
22,S
21,S
21,S
22,S
21,S
22,S
21,S
22,S
21,S
22,S
21,S
17,S
22,S
21,S
18,S
22,S
19,S
22,S
22,S
20,S
21,S
20,S
22,S
22,S
21,S
19,S
21,S
17,S
22,S
20,S
19,S
19,S
22,S
18,S
17,S
21,S
18,S
21,S
22,S
22,S
20,S
21,S
19,S
19,S
20,S
20,S
22,S
20,S
22,S
21,S
21,S
22,S
22,S
19,S
22,S
21,S
22,S
21,S
20,S
21,S
17,S
22,S
21,S
20,S
21,S
22,S
21,S
22,S
19,S
21,S
21,S
22,S
21,S
20,S
20,S
21,S
22,S
22,S
22,S
22,S
20,S
17,S
21,S
22,S
18,S
18,S
19,S
22,S
20,S
20,S
22,

2025-01-19 09:30:41 - root - INFO - SQL:
-- Corrected 5. Find event names associated with the 'score' parameter
SELECT DISTINCT t.event_name
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t
JOIN UNNEST(t.event_params) AS ep
ON TRUE
WHERE ep.key = 'score'
LIMIT 1000
Results:
event_name
post_score

2025-01-19 09:30:43 - root - INFO - SQL:
-- Corrected 6. Find event names associated with the 'board' parameter
SELECT DISTINCT t.event_name
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t
JOIN UNNEST(t.event_params) AS ep
ON TRUE
WHERE ep.key = 'board'
LIMIT 1000
Results:
event_name
level_retry_quickplay
challenge_a_friend
level_end_quickplay
level_fail_quickplay
level_reset_quickplay
level_start_quickplay
level_complete_quickplay

2025-01-19 09:30:45 - root - INFO - SQL:
-- Corrected 7. Get event names that include 'quickplay' in their name
SELECT DISTINCT `event_name`
FROM `firebase-public-project.analytics_153293282.events_20180915`
WHERE LOWER(`event_name`) LIKE '%quickplay%'
LIMIT 1000
Results:
event_name
level_retry_quickplay
level_end_quickplay
level_fail_quickplay
level_reset_quickplay
level_start_quickplay
level_complete_quickplay

2025-01-19 09:31:40 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 09:31:40 - root - INFO - ```sql
-- Retrieve scores and board types from 'level_complete_quickplay' events using the 'value' parameter
SELECT
  MAX(CASE WHEN ep.key = 'value' THEN ep.value.int_value END) AS score,
  MAX(CASE WHEN ep.key = 'board' THEN ep.value.string_value END) AS board
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
WHERE t.event_name = 'level_complete_quickplay'
GROUP BY t.event_timestamp
HAVING score IS NOT NULL AND board IS NOT NULL
LIMIT 1000;
```
2025-01-19 09:32:09 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 09:32:09 - root - INFO - SQL:
-- Retrieve scores and board types from 'level_complete_quickplay' events using the 'value' parameter
SELECT
  MAX(CASE WHEN ep.key = 'value' THEN ep.value.int_value END) AS score,
  MAX(CASE WHEN ep.key = 'board' THEN ep.value.string_value END) AS board
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
WHERE t.event_name = 'level_complete_quickplay'
GROUP BY t.event_timestamp
HAVING score IS NOT NULL AND board IS NOT NULL
LIMIT 1000;
Results:
Too long, hard cut:
score,board
19,S
22,S
21,S
21,S
19,S
22,S
22,S
34,L
36,L
28,M
30,M
21,S
21,S
21,S
22,S
20,S
20,S
20,S
22,S
22,S
21,S
19,S
22,S
22,S
20,S
29,M
21,S
20,S
20,S
22,S
21,S
22,S
19,S
21,S
20,S
21,S
21,S
19,S
18,S
18,S
19,S
21,S
22,S
20,S
18,S
21,S
21,S
22,S
22,S
22,S
22,S
22,S
21,S
19,S
20,S
22,S
18,S
21,S
20,S
20,S
22,S
22,S
20,S
21,S
22,S
21,S
22,S
22,S
22,S
20,S
21,S
19,S
21,S
22,S
20,S
22,S
19,S
19,S
20,S
19,S
20,S
29,M
30,M
21,S
20,S
18,S
22,S
19,S
22,S
22,S
20,S
21,S
21,S
19,S
22,S
21,S
16,S
21,S
21,S
20,S
22,S
19,S
20,S
21,S
22,S
19,S
18,S
22,S
20,S
20,S
22,S
21,S
20,S
21,S
19,S
22,S
20,S
20,S
22,S
19,S
20,S
21,S
22,S
21,S
19,S
19,S
22,S
22,S
21,S
22,S
22,S
22,S
22,S
21,S
19,S
21,S
19,S
21,S
21,S
22,S
20,S
19,S
22,S
22,S
21,S
21,S
18,S
19,S
18,S
20,S
22,S
19,S
19,S
20,S
19,S
19,S
29,M
17,S
19,S
22,S
20,S
18,S
20,S
21,S
20,S
22,S
21,S
19,S
18,S
21,S
20,S
22,S
22,S
21,S
21,S
17,S
20,S
18,S
22,S
22,S
21,S
19,S
28,M
30,M
27,M
29,M
20,S
20,S
25,M
20,S
20,S
20,S
19,S
20,S
22,S
21,S
17,S
21,S
23,S
22,S
22,S
21,S
21,S
20,S
21,S
20,S
20,S
22,S
20,S
19,S
18,S
21,S
32,L
34,L
34,L
33,L
31,L
35,L
34,L
32,L
20,S
17,S
19,S
22,S
30,M
18,S
21,S
20,S
21,S
19,S
20,S
21,S
20,S
21,S
22,S
22,S
22,S
22,S
22,S
21,S
22,S
20,S
22,S
22,S
21,S
21,S
19,S
18,S
22,S
19,S
21,S
22,S
21,S
22,S
20,S
21,S
22,S
22,S
21,S
21,S
21,S
22,S
21,S
20,S
22,S
22,S
22,S
22,S
22,S
22,S
20,S
22,S
22,S
20,S
20,S
21,S
22,S
20,S
22,S
22,S
21,S
20,S
22,S
18,S
22,S
20,S
22,S
22,S
20,S
18,S
21,S
21,S
22,S
22,S
22,S
22,S
21,S
22,S
21,S
21,S
21,S
19,S
22,S
20,S
20,S
22,S
22,S
22,S
22,S
19,S
22,S
21,S
20,S
22,S
19,S
21,S
19,S
22,S
22,S
22,S
22,S
22,S
22,S
22,S
21,S
22,S
21,S
22,S
22,S
21,S
17,S
22,S
22,S
22,S
21,S
22,S
20,S
18,S
21,S
22,S
21,S
22,S
19,S
20,S
21,S
21,S
22,S
21,S
17,S
20,S
20,S
17,S
20,S
22,S
20,S
20,S
20,S
21,S
20,S
22,S
19,S
36,L
20,S
18,S
21,S
21,S
23,S
19,S
22,S
22,S
20,S
21,S
18,S
22,S
20,S
21,S
21,S
20,S
18,S
19,S
22,S
21,S
17,S
19,S
28,M
28,M
20,S
20,S
20,S
21,S
21,S
20,S
19,S
18,S
20,S
20,S
21,S
20,S
20,S
20,S
20,S
17,S
20,S
20,S
18,S
20,S
21,S
19,S
20,S
19,S
21,S
22,S
17,S
21,S
20,S
21,S
19,S
19,S
21,S
20,S
22,S
22,S
22,S
21,S
21,S
20,S
21,S
19,S
19,S
17,S
20,S
20,S
20,S
20,S
18,S
19,S
17,S
20,S
22,S
19,S
20,S
19,S
20,S
20,S
20,S
19,S
22,S
18,S
15,S
21,S
22,S
22,S
21,S
20,S
20,S
21,S
19,S
20,S
19,S
20,S
22,S
21,S
21,S
19,S
20,S
21,S
18,S
20,S
20,S
19,S
20,S
20,S
22,S
18,S
20,S
22,S
18,S
22,S
19,S
21,S
19,S
21,S
21,S
19,S
22,S
18,S
21,S
18,S
22,S
21,S
19,S
20,S
20,S
20,S
21,S
20,S
20,S
18,S
18,S
20,S
21,S
18,S
21,S
22,S
19,S
21,S
22,S
21,S
17,S
19,S
16,S
19,S
21,S
20,S
18,S
20,S
18,S
22,S
22,S
19,S
19,S
17,S
19,S
22,S
19,S
22,S
21,S
17,S
17,S
19,S
20,S
19,S
21,S
20,S
22,S
21,S
22,S
21,S
20,S
21,S
20,S
21,S
22,S
21,S
21,S
21,S
22,S
21,S
19,S
19,S
20,S
22,S
18,S
22,S
22,S
22,S
19,S
22,S
21,S
18,S
20,S
20,S
19,S
21,S
22,S
20,S
21,S
21,S
19,S
21,S
20,S
16,S
20,S
22,S
22,S
20,S
22,S
22,S
21,S
20,S
19,S
20,S
20,S
20,S
22,S
20,S
19,S
24,S
22,S
20,S
21,S
19,S
22,S
20,S
21,S
18,S
21,S
21,S
20,S
22,S
21,S
22,S
21,S
22,S
19,S
22,S
19,S
22,S
21,S
21,S
20,S
22,S
22,S
19,S
20,S
21,S
18,S
21,S
18,S
22,S
22,S
22,S
22,S
21,S
20,S
22,S
22,S
21,S
18,S
21,S
22,S
22,S
22,S
22,S
22,S
21,S
20,S
21,S
22,S
17,S
22,S
21,S
20,S
22,S
22,S
21,S
18,S
21,S
22,S
22,S
21,S
22,S
17,S
21,S
21,S
21,S
22,S
22,S
21,S
20,S
30,M
17,S
20,S
23,S
22,S
21,S
19,S
20,S
20,S
20,S
21,S
17,S
34,L
36,L
34,L
28,S
19,S
21,S
20,S
21,S
18,S
22,S
22,S
19,S
22,S
21,S
21,S
20,S
20,S
21,S
19,S
18,S
17,S
18,S
19,S
20,S
19,S
14,S
20,S
19,S
17,S
21,S
19,S
19,S
22,S
22,S
20,S
21,S
24,S
28,S
22,S
22,S
20,S
22,S
20,S
22,S
20,S
22,S
20,S
17,S
21,S
19,S
21,S
22,S
19,S
19,S
21,S
20,S
21,S
18,S
22,S
21,S
20,S
20,S
22,S
21,S
20,S
22,S
20,S
19,S
20,S
18,S
22,S
21,S
21,S
21,S
19,S
19,S
20,S
20,S
18,S
22,S
21,S
19,S
20,S
18,S
20,S
20,S
21,S
20,S
22,S
21,S
26,M
22,S
21,S
20,S
22,S
20,S
22,S
20,S
19,S
18,S
20,S
18,S
19,S
21,S
22,S
22,S
19,S
20,S
22,S
21,S
18,S
22,S
19,S
22,S
20,S
22,S
22,S
22,S
21,S
19,S
22,S
20,S
22,S
22,S
21,S
21,S
20,S
21,S
18,S
22,S
22,S
20,S
19,S
18,S
19,S
22,S
20,S
20,S
20,S
22,S
19,S
21,S
21,S
22,S
21,S
19,S
19,S
19,S
20,S
22,S
22,S
19,S
20,S
20,S
34,L
30,M
22,S
21,S
19,S
22,S
20,S
21,S
19,S
20,S
20,S
21,S
20,S
21,S
20,S
22,S
21,S
20,S
20,S
20,S
22,S
21,S
22,S
19,S
22,S
21,S
19,S
19,S
18,S
20,S
22,S
21,S
20,S
21,S
22,S
21,S
22,S
18,S
22,S
22,S
21,S
21,S
20,S
18,S
20,S
19,S
22,S
19,S
22,S
19,S
22,S
20,S
22,S
20,S
21,S
22,S
22,S
17,S
20,S
21,S
22,S
20,S
22,S
28,M
28,M
29,M
28,M
28,M
25,M
28,M
20,S
35,L
36,L
36,L
16,S
22,S
21,S
21,S
20,S
18,S
20,S
22,S
21,S
21,S
22,S
21,S
22,S
21,S
22,S
21,S
22,S
21,S
17,S
22,S
21,S
18,S
22,S
19,S
22,S
22,S
20,S
21,S
20,S
22,S
22,S
21,S
19,S
21,S
17,S
22,S
20,S
19,S
19,S
22,S
18,S
17,S
21,S
18,S
21,S
22,S
22,S
20,S
21,S
19,S
19,S
20,S
20,S
22,S
20,S
22,S
21,S
21,S
22,S
22,S
19,S
22,S
21,S
22,S
21,S
20,S
21,S
17,S
22,S
21,S
20,S
21,S
22,S
21,S
22,S
19,S
21,S
21,S
22,S
21,S
20,S
20,S
21,S
22,S
22,S
22,S
22,S
20,S
17,S
21,S
22,S
18,S
18,S
19,S
22,S
20,S
20,S
22,

2025-01-19 09:32:11 - root - INFO - SQL:
-- Corrected 9. List all distinct board types recorded on that day
SELECT DISTINCT ep.value.string_value AS board
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t
CROSS JOIN UNNEST(t.event_params) AS ep
WHERE ep.key = 'board'
  AND ep.value.string_value IS NOT NULL
LIMIT 1000
Results:
board
S
M
L

2025-01-19 09:32:12 - root - INFO - SQL:
-- Corrected 10. Get sample 'score' values stored as int from event_params
SELECT DISTINCT ep.value.int_value AS score
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t
CROSS JOIN UNNEST(t.event_params) AS ep
WHERE (ep.key = 'score' OR ep.key = 'value')
  AND ep.value.int_value IS NOT NULL
LIMIT 1000
Results:
score
1
0
3
2
8
20
4
41
36
5
11
17
21
10
14
19
22
23
24
29
26
25
28
32
6
12
16
7
34
30
18
27
33
31
35
15

2025-01-19 09:32:12 - root - INFO - itercount: 0
2025-01-19 09:32:12 - root - INFO - Database Name: firebase-public-project
Schema Name: analytics_153293282
DDL describes table information.
,0
table_name,events_20180801
ddl,"CREATE TABLE `firebase-public-project.analytics_153293282.events_20180801`
(
  event_date STRING,
  event_timestamp INT64,
  event_name STRING,
  event_params ARRAY<STRUCT<key STRING, value STRUCT<string_value STRING, int_value INT64, float_value FLOAT64, double_value FLOAT64>>>,
  event_previous_timestamp INT64,
  event_value_in_usd FLOAT64,
  event_bundle_sequence_id INT64,
  event_server_timestamp_offset INT64,
  user_id STRING,
  user_pseudo_id STRING,
  user_properties ARRAY<STRUCT<key STRING, value STRUCT<string_value STRING, int_value INT64, float_value FLOAT64, double_value FLOAT64, set_timestamp_micros INT64>>>,
  user_first_touch_timestamp INT64,
  user_ltv STRUCT<revenue FLOAT64, currency STRING>,
  device STRUCT<category STRING, mobile_brand_name STRING, mobile_model_name STRING, mobile_marketing_name STRING, mobile_os_hardware_model STRING, operating_system STRING, operating_system_version STRING, vendor_id STRING, advertising_id STRING, language STRING, is_limited_ad_tracking STRING, time_zone_offset_seconds INT64>,
  geo STRUCT<continent STRING, country STRING, region STRING, city STRING>,
  app_info STRUCT<id STRING, version STRING, install_store STRING, firebase_app_id STRING, install_source STRING>,
  traffic_source STRUCT<name STRING, medium STRING, source STRING>,
  stream_id STRING,
  platform STRING
);"

Some other tables have the similar structure: ['events_20180801', 'events_20180621', 'events_20180616', 'events_20180912', 'events_20180814', 'events_20180716', 'events_20181003', 'events_20180620', 'events_20180624', 'events_20180918', 'events_20180612', 'events_20180911', 'events_20180724', 'events_20180807', 'events_20180710', 'events_20180808', 'events_20180702', 'events_20180719', 'events_20180914', 'events_20180913', 'events_20180915', 'events_20180728', 'events_20180817', 'events_20180628', 'events_20180906', 'events_20180704', 'events_20180711', 'events_20180720', 'events_20180706', 'events_20180926', 'events_20180924', 'events_20180731', 'events_20180804', 'events_20180920', 'events_20180715', 'events_20180709', 'events_20180928', 'events_20180904', 'events_20180903', 'events_20180818', 'events_20180820', 'events_20180707', 'events_20180930', 'events_20180821', 'events_20180812', 'events_20180830', 'events_20180908', 'events_20180708', 'events_20180910', 'events_20180922', 'events_20180713', 'events_20180618', 'events_20180811', 'events_20181001', 'events_20180626', 'events_20180828', 'events_20180717', 'events_20180806', 'events_20180721', 'events_20180725', 'events_20180824', 'events_20180923', 'events_20180627', 'events_20180726', 'events_20180729', 'events_20180929', 'events_20180925', 'events_20180722', 'events_20180630', 'events_20180730', 'events_20180831', 'events_20180701', 'events_20180619', 'events_20180810', 'events_20180822', 'events_20180921', 'events_20180819', 'events_20180927', 'events_20180905', 'events_20180816', 'events_20180622', 'events_20180802', 'events_20180826', 'events_20180714', 'events_20180901', 'events_20180916', 'events_20180809', 'events_20181002', 'events_20180703', 'events_20180617', 'events_20180902', 'events_20180625', 'events_20180827', 'events_20180805', 'events_20180825', 'events_20180919', 'events_20180917', 'events_20180705', 'events_20180613', 'events_20180907', 'events_20180909', 'events_20180727', 'events_20180813', 'events_20180614', 'events_20180623', 'events_20180829', 'events_20180615', 'events_20180712', 'events_20180718', 'events_20180815', 'events_20180629', 'events_20180803', 'events_20180823', 'events_20180723']
External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'firebase-public-project': {'analytics_153293282': ['events_20180612', 'events_20180613', 'events_20180614', 'events_20180615', 'events_20180616', 'events_20180617', 'events_20180618', 'events_20180619', 'events_20180620', 'events_20180621', 'events_20180622', 'events_20180623', 'events_20180624', 'events_20180625', 'events_20180626', 'events_20180627', 'events_20180628', 'events_20180629', 'events_20180630', 'events_20180701', 'events_20180702', 'events_20180703', 'events_20180704', 'events_20180705', 'events_20180706', 'events_20180707', 'events_20180708', 'events_20180709', 'events_20180710', 'events_20180711', 'events_20180712', 'events_20180713', 'events_20180714', 'events_20180715', 'events_20180716', 'events_20180717', 'events_20180718', 'events_20180719', 'events_20180720', 'events_20180721', 'events_20180722', 'events_20180723', 'events_20180724', 'events_20180725', 'events_20180726', 'events_20180727', 'events_20180728', 'events_20180729', 'events_20180730', 'events_20180731', 'events_20180801', 'events_20180802', 'events_20180803', 'events_20180804', 'events_20180805', 'events_20180806', 'events_20180807', 'events_20180808', 'events_20180809', 'events_20180810', 'events_20180811', 'events_20180812', 'events_20180813', 'events_20180814', 'events_20180815', 'events_20180816', 'events_20180817', 'events_20180818', 'events_20180819', 'events_20180820', 'events_20180821', 'events_20180822', 'events_20180823', 'events_20180824', 'events_20180825', 'events_20180826', 'events_20180827', 'events_20180828', 'events_20180829', 'events_20180830', 'events_20180831', 'events_20180901', 'events_20180902', 'events_20180903', 'events_20180904', 'events_20180905', 'events_20180906', 'events_20180907', 'events_20180908', 'events_20180909', 'events_20180910', 'events_20180911', 'events_20180912', 'events_20180913', 'events_20180914', 'events_20180915', 'events_20180916', 'events_20180917', 'events_20180918', 'events_20180919', 'events_20180920', 'events_20180921', 'events_20180922', 'events_20180923', 'events_20180924', 'events_20180925', 'events_20180926', 'events_20180927', 'events_20180928', 'events_20180929', 'events_20180930', 'events_20181001', 'events_20181002', 'events_20181003']}}
Begin Exploring Related Columns
**Relevant tables and columns:**

- **Table**: `firebase-public-project.analytics_153293282.events_20180915`

**Columns and their potential usage:**

- **`event_name`**: Identifies the type of event. Potential usage: To filter events corresponding to quick play mode completions.
- **`event_params`**: Contains event parameters as key-value pairs. Potential usage: To extract 'score' and 'board_type' values.
- **`event_date`**: Represents the event date. Potential usage: Although the table is partitioned by date, it can be used for additional filtering if necessary.

**Conditions that may be used:**

- **`event_name` = 'quick_play_completion'**: To select events that are quick play mode completions.
- **Extract parameters where `key` is 'score' or 'board_type'**: To get the specific values needed for the analysis.

---

**Sample BigQuery SQL queries:**

```sql
-- 1. Get distinct event names on September 15, 2018
SELECT DISTINCT `event_name`
FROM `firebase-public-project.analytics_153293282.events_20180915`
LIMIT 1000;
```

```sql
-- 2. List all distinct keys in event_params
SELECT DISTINCT ep.key
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
LIMIT 1000;
```

```sql
-- 3. Get sample values of 'score' from event_params
SELECT ep.value.int_value AS score
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
WHERE ep.key = 'score'
LIMIT 1000;
```

```sql
-- 4. Get sample values of 'board_type' from event_params
SELECT ep.value.string_value AS board_type
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
WHERE ep.key = 'board_type'
LIMIT 1000;
```

```sql
-- 5. Find event names associated with the 'score' parameter
SELECT DISTINCT t.event_name
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
WHERE ep.key = 'score'
LIMIT 1000;
```

```sql
-- 6. Find event names associated with the 'board_type' parameter
SELECT DISTINCT t.event_name
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
WHERE ep.key = 'board_type'
LIMIT 1000;
```

```sql
-- 7. Get event names that include 'quick_play' in their name
SELECT DISTINCT `event_name`
FROM `firebase-public-project.analytics_153293282.events_20180915`
WHERE LOWER(`event_name`) LIKE '%quick_play%'
LIMIT 1000;
```

```sql
-- 8. Retrieve scores and board types for 'quick_play_completion' events
SELECT
  ep_score.value.int_value AS score,
  ep_board.value.string_value AS board_type
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t
JOIN UNNEST(t.event_params) AS ep_score
ON ep_score.key = 'score'
JOIN UNNEST(t.event_params) AS ep_board
ON ep_board.key = 'board_type'
WHERE t.event_name = 'quick_play_completion'
LIMIT 1000;
```

```sql
-- 9. List all distinct board types recorded on that day
SELECT DISTINCT ep.value.string_value AS board_type
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
WHERE ep.key = 'board_type'
LIMIT 1000;
```

```sql
-- 10. Get sample 'score' values stored as float from event_params
SELECT ep.value.float_value AS score
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
WHERE ep.key = 'score'
LIMIT 1000;
```

---

These queries will help you explore the relevant data needed to calculate the average scores for each board type from quick play mode completions on September 15, 2018.Query:
-- 1. Get distinct event names on September 15, 2018
SELECT DISTINCT `event_name`
FROM `firebase-public-project.analytics_153293282.events_20180915`
LIMIT 1000;
Answer:
event_name
first_open
app_update
os_update
app_exception
level_retry_quickplay
level_fail
error
level_complete
level_up
level_reset
completed_5_levels
use_extra_steps
spend_virtual_currency
no_more_extra_steps
ad_reward
firebase_campaign
app_remove
challenge_a_friend
level_end
post_score
level_retry
level_start
screen_view
session_start
select_content
user_engagement
level_end_quickplay
level_fail_quickplay
level_reset_quickplay
level_start_quickplay
level_complete_quickplay
Query:
-- 2. List all distinct keys in event_params
SELECT DISTINCT ep.key
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
LIMIT 1000;
Answer:
key
system_app
system_app_update
update_with_analytics
previous_first_open_count
firebase_conversion
firebase_event_origin
firebase_screen_id
previous_app_version
firebase_screen_class
previous_os_version
timestamp
fatal
board
level
level_name
error_value
firebase_error
firebase_screen
value
virtual_currency_name
item_name
ad_unit_code
type
source
medium
click_timestamp
gclid
ad_event_id
score
time
firebase_previous_class
firebase_previous_id
firebase_previous_screen
content_type
item_id
engagement_time_msec
Query:
-- 3. Get sample values of 'score' from event_params
SELECT ep.value.int_value AS score
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
WHERE ep.key = 'score'
LIMIT 1000;
Answer:
score
""
""
""
1.0
3.0
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
3.0
0.0
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
0.0
3.0
2.0
1.0
4.0
1.0
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
3.0
2.0
2.0
2.0
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
2.0
2.0
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
2.0
2.0
0.0
1.0
0.0
3.0
0.0
1.0
3.0
3.0
4.0
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
""
Query:
SELECT
  MAX(CASE WHEN ep.key = 'value' OR ep.key = 'score' THEN ep.value.int_value END) AS score,
  MAX(CASE WHEN ep.key = 'board' THEN ep.value.string_value END) AS board
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
GROUP BY t.event_timestamp
HAVING score IS NOT NULL AND board IS NOT NULL
LIMIT 1000;
Answer:
Too long, hard cut:
score,board
19,S
22,S
21,S
21,S
19,S
22,S
22,S
34,L
36,L
28,M
30,M
21,S
21,S
21,S
22,S
20,S
20,S
20,S
22,S
22,S
21,S
19,S
22,S
22,S
20,S
29,M
21,S
20,S
20,S
22,S
21,S
22,S
19,S
21,S
20,S
21,S
21,S
19,S
18,S
18,S
19,S
21,S
22,S
20,S
18,S
21,S
21,S
22,S
22,S
22,S
22,S
22,S
21,S
19,S
20,S
22,S
18,S
21,S
20,S
20,S
22,S
22,S
20,S
21,S
22,S
21,S
22,S
22,S
22,S
20,S
21,S
19,S
21,S
22,S
20,S
22,S
19,S
19,S
20,S
19,S
20,S
29,M
30,M
21,S
20,S
18,S
22,S
19,S
22,S
22,S
20,S
21,S
21,S
19,S
22,S
21,S
16,S
21,S
21,S
20,S
22,S
19,S
20,S
21,S
22,S
19,S
18,S
22,S
20,S
20,S
22,S
21,S
20,S
21,S
19,S
22,S
20,S
20,S
22,S
19,S
20,S
21,S
22,S
21,S
19,S
19,S
22,S
22,S
21,S
22,S
22,S
22,S
22,S
21,S
19,S
21,S
19,S
21,S
21,S
22,S
20,S
19,S
22,S
22,S
21,S
21,S
18,S
19,S
18,S
20,S
22,S
19,S
19,S
20,S
19,S
19,S
29,M
17,S
19,S
22,S
20,S
18,S
20,S
21,S
20,S
22,S
21,S
19,S
18,S
21,S
20,S
22,S
22,S
21,S
21,S
17,S
20,S
18,S
22,S
22,S
21,S
19,S
28,M
30,M
27,M
29,M
20,S
20,S
25,M
20,S
20,S
20,S
19,S
20,S
22,S
21,S
17,S
21,S
23,S
22,S
22,S
21,S
21,S
20,S
21,S
20,S
20,S
22,S
20,S
19,S
18,S
21,S
32,L
34,L
34,L
33,L
31,L
35,L
34,L
32,L
20,S
17,S
19,S
22,S
30,M
18,S
21,S
20,S
21,S
19,S
20,S
21,S
20,S
21,S
22,S
22,S
22,S
22,S
22,S
21,S
22,S
20,S
22,S
22,S
21,S
21,S
19,S
18,S
22,S
19,S
21,S
22,S
21,S
22,S
20,S
21,S
22,S
22,S
21,S
21,S
21,S
22,S
21,S
20,S
22,S
22,S
22,S
22,S
22,S
22,S
20,S
22,S
22,S
20,S
20,S
21,S
22,S
20,S
22,S
22,S
21,S
20,S
22,S
18,S
22,S
20,S
22,S
22,S
20,S
18,S
21,S
21,S
22,S
22,S
22,S
22,S
21,S
22,S
21,S
21,S
21,S
19,S
22,S
20,S
20,S
22,S
22,S
22,S
22,S
19,S
22,S
21,S
20,S
22,S
19,S
21,S
19,S
22,S
22,S
22,S
22,S
22,S
22,S
22,S
21,S
22,S
21,S
22,S
22,S
21,S
17,S
22,S
22,S
22,S
21,S
22,S
20,S
18,S
21,S
22,S
21,S
22,S
19,S
20,S
21,S
21,S
22,S
21,S
17,S
20,S
20,S
17,S
20,S
22,S
20,S
20,S
20,S
21,S
20,S
22,S
19,S
36,L
20,S
18,S
21,S
21,S
23,S
19,S
22,S
22,S
20,S
21,S
18,S
22,S
20,S
21,S
21,S
20,S
18,S
19,S
22,S
21,S
17,S
19,S
28,M
28,M
20,S
20,S
20,S
21,S
21,S
20,S
19,S
18,S
20,S
20,S
21,S
20,S
20,S
20,S
20,S
17,S
20,S
20,S
18,S
20,S
21,S
19,S
20,S
19,S
21,S
22,S
17,S
21,S
20,S
21,S
19,S
19,S
21,S
20,S
22,S
22,S
22,S
21,S
21,S
20,S
21,S
19,S
19,S
17,S
20,S
20,S
20,S
20,S
18,S
19,S
17,S
20,S
22,S
19,S
20,S
19,S
20,S
20,S
20,S
19,S
22,S
18,S
15,S
21,S
22,S
22,S
21,S
20,S
20,S
21,S
19,S
20,S
19,S
20,S
22,S
21,S
21,S
19,S
20,S
21,S
18,S
20,S
20,S
19,S
20,S
20,S
22,S
18,S
20,S
22,S
18,S
22,S
19,S
21,S
19,S
21,S
21,S
19,S
22,S
18,S
21,S
18,S
22,S
21,S
19,S
20,S
20,S
20,S
21,S
20,S
20,S
18,S
18,S
20,S
21,S
18,S
21,S
22,S
19,S
21,S
22,S
21,S
17,S
19,S
16,S
19,S
21,S
20,S
18,S
20,S
18,S
22,S
22,S
19,S
19,S
17,S
19,S
22,S
19,S
22,S
21,S
17,S
17,S
19,S
20,S
19,S
21,S
20,S
22,S
21,S
22,S
21,S
20,S
21,S
20,S
21,S
22,S
21,S
21,S
21,S
22,S
21,S
19,S
19,S
20,S
22,S
18,S
22,S
22,S
22,S
19,S
22,S
21,S
18,S
20,S
20,S
19,S
21,S
22,S
20,S
21,S
21,S
19,S
21,S
20,S
16,S
20,S
22,S
22,S
20,S
22,S
22,S
21,S
20,S
19,S
20,S
20,S
20,S
22,S
20,S
19,S
24,S
22,S
20,S
21,S
19,S
22,S
20,S
21,S
18,S
21,S
21,S
20,S
22,S
21,S
22,S
21,S
22,S
19,S
22,S
19,S
22,S
21,S
21,S
20,S
22,S
22,S
19,S
20,S
21,S
18,S
21,S
18,S
22,S
22,S
22,S
22,S
21,S
20,S
22,S
22,S
21,S
18,S
21,S
22,S
22,S
22,S
22,S
22,S
21,S
20,S
21,S
22,S
17,S
22,S
21,S
20,S
22,S
22,S
21,S
18,S
21,S
22,S
22,S
21,S
22,S
17,S
21,S
21,S
21,S
22,S
22,S
21,S
20,S
30,M
17,S
20,S
23,S
22,S
21,S
19,S
20,S
20,S
20,S
21,S
17,S
34,L
36,L
34,L
28,S
19,S
21,S
20,S
21,S
18,S
22,S
22,S
19,S
22,S
21,S
21,S
20,S
20,S
21,S
19,S
18,S
17,S
18,S
19,S
20,S
19,S
14,S
20,S
19,S
17,S
21,S
19,S
19,S
22,S
22,S
20,S
21,S
24,S
28,S
22,S
22,S
20,S
22,S
20,S
22,S
20,S
22,S
20,S
17,S
21,S
19,S
21,S
22,S
19,S
19,S
21,S
20,S
21,S
18,S
22,S
21,S
20,S
20,S
22,S
21,S
20,S
22,S
20,S
19,S
20,S
18,S
22,S
21,S
21,S
21,S
19,S
19,S
20,S
20,S
18,S
22,S
21,S
19,S
20,S
18,S
20,S
20,S
21,S
20,S
22,S
21,S
26,M
22,S
21,S
20,S
22,S
20,S
22,S
20,S
19,S
18,S
20,S
18,S
19,S
21,S
22,S
22,S
19,S
20,S
22,S
21,S
18,S
22,S
19,S
22,S
20,S
22,S
22,S
22,S
21,S
19,S
22,S
20,S
22,S
22,S
21,S
21,S
20,S
21,S
18,S
22,S
22,S
20,S
19,S
18,S
19,S
22,S
20,S
20,S
20,S
22,S
19,S
21,S
21,S
22,S
21,S
19,S
19,S
19,S
20,S
22,S
22,S
19,S
20,S
20,S
34,L
30,M
22,S
21,S
19,S
22,S
20,S
21,S
19,S
20,S
20,S
21,S
20,S
21,S
20,S
22,S
21,S
20,S
20,S
20,S
22,S
21,S
22,S
19,S
22,S
21,S
19,S
19,S
18,S
20,S
22,S
21,S
20,S
21,S
22,S
21,S
22,S
18,S
22,S
22,S
21,S
21,S
20,S
18,S
20,S
19,S
22,S
19,S
22,S
19,S
22,S
20,S
22,S
20,S
21,S
22,S
22,S
17,S
20,S
21,S
22,S
20,S
22,S
28,M
28,M
29,M
28,M
28,M
25,M
28,M
20,S
35,L
36,L
36,L
16,S
22,S
21,S
21,S
20,S
18,S
20,S
22,S
21,S
21,S
22,S
21,S
22,S
21,S
22,S
21,S
22,S
21,S
17,S
22,S
21,S
18,S
22,S
19,S
22,S
22,S
20,S
21,S
20,S
22,S
22,S
21,S
19,S
21,S
17,S
22,S
20,S
19,S
19,S
22,S
18,S
17,S
21,S
18,S
21,S
22,S
22,S
20,S
21,S
19,S
19,S
20,S
20,S
22,S
20,S
22,S
21,S
21,S
22,S
22,S
19,S
22,S
21,S
22,S
21,S
20,S
21,S
17,S
22,S
21,S
20,S
21,S
22,S
21,S
22,S
19,S
21,S
21,S
22,S
21,S
20,S
20,S
21,S
22,S
22,S
22,S
22,S
20,S
17,S
21,S
22,S
18,S
18,S
19,S
22,S
20,S
20,S
22,
Query:
-- Corrected 5. Find event names associated with the 'score' parameter
SELECT DISTINCT t.event_name
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t
JOIN UNNEST(t.event_params) AS ep
ON TRUE
WHERE ep.key = 'score'
LIMIT 1000
Answer:
event_name
post_score
Query:
-- Corrected 6. Find event names associated with the 'board' parameter
SELECT DISTINCT t.event_name
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t
JOIN UNNEST(t.event_params) AS ep
ON TRUE
WHERE ep.key = 'board'
LIMIT 1000
Answer:
event_name
level_retry_quickplay
challenge_a_friend
level_end_quickplay
level_fail_quickplay
level_reset_quickplay
level_start_quickplay
level_complete_quickplay
Query:
-- Corrected 7. Get event names that include 'quickplay' in their name
SELECT DISTINCT `event_name`
FROM `firebase-public-project.analytics_153293282.events_20180915`
WHERE LOWER(`event_name`) LIKE '%quickplay%'
LIMIT 1000
Answer:
event_name
level_retry_quickplay
level_end_quickplay
level_fail_quickplay
level_reset_quickplay
level_start_quickplay
level_complete_quickplay
Query:
-- Retrieve scores and board types from 'level_complete_quickplay' events using the 'value' parameter
SELECT
  MAX(CASE WHEN ep.key = 'value' THEN ep.value.int_value END) AS score,
  MAX(CASE WHEN ep.key = 'board' THEN ep.value.string_value END) AS board
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t,
UNNEST(t.event_params) AS ep
WHERE t.event_name = 'level_complete_quickplay'
GROUP BY t.event_timestamp
HAVING score IS NOT NULL AND board IS NOT NULL
LIMIT 1000;
Answer:
Too long, hard cut:
score,board
19,S
22,S
21,S
21,S
19,S
22,S
22,S
34,L
36,L
28,M
30,M
21,S
21,S
21,S
22,S
20,S
20,S
20,S
22,S
22,S
21,S
19,S
22,S
22,S
20,S
29,M
21,S
20,S
20,S
22,S
21,S
22,S
19,S
21,S
20,S
21,S
21,S
19,S
18,S
18,S
19,S
21,S
22,S
20,S
18,S
21,S
21,S
22,S
22,S
22,S
22,S
22,S
21,S
19,S
20,S
22,S
18,S
21,S
20,S
20,S
22,S
22,S
20,S
21,S
22,S
21,S
22,S
22,S
22,S
20,S
21,S
19,S
21,S
22,S
20,S
22,S
19,S
19,S
20,S
19,S
20,S
29,M
30,M
21,S
20,S
18,S
22,S
19,S
22,S
22,S
20,S
21,S
21,S
19,S
22,S
21,S
16,S
21,S
21,S
20,S
22,S
19,S
20,S
21,S
22,S
19,S
18,S
22,S
20,S
20,S
22,S
21,S
20,S
21,S
19,S
22,S
20,S
20,S
22,S
19,S
20,S
21,S
22,S
21,S
19,S
19,S
22,S
22,S
21,S
22,S
22,S
22,S
22,S
21,S
19,S
21,S
19,S
21,S
21,S
22,S
20,S
19,S
22,S
22,S
21,S
21,S
18,S
19,S
18,S
20,S
22,S
19,S
19,S
20,S
19,S
19,S
29,M
17,S
19,S
22,S
20,S
18,S
20,S
21,S
20,S
22,S
21,S
19,S
18,S
21,S
20,S
22,S
22,S
21,S
21,S
17,S
20,S
18,S
22,S
22,S
21,S
19,S
28,M
30,M
27,M
29,M
20,S
20,S
25,M
20,S
20,S
20,S
19,S
20,S
22,S
21,S
17,S
21,S
23,S
22,S
22,S
21,S
21,S
20,S
21,S
20,S
20,S
22,S
20,S
19,S
18,S
21,S
32,L
34,L
34,L
33,L
31,L
35,L
34,L
32,L
20,S
17,S
19,S
22,S
30,M
18,S
21,S
20,S
21,S
19,S
20,S
21,S
20,S
21,S
22,S
22,S
22,S
22,S
22,S
21,S
22,S
20,S
22,S
22,S
21,S
21,S
19,S
18,S
22,S
19,S
21,S
22,S
21,S
22,S
20,S
21,S
22,S
22,S
21,S
21,S
21,S
22,S
21,S
20,S
22,S
22,S
22,S
22,S
22,S
22,S
20,S
22,S
22,S
20,S
20,S
21,S
22,S
20,S
22,S
22,S
21,S
20,S
22,S
18,S
22,S
20,S
22,S
22,S
20,S
18,S
21,S
21,S
22,S
22,S
22,S
22,S
21,S
22,S
21,S
21,S
21,S
19,S
22,S
20,S
20,S
22,S
22,S
22,S
22,S
19,S
22,S
21,S
20,S
22,S
19,S
21,S
19,S
22,S
22,S
22,S
22,S
22,S
22,S
22,S
21,S
22,S
21,S
22,S
22,S
21,S
17,S
22,S
22,S
22,S
21,S
22,S
20,S
18,S
21,S
22,S
21,S
22,S
19,S
20,S
21,S
21,S
22,S
21,S
17,S
20,S
20,S
17,S
20,S
22,S
20,S
20,S
20,S
21,S
20,S
22,S
19,S
36,L
20,S
18,S
21,S
21,S
23,S
19,S
22,S
22,S
20,S
21,S
18,S
22,S
20,S
21,S
21,S
20,S
18,S
19,S
22,S
21,S
17,S
19,S
28,M
28,M
20,S
20,S
20,S
21,S
21,S
20,S
19,S
18,S
20,S
20,S
21,S
20,S
20,S
20,S
20,S
17,S
20,S
20,S
18,S
20,S
21,S
19,S
20,S
19,S
21,S
22,S
17,S
21,S
20,S
21,S
19,S
19,S
21,S
20,S
22,S
22,S
22,S
21,S
21,S
20,S
21,S
19,S
19,S
17,S
20,S
20,S
20,S
20,S
18,S
19,S
17,S
20,S
22,S
19,S
20,S
19,S
20,S
20,S
20,S
19,S
22,S
18,S
15,S
21,S
22,S
22,S
21,S
20,S
20,S
21,S
19,S
20,S
19,S
20,S
22,S
21,S
21,S
19,S
20,S
21,S
18,S
20,S
20,S
19,S
20,S
20,S
22,S
18,S
20,S
22,S
18,S
22,S
19,S
21,S
19,S
21,S
21,S
19,S
22,S
18,S
21,S
18,S
22,S
21,S
19,S
20,S
20,S
20,S
21,S
20,S
20,S
18,S
18,S
20,S
21,S
18,S
21,S
22,S
19,S
21,S
22,S
21,S
17,S
19,S
16,S
19,S
21,S
20,S
18,S
20,S
18,S
22,S
22,S
19,S
19,S
17,S
19,S
22,S
19,S
22,S
21,S
17,S
17,S
19,S
20,S
19,S
21,S
20,S
22,S
21,S
22,S
21,S
20,S
21,S
20,S
21,S
22,S
21,S
21,S
21,S
22,S
21,S
19,S
19,S
20,S
22,S
18,S
22,S
22,S
22,S
19,S
22,S
21,S
18,S
20,S
20,S
19,S
21,S
22,S
20,S
21,S
21,S
19,S
21,S
20,S
16,S
20,S
22,S
22,S
20,S
22,S
22,S
21,S
20,S
19,S
20,S
20,S
20,S
22,S
20,S
19,S
24,S
22,S
20,S
21,S
19,S
22,S
20,S
21,S
18,S
21,S
21,S
20,S
22,S
21,S
22,S
21,S
22,S
19,S
22,S
19,S
22,S
21,S
21,S
20,S
22,S
22,S
19,S
20,S
21,S
18,S
21,S
18,S
22,S
22,S
22,S
22,S
21,S
20,S
22,S
22,S
21,S
18,S
21,S
22,S
22,S
22,S
22,S
22,S
21,S
20,S
21,S
22,S
17,S
22,S
21,S
20,S
22,S
22,S
21,S
18,S
21,S
22,S
22,S
21,S
22,S
17,S
21,S
21,S
21,S
22,S
22,S
21,S
20,S
30,M
17,S
20,S
23,S
22,S
21,S
19,S
20,S
20,S
20,S
21,S
17,S
34,L
36,L
34,L
28,S
19,S
21,S
20,S
21,S
18,S
22,S
22,S
19,S
22,S
21,S
21,S
20,S
20,S
21,S
19,S
18,S
17,S
18,S
19,S
20,S
19,S
14,S
20,S
19,S
17,S
21,S
19,S
19,S
22,S
22,S
20,S
21,S
24,S
28,S
22,S
22,S
20,S
22,S
20,S
22,S
20,S
22,S
20,S
17,S
21,S
19,S
21,S
22,S
19,S
19,S
21,S
20,S
21,S
18,S
22,S
21,S
20,S
20,S
22,S
21,S
20,S
22,S
20,S
19,S
20,S
18,S
22,S
21,S
21,S
21,S
19,S
19,S
20,S
20,S
18,S
22,S
21,S
19,S
20,S
18,S
20,S
20,S
21,S
20,S
22,S
21,S
26,M
22,S
21,S
20,S
22,S
20,S
22,S
20,S
19,S
18,S
20,S
18,S
19,S
21,S
22,S
22,S
19,S
20,S
22,S
21,S
18,S
22,S
19,S
22,S
20,S
22,S
22,S
22,S
21,S
19,S
22,S
20,S
22,S
22,S
21,S
21,S
20,S
21,S
18,S
22,S
22,S
20,S
19,S
18,S
19,S
22,S
20,S
20,S
20,S
22,S
19,S
21,S
21,S
22,S
21,S
19,S
19,S
19,S
20,S
22,S
22,S
19,S
20,S
20,S
34,L
30,M
22,S
21,S
19,S
22,S
20,S
21,S
19,S
20,S
20,S
21,S
20,S
21,S
20,S
22,S
21,S
20,S
20,S
20,S
22,S
21,S
22,S
19,S
22,S
21,S
19,S
19,S
18,S
20,S
22,S
21,S
20,S
21,S
22,S
21,S
22,S
18,S
22,S
22,S
21,S
21,S
20,S
18,S
20,S
19,S
22,S
19,S
22,S
19,S
22,S
20,S
22,S
20,S
21,S
22,S
22,S
17,S
20,S
21,S
22,S
20,S
22,S
28,M
28,M
29,M
28,M
28,M
25,M
28,M
20,S
35,L
36,L
36,L
16,S
22,S
21,S
21,S
20,S
18,S
20,S
22,S
21,S
21,S
22,S
21,S
22,S
21,S
22,S
21,S
22,S
21,S
17,S
22,S
21,S
18,S
22,S
19,S
22,S
22,S
20,S
21,S
20,S
22,S
22,S
21,S
19,S
21,S
17,S
22,S
20,S
19,S
19,S
22,S
18,S
17,S
21,S
18,S
21,S
22,S
22,S
20,S
21,S
19,S
19,S
20,S
20,S
22,S
20,S
22,S
21,S
21,S
22,S
22,S
19,S
22,S
21,S
22,S
21,S
20,S
21,S
17,S
22,S
21,S
20,S
21,S
22,S
21,S
22,S
19,S
21,S
21,S
22,S
21,S
20,S
20,S
21,S
22,S
22,S
22,S
22,S
20,S
17,S
21,S
22,S
18,S
18,S
19,S
22,S
20,S
20,S
22,
Query:
-- Corrected 9. List all distinct board types recorded on that day
SELECT DISTINCT ep.value.string_value AS board
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t
CROSS JOIN UNNEST(t.event_params) AS ep
WHERE ep.key = 'board'
  AND ep.value.string_value IS NOT NULL
LIMIT 1000
Answer:
board
S
M
L
Query:
-- Corrected 10. Get sample 'score' values stored as int from event_params
SELECT DISTINCT ep.value.int_value AS score
FROM `firebase-public-project.analytics_153293282.events_20180915` AS t
CROSS JOIN UNNEST(t.event_params) AS ep
WHERE (ep.key = 'score' OR ep.key = 'value')
  AND ep.value.int_value IS NOT NULL
LIMIT 1000
Answer:
score
1
0
3
2
8
20
4
41
36
5
11
17
21
10
14
19
22
23
24
29
26
25
28
32
6
12
16
7
34
30
18
27
33
31
35
15
End Exploring Related Columns
Task: I'm trying to evaluate which board types were most effective on September 15, 2018. Can you find out the average scores for each board type from the quick play mode completions on that day?

Please answer only one complete SQL in bigquery dialect in ```sql``` format.
Usage example: ```sql
SELECT `column_name` FROM `database.schema.table` WHERE ... ``` (Replace `database`, `schema`, and `table` with actual names. Enclose column names and table identifiers with backticks.)
Follow the answer format like: Here's the average scores for each board type from the quick play mode completions on September 15, 2018:

```csv
board_type,average_score
board_type1:str,average_score1:float
board_type2:str,average_score2:float
...
```.
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: 

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.

2025-01-19 09:32:32 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 09:32:32 - root - INFO - Here's the average scores for each board type from the quick play mode completions on September 15, 2018:

```sql
SELECT
  board_type,
  ROUND(AVG(score), 4) AS average_score
FROM (
  SELECT
    t.event_timestamp,
    MAX(CASE WHEN ep.key = 'value' THEN CAST(ep.value.int_value AS INT64) END) AS score,
    MAX(CASE WHEN ep.key = 'board' THEN ep.value.string_value END) AS board_type
  FROM
    `firebase-public-project.analytics_153293282.events_20180915` AS t
  JOIN
    UNNEST(t.event_params) AS ep
  ON
    TRUE
  WHERE
    t.event_name = 'level_complete_quickplay'
  GROUP BY
    t.event_timestamp
)
WHERE
  score IS NOT NULL AND board_type IS NOT NULL
GROUP BY
  board_type
ORDER BY
  average_score DESC;
```
2025-01-19 09:32:34 - root - INFO - itercount: 1
2025-01-19 09:32:34 - root - INFO - 0
2025-01-19 09:32:34 - root - INFO - results: 
board_type,average_score
L,34.1692
M,28.1818
S,20.4712


2025-01-19 09:32:34 - root - INFO - Please check the answer again by reviewing I'm trying to evaluate which board types were most effective on September 15, 2018. Can you find out the average scores for each board type from the quick play mode completions on that day?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: Here's the average scores for each board type from the quick play mode completions on September 15, 2018:

```csv
board_type,average_score
board_type1:str,average_score1:float
board_type2:str,average_score2:float
...
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
board_type,average_score
L,34.1692
M,28.1818
S,20.4712
Current sql:
SELECT
  board_type,
  ROUND(AVG(score), 4) AS average_score
FROM (
  SELECT
    t.event_timestamp,
    MAX(CASE WHEN ep.key = 'value' THEN CAST(ep.value.int_value AS INT64) END) AS score,
    MAX(CASE WHEN ep.key = 'board' THEN ep.value.string_value END) AS board_type
  FROM
    `firebase-public-project.analytics_153293282.events_20180915` AS t
  JOIN
    UNNEST(t.event_params) AS ep
  ON
    TRUE
  WHERE
    t.event_name = 'level_complete_quickplay'
  GROUP BY
    t.event_timestamp
)
WHERE
  score IS NOT NULL AND board_type IS NOT NULL
GROUP BY
  board_type
ORDER BY
  average_score DESC;
2025-01-19 09:33:13 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 09:33:13 - root - INFO - Here's the average scores for each board type from the quick play mode completions on September 15, 2018:

```csv
board_type,average_score
L,34.1692
M,28.1818
S,20.4712
```

```sql
SELECT
  board_type,
  ROUND(AVG(score), 4) AS average_score
FROM (
  SELECT
    t.event_timestamp,
    MAX(CASE WHEN ep.key = 'value' THEN CAST(ep.value.int_value AS INT64) END) AS score,
    MAX(CASE WHEN ep.key = 'board' THEN ep.value.string_value END) AS board_type
  FROM
    `firebase-public-project.analytics_153293282.events_20180915` AS t
  JOIN
    UNNEST(t.event_params) AS ep
  ON
    TRUE
  WHERE
    t.event_name = 'level_complete_quickplay'
  GROUP BY
    t.event_timestamp
)
WHERE
  score IS NOT NULL AND board_type IS NOT NULL
GROUP BY
  board_type
ORDER BY
  average_score DESC;
```
2025-01-19 09:33:14 - root - INFO - itercount: 2
2025-01-19 09:33:14 - root - INFO - 0
2025-01-19 09:33:14 - root - INFO - Total iteration counts: 2
