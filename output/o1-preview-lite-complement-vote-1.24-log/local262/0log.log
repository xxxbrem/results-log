2025-01-25 09:35:15 - openai._base_client - INFO - Retrying request to /chat/completions in 0.417412 seconds
2025-01-25 09:37:09 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 09:37:09 - root - INFO - SQL:
SELECT DISTINCT "model" FROM "model_score" LIMIT 100;
Results:
model
DTCG
DTCE
RFCG
RFCE
ABC
LOGRL
LOGRS
LOGRLCV
LOGRSCV
MLPC1
MLPC2
KNCU
KNCD
Stack
GPRQ
DTRF
DTRA
DTRP
RFRS
RFRA
RFRP
ABR
HGBR
MLPR1
KNRU
KNRD
GPCL
GPCR
GPCQ
HGBC
GNB
GPRL
GPRR
ELNE
ELNECV
LINR
MLPR2
SGDCH
SGDCLL
SGDCMH
SVCL
SVCP
SVCG
SVCS
KERC
KERR

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT DISTINCT "name" FROM "model_score" LIMIT 100;
Results:
name
iris
concrete
Delaney solubility
Critical Heat Flux
Liver disease prediction
Pumpkin Seeds
water quality
lithium ion batteries
diabetes
Franck-Hertz
Tunnel diode
survey lung cancer
oil spill
Solar Power Generation
PCOS
water quality 2
kindey stone urine analysis
Hospital Mortality Prediction
smoke detection iot
PSS3E5

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT DISTINCT "version" FROM "model_score" LIMIT 100;
Results:
version
1
2
3
4
5
6
7
8

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT DISTINCT "name", "version", "step", "model" FROM "model_score" LIMIT 100;
Results:
name,version,step,model
iris,1,1,DTCG
iris,1,1,DTCE
iris,1,1,RFCG
iris,1,1,RFCE
iris,1,1,ABC
iris,1,1,LOGRL
iris,1,1,LOGRS
iris,1,1,LOGRLCV
iris,1,1,LOGRSCV
iris,1,1,MLPC1
iris,1,1,MLPC2
iris,1,1,KNCU
iris,1,1,KNCD
iris,1,1,Stack
iris,1,2,ABC
iris,1,2,LOGRL
iris,1,2,LOGRS
iris,1,2,KNCU
iris,1,2,KNCD
iris,1,2,Stack
iris,1,3,ABC
iris,1,3,LOGRL
iris,1,3,LOGRS
iris,1,3,KNCU
iris,1,3,KNCD
iris,1,3,Stack
iris,2,1,DTCG
iris,2,1,DTCE
iris,2,1,RFCG
iris,2,1,RFCE
iris,2,1,ABC
iris,2,1,LOGRL
iris,2,1,LOGRS
iris,2,1,LOGRLCV
iris,2,1,LOGRSCV
iris,2,1,MLPC1
iris,2,1,MLPC2
iris,2,1,KNCU
iris,2,1,KNCD
iris,2,1,Stack
iris,2,2,ABC
iris,2,2,LOGRS
iris,2,2,Stack
iris,2,3,ABC
iris,2,3,LOGRS
iris,2,3,Stack
iris,3,1,DTCG
iris,3,1,DTCE
iris,3,1,RFCG
iris,3,1,RFCE
iris,3,1,ABC
iris,3,1,LOGRL
iris,3,1,LOGRLCV
iris,3,1,MLPC1
iris,3,1,MLPC2
iris,3,1,KNCU
iris,3,1,KNCD
iris,3,1,Stack
iris,3,2,ABC
iris,3,2,LOGRL
iris,3,2,Stack
iris,3,3,ABC
iris,3,3,LOGRL
iris,3,3,Stack
concrete,1,1,GPRQ
concrete,1,1,DTRF
concrete,1,1,DTRA
concrete,1,1,DTRP
concrete,1,1,RFRS
concrete,1,1,RFRA
concrete,1,1,RFRP
concrete,1,1,ABR
concrete,1,1,HGBR
concrete,1,1,MLPR1
concrete,1,1,KNRU
concrete,1,1,KNRD
concrete,1,1,Stack
concrete,1,2,GPRQ
concrete,1,2,DTRF
concrete,1,2,DTRA
concrete,1,2,RFRP
concrete,1,2,HGBR
concrete,1,2,Stack
concrete,1,3,GPRQ
concrete,1,3,DTRF
concrete,1,3,DTRA
concrete,1,3,RFRP
concrete,1,3,HGBR
concrete,1,3,Stack
concrete,2,1,GPRQ
concrete,2,1,DTRF
concrete,2,1,DTRA
concrete,2,1,DTRP
concrete,2,1,RFRS
concrete,2,1,RFRA
concrete,2,1,RFRP
concrete,2,1,ABR
concrete,2,1,HGBR
concrete,2,1,MLPR1
concrete,2,1,KNRU

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT "model", "test_score" FROM "model_score" LIMIT 100;
Results:
model,test_score
DTCG,0.66
DTCE,0.74
RFCG,0.74
RFCE,0.74
ABC,0.74
LOGRL,0.82
LOGRS,0.82
LOGRLCV,0.78
LOGRSCV,0.78
MLPC1,0.18
MLPC2,0.32
KNCU,0.78
KNCD,0.74
Stack,0.78
ABC,0.74
LOGRL,0.82
LOGRS,0.82
KNCU,0.78
KNCD,0.74
Stack,0.8
ABC,0.74
LOGRL,0.82
LOGRS,0.82
KNCU,0.78
KNCD,0.74
Stack,0.8
DTCG,0.66
DTCE,0.74
RFCG,0.74
RFCE,0.74
ABC,0.74
LOGRL,0.82
LOGRS,0.82
LOGRLCV,0.78
LOGRSCV,0.78
MLPC1,0.18
MLPC2,0.32
KNCU,0.78
KNCD,0.74
Stack,0.78
ABC,0.74
LOGRS,0.82
Stack,0.8
ABC,0.74
LOGRS,0.82
Stack,0.8
DTCG,0.66
DTCE,0.74
RFCG,0.74
RFCE,0.74
ABC,0.74
LOGRL,0.82
LOGRLCV,0.78
MLPC1,0.18
MLPC2,0.32
KNCU,0.78
KNCD,0.74
Stack,0.78
ABC,0.74
LOGRL,0.82
Stack,0.8
ABC,0.74
LOGRL,0.82
Stack,0.8
GPRQ,0.8645246650525136
DTRF,0.7730221399127792
DTRA,0.750903499864533
DTRP,0.7667845100320249
RFRS,0.8542442968763078
RFRA,0.8530848503734989
RFRP,0.8468371056049129
ABR,0.5501433922826775
HGBR,0.8884068368127706
MLPR1,0.6172737606465106
KNRU,0.5161682780869268
KNRD,0.6291811573603894
Stack,0.7491240941067063
GPRQ,0.8645246650525136
DTRF,0.7730221399127792
DTRA,0.750903499864533
RFRP,0.8468371056049129
HGBR,0.8884068368127706
Stack,0.7478259090713758
GPRQ,-7.09267714466483
DTRF,0.7897656878487402
DTRA,0.7678098487937882
RFRP,0.8620411609279719
HGBR,0.8885222604143914
Stack,0.8952049262695958
GPRQ,0.8645246650525136
DTRF,0.7730221399127792
DTRA,0.750903499864533
DTRP,0.7667845100320249
RFRS,0.8542442968763078
RFRA,0.8530848503734989
RFRP,0.8468371056049129
ABR,0.5501433922826775
HGBR,0.8884068368127706
MLPR1,0.6172737606465106
KNRU,0.5161682780869268

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT "model", AVG("test_score") AS avg_test_score
   FROM "model_score"
   GROUP BY "model"
   LIMIT 100;
Results:
model,avg_test_score
ABC,0.838519537249938
ABR,0.5919769799146966
DTCE,0.8667309738498573
DTCG,0.8652168041683296
DTRA,0.7420787093938315
DTRF,0.7788352930863367
DTRP,0.7524655976008554
ELNE,-0.9116140814242191
ELNECV,-2.603806874400439
GNB,0.78087073116072
GPCL,0.8190838633454646
GPCQ,0.8778775004790024
GPCR,0.8767724250955005
GPRL,0.32780505627359446
GPRQ,0.34168081001202427
GPRR,0.6919480857360247
HGBC,0.86596748691849
HGBR,-0.015810874830600046
KERC,0.8537347580638861
KERR,-6.963762691562576
KNCD,0.844776599001376
KNCU,0.8271196120663856
KNRD,0.7319848101251462
KNRU,0.6405547858486688
LINR,-1.0794910527979908
LOGRL,0.7748279405254405
LOGRLCV,0.8049155249478578
LOGRS,0.7689578254530542
LOGRSCV,0.7808648555940279
MLPC1,0.5896178345456359
MLPC2,0.6107872728591835
MLPR1,-2080698.580877493
MLPR2,-2049912.0502233934
RFCE,0.8665485284313726
RFCG,0.8757453051121683
RFRA,0.8199511872705578
RFRP,0.821496827879482
RFRS,0.8314803647382214
SGDCH,0.16819088517882877
SGDCLL,0.8905248380773644
SGDCMH,0.8702418858873939
SVCG,0.09421487603305785
SVCL,0.0768595041322314
SVCP,0.06446280991735537
SVCS,0.033884297520661154
Stack,0.8583481565845458

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT DISTINCT "model"
   FROM "model_score"
   WHERE "model" LIKE '%Stack%'
   LIMIT 100;
Results:
model
Stack

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT DISTINCT "model"
   FROM "model_score"
   WHERE "model" NOT LIKE '%Stack%'
   LIMIT 100;
Results:
model
DTCG
DTCE
RFCG
RFCE
ABC
LOGRL
LOGRS
LOGRLCV
LOGRSCV
MLPC1
MLPC2
KNCU
KNCD
GPRQ
DTRF
DTRA
DTRP
RFRS
RFRA
RFRP
ABR
HGBR
MLPR1
KNRU
KNRD
GPCL
GPCR
GPCQ
HGBC
GNB
GPRL
GPRR
ELNE
ELNECV
LINR
MLPR2
SGDCH
SGDCLL
SGDCMH
SVCL
SVCP
SVCG
SVCS
KERC
KERR

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT "name", "version", "step", "model", "test_score"
   FROM "model_score"
   ORDER BY "name", "version", "step", "model"
   LIMIT 100;
Results:
name,version,step,model,test_score
Critical Heat Flux,1,1,ABR,0.015823236716656863
Critical Heat Flux,1,1,DTRA,0.6750008869432927
Critical Heat Flux,1,1,DTRF,0.8258695233240275
Critical Heat Flux,1,1,DTRP,0.6804750434726605
Critical Heat Flux,1,1,ELNE,0.5165548446803971
Critical Heat Flux,1,1,ELNECV,0.5136932216140497
Critical Heat Flux,1,1,GPRL,0.5187839333590234
Critical Heat Flux,1,1,GPRQ,0.8836410197441006
Critical Heat Flux,1,1,GPRR,0.8701689487569588
Critical Heat Flux,1,1,HGBR,0.7909748612960685
Critical Heat Flux,1,1,KNRD,0.8019266148562912
Critical Heat Flux,1,1,KNRU,0.7463315238951922
Critical Heat Flux,1,1,LINR,0.5219589838658285
Critical Heat Flux,1,1,MLPR1,0.6839153950917829
Critical Heat Flux,1,1,MLPR2,0.695485811364386
Critical Heat Flux,1,1,RFRA,0.7230628923282469
Critical Heat Flux,1,1,RFRP,0.7747304500371095
Critical Heat Flux,1,1,RFRS,0.8106739476375483
Critical Heat Flux,1,1,Stack,0.8767667331999809
Critical Heat Flux,1,2,GPRQ,0.8836410197441006
Critical Heat Flux,1,2,GPRR,0.8701689487569588
Critical Heat Flux,1,2,HGBR,0.7909748612960685
Critical Heat Flux,1,2,RFRP,0.7747304500371095
Critical Heat Flux,1,2,RFRS,0.8106739476375483
Critical Heat Flux,1,2,Stack,0.8860441283949297
Critical Heat Flux,1,3,GPRQ,0.8868161892955251
Critical Heat Flux,1,3,GPRR,0.8566178944751042
Critical Heat Flux,1,3,HGBR,0.76841460090968
Critical Heat Flux,1,3,RFRP,0.7765530991510545
Critical Heat Flux,1,3,RFRS,0.8088080122351561
Critical Heat Flux,1,3,Stack,0.8913847510635327
Critical Heat Flux,2,1,ABR,0.015823236716656863
Critical Heat Flux,2,1,DTRA,0.6750008869432927
Critical Heat Flux,2,1,DTRF,0.8258695233240275
Critical Heat Flux,2,1,DTRP,0.6804750434726605
Critical Heat Flux,2,1,ELNE,0.5165548446803971
Critical Heat Flux,2,1,ELNECV,0.5136932216140497
Critical Heat Flux,2,1,GPRL,0.5187839333590234
Critical Heat Flux,2,1,GPRQ,0.8836410197441006
Critical Heat Flux,2,1,GPRR,0.8701689487569588
Critical Heat Flux,2,1,HGBR,0.7909748612960685
Critical Heat Flux,2,1,KNRD,0.8019266148562912
Critical Heat Flux,2,1,KNRU,0.7463315238951922
Critical Heat Flux,2,1,LINR,0.5219589838658285
Critical Heat Flux,2,1,MLPR1,0.6839153950917829
Critical Heat Flux,2,1,MLPR2,0.695485811364386
Critical Heat Flux,2,1,RFRA,0.7230628923282469
Critical Heat Flux,2,1,RFRP,0.7747304500371095
Critical Heat Flux,2,1,RFRS,0.8106739476375483
Critical Heat Flux,2,1,Stack,0.8767667331999809
Critical Heat Flux,2,2,GPRQ,0.8836410197441006
Critical Heat Flux,2,2,RFRP,0.7747304500371095
Critical Heat Flux,2,2,RFRS,0.8106739476375483
Critical Heat Flux,2,2,Stack,0.8906124602518019
Critical Heat Flux,2,3,GPRQ,0.8868161892955251
Critical Heat Flux,2,3,RFRP,0.7765530991510545
Critical Heat Flux,2,3,RFRS,0.8088080122351561
Critical Heat Flux,2,3,Stack,0.896051215319373
Critical Heat Flux,3,1,ABR,0.015823236716656863
Critical Heat Flux,3,1,DTRA,0.6750008869432927
Critical Heat Flux,3,1,DTRF,0.8258695233240275
Critical Heat Flux,3,1,DTRP,0.6804750434726605
Critical Heat Flux,3,1,ELNE,0.5165548446803971
Critical Heat Flux,3,1,ELNECV,0.5136932216140497
Critical Heat Flux,3,1,GPRL,0.5187839333590234
Critical Heat Flux,3,1,GPRQ,0.8836410197441006
Critical Heat Flux,3,1,GPRR,0.8701689487569588
Critical Heat Flux,3,1,HGBR,0.7909748612960685
Critical Heat Flux,3,1,KNRD,0.8019266148562912
Critical Heat Flux,3,1,KNRU,0.7463315238951922
Critical Heat Flux,3,1,LINR,0.5219589838658285
Critical Heat Flux,3,1,MLPR1,0.6839153950917829
Critical Heat Flux,3,1,MLPR2,0.695485811364386
Critical Heat Flux,3,1,RFRA,0.7230628923282469
Critical Heat Flux,3,1,RFRP,0.7747304500371095
Critical Heat Flux,3,1,RFRS,0.8106739476375483
Critical Heat Flux,3,1,Stack,0.8470847778663093
Critical Heat Flux,3,2,GPRQ,0.8836410197441006
Critical Heat Flux,3,2,GPRR,0.8701689487569588
Critical Heat Flux,3,2,HGBR,0.7909748612960685
Critical Heat Flux,3,2,KNRU,0.7463315238951922
Critical Heat Flux,3,2,RFRP,0.7747304500371095
Critical Heat Flux,3,2,Stack,0.8580739277704147
Critical Heat Flux,3,3,GPRQ,0.8868161892955251
Critical Heat Flux,3,3,GPRR,0.8566178944751042
Critical Heat Flux,3,3,HGBR,0.76841460090968
Critical Heat Flux,3,3,KNRU,0.7410682664579982
Critical Heat Flux,3,3,RFRP,0.7765530991510545
Critical Heat Flux,3,3,Stack,0.820001186352687
Critical Heat Flux,4,1,ABR,0.015823236716656863
Critical Heat Flux,4,1,DTRA,0.6750008869432927
Critical Heat Flux,4,1,DTRF,0.8258695233240275
Critical Heat Flux,4,1,DTRP,0.6804750434726605
Critical Heat Flux,4,1,ELNE,0.5165548446803971
Critical Heat Flux,4,1,ELNECV,0.5136932216140497
Critical Heat Flux,4,1,GPRL,0.5187839333590234
Critical Heat Flux,4,1,GPRQ,0.8836410197441006
Critical Heat Flux,4,1,GPRR,0.8701689487569588
Critical Heat Flux,4,1,HGBR,0.7909748612960685
Critical Heat Flux,4,1,KNRD,0.8019266148562912

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT t1."name",
           t1."version",
           t1."step",
           t1."model" AS traditional_model,
           t1."test_score" AS traditional_score,
           t2."model" AS stack_model,
           t2."test_score" AS stack_score
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."model" NOT LIKE '%Stack%'
    LIMIT 100;
Results:
name,version,step,traditional_model,traditional_score,stack_model,stack_score
iris,1,1,DTCG,0.66,Stack,0.78
iris,1,1,DTCE,0.74,Stack,0.78
iris,1,1,RFCG,0.74,Stack,0.78
iris,1,1,RFCE,0.74,Stack,0.78
iris,1,1,ABC,0.74,Stack,0.78
iris,1,1,LOGRL,0.82,Stack,0.78
iris,1,1,LOGRS,0.82,Stack,0.78
iris,1,1,LOGRLCV,0.78,Stack,0.78
iris,1,1,LOGRSCV,0.78,Stack,0.78
iris,1,1,MLPC1,0.18,Stack,0.78
iris,1,1,MLPC2,0.32,Stack,0.78
iris,1,1,KNCU,0.78,Stack,0.78
iris,1,1,KNCD,0.74,Stack,0.78
iris,1,2,ABC,0.74,Stack,0.8
iris,1,2,LOGRL,0.82,Stack,0.8
iris,1,2,LOGRS,0.82,Stack,0.8
iris,1,2,KNCU,0.78,Stack,0.8
iris,1,2,KNCD,0.74,Stack,0.8
iris,1,3,ABC,0.74,Stack,0.8
iris,1,3,LOGRL,0.82,Stack,0.8
iris,1,3,LOGRS,0.82,Stack,0.8
iris,1,3,KNCU,0.78,Stack,0.8
iris,1,3,KNCD,0.74,Stack,0.8
iris,2,1,DTCG,0.66,Stack,0.78
iris,2,1,DTCE,0.74,Stack,0.78
iris,2,1,RFCG,0.74,Stack,0.78
iris,2,1,RFCE,0.74,Stack,0.78
iris,2,1,ABC,0.74,Stack,0.78
iris,2,1,LOGRL,0.82,Stack,0.78
iris,2,1,LOGRS,0.82,Stack,0.78
iris,2,1,LOGRLCV,0.78,Stack,0.78
iris,2,1,LOGRSCV,0.78,Stack,0.78
iris,2,1,MLPC1,0.18,Stack,0.78
iris,2,1,MLPC2,0.32,Stack,0.78
iris,2,1,KNCU,0.78,Stack,0.78
iris,2,1,KNCD,0.74,Stack,0.78
iris,2,2,ABC,0.74,Stack,0.8
iris,2,2,LOGRS,0.82,Stack,0.8
iris,2,3,ABC,0.74,Stack,0.8
iris,2,3,LOGRS,0.82,Stack,0.8
iris,3,1,DTCG,0.66,Stack,0.78
iris,3,1,DTCE,0.74,Stack,0.78
iris,3,1,RFCG,0.74,Stack,0.78
iris,3,1,RFCE,0.74,Stack,0.78
iris,3,1,ABC,0.74,Stack,0.78
iris,3,1,LOGRL,0.82,Stack,0.78
iris,3,1,LOGRLCV,0.78,Stack,0.78
iris,3,1,MLPC1,0.18,Stack,0.78
iris,3,1,MLPC2,0.32,Stack,0.78
iris,3,1,KNCU,0.78,Stack,0.78
iris,3,1,KNCD,0.74,Stack,0.78
iris,3,2,ABC,0.74,Stack,0.8
iris,3,2,LOGRL,0.82,Stack,0.8
iris,3,3,ABC,0.74,Stack,0.8
iris,3,3,LOGRL,0.82,Stack,0.8
concrete,1,1,GPRQ,0.8645246650525136,Stack,0.7491240941067063
concrete,1,1,DTRF,0.7730221399127792,Stack,0.7491240941067063
concrete,1,1,DTRA,0.750903499864533,Stack,0.7491240941067063
concrete,1,1,DTRP,0.7667845100320249,Stack,0.7491240941067063
concrete,1,1,RFRS,0.8542442968763078,Stack,0.7491240941067063
concrete,1,1,RFRA,0.8530848503734989,Stack,0.7491240941067063
concrete,1,1,RFRP,0.8468371056049129,Stack,0.7491240941067063
concrete,1,1,ABR,0.5501433922826775,Stack,0.7491240941067063
concrete,1,1,HGBR,0.8884068368127706,Stack,0.7491240941067063
concrete,1,1,MLPR1,0.6172737606465106,Stack,0.7491240941067063
concrete,1,1,KNRU,0.5161682780869268,Stack,0.7491240941067063
concrete,1,1,KNRD,0.6291811573603894,Stack,0.7491240941067063
concrete,1,2,GPRQ,0.8645246650525136,Stack,0.7478259090713758
concrete,1,2,DTRF,0.7730221399127792,Stack,0.7478259090713758
concrete,1,2,DTRA,0.750903499864533,Stack,0.7478259090713758
concrete,1,2,RFRP,0.8468371056049129,Stack,0.7478259090713758
concrete,1,2,HGBR,0.8884068368127706,Stack,0.7478259090713758
concrete,1,3,GPRQ,-7.09267714466483,Stack,0.8952049262695958
concrete,1,3,DTRF,0.7897656878487402,Stack,0.8952049262695958
concrete,1,3,DTRA,0.7678098487937882,Stack,0.8952049262695958
concrete,1,3,RFRP,0.8620411609279719,Stack,0.8952049262695958
concrete,1,3,HGBR,0.8885222604143914,Stack,0.8952049262695958
concrete,2,1,GPRQ,0.8645246650525136,Stack,0.7491240941067063
concrete,2,1,DTRF,0.7730221399127792,Stack,0.7491240941067063
concrete,2,1,DTRA,0.750903499864533,Stack,0.7491240941067063
concrete,2,1,DTRP,0.7667845100320249,Stack,0.7491240941067063
concrete,2,1,RFRS,0.8542442968763078,Stack,0.7491240941067063
concrete,2,1,RFRA,0.8530848503734989,Stack,0.7491240941067063
concrete,2,1,RFRP,0.8468371056049129,Stack,0.7491240941067063
concrete,2,1,ABR,0.5501433922826775,Stack,0.7491240941067063
concrete,2,1,HGBR,0.8884068368127706,Stack,0.7491240941067063
concrete,2,1,MLPR1,0.6172737606465106,Stack,0.7491240941067063
concrete,2,1,KNRU,0.5161682780869268,Stack,0.7491240941067063
concrete,2,1,KNRD,0.6291811573603894,Stack,0.7491240941067063
concrete,2,2,GPRQ,0.8645246650525136,Stack,0.5153723438701945
concrete,2,2,RFRP,0.8468371056049129,Stack,0.5153723438701945
concrete,2,2,HGBR,0.8884068368127706,Stack,0.5153723438701945
concrete,2,3,GPRQ,-6.162223676037567,Stack,0.7550913523238763
concrete,2,3,RFRP,0.7294831008781688,Stack,0.7550913523238763
concrete,2,3,HGBR,0.754951518145837,Stack,0.7550913523238763
concrete,3,1,GPRQ,0.8645246650525136,Stack,0.7491240941067063
concrete,3,1,DTRF,0.7730221399127792,Stack,0.7491240941067063
concrete,3,1,DTRA,0.750903499864533,Stack,0.7491240941067063
concrete,3,1,DTRP,0.7667845100320249,Stack,0.7491240941067063
concrete,3,1,RFRS,0.8542442968763078,Stack,0.7491240941067063

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT "model" AS traditional_model,
           COUNT(*) AS total_times_evaluated
    FROM "model_score"
    WHERE "model" NOT LIKE '%Stack%'
    GROUP BY "model"
    LIMIT 100;
Results:
traditional_model,total_times_evaluated
ABC,103
ABR,43
DTCE,83
DTCG,87
DTRA,55
DTRF,53
DTRP,36
ELNE,36
ELNECV,29
GNB,74
GPCL,56
GPCQ,92
GPCR,88
GPRL,34
GPRQ,63
GPRR,42
HGBC,108
HGBR,77
KERC,60
KERR,16
KNCD,105
KNCU,73
KNRD,49
KNRU,37
LINR,32
LOGRL,82
LOGRLCV,88
LOGRS,65
LOGRSCV,57
MLPC1,60
MLPC2,60
MLPR1,36
MLPR2,32
RFCE,153
RFCG,145
RFRA,67
RFRP,76
RFRS,75
SGDCH,8
SGDCLL,14
SGDCMH,8
SVCG,3
SVCL,3
SVCP,3
SVCS,3

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT t1."model" AS traditional_model,
           COUNT(*) AS times_performed_worse
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."test_score" < t2."test_score"
      AND t1."model" NOT LIKE '%Stack%'
    GROUP BY t1."model"
    LIMIT 100;
Results:
traditional_model,times_performed_worse
ABC,78
ABR,43
DTCE,53
DTCG,68
DTRA,44
DTRF,47
DTRP,31
ELNE,33
ELNECV,28
GNB,53
GPCL,34
GPCQ,38
GPCR,46
GPRL,31
GPRQ,37
GPRR,31
HGBC,61
HGBR,52
KERC,43
KERR,16
KNCD,68
KNCU,57
KNRD,45
KNRU,35
LINR,29
LOGRL,62
LOGRLCV,65
LOGRS,45
LOGRSCV,39
MLPC1,57
MLPC2,58
MLPR1,36
MLPR2,30
RFCE,55
RFCG,57
RFRA,52
RFRP,62
RFRS,56
SGDCH,8
SGDCLL,14
SGDCMH,8
SVCG,3
SVCL,3
SVCP,3
SVCS,3

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT t1."model" AS traditional_model,
           COUNT(*) AS times_performed_better_or_equal
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."test_score" >= t2."test_score"
      AND t1."model" NOT LIKE '%Stack%'
    GROUP BY t1."model"
    LIMIT 100;
Results:
traditional_model,times_performed_better_or_equal
ABC,25
DTCE,30
DTCG,19
DTRA,11
DTRF,6
DTRP,5
ELNE,3
ELNECV,1
GNB,21
GPCL,22
GPCQ,54
GPCR,42
GPRL,3
GPRQ,26
GPRR,11
HGBC,47
HGBR,25
KERC,17
KNCD,37
KNCU,16
KNRD,4
KNRU,2
LINR,3
LOGRL,20
LOGRLCV,23
LOGRS,20
LOGRSCV,18
MLPC1,3
MLPC2,2
MLPR2,2
RFCE,98
RFCG,88
RFRA,15
RFRP,14
RFRS,19

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT "model",
           COUNT(*) AS total_times_evaluated
    FROM "model_score"
    GROUP BY "model"
    LIMIT 100;
Results:
model,total_times_evaluated
ABC,103
ABR,43
DTCE,83
DTCG,87
DTRA,55
DTRF,53
DTRP,36
ELNE,36
ELNECV,29
GNB,74
GPCL,56
GPCQ,92
GPCR,88
GPRL,34
GPRQ,63
GPRR,42
HGBC,108
HGBR,77
KERC,60
KERR,16
KNCD,105
KNCU,73
KNRD,49
KNRU,37
LINR,32
LOGRL,82
LOGRLCV,88
LOGRS,65
LOGRSCV,57
MLPC1,60
MLPC2,60
MLPR1,36
MLPR2,32
RFCE,153
RFCG,145
RFRA,67
RFRP,76
RFRS,75
SGDCH,8
SGDCLL,14
SGDCMH,8
SVCG,3
SVCL,3
SVCP,3
SVCS,3
Stack,303

2025-01-25 09:37:09 - root - INFO - SQL:
SELECT "model",
           AVG("test_score") AS average_test_score
    FROM "model_score"
    GROUP BY "model"
    LIMIT 100;
Results:
model,average_test_score
ABC,0.838519537249938
ABR,0.5919769799146966
DTCE,0.8667309738498573
DTCG,0.8652168041683296
DTRA,0.7420787093938315
DTRF,0.7788352930863367
DTRP,0.7524655976008554
ELNE,-0.9116140814242191
ELNECV,-2.603806874400439
GNB,0.78087073116072
GPCL,0.8190838633454646
GPCQ,0.8778775004790024
GPCR,0.8767724250955005
GPRL,0.32780505627359446
GPRQ,0.34168081001202427
GPRR,0.6919480857360247
HGBC,0.86596748691849
HGBR,-0.015810874830600046
KERC,0.8537347580638861
KERR,-6.963762691562576
KNCD,0.844776599001376
KNCU,0.8271196120663856
KNRD,0.7319848101251462
KNRU,0.6405547858486688
LINR,-1.0794910527979908
LOGRL,0.7748279405254405
LOGRLCV,0.8049155249478578
LOGRS,0.7689578254530542
LOGRSCV,0.7808648555940279
MLPC1,0.5896178345456359
MLPC2,0.6107872728591835
MLPR1,-2080698.580877493
MLPR2,-2049912.0502233934
RFCE,0.8665485284313726
RFCG,0.8757453051121683
RFRA,0.8199511872705578
RFRP,0.821496827879482
RFRS,0.8314803647382214
SGDCH,0.16819088517882877
SGDCLL,0.8905248380773644
SGDCMH,0.8702418858873939
SVCG,0.09421487603305785
SVCL,0.0768595041322314
SVCP,0.06446280991735537
SVCS,0.033884297520661154
Stack,0.8583481565845458

2025-01-25 09:37:09 - root - INFO - itercount: 0
2025-01-25 09:37:09 - root - INFO - Table: problemDDL:
CREATE TABLE problem (name TEXT NOT NULL UNIQUE, path TEXT, type TEXT CHECK (type IN ("classification", "regression")), target TEXT, PRIMARY KEY (name))
Table: edaDDL:
CREATE TABLE eda (name TEXT, version INTEGER, feature TEXT, type TEXT, "range" BLOB, drop_user INTEGER CHECK (drop_user IN (0, 1)), drop_correlation INTEGER CHECK (drop_correlation IN (0, 1)), target INTEGER CHECK (target IN (0, 1)))
Table: feature_importanceDDL:
CREATE TABLE feature_importance (name TEXT, version INTEGER, step INTEGER, feature TEXT, importance NUMERIC)
Table: solutionDDL:
CREATE TABLE solution (name TEXT, version INTEGER, correlation NUMERIC, nb_model INTEGER, nb_feature INTEGER, score NUMERIC, test_size NUMERIC, resampling INTEGER CHECK (resampling IN (0, 1)) DEFAULT (0))
Table: model_scoreDDL:
CREATE TABLE model_score (name TEXT, version INTEGER, step INTEGER, model TEXT, train_score NUMERIC, test_score NUMERIC)
Table: model_importanceDDL:
CREATE TABLE model_importance (name TEXT, version INTEGER, step INTEGER, model TEXT, importance NUMERIC)
Table: modelDDL:
CREATE TABLE model (name TEXT, version INTEGER, step INTEGER CHECK (step IN (1, 2, 3)), L1_model TEXT CHECK (L1_model IN ("regression", "tree")))
External knowledge that might be helpful: 
None
The table structure information is (table names): 
['problem', 'eda', 'feature_importance', 'solution', 'model_score', 'model_importance', 'model']
Begin Exploring Related Columns
**Relevant tables and columns:**

- **Table:** `model_score`
  - **Column:** `model` - Potential usage: To identify different models, including traditional models and the Stack model.
  - **Column:** `test_score` - Potential usage: To compare the performance of models.
  - **Columns:** `name`, `version`, `step` - Potential usage: To group or filter results per experiment (`name`), version, and step.

**Conditions that may be used:**

- Group results by `model` to compare their performance across experiments.
- Use `test_score` to compare models at the same `name`, `version`, and `step`.
- Identify the Stack model by filtering models that contain the word 'Stack' in their name.

---

**SQL Queries:**

1. **List all distinct models available in the `model_score` table:**

   ```sql
   SELECT DISTINCT "model" FROM "model_score" LIMIT 100;
   ```

2. **List all distinct experiment names in the `model_score` table:**

   ```sql
   SELECT DISTINCT "name" FROM "model_score" LIMIT 100;
   ```

3. **List all distinct versions in the `model_score` table:**

   ```sql
   SELECT DISTINCT "version" FROM "model_score" LIMIT 100;
   ```

4. **List all unique combinations of `name`, `version`, `step`, and `model`:**

   ```sql
   SELECT DISTINCT "name", "version", "step", "model" FROM "model_score" LIMIT 100;
   ```

5. **Get the test scores for all models:**

   ```sql
   SELECT "model", "test_score" FROM "model_score" LIMIT 100;
   ```

6. **Get the average test score per model:**

   ```sql
   SELECT "model", AVG("test_score") AS avg_test_score
   FROM "model_score"
   GROUP BY "model"
   LIMIT 100;
   ```

7. **List all models that are Stack models (models with 'Stack' in their name):**

   ```sql
   SELECT DISTINCT "model"
   FROM "model_score"
   WHERE "model" LIKE '%Stack%'
   LIMIT 100;
   ```

8. **List all traditional models (excluding Stack models):**

   ```sql
   SELECT DISTINCT "model"
   FROM "model_score"
   WHERE "model" NOT LIKE '%Stack%'
   LIMIT 100;
   ```

9. **Get test scores of all models along with their `name`, `version`, and `step`:**

   ```sql
   SELECT "name", "version", "step", "model", "test_score"
   FROM "model_score"
   ORDER BY "name", "version", "step", "model"
   LIMIT 100;
   ```

10. **Compare test scores between Stack models and traditional models for each `name`, `version`, and `step`:**

    ```sql
    SELECT t1."name",
           t1."version",
           t1."step",
           t1."model" AS traditional_model,
           t1."test_score" AS traditional_score,
           t2."model" AS stack_model,
           t2."test_score" AS stack_score
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."model" NOT LIKE '%Stack%'
    LIMIT 100;
    ```

11. **Count the number of times each traditional model was evaluated:**

    ```sql
    SELECT "model" AS traditional_model,
           COUNT(*) AS total_times_evaluated
    FROM "model_score"
    WHERE "model" NOT LIKE '%Stack%'
    GROUP BY "model"
    LIMIT 100;
    ```

12. **Count the number of times each traditional model performed worse than the Stack model:**

    ```sql
    SELECT t1."model" AS traditional_model,
           COUNT(*) AS times_performed_worse
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."test_score" < t2."test_score"
      AND t1."model" NOT LIKE '%Stack%'
    GROUP BY t1."model"
    LIMIT 100;
    ```

13. **Calculate the number of times each traditional model performed better or equal to the Stack model:**

    ```sql
    SELECT t1."model" AS traditional_model,
           COUNT(*) AS times_performed_better_or_equal
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."test_score" >= t2."test_score"
      AND t1."model" NOT LIKE '%Stack%'
    GROUP BY t1."model"
    LIMIT 100;
    ```

14. **Get total times each model was evaluated (including Stack and traditional models):**

    ```sql
    SELECT "model",
           COUNT(*) AS total_times_evaluated
    FROM "model_score"
    GROUP BY "model"
    LIMIT 100;
    ```

15. **List the average `test_score` for each model across all steps and versions:**

    ```sql
    SELECT "model",
           AVG("test_score") AS average_test_score
    FROM "model_score"
    GROUP BY "model"
    LIMIT 100;
    ```

**Note:** These queries help in understanding the distribution of models, their performance, and comparisons between traditional models and the Stack model across all steps and versions.Query:
SELECT DISTINCT "model" FROM "model_score" LIMIT 100;
Answer:
model
DTCG
DTCE
RFCG
RFCE
ABC
LOGRL
LOGRS
LOGRLCV
LOGRSCV
MLPC1
MLPC2
KNCU
KNCD
Stack
GPRQ
DTRF
DTRA
DTRP
RFRS
RFRA
RFRP
ABR
HGBR
MLPR1
KNRU
KNRD
GPCL
GPCR
GPCQ
HGBC
GNB
GPRL
GPRR
ELNE
ELNECV
LINR
MLPR2
SGDCH
SGDCLL
SGDCMH
SVCL
SVCP
SVCG
SVCS
KERC
KERR
Query:
SELECT DISTINCT "name" FROM "model_score" LIMIT 100;
Answer:
name
iris
concrete
Delaney solubility
Critical Heat Flux
Liver disease prediction
Pumpkin Seeds
water quality
lithium ion batteries
diabetes
Franck-Hertz
Tunnel diode
survey lung cancer
oil spill
Solar Power Generation
PCOS
water quality 2
kindey stone urine analysis
Hospital Mortality Prediction
smoke detection iot
PSS3E5
Query:
SELECT DISTINCT "version" FROM "model_score" LIMIT 100;
Answer:
version
1
2
3
4
5
6
7
8
Query:
SELECT DISTINCT "name", "version", "step", "model" FROM "model_score" LIMIT 100;
Answer:
name,version,step,model
iris,1,1,DTCG
iris,1,1,DTCE
iris,1,1,RFCG
iris,1,1,RFCE
iris,1,1,ABC
iris,1,1,LOGRL
iris,1,1,LOGRS
iris,1,1,LOGRLCV
iris,1,1,LOGRSCV
iris,1,1,MLPC1
iris,1,1,MLPC2
iris,1,1,KNCU
iris,1,1,KNCD
iris,1,1,Stack
iris,1,2,ABC
iris,1,2,LOGRL
iris,1,2,LOGRS
iris,1,2,KNCU
iris,1,2,KNCD
iris,1,2,Stack
iris,1,3,ABC
iris,1,3,LOGRL
iris,1,3,LOGRS
iris,1,3,KNCU
iris,1,3,KNCD
iris,1,3,Stack
iris,2,1,DTCG
iris,2,1,DTCE
iris,2,1,RFCG
iris,2,1,RFCE
iris,2,1,ABC
iris,2,1,LOGRL
iris,2,1,LOGRS
iris,2,1,LOGRLCV
iris,2,1,LOGRSCV
iris,2,1,MLPC1
iris,2,1,MLPC2
iris,2,1,KNCU
iris,2,1,KNCD
iris,2,1,Stack
iris,2,2,ABC
iris,2,2,LOGRS
iris,2,2,Stack
iris,2,3,ABC
iris,2,3,LOGRS
iris,2,3,Stack
iris,3,1,DTCG
iris,3,1,DTCE
iris,3,1,RFCG
iris,3,1,RFCE
iris,3,1,ABC
iris,3,1,LOGRL
iris,3,1,LOGRLCV
iris,3,1,MLPC1
iris,3,1,MLPC2
iris,3,1,KNCU
iris,3,1,KNCD
iris,3,1,Stack
iris,3,2,ABC
iris,3,2,LOGRL
iris,3,2,Stack
iris,3,3,ABC
iris,3,3,LOGRL
iris,3,3,Stack
concrete,1,1,GPRQ
concrete,1,1,DTRF
concrete,1,1,DTRA
concrete,1,1,DTRP
concrete,1,1,RFRS
concrete,1,1,RFRA
concrete,1,1,RFRP
concrete,1,1,ABR
concrete,1,1,HGBR
concrete,1,1,MLPR1
concrete,1,1,KNRU
concrete,1,1,KNRD
concrete,1,1,Stack
concrete,1,2,GPRQ
concrete,1,2,DTRF
concrete,1,2,DTRA
concrete,1,2,RFRP
concrete,1,2,HGBR
concrete,1,2,Stack
concrete,1,3,GPRQ
concrete,1,3,DTRF
concrete,1,3,DTRA
concrete,1,3,RFRP
concrete,1,3,HGBR
concrete,1,3,Stack
concrete,2,1,GPRQ
concrete,2,1,DTRF
concrete,2,1,DTRA
concrete,2,1,DTRP
concrete,2,1,RFRS
concrete,2,1,RFRA
concrete,2,1,RFRP
concrete,2,1,ABR
concrete,2,1,HGBR
concrete,2,1,MLPR1
concrete,2,1,KNRU
Query:
SELECT "model", "test_score" FROM "model_score" LIMIT 100;
Answer:
model,test_score
DTCG,0.66
DTCE,0.74
RFCG,0.74
RFCE,0.74
ABC,0.74
LOGRL,0.82
LOGRS,0.82
LOGRLCV,0.78
LOGRSCV,0.78
MLPC1,0.18
MLPC2,0.32
KNCU,0.78
KNCD,0.74
Stack,0.78
ABC,0.74
LOGRL,0.82
LOGRS,0.82
KNCU,0.78
KNCD,0.74
Stack,0.8
ABC,0.74
LOGRL,0.82
LOGRS,0.82
KNCU,0.78
KNCD,0.74
Stack,0.8
DTCG,0.66
DTCE,0.74
RFCG,0.74
RFCE,0.74
ABC,0.74
LOGRL,0.82
LOGRS,0.82
LOGRLCV,0.78
LOGRSCV,0.78
MLPC1,0.18
MLPC2,0.32
KNCU,0.78
KNCD,0.74
Stack,0.78
ABC,0.74
LOGRS,0.82
Stack,0.8
ABC,0.74
LOGRS,0.82
Stack,0.8
DTCG,0.66
DTCE,0.74
RFCG,0.74
RFCE,0.74
ABC,0.74
LOGRL,0.82
LOGRLCV,0.78
MLPC1,0.18
MLPC2,0.32
KNCU,0.78
KNCD,0.74
Stack,0.78
ABC,0.74
LOGRL,0.82
Stack,0.8
ABC,0.74
LOGRL,0.82
Stack,0.8
GPRQ,0.8645246650525136
DTRF,0.7730221399127792
DTRA,0.750903499864533
DTRP,0.7667845100320249
RFRS,0.8542442968763078
RFRA,0.8530848503734989
RFRP,0.8468371056049129
ABR,0.5501433922826775
HGBR,0.8884068368127706
MLPR1,0.6172737606465106
KNRU,0.5161682780869268
KNRD,0.6291811573603894
Stack,0.7491240941067063
GPRQ,0.8645246650525136
DTRF,0.7730221399127792
DTRA,0.750903499864533
RFRP,0.8468371056049129
HGBR,0.8884068368127706
Stack,0.7478259090713758
GPRQ,-7.09267714466483
DTRF,0.7897656878487402
DTRA,0.7678098487937882
RFRP,0.8620411609279719
HGBR,0.8885222604143914
Stack,0.8952049262695958
GPRQ,0.8645246650525136
DTRF,0.7730221399127792
DTRA,0.750903499864533
DTRP,0.7667845100320249
RFRS,0.8542442968763078
RFRA,0.8530848503734989
RFRP,0.8468371056049129
ABR,0.5501433922826775
HGBR,0.8884068368127706
MLPR1,0.6172737606465106
KNRU,0.5161682780869268
Query:
SELECT "model", AVG("test_score") AS avg_test_score
   FROM "model_score"
   GROUP BY "model"
   LIMIT 100;
Answer:
model,avg_test_score
ABC,0.838519537249938
ABR,0.5919769799146966
DTCE,0.8667309738498573
DTCG,0.8652168041683296
DTRA,0.7420787093938315
DTRF,0.7788352930863367
DTRP,0.7524655976008554
ELNE,-0.9116140814242191
ELNECV,-2.603806874400439
GNB,0.78087073116072
GPCL,0.8190838633454646
GPCQ,0.8778775004790024
GPCR,0.8767724250955005
GPRL,0.32780505627359446
GPRQ,0.34168081001202427
GPRR,0.6919480857360247
HGBC,0.86596748691849
HGBR,-0.015810874830600046
KERC,0.8537347580638861
KERR,-6.963762691562576
KNCD,0.844776599001376
KNCU,0.8271196120663856
KNRD,0.7319848101251462
KNRU,0.6405547858486688
LINR,-1.0794910527979908
LOGRL,0.7748279405254405
LOGRLCV,0.8049155249478578
LOGRS,0.7689578254530542
LOGRSCV,0.7808648555940279
MLPC1,0.5896178345456359
MLPC2,0.6107872728591835
MLPR1,-2080698.580877493
MLPR2,-2049912.0502233934
RFCE,0.8665485284313726
RFCG,0.8757453051121683
RFRA,0.8199511872705578
RFRP,0.821496827879482
RFRS,0.8314803647382214
SGDCH,0.16819088517882877
SGDCLL,0.8905248380773644
SGDCMH,0.8702418858873939
SVCG,0.09421487603305785
SVCL,0.0768595041322314
SVCP,0.06446280991735537
SVCS,0.033884297520661154
Stack,0.8583481565845458
Query:
SELECT DISTINCT "model"
   FROM "model_score"
   WHERE "model" LIKE '%Stack%'
   LIMIT 100;
Answer:
model
Stack
Query:
SELECT DISTINCT "model"
   FROM "model_score"
   WHERE "model" NOT LIKE '%Stack%'
   LIMIT 100;
Answer:
model
DTCG
DTCE
RFCG
RFCE
ABC
LOGRL
LOGRS
LOGRLCV
LOGRSCV
MLPC1
MLPC2
KNCU
KNCD
GPRQ
DTRF
DTRA
DTRP
RFRS
RFRA
RFRP
ABR
HGBR
MLPR1
KNRU
KNRD
GPCL
GPCR
GPCQ
HGBC
GNB
GPRL
GPRR
ELNE
ELNECV
LINR
MLPR2
SGDCH
SGDCLL
SGDCMH
SVCL
SVCP
SVCG
SVCS
KERC
KERR
Query:
SELECT "name", "version", "step", "model", "test_score"
   FROM "model_score"
   ORDER BY "name", "version", "step", "model"
   LIMIT 100;
Answer:
name,version,step,model,test_score
Critical Heat Flux,1,1,ABR,0.015823236716656863
Critical Heat Flux,1,1,DTRA,0.6750008869432927
Critical Heat Flux,1,1,DTRF,0.8258695233240275
Critical Heat Flux,1,1,DTRP,0.6804750434726605
Critical Heat Flux,1,1,ELNE,0.5165548446803971
Critical Heat Flux,1,1,ELNECV,0.5136932216140497
Critical Heat Flux,1,1,GPRL,0.5187839333590234
Critical Heat Flux,1,1,GPRQ,0.8836410197441006
Critical Heat Flux,1,1,GPRR,0.8701689487569588
Critical Heat Flux,1,1,HGBR,0.7909748612960685
Critical Heat Flux,1,1,KNRD,0.8019266148562912
Critical Heat Flux,1,1,KNRU,0.7463315238951922
Critical Heat Flux,1,1,LINR,0.5219589838658285
Critical Heat Flux,1,1,MLPR1,0.6839153950917829
Critical Heat Flux,1,1,MLPR2,0.695485811364386
Critical Heat Flux,1,1,RFRA,0.7230628923282469
Critical Heat Flux,1,1,RFRP,0.7747304500371095
Critical Heat Flux,1,1,RFRS,0.8106739476375483
Critical Heat Flux,1,1,Stack,0.8767667331999809
Critical Heat Flux,1,2,GPRQ,0.8836410197441006
Critical Heat Flux,1,2,GPRR,0.8701689487569588
Critical Heat Flux,1,2,HGBR,0.7909748612960685
Critical Heat Flux,1,2,RFRP,0.7747304500371095
Critical Heat Flux,1,2,RFRS,0.8106739476375483
Critical Heat Flux,1,2,Stack,0.8860441283949297
Critical Heat Flux,1,3,GPRQ,0.8868161892955251
Critical Heat Flux,1,3,GPRR,0.8566178944751042
Critical Heat Flux,1,3,HGBR,0.76841460090968
Critical Heat Flux,1,3,RFRP,0.7765530991510545
Critical Heat Flux,1,3,RFRS,0.8088080122351561
Critical Heat Flux,1,3,Stack,0.8913847510635327
Critical Heat Flux,2,1,ABR,0.015823236716656863
Critical Heat Flux,2,1,DTRA,0.6750008869432927
Critical Heat Flux,2,1,DTRF,0.8258695233240275
Critical Heat Flux,2,1,DTRP,0.6804750434726605
Critical Heat Flux,2,1,ELNE,0.5165548446803971
Critical Heat Flux,2,1,ELNECV,0.5136932216140497
Critical Heat Flux,2,1,GPRL,0.5187839333590234
Critical Heat Flux,2,1,GPRQ,0.8836410197441006
Critical Heat Flux,2,1,GPRR,0.8701689487569588
Critical Heat Flux,2,1,HGBR,0.7909748612960685
Critical Heat Flux,2,1,KNRD,0.8019266148562912
Critical Heat Flux,2,1,KNRU,0.7463315238951922
Critical Heat Flux,2,1,LINR,0.5219589838658285
Critical Heat Flux,2,1,MLPR1,0.6839153950917829
Critical Heat Flux,2,1,MLPR2,0.695485811364386
Critical Heat Flux,2,1,RFRA,0.7230628923282469
Critical Heat Flux,2,1,RFRP,0.7747304500371095
Critical Heat Flux,2,1,RFRS,0.8106739476375483
Critical Heat Flux,2,1,Stack,0.8767667331999809
Critical Heat Flux,2,2,GPRQ,0.8836410197441006
Critical Heat Flux,2,2,RFRP,0.7747304500371095
Critical Heat Flux,2,2,RFRS,0.8106739476375483
Critical Heat Flux,2,2,Stack,0.8906124602518019
Critical Heat Flux,2,3,GPRQ,0.8868161892955251
Critical Heat Flux,2,3,RFRP,0.7765530991510545
Critical Heat Flux,2,3,RFRS,0.8088080122351561
Critical Heat Flux,2,3,Stack,0.896051215319373
Critical Heat Flux,3,1,ABR,0.015823236716656863
Critical Heat Flux,3,1,DTRA,0.6750008869432927
Critical Heat Flux,3,1,DTRF,0.8258695233240275
Critical Heat Flux,3,1,DTRP,0.6804750434726605
Critical Heat Flux,3,1,ELNE,0.5165548446803971
Critical Heat Flux,3,1,ELNECV,0.5136932216140497
Critical Heat Flux,3,1,GPRL,0.5187839333590234
Critical Heat Flux,3,1,GPRQ,0.8836410197441006
Critical Heat Flux,3,1,GPRR,0.8701689487569588
Critical Heat Flux,3,1,HGBR,0.7909748612960685
Critical Heat Flux,3,1,KNRD,0.8019266148562912
Critical Heat Flux,3,1,KNRU,0.7463315238951922
Critical Heat Flux,3,1,LINR,0.5219589838658285
Critical Heat Flux,3,1,MLPR1,0.6839153950917829
Critical Heat Flux,3,1,MLPR2,0.695485811364386
Critical Heat Flux,3,1,RFRA,0.7230628923282469
Critical Heat Flux,3,1,RFRP,0.7747304500371095
Critical Heat Flux,3,1,RFRS,0.8106739476375483
Critical Heat Flux,3,1,Stack,0.8470847778663093
Critical Heat Flux,3,2,GPRQ,0.8836410197441006
Critical Heat Flux,3,2,GPRR,0.8701689487569588
Critical Heat Flux,3,2,HGBR,0.7909748612960685
Critical Heat Flux,3,2,KNRU,0.7463315238951922
Critical Heat Flux,3,2,RFRP,0.7747304500371095
Critical Heat Flux,3,2,Stack,0.8580739277704147
Critical Heat Flux,3,3,GPRQ,0.8868161892955251
Critical Heat Flux,3,3,GPRR,0.8566178944751042
Critical Heat Flux,3,3,HGBR,0.76841460090968
Critical Heat Flux,3,3,KNRU,0.7410682664579982
Critical Heat Flux,3,3,RFRP,0.7765530991510545
Critical Heat Flux,3,3,Stack,0.820001186352687
Critical Heat Flux,4,1,ABR,0.015823236716656863
Critical Heat Flux,4,1,DTRA,0.6750008869432927
Critical Heat Flux,4,1,DTRF,0.8258695233240275
Critical Heat Flux,4,1,DTRP,0.6804750434726605
Critical Heat Flux,4,1,ELNE,0.5165548446803971
Critical Heat Flux,4,1,ELNECV,0.5136932216140497
Critical Heat Flux,4,1,GPRL,0.5187839333590234
Critical Heat Flux,4,1,GPRQ,0.8836410197441006
Critical Heat Flux,4,1,GPRR,0.8701689487569588
Critical Heat Flux,4,1,HGBR,0.7909748612960685
Critical Heat Flux,4,1,KNRD,0.8019266148562912
Query:
SELECT t1."name",
           t1."version",
           t1."step",
           t1."model" AS traditional_model,
           t1."test_score" AS traditional_score,
           t2."model" AS stack_model,
           t2."test_score" AS stack_score
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."model" NOT LIKE '%Stack%'
    LIMIT 100;
Answer:
name,version,step,traditional_model,traditional_score,stack_model,stack_score
iris,1,1,DTCG,0.66,Stack,0.78
iris,1,1,DTCE,0.74,Stack,0.78
iris,1,1,RFCG,0.74,Stack,0.78
iris,1,1,RFCE,0.74,Stack,0.78
iris,1,1,ABC,0.74,Stack,0.78
iris,1,1,LOGRL,0.82,Stack,0.78
iris,1,1,LOGRS,0.82,Stack,0.78
iris,1,1,LOGRLCV,0.78,Stack,0.78
iris,1,1,LOGRSCV,0.78,Stack,0.78
iris,1,1,MLPC1,0.18,Stack,0.78
iris,1,1,MLPC2,0.32,Stack,0.78
iris,1,1,KNCU,0.78,Stack,0.78
iris,1,1,KNCD,0.74,Stack,0.78
iris,1,2,ABC,0.74,Stack,0.8
iris,1,2,LOGRL,0.82,Stack,0.8
iris,1,2,LOGRS,0.82,Stack,0.8
iris,1,2,KNCU,0.78,Stack,0.8
iris,1,2,KNCD,0.74,Stack,0.8
iris,1,3,ABC,0.74,Stack,0.8
iris,1,3,LOGRL,0.82,Stack,0.8
iris,1,3,LOGRS,0.82,Stack,0.8
iris,1,3,KNCU,0.78,Stack,0.8
iris,1,3,KNCD,0.74,Stack,0.8
iris,2,1,DTCG,0.66,Stack,0.78
iris,2,1,DTCE,0.74,Stack,0.78
iris,2,1,RFCG,0.74,Stack,0.78
iris,2,1,RFCE,0.74,Stack,0.78
iris,2,1,ABC,0.74,Stack,0.78
iris,2,1,LOGRL,0.82,Stack,0.78
iris,2,1,LOGRS,0.82,Stack,0.78
iris,2,1,LOGRLCV,0.78,Stack,0.78
iris,2,1,LOGRSCV,0.78,Stack,0.78
iris,2,1,MLPC1,0.18,Stack,0.78
iris,2,1,MLPC2,0.32,Stack,0.78
iris,2,1,KNCU,0.78,Stack,0.78
iris,2,1,KNCD,0.74,Stack,0.78
iris,2,2,ABC,0.74,Stack,0.8
iris,2,2,LOGRS,0.82,Stack,0.8
iris,2,3,ABC,0.74,Stack,0.8
iris,2,3,LOGRS,0.82,Stack,0.8
iris,3,1,DTCG,0.66,Stack,0.78
iris,3,1,DTCE,0.74,Stack,0.78
iris,3,1,RFCG,0.74,Stack,0.78
iris,3,1,RFCE,0.74,Stack,0.78
iris,3,1,ABC,0.74,Stack,0.78
iris,3,1,LOGRL,0.82,Stack,0.78
iris,3,1,LOGRLCV,0.78,Stack,0.78
iris,3,1,MLPC1,0.18,Stack,0.78
iris,3,1,MLPC2,0.32,Stack,0.78
iris,3,1,KNCU,0.78,Stack,0.78
iris,3,1,KNCD,0.74,Stack,0.78
iris,3,2,ABC,0.74,Stack,0.8
iris,3,2,LOGRL,0.82,Stack,0.8
iris,3,3,ABC,0.74,Stack,0.8
iris,3,3,LOGRL,0.82,Stack,0.8
concrete,1,1,GPRQ,0.8645246650525136,Stack,0.7491240941067063
concrete,1,1,DTRF,0.7730221399127792,Stack,0.7491240941067063
concrete,1,1,DTRA,0.750903499864533,Stack,0.7491240941067063
concrete,1,1,DTRP,0.7667845100320249,Stack,0.7491240941067063
concrete,1,1,RFRS,0.8542442968763078,Stack,0.7491240941067063
concrete,1,1,RFRA,0.8530848503734989,Stack,0.7491240941067063
concrete,1,1,RFRP,0.8468371056049129,Stack,0.7491240941067063
concrete,1,1,ABR,0.5501433922826775,Stack,0.7491240941067063
concrete,1,1,HGBR,0.8884068368127706,Stack,0.7491240941067063
concrete,1,1,MLPR1,0.6172737606465106,Stack,0.7491240941067063
concrete,1,1,KNRU,0.5161682780869268,Stack,0.7491240941067063
concrete,1,1,KNRD,0.6291811573603894,Stack,0.7491240941067063
concrete,1,2,GPRQ,0.8645246650525136,Stack,0.7478259090713758
concrete,1,2,DTRF,0.7730221399127792,Stack,0.7478259090713758
concrete,1,2,DTRA,0.750903499864533,Stack,0.7478259090713758
concrete,1,2,RFRP,0.8468371056049129,Stack,0.7478259090713758
concrete,1,2,HGBR,0.8884068368127706,Stack,0.7478259090713758
concrete,1,3,GPRQ,-7.09267714466483,Stack,0.8952049262695958
concrete,1,3,DTRF,0.7897656878487402,Stack,0.8952049262695958
concrete,1,3,DTRA,0.7678098487937882,Stack,0.8952049262695958
concrete,1,3,RFRP,0.8620411609279719,Stack,0.8952049262695958
concrete,1,3,HGBR,0.8885222604143914,Stack,0.8952049262695958
concrete,2,1,GPRQ,0.8645246650525136,Stack,0.7491240941067063
concrete,2,1,DTRF,0.7730221399127792,Stack,0.7491240941067063
concrete,2,1,DTRA,0.750903499864533,Stack,0.7491240941067063
concrete,2,1,DTRP,0.7667845100320249,Stack,0.7491240941067063
concrete,2,1,RFRS,0.8542442968763078,Stack,0.7491240941067063
concrete,2,1,RFRA,0.8530848503734989,Stack,0.7491240941067063
concrete,2,1,RFRP,0.8468371056049129,Stack,0.7491240941067063
concrete,2,1,ABR,0.5501433922826775,Stack,0.7491240941067063
concrete,2,1,HGBR,0.8884068368127706,Stack,0.7491240941067063
concrete,2,1,MLPR1,0.6172737606465106,Stack,0.7491240941067063
concrete,2,1,KNRU,0.5161682780869268,Stack,0.7491240941067063
concrete,2,1,KNRD,0.6291811573603894,Stack,0.7491240941067063
concrete,2,2,GPRQ,0.8645246650525136,Stack,0.5153723438701945
concrete,2,2,RFRP,0.8468371056049129,Stack,0.5153723438701945
concrete,2,2,HGBR,0.8884068368127706,Stack,0.5153723438701945
concrete,2,3,GPRQ,-6.162223676037567,Stack,0.7550913523238763
concrete,2,3,RFRP,0.7294831008781688,Stack,0.7550913523238763
concrete,2,3,HGBR,0.754951518145837,Stack,0.7550913523238763
concrete,3,1,GPRQ,0.8645246650525136,Stack,0.7491240941067063
concrete,3,1,DTRF,0.7730221399127792,Stack,0.7491240941067063
concrete,3,1,DTRA,0.750903499864533,Stack,0.7491240941067063
concrete,3,1,DTRP,0.7667845100320249,Stack,0.7491240941067063
concrete,3,1,RFRS,0.8542442968763078,Stack,0.7491240941067063
Query:
SELECT "model" AS traditional_model,
           COUNT(*) AS total_times_evaluated
    FROM "model_score"
    WHERE "model" NOT LIKE '%Stack%'
    GROUP BY "model"
    LIMIT 100;
Answer:
traditional_model,total_times_evaluated
ABC,103
ABR,43
DTCE,83
DTCG,87
DTRA,55
DTRF,53
DTRP,36
ELNE,36
ELNECV,29
GNB,74
GPCL,56
GPCQ,92
GPCR,88
GPRL,34
GPRQ,63
GPRR,42
HGBC,108
HGBR,77
KERC,60
KERR,16
KNCD,105
KNCU,73
KNRD,49
KNRU,37
LINR,32
LOGRL,82
LOGRLCV,88
LOGRS,65
LOGRSCV,57
MLPC1,60
MLPC2,60
MLPR1,36
MLPR2,32
RFCE,153
RFCG,145
RFRA,67
RFRP,76
RFRS,75
SGDCH,8
SGDCLL,14
SGDCMH,8
SVCG,3
SVCL,3
SVCP,3
SVCS,3
Query:
SELECT t1."model" AS traditional_model,
           COUNT(*) AS times_performed_worse
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."test_score" < t2."test_score"
      AND t1."model" NOT LIKE '%Stack%'
    GROUP BY t1."model"
    LIMIT 100;
Answer:
traditional_model,times_performed_worse
ABC,78
ABR,43
DTCE,53
DTCG,68
DTRA,44
DTRF,47
DTRP,31
ELNE,33
ELNECV,28
GNB,53
GPCL,34
GPCQ,38
GPCR,46
GPRL,31
GPRQ,37
GPRR,31
HGBC,61
HGBR,52
KERC,43
KERR,16
KNCD,68
KNCU,57
KNRD,45
KNRU,35
LINR,29
LOGRL,62
LOGRLCV,65
LOGRS,45
LOGRSCV,39
MLPC1,57
MLPC2,58
MLPR1,36
MLPR2,30
RFCE,55
RFCG,57
RFRA,52
RFRP,62
RFRS,56
SGDCH,8
SGDCLL,14
SGDCMH,8
SVCG,3
SVCL,3
SVCP,3
SVCS,3
Query:
SELECT t1."model" AS traditional_model,
           COUNT(*) AS times_performed_better_or_equal
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."test_score" >= t2."test_score"
      AND t1."model" NOT LIKE '%Stack%'
    GROUP BY t1."model"
    LIMIT 100;
Answer:
traditional_model,times_performed_better_or_equal
ABC,25
DTCE,30
DTCG,19
DTRA,11
DTRF,6
DTRP,5
ELNE,3
ELNECV,1
GNB,21
GPCL,22
GPCQ,54
GPCR,42
GPRL,3
GPRQ,26
GPRR,11
HGBC,47
HGBR,25
KERC,17
KNCD,37
KNCU,16
KNRD,4
KNRU,2
LINR,3
LOGRL,20
LOGRLCV,23
LOGRS,20
LOGRSCV,18
MLPC1,3
MLPC2,2
MLPR2,2
RFCE,98
RFCG,88
RFRA,15
RFRP,14
RFRS,19
Query:
SELECT "model",
           COUNT(*) AS total_times_evaluated
    FROM "model_score"
    GROUP BY "model"
    LIMIT 100;
Answer:
model,total_times_evaluated
ABC,103
ABR,43
DTCE,83
DTCG,87
DTRA,55
DTRF,53
DTRP,36
ELNE,36
ELNECV,29
GNB,74
GPCL,56
GPCQ,92
GPCR,88
GPRL,34
GPRQ,63
GPRR,42
HGBC,108
HGBR,77
KERC,60
KERR,16
KNCD,105
KNCU,73
KNRD,49
KNRU,37
LINR,32
LOGRL,82
LOGRLCV,88
LOGRS,65
LOGRSCV,57
MLPC1,60
MLPC2,60
MLPR1,36
MLPR2,32
RFCE,153
RFCG,145
RFRA,67
RFRP,76
RFRS,75
SGDCH,8
SGDCLL,14
SGDCMH,8
SVCG,3
SVCL,3
SVCP,3
SVCS,3
Stack,303
Query:
SELECT "model",
           AVG("test_score") AS average_test_score
    FROM "model_score"
    GROUP BY "model"
    LIMIT 100;
Answer:
model,average_test_score
ABC,0.838519537249938
ABR,0.5919769799146966
DTCE,0.8667309738498573
DTCG,0.8652168041683296
DTRA,0.7420787093938315
DTRF,0.7788352930863367
DTRP,0.7524655976008554
ELNE,-0.9116140814242191
ELNECV,-2.603806874400439
GNB,0.78087073116072
GPCL,0.8190838633454646
GPCQ,0.8778775004790024
GPCR,0.8767724250955005
GPRL,0.32780505627359446
GPRQ,0.34168081001202427
GPRR,0.6919480857360247
HGBC,0.86596748691849
HGBR,-0.015810874830600046
KERC,0.8537347580638861
KERR,-6.963762691562576
KNCD,0.844776599001376
KNCU,0.8271196120663856
KNRD,0.7319848101251462
KNRU,0.6405547858486688
LINR,-1.0794910527979908
LOGRL,0.7748279405254405
LOGRLCV,0.8049155249478578
LOGRS,0.7689578254530542
LOGRSCV,0.7808648555940279
MLPC1,0.5896178345456359
MLPC2,0.6107872728591835
MLPR1,-2080698.580877493
MLPR2,-2049912.0502233934
RFCE,0.8665485284313726
RFCG,0.8757453051121683
RFRA,0.8199511872705578
RFRP,0.821496827879482
RFRS,0.8314803647382214
SGDCH,0.16819088517882877
SGDCLL,0.8905248380773644
SGDCMH,0.8702418858873939
SVCG,0.09421487603305785
SVCL,0.0768595041322314
SVCP,0.06446280991735537
SVCS,0.033884297520661154
Stack,0.8583481565845458
End Exploring Related Columns
Task: Which models have more instances where traditional models perform worse than the Stack model than the total times these models were evaluated across all steps and versions?

Please answer only one complete SQL in sqlite dialect in ```sql``` format.
Usage example: ```sql
SELECT DISTINCT "column_name" FROM "table_name" WHERE ... ``` (Replace "table_name" with the actual table name. Enclose table and column names with double quotations if they contain special characters or match reserved keywords.)
Follow the answer format like: ```csv
model
model_name1:str
model_name2:str
...
```

These are the models that, across all steps and versions, performed worse than the Stack model more times than they performed better..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: 

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-25 09:37:55 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 09:37:55 - root - INFO - ```sql
SELECT t1."model" AS traditional_model
FROM (
    SELECT t1."model",
           SUM(CASE WHEN t1."test_score" < t2."test_score" THEN 1 ELSE 0 END) AS times_performed_worse,
           SUM(CASE WHEN t1."test_score" >= t2."test_score" THEN 1 ELSE 0 END) AS times_performed_better_or_equal
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."model" NOT LIKE '%Stack%'
    GROUP BY t1."model"
) AS comparison
WHERE times_performed_worse > times_performed_better_or_equal;
```
2025-01-25 09:37:55 - root - INFO - itercount: 1
2025-01-25 09:37:55 - root - INFO - no such column: t1.model
2025-01-25 09:37:55 - root - INFO - Input sql:
SELECT t1."model" AS traditional_model
FROM (
    SELECT t1."model",
           SUM(CASE WHEN t1."test_score" < t2."test_score" THEN 1 ELSE 0 END) AS times_performed_worse,
           SUM(CASE WHEN t1."test_score" >= t2."test_score" THEN 1 ELSE 0 END) AS times_performed_better_or_equal
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."model" NOT LIKE '%Stack%'
    GROUP BY t1."model"
) AS comparison
WHERE times_performed_worse > times_performed_better_or_equal;
The error information is:
no such column: t1.model
Please correct it and output only 1 complete SQL query.
2025-01-25 09:38:30 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 09:38:30 - root - INFO - ```sql
SELECT "traditional_model"
FROM (
    SELECT t1."model" AS traditional_model,
           SUM(CASE WHEN t1."test_score" < t2."test_score" THEN 1 ELSE 0 END) AS times_performed_worse,
           SUM(CASE WHEN t1."test_score" >= t2."test_score" THEN 1 ELSE 0 END) AS times_performed_better_or_equal
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."model" NOT LIKE '%Stack%'
    GROUP BY t1."model"
) AS comparison
WHERE times_performed_worse > times_performed_better_or_equal;
```
2025-01-25 09:38:30 - root - INFO - itercount: 2
2025-01-25 09:38:30 - root - INFO - 0
2025-01-25 09:38:30 - root - INFO - results: 
traditional_model
ABC
ABR
DTCE
DTCG
DTRA
DTRF
DTRP
ELNE
ELNECV
GNB
GPCL
GPCR
GPRL
GPRQ
GPRR
HGBC
HGBR
KERC
KERR
KNCD
KNCU
KNRD
KNRU
LINR
LOGRL
LOGRLCV
LOGRS
LOGRSCV
MLPC1
MLPC2
MLPR1
MLPR2
RFRA
RFRP
RFRS
SGDCH
SGDCLL
SGDCMH
SVCG
SVCL
SVCP
SVCS


2025-01-25 09:38:30 - root - INFO - Please check the answer again by reviewing Which models have more instances where traditional models perform worse than the Stack model than the total times these models were evaluated across all steps and versions?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
model
model_name1:str
model_name2:str
...
```

These are the models that, across all steps and versions, performed worse than the Stack model more times than they performed better. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
traditional_model
ABC
ABR
DTCE
DTCG
DTRA
DTRF
DTRP
ELNE
ELNECV
GNB
GPCL
GPCR
GPRL
GPRQ
GPRR
HGBC
HGBR
KERC
KERR
KNCD
KNCU
KNRD
KNRU
LINR
LOGRL
LOGRLCV
LOGRS
LOGRSCV
MLPC1
MLPC2
MLPR1
MLPR2
RFRA
RFRP
RFRS
SGDCH
SGDCLL
SGDCMH
SVCG
SVCL
SVCP
SVCS
Current sql:
SELECT "traditional_model"
FROM (
    SELECT t1."model" AS traditional_model,
           SUM(CASE WHEN t1."test_score" < t2."test_score" THEN 1 ELSE 0 END) AS times_performed_worse,
           SUM(CASE WHEN t1."test_score" >= t2."test_score" THEN 1 ELSE 0 END) AS times_performed_better_or_equal
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."model" NOT LIKE '%Stack%'
    GROUP BY t1."model"
) AS comparison
WHERE times_performed_worse > times_performed_better_or_equal;
2025-01-25 09:40:03 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 09:40:03 - root - INFO - ```sql
SELECT "traditional_model"
FROM (
    SELECT t1."model" AS traditional_model,
           SUM(CASE WHEN t1."test_score" < t2."test_score" THEN 1 ELSE 0 END) AS times_performed_worse,
           SUM(CASE WHEN t1."test_score" >= t2."test_score" THEN 1 ELSE 0 END) AS times_performed_better_or_equal
    FROM "model_score" t1
    JOIN "model_score" t2
      ON t1."name" = t2."name"
     AND t1."version" = t2."version"
     AND t1."step" = t2."step"
    WHERE t1."model" != t2."model"
      AND t2."model" LIKE '%Stack%'
      AND t1."model" NOT LIKE '%Stack%'
    GROUP BY t1."model"
) AS comparison
WHERE times_performed_worse > times_performed_better_or_equal;
```
2025-01-25 09:40:03 - root - INFO - itercount: 3
2025-01-25 09:40:03 - root - INFO - 0
2025-01-25 09:40:03 - root - INFO - Total iteration counts: 3
