2025-01-25 11:18:08 - openai._base_client - INFO - Retrying request to /chat/completions in 0.438223 seconds
2025-01-25 11:18:58 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 11:19:49 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 11:19:49 - root - INFO - The error you're encountering occurs because the `pchembl_value` column in the `activities` table is of type **STRING**, and you're attempting to compare it numerically to an integer `10` using the `>` operator. SQL cannot perform arithmetic comparisons between strings and numeric types without explicit casting.

To resolve this issue, you need to **cast** the `pchembl_value` column to a numeric type (such as `FLOAT64`) before performing the comparison.

Here's how you can modify your query:

```sql
SELECT activity_id, molregno, assay_id, pchembl_value
FROM `bigquery-public-data.ebi_chembl.activities`
WHERE CAST(pchembl_value AS FLOAT64) > 10
LIMIT 100;
```

**Explanation:**

- **Casting `pchembl_value` to `FLOAT64`:** By using `CAST(pchembl_value AS FLOAT64)`, you convert the string values in `pchembl_value` into floating-point numbers, allowing for numeric comparison.
- **Ensuring Valid Numeric Values:** If there's a possibility that some `pchembl_value` entries cannot be converted to numbers (e.g., they contain non-numeric characters or are `NULL`), you can use `SAFE_CAST` instead. This function returns `NULL` for invalid conversions, preventing runtime errors.

Here's the query using `SAFE_CAST`:

```sql
SELECT activity_id, molregno, assay_id, pchembl_value
FROM `bigquery-public-data.ebi_chembl.activities`
WHERE SAFE_CAST(pchembl_value AS FLOAT64) > 10
LIMIT 100;
```

**Additional Considerations:**

- **Filtering Out Non-Numeric or NULL Values:**

  To ensure that only valid numeric values are compared, you can filter out `NULL` or non-convertible values:

  ```sql
  SELECT activity_id, molregno, assay_id, pchembl_value
  FROM `bigquery-public-data.ebi_chembl.activities`
  WHERE pchembl_value IS NOT NULL
    AND SAFE_CAST(pchembl_value AS FLOAT64) > 10
  LIMIT 100;
  ```

- **Checking Data Types in BigQuery:**

  You can verify the data type of `pchembl_value` using the `INFORMATION_SCHEMA.COLUMN_FIELD_PATHS` view:

  ```sql
  SELECT column_name, data_type
  FROM `bigquery-public-data.ebi_chembl.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS`
  WHERE table_name = 'activities'
    AND column_name = 'pchembl_value';
  ```

  This will confirm that `pchembl_value` is of type `STRING`.

**Revised Query from Original Task:**

When applying this to your original task, ensure that any numeric comparisons involving `pchembl_value` include the necessary casting. For example, when finding activities with `pchembl_value` over 10:

```sql
SELECT a.activity_id, a.molregno, a.assay_id, a.pchembl_value, cp.heavy_atoms
FROM `bigquery-public-data.ebi_chembl.activities` AS a
JOIN `bigquery-public-data.ebi_chembl.compound_properties` AS cp
  ON a.molregno = cp.molregno
WHERE cp.heavy_atoms BETWEEN 10 AND 15
  AND CAST(a.pchembl_value AS FLOAT64) > 10
LIMIT 100;
```

**Further Steps:**

- **Ensure Compatibility Across All Queries:**

  For any other queries where you compare `pchembl_value` numerically, apply the same casting approach.

- **Handling Other Numeric Fields Stored as Strings:**

  If you encounter other fields that are stored as strings but represent numeric data (like `standard_value` or `standard_relation`), you may need to cast them similarly.

**Remember:** Always validate that your data can be cast successfully to avoid unexpected `NULL` values in your results.

---

**Reference for Casting in BigQuery:**

- **CAST:** Converts data from one type to another.
  - Syntax: `CAST(expression AS TYPE)`.
  - Example: `CAST(pchembl_value AS FLOAT64)`.

- **SAFE_CAST:** Similar to `CAST`, but returns `NULL` instead of an error if the conversion fails.
  - Syntax: `SAFE_CAST(expression AS TYPE)`.
  - Example: `SAFE_CAST(pchembl_value AS FLOAT64)`.

**Note on Data Quality:**

- **Data Cleaning:** If the dataset contains inconsistent entries (e.g., unexpected strings in numeric fields), consider data cleaning steps or consult the data documentation for guidance on handling such cases.
2025-01-25 11:21:27 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 11:21:27 - root - INFO - SQL:
SELECT activity_id, molregno, assay_id, pchembl_value
FROM `bigquery-public-data.ebi_chembl.activities`
WHERE CAST(pchembl_value AS FLOAT64) > 10
LIMIT 100;
Results:
activity_id,molregno,assay_id,pchembl_value
5202588,69834,717329,10.9
1613058,329934,320167,10.13
8059729,366521,806222,10.3
1151003,13104,54735,10.62
7853606,1251577,775934,10.2
2496950,364368,517306,10.18
3502945,707118,664979,10.5
24781862,2765084,2216667,10.1
6324610,1171649,763496,10.1
23306533,2561082,2133588,10.08
628386,190461,158035,10.1
626046,55023,158035,10.7
1798533,365146,422884,10.57
1415790,298977,304076,10.66
1415798,298977,313611,10.18
969348,550662,178932,10.22
7570623,13048,774355,10.12
24865289,2775830,2237569,10.83
18901602,2386997,1816919,10.52
18901410,2423947,1816917,10.4
18901544,2376245,1816918,10.52
18901091,2357554,1816913,10.52
18879667,2380611,1812155,10.8
148690,191810,140179,10.19
13860521,1610702,1281519,10.4
1074392,238251,143097,10.29
1711923,345594,352426,10.13
1493284,317915,303683,10.3
1063087,661796,138212,10.1
117176,121691,104539,11
1606641,328413,321001,10.33
1211126,226128,145346,10.28
716386,642681,47645,10.52
916950,39075,65652,10.7
932631,72548,146368,10.06
155352,254414,29122,10.03
2370135,442250,534712,10.96
2155087,83838,466620,10.15
2983915,579805,596273,10.59
1204367,1542055,146518,10.14
566560,151384,101923,11
915673,147835,33736,10.17
1185183,154668,143855,10.33
8041648,1279130,803919,10.04
178343,250697,157715,10.27
1707849,345215,347906,10.1
16258924,1980444,1534673,10.4
178119,236845,64004,10.68
12170921,1446610,883124,10.52
15617266,1947799,1498307,10.1
10978341,1356484,830845,10.7
15748008,1967900,1522885,10.52
17663834,1983438,1528909,10.55

2025-01-25 11:22:07 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 11:22:07 - root - INFO - The error you're encountering arises because the `heavy_atoms` column in the `compound_properties` table is of type **STRING**, and you're attempting to perform a numeric comparison using the `BETWEEN` operator with integer values (`10` and `15`). SQL cannot perform numeric comparisons between strings and numeric types without explicit casting.

To fix this error, you need to **cast** the `heavy_atoms` column to a numeric type (such as `INT64`) before performing the comparison. Additionally, to handle any potential non-numeric or `NULL` values in the `heavy_atoms` column, it's safer to use `SAFE_CAST`, which returns `NULL` if the cast fails instead of throwing an error.

Here's the corrected query:

```sql
SELECT molregno, heavy_atoms
FROM `bigquery-public-data.ebi_chembl.compound_properties`
WHERE SAFE_CAST(heavy_atoms AS INT64) BETWEEN 10 AND 15
LIMIT 100;
```

**Explanation:**

- **Using `SAFE_CAST`:** This function attempts to convert `heavy_atoms` to an `INT64`. If the conversion fails (e.g., due to non-numeric strings or `NULL` values), it returns `NULL` instead of causing an error.
- **Filtering with `BETWEEN`:** The `BETWEEN` operator will only consider rows where `SAFE_CAST(heavy_atoms AS INT64)` returns a valid integer. Rows where the casting results in `NULL` are effectively ignored in the comparison.
- **Ensuring Valid Comparisons:** By casting `heavy_atoms` to a numeric type, you allow the `BETWEEN` operator to perform a valid numeric comparison between the casted value and the integers `10` and `15`.

**Additional Considerations:**

- **Data Type Verification:** You can verify the data type of the `heavy_atoms` column using the `INFORMATION_SCHEMA.COLUMN_FIELD_PATHS` view:

  ```sql
  SELECT column_name, data_type
  FROM `bigquery-public-data.ebi_chembl.INFORMATION_SCHEMA.COLUMN_FIELD_PATHS`
  WHERE table_name = 'compound_properties'
    AND column_name = 'heavy_atoms';
  ```

  This query will confirm that `heavy_atoms` is indeed of type `STRING`.

- **Handling Non-Numeric Values:** If there are any non-numeric values or anomalies in the `heavy_atoms` column, `SAFE_CAST` will prevent your query from failing by returning `NULL` for those rows.

- **Sample Results:**

  After running the corrected query, your results might look like:

  ```plaintext
  molregno    heavy_atoms
  --------    -----------
  123456      12
  234567      15
  345678      10
  ...
  ```

**Applying Corrections to Other Queries:**

As you've requested, if similar errors occur in other queries, you should apply the same approach of casting string columns to appropriate numeric types before performing numeric comparisons or operations.

**For Example:**

- **Query Involving `pchembl_value`:**

  Original Query:

  ```sql
  SELECT a.activity_id, a.molregno, a.assay_id, a.pchembl_value, cp.heavy_atoms
  FROM `bigquery-public-data.ebi_chembl.activities` AS a
  JOIN `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
  WHERE cp.heavy_atoms BETWEEN 10 AND 15
    AND a.pchembl_value > 10
  LIMIT 100;
  ```

  **Correction:**

  ```sql
  SELECT a.activity_id, a.molregno, a.assay_id, a.pchembl_value, cp.heavy_atoms
  FROM `bigquery-public-data.ebi_chembl.activities` AS a
  JOIN `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
  WHERE SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
    AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
  LIMIT 100;
  ```

  **Explanation:**

  - **Casting `cp.heavy_atoms` to `INT64`** using `SAFE_CAST` for the `BETWEEN` comparison.
  - **Casting `a.pchembl_value` to `FLOAT64`** using `SAFE_CAST` for the `>` comparison.

**General Guidance:**

- **Always Check Column Data Types:** When performing operations that require numeric types, ensure that the columns you're using are indeed numeric.
- **Use `CAST` or `SAFE_CAST`:** If a column is stored as a string but represents numeric data, cast it to the appropriate numeric type.
  - Use `CAST` when you're certain all values can be converted.
  - Use `SAFE_CAST` when there might be invalid or non-numeric entries, as it prevents the query from failing due to conversion errors.

**Conclusion:**

By applying `SAFE_CAST` to the `heavy_atoms` column in your query, you resolve the data type mismatch error and can successfully perform the numeric comparison within the `BETWEEN` clause.

**Corrected Query:**

```sql
SELECT molregno, heavy_atoms
FROM `bigquery-public-data.ebi_chembl.compound_properties`
WHERE SAFE_CAST(heavy_atoms AS INT64) BETWEEN 10 AND 15
LIMIT 100;
```

This should resolve the error, and your query should now run successfully.
2025-01-25 11:23:34 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 11:23:34 - root - INFO - SQL:
SELECT molregno, heavy_atoms
FROM `bigquery-public-data.ebi_chembl.compound_properties`
WHERE SAFE_CAST(heavy_atoms AS INT64) BETWEEN 10 AND 15
LIMIT 100;
Results:
molregno,heavy_atoms
182193,14
1160340,13
1294143,15
1674518,12
305967,15
483099,15
2426064,10
1294222,15
1940449,11
1314606,14
1619965,15
130320,14
171100,14
1287729,13
1301308,13
1322725,15
1494138,15
1672706,15
505881,15
2269258,14
1678124,14
377605,14
1674938,10
1819906,13
2474592,15
13570,15
481624,14
1303142,11
498105,11
1676200,15
2523647,14
323348,11
1160318,15
322485,12
1825886,14
1494407,15
323136,12
1160324,15
1296716,14
1489024,14
2377228,12
498190,14
2214081,12
1082102,13
1325750,13
832643,15
1102374,13
829811,14
361880,11
1160322,14
915804,10
1476836,14
1677187,12
13540,13
175105,15
446330,10
42652,12
1674960,15
305982,15
464938,14
1674198,13
2279427,15
1041793,15
322238,12
43292,12
204524,14
1287443,15
396902,12
1675866,10
896268,13
1160056,11
1486374,10
1678099,15
159518,12
573522,13
570639,10
929616,15
49260,13
2512512,14
744684,15
1822380,12
2208751,13
2125885,15
573523,14
374944,15
1120586,15
31838,14
1229486,15
2475010,15
1289563,13
1086009,15
405082,14
2231462,13
216001,15
272839,14
1739824,10
576108,14
1834170,13
1763714,14
1737325,15

2025-01-25 11:23:36 - root - INFO - SQL:
SELECT molregno, heavy_atoms
FROM `bigquery-public-data.ebi_chembl.compound_properties`
WHERE SAFE_CAST(heavy_atoms AS INT64) BETWEEN 10 AND 15
LIMIT 100
Results:
molregno,heavy_atoms
464937,14
483559,15
1671881,11
2538796,15
484507,10
1325560,14
175134,15
445046,15
1314442,12
114042,14
1286457,15
1475548,15
1673788,10
203507,14
1317298,15
2255490,14
2340700,15
1321417,12
1095259,12
2265549,14
999519,10
1674481,11
16594,10
651111,12
1091457,10
2226961,14
246601,13
483073,15
1754744,11
1829971,15
195884,14
439315,12
204484,14
1675790,11
322976,12
1592517,11
474440,15
1767940,10
1331133,13
13725,12
1294020,15
2170325,15
443892,14
1329911,14
1943708,15
2436703,15
67104,14
1318801,15
1750632,10
1331075,15
222789,14
462454,13
654929,12
1180717,15
1614916,15
1677750,10
502829,14
1329674,11
455882,13
1282647,15
1096271,14
9983,11
1083500,14
2346005,12
456874,14
32139,13
1346912,15
1346905,12
31696,15
2320588,14
2236016,15
1288873,15
1768034,15
1765179,15
1764496,15
1728952,10
1152980,13
869678,15
1766003,10
1355936,14
754196,15
1764720,15
1026296,14
544925,13
667497,13
667088,13
524512,14
1355935,15
1834182,14
2085206,13
35694,15
10413,14
2085207,15
2678627,15
59214,12
1916501,15
1677265,14
1304010,15
2413487,13
444999,12

2025-01-25 11:23:38 - root - INFO - SQL:
SELECT assay_id, COUNT(*) AS activity_count
FROM `bigquery-public-data.ebi_chembl.activities`
GROUP BY assay_id
HAVING COUNT(*) < 5
LIMIT 100
Results:
assay_id,activity_count
1837592,1
2047650,1
2114459,1
578720,1
1515666,1
2024382,3
2166111,4
607836,1
694323,2
1353952,4
833886,1
1545901,1
1615538,1
993192,1
1611934,1
976529,1
1713346,1
678410,1
1986226,2
2166112,4
2115546,1
1460393,1
1736718,1
756487,1
2034833,1
2205337,2
1919592,3
1650352,4
1481045,4
1823227,1
1442523,1
1780383,3
693697,1
1617480,2
224055,3
2071026,4
232348,1
1987529,1
819770,1
1927252,1
1518349,1
794482,4
1512802,1
753331,1
979571,2
1916612,1
1700479,1
1814575,1
2203140,4
672884,1
746132,3
748545,1
657036,1
671541,2
647930,2
683885,3
810266,1
992399,4
1281610,1
964460,1
1564199,1
800006,4
1276437,3
1497536,2
875057,1
1615087,4
878283,4
1590710,1
798060,1
1469228,1
1512271,1
1613510,1
831816,4
913788,1
1979675,1
2113072,1
1438401,1
874759,2
812539,1
985228,1
2015628,1
2247179,3
2123744,1
1652110,3
1910955,1
2083887,1
2108886,4
1878555,1
1475057,2
1510848,3
1540971,2
1790148,1
1738706,3
1793602,2
1656499,3
1284980,3
768674,4
894660,1
1853125,2
2028042,2

2025-01-25 11:23:40 - root - INFO - SQL:
SELECT activity_id, molregno, assay_id, standard_value
FROM `bigquery-public-data.ebi_chembl.activities`
WHERE standard_value IS NOT NULL
LIMIT 100
Results:
activity_id,molregno,assay_id,standard_value
18917068,277989,1822540,1.9
17968836,112090,1646511,21.7
1090569,90387,18149,4.81
331062,92730,224302,0.57
405828,258570,224520,353
498398,156747,69486,-44
1041960,7840,209764,45
103276,24000,209581,340
18507090,2293098,1755732,0.69
18786971,2316268,1799593,1.13
15235147,75901,1475457,2.73
18383394,2276566,1730884,0.34
18383513,2265861,1730895,0.24
18562978,2294941,1766797,1.94
23215414,2564639,2114481,0.97
18079642,2210656,1667385,0.54
18977836,2457794,1838363,0.2
18982762,2380147,1839188,0.05
24899574,5985,2246090,1.04
19008736,470511,1844641,0.35
22912342,2534898,2078731,1
18973892,2381467,1837577,0.6
18079695,2206917,1667412,0.49
18563013,2288266,1766787,0.43
18383671,2264310,1730909,0.17
82543,31974,63312,0.9
13979056,1612615,1301343,0.84
814656,72666,226560,0.54
2691834,561990,578719,10000
6351969,1174283,765160,-2.3
2705900,555595,580934,3.1
3002429,578943,595052,340
3060078,594486,603853,0.69
5114128,458557,697349,2
11010782,1365507,840412,4
13359415,1567287,967130,3.1
16740798,2158763,1615128,-0.1003
18309420,2277887,1716724,-1.615
18496063,182042,1753597,1
19006788,2375368,1844162,1.2
19128606,2401507,1873120,10
19359368,2350023,1919506,17.74
22485183,2531976,2034324,1.8
22791436,2487955,2054562,7.83
22848639,2521621,2067543,8.13
23261822,2208807,2123942,0.1
24746696,2750134,2206812,2.5
24812769,2755861,2223825,4
2629144,501242,523785,10
3484099,334337,669838,8
5130120,1058296,700231,3.87
6228795,419616,752189,2.1

2025-01-25 11:24:09 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 11:24:09 - root - INFO - ```sql
SELECT molregno, assay_id, standard_value, COUNT(*) AS duplicate_count
FROM `bigquery-public-data.ebi_chembl.activities`
WHERE standard_value IS NOT NULL
GROUP BY molregno, assay_id, standard_value
HAVING COUNT(*) > 1
LIMIT 100;
```
2025-01-25 11:25:21 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 11:25:21 - root - INFO - SQL:
SELECT molregno, assay_id, standard_value, COUNT(*) AS duplicate_count
FROM `bigquery-public-data.ebi_chembl.activities`
WHERE standard_value IS NOT NULL
GROUP BY molregno, assay_id, standard_value
HAVING COUNT(*) > 1
LIMIT 100;
Results:
molregno,assay_id,standard_value,duplicate_count
365189,1640262,1.8,8
835863,1640263,1.2,14
29989,1640262,1.3,4
2468853,1640263,0.9,36
14440,1640263,1.9,6
88232,1640263,2.4,7
51056,1640263,1.3,7
579567,596087,1000,2
1291395,809262,501.19,2
1286951,809220,199.53,2
1293875,809128,63.1,2
466228,530772,100000,2
1724727,1331205,100000,4
2362758,1810109,100000,4
1828090,1461354,100000,2
1968051,1522993,10000,2
455652,496044,100000,2
455573,496043,100000,2
255904,545772,1900,2
1908725,1998107,100000,2
1177256,768623,100000,2
1732119,1339358,100000,2
2101116,1631563,100000,2
376679,432650,100000,2
376671,432618,100000,2
189045,140498,2.734,2
108367,232313,2.48,2
1294209,809349,100000,2
1316824,809349,100000,2
1290400,809428,100000,2
1296104,809062,100000,2
1293375,809393,100000,2
1288895,809370,100000,2
1304425,809018,100000,2
1299337,809101,100000,2
2394525,809370,100000,2
1340512,809351,100000,2
1296568,809035,100000,2
1323573,809316,100000,2
39709,809022,100000,2
82161,809099,100000,2
820907,809059,100000,2
1297236,809086,100000,3
705374,809308,100000,2
1287386,809062,100000,2
1316816,809057,100000,2
1220372,809014,100000,2
2280976,2069961,0,4
2215189,2069960,0,10
2509983,2069961,1,5
312618,2069964,0,9
437629,2069961,0,6
2103704,2069960,0,6
543658,2069960,0,8

2025-01-25 11:25:22 - root - INFO - SQL:
SELECT molregno, canonical_smiles
FROM `bigquery-public-data.ebi_chembl.compound_structures`
LIMIT 100
Results:
molregno,canonical_smiles
1822592,CCn1nccc1Oc1cc(CCCCOC)cnc1NC(=O)NC
128,O=c1oc2c(F)c(F)ccc2c2cc(O)c(O)cc12
6538,COc1c(C)cnc(C[S+]([O-])c2nc3ccccc3n2CCN2CCOCC2)c1C
9678,C/C=C(\NC(=O)C(CCC)CCC)C(=O)O
10298,CCNS(=O)(=O)c1ccc2c(c1)C(n1ccccc1=O)=CC(C)(C)O2
1833716,CCCCCCCCCCCCCCCC(=O)Oc1ccc(/C=C2\CCC/C(=C\c3ccc(OC(=O)CCCCCCCCCCCCCCC)c(OC)c3)C2=O)cc1OC
1834533,CNC(=O)[C@@]12C[C@@H]1[C@@H](n1cnc3c(NC)nc(C#Cc4ccsc4)nc31)[C@H](O)[C@@H]2O
1838408,CCOC(=O)c1ccc2cc(C(=O)/C=C/c3ccccc3)sc2c1
1840256,Fc1cccc(-n2cc(NCCN3CCOCC3)nn2)c1
24961,CC[C@@H](C)[C@@H](NC(=O)[C@@H](C)NC(=O)[C@@H](CCC(=O)O)NC(=O)[C@@H](CC(C)C)NC(=O)[C@@H](Cc1ccccc1)NC(=O)[C@H](N)CCSC)C(=O)N1CCC[C@H]1C(=O)N[C@@H](CCSC)C(=O)O
1861143,CCn1cc(Cl)c(C(=O)NCc2cnn(C)c2)n1
39040,CCc1cc(-c2cc(C(F)(F)F)nn2-c2ccc(S(N)(=O)=O)cc2)ccc1OC
42807,CC(=O)c1c(-c2ccc(Cl)cc2)c(-c2ccc(Cl)cc2)nn(CCCCCCN2C(=O)c3ccccc3C2=O)c1=O
1886886,CN1C(=O)CC(c2ccccc2)C12CCN(c1ncccn1)CC2
1892689,CCC(C)N(Cc1cccnc1)C(=O)c1ccc(OC)cc1O
64248,COc1ccc(S(=O)(=O)C(CCCCc2ccc3c(c2)OCO3)CC(=O)NO)cc1OC
68360,COc1cnc(C)c2[nH]c3ccccc3c12
1897419,COc1cccc(C2CCCN2C(=O)CC2=CSC3=NCCCN23)c1
77870,Cc1cc(C)c(C2=NOC(C(=O)Nc3ccc(-c4ccccc4S(N)(=O)=O)cc3)C2)cc1C
78299,c1ccc(Cn2cncc2CCNCC23CC(c4ccccc42)c2ccccc23)cc1
82695,O=C(COc1ccccc1)N(O)CCc1ccccc1
1909093,Cc1cc(C(=O)N2CCCC(n3cncn3)C2)c(C)n1CC1CC1
1910145,CC(=O)N1CCCC1C(=O)NCCOc1cc(C)cc(C)c1
1910181,Cc1nn(C)c(C)c1C1COCCN1C(=O)c1ccccc1
1938013,O[C@@H]1C[C@@](CNCc2ccc(F)cc2)(COc2cccnc2)C[C@@H]1O
1939614,O=C1C[C@@H]2[C@H](CCN2Cc2ccccn2)N1Cc1ccncc1
1941547,C[C@H]1CN([C@@H](C)CO)C(=O)c2c(c3ccccc3n2C)-c2ccccc2CO[C@@H]1CN(C)Cc1cccc2c1OCCCO2
1943401,O=C(C1CC1)N1CC(=O)N2[C@H](C1)[C@@H](c1ccc(C#CCc3ccccc3)cc1)[C@@H]2CO
104146,COc1cc(OC)nc(OC(C(=O)O)C(OC)(c2ccc(Cl)cc2)c2ccc(Cl)cc2)n1
111374,COc1nsnc1C1=C(C)CCN(C)C1
112108,Cc1ccc(O)c2[nH]c(-c3ccc(N(C)C)cc3)nc12
117277,O=C(O)CC/C=C/C(CS)CCCCC(=O)O
117301,CC(=O)/C=C/c1ccccc1
1964971,Cc1nn2c(-c3nc4cc(C)c(C)cc4[nH]3)c(-c3ccccc3)nc2s1
1974481,CNc1nc(Nc2ccc(C(=O)NC3CC3)cc2OC)ncc1Cl
123418,CCCCCCc1noc([C@H](CC)NC(=O)[C@H](Cc2ccc(OP(=O)(O)O)cc2)NC(C)=O)n1
139230,O=c1ccc2cc(CBr)ccc2o1
1981159,CC1(C)CCN(Cc2ccc3c(c2)C[C@H](NC(=O)c2ccc(OC[C@@H]4CCCO4)cc2)C3)CC1
1982654,CO[C@@H]1C[C@@H](C(C)C)N(c2nc3cc(-c4noc(=O)[nH]4)nc(-c4cncc(Cl)c4)c3n2C[C@H]2CC[C@H](C)CC2)C1
1998302,Cn1c2c(c3ccc(-n4ncc(OCc5ccc(C(F)(F)F)nc5)cc4=O)cc31)CCNCC2
2006372,CCNC1CCc2ccc(CCCNS(=O)(=O)CC3CC3)cc2C1Cc1ccccc1
167023,COc1cc(C(C)=O)ccc1OCCCN1CCC(C(c2ccc(F)cc2)C2CCCCC2)CC1
167283,COc1c(Br)c(C(=O)O)c(-c2c3c(c(OC)c(Br)c2C(=O)O)OCO3)c2c1OCO2
2016718,O=C(c1nn([C@H]2CCCN(CCN3CCOCC3)C2)c2c1CS(=O)(=O)c1c(F)cccc1-2)N1CCOCC1
170968,CCN(C)CC#CCCC(=O)C(O)(c1ccccc1)C1CCC1
180064,C=C[C@@]1(C)CCC2[C@@H](CC[C@@H]3[C@](C)(C(=O)O)CCC[C@@]23C)C1
2021633,Nc1cnc(-c2ccc(-c3ccccc3S(=O)(=O)N3CCN(C4CC4)CC3)cc2F)cn1
2025765,CC(C)(O)C#Cc1cc2c(cc1F)C1CC(C1)n1c-2nc(C(N)=O)c1-c1nc(C2CC2)no1
2026947,Cc1cccc(C)c1Nc1ccc(C(=O)NCCCCCCC(=O)NO)cc1
2036919,OC1CS[C@@H](n2cnc3c(NCc4cccc(F)c4)nc(Cl)nc32)[C@H]1O
196758,CCC(Cc1ccc(OC)c(C(=O)NCc2ccc(OCc3ccccc3)cc2)c1)C(=O)O
199883,CCCC[C@H](NC(=O)[C@H](CCC(=O)O)NC(=O)[C@H](CC(C)C)NC(=O)[C@@H](NC(=O)[C@H](CCC(=O)O)NC(=O)[C@H](CCCN=C(N)N)NC(=O)[C@H](CC(C)C)NC(=O)[C@H](CC(C)C)NC(=O)[C@H]1CCCCNC(=O)CC[C@@H](NC(=O)[C@@H](N)CC(=O)O)C(=O)N[C@H]([C@@H](C)O)C(=O)N[C@H](Cc2ccccc2)C(=O)N1)C(C)C)C(=O)N[C@@H](C)C(=O)N[C@@H](CCCN=C(N)N)C(=O)N[C@@H](C)C(=O)N[C@@H](CCC(=O)O)C(=O)N[C@@H](CCC(N)=O)C(=O)N[C@@H](CC(C)C)C(=O)N[C@@H](C)C(=O)N[C@@H](CCC(N)=O)C(=O)N[C@@H](CCC(N)=O)C(=O)N[C@@H](C)C(=O)N[C@@H](Cc1c[nH]cn1)C(=O)N[C@@H](CO)C(=O)N[C@@H](CC(N)=O)C(=O)N[C@@H](CCCN=C(N)N)C(=O)N[C@@H](CCCCN)C(=O)N[C@@H](CC(C)C)C(=O)N[C@@H](CCCC)C(=O)N[C@@H](CCC(=O)O)C(=O)N[C@H](C(=O)N[C@H](C(N)=O)[C@@H](C)CC)[C@@H](C)CC

2025-01-25 11:25:24 - root - INFO - SQL:
SELECT activity_id, molregno, standard_relation, standard_value
FROM `bigquery-public-data.ebi_chembl.activities`
LIMIT 100
Results:
activity_id,molregno,standard_relation,standard_value
400977,283276,=,2
794406,71172,,
1701575,343251,,
13396471,1573031,,
12637343,1514445,,
12158150,1439464,,
18504295,2295532,,
17976504,2207621,,
19435805,2347062,,
1806663,344830,,
2525916,519898,,
1438653,306007,=,207000
332642,279527,=,1400
18704824,2324239,,
15662164,44752,,
18086941,1442794,,
657519,62237,=,0.44
861547,270463,=,19.1
338886,92405,=,1.48
1157210,219000,=,5
1157203,218764,,
560071,188591,<,0.02
16790180,2106746,,
858689,53624,=,31
1066743,24135,=,2.7
1079735,24641,=,40
18383410,2263184,=,0.16
487542,230820,=,0.303
15250312,1844385,=,0.3
15250258,1844385,=,0.61
16599444,315023,=,1.056
15250247,1844385,=,1.09
15250272,1844385,=,0.67
15107936,1819359,=,0.33
18977791,2457794,=,0.42
18973907,2381467,=,0.8
18383306,2279019,=,0.24
18982714,2374995,=,0.5
18079815,2206917,=,0.19
22762152,1296181,=,0.92
18079637,2228187,=,0.43
18221676,436875,=,1.12
23215408,2543852,=,0.47
22912350,2505171,<,1
23215427,2564639,=,0.39
16878655,1449226,,
23277653,444971,=,0.81
18383580,2272237,=,0.41
18383415,2264310,=,0.26
23215373,2564639,=,0.58

2025-01-25 11:25:26 - root - INFO - SQL:
SELECT doc_id, journal, year, first_page
FROM `bigquery-public-data.ebi_chembl.docs`
WHERE year IS NOT NULL AND first_page IS NOT NULL
LIMIT 100
Results:
doc_id,journal,year,first_page
56167,,2008,161
100132,,2011,1899
100133,,2001,1924
100159,,2011,1899
100161,,2011,1899
98939,Gut,1996,63
64734,AIDS,2000,1287
64415,AIDS,2002,1743
64790,AIDS,2002,2295
64423,AIDS,2003,1092
64300,Cell,1994,491
64047,Gene,2000,117
64035,Blood,1992,1528
64507,Blood,2004,2940
64632,Blood,2004,3739
52618,Blood,2009,2984
52805,AAPS J,2006,E204
116897,Nature,2010,1067
116900,Nature,2010,1067
64403,Nature,1994,549
45680,Nature,2000,962
39334,Nature,2007,387
39355,Nature,2007,541
39458,Nature,2007,1091
38686,Nature,2007,959
39231,Nature,2007,817
39232,Nature,2007,864
39460,Nature,2007,87
39252,Nature,2007,775
39361,Nature,2007,952
38623,Nature,2007,1001
39445,Nature,2007,553
39462,Nature,2007,712
48285,Nature,2010,305
49166,Nature,2010,311
61375,Nature,2012,62
71005,Farmaco,2000,338
71007,Farmaco,2002,135
71013,Farmaco,2004,673
64591,Nat Med,1999,1048
116887,Sci Adv,2015,e1500723
116894,Sci Adv,2016,e1600760
91875,Sci Rep,2013,1
124727,Sci Rep,2019,13802
124758,Sci Rep,2021,12290
124759,Sci Rep,2021,1312
64822,Science,1995,866
46300,Science,1997,955
46301,Science,1998,533
46024,Science,2003,875
45681,Science,2005,223
46025,Science,2005,1318
35871,Science,2007,1759
35870,Science,2007,516
35884,Science,2007,236
35894,Science,2007,1390
46057,Science,2008,520
46073,Science,2008,259
46074,Science,2008,1078
46075,Science,2008,1493
46076,Science,2008,1673
46599,Science,2008,1392
52804,Science,2010,1175
57966,Science,2011,1372
64105,Genomics,1999,209

2025-01-25 11:25:28 - root - INFO - SQL:
SELECT a.activity_id, a.molregno, a.assay_id, a.pchembl_value, cp.heavy_atoms
FROM `bigquery-public-data.ebi_chembl.activities` AS a
JOIN `bigquery-public-data.ebi_chembl.compound_properties` AS cp
  ON a.molregno = cp.molregno
WHERE SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
  AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
LIMIT 100
Results:
activity_id,molregno,assay_id,pchembl_value,heavy_atoms
539387,222071,142899,10.44,15
385898,271730,158186,10.68,14
1074399,238953,143097,10.57,15
1807736,310308,424280,10.35,14
1214077,154061,143855,10.12,13
91850,154061,217460,10.6,13
1193141,154588,143855,10.18,13
1214075,154575,143855,10.24,13
1198202,155348,143855,10.6,14
1435444,305181,304960,10.1,13
13932454,1620794,1292393,10.1,14
13393223,1572658,972539,10.4,14
12092086,117779,860161,10.59,14
656094,86151,143717,10.74,14
499051,86151,32664,10.74,14
656096,86151,143720,10.24,14
714051,86151,223087,10.26,14
714050,86151,143865,10.24,14
1445340,86151,303413,11,14
16450928,86151,1552371,10.52,14
714052,86151,143862,10.59,14
1719941,86151,360240,10.74,14
1807730,86151,424280,10.7,14
1457094,310542,303639,10.3,14
2006402,86489,452154,10.59,14
721094,86489,223088,10.26,14
15760674,86489,1522503,10.37,14
1719927,86489,360240,10.59,14
1807729,86489,424280,10.72,14
17760201,86489,1641553,10.74,14
3193036,86489,615093,10.74,14
1493172,86489,303683,10.3,14
650003,86489,143720,10.35,14
15760696,86489,1522511,10.35,14
3193035,86489,615093,10.59,14
1445339,86489,303413,10.7,14
721093,86489,143870,10.35,14
650001,86489,143717,10.59,14
721095,86489,143871,10.74,14
1074392,238251,143097,10.29,15
1996735,404476,450798,10.4,15
1996736,404476,450798,10.4,15
1908973,386258,439959,10.33,14
1908974,386258,439959,10.33,14

2025-01-25 11:25:29 - root - INFO - SQL:
SELECT a.activity_id, a.molregno, a.assay_id, a.pchembl_value, cp.heavy_atoms
FROM `bigquery-public-data.ebi_chembl.activities` AS a
JOIN `bigquery-public-data.ebi_chembl.compound_properties` AS cp
  ON a.molregno = cp.molregno
WHERE SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
  AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
LIMIT 100
Results:
activity_id,molregno,assay_id,pchembl_value,heavy_atoms
539387,222071,142899,10.44,15
385898,271730,158186,10.68,14
1074399,238953,143097,10.57,15
1807736,310308,424280,10.35,14
1214077,154061,143855,10.12,13
91850,154061,217460,10.6,13
1193141,154588,143855,10.18,13
1214075,154575,143855,10.24,13
1198202,155348,143855,10.6,14
1435444,305181,304960,10.1,13
13932454,1620794,1292393,10.1,14
13393223,1572658,972539,10.4,14
12092086,117779,860161,10.59,14
656094,86151,143717,10.74,14
499051,86151,32664,10.74,14
656096,86151,143720,10.24,14
714051,86151,223087,10.26,14
714050,86151,143865,10.24,14
1445340,86151,303413,11,14
16450928,86151,1552371,10.52,14
714052,86151,143862,10.59,14
1719941,86151,360240,10.74,14
1807730,86151,424280,10.7,14
1457094,310542,303639,10.3,14
2006402,86489,452154,10.59,14
721094,86489,223088,10.26,14
15760674,86489,1522503,10.37,14
1719927,86489,360240,10.59,14
1807729,86489,424280,10.72,14
17760201,86489,1641553,10.74,14
3193036,86489,615093,10.74,14
1493172,86489,303683,10.3,14
650003,86489,143720,10.35,14
15760696,86489,1522511,10.35,14
3193035,86489,615093,10.59,14
1445339,86489,303413,10.7,14
721093,86489,143870,10.35,14
650001,86489,143717,10.59,14
721095,86489,143871,10.74,14
1074392,238251,143097,10.29,15
1996735,404476,450798,10.4,15
1996736,404476,450798,10.4,15
1908973,386258,439959,10.33,14
1908974,386258,439959,10.33,14

2025-01-25 17:26:43 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 17:26:43 - root - INFO - ```sql
WITH filtered_activities AS (
  SELECT
    a.activity_id,
    a.molregno,
    a.assay_id,
    a.standard_type,
    SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
    SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
    a.standard_value,
    a.standard_relation
  FROM
    `bigquery-public-data.ebi_chembl.activities` AS a
  JOIN
    `bigquery-public-data.ebi_chembl.compound_properties` AS cp
  ON
    a.molregno = cp.molregno
  WHERE
    heavy_atoms BETWEEN 10 AND 15
    AND pchembl_value > 10
    AND a.standard_value IS NOT NULL
    AND a.standard_relation IS NOT NULL
),

assay_activity_counts AS (
  SELECT
    assay_id,
    COUNT(DISTINCT activity_id) AS activity_count
  FROM
    filtered_activities
  GROUP BY
    assay_id
  HAVING
    activity_count < 5
),

filtered_activities_limited AS (
  SELECT
    fa.*
  FROM
    filtered_activities AS fa
  WHERE
    fa.assay_id IN (SELECT assay_id FROM assay_activity_counts)
),

distinct_pairs AS (
  SELECT DISTINCT
    fa1.activity_id AS activity_id1,
    fa2.activity_id AS activity_id2,
    fa1.molregno AS molregno1,
    fa2.molregno AS molregno2,
    fa1.assay_id,
    fa1.standard_type,
    GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
    fa1.standard_value AS standard_value1,
    fa1.standard_relation AS relation1,
    fa2.standard_value AS standard_value2,
    fa2.standard_relation AS relation2
  FROM
    filtered_activities_limited AS fa1
  JOIN
    filtered_activities_limited AS fa2
  ON
    fa1.assay_id = fa2.assay_id
    AND fa1.standard_type = fa2.standard_type
    AND fa1.molregno < fa2.molregno
)

SELECT
  dp.activity_id1,
  dp.activity_id2,
  dp.molregno1,
  dp.molregno2,
  dp.assay_id,
  dp.standard_type,
  dp.Max_heavy_atom_count,
  dp.standard_value1,
  dp.relation1,
  dp.standard_value2,
  dp.relation2
FROM
  distinct_pairs AS dp
LIMIT 100;
```
2025-01-25 17:27:37 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 17:27:37 - root - INFO - The error you're encountering is due to the use of column aliases (`heavy_atoms` and `pchembl_value`) in the `WHERE` clause of the same subquery where these aliases are defined. In SQL, you cannot reference a column alias in the `WHERE` clause at the same level; instead, you need to use the actual expressions or wrap the query in another subquery.

**Explanation:**

In your query, inside the CTE `filtered_activities`, you have:

```sql
SELECT
  a.activity_id,
  a.molregno,
  a.assay_id,
  a.standard_type,
  SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
  SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
  a.standard_value,
  a.standard_relation
FROM
  `bigquery-public-data.ebi_chembl.activities` AS a
JOIN
  `bigquery-public-data.ebi_chembl.compound_properties` AS cp
ON
  a.molregno = cp.molregno
WHERE
  heavy_atoms BETWEEN 10 AND 15
  AND pchembl_value > 10
  AND a.standard_value IS NOT NULL
  AND a.standard_relation IS NOT NULL
```

Here, `heavy_atoms` and `pchembl_value` are aliases defined in the `SELECT` clause. However, you cannot use these aliases in the `WHERE` clause of the same query. This causes the error because SQL evaluates the `WHERE` clause before the `SELECT` clause, and thus the aliases are not yet recognized.

**Solution:**

Replace the aliases in the `WHERE` clause with the actual expressions used to define them. Here's the corrected query:

```sql
WITH filtered_activities AS (
  SELECT
    a.activity_id,
    a.molregno,
    a.assay_id,
    a.standard_type,
    SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
    SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
    a.standard_value,
    a.standard_relation
  FROM
    `bigquery-public-data.ebi_chembl.activities` AS a
  JOIN
    `bigquery-public-data.ebi_chembl.compound_properties` AS cp
  ON
    a.molregno = cp.molregno
  WHERE
    SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
    AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
    AND a.standard_value IS NOT NULL
    AND a.standard_relation IS NOT NULL
),

assay_activity_counts AS (
  SELECT
    assay_id,
    COUNT(DISTINCT activity_id) AS activity_count
  FROM
    filtered_activities
  GROUP BY
    assay_id
  HAVING
    activity_count < 5
),

filtered_activities_limited AS (
  SELECT
    fa.*
  FROM
    filtered_activities AS fa
  WHERE
    fa.assay_id IN (SELECT assay_id FROM assay_activity_counts)
),

distinct_pairs AS (
  SELECT DISTINCT
    fa1.activity_id AS activity_id1,
    fa2.activity_id AS activity_id2,
    fa1.molregno AS molregno1,
    fa2.molregno AS molregno2,
    fa1.assay_id,
    fa1.standard_type,
    GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
    fa1.standard_value AS standard_value1,
    fa1.standard_relation AS relation1,
    fa2.standard_value AS standard_value2,
    fa2.standard_relation AS relation2
  FROM
    filtered_activities_limited AS fa1
  JOIN
    filtered_activities_limited AS fa2
  ON
    fa1.assay_id = fa2.assay_id
    AND fa1.standard_type = fa2.standard_type
    AND fa1.molregno < fa2.molregno
)

SELECT
  dp.activity_id1,
  dp.activity_id2,
  dp.molregno1,
  dp.molregno2,
  dp.assay_id,
  dp.standard_type,
  dp.Max_heavy_atom_count,
  dp.standard_value1,
  dp.relation1,
  dp.standard_value2,
  dp.relation2
FROM
  distinct_pairs AS dp
LIMIT 100;
```

**Key Changes:**

- **Use Actual Expressions in `WHERE` Clause:**

  - Replaced `heavy_atoms` with `SAFE_CAST(cp.heavy_atoms AS INT64)`.
  - Replaced `pchembl_value` with `SAFE_CAST(a.pchembl_value AS FLOAT64)`.

- **Why This Works:**

  - By using the actual expressions, we ensure that the `WHERE` clause can evaluate the conditions without relying on aliases that aren't yet available at that point in the query processing.

**Additional Considerations:**

- **Data Types:**
  - Ensure that the data types match during casting to prevent any runtime errors.
  - If there might be invalid data that can't be cast, consider using `SAFE_CAST` as we've done to avoid query failures due to casting errors.

- **Performance:**
  - Large datasets and complex joins can lead to long execution times or timeouts.
  - To optimize performance:
    - Limit the dataset early by adding more filters if possible.
    - Ensure that joins are on indexed fields or consider restructuring the query.

- **Timeout Issue:**

  - If you continue to experience timeouts:
    - Reduce the dataset size further by applying more selective filters.
    - Increase the `LIMIT` gradually to test performance.
    - Use `EXPLAIN` to analyze the query plan and identify bottlenecks.

**Testing the Query:**

Before running the full query, you might want to test each CTE individually to ensure it works as expected:

1. **Test `filtered_activities` CTE:**

   ```sql
   SELECT *
   FROM (
     SELECT
       a.activity_id,
       a.molregno,
       a.assay_id,
       a.standard_type,
       SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
       SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
       a.standard_value,
       a.standard_relation
     FROM
       `bigquery-public-data.ebi_chembl.activities` AS a
     JOIN
       `bigquery-public-data.ebi_chembl.compound_properties` AS cp
     ON
       a.molregno = cp.molregno
     WHERE
       SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
       AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
       AND a.standard_value IS NOT NULL
       AND a.standard_relation IS NOT NULL
   )
   LIMIT 100;
   ```

2. **Test `assay_activity_counts` CTE:**

   ```sql
   SELECT *
   FROM (
     SELECT
       assay_id,
       COUNT(DISTINCT activity_id) AS activity_count
     FROM
       filtered_activities
     GROUP BY
       assay_id
     HAVING
       activity_count < 5
   )
   LIMIT 100;
   ```

**Summary:**

- **Use expressions instead of aliases in the `WHERE` clause.**
- **Ensure data types are properly cast where necessary.**
- **Test each part of the query incrementally to identify and resolve issues.**

Let me know if you have any further questions or need additional assistance!
2025-01-25 17:28:27 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 17:28:27 - root - INFO - It appears there's some confusion between the error message you're receiving and the query you've provided. The error message indicates a problem with the `BETWEEN` operator at `[17:15]`, but the query you've shared doesn't contain a `BETWEEN` operator.

**Let's address the issue step by step:**

---

### **1. Mismatch Between Query and Error Message**

- **Error Message:**

  ```
  400 No matching signature for operator BETWEEN
    Argument types: STRING, INT64, INT64
    Signature: (T1) BETWEEN (T1) AND (T1)
      Unable to find common supertype for templated argument <T1>
        Input types for <T1>: {INT64, STRING} at [17:15]; 
  ```

- **Provided Query:**

  ```sql
  SELECT DISTINCT
    a1.activity_id AS activity_id1,
    a2.activity_id AS activity_id2,
    a1.molregno AS molregno1,
    a2.molregno AS molregno2,
    a1.assay_id,
    a1.standard_type
  FROM `bigquery-public-data.ebi_chembl.activities` AS a1
  JOIN `bigquery-public-data.ebi_chembl.activities` AS a2
    ON a1.assay_id = a2.assay_id
    AND a1.standard_type = a2.standard_type
    AND SAFE_CAST(a1.molregno AS INT64) < SAFE_CAST(a2.molregno AS INT64)
  LIMIT 100
  ```

- **Observation:**

  The error references the `BETWEEN` operator at line `[17:15]`, but your query is only 13 lines and doesn't contain a `BETWEEN` operator.

---

### **2. Possible Explanations and Solutions**

**a. You're Running a Different Query**

- It's possible that the error message corresponds to a different query than the one you've provided.
- **Action:** Please double-check the query you're executing and ensure it matches the one you've shared.

**b. Additional Code Before or After the Query**

- If there are additional CTEs or SQL statements before or after the query snippet you've provided, the error might be occurring there.
- **Action:** Provide the full query, including any CTEs or preceding code, so we can accurately diagnose the issue.

**c. Line Number Discrepancies**

- The line number in the error message `[17:15]` implies the error is at line 17, character 15.
- Since your query only has 13 lines, the error might be in additional code not shown.
- **Action:** Review the full script to locate line 17 and see if that's where the `BETWEEN` operator and error reside.

---

### **3. Common Causes of the BETWEEN Operator Error**

- The error indicates a mismatched data type in the `BETWEEN` operator:

  ```
  No matching signature for operator BETWEEN
    Argument types: STRING, INT64, INT64
  ```

- **Explanation:**

  - The `BETWEEN` operator expects all operands to be of the same data type.
  - In this case, it seems a `STRING` is being compared to `INT64` values.

- **Typical Scenario:**

  - Using `BETWEEN` on a column of type `STRING` without casting it to a numeric type.
  - For example: `WHERE string_column BETWEEN 1 AND 10`

---

### **4. Suggested Steps to Resolve the Issue**

**a. Verify Data Types in the BETWEEN Clause**

- **Identify the Column:**

  - The error mentions a `STRING` type being compared with `INT64`.
  - Likely, a column like `heavy_atoms` or `pchembl_value` is of type `STRING`.

- **Correct Usage:**

  - Ensure that when using `BETWEEN` with numeric values, all operands are of a numeric type.
  - Use `SAFE_CAST` or `CAST` to convert the `STRING` column to `INT64` or `FLOAT64`.

- **Example Correction:**

  ```sql
  WHERE
    SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
  ```

**b. Check for Aliases in WHERE Clause**

- **Issue:**

  - Using column aliases in the `WHERE` clause of the same query level where they're defined is invalid.

- **Solution:**

  - Use the full expressions instead of aliases in the `WHERE` clause.
  - Or wrap the query in an additional subquery or CTE.

**c. Provide the Complete Query**

- To accurately diagnose and fix the error, it's essential to see the entire query.

---

### **5. Example of a Corrected Query**

Based on the previous steps, here's how you might adjust your query:

```sql
WITH filtered_activities AS (
  SELECT
    a.activity_id,
    a.molregno,
    a.assay_id,
    a.standard_type,
    SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
    SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
    a.standard_value,
    a.standard_relation
  FROM
    `bigquery-public-data.ebi_chembl.activities` AS a
  JOIN
    `bigquery-public-data.ebi_chembl.compound_properties` AS cp
  ON
    a.molregno = cp.molregno
  WHERE
    SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
    AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
    AND a.standard_value IS NOT NULL
    AND a.standard_relation IS NOT NULL
),

-- Other CTEs

SELECT DISTINCT
  a1.activity_id AS activity_id1,
  a2.activity_id AS activity_id2,
  a1.molregno AS molregno1,
  a2.molregno AS molregno2,
  a1.assay_id,
  a1.standard_type
FROM filtered_activities AS a1
JOIN filtered_activities AS a2
  ON a1.assay_id = a2.assay_id
  AND a1.standard_type = a2.standard_type
  AND SAFE_CAST(a1.molregno AS INT64) < SAFE_CAST(a2.molregno AS INT64)
LIMIT 100;
```

**Notes:**

- Replaced any aliases in `WHERE` clauses with the actual expressions.
- Made sure to `SAFE_CAST` any `STRING` types to numeric types where necessary.
- Used CTEs to structure the query for clarity.

---

### **6. Next Steps**

- **Provide the Full Query:**

  - If the error persists, please share the complete query, including all CTEs and additional code, so that I can help you pinpoint the exact issue.

- **Check Data Types:**

  - Ensure that all columns used in numeric comparisons are properly cast to numeric types.

- **Test Incrementally:**

  - Run parts of your query step by step to isolate where the error occurs.
  - For instance, test the `filtered_activities` CTE separately.

---

### **7. Additional Tips**

- **Using SAFE_CAST:**

  - `SAFE_CAST` ensures that if the conversion fails (e.g., due to non-numeric strings), it returns `NULL` instead of throwing an error.

- **Validating Data:**

  - Sometimes, data inconsistencies can cause conversion failures.
  - You might want to include checks or filters to handle such cases.

- **Example of Handling Non-Numeric Data:**

  ```sql
  WHERE
    REGEXP_CONTAINS(cp.heavy_atoms, r'^\d+$') -- Ensures heavy_atoms contains only digits
    AND SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
  ```

---

### **Conclusion**

By carefully reviewing the complete query and ensuring that all data types are correctly handled, we can resolve the error you're encountering. Please let me know if you can provide the full query or if you need further assistance in debugging this issue.
2025-01-25 23:13:35 - root - INFO - SQL:
SELECT DISTINCT
    a1.activity_id AS activity_id1,
    a2.activity_id AS activity_id2,
    a1.molregno AS molregno1,
    a2.molregno AS molregno2,
    a1.assay_id,
    a1.standard_type
  FROM `bigquery-public-data.ebi_chembl.activities` AS a1
  JOIN `bigquery-public-data.ebi_chembl.activities` AS a2
    ON a1.assay_id = a2.assay_id
    AND a1.standard_type = a2.standard_type
    AND SAFE_CAST(a1.molregno AS INT64) < SAFE_CAST(a2.molregno AS INT64)
  LIMIT 100
Results:
400 Query exceeded resource limits. This query used 1183056 CPU seconds but would charge only 689M Analysis bytes. This exceeds the ratio supported by the on-demand pricing model. Please consider moving this workload to a capacity-based pricing model, which does not have this limit. 1183056 CPU seconds were used, and this query must use less than 176300 CPU seconds.; reason: billingTierLimitExceeded, message: Query exceeded resource limits. This query used 1183056 CPU seconds but would charge only 689M Analysis bytes. This exceeds the ratio supported by the on-demand pricing model. Please consider moving this workload to a capacity-based pricing model, which does not have this limit. 1183056 CPU seconds were used, and this query must use less than 176300 CPU seconds.

Location: US
Job ID: 6b39730e-1c94-4eaa-92b8-6ca806ba7b71

2025-01-26 05:14:19 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 05:14:19 - root - INFO - **Understanding the Issue:**

The error you're encountering:

```
500 Operation timed out after 6.0 hours. Consider reducing the amount of work performed by your operation so that it can complete within this limit.
```

indicates that your query is processing an enormous amount of data, and it's exceeding BigQuery's execution time limits. The primary cause is the **self-join** on the `activities` table without sufficient filtering. The `activities` table in the `ebi_chembl` dataset is massive, containing millions of records. Performing a self-join on such a large table with minimal filters leads to a combinatorial explosion of rows, causing the query to take an exceedingly long time to execute.

**Why the Query Times Out:**

The query:

```sql
SELECT DISTINCT
  a1.activity_id AS activity_id1,
  a2.activity_id AS activity_id2,
  a1.molregno AS molregno1,
  a2.molregno AS molregno2,
  a1.assay_id,
  a1.standard_type
FROM `bigquery-public-data.ebi_chembl.activities` AS a1
JOIN `bigquery-public-data.ebi_chembl.activities` AS a2
  ON a1.assay_id = a2.assay_id
  AND a1.standard_type = a2.standard_type
  AND SAFE_CAST(a1.molregno AS INT64) < SAFE_CAST(a2.molregno AS INT64)
LIMIT 100
```

is attempting to find all pairs of activities that:

- Are from the same assay (`a1.assay_id = a2.assay_id`)
- Have the same standard type (`a1.standard_type = a2.standard_type`)
- Have different molecules (`a1.molregno < a2.molregno`)

Without additional filters, this results in the query generating comparisons between virtually every combination of activities within each assay and standard type. Since assays can contain thousands of activities, the number of pairs becomes enormous.

**Solution: Reduce the Dataset Before Joining**

To prevent the query from timing out, you need to **narrow down the datasets** before performing the join. This involves applying filters that match your task criteria **before** the join operation.

**Steps to Optimize the Query:**

1. **Filter Activities Based on Criteria Before the Join:**

   - **Heavy Atom Count Between 10 and 15**
   - **Fewer Than 5 Activities in That Assay**
   - **Fewer Than 2 Duplicate Activities**
   - **Non-Null Standard Values**
   - **pChEMBL Values Over 10**

2. **Limit the Number of Assays:**

   - Focus on assays that meet the criteria.
   - This significantly reduces the number of records involved in the join.

3. **Perform the Join on the Filtered Dataset:**

   - After filtering, perform the self-join to find pairs within the reduced dataset.

**Rewritten Query:**

Here's an optimized version of your query that includes the necessary filters:

```sql
-- Step 1: Filter activities based on the criteria
WITH filtered_activities AS (
  SELECT
    a.activity_id,
    a.molregno,
    a.assay_id,
    a.standard_type,
    SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
    SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
    a.standard_value,
    a.standard_relation
  FROM
    `bigquery-public-data.ebi_chembl.activities` AS a
  JOIN
    `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
  WHERE
    SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
    AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
    AND a.standard_value IS NOT NULL
    AND a.standard_relation IS NOT NULL
),

-- Step 2: Identify assays with fewer than 5 activities
assays_with_few_activities AS (
  SELECT
    assay_id,
    COUNT(DISTINCT molregno) AS num_molecules,
    COUNT(*) AS num_activities
  FROM
    filtered_activities
  GROUP BY
    assay_id
  HAVING
    num_activities < 5
)

-- Step 3: Select activities from assays with few activities
SELECT DISTINCT
  fa1.activity_id AS activity_id1,
  fa2.activity_id AS activity_id2,
  fa1.molregno AS molregno1,
  fa2.molregno AS molregno2,
  fa1.assay_id,
  fa1.standard_type,
  GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
  fa1.standard_value AS standard_value1,
  fa1.standard_relation AS relation1,
  fa2.standard_value AS standard_value2,
  fa2.standard_relation AS relation2
FROM
  filtered_activities AS fa1
JOIN
  filtered_activities AS fa2
  ON fa1.assay_id = fa2.assay_id
  AND fa1.standard_type = fa2.standard_type
  AND fa1.molregno < fa2.molregno
  AND fa1.assay_id IN (SELECT assay_id FROM assays_with_few_activities)
LIMIT 100;
```

**Explanation:**

- **Filtered Activities (`filtered_activities` CTE):**
  - We filter the `activities` table based on heavy atom count, pChEMBL value, and ensure non-null standard values and relations.
  - We join with `compound_properties` to get the heavy atom count.
  - Casting is used to ensure numeric comparisons.

- **Identify Assays with Fewer than 5 Activities (`assays_with_few_activities` CTE):**
  - We group the filtered activities by `assay_id` and count the number of activities.
  - We select assays that have fewer than 5 activities.

- **Final Selection:**
  - We perform the self-join on the **filtered** activities.
  - We ensure that we're only joining activities from assays with fewer than 5 activities.
  - Additional condition `fa1.molregno < fa2.molregno` avoids duplicate pairs and self-pairing.
  - We calculate the `Max_heavy_atom_count` for each pair.
  - We limit the result to 100 rows to ensure the query completes in a reasonable amount of time.

**Additional Tips:**

- **Avoid Casting in JOIN Conditions:**
  - If possible, perform casting before the join or ensure that join keys are already in compatible formats.
  - Here, `molregno` is used as a string in the comparison (`fa1.molregno < fa2.molregno`), which avoids unnecessary casting.

- **Use `EXISTS` Instead of `IN` for Better Performance:**
  - Depending on the size of the subquery, using `EXISTS` might be more efficient.

  ```sql
  AND EXISTS (
    SELECT 1
    FROM assays_with_few_activities AS a
    WHERE a.assay_id = fa1.assay_id
  )
  ```

- **Limit the Number of Activities Per Assay Even Further:**
  - If the query still doesn't execute promptly, consider reducing the threshold (e.g., assays with fewer than 3 activities).

- **Run Exploratory Queries to Understand Data Distribution:**
  - Before running the full query, it might help to run smaller queries to understand how many assays and activities meet your criteria.

**Example Exploratory Query:**

```sql
SELECT
  COUNT(DISTINCT assay_id) AS num_assays,
  COUNT(*) AS num_activities
FROM
  filtered_activities
```

**Note on Execution Time and Resource Limits:**

- **BigQuery Limits:**
  - BigQuery has limits on the resources a single query can consume.
  - The error indicates that the query exceeds the allowable CPU usage for on-demand pricing.
  - By reducing the dataset size before the join, you can mitigate this issue.

- **Consider Using Batch Processing or Partitioning:**
  - If you need to process large datasets, consider breaking the query into smaller parts.
  - Alternatively, use partitioned tables to improve query performance.

**Final Thoughts:**

- **Test the Query with Smaller Limits:**
  - Start with a `LIMIT` of 10 or 20 to ensure the query runs successfully.
  - Gradually increase the limit to find a balance between result size and execution time.

- **Parallel Processing:**
  - If you have access to BigQuery slots or can upgrade to a higher capacity, it may help with processing larger queries.

**Summary:**

By applying filters **before** the self-join and focusing on a smaller, relevant subset of the data, you can significantly reduce the computational workload of your query, allowing it to run within BigQuery's resource limits and execution time constraints.

**Example Output Format:**

```csv
Max_heavy_atom_count,Latest_publication_date,Highest_doc_id,Change_classification,UUID
count:int between 10 and 15,date:YYYY-MM-DD,id:int >0,classification:str (increase/decrease/no-change),uuid:str
count:int between 10 and 15,date:YYYY-MM-DD,id:int >0,classification:str (increase/decrease/no-change),uuid:str
...
```

**Next Steps:**

- Run the optimized query.
- Verify the results.
- Proceed to calculate the latest publication date based on the method provided.
- Classify the change in standard values as 'increase', 'decrease', or 'no-change' based on their values and relations.
- Generate UUIDs from the activity IDs and canonical SMILES.

**Remember:**

- Always ensure that your queries are as efficient as possible, especially when working with large datasets.
- Filtering early and reducing the amount of data processed in joins can greatly improve query performance.

If you encounter any further issues or need additional assistance, feel free to ask!
2025-01-26 11:15:35 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 11:15:35 - root - INFO - **Understanding the Issue:**

The error you're encountering indicates that your query is exceeding BigQuery's resource limits:

```
500 Operation timed out after 6.0 hours. Consider reducing the amount of work performed by your operation so that it can complete within this limit.
```

This is happening because you're performing a **self-join** on the entire `activities` table without sufficient filtering. The `activities` table in the `ebi_chembl` dataset is very large, containing millions of records. Joining it with itself can result in an enormous number of rows, causing the query to run for an extended period and eventually time out.

**Why the Query Times Out:**

Your query attempts to find all pairs of activities with the same `assay_id` and `standard_type`, where the `molregno` values are different:

```sql
SELECT DISTINCT
  a1.activity_id AS activity_id1,
  a2.activity_id AS activity_id2,
  a1.molregno AS molregno1,
  a2.molregno AS molregno2,
  a1.assay_id,
  a1.standard_type
FROM `bigquery-public-data.ebi_chembl.activities` AS a1
JOIN `bigquery-public-data.ebi_chembl.activities` AS a2
  ON a1.assay_id = a2.assay_id
  AND a1.standard_type = a2.standard_type
  AND SAFE_CAST(a1.molregno AS INT64) < SAFE_CAST(a2.molregno AS INT64)
LIMIT 100
```

Without filtering, this join generates a vast number of combinations, leading to the timeout.

**Solution: Filter the Data Before Joining**

To resolve this issue, you need to:

1. **Filter the activities to include only those that meet your criteria.**
2. **Reduce the dataset size before performing the join.**

**Steps to Optimize the Query:**

Below is an optimized query that incorporates all the criteria from your task:

1. **Select activities where:**

   - The molecule has 10–15 heavy atoms.
   - The pChEMBL value is over 10.
   - The standard value is not null.
   - There are fewer than 5 activities in that assay.
   - Fewer than 2 duplicate activities.
   - Limit the number of assays to those with fewer activities.

2. **Perform the self-join on this filtered dataset.**

3. **Calculate the required fields for the pairs.**

---

**Optimized Query:**

```sql
-- Step 1: Filter activities based on the criteria
WITH filtered_activities AS (
  SELECT
    a.activity_id,
    a.molregno,
    a.assay_id,
    a.standard_type,
    SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
    SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
    a.standard_value,
    a.standard_relation,
    a.doc_id
  FROM
    `bigquery-public-data.ebi_chembl.activities` AS a
  JOIN
    `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
  WHERE
    SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
    AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
    AND a.standard_value IS NOT NULL
    AND a.standard_relation IS NOT NULL
),

-- Step 2: Identify assays with fewer than 5 activities
assays_with_few_activities AS (
  SELECT
    assay_id,
    COUNT(DISTINCT activity_id) AS activity_count
  FROM
    filtered_activities
  GROUP BY
    assay_id
  HAVING
    activity_count < 5
),

-- Step 3: Identify duplicates (less than 2 duplicate activities)
activities_without_duplicates AS (
  SELECT
    fa.*
  FROM
    filtered_activities AS fa
  LEFT JOIN (
    SELECT
      molregno,
      assay_id,
      standard_value,
      COUNT(*) AS dup_count
    FROM
      filtered_activities
    GROUP BY
      molregno, assay_id, standard_value
    HAVING
      COUNT(*) >= 2
  ) AS duplicates
  ON fa.molregno = duplicates.molregno
     AND fa.assay_id = duplicates.assay_id
     AND fa.standard_value = duplicates.standard_value
  WHERE
    duplicates.molregno IS NULL
),

-- Step 4: Select activities from assays with fewer than 5 activities
final_filtered_activities AS (
  SELECT
    fa.*
  FROM
    activities_without_duplicates AS fa
  WHERE
    fa.assay_id IN (SELECT assay_id FROM assays_with_few_activities)
)

-- Step 5: Perform the self-join on the filtered dataset
SELECT DISTINCT
  fa1.activity_id AS activity_id1,
  fa2.activity_id AS activity_id2,
  fa1.molregno AS molregno1,
  fa2.molregno AS molregno2,
  fa1.assay_id,
  fa1.standard_type,
  GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
  -- Additional fields
  fa1.standard_value AS standard_value1,
  fa1.standard_relation AS relation1,
  fa2.standard_value AS standard_value2,
  fa2.standard_relation AS relation2,
  -- For latest publication date and highest doc_id
  GREATEST(fa1.doc_id, fa2.doc_id) AS Highest_doc_id
FROM
  final_filtered_activities AS fa1
JOIN
  final_filtered_activities AS fa2
  ON fa1.assay_id = fa2.assay_id
     AND fa1.standard_type = fa2.standard_type
     AND fa1.molregno < fa2.molregno
LIMIT 100;
```

**Explanation:**

- **`filtered_activities`:** Filters activities based on heavy atom count, pChEMBL value, and ensures non-null standard values and relations.

- **`assays_with_few_activities`:** Identifies assays that have fewer than 5 activities.

- **`activities_without_duplicates`:** Excludes activities that have 2 or more duplicates.

- **`final_filtered_activities`:** Contains activities that meet all criteria.

- **Self-Join on `final_filtered_activities`:** Finds pairs of different molecules tested in the same assay and standard type.

- **Calculates:** Maximum heavy atom count, highest `doc_id`.

**Note on Calculating Latest Publication Date:**

To calculate the latest publication date based on the document's rank within the same journal and year, you would need to:

1. Join the `docs` table to get publication details.

2. Use window functions to rank documents within each journal and year.

3. Map the rank to synthetic months and days as per the provided method.

**Additional Steps to Include in the Query:**

- **Join with `docs` Table:**

  ```sql
  LEFT JOIN `bigquery-public-data.ebi_chembl.docs` AS d1 ON fa1.doc_id = d1.doc_id
  LEFT JOIN `bigquery-public-data.ebi_chembl.docs` AS d2 ON fa2.doc_id = d2.doc_id
  ```

- **Calculate `Latest_publication_date` and `Highest_doc_id`:**

  - Use `GREATEST` function for `Highest_doc_id`.
  - Use the method described to compute the synthetic publication date.

- **Classify the Change in Standard Values:**

  - Compare `standard_value1` and `standard_value2` along with their `relation1` and `relation2` to determine if it's an 'increase', 'decrease', or 'no-change'.

- **Generate UUIDs from Activity IDs and Canonical SMILES:**

  - Join with `compound_structures` to get `canonical_smiles`.
  - Use `MD5` function to generate UUIDs.

**Example of Generating UUID:**

```sql
-- Assuming you have the canonical_smiles
SELECT
  TO_HEX(MD5(TO_JSON_STRING(ARRAY[fa1.activity_id, fa2.activity_id, cs1.canonical_smiles, cs2.canonical_smiles]))) AS UUID
FROM
  ...
JOIN `bigquery-public-data.ebi_chembl.compound_structures` AS cs1 ON fa1.molregno = cs1.molregno
JOIN `bigquery-public-data.ebi_chembl.compound_structures` AS cs2 ON fa2.molregno = cs2.molregno
```

**Final Notes:**

- **Limit the Data Early:** Applying filters before the join significantly reduces the amount of data, preventing timeouts.

- **Monitor Resource Usage:** Use the BigQuery UI to monitor the query's resource consumption.

- **Incremental Testing:** Start with a smaller dataset or stricter criteria and gradually expand.

- **Adjust the `LIMIT`:** Initially use a small `LIMIT`, such as 10, to ensure the query runs successfully.

**Moving Forward:**

By refining the query to include all necessary filters before the self-join, you should be able to execute it without timeouts. Remember to:

- **Test Each Step Individually:** Execute each CTE separately to verify the results.

- **Ensure Data Types Match:** Use `SAFE_CAST` where appropriate.

- **Handle Nulls and Edge Cases:** Check for any potential null values that could affect joins or calculations.

If you need further assistance with specific parts of the query, such as calculating the publication date or classifying the standard value changes, feel free to ask!
2025-01-26 16:39:42 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:39:42 - root - INFO - **Understanding the Issue:**

The error you're encountering indicates that your query exceeds BigQuery's resource limits:

```
400 Query exceeded resource limits. This query used 1,208,622 CPU seconds but would charge only 689M Analysis bytes. This exceeds the ratio supported by the on-demand pricing model. Please consider moving this workload to a capacity-based pricing model, which does not have this limit.
```

**Why This Happens:**

The `activities` table in the `ebi_chembl` dataset is very large, containing millions of records. Performing a self-join on such a massive table without sufficient filtering leads to an exponential increase in the number of rows to process. This results in the query consuming excessive CPU time and ultimately exceeding BigQuery's resource limits.

**Solution: Apply Filters Before the Join**

To resolve this issue, you need to:

1. **Filter the data extensively before performing the join.**
2. **Limit the dataset to only the records that meet all your criteria.**

By reducing the amount of data processed in the join, you can prevent the query from timing out or exceeding resource limits.

---

**Rewriting the Query with Filters:**

Below is an optimized query that incorporates all the conditions specified in your task:

- Molecules have 10–15 heavy atoms.
- Molecules have fewer than 5 activities in that assay.
- Molecules have fewer than 2 duplicate activities.
- Standard values are non-null.
- pChEMBL values are over 10.
- Pairs are of different molecules tested in the same assay and standard type.

```sql
-- Step 1: Filter activities based on the criteria
WITH filtered_activities AS (
  SELECT
    a.activity_id,
    a.molregno,
    a.assay_id,
    a.standard_type,
    a.standard_value,
    a.standard_relation,
    SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
    SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
    a.doc_id
  FROM
    `bigquery-public-data.ebi_chembl.activities` AS a
  JOIN
    `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
  WHERE
    SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
    AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
    AND a.standard_value IS NOT NULL
    AND a.standard_relation IS NOT NULL
),

-- Step 2: Identify assays with fewer than 5 activities
assays_with_few_activities AS (
  SELECT
    assay_id,
    COUNT(DISTINCT activity_id) AS activity_count
  FROM
    filtered_activities
  GROUP BY
    assay_id
  HAVING
    activity_count < 5
),

-- Step 3: Identify activities with fewer than 2 duplicates
activities_no_duplicates AS (
  SELECT
    fa.*
  FROM
    filtered_activities AS fa
  LEFT JOIN (
    SELECT
      molregno,
      assay_id,
      standard_value,
      COUNT(*) AS duplicate_count
    FROM
      filtered_activities
    GROUP BY
      molregno, assay_id, standard_value
    HAVING
      COUNT(*) >= 2
  ) AS duplicates
  ON
    fa.molregno = duplicates.molregno
    AND fa.assay_id = duplicates.assay_id
    AND fa.standard_value = duplicates.standard_value
  WHERE
    duplicates.molregno IS NULL
),

-- Step 4: Final filtered activities
final_activities AS (
  SELECT
    fa.*
  FROM
    activities_no_duplicates AS fa
  WHERE
    fa.assay_id IN (SELECT assay_id FROM assays_with_few_activities)
)

-- Step 5: Perform the self-join on the filtered dataset
SELECT DISTINCT
  fa1.activity_id AS activity_id1,
  fa2.activity_id AS activity_id2,
  fa1.molregno AS molregno1,
  fa2.molregno AS molregno2,
  fa1.assay_id,
  fa1.standard_type,
  GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
  -- Determine the highest doc_id
  GREATEST(SAFE_CAST(fa1.doc_id AS INT64), SAFE_CAST(fa2.doc_id AS INT64)) AS Highest_doc_id,
  -- Placeholder for Latest_publication_date
  NULL AS Latest_publication_date,
  -- Classify the change in standard values
  CASE
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) > SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'decrease'
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) < SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'increase'
    ELSE 'no-change'
  END AS Change_classification,
  -- Generate UUID from activity IDs and canonical SMILES
  TO_HEX(MD5(TO_JSON_STRING(ARRAY[fa1.activity_id, fa2.activity_id, cs1.canonical_smiles, cs2.canonical_smiles]))) AS UUID
FROM
  final_activities AS fa1
JOIN
  final_activities AS fa2
  ON fa1.assay_id = fa2.assay_id
     AND fa1.standard_type = fa2.standard_type
     AND fa1.molregno < fa2.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs1
  ON fa1.molregno = cs1.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs2
  ON fa2.molregno = cs2.molregno
LIMIT 100;
```

**Explanation of the Query:**

- **`filtered_activities` CTE:**
  - Filters activities based on heavy atom count, pChEMBL value over 10, and non-null standard values.
  - Joins with `compound_properties` to get `heavy_atoms`.

- **`assays_with_few_activities` CTE:**
  - Identifies assays that have fewer than 5 activities from the filtered set.

- **`activities_no_duplicates` CTE:**
  - Excludes activities that have 2 or more duplicates (same `molregno`, `assay_id`, `standard_value`).

- **`final_activities` CTE:**
  - Contains activities that meet all the specified criteria.

- **Final SELECT:**
  - Performs a self-join on the filtered dataset (`final_activities`) to find pairs of different molecules tested in the same assay and standard type.
  - Computes the maximum heavy atom count using the `GREATEST` function.
  - Determines the highest `doc_id`.
  - Classifies the change in standard values as 'increase', 'decrease', or 'no-change'.
  - Generates a UUID from the activity IDs and canonical SMILES.

**Key Points:**

- **Filtering Before Joining:** By applying all the necessary filters before the join, we significantly reduce the dataset size, preventing the query from exceeding resource limits.

- **Limiting the Number of Activities:** Restricting to assays with fewer than 5 activities reduces the number of combinations generated in the self-join.

- **Avoiding Duplicates:** Excluding activities with 2 or more duplicates ensures that only unique activities are considered.

- **Calculating Additional Fields:** We calculate fields required for your task, such as `Max_heavy_atom_count`, `Highest_doc_id`, `Change_classification`, and `UUID`.

---

**Further Steps:**

1. **Calculate `Latest_publication_date`:**

   - To compute the publication date, you need to join the `docs` table and apply the provided method for synthetic date calculation.

   - **Example:**

     ```sql
     -- Add to final SELECT
     , DATE_SUB(
         DATE_ADD(DATE_TRUNC(DATE_FROM_UNIX_DATE(UNIX_SECONDS(TIMESTAMP(CONCAT(IFNULL(d.year, '1970'), '-01-01')))), MONTH), INTERVAL FLOOR(PERCENT_RANK() OVER (PARTITION BY d.journal, d.year ORDER BY SAFE_CAST(d.first_page AS INT64)) * 11) MONTH),
         INTERVAL MOD(FLOOR(PERCENT_RANK() OVER (PARTITION BY d.journal, d.year ORDER BY SAFE_CAST(d.first_page AS INT64)) * 308), 28) DAY
       ) AS Latest_publication_date
     ```

   - **Note:** Replace `d` with the appropriate alias after joining the `docs` table.

2. **Adjust the Query Incrementally:**

   - Start with a smaller `LIMIT` (e.g., 10) to test the query execution.

   - Monitor the query's resource usage.

3. **Test Each CTE Individually:**

   - Validate each step to ensure that filters are applied correctly.

4. **Use `EXPLAIN` to Analyze the Query Plan:**

   - Helpful for identifying bottlenecks.

---

**Additional Tips:**

- **Use `SAFE_CAST` or `CAST` Appropriately:**

  - To handle potential conversion errors.

- **Avoid Casting in Join Conditions if Possible:**

  - Ensure `molregno` is of the same data type.

- **Consider Using Clustered Tables or Partitioning:**

  - To optimize query performance on large datasets.

---

**Final Remarks:**

By applying these optimizations, your query should execute within BigQuery's resource limits.

If you continue to experience issues:

- **Further Restrict the Dataset:**

  - Apply more stringent filters.

- **Consult BigQuery Documentation on Quotas and Limits:**

  - Understanding the limitations can help in query optimization.

- **Consider Capacity-Based Pricing:**

  - If you frequently run complex queries, moving to a capacity-based model might be beneficial.

---

**Answer to Your Query:**

The best possible answer is to revise your query to include filtering steps before performing the join, as shown above. This will reduce the amount of data processed, preventing timeouts and resource limit errors, and allow you to retrieve the desired results.
2025-01-26 16:39:55 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:39:55 - root - INFO - SQL:
-- Step 1: Filter activities based on the criteria
WITH filtered_activities AS (
  SELECT
    a.activity_id,
    a.molregno,
    a.assay_id,
    a.standard_type,
    a.standard_value,
    a.standard_relation,
    SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
    SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
    a.doc_id
  FROM
    `bigquery-public-data.ebi_chembl.activities` AS a
  JOIN
    `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
  WHERE
    SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
    AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
    AND a.standard_value IS NOT NULL
    AND a.standard_relation IS NOT NULL
),

-- Step 2: Identify assays with fewer than 5 activities
assays_with_few_activities AS (
  SELECT
    assay_id,
    COUNT(DISTINCT activity_id) AS activity_count
  FROM
    filtered_activities
  GROUP BY
    assay_id
  HAVING
    activity_count < 5
),

-- Step 3: Identify activities with fewer than 2 duplicates
activities_no_duplicates AS (
  SELECT
    fa.*
  FROM
    filtered_activities AS fa
  LEFT JOIN (
    SELECT
      molregno,
      assay_id,
      standard_value,
      COUNT(*) AS duplicate_count
    FROM
      filtered_activities
    GROUP BY
      molregno, assay_id, standard_value
    HAVING
      COUNT(*) >= 2
  ) AS duplicates
  ON
    fa.molregno = duplicates.molregno
    AND fa.assay_id = duplicates.assay_id
    AND fa.standard_value = duplicates.standard_value
  WHERE
    duplicates.molregno IS NULL
),

-- Step 4: Final filtered activities
final_activities AS (
  SELECT
    fa.*
  FROM
    activities_no_duplicates AS fa
  WHERE
    fa.assay_id IN (SELECT assay_id FROM assays_with_few_activities)
)

-- Step 5: Perform the self-join on the filtered dataset
SELECT DISTINCT
  fa1.activity_id AS activity_id1,
  fa2.activity_id AS activity_id2,
  fa1.molregno AS molregno1,
  fa2.molregno AS molregno2,
  fa1.assay_id,
  fa1.standard_type,
  GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
  -- Determine the highest doc_id
  GREATEST(SAFE_CAST(fa1.doc_id AS INT64), SAFE_CAST(fa2.doc_id AS INT64)) AS Highest_doc_id,
  -- Placeholder for Latest_publication_date
  NULL AS Latest_publication_date,
  -- Classify the change in standard values
  CASE
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) > SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'decrease'
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) < SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'increase'
    ELSE 'no-change'
  END AS Change_classification,
  -- Generate UUID from activity IDs and canonical SMILES
  TO_HEX(MD5(TO_JSON_STRING(ARRAY[fa1.activity_id, fa2.activity_id, cs1.canonical_smiles, cs2.canonical_smiles]))) AS UUID
FROM
  final_activities AS fa1
JOIN
  final_activities AS fa2
  ON fa1.assay_id = fa2.assay_id
     AND fa1.standard_type = fa2.standard_type
     AND fa1.molregno < fa2.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs1
  ON fa1.molregno = cs1.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs2
  ON fa2.molregno = cs2.molregno
LIMIT 100;
Results:
activity_id1,activity_id2,molregno1,molregno2,assay_id,standard_type,Max_heavy_atom_count,Highest_doc_id,Latest_publication_date,Change_classification,UUID
656096,663566,86151,86293,143720,Ki,14,16005,,decrease,35b8609eed0da7276b8982e71467310a
1457094,1456969,310542,675,303639,Ki,14,20296,,decrease,456199e9309a556bf345b1273b00d01d
720091,718999,86241,86293,143226,Ki,14,6774,,increase,73a1842773e52a58ca231d12280b87a6
720091,731742,86241,86522,143226,Ki,14,6774,,increase,935fd1954f2ab8d8758f85043ef8f966
656096,650003,86151,86489,143720,Ki,14,16005,,decrease,d8c2ad831df25f16bed75d75f203357c
2583809,2583811,453196,453262,558025,Ki,15,44880,,decrease,482bab88d5d0bb22aec8a1063e0293ae
717769,720091,675,86241,143226,Ki,14,6774,,increase,c59d7e7696093722e3881230c7025247
18424477,18424471,115,386251,1738898,Ki,14,107379,,decrease,acca6f24fcd56a1a5938d3a5d82100d3
300841,294285,83069,93801,143227,Ki,12,6768,,increase,cfeed16930771e2843c563c1e35564e3
1457092,1456970,310535,675,303641,Ki,14,20296,,increase,39cce3baee78aa146345124812255c30
2380588,2380594,517080,517081,492915,Ki,14,45856,,increase,bbcdd6fc6e50d23f7ef3181acb3c8c5c
1807734,1807730,549532,86151,424280,Ki,14,34886,,decrease,c47f53632ea04f0676a60b53cb3c6cde
717773,720095,675,86241,143854,Ki,14,6774,,decrease,20534252756e9a19d0f09c0094dab2f7
1435444,1435450,305181,305210,304960,IC50,13,20675,,decrease,ceab416eeeeeba9820fc0252efdf2ea3
1807734,1807729,549532,86489,424280,Ki,14,34886,,decrease,a6aa98172ff61a2ade565bcd0f434a2d
1719941,1719927,86151,86489,360240,Ki,14,31223,,increase,a9b6ffec4caa58020dff9033e70ea973
15631653,15631654,1948992,1948993,1501472,IC50,15,92644,,no-change,85f26084404c8e3b51d3d146de13e1cd

2025-01-26 16:39:55 - root - INFO - itercount: 0
2025-01-26 16:39:55 - root - INFO - Database Name: bigquery-public-data
Schema Name: ebi_chembl
DDL describes table information.
,0
table_name,tissue_dictionary_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.tissue_dictionary_33`
(
  tissue_id STRING,
  uberon_id STRING,
  pref_name STRING,
  efo_id STRING,
  chembl_id STRING,
  bto_id STRING,
  caloha_id STRING
);"

Some other tables have the similar structure: ['tissue_dictionary_33', 'tissue_dictionary_23', 'tissue_dictionary_29', 'tissue_dictionary_28', 'tissue_dictionary_26', 'tissue_dictionary_30', 'tissue_dictionary_27', 'tissue_dictionary_25', 'tissue_dictionary_24']
,1
table_name,sqlite_stat1_27
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.sqlite_stat1_27`
(
  tbl STRING,
  idx STRING,
  stat STRING
);"

Some other tables have the similar structure: ['sqlite_stat1_27', 'sqlite_stat1_28', 'sqlite_stat1_24', 'sqlite_stat1_26', 'sqlite_stat1_33', 'sqlite_stat1_25', 'sqlite_stat1_29', 'sqlite_stat1_23']
,2
table_name,go_classification_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.go_classification_29`
(
  go_id STRING,
  parent_go_id STRING,
  pref_name STRING,
  class_level STRING,
  aspect STRING,
  path STRING
);"

Some other tables have the similar structure: ['go_classification_29', 'go_classification_28', 'go_classification_33', 'go_classification_24', 'go_classification_30', 'go_classification_25', 'go_classification_26', 'go_classification_27', 'go_classification_23']
,3
table_name,patent_use_codes_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.patent_use_codes_29`
(
  patent_use_code STRING,
  definition STRING
);"

Some other tables have the similar structure: ['patent_use_codes_29', 'patent_use_codes_30', 'patent_use_codes_24', 'patent_use_codes_33', 'patent_use_codes_23', 'patent_use_codes_27', 'patent_use_codes_28', 'patent_use_codes_25', 'patent_use_codes_26']
,4
table_name,frac_classification_28
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.frac_classification_28`
(
  frac_class_id STRING,
  active_ingredient STRING,
  level1 STRING,
  level1_description STRING,
  level2 STRING,
  level2_description STRING,
  level3 STRING,
  level3_description STRING,
  level4 STRING,
  level4_description STRING,
  level5 STRING,
  frac_code STRING
);"

Some other tables have the similar structure: ['frac_classification_28', 'frac_classification_33', 'frac_classification_24', 'frac_classification_30', 'frac_classification_26', 'frac_classification_27', 'frac_classification_23', 'frac_classification_29', 'frac_classification_25']
,5
table_name,predicted_binding_domains_24
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.predicted_binding_domains_24`
(
  predbind_id STRING,
  activity_id STRING,
  site_id STRING,
  prediction_method STRING,
  confidence STRING
);"

Some other tables have the similar structure: ['predicted_binding_domains_24', 'predicted_binding_domains_27', 'predicted_binding_domains_26', 'predicted_binding_domains_33', 'predicted_binding_domains_23', 'predicted_binding_domains_25', 'predicted_binding_domains_29', 'predicted_binding_domains_28', 'predicted_binding_domains_30']
,6
table_name,drug_mechanism_23
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.drug_mechanism_23`
(
  mec_id STRING,
  record_id STRING,
  molregno STRING,
  mechanism_of_action STRING,
  tid STRING,
  site_id STRING,
  action_type STRING,
  direct_interaction STRING,
  molecular_mechanism STRING,
  disease_efficacy STRING,
  mechanism_comment STRING,
  selectivity_comment STRING,
  binding_site_comment STRING
);"

Some other tables have the similar structure: ['drug_mechanism_23', 'drug_mechanism_28', 'drug_mechanism_24', 'drug_mechanism_25', 'drug_mechanism_30', 'drug_mechanism_27', 'drug_mechanism_26', 'drug_mechanism_33', 'drug_mechanism_29']
,7
table_name,structural_alert_sets_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.structural_alert_sets_29`
(
  alert_set_id STRING,
  set_name STRING,
  priority STRING
);"

Some other tables have the similar structure: ['structural_alert_sets_29', 'structural_alert_sets_33', 'structural_alert_sets_25', 'structural_alert_sets_27', 'structural_alert_sets_24', 'structural_alert_sets_30', 'structural_alert_sets_23', 'structural_alert_sets_28', 'structural_alert_sets_26']
,8
table_name,bio_component_sequences_25
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.bio_component_sequences_25`
(
  component_id STRING,
  component_type STRING,
  description STRING,
  sequence STRING,
  sequence_md5sum STRING,
  tax_id STRING,
  organism STRING
);"

Some other tables have the similar structure: ['bio_component_sequences_25', 'bio_component_sequences_28', 'bio_component_sequences_30', 'bio_component_sequences_24', 'bio_component_sequences_26', 'bio_component_sequences_29', 'bio_component_sequences_27', 'bio_component_sequences_23', 'bio_component_sequences_33']
,9
table_name,cell_dictionary_26
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.cell_dictionary_26`
(
  cell_id STRING,
  cell_name STRING,
  cell_description STRING,
  cell_source_tissue STRING,
  cell_source_organism STRING,
  cell_source_tax_id STRING,
  clo_id STRING,
  efo_id STRING,
  cellosaurus_id STRING,
  cl_lincs_id STRING,
  chembl_id STRING,
  cell_ontology_id STRING
);"

Some other tables have the similar structure: ['cell_dictionary_26', 'cell_dictionary_27', 'cell_dictionary_29', 'cell_dictionary_25', 'cell_dictionary_28', 'cell_dictionary_23', 'cell_dictionary_30', 'cell_dictionary_33', 'cell_dictionary_24']
,10
table_name,component_go_30
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.component_go_30`
(
  comp_go_id INT64 NOT NULL OPTIONS(description=""Primary key""),
  component_id INT64 NOT NULL OPTIONS(description=""Foreign key to COMPONENT_SEQUENCES table. The protein component this GO term applies to""),
  go_id STRING NOT NULL OPTIONS(description=""Foreign key to the GO_CLASSIFICATION table. The GO term that this protein is mapped to"")
);"

Some other tables have the similar structure: ['component_go_30', 'component_go_26', 'component_go_29', 'component_go_25', 'component_go_33', 'component_go_28', 'component_go_23', 'component_go_24', 'component_go_27']
,11
table_name,atc_classification_30
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.atc_classification_30`
(
  who_name STRING OPTIONS(description=""WHO/INN name for the compound""),
  level1 STRING OPTIONS(description=""First level of classification""),
  level2 STRING OPTIONS(description=""Second level of classification""),
  level3 STRING OPTIONS(description=""Third level of classification""),
  level4 STRING OPTIONS(description=""Fourth level of classification""),
  level5 STRING NOT NULL OPTIONS(description=""Complete ATC code for compound""),
  level1_description STRING OPTIONS(description=""Description of first level of classification""),
  level2_description STRING OPTIONS(description=""Description of second level of classification""),
  level3_description STRING OPTIONS(description=""Description of third level of classification""),
  level4_description STRING OPTIONS(description=""Description of fourth level of classification"")
);"

Some other tables have the similar structure: ['atc_classification_30', 'atc_classification_27', 'atc_classification_25', 'atc_classification_28', 'atc_classification_23', 'atc_classification_33', 'atc_classification_24', 'atc_classification_26', 'atc_classification_29']
,12
table_name,irac_classification_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.irac_classification_33`
(
  irac_class_id STRING,
  active_ingredient STRING,
  level1 STRING,
  level1_description STRING,
  level2 STRING,
  level2_description STRING,
  level3 STRING,
  level3_description STRING,
  level4 STRING,
  irac_code STRING
);"

Some other tables have the similar structure: ['irac_classification_33', 'irac_classification_28', 'irac_classification_26', 'irac_classification_29', 'irac_classification_30', 'irac_classification_25', 'irac_classification_27', 'irac_classification_23', 'irac_classification_24']
,13
table_name,indication_refs_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.indication_refs_33`
(
  indref_id STRING,
  drugind_id STRING,
  ref_type STRING,
  ref_id STRING,
  ref_url STRING
);"

Some other tables have the similar structure: ['indication_refs_33', 'indication_refs_29', 'indication_refs_30', 'indication_refs_27', 'indication_refs_26', 'indication_refs_23', 'indication_refs_24', 'indication_refs_25', 'indication_refs_28']
,14
table_name,target_dictionary_28
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.target_dictionary_28`
(
  tid STRING,
  target_type STRING,
  pref_name STRING,
  tax_id STRING,
  organism STRING,
  chembl_id STRING,
  species_group_flag STRING
);"

Some other tables have the similar structure: ['target_dictionary_28', 'target_dictionary_29', 'target_dictionary_30', 'target_dictionary_26', 'target_dictionary_27', 'target_dictionary_23', 'target_dictionary_33', 'target_dictionary_24', 'target_dictionary_25']
,15
table_name,drug_warning
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.drug_warning`
(
  warning_id STRING,
  record_id STRING,
  molregno STRING,
  warning_type STRING,
  warning_class STRING,
  warning_description STRING,
  warning_country STRING,
  warning_year STRING,
  efo_term STRING,
  efo_id STRING,
  efo_id_for_warning_class STRING
);"

,16
table_name,drug_warning_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.drug_warning_33`
(
  warning_id STRING,
  record_id STRING,
  molregno STRING,
  warning_type STRING,
  warning_class STRING,
  warning_description STRING,
  warning_country STRING,
  warning_year STRING,
  efo_term STRING,
  efo_id STRING,
  efo_id_for_warning_class STRING
);"

Some other tables have the similar structure: ['drug_warning_33', 'drug_warning_30', 'drug_warning_28', 'drug_warning_29']
,17
table_name,chembl_id_lookup_30
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.chembl_id_lookup_30`
(
  chembl_id STRING NOT NULL OPTIONS(description=""ChEMBL identifier""),
  entity_type STRING NOT NULL OPTIONS(description=""Type of entity (e.g., COMPOUND, ASSAY, TARGET)""),
  entity_id INT64 NOT NULL OPTIONS(description=""Primary key for that entity in corresponding table (e.g., molregno for compounds, tid for targets)""),
  status STRING NOT NULL OPTIONS(description=""Indicates whether the status of the entity within the database - ACTIVE, INACTIVE (downgraded), OBS (obsolete/removed).""),
  last_active INT64 OPTIONS(description=""indicates the last ChEMBL version where the CHEMBL_ID was active"")
);"

Some other tables have the similar structure: ['chembl_id_lookup_30', 'chembl_id_lookup_25', 'chembl_id_lookup_29', 'chembl_id_lookup_26', 'chembl_id_lookup_33', 'chembl_id_lookup_28', 'chembl_id_lookup_23', 'chembl_id_lookup_27', 'chembl_id_lookup_24']
,18
table_name,compound_structures_23
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.compound_structures_23`
(
  molregno STRING,
  molfile STRING,
  standard_inchi STRING,
  standard_inchi_key STRING,
  canonical_smiles STRING
);"

Some other tables have the similar structure: ['compound_structures_23', 'compound_structures_24', 'compound_structures_28', 'compound_structures_25', 'compound_structures_29', 'compound_structures_30', 'compound_structures_26', 'compound_structures_27', 'compound_structures_33']
,19
table_name,activity_supp_map_24
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.activity_supp_map_24`
(
  activity_id STRING,
  smid STRING
);"

Some other tables have the similar structure: ['activity_supp_map_24', 'activity_supp_map_27', 'activity_supp_map_26', 'activity_supp_map_25', 'activity_supp_map_33', 'activity_supp_map_28', 'activity_supp_map_29', 'activity_supp_map_30']
,20
table_name,molecule_hierarchy_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_hierarchy_33`
(
  molregno STRING,
  parent_molregno STRING,
  active_molregno STRING
);"

Some other tables have the similar structure: ['molecule_hierarchy_33', 'molecule_hierarchy_28', 'molecule_hierarchy_23', 'molecule_hierarchy_25', 'molecule_hierarchy_27', 'molecule_hierarchy_30', 'molecule_hierarchy_29', 'molecule_hierarchy_24', 'molecule_hierarchy_26']
,21
table_name,relationship_type_24
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.relationship_type_24`
(
  relationship_type STRING,
  relationship_desc STRING
);"

Some other tables have the similar structure: ['relationship_type_24', 'relationship_type_26', 'relationship_type_33', 'relationship_type_28', 'relationship_type_23', 'relationship_type_29', 'relationship_type_27', 'relationship_type_25', 'relationship_type_30']
,22
table_name,docs_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.docs_29`
(
  doc_id STRING,
  journal STRING,
  year STRING,
  volume STRING,
  issue STRING,
  first_page STRING,
  last_page STRING,
  pubmed_id STRING,
  doi STRING,
  chembl_id STRING,
  title STRING,
  doc_type STRING,
  authors STRING,
  abstract STRING,
  patent_id STRING,
  ridx STRING,
  src_id STRING
);"

Some other tables have the similar structure: ['docs_29', 'docs_28', 'docs_27', 'docs_30', 'docs_23', 'docs_33', 'docs_24', 'docs_26', 'docs_25']
,23
table_name,molecule_hrac_classification_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_hrac_classification_29`
(
  mol_hrac_id STRING,
  hrac_class_id STRING,
  molregno STRING
);"

Some other tables have the similar structure: ['molecule_hrac_classification_29', 'molecule_hrac_classification_28', 'molecule_hrac_classification_30', 'molecule_hrac_classification_25', 'molecule_hrac_classification_23', 'molecule_hrac_classification_27', 'molecule_hrac_classification_33', 'molecule_hrac_classification_26', 'molecule_hrac_classification_24']
,24
table_name,component_domains
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.component_domains`
(
  compd_id STRING,
  domain_id STRING,
  component_id STRING,
  start_position STRING,
  end_position STRING
);"

,25
table_name,bioassay_ontology_26
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.bioassay_ontology_26`
(
  bao_id STRING,
  label STRING
);"

Some other tables have the similar structure: ['bioassay_ontology_26', 'bioassay_ontology_27', 'bioassay_ontology_33', 'bioassay_ontology_24', 'bioassay_ontology_30', 'bioassay_ontology_29', 'bioassay_ontology_25', 'bioassay_ontology_28', 'bioassay_ontology_23']
,26
table_name,binding_sites_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.binding_sites_29`
(
  site_id STRING,
  site_name STRING,
  tid STRING
);"

Some other tables have the similar structure: ['binding_sites_29', 'binding_sites_33', 'binding_sites_24', 'binding_sites_27', 'binding_sites_26', 'binding_sites_28', 'binding_sites_23', 'binding_sites_30', 'binding_sites_25']
,27
table_name,protein_class_synonyms_24
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.protein_class_synonyms_24`
(
  protclasssyn_id STRING,
  protein_class_id STRING,
  protein_class_synonym STRING,
  syn_type STRING
);"

Some other tables have the similar structure: ['protein_class_synonyms_24', 'protein_class_synonyms_33', 'protein_class_synonyms_28', 'protein_class_synonyms_26', 'protein_class_synonyms_25', 'protein_class_synonyms_29', 'protein_class_synonyms_23', 'protein_class_synonyms_30', 'protein_class_synonyms_27']
,28
table_name,target_type
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.target_type`
(
  target_type STRING,
  target_desc STRING,
  parent_type STRING
);"

,29
table_name,mechanism_refs_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.mechanism_refs_33`
(
  mecref_id STRING,
  mec_id STRING,
  ref_type STRING,
  ref_id STRING,
  ref_url STRING
);"

Some other tables have the similar structure: ['mechanism_refs_33', 'mechanism_refs_27', 'mechanism_refs_25', 'mechanism_refs_26', 'mechanism_refs_24', 'mechanism_refs_29', 'mechanism_refs_23', 'mechanism_refs_28', 'mechanism_refs_30']
,30
table_name,biotherapeutics_30
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.biotherapeutics_30`
(
  molregno INT64 NOT NULL OPTIONS(description=""Foreign key to molecule_dictionary""),
  description STRING OPTIONS(description=""Description of the biotherapeutic.""),
  helm_notation STRING OPTIONS(description=""Sequence notation generated according to the HELM standard (http://www.openhelm.org/home). Currently for peptides only"")
);"

Some other tables have the similar structure: ['biotherapeutics_30', 'biotherapeutics_29', 'biotherapeutics_25', 'biotherapeutics_27', 'biotherapeutics_33', 'biotherapeutics_23', 'biotherapeutics_24', 'biotherapeutics_28', 'biotherapeutics_26']
,31
table_name,compound_structural_alerts_27
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.compound_structural_alerts_27`
(
  cpd_str_alert_id STRING,
  molregno STRING,
  alert_id STRING
);"

Some other tables have the similar structure: ['compound_structural_alerts_27', 'compound_structural_alerts_30', 'compound_structural_alerts_26', 'compound_structural_alerts_23', 'compound_structural_alerts_28', 'compound_structural_alerts_33', 'compound_structural_alerts_25', 'compound_structural_alerts_24', 'compound_structural_alerts_29']
,32
table_name,usan_stems_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.usan_stems_29`
(
  usan_stem_id STRING,
  stem STRING,
  subgroup STRING,
  annotation STRING,
  stem_class STRING,
  major_class STRING,
  who_extra STRING
);"

Some other tables have the similar structure: ['usan_stems_29', 'usan_stems_25', 'usan_stems_23', 'usan_stems_27', 'usan_stems_30', 'usan_stems_26', 'usan_stems_24', 'usan_stems_28', 'usan_stems_33']
,33
table_name,component_sequences_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.component_sequences_29`
(
  component_id STRING,
  component_type STRING,
  accession STRING,
  sequence STRING,
  sequence_md5sum STRING,
  description STRING,
  tax_id STRING,
  organism STRING,
  db_source STRING,
  db_version STRING
);"

Some other tables have the similar structure: ['component_sequences_29', 'component_sequences_24', 'component_sequences_23', 'component_sequences_26', 'component_sequences_30', 'component_sequences_25', 'component_sequences_27', 'component_sequences_28', 'component_sequences_33']
,34
table_name,target_relations_26
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.target_relations_26`
(
  tid STRING,
  relationship STRING,
  related_tid STRING,
  targrel_id STRING
);"

Some other tables have the similar structure: ['target_relations_26', 'target_relations_24', 'target_relations_30', 'target_relations_29', 'target_relations_33', 'target_relations_27', 'target_relations_28', 'target_relations_23', 'target_relations_25']
,35
table_name,products_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.products_29`
(
  dosage_form STRING,
  route STRING,
  trade_name STRING,
  approval_date STRING,
  ad_type STRING,
  oral STRING,
  topical STRING,
  parenteral STRING,
  black_box_warning STRING,
  applicant_full_name STRING,
  innovator_company STRING,
  product_id STRING,
  nda_type STRING
);"

Some other tables have the similar structure: ['products_29', 'products_30', 'products_25', 'products_24', 'products_33', 'products_26', 'products_27', 'products_28', 'products_23']
,36
table_name,activity_supp_map
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.activity_supp_map`
(
  actsm_id STRING,
  activity_id STRING,
  smid STRING
);"

,37
table_name,ligand_eff_25
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.ligand_eff_25`
(
  activity_id STRING,
  bei STRING,
  sei STRING,
  le STRING,
  lle STRING
);"

Some other tables have the similar structure: ['ligand_eff_25', 'ligand_eff_23', 'ligand_eff_29', 'ligand_eff_26', 'ligand_eff_24', 'ligand_eff_30', 'ligand_eff_28', 'ligand_eff_33', 'ligand_eff_27']
,38
table_name,drug_indication_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.drug_indication_33`
(
  drugind_id STRING,
  record_id STRING,
  molregno STRING,
  max_phase_for_ind STRING,
  mesh_id STRING,
  mesh_heading STRING,
  efo_id STRING,
  efo_term STRING
);"

Some other tables have the similar structure: ['drug_indication_33', 'drug_indication_30', 'drug_indication_28', 'drug_indication_27', 'drug_indication_29', 'drug_indication_24', 'drug_indication_25', 'drug_indication_26', 'drug_indication_23']
,39
table_name,hrac_classification_23
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.hrac_classification_23`
(
  hrac_class_id STRING,
  active_ingredient STRING,
  level1 STRING,
  level1_description STRING,
  level2 STRING,
  level2_description STRING,
  level3 STRING,
  hrac_code STRING
);"

Some other tables have the similar structure: ['hrac_classification_23', 'hrac_classification_33', 'hrac_classification_26', 'hrac_classification_28', 'hrac_classification_30', 'hrac_classification_25', 'hrac_classification_29', 'hrac_classification_27', 'hrac_classification_24']
,40
table_name,metabolism_refs_23
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.metabolism_refs_23`
(
  metref_id STRING,
  met_id STRING,
  ref_type STRING,
  ref_id STRING,
  ref_url STRING
);"

Some other tables have the similar structure: ['metabolism_refs_23', 'metabolism_refs_27', 'metabolism_refs_25', 'metabolism_refs_28', 'metabolism_refs_24', 'metabolism_refs_33', 'metabolism_refs_26', 'metabolism_refs_29', 'metabolism_refs_30']
,41
table_name,structural_alerts_28
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.structural_alerts_28`
(
  alert_id STRING,
  alert_set_id STRING,
  alert_name STRING,
  smarts STRING
);"

Some other tables have the similar structure: ['structural_alerts_28', 'structural_alerts_29', 'structural_alerts_24', 'structural_alerts_33', 'structural_alerts_30', 'structural_alerts_26', 'structural_alerts_25', 'structural_alerts_27', 'structural_alerts_23']
,42
table_name,assay_parameters_26
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.assay_parameters_26`
(
  assay_param_id STRING,
  assay_id STRING,
  type STRING,
  relation STRING,
  value STRING,
  units STRING,
  text_value STRING,
  standard_type STRING,
  standard_relation STRING,
  standard_value STRING,
  standard_units STRING,
  standard_text_value STRING,
  comments STRING
);"

Some other tables have the similar structure: ['assay_parameters_26', 'assay_parameters_33', 'assay_parameters_27', 'assay_parameters_28', 'assay_parameters_25', 'assay_parameters_24', 'assay_parameters_29', 'assay_parameters_30', 'assay_parameters_23']
,43
table_name,assay_class_map_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.assay_class_map_33`
(
  ass_cls_map_id STRING,
  assay_id STRING,
  assay_class_id STRING
);"

Some other tables have the similar structure: ['assay_class_map_33', 'assay_class_map_29', 'assay_class_map_28', 'assay_class_map_27', 'assay_class_map_25', 'assay_class_map_30', 'assay_class_map_26']
,44
table_name,product_patents_25
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.product_patents_25`
(
  prod_pat_id STRING,
  product_id STRING,
  patent_no STRING,
  patent_expire_date STRING,
  drug_substance_flag STRING,
  drug_product_flag STRING,
  patent_use_code STRING,
  delist_flag STRING,
  submission_date STRING
);"

Some other tables have the similar structure: ['product_patents_25', 'product_patents_29', 'product_patents_30', 'product_patents_28', 'product_patents_23', 'product_patents_27', 'product_patents_26', 'product_patents_33', 'product_patents_24']
,45
table_name,organism_class_25
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.organism_class_25`
(
  oc_id STRING,
  tax_id STRING,
  l1 STRING,
  l2 STRING,
  l3 STRING
);"

Some other tables have the similar structure: ['organism_class_25', 'organism_class_24', 'organism_class_23', 'organism_class_33', 'organism_class_26', 'organism_class_27', 'organism_class_30', 'organism_class_29', 'organism_class_28']
,46
table_name,domains_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.domains_33`
(
  domain_id STRING,
  domain_type STRING,
  source_domain_id STRING,
  domain_name STRING,
  domain_description STRING
);"

Some other tables have the similar structure: ['domains_33', 'domains_28', 'domains_24', 'domains_30', 'domains_27', 'domains_25', 'domains_23', 'domains_29', 'domains_26']
,47
table_name,target_type_26
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.target_type_26`
(
  target_type STRING,
  target_desc STRING,
  parent_type STRING
);"

Some other tables have the similar structure: ['target_type_26', 'target_type_27', 'target_type_24', 'target_type_28', 'target_type_23', 'target_type_25', 'target_type_33', 'target_type_30', 'target_type_29']
,48
table_name,component_synonyms_28
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.component_synonyms_28`
(
  compsyn_id STRING,
  component_id STRING,
  component_synonym STRING,
  syn_type STRING
);"

Some other tables have the similar structure: ['component_synonyms_28', 'component_synonyms_23', 'component_synonyms_33', 'component_synonyms_25', 'component_synonyms_24', 'component_synonyms_29', 'component_synonyms_26', 'component_synonyms_30', 'component_synonyms_27']
,49
table_name,compound_records_25
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.compound_records_25`
(
  record_id STRING,
  molregno STRING,
  doc_id STRING,
  compound_key STRING,
  compound_name STRING,
  src_id STRING,
  src_compound_id STRING,
  cidx STRING
);"

Some other tables have the similar structure: ['compound_records_25', 'compound_records_33', 'compound_records_29', 'compound_records_30', 'compound_records_28', 'compound_records_23', 'compound_records_26', 'compound_records_24', 'compound_records_27']
,50
table_name,activity_supp_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.activity_supp_33`
(
  as_id STRING,
  rgid STRING,
  smid STRING,
  type STRING,
  relation STRING,
  value STRING,
  units STRING,
  text_value STRING,
  standard_type STRING,
  standard_relation STRING,
  standard_value STRING,
  standard_units STRING,
  standard_text_value STRING,
  comments STRING
);"

Some other tables have the similar structure: ['activity_supp_33', 'activity_supp_26', 'activity_supp_25', 'activity_supp_27', 'activity_supp_29', 'activity_supp_24', 'activity_supp_28', 'activity_supp_30']
,51
table_name,action_type_24
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.action_type_24`
(
  action_type STRING,
  description STRING,
  parent_type STRING
);"

Some other tables have the similar structure: ['action_type_24', 'action_type_30', 'action_type_27', 'action_type_26', 'action_type_28', 'action_type_25', 'action_type_33', 'action_type_23', 'action_type_29']
,52
table_name,source_23
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.source_23`
(
  src_id STRING,
  src_description STRING,
  src_short_name STRING
);"

Some other tables have the similar structure: ['source_23', 'source_28', 'source_26', 'source_29', 'source_33', 'source_25', 'source_24', 'source_30', 'source_27']
,53
table_name,target_components_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.target_components_29`
(
  tid STRING,
  component_id STRING,
  targcomp_id STRING,
  homologue STRING
);"

Some other tables have the similar structure: ['target_components_29', 'target_components_27', 'target_components_24', 'target_components_23', 'target_components_25', 'target_components_30', 'target_components_28', 'target_components_26', 'target_components_33']
,54
table_name,site_components_25
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.site_components_25`
(
  sitecomp_id STRING,
  site_id STRING,
  component_id STRING,
  domain_id STRING,
  site_residues STRING
);"

Some other tables have the similar structure: ['site_components_25', 'site_components_27', 'site_components_23', 'site_components_33', 'site_components_26', 'site_components_24', 'site_components_30', 'site_components_28', 'site_components_29']
,55
table_name,molecule_dictionary
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_dictionary`
(
  molregno STRING,
  pref_name STRING,
  chembl_id STRING,
  max_phase STRING,
  therapeutic_flag STRING,
  dosed_ingredient STRING,
  structure_type STRING,
  chebi_par_id STRING,
  molecule_type STRING,
  first_approval STRING,
  oral STRING,
  parenteral STRING,
  topical STRING,
  black_box_warning STRING,
  first_in_class STRING,
  chirality STRING,
  prodrug STRING,
  inorganic_flag STRING,
  usan_year STRING,
  availability_type STRING,
  usan_stem STRING,
  polymer_flag STRING,
  usan_substem STRING,
  usan_stem_definition STRING,
  indication_class STRING,
  withdrawn_flag STRING,
  chemical_probe STRING,
  natural_product STRING
);"

,56
table_name,confidence_score_lookup_28
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.confidence_score_lookup_28`
(
  confidence_score STRING,
  description STRING,
  target_mapping STRING
);"

Some other tables have the similar structure: ['confidence_score_lookup_28', 'confidence_score_lookup_29', 'confidence_score_lookup_30', 'confidence_score_lookup_33', 'confidence_score_lookup_27', 'confidence_score_lookup_25', 'confidence_score_lookup_26', 'confidence_score_lookup_24', 'confidence_score_lookup_23']
,57
table_name,compound_properties_30
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.compound_properties_30`
(
  molregno INT64 NOT NULL OPTIONS(description=""Foreign key to compounds table (compound structure)""),
  mw_freebase FLOAT64 OPTIONS(description=""Molecular weight of parent compound""),
  alogp FLOAT64 OPTIONS(description=""Calculated ALogP""),
  hba INT64 OPTIONS(description=""Number hydrogen bond acceptors""),
  hbd INT64 OPTIONS(description=""Number hydrogen bond donors""),
  psa FLOAT64 OPTIONS(description=""Polar surface area""),
  rtb INT64 OPTIONS(description=""Number rotatable bonds""),
  ro3_pass STRING OPTIONS(description="" Indicates whether the compound passes the rule-of-three (mw < 300, logP < 3 etc)""),
  num_ro5_violations INT64 OPTIONS(description=""Number of violations of Lipinski's rule-of-five, using HBA and HBD definitions""),
  cx_most_apka FLOAT64 OPTIONS(description=""The most acidic pKa calculated using ChemAxon v17.29.0""),
  cx_most_bpka FLOAT64 OPTIONS(description=""The most basic pKa calculated using ChemAxon v17.29.0""),
  cx_logp FLOAT64 OPTIONS(description=""The calculated octanol/water partition coefficient using ChemAxon v17.29.0""),
  cx_logd FLOAT64 OPTIONS(description=""The calculated octanol/water distribution coefficient at pH7.4 using ChemAxon v17.29.0""),
  molecular_species STRING OPTIONS(description=""Indicates whether the compound is an acid/base/neutral""),
  full_mwt FLOAT64 OPTIONS(description=""Molecular weight of the full compound including any salts""),
  aromatic_rings INT64 OPTIONS(description=""Number of aromatic rings""),
  heavy_atoms INT64 OPTIONS(description=""Number of heavy (non-hydrogen) atoms""),
  qed_weighted FLOAT64 OPTIONS(description=""Weighted quantitative estimate of drug likeness (as defined by Bickerton et al., Nature Chem 2012)""),
  mw_monoisotopic FLOAT64 OPTIONS(description=""Monoisotopic parent molecular weight""),
  full_molformula STRING OPTIONS(description="" Molecular formula for the full compound (including any salt)""),
  hba_lipinski INT64 OPTIONS(description=""Number of hydrogen bond acceptors calculated according to Lipinski's original rules (i.e., N + O count))""),
  hbd_lipinski INT64 OPTIONS(description=""Number of hydrogen bond donors calculated according to Lipinski's original rules (i.e., NH + OH count)""),
  num_lipinski_ro5_violations INT64 OPTIONS(description=""Number of violations of Lipinski's rule of five using HBA_LIPINSKI and HBD_LIPINSKI counts"")
);"

Some other tables have the similar structure: ['compound_properties_30', 'compound_properties_33', 'compound_properties_28', 'compound_properties_24', 'compound_properties_25', 'compound_properties_23', 'compound_properties_26', 'compound_properties_29', 'compound_properties_27']
,58
table_name,component_domains_25
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.component_domains_25`
(
  compd_id STRING,
  domain_id STRING,
  component_id STRING,
  start_position STRING,
  end_position STRING
);"

Some other tables have the similar structure: ['component_domains_25', 'component_domains_23', 'component_domains_33', 'component_domains_26', 'component_domains_30', 'component_domains_28', 'component_domains_27', 'component_domains_29', 'component_domains_24']
,59
table_name,assay_type_27
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.assay_type_27`
(
  assay_type STRING,
  assay_desc STRING
);"

Some other tables have the similar structure: ['assay_type_27', 'assay_type_24', 'assay_type_23', 'assay_type_26', 'assay_type_25', 'assay_type_29', 'assay_type_33', 'assay_type_28', 'assay_type_30']
,60
table_name,component_synonyms
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.component_synonyms`
(
  compsyn_id STRING,
  component_id STRING,
  component_synonym STRING,
  syn_type STRING
);"

,61
table_name,formulations_25
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.formulations_25`
(
  product_id STRING,
  ingredient STRING,
  strength STRING,
  record_id STRING,
  molregno STRING,
  formulation_id STRING
);"

Some other tables have the similar structure: ['formulations_25', 'formulations_30', 'formulations_29', 'formulations_24', 'formulations_23', 'formulations_28', 'formulations_27', 'formulations_26', 'formulations_33']
,62
table_name,organism_class
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.organism_class`
(
  oc_id STRING,
  tax_id STRING,
  l1 STRING,
  l2 STRING,
  l3 STRING
);"

,63
table_name,defined_daily_dose_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.defined_daily_dose_33`
(
  atc_code STRING,
  ddd_units STRING,
  ddd_admr STRING,
  ddd_comment STRING,
  ddd_id STRING,
  ddd_value STRING
);"

Some other tables have the similar structure: ['defined_daily_dose_33', 'defined_daily_dose_28', 'defined_daily_dose_27', 'defined_daily_dose_26', 'defined_daily_dose_24', 'defined_daily_dose_25', 'defined_daily_dose_23', 'defined_daily_dose_30', 'defined_daily_dose_29']
,64
table_name,activity_stds_lookup_26
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.activity_stds_lookup_26`
(
  std_act_id STRING,
  standard_type STRING,
  definition STRING,
  standard_units STRING,
  normal_range_min STRING,
  normal_range_max STRING
);"

Some other tables have the similar structure: ['activity_stds_lookup_26', 'activity_stds_lookup_33', 'activity_stds_lookup_25', 'activity_stds_lookup_30', 'activity_stds_lookup_27', 'activity_stds_lookup_23', 'activity_stds_lookup_24', 'activity_stds_lookup_29', 'activity_stds_lookup_28']
,65
table_name,activity_smid_28
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.activity_smid_28`
(
  smid STRING
);"

Some other tables have the similar structure: ['activity_smid_28', 'activity_smid_29', 'activity_smid_24', 'activity_smid_25', 'activity_smid_26', 'activity_smid_33', 'activity_smid_30', 'activity_smid_27']
,66
table_name,research_stem_30
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.research_stem_30`
(
  res_stem_id INT64 NOT NULL OPTIONS(description=""Primary key. Unique ID for each research code stem.""),
  research_stem STRING OPTIONS(description=""The actual stem/prefix used in the research code."")
);"

Some other tables have the similar structure: ['research_stem_30', 'research_stem_26', 'research_stem_28', 'research_stem_25', 'research_stem_23', 'research_stem_27', 'research_stem_33', 'research_stem_24', 'research_stem_29']
,67
table_name,protein_classification_25
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.protein_classification_25`
(
  protein_class_id STRING,
  parent_id STRING,
  pref_name STRING,
  short_name STRING,
  protein_class_desc STRING,
  definition STRING,
  class_level STRING
);"

Some other tables have the similar structure: ['protein_classification_25', 'protein_classification_27', 'protein_classification_33', 'protein_classification_28', 'protein_classification_23', 'protein_classification_30', 'protein_classification_26', 'protein_classification_24', 'protein_classification_29']
,68
table_name,domains
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.domains`
(
  domain_id STRING,
  domain_type STRING,
  source_domain_id STRING,
  domain_name STRING,
  domain_description STRING
);"

,69
table_name,research_companies_25
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.research_companies_25`
(
  co_stem_id STRING,
  res_stem_id STRING,
  company STRING,
  country STRING,
  previous_company STRING
);"

Some other tables have the similar structure: ['research_companies_25', 'research_companies_27', 'research_companies_24', 'research_companies_28', 'research_companies_23', 'research_companies_30', 'research_companies_33', 'research_companies_29', 'research_companies_26']
,70
table_name,version_30
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.version_30`
(
  name STRING NOT NULL OPTIONS(description=""Name of release version""),
  creation_date DATETIME OPTIONS(description=""Date database created""),
  comments STRING OPTIONS(description=""Description of release version"")
);"

Some other tables have the similar structure: ['version_30', 'version_33', 'version_24', 'version_25', 'version_26', 'version_23', 'version_27', 'version_28', 'version_29']
,71
table_name,variant_sequences_25
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.variant_sequences_25`
(
  variant_id STRING,
  mutation STRING,
  accession STRING,
  version STRING,
  isoform STRING,
  sequence STRING,
  organism STRING
);"

Some other tables have the similar structure: ['variant_sequences_25', 'variant_sequences_33', 'variant_sequences_28', 'variant_sequences_23', 'variant_sequences_27', 'variant_sequences_30', 'variant_sequences_29', 'variant_sequences_24', 'variant_sequences_26']
,72
table_name,biotherapeutic_components
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.biotherapeutic_components`
(
  biocomp_id STRING,
  molregno STRING,
  component_id STRING
);"

,73
table_name,biotherapeutic_components_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.biotherapeutic_components_29`
(
  biocomp_id STRING,
  molregno STRING,
  component_id STRING
);"

Some other tables have the similar structure: ['biotherapeutic_components_29', 'biotherapeutic_components_24', 'biotherapeutic_components_28', 'biotherapeutic_components_26', 'biotherapeutic_components_23', 'biotherapeutic_components_25', 'biotherapeutic_components_33', 'biotherapeutic_components_27', 'biotherapeutic_components_30']
,74
table_name,relationship_type
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.relationship_type`
(
  relationship_type STRING,
  relationship_desc STRING
);"

,75
table_name,protein_class_synonyms
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.protein_class_synonyms`
(
  protclasssyn_id STRING,
  protein_class_id STRING,
  protein_class_synonym STRING,
  syn_type STRING
);"

,76
table_name,chembl_release_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.chembl_release_33`
(
  chembl_release_id STRING,
  chembl_release STRING,
  creation_date STRING
);"

,77
table_name,assays_27
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.assays_27`
(
  assay_id STRING,
  doc_id STRING,
  description STRING,
  assay_type STRING,
  assay_test_type STRING,
  assay_category STRING,
  assay_organism STRING,
  assay_tax_id STRING,
  assay_strain STRING,
  assay_tissue STRING,
  assay_cell_type STRING,
  assay_subcellular_fraction STRING,
  tid STRING,
  relationship_type STRING,
  confidence_score STRING,
  curated_by STRING,
  activity_count STRING,
  assay_source STRING,
  src_id STRING,
  src_assay_id STRING,
  chembl_id STRING,
  updated_on STRING,
  updated_by STRING,
  orig_description STRING,
  mc_tax_id STRING,
  mc_organism STRING,
  mc_target_type STRING,
  mc_target_name STRING,
  mc_target_accession STRING,
  cell_id STRING,
  bao_format STRING,
  tissue_id STRING,
  curation_comment STRING,
  variant_id STRING,
  aidx STRING,
  job_id STRING,
  log_id STRING,
  ridx STRING,
  tid_fixed STRING
);"

Some other tables have the similar structure: ['assays_27', 'assays_24', 'assays_25', 'assays_26', 'assays_33', 'assays_28', 'assays_23', 'assays_30', 'assays_29']
,78
table_name,molecule_dictionary_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_dictionary_29`
(
  molregno STRING,
  pref_name STRING,
  chembl_id STRING,
  max_phase STRING,
  therapeutic_flag STRING,
  dosed_ingredient STRING,
  structure_type STRING,
  chebi_par_id STRING,
  molecule_type STRING,
  first_approval STRING,
  oral STRING,
  parenteral STRING,
  topical STRING,
  black_box_warning STRING,
  natural_product STRING,
  first_in_class STRING,
  chirality STRING,
  prodrug STRING,
  inorganic_flag STRING,
  usan_year STRING,
  availability_type STRING,
  usan_stem STRING,
  polymer_flag STRING,
  usan_substem STRING,
  usan_stem_definition STRING,
  indication_class STRING,
  withdrawn_flag STRING,
  withdrawn_year STRING,
  withdrawn_country STRING,
  withdrawn_reason STRING,
  withdrawn_class STRING
);"

Some other tables have the similar structure: ['molecule_dictionary_29', 'molecule_dictionary_25', 'molecule_dictionary_30', 'molecule_dictionary_28', 'molecule_dictionary_23', 'molecule_dictionary_26', 'molecule_dictionary_27', 'molecule_dictionary_33', 'molecule_dictionary_24']
,79
table_name,activity_properties_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.activity_properties_33`
(
  ap_id STRING,
  activity_id STRING,
  type STRING,
  relation STRING,
  value STRING,
  units STRING,
  text_value STRING,
  standard_type STRING,
  standard_relation STRING,
  standard_value STRING,
  standard_units STRING,
  standard_text_value STRING,
  comments STRING,
  result_flag STRING
);"

Some other tables have the similar structure: ['activity_properties_33', 'activity_properties_25', 'activity_properties_29', 'activity_properties_30', 'activity_properties_26', 'activity_properties_27', 'activity_properties_24', 'activity_properties_28']
,80
table_name,drug_indication
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.drug_indication`
(
  drugind_id STRING,
  record_id STRING,
  molregno STRING,
  max_phase_for_ind STRING,
  mesh_id STRING,
  mesh_heading STRING,
  efo_id STRING,
  efo_term STRING
);"

,81
table_name,assay_classification_26
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.assay_classification_26`
(
  assay_class_id STRING,
  l1 STRING,
  l2 STRING,
  l3 STRING,
  class_type STRING,
  bao_id STRING,
  source STRING
);"

Some other tables have the similar structure: ['assay_classification_26', 'assay_classification_29', 'assay_classification_33', 'assay_classification_25', 'assay_classification_28', 'assay_classification_27', 'assay_classification_30']
,82
table_name,molecule_synonyms_26
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_synonyms_26`
(
  molregno STRING,
  syn_type STRING,
  molsyn_id STRING,
  res_stem_id STRING,
  synonyms STRING
);"

Some other tables have the similar structure: ['molecule_synonyms_26', 'molecule_synonyms_24', 'molecule_synonyms_33', 'molecule_synonyms_28', 'molecule_synonyms_27', 'molecule_synonyms_29', 'molecule_synonyms_23', 'molecule_synonyms_25', 'molecule_synonyms_30']
,83
table_name,component_class_24
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.component_class_24`
(
  component_id STRING,
  protein_class_id STRING,
  comp_class_id STRING
);"

Some other tables have the similar structure: ['component_class_24', 'component_class_27', 'component_class_28', 'component_class_29', 'component_class_23', 'component_class_30', 'component_class_33', 'component_class_26', 'component_class_25']
,84
table_name,molecule_irac_classification_24
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_irac_classification_24`
(
  mol_irac_id STRING,
  irac_class_id STRING,
  molregno STRING
);"

Some other tables have the similar structure: ['molecule_irac_classification_24', 'molecule_irac_classification_26', 'molecule_irac_classification_28', 'molecule_irac_classification_33', 'molecule_irac_classification_29', 'molecule_irac_classification_23', 'molecule_irac_classification_30', 'molecule_irac_classification_27', 'molecule_irac_classification_25']
,85
table_name,molecule_frac_classification_28
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_frac_classification_28`
(
  mol_frac_id STRING,
  frac_class_id STRING,
  molregno STRING
);"

Some other tables have the similar structure: ['molecule_frac_classification_28', 'molecule_frac_classification_26', 'molecule_frac_classification_23', 'molecule_frac_classification_24', 'molecule_frac_classification_33', 'molecule_frac_classification_25', 'molecule_frac_classification_27', 'molecule_frac_classification_30', 'molecule_frac_classification_29']
,86
table_name,molecule_atc_classification
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_atc_classification`
(
  mol_atc_id STRING,
  level5 STRING,
  molregno STRING
);"

,87
table_name,activity_stds_lookup
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.activity_stds_lookup`
(
  std_act_id STRING,
  standard_type STRING,
  definition STRING,
  standard_units STRING,
  normal_range_min STRING,
  normal_range_max STRING
);"

,88
table_name,molecule_synonyms
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_synonyms`
(
  molregno STRING,
  syn_type STRING,
  molsyn_id STRING,
  res_stem_id STRING,
  synonyms STRING
);"

,89
table_name,metabolism_23
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.metabolism_23`
(
  met_id STRING,
  drug_record_id STRING,
  substrate_record_id STRING,
  metabolite_record_id STRING,
  pathway_id STRING,
  pathway_key STRING,
  enzyme_name STRING,
  enzyme_tid STRING,
  met_conversion STRING,
  organism STRING,
  tax_id STRING,
  met_comment STRING
);"

Some other tables have the similar structure: ['metabolism_23', 'metabolism_25', 'metabolism_29', 'metabolism_28', 'metabolism_33', 'metabolism_24', 'metabolism_27', 'metabolism_26', 'metabolism_30']
,90
table_name,patent_use_codes
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.patent_use_codes`
(
  patent_use_code STRING,
  definition STRING
);"

,91
table_name,data_validity_lookup
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.data_validity_lookup`
(
  data_validity_comment STRING,
  description STRING
);"

,92
table_name,curation_lookup_25
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.curation_lookup_25`
(
  curated_by STRING,
  description STRING
);"

Some other tables have the similar structure: ['curation_lookup_25', 'curation_lookup_30', 'curation_lookup_28', 'curation_lookup_26', 'curation_lookup_27', 'curation_lookup_33', 'curation_lookup_23', 'curation_lookup_29', 'curation_lookup_24']
,93
table_name,ligand_eff
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.ligand_eff`
(
  activity_id STRING,
  bei STRING,
  sei STRING,
  le STRING,
  lle STRING
);"

,94
table_name,activities_24
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.activities_24`
(
  activity_id STRING,
  assay_id STRING,
  doc_id STRING,
  record_id STRING,
  molregno STRING,
  standard_relation STRING,
  published_value STRING,
  published_units STRING,
  standard_value STRING,
  standard_units STRING,
  standard_flag STRING,
  standard_type STRING,
  activity_comment STRING,
  published_type STRING,
  data_validity_comment STRING,
  potential_duplicate STRING,
  published_relation STRING,
  pchembl_value STRING,
  bao_endpoint STRING,
  uo_units STRING,
  qudt_units STRING,
  toid STRING,
  upper_value STRING,
  standard_upper_value STRING,
  src_id STRING,
  type STRING,
  relation STRING,
  value STRING,
  units STRING,
  text_value STRING,
  standard_text_value STRING
);"

Some other tables have the similar structure: ['activities_24', 'activities_26', 'activities_30', 'activities_33', 'activities_23', 'activities_28', 'activities_29', 'activities_27', 'activities_25']
,95
table_name,source
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.source`
(
  src_id STRING,
  src_description STRING,
  src_short_name STRING
);"

,96
table_name,molecule_irac_classification
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_irac_classification`
(
  mol_irac_id STRING,
  irac_class_id STRING,
  molregno STRING
);"

,97
table_name,biotherapeutics
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.biotherapeutics`
(
  molregno STRING,
  description STRING,
  helm_notation STRING
);"

,98
table_name,protein_family_classification_29
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.protein_family_classification_29`
(
  protein_class_id STRING,
  protein_class_desc STRING,
  l1 STRING,
  l2 STRING,
  l3 STRING,
  l4 STRING,
  l5 STRING,
  l6 STRING,
  l7 STRING,
  l8 STRING
);"

Some other tables have the similar structure: ['protein_family_classification_29', 'protein_family_classification_28', 'protein_family_classification_25', 'protein_family_classification_26', 'protein_family_classification_30', 'protein_family_classification_24', 'protein_family_classification_27', 'protein_family_classification_23']
,99
table_name,metabolism
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.metabolism`
(
  met_id STRING,
  drug_record_id STRING,
  substrate_record_id STRING,
  metabolite_record_id STRING,
  pathway_id STRING,
  pathway_key STRING,
  enzyme_name STRING,
  enzyme_tid STRING,
  met_conversion STRING,
  organism STRING,
  tax_id STRING,
  met_comment STRING
);"

,100
table_name,activity_properties
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.activity_properties`
(
  ap_id STRING,
  activity_id STRING,
  type STRING,
  relation STRING,
  value STRING,
  units STRING,
  text_value STRING,
  standard_type STRING,
  standard_relation STRING,
  standard_value STRING,
  standard_units STRING,
  standard_text_value STRING,
  comments STRING,
  result_flag STRING
);"

,101
table_name,irac_classification
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.irac_classification`
(
  irac_class_id STRING,
  active_ingredient STRING,
  level1 STRING,
  level1_description STRING,
  level2 STRING,
  level2_description STRING,
  level3 STRING,
  level3_description STRING,
  level4 STRING,
  irac_code STRING
);"

,102
table_name,bio_component_sequences
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.bio_component_sequences`
(
  component_id STRING,
  component_type STRING,
  description STRING,
  sequence STRING,
  sequence_md5sum STRING,
  tax_id STRING,
  organism STRING
);"

,103
table_name,chembl_release
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.chembl_release`
(
  chembl_release_id STRING,
  chembl_release STRING,
  creation_date STRING
);"

,104
table_name,cell_dictionary
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.cell_dictionary`
(
  cell_id STRING,
  cell_name STRING,
  cell_description STRING,
  cell_source_tissue STRING,
  cell_source_organism STRING,
  cell_source_tax_id STRING,
  clo_id STRING,
  efo_id STRING,
  cellosaurus_id STRING,
  cl_lincs_id STRING,
  chembl_id STRING,
  cell_ontology_id STRING
);"

,105
table_name,warning_refs_30
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.warning_refs_30`
(
  warnref_id INT64 NOT NULL OPTIONS(description=""Primary key for the warning reference""),
  warning_id INT64 OPTIONS(description=""Foreign key to the drug_warning table""),
  ref_type STRING OPTIONS(description=""Type/source of reference""),
  ref_id STRING OPTIONS(description=""Identifier for the reference in the source""),
  ref_url STRING OPTIONS(description=""Full URL linking to the reference"")
);"

Some other tables have the similar structure: ['warning_refs_30', 'warning_refs_29', 'warning_refs_28', 'warning_refs_33']
,106
table_name,sqlite_stat1
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.sqlite_stat1`
(
  tbl STRING,
  idx STRING,
  stat STRING
);"

,107
table_name,data_validity_lookup_33
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.data_validity_lookup_33`
(
  data_validity_comment STRING,
  description STRING
);"

Some other tables have the similar structure: ['data_validity_lookup_33', 'data_validity_lookup_30', 'data_validity_lookup_25', 'data_validity_lookup_27', 'data_validity_lookup_26', 'data_validity_lookup_28', 'data_validity_lookup_23', 'data_validity_lookup_29', 'data_validity_lookup_24']
,108
table_name,molecule_atc_classification_28
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_atc_classification_28`
(
  mol_atc_id STRING,
  level5 STRING,
  molregno STRING
);"

Some other tables have the similar structure: ['molecule_atc_classification_28', 'molecule_atc_classification_25', 'molecule_atc_classification_30', 'molecule_atc_classification_33', 'molecule_atc_classification_26', 'molecule_atc_classification_24', 'molecule_atc_classification_27', 'molecule_atc_classification_23', 'molecule_atc_classification_29']
,109
table_name,molecule_frac_classification
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_frac_classification`
(
  mol_frac_id STRING,
  frac_class_id STRING,
  molregno STRING
);"

,110
table_name,component_sequences
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.component_sequences`
(
  component_id STRING,
  component_type STRING,
  accession STRING,
  sequence STRING,
  sequence_md5sum STRING,
  description STRING,
  tax_id STRING,
  organism STRING,
  db_source STRING,
  db_version STRING
);"

,111
table_name,products
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.products`
(
  dosage_form STRING,
  route STRING,
  trade_name STRING,
  approval_date STRING,
  ad_type STRING,
  oral STRING,
  topical STRING,
  parenteral STRING,
  black_box_warning STRING,
  applicant_full_name STRING,
  innovator_company STRING,
  product_id STRING,
  nda_type STRING
);"

,112
table_name,compound_properties
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.compound_properties`
(
  molregno STRING,
  mw_freebase STRING,
  alogp STRING,
  hba STRING,
  hbd STRING,
  psa STRING,
  rtb STRING,
  ro3_pass STRING,
  num_ro5_violations STRING,
  cx_most_apka STRING,
  cx_most_bpka STRING,
  cx_logp STRING,
  cx_logd STRING,
  molecular_species STRING,
  full_mwt STRING,
  aromatic_rings STRING,
  heavy_atoms STRING,
  qed_weighted STRING,
  mw_monoisotopic STRING,
  full_molformula STRING,
  hba_lipinski STRING,
  hbd_lipinski STRING,
  num_lipinski_ro5_violations STRING,
  np_likeness_score STRING
);"

,113
table_name,protein_classification
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.protein_classification`
(
  protein_class_id STRING,
  parent_id STRING,
  pref_name STRING,
  short_name STRING,
  protein_class_desc STRING,
  definition STRING,
  class_level STRING
);"

,114
table_name,parameter_type_23
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.parameter_type_23`
(
  parameter_type STRING,
  description STRING
);"

,115
table_name,indication_refs
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.indication_refs`
(
  indref_id STRING,
  drugind_id STRING,
  ref_type STRING,
  ref_id STRING,
  ref_url STRING
);"

,116
table_name,metabolism_refs
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.metabolism_refs`
(
  metref_id STRING,
  met_id STRING,
  ref_type STRING,
  ref_id STRING,
  ref_url STRING
);"

,117
table_name,target_relations
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.target_relations`
(
  tid STRING,
  relationship STRING,
  related_tid STRING,
  targrel_id STRING
);"

,118
table_name,structural_alert_sets
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.structural_alert_sets`
(
  alert_set_id STRING,
  set_name STRING,
  priority STRING
);"

,119
table_name,confidence_score_lookup
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.confidence_score_lookup`
(
  confidence_score STRING,
  description STRING,
  target_mapping STRING
);"

,120
table_name,predicted_binding_domains
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.predicted_binding_domains`
(
  predbind_id STRING,
  activity_id STRING,
  site_id STRING,
  prediction_method STRING,
  confidence STRING
);"

,121
table_name,match_24
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.match_24`
(
  patent_no STRING,
  publication_number STRING
);"

Some other tables have the similar structure: ['match_24', 'match_23']
,122
table_name,frac_classification
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.frac_classification`
(
  frac_class_id STRING,
  active_ingredient STRING,
  level1 STRING,
  level1_description STRING,
  level2 STRING,
  level2_description STRING,
  level3 STRING,
  level3_description STRING,
  level4 STRING,
  level4_description STRING,
  level5 STRING,
  frac_code STRING
);"

,123
table_name,mechanism_refs
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.mechanism_refs`
(
  mecref_id STRING,
  mec_id STRING,
  ref_type STRING,
  ref_id STRING,
  ref_url STRING
);"

,124
table_name,curation_lookup
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.curation_lookup`
(
  curated_by STRING,
  description STRING
);"

,125
table_name,usan_stems
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.usan_stems`
(
  usan_stem_id STRING,
  stem STRING,
  subgroup STRING,
  annotation STRING,
  stem_class STRING,
  major_class STRING
);"

,126
table_name,structural_alerts
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.structural_alerts`
(
  alert_id STRING,
  alert_set_id STRING,
  alert_name STRING,
  smarts STRING
);"

,127
table_name,drug_mechanism
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.drug_mechanism`
(
  mec_id STRING,
  record_id STRING,
  molregno STRING,
  mechanism_of_action STRING,
  tid STRING,
  site_id STRING,
  action_type STRING,
  direct_interaction STRING,
  molecular_mechanism STRING,
  disease_efficacy STRING,
  mechanism_comment STRING,
  selectivity_comment STRING,
  binding_site_comment STRING,
  variant_id STRING
);"

,128
table_name,compound_structures
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.compound_structures`
(
  molregno STRING,
  molfile STRING,
  standard_inchi STRING,
  standard_inchi_key STRING,
  canonical_smiles STRING
);"

,129
table_name,binding_sites
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.binding_sites`
(
  site_id STRING,
  site_name STRING,
  tid STRING
);"

,130
table_name,chembl_id_lookup
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.chembl_id_lookup`
(
  chembl_id STRING,
  entity_type STRING,
  entity_id STRING,
  status STRING,
  last_active STRING
);"

,131
table_name,tissue_dictionary
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.tissue_dictionary`
(
  tissue_id STRING,
  uberon_id STRING,
  pref_name STRING,
  efo_id STRING,
  chembl_id STRING,
  bto_id STRING,
  caloha_id STRING
);"

,132
table_name,atc_classification
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.atc_classification`
(
  who_name STRING,
  level1 STRING,
  level2 STRING,
  level3 STRING,
  level4 STRING,
  level5 STRING,
  level1_description STRING,
  level2_description STRING,
  level3_description STRING,
  level4_description STRING
);"

,133
table_name,assay_class_map
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.assay_class_map`
(
  ass_cls_map_id STRING,
  assay_id STRING,
  assay_class_id STRING
);"

,134
table_name,target_components
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.target_components`
(
  tid STRING,
  component_id STRING,
  targcomp_id STRING,
  homologue STRING
);"

,135
table_name,component_class
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.component_class`
(
  component_id STRING,
  protein_class_id STRING,
  comp_class_id STRING
);"

,136
table_name,molecule_hierarchy
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_hierarchy`
(
  molregno STRING,
  parent_molregno STRING,
  active_molregno STRING
);"

,137
table_name,bioassay_ontology
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.bioassay_ontology`
(
  bao_id STRING,
  label STRING
);"

,138
table_name,version
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.version`
(
  name STRING,
  creation_date STRING,
  comments STRING
);"

,139
table_name,protein_family_classification
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.protein_family_classification`
(
  protein_class_id STRING,
  protein_class_desc STRING,
  l1 STRING,
  l2 STRING,
  l3 STRING,
  l4 STRING,
  l5 STRING,
  l6 STRING,
  l7 STRING,
  l8 STRING
);"

,140
table_name,activities
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.activities`
(
  activity_id STRING,
  assay_id STRING,
  doc_id STRING,
  record_id STRING,
  molregno STRING,
  standard_relation STRING,
  standard_value STRING,
  standard_units STRING,
  standard_flag STRING,
  standard_type STRING,
  activity_comment STRING,
  data_validity_comment STRING,
  potential_duplicate STRING,
  pchembl_value STRING,
  bao_endpoint STRING,
  uo_units STRING,
  qudt_units STRING,
  toid STRING,
  upper_value STRING,
  standard_upper_value STRING,
  src_id STRING,
  type STRING,
  relation STRING,
  value STRING,
  units STRING,
  text_value STRING,
  standard_text_value STRING,
  action_type STRING
);"

,141
table_name,formulations
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.formulations`
(
  product_id STRING,
  ingredient STRING,
  strength STRING,
  record_id STRING,
  molregno STRING,
  formulation_id STRING
);"

,142
table_name,component_go
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.component_go`
(
  comp_go_id STRING,
  component_id STRING,
  go_id STRING
);"

,143
table_name,docs
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.docs`
(
  doc_id STRING,
  journal STRING,
  year STRING,
  volume STRING,
  issue STRING,
  first_page STRING,
  last_page STRING,
  pubmed_id STRING,
  doi STRING,
  chembl_id STRING,
  title STRING,
  doc_type STRING,
  authors STRING,
  abstract STRING,
  patent_id STRING,
  ridx STRING,
  src_id STRING,
  chembl_release_id STRING
);"

,144
table_name,activity_smid
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.activity_smid`
(
  smid STRING
);"

,145
table_name,warning_refs
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.warning_refs`
(
  warnref_id STRING,
  warning_id STRING,
  ref_type STRING,
  ref_id STRING,
  ref_url STRING
);"

,146
table_name,go_classification
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.go_classification`
(
  go_id STRING,
  parent_go_id STRING,
  pref_name STRING,
  class_level STRING,
  aspect STRING,
  path STRING
);"

,147
table_name,site_components
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.site_components`
(
  sitecomp_id STRING,
  site_id STRING,
  component_id STRING,
  domain_id STRING,
  site_residues STRING
);"

,148
table_name,assay_classification
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.assay_classification`
(
  assay_class_id STRING,
  l1 STRING,
  l2 STRING,
  l3 STRING,
  class_type STRING,
  source STRING
);"

,149
table_name,assays
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.assays`
(
  assay_id STRING,
  doc_id STRING,
  description STRING,
  assay_type STRING,
  assay_test_type STRING,
  assay_category STRING,
  assay_organism STRING,
  assay_tax_id STRING,
  assay_strain STRING,
  assay_tissue STRING,
  assay_cell_type STRING,
  assay_subcellular_fraction STRING,
  tid STRING,
  relationship_type STRING,
  confidence_score STRING,
  curated_by STRING,
  src_id STRING,
  src_assay_id STRING,
  chembl_id STRING,
  cell_id STRING,
  bao_format STRING,
  tissue_id STRING,
  variant_id STRING,
  aidx STRING
);"

,150
table_name,assay_type
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.assay_type`
(
  assay_type STRING,
  assay_desc STRING
);"

,151
table_name,compound_structural_alerts
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.compound_structural_alerts`
(
  cpd_str_alert_id STRING,
  molregno STRING,
  alert_id STRING
);"

,152
table_name,activity_supp
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.activity_supp`
(
  as_id STRING,
  rgid STRING,
  smid STRING,
  type STRING,
  relation STRING,
  value STRING,
  units STRING,
  text_value STRING,
  standard_type STRING,
  standard_relation STRING,
  standard_value STRING,
  standard_units STRING,
  standard_text_value STRING,
  comments STRING
);"

,153
table_name,target_dictionary
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.target_dictionary`
(
  tid STRING,
  target_type STRING,
  pref_name STRING,
  tax_id STRING,
  organism STRING,
  chembl_id STRING,
  species_group_flag STRING
);"

,154
table_name,research_stem
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.research_stem`
(
  res_stem_id STRING,
  research_stem STRING
);"

,155
table_name,assay_parameters
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.assay_parameters`
(
  assay_param_id STRING,
  assay_id STRING,
  type STRING,
  relation STRING,
  value STRING,
  units STRING,
  text_value STRING,
  standard_type STRING,
  standard_relation STRING,
  standard_value STRING,
  standard_units STRING,
  standard_text_value STRING,
  comments STRING
);"

,156
table_name,action_type
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.action_type`
(
  action_type STRING,
  description STRING,
  parent_type STRING
);"

,157
table_name,product_patents
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.product_patents`
(
  prod_pat_id STRING,
  product_id STRING,
  patent_no STRING,
  patent_expire_date STRING,
  drug_substance_flag STRING,
  drug_product_flag STRING,
  patent_use_code STRING,
  delist_flag STRING,
  submission_date STRING
);"

,158
table_name,compound_records
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.compound_records`
(
  record_id STRING,
  molregno STRING,
  doc_id STRING,
  compound_key STRING,
  compound_name STRING,
  src_id STRING,
  src_compound_id STRING,
  cidx STRING
);"

,159
table_name,hrac_classification
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.hrac_classification`
(
  hrac_class_id STRING,
  active_ingredient STRING,
  level1 STRING,
  level1_description STRING,
  level2 STRING,
  level2_description STRING,
  level3 STRING,
  hrac_code STRING
);"

,160
table_name,research_companies
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.research_companies`
(
  co_stem_id STRING,
  res_stem_id STRING,
  company STRING,
  country STRING,
  previous_company STRING
);"

,161
table_name,variant_sequences
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.variant_sequences`
(
  variant_id STRING,
  mutation STRING,
  accession STRING,
  version STRING,
  isoform STRING,
  sequence STRING,
  organism STRING,
  tax_id STRING
);"

,162
table_name,molecule_hrac_classification
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.molecule_hrac_classification`
(
  mol_hrac_id STRING,
  hrac_class_id STRING,
  molregno STRING
);"

,163
table_name,defined_daily_dose
ddl,"CREATE TABLE `bigquery-public-data.ebi_chembl.defined_daily_dose`
(
  atc_code STRING,
  ddd_units STRING,
  ddd_admr STRING,
  ddd_comment STRING,
  ddd_id STRING,
  ddd_value STRING
);"

External knowledge that might be helpful: 
### Data Sources:
Part tables of ChEMBL database:
- activity data: patents-public-data.ebi_chembl.activities_29
- compound structures: patents-public-data.ebi_chembl.compound_structures_29 
- compound properties: patents-public-data.ebi_chembl.compound_properties_29 
- publication documents: patents-public-data.ebi_chembl.docs_29 

### UUID Generation:
Activity Pair UUID (mmp_delta_uuid):
Generated using the MD5 hash of the JSON string of the pair's activity IDs:
to_hex(md5(to_json_string(struct(A, B))))
Both A and B can be activity id or canonical_smiles

### Standard Change Classification:
Determines whether the standard value between two molecules has increased, decreased, or stayed the same:
'decrease': If standard_value_1 >(>>) standard_value_2 and measurement relations do not conflict.
'increase': If standard_value_1 <(<<) standard_value_2 and measurement relations do not conflict.
'no-change': If standard_value_1 =(~) standard_value_2 and both standard relations indicate equality.

### How to Got the publication Date
To compute a publication date for each document, we use the following method, which assigns a date based on the document's relative position within its journal and year, ordered by its first page number.

#### 1. Year Calculation

- **Year**: Use the document's publication year as the year in the date.
  - If the document's year is known, use that year.
  - If the year is missing or unavailable, default to **1970**.

#### 2. Month Calculation

- **Grouping**: For all documents within the same **journal** and **year**, group them together.
- **Ordering**: Within each group, order the documents by their `first_page` number (converted to an integer).
- **Percent Rank Computation**:
  - Calculate the **percent rank** of each document in the ordered list.
  - **Percent Rank Formula**:

    $$\text{Percent Rank} = \frac{\text{Rank of Document} - 1}{\text{Total Documents in Group} - 1}$$

    - The rank starts at 1 for the first document.
    - The percent rank ranges from 0 to 1.
- **Month Assignment**:
  - Scale the percent rank to months by multiplying it by 11:

    $$\text{Scaled Value} = \text{Percent Rank} \times 11$$

  - Take the integer part of the scaled value (floor it):

    $$\text{Floor Value} = \left\lfloor \text{Scaled Value} \right\rfloor$$

  - Add 1 to get the month number (since months are from 1 to 12):

    $$\text{Month} = \text{Floor Value} + 1$$

  - **Note**: If the computed month is not available (e.g., due to missing data), default the month to **1**.

#### 3. Day Calculation

- **Using the Same Percent Rank**: Use the percent rank computed in the month calculation.
- **Day Assignment**:
  - Scale the percent rank to days by multiplying it by **308**:

    $$\text{Scaled Value} = \text{Percent Rank} \times 308$$

    - The number 308 is chosen because it is the product of 11 months and 28 days (11 × 28), representing the total number of days in an 11-month period with 28 days per month.
  - Take the integer part of the scaled value (floor it):

    $$\text{Floor Value} = \left\lfloor \text{Scaled Value} \right\rfloor$$

  - Compute the modulus of the floor value with 28:

    $$\text{Modulo Value} = \text{Floor Value} \bmod 28$$

  - Add 1 to get the day number (since days are from 1 to 28):

    $$\text{Day} = \text{Modulo Value} + 1$$

  - **Note**: If the computed day is not available, default the day to **1**.

### 4. Constructing the publication Date

- Combine the computed **Year**, **Month**, and **Day** to form the publication date.

  $$\text{publication Date} : \text{Year}-\text{Month}-\text{Day}$$

  For example, 2002-06-15.

The table structure information is ({database name: {schema name: {table name}}}): 
{'bigquery-public-data': {'ebi_chembl': ['action_type', 'action_type_23', 'action_type_24', 'action_type_25', 'action_type_26', 'action_type_27', 'action_type_28', 'action_type_29', 'action_type_30', 'action_type_33', 'activities', 'activities_23', 'activities_24', 'activities_25', 'activities_26', 'activities_27', 'activities_28', 'activities_29', 'activities_30', 'activities_33', 'activity_properties', 'activity_properties_24', 'activity_properties_25', 'activity_properties_26', 'activity_properties_27', 'activity_properties_28', 'activity_properties_29', 'activity_properties_30', 'activity_properties_33', 'activity_smid', 'activity_smid_24', 'activity_smid_25', 'activity_smid_26', 'activity_smid_27', 'activity_smid_28', 'activity_smid_29', 'activity_smid_30', 'activity_smid_33', 'activity_stds_lookup', 'activity_stds_lookup_23', 'activity_stds_lookup_24', 'activity_stds_lookup_25', 'activity_stds_lookup_26', 'activity_stds_lookup_27', 'activity_stds_lookup_28', 'activity_stds_lookup_29', 'activity_stds_lookup_30', 'activity_stds_lookup_33', 'activity_supp', 'activity_supp_24', 'activity_supp_25', 'activity_supp_26', 'activity_supp_27', 'activity_supp_28', 'activity_supp_29', 'activity_supp_30', 'activity_supp_33', 'activity_supp_map', 'activity_supp_map_24', 'activity_supp_map_25', 'activity_supp_map_26', 'activity_supp_map_27', 'activity_supp_map_28', 'activity_supp_map_29', 'activity_supp_map_30', 'activity_supp_map_33', 'assay_class_map', 'assay_class_map_25', 'assay_class_map_26', 'assay_class_map_27', 'assay_class_map_28', 'assay_class_map_29', 'assay_class_map_30', 'assay_class_map_33', 'assay_classification', 'assay_classification_25', 'assay_classification_26', 'assay_classification_27', 'assay_classification_28', 'assay_classification_29', 'assay_classification_30', 'assay_classification_33', 'assay_parameters', 'assay_parameters_23', 'assay_parameters_24', 'assay_parameters_25', 'assay_parameters_26', 'assay_parameters_27', 'assay_parameters_28', 'assay_parameters_29', 'assay_parameters_30', 'assay_parameters_33', 'assay_type', 'assay_type_23', 'assay_type_24', 'assay_type_25', 'assay_type_26', 'assay_type_27', 'assay_type_28', 'assay_type_29', 'assay_type_30', 'assay_type_33', 'assays', 'assays_23', 'assays_24', 'assays_25', 'assays_26', 'assays_27', 'assays_28', 'assays_29', 'assays_30', 'assays_33', 'atc_classification', 'atc_classification_23', 'atc_classification_24', 'atc_classification_25', 'atc_classification_26', 'atc_classification_27', 'atc_classification_28', 'atc_classification_29', 'atc_classification_30', 'atc_classification_33', 'binding_sites', 'binding_sites_23', 'binding_sites_24', 'binding_sites_25', 'binding_sites_26', 'binding_sites_27', 'binding_sites_28', 'binding_sites_29', 'binding_sites_30', 'binding_sites_33', 'bio_component_sequences', 'bio_component_sequences_23', 'bio_component_sequences_24', 'bio_component_sequences_25', 'bio_component_sequences_26', 'bio_component_sequences_27', 'bio_component_sequences_28', 'bio_component_sequences_29', 'bio_component_sequences_30', 'bio_component_sequences_33', 'bioassay_ontology', 'bioassay_ontology_23', 'bioassay_ontology_24', 'bioassay_ontology_25', 'bioassay_ontology_26', 'bioassay_ontology_27', 'bioassay_ontology_28', 'bioassay_ontology_29', 'bioassay_ontology_30', 'bioassay_ontology_33', 'biotherapeutic_components', 'biotherapeutic_components_23', 'biotherapeutic_components_24', 'biotherapeutic_components_25', 'biotherapeutic_components_26', 'biotherapeutic_components_27', 'biotherapeutic_components_28', 'biotherapeutic_components_29', 'biotherapeutic_components_30', 'biotherapeutic_components_33', 'biotherapeutics', 'biotherapeutics_23', 'biotherapeutics_24', 'biotherapeutics_25', 'biotherapeutics_26', 'biotherapeutics_27', 'biotherapeutics_28', 'biotherapeutics_29', 'biotherapeutics_30', 'biotherapeutics_33', 'cell_dictionary', 'cell_dictionary_23', 'cell_dictionary_24', 'cell_dictionary_25', 'cell_dictionary_26', 'cell_dictionary_27', 'cell_dictionary_28', 'cell_dictionary_29', 'cell_dictionary_30', 'cell_dictionary_33', 'chembl_id_lookup', 'chembl_id_lookup_23', 'chembl_id_lookup_24', 'chembl_id_lookup_25', 'chembl_id_lookup_26', 'chembl_id_lookup_27', 'chembl_id_lookup_28', 'chembl_id_lookup_29', 'chembl_id_lookup_30', 'chembl_id_lookup_33', 'chembl_release', 'chembl_release_33', 'component_class', 'component_class_23', 'component_class_24', 'component_class_25', 'component_class_26', 'component_class_27', 'component_class_28', 'component_class_29', 'component_class_30', 'component_class_33', 'component_domains', 'component_domains_23', 'component_domains_24', 'component_domains_25', 'component_domains_26', 'component_domains_27', 'component_domains_28', 'component_domains_29', 'component_domains_30', 'component_domains_33', 'component_go', 'component_go_23', 'component_go_24', 'component_go_25', 'component_go_26', 'component_go_27', 'component_go_28', 'component_go_29', 'component_go_30', 'component_go_33', 'component_sequences', 'component_sequences_23', 'component_sequences_24', 'component_sequences_25', 'component_sequences_26', 'component_sequences_27', 'component_sequences_28', 'component_sequences_29', 'component_sequences_30', 'component_sequences_33', 'component_synonyms', 'component_synonyms_23', 'component_synonyms_24', 'component_synonyms_25', 'component_synonyms_26', 'component_synonyms_27', 'component_synonyms_28', 'component_synonyms_29', 'component_synonyms_30', 'component_synonyms_33', 'compound_properties', 'compound_properties_23', 'compound_properties_24', 'compound_properties_25', 'compound_properties_26', 'compound_properties_27', 'compound_properties_28', 'compound_properties_29', 'compound_properties_30', 'compound_properties_33', 'compound_records', 'compound_records_23', 'compound_records_24', 'compound_records_25', 'compound_records_26', 'compound_records_27', 'compound_records_28', 'compound_records_29', 'compound_records_30', 'compound_records_33', 'compound_structural_alerts', 'compound_structural_alerts_23', 'compound_structural_alerts_24', 'compound_structural_alerts_25', 'compound_structural_alerts_26', 'compound_structural_alerts_27', 'compound_structural_alerts_28', 'compound_structural_alerts_29', 'compound_structural_alerts_30', 'compound_structural_alerts_33', 'compound_structures', 'compound_structures_23', 'compound_structures_24', 'compound_structures_25', 'compound_structures_26', 'compound_structures_27', 'compound_structures_28', 'compound_structures_29', 'compound_structures_30', 'compound_structures_33', 'confidence_score_lookup', 'confidence_score_lookup_23', 'confidence_score_lookup_24', 'confidence_score_lookup_25', 'confidence_score_lookup_26', 'confidence_score_lookup_27', 'confidence_score_lookup_28', 'confidence_score_lookup_29', 'confidence_score_lookup_30', 'confidence_score_lookup_33', 'curation_lookup', 'curation_lookup_23', 'curation_lookup_24', 'curation_lookup_25', 'curation_lookup_26', 'curation_lookup_27', 'curation_lookup_28', 'curation_lookup_29', 'curation_lookup_30', 'curation_lookup_33', 'data_validity_lookup', 'data_validity_lookup_23', 'data_validity_lookup_24', 'data_validity_lookup_25', 'data_validity_lookup_26', 'data_validity_lookup_27', 'data_validity_lookup_28', 'data_validity_lookup_29', 'data_validity_lookup_30', 'data_validity_lookup_33', 'defined_daily_dose', 'defined_daily_dose_23', 'defined_daily_dose_24', 'defined_daily_dose_25', 'defined_daily_dose_26', 'defined_daily_dose_27', 'defined_daily_dose_28', 'defined_daily_dose_29', 'defined_daily_dose_30', 'defined_daily_dose_33', 'docs', 'docs_23', 'docs_24', 'docs_25', 'docs_26', 'docs_27', 'docs_28', 'docs_29', 'docs_30', 'docs_33', 'domains', 'domains_23', 'domains_24', 'domains_25', 'domains_26', 'domains_27', 'domains_28', 'domains_29', 'domains_30', 'domains_33', 'drug_indication', 'drug_indication_23', 'drug_indication_24', 'drug_indication_25', 'drug_indication_26', 'drug_indication_27', 'drug_indication_28', 'drug_indication_29', 'drug_indication_30', 'drug_indication_33', 'drug_mechanism', 'drug_mechanism_23', 'drug_mechanism_24', 'drug_mechanism_25', 'drug_mechanism_26', 'drug_mechanism_27', 'drug_mechanism_28', 'drug_mechanism_29', 'drug_mechanism_30', 'drug_mechanism_33', 'drug_warning', 'drug_warning_28', 'drug_warning_29', 'drug_warning_30', 'drug_warning_33', 'formulations', 'formulations_23', 'formulations_24', 'formulations_25', 'formulations_26', 'formulations_27', 'formulations_28', 'formulations_29', 'formulations_30', 'formulations_33', 'frac_classification', 'frac_classification_23', 'frac_classification_24', 'frac_classification_25', 'frac_classification_26', 'frac_classification_27', 'frac_classification_28', 'frac_classification_29', 'frac_classification_30', 'frac_classification_33', 'go_classification', 'go_classification_23', 'go_classification_24', 'go_classification_25', 'go_classification_26', 'go_classification_27', 'go_classification_28', 'go_classification_29', 'go_classification_30', 'go_classification_33', 'hrac_classification', 'hrac_classification_23', 'hrac_classification_24', 'hrac_classification_25', 'hrac_classification_26', 'hrac_classification_27', 'hrac_classification_28', 'hrac_classification_29', 'hrac_classification_30', 'hrac_classification_33', 'indication_refs', 'indication_refs_23', 'indication_refs_24', 'indication_refs_25', 'indication_refs_26', 'indication_refs_27', 'indication_refs_28', 'indication_refs_29', 'indication_refs_30', 'indication_refs_33', 'irac_classification', 'irac_classification_23', 'irac_classification_24', 'irac_classification_25', 'irac_classification_26', 'irac_classification_27', 'irac_classification_28', 'irac_classification_29', 'irac_classification_30', 'irac_classification_33', 'ligand_eff', 'ligand_eff_23', 'ligand_eff_24', 'ligand_eff_25', 'ligand_eff_26', 'ligand_eff_27', 'ligand_eff_28', 'ligand_eff_29', 'ligand_eff_30', 'ligand_eff_33', 'match_23', 'match_24', 'mechanism_refs', 'mechanism_refs_23', 'mechanism_refs_24', 'mechanism_refs_25', 'mechanism_refs_26', 'mechanism_refs_27', 'mechanism_refs_28', 'mechanism_refs_29', 'mechanism_refs_30', 'mechanism_refs_33', 'metabolism', 'metabolism_23', 'metabolism_24', 'metabolism_25', 'metabolism_26', 'metabolism_27', 'metabolism_28', 'metabolism_29', 'metabolism_30', 'metabolism_33', 'metabolism_refs', 'metabolism_refs_23', 'metabolism_refs_24', 'metabolism_refs_25', 'metabolism_refs_26', 'metabolism_refs_27', 'metabolism_refs_28', 'metabolism_refs_29', 'metabolism_refs_30', 'metabolism_refs_33', 'molecule_atc_classification', 'molecule_atc_classification_23', 'molecule_atc_classification_24', 'molecule_atc_classification_25', 'molecule_atc_classification_26', 'molecule_atc_classification_27', 'molecule_atc_classification_28', 'molecule_atc_classification_29', 'molecule_atc_classification_30', 'molecule_atc_classification_33', 'molecule_dictionary', 'molecule_dictionary_23', 'molecule_dictionary_24', 'molecule_dictionary_25', 'molecule_dictionary_26', 'molecule_dictionary_27', 'molecule_dictionary_28', 'molecule_dictionary_29', 'molecule_dictionary_30', 'molecule_dictionary_33', 'molecule_frac_classification', 'molecule_frac_classification_23', 'molecule_frac_classification_24', 'molecule_frac_classification_25', 'molecule_frac_classification_26', 'molecule_frac_classification_27', 'molecule_frac_classification_28', 'molecule_frac_classification_29', 'molecule_frac_classification_30', 'molecule_frac_classification_33', 'molecule_hierarchy', 'molecule_hierarchy_23', 'molecule_hierarchy_24', 'molecule_hierarchy_25', 'molecule_hierarchy_26', 'molecule_hierarchy_27', 'molecule_hierarchy_28', 'molecule_hierarchy_29', 'molecule_hierarchy_30', 'molecule_hierarchy_33', 'molecule_hrac_classification', 'molecule_hrac_classification_23', 'molecule_hrac_classification_24', 'molecule_hrac_classification_25', 'molecule_hrac_classification_26', 'molecule_hrac_classification_27', 'molecule_hrac_classification_28', 'molecule_hrac_classification_29', 'molecule_hrac_classification_30', 'molecule_hrac_classification_33', 'molecule_irac_classification', 'molecule_irac_classification_23', 'molecule_irac_classification_24', 'molecule_irac_classification_25', 'molecule_irac_classification_26', 'molecule_irac_classification_27', 'molecule_irac_classification_28', 'molecule_irac_classification_29', 'molecule_irac_classification_30', 'molecule_irac_classification_33', 'molecule_synonyms', 'molecule_synonyms_23', 'molecule_synonyms_24', 'molecule_synonyms_25', 'molecule_synonyms_26', 'molecule_synonyms_27', 'molecule_synonyms_28', 'molecule_synonyms_29', 'molecule_synonyms_30', 'molecule_synonyms_33', 'organism_class', 'organism_class_23', 'organism_class_24', 'organism_class_25', 'organism_class_26', 'organism_class_27', 'organism_class_28', 'organism_class_29', 'organism_class_30', 'organism_class_33', 'parameter_type_23', 'patent_use_codes', 'patent_use_codes_23', 'patent_use_codes_24', 'patent_use_codes_25', 'patent_use_codes_26', 'patent_use_codes_27', 'patent_use_codes_28', 'patent_use_codes_29', 'patent_use_codes_30', 'patent_use_codes_33', 'predicted_binding_domains', 'predicted_binding_domains_23', 'predicted_binding_domains_24', 'predicted_binding_domains_25', 'predicted_binding_domains_26', 'predicted_binding_domains_27', 'predicted_binding_domains_28', 'predicted_binding_domains_29', 'predicted_binding_domains_30', 'predicted_binding_domains_33', 'product_patents', 'product_patents_23', 'product_patents_24', 'product_patents_25', 'product_patents_26', 'product_patents_27', 'product_patents_28', 'product_patents_29', 'product_patents_30', 'product_patents_33', 'products', 'products_23', 'products_24', 'products_25', 'products_26', 'products_27', 'products_28', 'products_29', 'products_30', 'products_33', 'protein_class_synonyms', 'protein_class_synonyms_23', 'protein_class_synonyms_24', 'protein_class_synonyms_25', 'protein_class_synonyms_26', 'protein_class_synonyms_27', 'protein_class_synonyms_28', 'protein_class_synonyms_29', 'protein_class_synonyms_30', 'protein_class_synonyms_33', 'protein_classification', 'protein_classification_23', 'protein_classification_24', 'protein_classification_25', 'protein_classification_26', 'protein_classification_27', 'protein_classification_28', 'target_components_30', 'protein_classification_29', 'protein_classification_30', 'protein_classification_33', 'protein_family_classification', 'protein_family_classification_23', 'protein_family_classification_24', 'protein_family_classification_25', 'protein_family_classification_26', 'protein_family_classification_27', 'protein_family_classification_28', 'protein_family_classification_29', 'protein_family_classification_30', 'relationship_type', 'relationship_type_23', 'relationship_type_24', 'relationship_type_25', 'relationship_type_26', 'relationship_type_27', 'relationship_type_28', 'relationship_type_29', 'relationship_type_30', 'relationship_type_33', 'research_companies', 'research_companies_23', 'research_companies_24', 'research_companies_25', 'research_companies_26', 'research_companies_27', 'research_companies_28', 'research_companies_29', 'research_companies_30', 'research_companies_33', 'research_stem', 'research_stem_23', 'research_stem_24', 'research_stem_25', 'research_stem_26', 'research_stem_27', 'research_stem_28', 'research_stem_29', 'research_stem_30', 'research_stem_33', 'site_components', 'site_components_23', 'site_components_24', 'site_components_25', 'site_components_26', 'site_components_27', 'site_components_28', 'site_components_29', 'site_components_30', 'site_components_33', 'source', 'source_23', 'source_24', 'source_25', 'source_26', 'source_27', 'source_28', 'source_29', 'source_30', 'source_33', 'sqlite_stat1', 'sqlite_stat1_23', 'sqlite_stat1_24', 'sqlite_stat1_25', 'sqlite_stat1_26', 'sqlite_stat1_27', 'sqlite_stat1_28', 'sqlite_stat1_29', 'sqlite_stat1_33', 'structural_alert_sets', 'structural_alert_sets_23', 'structural_alert_sets_24', 'structural_alert_sets_25', 'structural_alert_sets_26', 'structural_alert_sets_27', 'structural_alert_sets_28', 'structural_alert_sets_29', 'structural_alert_sets_30', 'structural_alert_sets_33', 'structural_alerts', 'structural_alerts_23', 'structural_alerts_24', 'structural_alerts_25', 'structural_alerts_26', 'structural_alerts_27', 'structural_alerts_28', 'structural_alerts_29', 'structural_alerts_30', 'structural_alerts_33', 'target_components', 'target_components_23', 'target_components_24', 'target_components_25', 'target_components_26', 'target_components_27', 'target_components_28', 'target_components_29', 'target_components_33', 'target_dictionary', 'target_dictionary_23', 'target_dictionary_24', 'target_dictionary_25', 'target_dictionary_26', 'target_dictionary_27', 'target_dictionary_28', 'target_dictionary_29', 'target_dictionary_30', 'target_dictionary_33', 'target_relations', 'target_relations_23', 'target_relations_24', 'target_relations_25', 'target_relations_26', 'target_relations_27', 'target_relations_28', 'target_relations_29', 'target_relations_30', 'target_relations_33', 'target_type', 'target_type_23', 'target_type_24', 'target_type_25', 'target_type_26', 'target_type_27', 'target_type_28', 'target_type_29', 'target_type_30', 'target_type_33', 'tissue_dictionary', 'tissue_dictionary_23', 'tissue_dictionary_24', 'tissue_dictionary_25', 'tissue_dictionary_26', 'tissue_dictionary_27', 'tissue_dictionary_28', 'tissue_dictionary_29', 'tissue_dictionary_30', 'tissue_dictionary_33', 'usan_stems', 'usan_stems_23', 'usan_stems_24', 'usan_stems_25', 'usan_stems_26', 'usan_stems_27', 'usan_stems_28', 'usan_stems_29', 'usan_stems_30', 'usan_stems_33', 'variant_sequences', 'variant_sequences_23', 'variant_sequences_24', 'variant_sequences_25', 'variant_sequences_26', 'variant_sequences_27', 'variant_sequences_28', 'variant_sequences_29', 'variant_sequences_30', 'variant_sequences_33', 'version', 'version_23', 'version_24', 'version_25', 'version_26', 'version_27', 'version_28', 'version_29', 'version_30', 'version_33', 'warning_refs', 'warning_refs_28', 'warning_refs_29', 'warning_refs_30', 'warning_refs_33']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

1. **`activities` table:**
   - `activity_id`: Unique identifier for each activity. Needed for UUID generation.
   - `assay_id`: Identifier of the assay in which the activity was measured. Used to find activities in the same assay.
   - `molregno`: Molecule registration number. Links to molecule properties and structures.
   - `standard_type`: Type of the standard value measured. Ensure same standard type.
   - `standard_value`: The standardized activity value. Needed for change classification.
   - `standard_relation`: Relation operator (e.g., '=', '<', '>'). Used in change classification.
   - `pchembl_value`: pChEMBL value. We need activities with pChEMBL values over 10.
   - `doc_id`: Document ID associated with the activity. Used to get publication details.
   - `data_validity_comment`: To ensure standard values are valid (non-null).

2. **`assays` table:**
   - `assay_id`: Links with activities. Used to count activities per assay.

3. **`compound_properties` table:**
   - `molregno`: Links with activities.
   - `heavy_atoms`: Number of heavy atoms in the molecule. We need molecules with 10–15 heavy atoms.

4. **`compound_structures` table:**
   - `molregno`: Links with activities.
   - `canonical_smiles`: Used for UUID generation.

5. **`docs` table:**
   - `doc_id`: Links with activities.
   - `journal`: Used for publication date calculation.
   - `year`: Year of publication.
   - `first_page`: Used to order documents within the same journal and year.

**Conditions That May Be Used:**

- Heavy atom count between 10 and 15.
- Activities with fewer than 5 entries per assay.
- Activities with fewer than 2 duplicates (same molregno, assay_id, standard_value).
- Non-null `standard_value`.
- `pchembl_value` greater than 10.
- Pairs of different molecules (`molregno` is different).
- Tested in the same assay (`assay_id` is the same).
- Same `standard_type`.

---

**SQL Queries:**

1. **Retrieve activities with pChEMBL value over 10:**

   ```sql
   SELECT activity_id, molregno, assay_id, pchembl_value
   FROM `bigquery-public-data.ebi_chembl.activities`
   WHERE pchembl_value > 10
   LIMIT 100;
   ```

2. **Get molecules with heavy atom count between 10 and 15:**

   ```sql
   SELECT molregno, heavy_atoms
   FROM `bigquery-public-data.ebi_chembl.compound_properties`
   WHERE heavy_atoms BETWEEN 10 AND 15
   LIMIT 100;
   ```

3. **Find assays with fewer than 5 activities:**

   ```sql
   SELECT assay_id, COUNT(*) AS activity_count
   FROM `bigquery-public-data.ebi_chembl.activities`
   GROUP BY assay_id
   HAVING COUNT(*) < 5
   LIMIT 100;
   ```

4. **Select activities with non-null standard values:**

   ```sql
   SELECT activity_id, molregno, assay_id, standard_value
   FROM `bigquery-public-data.ebi_chembl.activities`
   WHERE standard_value IS NOT NULL
   LIMIT 100;
   ```

5. **Identify duplicate activities (same molregno, assay_id, standard_value):**

   ```sql
   SELECT molregno, assay_id, standard_value, COUNT(*) AS duplicate_count
   FROM `bigquery-public-data.ebi_chembl.activities`
   GROUP BY molregno, assay_id, standard_value
   HAVING COUNT(*) > 1
   LIMIT 100;
   ```

6. **Retrieve canonical SMILES for molecules:**

   ```sql
   SELECT molregno, canonical_smiles
   FROM `bigquery-public-data.ebi_chembl.compound_structures`
   LIMIT 100;
   ```

7. **Get activities along with their standard relations and values:**

   ```sql
   SELECT activity_id, molregno, standard_relation, standard_value
   FROM `bigquery-public-data.ebi_chembl.activities`
   LIMIT 100;
   ```

8. **Fetch documents with publication details for date calculation:**

   ```sql
   SELECT doc_id, journal, year, first_page
   FROM `bigquery-public-data.ebi_chembl.docs`
   WHERE year IS NOT NULL AND first_page IS NOT NULL
   LIMIT 100;
   ```

9. **Select activities for molecules with heavy atoms between 10 and 15 and pChEMBL over 10:**

   ```sql
   SELECT a.activity_id, a.molregno, a.assay_id, a.pchembl_value, cp.heavy_atoms
   FROM `bigquery-public-data.ebi_chembl.activities` AS a
   JOIN `bigquery-public-data.ebi_chembl.compound_properties` AS cp
     ON a.molregno = cp.molregno
   WHERE cp.heavy_atoms BETWEEN 10 AND 15
     AND a.pchembl_value > 10
   LIMIT 100;
   ```

10. **Find pairs of different molecules tested in the same assay and standard type:**

    ```sql
    SELECT DISTINCT
      a1.activity_id AS activity_id1,
      a2.activity_id AS activity_id2,
      a1.molregno AS molregno1,
      a2.molregno AS molregno2,
      a1.assay_id,
      a1.standard_type
    FROM `bigquery-public-data.ebi_chembl.activities` AS a1
    JOIN `bigquery-public-data.ebi_chembl.activities` AS a2
      ON a1.assay_id = a2.assay_id
      AND a1.standard_type = a2.standard_type
      AND a1.molregno < a2.molregno
    LIMIT 100;
    ```

These queries help in understanding the data required for the task by retrieving relevant records and inspecting the necessary columns across different tables.Query:
SELECT activity_id, molregno, assay_id, pchembl_value
FROM `bigquery-public-data.ebi_chembl.activities`
WHERE CAST(pchembl_value AS FLOAT64) > 10
LIMIT 100;
Answer:
activity_id,molregno,assay_id,pchembl_value
5202588,69834,717329,10.9
1613058,329934,320167,10.13
8059729,366521,806222,10.3
1151003,13104,54735,10.62
7853606,1251577,775934,10.2
2496950,364368,517306,10.18
3502945,707118,664979,10.5
24781862,2765084,2216667,10.1
6324610,1171649,763496,10.1
23306533,2561082,2133588,10.08
628386,190461,158035,10.1
626046,55023,158035,10.7
1798533,365146,422884,10.57
1415790,298977,304076,10.66
1415798,298977,313611,10.18
969348,550662,178932,10.22
7570623,13048,774355,10.12
24865289,2775830,2237569,10.83
18901602,2386997,1816919,10.52
18901410,2423947,1816917,10.4
18901544,2376245,1816918,10.52
18901091,2357554,1816913,10.52
18879667,2380611,1812155,10.8
148690,191810,140179,10.19
13860521,1610702,1281519,10.4
1074392,238251,143097,10.29
1711923,345594,352426,10.13
1493284,317915,303683,10.3
1063087,661796,138212,10.1
117176,121691,104539,11
1606641,328413,321001,10.33
1211126,226128,145346,10.28
716386,642681,47645,10.52
916950,39075,65652,10.7
932631,72548,146368,10.06
155352,254414,29122,10.03
2370135,442250,534712,10.96
2155087,83838,466620,10.15
2983915,579805,596273,10.59
1204367,1542055,146518,10.14
566560,151384,101923,11
915673,147835,33736,10.17
1185183,154668,143855,10.33
8041648,1279130,803919,10.04
178343,250697,157715,10.27
1707849,345215,347906,10.1
16258924,1980444,1534673,10.4
178119,236845,64004,10.68
12170921,1446610,883124,10.52
15617266,1947799,1498307,10.1
10978341,1356484,830845,10.7
15748008,1967900,1522885,10.52
17663834,1983438,1528909,10.55
Query:
SELECT molregno, heavy_atoms
FROM `bigquery-public-data.ebi_chembl.compound_properties`
WHERE SAFE_CAST(heavy_atoms AS INT64) BETWEEN 10 AND 15
LIMIT 100;
Answer:
molregno,heavy_atoms
182193,14
1160340,13
1294143,15
1674518,12
305967,15
483099,15
2426064,10
1294222,15
1940449,11
1314606,14
1619965,15
130320,14
171100,14
1287729,13
1301308,13
1322725,15
1494138,15
1672706,15
505881,15
2269258,14
1678124,14
377605,14
1674938,10
1819906,13
2474592,15
13570,15
481624,14
1303142,11
498105,11
1676200,15
2523647,14
323348,11
1160318,15
322485,12
1825886,14
1494407,15
323136,12
1160324,15
1296716,14
1489024,14
2377228,12
498190,14
2214081,12
1082102,13
1325750,13
832643,15
1102374,13
829811,14
361880,11
1160322,14
915804,10
1476836,14
1677187,12
13540,13
175105,15
446330,10
42652,12
1674960,15
305982,15
464938,14
1674198,13
2279427,15
1041793,15
322238,12
43292,12
204524,14
1287443,15
396902,12
1675866,10
896268,13
1160056,11
1486374,10
1678099,15
159518,12
573522,13
570639,10
929616,15
49260,13
2512512,14
744684,15
1822380,12
2208751,13
2125885,15
573523,14
374944,15
1120586,15
31838,14
1229486,15
2475010,15
1289563,13
1086009,15
405082,14
2231462,13
216001,15
272839,14
1739824,10
576108,14
1834170,13
1763714,14
1737325,15
Query:
SELECT molregno, heavy_atoms
FROM `bigquery-public-data.ebi_chembl.compound_properties`
WHERE SAFE_CAST(heavy_atoms AS INT64) BETWEEN 10 AND 15
LIMIT 100
Answer:
molregno,heavy_atoms
464937,14
483559,15
1671881,11
2538796,15
484507,10
1325560,14
175134,15
445046,15
1314442,12
114042,14
1286457,15
1475548,15
1673788,10
203507,14
1317298,15
2255490,14
2340700,15
1321417,12
1095259,12
2265549,14
999519,10
1674481,11
16594,10
651111,12
1091457,10
2226961,14
246601,13
483073,15
1754744,11
1829971,15
195884,14
439315,12
204484,14
1675790,11
322976,12
1592517,11
474440,15
1767940,10
1331133,13
13725,12
1294020,15
2170325,15
443892,14
1329911,14
1943708,15
2436703,15
67104,14
1318801,15
1750632,10
1331075,15
222789,14
462454,13
654929,12
1180717,15
1614916,15
1677750,10
502829,14
1329674,11
455882,13
1282647,15
1096271,14
9983,11
1083500,14
2346005,12
456874,14
32139,13
1346912,15
1346905,12
31696,15
2320588,14
2236016,15
1288873,15
1768034,15
1765179,15
1764496,15
1728952,10
1152980,13
869678,15
1766003,10
1355936,14
754196,15
1764720,15
1026296,14
544925,13
667497,13
667088,13
524512,14
1355935,15
1834182,14
2085206,13
35694,15
10413,14
2085207,15
2678627,15
59214,12
1916501,15
1677265,14
1304010,15
2413487,13
444999,12
Query:
SELECT assay_id, COUNT(*) AS activity_count
FROM `bigquery-public-data.ebi_chembl.activities`
GROUP BY assay_id
HAVING COUNT(*) < 5
LIMIT 100
Answer:
assay_id,activity_count
1837592,1
2047650,1
2114459,1
578720,1
1515666,1
2024382,3
2166111,4
607836,1
694323,2
1353952,4
833886,1
1545901,1
1615538,1
993192,1
1611934,1
976529,1
1713346,1
678410,1
1986226,2
2166112,4
2115546,1
1460393,1
1736718,1
756487,1
2034833,1
2205337,2
1919592,3
1650352,4
1481045,4
1823227,1
1442523,1
1780383,3
693697,1
1617480,2
224055,3
2071026,4
232348,1
1987529,1
819770,1
1927252,1
1518349,1
794482,4
1512802,1
753331,1
979571,2
1916612,1
1700479,1
1814575,1
2203140,4
672884,1
746132,3
748545,1
657036,1
671541,2
647930,2
683885,3
810266,1
992399,4
1281610,1
964460,1
1564199,1
800006,4
1276437,3
1497536,2
875057,1
1615087,4
878283,4
1590710,1
798060,1
1469228,1
1512271,1
1613510,1
831816,4
913788,1
1979675,1
2113072,1
1438401,1
874759,2
812539,1
985228,1
2015628,1
2247179,3
2123744,1
1652110,3
1910955,1
2083887,1
2108886,4
1878555,1
1475057,2
1510848,3
1540971,2
1790148,1
1738706,3
1793602,2
1656499,3
1284980,3
768674,4
894660,1
1853125,2
2028042,2
Query:
SELECT activity_id, molregno, assay_id, standard_value
FROM `bigquery-public-data.ebi_chembl.activities`
WHERE standard_value IS NOT NULL
LIMIT 100
Answer:
activity_id,molregno,assay_id,standard_value
18917068,277989,1822540,1.9
17968836,112090,1646511,21.7
1090569,90387,18149,4.81
331062,92730,224302,0.57
405828,258570,224520,353
498398,156747,69486,-44
1041960,7840,209764,45
103276,24000,209581,340
18507090,2293098,1755732,0.69
18786971,2316268,1799593,1.13
15235147,75901,1475457,2.73
18383394,2276566,1730884,0.34
18383513,2265861,1730895,0.24
18562978,2294941,1766797,1.94
23215414,2564639,2114481,0.97
18079642,2210656,1667385,0.54
18977836,2457794,1838363,0.2
18982762,2380147,1839188,0.05
24899574,5985,2246090,1.04
19008736,470511,1844641,0.35
22912342,2534898,2078731,1
18973892,2381467,1837577,0.6
18079695,2206917,1667412,0.49
18563013,2288266,1766787,0.43
18383671,2264310,1730909,0.17
82543,31974,63312,0.9
13979056,1612615,1301343,0.84
814656,72666,226560,0.54
2691834,561990,578719,10000
6351969,1174283,765160,-2.3
2705900,555595,580934,3.1
3002429,578943,595052,340
3060078,594486,603853,0.69
5114128,458557,697349,2
11010782,1365507,840412,4
13359415,1567287,967130,3.1
16740798,2158763,1615128,-0.1003
18309420,2277887,1716724,-1.615
18496063,182042,1753597,1
19006788,2375368,1844162,1.2
19128606,2401507,1873120,10
19359368,2350023,1919506,17.74
22485183,2531976,2034324,1.8
22791436,2487955,2054562,7.83
22848639,2521621,2067543,8.13
23261822,2208807,2123942,0.1
24746696,2750134,2206812,2.5
24812769,2755861,2223825,4
2629144,501242,523785,10
3484099,334337,669838,8
5130120,1058296,700231,3.87
6228795,419616,752189,2.1
Query:
SELECT molregno, assay_id, standard_value, COUNT(*) AS duplicate_count
FROM `bigquery-public-data.ebi_chembl.activities`
WHERE standard_value IS NOT NULL
GROUP BY molregno, assay_id, standard_value
HAVING COUNT(*) > 1
LIMIT 100;
Answer:
molregno,assay_id,standard_value,duplicate_count
365189,1640262,1.8,8
835863,1640263,1.2,14
29989,1640262,1.3,4
2468853,1640263,0.9,36
14440,1640263,1.9,6
88232,1640263,2.4,7
51056,1640263,1.3,7
579567,596087,1000,2
1291395,809262,501.19,2
1286951,809220,199.53,2
1293875,809128,63.1,2
466228,530772,100000,2
1724727,1331205,100000,4
2362758,1810109,100000,4
1828090,1461354,100000,2
1968051,1522993,10000,2
455652,496044,100000,2
455573,496043,100000,2
255904,545772,1900,2
1908725,1998107,100000,2
1177256,768623,100000,2
1732119,1339358,100000,2
2101116,1631563,100000,2
376679,432650,100000,2
376671,432618,100000,2
189045,140498,2.734,2
108367,232313,2.48,2
1294209,809349,100000,2
1316824,809349,100000,2
1290400,809428,100000,2
1296104,809062,100000,2
1293375,809393,100000,2
1288895,809370,100000,2
1304425,809018,100000,2
1299337,809101,100000,2
2394525,809370,100000,2
1340512,809351,100000,2
1296568,809035,100000,2
1323573,809316,100000,2
39709,809022,100000,2
82161,809099,100000,2
820907,809059,100000,2
1297236,809086,100000,3
705374,809308,100000,2
1287386,809062,100000,2
1316816,809057,100000,2
1220372,809014,100000,2
2280976,2069961,0,4
2215189,2069960,0,10
2509983,2069961,1,5
312618,2069964,0,9
437629,2069961,0,6
2103704,2069960,0,6
543658,2069960,0,8
Query:
SELECT molregno, canonical_smiles
FROM `bigquery-public-data.ebi_chembl.compound_structures`
LIMIT 100
Answer:
molregno,canonical_smiles
1822592,CCn1nccc1Oc1cc(CCCCOC)cnc1NC(=O)NC
128,O=c1oc2c(F)c(F)ccc2c2cc(O)c(O)cc12
6538,COc1c(C)cnc(C[S+]([O-])c2nc3ccccc3n2CCN2CCOCC2)c1C
9678,C/C=C(\NC(=O)C(CCC)CCC)C(=O)O
10298,CCNS(=O)(=O)c1ccc2c(c1)C(n1ccccc1=O)=CC(C)(C)O2
1833716,CCCCCCCCCCCCCCCC(=O)Oc1ccc(/C=C2\CCC/C(=C\c3ccc(OC(=O)CCCCCCCCCCCCCCC)c(OC)c3)C2=O)cc1OC
1834533,CNC(=O)[C@@]12C[C@@H]1[C@@H](n1cnc3c(NC)nc(C#Cc4ccsc4)nc31)[C@H](O)[C@@H]2O
1838408,CCOC(=O)c1ccc2cc(C(=O)/C=C/c3ccccc3)sc2c1
1840256,Fc1cccc(-n2cc(NCCN3CCOCC3)nn2)c1
24961,CC[C@@H](C)[C@@H](NC(=O)[C@@H](C)NC(=O)[C@@H](CCC(=O)O)NC(=O)[C@@H](CC(C)C)NC(=O)[C@@H](Cc1ccccc1)NC(=O)[C@H](N)CCSC)C(=O)N1CCC[C@H]1C(=O)N[C@@H](CCSC)C(=O)O
1861143,CCn1cc(Cl)c(C(=O)NCc2cnn(C)c2)n1
39040,CCc1cc(-c2cc(C(F)(F)F)nn2-c2ccc(S(N)(=O)=O)cc2)ccc1OC
42807,CC(=O)c1c(-c2ccc(Cl)cc2)c(-c2ccc(Cl)cc2)nn(CCCCCCN2C(=O)c3ccccc3C2=O)c1=O
1886886,CN1C(=O)CC(c2ccccc2)C12CCN(c1ncccn1)CC2
1892689,CCC(C)N(Cc1cccnc1)C(=O)c1ccc(OC)cc1O
64248,COc1ccc(S(=O)(=O)C(CCCCc2ccc3c(c2)OCO3)CC(=O)NO)cc1OC
68360,COc1cnc(C)c2[nH]c3ccccc3c12
1897419,COc1cccc(C2CCCN2C(=O)CC2=CSC3=NCCCN23)c1
77870,Cc1cc(C)c(C2=NOC(C(=O)Nc3ccc(-c4ccccc4S(N)(=O)=O)cc3)C2)cc1C
78299,c1ccc(Cn2cncc2CCNCC23CC(c4ccccc42)c2ccccc23)cc1
82695,O=C(COc1ccccc1)N(O)CCc1ccccc1
1909093,Cc1cc(C(=O)N2CCCC(n3cncn3)C2)c(C)n1CC1CC1
1910145,CC(=O)N1CCCC1C(=O)NCCOc1cc(C)cc(C)c1
1910181,Cc1nn(C)c(C)c1C1COCCN1C(=O)c1ccccc1
1938013,O[C@@H]1C[C@@](CNCc2ccc(F)cc2)(COc2cccnc2)C[C@@H]1O
1939614,O=C1C[C@@H]2[C@H](CCN2Cc2ccccn2)N1Cc1ccncc1
1941547,C[C@H]1CN([C@@H](C)CO)C(=O)c2c(c3ccccc3n2C)-c2ccccc2CO[C@@H]1CN(C)Cc1cccc2c1OCCCO2
1943401,O=C(C1CC1)N1CC(=O)N2[C@H](C1)[C@@H](c1ccc(C#CCc3ccccc3)cc1)[C@@H]2CO
104146,COc1cc(OC)nc(OC(C(=O)O)C(OC)(c2ccc(Cl)cc2)c2ccc(Cl)cc2)n1
111374,COc1nsnc1C1=C(C)CCN(C)C1
112108,Cc1ccc(O)c2[nH]c(-c3ccc(N(C)C)cc3)nc12
117277,O=C(O)CC/C=C/C(CS)CCCCC(=O)O
117301,CC(=O)/C=C/c1ccccc1
1964971,Cc1nn2c(-c3nc4cc(C)c(C)cc4[nH]3)c(-c3ccccc3)nc2s1
1974481,CNc1nc(Nc2ccc(C(=O)NC3CC3)cc2OC)ncc1Cl
123418,CCCCCCc1noc([C@H](CC)NC(=O)[C@H](Cc2ccc(OP(=O)(O)O)cc2)NC(C)=O)n1
139230,O=c1ccc2cc(CBr)ccc2o1
1981159,CC1(C)CCN(Cc2ccc3c(c2)C[C@H](NC(=O)c2ccc(OC[C@@H]4CCCO4)cc2)C3)CC1
1982654,CO[C@@H]1C[C@@H](C(C)C)N(c2nc3cc(-c4noc(=O)[nH]4)nc(-c4cncc(Cl)c4)c3n2C[C@H]2CC[C@H](C)CC2)C1
1998302,Cn1c2c(c3ccc(-n4ncc(OCc5ccc(C(F)(F)F)nc5)cc4=O)cc31)CCNCC2
2006372,CCNC1CCc2ccc(CCCNS(=O)(=O)CC3CC3)cc2C1Cc1ccccc1
167023,COc1cc(C(C)=O)ccc1OCCCN1CCC(C(c2ccc(F)cc2)C2CCCCC2)CC1
167283,COc1c(Br)c(C(=O)O)c(-c2c3c(c(OC)c(Br)c2C(=O)O)OCO3)c2c1OCO2
2016718,O=C(c1nn([C@H]2CCCN(CCN3CCOCC3)C2)c2c1CS(=O)(=O)c1c(F)cccc1-2)N1CCOCC1
170968,CCN(C)CC#CCCC(=O)C(O)(c1ccccc1)C1CCC1
180064,C=C[C@@]1(C)CCC2[C@@H](CC[C@@H]3[C@](C)(C(=O)O)CCC[C@@]23C)C1
2021633,Nc1cnc(-c2ccc(-c3ccccc3S(=O)(=O)N3CCN(C4CC4)CC3)cc2F)cn1
2025765,CC(C)(O)C#Cc1cc2c(cc1F)C1CC(C1)n1c-2nc(C(N)=O)c1-c1nc(C2CC2)no1
2026947,Cc1cccc(C)c1Nc1ccc(C(=O)NCCCCCCC(=O)NO)cc1
2036919,OC1CS[C@@H](n2cnc3c(NCc4cccc(F)c4)nc(Cl)nc32)[C@H]1O
196758,CCC(Cc1ccc(OC)c(C(=O)NCc2ccc(OCc3ccccc3)cc2)c1)C(=O)O
199883,CCCC[C@H](NC(=O)[C@H](CCC(=O)O)NC(=O)[C@H](CC(C)C)NC(=O)[C@@H](NC(=O)[C@H](CCC(=O)O)NC(=O)[C@H](CCCN=C(N)N)NC(=O)[C@H](CC(C)C)NC(=O)[C@H](CC(C)C)NC(=O)[C@H]1CCCCNC(=O)CC[C@@H](NC(=O)[C@@H](N)CC(=O)O)C(=O)N[C@H]([C@@H](C)O)C(=O)N[C@H](Cc2ccccc2)C(=O)N1)C(C)C)C(=O)N[C@@H](C)C(=O)N[C@@H](CCCN=C(N)N)C(=O)N[C@@H](C)C(=O)N[C@@H](CCC(=O)O)C(=O)N[C@@H](CCC(N)=O)C(=O)N[C@@H](CC(C)C)C(=O)N[C@@H](C)C(=O)N[C@@H](CCC(N)=O)C(=O)N[C@@H](CCC(N)=O)C(=O)N[C@@H](C)C(=O)N[C@@H](Cc1c[nH]cn1)C(=O)N[C@@H](CO)C(=O)N[C@@H](CC(N)=O)C(=O)N[C@@H](CCCN=C(N)N)C(=O)N[C@@H](CCCCN)C(=O)N[C@@H](CC(C)C)C(=O)N[C@@H](CCCC)C(=O)N[C@@H](CCC(=O)O)C(=O)N[C@H](C(=O)N[C@H](C(N)=O)[C@@H](C)CC)[C@@H](C)CC
Query:
SELECT activity_id, molregno, standard_relation, standard_value
FROM `bigquery-public-data.ebi_chembl.activities`
LIMIT 100
Answer:
activity_id,molregno,standard_relation,standard_value
400977,283276,=,2
794406,71172,,
1701575,343251,,
13396471,1573031,,
12637343,1514445,,
12158150,1439464,,
18504295,2295532,,
17976504,2207621,,
19435805,2347062,,
1806663,344830,,
2525916,519898,,
1438653,306007,=,207000
332642,279527,=,1400
18704824,2324239,,
15662164,44752,,
18086941,1442794,,
657519,62237,=,0.44
861547,270463,=,19.1
338886,92405,=,1.48
1157210,219000,=,5
1157203,218764,,
560071,188591,<,0.02
16790180,2106746,,
858689,53624,=,31
1066743,24135,=,2.7
1079735,24641,=,40
18383410,2263184,=,0.16
487542,230820,=,0.303
15250312,1844385,=,0.3
15250258,1844385,=,0.61
16599444,315023,=,1.056
15250247,1844385,=,1.09
15250272,1844385,=,0.67
15107936,1819359,=,0.33
18977791,2457794,=,0.42
18973907,2381467,=,0.8
18383306,2279019,=,0.24
18982714,2374995,=,0.5
18079815,2206917,=,0.19
22762152,1296181,=,0.92
18079637,2228187,=,0.43
18221676,436875,=,1.12
23215408,2543852,=,0.47
22912350,2505171,<,1
23215427,2564639,=,0.39
16878655,1449226,,
23277653,444971,=,0.81
18383580,2272237,=,0.41
18383415,2264310,=,0.26
23215373,2564639,=,0.58
Query:
SELECT doc_id, journal, year, first_page
FROM `bigquery-public-data.ebi_chembl.docs`
WHERE year IS NOT NULL AND first_page IS NOT NULL
LIMIT 100
Answer:
doc_id,journal,year,first_page
56167,,2008,161
100132,,2011,1899
100133,,2001,1924
100159,,2011,1899
100161,,2011,1899
98939,Gut,1996,63
64734,AIDS,2000,1287
64415,AIDS,2002,1743
64790,AIDS,2002,2295
64423,AIDS,2003,1092
64300,Cell,1994,491
64047,Gene,2000,117
64035,Blood,1992,1528
64507,Blood,2004,2940
64632,Blood,2004,3739
52618,Blood,2009,2984
52805,AAPS J,2006,E204
116897,Nature,2010,1067
116900,Nature,2010,1067
64403,Nature,1994,549
45680,Nature,2000,962
39334,Nature,2007,387
39355,Nature,2007,541
39458,Nature,2007,1091
38686,Nature,2007,959
39231,Nature,2007,817
39232,Nature,2007,864
39460,Nature,2007,87
39252,Nature,2007,775
39361,Nature,2007,952
38623,Nature,2007,1001
39445,Nature,2007,553
39462,Nature,2007,712
48285,Nature,2010,305
49166,Nature,2010,311
61375,Nature,2012,62
71005,Farmaco,2000,338
71007,Farmaco,2002,135
71013,Farmaco,2004,673
64591,Nat Med,1999,1048
116887,Sci Adv,2015,e1500723
116894,Sci Adv,2016,e1600760
91875,Sci Rep,2013,1
124727,Sci Rep,2019,13802
124758,Sci Rep,2021,12290
124759,Sci Rep,2021,1312
64822,Science,1995,866
46300,Science,1997,955
46301,Science,1998,533
46024,Science,2003,875
45681,Science,2005,223
46025,Science,2005,1318
35871,Science,2007,1759
35870,Science,2007,516
35884,Science,2007,236
35894,Science,2007,1390
46057,Science,2008,520
46073,Science,2008,259
46074,Science,2008,1078
46075,Science,2008,1493
46076,Science,2008,1673
46599,Science,2008,1392
52804,Science,2010,1175
57966,Science,2011,1372
64105,Genomics,1999,209
Query:
SELECT a.activity_id, a.molregno, a.assay_id, a.pchembl_value, cp.heavy_atoms
FROM `bigquery-public-data.ebi_chembl.activities` AS a
JOIN `bigquery-public-data.ebi_chembl.compound_properties` AS cp
  ON a.molregno = cp.molregno
WHERE SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
  AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
LIMIT 100
Answer:
activity_id,molregno,assay_id,pchembl_value,heavy_atoms
539387,222071,142899,10.44,15
385898,271730,158186,10.68,14
1074399,238953,143097,10.57,15
1807736,310308,424280,10.35,14
1214077,154061,143855,10.12,13
91850,154061,217460,10.6,13
1193141,154588,143855,10.18,13
1214075,154575,143855,10.24,13
1198202,155348,143855,10.6,14
1435444,305181,304960,10.1,13
13932454,1620794,1292393,10.1,14
13393223,1572658,972539,10.4,14
12092086,117779,860161,10.59,14
656094,86151,143717,10.74,14
499051,86151,32664,10.74,14
656096,86151,143720,10.24,14
714051,86151,223087,10.26,14
714050,86151,143865,10.24,14
1445340,86151,303413,11,14
16450928,86151,1552371,10.52,14
714052,86151,143862,10.59,14
1719941,86151,360240,10.74,14
1807730,86151,424280,10.7,14
1457094,310542,303639,10.3,14
2006402,86489,452154,10.59,14
721094,86489,223088,10.26,14
15760674,86489,1522503,10.37,14
1719927,86489,360240,10.59,14
1807729,86489,424280,10.72,14
17760201,86489,1641553,10.74,14
3193036,86489,615093,10.74,14
1493172,86489,303683,10.3,14
650003,86489,143720,10.35,14
15760696,86489,1522511,10.35,14
3193035,86489,615093,10.59,14
1445339,86489,303413,10.7,14
721093,86489,143870,10.35,14
650001,86489,143717,10.59,14
721095,86489,143871,10.74,14
1074392,238251,143097,10.29,15
1996735,404476,450798,10.4,15
1996736,404476,450798,10.4,15
1908973,386258,439959,10.33,14
1908974,386258,439959,10.33,14
Query:
SELECT DISTINCT
    a1.activity_id AS activity_id1,
    a2.activity_id AS activity_id2,
    a1.molregno AS molregno1,
    a2.molregno AS molregno2,
    a1.assay_id,
    a1.standard_type
  FROM `bigquery-public-data.ebi_chembl.activities` AS a1
  JOIN `bigquery-public-data.ebi_chembl.activities` AS a2
    ON a1.assay_id = a2.assay_id
    AND a1.standard_type = a2.standard_type
    AND SAFE_CAST(a1.molregno AS INT64) < SAFE_CAST(a2.molregno AS INT64)
  LIMIT 100
Answer:
400 Query exceeded resource limits. This query used 1183056 CPU seconds but would charge only 689M Analysis bytes. This exceeds the ratio supported by the on-demand pricing model. Please consider moving this workload to a capacity-based pricing model, which does not have this limit. 1183056 CPU seconds were used, and this query must use less than 176300 CPU seconds.; reason: billingTierLimitExceeded, message: Query exceeded resource limits. This query used 1183056 CPU seconds but would charge only 689M Analysis bytes. This exceeds the ratio supported by the on-demand pricing model. Please consider moving this workload to a capacity-based pricing model, which does not have this limit. 1183056 CPU seconds were used, and this query must use less than 176300 CPU seconds.

Location: US
Job ID: 6b39730e-1c94-4eaa-92b8-6ca806ba7b71
Query:
-- Step 1: Filter activities based on the criteria
WITH filtered_activities AS (
  SELECT
    a.activity_id,
    a.molregno,
    a.assay_id,
    a.standard_type,
    a.standard_value,
    a.standard_relation,
    SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
    SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
    a.doc_id
  FROM
    `bigquery-public-data.ebi_chembl.activities` AS a
  JOIN
    `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
  WHERE
    SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
    AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
    AND a.standard_value IS NOT NULL
    AND a.standard_relation IS NOT NULL
),

-- Step 2: Identify assays with fewer than 5 activities
assays_with_few_activities AS (
  SELECT
    assay_id,
    COUNT(DISTINCT activity_id) AS activity_count
  FROM
    filtered_activities
  GROUP BY
    assay_id
  HAVING
    activity_count < 5
),

-- Step 3: Identify activities with fewer than 2 duplicates
activities_no_duplicates AS (
  SELECT
    fa.*
  FROM
    filtered_activities AS fa
  LEFT JOIN (
    SELECT
      molregno,
      assay_id,
      standard_value,
      COUNT(*) AS duplicate_count
    FROM
      filtered_activities
    GROUP BY
      molregno, assay_id, standard_value
    HAVING
      COUNT(*) >= 2
  ) AS duplicates
  ON
    fa.molregno = duplicates.molregno
    AND fa.assay_id = duplicates.assay_id
    AND fa.standard_value = duplicates.standard_value
  WHERE
    duplicates.molregno IS NULL
),

-- Step 4: Final filtered activities
final_activities AS (
  SELECT
    fa.*
  FROM
    activities_no_duplicates AS fa
  WHERE
    fa.assay_id IN (SELECT assay_id FROM assays_with_few_activities)
)

-- Step 5: Perform the self-join on the filtered dataset
SELECT DISTINCT
  fa1.activity_id AS activity_id1,
  fa2.activity_id AS activity_id2,
  fa1.molregno AS molregno1,
  fa2.molregno AS molregno2,
  fa1.assay_id,
  fa1.standard_type,
  GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
  -- Determine the highest doc_id
  GREATEST(SAFE_CAST(fa1.doc_id AS INT64), SAFE_CAST(fa2.doc_id AS INT64)) AS Highest_doc_id,
  -- Placeholder for Latest_publication_date
  NULL AS Latest_publication_date,
  -- Classify the change in standard values
  CASE
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) > SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'decrease'
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) < SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'increase'
    ELSE 'no-change'
  END AS Change_classification,
  -- Generate UUID from activity IDs and canonical SMILES
  TO_HEX(MD5(TO_JSON_STRING(ARRAY[fa1.activity_id, fa2.activity_id, cs1.canonical_smiles, cs2.canonical_smiles]))) AS UUID
FROM
  final_activities AS fa1
JOIN
  final_activities AS fa2
  ON fa1.assay_id = fa2.assay_id
     AND fa1.standard_type = fa2.standard_type
     AND fa1.molregno < fa2.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs1
  ON fa1.molregno = cs1.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs2
  ON fa2.molregno = cs2.molregno
LIMIT 100;
Answer:
activity_id1,activity_id2,molregno1,molregno2,assay_id,standard_type,Max_heavy_atom_count,Highest_doc_id,Latest_publication_date,Change_classification,UUID
656096,663566,86151,86293,143720,Ki,14,16005,,decrease,35b8609eed0da7276b8982e71467310a
1457094,1456969,310542,675,303639,Ki,14,20296,,decrease,456199e9309a556bf345b1273b00d01d
720091,718999,86241,86293,143226,Ki,14,6774,,increase,73a1842773e52a58ca231d12280b87a6
720091,731742,86241,86522,143226,Ki,14,6774,,increase,935fd1954f2ab8d8758f85043ef8f966
656096,650003,86151,86489,143720,Ki,14,16005,,decrease,d8c2ad831df25f16bed75d75f203357c
2583809,2583811,453196,453262,558025,Ki,15,44880,,decrease,482bab88d5d0bb22aec8a1063e0293ae
717769,720091,675,86241,143226,Ki,14,6774,,increase,c59d7e7696093722e3881230c7025247
18424477,18424471,115,386251,1738898,Ki,14,107379,,decrease,acca6f24fcd56a1a5938d3a5d82100d3
300841,294285,83069,93801,143227,Ki,12,6768,,increase,cfeed16930771e2843c563c1e35564e3
1457092,1456970,310535,675,303641,Ki,14,20296,,increase,39cce3baee78aa146345124812255c30
2380588,2380594,517080,517081,492915,Ki,14,45856,,increase,bbcdd6fc6e50d23f7ef3181acb3c8c5c
1807734,1807730,549532,86151,424280,Ki,14,34886,,decrease,c47f53632ea04f0676a60b53cb3c6cde
717773,720095,675,86241,143854,Ki,14,6774,,decrease,20534252756e9a19d0f09c0094dab2f7
1435444,1435450,305181,305210,304960,IC50,13,20675,,decrease,ceab416eeeeeba9820fc0252efdf2ea3
1807734,1807729,549532,86489,424280,Ki,14,34886,,decrease,a6aa98172ff61a2ade565bcd0f434a2d
1719941,1719927,86151,86489,360240,Ki,14,31223,,increase,a9b6ffec4caa58020dff9033e70ea973
15631653,15631654,1948992,1948993,1501472,IC50,15,92644,,no-change,85f26084404c8e3b51d3d146de13e1cd
End Exploring Related Columns
Task: Find pairs of different molecules tested in the same assay and standard type, where both have 10–15 heavy atoms, fewer than 5 activities in that assay, fewer than 2 duplicate activities, non-null standard values, and pChEMBL values over 10. For each pair, report the maximum heavy atom count, the latest publication date (calculated based on the document's rank within the same journal and year, and map it to a synthetic month and day), the highest document ID, classify the change in standard values as 'increase', 'decrease', or 'no-change' based on their values and relations, and generate UUIDs from their activity IDs and canonical SMILES.

Please answer only one complete SQL in bigquery dialect in ```sql``` format.
Usage example: ```sql
SELECT `column_name` FROM `database.schema.table` WHERE ... ``` (Replace `database`, `schema`, and `table` with actual names. Enclose column names and table identifiers with backticks.)
Follow the answer format like: ```csv
Max_heavy_atom_count,Latest_publication_date,Highest_doc_id,Change_classification,UUID
count:int between 10 and 15,date:YYYY-MM-DD,id:int >0,classification:str (increase/decrease/no-change),uuid:str
count:int between 10 and 15,date:YYYY-MM-DD,id:int >0,classification:str (increase/decrease/no-change),uuid:str
...
```

This table displays pairs of different molecules that were tested in the same assay and standard type, meeting the specified criteria:

- **Max_heavy_atom_count**: The maximum number of heavy atoms (non-hydrogen atoms) in the pair of molecules, ranging between 10 and 15.
- **Latest_publication_date**: The latest publication date among the documents associated with the molecules, calculated based on the method described for assigning synthetic months and days.
- **Highest_doc_id**: The highest document ID among the documents associated with the molecules.
- **Change_classification**: Indicates whether the standard value between the two molecules has increased, decreased, or stayed the same ('increase', 'decrease', or 'no-change') based on their values and relations.
- **UUID**: A unique identifier generated from the activity IDs and canonical SMILES of the molecule pair.

Each row represents a pair of molecules satisfying all the conditions specified in the task..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'bigquery-public-data': {'ebi_chembl': ['action_type', 'action_type_23', 'action_type_24', 'action_type_25', 'action_type_26', 'action_type_27', 'action_type_28', 'action_type_29', 'action_type_30', 'action_type_33', 'activities', 'activities_23', 'activities_24', 'activities_25', 'activities_26', 'activities_27', 'activities_28', 'activities_29', 'activities_30', 'activities_33', 'activity_properties', 'activity_properties_24', 'activity_properties_25', 'activity_properties_26', 'activity_properties_27', 'activity_properties_28', 'activity_properties_29', 'activity_properties_30', 'activity_properties_33', 'activity_smid', 'activity_smid_24', 'activity_smid_25', 'activity_smid_26', 'activity_smid_27', 'activity_smid_28', 'activity_smid_29', 'activity_smid_30', 'activity_smid_33', 'activity_stds_lookup', 'activity_stds_lookup_23', 'activity_stds_lookup_24', 'activity_stds_lookup_25', 'activity_stds_lookup_26', 'activity_stds_lookup_27', 'activity_stds_lookup_28', 'activity_stds_lookup_29', 'activity_stds_lookup_30', 'activity_stds_lookup_33', 'activity_supp', 'activity_supp_24', 'activity_supp_25', 'activity_supp_26', 'activity_supp_27', 'activity_supp_28', 'activity_supp_29', 'activity_supp_30', 'activity_supp_33', 'activity_supp_map', 'activity_supp_map_24', 'activity_supp_map_25', 'activity_supp_map_26', 'activity_supp_map_27', 'activity_supp_map_28', 'activity_supp_map_29', 'activity_supp_map_30', 'activity_supp_map_33', 'assay_class_map', 'assay_class_map_25', 'assay_class_map_26', 'assay_class_map_27', 'assay_class_map_28', 'assay_class_map_29', 'assay_class_map_30', 'assay_class_map_33', 'assay_classification', 'assay_classification_25', 'assay_classification_26', 'assay_classification_27', 'assay_classification_28', 'assay_classification_29', 'assay_classification_30', 'assay_classification_33', 'assay_parameters', 'assay_parameters_23', 'assay_parameters_24', 'assay_parameters_25', 'assay_parameters_26', 'assay_parameters_27', 'assay_parameters_28', 'assay_parameters_29', 'assay_parameters_30', 'assay_parameters_33', 'assay_type', 'assay_type_23', 'assay_type_24', 'assay_type_25', 'assay_type_26', 'assay_type_27', 'assay_type_28', 'assay_type_29', 'assay_type_30', 'assay_type_33', 'assays', 'assays_23', 'assays_24', 'assays_25', 'assays_26', 'assays_27', 'assays_28', 'assays_29', 'assays_30', 'assays_33', 'atc_classification', 'atc_classification_23', 'atc_classification_24', 'atc_classification_25', 'atc_classification_26', 'atc_classification_27', 'atc_classification_28', 'atc_classification_29', 'atc_classification_30', 'atc_classification_33', 'binding_sites', 'binding_sites_23', 'binding_sites_24', 'binding_sites_25', 'binding_sites_26', 'binding_sites_27', 'binding_sites_28', 'binding_sites_29', 'binding_sites_30', 'binding_sites_33', 'bio_component_sequences', 'bio_component_sequences_23', 'bio_component_sequences_24', 'bio_component_sequences_25', 'bio_component_sequences_26', 'bio_component_sequences_27', 'bio_component_sequences_28', 'bio_component_sequences_29', 'bio_component_sequences_30', 'bio_component_sequences_33', 'bioassay_ontology', 'bioassay_ontology_23', 'bioassay_ontology_24', 'bioassay_ontology_25', 'bioassay_ontology_26', 'bioassay_ontology_27', 'bioassay_ontology_28', 'bioassay_ontology_29', 'bioassay_ontology_30', 'bioassay_ontology_33', 'biotherapeutic_components', 'biotherapeutic_components_23', 'biotherapeutic_components_24', 'biotherapeutic_components_25', 'biotherapeutic_components_26', 'biotherapeutic_components_27', 'biotherapeutic_components_28', 'biotherapeutic_components_29', 'biotherapeutic_components_30', 'biotherapeutic_components_33', 'biotherapeutics', 'biotherapeutics_23', 'biotherapeutics_24', 'biotherapeutics_25', 'biotherapeutics_26', 'biotherapeutics_27', 'biotherapeutics_28', 'biotherapeutics_29', 'biotherapeutics_30', 'biotherapeutics_33', 'cell_dictionary', 'cell_dictionary_23', 'cell_dictionary_24', 'cell_dictionary_25', 'cell_dictionary_26', 'cell_dictionary_27', 'cell_dictionary_28', 'cell_dictionary_29', 'cell_dictionary_30', 'cell_dictionary_33', 'chembl_id_lookup', 'chembl_id_lookup_23', 'chembl_id_lookup_24', 'chembl_id_lookup_25', 'chembl_id_lookup_26', 'chembl_id_lookup_27', 'chembl_id_lookup_28', 'chembl_id_lookup_29', 'chembl_id_lookup_30', 'chembl_id_lookup_33', 'chembl_release', 'chembl_release_33', 'component_class', 'component_class_23', 'component_class_24', 'component_class_25', 'component_class_26', 'component_class_27', 'component_class_28', 'component_class_29', 'component_class_30', 'component_class_33', 'component_domains', 'component_domains_23', 'component_domains_24', 'component_domains_25', 'component_domains_26', 'component_domains_27', 'component_domains_28', 'component_domains_29', 'component_domains_30', 'component_domains_33', 'component_go', 'component_go_23', 'component_go_24', 'component_go_25', 'component_go_26', 'component_go_27', 'component_go_28', 'component_go_29', 'component_go_30', 'component_go_33', 'component_sequences', 'component_sequences_23', 'component_sequences_24', 'component_sequences_25', 'component_sequences_26', 'component_sequences_27', 'component_sequences_28', 'component_sequences_29', 'component_sequences_30', 'component_sequences_33', 'component_synonyms', 'component_synonyms_23', 'component_synonyms_24', 'component_synonyms_25', 'component_synonyms_26', 'component_synonyms_27', 'component_synonyms_28', 'component_synonyms_29', 'component_synonyms_30', 'component_synonyms_33', 'compound_properties', 'compound_properties_23', 'compound_properties_24', 'compound_properties_25', 'compound_properties_26', 'compound_properties_27', 'compound_properties_28', 'compound_properties_29', 'compound_properties_30', 'compound_properties_33', 'compound_records', 'compound_records_23', 'compound_records_24', 'compound_records_25', 'compound_records_26', 'compound_records_27', 'compound_records_28', 'compound_records_29', 'compound_records_30', 'compound_records_33', 'compound_structural_alerts', 'compound_structural_alerts_23', 'compound_structural_alerts_24', 'compound_structural_alerts_25', 'compound_structural_alerts_26', 'compound_structural_alerts_27', 'compound_structural_alerts_28', 'compound_structural_alerts_29', 'compound_structural_alerts_30', 'compound_structural_alerts_33', 'compound_structures', 'compound_structures_23', 'compound_structures_24', 'compound_structures_25', 'compound_structures_26', 'compound_structures_27', 'compound_structures_28', 'compound_structures_29', 'compound_structures_30', 'compound_structures_33', 'confidence_score_lookup', 'confidence_score_lookup_23', 'confidence_score_lookup_24', 'confidence_score_lookup_25', 'confidence_score_lookup_26', 'confidence_score_lookup_27', 'confidence_score_lookup_28', 'confidence_score_lookup_29', 'confidence_score_lookup_30', 'confidence_score_lookup_33', 'curation_lookup', 'curation_lookup_23', 'curation_lookup_24', 'curation_lookup_25', 'curation_lookup_26', 'curation_lookup_27', 'curation_lookup_28', 'curation_lookup_29', 'curation_lookup_30', 'curation_lookup_33', 'data_validity_lookup', 'data_validity_lookup_23', 'data_validity_lookup_24', 'data_validity_lookup_25', 'data_validity_lookup_26', 'data_validity_lookup_27', 'data_validity_lookup_28', 'data_validity_lookup_29', 'data_validity_lookup_30', 'data_validity_lookup_33', 'defined_daily_dose', 'defined_daily_dose_23', 'defined_daily_dose_24', 'defined_daily_dose_25', 'defined_daily_dose_26', 'defined_daily_dose_27', 'defined_daily_dose_28', 'defined_daily_dose_29', 'defined_daily_dose_30', 'defined_daily_dose_33', 'docs', 'docs_23', 'docs_24', 'docs_25', 'docs_26', 'docs_27', 'docs_28', 'docs_29', 'docs_30', 'docs_33', 'domains', 'domains_23', 'domains_24', 'domains_25', 'domains_26', 'domains_27', 'domains_28', 'domains_29', 'domains_30', 'domains_33', 'drug_indication', 'drug_indication_23', 'drug_indication_24', 'drug_indication_25', 'drug_indication_26', 'drug_indication_27', 'drug_indication_28', 'drug_indication_29', 'drug_indication_30', 'drug_indication_33', 'drug_mechanism', 'drug_mechanism_23', 'drug_mechanism_24', 'drug_mechanism_25', 'drug_mechanism_26', 'drug_mechanism_27', 'drug_mechanism_28', 'drug_mechanism_29', 'drug_mechanism_30', 'drug_mechanism_33', 'drug_warning', 'drug_warning_28', 'drug_warning_29', 'drug_warning_30', 'drug_warning_33', 'formulations', 'formulations_23', 'formulations_24', 'formulations_25', 'formulations_26', 'formulations_27', 'formulations_28', 'formulations_29', 'formulations_30', 'formulations_33', 'frac_classification', 'frac_classification_23', 'frac_classification_24', 'frac_classification_25', 'frac_classification_26', 'frac_classification_27', 'frac_classification_28', 'frac_classification_29', 'frac_classification_30', 'frac_classification_33', 'go_classification', 'go_classification_23', 'go_classification_24', 'go_classification_25', 'go_classification_26', 'go_classification_27', 'go_classification_28', 'go_classification_29', 'go_classification_30', 'go_classification_33', 'hrac_classification', 'hrac_classification_23', 'hrac_classification_24', 'hrac_classification_25', 'hrac_classification_26', 'hrac_classification_27', 'hrac_classification_28', 'hrac_classification_29', 'hrac_classification_30', 'hrac_classification_33', 'indication_refs', 'indication_refs_23', 'indication_refs_24', 'indication_refs_25', 'indication_refs_26', 'indication_refs_27', 'indication_refs_28', 'indication_refs_29', 'indication_refs_30', 'indication_refs_33', 'irac_classification', 'irac_classification_23', 'irac_classification_24', 'irac_classification_25', 'irac_classification_26', 'irac_classification_27', 'irac_classification_28', 'irac_classification_29', 'irac_classification_30', 'irac_classification_33', 'ligand_eff', 'ligand_eff_23', 'ligand_eff_24', 'ligand_eff_25', 'ligand_eff_26', 'ligand_eff_27', 'ligand_eff_28', 'ligand_eff_29', 'ligand_eff_30', 'ligand_eff_33', 'match_23', 'match_24', 'mechanism_refs', 'mechanism_refs_23', 'mechanism_refs_24', 'mechanism_refs_25', 'mechanism_refs_26', 'mechanism_refs_27', 'mechanism_refs_28', 'mechanism_refs_29', 'mechanism_refs_30', 'mechanism_refs_33', 'metabolism', 'metabolism_23', 'metabolism_24', 'metabolism_25', 'metabolism_26', 'metabolism_27', 'metabolism_28', 'metabolism_29', 'metabolism_30', 'metabolism_33', 'metabolism_refs', 'metabolism_refs_23', 'metabolism_refs_24', 'metabolism_refs_25', 'metabolism_refs_26', 'metabolism_refs_27', 'metabolism_refs_28', 'metabolism_refs_29', 'metabolism_refs_30', 'metabolism_refs_33', 'molecule_atc_classification', 'molecule_atc_classification_23', 'molecule_atc_classification_24', 'molecule_atc_classification_25', 'molecule_atc_classification_26', 'molecule_atc_classification_27', 'molecule_atc_classification_28', 'molecule_atc_classification_29', 'molecule_atc_classification_30', 'molecule_atc_classification_33', 'molecule_dictionary', 'molecule_dictionary_23', 'molecule_dictionary_24', 'molecule_dictionary_25', 'molecule_dictionary_26', 'molecule_dictionary_27', 'molecule_dictionary_28', 'molecule_dictionary_29', 'molecule_dictionary_30', 'molecule_dictionary_33', 'molecule_frac_classification', 'molecule_frac_classification_23', 'molecule_frac_classification_24', 'molecule_frac_classification_25', 'molecule_frac_classification_26', 'molecule_frac_classification_27', 'molecule_frac_classification_28', 'molecule_frac_classification_29', 'molecule_frac_classification_30', 'molecule_frac_classification_33', 'molecule_hierarchy', 'molecule_hierarchy_23', 'molecule_hierarchy_24', 'molecule_hierarchy_25', 'molecule_hierarchy_26', 'molecule_hierarchy_27', 'molecule_hierarchy_28', 'molecule_hierarchy_29', 'molecule_hierarchy_30', 'molecule_hierarchy_33', 'molecule_hrac_classification', 'molecule_hrac_classification_23', 'molecule_hrac_classification_24', 'molecule_hrac_classification_25', 'molecule_hrac_classification_26', 'molecule_hrac_classification_27', 'molecule_hrac_classification_28', 'molecule_hrac_classification_29', 'molecule_hrac_classification_30', 'molecule_hrac_classification_33', 'molecule_irac_classification', 'molecule_irac_classification_23', 'molecule_irac_classification_24', 'molecule_irac_classification_25', 'molecule_irac_classification_26', 'molecule_irac_classification_27', 'molecule_irac_classification_28', 'molecule_irac_classification_29', 'molecule_irac_classification_30', 'molecule_irac_classification_33', 'molecule_synonyms', 'molecule_synonyms_23', 'molecule_synonyms_24', 'molecule_synonyms_25', 'molecule_synonyms_26', 'molecule_synonyms_27', 'molecule_synonyms_28', 'molecule_synonyms_29', 'molecule_synonyms_30', 'molecule_synonyms_33', 'organism_class', 'organism_class_23', 'organism_class_24', 'organism_class_25', 'organism_class_26', 'organism_class_27', 'organism_class_28', 'organism_class_29', 'organism_class_30', 'organism_class_33', 'parameter_type_23', 'patent_use_codes', 'patent_use_codes_23', 'patent_use_codes_24', 'patent_use_codes_25', 'patent_use_codes_26', 'patent_use_codes_27', 'patent_use_codes_28', 'patent_use_codes_29', 'patent_use_codes_30', 'patent_use_codes_33', 'predicted_binding_domains', 'predicted_binding_domains_23', 'predicted_binding_domains_24', 'predicted_binding_domains_25', 'predicted_binding_domains_26', 'predicted_binding_domains_27', 'predicted_binding_domains_28', 'predicted_binding_domains_29', 'predicted_binding_domains_30', 'predicted_binding_domains_33', 'product_patents', 'product_patents_23', 'product_patents_24', 'product_patents_25', 'product_patents_26', 'product_patents_27', 'product_patents_28', 'product_patents_29', 'product_patents_30', 'product_patents_33', 'products', 'products_23', 'products_24', 'products_25', 'products_26', 'products_27', 'products_28', 'products_29', 'products_30', 'products_33', 'protein_class_synonyms', 'protein_class_synonyms_23', 'protein_class_synonyms_24', 'protein_class_synonyms_25', 'protein_class_synonyms_26', 'protein_class_synonyms_27', 'protein_class_synonyms_28', 'protein_class_synonyms_29', 'protein_class_synonyms_30', 'protein_class_synonyms_33', 'protein_classification', 'protein_classification_23', 'protein_classification_24', 'protein_classification_25', 'protein_classification_26', 'protein_classification_27', 'protein_classification_28', 'target_components_30', 'protein_classification_29', 'protein_classification_30', 'protein_classification_33', 'protein_family_classification', 'protein_family_classification_23', 'protein_family_classification_24', 'protein_family_classification_25', 'protein_family_classification_26', 'protein_family_classification_27', 'protein_family_classification_28', 'protein_family_classification_29', 'protein_family_classification_30', 'relationship_type', 'relationship_type_23', 'relationship_type_24', 'relationship_type_25', 'relationship_type_26', 'relationship_type_27', 'relationship_type_28', 'relationship_type_29', 'relationship_type_30', 'relationship_type_33', 'research_companies', 'research_companies_23', 'research_companies_24', 'research_companies_25', 'research_companies_26', 'research_companies_27', 'research_companies_28', 'research_companies_29', 'research_companies_30', 'research_companies_33', 'research_stem', 'research_stem_23', 'research_stem_24', 'research_stem_25', 'research_stem_26', 'research_stem_27', 'research_stem_28', 'research_stem_29', 'research_stem_30', 'research_stem_33', 'site_components', 'site_components_23', 'site_components_24', 'site_components_25', 'site_components_26', 'site_components_27', 'site_components_28', 'site_components_29', 'site_components_30', 'site_components_33', 'source', 'source_23', 'source_24', 'source_25', 'source_26', 'source_27', 'source_28', 'source_29', 'source_30', 'source_33', 'sqlite_stat1', 'sqlite_stat1_23', 'sqlite_stat1_24', 'sqlite_stat1_25', 'sqlite_stat1_26', 'sqlite_stat1_27', 'sqlite_stat1_28', 'sqlite_stat1_29', 'sqlite_stat1_33', 'structural_alert_sets', 'structural_alert_sets_23', 'structural_alert_sets_24', 'structural_alert_sets_25', 'structural_alert_sets_26', 'structural_alert_sets_27', 'structural_alert_sets_28', 'structural_alert_sets_29', 'structural_alert_sets_30', 'structural_alert_sets_33', 'structural_alerts', 'structural_alerts_23', 'structural_alerts_24', 'structural_alerts_25', 'structural_alerts_26', 'structural_alerts_27', 'structural_alerts_28', 'structural_alerts_29', 'structural_alerts_30', 'structural_alerts_33', 'target_components', 'target_components_23', 'target_components_24', 'target_components_25', 'target_components_26', 'target_components_27', 'target_components_28', 'target_components_29', 'target_components_33', 'target_dictionary', 'target_dictionary_23', 'target_dictionary_24', 'target_dictionary_25', 'target_dictionary_26', 'target_dictionary_27', 'target_dictionary_28', 'target_dictionary_29', 'target_dictionary_30', 'target_dictionary_33', 'target_relations', 'target_relations_23', 'target_relations_24', 'target_relations_25', 'target_relations_26', 'target_relations_27', 'target_relations_28', 'target_relations_29', 'target_relations_30', 'target_relations_33', 'target_type', 'target_type_23', 'target_type_24', 'target_type_25', 'target_type_26', 'target_type_27', 'target_type_28', 'target_type_29', 'target_type_30', 'target_type_33', 'tissue_dictionary', 'tissue_dictionary_23', 'tissue_dictionary_24', 'tissue_dictionary_25', 'tissue_dictionary_26', 'tissue_dictionary_27', 'tissue_dictionary_28', 'tissue_dictionary_29', 'tissue_dictionary_30', 'tissue_dictionary_33', 'usan_stems', 'usan_stems_23', 'usan_stems_24', 'usan_stems_25', 'usan_stems_26', 'usan_stems_27', 'usan_stems_28', 'usan_stems_29', 'usan_stems_30', 'usan_stems_33', 'variant_sequences', 'variant_sequences_23', 'variant_sequences_24', 'variant_sequences_25', 'variant_sequences_26', 'variant_sequences_27', 'variant_sequences_28', 'variant_sequences_29', 'variant_sequences_30', 'variant_sequences_33', 'version', 'version_23', 'version_24', 'version_25', 'version_26', 'version_27', 'version_28', 'version_29', 'version_30', 'version_33', 'warning_refs', 'warning_refs_28', 'warning_refs_29', 'warning_refs_30', 'warning_refs_33']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-26 16:41:14 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:41:14 - root - INFO - ```sql
WITH
  filtered_activities AS (
    SELECT
      a.activity_id,
      a.molregno,
      a.assay_id,
      a.standard_type,
      a.standard_value,
      a.standard_relation,
      SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
      SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
      a.standard_units,
      a.doc_id
    FROM
      `bigquery-public-data.ebi_chembl.activities` AS a
    INNER JOIN
      `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
    WHERE
      SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
      AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
      AND a.standard_value IS NOT NULL
      AND a.standard_relation IS NOT NULL
  ),
  assays_with_few_activities AS (
    SELECT
      assay_id,
      COUNT(DISTINCT activity_id) AS activity_count
    FROM
      filtered_activities
    GROUP BY
      assay_id
    HAVING
      activity_count < 5
  ),
  activities_no_duplicates AS (
    SELECT
      fa.*
    FROM
      filtered_activities AS fa
    LEFT JOIN (
      SELECT
        molregno,
        assay_id,
        standard_value,
        COUNT(*) AS duplicate_count
      FROM
        filtered_activities
      GROUP BY
        molregno, assay_id, standard_value
      HAVING
        COUNT(*) >= 2
    ) AS duplicates
    ON
      fa.molregno = duplicates.molregno
      AND fa.assay_id = duplicates.assay_id
      AND fa.standard_value = duplicates.standard_value
    WHERE
      duplicates.molregno IS NULL
  ),
  final_activities AS (
    SELECT
      fa.*
    FROM
      activities_no_duplicates AS fa
    WHERE
      fa.assay_id IN (SELECT assay_id FROM assays_with_few_activities)
  ),
  docs_with_pub_dates AS (
    SELECT
      doc_id,
      DATE(pub_year, month, day) AS publication_date
    FROM
      (
        SELECT
          doc_id,
          pub_year,
          percent_rank,
          -- Compute Month
          IFNULL(FLOOR(percent_rank * 11) + 1, 1) AS month,
          -- Compute Day
          IFNULL(
            MOD(FLOOR(percent_rank * 308), 28) + 1, 1
          ) AS day
        FROM (
          SELECT
            d.doc_id,
            IFNULL(SAFE_CAST(d.year AS INT64), 1970) AS pub_year,
            SAFE_DIVIDE(
              SAFE_CAST(
                RANK() OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64) ORDER BY SAFE_CAST(d.first_page AS INT64)) - 1 AS FLOAT64
              ),
              NULLIF(COUNT(*) OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64)) -1, 0)
            ) AS percent_rank
          FROM
            `bigquery-public-data.ebi_chembl.docs` AS d
          WHERE
            d.doc_id IS NOT NULL
            AND SAFE_CAST(d.first_page AS INT64) IS NOT NULL
            AND d.journal IS NOT NULL
            AND d.year IS NOT NULL
        )
      )
  )
SELECT DISTINCT
  GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
  COALESCE(
    CAST(GREATEST(fa1_pub.publication_date, fa2_pub.publication_date) AS STRING),
    CAST(fa1_pub.publication_date AS STRING),
    CAST(fa2_pub.publication_date AS STRING),
    '1970-01-01') AS Latest_publication_date,
  GREATEST(SAFE_CAST(fa1.doc_id AS INT64), SAFE_CAST(fa2.doc_id AS INT64)) AS Highest_doc_id,
  CASE
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) > SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'decrease'
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) < SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'increase'
    ELSE 'no-change'
  END AS Change_classification,
  TO_HEX(MD5(TO_JSON_STRING(STRUCT(fa1.activity_id, fa2.activity_id, cs1.canonical_smiles, cs2.canonical_smiles)))) AS UUID
FROM
  final_activities AS fa1
JOIN
  final_activities AS fa2
  ON fa1.assay_id = fa2.assay_id
     AND fa1.standard_type = fa2.standard_type
     AND fa1.molregno < fa2.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs1
  ON fa1.molregno = cs1.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs2
  ON fa2.molregno = cs2.molregno
LEFT JOIN
  docs_with_pub_dates AS fa1_pub
  ON fa1.doc_id = fa1_pub.doc_id
LEFT JOIN
  docs_with_pub_dates AS fa2_pub
  ON fa2.doc_id = fa2_pub.doc_id
LIMIT 100;
```
2025-01-26 16:41:15 - root - INFO - itercount: 1
2025-01-26 16:41:15 - root - INFO - 400 No matching signature for function MOD
  Argument types: FLOAT64, INT64
  Signature: MOD(INT64, INT64)
    Argument 1: Unable to coerce type FLOAT64 to expected type INT64
  Signature: MOD(NUMERIC, NUMERIC)
    Argument 1: Unable to coerce type FLOAT64 to expected type NUMERIC
  Signature: MOD(BIGNUMERIC, BIGNUMERIC)
    Argument 1: Unable to coerce type FLOAT64 to expected type BIGNUMERIC at [83:13]; reason: invalidQuery, location: query, message: No matching signature for function MOD
  Argument types: FLOAT64, INT64
  Signature: MOD(INT64, INT64)
    Argument 1: Unable to coerce type FLOAT64 to expected type INT64
  Signature: MOD(NUMERIC, NUMERIC)
    Argument 1: Unable to coerce type FLOAT64 to expected type NUMERIC
  Signature: MOD(BIGNUMERIC, BIGNUMERIC)
    Argument 1: Unable to coerce type FLOAT64 to expected type BIGNUMERIC at [83:13]

Location: US
Job ID: f23b4f7c-3d0f-4587-ba92-868d8a46df67

2025-01-26 16:41:15 - root - INFO - Input sql:
WITH
  filtered_activities AS (
    SELECT
      a.activity_id,
      a.molregno,
      a.assay_id,
      a.standard_type,
      a.standard_value,
      a.standard_relation,
      SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
      SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
      a.standard_units,
      a.doc_id
    FROM
      `bigquery-public-data.ebi_chembl.activities` AS a
    INNER JOIN
      `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
    WHERE
      SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
      AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
      AND a.standard_value IS NOT NULL
      AND a.standard_relation IS NOT NULL
  ),
  assays_with_few_activities AS (
    SELECT
      assay_id,
      COUNT(DISTINCT activity_id) AS activity_count
    FROM
      filtered_activities
    GROUP BY
      assay_id
    HAVING
      activity_count < 5
  ),
  activities_no_duplicates AS (
    SELECT
      fa.*
    FROM
      filtered_activities AS fa
    LEFT JOIN (
      SELECT
        molregno,
        assay_id,
        standard_value,
        COUNT(*) AS duplicate_count
      FROM
        filtered_activities
      GROUP BY
        molregno, assay_id, standard_value
      HAVING
        COUNT(*) >= 2
    ) AS duplicates
    ON
      fa.molregno = duplicates.molregno
      AND fa.assay_id = duplicates.assay_id
      AND fa.standard_value = duplicates.standard_value
    WHERE
      duplicates.molregno IS NULL
  ),
  final_activities AS (
    SELECT
      fa.*
    FROM
      activities_no_duplicates AS fa
    WHERE
      fa.assay_id IN (SELECT assay_id FROM assays_with_few_activities)
  ),
  docs_with_pub_dates AS (
    SELECT
      doc_id,
      DATE(pub_year, month, day) AS publication_date
    FROM
      (
        SELECT
          doc_id,
          pub_year,
          percent_rank,
          -- Compute Month
          IFNULL(FLOOR(percent_rank * 11) + 1, 1) AS month,
          -- Compute Day
          IFNULL(
            MOD(FLOOR(percent_rank * 308), 28) + 1, 1
          ) AS day
        FROM (
          SELECT
            d.doc_id,
            IFNULL(SAFE_CAST(d.year AS INT64), 1970) AS pub_year,
            SAFE_DIVIDE(
              SAFE_CAST(
                RANK() OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64) ORDER BY SAFE_CAST(d.first_page AS INT64)) - 1 AS FLOAT64
              ),
              NULLIF(COUNT(*) OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64)) -1, 0)
            ) AS percent_rank
          FROM
            `bigquery-public-data.ebi_chembl.docs` AS d
          WHERE
            d.doc_id IS NOT NULL
            AND SAFE_CAST(d.first_page AS INT64) IS NOT NULL
            AND d.journal IS NOT NULL
            AND d.year IS NOT NULL
        )
      )
  )
SELECT DISTINCT
  GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
  COALESCE(
    CAST(GREATEST(fa1_pub.publication_date, fa2_pub.publication_date) AS STRING),
    CAST(fa1_pub.publication_date AS STRING),
    CAST(fa2_pub.publication_date AS STRING),
    '1970-01-01') AS Latest_publication_date,
  GREATEST(SAFE_CAST(fa1.doc_id AS INT64), SAFE_CAST(fa2.doc_id AS INT64)) AS Highest_doc_id,
  CASE
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) > SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'decrease'
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) < SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'increase'
    ELSE 'no-change'
  END AS Change_classification,
  TO_HEX(MD5(TO_JSON_STRING(STRUCT(fa1.activity_id, fa2.activity_id, cs1.canonical_smiles, cs2.canonical_smiles)))) AS UUID
FROM
  final_activities AS fa1
JOIN
  final_activities AS fa2
  ON fa1.assay_id = fa2.assay_id
     AND fa1.standard_type = fa2.standard_type
     AND fa1.molregno < fa2.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs1
  ON fa1.molregno = cs1.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs2
  ON fa2.molregno = cs2.molregno
LEFT JOIN
  docs_with_pub_dates AS fa1_pub
  ON fa1.doc_id = fa1_pub.doc_id
LEFT JOIN
  docs_with_pub_dates AS fa2_pub
  ON fa2.doc_id = fa2_pub.doc_id
LIMIT 100;
The error information is:
400 No matching signature for function MOD
  Argument types: FLOAT64, INT64
  Signature: MOD(INT64, INT64)
    Argument 1: Unable to coerce type FLOAT64 to expected type INT64
  Signature: MOD(NUMERIC, NUMERIC)
    Argument 1: Unable to coerce type FLOAT64 to expected type NUMERIC
  Signature: MOD(BIGNUMERIC, BIGNUMERIC)
    Argument 1: Unable to coerce type FLOAT64 to expected type BIGNUMERIC at [83:13]; reason: invalidQuery, location: query, message: No matching signature for function MOD
  Argument types: FLOAT64, INT64
  Signature: MOD(INT64, INT64)
    Argument 1: Unable to coerce type FLOAT64 to expected type INT64
  Signature: MOD(NUMERIC, NUMERIC)
    Argument 1: Unable to coerce type FLOAT64 to expected type NUMERIC
  Signature: MOD(BIGNUMERIC, BIGNUMERIC)
    Argument 1: Unable to coerce type FLOAT64 to expected type BIGNUMERIC at [83:13]

Location: US
Job ID: f23b4f7c-3d0f-4587-ba92-868d8a46df67

Please correct it and output only 1 complete SQL query.
2025-01-26 16:41:40 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:41:40 - root - INFO - ```sql
WITH
  filtered_activities AS (
    SELECT
      a.activity_id,
      a.molregno,
      a.assay_id,
      a.standard_type,
      a.standard_value,
      a.standard_relation,
      SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
      SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
      a.standard_units,
      a.doc_id
    FROM
      `bigquery-public-data.ebi_chembl.activities` AS a
    INNER JOIN
      `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
    WHERE
      SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
      AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
      AND a.standard_value IS NOT NULL
      AND a.standard_relation IS NOT NULL
  ),
  assays_with_few_activities AS (
    SELECT
      assay_id,
      COUNT(DISTINCT activity_id) AS activity_count
    FROM
      filtered_activities
    GROUP BY
      assay_id
    HAVING
      activity_count < 5
  ),
  activities_no_duplicates AS (
    SELECT
      fa.*
    FROM
      filtered_activities AS fa
    LEFT JOIN (
      SELECT
        molregno,
        assay_id,
        standard_value,
        COUNT(*) AS duplicate_count
      FROM
        filtered_activities
      GROUP BY
        molregno, assay_id, standard_value
      HAVING
        COUNT(*) >= 2
    ) AS duplicates
    ON
      fa.molregno = duplicates.molregno
      AND fa.assay_id = duplicates.assay_id
      AND fa.standard_value = duplicates.standard_value
    WHERE
      duplicates.molregno IS NULL
  ),
  final_activities AS (
    SELECT
      fa.*
    FROM
      activities_no_duplicates AS fa
    WHERE
      fa.assay_id IN (SELECT assay_id FROM assays_with_few_activities)
  ),
  docs_with_pub_dates AS (
    SELECT
      doc_id,
      DATE(pub_year, month, day) AS publication_date
    FROM
      (
        SELECT
          doc_id,
          pub_year,
          percent_rank,
          -- Compute Month
          IFNULL(FLOOR(percent_rank * 11) + 1, 1) AS month,
          -- Compute Day
          IFNULL(
            MOD(CAST(FLOOR(percent_rank * 308) AS INT64), 28) + 1,
            1
          ) AS day
        FROM (
          SELECT
            d.doc_id,
            IFNULL(SAFE_CAST(d.year AS INT64), 1970) AS pub_year,
            SAFE_DIVIDE(
              SAFE_CAST(
                RANK() OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64) ORDER BY SAFE_CAST(d.first_page AS INT64)) - 1 AS FLOAT64
              ),
              NULLIF(COUNT(*) OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64)) -1, 0)
            ) AS percent_rank
          FROM
            `bigquery-public-data.ebi_chembl.docs` AS d
          WHERE
            d.doc_id IS NOT NULL
            AND SAFE_CAST(d.first_page AS INT64) IS NOT NULL
            AND d.journal IS NOT NULL
            AND d.year IS NOT NULL
        )
      )
  )
SELECT DISTINCT
  GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
  COALESCE(
    CAST(GREATEST(fa1_pub.publication_date, fa2_pub.publication_date) AS STRING),
    CAST(fa1_pub.publication_date AS STRING),
    CAST(fa2_pub.publication_date AS STRING),
    '1970-01-01') AS Latest_publication_date,
  GREATEST(SAFE_CAST(fa1.doc_id AS INT64), SAFE_CAST(fa2.doc_id AS INT64)) AS Highest_doc_id,
  CASE
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) > SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'decrease'
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) < SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'increase'
    ELSE 'no-change'
  END AS Change_classification,
  TO_HEX(MD5(TO_JSON_STRING(STRUCT(fa1.activity_id, fa2.activity_id, cs1.canonical_smiles, cs2.canonical_smiles)))) AS UUID
FROM
  final_activities AS fa1
JOIN
  final_activities AS fa2
  ON fa1.assay_id = fa2.assay_id
     AND fa1.standard_type = fa2.standard_type
     AND fa1.molregno < fa2.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs1
  ON fa1.molregno = cs1.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs2
  ON fa2.molregno = cs2.molregno
LEFT JOIN
  docs_with_pub_dates AS fa1_pub
  ON fa1.doc_id = fa1_pub.doc_id
LEFT JOIN
  docs_with_pub_dates AS fa2_pub
  ON fa2.doc_id = fa2_pub.doc_id
LIMIT 100;
```
2025-01-26 16:41:41 - root - INFO - itercount: 2
2025-01-26 16:41:41 - root - INFO - 400 No matching signature for function DATE
  Argument types: INT64, FLOAT64, INT64
  Signature: DATE(TIMESTAMP, [STRING])
    Signature accepts at most 2 arguments, found 3 arguments
  Signature: DATE(DATETIME)
    Signature accepts at most 1 argument, found 3 arguments
  Signature: DATE(INT64, INT64, INT64)
    Argument 2: Unable to coerce type FLOAT64 to expected type INT64
  Signature: DATE(DATE)
    Signature accepts at most 1 argument, found 3 arguments
  Signature: DATE(STRING)
    Signature accepts at most 1 argument, found 3 arguments at [72:7]; reason: invalidQuery, location: query, message: No matching signature for function DATE
  Argument types: INT64, FLOAT64, INT64
  Signature: DATE(TIMESTAMP, [STRING])
    Signature accepts at most 2 arguments, found 3 arguments
  Signature: DATE(DATETIME)
    Signature accepts at most 1 argument, found 3 arguments
  Signature: DATE(INT64, INT64, INT64)
    Argument 2: Unable to coerce type FLOAT64 to expected type INT64
  Signature: DATE(DATE)
    Signature accepts at most 1 argument, found 3 arguments
  Signature: DATE(STRING)
    Signature accepts at most 1 argument, found 3 arguments at [72:7]

Location: US
Job ID: f6c5d315-c0fe-464d-befa-4e6de7c5e6d7

2025-01-26 16:41:41 - root - INFO - Input sql:
WITH
  filtered_activities AS (
    SELECT
      a.activity_id,
      a.molregno,
      a.assay_id,
      a.standard_type,
      a.standard_value,
      a.standard_relation,
      SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
      SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
      a.standard_units,
      a.doc_id
    FROM
      `bigquery-public-data.ebi_chembl.activities` AS a
    INNER JOIN
      `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
    WHERE
      SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
      AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
      AND a.standard_value IS NOT NULL
      AND a.standard_relation IS NOT NULL
  ),
  assays_with_few_activities AS (
    SELECT
      assay_id,
      COUNT(DISTINCT activity_id) AS activity_count
    FROM
      filtered_activities
    GROUP BY
      assay_id
    HAVING
      activity_count < 5
  ),
  activities_no_duplicates AS (
    SELECT
      fa.*
    FROM
      filtered_activities AS fa
    LEFT JOIN (
      SELECT
        molregno,
        assay_id,
        standard_value,
        COUNT(*) AS duplicate_count
      FROM
        filtered_activities
      GROUP BY
        molregno, assay_id, standard_value
      HAVING
        COUNT(*) >= 2
    ) AS duplicates
    ON
      fa.molregno = duplicates.molregno
      AND fa.assay_id = duplicates.assay_id
      AND fa.standard_value = duplicates.standard_value
    WHERE
      duplicates.molregno IS NULL
  ),
  final_activities AS (
    SELECT
      fa.*
    FROM
      activities_no_duplicates AS fa
    WHERE
      fa.assay_id IN (SELECT assay_id FROM assays_with_few_activities)
  ),
  docs_with_pub_dates AS (
    SELECT
      doc_id,
      DATE(pub_year, month, day) AS publication_date
    FROM
      (
        SELECT
          doc_id,
          pub_year,
          percent_rank,
          -- Compute Month
          IFNULL(FLOOR(percent_rank * 11) + 1, 1) AS month,
          -- Compute Day
          IFNULL(
            MOD(CAST(FLOOR(percent_rank * 308) AS INT64), 28) + 1,
            1
          ) AS day
        FROM (
          SELECT
            d.doc_id,
            IFNULL(SAFE_CAST(d.year AS INT64), 1970) AS pub_year,
            SAFE_DIVIDE(
              SAFE_CAST(
                RANK() OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64) ORDER BY SAFE_CAST(d.first_page AS INT64)) - 1 AS FLOAT64
              ),
              NULLIF(COUNT(*) OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64)) -1, 0)
            ) AS percent_rank
          FROM
            `bigquery-public-data.ebi_chembl.docs` AS d
          WHERE
            d.doc_id IS NOT NULL
            AND SAFE_CAST(d.first_page AS INT64) IS NOT NULL
            AND d.journal IS NOT NULL
            AND d.year IS NOT NULL
        )
      )
  )
SELECT DISTINCT
  GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
  COALESCE(
    CAST(GREATEST(fa1_pub.publication_date, fa2_pub.publication_date) AS STRING),
    CAST(fa1_pub.publication_date AS STRING),
    CAST(fa2_pub.publication_date AS STRING),
    '1970-01-01') AS Latest_publication_date,
  GREATEST(SAFE_CAST(fa1.doc_id AS INT64), SAFE_CAST(fa2.doc_id AS INT64)) AS Highest_doc_id,
  CASE
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) > SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'decrease'
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) < SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'increase'
    ELSE 'no-change'
  END AS Change_classification,
  TO_HEX(MD5(TO_JSON_STRING(STRUCT(fa1.activity_id, fa2.activity_id, cs1.canonical_smiles, cs2.canonical_smiles)))) AS UUID
FROM
  final_activities AS fa1
JOIN
  final_activities AS fa2
  ON fa1.assay_id = fa2.assay_id
     AND fa1.standard_type = fa2.standard_type
     AND fa1.molregno < fa2.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs1
  ON fa1.molregno = cs1.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs2
  ON fa2.molregno = cs2.molregno
LEFT JOIN
  docs_with_pub_dates AS fa1_pub
  ON fa1.doc_id = fa1_pub.doc_id
LEFT JOIN
  docs_with_pub_dates AS fa2_pub
  ON fa2.doc_id = fa2_pub.doc_id
LIMIT 100;
The error information is:
400 No matching signature for function DATE
  Argument types: INT64, FLOAT64, INT64
  Signature: DATE(TIMESTAMP, [STRING])
    Signature accepts at most 2 arguments, found 3 arguments
  Signature: DATE(DATETIME)
    Signature accepts at most 1 argument, found 3 arguments
  Signature: DATE(INT64, INT64, INT64)
    Argument 2: Unable to coerce type FLOAT64 to expected type INT64
  Signature: DATE(DATE)
    Signature accepts at most 1 argument, found 3 arguments
  Signature: DATE(STRING)
    Signature accepts at most 1 argument, found 3 arguments at [72:7]; reason: invalidQuery, location: query, message: No matching signature for function DATE
  Argument types: INT64, FLOAT64, INT64
  Signature: DATE(TIMESTAMP, [STRING])
    Signature accepts at most 2 arguments, found 3 arguments
  Signature: DATE(DATETIME)
    Signature accepts at most 1 argument, found 3 arguments
  Signature: DATE(INT64, INT64, INT64)
    Argument 2: Unable to coerce type FLOAT64 to expected type INT64
  Signature: DATE(DATE)
    Signature accepts at most 1 argument, found 3 arguments
  Signature: DATE(STRING)
    Signature accepts at most 1 argument, found 3 arguments at [72:7]

Location: US
Job ID: f6c5d315-c0fe-464d-befa-4e6de7c5e6d7

Please correct it and output only 1 complete SQL query.
2025-01-26 16:42:14 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:42:14 - root - INFO - ```sql
WITH
  filtered_activities AS (
    SELECT
      a.activity_id,
      a.molregno,
      a.assay_id,
      a.standard_type,
      a.standard_value,
      a.standard_relation,
      SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
      SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
      a.standard_units,
      a.doc_id
    FROM
      `bigquery-public-data.ebi_chembl.activities` AS a
    INNER JOIN
      `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
    WHERE
      SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
      AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
      AND a.standard_value IS NOT NULL
      AND a.standard_relation IS NOT NULL
  ),
  assays_with_few_activities AS (
    SELECT
      assay_id,
      COUNT(DISTINCT activity_id) AS activity_count
    FROM
      filtered_activities
    GROUP BY
      assay_id
    HAVING
      activity_count < 5
  ),
  activities_no_duplicates AS (
    SELECT
      fa.*
    FROM
      filtered_activities AS fa
    LEFT JOIN (
      SELECT
        molregno,
        assay_id,
        standard_value,
        COUNT(*) AS duplicate_count
      FROM
        filtered_activities
      GROUP BY
        molregno, assay_id, standard_value
      HAVING
        COUNT(*) >= 2
    ) AS duplicates
    ON
      fa.molregno = duplicates.molregno
      AND fa.assay_id = duplicates.assay_id
      AND fa.standard_value = duplicates.standard_value
    WHERE
      duplicates.molregno IS NULL
  ),
  final_activities AS (
    SELECT
      fa.*
    FROM
      activities_no_duplicates AS fa
    WHERE
      fa.assay_id IN (SELECT assay_id FROM assays_with_few_activities)
  ),
  docs_with_pub_dates AS (
    SELECT
      doc_id,
      DATE(pub_year, month, day) AS publication_date
    FROM
      (
        SELECT
          doc_id,
          pub_year,
          percent_rank,
          -- Compute Month
          IFNULL(CAST(FLOOR(percent_rank * 11) + 1 AS INT64), 1) AS month,
          -- Compute Day
          IFNULL(
            CAST(MOD(CAST(FLOOR(percent_rank * 308) AS INT64), 28) + 1 AS INT64),
            1
          ) AS day
        FROM (
          SELECT
            d.doc_id,
            IFNULL(SAFE_CAST(d.year AS INT64), 1970) AS pub_year,
            SAFE_DIVIDE(
              SAFE_CAST(
                RANK() OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64) ORDER BY SAFE_CAST(d.first_page AS INT64)) - 1 AS FLOAT64
              ),
              NULLIF(COUNT(*) OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64)) -1, 0)
            ) AS percent_rank
          FROM
            `bigquery-public-data.ebi_chembl.docs` AS d
          WHERE
            d.doc_id IS NOT NULL
            AND SAFE_CAST(d.first_page AS INT64) IS NOT NULL
            AND d.journal IS NOT NULL
            AND d.year IS NOT NULL
        )
      )
  )
SELECT DISTINCT
  GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
  COALESCE(
    CAST(GREATEST(fa1_pub.publication_date, fa2_pub.publication_date) AS STRING),
    CAST(fa1_pub.publication_date AS STRING),
    CAST(fa2_pub.publication_date AS STRING),
    '1970-01-01') AS Latest_publication_date,
  GREATEST(SAFE_CAST(fa1.doc_id AS INT64), SAFE_CAST(fa2.doc_id AS INT64)) AS Highest_doc_id,
  CASE
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) > SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'decrease'
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) < SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'increase'
    ELSE 'no-change'
  END AS Change_classification,
  TO_HEX(MD5(TO_JSON_STRING(STRUCT(fa1.activity_id, fa2.activity_id, cs1.canonical_smiles, cs2.canonical_smiles)))) AS UUID
FROM
  final_activities AS fa1
JOIN
  final_activities AS fa2
  ON fa1.assay_id = fa2.assay_id
     AND fa1.standard_type = fa2.standard_type
     AND fa1.molregno < fa2.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs1
  ON fa1.molregno = cs1.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs2
  ON fa2.molregno = cs2.molregno
LEFT JOIN
  docs_with_pub_dates AS fa1_pub
  ON fa1.doc_id = fa1_pub.doc_id
LEFT JOIN
  docs_with_pub_dates AS fa2_pub
  ON fa2.doc_id = fa2_pub.doc_id
LIMIT 100;
```
2025-01-26 16:42:17 - root - INFO - itercount: 3
2025-01-26 16:42:17 - root - INFO - 0
2025-01-26 16:42:17 - root - INFO - results: 
Max_heavy_atom_count,Latest_publication_date,Highest_doc_id,Change_classification,UUID
14,2005-01-15,20675,increase,9f06fed7ee9b62dd5f56469dc83fbf51
12,1996-02-23,13791,increase,a0b0c58e71f7142ec6f6d27c843c67c3
14,2013-09-05,77288,decrease,1e1f10fd3b7ca09817fca841ef00f4bb
14,2001-05-24,16005,decrease,0fdf0ad8c0d902579118a7ca552a3624
14,2008-11-07,44880,decrease,6631b1c9b78de0d4e3de19cb9c7630c8
15,2005-03-12,20800,decrease,2f4954bb84a38e827e7726474dcef055
14,2004-04-15,6774,decrease,4236d6038a7586485b6e1036c6b924d2
14,2008-01-19,38939,decrease,eb07112d3e7fd5c9e9b6315044026987
14,2004-11-08,20296,decrease,ba6c83ef98a9e2dc955af70a13266d98
14,2004-11-08,20296,increase,514079940691e18cad4633f12c1136f0
14,2004-11-08,20296,increase,f643479b64d733b2635928dbd032df48
13,1998-01-24,14797,increase,34e20d45beb5fd8683eb3f6f83615df1
14,2006-10-14,34886,decrease,62ca43843d9a54379bf9d8d01418d809
15,2009-06-24,46997,decrease,ea8a753517d504a1f5d9294d47d9acb2
13,1998-01-24,14797,decrease,1c7b0293f51d2df38a1f25bdc6d180af
13,2005-01-15,20675,decrease,f75057e279bca40ce0c492f168ac4700
14,2004-04-15,6774,increase,1171f52306b64d323f2d6c563ceac46e
14,2004-04-15,6774,decrease,bd41aa59a9939c1160dfab9db5af1535
14,2001-10-13,16211,increase,d9bd3d7ef9b85526cd7d5777325cbc7d
14,2013-09-05,77288,increase,6ae459043a3341f5aaa721b2a5a67310
14,2006-10-14,34886,decrease,aa6e815bccdfccba115bfa1068ab29a3
15,2008-11-07,44880,decrease,31716844860f3c51da571022ec3b0ff8
14,2006-10-14,34886,decrease,35081b4f12a6d31e796afd2fa34036b0
14,2006-05-15,31223,increase,3efb3643ff89bb73378472d2a9df17d4
14,2001-05-24,16005,increase,42f80ec3e6e2232055efd98741767628
14,2013-09-05,77288,decrease,d213ae8b991a03e7a7dbd16b6cae72f4
14,2004-08-07,21068,no-change,c2ae25788562469227c8f644a4ba201a
14,2004-04-15,6774,increase,93e32506960103f50ad6385cd481aeda
14,2006-10-14,34886,decrease,966c9ed4eb467ef32fcb2b79456cf752
14,2004-04-15,6774,decrease,04f1c72d49e9d38fa1e85ae6afb70e5c
10,2013-09-05,77288,decrease,4c9442aa9927509df1893b44e1e4326d
15,2008-11-07,44880,decrease,ea4798a7a01dc83e4be512152dd603d8
14,2004-04-15,6774,increase,32474e345cbd795f212944c61a9a6cce
14,2008-11-05,45856,increase,eb403b09812e7782616eb32fa36c2d93
14,2004-04-15,6774,increase,9149cf05cb875015b12931285331f94e
14,2004-04-13,6768,increase,111cbb38c2b3a086592367d32ce7ec20
15,2002-02-26,16851,increase,f52ae78d9f0b60d0e39bde063a3486bd
14,2004-04-13,6768,decrease,64881abcbbd305a1bf72d26b453dc8bc
13,2018-06-21,107379,decrease,1023d5ab695dbbfccf6aa6a7577f0a47
14,2009-03-19,46138,decrease,732fb4dc14940dffad6ccfa654dce4ce
15,2008-11-07,44880,decrease,492ca8c8a60bdfb6ff114fdc880948e7
14,2004-08-07,21068,increase,bb5c73c8f2e7a754bd9ced949c6f0907
13,2002-06-10,16492,decrease,834e0b8817876901bac7976cf4009682
13,2004-05-02,17518,decrease,f0e95b86bbceff7f17e60dd42e4d9958
14,2008-01-19,38939,decrease,30e6dd00aab53dd0b7d150e79f43f656
14,2018-06-21,107379,decrease,58e37542216d2535f3ba743992e12d76
14,2001-05-24,16005,decrease,d1e38187141722ca0663beab5fa9647b
14,2004-04-15,6774,increase,44ac02f3fe32f39a2ff70cc7ee41aee0
14,2008-01-19,38939,increase,57278a23f08189e953738f662d22cab3
14,2018-06-21,107379,decrease,89ecd929fa2bf839339c4ca0bc36cd1c
14,2004-08-07,21068,increase,68fc5d2af1c50a6b6c5b97278da89873
14,2004-04-15,6774,increase,8951fd0aeca30968187272ca13bcc9eb
14,2004-04-13,6768,increase,25200f9f187b8910d5144020805a7cfb
14,2004-04-15,6774,increase,48e8a47e4c2b531492912c1dd2f44d2d
14,2006-10-14,34886,decrease,118261d3986c180ac955457434f6242d
15,2013-07-22,74297,decrease,5ba21335e294fe2fc16b36105731cdf6
14,2004-04-15,6774,decrease,56e5a88bf84654270ca332c35cd8cd5a
14,2006-10-14,34886,decrease,29fdc4df43aa68fc5acc3165e0ff9baa
14,2001-10-13,16211,increase,1a4fa2c584f91e4e72beffb97946a51a
13,2005-01-15,20675,decrease,6a3406d94b6e91d256071ba5e48ec4dc
13,2005-01-15,20675,decrease,8a4c397f6752dd1a6a29fc15ebac3536
12,2004-04-13,6768,increase,556801271d73800c65ac16a892c059ba
14,2005-07-05,69793,decrease,232b6ab0e8b3cad4aae530c88fe160d8
14,2001-10-13,16211,decrease,dcc2b804b1790360e7f8b5c298becaa1
14,2006-10-14,34886,increase,a89cc8bf9daac5ae88c07c1009c266c0
14,2008-11-05,45856,increase,563470f9fba7f1545f0b899ecd9241e9
14,2005-01-15,20675,no-change,8a88efdf62dbed4e6b51a980392d3ded
14,2004-04-15,6774,decrease,4fe3ce20b736954cc92b52f534268a2f
14,1996-02-23,13791,increase,c2c50764687e5ab93be62f9e8ad91d09
14,2004-11-08,20296,decrease,37b9a1aa5321b5f6225b918f532fe19e
14,1996-02-23,13791,decrease,90f17fba953b5dbeb87634b45a0597c8
14,2008-11-05,45856,decrease,46ae2bb84b976633f695c027aafc49df
14,2004-04-15,6774,increase,07dbfcd6b6ce7ee940440f9a593ece68
14,2005-01-15,20675,decrease,cf04326b8047aa660c4f82205e683ea6
14,2004-04-15,6774,decrease,4e24bc96806e86941b0a2e1780a489c8
14,2008-11-07,44880,increase,6f9fb4815a26e5f7d9d826cc2b3e0726
15,2015-05-23,92644,no-change,c0c832bb7b0a2fa0d906ae53927dd7ce
15,2007-11-11,37247,decrease,4b27a54abe757de4bde49f5fe45fa94d


2025-01-26 16:42:17 - root - INFO - Please check the answer again by reviewing Find pairs of different molecules tested in the same assay and standard type, where both have 10–15 heavy atoms, fewer than 5 activities in that assay, fewer than 2 duplicate activities, non-null standard values, and pChEMBL values over 10. For each pair, report the maximum heavy atom count, the latest publication date (calculated based on the document's rank within the same journal and year, and map it to a synthetic month and day), the highest document ID, classify the change in standard values as 'increase', 'decrease', or 'no-change' based on their values and relations, and generate UUIDs from their activity IDs and canonical SMILES., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Max_heavy_atom_count,Latest_publication_date,Highest_doc_id,Change_classification,UUID
count:int between 10 and 15,date:YYYY-MM-DD,id:int >0,classification:str (increase/decrease/no-change),uuid:str
count:int between 10 and 15,date:YYYY-MM-DD,id:int >0,classification:str (increase/decrease/no-change),uuid:str
...
```

This table displays pairs of different molecules that were tested in the same assay and standard type, meeting the specified criteria:

- **Max_heavy_atom_count**: The maximum number of heavy atoms (non-hydrogen atoms) in the pair of molecules, ranging between 10 and 15.
- **Latest_publication_date**: The latest publication date among the documents associated with the molecules, calculated based on the method described for assigning synthetic months and days.
- **Highest_doc_id**: The highest document ID among the documents associated with the molecules.
- **Change_classification**: Indicates whether the standard value between the two molecules has increased, decreased, or stayed the same ('increase', 'decrease', or 'no-change') based on their values and relations.
- **UUID**: A unique identifier generated from the activity IDs and canonical SMILES of the molecule pair.

Each row represents a pair of molecules satisfying all the conditions specified in the task. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Max_heavy_atom_count,Latest_publication_date,Highest_doc_id,Change_classification,UUID
14,2005-01-15,20675,increase,9f06fed7ee9b62dd5f56469dc83fbf51
12,1996-02-23,13791,increase,a0b0c58e71f7142ec6f6d27c843c67c3
14,2013-09-05,77288,decrease,1e1f10fd3b7ca09817fca841ef00f4bb
14,2001-05-24,16005,decrease,0fdf0ad8c0d902579118a7ca552a3624
14,2008-11-07,44880,decrease,6631b1c9b78de0d4e3de19cb9c7630c8
15,2005-03-12,20800,decrease,2f4954bb84a38e827e7726474dcef055
14,2004-04-15,6774,decrease,4236d6038a7586485b6e1036c6b924d2
14,2008-01-19,38939,decrease,eb07112d3e7fd5c9e9b6315044026987
14,2004-11-08,20296,decrease,ba6c83ef98a9e2dc955af70a13266d98
14,2004-11-08,20296,increase,514079940691e18cad4633f12c1136f0
14,2004-11-08,20296,increase,f643479b64d733b2635928dbd032df48
13,1998-01-24,14797,increase,34e20d45beb5fd8683eb3f6f83615df1
14,2006-10-14,34886,decrease,62ca43843d9a54379bf9d8d01418d809
15,2009-06-24,46997,decrease,ea8a753517d504a1f5d9294d47d9acb2
13,1998-01-24,14797,decrease,1c7b0293f51d2df38a1f25bdc6d180af
13,2005-01-15,20675,decrease,f75057e279bca40ce0c492f168ac4700
14,2004-04-15,6774,increase,1171f52306b64d323f2d6c563ceac46e
14,2004-04-15,6774,decrease,bd41aa59a9939c1160dfab9db5af1535
14,2001-10-13,16211,increase,d9bd3d7ef9b85526cd7d5777325cbc7d
14,2013-09-05,77288,increase,6ae459043a3341f5aaa721b2a5a67310
14,2006-10-14,34886,decrease,aa6e815bccdfccba115bfa1068ab29a3
15,2008-11-07,44880,decrease,31716844860f3c51da571022ec3b0ff8
14,2006-10-14,34886,decrease,35081b4f12a6d31e796afd2fa34036b0
14,2006-05-15,31223,increase,3efb3643ff89bb73378472d2a9df17d4
14,2001-05-24,16005,increase,42f80ec3e6e2232055efd98741767628
14,2013-09-05,77288,decrease,d213ae8b991a03e7a7dbd16b6cae72f4
14,2004-08-07,21068,no-change,c2ae25788562469227c8f644a4ba201a
14,2004-04-15,6774,increase,93e32506960103f50ad6385cd481aeda
14,2006-10-14,34886,decrease,966c9ed4eb467ef32fcb2b79456cf752
14,2004-04-15,6774,decrease,04f1c72d49e9d38fa1e85ae6afb70e5c
10,2013-09-05,77288,decrease,4c9442aa9927509df1893b44e1e4326d
15,2008-11-07,44880,decrease,ea4798a7a01dc83e4be512152dd603d8
14,2004-04-15,6774,increase,32474e345cbd795f212944c61a9a6cce
14,2008-11-05,45856,increase,eb403b09812e7782616eb32fa36c2d93
14,2004-04-15,6774,increase,9149cf05cb875015b12931285331f94e
14,2004-04-13,6768,increase,111cbb38c2b3a086592367d32ce7ec20
15,2002-02-26,16851,increase,f52ae78d9f0b60d0e39bde063a3486bd
14,2004-04-13,6768,decrease,64881abcbbd305a1bf72d26b453dc8bc
13,2018-06-21,107379,decrease,1023d5ab695dbbfccf6aa6a7577f0a47
14,2009-03-19,46138,decrease,732fb4dc14940dffad6ccfa654dce4ce
15,2008-11-07,44880,decrease,492ca8c8a60bdfb6ff114fdc880948e7
14,2004-08-07,21068,increase,bb5c73c8f2e7a754bd9ced949c6f0907
13,2002-06-10,16492,decrease,834e0b8817876901bac7976cf4009682
13,2004-05-02,17518,decrease,f0e95b86bbceff7f17e60dd42e4d9958
14,2008-01-19,38939,decrease,30e6dd00aab53dd0b7d150e79f43f656
14,2018-06-21,107379,decrease,58e37542216d2535f3ba743992e12d76
14,2001-05-24,16005,decrease,d1e38187141722ca0663beab5fa9647b
14,2004-04-15,6774,increase,44ac02f3fe32f39a2ff70cc7ee41aee0
14,2008-01-19,38939,increase,57278a23f08189e953738f662d22cab3
14,2018-06-21,107379,decrease,89ecd929fa2bf839339c4ca0bc36cd1c
14,2004-08-07,21068,increase,68fc5d2af1c50a6b6c5b97278da89873
14,2004-04-15,6774,increase,8951fd0aeca30968187272ca13bcc9eb
14,2004-04-13,6768,increase,25200f9f187b8910d5144020805a7cfb
14,2004-04-15,6774,increase,48e8a47e4c2b531492912c1dd2f44d2d
14,2006-10-14,34886,decrease,118261d3986c180ac955457434f6242d
15,2013-07-22,74297,decrease,5ba21335e294fe2fc16b36105731cdf6
14,2004-04-15,6774,decrease,56e5a88bf84654270ca332c35cd8cd5a
14,2006-10-14,34886,decrease,29fdc4df43aa68fc5acc3165e0ff9baa
14,2001-10-13,16211,increase,1a4fa2c584f91e4e72beffb97946a51a
13,2005-01-15,20675,decrease,6a3406d94b6e91d256071ba5e48ec4dc
13,2005-01-15,20675,decrease,8a4c397f6752dd1a6a29fc15ebac3536
12,2004-04-13,6768,increase,556801271d73800c65ac16a892c059ba
14,2005-07-05,69793,decrease,232b6ab0e8b3cad4aae530c88fe160d8
14,2001-10-13,16211,decrease,dcc2b804b1790360e7f8b5c298becaa1
14,2006-10-14,34886,increase,a89cc8bf9daac5ae88c07c1009c266c0
14,2008-11-05,45856,increase,563470f9fba7f1545f0b899ecd9241e9
14,2005-01-15,20675,no-change,8a88efdf62dbed4e6b51a980392d3ded
14,2004-04-15,6774,decrease,4fe3ce20b736954cc92b52f534268a2f
14,1996-02-23,13791,increase,c2c50764687e5ab93be62f9e8ad91d09
14,2004-11-08,20296,decrease,37b9a1aa5321b5f6225b918f532fe19e
14,1996-02-23,13791,decrease,90f17fba953b5dbeb87634b45a0597c8
14,2008-11-05,45856,decrease,46ae2bb84b976633f695c027aafc49df
14,2004-04-15,6774,increase,07dbfcd6b6ce7ee940440f9a593ece68
14,2005-01-15,20675,decrease,cf04326b8047aa660c4f82205e683ea6
14,2004-04-15,6774,decrease,4e24bc96806e86941b0a2e1780a489c8
14,2008-11-07,44880,increase,6f9fb4815a26e5f7d9d826cc2b3e0726
15,2015-05-23,92644,no-change,c0c832bb7b0a2fa0d906ae53927dd7ce
15,2007-11-11,37247,decrease,4b27a54abe757de4bde49f5fe45fa94d
Current sql:
WITH
  filtered_activities AS (
    SELECT
      a.activity_id,
      a.molregno,
      a.assay_id,
      a.standard_type,
      a.standard_value,
      a.standard_relation,
      SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
      SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
      a.standard_units,
      a.doc_id
    FROM
      `bigquery-public-data.ebi_chembl.activities` AS a
    INNER JOIN
      `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
    WHERE
      SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
      AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
      AND a.standard_value IS NOT NULL
      AND a.standard_relation IS NOT NULL
  ),
  assays_with_few_activities AS (
    SELECT
      assay_id,
      COUNT(DISTINCT activity_id) AS activity_count
    FROM
      filtered_activities
    GROUP BY
      assay_id
    HAVING
      activity_count < 5
  ),
  activities_no_duplicates AS (
    SELECT
      fa.*
    FROM
      filtered_activities AS fa
    LEFT JOIN (
      SELECT
        molregno,
        assay_id,
        standard_value,
        COUNT(*) AS duplicate_count
      FROM
        filtered_activities
      GROUP BY
        molregno, assay_id, standard_value
      HAVING
        COUNT(*) >= 2
    ) AS duplicates
    ON
      fa.molregno = duplicates.molregno
      AND fa.assay_id = duplicates.assay_id
      AND fa.standard_value = duplicates.standard_value
    WHERE
      duplicates.molregno IS NULL
  ),
  final_activities AS (
    SELECT
      fa.*
    FROM
      activities_no_duplicates AS fa
    WHERE
      fa.assay_id IN (SELECT assay_id FROM assays_with_few_activities)
  ),
  docs_with_pub_dates AS (
    SELECT
      doc_id,
      DATE(pub_year, month, day) AS publication_date
    FROM
      (
        SELECT
          doc_id,
          pub_year,
          percent_rank,
          -- Compute Month
          IFNULL(CAST(FLOOR(percent_rank * 11) + 1 AS INT64), 1) AS month,
          -- Compute Day
          IFNULL(
            CAST(MOD(CAST(FLOOR(percent_rank * 308) AS INT64), 28) + 1 AS INT64),
            1
          ) AS day
        FROM (
          SELECT
            d.doc_id,
            IFNULL(SAFE_CAST(d.year AS INT64), 1970) AS pub_year,
            SAFE_DIVIDE(
              SAFE_CAST(
                RANK() OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64) ORDER BY SAFE_CAST(d.first_page AS INT64)) - 1 AS FLOAT64
              ),
              NULLIF(COUNT(*) OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64)) -1, 0)
            ) AS percent_rank
          FROM
            `bigquery-public-data.ebi_chembl.docs` AS d
          WHERE
            d.doc_id IS NOT NULL
            AND SAFE_CAST(d.first_page AS INT64) IS NOT NULL
            AND d.journal IS NOT NULL
            AND d.year IS NOT NULL
        )
      )
  )
SELECT DISTINCT
  GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
  COALESCE(
    CAST(GREATEST(fa1_pub.publication_date, fa2_pub.publication_date) AS STRING),
    CAST(fa1_pub.publication_date AS STRING),
    CAST(fa2_pub.publication_date AS STRING),
    '1970-01-01') AS Latest_publication_date,
  GREATEST(SAFE_CAST(fa1.doc_id AS INT64), SAFE_CAST(fa2.doc_id AS INT64)) AS Highest_doc_id,
  CASE
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) > SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'decrease'
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) < SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'increase'
    ELSE 'no-change'
  END AS Change_classification,
  TO_HEX(MD5(TO_JSON_STRING(STRUCT(fa1.activity_id, fa2.activity_id, cs1.canonical_smiles, cs2.canonical_smiles)))) AS UUID
FROM
  final_activities AS fa1
JOIN
  final_activities AS fa2
  ON fa1.assay_id = fa2.assay_id
     AND fa1.standard_type = fa2.standard_type
     AND fa1.molregno < fa2.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs1
  ON fa1.molregno = cs1.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs2
  ON fa2.molregno = cs2.molregno
LEFT JOIN
  docs_with_pub_dates AS fa1_pub
  ON fa1.doc_id = fa1_pub.doc_id
LEFT JOIN
  docs_with_pub_dates AS fa2_pub
  ON fa2.doc_id = fa2_pub.doc_id
LIMIT 100;
2025-01-26 16:42:49 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:42:49 - root - INFO - ```sql
WITH
  filtered_activities AS (
    SELECT
      a.activity_id,
      a.molregno,
      a.assay_id,
      a.standard_type,
      a.standard_value,
      a.standard_relation,
      SAFE_CAST(a.pchembl_value AS FLOAT64) AS pchembl_value,
      SAFE_CAST(cp.heavy_atoms AS INT64) AS heavy_atoms,
      a.standard_units,
      a.doc_id
    FROM
      `bigquery-public-data.ebi_chembl.activities` AS a
    INNER JOIN
      `bigquery-public-data.ebi_chembl.compound_properties` AS cp
    ON a.molregno = cp.molregno
    WHERE
      SAFE_CAST(cp.heavy_atoms AS INT64) BETWEEN 10 AND 15
      AND SAFE_CAST(a.pchembl_value AS FLOAT64) > 10
      AND a.standard_value IS NOT NULL
      AND a.standard_relation IS NOT NULL
  ),
  assays_with_few_activities AS (
    SELECT
      assay_id,
      COUNT(DISTINCT activity_id) AS activity_count
    FROM
      filtered_activities
    GROUP BY
      assay_id
    HAVING
      activity_count < 5
  ),
  activities_no_duplicates AS (
    SELECT
      fa.*
    FROM
      filtered_activities AS fa
    LEFT JOIN (
      SELECT
        molregno,
        assay_id,
        standard_value,
        COUNT(*) AS duplicate_count
      FROM
        filtered_activities
      GROUP BY
        molregno, assay_id, standard_value
      HAVING
        COUNT(*) >= 2
    ) AS duplicates
    ON
      fa.molregno = duplicates.molregno
      AND fa.assay_id = duplicates.assay_id
      AND fa.standard_value = duplicates.standard_value
    WHERE
      duplicates.molregno IS NULL
  ),
  final_activities AS (
    SELECT
      fa.*
    FROM
      activities_no_duplicates AS fa
    WHERE
      fa.assay_id IN (SELECT assay_id FROM assays_with_few_activities)
  ),
  docs_with_pub_dates AS (
    SELECT
      doc_id,
      DATE(pub_year, month, day) AS publication_date
    FROM
      (
        SELECT
          doc_id,
          pub_year,
          percent_rank,
          -- Compute Month
          IFNULL(CAST(FLOOR(percent_rank * 11) + 1 AS INT64), 1) AS month,
          -- Compute Day
          IFNULL(
            CAST(MOD(CAST(FLOOR(percent_rank * 308) AS INT64), 28) + 1 AS INT64),
            1
          ) AS day
        FROM (
          SELECT
            d.doc_id,
            IFNULL(SAFE_CAST(d.year AS INT64), 1970) AS pub_year,
            SAFE_DIVIDE(
              SAFE_CAST(
                RANK() OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64) ORDER BY SAFE_CAST(d.first_page AS INT64)) - 1 AS FLOAT64
              ),
              NULLIF(COUNT(*) OVER(PARTITION BY d.journal, SAFE_CAST(d.year AS INT64)) -1, 0)
            ) AS percent_rank
          FROM
            `bigquery-public-data.ebi_chembl.docs` AS d
          WHERE
            d.doc_id IS NOT NULL
            AND SAFE_CAST(d.first_page AS INT64) IS NOT NULL
            AND d.journal IS NOT NULL
            AND d.year IS NOT NULL
        )
      )
  )
SELECT DISTINCT
  GREATEST(fa1.heavy_atoms, fa2.heavy_atoms) AS Max_heavy_atom_count,
  COALESCE(
    CAST(GREATEST(fa1_pub.publication_date, fa2_pub.publication_date) AS STRING),
    CAST(fa1_pub.publication_date AS STRING),
    CAST(fa2_pub.publication_date AS STRING),
    '1970-01-01') AS Latest_publication_date,
  GREATEST(SAFE_CAST(fa1.doc_id AS INT64), SAFE_CAST(fa2.doc_id AS INT64)) AS Highest_doc_id,
  CASE
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) > SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'decrease'
    WHEN SAFE_CAST(fa1.standard_value AS FLOAT64) < SAFE_CAST(fa2.standard_value AS FLOAT64) THEN 'increase'
    ELSE 'no-change'
  END AS Change_classification,
  TO_HEX(MD5(TO_JSON_STRING(STRUCT(fa1.activity_id, fa2.activity_id, cs1.canonical_smiles, cs2.canonical_smiles)))) AS UUID
FROM
  final_activities AS fa1
JOIN
  final_activities AS fa2
  ON fa1.assay_id = fa2.assay_id
     AND fa1.standard_type = fa2.standard_type
     AND fa1.molregno < fa2.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs1
  ON fa1.molregno = cs1.molregno
JOIN
  `bigquery-public-data.ebi_chembl.compound_structures` AS cs2
  ON fa2.molregno = cs2.molregno
LEFT JOIN
  docs_with_pub_dates AS fa1_pub
  ON fa1.doc_id = fa1_pub.doc_id
LEFT JOIN
  docs_with_pub_dates AS fa2_pub
  ON fa2.doc_id = fa2_pub.doc_id
LIMIT 100;
```
2025-01-26 16:42:51 - root - INFO - itercount: 4
2025-01-26 16:42:51 - root - INFO - 0
2025-01-26 16:42:51 - root - INFO - Total iteration counts: 4
