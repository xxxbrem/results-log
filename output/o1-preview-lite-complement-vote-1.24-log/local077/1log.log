2025-01-25 05:53:23 - openai._base_client - INFO - Retrying request to /chat/completions in 0.494232 seconds
2025-01-25 05:53:58 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 05:53:58 - root - INFO - SQL:
SELECT * FROM "interest_metrics" LIMIT 100;
Results:
_month,_year,month_year,interest_id,composition,index_value,ranking,percentile_ranking
7.0,2018.0,07-2018,32486.0,11.89,6.19,1,99.86
7.0,2018.0,07-2018,6106.0,9.93,5.31,2,99.73
7.0,2018.0,07-2018,18923.0,10.85,5.29,3,99.59
7.0,2018.0,07-2018,6344.0,10.32,5.1,4,99.45
7.0,2018.0,07-2018,100.0,10.77,5.04,5,99.31
7.0,2018.0,07-2018,69.0,10.82,5.03,6,99.18
7.0,2018.0,07-2018,79.0,11.21,4.97,7,99.04
7.0,2018.0,07-2018,6111.0,10.71,4.83,8,98.9
7.0,2018.0,07-2018,6214.0,9.71,4.83,8,98.9
7.0,2018.0,07-2018,19422.0,10.11,4.81,10,98.63
7.0,2018.0,07-2018,6110.0,11.57,4.79,11,98.49
7.0,2018.0,07-2018,4895.0,9.47,4.67,12,98.35
7.0,2018.0,07-2018,6217.0,10.8,4.62,13,98.22
7.0,2018.0,07-2018,4.0,13.97,4.53,14,98.08
7.0,2018.0,07-2018,6218.0,9.29,4.5,15,97.94
7.0,2018.0,07-2018,6123.0,9.49,4.49,16,97.81
7.0,2018.0,07-2018,171.0,14.91,4.47,17,97.67
7.0,2018.0,07-2018,19613.0,12.62,4.38,18,97.53
7.0,2018.0,07-2018,17.0,7.89,4.15,19,97.39
7.0,2018.0,07-2018,6.0,11.99,4.08,20,97.26
7.0,2018.0,07-2018,6013.0,9.35,3.99,21,97.12
7.0,2018.0,07-2018,4870.0,10.29,3.95,22,96.98
7.0,2018.0,07-2018,19423.0,12.22,3.92,23,96.84
7.0,2018.0,07-2018,6089.0,6.97,3.84,24,96.71
7.0,2018.0,07-2018,161.0,11.48,3.82,25,96.57
7.0,2018.0,07-2018,6286.0,14.1,3.82,25,96.57
7.0,2018.0,07-2018,5991.0,11.04,3.81,27,96.3
7.0,2018.0,07-2018,92.0,9.77,3.77,28,96.16
7.0,2018.0,07-2018,6184.0,13.35,3.75,29,96.02
7.0,2018.0,07-2018,19621.0,11.61,3.74,30,95.88
7.0,2018.0,07-2018,63.0,9.37,3.73,31,95.75
7.0,2018.0,07-2018,103.0,6.61,3.69,32,95.61
7.0,2018.0,07-2018,38.0,9.48,3.66,33,95.47
7.0,2018.0,07-2018,17786.0,13.67,3.65,34,95.34
7.0,2018.0,07-2018,6232.0,9.97,3.64,35,95.2
7.0,2018.0,07-2018,165.0,6.05,3.59,36,95.06
7.0,2018.0,07-2018,18351.0,6.09,3.58,37,94.92
7.0,2018.0,07-2018,15.0,6.9,3.56,38,94.79
,,,,6.12,2.85,43,96.4
7.0,2018.0,07-2018,17314.0,10.43,3.55,39,94.65
7.0,2018.0,07-2018,6151.0,6.83,3.55,39,94.65
7.0,2018.0,07-2018,4914.0,7.42,3.55,39,94.65
7.0,2018.0,07-2018,115.0,11.68,3.53,42,94.24
7.0,2018.0,07-2018,5968.0,12.87,3.53,42,94.24
7.0,2018.0,07-2018,36.0,9.27,3.51,44,93.96
7.0,2018.0,07-2018,5943.0,6.37,3.48,45,93.83
7.0,2018.0,07-2018,133.0,10.91,3.44,46,93.69
7.0,2018.0,07-2018,1.0,7.02,3.44,46,93.69
7.0,2018.0,07-2018,114.0,6.25,3.41,48,93.42
7.0,2018.0,07-2018,6107.0,8.84,3.39,49,93.28
7.0,2018.0,07-2018,150.0,5.3,3.39,49,93.28
7.0,2018.0,07-2018,60.0,6.71,3.36,51,93.0
7.0,2018.0,07-2018,96.0,7.21,3.35,52,92.87
7.0,2018.0,07-2018,22403.0,12.27,3.33,53,92.73
7.0,2018.0,07-2018,40.0,10.86,3.32,54,92.59
7.0,2018.0,07-2018,19758.0,6.28,3.32,54,92.59
7.0,2018.0,07-2018,17730.0,11.38,3.3,56,92.32
7.0,2018.0,07-2018,5938.0,11.63,3.29,57,92.18
7.0,2018.0,07-2018,4869.0,6.47,3.29,57,92.18
7.0,2018.0,07-2018,4897.0,12.93,3.27,59,91.91
7.0,2018.0,07-2018,6029.0,8.72,3.26,60,91.77
7.0,2018.0,07-2018,31.0,7.9,3.26,60,91.77
7.0,2018.0,07-2018,16137.0,9.65,3.24,62,91.5
7.0,2018.0,07-2018,6330.0,6.82,3.22,63,91.36
7.0,2018.0,07-2018,6334.0,11.63,3.22,63,91.36
7.0,2018.0,07-2018,6315.0,8.14,3.22,63,91.36
7.0,2018.0,07-2018,4852.0,6.77,3.2,66,90.95
7.0,2018.0,07-2018,16.0,6.24,3.2,66,90.95
7.0,2018.0,07-2018,6108.0,6.65,3.17,68,90.67
7.0,2018.0,07-2018,6206.0,10.76,3.17,68,90.67
7.0,2018.0,07-2018,6006.0,6.26,3.15,70,90.4
7.0,2018.0,07-2018,6228.0,10.22,3.15,70,90.4
7.0,2018.0,07-2018,20768.0,6.53,3.15,70,90.4
7.0,2018.0,07-2018,4902.0,8.17,3.12,73,89.99
7.0,2018.0,07-2018,6277.0,11.72,3.1,74,89.85
7.0,2018.0,07-2018,19757.0,10.95,3.08,75,89.71
7.0,2018.0,07-2018,4911.0,6.87,3.08,75,89.71
,,,,7.13,2.84,45,96.23
7.0,2018.0,07-2018,4910.0,6.09,3.07,77,89.44
7.0,2018.0,07-2018,6285.0,9.97,3.04,78,89.3
7.0,2018.0,07-2018,11974.0,7.19,3.02,79,89.16
7.0,2018.0,07-2018,6219.0,6.37,3.02,79,89.16
7.0,2018.0,07-2018,10250.0,11.4,3.01,81,88.89
7.0,2018.0,07-2018,6128.0,6.28,2.98,82,88.75
7.0,2018.0,07-2018,5946.0,5.99,2.97,83,88.61
7.0,2018.0,07-2018,158.0,7.46,2.97,83,88.61
7.0,2018.0,07-2018,15935.0,9.13,2.96,85,88.34
7.0,2018.0,07-2018,4855.0,5.99,2.95,86,88.2
7.0,2018.0,07-2018,149.0,6.88,2.95,86,88.2
7.0,2018.0,07-2018,16197.0,6.13,2.94,88,87.93
7.0,2018.0,07-2018,11067.0,5.14,2.93,89,87.79
7.0,2018.0,07-2018,17674.0,6.25,2.92,90,87.65
7.0,2018.0,07-2018,4913.0,6.76,2.92,90,87.65
7.0,2018.0,07-2018,56.0,7.09,2.91,92,87.38
7.0,2018.0,07-2018,6341.0,5.68,2.91,92,87.38
7.0,2018.0,07-2018,6316.0,6.52,2.91,92,87.38
7.0,2018.0,07-2018,18647.0,6.45,2.91,92,87.38
7.0,2018.0,07-2018,17803.0,6.21,2.91,92,87.38
7.0,2018.0,07-2018,23.0,5.41,2.89,97,86.69
7.0,2018.0,07-2018,132.0,7.48,2.88,98,86.56

2025-01-25 05:53:58 - root - INFO - SQL:
SELECT DISTINCT "_year", "_month" FROM "interest_metrics" LIMIT 100;
Results:
_year,_month
2018.0,7.0
,
2018.0,8.0
2018.0,9.0
2018.0,10.0
2018.0,11.0
2018.0,12.0
2019.0,1.0
2019.0,2.0
2019.0,3.0
2019.0,4.0
2019.0,5.0
2019.0,6.0
2019.0,7.0
2019.0,8.0

2025-01-25 05:53:58 - root - INFO - SQL:
SELECT "interest_id", "composition", "ranking" FROM "interest_metrics" LIMIT 100;
Results:
interest_id,composition,ranking
32486.0,11.89,1
6106.0,9.93,2
18923.0,10.85,3
6344.0,10.32,4
100.0,10.77,5
69.0,10.82,6
79.0,11.21,7
6111.0,10.71,8
6214.0,9.71,8
19422.0,10.11,10
6110.0,11.57,11
4895.0,9.47,12
6217.0,10.8,13
4.0,13.97,14
6218.0,9.29,15
6123.0,9.49,16
171.0,14.91,17
19613.0,12.62,18
17.0,7.89,19
6.0,11.99,20
6013.0,9.35,21
4870.0,10.29,22
19423.0,12.22,23
6089.0,6.97,24
161.0,11.48,25
6286.0,14.1,25
5991.0,11.04,27
92.0,9.77,28
6184.0,13.35,29
19621.0,11.61,30
63.0,9.37,31
103.0,6.61,32
38.0,9.48,33
17786.0,13.67,34
6232.0,9.97,35
165.0,6.05,36
18351.0,6.09,37
15.0,6.9,38
,6.12,43
17314.0,10.43,39
6151.0,6.83,39
4914.0,7.42,39
115.0,11.68,42
5968.0,12.87,42
36.0,9.27,44
5943.0,6.37,45
133.0,10.91,46
1.0,7.02,46
114.0,6.25,48
6107.0,8.84,49
150.0,5.3,49
60.0,6.71,51
96.0,7.21,52
22403.0,12.27,53
40.0,10.86,54
19758.0,6.28,54
17730.0,11.38,56
5938.0,11.63,57
4869.0,6.47,57
4897.0,12.93,59
6029.0,8.72,60
31.0,7.9,60
16137.0,9.65,62
6330.0,6.82,63
6334.0,11.63,63
6315.0,8.14,63
4852.0,6.77,66
16.0,6.24,66
6108.0,6.65,68
6206.0,10.76,68
6006.0,6.26,70
6228.0,10.22,70
20768.0,6.53,70
4902.0,8.17,73
6277.0,11.72,74
19757.0,10.95,75
4911.0,6.87,75
,7.13,45
4910.0,6.09,77
6285.0,9.97,78
11974.0,7.19,79
6219.0,6.37,79
10250.0,11.4,81
6128.0,6.28,82
5946.0,5.99,83
158.0,7.46,83
15935.0,9.13,85
4855.0,5.99,86
149.0,6.88,86
16197.0,6.13,88
11067.0,5.14,89
17674.0,6.25,90
4913.0,6.76,90
56.0,7.09,92
6341.0,5.68,92
6316.0,6.52,92
18647.0,6.45,92
17803.0,6.21,92
23.0,5.41,97
132.0,7.48,98

2025-01-25 05:53:58 - root - INFO - SQL:
SELECT "month_year", "interest_id", "composition"
   FROM "interest_metrics"
   WHERE "_year" = 2018 AND "_month" = 9
   LIMIT 100;
Results:
month_year,interest_id,composition
09-2018,6218.0,4.61
09-2018,6285.0,7.06
09-2018,22502.0,6.49
09-2018,115.0,6.81
09-2018,6013.0,4.9
09-2018,6206.0,7.49
09-2018,4.0,6.05
09-2018,171.0,6.36
09-2018,38.0,4.67
09-2018,6219.0,4.28
09-2018,35904.0,5.19
09-2018,16137.0,5.25
09-2018,6110.0,4.48
09-2018,19250.0,6.62
09-2018,16.0,3.66
09-2018,5970.0,6.95
09-2018,21242.0,5.84
09-2018,17269.0,5.28
09-2018,21057.0,18.18
09-2018,32486.0,4.86
09-2018,19613.0,5.1
09-2018,6107.0,4.4
09-2018,151.0,5.57
09-2018,6023.0,5.85
09-2018,6232.0,4.48
09-2018,17320.0,2.8
09-2018,35903.0,5.23
09-2018,33.0,5.16
09-2018,12133.0,12.8
09-2018,4897.0,6.35
09-2018,31.0,4.09
09-2018,19423.0,5.04
09-2018,6.0,9.48
09-2018,12025.0,7.83
09-2018,21061.0,7.06
09-2018,6284.0,11.06
09-2018,5968.0,5.79
09-2018,6378.0,5.01
09-2018,5969.0,14.29
09-2018,17.0,3.07
09-2018,6144.0,4.53
09-2018,6286.0,11.18
09-2018,17786.0,5.83
09-2018,77.0,10.28
09-2018,19298.0,11.74
09-2018,17785.0,5.93
09-2018,79.0,3.32
09-2018,39.0,9.93
09-2018,64.0,11.93
09-2018,49.0,3.58
09-2018,16138.0,5.01
09-2018,6184.0,4.87
09-2018,11067.0,6.71
09-2018,4943.0,9.91
09-2018,34465.0,2.83
09-2018,32704.0,5.74
09-2018,18923.0,3.14
09-2018,88.0,3.23
09-2018,10008.0,5.45
09-2018,6029.0,7.9
09-2018,17730.0,5.95
09-2018,147.0,3.68
09-2018,11974.0,3.43
09-2018,158.0,8.43
09-2018,4902.0,3.71
09-2018,6304.0,4.51
09-2018,34463.0,2.69
09-2018,19295.0,5.84
09-2018,21060.0,7.03
09-2018,6210.0,4.31
09-2018,18347.0,4.95
09-2018,33971.0,4.75
09-2018,56.0,3.55
09-2018,7537.0,3.79
09-2018,35.0,3.27
09-2018,10980.0,5.21
09-2018,5896.0,4.55
09-2018,6305.0,5.38
09-2018,98.0,3.71
09-2018,12031.0,5.1
09-2018,35953.0,4.17
09-2018,4914.0,2.89
09-2018,6142.0,4.35
09-2018,19603.0,4.45
09-2018,21062.0,5.68
09-2018,6315.0,3.16
09-2018,7557.0,4.0
09-2018,6250.0,3.64
09-2018,4924.0,3.75
09-2018,19621.0,9.86
09-2018,33959.0,2.53
09-2018,22427.0,3.88
09-2018,21059.0,5.11
09-2018,7527.0,4.39
09-2018,83.0,3.04
09-2018,22403.0,5.42
09-2018,113.0,3.91
09-2018,18204.0,4.94
09-2018,137.0,4.06
09-2018,6340.0,4.58

2025-01-25 05:53:58 - root - INFO - SQL:
SELECT im."interest_name", imt."composition"
   FROM "interest_metrics" AS imt
   JOIN "interest_map" AS im ON imt."interest_id" = im."id"
   LIMIT 100;
Results:
interest_name,composition
Vacation Rental Accommodation Researchers,11.89
Luxury Second Home Owners,9.93
Online Home Decor Shoppers,10.85
Hair Care Shoppers,10.32
Nutrition Conscious Eaters,10.77
Healthy Eaters,10.82
Luxury Travel Researchers,11.21
Wine Lovers,10.71
Home Remodelers,9.71
Home Design and Living Publication Readers,10.11
Apartment Furniture Shoppers,11.57
Mature Parents,9.47
Weight Loss Researchers,10.8
Luxury Retail Researchers,13.97
Running Enthusiasts,9.29
Misc-Deal Seekers or Coupon Shoppers,9.49
Shoe Shoppers,14.91
Land Rover Shoppers,12.62
MLB Fans,7.89
Vacation Planners,11.99
Competitive Sports Participants,9.35
Tech-Savvy Moms,10.29
Kitchen Appliance Shoppers,12.22
Mens Fitness Publication Readers,6.97
Travel Reward Points Enthusiasts,11.48
Luxury Hotel Guests,14.1
Gluten-Free Recipe Researchers,11.04
Parents with Kids,9.77
Reusable Drinkware Shoppers,13.35
Portugal Trip Planners,11.61
New & Expecting Parents,9.37
Live Concert Fans,6.61
Sporting Goods Shoppers,9.48
Womens Fashion Brands Shoppers,13.67
Golf Enthusiasts,9.97
Liberal News Readers,6.05
Drama Show Watchers,6.09
NBA Fans,6.9
Lobbyists,10.43
Wedding Registrants,6.83
Mens Health Researchers,7.42
Mens Shoe Shoppers,11.68
Luxury Kitchen Goods Shoppers,12.87
Baby Products Buyers,9.27
Financial News Readers,6.37
High End Camera Shoppers - Dupe,10.91
Fitness Enthusiasts,7.02
Womens Fashion Magazine Readers,6.25
Ski House Second Home Owners,8.84
TV Junkies,5.3
Online Health Researchers,6.71
Exercise and Gym Researchers,7.21
Pandora Jewelry Shoppers,12.27
Bed & Bath Shoppers,10.86
Dog Lovers,6.28
Luxury Department Store Shoppers,11.38
Costa Rica Trip Planners,11.63
Womens Fitness Enthusiasts,6.47
Parents of Teenagers Going to College,12.93
Indoor Cycling & Spinning Enthusiasts,8.72
Home Decor Shoppers,7.9
Olympics Fans,9.65
Pet Store Goers,6.82
Supermarket Shoppers,11.63
Boston Trip Planners,8.14
Health & Fitness,6.77
NCAA Fans,6.24
Beach House Second Home Owners,6.65
Preppy Clothing Shoppers,10.76
Breast Cancer Fund Raisers,6.26
Paleo Eaters,10.22
Beer Aficionados,6.53
Yogis,8.17
Harry Potter Fans,11.72
Natural Pet Food Shoppers,10.95
Dieters,6.87
Cholesterol Researchers,6.09
Competitive Tri-Athletes,9.97
Price Conscious Home Shoppers,7.19
Cycling Enthusiasts,6.37
Halloween Costume Shoppers,11.4
Realtors & Real Estate Researchers,6.28
Readers of Filipinos Content,5.99
Flight and Hotel Shoppers,7.46
Pregnancy Resources Researchers,9.13
Entertainment & Tabloid Magazine Readers,5.99
Streaming Radio Listeners,6.88
Financial Business Intelligence Researchers,6.13
NCAA Football Fans,5.14
Medical Advice Researchers,6.25
Womens Health Researchers,6.76
Discount Device Shoppers,7.09
Pharmacy Shoppers,5.68
Philadelphia Trip Planners,6.52
Gourmet Food & Wine Researchers,6.45
TV Advertising Professionals,6.21
Techies,5.41
Apple Fans,7.48
Executive and C-Suite,6.45
Luggage Shoppers,9.64

2025-01-25 05:53:58 - root - INFO - SQL:
SELECT DISTINCT imt."interest_id", im."interest_name"
   FROM "interest_metrics" AS imt
   JOIN "interest_map" AS im ON imt."interest_id" = im."id"
   LIMIT 100;
Results:
interest_id,interest_name
32486.0,Vacation Rental Accommodation Researchers
6106.0,Luxury Second Home Owners
18923.0,Online Home Decor Shoppers
6344.0,Hair Care Shoppers
100.0,Nutrition Conscious Eaters
69.0,Healthy Eaters
79.0,Luxury Travel Researchers
6111.0,Wine Lovers
6214.0,Home Remodelers
19422.0,Home Design and Living Publication Readers
6110.0,Apartment Furniture Shoppers
4895.0,Mature Parents
6217.0,Weight Loss Researchers
4.0,Luxury Retail Researchers
6218.0,Running Enthusiasts
6123.0,Misc-Deal Seekers or Coupon Shoppers
171.0,Shoe Shoppers
19613.0,Land Rover Shoppers
17.0,MLB Fans
6.0,Vacation Planners
6013.0,Competitive Sports Participants
4870.0,Tech-Savvy Moms
19423.0,Kitchen Appliance Shoppers
6089.0,Mens Fitness Publication Readers
161.0,Travel Reward Points Enthusiasts
6286.0,Luxury Hotel Guests
5991.0,Gluten-Free Recipe Researchers
92.0,Parents with Kids
6184.0,Reusable Drinkware Shoppers
19621.0,Portugal Trip Planners
63.0,New & Expecting Parents
103.0,Live Concert Fans
38.0,Sporting Goods Shoppers
17786.0,Womens Fashion Brands Shoppers
6232.0,Golf Enthusiasts
165.0,Liberal News Readers
18351.0,Drama Show Watchers
15.0,NBA Fans
17314.0,Lobbyists
6151.0,Wedding Registrants
4914.0,Mens Health Researchers
115.0,Mens Shoe Shoppers
5968.0,Luxury Kitchen Goods Shoppers
36.0,Baby Products Buyers
5943.0,Financial News Readers
133.0,High End Camera Shoppers - Dupe
1.0,Fitness Enthusiasts
114.0,Womens Fashion Magazine Readers
6107.0,Ski House Second Home Owners
150.0,TV Junkies
60.0,Online Health Researchers
96.0,Exercise and Gym Researchers
22403.0,Pandora Jewelry Shoppers
40.0,Bed & Bath Shoppers
19758.0,Dog Lovers
17730.0,Luxury Department Store Shoppers
5938.0,Costa Rica Trip Planners
4869.0,Womens Fitness Enthusiasts
4897.0,Parents of Teenagers Going to College
6029.0,Indoor Cycling & Spinning Enthusiasts
31.0,Home Decor Shoppers
16137.0,Olympics Fans
6330.0,Pet Store Goers
6334.0,Supermarket Shoppers
6315.0,Boston Trip Planners
4852.0,Health & Fitness
16.0,NCAA Fans
6108.0,Beach House Second Home Owners
6206.0,Preppy Clothing Shoppers
6006.0,Breast Cancer Fund Raisers
6228.0,Paleo Eaters
20768.0,Beer Aficionados
4902.0,Yogis
6277.0,Harry Potter Fans
19757.0,Natural Pet Food Shoppers
4911.0,Dieters
4910.0,Cholesterol Researchers
6285.0,Competitive Tri-Athletes
11974.0,Price Conscious Home Shoppers
6219.0,Cycling Enthusiasts
10250.0,Halloween Costume Shoppers
6128.0,Realtors & Real Estate Researchers
5946.0,Readers of Filipinos Content
158.0,Flight and Hotel Shoppers
15935.0,Pregnancy Resources Researchers
4855.0,Entertainment & Tabloid Magazine Readers
149.0,Streaming Radio Listeners
16197.0,Financial Business Intelligence Researchers
11067.0,NCAA Football Fans
17674.0,Medical Advice Researchers
4913.0,Womens Health Researchers
56.0,Discount Device Shoppers
6341.0,Pharmacy Shoppers
6316.0,Philadelphia Trip Planners
18647.0,Gourmet Food & Wine Researchers
17803.0,TV Advertising Professionals
23.0,Techies
132.0,Apple Fans
6365.0,Executive and C-Suite
6378.0,Luggage Shoppers

2025-01-25 05:53:58 - root - INFO - SQL:
SELECT "composition"
   FROM "interest_metrics"
   WHERE "_year" = 2018 AND "_month" = 9
   LIMIT 100;
Results:
composition
4.61
7.06
6.49
6.81
4.9
7.49
6.05
6.36
4.67
4.28
5.19
5.25
4.48
6.62
3.66
6.95
5.84
5.28
18.18
4.86
5.1
4.4
5.57
5.85
4.48
2.8
5.23
5.16
12.8
6.35
4.09
5.04
9.48
7.83
7.06
11.06
5.79
5.01
14.29
3.07
4.53
11.18
5.83
10.28
11.74
5.93
3.32
9.93
11.93
3.58
5.01
4.87
6.71
9.91
2.83
5.74
3.14
3.23
5.45
7.9
5.95
3.68
3.43
8.43
3.71
4.51
2.69
5.84
7.03
4.31
4.95
4.75
3.55
3.79
3.27
5.21
4.55
5.38
3.71
5.1
4.17
2.89
4.35
4.45
5.68
3.16
4.0
3.64
3.75
9.86
2.53
3.88
5.11
4.39
3.04
5.42
3.91
4.94
4.06
4.58

2025-01-25 05:53:58 - root - INFO - SQL:
SELECT "interest_id", AVG("composition") AS "avg_composition"
   FROM "interest_metrics"
   WHERE "_year" = 2018
   GROUP BY "interest_id"
   LIMIT 100;
Results:
interest_id,avg_composition
1.0,3.723333333333333
2.0,2.6216666666666666
3.0,2.8516666666666666
4.0,7.903333333333333
5.0,4.993333333333333
6.0,10.31
7.0,2.2916666666666665
8.0,3.4566666666666666
12.0,4.055
13.0,3.2699999999999996
14.0,2.33
15.0,3.3266666666666667
16.0,4.306666666666667
17.0,3.9150000000000005
18.0,2.54
19.0,3.018333333333333
20.0,3.1616666666666666
21.0,4.298333333333334
22.0,3.375
23.0,2.97
24.0,3.358333333333334
25.0,3.56
26.0,2.78
27.0,3.7483333333333335
28.0,6.159999999999999
29.0,3.6033333333333335
30.0,5.698333333333333
31.0,5.080000000000001
33.0,5.926666666666667
34.0,9.07
35.0,3.8333333333333335
36.0,5.071666666666666
37.0,4.685
38.0,6.079999999999999
39.0,11.700000000000001
40.0,5.058333333333333
41.0,3.898333333333333
42.0,4.131666666666667
43.0,3.791666666666666
44.0,3.8683333333333336
45.0,3.666666666666666
46.0,2.713333333333333
48.0,4.838333333333334
49.0,3.893333333333333
50.0,3.018333333333333
51.0,2.4333333333333336
53.0,2.1420000000000003
54.0,2.9599999999999995
55.0,5.6883333333333335
56.0,4.266666666666667
57.0,1.8849999999999998
58.0,1.8716666666666668
59.0,3.0100000000000002
60.0,6.126666666666666
61.0,4.133333333333334
62.0,2.9450000000000003
63.0,5.2733333333333325
64.0,10.761666666666665
65.0,3.34
66.0,2.9583333333333335
67.0,5.621666666666667
69.0,4.2716666666666665
70.0,3.9183333333333334
71.0,2.74
72.0,3.328333333333333
73.0,3.975
74.0,5.1883333333333335
75.0,4.176666666666667
77.0,12.213333333333333
78.0,2.4383333333333335
79.0,5.0616666666666665
80.0,3.4233333333333333
81.0,2.313333333333333
82.0,6.876666666666666
83.0,3.543333333333333
84.0,3.1783333333333332
85.0,3.5716666666666668
86.0,3.0500000000000007
87.0,3.3716666666666666
88.0,3.9033333333333338
89.0,8.293333333333335
90.0,2.6016666666666666
91.0,3.303333333333333
92.0,3.8983333333333334
93.0,3.3716666666666666
94.0,3.0416666666666665
95.0,4.673333333333333
96.0,3.666666666666666
97.0,3.09
98.0,4.715000000000001
99.0,4.23
100.0,4.34
101.0,4.628333333333334
102.0,4.8133333333333335
103.0,3.1999999999999997
104.0,2.461666666666667
106.0,1.83
107.0,6.044999999999999
108.0,3.48
109.0,3.878333333333334

2025-01-25 05:53:58 - root - INFO - SQL:
SELECT "_year", "_month", MAX("composition") AS "max_composition"
   FROM "interest_metrics"
   GROUP BY "_year", "_month"
   LIMIT 100;
Results:
_year,_month,max_composition
,,9.66
2018.0,7.0,18.82
2018.0,8.0,13.9
2018.0,9.0,18.18
2018.0,10.0,20.28
2018.0,11.0,19.45
2018.0,12.0,21.2
2019.0,1.0,18.99
2019.0,2.0,18.39
2019.0,3.0,12.64
2019.0,4.0,11.01
2019.0,5.0,7.53
2019.0,6.0,6.94
2019.0,7.0,7.19
2019.0,8.0,7.1

2025-01-25 05:53:58 - root - INFO - SQL:
SELECT im."interest_name", imt."_year", imt."_month", imt."composition", imt."ranking"
    FROM "interest_metrics" AS imt
    JOIN "interest_map" AS im ON imt."interest_id" = im."id"
    ORDER BY imt."ranking" ASC
    LIMIT 100;
Results:
interest_name,_year,_month,composition,ranking
Vacation Rental Accommodation Researchers,2018.0,7.0,11.89,1
Running Enthusiasts,2018.0,8.0,5.52,1
Running Enthusiasts,2018.0,9.0,4.61,1
Running Enthusiasts,2018.0,10.0,6.39,1
Competitive Tri-Athletes,2018.0,11.0,7.56,1
Winter Apparel Shoppers,2018.0,12.0,10.46,1
Winter Apparel Shoppers,2019.0,1.0,9.1,1
Winter Apparel Shoppers,2019.0,2.0,9.85,1
Winter Apparel Shoppers,2019.0,3.0,8.5,1
Winter Apparel Shoppers,2019.0,4.0,7.28,1
Winter Apparel Shoppers,2019.0,5.0,5.08,1
Winter Apparel Shoppers,2019.0,6.0,5.03,1
Winter Apparel Shoppers,2019.0,7.0,5.91,1
Winter Apparel Shoppers,2019.0,8.0,7.01,1
Luxury Second Home Owners,2018.0,7.0,9.93,2
Competitive Tri-Athletes,2018.0,8.0,8.41,2
Competitive Tri-Athletes,2018.0,9.0,7.06,2
Competitive Tri-Athletes,2018.0,10.0,8.29,2
Running Enthusiasts,2018.0,11.0,4.82,2
Fitness Activity Tracker Users,2018.0,12.0,6.09,2
Mens Shoe Shoppers,2019.0,1.0,6.24,2
Mens Shoe Shoppers,2019.0,2.0,7.43,2
Mens Shoe Shoppers,2019.0,3.0,6.63,2
Mens Shoe Shoppers,2019.0,4.0,5.46,2
Mens Shoe Shoppers,2019.0,5.0,4.47,2
Lacrosse Enthusiasts,2019.0,6.0,4.32,2
Mens Shoe Shoppers,2019.0,7.0,5.74,2
Mens Shoe Shoppers,2019.0,8.0,6.71,2
Online Home Decor Shoppers,2018.0,7.0,10.85,3
Mens Shoe Shoppers,2018.0,8.0,8.98,3
Lacrosse Enthusiasts,2018.0,9.0,6.49,3
Competitive Sports Participants,2018.0,10.0,7.19,3
Competitive Sports Participants,2018.0,11.0,4.96,3
Competitive Tri-Athletes,2018.0,12.0,7.17,3
Fitness Activity Tracker Users,2019.0,1.0,5.29,3
Luxury Retail Researchers,2019.0,2.0,6.55,3
Lacrosse Enthusiasts,2019.0,3.0,6.52,3
Luxury Home Fixture Shoppers,2019.0,4.0,6.92,3
Lacrosse Enthusiasts,2019.0,5.0,3.68,3
Fitness Activity Tracker Users,2019.0,5.0,3.67,3
Fitness Activity Tracker Users,2019.0,6.0,3.86,3
Lacrosse Enthusiasts,2019.0,7.0,4.79,3
Lacrosse Enthusiasts,2019.0,8.0,5.5,3
Hair Care Shoppers,2018.0,7.0,10.32,4
Competitive Sports Participants,2018.0,8.0,5.94,4
Mens Shoe Shoppers,2018.0,9.0,6.81,4
Mens Shoe Shoppers,2018.0,10.0,9.12,4
Shoe Shoppers,2018.0,11.0,6.49,4
Running Enthusiasts,2018.0,12.0,4.82,4
Luxury Retail Researchers,2019.0,1.0,5.86,4
Shoe Shoppers,2019.0,2.0,6.59,4
Fitness Activity Tracker Users,2019.0,3.0,5.6,4
Lacrosse Enthusiasts,2019.0,4.0,4.84,4
Mens Shoe Shoppers,2019.0,6.0,4.21,4
Fitness Activity Tracker Users,2019.0,7.0,4.59,4
Fitness Activity Tracker Users,2019.0,8.0,5.62,4
Nutrition Conscious Eaters,2018.0,7.0,10.77,5
Preppy Clothing Shoppers,2018.0,8.0,8.82,5
Competitive Sports Participants,2018.0,9.0,4.9,5
Shoe Shoppers,2018.0,10.0,7.21,5
Cycling Enthusiasts,2018.0,11.0,4.89,5
Mens Shoe Shoppers,2018.0,12.0,7.02,5
Luxury Retail Researchers,2018.0,12.0,6.46,5
Competitive Tri-Athletes,2019.0,1.0,6.39,5
Luxury Home Fixture Shoppers,2019.0,2.0,7.64,5
Preppy Clothing Shoppers,2019.0,3.0,6.63,5
Fitness Activity Tracker Users,2019.0,4.0,4.58,5
Big & Tall Men,2019.0,5.0,3.86,5
Shoe Shoppers,2019.0,5.0,3.84,5
Preppy Clothing Shoppers,2019.0,6.0,4.55,5
Preppy Clothing Shoppers,2019.0,7.0,5.13,5
Preppy Clothing Shoppers,2019.0,8.0,6.19,5
Healthy Eaters,2018.0,7.0,10.82,6
Luxury Retail Researchers,2018.0,8.0,7.94,6
Preppy Clothing Shoppers,2018.0,9.0,7.49,6
Lacrosse Enthusiasts,2018.0,10.0,7.4,6
Sporting Goods Shoppers,2018.0,11.0,4.99,6
Preppy Clothing Shoppers,2019.0,1.0,6.33,6
Preppy Clothing Shoppers,2019.0,2.0,6.88,6
Sporting Goods Shoppers,2019.0,3.0,5.17,6
Aspen Skiers and Snowboarders,2019.0,4.0,4.83,6
Elite Cycling Gear Shoppers,2019.0,4.0,4.28,6
Competitive Tri-Athletes,2019.0,4.0,5.41,6
World Cup Enthusiasts,2019.0,6.0,4.5,6
Elite Cycling Gear Shoppers,2019.0,7.0,4.07,6
Swimming Enthusiasts,2019.0,8.0,4.73,6
Luxury Travel Researchers,2018.0,7.0,11.21,7
Shoe Shoppers,2018.0,8.0,7.9,7
Luxury Retail Researchers,2018.0,9.0,6.05,7
Cycling Enthusiasts,2018.0,10.0,5.89,7
Mens Shoe Shoppers,2018.0,11.0,6.37,7
Swimming Enthusiasts,2018.0,12.0,4.54,7
Luxury Home Fixture Shoppers,2019.0,1.0,6.96,7
World Cup Enthusiasts,2019.0,2.0,6.92,7
Shoe Shoppers,2019.0,3.0,5.76,7
Home Lending Researchers,2019.0,5.0,3.12,7
Elite Cycling Gear Shoppers,2019.0,5.0,3.46,7
Rowing Enthusiasts,2019.0,6.0,3.5,7
Swimming Enthusiasts,2019.0,7.0,3.7,7
Luxury Boutique Hotel Researchers,2019.0,8.0,5.86,7

2025-01-25 05:53:58 - root - INFO - itercount: 0
2025-01-25 05:53:58 - root - INFO - Table: weekly_salesDDL:
CREATE TABLE "weekly_sales" (
"week_date" TEXT,
  "region" TEXT,
  "platform" TEXT,
  "segment" TEXT,
  "customer_type" TEXT,
  "transactions" INTEGER,
  "sales" INTEGER
)
Table: shopping_cart_usersDDL:
CREATE TABLE "shopping_cart_users" (
"user_id" INTEGER,
  "cookie_id" TEXT,
  "start_date" TEXT
)
Table: bitcoin_membersDDL:
CREATE TABLE "bitcoin_members" (
"member_id" TEXT,
  "first_name" TEXT,
  "region" TEXT
)
Table: interest_metricsDDL:
CREATE TABLE "interest_metrics" (
"_month" REAL,
  "_year" REAL,
  "month_year" TEXT,
  "interest_id" REAL,
  "composition" REAL,
  "index_value" REAL,
  "ranking" INTEGER,
  "percentile_ranking" REAL
)
Table: customer_regionsDDL:
CREATE TABLE "customer_regions" (
"region_id" INTEGER,
  "region_name" TEXT
)
Table: customer_transactionsDDL:
CREATE TABLE "customer_transactions" (
"customer_id" INTEGER,
  "txn_date" TEXT,
  "txn_type" TEXT,
  "txn_amount" INTEGER
)
Table: bitcoin_transactionsDDL:
CREATE TABLE "bitcoin_transactions" (
"txn_id" INTEGER,
  "member_id" TEXT,
  "ticker" TEXT,
  "txn_date" TEXT,
  "txn_type" TEXT,
  "quantity" REAL,
  "percentage_fee" REAL,
  "txn_time" TEXT
)
Table: customer_nodesDDL:
CREATE TABLE "customer_nodes" (
"customer_id" INTEGER,
  "region_id" INTEGER,
  "node_id" INTEGER,
  "start_date" TEXT,
  "end_date" TEXT
)
Table: cleaned_weekly_salesDDL:
CREATE TABLE "cleaned_weekly_sales" (
"week_date_formatted" TEXT,
  "week_date" TEXT,
  "region" TEXT,
  "platform" TEXT,
  "segment" TEXT,
  "customer_type" TEXT,
  "transactions" INTEGER,
  "sales" INTEGER,
  "week_number" INTEGER,
  "month_number" INTEGER,
  "calendar_year" INTEGER,
  "age_band" TEXT,
  "demographic" TEXT,
  "avg_transaction" REAL
)
Table: veg_txn_dfDDL:
CREATE TABLE "veg_txn_df" (
"index" INTEGER,
  "txn_date" TEXT,
  "txn_time" TEXT,
  "item_code" INTEGER,
  "qty_sold(kg)" REAL,
  "unit_selling_px_rmb/kg" REAL,
  "sale/return" TEXT,
  "discount(%)" INTEGER,
  "day_of_week" TEXT
)
Table: shopping_cart_eventsDDL:
CREATE TABLE "shopping_cart_events" (
"visit_id" TEXT,
  "cookie_id" TEXT,
  "page_id" INTEGER,
  "event_type" INTEGER,
  "sequence_number" INTEGER,
  "event_time" TEXT
)
Table: shopping_cart_page_hierarchyDDL:
CREATE TABLE "shopping_cart_page_hierarchy" (
"page_id" INTEGER,
  "page_name" TEXT,
  "product_category" TEXT,
  "product_id" REAL
)
Table: bitcoin_pricesDDL:
CREATE TABLE "bitcoin_prices" (
"ticker" TEXT,
  "market_date" TEXT,
  "price" REAL,
  "open" REAL,
  "high" REAL,
  "low" REAL,
  "volume" TEXT,
  "change" TEXT
)
Table: interest_mapDDL:
CREATE TABLE "interest_map" (
"id" INTEGER,
  "interest_name" TEXT,
  "interest_summary" TEXT,
  "created_at" TEXT,
  "last_modified" TEXT
)
Table: veg_loss_rate_dfDDL:
CREATE TABLE "veg_loss_rate_df" (
"index" INTEGER,
  "item_code" INTEGER,
  "item_name" TEXT,
  "loss_rate_%" REAL
)
Table: shopping_cart_campaign_identifierDDL:
CREATE TABLE "shopping_cart_campaign_identifier" (
"campaign_id" INTEGER,
  "products" TEXT,
  "campaign_name" TEXT,
  "start_date" TEXT,
  "end_date" TEXT
)
Table: veg_catDDL:
CREATE TABLE "veg_cat" (
"index" INTEGER,
  "item_code" INTEGER,
  "item_name" TEXT,
  "category_code" INTEGER,
  "category_name" TEXT
)
Table: veg_whsle_dfDDL:
CREATE TABLE "veg_whsle_df" (
"index" INTEGER,
  "whsle_date" TEXT,
  "item_code" INTEGER,
  "whsle_px_rmb-kg" REAL
)
Table: shopping_cart_event_identifierDDL:
CREATE TABLE "shopping_cart_event_identifier" (
"event_type" INTEGER,
  "event_name" TEXT
)
External knowledge that might be helpful: 
None
The table structure information is (table names): 
['weekly_sales', 'shopping_cart_users', 'bitcoin_members', 'interest_metrics', 'customer_regions', 'customer_transactions', 'bitcoin_transactions', 'customer_nodes', 'cleaned_weekly_sales', 'veg_txn_df', 'shopping_cart_events', 'shopping_cart_page_hierarchy', 'bitcoin_prices', 'interest_map', 'veg_loss_rate_df', 'shopping_cart_campaign_identifier', 'veg_cat', 'veg_whsle_df', 'shopping_cart_event_identifier']
Begin Exploring Related Columns
**Relevant Tables and Columns:**

1. **Table: `interest_metrics`**

   - **`_month`**: Indicates the month (as a number from 1 to 12). Potential usage: Filtering data by month.
   - **`_year`**: Indicates the year. Potential usage: Filtering data by year.
   - **`month_year`**: Text representation of the month and year. Potential usage: Grouping and displaying dates in the output.
   - **`interest_id`**: Identifier for the interest. Potential usage: Joining with `interest_map` to get the interest name.
   - **`composition`**: Composition value of the interest. Potential usage: Calculating the maximum average composition value for each month.
   - **`ranking`**: Ranking of the interest. Potential usage: Identifying top-ranking interests from previous months.

2. **Table: `interest_map`**

   - **`id`**: Identifier for the interest (matches `interest_id` in `interest_metrics`). Potential usage: Joining with `interest_metrics` to get the interest name.
   - **`interest_name`**: Name of the interest. Potential usage: Displaying the interest name in the output.

**Conditions:**

- **Date Range**: From September 2018 (`_year` = 2018, `_month` >= 9) to August 2019 (`_year` = 2019, `_month` <= 8).
- **Ranking**: May need to consider the ranking of interests from one month and two months prior.

---

**SQL Queries:**

Below are 10 SQL queries to explore and understand the relevant data.

1. **View a Sample of All Data in `interest_metrics`:**

   ```sql
   SELECT * FROM "interest_metrics" LIMIT 100;
   ```

2. **Get Distinct Years and Months in the Data:**

   ```sql
   SELECT DISTINCT "_year", "_month" FROM "interest_metrics" LIMIT 100;
   ```

3. **Display Interest IDs with Their Composition and Ranking:**

   ```sql
   SELECT "interest_id", "composition", "ranking" FROM "interest_metrics" LIMIT 100;
   ```

4. **Filter Data for September 2018:**

   ```sql
   SELECT "month_year", "interest_id", "composition"
   FROM "interest_metrics"
   WHERE "_year" = 2018 AND "_month" = 9
   LIMIT 100;
   ```

5. **Join `interest_metrics` with `interest_map` to Get Interest Names:**

   ```sql
   SELECT im."interest_name", imt."composition"
   FROM "interest_metrics" AS imt
   JOIN "interest_map" AS im ON imt."interest_id" = im."id"
   LIMIT 100;
   ```

6. **Get Distinct Interest IDs and Names:**

   ```sql
   SELECT DISTINCT imt."interest_id", im."interest_name"
   FROM "interest_metrics" AS imt
   JOIN "interest_map" AS im ON imt."interest_id" = im."id"
   LIMIT 100;
   ```

7. **View Composition Values for September 2018:**

   ```sql
   SELECT "composition"
   FROM "interest_metrics"
   WHERE "_year" = 2018 AND "_month" = 9
   LIMIT 100;
   ```

8. **Calculate Average Composition per Interest ID for 2018:**

   ```sql
   SELECT "interest_id", AVG("composition") AS "avg_composition"
   FROM "interest_metrics"
   WHERE "_year" = 2018
   GROUP BY "interest_id"
   LIMIT 100;
   ```

9. **Find the Maximum Composition Value per Month:**

   ```sql
   SELECT "_year", "_month", MAX("composition") AS "max_composition"
   FROM "interest_metrics"
   GROUP BY "_year", "_month"
   LIMIT 100;
   ```

10. **List Interests with Their Rankings Ordered by Ranking Ascending:**

    ```sql
    SELECT im."interest_name", imt."_year", imt."_month", imt."composition", imt."ranking"
    FROM "interest_metrics" AS imt
    JOIN "interest_map" AS im ON imt."interest_id" = im."id"
    ORDER BY imt."ranking" ASC
    LIMIT 100;
    ```

These queries help in understanding the structure and contents of the relevant tables, which is essential for calculating the maximum average composition values, rolling averages, and identifying top-ranking interests for the specified date range.Query:
SELECT * FROM "interest_metrics" LIMIT 100;
Answer:
_month,_year,month_year,interest_id,composition,index_value,ranking,percentile_ranking
7.0,2018.0,07-2018,32486.0,11.89,6.19,1,99.86
7.0,2018.0,07-2018,6106.0,9.93,5.31,2,99.73
7.0,2018.0,07-2018,18923.0,10.85,5.29,3,99.59
7.0,2018.0,07-2018,6344.0,10.32,5.1,4,99.45
7.0,2018.0,07-2018,100.0,10.77,5.04,5,99.31
7.0,2018.0,07-2018,69.0,10.82,5.03,6,99.18
7.0,2018.0,07-2018,79.0,11.21,4.97,7,99.04
7.0,2018.0,07-2018,6111.0,10.71,4.83,8,98.9
7.0,2018.0,07-2018,6214.0,9.71,4.83,8,98.9
7.0,2018.0,07-2018,19422.0,10.11,4.81,10,98.63
7.0,2018.0,07-2018,6110.0,11.57,4.79,11,98.49
7.0,2018.0,07-2018,4895.0,9.47,4.67,12,98.35
7.0,2018.0,07-2018,6217.0,10.8,4.62,13,98.22
7.0,2018.0,07-2018,4.0,13.97,4.53,14,98.08
7.0,2018.0,07-2018,6218.0,9.29,4.5,15,97.94
7.0,2018.0,07-2018,6123.0,9.49,4.49,16,97.81
7.0,2018.0,07-2018,171.0,14.91,4.47,17,97.67
7.0,2018.0,07-2018,19613.0,12.62,4.38,18,97.53
7.0,2018.0,07-2018,17.0,7.89,4.15,19,97.39
7.0,2018.0,07-2018,6.0,11.99,4.08,20,97.26
7.0,2018.0,07-2018,6013.0,9.35,3.99,21,97.12
7.0,2018.0,07-2018,4870.0,10.29,3.95,22,96.98
7.0,2018.0,07-2018,19423.0,12.22,3.92,23,96.84
7.0,2018.0,07-2018,6089.0,6.97,3.84,24,96.71
7.0,2018.0,07-2018,161.0,11.48,3.82,25,96.57
7.0,2018.0,07-2018,6286.0,14.1,3.82,25,96.57
7.0,2018.0,07-2018,5991.0,11.04,3.81,27,96.3
7.0,2018.0,07-2018,92.0,9.77,3.77,28,96.16
7.0,2018.0,07-2018,6184.0,13.35,3.75,29,96.02
7.0,2018.0,07-2018,19621.0,11.61,3.74,30,95.88
7.0,2018.0,07-2018,63.0,9.37,3.73,31,95.75
7.0,2018.0,07-2018,103.0,6.61,3.69,32,95.61
7.0,2018.0,07-2018,38.0,9.48,3.66,33,95.47
7.0,2018.0,07-2018,17786.0,13.67,3.65,34,95.34
7.0,2018.0,07-2018,6232.0,9.97,3.64,35,95.2
7.0,2018.0,07-2018,165.0,6.05,3.59,36,95.06
7.0,2018.0,07-2018,18351.0,6.09,3.58,37,94.92
7.0,2018.0,07-2018,15.0,6.9,3.56,38,94.79
,,,,6.12,2.85,43,96.4
7.0,2018.0,07-2018,17314.0,10.43,3.55,39,94.65
7.0,2018.0,07-2018,6151.0,6.83,3.55,39,94.65
7.0,2018.0,07-2018,4914.0,7.42,3.55,39,94.65
7.0,2018.0,07-2018,115.0,11.68,3.53,42,94.24
7.0,2018.0,07-2018,5968.0,12.87,3.53,42,94.24
7.0,2018.0,07-2018,36.0,9.27,3.51,44,93.96
7.0,2018.0,07-2018,5943.0,6.37,3.48,45,93.83
7.0,2018.0,07-2018,133.0,10.91,3.44,46,93.69
7.0,2018.0,07-2018,1.0,7.02,3.44,46,93.69
7.0,2018.0,07-2018,114.0,6.25,3.41,48,93.42
7.0,2018.0,07-2018,6107.0,8.84,3.39,49,93.28
7.0,2018.0,07-2018,150.0,5.3,3.39,49,93.28
7.0,2018.0,07-2018,60.0,6.71,3.36,51,93.0
7.0,2018.0,07-2018,96.0,7.21,3.35,52,92.87
7.0,2018.0,07-2018,22403.0,12.27,3.33,53,92.73
7.0,2018.0,07-2018,40.0,10.86,3.32,54,92.59
7.0,2018.0,07-2018,19758.0,6.28,3.32,54,92.59
7.0,2018.0,07-2018,17730.0,11.38,3.3,56,92.32
7.0,2018.0,07-2018,5938.0,11.63,3.29,57,92.18
7.0,2018.0,07-2018,4869.0,6.47,3.29,57,92.18
7.0,2018.0,07-2018,4897.0,12.93,3.27,59,91.91
7.0,2018.0,07-2018,6029.0,8.72,3.26,60,91.77
7.0,2018.0,07-2018,31.0,7.9,3.26,60,91.77
7.0,2018.0,07-2018,16137.0,9.65,3.24,62,91.5
7.0,2018.0,07-2018,6330.0,6.82,3.22,63,91.36
7.0,2018.0,07-2018,6334.0,11.63,3.22,63,91.36
7.0,2018.0,07-2018,6315.0,8.14,3.22,63,91.36
7.0,2018.0,07-2018,4852.0,6.77,3.2,66,90.95
7.0,2018.0,07-2018,16.0,6.24,3.2,66,90.95
7.0,2018.0,07-2018,6108.0,6.65,3.17,68,90.67
7.0,2018.0,07-2018,6206.0,10.76,3.17,68,90.67
7.0,2018.0,07-2018,6006.0,6.26,3.15,70,90.4
7.0,2018.0,07-2018,6228.0,10.22,3.15,70,90.4
7.0,2018.0,07-2018,20768.0,6.53,3.15,70,90.4
7.0,2018.0,07-2018,4902.0,8.17,3.12,73,89.99
7.0,2018.0,07-2018,6277.0,11.72,3.1,74,89.85
7.0,2018.0,07-2018,19757.0,10.95,3.08,75,89.71
7.0,2018.0,07-2018,4911.0,6.87,3.08,75,89.71
,,,,7.13,2.84,45,96.23
7.0,2018.0,07-2018,4910.0,6.09,3.07,77,89.44
7.0,2018.0,07-2018,6285.0,9.97,3.04,78,89.3
7.0,2018.0,07-2018,11974.0,7.19,3.02,79,89.16
7.0,2018.0,07-2018,6219.0,6.37,3.02,79,89.16
7.0,2018.0,07-2018,10250.0,11.4,3.01,81,88.89
7.0,2018.0,07-2018,6128.0,6.28,2.98,82,88.75
7.0,2018.0,07-2018,5946.0,5.99,2.97,83,88.61
7.0,2018.0,07-2018,158.0,7.46,2.97,83,88.61
7.0,2018.0,07-2018,15935.0,9.13,2.96,85,88.34
7.0,2018.0,07-2018,4855.0,5.99,2.95,86,88.2
7.0,2018.0,07-2018,149.0,6.88,2.95,86,88.2
7.0,2018.0,07-2018,16197.0,6.13,2.94,88,87.93
7.0,2018.0,07-2018,11067.0,5.14,2.93,89,87.79
7.0,2018.0,07-2018,17674.0,6.25,2.92,90,87.65
7.0,2018.0,07-2018,4913.0,6.76,2.92,90,87.65
7.0,2018.0,07-2018,56.0,7.09,2.91,92,87.38
7.0,2018.0,07-2018,6341.0,5.68,2.91,92,87.38
7.0,2018.0,07-2018,6316.0,6.52,2.91,92,87.38
7.0,2018.0,07-2018,18647.0,6.45,2.91,92,87.38
7.0,2018.0,07-2018,17803.0,6.21,2.91,92,87.38
7.0,2018.0,07-2018,23.0,5.41,2.89,97,86.69
7.0,2018.0,07-2018,132.0,7.48,2.88,98,86.56
Query:
SELECT DISTINCT "_year", "_month" FROM "interest_metrics" LIMIT 100;
Answer:
_year,_month
2018.0,7.0
,
2018.0,8.0
2018.0,9.0
2018.0,10.0
2018.0,11.0
2018.0,12.0
2019.0,1.0
2019.0,2.0
2019.0,3.0
2019.0,4.0
2019.0,5.0
2019.0,6.0
2019.0,7.0
2019.0,8.0
Query:
SELECT "interest_id", "composition", "ranking" FROM "interest_metrics" LIMIT 100;
Answer:
interest_id,composition,ranking
32486.0,11.89,1
6106.0,9.93,2
18923.0,10.85,3
6344.0,10.32,4
100.0,10.77,5
69.0,10.82,6
79.0,11.21,7
6111.0,10.71,8
6214.0,9.71,8
19422.0,10.11,10
6110.0,11.57,11
4895.0,9.47,12
6217.0,10.8,13
4.0,13.97,14
6218.0,9.29,15
6123.0,9.49,16
171.0,14.91,17
19613.0,12.62,18
17.0,7.89,19
6.0,11.99,20
6013.0,9.35,21
4870.0,10.29,22
19423.0,12.22,23
6089.0,6.97,24
161.0,11.48,25
6286.0,14.1,25
5991.0,11.04,27
92.0,9.77,28
6184.0,13.35,29
19621.0,11.61,30
63.0,9.37,31
103.0,6.61,32
38.0,9.48,33
17786.0,13.67,34
6232.0,9.97,35
165.0,6.05,36
18351.0,6.09,37
15.0,6.9,38
,6.12,43
17314.0,10.43,39
6151.0,6.83,39
4914.0,7.42,39
115.0,11.68,42
5968.0,12.87,42
36.0,9.27,44
5943.0,6.37,45
133.0,10.91,46
1.0,7.02,46
114.0,6.25,48
6107.0,8.84,49
150.0,5.3,49
60.0,6.71,51
96.0,7.21,52
22403.0,12.27,53
40.0,10.86,54
19758.0,6.28,54
17730.0,11.38,56
5938.0,11.63,57
4869.0,6.47,57
4897.0,12.93,59
6029.0,8.72,60
31.0,7.9,60
16137.0,9.65,62
6330.0,6.82,63
6334.0,11.63,63
6315.0,8.14,63
4852.0,6.77,66
16.0,6.24,66
6108.0,6.65,68
6206.0,10.76,68
6006.0,6.26,70
6228.0,10.22,70
20768.0,6.53,70
4902.0,8.17,73
6277.0,11.72,74
19757.0,10.95,75
4911.0,6.87,75
,7.13,45
4910.0,6.09,77
6285.0,9.97,78
11974.0,7.19,79
6219.0,6.37,79
10250.0,11.4,81
6128.0,6.28,82
5946.0,5.99,83
158.0,7.46,83
15935.0,9.13,85
4855.0,5.99,86
149.0,6.88,86
16197.0,6.13,88
11067.0,5.14,89
17674.0,6.25,90
4913.0,6.76,90
56.0,7.09,92
6341.0,5.68,92
6316.0,6.52,92
18647.0,6.45,92
17803.0,6.21,92
23.0,5.41,97
132.0,7.48,98
Query:
SELECT "month_year", "interest_id", "composition"
   FROM "interest_metrics"
   WHERE "_year" = 2018 AND "_month" = 9
   LIMIT 100;
Answer:
month_year,interest_id,composition
09-2018,6218.0,4.61
09-2018,6285.0,7.06
09-2018,22502.0,6.49
09-2018,115.0,6.81
09-2018,6013.0,4.9
09-2018,6206.0,7.49
09-2018,4.0,6.05
09-2018,171.0,6.36
09-2018,38.0,4.67
09-2018,6219.0,4.28
09-2018,35904.0,5.19
09-2018,16137.0,5.25
09-2018,6110.0,4.48
09-2018,19250.0,6.62
09-2018,16.0,3.66
09-2018,5970.0,6.95
09-2018,21242.0,5.84
09-2018,17269.0,5.28
09-2018,21057.0,18.18
09-2018,32486.0,4.86
09-2018,19613.0,5.1
09-2018,6107.0,4.4
09-2018,151.0,5.57
09-2018,6023.0,5.85
09-2018,6232.0,4.48
09-2018,17320.0,2.8
09-2018,35903.0,5.23
09-2018,33.0,5.16
09-2018,12133.0,12.8
09-2018,4897.0,6.35
09-2018,31.0,4.09
09-2018,19423.0,5.04
09-2018,6.0,9.48
09-2018,12025.0,7.83
09-2018,21061.0,7.06
09-2018,6284.0,11.06
09-2018,5968.0,5.79
09-2018,6378.0,5.01
09-2018,5969.0,14.29
09-2018,17.0,3.07
09-2018,6144.0,4.53
09-2018,6286.0,11.18
09-2018,17786.0,5.83
09-2018,77.0,10.28
09-2018,19298.0,11.74
09-2018,17785.0,5.93
09-2018,79.0,3.32
09-2018,39.0,9.93
09-2018,64.0,11.93
09-2018,49.0,3.58
09-2018,16138.0,5.01
09-2018,6184.0,4.87
09-2018,11067.0,6.71
09-2018,4943.0,9.91
09-2018,34465.0,2.83
09-2018,32704.0,5.74
09-2018,18923.0,3.14
09-2018,88.0,3.23
09-2018,10008.0,5.45
09-2018,6029.0,7.9
09-2018,17730.0,5.95
09-2018,147.0,3.68
09-2018,11974.0,3.43
09-2018,158.0,8.43
09-2018,4902.0,3.71
09-2018,6304.0,4.51
09-2018,34463.0,2.69
09-2018,19295.0,5.84
09-2018,21060.0,7.03
09-2018,6210.0,4.31
09-2018,18347.0,4.95
09-2018,33971.0,4.75
09-2018,56.0,3.55
09-2018,7537.0,3.79
09-2018,35.0,3.27
09-2018,10980.0,5.21
09-2018,5896.0,4.55
09-2018,6305.0,5.38
09-2018,98.0,3.71
09-2018,12031.0,5.1
09-2018,35953.0,4.17
09-2018,4914.0,2.89
09-2018,6142.0,4.35
09-2018,19603.0,4.45
09-2018,21062.0,5.68
09-2018,6315.0,3.16
09-2018,7557.0,4.0
09-2018,6250.0,3.64
09-2018,4924.0,3.75
09-2018,19621.0,9.86
09-2018,33959.0,2.53
09-2018,22427.0,3.88
09-2018,21059.0,5.11
09-2018,7527.0,4.39
09-2018,83.0,3.04
09-2018,22403.0,5.42
09-2018,113.0,3.91
09-2018,18204.0,4.94
09-2018,137.0,4.06
09-2018,6340.0,4.58
Query:
SELECT im."interest_name", imt."composition"
   FROM "interest_metrics" AS imt
   JOIN "interest_map" AS im ON imt."interest_id" = im."id"
   LIMIT 100;
Answer:
interest_name,composition
Vacation Rental Accommodation Researchers,11.89
Luxury Second Home Owners,9.93
Online Home Decor Shoppers,10.85
Hair Care Shoppers,10.32
Nutrition Conscious Eaters,10.77
Healthy Eaters,10.82
Luxury Travel Researchers,11.21
Wine Lovers,10.71
Home Remodelers,9.71
Home Design and Living Publication Readers,10.11
Apartment Furniture Shoppers,11.57
Mature Parents,9.47
Weight Loss Researchers,10.8
Luxury Retail Researchers,13.97
Running Enthusiasts,9.29
Misc-Deal Seekers or Coupon Shoppers,9.49
Shoe Shoppers,14.91
Land Rover Shoppers,12.62
MLB Fans,7.89
Vacation Planners,11.99
Competitive Sports Participants,9.35
Tech-Savvy Moms,10.29
Kitchen Appliance Shoppers,12.22
Mens Fitness Publication Readers,6.97
Travel Reward Points Enthusiasts,11.48
Luxury Hotel Guests,14.1
Gluten-Free Recipe Researchers,11.04
Parents with Kids,9.77
Reusable Drinkware Shoppers,13.35
Portugal Trip Planners,11.61
New & Expecting Parents,9.37
Live Concert Fans,6.61
Sporting Goods Shoppers,9.48
Womens Fashion Brands Shoppers,13.67
Golf Enthusiasts,9.97
Liberal News Readers,6.05
Drama Show Watchers,6.09
NBA Fans,6.9
Lobbyists,10.43
Wedding Registrants,6.83
Mens Health Researchers,7.42
Mens Shoe Shoppers,11.68
Luxury Kitchen Goods Shoppers,12.87
Baby Products Buyers,9.27
Financial News Readers,6.37
High End Camera Shoppers - Dupe,10.91
Fitness Enthusiasts,7.02
Womens Fashion Magazine Readers,6.25
Ski House Second Home Owners,8.84
TV Junkies,5.3
Online Health Researchers,6.71
Exercise and Gym Researchers,7.21
Pandora Jewelry Shoppers,12.27
Bed & Bath Shoppers,10.86
Dog Lovers,6.28
Luxury Department Store Shoppers,11.38
Costa Rica Trip Planners,11.63
Womens Fitness Enthusiasts,6.47
Parents of Teenagers Going to College,12.93
Indoor Cycling & Spinning Enthusiasts,8.72
Home Decor Shoppers,7.9
Olympics Fans,9.65
Pet Store Goers,6.82
Supermarket Shoppers,11.63
Boston Trip Planners,8.14
Health & Fitness,6.77
NCAA Fans,6.24
Beach House Second Home Owners,6.65
Preppy Clothing Shoppers,10.76
Breast Cancer Fund Raisers,6.26
Paleo Eaters,10.22
Beer Aficionados,6.53
Yogis,8.17
Harry Potter Fans,11.72
Natural Pet Food Shoppers,10.95
Dieters,6.87
Cholesterol Researchers,6.09
Competitive Tri-Athletes,9.97
Price Conscious Home Shoppers,7.19
Cycling Enthusiasts,6.37
Halloween Costume Shoppers,11.4
Realtors & Real Estate Researchers,6.28
Readers of Filipinos Content,5.99
Flight and Hotel Shoppers,7.46
Pregnancy Resources Researchers,9.13
Entertainment & Tabloid Magazine Readers,5.99
Streaming Radio Listeners,6.88
Financial Business Intelligence Researchers,6.13
NCAA Football Fans,5.14
Medical Advice Researchers,6.25
Womens Health Researchers,6.76
Discount Device Shoppers,7.09
Pharmacy Shoppers,5.68
Philadelphia Trip Planners,6.52
Gourmet Food & Wine Researchers,6.45
TV Advertising Professionals,6.21
Techies,5.41
Apple Fans,7.48
Executive and C-Suite,6.45
Luggage Shoppers,9.64
Query:
SELECT DISTINCT imt."interest_id", im."interest_name"
   FROM "interest_metrics" AS imt
   JOIN "interest_map" AS im ON imt."interest_id" = im."id"
   LIMIT 100;
Answer:
interest_id,interest_name
32486.0,Vacation Rental Accommodation Researchers
6106.0,Luxury Second Home Owners
18923.0,Online Home Decor Shoppers
6344.0,Hair Care Shoppers
100.0,Nutrition Conscious Eaters
69.0,Healthy Eaters
79.0,Luxury Travel Researchers
6111.0,Wine Lovers
6214.0,Home Remodelers
19422.0,Home Design and Living Publication Readers
6110.0,Apartment Furniture Shoppers
4895.0,Mature Parents
6217.0,Weight Loss Researchers
4.0,Luxury Retail Researchers
6218.0,Running Enthusiasts
6123.0,Misc-Deal Seekers or Coupon Shoppers
171.0,Shoe Shoppers
19613.0,Land Rover Shoppers
17.0,MLB Fans
6.0,Vacation Planners
6013.0,Competitive Sports Participants
4870.0,Tech-Savvy Moms
19423.0,Kitchen Appliance Shoppers
6089.0,Mens Fitness Publication Readers
161.0,Travel Reward Points Enthusiasts
6286.0,Luxury Hotel Guests
5991.0,Gluten-Free Recipe Researchers
92.0,Parents with Kids
6184.0,Reusable Drinkware Shoppers
19621.0,Portugal Trip Planners
63.0,New & Expecting Parents
103.0,Live Concert Fans
38.0,Sporting Goods Shoppers
17786.0,Womens Fashion Brands Shoppers
6232.0,Golf Enthusiasts
165.0,Liberal News Readers
18351.0,Drama Show Watchers
15.0,NBA Fans
17314.0,Lobbyists
6151.0,Wedding Registrants
4914.0,Mens Health Researchers
115.0,Mens Shoe Shoppers
5968.0,Luxury Kitchen Goods Shoppers
36.0,Baby Products Buyers
5943.0,Financial News Readers
133.0,High End Camera Shoppers - Dupe
1.0,Fitness Enthusiasts
114.0,Womens Fashion Magazine Readers
6107.0,Ski House Second Home Owners
150.0,TV Junkies
60.0,Online Health Researchers
96.0,Exercise and Gym Researchers
22403.0,Pandora Jewelry Shoppers
40.0,Bed & Bath Shoppers
19758.0,Dog Lovers
17730.0,Luxury Department Store Shoppers
5938.0,Costa Rica Trip Planners
4869.0,Womens Fitness Enthusiasts
4897.0,Parents of Teenagers Going to College
6029.0,Indoor Cycling & Spinning Enthusiasts
31.0,Home Decor Shoppers
16137.0,Olympics Fans
6330.0,Pet Store Goers
6334.0,Supermarket Shoppers
6315.0,Boston Trip Planners
4852.0,Health & Fitness
16.0,NCAA Fans
6108.0,Beach House Second Home Owners
6206.0,Preppy Clothing Shoppers
6006.0,Breast Cancer Fund Raisers
6228.0,Paleo Eaters
20768.0,Beer Aficionados
4902.0,Yogis
6277.0,Harry Potter Fans
19757.0,Natural Pet Food Shoppers
4911.0,Dieters
4910.0,Cholesterol Researchers
6285.0,Competitive Tri-Athletes
11974.0,Price Conscious Home Shoppers
6219.0,Cycling Enthusiasts
10250.0,Halloween Costume Shoppers
6128.0,Realtors & Real Estate Researchers
5946.0,Readers of Filipinos Content
158.0,Flight and Hotel Shoppers
15935.0,Pregnancy Resources Researchers
4855.0,Entertainment & Tabloid Magazine Readers
149.0,Streaming Radio Listeners
16197.0,Financial Business Intelligence Researchers
11067.0,NCAA Football Fans
17674.0,Medical Advice Researchers
4913.0,Womens Health Researchers
56.0,Discount Device Shoppers
6341.0,Pharmacy Shoppers
6316.0,Philadelphia Trip Planners
18647.0,Gourmet Food & Wine Researchers
17803.0,TV Advertising Professionals
23.0,Techies
132.0,Apple Fans
6365.0,Executive and C-Suite
6378.0,Luggage Shoppers
Query:
SELECT "composition"
   FROM "interest_metrics"
   WHERE "_year" = 2018 AND "_month" = 9
   LIMIT 100;
Answer:
composition
4.61
7.06
6.49
6.81
4.9
7.49
6.05
6.36
4.67
4.28
5.19
5.25
4.48
6.62
3.66
6.95
5.84
5.28
18.18
4.86
5.1
4.4
5.57
5.85
4.48
2.8
5.23
5.16
12.8
6.35
4.09
5.04
9.48
7.83
7.06
11.06
5.79
5.01
14.29
3.07
4.53
11.18
5.83
10.28
11.74
5.93
3.32
9.93
11.93
3.58
5.01
4.87
6.71
9.91
2.83
5.74
3.14
3.23
5.45
7.9
5.95
3.68
3.43
8.43
3.71
4.51
2.69
5.84
7.03
4.31
4.95
4.75
3.55
3.79
3.27
5.21
4.55
5.38
3.71
5.1
4.17
2.89
4.35
4.45
5.68
3.16
4.0
3.64
3.75
9.86
2.53
3.88
5.11
4.39
3.04
5.42
3.91
4.94
4.06
4.58
Query:
SELECT "interest_id", AVG("composition") AS "avg_composition"
   FROM "interest_metrics"
   WHERE "_year" = 2018
   GROUP BY "interest_id"
   LIMIT 100;
Answer:
interest_id,avg_composition
1.0,3.723333333333333
2.0,2.6216666666666666
3.0,2.8516666666666666
4.0,7.903333333333333
5.0,4.993333333333333
6.0,10.31
7.0,2.2916666666666665
8.0,3.4566666666666666
12.0,4.055
13.0,3.2699999999999996
14.0,2.33
15.0,3.3266666666666667
16.0,4.306666666666667
17.0,3.9150000000000005
18.0,2.54
19.0,3.018333333333333
20.0,3.1616666666666666
21.0,4.298333333333334
22.0,3.375
23.0,2.97
24.0,3.358333333333334
25.0,3.56
26.0,2.78
27.0,3.7483333333333335
28.0,6.159999999999999
29.0,3.6033333333333335
30.0,5.698333333333333
31.0,5.080000000000001
33.0,5.926666666666667
34.0,9.07
35.0,3.8333333333333335
36.0,5.071666666666666
37.0,4.685
38.0,6.079999999999999
39.0,11.700000000000001
40.0,5.058333333333333
41.0,3.898333333333333
42.0,4.131666666666667
43.0,3.791666666666666
44.0,3.8683333333333336
45.0,3.666666666666666
46.0,2.713333333333333
48.0,4.838333333333334
49.0,3.893333333333333
50.0,3.018333333333333
51.0,2.4333333333333336
53.0,2.1420000000000003
54.0,2.9599999999999995
55.0,5.6883333333333335
56.0,4.266666666666667
57.0,1.8849999999999998
58.0,1.8716666666666668
59.0,3.0100000000000002
60.0,6.126666666666666
61.0,4.133333333333334
62.0,2.9450000000000003
63.0,5.2733333333333325
64.0,10.761666666666665
65.0,3.34
66.0,2.9583333333333335
67.0,5.621666666666667
69.0,4.2716666666666665
70.0,3.9183333333333334
71.0,2.74
72.0,3.328333333333333
73.0,3.975
74.0,5.1883333333333335
75.0,4.176666666666667
77.0,12.213333333333333
78.0,2.4383333333333335
79.0,5.0616666666666665
80.0,3.4233333333333333
81.0,2.313333333333333
82.0,6.876666666666666
83.0,3.543333333333333
84.0,3.1783333333333332
85.0,3.5716666666666668
86.0,3.0500000000000007
87.0,3.3716666666666666
88.0,3.9033333333333338
89.0,8.293333333333335
90.0,2.6016666666666666
91.0,3.303333333333333
92.0,3.8983333333333334
93.0,3.3716666666666666
94.0,3.0416666666666665
95.0,4.673333333333333
96.0,3.666666666666666
97.0,3.09
98.0,4.715000000000001
99.0,4.23
100.0,4.34
101.0,4.628333333333334
102.0,4.8133333333333335
103.0,3.1999999999999997
104.0,2.461666666666667
106.0,1.83
107.0,6.044999999999999
108.0,3.48
109.0,3.878333333333334
Query:
SELECT "_year", "_month", MAX("composition") AS "max_composition"
   FROM "interest_metrics"
   GROUP BY "_year", "_month"
   LIMIT 100;
Answer:
_year,_month,max_composition
,,9.66
2018.0,7.0,18.82
2018.0,8.0,13.9
2018.0,9.0,18.18
2018.0,10.0,20.28
2018.0,11.0,19.45
2018.0,12.0,21.2
2019.0,1.0,18.99
2019.0,2.0,18.39
2019.0,3.0,12.64
2019.0,4.0,11.01
2019.0,5.0,7.53
2019.0,6.0,6.94
2019.0,7.0,7.19
2019.0,8.0,7.1
Query:
SELECT im."interest_name", imt."_year", imt."_month", imt."composition", imt."ranking"
    FROM "interest_metrics" AS imt
    JOIN "interest_map" AS im ON imt."interest_id" = im."id"
    ORDER BY imt."ranking" ASC
    LIMIT 100;
Answer:
interest_name,_year,_month,composition,ranking
Vacation Rental Accommodation Researchers,2018.0,7.0,11.89,1
Running Enthusiasts,2018.0,8.0,5.52,1
Running Enthusiasts,2018.0,9.0,4.61,1
Running Enthusiasts,2018.0,10.0,6.39,1
Competitive Tri-Athletes,2018.0,11.0,7.56,1
Winter Apparel Shoppers,2018.0,12.0,10.46,1
Winter Apparel Shoppers,2019.0,1.0,9.1,1
Winter Apparel Shoppers,2019.0,2.0,9.85,1
Winter Apparel Shoppers,2019.0,3.0,8.5,1
Winter Apparel Shoppers,2019.0,4.0,7.28,1
Winter Apparel Shoppers,2019.0,5.0,5.08,1
Winter Apparel Shoppers,2019.0,6.0,5.03,1
Winter Apparel Shoppers,2019.0,7.0,5.91,1
Winter Apparel Shoppers,2019.0,8.0,7.01,1
Luxury Second Home Owners,2018.0,7.0,9.93,2
Competitive Tri-Athletes,2018.0,8.0,8.41,2
Competitive Tri-Athletes,2018.0,9.0,7.06,2
Competitive Tri-Athletes,2018.0,10.0,8.29,2
Running Enthusiasts,2018.0,11.0,4.82,2
Fitness Activity Tracker Users,2018.0,12.0,6.09,2
Mens Shoe Shoppers,2019.0,1.0,6.24,2
Mens Shoe Shoppers,2019.0,2.0,7.43,2
Mens Shoe Shoppers,2019.0,3.0,6.63,2
Mens Shoe Shoppers,2019.0,4.0,5.46,2
Mens Shoe Shoppers,2019.0,5.0,4.47,2
Lacrosse Enthusiasts,2019.0,6.0,4.32,2
Mens Shoe Shoppers,2019.0,7.0,5.74,2
Mens Shoe Shoppers,2019.0,8.0,6.71,2
Online Home Decor Shoppers,2018.0,7.0,10.85,3
Mens Shoe Shoppers,2018.0,8.0,8.98,3
Lacrosse Enthusiasts,2018.0,9.0,6.49,3
Competitive Sports Participants,2018.0,10.0,7.19,3
Competitive Sports Participants,2018.0,11.0,4.96,3
Competitive Tri-Athletes,2018.0,12.0,7.17,3
Fitness Activity Tracker Users,2019.0,1.0,5.29,3
Luxury Retail Researchers,2019.0,2.0,6.55,3
Lacrosse Enthusiasts,2019.0,3.0,6.52,3
Luxury Home Fixture Shoppers,2019.0,4.0,6.92,3
Lacrosse Enthusiasts,2019.0,5.0,3.68,3
Fitness Activity Tracker Users,2019.0,5.0,3.67,3
Fitness Activity Tracker Users,2019.0,6.0,3.86,3
Lacrosse Enthusiasts,2019.0,7.0,4.79,3
Lacrosse Enthusiasts,2019.0,8.0,5.5,3
Hair Care Shoppers,2018.0,7.0,10.32,4
Competitive Sports Participants,2018.0,8.0,5.94,4
Mens Shoe Shoppers,2018.0,9.0,6.81,4
Mens Shoe Shoppers,2018.0,10.0,9.12,4
Shoe Shoppers,2018.0,11.0,6.49,4
Running Enthusiasts,2018.0,12.0,4.82,4
Luxury Retail Researchers,2019.0,1.0,5.86,4
Shoe Shoppers,2019.0,2.0,6.59,4
Fitness Activity Tracker Users,2019.0,3.0,5.6,4
Lacrosse Enthusiasts,2019.0,4.0,4.84,4
Mens Shoe Shoppers,2019.0,6.0,4.21,4
Fitness Activity Tracker Users,2019.0,7.0,4.59,4
Fitness Activity Tracker Users,2019.0,8.0,5.62,4
Nutrition Conscious Eaters,2018.0,7.0,10.77,5
Preppy Clothing Shoppers,2018.0,8.0,8.82,5
Competitive Sports Participants,2018.0,9.0,4.9,5
Shoe Shoppers,2018.0,10.0,7.21,5
Cycling Enthusiasts,2018.0,11.0,4.89,5
Mens Shoe Shoppers,2018.0,12.0,7.02,5
Luxury Retail Researchers,2018.0,12.0,6.46,5
Competitive Tri-Athletes,2019.0,1.0,6.39,5
Luxury Home Fixture Shoppers,2019.0,2.0,7.64,5
Preppy Clothing Shoppers,2019.0,3.0,6.63,5
Fitness Activity Tracker Users,2019.0,4.0,4.58,5
Big & Tall Men,2019.0,5.0,3.86,5
Shoe Shoppers,2019.0,5.0,3.84,5
Preppy Clothing Shoppers,2019.0,6.0,4.55,5
Preppy Clothing Shoppers,2019.0,7.0,5.13,5
Preppy Clothing Shoppers,2019.0,8.0,6.19,5
Healthy Eaters,2018.0,7.0,10.82,6
Luxury Retail Researchers,2018.0,8.0,7.94,6
Preppy Clothing Shoppers,2018.0,9.0,7.49,6
Lacrosse Enthusiasts,2018.0,10.0,7.4,6
Sporting Goods Shoppers,2018.0,11.0,4.99,6
Preppy Clothing Shoppers,2019.0,1.0,6.33,6
Preppy Clothing Shoppers,2019.0,2.0,6.88,6
Sporting Goods Shoppers,2019.0,3.0,5.17,6
Aspen Skiers and Snowboarders,2019.0,4.0,4.83,6
Elite Cycling Gear Shoppers,2019.0,4.0,4.28,6
Competitive Tri-Athletes,2019.0,4.0,5.41,6
World Cup Enthusiasts,2019.0,6.0,4.5,6
Elite Cycling Gear Shoppers,2019.0,7.0,4.07,6
Swimming Enthusiasts,2019.0,8.0,4.73,6
Luxury Travel Researchers,2018.0,7.0,11.21,7
Shoe Shoppers,2018.0,8.0,7.9,7
Luxury Retail Researchers,2018.0,9.0,6.05,7
Cycling Enthusiasts,2018.0,10.0,5.89,7
Mens Shoe Shoppers,2018.0,11.0,6.37,7
Swimming Enthusiasts,2018.0,12.0,4.54,7
Luxury Home Fixture Shoppers,2019.0,1.0,6.96,7
World Cup Enthusiasts,2019.0,2.0,6.92,7
Shoe Shoppers,2019.0,3.0,5.76,7
Home Lending Researchers,2019.0,5.0,3.12,7
Elite Cycling Gear Shoppers,2019.0,5.0,3.46,7
Rowing Enthusiasts,2019.0,6.0,3.5,7
Swimming Enthusiasts,2019.0,7.0,3.7,7
Luxury Boutique Hotel Researchers,2019.0,8.0,5.86,7
End Exploring Related Columns
Task: Please review our interest data from September 2018 to August 2019. I need to know the max average composition value for each month, as well as the three-month rolling average. Ensure the output includes the date, the interest name, the max index composition for that month, the rolling average, and the top-ranking interests from the one month ago and two months ago with their names.

Please answer only one complete SQL in sqlite dialect in ```sql``` format.
Usage example: ```sql
SELECT DISTINCT "column_name" FROM "table_name" WHERE ... ``` (Replace "table_name" with the actual table name. Enclose table and column names with double quotations if they contain special characters or match reserved keywords.)
Follow the answer format like: ```csv
Date,Interest_name,Max_index_composition_for_month,Rolling_average,Top_ranking_interest_1_month_ago,Top_ranking_interest_2_months_ago
date1:str,interest1:str,max_composition1:float,rolling_average1:float,top_interest_1_month_ago1:str,top_interest_2_months_ago1:str
date2:str,interest2:str,max_composition2:float,rolling_average2:float,top_interest_1_month_ago2:str,top_interest_2_months_ago2:str
...
```

The table above outlines the maximum average composition values for each month from September 2018 to August 2019. It includes the date, the interest name with the highest composition for that month, the maximum index composition value, the three-month rolling average of the composition values, and the names of the top-ranking interests from one month and two months prior..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: 

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-25 05:55:14 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 05:55:14 - root - INFO - ```sql
WITH months AS (
  SELECT DISTINCT "_year", "_month", "month_year",
         (CAST("_year" as INTEGER) * 12 + CAST("_month" as INTEGER)) as "month_num"
  FROM "interest_metrics"
  WHERE ( ("_year" = 2018 AND "_month" >= 9) OR ("_year" = 2019 AND "_month" <= 8))
),
max_composition_per_month AS (
  SELECT im."_year", im."_month", im."month_year",
         MAX(im."composition") as "max_composition"
  FROM "interest_metrics" im
  WHERE ( ("_year" = 2018 AND "_month" >= 9) OR ("_year" = 2019 AND "_month" <= 8))
  GROUP BY im."_year", im."_month", im."month_year"
),
interest_with_max_composition AS (
  SELECT im."_year", im."_month", im."month_year", im."interest_id", im."composition"
  FROM "interest_metrics" im
  JOIN max_composition_per_month mc
    ON im."_year" = mc."_year" AND im."_month" = mc."_month" AND im."composition" = mc."max_composition"
),
current_data AS (
  SELECT m."_year", m."_month", m."month_year", m."month_num",
         iwc."interest_id", iwc."composition" as "max_composition"
  FROM months m
  JOIN interest_with_max_composition iwc
    ON m."_year" = iwc."_year" AND m."_month" = iwc."_month"
),
top_ranking_interest AS (
  SELECT im."_year", im."_month", im."interest_id",
         (CAST(im."_year" as INTEGER) * 12 + CAST(im."_month" as INTEGER)) as "month_num"
  FROM "interest_metrics" im
  WHERE im."ranking" = 1
)
SELECT
  cd."month_year" AS "Date",
  imap_current."interest_name" AS "Interest_name",
  cd."max_composition" AS "Max_index_composition_for_month",
  ROUND(
    (cd."max_composition" + COALESCE(cd_prev1."max_composition", 0) + COALESCE(cd_prev2."max_composition", 0)) /
    (1 + CASE WHEN cd_prev1."max_composition" IS NOT NULL THEN 1 ELSE 0 END + CASE WHEN cd_prev2."max_composition" IS NOT NULL THEN 1 ELSE 0 END), 2) AS "Rolling_average",
  imap_top1."interest_name" AS "Top_ranking_interest_1_month_ago",
  imap_top2."interest_name" AS "Top_ranking_interest_2_months_ago"
FROM current_data cd
LEFT JOIN current_data cd_prev1 ON cd_prev1."month_num" = cd."month_num" - 1
LEFT JOIN current_data cd_prev2 ON cd_prev2."month_num" = cd."month_num" - 2
LEFT JOIN top_ranking_interest tri1 ON tri1."month_num" = cd."month_num" - 1
LEFT JOIN top_ranking_interest tri2 ON tri2."month_num" = cd."month_num" - 2
LEFT JOIN "interest_map" imap_current ON cd."interest_id" = imap_current."id"
LEFT JOIN "interest_map" imap_top1 ON tri1."interest_id" = imap_top1."id"
LEFT JOIN "interest_map" imap_top2 ON tri2."interest_id" = imap_top2."id"
ORDER BY cd."_year", cd."_month";
```
2025-01-25 05:55:14 - root - INFO - itercount: 1
2025-01-25 05:55:14 - root - INFO - 0
2025-01-25 05:55:14 - root - INFO - results: 
Date,Interest_name,Max_index_composition_for_month,Rolling_average,Top_ranking_interest_1_month_ago,Top_ranking_interest_2_months_ago
09-2018,Work Comes First Travelers,18.18,18.18,Running Enthusiasts,Vacation Rental Accommodation Researchers
10-2018,Work Comes First Travelers,20.28,19.23,Running Enthusiasts,Running Enthusiasts
11-2018,Work Comes First Travelers,19.45,19.3,Running Enthusiasts,Running Enthusiasts
12-2018,Work Comes First Travelers,21.2,20.31,Competitive Tri-Athletes,Running Enthusiasts
01-2019,Work Comes First Travelers,18.99,19.88,Winter Apparel Shoppers,Competitive Tri-Athletes
02-2019,Work Comes First Travelers,18.39,19.53,Winter Apparel Shoppers,Winter Apparel Shoppers
03-2019,Luxury Boutique Hotel Researchers,12.64,16.67,Winter Apparel Shoppers,Winter Apparel Shoppers
04-2019,Luxury Bedding Shoppers,11.01,14.01,Winter Apparel Shoppers,Winter Apparel Shoppers
05-2019,Luxury Bedding Shoppers,7.53,10.39,Winter Apparel Shoppers,Winter Apparel Shoppers
06-2019,Gym Equipment Owners,6.94,8.49,Winter Apparel Shoppers,Winter Apparel Shoppers
07-2019,Gym Equipment Owners,7.19,7.22,Winter Apparel Shoppers,Winter Apparel Shoppers
08-2019,Gym Equipment Owners,7.1,7.08,Winter Apparel Shoppers,Winter Apparel Shoppers


2025-01-25 05:55:14 - root - INFO - Please check the answer again by reviewing Please review our interest data from September 2018 to August 2019. I need to know the max average composition value for each month, as well as the three-month rolling average. Ensure the output includes the date, the interest name, the max index composition for that month, the rolling average, and the top-ranking interests from the one month ago and two months ago with their names., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Date,Interest_name,Max_index_composition_for_month,Rolling_average,Top_ranking_interest_1_month_ago,Top_ranking_interest_2_months_ago
date1:str,interest1:str,max_composition1:float,rolling_average1:float,top_interest_1_month_ago1:str,top_interest_2_months_ago1:str
date2:str,interest2:str,max_composition2:float,rolling_average2:float,top_interest_1_month_ago2:str,top_interest_2_months_ago2:str
...
```

The table above outlines the maximum average composition values for each month from September 2018 to August 2019. It includes the date, the interest name with the highest composition for that month, the maximum index composition value, the three-month rolling average of the composition values, and the names of the top-ranking interests from one month and two months prior. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Date,Interest_name,Max_index_composition_for_month,Rolling_average,Top_ranking_interest_1_month_ago,Top_ranking_interest_2_months_ago
09-2018,Work Comes First Travelers,18.18,18.18,Running Enthusiasts,Vacation Rental Accommodation Researchers
10-2018,Work Comes First Travelers,20.28,19.23,Running Enthusiasts,Running Enthusiasts
11-2018,Work Comes First Travelers,19.45,19.3,Running Enthusiasts,Running Enthusiasts
12-2018,Work Comes First Travelers,21.2,20.31,Competitive Tri-Athletes,Running Enthusiasts
01-2019,Work Comes First Travelers,18.99,19.88,Winter Apparel Shoppers,Competitive Tri-Athletes
02-2019,Work Comes First Travelers,18.39,19.53,Winter Apparel Shoppers,Winter Apparel Shoppers
03-2019,Luxury Boutique Hotel Researchers,12.64,16.67,Winter Apparel Shoppers,Winter Apparel Shoppers
04-2019,Luxury Bedding Shoppers,11.01,14.01,Winter Apparel Shoppers,Winter Apparel Shoppers
05-2019,Luxury Bedding Shoppers,7.53,10.39,Winter Apparel Shoppers,Winter Apparel Shoppers
06-2019,Gym Equipment Owners,6.94,8.49,Winter Apparel Shoppers,Winter Apparel Shoppers
07-2019,Gym Equipment Owners,7.19,7.22,Winter Apparel Shoppers,Winter Apparel Shoppers
08-2019,Gym Equipment Owners,7.1,7.08,Winter Apparel Shoppers,Winter Apparel Shoppers
Current sql:
WITH months AS (
  SELECT DISTINCT "_year", "_month", "month_year",
         (CAST("_year" as INTEGER) * 12 + CAST("_month" as INTEGER)) as "month_num"
  FROM "interest_metrics"
  WHERE ( ("_year" = 2018 AND "_month" >= 9) OR ("_year" = 2019 AND "_month" <= 8))
),
max_composition_per_month AS (
  SELECT im."_year", im."_month", im."month_year",
         MAX(im."composition") as "max_composition"
  FROM "interest_metrics" im
  WHERE ( ("_year" = 2018 AND "_month" >= 9) OR ("_year" = 2019 AND "_month" <= 8))
  GROUP BY im."_year", im."_month", im."month_year"
),
interest_with_max_composition AS (
  SELECT im."_year", im."_month", im."month_year", im."interest_id", im."composition"
  FROM "interest_metrics" im
  JOIN max_composition_per_month mc
    ON im."_year" = mc."_year" AND im."_month" = mc."_month" AND im."composition" = mc."max_composition"
),
current_data AS (
  SELECT m."_year", m."_month", m."month_year", m."month_num",
         iwc."interest_id", iwc."composition" as "max_composition"
  FROM months m
  JOIN interest_with_max_composition iwc
    ON m."_year" = iwc."_year" AND m."_month" = iwc."_month"
),
top_ranking_interest AS (
  SELECT im."_year", im."_month", im."interest_id",
         (CAST(im."_year" as INTEGER) * 12 + CAST(im."_month" as INTEGER)) as "month_num"
  FROM "interest_metrics" im
  WHERE im."ranking" = 1
)
SELECT
  cd."month_year" AS "Date",
  imap_current."interest_name" AS "Interest_name",
  cd."max_composition" AS "Max_index_composition_for_month",
  ROUND(
    (cd."max_composition" + COALESCE(cd_prev1."max_composition", 0) + COALESCE(cd_prev2."max_composition", 0)) /
    (1 + CASE WHEN cd_prev1."max_composition" IS NOT NULL THEN 1 ELSE 0 END + CASE WHEN cd_prev2."max_composition" IS NOT NULL THEN 1 ELSE 0 END), 2) AS "Rolling_average",
  imap_top1."interest_name" AS "Top_ranking_interest_1_month_ago",
  imap_top2."interest_name" AS "Top_ranking_interest_2_months_ago"
FROM current_data cd
LEFT JOIN current_data cd_prev1 ON cd_prev1."month_num" = cd."month_num" - 1
LEFT JOIN current_data cd_prev2 ON cd_prev2."month_num" = cd."month_num" - 2
LEFT JOIN top_ranking_interest tri1 ON tri1."month_num" = cd."month_num" - 1
LEFT JOIN top_ranking_interest tri2 ON tri2."month_num" = cd."month_num" - 2
LEFT JOIN "interest_map" imap_current ON cd."interest_id" = imap_current."id"
LEFT JOIN "interest_map" imap_top1 ON tri1."interest_id" = imap_top1."id"
LEFT JOIN "interest_map" imap_top2 ON tri2."interest_id" = imap_top2."id"
ORDER BY cd."_year", cd."_month";For tasks asking fullname or name, you should combine first name and last name into one column called name. Format: ```csv
name
name:str```

2025-01-25 05:56:11 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 05:56:11 - root - INFO - ```sql
WITH months AS (
  SELECT DISTINCT "_year", "_month", "month_year",
         (CAST("_year" as INTEGER) * 12 + CAST("_month" as INTEGER)) as "month_num"
  FROM "interest_metrics"
  WHERE ( ("_year" = 2018 AND "_month" >= 9) OR ("_year" = 2019 AND "_month" <= 8))
),
max_composition_per_month AS (
  SELECT im."_year", im."_month", im."month_year",
         MAX(im."composition") as "max_composition"
  FROM "interest_metrics" im
  WHERE ( ("_year" = 2018 AND "_month" >= 9) OR ("_year" = 2019 AND "_month" <= 8))
  GROUP BY im."_year", im."_month", im."month_year"
),
interest_with_max_composition AS (
  SELECT im."_year", im."_month", im."month_year", im."interest_id", im."composition"
  FROM "interest_metrics" im
  JOIN max_composition_per_month mc
    ON im."_year" = mc."_year" AND im."_month" = mc."_month" AND im."composition" = mc."max_composition"
),
current_data AS (
  SELECT m."_year", m."_month", m."month_year", m."month_num",
         iwc."interest_id", iwc."composition" as "max_composition"
  FROM months m
  JOIN interest_with_max_composition iwc
    ON m."_year" = iwc."_year" AND m."_month" = iwc."_month"
),
top_ranking_interest AS (
  SELECT im."_year", im."_month", im."interest_id",
         (CAST(im."_year" as INTEGER) * 12 + CAST(im."_month" as INTEGER)) as "month_num"
  FROM "interest_metrics" im
  WHERE im."ranking" = 1
)
SELECT
  cd."month_year" AS "Date",
  imap_current."interest_name" AS "Interest_name",
  cd."max_composition" AS "Max_index_composition_for_month",
  ROUND(
    (cd."max_composition" + COALESCE(cd_prev1."max_composition", 0) + COALESCE(cd_prev2."max_composition", 0)) /
    (1 + CASE WHEN cd_prev1."max_composition" IS NOT NULL THEN 1 ELSE 0 END + CASE WHEN cd_prev2."max_composition" IS NOT NULL THEN 1 ELSE 0 END), 4) AS "Rolling_average",
  imap_top1."interest_name" AS "Top_ranking_interest_1_month_ago",
  imap_top2."interest_name" AS "Top_ranking_interest_2_months_ago"
FROM current_data cd
LEFT JOIN current_data cd_prev1 ON cd_prev1."month_num" = cd."month_num" - 1
LEFT JOIN current_data cd_prev2 ON cd_prev2."month_num" = cd."month_num" - 2
LEFT JOIN top_ranking_interest tri1 ON tri1."month_num" = cd."month_num" - 1
LEFT JOIN top_ranking_interest tri2 ON tri2."month_num" = cd."month_num" - 2
LEFT JOIN "interest_map" imap_current ON cd."interest_id" = imap_current."id"
LEFT JOIN "interest_map" imap_top1 ON tri1."interest_id" = imap_top1."id"
LEFT JOIN "interest_map" imap_top2 ON tri2."interest_id" = imap_top2."id"
ORDER BY cd."_year", cd."_month";
```
2025-01-25 05:56:11 - root - INFO - itercount: 2
2025-01-25 05:56:11 - root - INFO - 0
2025-01-25 05:56:11 - root - INFO - Total iteration counts: 2
