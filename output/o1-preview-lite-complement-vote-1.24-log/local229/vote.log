After analyzing the three SQL queries and their respective outputs, I have determined that **`1result.sql`** is the correct solution that accurately addresses the problem.

### Reasoning:

**Understanding the Problem:**

- **Objective:** For each match, identify the partnership with the highest number of runs.
- **Partnership Definition:** A partnership starts when two batsmen bat together and ends when one of them gets out.
- **Requirements:**
  - Calculate individual runs scored by each batsman during their partnership.
  - Include the total partnership runs (sum of individual runs and extras).
  - List the player with the higher individual score as player 1. If scores are equal, the player with the higher ID is player 1.

---

**Comparison of the SQL Queries:**

1. **`0result.sql`:**

   - **Approach:**
     - Defines a new partnership whenever the combination of `striker` and `non_striker` changes.
     - Uses the change in batsmen pairs to detect partnership boundaries.
   - **Issue:**
     - In cricket, a partnership does not end when the striker and non-striker swap roles due to runs being scored. The partnership continues until a wicket falls.
     - This query incorrectly segments partnerships whenever the batsmen swap ends, leading to inaccurate partnership runs.

2. **`1result.sql`:**

   - **Approach:**
     - Utilizes the occurrence of wickets to define partnership boundaries.
     - Assigns a `partnership_id` based on the cumulative count of wickets fallen.
     - Groups deliveries between wickets as a single partnership.
     - Accurately aggregates runs for each batsman during the partnership.
     - Determines the highest partnership per match by total runs.
   - **Advantage:**
     - Correctly aligns with the cricketing definition of a partnership.
     - Ensures that partnerships are only segmented when a wicket falls, as per the rules of the game.
     - Provides accurate calculation of individual and partnership runs.

3. **`2result.sql`:**

   - **Approach:**
     - Detects a change in partnership when the combination of batsmen changes or when a wicket falls.
     - Similar to `0result.sql`, it may incorrectly consider a change in striker and non-striker as a new partnership.
   - **Issue:**
     - May misidentify partnership boundaries due to changes in striker and non-striker caused by runs scored.
     - Does not exclusively rely on wickets to define partnerships, leading to inaccuracies.

---

**Conclusion:**

- **`1result.sql`** correctly implements the logic required to identify partnerships based on wickets.
- It ensures accurate calculation of individual runs and total partnership runs.
- The query adheres to the definitions and conditions specified in the problem statement.
- The outputs align with expected results, showing the highest partnerships for each match with correct player ordering.

---

**Therefore, the correct SQL query is:**

```plaintext
1result.sql
```