2025-01-26 17:45:31 - openai._base_client - INFO - Retrying request to /chat/completions in 0.383774 seconds
2025-01-26 17:46:23 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 17:46:28 - root - INFO - SQL:
SELECT DISTINCT `user_pseudo_id`, `user_first_touch_timestamp`
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
   LIMIT 100;
Results:
user_pseudo_id,user_first_touch_timestamp
64BB7DFAE772A77F70FB63373D0808F5,1516479005247000
2F0F260BD7B876C346B41977D0D03D62,1467727817981000
094CDCB8EF23B9B55134A0B5E22DFFCB,1472941410073000
C73D0BE8A6C303863FCE487F9996028C,1531679854912000
D0F280B12652EB0D74F6BC74AB13606F,1529344858634000
E6FEE8B98E75EA5311FE004F98559A27,1521946646783000
E84BFE62196E059C66D049BA9A14061C,1531179900628000
243E22C5C25E4B000CB550B45B47F604,1531637942089000
83B2810298A42907030999DED800A7D4,1489087758173000
7842C62D45ECE888132F21C9F4417B21,1515272726578000
4BDC831A6940071E2461D0B5293A329E,1488508268636000
21CE5B5B5AEC049C3D4CDA89C18B270F,1464617612378000
CF62C17E245938F28D9A86634660A2FD,1529262503490000
C1DF3340FCB33B0C2A7C7D5A3C5E69F0,1527872784373000
33E8B12FD99A752C7586B94FF0F8C349,1531586833429000
FA944230F31FE2B6FB255BFC9679C0F8,1531783187081000
9B18A1CBA96D52D05CFA7CB7C9011EDE,1531098830942000
A16FA7098A55DCBCC8D215E689824390,1464615090108000
9373B5D36107012F6F9137090C523FA1,1528353187792000
1A7F253A85B952C329518608DEC20138,1521550188005000
FEA816FC51362F4CCCBD617511B9336E,1531803632195000
E5A2CB7A471E740E758BE5E2E0C79BC2,1520549151394000
AC1B8C257039C7FB911CA9AE69D4C614,1513778602956000
16AD1C031AF106322F082EE8EA61C295,1501266707839000
CABE7E24215A5C36862658A36AE5CE12,1525418668571000
3D1B58553D2E2D4DD5DFCF251D5E23B2,1496360951993000
D842320AECB686B41C2F8E8876794D34,1517687182199000
2D564EF6689F36BC98392CEFA97704E6,1502408406017000
C6DE585349744A40725DB0AB17041BA3,1522097746155000
148AAE2C85735FF43C7590EC37054C17,1521502367883000
EF5027132DCDB94B2406560CAF7A5938,1531706432735000
31FE3578985C855CE7FB123A32602FFC,1509191363764000
98855C776EDC9A25108F347E3AD89E46,1531727894423000
7CE7A576C0E09936E97D001D6FE8B9E4,1531763582935000
DB3B6E984B29883EA02F1A504A33730F,1483323445545000
B563CCAD7F0812CFC2FE5A008AED7235,1491529223998000
E4C6FF8288DD4BFCDE93E2218E20643B,1523428610846000
7F089F4710219060252DB2AEF508A662,1507748384050000
FCA08F9B0DCB6E33A74F672CE7F73BE3,1530710036656000
C3326C2CCF5D46173E4973A13512B163,1508538455320000
80810BB18ADB73C9585D86058958AF35,1467887587757000
3F1D1603DF714929E1563C9C815D1E83,1529434429280000
8203F492EE32192EA37B224B66C6958F,1519437246725000
0724A88C106D372E33A95B3BE7FB9C51,1475997333391000
EBE661044C1949546986A852F35083A1,1478199290063000
465B5DC1BA69633FE49EFA52F08CBB40,1527399612300000
49D9F34F22480512FE5B725D46D2B216,1535653765712000
7B425893FE3DD64FFB439238785817F2,1535596530365000
1F4F2D78CA1957949E2420A7EDBCCB84,1525809762716000
1E9F6BA9BD8C45633C26F42995A77775,1502465070469000

2025-01-26 17:46:34 - root - INFO - SQL:
SELECT DISTINCT `event_date`
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
   ORDER BY `event_date`
   LIMIT 100;
Results:
event_date
20180709
20180710
20180711
20180712
20180713
20180714
20180715
20180716
20180717
20180718
20180719
20180720
20180721
20180722
20180723
20180724
20180725
20180726
20180727
20180728
20180729
20180730
20180731
20180801
20180802
20180803
20180804
20180805
20180806
20180807
20180808
20180809
20180810
20180811
20180812
20180813
20180814
20180815
20180816
20180817
20180818
20180819
20180820
20180821
20180822
20180823
20180824
20180825
20180826
20180827
20180828
20180829
20180830
20180831
20180901
20180902
20180903
20180904
20180905
20180906
20180907
20180908
20180909
20180910
20180911
20180912
20180913
20180914
20180915
20180916
20180917
20180918
20180919
20180920
20180921
20180922
20180923
20180924
20180925
20180926
20180927
20180928
20180929
20180930
20181001
20181002

2025-01-26 17:46:39 - root - INFO - SQL:
SELECT `event_date`, COUNT(*) AS total_events
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
   GROUP BY `event_date`
   ORDER BY `event_date`
   LIMIT 100;
Results:
event_date,total_events
20180709,50000
20180710,50000
20180711,50000
20180712,50000
20180713,50000
20180714,50000
20180715,50000
20180716,50000
20180717,50000
20180718,50000
20180719,50000
20180720,50000
20180721,50000
20180722,50000
20180723,50000
20180724,50000
20180725,50000
20180726,50000
20180727,50000
20180728,50000
20180729,50000
20180730,50000
20180731,50000
20180801,50000
20180802,50000
20180803,50000
20180804,50000
20180805,50000
20180806,50000
20180807,50000
20180808,50000
20180809,50000
20180810,50000
20180811,50000
20180812,50000
20180813,50000
20180814,50000
20180815,50000
20180816,50000
20180817,50000
20180818,50000
20180819,50000
20180820,50000
20180821,50000
20180822,50000
20180823,50000
20180824,50000
20180825,50000
20180826,50000
20180827,50000
20180828,50000
20180829,50000
20180830,50000
20180831,50000
20180901,50000
20180902,50000
20180903,50000
20180904,50000
20180905,50000
20180906,50000
20180907,50000
20180908,50000
20180909,50000
20180910,50000
20180911,50000
20180912,50000
20180913,50000
20180914,50000
20180915,50000
20180916,50000
20180917,50000
20180918,50000
20180919,50000
20180920,50000
20180921,50000
20180922,50000
20180923,50000
20180924,50000
20180925,50000
20180926,50000
20180927,50000
20180928,50000
20180929,50000
20180930,50000
20181001,50000
20181002,50000

2025-01-26 17:46:45 - root - INFO - SQL:
SELECT `event_date`, COUNT(DISTINCT `user_pseudo_id`) AS unique_users
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
   GROUP BY `event_date`
   ORDER BY `event_date`
   LIMIT 100;
Results:
event_date,unique_users
20180709,422
20180710,452
20180711,426
20180712,453
20180713,470
20180714,414
20180715,407
20180716,406
20180717,368
20180718,377
20180719,346
20180720,431
20180721,506
20180722,413
20180723,439
20180724,435
20180725,413
20180726,419
20180727,466
20180728,483
20180729,491
20180730,488
20180731,448
20180801,447
20180802,512
20180803,548
20180804,555
20180805,524
20180806,505
20180807,493
20180808,506
20180809,455
20180810,372
20180811,456
20180812,470
20180813,512
20180814,444
20180815,425
20180816,459
20180817,458
20180818,498
20180819,467
20180820,471
20180821,485
20180822,459
20180823,427
20180824,485
20180825,495
20180826,455
20180827,495
20180828,467
20180829,504
20180830,496
20180831,466
20180901,465
20180902,485
20180903,466
20180904,476
20180905,533
20180906,521
20180907,533
20180908,534
20180909,554
20180910,539
20180911,474
20180912,577
20180913,503
20180914,483
20180915,432
20180916,455
20180917,482
20180918,490
20180919,518
20180920,441
20180921,534
20180922,532
20180923,566
20180924,468
20180925,488
20180926,529
20180927,644
20180928,549
20180929,564
20180930,519
20181001,483
20181002,495

2025-01-26 17:46:51 - root - INFO - SQL:
SELECT DISTINCT `user_pseudo_id`,
     TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
     AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
   LIMIT 100;
Results:
user_pseudo_id,cohort_week
0DAA9C19C1988CAF9777E0261D837CF3,2018-08-20 00:00:00+00:00
FB1429D8489DD7EA06655BC7581A3E18,2018-08-13 00:00:00+00:00
DB96F991CEBF843652230B0F802424FA,2018-08-20 00:00:00+00:00
F3A2F44C99758CC6006BFE28AC78EBFE,2018-08-06 00:00:00+00:00
1F91CA88C5E106304CDBD9C769FEC3E4,2018-07-23 00:00:00+00:00
3CB265E3644506572FFFC80A7DAD0E78,2018-08-20 00:00:00+00:00
DDDF330206C8FD63B6C78C3BFB13F801,2018-08-20 00:00:00+00:00
B08E7CF6F2FD5B89D0736DAC76D9029A,2018-08-13 00:00:00+00:00
82F141D1C5A86CB8F5F4DFC7E09E5513,2018-07-30 00:00:00+00:00
099A11692D9DB0B9F494F12C691B4279,2018-08-20 00:00:00+00:00
E84BFE62196E059C66D049BA9A14061C,2018-07-09 00:00:00+00:00
5788A16A3FF89DFC642034165C8932D8,2018-07-09 00:00:00+00:00
09BDD816257873A6FD3E231C5DE598D3,2018-07-09 00:00:00+00:00
42B9A14B99CF6FEE630005EF1F03FA19,2018-07-09 00:00:00+00:00
5D46BA742602176E2BD6E6B3917E08C9,2018-07-09 00:00:00+00:00
7E5E3AE456AFD0D467418E96ED8DDE60,2018-07-09 00:00:00+00:00
A36F25C8F1DA9907C53230C1B5D4FAB4,2018-07-09 00:00:00+00:00
26672D1870059178E37D4C674138EF01,2018-07-09 00:00:00+00:00
2B0DC55FC762171A7E975A1321528458,2018-07-23 00:00:00+00:00
648F91A3D0D868FC410FC4614FF11811,2018-07-23 00:00:00+00:00
E3FB1ADEE3426B8E0EFFE7CDCB73BF40,2018-07-09 00:00:00+00:00
A0E93D033E25966AB516BE78D143DE7A,2018-07-09 00:00:00+00:00
F7440C5660BC904383AFC518162113D0,2018-07-23 00:00:00+00:00
4E8A65E6E71A201D5C8CEBD90B59ABC3,2018-07-23 00:00:00+00:00
C605AC91DDE016C1BEF245A62B90B05A,2018-07-23 00:00:00+00:00
7044614F875488188598249691A84988,2018-07-23 00:00:00+00:00
C84A642FB4AFE0DE9CA495E97AF9B523,2018-07-23 00:00:00+00:00
239B36D8ED2161D10687A09C0EF34477,2018-08-06 00:00:00+00:00
C73D0BE8A6C303863FCE487F9996028C,2018-07-09 00:00:00+00:00
57EC50FBC6C7277B8EDCCE44C1352BD4,2018-07-30 00:00:00+00:00
1FDB055D4BD4AEC379A7B2F34E862913,2018-07-30 00:00:00+00:00
8F69F63C94FC7045651B1B164AE7B379,2018-07-30 00:00:00+00:00
F314B55E64BF801420642F189A3F408A,2018-08-06 00:00:00+00:00
AB714CB216CB456740B54DD82E11FDB9,2018-07-30 00:00:00+00:00
5ABED4EC5CC339889CCD175DCFE8A225,2018-08-06 00:00:00+00:00
DD8797EEB6395630DF036363EBA33A1C,2018-08-06 00:00:00+00:00
63FEF9F33B5B4155C207095EBA23730A,2018-08-06 00:00:00+00:00

2025-01-26 17:46:56 - root - INFO - SQL:
SELECT
     TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week,
     COUNT(DISTINCT `user_pseudo_id`) AS users_in_cohort
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
     AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
   GROUP BY cohort_week
   ORDER BY cohort_week
   LIMIT 100;
Results:
cohort_week,users_in_cohort
2018-07-09 00:00:00+00:00,296
2018-07-16 00:00:00+00:00,313
2018-07-23 00:00:00+00:00,305
2018-07-30 00:00:00+00:00,463
2018-08-06 00:00:00+00:00,388
2018-08-13 00:00:00+00:00,296
2018-08-20 00:00:00+00:00,318
2018-08-27 00:00:00+00:00,369
2018-09-03 00:00:00+00:00,460
2018-09-10 00:00:00+00:00,421
2018-09-17 00:00:00+00:00,306
2018-09-24 00:00:00+00:00,347
2018-10-01 00:00:00+00:00,117

2025-01-26 17:47:01 - root - INFO - SQL:
SELECT
     `user_pseudo_id`,
     TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week,
     TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY)) AS event_week
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
     AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
     AND TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY)) > TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))
   LIMIT 100;
Results:
user_pseudo_id,cohort_week,event_week
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00

2025-01-26 17:47:44 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 17:47:44 - root - INFO - I see that you're encountering an error with your SQL query:

> **TIMESTAMP_ADD does not support the WEEK date part when the argument is TIMESTAMP type**

This error occurs because the `TIMESTAMP_ADD` function in BigQuery does not support adding weeks directly to a `TIMESTAMP` type using the `INTERVAL WEEK` syntax. However, there are ways to work around this limitation.

---

### **Solution:**

#### **Option 1: Convert Timestamps to Dates and Use `DATE_ADD`**

By converting the `TIMESTAMP` values to `DATE`, you can use `DATE_ADD` with an `INTERVAL` of `1 WEEK`. Here's the corrected query:

```sql
SELECT
  cohort_week,
  COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week1
FROM (
  SELECT
    `user_pseudo_id`,
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY))) AS event_week
  FROM `firebase-public-project.analytics_153293282.events_*`
  WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
    AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
)
WHERE event_week = DATE_ADD(cohort_week, INTERVAL 1 WEEK)
GROUP BY cohort_week
ORDER BY cohort_week
LIMIT 100;
```

**Explanation:**

- **Convert Timestamps to Dates:**
  - Use `DATE()` to convert the truncated timestamps (`cohort_week` and `event_week`) into `DATE` types.
  - `DATE(TIMESTAMP_TRUNC(...))` converts the `TIMESTAMP` to a `DATE`, which allows you to use `DATE_ADD` with `INTERVAL WEEK`.
- **Use `DATE_ADD` with `INTERVAL 1 WEEK`:**
  - Replace `TIMESTAMP_ADD(cohort_week, INTERVAL 1 WEEK)` with `DATE_ADD(cohort_week, INTERVAL 1 WEEK)`.
  - `DATE_ADD` supports adding weeks to `DATE` types.

---

#### **Option 2: Add Days Instead of Weeks Using `TIMESTAMP_ADD`**

Alternatively, you can keep using `TIMESTAMP` types and add days instead:

```sql
SELECT
  cohort_week,
  COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week1
FROM (
  SELECT
    `user_pseudo_id`,
    TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week,
    TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY)) AS event_week
  FROM `firebase-public-project.analytics_153293282.events_*`
  WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
    AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
)
WHERE event_week = TIMESTAMP_ADD(cohort_week, INTERVAL 7 DAY)
GROUP BY cohort_week
ORDER BY cohort_week
LIMIT 100;
```

**Explanation:**

- **Use `INTERVAL 7 DAY`:**
  - Since `TIMESTAMP_ADD` does not support `WEEK` as an interval, use `INTERVAL 7 DAY` to add one week.
  - This keeps `cohort_week` and `event_week` as `TIMESTAMP` types.

---

### **Recommendation:**

Using **Option 1** (converting to `DATE` and using `DATE_ADD`) is generally preferable for cohort analyses because:

- **Clarity:** Working with dates simplifies the interpretation of results, especially when grouping by weeks.
- **Functionality:** `DATE_ADD` supports adding weeks directly, making the query more readable.
- **Consistency:** It ensures that all date calculations are performed on the same data type.

---

### **Summary of Changes:**

- **Error Cause:**
  - `TIMESTAMP_ADD` does not support adding `WEEK` intervals to `TIMESTAMP` types.
- **Solution:**
  - Convert `TIMESTAMP` to `DATE` and use `DATE_ADD` with `INTERVAL 1 WEEK`.
  - Alternatively, add days instead of weeks using `INTERVAL 7 DAY` with `TIMESTAMP_ADD`.

---

### **Proceeding with the Analysis:**

After correcting the query, you can continue with your cohort analysis. Here is how you might calculate retention rates by combining cohort sizes and retention counts:

```sql
SELECT
  cohorts.cohort_week,
  cohorts.users_in_cohort,
  IFNULL(week1.users_retained_week1, 0) AS users_retained_week1,
  IFNULL(week2.users_retained_week2, 0) AS users_retained_week2
FROM (
  -- Cohort sizes
  SELECT
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
    COUNT(DISTINCT `user_pseudo_id`) AS users_in_cohort
  FROM `firebase-public-project.analytics_153293282.events_*`
  WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
    AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
  GROUP BY cohort_week
) AS cohorts
LEFT JOIN (
  -- Week 1 retention
  SELECT
    cohort_week,
    COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week1
  FROM (
    SELECT
      `user_pseudo_id`,
      DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
      DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY))) AS event_week
    FROM `firebase-public-project.analytics_153293282.events_*`
    WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
      AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
  )
  WHERE event_week = DATE_ADD(cohort_week, INTERVAL 1 WEEK)
  GROUP BY cohort_week
) AS week1 ON cohorts.cohort_week = week1.cohort_week
LEFT JOIN (
  -- Week 2 retention
  SELECT
    cohort_week,
    COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week2
  FROM (
    SELECT
      `user_pseudo_id`,
      DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
      DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY))) AS event_week
    FROM `firebase-public-project.analytics_153293282.events_*`
    WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
      AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
  )
  WHERE event_week = DATE_ADD(cohort_week, INTERVAL 2 WEEK)
  GROUP BY cohort_week
) AS week2 ON cohorts.cohort_week = week2.cohort_week
ORDER BY cohorts.cohort_week
LIMIT 100;
```

**Explanation:**

- **Cohort Table (`cohorts`):**
  - Calculates the number of users in each cohort week.
- **Week 1 and Week 2 Retention Tables (`week1`, `week2`):**
  - Calculate the number of users who returned in the first and second weeks after their cohort week.
- **Joining the Tables:**
  - Left join the retention tables with the cohort table on `cohort_week`.
- **Calculating Retention Rates:**
  - You can calculate the retention rates by dividing `users_retained_week1` and `users_retained_week2` by `users_in_cohort`.

---

### **Final Output Format:**

```csv
Cohort_Week_Start,Users_in_Cohort,Retention_Week1(%),Retention_Week2(%)
2018-07-09,num_users1:int,retention_week1_1:0<=float<=100,retention_week2_1:0<=float<=100
2018-07-16,num_users2:int,retention_week1_2:float,retention_week2_2:float
...
```

- **Cohort_Week_Start:** Start date of the cohort week.
- **Users_in_Cohort:** Number of users who started in that cohort week.
- **Retention_Week1(%):** Percentage of users who returned in Week 1 after the cohort week.
- **Retention_Week2(%):** Percentage of users who returned in Week 2 after the cohort week.

**Note:** To calculate the percentages, you would perform the calculation in your final query:

```sql
SELECT
  cohort_week AS Cohort_Week_Start,
  users_in_cohort AS Users_in_Cohort,
  ROUND((users_retained_week1 / users_in_cohort) * 100, 2) AS Retention_Week1,
  ROUND((users_retained_week2 / users_in_cohort) * 100, 2) AS Retention_Week2
FROM your_combined_table
ORDER BY cohort_week
```

---

### **Additional Tips:**

- **Ensure Date Consistency:** When working with dates and timestamps, always ensure that the data types align with the functions used.
- **Use `DATE_TRUNC` if Needed:** If you're working exclusively with dates, consider using `DATE_TRUNC` instead of `TIMESTAMP_TRUNC`.
- **Check for Null Values:** Use `IFNULL` or `COALESCE` to handle any null values that might arise from left joins.

---

By making these adjustments, your queries should run without errors, and you'll be able to complete your weekly cohort analysis for user retention.

Let me know if you need further assistance!
2025-01-26 17:48:23 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 17:48:23 - root - INFO - SQL:
SELECT
  cohort_week,
  COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week1
FROM (
  SELECT
    `user_pseudo_id`,
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY))) AS event_week
  FROM `firebase-public-project.analytics_153293282.events_*`
  WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
    AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
)
WHERE event_week = DATE_ADD(cohort_week, INTERVAL 1 WEEK)
GROUP BY cohort_week
ORDER BY cohort_week
LIMIT 100;
Results:
cohort_week,users_retained_week1
2018-07-09,76
2018-07-16,88
2018-07-23,89
2018-07-30,91
2018-08-06,101
2018-08-13,78
2018-08-20,61
2018-08-27,87
2018-09-03,132
2018-09-10,100
2018-09-17,97
2018-09-24,51

2025-01-26 17:48:28 - root - INFO - SQL:
SELECT
  cohort_week,
  COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week2
FROM (
  SELECT
    `user_pseudo_id`,
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY))) AS event_week
  FROM `firebase-public-project.analytics_153293282.events_*`
  WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
    AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
)
WHERE event_week = DATE_ADD(cohort_week, INTERVAL 2 WEEK)
GROUP BY cohort_week
ORDER BY cohort_week
LIMIT 100
Results:
cohort_week,users_retained_week2
2018-07-09,52
2018-07-16,54
2018-07-23,62
2018-07-30,61
2018-08-06,54
2018-08-13,36
2018-08-20,57
2018-08-27,56
2018-09-03,57
2018-09-10,63
2018-09-17,24

2025-01-26 17:48:34 - root - INFO - SQL:
SELECT
  cohorts.cohort_week,
  cohorts.users_in_cohort,
  IFNULL(week1.users_retained_week1, 0) AS users_retained_week1,
  IFNULL(week2.users_retained_week2, 0) AS users_retained_week2
FROM (
  SELECT
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
    COUNT(DISTINCT `user_pseudo_id`) AS users_in_cohort
  FROM `firebase-public-project.analytics_153293282.events_*`
  WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
    AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
  GROUP BY cohort_week
) AS cohorts
LEFT JOIN (
  SELECT
    cohort_week,
    COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week1
  FROM (
    SELECT
      `user_pseudo_id`,
      DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
      DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY))) AS event_week
    FROM `firebase-public-project.analytics_153293282.events_*`
    WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
      AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
  )
  WHERE event_week = DATE_ADD(cohort_week, INTERVAL 1 WEEK)
  GROUP BY cohort_week
) AS week1 ON cohorts.cohort_week = week1.cohort_week
LEFT JOIN (
  SELECT
    cohort_week,
    COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week2
  FROM (
    SELECT
      `user_pseudo_id`,
      DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
      DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY))) AS event_week
    FROM `firebase-public-project.analytics_153293282.events_*`
    WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
      AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
  )
  WHERE event_week = DATE_ADD(cohort_week, INTERVAL 2 WEEK)
  GROUP BY cohort_week
) AS week2 ON cohorts.cohort_week = week2.cohort_week
ORDER BY cohorts.cohort_week
LIMIT 100
Results:
cohort_week,users_in_cohort,users_retained_week1,users_retained_week2
2018-07-09,296,76,52
2018-07-16,313,88,54
2018-07-23,305,89,62
2018-07-30,463,91,61
2018-08-06,388,101,54
2018-08-13,296,78,36
2018-08-20,318,61,57
2018-08-27,369,87,56
2018-09-03,460,132,57
2018-09-10,421,100,63
2018-09-17,306,97,24
2018-09-24,347,51,0
2018-10-01,117,0,0

2025-01-26 17:48:34 - root - INFO - itercount: 0
2025-01-26 17:48:34 - root - INFO - Database Name: firebase-public-project
Schema Name: analytics_153293282
DDL describes table information.
,0
table_name,events_20180801
ddl,"CREATE TABLE `firebase-public-project.analytics_153293282.events_20180801`
(
  event_date STRING,
  event_timestamp INT64,
  event_name STRING,
  event_params ARRAY<STRUCT<key STRING, value STRUCT<string_value STRING, int_value INT64, float_value FLOAT64, double_value FLOAT64>>>,
  event_previous_timestamp INT64,
  event_value_in_usd FLOAT64,
  event_bundle_sequence_id INT64,
  event_server_timestamp_offset INT64,
  user_id STRING,
  user_pseudo_id STRING,
  user_properties ARRAY<STRUCT<key STRING, value STRUCT<string_value STRING, int_value INT64, float_value FLOAT64, double_value FLOAT64, set_timestamp_micros INT64>>>,
  user_first_touch_timestamp INT64,
  user_ltv STRUCT<revenue FLOAT64, currency STRING>,
  device STRUCT<category STRING, mobile_brand_name STRING, mobile_model_name STRING, mobile_marketing_name STRING, mobile_os_hardware_model STRING, operating_system STRING, operating_system_version STRING, vendor_id STRING, advertising_id STRING, language STRING, is_limited_ad_tracking STRING, time_zone_offset_seconds INT64>,
  geo STRUCT<continent STRING, country STRING, region STRING, city STRING>,
  app_info STRUCT<id STRING, version STRING, install_store STRING, firebase_app_id STRING, install_source STRING>,
  traffic_source STRUCT<name STRING, medium STRING, source STRING>,
  stream_id STRING,
  platform STRING
);"

Some other tables have the similar structure: ['events_20180801', 'events_20180621', 'events_20180616', 'events_20180912', 'events_20180814', 'events_20180716', 'events_20181003', 'events_20180620', 'events_20180624', 'events_20180918', 'events_20180612', 'events_20180911', 'events_20180724', 'events_20180807', 'events_20180710', 'events_20180808', 'events_20180702', 'events_20180719', 'events_20180914', 'events_20180913', 'events_20180915', 'events_20180728', 'events_20180817', 'events_20180628', 'events_20180906', 'events_20180704', 'events_20180711', 'events_20180720', 'events_20180706', 'events_20180926', 'events_20180924', 'events_20180731', 'events_20180804', 'events_20180920', 'events_20180715', 'events_20180709', 'events_20180928', 'events_20180904', 'events_20180903', 'events_20180818', 'events_20180820', 'events_20180707', 'events_20180930', 'events_20180821', 'events_20180812', 'events_20180830', 'events_20180908', 'events_20180708', 'events_20180910', 'events_20180922', 'events_20180713', 'events_20180618', 'events_20180811', 'events_20181001', 'events_20180626', 'events_20180828', 'events_20180717', 'events_20180806', 'events_20180721', 'events_20180725', 'events_20180824', 'events_20180923', 'events_20180627', 'events_20180726', 'events_20180729', 'events_20180929', 'events_20180925', 'events_20180722', 'events_20180630', 'events_20180730', 'events_20180831', 'events_20180701', 'events_20180619', 'events_20180810', 'events_20180822', 'events_20180921', 'events_20180819', 'events_20180927', 'events_20180905', 'events_20180816', 'events_20180622', 'events_20180802', 'events_20180826', 'events_20180714', 'events_20180901', 'events_20180916', 'events_20180809', 'events_20181002', 'events_20180703', 'events_20180617', 'events_20180902', 'events_20180625', 'events_20180827', 'events_20180805', 'events_20180825', 'events_20180919', 'events_20180917', 'events_20180705', 'events_20180613', 'events_20180907', 'events_20180909', 'events_20180727', 'events_20180813', 'events_20180614', 'events_20180623', 'events_20180829', 'events_20180615', 'events_20180712', 'events_20180718', 'events_20180815', 'events_20180629', 'events_20180803', 'events_20180823', 'events_20180723']
External knowledge that might be helpful: 
How to Calculate User Retention in Big Query from Google Demo Game Analytics Data

As a Product / Website Analyst, I was pretty psyched to discover Google’s public Google Analytics 4 (GA4) gaming event dataset called `firebase-public-project.analytics_153293282.events_*`. The table allows experienced developers and learners alike to experiment with raw GA4 data in Big Query for free. Event data is basically a log of user interactions with your product for analysis .For newbies interested in learning more about event data and GA4, visit my prior blog. This article provides SQL queries for a quick table overview and explains how to utilize Google Big Query to calculate user retention.


What is Retention?
User retention rates are key indicators for whether your product team meets user needs. Improving retention is often central to long term growth strategies.

**Retention measure’s how often and for how long users tend to return to your product.**

The metric can be a powerful proxy for product usefulness and user opinion. Its analysis can reveal critical information like how well your site converts new visitors to users and which items and features are associated with users coming back. If user data is available, retention can also help a business understand the profiles of its most active users (power users). Finally, retention is a great guardrail metric for A/B tests. Successful, product oriented companies prioritize a healthy user bases over short term profits.


**Common Retention Calculation Strategies**

Two common strategies to calculate retention are: 

a) N-Day retention

b) Unbounded Retention.


a) For N-Day retention, analysts calculate how many users with certain characteristics return over successive periods. It is called N days because we define the length of each period. For example, with N=7 day retention, if User A becomes part of our cohort of interest on day 0 and returns to the product day 5 and day 15, they are counted as retained for week 1 (1–7 days) and week 3 (15–21 days) but not week 2 (8–14 days).


b) For Unbounded Retention, a user is counted as retained each week so long as their most recent product contact was after the week. For example, if User A becomes part of the cohort on day 0 and last returned to the site on day 21, they will be counted as retained in week 1 (1–7 days), week 2 (8–14 days), and week 3 (15–21 days) but not week 4 (22–28 days).

By calculating these metrics, companies can evaluate how well their products hold users’ interests. It also them closer to identifying the patterns that generate return users.



The table structure information is ({database name: {schema name: {table name}}}): 
{'firebase-public-project': {'analytics_153293282': ['events_20180612', 'events_20180613', 'events_20180614', 'events_20180615', 'events_20180616', 'events_20180617', 'events_20180618', 'events_20180619', 'events_20180620', 'events_20180621', 'events_20180622', 'events_20180623', 'events_20180624', 'events_20180625', 'events_20180626', 'events_20180627', 'events_20180628', 'events_20180629', 'events_20180630', 'events_20180701', 'events_20180702', 'events_20180703', 'events_20180704', 'events_20180705', 'events_20180706', 'events_20180707', 'events_20180708', 'events_20180709', 'events_20180710', 'events_20180711', 'events_20180712', 'events_20180713', 'events_20180714', 'events_20180715', 'events_20180716', 'events_20180717', 'events_20180718', 'events_20180719', 'events_20180720', 'events_20180721', 'events_20180722', 'events_20180723', 'events_20180724', 'events_20180725', 'events_20180726', 'events_20180727', 'events_20180728', 'events_20180729', 'events_20180730', 'events_20180731', 'events_20180801', 'events_20180802', 'events_20180803', 'events_20180804', 'events_20180805', 'events_20180806', 'events_20180807', 'events_20180808', 'events_20180809', 'events_20180810', 'events_20180811', 'events_20180812', 'events_20180813', 'events_20180814', 'events_20180815', 'events_20180816', 'events_20180817', 'events_20180818', 'events_20180819', 'events_20180820', 'events_20180821', 'events_20180822', 'events_20180823', 'events_20180824', 'events_20180825', 'events_20180826', 'events_20180827', 'events_20180828', 'events_20180829', 'events_20180830', 'events_20180831', 'events_20180901', 'events_20180902', 'events_20180903', 'events_20180904', 'events_20180905', 'events_20180906', 'events_20180907', 'events_20180908', 'events_20180909', 'events_20180910', 'events_20180911', 'events_20180912', 'events_20180913', 'events_20180914', 'events_20180915', 'events_20180916', 'events_20180917', 'events_20180918', 'events_20180919', 'events_20180920', 'events_20180921', 'events_20180922', 'events_20180923', 'events_20180924', 'events_20180925', 'events_20180926', 'events_20180927', 'events_20180928', 'events_20180929', 'events_20180930', 'events_20181001', 'events_20181002', 'events_20181003']}}
Begin Exploring Related Columns
**Relevant Columns and Their Potential Usage:**

- `user_pseudo_id`: **Potential Usage** - Unique identifier for each user. Used to track individual users across events and weeks.

- `user_first_touch_timestamp`: **Potential Usage** - Timestamp of the user's first interaction with the app. Used to determine the cohort week.

- `event_timestamp`: **Potential Usage** - Timestamp of the event. Used to track when a user engaged with the app, helping to identify return visits.

- `event_date`: **Potential Usage** - Date of the event in string format (`YYYYMMDD`). Used to filter events within specific dates or weeks.

- `event_name`: **Potential Usage** - Name of the event. Can be used to filter specific user actions if needed.

**Conditions That May Be Used:**

- **Date Range**: Filter events starting from July 9, 2018 (`event_date` >= '20180709') up to October 2, 2018 (`event_date` <= '20181002').

- **Cohort Grouping**: Group users by the week of their first app use based on `user_first_touch_timestamp`.

- **Retention Calculation**: Identify if users returned in the subsequent weeks after their cohort week.

---

**Sample SQL Queries:**

1. **Retrieve distinct user IDs and their first touch timestamps:**

   ```sql
   SELECT DISTINCT `user_pseudo_id`, `user_first_touch_timestamp`
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
   LIMIT 100;
   ```

2. **List all event dates in the dataset:**

   ```sql
   SELECT DISTINCT `event_date`
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
   ORDER BY `event_date`
   LIMIT 100;
   ```

3. **Count the total number of events per day:**

   ```sql
   SELECT `event_date`, COUNT(*) AS total_events
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
   GROUP BY `event_date`
   ORDER BY `event_date`
   LIMIT 100;
   ```

4. **Find the number of unique users per day:**

   ```sql
   SELECT `event_date`, COUNT(DISTINCT `user_pseudo_id`) AS unique_users
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
   GROUP BY `event_date`
   ORDER BY `event_date`
   LIMIT 100;
   ```

5. **Extract users who first used the app during each week starting from July 9, 2018:**

   ```sql
   SELECT DISTINCT `user_pseudo_id`,
     TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
     AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
   LIMIT 100;
   ```

6. **Count the number of users in each cohort week:**

   ```sql
   SELECT
     TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week,
     COUNT(DISTINCT `user_pseudo_id`) AS users_in_cohort
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
     AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
   GROUP BY cohort_week
   ORDER BY cohort_week
   LIMIT 100;
   ```

7. **Identify user events in the weeks following their cohort week:**

   ```sql
   SELECT
     `user_pseudo_id`,
     TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week,
     TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY)) AS event_week
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
     AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
     AND TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY)) > TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))
   LIMIT 100;
   ```

8. **Calculate retention in the first week after the cohort week:**

   ```sql
   SELECT
     cohort_week,
     COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week1
   FROM (
     SELECT
       `user_pseudo_id`,
       TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week,
       TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY)) AS event_week
     FROM `firebase-public-project.analytics_153293282.events_*`
     WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
       AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
   )
   WHERE event_week = TIMESTAMP_ADD(cohort_week, INTERVAL 1 WEEK)
   GROUP BY cohort_week
   ORDER BY cohort_week
   LIMIT 100;
   ```

9. **Calculate retention in the second week after the cohort week:**

   ```sql
   SELECT
     cohort_week,
     COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week2
   FROM (
     SELECT
       `user_pseudo_id`,
       TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week,
       TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY)) AS event_week
     FROM `firebase-public-project.analytics_153293282.events_*`
     WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
       AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
   )
   WHERE event_week = TIMESTAMP_ADD(cohort_week, INTERVAL 2 WEEK)
   GROUP BY cohort_week
   ORDER BY cohort_week
   LIMIT 100;
   ```

10. **Combine cohort size and retention to calculate retention rates:**

    ```sql
    SELECT
      cohorts.cohort_week,
      cohorts.users_in_cohort,
      IFNULL(week1.users_retained_week1, 0) AS users_retained_week1,
      IFNULL(week2.users_retained_week2, 0) AS users_retained_week2
    FROM (
      SELECT
        TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week,
        COUNT(DISTINCT `user_pseudo_id`) AS users_in_cohort
      FROM `firebase-public-project.analytics_153293282.events_*`
      WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
        AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
      GROUP BY cohort_week
    ) AS cohorts
    LEFT JOIN (
      SELECT
        cohort_week,
        COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week1
      FROM (
        SELECT
          `user_pseudo_id`,
          TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week,
          TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY)) AS event_week
        FROM `firebase-public-project.analytics_153293282.events_*`
        WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
          AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
      )
      WHERE event_week = TIMESTAMP_ADD(cohort_week, INTERVAL 1 WEEK)
      GROUP BY cohort_week
    ) AS week1 ON cohorts.cohort_week = week1.cohort_week
    LEFT JOIN (
      SELECT
        cohort_week,
        COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week2
      FROM (
        SELECT
          `user_pseudo_id`,
          TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week,
          TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY)) AS event_week
        FROM `firebase-public-project.analytics_153293282.events_*`
        WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
          AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
      )
      WHERE event_week = TIMESTAMP_ADD(cohort_week, INTERVAL 2 WEEK)
      GROUP BY cohort_week
    ) AS week2 ON cohorts.cohort_week = week2.cohort_week
    ORDER BY cohorts.cohort_week
    LIMIT 100;
    ```

---

These queries progressively build an understanding of the data and set the foundation for calculating user retention rates. They begin with basic data exploration and move toward the final goal of combining cohort sizes with retention numbers. This approach helps in validating each step of the analysis and ensures accuracy in the final retention calculations.

- **Note on Table Wildcards (`events_*`) and `_TABLE_SUFFIX`:**
  - The `events_*` wildcard captures all daily event tables within the dataset.
  - The `_TABLE_SUFFIX` pseudo-column represents the part of the table name that matches the wildcard, allowing us to filter specific date ranges.

- **Explanation of Key Functions:**
  - `TIMESTAMP_MICROS()`: Converts microseconds since the Unix epoch to a timestamp.
  - `TIMESTAMP_TRUNC()`: Truncates a timestamp to a specified granularity (e.g., WEEK).
  - `TIMESTAMP_ADD()`: Adds a specified interval to a timestamp.
  - `UNIX_SECONDS()`: Converts a timestamp to seconds since the Unix epoch.
  - `IFNULL()`: Replaces NULL values with a specified value, ensuring calculations proceed without errors.

---

By running these queries, you can extract the necessary data to perform a weekly cohort analysis and calculate the retention rates for each cohort over the next two weeks.Query:
SELECT DISTINCT `user_pseudo_id`, `user_first_touch_timestamp`
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
   LIMIT 100;
Answer:
user_pseudo_id,user_first_touch_timestamp
64BB7DFAE772A77F70FB63373D0808F5,1516479005247000
2F0F260BD7B876C346B41977D0D03D62,1467727817981000
094CDCB8EF23B9B55134A0B5E22DFFCB,1472941410073000
C73D0BE8A6C303863FCE487F9996028C,1531679854912000
D0F280B12652EB0D74F6BC74AB13606F,1529344858634000
E6FEE8B98E75EA5311FE004F98559A27,1521946646783000
E84BFE62196E059C66D049BA9A14061C,1531179900628000
243E22C5C25E4B000CB550B45B47F604,1531637942089000
83B2810298A42907030999DED800A7D4,1489087758173000
7842C62D45ECE888132F21C9F4417B21,1515272726578000
4BDC831A6940071E2461D0B5293A329E,1488508268636000
21CE5B5B5AEC049C3D4CDA89C18B270F,1464617612378000
CF62C17E245938F28D9A86634660A2FD,1529262503490000
C1DF3340FCB33B0C2A7C7D5A3C5E69F0,1527872784373000
33E8B12FD99A752C7586B94FF0F8C349,1531586833429000
FA944230F31FE2B6FB255BFC9679C0F8,1531783187081000
9B18A1CBA96D52D05CFA7CB7C9011EDE,1531098830942000
A16FA7098A55DCBCC8D215E689824390,1464615090108000
9373B5D36107012F6F9137090C523FA1,1528353187792000
1A7F253A85B952C329518608DEC20138,1521550188005000
FEA816FC51362F4CCCBD617511B9336E,1531803632195000
E5A2CB7A471E740E758BE5E2E0C79BC2,1520549151394000
AC1B8C257039C7FB911CA9AE69D4C614,1513778602956000
16AD1C031AF106322F082EE8EA61C295,1501266707839000
CABE7E24215A5C36862658A36AE5CE12,1525418668571000
3D1B58553D2E2D4DD5DFCF251D5E23B2,1496360951993000
D842320AECB686B41C2F8E8876794D34,1517687182199000
2D564EF6689F36BC98392CEFA97704E6,1502408406017000
C6DE585349744A40725DB0AB17041BA3,1522097746155000
148AAE2C85735FF43C7590EC37054C17,1521502367883000
EF5027132DCDB94B2406560CAF7A5938,1531706432735000
31FE3578985C855CE7FB123A32602FFC,1509191363764000
98855C776EDC9A25108F347E3AD89E46,1531727894423000
7CE7A576C0E09936E97D001D6FE8B9E4,1531763582935000
DB3B6E984B29883EA02F1A504A33730F,1483323445545000
B563CCAD7F0812CFC2FE5A008AED7235,1491529223998000
E4C6FF8288DD4BFCDE93E2218E20643B,1523428610846000
7F089F4710219060252DB2AEF508A662,1507748384050000
FCA08F9B0DCB6E33A74F672CE7F73BE3,1530710036656000
C3326C2CCF5D46173E4973A13512B163,1508538455320000
80810BB18ADB73C9585D86058958AF35,1467887587757000
3F1D1603DF714929E1563C9C815D1E83,1529434429280000
8203F492EE32192EA37B224B66C6958F,1519437246725000
0724A88C106D372E33A95B3BE7FB9C51,1475997333391000
EBE661044C1949546986A852F35083A1,1478199290063000
465B5DC1BA69633FE49EFA52F08CBB40,1527399612300000
49D9F34F22480512FE5B725D46D2B216,1535653765712000
7B425893FE3DD64FFB439238785817F2,1535596530365000
1F4F2D78CA1957949E2420A7EDBCCB84,1525809762716000
1E9F6BA9BD8C45633C26F42995A77775,1502465070469000
Query:
SELECT DISTINCT `event_date`
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
   ORDER BY `event_date`
   LIMIT 100;
Answer:
event_date
20180709
20180710
20180711
20180712
20180713
20180714
20180715
20180716
20180717
20180718
20180719
20180720
20180721
20180722
20180723
20180724
20180725
20180726
20180727
20180728
20180729
20180730
20180731
20180801
20180802
20180803
20180804
20180805
20180806
20180807
20180808
20180809
20180810
20180811
20180812
20180813
20180814
20180815
20180816
20180817
20180818
20180819
20180820
20180821
20180822
20180823
20180824
20180825
20180826
20180827
20180828
20180829
20180830
20180831
20180901
20180902
20180903
20180904
20180905
20180906
20180907
20180908
20180909
20180910
20180911
20180912
20180913
20180914
20180915
20180916
20180917
20180918
20180919
20180920
20180921
20180922
20180923
20180924
20180925
20180926
20180927
20180928
20180929
20180930
20181001
20181002
Query:
SELECT `event_date`, COUNT(*) AS total_events
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
   GROUP BY `event_date`
   ORDER BY `event_date`
   LIMIT 100;
Answer:
event_date,total_events
20180709,50000
20180710,50000
20180711,50000
20180712,50000
20180713,50000
20180714,50000
20180715,50000
20180716,50000
20180717,50000
20180718,50000
20180719,50000
20180720,50000
20180721,50000
20180722,50000
20180723,50000
20180724,50000
20180725,50000
20180726,50000
20180727,50000
20180728,50000
20180729,50000
20180730,50000
20180731,50000
20180801,50000
20180802,50000
20180803,50000
20180804,50000
20180805,50000
20180806,50000
20180807,50000
20180808,50000
20180809,50000
20180810,50000
20180811,50000
20180812,50000
20180813,50000
20180814,50000
20180815,50000
20180816,50000
20180817,50000
20180818,50000
20180819,50000
20180820,50000
20180821,50000
20180822,50000
20180823,50000
20180824,50000
20180825,50000
20180826,50000
20180827,50000
20180828,50000
20180829,50000
20180830,50000
20180831,50000
20180901,50000
20180902,50000
20180903,50000
20180904,50000
20180905,50000
20180906,50000
20180907,50000
20180908,50000
20180909,50000
20180910,50000
20180911,50000
20180912,50000
20180913,50000
20180914,50000
20180915,50000
20180916,50000
20180917,50000
20180918,50000
20180919,50000
20180920,50000
20180921,50000
20180922,50000
20180923,50000
20180924,50000
20180925,50000
20180926,50000
20180927,50000
20180928,50000
20180929,50000
20180930,50000
20181001,50000
20181002,50000
Query:
SELECT `event_date`, COUNT(DISTINCT `user_pseudo_id`) AS unique_users
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
   GROUP BY `event_date`
   ORDER BY `event_date`
   LIMIT 100;
Answer:
event_date,unique_users
20180709,422
20180710,452
20180711,426
20180712,453
20180713,470
20180714,414
20180715,407
20180716,406
20180717,368
20180718,377
20180719,346
20180720,431
20180721,506
20180722,413
20180723,439
20180724,435
20180725,413
20180726,419
20180727,466
20180728,483
20180729,491
20180730,488
20180731,448
20180801,447
20180802,512
20180803,548
20180804,555
20180805,524
20180806,505
20180807,493
20180808,506
20180809,455
20180810,372
20180811,456
20180812,470
20180813,512
20180814,444
20180815,425
20180816,459
20180817,458
20180818,498
20180819,467
20180820,471
20180821,485
20180822,459
20180823,427
20180824,485
20180825,495
20180826,455
20180827,495
20180828,467
20180829,504
20180830,496
20180831,466
20180901,465
20180902,485
20180903,466
20180904,476
20180905,533
20180906,521
20180907,533
20180908,534
20180909,554
20180910,539
20180911,474
20180912,577
20180913,503
20180914,483
20180915,432
20180916,455
20180917,482
20180918,490
20180919,518
20180920,441
20180921,534
20180922,532
20180923,566
20180924,468
20180925,488
20180926,529
20180927,644
20180928,549
20180929,564
20180930,519
20181001,483
20181002,495
Query:
SELECT DISTINCT `user_pseudo_id`,
     TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
     AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
   LIMIT 100;
Answer:
user_pseudo_id,cohort_week
0DAA9C19C1988CAF9777E0261D837CF3,2018-08-20 00:00:00+00:00
FB1429D8489DD7EA06655BC7581A3E18,2018-08-13 00:00:00+00:00
DB96F991CEBF843652230B0F802424FA,2018-08-20 00:00:00+00:00
F3A2F44C99758CC6006BFE28AC78EBFE,2018-08-06 00:00:00+00:00
1F91CA88C5E106304CDBD9C769FEC3E4,2018-07-23 00:00:00+00:00
3CB265E3644506572FFFC80A7DAD0E78,2018-08-20 00:00:00+00:00
DDDF330206C8FD63B6C78C3BFB13F801,2018-08-20 00:00:00+00:00
B08E7CF6F2FD5B89D0736DAC76D9029A,2018-08-13 00:00:00+00:00
82F141D1C5A86CB8F5F4DFC7E09E5513,2018-07-30 00:00:00+00:00
099A11692D9DB0B9F494F12C691B4279,2018-08-20 00:00:00+00:00
E84BFE62196E059C66D049BA9A14061C,2018-07-09 00:00:00+00:00
5788A16A3FF89DFC642034165C8932D8,2018-07-09 00:00:00+00:00
09BDD816257873A6FD3E231C5DE598D3,2018-07-09 00:00:00+00:00
42B9A14B99CF6FEE630005EF1F03FA19,2018-07-09 00:00:00+00:00
5D46BA742602176E2BD6E6B3917E08C9,2018-07-09 00:00:00+00:00
7E5E3AE456AFD0D467418E96ED8DDE60,2018-07-09 00:00:00+00:00
A36F25C8F1DA9907C53230C1B5D4FAB4,2018-07-09 00:00:00+00:00
26672D1870059178E37D4C674138EF01,2018-07-09 00:00:00+00:00
2B0DC55FC762171A7E975A1321528458,2018-07-23 00:00:00+00:00
648F91A3D0D868FC410FC4614FF11811,2018-07-23 00:00:00+00:00
E3FB1ADEE3426B8E0EFFE7CDCB73BF40,2018-07-09 00:00:00+00:00
A0E93D033E25966AB516BE78D143DE7A,2018-07-09 00:00:00+00:00
F7440C5660BC904383AFC518162113D0,2018-07-23 00:00:00+00:00
4E8A65E6E71A201D5C8CEBD90B59ABC3,2018-07-23 00:00:00+00:00
C605AC91DDE016C1BEF245A62B90B05A,2018-07-23 00:00:00+00:00
7044614F875488188598249691A84988,2018-07-23 00:00:00+00:00
C84A642FB4AFE0DE9CA495E97AF9B523,2018-07-23 00:00:00+00:00
239B36D8ED2161D10687A09C0EF34477,2018-08-06 00:00:00+00:00
C73D0BE8A6C303863FCE487F9996028C,2018-07-09 00:00:00+00:00
57EC50FBC6C7277B8EDCCE44C1352BD4,2018-07-30 00:00:00+00:00
1FDB055D4BD4AEC379A7B2F34E862913,2018-07-30 00:00:00+00:00
8F69F63C94FC7045651B1B164AE7B379,2018-07-30 00:00:00+00:00
F314B55E64BF801420642F189A3F408A,2018-08-06 00:00:00+00:00
AB714CB216CB456740B54DD82E11FDB9,2018-07-30 00:00:00+00:00
5ABED4EC5CC339889CCD175DCFE8A225,2018-08-06 00:00:00+00:00
DD8797EEB6395630DF036363EBA33A1C,2018-08-06 00:00:00+00:00
63FEF9F33B5B4155C207095EBA23730A,2018-08-06 00:00:00+00:00
Query:
SELECT
     TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week,
     COUNT(DISTINCT `user_pseudo_id`) AS users_in_cohort
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
     AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
   GROUP BY cohort_week
   ORDER BY cohort_week
   LIMIT 100;
Answer:
cohort_week,users_in_cohort
2018-07-09 00:00:00+00:00,296
2018-07-16 00:00:00+00:00,313
2018-07-23 00:00:00+00:00,305
2018-07-30 00:00:00+00:00,463
2018-08-06 00:00:00+00:00,388
2018-08-13 00:00:00+00:00,296
2018-08-20 00:00:00+00:00,318
2018-08-27 00:00:00+00:00,369
2018-09-03 00:00:00+00:00,460
2018-09-10 00:00:00+00:00,421
2018-09-17 00:00:00+00:00,306
2018-09-24 00:00:00+00:00,347
2018-10-01 00:00:00+00:00,117
Query:
SELECT
     `user_pseudo_id`,
     TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY)) AS cohort_week,
     TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY)) AS event_week
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
     AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
     AND TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY)) > TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))
   LIMIT 100;
Answer:
user_pseudo_id,cohort_week,event_week
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
A976A39B8E08829A5BC5CD3827C942A2,2018-08-06 00:00:00+00:00,2018-08-27 00:00:00+00:00
Query:
SELECT
  cohort_week,
  COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week1
FROM (
  SELECT
    `user_pseudo_id`,
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY))) AS event_week
  FROM `firebase-public-project.analytics_153293282.events_*`
  WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
    AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
)
WHERE event_week = DATE_ADD(cohort_week, INTERVAL 1 WEEK)
GROUP BY cohort_week
ORDER BY cohort_week
LIMIT 100;
Answer:
cohort_week,users_retained_week1
2018-07-09,76
2018-07-16,88
2018-07-23,89
2018-07-30,91
2018-08-06,101
2018-08-13,78
2018-08-20,61
2018-08-27,87
2018-09-03,132
2018-09-10,100
2018-09-17,97
2018-09-24,51
Query:
SELECT
  cohort_week,
  COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week2
FROM (
  SELECT
    `user_pseudo_id`,
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY))) AS event_week
  FROM `firebase-public-project.analytics_153293282.events_*`
  WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
    AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
)
WHERE event_week = DATE_ADD(cohort_week, INTERVAL 2 WEEK)
GROUP BY cohort_week
ORDER BY cohort_week
LIMIT 100
Answer:
cohort_week,users_retained_week2
2018-07-09,52
2018-07-16,54
2018-07-23,62
2018-07-30,61
2018-08-06,54
2018-08-13,36
2018-08-20,57
2018-08-27,56
2018-09-03,57
2018-09-10,63
2018-09-17,24
Query:
SELECT
  cohorts.cohort_week,
  cohorts.users_in_cohort,
  IFNULL(week1.users_retained_week1, 0) AS users_retained_week1,
  IFNULL(week2.users_retained_week2, 0) AS users_retained_week2
FROM (
  SELECT
    DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
    COUNT(DISTINCT `user_pseudo_id`) AS users_in_cohort
  FROM `firebase-public-project.analytics_153293282.events_*`
  WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
    AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
  GROUP BY cohort_week
) AS cohorts
LEFT JOIN (
  SELECT
    cohort_week,
    COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week1
  FROM (
    SELECT
      `user_pseudo_id`,
      DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
      DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY))) AS event_week
    FROM `firebase-public-project.analytics_153293282.events_*`
    WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
      AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
  )
  WHERE event_week = DATE_ADD(cohort_week, INTERVAL 1 WEEK)
  GROUP BY cohort_week
) AS week1 ON cohorts.cohort_week = week1.cohort_week
LEFT JOIN (
  SELECT
    cohort_week,
    COUNT(DISTINCT `user_pseudo_id`) AS users_retained_week2
  FROM (
    SELECT
      `user_pseudo_id`,
      DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`user_first_touch_timestamp`), WEEK(MONDAY))) AS cohort_week,
      DATE(TIMESTAMP_TRUNC(TIMESTAMP_MICROS(`event_timestamp`), WEEK(MONDAY))) AS event_week
    FROM `firebase-public-project.analytics_153293282.events_*`
    WHERE `_TABLE_SUFFIX` BETWEEN '20180709' AND '20181002'
      AND TIMESTAMP_MICROS(`user_first_touch_timestamp`) >= TIMESTAMP('2018-07-09')
  )
  WHERE event_week = DATE_ADD(cohort_week, INTERVAL 2 WEEK)
  GROUP BY cohort_week
) AS week2 ON cohorts.cohort_week = week2.cohort_week
ORDER BY cohorts.cohort_week
LIMIT 100
Answer:
cohort_week,users_in_cohort,users_retained_week1,users_retained_week2
2018-07-09,296,76,52
2018-07-16,313,88,54
2018-07-23,305,89,62
2018-07-30,463,91,61
2018-08-06,388,101,54
2018-08-13,296,78,36
2018-08-20,318,61,57
2018-08-27,369,87,56
2018-09-03,460,132,57
2018-09-10,421,100,63
2018-09-17,306,97,24
2018-09-24,347,51,0
2018-10-01,117,0,0
End Exploring Related Columns
Task: Please conduct a weekly cohort analysis for user retention starting July 9, 2018. Group users by their first week of app use and calculate the retention rates for each cohort over the next two weeks, showing the rate of the original cohort that returned each week. The data is available up to October 2, 2018.

Please answer only one complete SQL in bigquery dialect in ```sql``` format.
Usage example: ```sql
SELECT `column_name` FROM `database.schema.table` WHERE ... ``` (Replace `database`, `schema`, and `table` with actual names. Enclose column names and table identifiers with backticks.)
Follow the answer format like: Below is the weekly cohort analysis for user retention starting July 9, 2018. Users are grouped by their first week of app use. The retention rates for each cohort over the next two weeks are calculated, showing the percentage of the original cohort that returned each week.

```csv
Cohort_Week_Start,Users_in_Cohort,Retention_Week1(%),Retention_Week2(%)
2018-07-09,num_users1:int,retention_week1_1:0<=float<=100,retention_week2_1:0<=float<=100
2018-07-16,num_users2:int,retention_week1_2:float,retention_week2_2:float
...
```

- **Cohort_Week_Start**: The starting date of the cohort week.
- **Users_in_Cohort**: Number of users who first used the app in the cohort week.
- **Retention_Week1(%)**: Percentage of the cohort that returned in the first week after the cohort week.
- **Retention_Week2(%)**: Percentage of the cohort that returned in the second week after the cohort week.

*(Attention: answer in multiple rows with placeholder values)*.
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'firebase-public-project': {'analytics_153293282': ['events_20180612', 'events_20180613', 'events_20180614', 'events_20180615', 'events_20180616', 'events_20180617', 'events_20180618', 'events_20180619', 'events_20180620', 'events_20180621', 'events_20180622', 'events_20180623', 'events_20180624', 'events_20180625', 'events_20180626', 'events_20180627', 'events_20180628', 'events_20180629', 'events_20180630', 'events_20180701', 'events_20180702', 'events_20180703', 'events_20180704', 'events_20180705', 'events_20180706', 'events_20180707', 'events_20180708', 'events_20180709', 'events_20180710', 'events_20180711', 'events_20180712', 'events_20180713', 'events_20180714', 'events_20180715', 'events_20180716', 'events_20180717', 'events_20180718', 'events_20180719', 'events_20180720', 'events_20180721', 'events_20180722', 'events_20180723', 'events_20180724', 'events_20180725', 'events_20180726', 'events_20180727', 'events_20180728', 'events_20180729', 'events_20180730', 'events_20180731', 'events_20180801', 'events_20180802', 'events_20180803', 'events_20180804', 'events_20180805', 'events_20180806', 'events_20180807', 'events_20180808', 'events_20180809', 'events_20180810', 'events_20180811', 'events_20180812', 'events_20180813', 'events_20180814', 'events_20180815', 'events_20180816', 'events_20180817', 'events_20180818', 'events_20180819', 'events_20180820', 'events_20180821', 'events_20180822', 'events_20180823', 'events_20180824', 'events_20180825', 'events_20180826', 'events_20180827', 'events_20180828', 'events_20180829', 'events_20180830', 'events_20180831', 'events_20180901', 'events_20180902', 'events_20180903', 'events_20180904', 'events_20180905', 'events_20180906', 'events_20180907', 'events_20180908', 'events_20180909', 'events_20180910', 'events_20180911', 'events_20180912', 'events_20180913', 'events_20180914', 'events_20180915', 'events_20180916', 'events_20180917', 'events_20180918', 'events_20180919', 'events_20180920', 'events_20180921', 'events_20180922', 'events_20180923', 'events_20180924', 'events_20180925', 'events_20180926', 'events_20180927', 'events_20180928', 'events_20180929', 'events_20180930', 'events_20181001', 'events_20181002', 'events_20181003']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-26 17:49:50 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 17:49:50 - root - INFO - ```sql
WITH cohorts AS (
  SELECT
    user_pseudo_id,
    DATE_TRUNC(DATE(TIMESTAMP_MICROS(user_first_touch_timestamp)), WEEK(MONDAY)) AS cohort_week_start
  FROM
    `firebase-public-project.analytics_153293282.events_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20180709' AND '20181002'
    AND DATE(TIMESTAMP_MICROS(user_first_touch_timestamp)) >= DATE('2018-07-09')
  GROUP BY
    user_pseudo_id,
    cohort_week_start
),

events_per_user_week AS (
  SELECT
    user_pseudo_id,
    DATE_TRUNC(DATE(TIMESTAMP_MICROS(event_timestamp)), WEEK(MONDAY)) AS event_week_start
  FROM
    `firebase-public-project.analytics_153293282.events_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20180709' AND '20181002'
  GROUP BY
    user_pseudo_id,
    event_week_start
),

retention AS (
  SELECT
    c.cohort_week_start,
    COUNT(DISTINCT c.user_pseudo_id) AS users_in_cohort,
    COUNT(DISTINCT CASE WHEN e.event_week_start = DATE_ADD(c.cohort_week_start, INTERVAL 1 WEEK) THEN c.user_pseudo_id END) AS users_retained_week1,
    COUNT(DISTINCT CASE WHEN e.event_week_start = DATE_ADD(c.cohort_week_start, INTERVAL 2 WEEK) THEN c.user_pseudo_id END) AS users_retained_week2
  FROM
    cohorts c
  LEFT JOIN
    events_per_user_week e
  ON
    c.user_pseudo_id = e.user_pseudo_id
    AND e.event_week_start IN (
      DATE_ADD(c.cohort_week_start, INTERVAL 1 WEEK),
      DATE_ADD(c.cohort_week_start, INTERVAL 2 WEEK)
    )
  GROUP BY
    c.cohort_week_start
)

SELECT
  FORMAT_DATE('%Y-%m-%d', cohort_week_start) AS Cohort_Week_Start,
  users_in_cohort AS Users_in_Cohort,
  ROUND(IFNULL(users_retained_week1 / users_in_cohort * 100, 0), 2) AS `Retention_Week1(%)`,
  ROUND(IFNULL(users_retained_week2 / users_in_cohort * 100, 0), 2) AS `Retention_Week2(%)`
FROM
  retention
ORDER BY
  cohort_week_start;
```
2025-01-26 17:49:55 - root - INFO - itercount: 1
2025-01-26 17:49:55 - root - INFO - 400 Invalid field name "Retention_Week1(%)". Fields must contain the allowed characters, and be at most 300 characters long. For allowed characters, please refer to https://cloud.google.com/bigquery/docs/schemas#column_names; reason: invalid, message: Invalid field name "Retention_Week1(%)". Fields must contain the allowed characters, and be at most 300 characters long. For allowed characters, please refer to https://cloud.google.com/bigquery/docs/schemas#column_names

Location: US
Job ID: 2cda285f-e709-4304-b24f-06741e0a5821

2025-01-26 17:49:55 - root - INFO - Input sql:
WITH cohorts AS (
  SELECT
    user_pseudo_id,
    DATE_TRUNC(DATE(TIMESTAMP_MICROS(user_first_touch_timestamp)), WEEK(MONDAY)) AS cohort_week_start
  FROM
    `firebase-public-project.analytics_153293282.events_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20180709' AND '20181002'
    AND DATE(TIMESTAMP_MICROS(user_first_touch_timestamp)) >= DATE('2018-07-09')
  GROUP BY
    user_pseudo_id,
    cohort_week_start
),

events_per_user_week AS (
  SELECT
    user_pseudo_id,
    DATE_TRUNC(DATE(TIMESTAMP_MICROS(event_timestamp)), WEEK(MONDAY)) AS event_week_start
  FROM
    `firebase-public-project.analytics_153293282.events_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20180709' AND '20181002'
  GROUP BY
    user_pseudo_id,
    event_week_start
),

retention AS (
  SELECT
    c.cohort_week_start,
    COUNT(DISTINCT c.user_pseudo_id) AS users_in_cohort,
    COUNT(DISTINCT CASE WHEN e.event_week_start = DATE_ADD(c.cohort_week_start, INTERVAL 1 WEEK) THEN c.user_pseudo_id END) AS users_retained_week1,
    COUNT(DISTINCT CASE WHEN e.event_week_start = DATE_ADD(c.cohort_week_start, INTERVAL 2 WEEK) THEN c.user_pseudo_id END) AS users_retained_week2
  FROM
    cohorts c
  LEFT JOIN
    events_per_user_week e
  ON
    c.user_pseudo_id = e.user_pseudo_id
    AND e.event_week_start IN (
      DATE_ADD(c.cohort_week_start, INTERVAL 1 WEEK),
      DATE_ADD(c.cohort_week_start, INTERVAL 2 WEEK)
    )
  GROUP BY
    c.cohort_week_start
)

SELECT
  FORMAT_DATE('%Y-%m-%d', cohort_week_start) AS Cohort_Week_Start,
  users_in_cohort AS Users_in_Cohort,
  ROUND(IFNULL(users_retained_week1 / users_in_cohort * 100, 0), 2) AS `Retention_Week1(%)`,
  ROUND(IFNULL(users_retained_week2 / users_in_cohort * 100, 0), 2) AS `Retention_Week2(%)`
FROM
  retention
ORDER BY
  cohort_week_start;
The error information is:
400 Invalid field name "Retention_Week1(%)". Fields must contain the allowed characters, and be at most 300 characters long. For allowed characters, please refer to https://cloud.google.com/bigquery/docs/schemas#column_names; reason: invalid, message: Invalid field name "Retention_Week1(%)". Fields must contain the allowed characters, and be at most 300 characters long. For allowed characters, please refer to https://cloud.google.com/bigquery/docs/schemas#column_names

Location: US
Job ID: 2cda285f-e709-4304-b24f-06741e0a5821

Please correct it and output only 1 complete SQL query.
2025-01-26 17:50:12 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 17:50:12 - root - INFO - ```sql
WITH cohorts AS (
  SELECT
    user_pseudo_id,
    DATE_TRUNC(DATE(TIMESTAMP_MICROS(user_first_touch_timestamp)), WEEK(MONDAY)) AS cohort_week_start
  FROM
    `firebase-public-project.analytics_153293282.events_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20180709' AND '20181002'
    AND DATE(TIMESTAMP_MICROS(user_first_touch_timestamp)) >= DATE('2018-07-09')
  GROUP BY
    user_pseudo_id,
    cohort_week_start
),

events_per_user_week AS (
  SELECT
    user_pseudo_id,
    DATE_TRUNC(DATE(TIMESTAMP_MICROS(event_timestamp)), WEEK(MONDAY)) AS event_week_start
  FROM
    `firebase-public-project.analytics_153293282.events_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20180709' AND '20181002'
  GROUP BY
    user_pseudo_id,
    event_week_start
),

retention AS (
  SELECT
    c.cohort_week_start,
    COUNT(DISTINCT c.user_pseudo_id) AS users_in_cohort,
    COUNT(DISTINCT CASE WHEN e.event_week_start = DATE_ADD(c.cohort_week_start, INTERVAL 1 WEEK) THEN c.user_pseudo_id END) AS users_retained_week1,
    COUNT(DISTINCT CASE WHEN e.event_week_start = DATE_ADD(c.cohort_week_start, INTERVAL 2 WEEK) THEN c.user_pseudo_id END) AS users_retained_week2
  FROM
    cohorts c
  LEFT JOIN
    events_per_user_week e
  ON
    c.user_pseudo_id = e.user_pseudo_id
    AND e.event_week_start IN (
      DATE_ADD(c.cohort_week_start, INTERVAL 1 WEEK),
      DATE_ADD(c.cohort_week_start, INTERVAL 2 WEEK)
    )
  GROUP BY
    c.cohort_week_start
)

SELECT
  FORMAT_DATE('%Y-%m-%d', cohort_week_start) AS Cohort_Week_Start,
  users_in_cohort AS Users_in_Cohort,
  ROUND(IFNULL(users_retained_week1 / users_in_cohort * 100, 0), 2) AS Retention_Week1_Percentage,
  ROUND(IFNULL(users_retained_week2 / users_in_cohort * 100, 0), 2) AS Retention_Week2_Percentage
FROM
  retention
ORDER BY
  cohort_week_start;
```
2025-01-26 17:50:17 - root - INFO - itercount: 2
2025-01-26 17:50:17 - root - INFO - 0
2025-01-26 17:50:17 - root - INFO - results: 
Cohort_Week_Start,Users_in_Cohort,Retention_Week1_Percentage,Retention_Week2_Percentage
2018-07-09,296,25.68,17.57
2018-07-16,313,28.12,17.25
2018-07-23,305,29.18,20.33
2018-07-30,463,19.65,13.17
2018-08-06,388,26.03,13.92
2018-08-13,296,26.35,12.16
2018-08-20,318,19.18,17.92
2018-08-27,369,23.58,15.18
2018-09-03,460,28.7,12.39
2018-09-10,421,23.75,14.96
2018-09-17,306,31.7,7.84
2018-09-24,347,14.7,0.0
2018-10-01,117,0.0,0.0


2025-01-26 17:50:17 - root - INFO - Please check the answer again by reviewing Please conduct a weekly cohort analysis for user retention starting July 9, 2018. Group users by their first week of app use and calculate the retention rates for each cohort over the next two weeks, showing the rate of the original cohort that returned each week. The data is available up to October 2, 2018., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: Below is the weekly cohort analysis for user retention starting July 9, 2018. Users are grouped by their first week of app use. The retention rates for each cohort over the next two weeks are calculated, showing the percentage of the original cohort that returned each week.

```csv
Cohort_Week_Start,Users_in_Cohort,Retention_Week1(%),Retention_Week2(%)
2018-07-09,num_users1:int,retention_week1_1:0<=float<=100,retention_week2_1:0<=float<=100
2018-07-16,num_users2:int,retention_week1_2:float,retention_week2_2:float
...
```

- **Cohort_Week_Start**: The starting date of the cohort week.
- **Users_in_Cohort**: Number of users who first used the app in the cohort week.
- **Retention_Week1(%)**: Percentage of the cohort that returned in the first week after the cohort week.
- **Retention_Week2(%)**: Percentage of the cohort that returned in the second week after the cohort week.

*(Attention: answer in multiple rows with placeholder values)* The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Cohort_Week_Start,Users_in_Cohort,Retention_Week1_Percentage,Retention_Week2_Percentage
2018-07-09,296,25.68,17.57
2018-07-16,313,28.12,17.25
2018-07-23,305,29.18,20.33
2018-07-30,463,19.65,13.17
2018-08-06,388,26.03,13.92
2018-08-13,296,26.35,12.16
2018-08-20,318,19.18,17.92
2018-08-27,369,23.58,15.18
2018-09-03,460,28.7,12.39
2018-09-10,421,23.75,14.96
2018-09-17,306,31.7,7.84
2018-09-24,347,14.7,0.0
2018-10-01,117,0.0,0.0
Current sql:
WITH cohorts AS (
  SELECT
    user_pseudo_id,
    DATE_TRUNC(DATE(TIMESTAMP_MICROS(user_first_touch_timestamp)), WEEK(MONDAY)) AS cohort_week_start
  FROM
    `firebase-public-project.analytics_153293282.events_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20180709' AND '20181002'
    AND DATE(TIMESTAMP_MICROS(user_first_touch_timestamp)) >= DATE('2018-07-09')
  GROUP BY
    user_pseudo_id,
    cohort_week_start
),

events_per_user_week AS (
  SELECT
    user_pseudo_id,
    DATE_TRUNC(DATE(TIMESTAMP_MICROS(event_timestamp)), WEEK(MONDAY)) AS event_week_start
  FROM
    `firebase-public-project.analytics_153293282.events_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20180709' AND '20181002'
  GROUP BY
    user_pseudo_id,
    event_week_start
),

retention AS (
  SELECT
    c.cohort_week_start,
    COUNT(DISTINCT c.user_pseudo_id) AS users_in_cohort,
    COUNT(DISTINCT CASE WHEN e.event_week_start = DATE_ADD(c.cohort_week_start, INTERVAL 1 WEEK) THEN c.user_pseudo_id END) AS users_retained_week1,
    COUNT(DISTINCT CASE WHEN e.event_week_start = DATE_ADD(c.cohort_week_start, INTERVAL 2 WEEK) THEN c.user_pseudo_id END) AS users_retained_week2
  FROM
    cohorts c
  LEFT JOIN
    events_per_user_week e
  ON
    c.user_pseudo_id = e.user_pseudo_id
    AND e.event_week_start IN (
      DATE_ADD(c.cohort_week_start, INTERVAL 1 WEEK),
      DATE_ADD(c.cohort_week_start, INTERVAL 2 WEEK)
    )
  GROUP BY
    c.cohort_week_start
)

SELECT
  FORMAT_DATE('%Y-%m-%d', cohort_week_start) AS Cohort_Week_Start,
  users_in_cohort AS Users_in_Cohort,
  ROUND(IFNULL(users_retained_week1 / users_in_cohort * 100, 0), 2) AS Retention_Week1_Percentage,
  ROUND(IFNULL(users_retained_week2 / users_in_cohort * 100, 0), 2) AS Retention_Week2_Percentage
FROM
  retention
ORDER BY
  cohort_week_start;
2025-01-26 17:51:19 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 17:51:19 - root - INFO - ```sql
WITH cohorts AS (
  SELECT
    user_pseudo_id,
    DATE_TRUNC(DATE(TIMESTAMP_MICROS(user_first_touch_timestamp)), WEEK(MONDAY)) AS cohort_week_start
  FROM
    `firebase-public-project.analytics_153293282.events_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20180709' AND '20181002'
    AND DATE(TIMESTAMP_MICROS(user_first_touch_timestamp)) >= DATE('2018-07-09')
  GROUP BY
    user_pseudo_id,
    cohort_week_start
),

events_per_user_week AS (
  SELECT
    user_pseudo_id,
    DATE_TRUNC(DATE(TIMESTAMP_MICROS(event_timestamp)), WEEK(MONDAY)) AS event_week_start
  FROM
    `firebase-public-project.analytics_153293282.events_*`
  WHERE
    _TABLE_SUFFIX BETWEEN '20180709' AND '20181002'
  GROUP BY
    user_pseudo_id,
    event_week_start
),

retention AS (
  SELECT
    c.cohort_week_start,
    COUNT(DISTINCT c.user_pseudo_id) AS users_in_cohort,
    COUNT(DISTINCT CASE WHEN e.event_week_start = DATE_ADD(c.cohort_week_start, INTERVAL 1 WEEK) THEN c.user_pseudo_id END) AS users_retained_week1,
    COUNT(DISTINCT CASE WHEN e.event_week_start = DATE_ADD(c.cohort_week_start, INTERVAL 2 WEEK) THEN c.user_pseudo_id END) AS users_retained_week2
  FROM
    cohorts c
  LEFT JOIN
    events_per_user_week e
  ON
    c.user_pseudo_id = e.user_pseudo_id
    AND e.event_week_start IN (
      DATE_ADD(c.cohort_week_start, INTERVAL 1 WEEK),
      DATE_ADD(c.cohort_week_start, INTERVAL 2 WEEK)
    )
  GROUP BY
    c.cohort_week_start
)

SELECT
  FORMAT_DATE('%Y-%m-%d', cohort_week_start) AS Cohort_Week_Start,
  users_in_cohort AS Users_in_Cohort,
  ROUND(IFNULL(users_retained_week1 / users_in_cohort * 100, 4), 4) AS Retention_Week1_Percentage,
  ROUND(IFNULL(users_retained_week2 / users_in_cohort * 100, 4), 4) AS Retention_Week2_Percentage
FROM
  retention
ORDER BY
  cohort_week_start;
```
2025-01-26 17:51:25 - root - INFO - itercount: 3
2025-01-26 17:51:25 - root - INFO - 0
2025-01-26 17:51:25 - root - INFO - Total iteration counts: 3
