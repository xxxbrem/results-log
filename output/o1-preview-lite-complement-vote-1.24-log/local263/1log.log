2025-01-25 01:48:14 - openai._base_client - INFO - Retrying request to /chat/completions in 0.484278 seconds
2025-01-25 01:50:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 01:50:39 - root - INFO - SQL:
SELECT DISTINCT "model" FROM "model_score" LIMIT 100;
Results:
model
DTCG
DTCE
RFCG
RFCE
ABC
LOGRL
LOGRS
LOGRLCV
LOGRSCV
MLPC1
MLPC2
KNCU
KNCD
Stack
GPRQ
DTRF
DTRA
DTRP
RFRS
RFRA
RFRP
ABR
HGBR
MLPR1
KNRU
KNRD
GPCL
GPCR
GPCQ
HGBC
GNB
GPRL
GPRR
ELNE
ELNECV
LINR
MLPR2
SGDCH
SGDCLL
SGDCMH
SVCL
SVCP
SVCG
SVCS
KERC
KERR

2025-01-25 01:50:39 - root - INFO - SQL:
SELECT DISTINCT "L1_model" FROM "model" LIMIT 100;
Results:
L1_model
regression
tree

2025-01-25 01:50:39 - root - INFO - SQL:
SELECT DISTINCT "name", "version" FROM "model_score" LIMIT 100;
Results:
name,version
iris,1
iris,2
iris,3
concrete,1
concrete,2
concrete,3
concrete,4
concrete,5
iris,4
iris,5
Delaney solubility,1
Delaney solubility,2
Delaney solubility,3
Delaney solubility,4
Critical Heat Flux,1
Critical Heat Flux,2
Critical Heat Flux,3
Critical Heat Flux,4
Liver disease prediction,1
Liver disease prediction,2
Liver disease prediction,3
Liver disease prediction,4
Liver disease prediction,5
Pumpkin Seeds,1
Pumpkin Seeds,2
Pumpkin Seeds,3
Pumpkin Seeds,4
water quality,1
water quality,2
water quality,3
lithium ion batteries,1
lithium ion batteries,2
lithium ion batteries,3
diabetes,1
diabetes,2
diabetes,3
diabetes,4
Franck-Hertz,1
Franck-Hertz,2
Franck-Hertz,3
Franck-Hertz,4
Franck-Hertz,5
Tunnel diode,1
Tunnel diode,2
Tunnel diode,3
Tunnel diode,4
Tunnel diode,5
Tunnel diode,6
survey lung cancer,1
survey lung cancer,2
survey lung cancer,3
survey lung cancer,4
survey lung cancer,5
oil spill,1
oil spill,2
oil spill,3
oil spill,4
oil spill,5
Solar Power Generation,1
Solar Power Generation,2
Solar Power Generation,3
Solar Power Generation,4
Solar Power Generation,5
Solar Power Generation,6
PCOS,1
PCOS,2
water quality 2,1
water quality 2,2
water quality 2,3
PCOS,3
kindey stone urine analysis,1
kindey stone urine analysis,2
kindey stone urine analysis,3
kindey stone urine analysis,4
kindey stone urine analysis,5
kindey stone urine analysis,6
kindey stone urine analysis,7
kindey stone urine analysis,8
Hospital Mortality Prediction,1
Hospital Mortality Prediction,2
Hospital Mortality Prediction,3
Hospital Mortality Prediction,4
Hospital Mortality Prediction,5
Hospital Mortality Prediction,6
smoke detection iot,1
smoke detection iot,2
smoke detection iot,3
smoke detection iot,4
smoke detection iot,5
concrete,6
iris,6
iris,7
Delaney solubility,5
concrete,7
Critical Heat Flux,5
Solar Power Generation,7
PSS3E5,1
PSS3E5,2
PSS3E5,3
PSS3E5,4

2025-01-25 01:50:39 - root - INFO - SQL:
SELECT "name", "version", "test_score"
   FROM "model_score"
   WHERE "model" = 'Stack'
   LIMIT 100;
Results:
name,version,test_score
iris,1,0.78
iris,1,0.8
iris,1,0.8
iris,2,0.78
iris,2,0.8
iris,2,0.8
iris,3,0.78
iris,3,0.8
iris,3,0.8
concrete,1,0.7491240941067063
concrete,1,0.7478259090713758
concrete,1,0.8952049262695958
concrete,2,0.7491240941067063
concrete,2,0.5153723438701945
concrete,2,0.7550913523238763
concrete,3,0.7491240941067063
concrete,3,0.6204357065145107
concrete,3,0.7624137560765165
concrete,4,0.7418636266993917
concrete,4,0.7943036798259414
concrete,4,0.7999917844923515
concrete,5,0.7418636266993917
concrete,5,0.8280251862560624
concrete,5,0.6465132269043822
iris,4,0.8
iris,4,0.74
iris,4,0.74
iris,5,0.8
iris,5,0.72
iris,5,0.72
Delaney solubility,1,0.8603318218230251
Delaney solubility,1,0.8709068763294372
Delaney solubility,1,0.8709068763294372
Delaney solubility,2,0.8603318218230251
Delaney solubility,2,0.8676115461542331
Delaney solubility,2,0.8676115461542331
Delaney solubility,3,0.7361578456024362
Delaney solubility,3,0.7688278804396981
Delaney solubility,3,0.7688278804396981
Delaney solubility,4,0.7361578456024362
Delaney solubility,4,0.7370747785614673
Delaney solubility,4,0.7370747785614673
Critical Heat Flux,1,0.8767667331999809
Critical Heat Flux,1,0.8860441283949297
Critical Heat Flux,1,0.8913847510635327
Critical Heat Flux,2,0.8767667331999809
Critical Heat Flux,2,0.8906124602518019
Critical Heat Flux,2,0.896051215319373
Critical Heat Flux,3,0.8470847778663093
Critical Heat Flux,3,0.8580739277704147
Critical Heat Flux,3,0.820001186352687
Critical Heat Flux,4,0.8470847778663093
Critical Heat Flux,4,0.8212042575388446
Critical Heat Flux,4,0.8249690699279786
Liver disease prediction,1,0.7696969696969697
Liver disease prediction,1,0.7636363636363637
Liver disease prediction,1,0.8
Liver disease prediction,2,0.8121212121212121
Liver disease prediction,2,0.8181818181818182
Liver disease prediction,2,0.8787878787878788
Liver disease prediction,3,0.793939393939394
Liver disease prediction,3,0.793939393939394
Liver disease prediction,3,0.7757575757575758
Liver disease prediction,4,0.8424242424242424
Liver disease prediction,4,0.8606060606060606
Liver disease prediction,4,0.8484848484848485
Liver disease prediction,5,0.8121212121212121
Liver disease prediction,5,0.9090909090909091
Liver disease prediction,5,0.8545454545454545
Pumpkin Seeds,1,0.8812121212121212
Pumpkin Seeds,1,0.8751515151515151
Pumpkin Seeds,1,0.8751515151515151
Pumpkin Seeds,2,0.8812121212121212
Pumpkin Seeds,2,0.8751515151515151
Pumpkin Seeds,2,0.8751515151515151
Pumpkin Seeds,3,0.7927272727272727
Pumpkin Seeds,3,0.806060606060606
Pumpkin Seeds,3,0.806060606060606
Pumpkin Seeds,4,0.7927272727272727
Pumpkin Seeds,4,0.8315151515151515
Pumpkin Seeds,4,0.7927272727272727
water quality,1,0.9545454545454546
water quality,1,0.9628099173553719
water quality,1,0.9421875
water quality,2,0.9545454545454546
water quality,2,0.9628099173553719
water quality,2,0.9615076182838813
water quality,3,0.9545454545454546
water quality,3,0.9628099173553719
water quality,3,0.9626926196269262
lithium ion batteries,1,1.0
lithium ion batteries,1,1.0
lithium ion batteries,1,0.9642857142857143
lithium ion batteries,2,0.9821428571428571
lithium ion batteries,2,0.9553571428571429
lithium ion batteries,2,0.9732142857142857
lithium ion batteries,3,1.0
lithium ion batteries,3,0.9732142857142857
lithium ion batteries,3,1.0
diabetes,1,0.7677165354330708

2025-01-25 01:50:39 - root - INFO - SQL:
SELECT "name", "version", "model", "test_score"
   FROM "model_score"
   WHERE "model" <> 'Stack'
   LIMIT 100;
Results:
name,version,model,test_score
iris,1,DTCG,0.66
iris,1,DTCE,0.74
iris,1,RFCG,0.74
iris,1,RFCE,0.74
iris,1,ABC,0.74
iris,1,LOGRL,0.82
iris,1,LOGRS,0.82
iris,1,LOGRLCV,0.78
iris,1,LOGRSCV,0.78
iris,1,MLPC1,0.18
iris,1,MLPC2,0.32
iris,1,KNCU,0.78
iris,1,KNCD,0.74
iris,1,ABC,0.74
iris,1,LOGRL,0.82
iris,1,LOGRS,0.82
iris,1,KNCU,0.78
iris,1,KNCD,0.74
iris,1,ABC,0.74
iris,1,LOGRL,0.82
iris,1,LOGRS,0.82
iris,1,KNCU,0.78
iris,1,KNCD,0.74
iris,2,DTCG,0.66
iris,2,DTCE,0.74
iris,2,RFCG,0.74
iris,2,RFCE,0.74
iris,2,ABC,0.74
iris,2,LOGRL,0.82
iris,2,LOGRS,0.82
iris,2,LOGRLCV,0.78
iris,2,LOGRSCV,0.78
iris,2,MLPC1,0.18
iris,2,MLPC2,0.32
iris,2,KNCU,0.78
iris,2,KNCD,0.74
iris,2,ABC,0.74
iris,2,LOGRS,0.82
iris,2,ABC,0.74
iris,2,LOGRS,0.82
iris,3,DTCG,0.66
iris,3,DTCE,0.74
iris,3,RFCG,0.74
iris,3,RFCE,0.74
iris,3,ABC,0.74
iris,3,LOGRL,0.82
iris,3,LOGRLCV,0.78
iris,3,MLPC1,0.18
iris,3,MLPC2,0.32
iris,3,KNCU,0.78
iris,3,KNCD,0.74
iris,3,ABC,0.74
iris,3,LOGRL,0.82
iris,3,ABC,0.74
iris,3,LOGRL,0.82
concrete,1,GPRQ,0.8645246650525136
concrete,1,DTRF,0.7730221399127792
concrete,1,DTRA,0.750903499864533
concrete,1,DTRP,0.7667845100320249
concrete,1,RFRS,0.8542442968763078
concrete,1,RFRA,0.8530848503734989
concrete,1,RFRP,0.8468371056049129
concrete,1,ABR,0.5501433922826775
concrete,1,HGBR,0.8884068368127706
concrete,1,MLPR1,0.6172737606465106
concrete,1,KNRU,0.5161682780869268
concrete,1,KNRD,0.6291811573603894
concrete,1,GPRQ,0.8645246650525136
concrete,1,DTRF,0.7730221399127792
concrete,1,DTRA,0.750903499864533
concrete,1,RFRP,0.8468371056049129
concrete,1,HGBR,0.8884068368127706
concrete,1,GPRQ,-7.09267714466483
concrete,1,DTRF,0.7897656878487402
concrete,1,DTRA,0.7678098487937882
concrete,1,RFRP,0.8620411609279719
concrete,1,HGBR,0.8885222604143914
concrete,2,GPRQ,0.8645246650525136
concrete,2,DTRF,0.7730221399127792
concrete,2,DTRA,0.750903499864533
concrete,2,DTRP,0.7667845100320249
concrete,2,RFRS,0.8542442968763078
concrete,2,RFRA,0.8530848503734989
concrete,2,RFRP,0.8468371056049129
concrete,2,ABR,0.5501433922826775
concrete,2,HGBR,0.8884068368127706
concrete,2,MLPR1,0.6172737606465106
concrete,2,KNRU,0.5161682780869268
concrete,2,KNRD,0.6291811573603894
concrete,2,GPRQ,0.8645246650525136
concrete,2,RFRP,0.8468371056049129
concrete,2,HGBR,0.8884068368127706
concrete,2,GPRQ,-6.162223676037567
concrete,2,RFRP,0.7294831008781688
concrete,2,HGBR,0.754951518145837
concrete,3,GPRQ,0.8645246650525136
concrete,3,DTRF,0.7730221399127792
concrete,3,DTRA,0.750903499864533
concrete,3,DTRP,0.7667845100320249
concrete,3,RFRS,0.8542442968763078

2025-01-25 01:50:39 - root - INFO - SQL:
SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
   FROM "model_score"
   WHERE "model" <> 'Stack'
   GROUP BY "name", "version"
   LIMIT 100;
Results:
name,version,max_non_stack_test_score
Critical Heat Flux,1,0.8868161892955251
Critical Heat Flux,2,0.8868161892955251
Critical Heat Flux,3,0.8868161892955251
Critical Heat Flux,4,0.8868161892955251
Critical Heat Flux,5,0.8836410197441006
Delaney solubility,1,0.8498776981484352
Delaney solubility,2,0.8498776981484352
Delaney solubility,3,0.8498776981484352
Delaney solubility,4,0.8498776981484352
Delaney solubility,5,0.8498776981484352
Franck-Hertz,1,0.46929699248120293
Franck-Hertz,2,0.46929699248120293
Franck-Hertz,3,0.46929699248120293
Franck-Hertz,4,0.46929699248120293
Franck-Hertz,5,0.46929699248120293
Hospital Mortality Prediction,1,0.8545454545454545
Hospital Mortality Prediction,2,0.8909090909090909
Hospital Mortality Prediction,3,0.8727272727272727
Hospital Mortality Prediction,4,0.8666666666666667
Hospital Mortality Prediction,5,0.8666666666666667
Hospital Mortality Prediction,6,0.8787878787878788
Liver disease prediction,1,0.8303030303030303
Liver disease prediction,2,0.8666666666666667
Liver disease prediction,3,0.8424242424242424
Liver disease prediction,4,0.8727272727272727
Liver disease prediction,5,0.9212121212121213
PCOS,1,0.888268156424581
PCOS,2,0.888268156424581
PCOS,3,0.888268156424581
PSS3E5,1,0.6142270861833106
PSS3E5,2,0.5718194254445964
PSS3E5,3,0.6142270861833106
PSS3E5,4,0.6163265306122448
PSS3E5,5,0.6653061224489796
Pumpkin Seeds,1,0.8848484848484849
Pumpkin Seeds,2,0.8848484848484849
Pumpkin Seeds,3,0.8848484848484849
Pumpkin Seeds,4,0.8848484848484849
Solar Power Generation,1,0.9221791895515516
Solar Power Generation,2,0.9221791895515516
Solar Power Generation,3,0.9221791895515516
Solar Power Generation,4,0.9221791895515516
Solar Power Generation,5,0.9221791895515516
Solar Power Generation,6,0.9221791895515516
Solar Power Generation,7,0.9232764166932035
Tunnel diode,1,0.941733622559653
Tunnel diode,2,0.941733622559653
Tunnel diode,3,0.941733622559653
Tunnel diode,4,0.941733622559653
Tunnel diode,5,0.941733622559653
Tunnel diode,6,0.941733622559653
concrete,1,0.8885222604143914
concrete,2,0.8884068368127706
concrete,3,0.8884068368127706
concrete,4,0.8885222604143914
concrete,5,0.8884068368127706
concrete,6,0.8980905157142272
concrete,7,0.8881812593695267
diabetes,1,0.7598425196850394
diabetes,2,0.7677165354330708
diabetes,3,0.7677165354330708
diabetes,4,0.7677165354330708
iris,1,0.82
iris,2,0.82
iris,3,0.82
iris,4,0.82
iris,5,0.82
iris,6,0.82
iris,7,0.82
kindey stone urine analysis,1,0.8518518518518519
kindey stone urine analysis,2,0.9636363636363636
kindey stone urine analysis,3,1.0
kindey stone urine analysis,4,1.0
kindey stone urine analysis,5,1.0
kindey stone urine analysis,6,1.0
kindey stone urine analysis,7,1.0
kindey stone urine analysis,8,0.8518518518518519
lithium ion batteries,1,1.0
lithium ion batteries,2,1.0
lithium ion batteries,3,1.0
oil spill,1,0.9655172413793104
oil spill,2,0.9862068965517241
oil spill,3,0.993103448275862
oil spill,4,0.9862068965517241
oil spill,5,0.9655172413793104
smoke detection iot,1,0.9999516160247726
smoke detection iot,2,0.9999516160247726
smoke detection iot,3,0.9999516160247726
smoke detection iot,4,0.9999516160247726
smoke detection iot,5,0.9999516160247726
survey lung cancer,1,0.9724137931034482
survey lung cancer,2,0.993103448275862
survey lung cancer,3,0.9862068965517241
survey lung cancer,4,0.9793103448275862
survey lung cancer,5,0.9655172413793104
water quality,1,0.9652892561983472
water quality,2,0.9652892561983472
water quality,3,0.9652892561983472
water quality 2,1,0.7959183673469388
water quality 2,2,0.7959183673469388

2025-01-25 01:50:39 - root - INFO - SQL:
SELECT "name", "version", "test_score" AS stack_test_score
   FROM "model_score"
   WHERE "model" = 'Stack'
   LIMIT 100;
Results:
name,version,stack_test_score
iris,1,0.78
iris,1,0.8
iris,1,0.8
iris,2,0.78
iris,2,0.8
iris,2,0.8
iris,3,0.78
iris,3,0.8
iris,3,0.8
concrete,1,0.7491240941067063
concrete,1,0.7478259090713758
concrete,1,0.8952049262695958
concrete,2,0.7491240941067063
concrete,2,0.5153723438701945
concrete,2,0.7550913523238763
concrete,3,0.7491240941067063
concrete,3,0.6204357065145107
concrete,3,0.7624137560765165
concrete,4,0.7418636266993917
concrete,4,0.7943036798259414
concrete,4,0.7999917844923515
concrete,5,0.7418636266993917
concrete,5,0.8280251862560624
concrete,5,0.6465132269043822
iris,4,0.8
iris,4,0.74
iris,4,0.74
iris,5,0.8
iris,5,0.72
iris,5,0.72
Delaney solubility,1,0.8603318218230251
Delaney solubility,1,0.8709068763294372
Delaney solubility,1,0.8709068763294372
Delaney solubility,2,0.8603318218230251
Delaney solubility,2,0.8676115461542331
Delaney solubility,2,0.8676115461542331
Delaney solubility,3,0.7361578456024362
Delaney solubility,3,0.7688278804396981
Delaney solubility,3,0.7688278804396981
Delaney solubility,4,0.7361578456024362
Delaney solubility,4,0.7370747785614673
Delaney solubility,4,0.7370747785614673
Critical Heat Flux,1,0.8767667331999809
Critical Heat Flux,1,0.8860441283949297
Critical Heat Flux,1,0.8913847510635327
Critical Heat Flux,2,0.8767667331999809
Critical Heat Flux,2,0.8906124602518019
Critical Heat Flux,2,0.896051215319373
Critical Heat Flux,3,0.8470847778663093
Critical Heat Flux,3,0.8580739277704147
Critical Heat Flux,3,0.820001186352687
Critical Heat Flux,4,0.8470847778663093
Critical Heat Flux,4,0.8212042575388446
Critical Heat Flux,4,0.8249690699279786
Liver disease prediction,1,0.7696969696969697
Liver disease prediction,1,0.7636363636363637
Liver disease prediction,1,0.8
Liver disease prediction,2,0.8121212121212121
Liver disease prediction,2,0.8181818181818182
Liver disease prediction,2,0.8787878787878788
Liver disease prediction,3,0.793939393939394
Liver disease prediction,3,0.793939393939394
Liver disease prediction,3,0.7757575757575758
Liver disease prediction,4,0.8424242424242424
Liver disease prediction,4,0.8606060606060606
Liver disease prediction,4,0.8484848484848485
Liver disease prediction,5,0.8121212121212121
Liver disease prediction,5,0.9090909090909091
Liver disease prediction,5,0.8545454545454545
Pumpkin Seeds,1,0.8812121212121212
Pumpkin Seeds,1,0.8751515151515151
Pumpkin Seeds,1,0.8751515151515151
Pumpkin Seeds,2,0.8812121212121212
Pumpkin Seeds,2,0.8751515151515151
Pumpkin Seeds,2,0.8751515151515151
Pumpkin Seeds,3,0.7927272727272727
Pumpkin Seeds,3,0.806060606060606
Pumpkin Seeds,3,0.806060606060606
Pumpkin Seeds,4,0.7927272727272727
Pumpkin Seeds,4,0.8315151515151515
Pumpkin Seeds,4,0.7927272727272727
water quality,1,0.9545454545454546
water quality,1,0.9628099173553719
water quality,1,0.9421875
water quality,2,0.9545454545454546
water quality,2,0.9628099173553719
water quality,2,0.9615076182838813
water quality,3,0.9545454545454546
water quality,3,0.9628099173553719
water quality,3,0.9626926196269262
lithium ion batteries,1,1.0
lithium ion batteries,1,1.0
lithium ion batteries,1,0.9642857142857143
lithium ion batteries,2,0.9821428571428571
lithium ion batteries,2,0.9553571428571429
lithium ion batteries,2,0.9732142857142857
lithium ion batteries,3,1.0
lithium ion batteries,3,0.9732142857142857
lithium ion batteries,3,1.0
diabetes,1,0.7677165354330708

2025-01-25 01:50:39 - root - INFO - SQL:
SELECT ns."name", ns."version",
          ns.max_non_stack_test_score,
          s.stack_test_score,
          CASE
             WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
             WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
             ELSE 'other'
          END AS status
   FROM
   (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
    FROM "model_score"
    WHERE "model" <> 'Stack'
    GROUP BY "name", "version") ns
   JOIN
   (SELECT "name", "version", "test_score" AS stack_test_score
    FROM "model_score"
    WHERE "model" = 'Stack') s
   ON ns."name" = s."name" AND ns."version" = s."version"
   LIMIT 100;
Results:
Too long, hard cut:
name,version,max_non_stack_test_score,stack_test_score,status
iris,1,0.82,0.78,other
iris,1,0.82,0.8,other
iris,1,0.82,0.8,other
iris,2,0.82,0.78,other
iris,2,0.82,0.8,other
iris,2,0.82,0.8,other
iris,3,0.82,0.78,other
iris,3,0.82,0.8,other
iris,3,0.82,0.8,other
concrete,1,0.8885222604143914,0.7491240941067063,other
concrete,1,0.8885222604143914,0.7478259090713758,other
concrete,1,0.8885222604143914,0.8952049262695958,strong
concrete,2,0.8884068368127706,0.7491240941067063,other
concrete,2,0.8884068368127706,0.5153723438701945,other
concrete,2,0.8884068368127706,0.7550913523238763,other
concrete,3,0.8884068368127706,0.7491240941067063,other
concrete,3,0.8884068368127706,0.6204357065145107,other
concrete,3,0.8884068368127706,0.7624137560765165,other
concrete,4,0.8885222604143914,0.7418636266993917,other
concrete,4,0.8885222604143914,0.7943036798259414,other
concrete,4,0.8885222604143914,0.7999917844923515,other
concrete,5,0.8884068368127706,0.7418636266993917,other
concrete,5,0.8884068368127706,0.8280251862560624,other
concrete,5,0.8884068368127706,0.6465132269043822,other
iris,4,0.82,0.8,other
iris,4,0.82,0.74,other
iris,4,0.82,0.74,other
iris,5,0.82,0.8,other
iris,5,0.82,0.72,other
iris,5,0.82,0.72,other
Delaney solubility,1,0.8498776981484352,0.8603318218230251,strong
Delaney solubility,1,0.8498776981484352,0.8709068763294372,strong
Delaney solubility,1,0.8498776981484352,0.8709068763294372,strong
Delaney solubility,2,0.8498776981484352,0.8603318218230251,strong
Delaney solubility,2,0.8498776981484352,0.8676115461542331,strong
Delaney solubility,2,0.8498776981484352,0.8676115461542331,strong
Delaney solubility,3,0.8498776981484352,0.7361578456024362,other
Delaney solubility,3,0.8498776981484352,0.7688278804396981,other
Delaney solubility,3,0.8498776981484352,0.7688278804396981,other
Delaney solubility,4,0.8498776981484352,0.7361578456024362,other
Delaney solubility,4,0.8498776981484352,0.7370747785614673,other
Delaney solubility,4,0.8498776981484352,0.7370747785614673,other
Critical Heat Flux,1,0.8868161892955251,0.8767667331999809,other
Critical Heat Flux,1,0.8868161892955251,0.8860441283949297,other
Critical Heat Flux,1,0.8868161892955251,0.8913847510635327,strong
Critical Heat Flux,2,0.8868161892955251,0.8767667331999809,other
Critical Heat Flux,2,0.8868161892955251,0.8906124602518019,strong
Critical Heat Flux,2,0.8868161892955251,0.896051215319373,strong
Critical Heat Flux,3,0.8868161892955251,0.8470847778663093,other
Critical Heat Flux,3,0.8868161892955251,0.8580739277704147,other
Critical Heat Flux,3,0.8868161892955251,0.820001186352687,other
Critical Heat Flux,4,0.8868161892955251,0.8470847778663093,other
Critical Heat Flux,4,0.8868161892955251,0.8212042575388446,other
Critical Heat Flux,4,0.8868161892955251,0.8249690699279786,other
Liver disease prediction,1,0.8303030303030303,0.7696969696969697,other
Liver disease prediction,1,0.8303030303030303,0.7636363636363637,other
Liver disease prediction,1,0.8303030303030303,0.8,other
Liver disease prediction,2,0.8666666666666667,0.8121212121212121,other
Liver disease prediction,2,0.8666666666666667,0.8181818181818182,other
Liver disease prediction,2,0.8666666666666667,0.8787878787878788,strong
Liver disease prediction,3,0.8424242424242424,0.793939393939394,other
Liver disease prediction,3,0.8424242424242424,0.793939393939394,other
Liver disease prediction,3,0.8424242424242424,0.7757575757575758,other
Liver disease prediction,4,0.8727272727272727,0.8424242424242424,other
Liver disease prediction,4,0.8727272727272727,0.8606060606060606,other
Liver disease prediction,4,0.8727272727272727,0.8484848484848485,other
Liver disease prediction,5,0.9212121212121213,0.8121212121212121,other
Liver disease prediction,5,0.9212121212121213,0.9090909090909091,other
Liver disease prediction,5,0.9212121212121213,0.8545454545454545,other
Pumpkin Seeds,1,0.8848484848484849,0.8812121212121212,other
Pumpkin Seeds,1,0.8848484848484849,0.8751515151515151,other
Pumpkin Seeds,1,0.8848484848484849,0.8751515151515151,other
Pumpkin Seeds,2,0.8848484848484849,0.8812121212121212,other
Pumpkin Seeds,2,0.8848484848484849,0.8751515151515151,other
Pumpkin Seeds,2,0.8848484848484849,0.8751515151515151,other
Pumpkin Seeds,3,0.8848484848484849,0.7927272727272727,other
Pumpkin Seeds,3,0.8848484848484849,0.806060606060606,other
Pumpkin Seeds,3,0.8848484848484849,0.806060606060606,other
Pumpkin Seeds,4,0.8848484848484849,0.7927272727272727,other
Pumpkin Seeds,4,0.8848484848484849,0.8315151515151515,other
Pumpkin Seeds,4,0.8848484848484849,0.7927272727272727,other
water quality,1,0.9652892561983472,0.9545454545454546,other
water quality,1,0.9652892561983472,0.9628099173553719,other
water quality,1,0.9652892561983472,0.9421875,other
water quality,2,0.9652892561983472,0.9545454545454546,other
water quality,2,0.9652892561983472,0.9628099173553719,other
water quality,2,0.9652892561983472,0.9615076182838813,other
water quality,3,0.9652892561983472,0.9545454545454546,other
water quality,3,0.965289256198

2025-01-25 01:50:39 - root - INFO - SQL:
SELECT "name", "version", "L1_model"
   FROM "model"
   WHERE "step" = 3
   LIMIT 100;
Results:
name,version,L1_model
iris,1,regression
iris,2,regression
iris,3,regression
concrete,1,regression
concrete,2,regression
concrete,3,regression
concrete,4,tree
concrete,5,tree
iris,4,tree
iris,5,tree
Delaney solubility,1,regression
Delaney solubility,2,regression
Delaney solubility,3,tree
Delaney solubility,4,tree
Critical Heat Flux,1,regression
Critical Heat Flux,2,regression
Critical Heat Flux,3,tree
Critical Heat Flux,4,tree
Liver disease prediction,1,regression
Liver disease prediction,2,regression
Liver disease prediction,3,regression
Liver disease prediction,4,regression
Liver disease prediction,5,tree
Pumpkin Seeds,1,regression
Pumpkin Seeds,2,regression
Pumpkin Seeds,3,tree
Pumpkin Seeds,4,tree
water quality,1,regression
water quality,2,regression
water quality,3,regression
lithium ion batteries,1,regression
lithium ion batteries,2,regression
lithium ion batteries,3,regression
diabetes,1,regression
diabetes,2,regression
diabetes,3,regression
diabetes,4,tree
Franck-Hertz,1,regression
Franck-Hertz,2,regression
Franck-Hertz,3,regression
Franck-Hertz,4,tree
Franck-Hertz,5,tree
Tunnel diode,1,regression
Tunnel diode,2,regression
Tunnel diode,3,regression
Tunnel diode,4,tree
Tunnel diode,5,tree
Tunnel diode,6,tree
survey lung cancer,1,regression
survey lung cancer,2,regression
survey lung cancer,3,regression
survey lung cancer,4,regression
survey lung cancer,5,tree
oil spill,1,regression
oil spill,2,regression
oil spill,3,regression
oil spill,4,tree
oil spill,5,tree
Solar Power Generation,1,regression
Solar Power Generation,2,regression
Solar Power Generation,3,regression
Solar Power Generation,4,regression
Solar Power Generation,5,regression
Solar Power Generation,6,regression
PCOS,1,regression
PCOS,2,tree
water quality 2,1,regression
water quality 2,2,regression
water quality 2,3,tree
PCOS,3,regression
kindey stone urine analysis,1,regression
kindey stone urine analysis,2,regression
kindey stone urine analysis,3,regression
kindey stone urine analysis,4,regression
kindey stone urine analysis,5,tree
kindey stone urine analysis,6,tree
kindey stone urine analysis,7,tree
kindey stone urine analysis,8,tree
Hospital Mortality Prediction,1,regression
Hospital Mortality Prediction,2,regression
Hospital Mortality Prediction,3,regression
Hospital Mortality Prediction,4,regression
Hospital Mortality Prediction,5,tree
Hospital Mortality Prediction,6,tree
smoke detection iot,1,regression
smoke detection iot,2,regression
smoke detection iot,3,regression
smoke detection iot,4,tree
smoke detection iot,5,tree
concrete,6,regression
iris,6,regression
iris,7,regression
Delaney solubility,5,regression
concrete,7,regression
Critical Heat Flux,5,regression
Solar Power Generation,7,regression
PSS3E5,1,regression
PSS3E5,2,regression
PSS3E5,3,regression
PSS3E5,4,regression

2025-01-25 01:50:39 - root - INFO - SQL:
SELECT st."name", st."version", st."status", m."L1_model"
    FROM
    (
        SELECT ns."name", ns."version",
               CASE
                  WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
                  WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
                  ELSE 'other'
               END AS status
        FROM
        (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
         FROM "model_score"
         WHERE "model" <> 'Stack'
         GROUP BY "name", "version") ns
        JOIN
        (SELECT "name", "version", "test_score" AS stack_test_score
         FROM "model_score"
         WHERE "model" = 'Stack') s
        ON ns."name" = s."name" AND ns."version" = s."version"
    ) st
    JOIN
    (SELECT "name", "version", "L1_model" FROM "model" WHERE "step" = 3) m
    ON st."name" = m."name" AND st."version" = m."version"
    LIMIT 100;
Results:
name,version,status,L1_model
iris,1,other,regression
iris,1,other,regression
iris,1,other,regression
iris,2,other,regression
iris,2,other,regression
iris,2,other,regression
iris,3,other,regression
iris,3,other,regression
iris,3,other,regression
concrete,1,other,regression
concrete,1,other,regression
concrete,1,strong,regression
concrete,2,other,regression
concrete,2,other,regression
concrete,2,other,regression
concrete,3,other,regression
concrete,3,other,regression
concrete,3,other,regression
concrete,4,other,tree
concrete,4,other,tree
concrete,4,other,tree
concrete,5,other,tree
concrete,5,other,tree
concrete,5,other,tree
iris,4,other,tree
iris,4,other,tree
iris,4,other,tree
iris,5,other,tree
iris,5,other,tree
iris,5,other,tree
Delaney solubility,1,strong,regression
Delaney solubility,1,strong,regression
Delaney solubility,1,strong,regression
Delaney solubility,2,strong,regression
Delaney solubility,2,strong,regression
Delaney solubility,2,strong,regression
Delaney solubility,3,other,tree
Delaney solubility,3,other,tree
Delaney solubility,3,other,tree
Delaney solubility,4,other,tree
Delaney solubility,4,other,tree
Delaney solubility,4,other,tree
Critical Heat Flux,1,other,regression
Critical Heat Flux,1,other,regression
Critical Heat Flux,1,strong,regression
Critical Heat Flux,2,other,regression
Critical Heat Flux,2,strong,regression
Critical Heat Flux,2,strong,regression
Critical Heat Flux,3,other,tree
Critical Heat Flux,3,other,tree
Critical Heat Flux,3,other,tree
Critical Heat Flux,4,other,tree
Critical Heat Flux,4,other,tree
Critical Heat Flux,4,other,tree
Liver disease prediction,1,other,regression
Liver disease prediction,1,other,regression
Liver disease prediction,1,other,regression
Liver disease prediction,2,other,regression
Liver disease prediction,2,other,regression
Liver disease prediction,2,strong,regression
Liver disease prediction,3,other,regression
Liver disease prediction,3,other,regression
Liver disease prediction,3,other,regression
Liver disease prediction,4,other,regression
Liver disease prediction,4,other,regression
Liver disease prediction,4,other,regression
Liver disease prediction,5,other,tree
Liver disease prediction,5,other,tree
Liver disease prediction,5,other,tree
Pumpkin Seeds,1,other,regression
Pumpkin Seeds,1,other,regression
Pumpkin Seeds,1,other,regression
Pumpkin Seeds,2,other,regression
Pumpkin Seeds,2,other,regression
Pumpkin Seeds,2,other,regression
Pumpkin Seeds,3,other,tree
Pumpkin Seeds,3,other,tree
Pumpkin Seeds,3,other,tree
Pumpkin Seeds,4,other,tree
Pumpkin Seeds,4,other,tree
Pumpkin Seeds,4,other,tree
water quality,1,other,regression
water quality,1,other,regression
water quality,1,other,regression
water quality,2,other,regression
water quality,2,other,regression
water quality,2,other,regression
water quality,3,other,regression
water quality,3,other,regression
water quality,3,other,regression
lithium ion batteries,1,soft,regression
lithium ion batteries,1,soft,regression
lithium ion batteries,1,other,regression
lithium ion batteries,2,other,regression
lithium ion batteries,2,other,regression
lithium ion batteries,2,other,regression
lithium ion batteries,3,soft,regression
lithium ion batteries,3,other,regression
lithium ion batteries,3,soft,regression
diabetes,1,strong,regression

2025-01-25 01:50:39 - root - INFO - SQL:
SELECT st."status", m."L1_model", COUNT(*) AS count
    FROM
    (
        SELECT ns."name", ns."version",
               CASE
                  WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
                  WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
                  ELSE 'other'
               END AS status
        FROM
        (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
         FROM "model_score"
         WHERE "model" <> 'Stack'
         GROUP BY "name", "version") ns
        JOIN
        (SELECT "name", "version", "test_score" AS stack_test_score
         FROM "model_score"
         WHERE "model" = 'Stack') s
        ON ns."name" = s."name" AND ns."version" = s."version"
    ) st
    JOIN
    (SELECT "name", "version", "L1_model" FROM "model" WHERE "step" = 3) m
    ON st."name" = m."name" AND st."version" = m."version"
    GROUP BY st."status", m."L1_model"
    LIMIT 100;
Results:
status,L1_model,count
other,regression,117
other,tree,68
soft,regression,34
soft,tree,10
strong,regression,62
strong,tree,12

2025-01-25 01:50:39 - root - INFO - SQL:
WITH status_counts AS (
        SELECT st."status", m."L1_model", COUNT(*) AS count
        FROM
        (
            SELECT ns."name", ns."version",
                   CASE
                      WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
                      WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
                      ELSE 'other'
                   END AS status
            FROM
            (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
             FROM "model_score"
             WHERE "model" <> 'Stack'
             GROUP BY "name", "version") ns
            JOIN
            (SELECT "name", "version", "test_score" AS stack_test_score
             FROM "model_score"
             WHERE "model" = 'Stack') s
            ON ns."name" = s."name" AND ns."version" = s."version"
        ) st
        JOIN
        (SELECT "name", "version", "L1_model" FROM "model" WHERE "step" = 3) m
        ON st."name" = m."name" AND st."version" = m."version"
        GROUP BY st."status", m."L1_model"
    ),
    max_counts AS (
        SELECT "status", MAX(count) AS max_count
        FROM status_counts
        GROUP BY "status"
    )
    SELECT sc."status", sc."L1_model", sc."count"
    FROM status_counts sc
    JOIN max_counts mc ON sc."status" = mc."status" AND sc."count" = mc."max_count"
    LIMIT 100;
Results:
status,L1_model,count
other,regression,117
soft,regression,34
strong,regression,62

2025-01-25 01:50:39 - root - INFO - itercount: 0
2025-01-25 01:50:39 - root - INFO - Table: problemDDL:
CREATE TABLE problem (name TEXT NOT NULL UNIQUE, path TEXT, type TEXT CHECK (type IN ("classification", "regression")), target TEXT, PRIMARY KEY (name))
Table: edaDDL:
CREATE TABLE eda (name TEXT, version INTEGER, feature TEXT, type TEXT, "range" BLOB, drop_user INTEGER CHECK (drop_user IN (0, 1)), drop_correlation INTEGER CHECK (drop_correlation IN (0, 1)), target INTEGER CHECK (target IN (0, 1)))
Table: feature_importanceDDL:
CREATE TABLE feature_importance (name TEXT, version INTEGER, step INTEGER, feature TEXT, importance NUMERIC)
Table: solutionDDL:
CREATE TABLE solution (name TEXT, version INTEGER, correlation NUMERIC, nb_model INTEGER, nb_feature INTEGER, score NUMERIC, test_size NUMERIC, resampling INTEGER CHECK (resampling IN (0, 1)) DEFAULT (0))
Table: model_scoreDDL:
CREATE TABLE model_score (name TEXT, version INTEGER, step INTEGER, model TEXT, train_score NUMERIC, test_score NUMERIC)
Table: model_importanceDDL:
CREATE TABLE model_importance (name TEXT, version INTEGER, step INTEGER, model TEXT, importance NUMERIC)
Table: modelDDL:
CREATE TABLE model (name TEXT, version INTEGER, step INTEGER CHECK (step IN (1, 2, 3)), L1_model TEXT CHECK (L1_model IN ("regression", "tree")))
External knowledge that might be helpful: 
None
The table structure information is (table names): 
['problem', 'eda', 'feature_importance', 'solution', 'model_score', 'model_importance', 'model']
Begin Exploring Related Columns
**Relevant Tables and Columns**

- **model_score**:
  - **name**: Identifier for the problem or dataset.
  - **version**: Version number of the model or solution.
  - **model**: Name of the model ('Stack' or other models).
  - **test_score**: The test score of the model.
  - *Potential usage*: Retrieve test scores for 'Stack' and non-'Stack' models for each (name, version) to determine the status ('strong' or 'soft').

- **model**:
  - **name**: Same as above.
  - **version**: Same as above.
  - **step**: The step number in the modeling process (1, 2, or 3).
  - **L1_model**: The type of first-level model used ('regression' or 'tree').
  - *Potential usage*: Find the L1_model associated with each (name, version) to count occurrences per status.

**Conditions Used**

- For each (name, version):
  - **Status determination**:
    - **'strong'**: The maximum test score for non-'Stack' models is less than the 'Stack' model's test score.
    - **'soft'**: The maximum test score for non-'Stack' models equals the 'Stack' model's test score.
  - **Linking L1_model**: Use the L1_model from step 3 in the 'model' table for each (name, version).

---

**SQL Queries**

1. **Query 1: Get distinct model names from model_score**

   ```sql
   SELECT DISTINCT "model" FROM "model_score" LIMIT 100;
   ```

2. **Query 2: Get distinct L1_models from model**

   ```sql
   SELECT DISTINCT "L1_model" FROM "model" LIMIT 100;
   ```

3. **Query 3: Get all (name, version) combinations from model_score**

   ```sql
   SELECT DISTINCT "name", "version" FROM "model_score" LIMIT 100;
   ```

4. **Query 4: Get test scores for 'Stack' models**

   ```sql
   SELECT "name", "version", "test_score"
   FROM "model_score"
   WHERE "model" = 'Stack'
   LIMIT 100;
   ```

5. **Query 5: Get test scores for non-'Stack' models**

   ```sql
   SELECT "name", "version", "model", "test_score"
   FROM "model_score"
   WHERE "model" <> 'Stack'
   LIMIT 100;
   ```

6. **Query 6: Get maximum test score for non-'Stack' models per (name, version)**

   ```sql
   SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
   FROM "model_score"
   WHERE "model" <> 'Stack'
   GROUP BY "name", "version"
   LIMIT 100;
   ```

7. **Query 7: Get test score for 'Stack' model per (name, version)**

   ```sql
   SELECT "name", "version", "test_score" AS stack_test_score
   FROM "model_score"
   WHERE "model" = 'Stack'
   LIMIT 100;
   ```

8. **Query 8: Determine status ('strong' or 'soft') for each (name, version)**

   ```sql
   SELECT ns."name", ns."version",
          ns.max_non_stack_test_score,
          s.stack_test_score,
          CASE
             WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
             WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
             ELSE 'other'
          END AS status
   FROM
   (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
    FROM "model_score"
    WHERE "model" <> 'Stack'
    GROUP BY "name", "version") ns
   JOIN
   (SELECT "name", "version", "test_score" AS stack_test_score
    FROM "model_score"
    WHERE "model" = 'Stack') s
   ON ns."name" = s."name" AND ns."version" = s."version"
   LIMIT 100;
   ```

9. **Query 9: Get L1_model used in step 3 for each (name, version)**

   ```sql
   SELECT "name", "version", "L1_model"
   FROM "model"
   WHERE "step" = 3
   LIMIT 100;
   ```

10. **Query 10: Combine status and L1_model per (name, version)**

    ```sql
    SELECT st."name", st."version", st."status", m."L1_model"
    FROM
    (
        SELECT ns."name", ns."version",
               CASE
                  WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
                  WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
                  ELSE 'other'
               END AS status
        FROM
        (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
         FROM "model_score"
         WHERE "model" <> 'Stack'
         GROUP BY "name", "version") ns
        JOIN
        (SELECT "name", "version", "test_score" AS stack_test_score
         FROM "model_score"
         WHERE "model" = 'Stack') s
        ON ns."name" = s."name" AND ns."version" = s."version"
    ) st
    JOIN
    (SELECT "name", "version", "L1_model" FROM "model" WHERE "step" = 3) m
    ON st."name" = m."name" AND st."version" = m."version"
    LIMIT 100;
    ```

11. **Query 11: Count occurrences of L1_model per status**

    ```sql
    SELECT st."status", m."L1_model", COUNT(*) AS count
    FROM
    (
        SELECT ns."name", ns."version",
               CASE
                  WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
                  WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
                  ELSE 'other'
               END AS status
        FROM
        (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
         FROM "model_score"
         WHERE "model" <> 'Stack'
         GROUP BY "name", "version") ns
        JOIN
        (SELECT "name", "version", "test_score" AS stack_test_score
         FROM "model_score"
         WHERE "model" = 'Stack') s
        ON ns."name" = s."name" AND ns."version" = s."version"
    ) st
    JOIN
    (SELECT "name", "version", "L1_model" FROM "model" WHERE "step" = 3) m
    ON st."name" = m."name" AND st."version" = m."version"
    GROUP BY st."status", m."L1_model"
    LIMIT 100;
    ```

12. **Query 12: Get L1_model with highest occurrence per status**

    ```sql
    WITH status_counts AS (
        SELECT st."status", m."L1_model", COUNT(*) AS count
        FROM
        (
            SELECT ns."name", ns."version",
                   CASE
                      WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
                      WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
                      ELSE 'other'
                   END AS status
            FROM
            (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
             FROM "model_score"
             WHERE "model" <> 'Stack'
             GROUP BY "name", "version") ns
            JOIN
            (SELECT "name", "version", "test_score" AS stack_test_score
             FROM "model_score"
             WHERE "model" = 'Stack') s
            ON ns."name" = s."name" AND ns."version" = s."version"
        ) st
        JOIN
        (SELECT "name", "version", "L1_model" FROM "model" WHERE "step" = 3) m
        ON st."name" = m."name" AND st."version" = m."version"
        GROUP BY st."status", m."L1_model"
    ),
    max_counts AS (
        SELECT "status", MAX(count) AS max_count
        FROM status_counts
        GROUP BY "status"
    )
    SELECT sc."status", sc."L1_model", sc."count"
    FROM status_counts sc
    JOIN max_counts mc ON sc."status" = mc."status" AND sc."count" = mc."max_count"
    LIMIT 100;
    ```

---

**Final Answer**

Using the above queries, we identify the L1_model with the highest occurrence for each status ('strong' and 'soft') and the number of times it occurs.

```csv
status,L1_model,count
strong,regression,count1:int
soft,tree,count2:int
```

**Explanation**

- **Status Determination**:
  - For each (name, version), we compared the maximum test score of non-'Stack' models with the test score of the 'Stack' model.
    - If the non-'Stack' maximum test score was less than the 'Stack' test score, we labeled the status as 'strong'.
    - If they were equal, we labeled the status as 'soft'.

- **Linking L1_model**:
  - We retrieved the L1_model used at step 3 from the 'model' table for each (name, version).

- **Counting Occurrences**:
  - We counted how many times each L1_model occurred within each status.
  - For each status, we identified the L1_model with the highest occurrence and the corresponding count.

**Note**: The actual L1_model names ('regression' or 'tree') and counts (count1:int, count2:int) are placeholders. Replace them with the actual values from your database after executing the queries.

---

This approach allows us to understand the data and compute the required result systematically, ensuring accuracy in identifying the L1_model with the highest occurrence for each status.Query:
SELECT DISTINCT "model" FROM "model_score" LIMIT 100;
Answer:
model
DTCG
DTCE
RFCG
RFCE
ABC
LOGRL
LOGRS
LOGRLCV
LOGRSCV
MLPC1
MLPC2
KNCU
KNCD
Stack
GPRQ
DTRF
DTRA
DTRP
RFRS
RFRA
RFRP
ABR
HGBR
MLPR1
KNRU
KNRD
GPCL
GPCR
GPCQ
HGBC
GNB
GPRL
GPRR
ELNE
ELNECV
LINR
MLPR2
SGDCH
SGDCLL
SGDCMH
SVCL
SVCP
SVCG
SVCS
KERC
KERR
Query:
SELECT DISTINCT "L1_model" FROM "model" LIMIT 100;
Answer:
L1_model
regression
tree
Query:
SELECT DISTINCT "name", "version" FROM "model_score" LIMIT 100;
Answer:
name,version
iris,1
iris,2
iris,3
concrete,1
concrete,2
concrete,3
concrete,4
concrete,5
iris,4
iris,5
Delaney solubility,1
Delaney solubility,2
Delaney solubility,3
Delaney solubility,4
Critical Heat Flux,1
Critical Heat Flux,2
Critical Heat Flux,3
Critical Heat Flux,4
Liver disease prediction,1
Liver disease prediction,2
Liver disease prediction,3
Liver disease prediction,4
Liver disease prediction,5
Pumpkin Seeds,1
Pumpkin Seeds,2
Pumpkin Seeds,3
Pumpkin Seeds,4
water quality,1
water quality,2
water quality,3
lithium ion batteries,1
lithium ion batteries,2
lithium ion batteries,3
diabetes,1
diabetes,2
diabetes,3
diabetes,4
Franck-Hertz,1
Franck-Hertz,2
Franck-Hertz,3
Franck-Hertz,4
Franck-Hertz,5
Tunnel diode,1
Tunnel diode,2
Tunnel diode,3
Tunnel diode,4
Tunnel diode,5
Tunnel diode,6
survey lung cancer,1
survey lung cancer,2
survey lung cancer,3
survey lung cancer,4
survey lung cancer,5
oil spill,1
oil spill,2
oil spill,3
oil spill,4
oil spill,5
Solar Power Generation,1
Solar Power Generation,2
Solar Power Generation,3
Solar Power Generation,4
Solar Power Generation,5
Solar Power Generation,6
PCOS,1
PCOS,2
water quality 2,1
water quality 2,2
water quality 2,3
PCOS,3
kindey stone urine analysis,1
kindey stone urine analysis,2
kindey stone urine analysis,3
kindey stone urine analysis,4
kindey stone urine analysis,5
kindey stone urine analysis,6
kindey stone urine analysis,7
kindey stone urine analysis,8
Hospital Mortality Prediction,1
Hospital Mortality Prediction,2
Hospital Mortality Prediction,3
Hospital Mortality Prediction,4
Hospital Mortality Prediction,5
Hospital Mortality Prediction,6
smoke detection iot,1
smoke detection iot,2
smoke detection iot,3
smoke detection iot,4
smoke detection iot,5
concrete,6
iris,6
iris,7
Delaney solubility,5
concrete,7
Critical Heat Flux,5
Solar Power Generation,7
PSS3E5,1
PSS3E5,2
PSS3E5,3
PSS3E5,4
Query:
SELECT "name", "version", "test_score"
   FROM "model_score"
   WHERE "model" = 'Stack'
   LIMIT 100;
Answer:
name,version,test_score
iris,1,0.78
iris,1,0.8
iris,1,0.8
iris,2,0.78
iris,2,0.8
iris,2,0.8
iris,3,0.78
iris,3,0.8
iris,3,0.8
concrete,1,0.7491240941067063
concrete,1,0.7478259090713758
concrete,1,0.8952049262695958
concrete,2,0.7491240941067063
concrete,2,0.5153723438701945
concrete,2,0.7550913523238763
concrete,3,0.7491240941067063
concrete,3,0.6204357065145107
concrete,3,0.7624137560765165
concrete,4,0.7418636266993917
concrete,4,0.7943036798259414
concrete,4,0.7999917844923515
concrete,5,0.7418636266993917
concrete,5,0.8280251862560624
concrete,5,0.6465132269043822
iris,4,0.8
iris,4,0.74
iris,4,0.74
iris,5,0.8
iris,5,0.72
iris,5,0.72
Delaney solubility,1,0.8603318218230251
Delaney solubility,1,0.8709068763294372
Delaney solubility,1,0.8709068763294372
Delaney solubility,2,0.8603318218230251
Delaney solubility,2,0.8676115461542331
Delaney solubility,2,0.8676115461542331
Delaney solubility,3,0.7361578456024362
Delaney solubility,3,0.7688278804396981
Delaney solubility,3,0.7688278804396981
Delaney solubility,4,0.7361578456024362
Delaney solubility,4,0.7370747785614673
Delaney solubility,4,0.7370747785614673
Critical Heat Flux,1,0.8767667331999809
Critical Heat Flux,1,0.8860441283949297
Critical Heat Flux,1,0.8913847510635327
Critical Heat Flux,2,0.8767667331999809
Critical Heat Flux,2,0.8906124602518019
Critical Heat Flux,2,0.896051215319373
Critical Heat Flux,3,0.8470847778663093
Critical Heat Flux,3,0.8580739277704147
Critical Heat Flux,3,0.820001186352687
Critical Heat Flux,4,0.8470847778663093
Critical Heat Flux,4,0.8212042575388446
Critical Heat Flux,4,0.8249690699279786
Liver disease prediction,1,0.7696969696969697
Liver disease prediction,1,0.7636363636363637
Liver disease prediction,1,0.8
Liver disease prediction,2,0.8121212121212121
Liver disease prediction,2,0.8181818181818182
Liver disease prediction,2,0.8787878787878788
Liver disease prediction,3,0.793939393939394
Liver disease prediction,3,0.793939393939394
Liver disease prediction,3,0.7757575757575758
Liver disease prediction,4,0.8424242424242424
Liver disease prediction,4,0.8606060606060606
Liver disease prediction,4,0.8484848484848485
Liver disease prediction,5,0.8121212121212121
Liver disease prediction,5,0.9090909090909091
Liver disease prediction,5,0.8545454545454545
Pumpkin Seeds,1,0.8812121212121212
Pumpkin Seeds,1,0.8751515151515151
Pumpkin Seeds,1,0.8751515151515151
Pumpkin Seeds,2,0.8812121212121212
Pumpkin Seeds,2,0.8751515151515151
Pumpkin Seeds,2,0.8751515151515151
Pumpkin Seeds,3,0.7927272727272727
Pumpkin Seeds,3,0.806060606060606
Pumpkin Seeds,3,0.806060606060606
Pumpkin Seeds,4,0.7927272727272727
Pumpkin Seeds,4,0.8315151515151515
Pumpkin Seeds,4,0.7927272727272727
water quality,1,0.9545454545454546
water quality,1,0.9628099173553719
water quality,1,0.9421875
water quality,2,0.9545454545454546
water quality,2,0.9628099173553719
water quality,2,0.9615076182838813
water quality,3,0.9545454545454546
water quality,3,0.9628099173553719
water quality,3,0.9626926196269262
lithium ion batteries,1,1.0
lithium ion batteries,1,1.0
lithium ion batteries,1,0.9642857142857143
lithium ion batteries,2,0.9821428571428571
lithium ion batteries,2,0.9553571428571429
lithium ion batteries,2,0.9732142857142857
lithium ion batteries,3,1.0
lithium ion batteries,3,0.9732142857142857
lithium ion batteries,3,1.0
diabetes,1,0.7677165354330708
Query:
SELECT "name", "version", "model", "test_score"
   FROM "model_score"
   WHERE "model" <> 'Stack'
   LIMIT 100;
Answer:
name,version,model,test_score
iris,1,DTCG,0.66
iris,1,DTCE,0.74
iris,1,RFCG,0.74
iris,1,RFCE,0.74
iris,1,ABC,0.74
iris,1,LOGRL,0.82
iris,1,LOGRS,0.82
iris,1,LOGRLCV,0.78
iris,1,LOGRSCV,0.78
iris,1,MLPC1,0.18
iris,1,MLPC2,0.32
iris,1,KNCU,0.78
iris,1,KNCD,0.74
iris,1,ABC,0.74
iris,1,LOGRL,0.82
iris,1,LOGRS,0.82
iris,1,KNCU,0.78
iris,1,KNCD,0.74
iris,1,ABC,0.74
iris,1,LOGRL,0.82
iris,1,LOGRS,0.82
iris,1,KNCU,0.78
iris,1,KNCD,0.74
iris,2,DTCG,0.66
iris,2,DTCE,0.74
iris,2,RFCG,0.74
iris,2,RFCE,0.74
iris,2,ABC,0.74
iris,2,LOGRL,0.82
iris,2,LOGRS,0.82
iris,2,LOGRLCV,0.78
iris,2,LOGRSCV,0.78
iris,2,MLPC1,0.18
iris,2,MLPC2,0.32
iris,2,KNCU,0.78
iris,2,KNCD,0.74
iris,2,ABC,0.74
iris,2,LOGRS,0.82
iris,2,ABC,0.74
iris,2,LOGRS,0.82
iris,3,DTCG,0.66
iris,3,DTCE,0.74
iris,3,RFCG,0.74
iris,3,RFCE,0.74
iris,3,ABC,0.74
iris,3,LOGRL,0.82
iris,3,LOGRLCV,0.78
iris,3,MLPC1,0.18
iris,3,MLPC2,0.32
iris,3,KNCU,0.78
iris,3,KNCD,0.74
iris,3,ABC,0.74
iris,3,LOGRL,0.82
iris,3,ABC,0.74
iris,3,LOGRL,0.82
concrete,1,GPRQ,0.8645246650525136
concrete,1,DTRF,0.7730221399127792
concrete,1,DTRA,0.750903499864533
concrete,1,DTRP,0.7667845100320249
concrete,1,RFRS,0.8542442968763078
concrete,1,RFRA,0.8530848503734989
concrete,1,RFRP,0.8468371056049129
concrete,1,ABR,0.5501433922826775
concrete,1,HGBR,0.8884068368127706
concrete,1,MLPR1,0.6172737606465106
concrete,1,KNRU,0.5161682780869268
concrete,1,KNRD,0.6291811573603894
concrete,1,GPRQ,0.8645246650525136
concrete,1,DTRF,0.7730221399127792
concrete,1,DTRA,0.750903499864533
concrete,1,RFRP,0.8468371056049129
concrete,1,HGBR,0.8884068368127706
concrete,1,GPRQ,-7.09267714466483
concrete,1,DTRF,0.7897656878487402
concrete,1,DTRA,0.7678098487937882
concrete,1,RFRP,0.8620411609279719
concrete,1,HGBR,0.8885222604143914
concrete,2,GPRQ,0.8645246650525136
concrete,2,DTRF,0.7730221399127792
concrete,2,DTRA,0.750903499864533
concrete,2,DTRP,0.7667845100320249
concrete,2,RFRS,0.8542442968763078
concrete,2,RFRA,0.8530848503734989
concrete,2,RFRP,0.8468371056049129
concrete,2,ABR,0.5501433922826775
concrete,2,HGBR,0.8884068368127706
concrete,2,MLPR1,0.6172737606465106
concrete,2,KNRU,0.5161682780869268
concrete,2,KNRD,0.6291811573603894
concrete,2,GPRQ,0.8645246650525136
concrete,2,RFRP,0.8468371056049129
concrete,2,HGBR,0.8884068368127706
concrete,2,GPRQ,-6.162223676037567
concrete,2,RFRP,0.7294831008781688
concrete,2,HGBR,0.754951518145837
concrete,3,GPRQ,0.8645246650525136
concrete,3,DTRF,0.7730221399127792
concrete,3,DTRA,0.750903499864533
concrete,3,DTRP,0.7667845100320249
concrete,3,RFRS,0.8542442968763078
Query:
SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
   FROM "model_score"
   WHERE "model" <> 'Stack'
   GROUP BY "name", "version"
   LIMIT 100;
Answer:
name,version,max_non_stack_test_score
Critical Heat Flux,1,0.8868161892955251
Critical Heat Flux,2,0.8868161892955251
Critical Heat Flux,3,0.8868161892955251
Critical Heat Flux,4,0.8868161892955251
Critical Heat Flux,5,0.8836410197441006
Delaney solubility,1,0.8498776981484352
Delaney solubility,2,0.8498776981484352
Delaney solubility,3,0.8498776981484352
Delaney solubility,4,0.8498776981484352
Delaney solubility,5,0.8498776981484352
Franck-Hertz,1,0.46929699248120293
Franck-Hertz,2,0.46929699248120293
Franck-Hertz,3,0.46929699248120293
Franck-Hertz,4,0.46929699248120293
Franck-Hertz,5,0.46929699248120293
Hospital Mortality Prediction,1,0.8545454545454545
Hospital Mortality Prediction,2,0.8909090909090909
Hospital Mortality Prediction,3,0.8727272727272727
Hospital Mortality Prediction,4,0.8666666666666667
Hospital Mortality Prediction,5,0.8666666666666667
Hospital Mortality Prediction,6,0.8787878787878788
Liver disease prediction,1,0.8303030303030303
Liver disease prediction,2,0.8666666666666667
Liver disease prediction,3,0.8424242424242424
Liver disease prediction,4,0.8727272727272727
Liver disease prediction,5,0.9212121212121213
PCOS,1,0.888268156424581
PCOS,2,0.888268156424581
PCOS,3,0.888268156424581
PSS3E5,1,0.6142270861833106
PSS3E5,2,0.5718194254445964
PSS3E5,3,0.6142270861833106
PSS3E5,4,0.6163265306122448
PSS3E5,5,0.6653061224489796
Pumpkin Seeds,1,0.8848484848484849
Pumpkin Seeds,2,0.8848484848484849
Pumpkin Seeds,3,0.8848484848484849
Pumpkin Seeds,4,0.8848484848484849
Solar Power Generation,1,0.9221791895515516
Solar Power Generation,2,0.9221791895515516
Solar Power Generation,3,0.9221791895515516
Solar Power Generation,4,0.9221791895515516
Solar Power Generation,5,0.9221791895515516
Solar Power Generation,6,0.9221791895515516
Solar Power Generation,7,0.9232764166932035
Tunnel diode,1,0.941733622559653
Tunnel diode,2,0.941733622559653
Tunnel diode,3,0.941733622559653
Tunnel diode,4,0.941733622559653
Tunnel diode,5,0.941733622559653
Tunnel diode,6,0.941733622559653
concrete,1,0.8885222604143914
concrete,2,0.8884068368127706
concrete,3,0.8884068368127706
concrete,4,0.8885222604143914
concrete,5,0.8884068368127706
concrete,6,0.8980905157142272
concrete,7,0.8881812593695267
diabetes,1,0.7598425196850394
diabetes,2,0.7677165354330708
diabetes,3,0.7677165354330708
diabetes,4,0.7677165354330708
iris,1,0.82
iris,2,0.82
iris,3,0.82
iris,4,0.82
iris,5,0.82
iris,6,0.82
iris,7,0.82
kindey stone urine analysis,1,0.8518518518518519
kindey stone urine analysis,2,0.9636363636363636
kindey stone urine analysis,3,1.0
kindey stone urine analysis,4,1.0
kindey stone urine analysis,5,1.0
kindey stone urine analysis,6,1.0
kindey stone urine analysis,7,1.0
kindey stone urine analysis,8,0.8518518518518519
lithium ion batteries,1,1.0
lithium ion batteries,2,1.0
lithium ion batteries,3,1.0
oil spill,1,0.9655172413793104
oil spill,2,0.9862068965517241
oil spill,3,0.993103448275862
oil spill,4,0.9862068965517241
oil spill,5,0.9655172413793104
smoke detection iot,1,0.9999516160247726
smoke detection iot,2,0.9999516160247726
smoke detection iot,3,0.9999516160247726
smoke detection iot,4,0.9999516160247726
smoke detection iot,5,0.9999516160247726
survey lung cancer,1,0.9724137931034482
survey lung cancer,2,0.993103448275862
survey lung cancer,3,0.9862068965517241
survey lung cancer,4,0.9793103448275862
survey lung cancer,5,0.9655172413793104
water quality,1,0.9652892561983472
water quality,2,0.9652892561983472
water quality,3,0.9652892561983472
water quality 2,1,0.7959183673469388
water quality 2,2,0.7959183673469388
Query:
SELECT "name", "version", "test_score" AS stack_test_score
   FROM "model_score"
   WHERE "model" = 'Stack'
   LIMIT 100;
Answer:
name,version,stack_test_score
iris,1,0.78
iris,1,0.8
iris,1,0.8
iris,2,0.78
iris,2,0.8
iris,2,0.8
iris,3,0.78
iris,3,0.8
iris,3,0.8
concrete,1,0.7491240941067063
concrete,1,0.7478259090713758
concrete,1,0.8952049262695958
concrete,2,0.7491240941067063
concrete,2,0.5153723438701945
concrete,2,0.7550913523238763
concrete,3,0.7491240941067063
concrete,3,0.6204357065145107
concrete,3,0.7624137560765165
concrete,4,0.7418636266993917
concrete,4,0.7943036798259414
concrete,4,0.7999917844923515
concrete,5,0.7418636266993917
concrete,5,0.8280251862560624
concrete,5,0.6465132269043822
iris,4,0.8
iris,4,0.74
iris,4,0.74
iris,5,0.8
iris,5,0.72
iris,5,0.72
Delaney solubility,1,0.8603318218230251
Delaney solubility,1,0.8709068763294372
Delaney solubility,1,0.8709068763294372
Delaney solubility,2,0.8603318218230251
Delaney solubility,2,0.8676115461542331
Delaney solubility,2,0.8676115461542331
Delaney solubility,3,0.7361578456024362
Delaney solubility,3,0.7688278804396981
Delaney solubility,3,0.7688278804396981
Delaney solubility,4,0.7361578456024362
Delaney solubility,4,0.7370747785614673
Delaney solubility,4,0.7370747785614673
Critical Heat Flux,1,0.8767667331999809
Critical Heat Flux,1,0.8860441283949297
Critical Heat Flux,1,0.8913847510635327
Critical Heat Flux,2,0.8767667331999809
Critical Heat Flux,2,0.8906124602518019
Critical Heat Flux,2,0.896051215319373
Critical Heat Flux,3,0.8470847778663093
Critical Heat Flux,3,0.8580739277704147
Critical Heat Flux,3,0.820001186352687
Critical Heat Flux,4,0.8470847778663093
Critical Heat Flux,4,0.8212042575388446
Critical Heat Flux,4,0.8249690699279786
Liver disease prediction,1,0.7696969696969697
Liver disease prediction,1,0.7636363636363637
Liver disease prediction,1,0.8
Liver disease prediction,2,0.8121212121212121
Liver disease prediction,2,0.8181818181818182
Liver disease prediction,2,0.8787878787878788
Liver disease prediction,3,0.793939393939394
Liver disease prediction,3,0.793939393939394
Liver disease prediction,3,0.7757575757575758
Liver disease prediction,4,0.8424242424242424
Liver disease prediction,4,0.8606060606060606
Liver disease prediction,4,0.8484848484848485
Liver disease prediction,5,0.8121212121212121
Liver disease prediction,5,0.9090909090909091
Liver disease prediction,5,0.8545454545454545
Pumpkin Seeds,1,0.8812121212121212
Pumpkin Seeds,1,0.8751515151515151
Pumpkin Seeds,1,0.8751515151515151
Pumpkin Seeds,2,0.8812121212121212
Pumpkin Seeds,2,0.8751515151515151
Pumpkin Seeds,2,0.8751515151515151
Pumpkin Seeds,3,0.7927272727272727
Pumpkin Seeds,3,0.806060606060606
Pumpkin Seeds,3,0.806060606060606
Pumpkin Seeds,4,0.7927272727272727
Pumpkin Seeds,4,0.8315151515151515
Pumpkin Seeds,4,0.7927272727272727
water quality,1,0.9545454545454546
water quality,1,0.9628099173553719
water quality,1,0.9421875
water quality,2,0.9545454545454546
water quality,2,0.9628099173553719
water quality,2,0.9615076182838813
water quality,3,0.9545454545454546
water quality,3,0.9628099173553719
water quality,3,0.9626926196269262
lithium ion batteries,1,1.0
lithium ion batteries,1,1.0
lithium ion batteries,1,0.9642857142857143
lithium ion batteries,2,0.9821428571428571
lithium ion batteries,2,0.9553571428571429
lithium ion batteries,2,0.9732142857142857
lithium ion batteries,3,1.0
lithium ion batteries,3,0.9732142857142857
lithium ion batteries,3,1.0
diabetes,1,0.7677165354330708
Query:
SELECT ns."name", ns."version",
          ns.max_non_stack_test_score,
          s.stack_test_score,
          CASE
             WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
             WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
             ELSE 'other'
          END AS status
   FROM
   (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
    FROM "model_score"
    WHERE "model" <> 'Stack'
    GROUP BY "name", "version") ns
   JOIN
   (SELECT "name", "version", "test_score" AS stack_test_score
    FROM "model_score"
    WHERE "model" = 'Stack') s
   ON ns."name" = s."name" AND ns."version" = s."version"
   LIMIT 100;
Answer:
Too long, hard cut:
name,version,max_non_stack_test_score,stack_test_score,status
iris,1,0.82,0.78,other
iris,1,0.82,0.8,other
iris,1,0.82,0.8,other
iris,2,0.82,0.78,other
iris,2,0.82,0.8,other
iris,2,0.82,0.8,other
iris,3,0.82,0.78,other
iris,3,0.82,0.8,other
iris,3,0.82,0.8,other
concrete,1,0.8885222604143914,0.7491240941067063,other
concrete,1,0.8885222604143914,0.7478259090713758,other
concrete,1,0.8885222604143914,0.8952049262695958,strong
concrete,2,0.8884068368127706,0.7491240941067063,other
concrete,2,0.8884068368127706,0.5153723438701945,other
concrete,2,0.8884068368127706,0.7550913523238763,other
concrete,3,0.8884068368127706,0.7491240941067063,other
concrete,3,0.8884068368127706,0.6204357065145107,other
concrete,3,0.8884068368127706,0.7624137560765165,other
concrete,4,0.8885222604143914,0.7418636266993917,other
concrete,4,0.8885222604143914,0.7943036798259414,other
concrete,4,0.8885222604143914,0.7999917844923515,other
concrete,5,0.8884068368127706,0.7418636266993917,other
concrete,5,0.8884068368127706,0.8280251862560624,other
concrete,5,0.8884068368127706,0.6465132269043822,other
iris,4,0.82,0.8,other
iris,4,0.82,0.74,other
iris,4,0.82,0.74,other
iris,5,0.82,0.8,other
iris,5,0.82,0.72,other
iris,5,0.82,0.72,other
Delaney solubility,1,0.8498776981484352,0.8603318218230251,strong
Delaney solubility,1,0.8498776981484352,0.8709068763294372,strong
Delaney solubility,1,0.8498776981484352,0.8709068763294372,strong
Delaney solubility,2,0.8498776981484352,0.8603318218230251,strong
Delaney solubility,2,0.8498776981484352,0.8676115461542331,strong
Delaney solubility,2,0.8498776981484352,0.8676115461542331,strong
Delaney solubility,3,0.8498776981484352,0.7361578456024362,other
Delaney solubility,3,0.8498776981484352,0.7688278804396981,other
Delaney solubility,3,0.8498776981484352,0.7688278804396981,other
Delaney solubility,4,0.8498776981484352,0.7361578456024362,other
Delaney solubility,4,0.8498776981484352,0.7370747785614673,other
Delaney solubility,4,0.8498776981484352,0.7370747785614673,other
Critical Heat Flux,1,0.8868161892955251,0.8767667331999809,other
Critical Heat Flux,1,0.8868161892955251,0.8860441283949297,other
Critical Heat Flux,1,0.8868161892955251,0.8913847510635327,strong
Critical Heat Flux,2,0.8868161892955251,0.8767667331999809,other
Critical Heat Flux,2,0.8868161892955251,0.8906124602518019,strong
Critical Heat Flux,2,0.8868161892955251,0.896051215319373,strong
Critical Heat Flux,3,0.8868161892955251,0.8470847778663093,other
Critical Heat Flux,3,0.8868161892955251,0.8580739277704147,other
Critical Heat Flux,3,0.8868161892955251,0.820001186352687,other
Critical Heat Flux,4,0.8868161892955251,0.8470847778663093,other
Critical Heat Flux,4,0.8868161892955251,0.8212042575388446,other
Critical Heat Flux,4,0.8868161892955251,0.8249690699279786,other
Liver disease prediction,1,0.8303030303030303,0.7696969696969697,other
Liver disease prediction,1,0.8303030303030303,0.7636363636363637,other
Liver disease prediction,1,0.8303030303030303,0.8,other
Liver disease prediction,2,0.8666666666666667,0.8121212121212121,other
Liver disease prediction,2,0.8666666666666667,0.8181818181818182,other
Liver disease prediction,2,0.8666666666666667,0.8787878787878788,strong
Liver disease prediction,3,0.8424242424242424,0.793939393939394,other
Liver disease prediction,3,0.8424242424242424,0.793939393939394,other
Liver disease prediction,3,0.8424242424242424,0.7757575757575758,other
Liver disease prediction,4,0.8727272727272727,0.8424242424242424,other
Liver disease prediction,4,0.8727272727272727,0.8606060606060606,other
Liver disease prediction,4,0.8727272727272727,0.8484848484848485,other
Liver disease prediction,5,0.9212121212121213,0.8121212121212121,other
Liver disease prediction,5,0.9212121212121213,0.9090909090909091,other
Liver disease prediction,5,0.9212121212121213,0.8545454545454545,other
Pumpkin Seeds,1,0.8848484848484849,0.8812121212121212,other
Pumpkin Seeds,1,0.8848484848484849,0.8751515151515151,other
Pumpkin Seeds,1,0.8848484848484849,0.8751515151515151,other
Pumpkin Seeds,2,0.8848484848484849,0.8812121212121212,other
Pumpkin Seeds,2,0.8848484848484849,0.8751515151515151,other
Pumpkin Seeds,2,0.8848484848484849,0.8751515151515151,other
Pumpkin Seeds,3,0.8848484848484849,0.7927272727272727,other
Pumpkin Seeds,3,0.8848484848484849,0.806060606060606,other
Pumpkin Seeds,3,0.8848484848484849,0.806060606060606,other
Pumpkin Seeds,4,0.8848484848484849,0.7927272727272727,other
Pumpkin Seeds,4,0.8848484848484849,0.8315151515151515,other
Pumpkin Seeds,4,0.8848484848484849,0.7927272727272727,other
water quality,1,0.9652892561983472,0.9545454545454546,other
water quality,1,0.9652892561983472,0.9628099173553719,other
water quality,1,0.9652892561983472,0.9421875,other
water quality,2,0.9652892561983472,0.9545454545454546,other
water quality,2,0.9652892561983472,0.9628099173553719,other
water quality,2,0.9652892561983472,0.9615076182838813,other
water quality,3,0.9652892561983472,0.9545454545454546,other
water quality,3,0.965289256198
Query:
SELECT "name", "version", "L1_model"
   FROM "model"
   WHERE "step" = 3
   LIMIT 100;
Answer:
name,version,L1_model
iris,1,regression
iris,2,regression
iris,3,regression
concrete,1,regression
concrete,2,regression
concrete,3,regression
concrete,4,tree
concrete,5,tree
iris,4,tree
iris,5,tree
Delaney solubility,1,regression
Delaney solubility,2,regression
Delaney solubility,3,tree
Delaney solubility,4,tree
Critical Heat Flux,1,regression
Critical Heat Flux,2,regression
Critical Heat Flux,3,tree
Critical Heat Flux,4,tree
Liver disease prediction,1,regression
Liver disease prediction,2,regression
Liver disease prediction,3,regression
Liver disease prediction,4,regression
Liver disease prediction,5,tree
Pumpkin Seeds,1,regression
Pumpkin Seeds,2,regression
Pumpkin Seeds,3,tree
Pumpkin Seeds,4,tree
water quality,1,regression
water quality,2,regression
water quality,3,regression
lithium ion batteries,1,regression
lithium ion batteries,2,regression
lithium ion batteries,3,regression
diabetes,1,regression
diabetes,2,regression
diabetes,3,regression
diabetes,4,tree
Franck-Hertz,1,regression
Franck-Hertz,2,regression
Franck-Hertz,3,regression
Franck-Hertz,4,tree
Franck-Hertz,5,tree
Tunnel diode,1,regression
Tunnel diode,2,regression
Tunnel diode,3,regression
Tunnel diode,4,tree
Tunnel diode,5,tree
Tunnel diode,6,tree
survey lung cancer,1,regression
survey lung cancer,2,regression
survey lung cancer,3,regression
survey lung cancer,4,regression
survey lung cancer,5,tree
oil spill,1,regression
oil spill,2,regression
oil spill,3,regression
oil spill,4,tree
oil spill,5,tree
Solar Power Generation,1,regression
Solar Power Generation,2,regression
Solar Power Generation,3,regression
Solar Power Generation,4,regression
Solar Power Generation,5,regression
Solar Power Generation,6,regression
PCOS,1,regression
PCOS,2,tree
water quality 2,1,regression
water quality 2,2,regression
water quality 2,3,tree
PCOS,3,regression
kindey stone urine analysis,1,regression
kindey stone urine analysis,2,regression
kindey stone urine analysis,3,regression
kindey stone urine analysis,4,regression
kindey stone urine analysis,5,tree
kindey stone urine analysis,6,tree
kindey stone urine analysis,7,tree
kindey stone urine analysis,8,tree
Hospital Mortality Prediction,1,regression
Hospital Mortality Prediction,2,regression
Hospital Mortality Prediction,3,regression
Hospital Mortality Prediction,4,regression
Hospital Mortality Prediction,5,tree
Hospital Mortality Prediction,6,tree
smoke detection iot,1,regression
smoke detection iot,2,regression
smoke detection iot,3,regression
smoke detection iot,4,tree
smoke detection iot,5,tree
concrete,6,regression
iris,6,regression
iris,7,regression
Delaney solubility,5,regression
concrete,7,regression
Critical Heat Flux,5,regression
Solar Power Generation,7,regression
PSS3E5,1,regression
PSS3E5,2,regression
PSS3E5,3,regression
PSS3E5,4,regression
Query:
SELECT st."name", st."version", st."status", m."L1_model"
    FROM
    (
        SELECT ns."name", ns."version",
               CASE
                  WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
                  WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
                  ELSE 'other'
               END AS status
        FROM
        (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
         FROM "model_score"
         WHERE "model" <> 'Stack'
         GROUP BY "name", "version") ns
        JOIN
        (SELECT "name", "version", "test_score" AS stack_test_score
         FROM "model_score"
         WHERE "model" = 'Stack') s
        ON ns."name" = s."name" AND ns."version" = s."version"
    ) st
    JOIN
    (SELECT "name", "version", "L1_model" FROM "model" WHERE "step" = 3) m
    ON st."name" = m."name" AND st."version" = m."version"
    LIMIT 100;
Answer:
name,version,status,L1_model
iris,1,other,regression
iris,1,other,regression
iris,1,other,regression
iris,2,other,regression
iris,2,other,regression
iris,2,other,regression
iris,3,other,regression
iris,3,other,regression
iris,3,other,regression
concrete,1,other,regression
concrete,1,other,regression
concrete,1,strong,regression
concrete,2,other,regression
concrete,2,other,regression
concrete,2,other,regression
concrete,3,other,regression
concrete,3,other,regression
concrete,3,other,regression
concrete,4,other,tree
concrete,4,other,tree
concrete,4,other,tree
concrete,5,other,tree
concrete,5,other,tree
concrete,5,other,tree
iris,4,other,tree
iris,4,other,tree
iris,4,other,tree
iris,5,other,tree
iris,5,other,tree
iris,5,other,tree
Delaney solubility,1,strong,regression
Delaney solubility,1,strong,regression
Delaney solubility,1,strong,regression
Delaney solubility,2,strong,regression
Delaney solubility,2,strong,regression
Delaney solubility,2,strong,regression
Delaney solubility,3,other,tree
Delaney solubility,3,other,tree
Delaney solubility,3,other,tree
Delaney solubility,4,other,tree
Delaney solubility,4,other,tree
Delaney solubility,4,other,tree
Critical Heat Flux,1,other,regression
Critical Heat Flux,1,other,regression
Critical Heat Flux,1,strong,regression
Critical Heat Flux,2,other,regression
Critical Heat Flux,2,strong,regression
Critical Heat Flux,2,strong,regression
Critical Heat Flux,3,other,tree
Critical Heat Flux,3,other,tree
Critical Heat Flux,3,other,tree
Critical Heat Flux,4,other,tree
Critical Heat Flux,4,other,tree
Critical Heat Flux,4,other,tree
Liver disease prediction,1,other,regression
Liver disease prediction,1,other,regression
Liver disease prediction,1,other,regression
Liver disease prediction,2,other,regression
Liver disease prediction,2,other,regression
Liver disease prediction,2,strong,regression
Liver disease prediction,3,other,regression
Liver disease prediction,3,other,regression
Liver disease prediction,3,other,regression
Liver disease prediction,4,other,regression
Liver disease prediction,4,other,regression
Liver disease prediction,4,other,regression
Liver disease prediction,5,other,tree
Liver disease prediction,5,other,tree
Liver disease prediction,5,other,tree
Pumpkin Seeds,1,other,regression
Pumpkin Seeds,1,other,regression
Pumpkin Seeds,1,other,regression
Pumpkin Seeds,2,other,regression
Pumpkin Seeds,2,other,regression
Pumpkin Seeds,2,other,regression
Pumpkin Seeds,3,other,tree
Pumpkin Seeds,3,other,tree
Pumpkin Seeds,3,other,tree
Pumpkin Seeds,4,other,tree
Pumpkin Seeds,4,other,tree
Pumpkin Seeds,4,other,tree
water quality,1,other,regression
water quality,1,other,regression
water quality,1,other,regression
water quality,2,other,regression
water quality,2,other,regression
water quality,2,other,regression
water quality,3,other,regression
water quality,3,other,regression
water quality,3,other,regression
lithium ion batteries,1,soft,regression
lithium ion batteries,1,soft,regression
lithium ion batteries,1,other,regression
lithium ion batteries,2,other,regression
lithium ion batteries,2,other,regression
lithium ion batteries,2,other,regression
lithium ion batteries,3,soft,regression
lithium ion batteries,3,other,regression
lithium ion batteries,3,soft,regression
diabetes,1,strong,regression
Query:
SELECT st."status", m."L1_model", COUNT(*) AS count
    FROM
    (
        SELECT ns."name", ns."version",
               CASE
                  WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
                  WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
                  ELSE 'other'
               END AS status
        FROM
        (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
         FROM "model_score"
         WHERE "model" <> 'Stack'
         GROUP BY "name", "version") ns
        JOIN
        (SELECT "name", "version", "test_score" AS stack_test_score
         FROM "model_score"
         WHERE "model" = 'Stack') s
        ON ns."name" = s."name" AND ns."version" = s."version"
    ) st
    JOIN
    (SELECT "name", "version", "L1_model" FROM "model" WHERE "step" = 3) m
    ON st."name" = m."name" AND st."version" = m."version"
    GROUP BY st."status", m."L1_model"
    LIMIT 100;
Answer:
status,L1_model,count
other,regression,117
other,tree,68
soft,regression,34
soft,tree,10
strong,regression,62
strong,tree,12
Query:
WITH status_counts AS (
        SELECT st."status", m."L1_model", COUNT(*) AS count
        FROM
        (
            SELECT ns."name", ns."version",
                   CASE
                      WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
                      WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
                      ELSE 'other'
                   END AS status
            FROM
            (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
             FROM "model_score"
             WHERE "model" <> 'Stack'
             GROUP BY "name", "version") ns
            JOIN
            (SELECT "name", "version", "test_score" AS stack_test_score
             FROM "model_score"
             WHERE "model" = 'Stack') s
            ON ns."name" = s."name" AND ns."version" = s."version"
        ) st
        JOIN
        (SELECT "name", "version", "L1_model" FROM "model" WHERE "step" = 3) m
        ON st."name" = m."name" AND st."version" = m."version"
        GROUP BY st."status", m."L1_model"
    ),
    max_counts AS (
        SELECT "status", MAX(count) AS max_count
        FROM status_counts
        GROUP BY "status"
    )
    SELECT sc."status", sc."L1_model", sc."count"
    FROM status_counts sc
    JOIN max_counts mc ON sc."status" = mc."status" AND sc."count" = mc."max_count"
    LIMIT 100;
Answer:
status,L1_model,count
other,regression,117
soft,regression,34
strong,regression,62
End Exploring Related Columns
Task: Which L1_model has the highest occurrence for each status ('strong,' where the maximum test score for non-'Stack' models is less than the 'Stack' score, and 'soft,' where it equals the 'Stack' score), and how many times does it occur?

Please answer only one complete SQL in sqlite dialect in ```sql``` format.
Usage example: ```sql
SELECT DISTINCT "column_name" FROM "table_name" WHERE ... ``` (Replace "table_name" with the actual table name. Enclose table and column names with double quotations if they contain special characters or match reserved keywords.)
Follow the answer format like: ```csv
status,L1_model,count
strong,L1_model_name1:str,count1:int
soft,L1_model_name2:str,count2:int
```

For each status ('strong' and 'soft'), the L1_model with the highest occurrence is listed along with the number of times it occurs..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: 

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-25 01:51:10 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 01:51:10 - root - INFO - ```sql
WITH status_counts AS (
    SELECT st."status", m."L1_model", COUNT(*) AS count
    FROM
    (
        SELECT ns."name", ns."version",
               CASE
                  WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
                  WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
                  ELSE 'other'
               END AS status
        FROM
        (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
         FROM "model_score"
         WHERE "model" <> 'Stack'
         GROUP BY "name", "version") ns
        JOIN
        (SELECT "name", "version", "test_score" AS stack_test_score
         FROM "model_score"
         WHERE "model" = 'Stack') s
        ON ns."name" = s."name" AND ns."version" = s."version"
    ) st
    JOIN
    (SELECT "name", "version", "L1_model" FROM "model" WHERE "step" = 3) m
    ON st."name" = m."name" AND st."version" = m."version"
    GROUP BY st."status", m."L1_model"
),
max_counts AS (
    SELECT "status", MAX(count) AS max_count
    FROM status_counts
    GROUP BY "status"
)
SELECT sc."status", sc."L1_model", sc."count"
FROM status_counts sc
JOIN max_counts mc ON sc."status" = mc."status" AND sc."count" = mc."max_count"
WHERE sc."status" IN ('strong', 'soft');
```
2025-01-25 01:51:10 - root - INFO - itercount: 1
2025-01-25 01:51:10 - root - INFO - 0
2025-01-25 01:51:10 - root - INFO - results: 
status,L1_model,count
soft,regression,34
strong,regression,62


2025-01-25 01:51:10 - root - INFO - Please check the answer again by reviewing Which L1_model has the highest occurrence for each status ('strong,' where the maximum test score for non-'Stack' models is less than the 'Stack' score, and 'soft,' where it equals the 'Stack' score), and how many times does it occur?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
status,L1_model,count
strong,L1_model_name1:str,count1:int
soft,L1_model_name2:str,count2:int
```

For each status ('strong' and 'soft'), the L1_model with the highest occurrence is listed along with the number of times it occurs. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
status,L1_model,count
soft,regression,34
strong,regression,62
Current sql:
WITH status_counts AS (
    SELECT st."status", m."L1_model", COUNT(*) AS count
    FROM
    (
        SELECT ns."name", ns."version",
               CASE
                  WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
                  WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
                  ELSE 'other'
               END AS status
        FROM
        (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
         FROM "model_score"
         WHERE "model" <> 'Stack'
         GROUP BY "name", "version") ns
        JOIN
        (SELECT "name", "version", "test_score" AS stack_test_score
         FROM "model_score"
         WHERE "model" = 'Stack') s
        ON ns."name" = s."name" AND ns."version" = s."version"
    ) st
    JOIN
    (SELECT "name", "version", "L1_model" FROM "model" WHERE "step" = 3) m
    ON st."name" = m."name" AND st."version" = m."version"
    GROUP BY st."status", m."L1_model"
),
max_counts AS (
    SELECT "status", MAX(count) AS max_count
    FROM status_counts
    GROUP BY "status"
)
SELECT sc."status", sc."L1_model", sc."count"
FROM status_counts sc
JOIN max_counts mc ON sc."status" = mc."status" AND sc."count" = mc."max_count"
WHERE sc."status" IN ('strong', 'soft');
2025-01-25 01:51:30 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 01:51:30 - root - INFO - ```sql
WITH status_counts AS (
    SELECT st."status", m."L1_model", COUNT(*) AS count
    FROM
    (
        SELECT ns."name", ns."version",
               CASE
                  WHEN ns.max_non_stack_test_score < s.stack_test_score THEN 'strong'
                  WHEN ns.max_non_stack_test_score = s.stack_test_score THEN 'soft'
                  ELSE 'other'
               END AS status
        FROM
        (SELECT "name", "version", MAX("test_score") AS max_non_stack_test_score
         FROM "model_score"
         WHERE "model" <> 'Stack'
         GROUP BY "name", "version") ns
        JOIN
        (SELECT "name", "version", "test_score" AS stack_test_score
         FROM "model_score"
         WHERE "model" = 'Stack') s
        ON ns."name" = s."name" AND ns."version" = s."version"
    ) st
    JOIN
    (SELECT "name", "version", "L1_model" FROM "model" WHERE "step" = 3) m
    ON st."name" = m."name" AND st."version" = m."version"
    WHERE st."status" IN ('strong', 'soft')
    GROUP BY st."status", m."L1_model"
),
max_counts AS (
    SELECT "status", MAX(count) AS max_count
    FROM status_counts
    GROUP BY "status"
)
SELECT sc."status", sc."L1_model", sc."count"
FROM status_counts sc
JOIN max_counts mc ON sc."status" = mc."status" AND sc."count" = mc."max_count";
```
2025-01-25 01:51:30 - root - INFO - itercount: 2
2025-01-25 01:51:30 - root - INFO - 0
2025-01-25 01:51:30 - root - INFO - Total iteration counts: 2
