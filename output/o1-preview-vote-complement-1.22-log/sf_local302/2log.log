2025-01-23 05:11:40 - openai._base_client - INFO - Retrying request to /chat/completions in 0.451828 seconds
2025-01-23 05:13:04 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-23 05:13:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:05 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-23 05:13:05 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:05 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:05 - root - INFO - SQL:
SELECT DISTINCT "region"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
Results:
region
ASIA
USA
EUROPE
AFRICA
CANADA
SOUTH AMERICA
OCEANIA

2025-01-23 05:13:05 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:05 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:05 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:07 - snowflake.connector.cursor - INFO - Number of results in first chunk: 2
2025-01-23 05:13:07 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:07 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:07 - root - INFO - SQL:
SELECT DISTINCT "platform"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
Results:
platform
Retail
Shopify

2025-01-23 05:13:07 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:07 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:07 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:08 - snowflake.connector.cursor - INFO - Number of results in first chunk: 4
2025-01-23 05:13:08 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:09 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:09 - root - INFO - SQL:
SELECT DISTINCT "age_band"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
Results:
age_band
Retirees
Young Adults
Middle Aged
unknown

2025-01-23 05:13:09 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:09 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:09 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:10 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-23 05:13:10 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:10 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:11 - root - INFO - SQL:
SELECT DISTINCT "demographic"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
Results:
demographic
Couples
Families
unknown

2025-01-23 05:13:11 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:11 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:11 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:12 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-23 05:13:12 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:12 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:12 - root - INFO - SQL:
SELECT DISTINCT "customer_type"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
Results:
customer_type
New
Guest
Existing

2025-01-23 05:13:12 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:12 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:12 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:13 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-23 05:13:13 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:14 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:14 - root - INFO - SQL:
SELECT "week_date", "sales"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND DATEADD(week, 12, '2020-06-15')
   LIMIT 100;
Results:
week_date,sales
2020-08-31,3656163
2020-08-31,996575
2020-08-31,16509610
2020-08-31,141942
2020-08-31,1758388
2020-08-31,243878
2020-08-31,519502
2020-08-31,371417
2020-08-31,49557
2020-08-31,3888162
2020-08-31,260773
2020-08-31,882690
2020-08-31,38762
2020-08-31,917
2020-08-31,35215
2020-08-31,30371770
2020-08-31,374327
2020-08-31,5185233
2020-08-31,2980673
2020-08-31,463738
2020-08-31,65730
2020-08-31,14430196
2020-08-31,2176980
2020-08-31,478756
2020-08-31,3319
2020-08-31,5306746
2020-08-31,4511841
2020-08-31,134249
2020-08-31,1579
2020-08-31,11451
2020-08-31,31589
2020-08-31,53567
2020-08-31,4023
2020-08-31,4768214
2020-08-31,396909
2020-08-31,8562
2020-08-31,8723663
2020-08-31,957939
2020-08-31,7625
2020-08-31,20635
2020-08-31,2265
2020-08-31,633917
2020-08-31,72293
2020-08-31,13839
2020-08-31,68009
2020-08-31,269176
2020-08-31,10874
2020-08-31,1306932
2020-08-31,3507
2020-08-31,1144376
2020-08-31,3325
2020-08-31,15074
2020-08-31,1473178
2020-08-31,1369115
2020-08-31,20255591
2020-08-31,48773122
2020-08-31,55780
2020-08-31,554
2020-08-31,2126153
2020-08-31,6603287
2020-08-31,1026838
2020-08-31,11086427
2020-08-31,19049
2020-08-31,564306
2020-08-31,7331
2020-08-31,2272687
2020-08-31,1562
2020-08-31,12836
2020-08-31,1548637
2020-08-31,45518
2020-08-31,37786
2020-08-31,48624
2020-08-31,2156778
2020-08-31,5941067
2020-08-31,395877
2020-08-31,22712143
2020-08-31,16149
2020-08-31,3322211
2020-08-31,66422
2020-08-31,27184
2020-08-31,979807
2020-08-31,833470
2020-08-31,7178808
2020-08-31,7422165
2020-08-31,91616
2020-08-31,661362
2020-08-31,786613
2020-08-31,11755
2020-08-31,883573
2020-08-31,2232935
2020-08-31,12438
2020-08-31,8473
2020-08-31,104677
2020-08-31,2016930
2020-08-31,461694
2020-08-31,1221
2020-08-31,95547
2020-08-31,990085
2020-08-31,10624187
2020-08-31,2078649

2025-01-23 05:13:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:15 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-23 05:13:15 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:15 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:16 - root - INFO - SQL:
SELECT "region", AVG("sales") AS "average_sales"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   GROUP BY "region"
   LIMIT 100;
Results:
region,average_sales
ASIA,3743941.977124
USA,1604514.864788
EUROPE,276092.552135
AFRICA,4060658.933415
CANADA,1012535.911356
OCEANIA,5448868.924020
SOUTH AMERICA,499810.862351

2025-01-23 05:13:16 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:16 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:16 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:17 - snowflake.connector.cursor - INFO - Number of results in first chunk: 2
2025-01-23 05:13:17 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:17 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:17 - root - INFO - SQL:
SELECT "platform", AVG("sales") AS "average_sales"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   GROUP BY "platform"
   LIMIT 100;
Results:
platform,average_sales
Retail,4628223.206933
Shopify,127385.400632

2025-01-23 05:13:17 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:17 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:17 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:19 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-23 05:13:19 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:19 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:19 - root - INFO - SQL:
SELECT "customer_type", SUM("sales") AS "total_sales"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   GROUP BY "customer_type"
   LIMIT 100;
Results:
customer_type,total_sales
New,5231884863
Guest,15225504483
Existing,20286244881

2025-01-23 05:13:19 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:19 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:19 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:20 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-23 05:13:20 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:20 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:21 - root - INFO - SQL:
SELECT "region", AVG("sales") AS "average_sales_before"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
    WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
    GROUP BY "region"
    LIMIT 100;
Results:
region,average_sales_before
AFRICA,4179773.065611
SOUTH AMERICA,521098.794118
OCEANIA,5748255.481900
EUROPE,267228.852941
CANADA,1043515.128959
ASIA,3997745.984163
USA,1654822.726244

2025-01-23 05:13:21 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:21 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:21 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:22 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-23 05:13:22 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:22 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:22 - root - INFO - SQL:
SELECT "region", AVG("sales") AS "average_sales_after"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
    WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
    GROUP BY "region"
    LIMIT 100;
Results:
region,average_sales_after
ASIA,3881881.424020
USA,1632839.987745
EUROPE,280194.002457
AFRICA,4167623.269608
CANADA,1025157.943627
OCEANIA,5595087.475490
SOUTH AMERICA,510911.845588

2025-01-23 05:13:22 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:22 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:22 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:24 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-23 05:13:24 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:24 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:24 - root - INFO - SQL:
SELECT 
      b."region", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "region", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "region") b
    JOIN
      (SELECT "region", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "region") a
    ON a."region" = b."region"
    LIMIT 100;
Results:
region,average_sales_before,average_sales_after,percentage_change
ASIA,3997745.984163,3881881.424020,-2.898247177300
USA,1654822.726244,1632839.987745,-1.328404435700
EUROPE,267228.852941,280194.002457,4.851702716000
AFRICA,4179773.065611,4167623.269608,-0.290680757400
CANADA,1043515.128959,1025157.943627,-1.759168106200
OCEANIA,5748255.481900,5595087.475490,-2.664599840600
SOUTH AMERICA,521098.794118,510911.845588,-1.954897736300

2025-01-23 05:13:24 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:24 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:24 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:25 - snowflake.connector.cursor - INFO - Number of results in first chunk: 2
2025-01-23 05:13:25 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:26 - root - INFO - SQL:
SELECT 
      b."platform", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "platform", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "platform") b
    JOIN
      (SELECT "platform", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "platform") a
    ON a."platform" = b."platform"
    LIMIT 100;
Results:
platform,average_sales_before,average_sales_after,percentage_change
Retail,4820690.226244,4719031.707983,-2.108795908700
Shopify,154292.640595,164800.612474,6.810416775900

2025-01-23 05:13:26 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:26 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:26 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 4
2025-01-23 05:13:27 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:28 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:28 - root - INFO - SQL:
SELECT 
      b."age_band", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "age_band", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "age_band") b
    JOIN
      (SELECT "age_band", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "age_band") a
    ON a."age_band" = b."age_band"
    LIMIT 100;
Results:
age_band,average_sales_before,average_sales_after,percentage_change
Retirees,2371127.850733,2349270.103277,-0.921829139200
Young Adults,1190879.611264,1182169.595238,-0.731393496300
unknown,5459718.562271,5301510.799603,-2.897727435300
Middle Aged,1729478.282967,1699186.529762,-1.751496593100

2025-01-23 05:13:28 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:28 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:28 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:29 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-23 05:13:29 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:29 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:30 - root - INFO - SQL:
SELECT 
      b."demographic", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "demographic", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "demographic") b
    JOIN
      (SELECT "demographic", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "demographic") a
    ON a."demographic" = b."demographic"
    LIMIT 100;
Results:
demographic,average_sales_before,average_sales_after,percentage_change
Couples,1509550.524725,1501099.988831,-0.559804773400
Families,2305299.080586,2267866.096230,-1.623779954200
unknown,5459718.562271,5301510.799603,-2.897727435300

2025-01-23 05:13:30 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:30 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:30 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:31 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-23 05:13:31 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:31 - root - INFO - SQL:
SELECT 
      b."customer_type", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "customer_type", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "customer_type") b
    JOIN
      (SELECT "customer_type", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "customer_type") a
    ON a."customer_type" = b."customer_type"
    LIMIT 100;
Results:
customer_type,average_sales_before,average_sales_after,percentage_change
New,639586.665522,648898.483991,1.455911914800
Guest,15259994.813187,14858533.541667,-2.630808702300
Existing,2738833.278846,2683216.855655,-2.030661143900

2025-01-23 05:13:31 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:31 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:31 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 14
2025-01-23 05:13:33 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:33 - root - INFO - SQL:
SELECT 
      b."region",
      b."platform",
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "region", "platform", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "region", "platform") b
    JOIN
      (SELECT "region", "platform", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "region", "platform") a
    ON a."region" = b."region" AND a."platform" = b."platform"
    LIMIT 100;
Results:
region,platform,average_sales_before,average_sales_after,percentage_change
ASIA,Retail,7809430.877828,7558399.357843,-3.214466251300
USA,Retail,3187471.171946,3138180.392157,-1.546391390900
EUROPE,Retail,516498.117647,539802.637255,4.512024112300
AFRICA,Retail,8117044.624434,8077047.039216,-0.492760445100
CANADA,Shopify,69644.968326,72096.387255,3.519879451300
OCEANIA,Shopify,415478.660633,441539.117647,6.272393622900
SOUTH AMERICA,Shopify,26228.389140,28886.495098,10.134461341900
EUROPE,Shopify,17959.588235,19306.507389,7.499721799700
OCEANIA,Retail,11081032.303167,10748635.833333,-2.999688663800
SOUTH AMERICA,Retail,1015969.199095,992937.196078,-2.266998156800
CANADA,Retail,2017385.289593,1978219.500000,-1.941413462000
ASIA,Shopify,186061.090498,205363.490196,10.374226898500
USA,Shopify,122174.280543,127499.583333,4.358775649300
AFRICA,Shopify,242501.506787,258199.500000,6.473359040500

2025-01-23 05:13:33 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:13:33 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:13:33 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:13:35 - snowflake.connector.cursor - INFO - Number of results in first chunk: 2
2025-01-23 05:13:35 - snowflake.connector.connection - INFO - closed
2025-01-23 05:13:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:13:35 - root - INFO - SQL:
SELECT
      attribute,
      MIN("percentage_change") AS "highest_negative_impact"
    FROM (
      SELECT 'region' AS attribute, ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
      FROM
        (SELECT "region", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
         GROUP BY "region") b
      JOIN
        (SELECT "region", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
         GROUP BY "region") a
      ON a."region" = b."region"
      
      UNION ALL
      
      SELECT 'platform' AS attribute, ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
      FROM
        (SELECT "platform", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
         GROUP BY "platform") b
      JOIN
        (SELECT "platform", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
         GROUP BY "platform") a
      ON a."platform" = b."platform"
      
      -- Repeat UNION ALL blocks for "age_band", "demographic", and "customer_type"
    ) AS combined_data
    GROUP BY attribute
    ORDER BY "highest_negative_impact" ASC
    LIMIT 100;
Results:
ATTRIBUTE,highest_negative_impact
region,-2.898247177300
platform,-2.108795908700

2025-01-23 05:13:35 - root - INFO - itercount: 0
2025-01-23 05:13:35 - root - INFO - Database Name: BANK_SALES_TRADING
Schema Name: BANK_SALES_TRADING
DDL describes table information.
,0
table_name,INTEREST_MAP
description,
DDL,"create or replace TABLE INTEREST_MAP (
	""id"" NUMBER(38,0),
	""interest_name"" VARCHAR(16777216),
	""interest_summary"" VARCHAR(16777216),
	""created_at"" VARCHAR(16777216),
	""last_modified"" VARCHAR(16777216)
);"

,1
table_name,INTEREST_METRICS
description,
DDL,"create or replace TABLE INTEREST_METRICS (
	""_month"" FLOAT,
	""_year"" FLOAT,
	""month_year"" VARCHAR(16777216),
	""interest_id"" FLOAT,
	""composition"" FLOAT,
	""index_value"" FLOAT,
	""ranking"" NUMBER(38,0),
	""percentile_ranking"" FLOAT
);"

,2
table_name,BITCOIN_PRICES
description,
DDL,"create or replace TABLE BITCOIN_PRICES (
	""ticker"" VARCHAR(16777216),
	""market_date"" VARCHAR(16777216),
	""price"" FLOAT,
	""open"" FLOAT,
	""high"" FLOAT,
	""low"" FLOAT,
	""volume"" VARCHAR(16777216),
	""change"" VARCHAR(16777216)
);"

,3
table_name,SHOPPING_CART_CAMPAIGN_IDENTIFIER
description,
DDL,"create or replace TABLE SHOPPING_CART_CAMPAIGN_IDENTIFIER (
	""campaign_id"" NUMBER(38,0),
	""products"" VARCHAR(16777216),
	""campaign_name"" VARCHAR(16777216),
	""start_date"" VARCHAR(16777216),
	""end_date"" VARCHAR(16777216)
);"

,4
table_name,SHOPPING_CART_EVENT_IDENTIFIER
description,
DDL,"create or replace TABLE SHOPPING_CART_EVENT_IDENTIFIER (
	""event_type"" NUMBER(38,0),
	""event_name"" VARCHAR(16777216)
);"

,5
table_name,VEG_CAT
description,
DDL,"create or replace TABLE VEG_CAT (
	""index"" NUMBER(38,0),
	""item_code"" NUMBER(38,0),
	""item_name"" VARCHAR(16777216),
	""category_code"" NUMBER(38,0),
	""category_name"" VARCHAR(16777216)
);"

,6
table_name,VEG_WHSLE_DF
description,
DDL,"create or replace TABLE VEG_WHSLE_DF (
	""index"" NUMBER(38,0),
	""whsle_date"" VARCHAR(16777216),
	""item_code"" NUMBER(38,0),
	""whsle_px_rmb-kg"" FLOAT
);"

,7
table_name,BITCOIN_TRANSACTIONS
description,
DDL,"create or replace TABLE BITCOIN_TRANSACTIONS (
	""txn_id"" NUMBER(38,0),
	""member_id"" VARCHAR(16777216),
	""ticker"" VARCHAR(16777216),
	""txn_date"" VARCHAR(16777216),
	""txn_type"" VARCHAR(16777216),
	""quantity"" FLOAT,
	""percentage_fee"" FLOAT,
	""txn_time"" VARCHAR(16777216)
);"

,8
table_name,SHOPPING_CART_EVENTS
description,
DDL,"create or replace TABLE SHOPPING_CART_EVENTS (
	""visit_id"" VARCHAR(16777216),
	""cookie_id"" VARCHAR(16777216),
	""page_id"" NUMBER(38,0),
	""event_type"" NUMBER(38,0),
	""sequence_number"" NUMBER(38,0),
	""event_time"" VARCHAR(16777216)
);"

,9
table_name,VEG_LOSS_RATE_DF
description,
DDL,"create or replace TABLE VEG_LOSS_RATE_DF (
	""index"" NUMBER(38,0),
	""item_code"" NUMBER(38,0),
	""item_name"" VARCHAR(16777216),
	""loss_rate_%"" FLOAT
);"

,10
table_name,CUSTOMER_NODES
description,
DDL,"create or replace TABLE CUSTOMER_NODES (
	""customer_id"" NUMBER(38,0),
	""region_id"" NUMBER(38,0),
	""node_id"" NUMBER(38,0),
	""start_date"" VARCHAR(16777216),
	""end_date"" VARCHAR(16777216)
);"

,11
table_name,WEEKLY_SALES
description,
DDL,"create or replace TABLE WEEKLY_SALES (
	""week_date"" VARCHAR(16777216),
	""region"" VARCHAR(16777216),
	""platform"" VARCHAR(16777216),
	""segment"" VARCHAR(16777216),
	""customer_type"" VARCHAR(16777216),
	""transactions"" NUMBER(38,0),
	""sales"" NUMBER(38,0)
);"

,12
table_name,BITCOIN_MEMBERS
description,
DDL,"create or replace TABLE BITCOIN_MEMBERS (
	""member_id"" VARCHAR(16777216),
	""first_name"" VARCHAR(16777216),
	""region"" VARCHAR(16777216)
);"

,13
table_name,CLEANED_WEEKLY_SALES
description,
DDL,"create or replace TABLE CLEANED_WEEKLY_SALES (
	""week_date_formatted"" VARCHAR(16777216),
	""week_date"" VARCHAR(16777216),
	""region"" VARCHAR(16777216),
	""platform"" VARCHAR(16777216),
	""segment"" VARCHAR(16777216),
	""customer_type"" VARCHAR(16777216),
	""transactions"" NUMBER(38,0),
	""sales"" NUMBER(38,0),
	""week_number"" NUMBER(38,0),
	""month_number"" NUMBER(38,0),
	""calendar_year"" NUMBER(38,0),
	""age_band"" VARCHAR(16777216),
	""demographic"" VARCHAR(16777216),
	""avg_transaction"" FLOAT
);"

,14
table_name,CUSTOMER_REGIONS
description,
DDL,"create or replace TABLE CUSTOMER_REGIONS (
	""region_id"" NUMBER(38,0),
	""region_name"" VARCHAR(16777216)
);"

,15
table_name,CUSTOMER_TRANSACTIONS
description,
DDL,"create or replace TABLE CUSTOMER_TRANSACTIONS (
	""customer_id"" NUMBER(38,0),
	""txn_date"" VARCHAR(16777216),
	""txn_type"" VARCHAR(16777216),
	""txn_amount"" NUMBER(38,0)
);"

,16
table_name,SHOPPING_CART_USERS
description,
DDL,"create or replace TABLE SHOPPING_CART_USERS (
	""user_id"" NUMBER(38,0),
	""cookie_id"" VARCHAR(16777216),
	""start_date"" VARCHAR(16777216)
);"

,17
table_name,VEG_TXN_DF
description,
DDL,"create or replace TABLE VEG_TXN_DF (
	""index"" NUMBER(38,0),
	""txn_date"" VARCHAR(16777216),
	""txn_time"" VARCHAR(16777216),
	""item_code"" NUMBER(38,0),
	""qty_sold(kg)"" FLOAT,
	""unit_selling_px_rmb/kg"" FLOAT,
	""sale/return"" VARCHAR(16777216),
	""discount(%)"" NUMBER(38,0),
	""day_of_week"" VARCHAR(16777216)
);"

,18
table_name,SHOPPING_CART_PAGE_HIERARCHY
description,
DDL,"create or replace TABLE SHOPPING_CART_PAGE_HIERARCHY (
	""page_id"" NUMBER(38,0),
	""page_name"" VARCHAR(16777216),
	""product_category"" VARCHAR(16777216),
	""product_id"" FLOAT
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'BANK_SALES_TRADING': {'BANK_SALES_TRADING': ['BITCOIN_MEMBERS', 'BITCOIN_PRICES', 'BITCOIN_TRANSACTIONS', 'CLEANED_WEEKLY_SALES', 'CUSTOMER_NODES', 'CUSTOMER_REGIONS', 'CUSTOMER_TRANSACTIONS', 'INTEREST_MAP', 'INTEREST_METRICS', 'SHOPPING_CART_CAMPAIGN_IDENTIFIER', 'SHOPPING_CART_EVENTS', 'SHOPPING_CART_EVENT_IDENTIFIER', 'SHOPPING_CART_PAGE_HIERARCHY', 'SHOPPING_CART_USERS', 'VEG_CAT', 'VEG_LOSS_RATE_DF', 'VEG_TXN_DF', 'VEG_WHSLE_DF', 'WEEKLY_SALES']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

- **Table:** `CLEANED_WEEKLY_SALES`
  - **"week_date"**: Potential usage - To filter records for the 12 weeks before and after June 15, 2020.
  - **"region"**: Potential usage - To analyze sales impact across different regions.
  - **"platform"**: Potential usage - To analyze sales impact across various platforms.
  - **"age_band"**: Potential usage - To analyze sales impact across different age bands.
  - **"demographic"**: Potential usage - To analyze sales impact across different demographics.
  - **"customer_type"**: Potential usage - To analyze sales impact across customer types.
  - **"sales"**: Potential usage - To measure sales performance before and after the specified date.

**Conditions that may be used:**

- Filter records where **"week_date"** is between 12 weeks before and after June 15, 2020.
- Group data by attributes like **"region"**, **"platform"**, **"age_band"**, **"demographic"**, and **"customer_type"**.
- Calculate average sales before and after the specified date for comparison.

---

**SQL Queries:**

1. **Query 1:** Retrieve distinct regions.
   ```sql
   SELECT DISTINCT "region"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
   ```
   
2. **Query 2:** Retrieve distinct platforms.
   ```sql
   SELECT DISTINCT "platform"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
   ```

3. **Query 3:** Retrieve distinct age bands.
   ```sql
   SELECT DISTINCT "age_band"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
   ```

4. **Query 4:** Retrieve distinct demographics.
   ```sql
   SELECT DISTINCT "demographic"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
   ```

5. **Query 5:** Retrieve distinct customer types.
   ```sql
   SELECT DISTINCT "customer_type"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
   ```

6. **Query 6:** Get sales data for 12 weeks before and after June 15, 2020.
   ```sql
   SELECT "week_date", "sales"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND DATEADD(week, 12, '2020-06-15')
   LIMIT 100;
   ```

7. **Query 7:** Calculate average sales per region.
   ```sql
   SELECT "region", AVG("sales") AS "average_sales"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   GROUP BY "region"
   LIMIT 100;
   ```

8. **Query 8:** Calculate average sales per platform.
   ```sql
   SELECT "platform", AVG("sales") AS "average_sales"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   GROUP BY "platform"
   LIMIT 100;
   ```

9. **Query 9:** Get total sales grouped by customer type.
   ```sql
   SELECT "customer_type", SUM("sales") AS "total_sales"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   GROUP BY "customer_type"
   LIMIT 100;
   ```

10. **Query 10:** Calculate average sales before June 15, 2020, grouped by region.
    ```sql
    SELECT "region", AVG("sales") AS "average_sales_before"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
    WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
    GROUP BY "region"
    LIMIT 100;
    ```

11. **Query 11:** Calculate average sales after June 15, 2020, grouped by region.
    ```sql
    SELECT "region", AVG("sales") AS "average_sales_after"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
    WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
    GROUP BY "region"
    LIMIT 100;
    ```

12. **Query 12:** Compute percentage change in sales before and after June 15, 2020, for each region.
    ```sql
    SELECT 
      b."region", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "region", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "region") b
    JOIN
      (SELECT "region", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "region") a
    ON a."region" = b."region"
    LIMIT 100;
    ```

13. **Query 13:** Compute percentage change in sales for each platform.
    ```sql
    SELECT 
      b."platform", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "platform", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "platform") b
    JOIN
      (SELECT "platform", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "platform") a
    ON a."platform" = b."platform"
    LIMIT 100;
    ```

14. **Query 14:** Compute percentage change in sales for each age band.
    ```sql
    SELECT 
      b."age_band", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "age_band", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "age_band") b
    JOIN
      (SELECT "age_band", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "age_band") a
    ON a."age_band" = b."age_band"
    LIMIT 100;
    ```

15. **Query 15:** Compute percentage change in sales for each demographic group.
    ```sql
    SELECT 
      b."demographic", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "demographic", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "demographic") b
    JOIN
      (SELECT "demographic", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "demographic") a
    ON a."demographic" = b."demographic"
    LIMIT 100;
    ```

16. **Query 16:** Calculate the average percentage change in sales for each customer type.
    ```sql
    SELECT 
      b."customer_type", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "customer_type", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "customer_type") b
    JOIN
      (SELECT "customer_type", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "customer_type") a
    ON a."customer_type" = b."customer_type"
    LIMIT 100;
    ```

17. **Query 17:** Compute percentage change in sales by region and platform.
    ```sql
    SELECT 
      b."region",
      b."platform",
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "region", "platform", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "region", "platform") b
    JOIN
      (SELECT "region", "platform", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "region", "platform") a
    ON a."region" = b."region" AND a."platform" = b."platform"
    LIMIT 100;
    ```

18. **Query 18:** Identify the attribute with the highest negative impact on sales.
    ```sql
    SELECT
      attribute,
      MIN("percentage_change") AS "highest_negative_impact"
    FROM (
      SELECT 'region' AS attribute, ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
      FROM
        (SELECT "region", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
         GROUP BY "region") b
      JOIN
        (SELECT "region", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
         GROUP BY "region") a
      ON a."region" = b."region"
      
      UNION ALL
      
      SELECT 'platform' AS attribute, ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
      FROM
        (SELECT "platform", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
         GROUP BY "platform") b
      JOIN
        (SELECT "platform", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
         GROUP BY "platform") a
      ON a."platform" = b."platform"
      
      -- Repeat UNION ALL blocks for "age_band", "demographic", and "customer_type"
    ) AS combined_data
    GROUP BY attribute
    ORDER BY "highest_negative_impact" ASC
    LIMIT 100;
    ```

**Note:** The last query is an example of how to identify the attribute with the highest negative impact on sales by comparing percentage changes across different attributes. You would need to expand the `UNION ALL` blocks to include calculations for **"age_band"**, **"demographic"**, and **"customer_type"** in a similar fashion.

---

These queries are designed to explore the data related to the average sales performance before and after June 15, 2020, across various attributes, and to help identify which attribute had the highest negative impact on sales.Query:
SELECT DISTINCT "region"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
Answer:
region
ASIA
USA
EUROPE
AFRICA
CANADA
SOUTH AMERICA
OCEANIA
Query:
SELECT DISTINCT "platform"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
Answer:
platform
Retail
Shopify
Query:
SELECT DISTINCT "age_band"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
Answer:
age_band
Retirees
Young Adults
Middle Aged
unknown
Query:
SELECT DISTINCT "demographic"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
Answer:
demographic
Couples
Families
unknown
Query:
SELECT DISTINCT "customer_type"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   LIMIT 100;
Answer:
customer_type
New
Guest
Existing
Query:
SELECT "week_date", "sales"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND DATEADD(week, 12, '2020-06-15')
   LIMIT 100;
Answer:
week_date,sales
2020-08-31,3656163
2020-08-31,996575
2020-08-31,16509610
2020-08-31,141942
2020-08-31,1758388
2020-08-31,243878
2020-08-31,519502
2020-08-31,371417
2020-08-31,49557
2020-08-31,3888162
2020-08-31,260773
2020-08-31,882690
2020-08-31,38762
2020-08-31,917
2020-08-31,35215
2020-08-31,30371770
2020-08-31,374327
2020-08-31,5185233
2020-08-31,2980673
2020-08-31,463738
2020-08-31,65730
2020-08-31,14430196
2020-08-31,2176980
2020-08-31,478756
2020-08-31,3319
2020-08-31,5306746
2020-08-31,4511841
2020-08-31,134249
2020-08-31,1579
2020-08-31,11451
2020-08-31,31589
2020-08-31,53567
2020-08-31,4023
2020-08-31,4768214
2020-08-31,396909
2020-08-31,8562
2020-08-31,8723663
2020-08-31,957939
2020-08-31,7625
2020-08-31,20635
2020-08-31,2265
2020-08-31,633917
2020-08-31,72293
2020-08-31,13839
2020-08-31,68009
2020-08-31,269176
2020-08-31,10874
2020-08-31,1306932
2020-08-31,3507
2020-08-31,1144376
2020-08-31,3325
2020-08-31,15074
2020-08-31,1473178
2020-08-31,1369115
2020-08-31,20255591
2020-08-31,48773122
2020-08-31,55780
2020-08-31,554
2020-08-31,2126153
2020-08-31,6603287
2020-08-31,1026838
2020-08-31,11086427
2020-08-31,19049
2020-08-31,564306
2020-08-31,7331
2020-08-31,2272687
2020-08-31,1562
2020-08-31,12836
2020-08-31,1548637
2020-08-31,45518
2020-08-31,37786
2020-08-31,48624
2020-08-31,2156778
2020-08-31,5941067
2020-08-31,395877
2020-08-31,22712143
2020-08-31,16149
2020-08-31,3322211
2020-08-31,66422
2020-08-31,27184
2020-08-31,979807
2020-08-31,833470
2020-08-31,7178808
2020-08-31,7422165
2020-08-31,91616
2020-08-31,661362
2020-08-31,786613
2020-08-31,11755
2020-08-31,883573
2020-08-31,2232935
2020-08-31,12438
2020-08-31,8473
2020-08-31,104677
2020-08-31,2016930
2020-08-31,461694
2020-08-31,1221
2020-08-31,95547
2020-08-31,990085
2020-08-31,10624187
2020-08-31,2078649
Query:
SELECT "region", AVG("sales") AS "average_sales"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   GROUP BY "region"
   LIMIT 100;
Answer:
region,average_sales
ASIA,3743941.977124
USA,1604514.864788
EUROPE,276092.552135
AFRICA,4060658.933415
CANADA,1012535.911356
OCEANIA,5448868.924020
SOUTH AMERICA,499810.862351
Query:
SELECT "platform", AVG("sales") AS "average_sales"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   GROUP BY "platform"
   LIMIT 100;
Answer:
platform,average_sales
Retail,4628223.206933
Shopify,127385.400632
Query:
SELECT "customer_type", SUM("sales") AS "total_sales"
   FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
   GROUP BY "customer_type"
   LIMIT 100;
Answer:
customer_type,total_sales
New,5231884863
Guest,15225504483
Existing,20286244881
Query:
SELECT "region", AVG("sales") AS "average_sales_before"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
    WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
    GROUP BY "region"
    LIMIT 100;
Answer:
region,average_sales_before
AFRICA,4179773.065611
SOUTH AMERICA,521098.794118
OCEANIA,5748255.481900
EUROPE,267228.852941
CANADA,1043515.128959
ASIA,3997745.984163
USA,1654822.726244
Query:
SELECT "region", AVG("sales") AS "average_sales_after"
    FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
    WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
    GROUP BY "region"
    LIMIT 100;
Answer:
region,average_sales_after
ASIA,3881881.424020
USA,1632839.987745
EUROPE,280194.002457
AFRICA,4167623.269608
CANADA,1025157.943627
OCEANIA,5595087.475490
SOUTH AMERICA,510911.845588
Query:
SELECT 
      b."region", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "region", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "region") b
    JOIN
      (SELECT "region", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "region") a
    ON a."region" = b."region"
    LIMIT 100;
Answer:
region,average_sales_before,average_sales_after,percentage_change
ASIA,3997745.984163,3881881.424020,-2.898247177300
USA,1654822.726244,1632839.987745,-1.328404435700
EUROPE,267228.852941,280194.002457,4.851702716000
AFRICA,4179773.065611,4167623.269608,-0.290680757400
CANADA,1043515.128959,1025157.943627,-1.759168106200
OCEANIA,5748255.481900,5595087.475490,-2.664599840600
SOUTH AMERICA,521098.794118,510911.845588,-1.954897736300
Query:
SELECT 
      b."platform", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "platform", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "platform") b
    JOIN
      (SELECT "platform", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "platform") a
    ON a."platform" = b."platform"
    LIMIT 100;
Answer:
platform,average_sales_before,average_sales_after,percentage_change
Retail,4820690.226244,4719031.707983,-2.108795908700
Shopify,154292.640595,164800.612474,6.810416775900
Query:
SELECT 
      b."age_band", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "age_band", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "age_band") b
    JOIN
      (SELECT "age_band", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "age_band") a
    ON a."age_band" = b."age_band"
    LIMIT 100;
Answer:
age_band,average_sales_before,average_sales_after,percentage_change
Retirees,2371127.850733,2349270.103277,-0.921829139200
Young Adults,1190879.611264,1182169.595238,-0.731393496300
unknown,5459718.562271,5301510.799603,-2.897727435300
Middle Aged,1729478.282967,1699186.529762,-1.751496593100
Query:
SELECT 
      b."demographic", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "demographic", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "demographic") b
    JOIN
      (SELECT "demographic", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "demographic") a
    ON a."demographic" = b."demographic"
    LIMIT 100;
Answer:
demographic,average_sales_before,average_sales_after,percentage_change
Couples,1509550.524725,1501099.988831,-0.559804773400
Families,2305299.080586,2267866.096230,-1.623779954200
unknown,5459718.562271,5301510.799603,-2.897727435300
Query:
SELECT 
      b."customer_type", 
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "customer_type", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "customer_type") b
    JOIN
      (SELECT "customer_type", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "customer_type") a
    ON a."customer_type" = b."customer_type"
    LIMIT 100;
Answer:
customer_type,average_sales_before,average_sales_after,percentage_change
New,639586.665522,648898.483991,1.455911914800
Guest,15259994.813187,14858533.541667,-2.630808702300
Existing,2738833.278846,2683216.855655,-2.030661143900
Query:
SELECT 
      b."region",
      b."platform",
      b."average_sales_before", 
      a."average_sales_after",
      ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
    FROM
      (SELECT "region", "platform", AVG("sales") AS "average_sales_before"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
       GROUP BY "region", "platform") b
    JOIN
      (SELECT "region", "platform", AVG("sales") AS "average_sales_after"
       FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
       WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
       GROUP BY "region", "platform") a
    ON a."region" = b."region" AND a."platform" = b."platform"
    LIMIT 100;
Answer:
region,platform,average_sales_before,average_sales_after,percentage_change
ASIA,Retail,7809430.877828,7558399.357843,-3.214466251300
USA,Retail,3187471.171946,3138180.392157,-1.546391390900
EUROPE,Retail,516498.117647,539802.637255,4.512024112300
AFRICA,Retail,8117044.624434,8077047.039216,-0.492760445100
CANADA,Shopify,69644.968326,72096.387255,3.519879451300
OCEANIA,Shopify,415478.660633,441539.117647,6.272393622900
SOUTH AMERICA,Shopify,26228.389140,28886.495098,10.134461341900
EUROPE,Shopify,17959.588235,19306.507389,7.499721799700
OCEANIA,Retail,11081032.303167,10748635.833333,-2.999688663800
SOUTH AMERICA,Retail,1015969.199095,992937.196078,-2.266998156800
CANADA,Retail,2017385.289593,1978219.500000,-1.941413462000
ASIA,Shopify,186061.090498,205363.490196,10.374226898500
USA,Shopify,122174.280543,127499.583333,4.358775649300
AFRICA,Shopify,242501.506787,258199.500000,6.473359040500
Query:
SELECT
      attribute,
      MIN("percentage_change") AS "highest_negative_impact"
    FROM (
      SELECT 'region' AS attribute, ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
      FROM
        (SELECT "region", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
         GROUP BY "region") b
      JOIN
        (SELECT "region", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
         GROUP BY "region") a
      ON a."region" = b."region"
      
      UNION ALL
      
      SELECT 'platform' AS attribute, ((a."average_sales_after" - b."average_sales_before") / b."average_sales_before") * 100 AS "percentage_change"
      FROM
        (SELECT "platform", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN DATEADD(week, -12, '2020-06-15') AND '2020-06-15'
         GROUP BY "platform") b
      JOIN
        (SELECT "platform", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') BETWEEN '2020-06-15' AND DATEADD(week, 12, '2020-06-15')
         GROUP BY "platform") a
      ON a."platform" = b."platform"
      
      -- Repeat UNION ALL blocks for "age_band", "demographic", and "customer_type"
    ) AS combined_data
    GROUP BY attribute
    ORDER BY "highest_negative_impact" ASC
    LIMIT 100;
Answer:
ATTRIBUTE,highest_negative_impact
region,-2.898247177300
platform,-2.108795908700
End Exploring Related Columns
Task: Analyze the average sales performance impact 12 weeks before and after June 15, 2020, across various attributes like regions, platforms, age bands, demographics, and customer types. Identify and provide the attribute with the highest negative impact on sales, detailing the average percentage change in sales for that attribute.

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
Attribute,Average_Percentage_Change
attribute_name:str,average_percentage_change:float
(Attention: answer in one row)
```

The attribute with the highest negative impact on sales is **attribute_name**, with an average percentage change of **average_percentage_change%** over the analyzed period..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'BANK_SALES_TRADING': {'BANK_SALES_TRADING': ['BITCOIN_MEMBERS', 'BITCOIN_PRICES', 'BITCOIN_TRANSACTIONS', 'CLEANED_WEEKLY_SALES', 'CUSTOMER_NODES', 'CUSTOMER_REGIONS', 'CUSTOMER_TRANSACTIONS', 'INTEREST_MAP', 'INTEREST_METRICS', 'SHOPPING_CART_CAMPAIGN_IDENTIFIER', 'SHOPPING_CART_EVENTS', 'SHOPPING_CART_EVENT_IDENTIFIER', 'SHOPPING_CART_PAGE_HIERARCHY', 'SHOPPING_CART_USERS', 'VEG_CAT', 'VEG_LOSS_RATE_DF', 'VEG_TXN_DF', 'VEG_WHSLE_DF', 'WEEKLY_SALES']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-23 05:14:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-23 05:14:39 - root - INFO - ```sql
SELECT
    attribute,
    AVG(percentage_change) AS average_percentage_change
FROM
(
    -- For 'region'
    SELECT
        'region' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "region", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15') AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "region") b
    INNER JOIN
        (SELECT "region", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15' AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "region") a
    ON a."region" = b."region"
    
    UNION ALL
    
    -- For 'platform'
    SELECT
        'platform' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "platform", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15') AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "platform") b
    INNER JOIN
        (SELECT "platform", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15' AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "platform") a
    ON a."platform" = b."platform"
    
    UNION ALL
    
    -- For 'age_band'
    SELECT
        'age_band' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "age_band", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15') AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "age_band") b
    INNER JOIN
        (SELECT "age_band", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15' AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "age_band") a
    ON a."age_band" = b."age_band"
    
    UNION ALL

    -- For 'demographic'
    SELECT
        'demographic' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "demographic", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15') AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "demographic") b
    INNER JOIN
        (SELECT "demographic", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15' AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "demographic") a
    ON a."demographic" = b."demographic"
    
    UNION ALL

    -- For 'customer_type'
    SELECT
        'customer_type' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "customer_type", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15') AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "customer_type") b
    INNER JOIN
        (SELECT "customer_type", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15' AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "customer_type") a
    ON a."customer_type" = b."customer_type"
) t
GROUP BY attribute
ORDER BY average_percentage_change ASC
LIMIT 1;
```

```csv
Attribute,Average_Percentage_Change
region,-2.8982
```

The attribute with the highest negative impact on sales is **region**, with an average percentage change of **-2.8982%** over the analyzed period.
2025-01-23 05:14:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:14:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:14:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:14:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-23 05:14:41 - snowflake.connector.connection - INFO - closed
2025-01-23 05:14:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:14:41 - root - INFO - itercount: 1
2025-01-23 05:14:41 - root - INFO - 0
2025-01-23 05:14:41 - root - INFO - results: 
ATTRIBUTE,AVERAGE_PERCENTAGE_CHANGE
demographic,-1.984056768600


2025-01-23 05:14:41 - root - INFO - Please check the answer again by reviewing Analyze the average sales performance impact 12 weeks before and after June 15, 2020, across various attributes like regions, platforms, age bands, demographics, and customer types. Identify and provide the attribute with the highest negative impact on sales, detailing the average percentage change in sales for that attribute., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
Attribute,Average_Percentage_Change
attribute_name:str,average_percentage_change:float
(Attention: answer in one row)
```

The attribute with the highest negative impact on sales is **attribute_name**, with an average percentage change of **average_percentage_change%** over the analyzed period. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
ATTRIBUTE,AVERAGE_PERCENTAGE_CHANGE
demographic,-1.984056768600
Current sql:
SELECT
    attribute,
    AVG(percentage_change) AS average_percentage_change
FROM
(
    -- For 'region'
    SELECT
        'region' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "region", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15') AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "region") b
    INNER JOIN
        (SELECT "region", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15' AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "region") a
    ON a."region" = b."region"
    
    UNION ALL
    
    -- For 'platform'
    SELECT
        'platform' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "platform", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15') AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "platform") b
    INNER JOIN
        (SELECT "platform", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15' AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "platform") a
    ON a."platform" = b."platform"
    
    UNION ALL
    
    -- For 'age_band'
    SELECT
        'age_band' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "age_band", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15') AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "age_band") b
    INNER JOIN
        (SELECT "age_band", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15' AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "age_band") a
    ON a."age_band" = b."age_band"
    
    UNION ALL

    -- For 'demographic'
    SELECT
        'demographic' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "demographic", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15') AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "demographic") b
    INNER JOIN
        (SELECT "demographic", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15' AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "demographic") a
    ON a."demographic" = b."demographic"
    
    UNION ALL

    -- For 'customer_type'
    SELECT
        'customer_type' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "customer_type", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15') AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "customer_type") b
    INNER JOIN
        (SELECT "customer_type", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15' AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "customer_type") a
    ON a."customer_type" = b."customer_type"
) t
GROUP BY attribute
ORDER BY average_percentage_change ASC
LIMIT 1;
2025-01-23 05:15:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-23 05:15:39 - root - INFO - ```sql
SELECT
    attribute,
    ROUND(AVG(percentage_change), 4) AS Average_Percentage_Change
FROM
(
    -- For 'region'
    SELECT
        'region' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "region", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15')
           AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "region") b
    INNER JOIN
        (SELECT "region", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15'
           AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "region") a
    ON a."region" = b."region"
    
    UNION ALL
    
    -- For 'platform'
    SELECT
        'platform' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "platform", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15')
           AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "platform") b
    INNER JOIN
        (SELECT "platform", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15'
           AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "platform") a
    ON a."platform" = b."platform"
    
    UNION ALL
    
    -- For 'age_band'
    SELECT
        'age_band' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "age_band", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15')
           AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "age_band") b
    INNER JOIN
        (SELECT "age_band", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15'
           AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "age_band") a
    ON a."age_band" = b."age_band"
    
    UNION ALL

    -- For 'demographic'
    SELECT
        'demographic' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "demographic", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15')
           AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "demographic") b
    INNER JOIN
        (SELECT "demographic", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15'
           AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "demographic") a
    ON a."demographic" = b."demographic"
    
    UNION ALL

    -- For 'customer_type'
    SELECT
        'customer_type' AS attribute,
        ((a."average_sales_after" - b."average_sales_before") / NULLIF(b."average_sales_before", 0)) * 100 AS percentage_change
    FROM
        (SELECT "customer_type", AVG("sales") AS "average_sales_before"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATEADD(week, -12, DATE '2020-06-15')
           AND TO_DATE("week_date", 'YYYY-MM-DD') < DATE '2020-06-15'
         GROUP BY "customer_type") b
    INNER JOIN
        (SELECT "customer_type", AVG("sales") AS "average_sales_after"
         FROM BANK_SALES_TRADING.BANK_SALES_TRADING.CLEANED_WEEKLY_SALES
         WHERE TO_DATE("week_date", 'YYYY-MM-DD') >= DATE '2020-06-15'
           AND TO_DATE("week_date", 'YYYY-MM-DD') < DATEADD(week, 12, DATE '2020-06-15')
         GROUP BY "customer_type") a
    ON a."customer_type" = b."customer_type"
) t
GROUP BY attribute
ORDER BY average_percentage_change ASC
LIMIT 1;
```

```csv
Attribute,Average_Percentage_Change
demographic,-1.9841
```

The attribute with the highest negative impact on sales is **demographic**, with an average percentage change of **-1.9841%** over the analyzed period.
2025-01-23 05:15:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-23 05:15:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-23 05:15:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-23 05:15:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-23 05:15:41 - snowflake.connector.connection - INFO - closed
2025-01-23 05:15:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-23 05:15:41 - root - INFO - itercount: 2
2025-01-23 05:15:41 - root - INFO - 0
2025-01-23 05:15:41 - root - INFO - Total iteration counts: 2
