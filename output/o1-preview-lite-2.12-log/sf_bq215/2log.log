2025-02-12 21:27:42 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:27:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:43 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:27:43 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:43 - root - INFO - SQL:
-- Query 1: Select distinct publication numbers
SELECT DISTINCT "publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 100;
Results:
publication_number
CN-214278490-U
CN-214710653-U
CN-214750133-U
US-2257467-A
US-2762696-A
US-3127183-A
CN-214592184-U
CN-214376014-U
CN-214586427-U
CN-215805899-U
US-2017244772-A1
US-2019367306-A1
US-2020022931-A1
US-2021023882-A1
US-2020250718-A1
US-2020032872-A1
JP-5743884-B2
JP-6098445-B2
JP-6155019-B2
JP-6197435-B2
JP-5937623-B2
JP-6035285-B2
JP-6390273-B2
JP-6459475-B2
JP-6388064-B2
US-9365566-B2
US-10279406-B2
US-7883996-B2
US-9319157-B2
US-10344321-B2
US-10587921-B2
US-10604965-B2
US-2006103920-A1
US-2006122383-A1
US-2006258976-A1
US-2007127197-A1
US-2007190489-A1
US-2008219893-A1
US-2008305610-A1
US-2018211505-A1
US-2021064298-A1
US-2018271636-A1
US-10170049-B2
US-10381417-B2
IT-MI910192-A1
IT-PR990091-A1
US-2010033313-A1
US-2010042129-A1
US-2015180461-A1
US-2017139650-A1
US-2018269548-A1
EP-4358306-A1
EP-0498078-A1
US-2009023835-A1
US-2007226566-A1
US-2005161955-A1
US-2006242322-A1
US-2006292604-A1
US-2022181735-A1
US-2023405472-A1
US-11388673-B2
RU-2129232-C1
DK-0912092-T3
DE-29815280-U1
TR-201809701-T4
DE-20004304-U1
RU-170537-U1
DE-202019106717-U1
JP-S423140-Y1
IT-NO20130003-U1
RU-57903-U1
DE-202010002487-U1
IT-MI940161-V0
AR-081094-A1
IT-7829460-A0
US-2006145716-A1
US-2008108669-A1
US-2007288998-A1
US-2006194139-A1
US-2007049494-A1
US-2008214344-A1
US-2010032526-A1
US-2010094971-A1
US-2010150999-A1
US-2020353721-A1
US-2022074897-A1
US-2006148840-A1
US-2006154349-A1
US-2005274685-A1
US-2006057691-A1
US-2005257752-A1
US-2005272413-A1
US-2006257201-A1
US-2022108830-A1
US-2023156849-A1
US-2022084131-A1
US-2023082924-A1
US-2023262091-A1
US-2023072046-A1
GB-928613-A

2025-02-12 21:27:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:27:44 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:45 - root - INFO - SQL:
-- Query 2: Retrieve publication numbers and kind codes
SELECT "publication_number", "kind_code"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 100;
Results:
publication_number,kind_code
CR-5634-A,A
CR-5990-A,A
FI-429-A,A
HK-6083-A,A
HU-T52763-A,A
JP-H03206829-A,A
JP-S62159089-A,A
US-416-A,A
US-2528225-A,A
AT-A41580-A,A
AT-A47682-A,A
AT-A63682-A,A
CA-920790-A,A
CA-950907-A,A
CA-920830-A,A
CA-9086-A,A
CH-3256-A,A
CH-540255-A,A
CH-433637-A,A
CH-8494-A,A
CH-9587-A,A
CH-9968-A,A
DD-8297-A,A
FR-1334211-A,A
FR-1444995-A,A
FR-1474468-A,A
FR-1478988-A,A
FR-1485992-A,A
FR-1487706-A,A
FR-1508237-A,A
GB-893001-A,A
GB-873984-A,A
GB-307790-A,A
GB-534192-A,A
HK-39487-A,A
HK-52284-A,A
HK-55992-A,A
HK-60178-A,A
HK-82486-A,A
HU-T58725-A,A
JP-S62157892-A,A
JP-H06198910-A,A
MA-42286-A,A
OA-07542-A,A
OA-08399-A,A
PH-11723-A,A
PH-15213-A,A
PH-17928-A,A
PH-23905-A,A
TR-26506-A,A
US-4613-A,A
US-4234270-A,A
US-6310-A,A
US-8947-A,A
YU-24971-A,A
YU-51397-A,A
YU-53588-A,A
YU-94082-A,A
AT-A134275-A,A
AT-A160683-A,A
AT-A168281-A,A
AT-A179178-A,A
AT-A196182-A,A
AT-A202882-A,A
AT-A205780-A,A
AT-A245590-A,A
AT-A250686-A,A
AT-A269985-A,A
AT-A272073-A,A
AT-A312885-A,A
AT-A404675-A,A
AT-A482077-A,A
AT-A519575-A,A
AT-A710279-A,A
AT-A735378-A,A
AT-A876472-A,A
AT-A906278-A,A
BE-804534-A,A
BE-806687-A,A
BE-813367-A,A
BE-823416-A,A
BE-825816-A,A
BE-833811-A,A
BE-837312-A,A
BE-837857-A,A
BE-840231-A,A
BE-848755-A,A
BE-852837-A,A
BE-853553-A,A
BE-857395-A,A
BE-861199-A,A
BE-866723-A,A
BE-868080-A,A
BE-868938-A,A
BE-869056-A,A
BE-871421-A,A
BE-873394-A,A
BE-877768-A,A
BE-885287-A,A
BE-509322-A,A

2025-02-12 21:27:45 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:45 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:45 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:46 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:27:46 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:46 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:46 - root - INFO - SQL:
-- Query 3: Filter US patents with kind code 'B2'
SELECT "publication_number", "kind_code", "country_code"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' AND "kind_code" = 'B2'
LIMIT 100;
Results:
publication_number,kind_code,country_code
US-8857551-B2,B2,US
US-9370027-B2,B2,US
US-9042351-B2,B2,US
US-10561638-B2,B2,US
US-8962445-B2,B2,US
US-9270639-B2,B2,US
US-8938152-B2,B2,US
US-9389656-B2,B2,US
US-9482287-B2,B2,US
US-9386020-B2,B2,US
US-10142276-B2,B2,US
US-9216545-B2,B2,US
US-9548844-B2,B2,US
US-9111730-B2,B2,US
US-9340798-B2,B2,US
US-10324723-B2,B2,US
US-9190745-B2,B2,US
US-9380603-B2,B2,US
US-9650743-B2,B2,US
US-10140934-B2,B2,US
US-9556907-B2,B2,US
US-9567200-B2,B2,US
US-10722723-B2,B2,US
US-9188941-B2,B2,US
US-9048861-B2,B2,US
US-9460689-B2,B2,US
US-9318050-B2,B2,US
US-10533556-B2,B2,US
US-9520094-B2,B2,US
US-9412846-B2,B2,US
US-10070142-B2,B2,US
US-9585927-B2,B2,US
US-9415120-B2,B2,US
US-10533291-B2,B2,US
US-9329543-B2,B2,US
US-10487804-B2,B2,US
US-9502685-B2,B2,US
US-9434993-B2,B2,US
US-10120886-B2,B2,US
US-9343259-B2,B2,US
US-10025922-B2,B2,US
US-10093135-B2,B2,US
US-11058417-B2,B2,US
US-10791626-B2,B2,US
US-10040253-B2,B2,US
US-10268050-B2,B2,US
US-9595167-B2,B2,US
US-9425382-B2,B2,US
US-10292858-B2,B2,US
US-10439992-B2,B2,US
US-10463632-B2,B2,US
US-10040372-B2,B2,US
US-11043142-B2,B2,US
US-10096317-B2,B2,US
US-10620487-B2,B2,US
US-9616746-B2,B2,US
US-10132013-B2,B2,US
US-10075410-B2,B2,US
US-11055623-B2,B2,US
US-10501667-B2,B2,US
US-10614930-B2,B2,US
US-11100138-B2,B2,US
US-10294485-B2,B2,US
US-10420148-B2,B2,US
US-10192648-B2,B2,US
US-10799929-B2,B2,US
US-10132055-B2,B2,US
US-10306558-B2,B2,US
US-10266255-B2,B2,US
US-11229607-B2,B2,US
US-11099445-B2,B2,US
US-10918669-B2,B2,US
US-10104056-B2,B2,US
US-10170592-B2,B2,US
US-10949373-B2,B2,US
US-10637868-B2,B2,US
US-10828230-B2,B2,US
US-10612778-B2,B2,US
US-10891534-B2,B2,US
US-10827186-B2,B2,US
US-10798073-B2,B2,US
US-10574908-B2,B2,US
US-10199059-B2,B2,US
US-10178137-B2,B2,US
US-10377792-B2,B2,US
US-10141686-B2,B2,US
US-11154290-B2,B2,US
US-10891268-B2,B2,US
US-10141468-B2,B2,US
US-10941196-B2,B2,US
US-10543714-B2,B2,US
US-10513055-B2,B2,US
US-10968393-B2,B2,US
US-10630153-B2,B2,US
US-10418599-B2,B2,US
US-10128451-B2,B2,US
US-10150865-B2,B2,US
US-10483008-B2,B2,US
US-10619236-B2,B2,US
US-10634183-B2,B2,US

2025-02-12 21:27:46 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:46 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:46 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:47 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:27:47 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:48 - root - INFO - SQL:
-- Query 4: Select patents granted between 2015 and 2018
SELECT "publication_number", "grant_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "grant_date" BETWEEN 20150101 AND 20181231
LIMIT 100;
Results:
publication_number,grant_date
DE-102015114819-B3,20161222
DE-10037981-B4,20171019
DE-10202757-B4,20170511
DE-102005043635-B4,20170706
DE-102007006148-B4,20150226
DE-102007008531-B4,20170629
DE-102009031285-B4,20161103
DE-102012211931-B4,20161027
DE-102013012450-B4,20161027
DE-102013226547-B4,20151001
DE-112006001900-B4,20161215
DE-112008000670-B4,20170112
DE-112008002242-B4,20160114
EP-2716955-B8,20180307
EP-2775267-B8,20180905
AU-2010263654-C1,20151001
RU-2542001-C1,20150220
RU-2570026-C1,20151210
RU-2567410-C1,20151110
RU-2570084-C1,20151210
RU-2604500-C1,20161210
RU-2613571-C1,20170317
RU-2622238-C1,20170613
RU-2634137-C1,20171024
RU-2625675-C1,20170718
RU-2640439-C1,20180109
RU-2666493-C1,20180907
RU-2660243-C1,20180705
RU-2565248-C2,20151020
RU-2549551-C2,20150427
RU-2562017-C2,20150910
RU-2545266-C2,20150327
RU-2547889-C2,20150410
RU-2569826-C2,20151127
RU-2606625-C2,20170110
RU-2653463-C2,20180508
DK-2501437-T3,20160801
DK-3050571-T3,20180606
ES-2541116-T3,20150716
ES-2617329-T3,20170616
ES-2668886-T3,20180522
ES-2568433-T3,20160429
ES-2687849-T3,20181029
RU-154299-U1,20150820
RU-165888-U1,20161110
RU-177928-U1,20180316
RU-181409-U1,20180712
RU-184905-U1,20181114
DE-102017115172-B3,20180809
DE-102017201224-B3,20180621
DE-102017206019-B3,20180920
DE-10222672-B4,20160121
DE-10326741-B4,20170727
DE-102007030139-B4,20160128
DE-102009029783-B4,20160204
DE-102009050279-B4,20171214
DE-102010051323-B4,20160728
DE-102010061295-B4,20171123
DE-102012107210-B4,20150917
DE-102012201873-B4,20160310
DE-102014008656-B4,20170511
DE-102014101047-B4,20181220
DE-102014115437-B4,20160602
DE-102015200030-B4,20160324
EP-2114996-B8,20150610
CN-107501258-B8,20181016
RU-2542273-C1,20150220
RU-2562075-C1,20150910
RU-2600220-C1,20161020
RU-2607925-C1,20170111
RU-2672118-C1,20181112
RU-2670228-C1,20181019
RU-2541390-C2,20150210
RU-2599250-C2,20161010
RU-2606335-C2,20170110
RU-2622921-C2,20170621
DK-2194066-T3,20160502
DK-2571998-T3,20170925
DK-2691942-T3,20180723
DK-2670481-T3,20150615
ES-2592287-T3,20161129
ES-2675070-T3,20180706
ES-2630227-T3,20170818
ES-2617533-T3,20170619
ES-2633243-T3,20170920
DK-2220030-T3,20160411
ES-2567952-T3,20160426
ES-2627442-T3,20170728
ES-2536301-T3,20150522
ES-2666493-T3,20180504
ES-2607105-T3,20170329
RU-151296-U1,20150327
RU-172423-U1,20170707
RU-180239-U1,20180606
RU-182070-U1,20180802
CN-205850665-U8,20170322
KR-200486986-Y1,20180827
KR-200478529-Y1,20151016
KR-200477602-Y1,20150702
KR-200482765-Y1,20170303

2025-02-12 21:27:48 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:48 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:48 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:49 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:27:49 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:49 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:49 - root - INFO - SQL:
-- Query 5: Get IPC codes for each patent
SELECT t."publication_number", ipc_u.value::VARIANT:"code"::STRING AS "ipc_code"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."ipc") ipc_u
LIMIT 100;
Results:
publication_number,ipc_code
US-2020372460-A1,H04L9/08
US-2020372460-A1,H04L9/32
US-2020372460-A1,G06Q10/08
US-2020372460-A1,G08G1/00
US-2020377325-A1,B65H31/20
US-2020377325-A1,B65H5/36
US-2020377325-A1,B65H1/04
US-2020377325-A1,B41J11/00
US-2021265514-A1,H01L27/146
US-2021265514-A1,H01L31/0216
US-2021265514-A1,G01J1/42
US-2021265514-A1,H01L31/0236
US-2021265514-A1,G01J1/04
US-2021064907-A1,G06K9/46
US-2021064907-A1,G06K9/62
US-2021064907-A1,G06K9/44
US-2020399226-A1,C07D403/06
US-2020399226-A1,C07D413/12
US-2020399226-A1,C07D405/12
US-2020399226-A1,C07D401/12
US-2020399226-A1,C07D235/02
US-2020399226-A1,C07D401/06
US-2020399226-A1,C07D403/12
US-2020399226-A1,C07D417/06
US-2020399226-A1,C07D487/04
US-2021257383-A1,H10B43/35
US-2021257383-A1,H10B43/27
US-2021257383-A1,H10B43/10
US-2020404493-A1,H04W52/02
US-2020404493-A1,H04L29/06
US-2020404493-A1,H04W76/28
US-2020404493-A1,H04W12/04
US-2020401918-A1,G06N20/00
US-2020401918-A1,G06Q30/02
US-2020401918-A1,G06F40/00
US-2020401918-A1,G06N5/04
US-2020401918-A1,G06F16/9535
US-2020401918-A1,G06F16/2457
US-2021090749-A1,G16H10/40
US-2021090749-A1,G16H40/20
US-2021090749-A1,G06N20/00
US-2021090749-A1,G16H50/70
US-2021090749-A1,G16H70/60
US-2021090749-A1,G16H50/80
US-2021090749-A1,G06N7/00
US-2021090749-A1,G16H70/40
US-2021090749-A1,G16H10/60
US-2022093492-A1,H05K1/11
US-2022093492-A1,H01L23/532
US-2022093492-A1,H01L23/538
US-2022093492-A1,H01L23/49
US-2021240288-A1,A63F9/10
US-2021240288-A1,G02F1/03
US-2021240288-A1,G06F3/044
US-2021098805-A1,H01M8/04746
US-2021098805-A1,H01M8/04029
US-2022033866-A1,C08G69/08
US-2022033866-A1,C12P13/02
US-2022090664-A1,F16H45/02
US-2022090664-A1,F16H41/28
US-2021011040-A1,G01N35/04
US-2021097835-A1,H04B17/318
US-2021097835-A1,G08B25/10
US-2021097835-A1,G08B13/24
US-2022097744-A1,B61L15/00
US-2021031929-A1,B32B27/20
US-2021031929-A1,B64D15/12
US-2021031929-A1,B32B38/00
US-2021031929-A1,B32B27/08
US-2021031929-A1,B32B27/28
US-2021031929-A1,B32B37/20
US-2021031929-A1,H05B3/18
US-2021031929-A1,C23C4/129
US-2021162946-A1,B60N2/00
US-2021162946-A1,B60R22/48
US-2021115519-A1,C12Q1/6886
US-2021115310-A1,C09J109/08
US-2021115310-A1,C09J111/02
US-2021115310-A1,C09J11/08
US-2021115310-A1,C09J5/00
US-2021255068-A1,G01N15/06
US-2021255068-A1,G01N15/02
US-2021255068-A1,G01N1/22
US-2021226449-A1,H02J3/00
US-2021226449-A1,H02J3/24
US-2021226449-A1,H02M7/537
US-2022108380-A1,G06Q30/06
US-2021072035-A1,G01C21/34
US-2021032509-A1,C09J11/08
US-2021032509-A1,C08F120/08
US-2021032509-A1,C09J11/06
US-2021032509-A1,C09J105/00
US-2021032509-A1,C08F120/06
US-2021130103-A1,B65G39/12
US-2021130103-A1,B65G21/20
US-2021030268-A1,H04M1/72403
US-2021030268-A1,H04N7/18
US-2021030268-A1,A61B3/032
US-2021030268-A1,G06T3/20
US-2021030268-A1,A61B3/00

2025-02-12 21:27:49 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:49 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:49 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:50 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:27:50 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:51 - root - INFO - SQL:
-- Query 6: Retrieve backward citations for each patent
SELECT t."publication_number", c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") c
LIMIT 100;
Results:
publication_number,cited_publication_number
IT-TO20100734-A1,FR-2203337-A5
IT-TO20100734-A1,WO-2010012628-A1
IT-PI20100017-A1,WO-0192361-A1
IT-PI20100017-A1,WO-03040700-A1
IT-PI20100017-A1,US-2004062854-A1
IT-TO20110369-A1,US-4109733-A
IT-TO20110369-A1,GB-2106953-A
IT-TO20110369-A1,DE-3919824-A1
IT-TO20080716-A1,JP-H05283945-A
IT-TO20080716-A1,EP-1132882-A2
IT-TO20080716-A1,US-2005264344-A1
IT-TO20080716-A1,US-2008100382-A1
IT-TO20101059-A1,GB-463048-A
IT-TO20101059-A1,US-2861836-A
IT-TO20101059-A1,GB-2113623-A
IT-TO20101059-A1,FR-2780920-A1
IT-TO20101059-A1,GB-2340459-A
IT-TO20101059-A1,EP-1454783-A1
IT-TO20101059-A1,DE-10346067-B3
IT-VR20110006-A1,US-3028689-A
IT-VR20110006-A1,DE-3643057-A1
IT-VR20110006-A1,US-5546680-A
IT-VR20110006-A1,US-2005278979-A1
IT-VE20080082-A1,GB-2248774-A
IT-VE20080082-A1,US-2005245627-A1
IT-VE20080082-A1,US-2007116775-A1
IT-RE20130072-A1,DE-3736373-C1
IT-RE20130072-A1,US-5691032-A
IT-PE20090015-A1,WO-9529657-A1
IT-PE20090015-A1,WO-9822069-A1
IT-PE20090015-A1,EP-1110529-A1
IT-PE20090015-A1,US-2001034512-A1
IT-PE20090015-A1,US-2005256496-A1
IT-PE20090015-A1,WO-2007071268-A1
IT-PE20090015-A1,EP-2025311-A1
AT-523695-A1,EP-1151914-A1
AT-523695-A1,CN-101244756-B
AT-523695-A1,CN-206317995-U
CH-701263-A1,US-3788046-A
CH-701263-A1,EP-0091673-A2
CH-701263-A1,EP-1428565-A1
CH-701263-A1,DE-202008008464-U1
ES-2129283-A1,US-3090478-A
ES-2129283-A1,US-4130194-A
ES-2129283-A1,US-4681209-A
ES-2129283-A1,US-4802571-A
ES-2129283-A1,US-4865181-A
FR-2812871-A1,EP-0582494-A1
FR-2812871-A1,DE-19940104-A1
FR-2818884-A1,DE-153266-C
FR-2818884-A1,US-2019340-A
FR-2818884-A1,US-3396882-A
FR-2828629-A1,US-4251951-A
FR-2828629-A1,GB-2162497-A
FR-2828629-A1,DE-3625674-C1
FR-2828629-A1,FR-2626146-A1
FR-2828629-A1,WO-0147346-A1
FR-2843180-A1,US-3037465-A
FR-2843180-A1,US-3040678-A
FR-2843180-A1,US-4892508-A
FR-2860321-A1,DE-19943092-A1
FR-2860321-A1,FR-2817063-A1
FR-2860321-A1,WO-02101641-A1
FR-2860321-A1,US-6575375-B1
FR-2860877-A1,US-4465974-A
FR-2860877-A1,DE-19812307-A1
FR-2860877-A1,US-2001043065-A1
FR-2864231-A1,GB-2116314-A
FR-2864231-A1,US-5433342-A
FR-2864231-A1,US-6129702-A
FR-2864231-A1,WO-02070047-A1
FR-2854596-A1,US-2513217-A
FR-2854596-A1,FR-2629172-A1
FR-2854596-A1,US-4962963-A
FR-2867220-A1,US-4439888-A
FR-2867220-A1,US-4486919-A
FR-2867220-A1,DE-29514335-U1
FR-2867220-A1,EP-0789124-A2
FR-2867220-A1,DE-20112528-U1
FR-2881382-A1,US-5755302-A
FR-2881382-A1,EP-1112885-A1
FR-2881382-A1,DE-10033424-A1
FR-2881382-A1,EP-1243788-A1
FR-2881382-A1,FR-2830305-A1
FR-2881382-A1,EP-1331126-A1
FR-2881382-A1,US-6740002-B1
FR-2891265-A1,DE-4035286-A1
FR-2895801-A1,FR-2107847-A1
FR-2895801-A1,FR-2594957-A1
FR-2895801-A1,US-5383363-A
FR-2895801-A1,US-2003079358-A1
FR-2895801-A1,WO-2005121812-A1
FR-2906173-A1,WO-9722436-A1
FR-2906173-A1,DE-19650360-A1
FR-2906173-A1,AT-411445-B
FR-2897606-A1,EP-0398851-A2
FR-2897606-A1,GB-2270299-A
FR-2897606-A1,US-5868345-A
FR-2897606-A1,US-6402085-B1
FR-2897606-A1,WO-2005020777-A1

2025-02-12 21:27:51 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:51 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:51 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:52 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:52 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:28:30 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:28:30 - root - INFO - The error you're encountering is due to the way Snowflake handles `LATERAL FLATTEN` operations combined with `JOIN`s. Specifically, Snowflake does not support using `LATERAL` table functions (like `FLATTEN`) within an outer join or with a join predicate (ON clause). Your query attempts to perform an `INNER JOIN LATERAL FLATTEN` after a `LEFT JOIN`, which is not supported.

To resolve this issue, you can restructure your query using Common Table Expressions (CTEs) to separate the operations and avoid the unsupported `JOIN` syntax. Here's how you can modify your query:

```sql
WITH citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        ipc_u.value::VARIANT:"code"::STRING AS "ipc_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc_u
)
SELECT
    citations."citing_publication",
    citations."cited_publication_number",
    cited_ipcs."ipc_code"
FROM
    citations
    LEFT JOIN cited_ipcs
        ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
LIMIT 100;
```

**Explanation:**

1. **First CTE (`citations`):** We flatten the `"citation"` array for each publication to get the `"cited_publication_number"`.

2. **Second CTE (`cited_ipcs`):** We flatten the `"ipc"` array for each cited publication to extract the `"ipc_code"`.

3. **Final SELECT Statement:** We perform a `LEFT JOIN` between the `citations` and `cited_ipcs` CTEs on the `"cited_publication_number"` to associate each cited publication with its IPC codes.

This approach avoids using `LATERAL` within a `JOIN` clause, which addresses the error you encountered. By separating the operations into CTEs, we ensure compatibility with Snowflake's SQL syntax.

**Please note:** The `LIMIT 100` clause limits the result to 100 rows. You can adjust this number as needed.

**Additional Tips:**

- Ensure that the `"publication_number"` format is consistent between the citing and cited publications for the join to work correctly.
- If some cited publications do not exist in your `PUBLICATIONS` table, the `LEFT JOIN` ensures that you still get results for those citations, with `NULL` values for the IPC codes.

**Example Output Format:**

```csv
citing_publication,cited_publication_number,ipc_code
US-1234567-B2,US-7654321-A1,A01B1/00
US-1234567-B2,US-8765432-A1,B23C3/12
...
```

This query should now run without errors and provide the IPC codes of the backward citations for each publication.
2025-02-12 21:28:30 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:28:30 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:28:30 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:28:32 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:28:32 - snowflake.connector.connection - INFO - closed
2025-02-12 21:28:32 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:29:29 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:29:29 - root - INFO - SQL:
WITH citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        ipc_u.value::VARIANT:"code"::STRING AS "ipc_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc_u
)
SELECT
    citations."citing_publication",
    citations."cited_publication_number",
    cited_ipcs."ipc_code"
FROM
    citations
    LEFT JOIN cited_ipcs
        ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
LIMIT 100;
Results:
citing_publication,cited_publication_number,ipc_code
US-11364337-B2,US-8911410-B2,A61M37/00
US-11364337-B2,US-8911410-B2,A61M5/20
US-11364337-B2,US-8911410-B2,A61M5/32
RU-2652946-C1,US-9292737-B2,G06Q20/04
RU-2652946-C1,US-9292737-B2,G06V30/40
RU-2652946-C1,US-9292737-B2,G06V30/10
RU-2652946-C1,US-9292737-B2,G06V30/224
US-11707213-B2,US-2019320956-A1,A61B5/145
US-11707213-B2,US-2019320956-A1,A61B5/00
US-11707213-B2,US-2019320956-A1,A61B5/1473
US-11707213-B2,US-2019320956-A1,A61B5/1495
US-11707213-B2,US-2019320956-A1,A61B5/1486
CN-103687026-B,US-2012063405-A1,H04W72/04
CN-105747285-A,US-2016113806-A1,A41C1/00
CN-105747285-A,US-2016113806-A1,A41C1/12
CN-105747285-A,US-2016113806-A1,A41B9/08
CN-105747285-A,US-2016113806-A1,A41B9/16
CN-105747285-A,US-2016113806-A1,A61F5/02
US-11809128-B2,US-2021232086-A1,G03G21/16
US-11809128-B2,US-2021232086-A1,G03G21/18
US-11526650-B1,US-2016285437-A1,H03K3/037
US-11526650-B1,US-2016285437-A1,G06F1/10
US-10742288-B2,US-2016336344-A1,H01L29/10
US-10742288-B2,US-2016336344-A1,H01L23/00
US-10742288-B2,US-2016336344-A1,H04B1/44
US-10742288-B2,US-2016336344-A1,H01L29/78
US-10742288-B2,US-2016336344-A1,H01L21/84
US-10742288-B2,US-2016336344-A1,H01L21/762
US-10742288-B2,US-2016336344-A1,H01L29/06
US-10742288-B2,US-2016336344-A1,H01L29/66
US-10742288-B2,US-2016336344-A1,H01L27/12
US-10742288-B2,US-2016336344-A1,H01L21/683
US-10742288-B2,US-2016336344-A1,H01L23/528
US-10742288-B2,US-2016336344-A1,H01L23/48
US-11142867-B2,US-2015064340-A1,C23C16/458
US-11142867-B2,US-2015064340-A1,C23C16/452
US-11142867-B2,US-2015064340-A1,C23C16/52
US-11142867-B2,US-2015064340-A1,C23C16/02
US-11142867-B2,US-2015064340-A1,C23C16/50
US-11142867-B2,US-2015064340-A1,C23C16/44
US-2021239174-A1,US-2265629-A,G01G23/00
US-10825295-B2,US-2016217532-A1,G06Q40/08
US-10825295-B2,US-2016217532-A1,G06Q30/02
US-2022182297-A1,US-2019213089-A1,G06F11/14
US-2022182297-A1,US-2019213089-A1,G06F16/22
US-11036621-B2,US-2018275986-A1,G06F9/44
US-11036621-B2,US-2018275986-A1,G06F11/36
US-11036621-B2,US-2018275986-A1,G06F9/445
US-2021203720-A1,US-2020314052-A1,H04L12/861
US-2021203720-A1,US-2020314052-A1,H04L12/58
US-2021203720-A1,US-2020314052-A1,G06N3/08
US-11221682-B2,US-2016054804-A1,G06F3/01
US-11416109-B2,US-9348862-B2,G06F17/30
US-11222142-B2,US-9348862-B2,G06F17/30
US-2861624-A,US-2674300-A,B64D11/06
US-10873456-B1,US-2020110821-A1,H04L9/06
US-2021226710-A1,US-2021218589-A1,G06T7/70
US-2021226710-A1,US-2021218589-A1,H04L12/18
US-2021226710-A1,US-2021218589-A1,G06T3/00
US-2021226710-A1,US-2021218589-A1,H04N7/14
US-2021226710-A1,US-2021218589-A1,G06T5/00
WO-2022104689-A1,US-2019356546-A1,H04L12/24
WO-2022104689-A1,US-2019356546-A1,H04W72/04
WO-2022104689-A1,US-2019356546-A1,H04L1/18
WO-2022104689-A1,US-2019356546-A1,H04L12/947
US-2024161115-A1,US-2019287183-A1,G06Q40/00
US-2024161115-A1,US-2019287183-A1,G06F17/27
US-2024161115-A1,US-2019287183-A1,G06F7/08
US-10733748-B2,US-9355294-B2,G06K7/10
US-11257143-B2,US-9355294-B2,G06K7/10
US-10733748-B2,US-9355294-B2,G06K5/04
US-11257143-B2,US-9355294-B2,G06K5/04
US-10733748-B2,US-9355294-B2,G06K7/14
US-11257143-B2,US-9355294-B2,G06K7/14
US-10733748-B2,US-9355294-B2,G06K7/00
US-11257143-B2,US-9355294-B2,G06K7/00
US-10872544-B2,US-2020175661-A1,G06T5/00
US-10872544-B2,US-2020175661-A1,G06T3/40
US-10872544-B2,US-2020175661-A1,G06T1/20
US-10872544-B2,US-2020175661-A1,G06T1/00
US-10872544-B2,US-2020175661-A1,H04M1/02
CN-113911605-A,US-2019073627-A1,G06N3/08
CN-113911605-A,US-2019073627-A1,G06K7/10
CN-113911605-A,US-2019073627-A1,G06Q10/08
US-10420148-B2,US-2017079071-A1,H04W74/08
US-3742188-A,US-3597708-A,H01P1/26
US-4516088-A,US-3597708-A,H01P1/26
WO-2019174918-A1,EP-2322385-A1,C09J7/21
WO-2019174918-A1,EP-2322385-A1,B60R16/02
US-11416109-B2,US-10657469-B2,G06Q10/00
US-11416109-B2,US-10657469-B2,G06Q10/06
US-2018209348-A1,US-10473033-B2,G01N15/10
US-2018209348-A1,US-10473033-B2,F16N29/04
US-2018209348-A1,US-10473033-B2,F02C7/266
US-2018209348-A1,US-10473033-B2,B03C1/28
US-2018209348-A1,US-10473033-B2,F01D25/18
WO-2023129897-A1,US-2019266493-A1,G06N3/12
WO-2023129897-A1,US-2019266493-A1,G06N3/08
US-11207310-B2,US-2019030016-A1,G01N30/88
US-11207310-B2,US-2019030016-A1,C07D211/24

2025-02-12 21:29:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:29:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:29:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:29:30 - snowflake.connector.connection - INFO - closed
2025-02-12 21:29:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:30:08 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:30:08 - root - INFO - The error you're encountering is due to the way Snowflake handles `LATERAL FLATTEN` operations combined with `JOIN`s. In Snowflake, you cannot use `LATERAL` table functions (like `FLATTEN`) within `JOIN` clauses that have an `ON` condition. Specifically, Snowflake does not support `LATERAL FLATTEN` with `JOIN ... ON` syntax.

**Problem with Your Query:**

In your query, the problematic part is:

```sql
INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
```

This syntax is not supported because you're using `LATERAL FLATTEN` within `JOIN`s that include `ON` predicates.

**Solution:**

To fix this issue, you need to restructure your query to avoid using `LATERAL FLATTEN` within a `JOIN` clause that has an `ON` condition. Instead, you can use Common Table Expressions (CTEs) or subqueries to separate the flattening operations and then perform the necessary joins.

Here's the corrected version of your query:

```sql
WITH citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc_u
)
SELECT
    citations."citing_publication",
    cited_ipcs."ipc4_code"
FROM
    citations
    LEFT JOIN cited_ipcs
        ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
LIMIT 100;
```

**Explanation:**

1. **CTE `citations`:** This CTE extracts the citing publications and their cited publication numbers by flattening the `"citation"` field.

    ```sql
    WITH citations AS (
        SELECT
            t."publication_number" AS "citing_publication",
            c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
        FROM
            PATENTS.PATENTS.PUBLICATIONS t,
            LATERAL FLATTEN(input => t."citation") c
    ),
    ```

2. **CTE `cited_ipcs`:** This CTE extracts the 4-digit IPC codes from the cited publications by flattening the `"ipc"` field.

    ```sql
    cited_ipcs AS (
        SELECT
            cp."publication_number" AS "cited_publication_number",
            SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
        FROM
            PATENTS.PATENTS.PUBLICATIONS cp,
            LATERAL FLATTEN(input => cp."ipc") ipc_u
    )
    ```

3. **Final SELECT and JOIN:**

    - We perform a `LEFT JOIN` between `citations` and `cited_ipcs` on the `cited_publication_number`.
    - This joins each citing publication with the 4-digit IPC codes of its backward citations.

    ```sql
    SELECT
        citations."citing_publication",
        cited_ipcs."ipc4_code"
    FROM
        citations
        LEFT JOIN cited_ipcs
            ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
    LIMIT 100;
    ```

**Why This Works:**

- By using CTEs, we separate the flattening operations from the join operations.
- We avoid using `LATERAL FLATTEN` within a `JOIN` clause that has an `ON` condition, thus adhering to Snowflake's syntax requirements.
- This structure allows Snowflake to execute the query without encountering the unsupported feature error.

**Alternative Without CTEs:**

If you prefer not to use CTEs, you can achieve the same result using subqueries:

```sql
SELECT
    citations."citing_publication",
    cited_ipcs."ipc4_code"
FROM
    (
        SELECT
            t."publication_number" AS "citing_publication",
            c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
        FROM
            PATENTS.PATENTS.PUBLICATIONS t,
            LATERAL FLATTEN(input => t."citation") c
    ) citations
    LEFT JOIN
    (
        SELECT
            cp."publication_number" AS "cited_publication_number",
            SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
        FROM
            PATENTS.PATENTS.PUBLICATIONS cp,
            LATERAL FLATTEN(input => cp."ipc") ipc_u
    ) cited_ipcs
    ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
LIMIT 100;
```

**Important Notes:**

- Ensure that the `"publication_number"` format matches across your datasets. Sometimes, publication numbers may include prefixes or suffixes (e.g., country codes like "US-"), which can affect the join. You may need to standardize the format using string functions like `REPLACE`, `SUBSTRING`, or `REGEXP_REPLACE`.

- If you encounter `NULL` values or missing data, consider using `LEFT JOIN` to preserve rows from the left table (`citations`) even when there's no matching row in `cited_ipcs`.

**Testing the Query:**

After applying the corrected query, you should be able to retrieve the desired data without encountering the error. Here's an example of what the output might look like:

```csv
citing_publication,ipc4_code
US-1234567-B2,H04L
US-1234567-B2,G06F
US-7654321-B2,A61B
US-7654321-B2,A61M
...
```

**Final Recommendation:**

- **Use CTEs or Subqueries:** This is essential to avoid using `LATERAL FLATTEN` within a `JOIN` with an `ON` condition.

- **Standardize `publication_number` Formats:** Ensure consistency in `publication_number` for successful joins.

- **Test with Smaller Datasets:** If possible, test your query on a smaller subset to ensure it works before scaling up.

I hope this helps you resolve the error and successfully run your query!
2025-02-12 21:30:08 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:30:08 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:30:08 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:30:09 - snowflake.connector.connection - INFO - closed
2025-02-12 21:30:09 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:30:37 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:30:37 - root - INFO - The error message indicates a syntax error at line 1 position 0, specifically an unexpected `'INNER'`. This suggests that your query is starting with `'INNER'` instead of `'SELECT'`, which is not valid SQL syntax.

**Issue Identified:**

In the query you provided, it appears that the `SELECT` statement might be missing or incorrectly placed. Here is the query you've provided:

```sql
-- Query 8: Extract 4-digit IPC codes from backward citations
SELECT 
    t."publication_number" AS "citing_publication", 
    SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
LIMIT 100;
```

However, according to the error message, the parser is seeing `'INNER'` at the very beginning of the query, which suggests that the query might actually look like this:

```sql
INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
-- rest of the query
```

This would cause a syntax error because a SQL query must start with a `SELECT` statement, not a `JOIN`.

**Possible Causes:**

- **Copy-Paste Error:** The `SELECT` statement might have been accidentally omitted when copying and pasting the query.
- **Formatting Issues:** Hidden characters or line breaks might have caused the `SELECT` statement to be misinterpreted.

**Solution:**

Let's ensure that your query starts correctly with a `SELECT` statement and is properly structured.

However, as we discussed earlier, using `LATERAL FLATTEN` within `JOIN` clauses that have an `ON` condition is not supported in Snowflake. To avoid this error, we should restructure the query using Common Table Expressions (CTEs) or subqueries.

Here's the corrected version of your query using CTEs:

---

```sql
-- Corrected Query 8: Extract 4-digit IPC codes from backward citations

WITH citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc_u
)
SELECT
    citations."citing_publication",
    cited_ipcs."ipc4_code"
FROM
    citations
    LEFT JOIN cited_ipcs
        ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
LIMIT 100;
```

---

**Explanation:**

1. **CTE `citations`:**

    - Extracts the citing publication numbers and their cited publication numbers by flattening the `"citation"` array.
    
    ```sql
    WITH citations AS (
        SELECT
            t."publication_number" AS "citing_publication",
            c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
        FROM
            PATENTS.PATENTS.PUBLICATIONS t,
            LATERAL FLATTEN(input => t."citation") c
    ),
    ```

2. **CTE `cited_ipcs`:**

    - Extracts the 4-digit IPC codes from the cited publications by flattening the `"ipc"` array and using `SUBSTR` to get the first four characters of the IPC code.
    
    ```sql
    cited_ipcs AS (
        SELECT
            cp."publication_number" AS "cited_publication_number",
            SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
        FROM
            PATENTS.PATENTS.PUBLICATIONS cp,
            LATERAL FLATTEN(input => cp."ipc") ipc_u
    )
    ```

3. **Final SELECT and JOIN:**

    - Joins the `citations` and `cited_ipcs` CTEs on the `cited_publication_number` to associate each citing publication with the 4-digit IPC codes of its backward citations.
    
    ```sql
    SELECT
        citations."citing_publication",
        cited_ipcs."ipc4_code"
    FROM
        citations
        LEFT JOIN cited_ipcs
            ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
    LIMIT 100;
    ```

**Why This Works:**

- **Avoids Unsupported Syntax:** By using CTEs and separating the flattening operations from the joins, we avoid using `LATERAL FLATTEN` within `JOIN` clauses that have `ON` conditions, which is not supported in Snowflake.
  
- **Ensures Correct Query Structure:** The query starts with a `SELECT` statement and follows proper SQL syntax, preventing the syntax error you encountered.

**Action Steps:**

- **Copy the Corrected Query:** Replace your previous query with the corrected one provided above.

- **Run the Query:** Execute the corrected query in your Snowflake environment.

- **Verify Results:** Ensure that the results reflect the citing publications and the corresponding 4-digit IPC codes from their backward citations.

**Additional Notes:**

- **Consistency in `publication_number` Formats:** Ensure that the `publication_number` values are in a consistent format across your data. If they include country codes or other prefixes/suffixes (e.g., "US-"), you may need to standardize them using string functions like `REPLACE` or `SUBSTR` to match the formats during the join operation.

- **Handling `NULL` Values:** If some cited publications do not exist in your `PATENTS.PATENTS.PUBLICATIONS` table or do not have IPC codes, the `LEFT JOIN` ensures that you still get the citing publication in your results, with `NULL` values for the missing IPC codes.

- **Large Data Volumes:** Be cautious when executing queries that join large tables, as they may consume significant resources and take longer to execute. Consider limiting the data set or optimizing the query if necessary.

**Testing the Corrected Query:**

Here's what the output might look like when you run the corrected query:

```csv
citing_publication,ipc4_code
US-1234567-B2,H04L
US-1234567-B2,G06F
US-7654321-B2,A61B
US-7654321-B2,A61M
...
```

This output shows the citing publication numbers along with the 4-digit IPC codes of their backward citations.

**Conclusion:**

The error you encountered was due to incorrect SQL syntax and the use of unsupported features in Snowflake. By restructuring the query using CTEs and ensuring it starts with a `SELECT` statement, we can resolve the syntax errors and avoid unsupported operations.

Please try running the corrected query provided above. If you encounter any further issues or have additional questions, feel free to ask!
2025-02-12 21:30:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:30:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:30:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:30:38 - snowflake.connector.connection - INFO - closed
2025-02-12 21:30:38 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:31:08 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:31:08 - root - INFO - The error you're encountering is due to the use of `LATERAL FLATTEN` within `JOIN` clauses that include an `ON` condition, which is not supported in Snowflake. Specifically, Snowflake does not allow `LATERAL FLATTEN` (or any table function) to be used in a `JOIN` with an `ON` predicate.

**Issue in Your Query:**

In your query:

```sql
SELECT 
    t."publication_number" AS "citing_publication", 
    SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
LIMIT 100;
```

You're using `LATERAL FLATTEN` within `JOIN` clauses (`INNER JOIN` and `LEFT JOIN`) with `ON` conditions, which is causing the error.

**Solution:**

To resolve this, you need to restructure your query to avoid using `LATERAL FLATTEN` inside `JOIN` clauses with `ON` conditions. Instead, you can use Common Table Expressions (CTEs) or subqueries to perform the flattening operations separately before joining the results.

Here's the corrected version of your query using CTEs:

---

```sql
-- Corrected Query 8: Extract 4-digit IPC codes from backward citations

WITH citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc_u
)
SELECT
    citations."citing_publication",
    cited_ipcs."ipc4_code"
FROM
    citations
    LEFT JOIN cited_ipcs
        ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
LIMIT 100;
```

---

**Explanation:**

1. **CTE `citations`:**

   - Extracts the citing publications and their cited publication numbers by flattening the `"citation"` array.
   - Avoids using `LATERAL FLATTEN` in a `JOIN` clause.

   ```sql
   WITH citations AS (
       SELECT
           t."publication_number" AS "citing_publication",
           c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
       FROM
           PATENTS.PATENTS.PUBLICATIONS t,
           LATERAL FLATTEN(input => t."citation") c
   ),
   ```

2. **CTE `cited_ipcs`:**

   - Extracts the 4-digit IPC codes from the cited publications by flattening the `"ipc"` array.
   - Uses `SUBSTR` to extract the first four characters of the IPC code.

   ```sql
   cited_ipcs AS (
       SELECT
           cp."publication_number" AS "cited_publication_number",
           SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
       FROM
           PATENTS.PATENTS.PUBLICATIONS cp,
           LATERAL FLATTEN(input => cp."ipc") ipc_u
   )
   ```

3. **Final `SELECT` and `JOIN`:**

   - Performs a `LEFT JOIN` between `citations` and `cited_ipcs` on the `cited_publication_number`.
   - Since both CTEs have performed the necessary flattening, the `JOIN` does not involve `LATERAL FLATTEN`.

   ```sql
   SELECT
       citations."citing_publication",
       cited_ipcs."ipc4_code"
   FROM
       citations
       LEFT JOIN cited_ipcs
           ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
   LIMIT 100;
   ```

**Why This Works:**

- **Avoids Unsupported Syntax:** By moving the `LATERAL FLATTEN` operations into separate CTEs and not using them directly in `JOIN` clauses with `ON` conditions, we comply with Snowflake's SQL syntax requirements.
- **Maintains Data Integrity:** The query still retrieves the desired data—citing publications and the 4-digit IPC codes of their backward citations.

**Next Steps:**

- **Run the Corrected Query:** Try executing the corrected query in your Snowflake environment.
- **Check the Results:** The output should display the citing publication numbers alongside the 4-digit IPC codes from their backward citations.

**Example Output:**

```csv
citing_publication,ipc4_code
US-1234567-B2,H04L
US-1234567-B2,G06F
US-7654321-B2,A61B
US-7654321-B2,A61M
...
```

**Additional Tips:**

- **Ensure Consistent `publication_number` Formats:**

  - Make sure that the `publication_number` values in both the `t` (citing publications) and `cp` (cited publications) tables are in the same format.
  - If necessary, you can standardize the formats using string functions like `REPLACE` or `SUBSTR`.

- **Handle Missing Data:**

  - If some cited publications are not present in the `PUBLICATIONS` table or lack IPC codes, they will result in `NULL` values in the `ipc4_code` column.
  - The `LEFT JOIN` ensures that all citing publications are included, even if there are no matching IPC codes.

- **Performance Considerations:**

  - Be aware that joining large tables can consume significant resources.
  - If performance is a concern, consider adding filters (e.g., limiting to US patents or specific grant dates) to reduce the data volume.

**Conclusion:**

The error occurs because Snowflake does not support using `LATERAL FLATTEN` within `JOIN` clauses that have `ON` conditions. By restructuring your query to use CTEs and performing the flattening operations separately, you can avoid this issue and successfully run your query.

**Please try running the corrected query above.** If you have any questions or need further assistance, feel free to ask!
2025-02-12 21:31:08 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:31:08 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:31:08 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:31:09 - snowflake.connector.connection - INFO - closed
2025-02-12 21:31:09 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:31:09 - root - INFO - SQL:
SELECT 
    t."publication_number" AS "citing_publication", 
    SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
LIMIT 100;
Results:
000002 (0A000): 01ba59eb-0004-9c22-0001-11c30114478e: Unsupported feature 'lateral table function called with OUTER JOIN syntax or a join predicate (ON clause)'.
2025-02-12 21:31:09 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:31:09 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:31:09 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:31:10 - snowflake.connector.connection - INFO - closed
2025-02-12 21:31:10 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:31:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:31:39 - root - INFO - The error you're encountering is due to the use of `LATERAL FLATTEN` within `JOIN` clauses that include an `ON` condition, which is not supported in Snowflake. Specifically, Snowflake does not allow `LATERAL FLATTEN` (or any table function) to be used in a `JOIN` with an `ON` predicate.

---

**Issue in Your Query:**

Your query:

```sql
-- Query 9: Count occurrences of each 4-digit IPC code in backward citations
SELECT 
    "ipc4_code", 
    COUNT(*) AS "occurrences"
FROM (
    SELECT 
        SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM PATENTS.PATENTS.PUBLICATIONS t
    INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
    LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
    INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
    WHERE t."publication_number" = 'US1234567B2'   -- Replace with actual publication number
)
GROUP BY "ipc4_code"
LIMIT 100;
```

Is causing the error because `LATERAL FLATTEN` is being used within `JOIN` clauses with `ON` conditions.

---

**Solution:**

To fix this, we should restructure the query using Common Table Expressions (CTEs) or subqueries to separate the `LATERAL FLATTEN` operations from the `JOIN` operations. Here's the corrected query:

```sql
-- Corrected Query 9: Count occurrences of each 4-digit IPC code in backward citations

WITH citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
    WHERE t."publication_number" = 'US1234567B2'   -- Replace with actual publication number
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc_u
)
SELECT 
    cited_ipcs."ipc4_code", 
    COUNT(*) AS "occurrences"
FROM
    citations
    LEFT JOIN cited_ipcs
        ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
GROUP BY 
    cited_ipcs."ipc4_code"
LIMIT 100;
```

---

**Explanation:**

1. **CTE `citations`:**

   - Extracts the citing publication and its backward citations by flattening the `"citation"` array.
   - Filters for the specific publication number you're interested in.

   ```sql
   WITH citations AS (
       SELECT
           t."publication_number" AS "citing_publication",
           c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
       FROM
           PATENTS.PATENTS.PUBLICATIONS t,
           LATERAL FLATTEN(input => t."citation") c
       WHERE t."publication_number" = 'US1234567B2'   -- Replace with actual publication number
   ),
   ```

2. **CTE `cited_ipcs`:**

   - Extracts the 4-digit IPC codes from the cited publications by flattening the `"ipc"` array.

   ```sql
   cited_ipcs AS (
       SELECT
           cp."publication_number" AS "cited_publication_number",
           SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
       FROM
           PATENTS.PATENTS.PUBLICATIONS cp,
           LATERAL FLATTEN(input => cp."ipc") ipc_u
   )
   ```

3. **Final SELECT and JOIN:**

   - Performs a `LEFT JOIN` between `citations` and `cited_ipcs` on `"cited_publication_number"`.
   - Groups by `"ipc4_code"` and counts the occurrences.

   ```sql
   SELECT 
       cited_ipcs."ipc4_code", 
       COUNT(*) AS "occurrences"
   FROM
       citations
       LEFT JOIN cited_ipcs
           ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
   GROUP BY 
       cited_ipcs."ipc4_code"
   LIMIT 100;
   ```

---

**Why This Works:**

- By separating `LATERAL FLATTEN` operations into CTEs, we avoid using it within `JOIN` clauses with `ON` conditions, thus complying with Snowflake's SQL syntax.

- The `LEFT JOIN` combines the citations with the IPC codes without violating the syntax rules.

---

**Next Steps:**

- **Replace `'US1234567B2'` with the actual publication number** you want to analyze.

- **Run the corrected query** in your Snowflake environment.

- **Verify the Results:**

  - You should get a list of 4-digit IPC codes along with their occurrence counts in the backward citations of the specified patent.

---

**Example Output:**

```csv
ipc4_code,occurrences
H04L,5
G06F,3
A61B,2
...
```

---

**Additional Tips:**

- **Ensure Consistency in `publication_number` Formats:**

  - If the `publication_number` values include prefixes like `"US-"`, ensure that they are consistent across your data or adjust your query accordingly.

  - For example, you might need to remove prefixes or use string functions to match the formats:

    ```sql
    REPLACE(cp."publication_number", 'US-', '') = REPLACE(citations."cited_publication_number", 'US-', '')
    ```

- **Handling Null Values:**

  - Some cited publications might not have IPC codes or might not be present in your `PUBLICATIONS` table. The `LEFT JOIN` ensures that you still get results for those citations, with `NULL` values for the IPC codes.

- **Analyzing Multiple Patents:**

  - If you need to calculate the IPC code occurrences for multiple patents, you can modify the `WHERE` clause in the `citations` CTE accordingly.

---

**Conclusion:**

By restructuring your query to use CTEs and avoid using `LATERAL FLATTEN` within `JOIN` clauses with `ON` conditions, you can resolve the error and successfully execute the query.

If you have any further questions or need assistance with additional queries, feel free to ask!
2025-02-12 21:31:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:31:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:31:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:31:40 - snowflake.connector.connection - INFO - closed
2025-02-12 21:31:40 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:32:24 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:32:24 - root - INFO - The error you're encountering is due to the use of `LATERAL FLATTEN` within `JOIN` clauses that include an `ON` condition, which is not supported in Snowflake. Specifically, Snowflake does not allow table functions like `LATERAL FLATTEN` to be used in `JOIN`s with an `ON` predicate.

---

**Issue in Your Query:**

Your query:

```sql
-- Query 9: Count occurrences of each 4-digit IPC code in backward citations
SELECT 
    "ipc4_code", 
    COUNT(*) AS "occurrences"
FROM (
    SELECT 
        SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM PATENTS.PATENTS.PUBLICATIONS t
    INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
    LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
    INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
    WHERE t."publication_number" = 'US1234567B2'   -- Replace with actual publication number
)
GROUP BY "ipc4_code"
LIMIT 100;
```

Is causing the error because `LATERAL FLATTEN` is being used within `JOIN` clauses with `ON` conditions.

---

**Solution:**

To resolve this issue, we need to avoid using `LATERAL FLATTEN` within `JOIN` clauses that have `ON` conditions. Instead, we'll use Common Table Expressions (CTEs) to separate the flattening operations from the join operations.

Here's the corrected version of your query:

---

```sql
-- Corrected Query 9: Count occurrences of each 4-digit IPC code in backward citations

WITH citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
    WHERE t."publication_number" = 'US1234567B2'   -- Replace with the actual publication number
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc
)
SELECT 
    cited_ipcs."ipc4_code", 
    COUNT(*) AS "occurrences"
FROM
    citations
    LEFT JOIN cited_ipcs
        ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
GROUP BY 
    cited_ipcs."ipc4_code"
ORDER BY 
    "occurrences" DESC
LIMIT 100;
```

---

**Explanation:**

1. **CTE `citations`:**

   - We flatten the `"citation"` array for the specified patent to get its backward citations.
   - We extract the `"cited_publication_number"` from the citations.

2. **CTE `cited_ipcs`:**

   - We flatten the `"ipc"` array for all publications to get their IPC codes.
   - We extract the 4-digit IPC codes using `SUBSTR`.

3. **Final `SELECT` and `JOIN`:**

   - We perform a `LEFT JOIN` between `citations` and `cited_ipcs` on the `"cited_publication_number"`.
   - We group by the `"ipc4_code"` to count the occurrences of each 4-digit IPC code in the backward citations.
   - We order the results by the number of occurrences in descending order.

**Note:**
- Replace `'US1234567B2'` with the actual publication number of the patent you're analyzing.
- Ensure that the `"publication_number"` formats match between the citing and cited publications. If necessary, you can standardize the formats using string functions like `REPLACE` or `REGEXP_REPLACE`.

---

**Example:**

If your actual publication number is `'US-1234567-B2'`, you should modify the `WHERE` clause:

```sql
WHERE t."publication_number" = 'US-1234567-B2'   -- Use the actual publication number
```

---

**Additional Tips:**

- **Consistency in Publication Numbers:**
  - If the publication numbers include prefixes like `'US-'`, ensure that both the citing and cited publication numbers are in the same format.
  - You can remove prefixes using string functions if needed:
    ```sql
    REPLACE(t."publication_number", 'US-', '') AS "citing_publication"
    ```

- **Handling Missing IPC Codes:**
  - Some cited publications may not have IPC codes. The `LEFT JOIN` ensures that these are still included in the results with a `NULL` `"ipc4_code"`.

- **Analyzing Multiple Patents:**
  - If you wish to analyze multiple patents, you can adjust the `WHERE` clause in the `citations` CTE. For example, to include all US patents with kind code `'B2'` and grant dates between 2015 and 2018:
    ```sql
    WHERE t."country_code" = 'US' AND
          t."kind_code" = 'B2' AND
          t."grant_date" BETWEEN 20150101 AND 20181231
    ```

---

**Sample Output:**

The query will produce a table showing the 4-digit IPC codes and their occurrence counts in the backward citations of the specified patent:

```csv
ipc4_code,occurrences
H04L,5
G06F,3
A61B,2
...
```

---

**Conclusion:**

By restructuring your query to use CTEs and separating the `LATERAL FLATTEN` operations from the `JOIN` clauses with `ON` conditions, you can avoid the unsupported feature error and successfully execute your query.

Please try running the corrected query above. If you encounter any further issues or need additional assistance, feel free to ask!
2025-02-12 21:32:24 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:32:24 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:32:24 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:32:25 - snowflake.connector.connection - INFO - closed
2025-02-12 21:32:25 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:33:11 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:33:11 - root - INFO - The error you're encountering is due to the way Snowflake handles `LATERAL FLATTEN` operations combined with `JOIN` clauses that include an `ON` condition. Specifically, Snowflake does not support using `LATERAL FLATTEN` within `JOIN`s that have an `ON` predicate. This is why you're seeing the error:

```
Unsupported feature 'lateral table function called with OUTER JOIN syntax or a join predicate (ON clause)'.
```

**Issue in Your Query:**

In your query, you're using `LATERAL FLATTEN` in `JOIN` clauses with `ON` conditions:

```sql
INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
```

This syntax is not supported in Snowflake.

---

### **Solution:**

To resolve this issue, you need to restructure your query to avoid using `LATERAL FLATTEN` within `JOIN` clauses that have `ON` conditions. Instead, you can use Common Table Expressions (CTEs) to separate the flattening operations from the joins.

Here's the corrected version of your query:

```sql
-- Corrected Query 9: Count occurrences of each 4-digit IPC code in backward citations

WITH citations AS (
    SELECT
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
    WHERE
        t."publication_number" = 'US1234567B2'   -- Replace with the actual publication number
),

cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc
)

SELECT 
    ci."ipc4_code", 
    COUNT(*) AS "occurrences"
FROM
    citations c
    LEFT JOIN cited_ipcs ci
        ON c."cited_publication_number" = ci."cited_publication_number"
GROUP BY 
    ci."ipc4_code"
ORDER BY 
    "occurrences" DESC
LIMIT 100;
```

---

### **Explanation:**

**1. CTE `citations`:**

- **Purpose:** Extract the backward citations (cited publications) of the target patent.
- **How it works:**
  - We select the `cited_publication_number` by flattening the `"citation"` array in the `PUBLICATIONS` table.
  - We filter the records to include only the citations for the specific patent `'US1234567B2'`.

```sql
WITH citations AS (
    SELECT
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
    WHERE
        t."publication_number" = 'US1234567B2'
),
```

**2. CTE `cited_ipcs`:**

- **Purpose:** Extract the 4-digit IPC codes of all cited publications.
- **How it works:**
  - We flatten the `"ipc"` array in the `PUBLICATIONS` table to get all IPC codes.
  - We use `SUBSTR` to extract the first four characters of the IPC code (`"ipc4_code"`).

```sql
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc
)
```

**3. Final `SELECT` Statement:**

- **Purpose:** Join the citations with their corresponding IPC codes and count the occurrences of each 4-digit IPC code.
- **How it works:**
  - We perform a `LEFT JOIN` between `citations` and `cited_ipcs` on `"cited_publication_number"`.
  - We group by `"ipc4_code"` and count the occurrences.
  - We order the results by the number of occurrences in descending order.

```sql
SELECT 
    ci."ipc4_code", 
    COUNT(*) AS "occurrences"
FROM
    citations c
    LEFT JOIN cited_ipcs ci
        ON c."cited_publication_number" = ci."cited_publication_number"
GROUP BY 
    ci."ipc4_code"
ORDER BY 
    "occurrences" DESC
LIMIT 100;
```

---

### **Notes:**

- **Replace `'US1234567B2'` with the actual publication number** of the patent you're analyzing.

- **Consistent Formats:** Ensure that the `"publication_number"` formats match between your datasets. If your publication numbers include prefixes like `'US-'`, you may need to use string functions to remove or add them for consistency.

  - For example, to remove prefixes:

    ```sql
    REPLACE(t."publication_number", 'US-', '') AS "publication_number_cleaned"
    ```

- **Handling Null Values:** If some cited publications do not have IPC codes, the `LEFT JOIN` ensures these records are included with a `NULL` in `"ipc4_code"`.

- **Filtering Out Null IPC Codes (Optional):** If you want to exclude citations without IPC codes, you can add a `WHERE` clause in the final `SELECT`:

  ```sql
  WHERE ci."ipc4_code" IS NOT NULL
  ```

- **Analyzing Multiple Patents (Optional):** To analyze multiple patents, you can adjust the `WHERE` clause in the `citations` CTE. For example:

  ```sql
  WHERE
      t."country_code" = 'US' AND
      t."kind_code" = 'B2' AND
      t."grant_date" BETWEEN 20150101 AND 20181231
  ```

---

### **Example Output:**

Assuming the patent `'US1234567B2'` cites publications with the following IPC codes, the output might look like:

```csv
ipc4_code,occurrences
H04L,5
G06F,3
A61B,2
...
```

---

### **Why This Works:**

- **Avoids Unsupported Syntax:** By moving the `LATERAL FLATTEN` operations into separate CTEs and not using them directly in `JOIN` clauses with `ON` conditions, we avoid the unsupported syntax that causes the error.

- **Satisfies Query Requirements:** The corrected query effectively counts the occurrences of each 4-digit IPC code in the backward citations of the specified patent.

---

### **Additional Tips:**

- **Performance Considerations:** Be cautious with large datasets, as joining and flattening large tables can consume significant resources. Applying filters early in your CTEs can improve performance.

- **Validating Data:** It's good practice to validate that the `cited_publication_number` in your `citations` CTE actually matches the `publication_number` in your `cited_ipcs` CTE. Inconsistent formats can lead to missing matches.

- **Debugging Steps:**

  - **Step 1:** Run the `citations` CTE separately to ensure it returns the correct cited publication numbers.
  - **Step 2:** Run the `cited_ipcs` CTE separately to ensure it returns the correct IPC codes.
  - **Step 3:** Verify that joining these two CTEs provides the expected results.

---

### **Summary:**

The error occurs because Snowflake does not support using `LATERAL FLATTEN` within `JOIN` clauses that have `ON` predicates. By restructuring your query to use CTEs and separating the flattening operations from the joins, you can avoid this limitation and successfully execute your query.

---

**Feel free to replace `'US1234567B2'` with your actual publication number and adjust the query as needed. If you have any further questions or need additional assistance, please don't hesitate to ask!**
2025-02-12 21:33:11 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:33:11 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:33:11 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:33:12 - snowflake.connector.connection - INFO - closed
2025-02-12 21:33:12 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:33:12 - root - INFO - SQL:
INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
Results:
001003 (42000): 01ba59ed-0004-9c12-0001-11c3011457c2: SQL compilation error:
syntax error line 1 at position 0 unexpected 'INNER'.
2025-02-12 21:33:12 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:33:12 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:33:12 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:33:13 - snowflake.connector.connection - INFO - closed
2025-02-12 21:33:14 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:33:53 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:33:53 - root - INFO - The error you're encountering is due to Snowflake's limitation regarding the use of `LATERAL FLATTEN` within `JOIN` clauses that include an `ON` condition. Specifically, Snowflake does not support using table functions like `LATERAL FLATTEN` in `JOIN`s with `ON` predicates.

---

### **Issue in Your Query:**

In your query:

```sql
-- Query 10: Calculate total occurrences and sum of squares of occurrences for a patent's backward citations
SELECT 
    SUM("occurrences") AS "total_occurrences", 
    SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
FROM (
    SELECT 
        "ipc4_code", 
        COUNT(*) AS "occurrences"
    FROM (
        SELECT 
            SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
        FROM PATENTS.PATENTS.PUBLICATIONS t
        INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
        LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
        INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
        WHERE t."publication_number" = 'US1234567B2'   -- Replace with actual publication number
    )
    GROUP BY "ipc4_code"
)
LIMIT 100;
```

The error occurs because you're using `LATERAL FLATTEN` within `JOIN` clauses that include an `ON` condition, which is not allowed in Snowflake.

---

### **Solution:**

To resolve this issue, we'll restructure your query using Common Table Expressions (CTEs) to separate the `LATERAL FLATTEN` operations from the `JOIN` operations. This way, we avoid using `LATERAL FLATTEN` within `JOIN` clauses that have `ON` conditions.

Here's the corrected version of your query:

---

```sql
-- Corrected Query 10: Calculate total occurrences and sum of squares of occurrences for a patent's backward citations

WITH citations AS (
    SELECT
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
    WHERE
        t."publication_number" = 'US1234567B2'   -- Replace with the actual publication number
),

cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc
)

SELECT 
    SUM("occurrences") AS "total_occurrences", 
    SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
FROM (
    SELECT 
        ci."ipc4_code", 
        COUNT(*) AS "occurrences"
    FROM
        citations c
        LEFT JOIN cited_ipcs ci
            ON c."cited_publication_number" = ci."cited_publication_number"
    GROUP BY 
        ci."ipc4_code"
)
```

---

### **Explanation:**

**1. CTE `citations`:**

- **Purpose:** To extract the backward citations (cited publications) of the target patent.
- **How it works:**
  - We flatten the `"citation"` array of the target patent to get all its cited publication numbers.
  
```sql
WITH citations AS (
    SELECT
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
    WHERE
        t."publication_number" = 'US1234567B2'   -- Replace with your actual publication number
),
```

**2. CTE `cited_ipcs`:**

- **Purpose:** To extract the 4-digit IPC codes of all publications.
- **How it works:**
  - We flatten the `"ipc"` array for each publication to get its IPC codes.
  - We extract the 4-digit IPC codes using `SUBSTR`.
  
```sql
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc
)
```

**3. Final `SELECT` Statement:**

- **Purpose:** To compute the total occurrences and sum of squared occurrences of the 4-digit IPC codes in the backward citations of the target patent.
- **How it works:**
  - We perform a `LEFT JOIN` between `citations` and `cited_ipcs` on the `"cited_publication_number"`.
  - We group by the `"ipc4_code"` to count the occurrences of each 4-digit IPC code.
  - Finally, we calculate the total occurrences and sum of squared occurrences.

```sql
SELECT 
    SUM("occurrences") AS "total_occurrences", 
    SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
FROM (
    SELECT 
        ci."ipc4_code", 
        COUNT(*) AS "occurrences"
    FROM
        citations c
        LEFT JOIN cited_ipcs ci
            ON c."cited_publication_number" = ci."cited_publication_number"
    GROUP BY 
        ci."ipc4_code"
)
```

---

### **Calculating the Originality Score:**

Once you have the `total_occurrences` and `sum_of_squared_occurrences`, you can calculate the originality score using the formula:

\[
\text{Originality Score} = 1 - \frac{\text{sum of squared occurrences}}{\left(\text{total occurrences}\right)^2}
\]

This can be computed either in SQL or after exporting the results.

---

### **Example Calculation (SQL):**

To calculate the originality score within the same query, you can modify the final `SELECT` statement:

```sql
SELECT 
    1 - (SUM("occurrences" * "occurrences") / POWER(SUM("occurrences"), 2)) AS "originality_score"
FROM (
    SELECT 
        ci."ipc4_code", 
        COUNT(*) AS "occurrences"
    FROM
        citations c
        LEFT JOIN cited_ipcs ci
            ON c."cited_publication_number" = ci."cited_publication_number"
    GROUP BY 
        ci."ipc4_code"
)
```

---

### **Full Query with Originality Score Calculation:**

Putting it all together:

```sql
WITH citations AS (
    SELECT
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
    WHERE
        t."publication_number" = 'US1234567B2'   -- Replace with your actual publication number
),

cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc
)

SELECT 
    t."publication_number",
    1 - (SUM("occurrences" * "occurrences") / POWER(SUM("occurrences"), 2)) AS "originality_score"
FROM (
    SELECT 
        ci."ipc4_code", 
        COUNT(*) AS "occurrences"
    FROM
        citations c
        LEFT JOIN cited_ipcs ci
            ON c."cited_publication_number" = ci."cited_publication_number"
    GROUP BY 
        ci."ipc4_code"
) sub,
PATENTS.PATENTS.PUBLICATIONS t
WHERE t."publication_number" = 'US1234567B2'
GROUP BY t."publication_number";
```

---

### **Explanation of the Final Query:**

- **Calculating Originality Score:**
  - The formula is applied within the SQL query to directly compute the originality score for the specified patent.

- **Including the Publication Number:**
  - We include `t."publication_number"` in the `SELECT` clause and group by it to display the publication number alongside the originality score.

- **Note:**
  - Ensure to replace `'US1234567B2'` with the actual publication number you wish to analyze.

---

### **Generalizing for Multiple Patents:**

If you want to calculate the originality score for multiple patents (e.g., all US patents with a B2 kind code and a grant date between 2015 and 2018), you can modify the `citations` CTE and include the necessary filters.

```sql
WITH citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
    WHERE
        t."country_code" = 'US' AND
        t."kind_code" = 'B2' AND
        t."grant_date" BETWEEN 20150101 AND 20181231
),

cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc
),

ipc_counts AS (
    SELECT
        c."citing_publication",
        ci."ipc4_code",
        COUNT(*) AS "occurrences"
    FROM
        citations c
        LEFT JOIN cited_ipcs ci
            ON c."cited_publication_number" = ci."cited_publication_number"
    GROUP BY
        c."citing_publication",
        ci."ipc4_code"
),

originality_scores AS (
    SELECT
        c."citing_publication" AS "publication_number",
        SUM("occurrences") AS "total_occurrences",
        SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
    FROM
        ipc_counts c
    GROUP BY
        c."citing_publication"
)

SELECT
    o."publication_number",
    1 - (o."sum_of_squared_occurrences" / POWER(o."total_occurrences", 2)) AS "originality_score"
FROM
    originality_scores o
ORDER BY
    "originality_score" DESC
LIMIT 100;
```

---

### **Explanation for Multiple Patents:**

- **Filtering Patents:**
  - In the `citations` CTE, we filter for US patents with a B2 kind code and a grant date between 2015 and 2018.
  
- **Calculating Counts per Patent:**
  - We group the IPC code occurrences by each citing publication to calculate the originality score for each patent.

- **Final Selection:**
  - We compute the originality score for each patent and order the results in descending order to find the patents with the highest originality score.

---

### **Important Notes:**

- **Ensure Consistent `publication_number` Formats:**

  - Check if the `publication_number` values include prefixes like `US-` or not.
  - You may need to standardize the formats using string functions like `REPLACE` or `SUBSTR`.

- **Handling NULL Values:**

  - Some cited publications might not have IPC codes.
  - The `LEFT JOIN` ensures that all citations are included, even if the IPC code is `NULL`.

- **Performance Considerations:**

  - Joining large datasets can be resource-intensive.
  - Consider adding more filters or processing the data in smaller batches if necessary.

---

### **Conclusion:**

By restructuring your query to use CTEs and avoid using `LATERAL FLATTEN` within `JOIN` clauses that have `ON` conditions, we resolve the error and successfully calculate the required statistics for the originality score.

---

### **Final Answer in Requested Format:**

Based on the task and the calculations, the final answer would be:

```csv
Publication_Number,Originality_Score
publication_number:str,originality_score:float
(Attention: answer in one row)
```

---

**Since specific data is not provided, placeholders `publication_number:str` and `originality_score:float` are used to represent the patent with the highest originality score calculated as specified.**

---

Feel free to replace the placeholders with actual values once you have run the query and obtained the results.

If you have any further questions or need assistance with the query, please let me know!
2025-02-12 21:33:53 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:33:53 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:33:53 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:33:54 - snowflake.connector.connection - INFO - closed
2025-02-12 21:33:54 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:34:41 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:34:41 - root - INFO - The error you're encountering is due to Snowflake's limitation regarding the use of `LATERAL FLATTEN` within `JOIN` clauses that include an `ON` condition. Specifically, Snowflake does not support using table functions like `LATERAL FLATTEN` in `JOIN`s with an `ON` predicate.

To resolve this issue, we'll restructure your query using Common Table Expressions (CTEs) to separate the flattening operations from the joins. This approach avoids the unsupported syntax and allows the query to run successfully.

Here is the corrected version of your query:

```sql
-- Corrected Query 10: Calculate total occurrences and sum of squares of occurrences for a patent's backward citations

WITH

-- Step 1: Get the backward citations for the target patent
citations AS (
    SELECT
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
    WHERE
        t."publication_number" = 'US1234567B2'   -- Replace with the actual publication number
),

-- Step 2: Get the 4-digit IPC codes for the cited publications
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc
),

-- Step 3: Join the citations with their IPC codes
citations_with_ipc AS (
    SELECT
        c."cited_publication_number",
        ci."ipc4_code"
    FROM
        citations c
        LEFT JOIN cited_ipcs ci
            ON c."cited_publication_number" = ci."cited_publication_number"
),

-- Step 4: Count occurrences of each IPC code
ipc_counts AS (
    SELECT
        "ipc4_code",
        COUNT(*) AS "occurrences"
    FROM
        citations_with_ipc
    GROUP BY
        "ipc4_code"
),

-- Step 5: Calculate total occurrences and sum of squared occurrences
calculations AS (
    SELECT
        SUM("occurrences") AS "total_occurrences",
        SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
    FROM
        ipc_counts
)

-- Step 6: Calculate the originality score
SELECT
    'US1234567B2' AS "Publication_Number",  -- Replace with actual publication number
    1 - ("sum_of_squared_occurrences"::FLOAT / POWER("total_occurrences", 2)) AS "Originality_Score"
FROM
    calculations
LIMIT 1;
```

**Explanation:**

- **Step 1 (`citations` CTE):** Retrieves the publication numbers of all backward citations for the target patent by flattening the `"citation"` array.

- **Step 2 (`cited_ipcs` CTE):** Extracts the 4-digit IPC codes for all publications by flattening the `"ipc"` array and using `SUBSTR` to get the first four characters.

- **Step 3 (`citations_with_ipc` CTE):** Joins the backward citations with their corresponding IPC codes.

- **Step 4 (`ipc_counts` CTE):** Counts the number of occurrences of each 4-digit IPC code in the backward citations.

- **Step 5 (`calculations` CTE):** Calculates the total occurrences and the sum of squared occurrences of the IPC codes.

- **Step 6 (Final `SELECT`):** Computes the originality score using the formula:

  \[
  \text{Originality Score} = 1 - \frac{\sum (\text{occurrences})^2}{(\text{total occurrences})^2}
  \]

**Note:** Replace `'US1234567B2'` with the actual publication number of the patent you're analyzing.

---

If you wish to calculate the originality score for multiple patents (e.g., all US patents with a B2 kind code and a grant date between 2015 and 2018), you can modify the query accordingly:

```sql
-- Calculate originality scores for multiple patents

WITH

-- Step 1: Get backward citations for the target patents
citations AS (
    SELECT
        t."publication_number" AS "citing_publication_number",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
    WHERE
        t."country_code" = 'US' 
        AND t."kind_code" = 'B2'
        AND t."grant_date" BETWEEN 20150101 AND 20181231
),

-- Step 2: Get the IPC codes for all publications
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc
),

-- Step 3: Join the citations with their IPC codes
citations_with_ipc AS (
    SELECT
        c."citing_publication_number",
        ci."ipc4_code"
    FROM
        citations c
        LEFT JOIN cited_ipcs ci
            ON c."cited_publication_number" = ci."cited_publication_number"
),

-- Step 4: Count occurrences of each IPC code per citing publication
ipc_counts AS (
    SELECT
        "citing_publication_number",
        "ipc4_code",
        COUNT(*) AS "occurrences"
    FROM
        citations_with_ipc
    GROUP BY
        "citing_publication_number",
        "ipc4_code"
),

-- Step 5: Calculate total occurrences and sum of squared occurrences per patent
calculations AS (
    SELECT
        "citing_publication_number" AS "Publication_Number",
        SUM("occurrences") AS "total_occurrences",
        SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
    FROM
        ipc_counts
    GROUP BY
        "citing_publication_number"
),

-- Step 6: Calculate the originality score per patent
originality_scores AS (
    SELECT
        "Publication_Number",
        1 - ("sum_of_squared_occurrences"::FLOAT / POWER("total_occurrences", 2)) AS "Originality_Score"
    FROM
        calculations
    WHERE
        "total_occurrences" > 0
)

-- Select the patent with the highest originality score
SELECT
    "Publication_Number",
    "Originality_Score"
FROM
    originality_scores
ORDER BY
    "Originality_Score" DESC
LIMIT 1;
```

This query calculates the originality scores for all US patents with a B2 kind code and a grant date between 2015 and 2018, then selects the patent with the highest originality score.

---

**Final Answer:**

Based on your request, here is the format of the answer:

```csv
Publication_Number,Originality_Score
[publication_number]:str,[originality_score]:float
(Attention: answer in one row)
```

Since we do not have the actual data, `[publication_number]:str` and `[originality_score]:float` are placeholders. After running the corrected query, you can replace these placeholders with the actual publication number and originality score of the patent that has the highest originality score.

**Note:**

- Ensure that all column names are enclosed in double quotations as required by your database schema.

- Adjust any column names or data types if they differ in your actual database.

- If you encounter any further issues or need additional assistance, please let me know!
2025-02-12 21:34:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:34:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:34:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:34:43 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-02-12 21:34:43 - snowflake.connector.connection - INFO - closed
2025-02-12 21:34:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:35:30 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:35:30 - root - INFO - SQL:
-- Corrected Query 10: Calculate total occurrences and sum of squares of occurrences for a patent's backward citations

WITH

-- Step 1: Get the backward citations for the target patent
citations AS (
    SELECT
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
    WHERE
        t."publication_number" = 'US1234567B2'   -- Replace with the actual publication number
),

-- Step 2: Get the 4-digit IPC codes for the cited publications
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc
),

-- Step 3: Join the citations with their IPC codes
citations_with_ipc AS (
    SELECT
        c."cited_publication_number",
        ci."ipc4_code"
    FROM
        citations c
        LEFT JOIN cited_ipcs ci
            ON c."cited_publication_number" = ci."cited_publication_number"
),

-- Step 4: Count occurrences of each IPC code
ipc_counts AS (
    SELECT
        "ipc4_code",
        COUNT(*) AS "occurrences"
    FROM
        citations_with_ipc
    GROUP BY
        "ipc4_code"
),

-- Step 5: Calculate total occurrences and sum of squared occurrences
calculations AS (
    SELECT
        SUM("occurrences") AS "total_occurrences",
        SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
    FROM
        ipc_counts
)

-- Step 6: Calculate the originality score
SELECT
    'US1234567B2' AS "Publication_Number",  -- Replace with actual publication number
    1 - ("sum_of_squared_occurrences"::FLOAT / POWER("total_occurrences", 2)) AS "Originality_Score"
FROM
    calculations
LIMIT 1;
Results:
Publication_Number,Originality_Score
US1234567B2,

2025-02-12 21:35:30 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:35:30 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:35:30 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:35:31 - snowflake.connector.connection - INFO - closed
2025-02-12 21:35:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:36:19 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:36:19 - root - INFO - **Understanding the Error:**

The error you're encountering with **Query 11** is due to the use of `LATERAL FLATTEN` within a `LEFT JOIN` that includes an `ON` condition, which is not supported in Snowflake. Specifically, Snowflake does not allow `LATERAL FLATTEN` (or any table function) to be used in a `JOIN` clause with an `ON` predicate.

---

**Solution:**

To resolve this issue, we can restructure the query to avoid using `LATERAL FLATTEN` within a `JOIN`. Instead, we'll use `LATERAL FLATTEN` directly in the `FROM` clause and leverage the `OUTER => TRUE` option to include records even when the `citation` field is `NULL`.

---

**Corrected Query 11:**

```sql
-- Corrected Query 11: List US patents with their backward citation counts

SELECT 
    t."publication_number", 
    COUNT(c.value) AS "citation_count"
FROM
    PATENTS.PATENTS.PUBLICATIONS t,
    LATERAL FLATTEN(OUTER => TRUE, INPUT => t."citation") c
WHERE
    t."country_code" = 'US'
    AND t."kind_code" = 'B2'
    AND t."grant_date" BETWEEN 20150101 AND 20181231
GROUP BY
    t."publication_number"
ORDER BY
    t."publication_number"
LIMIT 100;
```

**Explanation:**

- **LATERAL FLATTEN in the FROM Clause:**
  - By placing `LATERAL FLATTEN` in the `FROM` clause without a `JOIN`, we avoid the unsupported syntax.
  - The comma `,` acts as a `CROSS JOIN`, which is allowed with table functions like `FLATTEN`.

- **OUTER => TRUE:**
  - The `OUTER => TRUE` parameter ensures that even if the `citation` field is `NULL` or empty, the `FLATTEN` function still returns a row with `c.value` as `NULL`.
  - This allows us to include all patents in the result set, even those without any citations.

- **COUNT(c.value):**
  - The `COUNT` function skips `NULL` values by default. Therefore, for patents without any citations (`c.value` is `NULL`), `COUNT(c.value)` returns `0`.

- **Filtering and Grouping:**
  - We apply the filters for US patents with kind code `'B2'` and grant dates between 2015 and 2018 in the `WHERE` clause.
  - We group by the publication number to get the citation counts per patent.

---

**Query 12:**

**Note:** **Query 12** does not have any errors related to `LATERAL FLATTEN` and does not require any correction.

```sql
-- Query 12: Get the grant dates of US patents with kind code 'B2'

SELECT
    "publication_number",
    "grant_date"
FROM
    PATENTS.PATENTS.PUBLICATIONS
WHERE
    "country_code" = 'US'
    AND "kind_code" = 'B2'
ORDER BY
    "grant_date" DESC
LIMIT 100;
```

**Explanation:**

- **Simple Selection:**
  - This query selects the `publication_number` and `grant_date` of US patents with kind code `'B2'`.
  
- **Filtering:**
  - The `WHERE` clause filters for patents where `"country_code"` is `'US'` and `"kind_code"` is `'B2'`.

- **Ordering:**
  - The results are ordered by `grant_date` in descending order, showing the most recent grants first.

- **Limiting:**
  - The `LIMIT 100` clause restricts the output to the first 100 records.

---

**Summary:**

- The primary issue with **Query 11** was the use of unsupported syntax involving `LATERAL FLATTEN` in a `JOIN` with an `ON` clause.
- By restructuring **Query 11** to place `LATERAL FLATTEN` directly in the `FROM` clause and using `OUTER => TRUE`, we resolve the error and can successfully retrieve the backward citation counts for US patents.
- **Query 12** remains unchanged, as it doesn't involve `LATERAL FLATTEN` or any unsupported features.

---

**Final Notes:**

- Always ensure that when using `LATERAL FLATTEN` in Snowflake, you place it appropriately in the `FROM` clause and avoid using it within `JOIN` operations that include `ON` conditions.
- Use the `OUTER => TRUE` parameter with `FLATTEN` when you need to include all records, even those with `NULL` or empty arrays.
- Remember that `COUNT(column)` ignores `NULL` values, which is helpful when counting occurrences in such scenarios.

---

If you have any further questions or need assistance with additional queries, feel free to ask!
2025-02-12 21:36:19 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:36:19 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:36:19 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:36:20 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:36:20 - snowflake.connector.connection - INFO - closed
2025-02-12 21:36:20 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:36:43 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:36:43 - root - INFO - SQL:
-- Corrected Query 11: List US patents with their backward citation counts

SELECT 
    t."publication_number", 
    COUNT(c.value) AS "citation_count"
FROM
    PATENTS.PATENTS.PUBLICATIONS t,
    LATERAL FLATTEN(OUTER => TRUE, INPUT => t."citation") c
WHERE
    t."country_code" = 'US'
    AND t."kind_code" = 'B2'
    AND t."grant_date" BETWEEN 20150101 AND 20181231
GROUP BY
    t."publication_number"
ORDER BY
    t."publication_number"
LIMIT 100;
Results:
publication_number,citation_count
US-10001837-B2,16
US-10001873-B2,15
US-10001874-B2,29
US-10002249-B2,81
US-10003088-B2,7
US-10003189-B2,3
US-10003448-B2,21
US-10003746-B2,10
US-10003854-B2,20
US-10004643-B2,194
US-10004808-B2,335
US-10005222-B2,43
US-10005712-B2,8
US-10007151-B2,10
US-10007271-B2,8
US-10007422-B2,228
US-10007533-B2,4
US-10008517-B2,5
US-10009023-B2,10
US-10009187-B2,23
US-10010405-B2,302
US-10011088-B2,12
US-10011111-B2,18
US-10011186-B2,11
US-10011298-B2,12
US-10011351-B2,66
US-10011949-B2,13
US-10015072-B2,5
US-10015159-B2,19
US-10016318-B2,109
US-10017537-B2,37
US-10017961-B2,15
US-10018128-B2,13
US-10018547-B2,26
US-10018905-B2,6
US-10019265-B2,27
US-10019533-B2,15
US-10020351-B2,10
US-10021398-B2,7
US-10025446-B2,27
US-10025535-B2,18
US-10025922-B2,26
US-10027319-B2,10
US-10027854-B2,14
US-10030011-B2,101
US-10030942-B2,15
US-10032430-B2,31
US-10034007-B2,3
US-10034502-B2,18
US-10034624-B2,57
US-10035295-B2,9
US-10036284-B2,7
US-10036488-B2,40
US-10036966-B2,5
US-10036968-B2,16
US-10037903-B2,31
US-10038239-B2,15
US-10038578-B2,16
US-10040253-B2,3
US-10040372-B2,44
US-10040376-B2,5
US-10041312-B2,18
US-10041986-B2,4
US-10042173-B2,15
US-10042510-B2,340
US-10043096-B2,13
US-10043130-B2,15
US-10043636-B2,41
US-10045088-B2,44
US-10047052-B2,59
US-10047070-B2,7
US-10047399-B2,30
US-10048367-B2,33
US-10050055-B2,15
US-10050072-B2,7
US-10050540-B2,3
US-10051368-B2,42
US-10052433-B2,1
US-10052573-B2,17
US-10052647-B2,25
US-10054129-B2,12
US-10056339-B2,31
US-10056474-B2,15
US-10056669-B2,9
US-10056896-B2,7
US-10056901-B2,13
US-10057816-B2,55
US-10057911-B2,11
US-10058243-B2,15
US-10059001-B2,22
US-10059084-B2,770
US-10059184-B2,29
US-10059276-B2,27
US-10059943-B2,520
US-10060108-B2,14
US-10060342-B2,9
US-10060378-B2,18
US-10060611-B2,12
US-10060828-B2,10
US-10060968-B2,8

2025-02-12 21:36:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:36:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:36:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:36:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:36:44 - snowflake.connector.connection - INFO - closed
2025-02-12 21:36:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:36:45 - root - INFO - SQL:
-- Query 12: Get the grant dates of US patents with kind code 'B2'
SELECT "publication_number", "grant_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' AND "kind_code" = 'B2'
ORDER BY "grant_date" DESC
LIMIT 100;
Results:
publication_number,grant_date
US-12081063-B2,20240903
US-12081100-B2,20240903
US-12078786-B2,20240903
US-12075748-B2,20240903
US-12079297-B2,20240903
US-12080658-B2,20240903
US-12077443-B2,20240903
US-12080125-B2,20240903
US-12076662-B2,20240903
US-12079041-B2,20240903
US-12077023-B2,20240903
US-12082134-B2,20240903
US-12080565-B2,20240903
US-12071757-B2,20240827
US-12074711-B2,20240827
US-12074998-B2,20240827
US-12075603-B2,20240827
US-12072989-B2,20240827
US-12073045-B2,20240827
US-12075238-B2,20240827
US-12074325-B2,20240827
US-12070944-B2,20240827
US-12074983-B2,20240827
US-12071710-B2,20240827
US-12070075-B2,20240827
US-12071770-B2,20240827
US-12065852-B2,20240820
US-12069707-B2,20240820
US-12068178-B2,20240820
US-12068860-B2,20240820
US-12068454-B2,20240820
US-12064892-B2,20240820
US-12067154-B2,20240820
US-12066531-B2,20240820
US-12068993-B2,20240820
US-12065526-B2,20240820
US-12069968-B2,20240820
US-12066647-B2,20240820
US-12066569-B2,20240820
US-12062949-B2,20240813
US-12060865-B2,20240813
US-12061654-B2,20240813
US-12060609-B2,20240813
US-12059286-B2,20240813
US-12063116-B2,20240813
US-12057040-B2,20240806
US-12058573-B2,20240806
US-12057087-B2,20240806
US-12058446-B2,20240806
US-12054242-B2,20240806
US-12054804-B2,20240806
US-12058806-B2,20240806
US-12057843-B2,20240806
US-12058395-B2,20240806
US-12054787-B2,20240806
US-12051726-B2,20240730
US-12049179-B2,20240730
US-12050886-B2,20240730
US-12051233-B2,20240730
US-12051763-B2,20240730
US-12052372-B2,20240730
US-12050634-B2,20240730
US-12042320-B2,20240723
US-12043408-B2,20240723
US-12042253-B2,20240723
US-12044867-B2,20240723
US-12043231-B2,20240723
US-12044031-B2,20240723
US-12043351-B2,20240723
US-12044249-B2,20240723
US-12042724-B2,20240723
US-12045793-B2,20240723
US-12043453-B2,20240723
US-12043217-B2,20240723
US-12045451-B2,20240723
US-12041912-B2,20240723
US-12048239-B2,20240723
US-12037616-B2,20240716
US-12040404-B2,20240716
US-12041806-B2,20240716
US-12036154-B2,20240716
US-12041633-B2,20240716
US-12041475-B2,20240716
US-12039176-B2,20240716
US-12037691-B2,20240716
US-12037063-B2,20240716
US-12039442-B2,20240716
US-12040129-B2,20240716
US-12040334-B2,20240716
US-12036876-B2,20240716
US-12039994-B2,20240716
US-12041592-B2,20240716
US-12029781-B2,20240709
US-12033729-B2,20240709
US-12032333-B2,20240709
US-12033186-B2,20240709
US-12034347-B2,20240709
US-12033124-B2,20240709
US-12031980-B2,20240709
US-12031048-B2,20240709

2025-02-12 21:36:45 - root - INFO - itercount: 0
2025-02-12 21:36:45 - root - INFO - Database Name: PATENTS
Schema Name: PATENTS
,0
table_name,DISCLOSURES_13
description,
DDL,"create or replace TABLE DISCLOSURES_13 (
	""family_id"" VARCHAR(16777216),
	""record_id"" VARCHAR(16777216),
	""disclosure_event"" VARCHAR(16777216),
	""sso"" VARCHAR(16777216),
	""patent_owner_harmonized"" VARCHAR(16777216),
	""patent_owner_unharmonized"" VARCHAR(16777216),
	""date"" NUMBER(38,0),
	""standard"" VARCHAR(16777216),
	""committee_project"" VARCHAR(16777216),
	""tc_name"" VARCHAR(16777216),
	""sc_name"" VARCHAR(16777216),
	""wg_name"" VARCHAR(16777216),
	""licensing_commitment"" VARCHAR(16777216),
	""copyright"" VARCHAR(16777216),
	""blanket_type"" VARCHAR(16777216),
	""blanket_scope"" VARCHAR(16777216),
	""third_party"" VARCHAR(16777216),
	""reciprocity"" VARCHAR(16777216),
	""serial_cleaned"" VARCHAR(16777216),
	""pub_cleaned"" VARCHAR(16777216)
);"

Database Name: PATENTS
Schema Name: PATENTS
,1
table_name,PUBLICATIONS
description,
DDL,"create or replace TABLE PUBLICATIONS (
	""publication_number"" VARCHAR(16777216),
	""application_number"" VARCHAR(16777216),
	""country_code"" VARCHAR(16777216),
	""kind_code"" VARCHAR(16777216),
	""application_kind"" VARCHAR(16777216),
	""application_number_formatted"" VARCHAR(16777216),
	""pct_number"" VARCHAR(16777216),
	""family_id"" VARCHAR(16777216),
	""spif_publication_number"" VARCHAR(16777216),
	""spif_application_number"" VARCHAR(16777216),
	""title_localized"" VARIANT,
	""abstract_localized"" VARIANT,
	""claims_localized"" VARIANT,
	""claims_localized_html"" VARIANT,
	""description_localized"" VARIANT,
	""description_localized_html"" VARIANT,
	""publication_date"" NUMBER(38,0),
	""filing_date"" NUMBER(38,0),
	""grant_date"" NUMBER(38,0),
	""priority_date"" NUMBER(38,0),
	""priority_claim"" VARIANT,
	""inventor"" VARIANT,
	""inventor_harmonized"" VARIANT,
	""assignee"" VARIANT,
	""assignee_harmonized"" VARIANT,
	""examiner"" VARIANT,
	""uspc"" VARIANT,
	""ipc"" VARIANT,
	""cpc"" VARIANT,
	""fi"" VARIANT,
	""fterm"" VARIANT,
	""locarno"" VARIANT,
	""citation"" VARIANT,
	""parent"" VARIANT,
	""child"" VARIANT,
	""entity_status"" VARCHAR(16777216),
	""art_unit"" VARCHAR(16777216)
);"

Database Name: PATENTS
Schema Name: PATENTS
,2
table_name,CPC_DEFINITION
description,
DDL,"create or replace TABLE CPC_DEFINITION (
	""applicationReferences"" VARIANT,
	""breakdownCode"" BOOLEAN,
	""childGroups"" VARIANT,
	""children"" VARIANT,
	""dateRevised"" FLOAT,
	""definition"" VARIANT,
	""glossary"" VARIANT,
	""informativeReferences"" VARIANT,
	""ipcConcordant"" VARCHAR(16777216),
	""level"" FLOAT,
	""limitingReferences"" VARIANT,
	""notAllocatable"" BOOLEAN,
	""parents"" VARIANT,
	""precedenceLimitingReferences"" VARIANT,
	""residualReferences"" VARIANT,
	""rules"" VARIANT,
	""scopeLimitingReferences"" VARIANT,
	""status"" VARCHAR(16777216),
	""symbol"" VARCHAR(16777216),
	""synonyms"" VARIANT,
	""titleFull"" VARCHAR(16777216),
	""titlePart"" VARIANT
);"

External knowledge that might be helpful: 
### IPC Codes: Handling Main IPC Code Selection

When dealing with the `ipc` field in the `patents-public-data.patents.publications` dataset, it is important to understand the structure of this field, especially the subfield `first`. This subfield is a boolean that indicates whether a given IPC code is the main code for the publication number in question. This is crucial because each patent publication can be associated with multiple IPC codes, signifying the various aspects of the technology covered by the patent.

However, not every publication in the dataset has a designated main IPC code. This lack of a clearly identified main IPC code complicates the process of determining the most relevant IPC code for each publication, as selecting a single IPC code from multiple possibilities without clear prioritization can lead to inconsistent or skewed analyses.

This approach ensures a more consistent and representative selection of IPC codes across the dataset, facilitating more accurate and meaningful analysis of patent trends and classifications. By focusing on the most frequently occurring 4-digit IPC code, the view helps overcome the limitations posed by the absence of a designated main IPC code, thereby enhancing the reliability of patent-related studies and insights derived from this data.

Here is an example

```
SELECT 
    t1.publication_number, 
    SUBSTR(ipc_u.code, 0, 4) as ipc4, 
    COUNT(
    SUBSTR(ipc_u.code, 0, 4)
    ) as ipc4_count 
FROM 
    `patents-public-data.patents.publications` t1, 
    UNNEST(ipc) AS ipc_u 
GROUP BY 
    t1.publication_number, 
    ipc4

```



# Text Embeddings (Similarity)

Patent documents are rich with textual data. In fact, most of the information contained in a patent document is text. This includes the `abstract_localized`, `description_localized`, and `claims_localized`. Textual data can be a powerful tool to analyze and compare patent scope and content across patents. However, before being able to use textual data, it needs to be vectorized or transformed into text embeddings that can be used by machine learning models. Therefore, creating text embeddings from the textual data of patents is necessary to compare patent contents. Technically speaking, running an NLP algorithm that creates embeddings for all U.S. patents is computationally difficult.

Nevertheless, Google runs their own machine learning algorithm which transforms patent text metadata into text embeddings which they report in `patents-public-data.google_patents_research.publications` table. The textual embeddings of one patent, without any knowledge on the algorithm being used to create them, are meaningless on their own. However, the embeddings are powerful when it comes to comparing textual content of two or more patents. Embeddings can be used to calculate a similarity score between any two patents. This similarity score is calculated by applying the dot product of the embeddings vector of the patents, as shown below:

The similarity \( \text{Similarty}_{i,k} \) between two patents \( i \) and \( k \) is calculated as the dot product of their embedding vectors:

\[
\text{Similarty}_{i,k} = \mathbf{v}_i \cdot \mathbf{v}_k
\]

where

\[
\mathbf{v}_i = [v_{i1}, v_{i2}, v_{i3}, \ldots, v_{iN}]
\]
and
\[
\mathbf{v}_k = [v_{k1}, v_{k2}, v_{k3}, \ldots, v_{kN}]
\]

are the embedding vectors for patents \( i \) and \( k \) respectively. The higher the dot product, the more similar the patents.





# Originality (Trajtenberg)

One of the most important measures of a patent is "basicness". The aspects of basicness are tough to measure. Nevertheless, some literature finds that important aspects of these measures are embodied in the relationship between the invention and the technological predcessors and successors it is connected to through, for example, patent citations. We can thus use patent citations to construct measures that identify basicness and appropriability. Trajtenberg et al. 1997 provide a number of these measures. They distinguish between:

1. Forward-looking measures: measures that are derived from the relationship between an invention and subsequent technologies that build upon it. These measures are thus constructed from the forward citations. One example of a forward-looking basicness measure they provide is Generality, which is calculated as:

\[
\text{GENERALITY}_i = 1 - \sum_{k=1}^{N_i} \left( \frac{\text{NCITING}_{G_k}}{\text{NCITING}_i} \right)
\]


2. Backward-looking measures: measures that are derived from the relationship between a given patent and the body of knowledge that preceded it. These measure are thus constructed from the backward citations. One example of a backward-looking basicness measure they provide is Orginality, which is calculated as:

\[
\text{ORIGINALITY}_i = 1 - \sum_{k=1}^{N_i} \left( \frac{\text{NCITED}_{i,k}}{\text{NCITED}_i} \right)
\]

With **NCITING** and **NCITED** defined as the number of patents citing the focal patent and the number of patents cited by the focal patent, respectively. Index `i` corresponds to the focal patent considered, and `k` is the index of patent classes. For example, **NCITED_2,3** refers to the number of patents in patent class 3 and cited by our focal patent 2.


The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTS': {'PATENTS': ['DISCLOSURES_13', 'PUBLICATIONS', 'CPC_DEFINITION']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

- **Table:** `PATENTS.PATENTS.PUBLICATIONS`
  - `"publication_number"`: To identify each patent uniquely.
  - `"kind_code"`: To filter patents with kind code 'B2'.
  - `"country_code"`: To filter for US patents.
  - `"grant_date"`: To select patents granted between 2015 and 2018.
  - `"ipc"`: To retrieve IPC codes of each patent.
  - `"citation"`: To access backward citations of each patent.

**Conditions that may be used:**

- `"country_code" = 'US'`
- `"kind_code" = 'B2'`
- `"grant_date"` between `20150101` and `20181231` (assuming the date format is YYYYMMDD)

**SQL Queries:**

```sql
-- Query 1: Select distinct publication numbers
SELECT DISTINCT "publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 100;
```

```sql
-- Query 2: Retrieve publication numbers and kind codes
SELECT "publication_number", "kind_code"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 100;
```

```sql
-- Query 3: Filter US patents with kind code 'B2'
SELECT "publication_number", "kind_code", "country_code"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' AND "kind_code" = 'B2'
LIMIT 100;
```

```sql
-- Query 4: Select patents granted between 2015 and 2018
SELECT "publication_number", "grant_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "grant_date" BETWEEN 20150101 AND 20181231
LIMIT 100;
```

```sql
-- Query 5: Get IPC codes for each patent
SELECT t."publication_number", ipc_u.value::VARIANT:"code"::STRING AS "ipc_code"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."ipc") ipc_u
LIMIT 100;
```

```sql
-- Query 6: Retrieve backward citations for each patent
SELECT t."publication_number", c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") c
LIMIT 100;
```

```sql
-- Query 7: Get IPC codes of backward citations
SELECT 
    t."publication_number" AS "citing_publication", 
    c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number", 
    ipc_u.value::VARIANT:"code"::STRING AS "ipc_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
LIMIT 100;
```

```sql
-- Query 8: Extract 4-digit IPC codes from backward citations
SELECT 
    t."publication_number" AS "citing_publication", 
    SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
LIMIT 100;
```

```sql
-- Query 9: Count occurrences of each 4-digit IPC code in backward citations
SELECT 
    "ipc4_code", 
    COUNT(*) AS "occurrences"
FROM (
    SELECT 
        SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM PATENTS.PATENTS.PUBLICATIONS t
    INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
    LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
    INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
    WHERE t."publication_number" = 'US1234567B2'   -- Replace with actual publication number
)
GROUP BY "ipc4_code"
LIMIT 100;
```

```sql
-- Query 10: Calculate total occurrences and sum of squares of occurrences for a patent's backward citations
SELECT 
    SUM("occurrences") AS "total_occurrences", 
    SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
FROM (
    SELECT 
        "ipc4_code", 
        COUNT(*) AS "occurrences"
    FROM (
        SELECT 
            SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
        FROM PATENTS.PATENTS.PUBLICATIONS t
        INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
        LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
        INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
        WHERE t."publication_number" = 'US1234567B2'   -- Replace with actual publication number
    )
    GROUP BY "ipc4_code"
)
LIMIT 100;
```

```sql
-- Query 11: List US patents with their backward citation counts
SELECT 
    t."publication_number", 
    COUNT(c.value) AS "citation_count"
FROM PATENTS.PATENTS.PUBLICATIONS t
LEFT JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
WHERE t."country_code" = 'US' AND t."kind_code" = 'B2' AND t."grant_date" BETWEEN 20150101 AND 20181231
GROUP BY t."publication_number"
LIMIT 100;
```

```sql
-- Query 12: Get the grant dates of US patents with kind code 'B2'
SELECT "publication_number", "grant_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' AND "kind_code" = 'B2'
ORDER BY "grant_date" DESC
LIMIT 100;
```Query:
-- Query 1: Select distinct publication numbers
SELECT DISTINCT "publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 100;
Answer:
publication_number
CN-214278490-U
CN-214710653-U
CN-214750133-U
US-2257467-A
US-2762696-A
US-3127183-A
CN-214592184-U
CN-214376014-U
CN-214586427-U
CN-215805899-U
US-2017244772-A1
US-2019367306-A1
US-2020022931-A1
US-2021023882-A1
US-2020250718-A1
US-2020032872-A1
JP-5743884-B2
JP-6098445-B2
JP-6155019-B2
JP-6197435-B2
JP-5937623-B2
JP-6035285-B2
JP-6390273-B2
JP-6459475-B2
JP-6388064-B2
US-9365566-B2
US-10279406-B2
US-7883996-B2
US-9319157-B2
US-10344321-B2
US-10587921-B2
US-10604965-B2
US-2006103920-A1
US-2006122383-A1
US-2006258976-A1
US-2007127197-A1
US-2007190489-A1
US-2008219893-A1
US-2008305610-A1
US-2018211505-A1
US-2021064298-A1
US-2018271636-A1
US-10170049-B2
US-10381417-B2
IT-MI910192-A1
IT-PR990091-A1
US-2010033313-A1
US-2010042129-A1
US-2015180461-A1
US-2017139650-A1
US-2018269548-A1
EP-4358306-A1
EP-0498078-A1
US-2009023835-A1
US-2007226566-A1
US-2005161955-A1
US-2006242322-A1
US-2006292604-A1
US-2022181735-A1
US-2023405472-A1
US-11388673-B2
RU-2129232-C1
DK-0912092-T3
DE-29815280-U1
TR-201809701-T4
DE-20004304-U1
RU-170537-U1
DE-202019106717-U1
JP-S423140-Y1
IT-NO20130003-U1
RU-57903-U1
DE-202010002487-U1
IT-MI940161-V0
AR-081094-A1
IT-7829460-A0
US-2006145716-A1
US-2008108669-A1
US-2007288998-A1
US-2006194139-A1
US-2007049494-A1
US-2008214344-A1
US-2010032526-A1
US-2010094971-A1
US-2010150999-A1
US-2020353721-A1
US-2022074897-A1
US-2006148840-A1
US-2006154349-A1
US-2005274685-A1
US-2006057691-A1
US-2005257752-A1
US-2005272413-A1
US-2006257201-A1
US-2022108830-A1
US-2023156849-A1
US-2022084131-A1
US-2023082924-A1
US-2023262091-A1
US-2023072046-A1
GB-928613-A
Query:
-- Query 2: Retrieve publication numbers and kind codes
SELECT "publication_number", "kind_code"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 100;
Answer:
publication_number,kind_code
CR-5634-A,A
CR-5990-A,A
FI-429-A,A
HK-6083-A,A
HU-T52763-A,A
JP-H03206829-A,A
JP-S62159089-A,A
US-416-A,A
US-2528225-A,A
AT-A41580-A,A
AT-A47682-A,A
AT-A63682-A,A
CA-920790-A,A
CA-950907-A,A
CA-920830-A,A
CA-9086-A,A
CH-3256-A,A
CH-540255-A,A
CH-433637-A,A
CH-8494-A,A
CH-9587-A,A
CH-9968-A,A
DD-8297-A,A
FR-1334211-A,A
FR-1444995-A,A
FR-1474468-A,A
FR-1478988-A,A
FR-1485992-A,A
FR-1487706-A,A
FR-1508237-A,A
GB-893001-A,A
GB-873984-A,A
GB-307790-A,A
GB-534192-A,A
HK-39487-A,A
HK-52284-A,A
HK-55992-A,A
HK-60178-A,A
HK-82486-A,A
HU-T58725-A,A
JP-S62157892-A,A
JP-H06198910-A,A
MA-42286-A,A
OA-07542-A,A
OA-08399-A,A
PH-11723-A,A
PH-15213-A,A
PH-17928-A,A
PH-23905-A,A
TR-26506-A,A
US-4613-A,A
US-4234270-A,A
US-6310-A,A
US-8947-A,A
YU-24971-A,A
YU-51397-A,A
YU-53588-A,A
YU-94082-A,A
AT-A134275-A,A
AT-A160683-A,A
AT-A168281-A,A
AT-A179178-A,A
AT-A196182-A,A
AT-A202882-A,A
AT-A205780-A,A
AT-A245590-A,A
AT-A250686-A,A
AT-A269985-A,A
AT-A272073-A,A
AT-A312885-A,A
AT-A404675-A,A
AT-A482077-A,A
AT-A519575-A,A
AT-A710279-A,A
AT-A735378-A,A
AT-A876472-A,A
AT-A906278-A,A
BE-804534-A,A
BE-806687-A,A
BE-813367-A,A
BE-823416-A,A
BE-825816-A,A
BE-833811-A,A
BE-837312-A,A
BE-837857-A,A
BE-840231-A,A
BE-848755-A,A
BE-852837-A,A
BE-853553-A,A
BE-857395-A,A
BE-861199-A,A
BE-866723-A,A
BE-868080-A,A
BE-868938-A,A
BE-869056-A,A
BE-871421-A,A
BE-873394-A,A
BE-877768-A,A
BE-885287-A,A
BE-509322-A,A
Query:
-- Query 3: Filter US patents with kind code 'B2'
SELECT "publication_number", "kind_code", "country_code"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' AND "kind_code" = 'B2'
LIMIT 100;
Answer:
publication_number,kind_code,country_code
US-8857551-B2,B2,US
US-9370027-B2,B2,US
US-9042351-B2,B2,US
US-10561638-B2,B2,US
US-8962445-B2,B2,US
US-9270639-B2,B2,US
US-8938152-B2,B2,US
US-9389656-B2,B2,US
US-9482287-B2,B2,US
US-9386020-B2,B2,US
US-10142276-B2,B2,US
US-9216545-B2,B2,US
US-9548844-B2,B2,US
US-9111730-B2,B2,US
US-9340798-B2,B2,US
US-10324723-B2,B2,US
US-9190745-B2,B2,US
US-9380603-B2,B2,US
US-9650743-B2,B2,US
US-10140934-B2,B2,US
US-9556907-B2,B2,US
US-9567200-B2,B2,US
US-10722723-B2,B2,US
US-9188941-B2,B2,US
US-9048861-B2,B2,US
US-9460689-B2,B2,US
US-9318050-B2,B2,US
US-10533556-B2,B2,US
US-9520094-B2,B2,US
US-9412846-B2,B2,US
US-10070142-B2,B2,US
US-9585927-B2,B2,US
US-9415120-B2,B2,US
US-10533291-B2,B2,US
US-9329543-B2,B2,US
US-10487804-B2,B2,US
US-9502685-B2,B2,US
US-9434993-B2,B2,US
US-10120886-B2,B2,US
US-9343259-B2,B2,US
US-10025922-B2,B2,US
US-10093135-B2,B2,US
US-11058417-B2,B2,US
US-10791626-B2,B2,US
US-10040253-B2,B2,US
US-10268050-B2,B2,US
US-9595167-B2,B2,US
US-9425382-B2,B2,US
US-10292858-B2,B2,US
US-10439992-B2,B2,US
US-10463632-B2,B2,US
US-10040372-B2,B2,US
US-11043142-B2,B2,US
US-10096317-B2,B2,US
US-10620487-B2,B2,US
US-9616746-B2,B2,US
US-10132013-B2,B2,US
US-10075410-B2,B2,US
US-11055623-B2,B2,US
US-10501667-B2,B2,US
US-10614930-B2,B2,US
US-11100138-B2,B2,US
US-10294485-B2,B2,US
US-10420148-B2,B2,US
US-10192648-B2,B2,US
US-10799929-B2,B2,US
US-10132055-B2,B2,US
US-10306558-B2,B2,US
US-10266255-B2,B2,US
US-11229607-B2,B2,US
US-11099445-B2,B2,US
US-10918669-B2,B2,US
US-10104056-B2,B2,US
US-10170592-B2,B2,US
US-10949373-B2,B2,US
US-10637868-B2,B2,US
US-10828230-B2,B2,US
US-10612778-B2,B2,US
US-10891534-B2,B2,US
US-10827186-B2,B2,US
US-10798073-B2,B2,US
US-10574908-B2,B2,US
US-10199059-B2,B2,US
US-10178137-B2,B2,US
US-10377792-B2,B2,US
US-10141686-B2,B2,US
US-11154290-B2,B2,US
US-10891268-B2,B2,US
US-10141468-B2,B2,US
US-10941196-B2,B2,US
US-10543714-B2,B2,US
US-10513055-B2,B2,US
US-10968393-B2,B2,US
US-10630153-B2,B2,US
US-10418599-B2,B2,US
US-10128451-B2,B2,US
US-10150865-B2,B2,US
US-10483008-B2,B2,US
US-10619236-B2,B2,US
US-10634183-B2,B2,US
Query:
-- Query 4: Select patents granted between 2015 and 2018
SELECT "publication_number", "grant_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "grant_date" BETWEEN 20150101 AND 20181231
LIMIT 100;
Answer:
publication_number,grant_date
DE-102015114819-B3,20161222
DE-10037981-B4,20171019
DE-10202757-B4,20170511
DE-102005043635-B4,20170706
DE-102007006148-B4,20150226
DE-102007008531-B4,20170629
DE-102009031285-B4,20161103
DE-102012211931-B4,20161027
DE-102013012450-B4,20161027
DE-102013226547-B4,20151001
DE-112006001900-B4,20161215
DE-112008000670-B4,20170112
DE-112008002242-B4,20160114
EP-2716955-B8,20180307
EP-2775267-B8,20180905
AU-2010263654-C1,20151001
RU-2542001-C1,20150220
RU-2570026-C1,20151210
RU-2567410-C1,20151110
RU-2570084-C1,20151210
RU-2604500-C1,20161210
RU-2613571-C1,20170317
RU-2622238-C1,20170613
RU-2634137-C1,20171024
RU-2625675-C1,20170718
RU-2640439-C1,20180109
RU-2666493-C1,20180907
RU-2660243-C1,20180705
RU-2565248-C2,20151020
RU-2549551-C2,20150427
RU-2562017-C2,20150910
RU-2545266-C2,20150327
RU-2547889-C2,20150410
RU-2569826-C2,20151127
RU-2606625-C2,20170110
RU-2653463-C2,20180508
DK-2501437-T3,20160801
DK-3050571-T3,20180606
ES-2541116-T3,20150716
ES-2617329-T3,20170616
ES-2668886-T3,20180522
ES-2568433-T3,20160429
ES-2687849-T3,20181029
RU-154299-U1,20150820
RU-165888-U1,20161110
RU-177928-U1,20180316
RU-181409-U1,20180712
RU-184905-U1,20181114
DE-102017115172-B3,20180809
DE-102017201224-B3,20180621
DE-102017206019-B3,20180920
DE-10222672-B4,20160121
DE-10326741-B4,20170727
DE-102007030139-B4,20160128
DE-102009029783-B4,20160204
DE-102009050279-B4,20171214
DE-102010051323-B4,20160728
DE-102010061295-B4,20171123
DE-102012107210-B4,20150917
DE-102012201873-B4,20160310
DE-102014008656-B4,20170511
DE-102014101047-B4,20181220
DE-102014115437-B4,20160602
DE-102015200030-B4,20160324
EP-2114996-B8,20150610
CN-107501258-B8,20181016
RU-2542273-C1,20150220
RU-2562075-C1,20150910
RU-2600220-C1,20161020
RU-2607925-C1,20170111
RU-2672118-C1,20181112
RU-2670228-C1,20181019
RU-2541390-C2,20150210
RU-2599250-C2,20161010
RU-2606335-C2,20170110
RU-2622921-C2,20170621
DK-2194066-T3,20160502
DK-2571998-T3,20170925
DK-2691942-T3,20180723
DK-2670481-T3,20150615
ES-2592287-T3,20161129
ES-2675070-T3,20180706
ES-2630227-T3,20170818
ES-2617533-T3,20170619
ES-2633243-T3,20170920
DK-2220030-T3,20160411
ES-2567952-T3,20160426
ES-2627442-T3,20170728
ES-2536301-T3,20150522
ES-2666493-T3,20180504
ES-2607105-T3,20170329
RU-151296-U1,20150327
RU-172423-U1,20170707
RU-180239-U1,20180606
RU-182070-U1,20180802
CN-205850665-U8,20170322
KR-200486986-Y1,20180827
KR-200478529-Y1,20151016
KR-200477602-Y1,20150702
KR-200482765-Y1,20170303
Query:
-- Query 5: Get IPC codes for each patent
SELECT t."publication_number", ipc_u.value::VARIANT:"code"::STRING AS "ipc_code"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."ipc") ipc_u
LIMIT 100;
Answer:
publication_number,ipc_code
US-2020372460-A1,H04L9/08
US-2020372460-A1,H04L9/32
US-2020372460-A1,G06Q10/08
US-2020372460-A1,G08G1/00
US-2020377325-A1,B65H31/20
US-2020377325-A1,B65H5/36
US-2020377325-A1,B65H1/04
US-2020377325-A1,B41J11/00
US-2021265514-A1,H01L27/146
US-2021265514-A1,H01L31/0216
US-2021265514-A1,G01J1/42
US-2021265514-A1,H01L31/0236
US-2021265514-A1,G01J1/04
US-2021064907-A1,G06K9/46
US-2021064907-A1,G06K9/62
US-2021064907-A1,G06K9/44
US-2020399226-A1,C07D403/06
US-2020399226-A1,C07D413/12
US-2020399226-A1,C07D405/12
US-2020399226-A1,C07D401/12
US-2020399226-A1,C07D235/02
US-2020399226-A1,C07D401/06
US-2020399226-A1,C07D403/12
US-2020399226-A1,C07D417/06
US-2020399226-A1,C07D487/04
US-2021257383-A1,H10B43/35
US-2021257383-A1,H10B43/27
US-2021257383-A1,H10B43/10
US-2020404493-A1,H04W52/02
US-2020404493-A1,H04L29/06
US-2020404493-A1,H04W76/28
US-2020404493-A1,H04W12/04
US-2020401918-A1,G06N20/00
US-2020401918-A1,G06Q30/02
US-2020401918-A1,G06F40/00
US-2020401918-A1,G06N5/04
US-2020401918-A1,G06F16/9535
US-2020401918-A1,G06F16/2457
US-2021090749-A1,G16H10/40
US-2021090749-A1,G16H40/20
US-2021090749-A1,G06N20/00
US-2021090749-A1,G16H50/70
US-2021090749-A1,G16H70/60
US-2021090749-A1,G16H50/80
US-2021090749-A1,G06N7/00
US-2021090749-A1,G16H70/40
US-2021090749-A1,G16H10/60
US-2022093492-A1,H05K1/11
US-2022093492-A1,H01L23/532
US-2022093492-A1,H01L23/538
US-2022093492-A1,H01L23/49
US-2021240288-A1,A63F9/10
US-2021240288-A1,G02F1/03
US-2021240288-A1,G06F3/044
US-2021098805-A1,H01M8/04746
US-2021098805-A1,H01M8/04029
US-2022033866-A1,C08G69/08
US-2022033866-A1,C12P13/02
US-2022090664-A1,F16H45/02
US-2022090664-A1,F16H41/28
US-2021011040-A1,G01N35/04
US-2021097835-A1,H04B17/318
US-2021097835-A1,G08B25/10
US-2021097835-A1,G08B13/24
US-2022097744-A1,B61L15/00
US-2021031929-A1,B32B27/20
US-2021031929-A1,B64D15/12
US-2021031929-A1,B32B38/00
US-2021031929-A1,B32B27/08
US-2021031929-A1,B32B27/28
US-2021031929-A1,B32B37/20
US-2021031929-A1,H05B3/18
US-2021031929-A1,C23C4/129
US-2021162946-A1,B60N2/00
US-2021162946-A1,B60R22/48
US-2021115519-A1,C12Q1/6886
US-2021115310-A1,C09J109/08
US-2021115310-A1,C09J111/02
US-2021115310-A1,C09J11/08
US-2021115310-A1,C09J5/00
US-2021255068-A1,G01N15/06
US-2021255068-A1,G01N15/02
US-2021255068-A1,G01N1/22
US-2021226449-A1,H02J3/00
US-2021226449-A1,H02J3/24
US-2021226449-A1,H02M7/537
US-2022108380-A1,G06Q30/06
US-2021072035-A1,G01C21/34
US-2021032509-A1,C09J11/08
US-2021032509-A1,C08F120/08
US-2021032509-A1,C09J11/06
US-2021032509-A1,C09J105/00
US-2021032509-A1,C08F120/06
US-2021130103-A1,B65G39/12
US-2021130103-A1,B65G21/20
US-2021030268-A1,H04M1/72403
US-2021030268-A1,H04N7/18
US-2021030268-A1,A61B3/032
US-2021030268-A1,G06T3/20
US-2021030268-A1,A61B3/00
Query:
-- Query 6: Retrieve backward citations for each patent
SELECT t."publication_number", c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") c
LIMIT 100;
Answer:
publication_number,cited_publication_number
IT-TO20100734-A1,FR-2203337-A5
IT-TO20100734-A1,WO-2010012628-A1
IT-PI20100017-A1,WO-0192361-A1
IT-PI20100017-A1,WO-03040700-A1
IT-PI20100017-A1,US-2004062854-A1
IT-TO20110369-A1,US-4109733-A
IT-TO20110369-A1,GB-2106953-A
IT-TO20110369-A1,DE-3919824-A1
IT-TO20080716-A1,JP-H05283945-A
IT-TO20080716-A1,EP-1132882-A2
IT-TO20080716-A1,US-2005264344-A1
IT-TO20080716-A1,US-2008100382-A1
IT-TO20101059-A1,GB-463048-A
IT-TO20101059-A1,US-2861836-A
IT-TO20101059-A1,GB-2113623-A
IT-TO20101059-A1,FR-2780920-A1
IT-TO20101059-A1,GB-2340459-A
IT-TO20101059-A1,EP-1454783-A1
IT-TO20101059-A1,DE-10346067-B3
IT-VR20110006-A1,US-3028689-A
IT-VR20110006-A1,DE-3643057-A1
IT-VR20110006-A1,US-5546680-A
IT-VR20110006-A1,US-2005278979-A1
IT-VE20080082-A1,GB-2248774-A
IT-VE20080082-A1,US-2005245627-A1
IT-VE20080082-A1,US-2007116775-A1
IT-RE20130072-A1,DE-3736373-C1
IT-RE20130072-A1,US-5691032-A
IT-PE20090015-A1,WO-9529657-A1
IT-PE20090015-A1,WO-9822069-A1
IT-PE20090015-A1,EP-1110529-A1
IT-PE20090015-A1,US-2001034512-A1
IT-PE20090015-A1,US-2005256496-A1
IT-PE20090015-A1,WO-2007071268-A1
IT-PE20090015-A1,EP-2025311-A1
AT-523695-A1,EP-1151914-A1
AT-523695-A1,CN-101244756-B
AT-523695-A1,CN-206317995-U
CH-701263-A1,US-3788046-A
CH-701263-A1,EP-0091673-A2
CH-701263-A1,EP-1428565-A1
CH-701263-A1,DE-202008008464-U1
ES-2129283-A1,US-3090478-A
ES-2129283-A1,US-4130194-A
ES-2129283-A1,US-4681209-A
ES-2129283-A1,US-4802571-A
ES-2129283-A1,US-4865181-A
FR-2812871-A1,EP-0582494-A1
FR-2812871-A1,DE-19940104-A1
FR-2818884-A1,DE-153266-C
FR-2818884-A1,US-2019340-A
FR-2818884-A1,US-3396882-A
FR-2828629-A1,US-4251951-A
FR-2828629-A1,GB-2162497-A
FR-2828629-A1,DE-3625674-C1
FR-2828629-A1,FR-2626146-A1
FR-2828629-A1,WO-0147346-A1
FR-2843180-A1,US-3037465-A
FR-2843180-A1,US-3040678-A
FR-2843180-A1,US-4892508-A
FR-2860321-A1,DE-19943092-A1
FR-2860321-A1,FR-2817063-A1
FR-2860321-A1,WO-02101641-A1
FR-2860321-A1,US-6575375-B1
FR-2860877-A1,US-4465974-A
FR-2860877-A1,DE-19812307-A1
FR-2860877-A1,US-2001043065-A1
FR-2864231-A1,GB-2116314-A
FR-2864231-A1,US-5433342-A
FR-2864231-A1,US-6129702-A
FR-2864231-A1,WO-02070047-A1
FR-2854596-A1,US-2513217-A
FR-2854596-A1,FR-2629172-A1
FR-2854596-A1,US-4962963-A
FR-2867220-A1,US-4439888-A
FR-2867220-A1,US-4486919-A
FR-2867220-A1,DE-29514335-U1
FR-2867220-A1,EP-0789124-A2
FR-2867220-A1,DE-20112528-U1
FR-2881382-A1,US-5755302-A
FR-2881382-A1,EP-1112885-A1
FR-2881382-A1,DE-10033424-A1
FR-2881382-A1,EP-1243788-A1
FR-2881382-A1,FR-2830305-A1
FR-2881382-A1,EP-1331126-A1
FR-2881382-A1,US-6740002-B1
FR-2891265-A1,DE-4035286-A1
FR-2895801-A1,FR-2107847-A1
FR-2895801-A1,FR-2594957-A1
FR-2895801-A1,US-5383363-A
FR-2895801-A1,US-2003079358-A1
FR-2895801-A1,WO-2005121812-A1
FR-2906173-A1,WO-9722436-A1
FR-2906173-A1,DE-19650360-A1
FR-2906173-A1,AT-411445-B
FR-2897606-A1,EP-0398851-A2
FR-2897606-A1,GB-2270299-A
FR-2897606-A1,US-5868345-A
FR-2897606-A1,US-6402085-B1
FR-2897606-A1,WO-2005020777-A1
Query:
WITH citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        ipc_u.value::VARIANT:"code"::STRING AS "ipc_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc_u
)
SELECT
    citations."citing_publication",
    citations."cited_publication_number",
    cited_ipcs."ipc_code"
FROM
    citations
    LEFT JOIN cited_ipcs
        ON citations."cited_publication_number" = cited_ipcs."cited_publication_number"
LIMIT 100;
Answer:
citing_publication,cited_publication_number,ipc_code
US-11364337-B2,US-8911410-B2,A61M37/00
US-11364337-B2,US-8911410-B2,A61M5/20
US-11364337-B2,US-8911410-B2,A61M5/32
RU-2652946-C1,US-9292737-B2,G06Q20/04
RU-2652946-C1,US-9292737-B2,G06V30/40
RU-2652946-C1,US-9292737-B2,G06V30/10
RU-2652946-C1,US-9292737-B2,G06V30/224
US-11707213-B2,US-2019320956-A1,A61B5/145
US-11707213-B2,US-2019320956-A1,A61B5/00
US-11707213-B2,US-2019320956-A1,A61B5/1473
US-11707213-B2,US-2019320956-A1,A61B5/1495
US-11707213-B2,US-2019320956-A1,A61B5/1486
CN-103687026-B,US-2012063405-A1,H04W72/04
CN-105747285-A,US-2016113806-A1,A41C1/00
CN-105747285-A,US-2016113806-A1,A41C1/12
CN-105747285-A,US-2016113806-A1,A41B9/08
CN-105747285-A,US-2016113806-A1,A41B9/16
CN-105747285-A,US-2016113806-A1,A61F5/02
US-11809128-B2,US-2021232086-A1,G03G21/16
US-11809128-B2,US-2021232086-A1,G03G21/18
US-11526650-B1,US-2016285437-A1,H03K3/037
US-11526650-B1,US-2016285437-A1,G06F1/10
US-10742288-B2,US-2016336344-A1,H01L29/10
US-10742288-B2,US-2016336344-A1,H01L23/00
US-10742288-B2,US-2016336344-A1,H04B1/44
US-10742288-B2,US-2016336344-A1,H01L29/78
US-10742288-B2,US-2016336344-A1,H01L21/84
US-10742288-B2,US-2016336344-A1,H01L21/762
US-10742288-B2,US-2016336344-A1,H01L29/06
US-10742288-B2,US-2016336344-A1,H01L29/66
US-10742288-B2,US-2016336344-A1,H01L27/12
US-10742288-B2,US-2016336344-A1,H01L21/683
US-10742288-B2,US-2016336344-A1,H01L23/528
US-10742288-B2,US-2016336344-A1,H01L23/48
US-11142867-B2,US-2015064340-A1,C23C16/458
US-11142867-B2,US-2015064340-A1,C23C16/452
US-11142867-B2,US-2015064340-A1,C23C16/52
US-11142867-B2,US-2015064340-A1,C23C16/02
US-11142867-B2,US-2015064340-A1,C23C16/50
US-11142867-B2,US-2015064340-A1,C23C16/44
US-2021239174-A1,US-2265629-A,G01G23/00
US-10825295-B2,US-2016217532-A1,G06Q40/08
US-10825295-B2,US-2016217532-A1,G06Q30/02
US-2022182297-A1,US-2019213089-A1,G06F11/14
US-2022182297-A1,US-2019213089-A1,G06F16/22
US-11036621-B2,US-2018275986-A1,G06F9/44
US-11036621-B2,US-2018275986-A1,G06F11/36
US-11036621-B2,US-2018275986-A1,G06F9/445
US-2021203720-A1,US-2020314052-A1,H04L12/861
US-2021203720-A1,US-2020314052-A1,H04L12/58
US-2021203720-A1,US-2020314052-A1,G06N3/08
US-11221682-B2,US-2016054804-A1,G06F3/01
US-11416109-B2,US-9348862-B2,G06F17/30
US-11222142-B2,US-9348862-B2,G06F17/30
US-2861624-A,US-2674300-A,B64D11/06
US-10873456-B1,US-2020110821-A1,H04L9/06
US-2021226710-A1,US-2021218589-A1,G06T7/70
US-2021226710-A1,US-2021218589-A1,H04L12/18
US-2021226710-A1,US-2021218589-A1,G06T3/00
US-2021226710-A1,US-2021218589-A1,H04N7/14
US-2021226710-A1,US-2021218589-A1,G06T5/00
WO-2022104689-A1,US-2019356546-A1,H04L12/24
WO-2022104689-A1,US-2019356546-A1,H04W72/04
WO-2022104689-A1,US-2019356546-A1,H04L1/18
WO-2022104689-A1,US-2019356546-A1,H04L12/947
US-2024161115-A1,US-2019287183-A1,G06Q40/00
US-2024161115-A1,US-2019287183-A1,G06F17/27
US-2024161115-A1,US-2019287183-A1,G06F7/08
US-10733748-B2,US-9355294-B2,G06K7/10
US-11257143-B2,US-9355294-B2,G06K7/10
US-10733748-B2,US-9355294-B2,G06K5/04
US-11257143-B2,US-9355294-B2,G06K5/04
US-10733748-B2,US-9355294-B2,G06K7/14
US-11257143-B2,US-9355294-B2,G06K7/14
US-10733748-B2,US-9355294-B2,G06K7/00
US-11257143-B2,US-9355294-B2,G06K7/00
US-10872544-B2,US-2020175661-A1,G06T5/00
US-10872544-B2,US-2020175661-A1,G06T3/40
US-10872544-B2,US-2020175661-A1,G06T1/20
US-10872544-B2,US-2020175661-A1,G06T1/00
US-10872544-B2,US-2020175661-A1,H04M1/02
CN-113911605-A,US-2019073627-A1,G06N3/08
CN-113911605-A,US-2019073627-A1,G06K7/10
CN-113911605-A,US-2019073627-A1,G06Q10/08
US-10420148-B2,US-2017079071-A1,H04W74/08
US-3742188-A,US-3597708-A,H01P1/26
US-4516088-A,US-3597708-A,H01P1/26
WO-2019174918-A1,EP-2322385-A1,C09J7/21
WO-2019174918-A1,EP-2322385-A1,B60R16/02
US-11416109-B2,US-10657469-B2,G06Q10/00
US-11416109-B2,US-10657469-B2,G06Q10/06
US-2018209348-A1,US-10473033-B2,G01N15/10
US-2018209348-A1,US-10473033-B2,F16N29/04
US-2018209348-A1,US-10473033-B2,F02C7/266
US-2018209348-A1,US-10473033-B2,B03C1/28
US-2018209348-A1,US-10473033-B2,F01D25/18
WO-2023129897-A1,US-2019266493-A1,G06N3/12
WO-2023129897-A1,US-2019266493-A1,G06N3/08
US-11207310-B2,US-2019030016-A1,G01N30/88
US-11207310-B2,US-2019030016-A1,C07D211/24
Query:
SELECT 
    t."publication_number" AS "citing_publication", 
    SUBSTR(ipc_u.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
LIMIT 100;
Answer:
000002 (0A000): 01ba59eb-0004-9c22-0001-11c30114478e: Unsupported feature 'lateral table function called with OUTER JOIN syntax or a join predicate (ON clause)'.Query:
INNER JOIN LATERAL FLATTEN(input => t."citation") c ON TRUE
LEFT JOIN PATENTS.PATENTS.PUBLICATIONS cp ON cp."publication_number" = c.value::VARIANT:"publication_number"::STRING
INNER JOIN LATERAL FLATTEN(input => cp."ipc") ipc_u ON TRUE
Answer:
001003 (42000): 01ba59ed-0004-9c12-0001-11c3011457c2: SQL compilation error:
syntax error line 1 at position 0 unexpected 'INNER'.Query:
-- Corrected Query 10: Calculate total occurrences and sum of squares of occurrences for a patent's backward citations

WITH

-- Step 1: Get the backward citations for the target patent
citations AS (
    SELECT
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t,
        LATERAL FLATTEN(input => t."citation") c
    WHERE
        t."publication_number" = 'US1234567B2'   -- Replace with the actual publication number
),

-- Step 2: Get the 4-digit IPC codes for the cited publications
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM
        PATENTS.PATENTS.PUBLICATIONS cp,
        LATERAL FLATTEN(input => cp."ipc") ipc
),

-- Step 3: Join the citations with their IPC codes
citations_with_ipc AS (
    SELECT
        c."cited_publication_number",
        ci."ipc4_code"
    FROM
        citations c
        LEFT JOIN cited_ipcs ci
            ON c."cited_publication_number" = ci."cited_publication_number"
),

-- Step 4: Count occurrences of each IPC code
ipc_counts AS (
    SELECT
        "ipc4_code",
        COUNT(*) AS "occurrences"
    FROM
        citations_with_ipc
    GROUP BY
        "ipc4_code"
),

-- Step 5: Calculate total occurrences and sum of squared occurrences
calculations AS (
    SELECT
        SUM("occurrences") AS "total_occurrences",
        SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
    FROM
        ipc_counts
)

-- Step 6: Calculate the originality score
SELECT
    'US1234567B2' AS "Publication_Number",  -- Replace with actual publication number
    1 - ("sum_of_squared_occurrences"::FLOAT / POWER("total_occurrences", 2)) AS "Originality_Score"
FROM
    calculations
LIMIT 1;
Answer:
Publication_Number,Originality_Score
US1234567B2,
Query:
-- Corrected Query 11: List US patents with their backward citation counts

SELECT 
    t."publication_number", 
    COUNT(c.value) AS "citation_count"
FROM
    PATENTS.PATENTS.PUBLICATIONS t,
    LATERAL FLATTEN(OUTER => TRUE, INPUT => t."citation") c
WHERE
    t."country_code" = 'US'
    AND t."kind_code" = 'B2'
    AND t."grant_date" BETWEEN 20150101 AND 20181231
GROUP BY
    t."publication_number"
ORDER BY
    t."publication_number"
LIMIT 100;
Answer:
publication_number,citation_count
US-10001837-B2,16
US-10001873-B2,15
US-10001874-B2,29
US-10002249-B2,81
US-10003088-B2,7
US-10003189-B2,3
US-10003448-B2,21
US-10003746-B2,10
US-10003854-B2,20
US-10004643-B2,194
US-10004808-B2,335
US-10005222-B2,43
US-10005712-B2,8
US-10007151-B2,10
US-10007271-B2,8
US-10007422-B2,228
US-10007533-B2,4
US-10008517-B2,5
US-10009023-B2,10
US-10009187-B2,23
US-10010405-B2,302
US-10011088-B2,12
US-10011111-B2,18
US-10011186-B2,11
US-10011298-B2,12
US-10011351-B2,66
US-10011949-B2,13
US-10015072-B2,5
US-10015159-B2,19
US-10016318-B2,109
US-10017537-B2,37
US-10017961-B2,15
US-10018128-B2,13
US-10018547-B2,26
US-10018905-B2,6
US-10019265-B2,27
US-10019533-B2,15
US-10020351-B2,10
US-10021398-B2,7
US-10025446-B2,27
US-10025535-B2,18
US-10025922-B2,26
US-10027319-B2,10
US-10027854-B2,14
US-10030011-B2,101
US-10030942-B2,15
US-10032430-B2,31
US-10034007-B2,3
US-10034502-B2,18
US-10034624-B2,57
US-10035295-B2,9
US-10036284-B2,7
US-10036488-B2,40
US-10036966-B2,5
US-10036968-B2,16
US-10037903-B2,31
US-10038239-B2,15
US-10038578-B2,16
US-10040253-B2,3
US-10040372-B2,44
US-10040376-B2,5
US-10041312-B2,18
US-10041986-B2,4
US-10042173-B2,15
US-10042510-B2,340
US-10043096-B2,13
US-10043130-B2,15
US-10043636-B2,41
US-10045088-B2,44
US-10047052-B2,59
US-10047070-B2,7
US-10047399-B2,30
US-10048367-B2,33
US-10050055-B2,15
US-10050072-B2,7
US-10050540-B2,3
US-10051368-B2,42
US-10052433-B2,1
US-10052573-B2,17
US-10052647-B2,25
US-10054129-B2,12
US-10056339-B2,31
US-10056474-B2,15
US-10056669-B2,9
US-10056896-B2,7
US-10056901-B2,13
US-10057816-B2,55
US-10057911-B2,11
US-10058243-B2,15
US-10059001-B2,22
US-10059084-B2,770
US-10059184-B2,29
US-10059276-B2,27
US-10059943-B2,520
US-10060108-B2,14
US-10060342-B2,9
US-10060378-B2,18
US-10060611-B2,12
US-10060828-B2,10
US-10060968-B2,8
Query:
-- Query 12: Get the grant dates of US patents with kind code 'B2'
SELECT "publication_number", "grant_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' AND "kind_code" = 'B2'
ORDER BY "grant_date" DESC
LIMIT 100;
Answer:
publication_number,grant_date
US-12081063-B2,20240903
US-12081100-B2,20240903
US-12078786-B2,20240903
US-12075748-B2,20240903
US-12079297-B2,20240903
US-12080658-B2,20240903
US-12077443-B2,20240903
US-12080125-B2,20240903
US-12076662-B2,20240903
US-12079041-B2,20240903
US-12077023-B2,20240903
US-12082134-B2,20240903
US-12080565-B2,20240903
US-12071757-B2,20240827
US-12074711-B2,20240827
US-12074998-B2,20240827
US-12075603-B2,20240827
US-12072989-B2,20240827
US-12073045-B2,20240827
US-12075238-B2,20240827
US-12074325-B2,20240827
US-12070944-B2,20240827
US-12074983-B2,20240827
US-12071710-B2,20240827
US-12070075-B2,20240827
US-12071770-B2,20240827
US-12065852-B2,20240820
US-12069707-B2,20240820
US-12068178-B2,20240820
US-12068860-B2,20240820
US-12068454-B2,20240820
US-12064892-B2,20240820
US-12067154-B2,20240820
US-12066531-B2,20240820
US-12068993-B2,20240820
US-12065526-B2,20240820
US-12069968-B2,20240820
US-12066647-B2,20240820
US-12066569-B2,20240820
US-12062949-B2,20240813
US-12060865-B2,20240813
US-12061654-B2,20240813
US-12060609-B2,20240813
US-12059286-B2,20240813
US-12063116-B2,20240813
US-12057040-B2,20240806
US-12058573-B2,20240806
US-12057087-B2,20240806
US-12058446-B2,20240806
US-12054242-B2,20240806
US-12054804-B2,20240806
US-12058806-B2,20240806
US-12057843-B2,20240806
US-12058395-B2,20240806
US-12054787-B2,20240806
US-12051726-B2,20240730
US-12049179-B2,20240730
US-12050886-B2,20240730
US-12051233-B2,20240730
US-12051763-B2,20240730
US-12052372-B2,20240730
US-12050634-B2,20240730
US-12042320-B2,20240723
US-12043408-B2,20240723
US-12042253-B2,20240723
US-12044867-B2,20240723
US-12043231-B2,20240723
US-12044031-B2,20240723
US-12043351-B2,20240723
US-12044249-B2,20240723
US-12042724-B2,20240723
US-12045793-B2,20240723
US-12043453-B2,20240723
US-12043217-B2,20240723
US-12045451-B2,20240723
US-12041912-B2,20240723
US-12048239-B2,20240723
US-12037616-B2,20240716
US-12040404-B2,20240716
US-12041806-B2,20240716
US-12036154-B2,20240716
US-12041633-B2,20240716
US-12041475-B2,20240716
US-12039176-B2,20240716
US-12037691-B2,20240716
US-12037063-B2,20240716
US-12039442-B2,20240716
US-12040129-B2,20240716
US-12040334-B2,20240716
US-12036876-B2,20240716
US-12039994-B2,20240716
US-12041592-B2,20240716
US-12029781-B2,20240709
US-12033729-B2,20240709
US-12032333-B2,20240709
US-12033186-B2,20240709
US-12034347-B2,20240709
US-12033124-B2,20240709
US-12031980-B2,20240709
US-12031048-B2,20240709
End Exploring Related Columns
Task: Which US patent (with a B2 kind code and a grant date between 2015 and 2018) has the highest originality score calculated as 1 - (the sum of squared occurrences of distinct 4-digit IPC codes in its backward citations divided by the square of the total occurrences of these 4-digit IPC codes)?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
Publication_Number,Originality_Score
patent_number:str,score:float
(Attention: answer in one row)
```

The above table represents the US patent with a B2 kind code and a grant date between 2015 and 2018 that has the highest originality score, calculated as \( 1 - \frac{\sum (\text{occurrences of each 4-digit IPC code})^2}{(\text{total occurrences of 4-digit IPC codes})^2} \). Since specific data is not provided, placeholders for the publication number and originality score are used..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTS': {'PATENTS': ['DISCLOSURES_13', 'PUBLICATIONS', 'CPC_DEFINITION']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-02-12 21:37:17 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:37:17 - root - INFO - ```sql
WITH us_b2_2015_2018 AS (
    SELECT t."publication_number"
    FROM PATENTS.PATENTS.PUBLICATIONS t
    WHERE t."country_code" = 'US' AND t."kind_code" = 'B2' AND t."grant_date" BETWEEN 20150101 AND 20181231
),
citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM us_b2_2015_2018 t,
    LATERAL FLATTEN(input => t."citation") c
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM PATENTS.PATENTS.PUBLICATIONS cp,
    LATERAL FLATTEN(input => cp."ipc") ipc
),
citations_with_ipc AS (
    SELECT
        c."citing_publication",
        ci."ipc4_code"
    FROM citations c
    LEFT JOIN cited_ipcs ci ON c."cited_publication_number" = ci."cited_publication_number"
),
ipc_counts AS (
    SELECT
        "citing_publication",
        "ipc4_code",
        COUNT(*) AS "occurrences"
    FROM citations_with_ipc
    WHERE "ipc4_code" IS NOT NULL
    GROUP BY "citing_publication", "ipc4_code"
),
calculations AS (
    SELECT
        "citing_publication",
        SUM("occurrences") AS "total_occurrences",
        SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
    FROM ipc_counts
    GROUP BY "citing_publication"
    HAVING SUM("occurrences") > 0
),
originality AS (
    SELECT
        "citing_publication",
        (1 - ("sum_of_squared_occurrences"::FLOAT / POWER("total_occurrences", 2))) AS "Originality_Score"
    FROM calculations
)

SELECT "citing_publication" AS "Publication_Number", "Originality_Score"
FROM originality
ORDER BY "Originality_Score" DESC NULLS LAST
LIMIT 1;
```
2025-02-12 21:37:17 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:37:17 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:37:17 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:37:18 - snowflake.connector.connection - INFO - closed
2025-02-12 21:37:19 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:37:19 - root - INFO - itercount: 1
2025-02-12 21:37:19 - root - INFO - 000904 (42000): 01ba59f1-0004-9c12-0001-11c301147286: SQL compilation error: error line 11 at position 29
invalid identifier 'T."citation"'
2025-02-12 21:37:19 - root - INFO - Input sql:
WITH us_b2_2015_2018 AS (
    SELECT t."publication_number"
    FROM PATENTS.PATENTS.PUBLICATIONS t
    WHERE t."country_code" = 'US' AND t."kind_code" = 'B2' AND t."grant_date" BETWEEN 20150101 AND 20181231
),
citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM us_b2_2015_2018 t,
    LATERAL FLATTEN(input => t."citation") c
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM PATENTS.PATENTS.PUBLICATIONS cp,
    LATERAL FLATTEN(input => cp."ipc") ipc
),
citations_with_ipc AS (
    SELECT
        c."citing_publication",
        ci."ipc4_code"
    FROM citations c
    LEFT JOIN cited_ipcs ci ON c."cited_publication_number" = ci."cited_publication_number"
),
ipc_counts AS (
    SELECT
        "citing_publication",
        "ipc4_code",
        COUNT(*) AS "occurrences"
    FROM citations_with_ipc
    WHERE "ipc4_code" IS NOT NULL
    GROUP BY "citing_publication", "ipc4_code"
),
calculations AS (
    SELECT
        "citing_publication",
        SUM("occurrences") AS "total_occurrences",
        SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
    FROM ipc_counts
    GROUP BY "citing_publication"
    HAVING SUM("occurrences") > 0
),
originality AS (
    SELECT
        "citing_publication",
        (1 - ("sum_of_squared_occurrences"::FLOAT / POWER("total_occurrences", 2))) AS "Originality_Score"
    FROM calculations
)

SELECT "citing_publication" AS "Publication_Number", "Originality_Score"
FROM originality
ORDER BY "Originality_Score" DESC NULLS LAST
LIMIT 1;
The error information is:
000904 (42000): 01ba59f1-0004-9c12-0001-11c301147286: SQL compilation error: error line 11 at position 29
invalid identifier 'T."citation"'
Please correct it and output only 1 complete SQL query.
2025-02-12 21:37:38 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:37:38 - root - INFO - ```sql
WITH us_b2_2015_2018 AS (
    SELECT t."publication_number", t."citation"
    FROM PATENTS.PATENTS.PUBLICATIONS t
    WHERE t."country_code" = 'US' AND t."kind_code" = 'B2' AND t."grant_date" BETWEEN 20150101 AND 20181231
),
citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM us_b2_2015_2018 t,
    LATERAL FLATTEN(input => t."citation") c
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM PATENTS.PATENTS.PUBLICATIONS cp,
    LATERAL FLATTEN(input => cp."ipc") ipc
),
citations_with_ipc AS (
    SELECT
        c."citing_publication",
        ci."ipc4_code"
    FROM citations c
    LEFT JOIN cited_ipcs ci ON c."cited_publication_number" = ci."cited_publication_number"
),
ipc_counts AS (
    SELECT
        "citing_publication",
        "ipc4_code",
        COUNT(*) AS "occurrences"
    FROM citations_with_ipc
    WHERE "ipc4_code" IS NOT NULL
    GROUP BY "citing_publication", "ipc4_code"
),
calculations AS (
    SELECT
        "citing_publication",
        SUM("occurrences") AS "total_occurrences",
        SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
    FROM ipc_counts
    GROUP BY "citing_publication"
    HAVING SUM("occurrences") > 0
),
originality AS (
    SELECT
        "citing_publication",
        (1 - ("sum_of_squared_occurrences"::FLOAT / POWER("total_occurrences", 2))) AS "Originality_Score"
    FROM calculations
)

SELECT "citing_publication" AS "Publication_Number", "Originality_Score"
FROM originality
ORDER BY "Originality_Score" DESC NULLS LAST
LIMIT 1;
```
2025-02-12 21:37:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:37:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:37:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:37:39 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-02-12 21:37:39 - snowflake.connector.connection - INFO - closed
2025-02-12 21:37:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:37:39 - root - INFO - itercount: 2
2025-02-12 21:37:39 - root - INFO - 0
2025-02-12 21:37:39 - root - INFO - results: 
Publication_Number,Originality_Score
US-9121016-B2,0.8365650969529086


2025-02-12 21:37:39 - root - INFO - Please check the answer again by reviewing Which US patent (with a B2 kind code and a grant date between 2015 and 2018) has the highest originality score calculated as 1 - (the sum of squared occurrences of distinct 4-digit IPC codes in its backward citations divided by the square of the total occurrences of these 4-digit IPC codes)?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Publication_Number,Originality_Score
patent_number:str,score:float
(Attention: answer in one row)
```

The above table represents the US patent with a B2 kind code and a grant date between 2015 and 2018 that has the highest originality score, calculated as \( 1 - \frac{\sum (\text{occurrences of each 4-digit IPC code})^2}{(\text{total occurrences of 4-digit IPC codes})^2} \). Since specific data is not provided, placeholders for the publication number and originality score are used. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Publication_Number,Originality_Score
US-9121016-B2,0.8365650969529086
Current sql:
WITH us_b2_2015_2018 AS (
    SELECT t."publication_number", t."citation"
    FROM PATENTS.PATENTS.PUBLICATIONS t
    WHERE t."country_code" = 'US' AND t."kind_code" = 'B2' AND t."grant_date" BETWEEN 20150101 AND 20181231
),
citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM us_b2_2015_2018 t,
    LATERAL FLATTEN(input => t."citation") c
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM PATENTS.PATENTS.PUBLICATIONS cp,
    LATERAL FLATTEN(input => cp."ipc") ipc
),
citations_with_ipc AS (
    SELECT
        c."citing_publication",
        ci."ipc4_code"
    FROM citations c
    LEFT JOIN cited_ipcs ci ON c."cited_publication_number" = ci."cited_publication_number"
),
ipc_counts AS (
    SELECT
        "citing_publication",
        "ipc4_code",
        COUNT(*) AS "occurrences"
    FROM citations_with_ipc
    WHERE "ipc4_code" IS NOT NULL
    GROUP BY "citing_publication", "ipc4_code"
),
calculations AS (
    SELECT
        "citing_publication",
        SUM("occurrences") AS "total_occurrences",
        SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
    FROM ipc_counts
    GROUP BY "citing_publication"
    HAVING SUM("occurrences") > 0
),
originality AS (
    SELECT
        "citing_publication",
        (1 - ("sum_of_squared_occurrences"::FLOAT / POWER("total_occurrences", 2))) AS "Originality_Score"
    FROM calculations
)

SELECT "citing_publication" AS "Publication_Number", "Originality_Score"
FROM originality
ORDER BY "Originality_Score" DESC NULLS LAST
LIMIT 1;
2025-02-12 21:38:12 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:38:12 - root - INFO - ```sql
WITH us_b2_2015_2018 AS (
    SELECT t."publication_number", t."citation"
    FROM PATENTS.PATENTS.PUBLICATIONS t
    WHERE t."country_code" = 'US' AND t."kind_code" = 'B2' AND t."grant_date" BETWEEN 20150101 AND 20181231
),
citations AS (
    SELECT
        t."publication_number" AS "citing_publication",
        c.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM us_b2_2015_2018 t,
    LATERAL FLATTEN(input => t."citation") c
),
cited_ipcs AS (
    SELECT
        cp."publication_number" AS "cited_publication_number",
        SUBSTR(ipc.value::VARIANT:"code"::STRING, 0, 4) AS "ipc4_code"
    FROM PATENTS.PATENTS.PUBLICATIONS cp,
    LATERAL FLATTEN(input => cp."ipc") ipc
),
citations_with_ipc AS (
    SELECT
        c."citing_publication",
        ci."ipc4_code"
    FROM citations c
    LEFT JOIN cited_ipcs ci ON c."cited_publication_number" = ci."cited_publication_number"
),
ipc_counts AS (
    SELECT
        "citing_publication",
        "ipc4_code",
        COUNT(*) AS "occurrences"
    FROM citations_with_ipc
    WHERE "ipc4_code" IS NOT NULL
    GROUP BY "citing_publication", "ipc4_code"
),
calculations AS (
    SELECT
        "citing_publication",
        SUM("occurrences") AS "total_occurrences",
        SUM("occurrences" * "occurrences") AS "sum_of_squared_occurrences"
        FROM ipc_counts
    GROUP BY "citing_publication"
    HAVING SUM("occurrences") > 0
),
originality AS (
    SELECT
        "citing_publication",
        ROUND(1 - ("sum_of_squared_occurrences"::FLOAT / POWER("total_occurrences", 2)), 4) AS "Originality_Score"
    FROM calculations
)

SELECT "citing_publication" AS "Publication_Number", "Originality_Score"
FROM originality
ORDER BY "Originality_Score" DESC NULLS LAST
LIMIT 1;
```
2025-02-12 21:38:12 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:38:12 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:38:12 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:38:13 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-02-12 21:38:13 - snowflake.connector.connection - INFO - closed
2025-02-12 21:38:14 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:38:14 - root - INFO - itercount: 3
2025-02-12 21:38:14 - root - INFO - 0
2025-02-12 21:38:14 - root - INFO - Total iteration counts: 3
