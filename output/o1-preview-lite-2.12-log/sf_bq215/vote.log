The correct SQL query that accurately computes the originality score as specified is:

```plaintext
1result.sql
```

**Reasoning:**

Upon comparing the three SQL queries provided, `1result.sql` stands out as the most accurate and methodologically sound in calculating the originality score for each patent. Here's why:

1. **Accurate Calculation of Occurrences:**
   - The query correctly counts the occurrences of each 4-digit IPC code in the backward citations of each patent.
   - It aggregates the counts per IPC code (`occurrences_per_ipc`) for each `publication_number`.

2. **Correct Computation of Sum of Squared Occurrences and Total Occurrences:**
   - It calculates the sum of squared occurrences (`sum_occurrences_per_ipc_squared`) and the total occurrences (`total_occurrences`) separately for each patent.
   - This separation ensures accurate computation of the numerator and denominator in the originality score formula.

3. **Precise Originality Score Formula Application:**
   - The query applies the originality score formula as specified:
     \[
     \text{Originality Score} = 1 - \left( \frac{\sum n_k^2}{(\sum n_k)^2} \right)
     \]
     where \( n_k \) is the number of occurrences of IPC code \( k \) in the backward citations.
   - It ensures that the calculation is performed with the correct order of operations and data types.

4. **Filtering the Relevant Patents:**
   - The query filters patents to include only US patents (`"country_code" = 'US'`) with kind code `'B2'` and a grant date between 2015 and 2018.
   - This filtering aligns with the conditions specified in the task.

5. **Handling Division by Zero and Null Values:**
   - It includes a condition to exclude patents with zero total occurrences to avoid division by zero errors.
   - By using `ROUND`, it formats the originality score to four decimal places, ensuring consistency.

6. **Clear and Organized Structure:**
   - The query is well-organized using Common Table Expressions (CTEs), which makes it readable and easier to understand.
   - Each step logically builds upon the previous one, from counting occurrences to calculating the final originality score.

**Conclusion:**

`1result.sql` accurately implements the required calculation and adheres to the task's specifications, making it the correct choice among the provided SQL queries.