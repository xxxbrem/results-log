2025-01-25 12:12:43 - openai._base_client - INFO - Retrying request to /chat/completions in 0.458599 seconds
2025-01-25 12:13:51 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:13:51 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:13:51 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:13:51 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:13:52 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-25 12:13:52 - snowflake.connector.connection - INFO - closed
2025-01-25 12:13:53 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:14:26 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:14:26 - root - INFO - ```sql
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://explorer.arbitrum.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE("ARGS_JSON":l1Token::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":l2Token::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE("ARGS_JSON":amount::STRING, '^0x', ''), 16) AS "AMOUNT_DECIMAL"
FROM (
  SELECT "TRANSACTION_HASH", parse_json("ARGS") AS "ARGS_JSON"
  FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
  WHERE "BLOCK_NUMBER" = 29815485
)
LIMIT 100;
```
2025-01-25 12:14:26 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:14:26 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:14:26 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:14:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-25 12:14:27 - snowflake.connector.connection - INFO - closed
2025-01-25 12:14:28 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:15:19 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:15:19 - root - INFO - ```sql
SELECT
  l."TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', l."TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(l."ADDRESS", '^0x0*', '') AS "CONTRACT_ADDRESS",
  REGEXP_REPLACE(t.VALUE::STRING, '^0x0*', '') AS "TOPIC",
  l."DATA"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."LOGS" l,
LATERAL FLATTEN(input => l."TOPICS") t
WHERE l."BLOCK_NUMBER" = 29815485
LIMIT 100;
```
2025-01-25 12:15:19 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:15:19 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:15:19 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:15:20 - snowflake.connector.connection - INFO - closed
2025-01-25 12:15:20 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:16:16 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:16:16 - root - INFO - ```sql
SELECT
  l."transaction_hash" AS "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', l."transaction_hash") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(l."address", '^0x0*', '') AS "CONTRACT_ADDRESS",
  l."data" AS "DATA",
  t.value::STRING AS "TOPIC"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."LOGS" l,
LATERAL FLATTEN(input => l."topics") t
LIMIT 100;
```
2025-01-25 12:16:16 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:16:16 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:16:16 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:16:18 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-25 12:16:18 - snowflake.connector.connection - INFO - closed
2025-01-25 12:16:18 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:17:24 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:17:24 - root - INFO - SQL:
SELECT
  l."transaction_hash" AS "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', l."transaction_hash") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(l."address", '^0x0*', '') AS "CONTRACT_ADDRESS",
  l."data" AS "DATA",
  t.value::STRING AS "TOPIC"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."LOGS" l,
LATERAL FLATTEN(input => l."topics") t
LIMIT 100;
Results:
Too long, hard cut:
TRANSACTION_HASH,ETHERSCAN_LINK,CONTRACT_ADDRESS,DATA,TOPIC
0x4af1f3987df08ce533cd61472cdf5100a44c236d332c3283058e586e4ec26a07,https://arbiscan.io/tx/0x4af1f3987df08ce533cd61472cdf5100a44c236d332c3283058e586e4ec26a07,4d73adb72bc3dd368966edd0f0b2148401a178e2,0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002d400000000000f6abe006e352d8275aae3e0c2404d9f68f6cee084b5beb3dd006a9d1b1669c73b033dfe47ae5a0164ab96df25b9440000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000057e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043b2c49f18600000000000000000000000000000000000000000000000000000000001d3e00000000000000000000000000000000000000000000000000000000000000003900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044400000000000000000000000000000000000000000000000000000000001d427d00000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001451af494f1b4d3f77835951fa827d66fc4a18dae800000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000286185f19838238000000000000000000000000afe8561ef64375b35f5be9ec44c0b88cffa116c8000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000001bf0cef920b20e0000000000000000000000000,0xe9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82
0x44177162c35ababbec9578b37756e4cdd0fad5e19e5fad2b1aa543d6ed7251a0,https://arbiscan.io/tx/0x44177162c35ababbec9578b37756e4cdd0fad5e19e5fad2b1aa543d6ed7251a0,4d73adb72bc3dd368966edd0f0b2148401a178e2,0x13ef352274882c080595fd8e23d848e3edbad1c44ca6c7a114ff3cbe2049c87213ef352274882c080595fd8e23d848e3edbad1c44ca6c7a114ff3cbe2049c8720000000000000000000000000000000000000000000000000000000000000014,0x74bbc026808dcba59692d6a8bb20596849ca718e10e2432c6cdf48af865bc5d9
0x44177162c35ababbec9578b37756e4cdd0fad5e19e5fad2b1aa543d6ed7251a0,https://arbiscan.io/tx/0x44177162c35ababbec9578b37756e4cdd0fad5e19e5fad2b1aa543d6ed7251a0,4d73adb72bc3dd368966edd0f0b2148401a178e2,0x13ef352274882c080595fd8e23d848e3edbad1c44ca6c7a114ff3cbe2049c87213ef352274882c080595fd8e23d848e3edbad1c44ca6c7a114ff3cbe2049c8720000000000000000000000000000000000000000000000000000000000000014,0x000000000000000000000000000000000000000000000000000000000000006f
0x44177162c35ababbec9578b37756e4cdd0fad5e19e5fad2b1aa543d6ed7251a0,https://arbiscan.io/tx/0x44177162c35ababbec9578b37756e4cdd0fad5e19e5fad2b1aa543d6ed7251a0,4d73adb72bc3dd368966edd0f0b2148401a178e2,0x13ef352274882c080595fd8e23d848e3edbad1c44ca6c7a114ff3cbe2049c87213ef352274882c080595fd8e23d848e3edbad1c44ca6c7a114ff3cbe2049c8720000000000000000000000000000000000000000000000000000000000000014,0x000000000000000000000000a0cc33dd6f4819d473226257792afe230ec3c67f
0x7c5fc50d24060f29f7f187921279cfabde55a98402b2035291dbb4d9d96ed601,https://arbiscan.io/tx/0x7c5fc50d24060f29f7f187921279cfabde55a98402b2035291dbb4d9d96ed601,a0cc33dd6f4819d473226257792afe230ec3c67f,0x000000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000014000000000000000000000000352d8275aae3e0c2404d9f68f6cee084b5beb3dd00000000000000000000000000000000000000000000000000000d3e5b19f464,0x4e41ee13e03cd5e0446487b524fdc48af6acf26c074dacdbdfb6b574b42c8146
0x67a0fd1770ef63635ee0f84ded275ababcc171f85931fc9e88eecc770329e5c9,https://arbiscan.io/tx/0x67a0fd1770ef63635ee0f84ded275ababcc171f85931fc9e88eecc770329e5c9,a03e32a42c75fdddc9a39973ddd082f147393154,0x000000000000000000000000000000000000000000000000000000000a5f4f1d0000000000000000000000000000000000000000000000000000000fe434dd9000000000000000000000000000000000000000000000000000000004acd0e33d,0xd246da22fc6064e2fae4f4affdb9425eac12bebcf4f08fb3892f08480513752e
0x67a0fd1770ef63635ee0f84ded275ababcc171f85931fc9e88eecc770329e5c9,https://arbiscan.io/tx/0x67a0fd1770ef63635ee0f84ded275ababcc171f85931fc9e88eecc770329e5c9,a03e32a42c75fdddc9a39973ddd082f147393154,0x000000000000000000000000000000000000000000000000000000000a5f4f1d0000000000000000000000000000000000000000000000000000000fe434dd9000000000000000000000000000000000000000000000000000000004acd0e33d,0x0000000000000000000000000000000000000000000000000000000000000002
0x4709e0339c8037f67bd54567df7840e3ca9465cee1ec9a2fdb53a770075f0ef8,https://arbiscan.io/tx/0x4709e0339c8037f67bd54567df7840e3ca9465cee1ec9a2fdb53a770075f0ef8,f45f2903438d383769ca3e80356

2025-01-25 12:17:24 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:17:24 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:17:24 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:17:26 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-25 12:17:26 - snowflake.connector.connection - INFO - closed
2025-01-25 12:17:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:17:26 - root - INFO - SQL:
SELECT "BLOCK_NUMBER", "TRANSACTION_HASH", "EVENT_HASH", "ARGS"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
LIMIT 100
Results:
Too long, hard cut:
BLOCK_NUMBER,TRANSACTION_HASH,EVENT_HASH,ARGS
65943439,0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0x2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8"",""72000"",""78600"",""1"",""0"",""4""]"
65943557,0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""149000"",""154200"",""219098471877079"",""29176006613"",""0""]"
65943584,0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0x2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8"",""-203512"",""-201064"",""5183835359841949"",""7320400011188982470"",""12919534685""]"
65943953,0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-202980"",""-201780"",""0"",""0"",""0""]"
65943955,0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-234240"",""-233040"",""2366735783157456"",""0"",""1199968832""]"
65944351,0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""73440"",""74760"",""0"",""0"",""0""]"
65944855,0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""2161385673098"",""19077727485743861"",""30539193""]"
65945171,0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xcb0347cc2c07f827fdd49ed86ee867a754b647dc"",""-202740"",""-202260"",""922690969348348"",""0"",""887655477""]"
65945745,0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""1451054568747"",""12806477744362749"",""20504956""]"
65946197,0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""30600"",""30800"",""44172636697258675733"",""3810721203883818"",""1967075480151059015""]"
65946342,0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-88000"",""-84000"",""9603508251585636196483"",""74897410393684262169665"",""11024366334917904849""]"
65946414,0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""1839749148186"",""16233736875741931"",""26002928""]"
65946668,0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""2444573072928"",""21571725623110665"",""34549683""]"
65946822,0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-202310"",""-202290"",""7013655851385516"",""0"",""283957733""]"
65946910,0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""1632624702778"",""14405321461188825"",""23076714""]"
65946990,0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-71000"",""-66800"",""0"",""0"",""0""]"
65947019,0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""2025167146516"",""17870139594263674"",""28623131""]"
65947039,0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-59340"",""-48120"",""0"",""0"",""0""]"
65947161,0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""2187992760649"",""19307574469759898"",""30923379

2025-01-25 12:17:26 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:17:26 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:17:26 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:17:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-25 12:17:27 - snowflake.connector.connection - INFO - closed
2025-01-25 12:17:27 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:18:19 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:18:19 - root - INFO - ```sql
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE("ARGS_JSON":"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE("ARGS_JSON":"amount"::STRING, '^0x', ''), 16) AS "AMOUNT_DECIMAL"
FROM (
  SELECT "TRANSACTION_HASH", PARSE_JSON("ARGS") AS "ARGS_JSON"
  FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
)
LIMIT 100;
```
2025-01-25 12:18:19 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:18:19 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:18:19 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:18:21 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-25 12:18:21 - snowflake.connector.connection - INFO - closed
2025-01-25 12:18:21 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:19:11 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:19:11 - root - INFO - SQL:
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE("ARGS_JSON":"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE("ARGS_JSON":"amount"::STRING, '^0x', ''), 16) AS "AMOUNT_DECIMAL"
FROM (
  SELECT "TRANSACTION_HASH", PARSE_JSON("ARGS") AS "ARGS_JSON"
  FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
)
LIMIT 100;
Results:
Too long, hard cut:
TRANSACTION_HASH,ETHERSCAN_LINK,L1_TOKEN_ADDRESS,L2_TOKEN_ADDRESS,SENDER_ADDRESS,RECEIVER_ADDRESS,AMOUNT_DECIMAL
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,https://arbiscan.io/tx/0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,,,,,
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,https://arbiscan.io/tx/0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,,,,,
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,https://arbiscan.io/tx/0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,,,,,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,https://arbiscan.io/tx/0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,,,,,
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,https://arbiscan.io/tx/0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,,,,,
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,https://arbiscan.io/tx/0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,,,,,
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,https://arbiscan.io/tx/0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,,,,,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,https://arbiscan.io/tx/0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,,,,,
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,https://arbiscan.io/tx/0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,,,,,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,https://arbiscan.io/tx/0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,,,,,
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,https://arbiscan.io/tx/0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,,,,,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,https://arbiscan.io/tx/0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,,,,,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,https://arbiscan.io/tx/0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,,,,,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,https://arbiscan.io/tx/0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,,,,,
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,https://arbiscan.io/tx/0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,,,,,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,https://arbiscan.io/tx/0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,,,,,
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,https://arbiscan.io/tx/0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,,,,,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,https://arbiscan.io/tx/0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,,,,,
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,https://arbiscan.io/tx/0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,,,,,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,https://arbiscan.io/tx/0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,,,,,
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,https://arbiscan.io/tx/0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,,,,,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,https://arbiscan.io/tx/0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,,,,,
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,https://arbiscan.io/tx/0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,,,,,
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,https://arbiscan.io/tx/0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,,,,,
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,https://arbiscan.io/tx/0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,,,,,
0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,https://arbiscan.io/tx/0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,,,,,
0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,https://arbiscan.io/tx/0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,,,,,
0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,https://arbiscan.io/tx/0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,,,,,
0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,https://arbiscan.io/tx/0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,,,,,
0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,https://arbiscan.io/tx/0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,,,,,
0xa6a3c2e7d28a3a37425569021

2025-01-25 12:19:11 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:19:11 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:19:11 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:19:12 - snowflake.connector.connection - INFO - closed
2025-01-25 12:19:12 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:19:52 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:19:52 - root - INFO - ```sql
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE("ARGS_JSON":"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE("ARGS_JSON":"amount"::STRING, '^0x', ''), 16) AS "AMOUNT_DECIMAL"
FROM (
  SELECT "TRANSACTION_HASH", PARSE_JSON("ARGS") AS "ARGS_JSON"
  FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
  WHERE "BLOCK_NUMBER" = 29815485
    AND "EVENT_HASH" = '0x3303FACD24627943A92E9DC87CFBB34B15C49B726EEC3AD3487C16BE9AB8EFE8'
)
LIMIT 100;
```
2025-01-25 12:19:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:19:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:19:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:19:54 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-25 12:19:54 - snowflake.connector.connection - INFO - closed
2025-01-25 12:19:54 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:20:46 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:20:46 - root - INFO - ```sql
SELECT
  transaction_hash,
  CONCAT('https://arbiscan.io/tx/', transaction_hash) AS etherscan_link,
  REGEXP_REPLACE(PARSE_JSON(args):l1Token::STRING, '^0x0*', '') AS l1_token_address,
  REGEXP_REPLACE(PARSE_JSON(args):l2Token::STRING, '^0x0*', '') AS l2_token_address,
  REGEXP_REPLACE(PARSE_JSON(args):from::STRING, '^0x0*', '') AS sender_address,
  REGEXP_REPLACE(PARSE_JSON(args):to::STRING, '^0x0*', '') AS receiver_address,
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON(args):amount::STRING, '^0x', ''), 16) AS amount_decimal
FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
LIMIT 100;
```
2025-01-25 12:20:46 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:20:46 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:20:46 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:20:47 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-25 12:20:47 - snowflake.connector.connection - INFO - closed
2025-01-25 12:20:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:22:08 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:22:08 - root - INFO - SQL:
SELECT
  transaction_hash,
  CONCAT('https://arbiscan.io/tx/', transaction_hash) AS etherscan_link,
  REGEXP_REPLACE(PARSE_JSON(args):l1Token::STRING, '^0x0*', '') AS l1_token_address,
  REGEXP_REPLACE(PARSE_JSON(args):l2Token::STRING, '^0x0*', '') AS l2_token_address,
  REGEXP_REPLACE(PARSE_JSON(args):from::STRING, '^0x0*', '') AS sender_address,
  REGEXP_REPLACE(PARSE_JSON(args):to::STRING, '^0x0*', '') AS receiver_address,
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON(args):amount::STRING, '^0x', ''), 16) AS amount_decimal
FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
LIMIT 100;
Results:
Too long, hard cut:
TRANSACTION_HASH,ETHERSCAN_LINK,L1_TOKEN_ADDRESS,L2_TOKEN_ADDRESS,SENDER_ADDRESS,RECEIVER_ADDRESS,AMOUNT_DECIMAL
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,https://arbiscan.io/tx/0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,,,,,
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,https://arbiscan.io/tx/0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,,,,,
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,https://arbiscan.io/tx/0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,,,,,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,https://arbiscan.io/tx/0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,,,,,
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,https://arbiscan.io/tx/0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,,,,,
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,https://arbiscan.io/tx/0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,,,,,
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,https://arbiscan.io/tx/0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,,,,,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,https://arbiscan.io/tx/0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,,,,,
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,https://arbiscan.io/tx/0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,,,,,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,https://arbiscan.io/tx/0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,,,,,
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,https://arbiscan.io/tx/0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,,,,,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,https://arbiscan.io/tx/0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,,,,,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,https://arbiscan.io/tx/0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,,,,,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,https://arbiscan.io/tx/0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,,,,,
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,https://arbiscan.io/tx/0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,,,,,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,https://arbiscan.io/tx/0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,,,,,
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,https://arbiscan.io/tx/0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,,,,,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,https://arbiscan.io/tx/0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,,,,,
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,https://arbiscan.io/tx/0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,,,,,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,https://arbiscan.io/tx/0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,,,,,
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,https://arbiscan.io/tx/0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,,,,,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,https://arbiscan.io/tx/0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,,,,,
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,https://arbiscan.io/tx/0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,,,,,
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,https://arbiscan.io/tx/0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,,,,,
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,https://arbiscan.io/tx/0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,,,,,
0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,https://arbiscan.io/tx/0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,,,,,
0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,https://arbiscan.io/tx/0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,,,,,
0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,https://arbiscan.io/tx/0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,,,,,
0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,https://arbiscan.io/tx/0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,,,,,
0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,https://arbiscan.io/tx/0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,,,,,
0xa6a3c2e7d28a3a37425569021

2025-01-25 12:22:08 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:22:08 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:22:08 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:22:10 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-25 12:22:10 - snowflake.connector.connection - INFO - closed
2025-01-25 12:22:10 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:22:10 - root - INFO - SQL:
SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
LIMIT 100
Results:
Too long, hard cut:
TRANSACTION_HASH,ARGS_JSON
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,"[
  ""0x2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8"",
  ""72000"",
  ""78600"",
  ""1"",
  ""0"",
  ""4""
]"
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""149000"",
  ""154200"",
  ""219098471877079"",
  ""29176006613"",
  ""0""
]"
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,"[
  ""0x2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8"",
  ""-203512"",
  ""-201064"",
  ""5183835359841949"",
  ""7320400011188982470"",
  ""12919534685""
]"
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-202980"",
  ""-201780"",
  ""0"",
  ""0"",
  ""0""
]"
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-234240"",
  ""-233040"",
  ""2366735783157456"",
  ""0"",
  ""1199968832""
]"
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""73440"",
  ""74760"",
  ""0"",
  ""0"",
  ""0""
]"
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""2161385673098"",
  ""19077727485743861"",
  ""30539193""
]"
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,"[
  ""0xcb0347cc2c07f827fdd49ed86ee867a754b647dc"",
  ""-202740"",
  ""-202260"",
  ""922690969348348"",
  ""0"",
  ""887655477""
]"
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""1451054568747"",
  ""12806477744362749"",
  ""20504956""
]"
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""30600"",
  ""30800"",
  ""44172636697258675733"",
  ""3810721203883818"",
  ""1967075480151059015""
]"
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-88000"",
  ""-84000"",
  ""9603508251585636196483"",
  ""74897410393684262169665"",
  ""11024366334917904849""
]"
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""1839749148186"",
  ""16233736875741931"",
  ""26002928""
]"
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""2444573072928"",
  ""21571725623110665"",
  ""34549683""
]"
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-202310"",
  ""-202290"",
  ""7013655851385516"",
  ""0"",
  ""283957733""
]"
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""1632624702778"",
  ""14405321461188825"",
  ""23076714""
]"
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-71000"",
  ""-66800"",
  ""0"",
  ""0"",
  ""0""
]"
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""2025167146516"",
  ""17870139594263674"",
  ""28623131""
]"
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-59340"",
  ""-48120"",
  ""0"",
  ""0"",
  ""0""
]"
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""2187992760649"",
  ""19307574469759898"",
  ""30923379""
]"
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-32880"",
  ""-11100"",
  ""0"",
  ""0"",
  ""0""
]"
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""1984042176129"",
  ""17505462079715827"",
  ""28044831""
]"
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-202470"",
  ""-201990"",
  ""0"",
  ""0"",
  ""0""
]"
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-58440"",
  ""-51360"",
  ""0"",
  ""0"",
  ""0""
]"
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""78200"",
  ""88000"",
  ""0"",
  ""0"",
  ""0""
]"
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-61020"",
  ""-47940"",
  ""0"",
  ""0"",
  ""0""
]

2025-01-25 12:22:10 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:22:10 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:22:10 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:22:11 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-25 12:22:11 - snowflake.connector.connection - INFO - closed
2025-01-25 12:22:12 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:22:12 - root - INFO - SQL:
SELECT
  TRANSACTION_HASH,
  ARGS_JSON:"l1Token"::STRING AS L1_TOKEN_ADDRESS,
  ARGS_JSON:"l2Token"::STRING AS L2_TOKEN_ADDRESS,
  ARGS_JSON:"from"::STRING AS FROM_ADDRESS,
  ARGS_JSON:"to"::STRING AS TO_ADDRESS,
  ARGS_JSON:"amount"::STRING AS AMOUNT
FROM (
  SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
  FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
)
LIMIT 100
Results:
Too long, hard cut:
TRANSACTION_HASH,L1_TOKEN_ADDRESS,L2_TOKEN_ADDRESS,FROM_ADDRESS,TO_ADDRESS,AMOUNT
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,,,,,
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,,,,,
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,,,,,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,,,,,
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,,,,,
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,,,,,
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,,,,,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,,,,,
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,,,,,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,,,,,
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,,,,,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,,,,,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,,,,,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,,,,,
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,,,,,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,,,,,
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,,,,,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,,,,,
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,,,,,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,,,,,
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,,,,,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,,,,,
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,,,,,
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,,,,,
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,,,,,
0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,,,,,
0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,,,,,
0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,,,,,
0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,,,,,
0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,,,,,
0xa6a3c2e7d28a3a37425569021858f00580b1c244164b4ddc0cf9482c85259707,,,,,
0x63908c9c53571d21e4829219ee361ab5b6879cdba33d418d58ecd8e09629ef50,,,,,
0x52349485a96a0f0e94e256cbd2d4a0b04a0f894f70d300deb3ae1e3d53ce999e,,,,,
0xdc612a208da0eb6dabe17be97ee0f949e09d7119021c52457e54379b6d16a58e,,,,,
0x523d1c41ead0047fca38677f91ecddbff8d1a8eebbfaa1895a95cd100a7928b3,,,,,
0xba85fe694ba9b3e708d0fbc9a917084c945a9ace062c792b083f8478d2492c01,,,,,
0xfeabefe7da977f7faeae8affd4f03ecf31979a24d0cd705a7bdac324474fa9b9,,,,,
0xc8fd092a7b85bea3373dfe86b8b6e05cdde369af8a126a9dc00ab066fda448dc,,,,,
0x7f0ccd85f2ff5a67c5ce535fc0ef5d74de124f640909851bf144ac62b64b7001,,,,,
0x1830722d8526a5934d0cc42906a522b414258aa96b844033a86cf6664d011392,,,,,
0xe85e1ac593948dd02b9257f69de6e2b4ee05ac7c2e6066eb16651ad34be11196,,,,,
0xf579da1d8364b13dc42405af248b77c9415fd23a1c9cdf6522d730d138dcf9b3,,,,,
0x5d9f435a9c307171602ec9f1c9d280776e129e49142bb51c4930a5cc10bced26,,,,,
0x29324eba2cdfb974d7c89e1eac17937684574be04793e4edee7d876793a89d24,,,,,
0x0df5f7a9e7b9d40aa7123935f024e0cf268f0095081883e29911f69c3b630fec,,,,,
0x5938c977f8f26e994852ee2f0c50240d88223e1f49f5c571200a64229fbc1f5c,,,,,
0xf29d2d677265dc004e5b8299be0dd9ca15d19260eb9ffa8018fed2cab3c54ae6,,,,,
0x5edbd448989c3f1c293a0c35b8ac6ac2862e7b55390d42234f247fc68ee1d07d,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0x285237d9f95b5b2b12c7fb922ea3e9edb990d825da8f39a3644711030a6dd677,,,,,
0x4381f2ea5a77c018df9d89d497c4a0c4cd2414d92c575fb853b130c171e8ed09,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0xd3758e48727d12ccd88b5c0e340bf5c1f5a922b0f161f4c2ac980161a0e8f451,,,,,
0xb6b9e382601e0d487691f99fdd67b0c383587bd071f1e756e25cc548eeca4963,,,,,
0xf2b1e46fc61a5053c946eed5e648c1d4d272fe6edf9bdb33da17805c7bbddbfc,,,,,
0xe9f382f7441cb30e11bf7d83e1b3851034f5805d99adf87c6c34a29188956086,,,,,
0x4cd33279b5c87d1f6f867df9333b2eeac35d1a862d301118d51e4fcfe3240b04,,,,,
0xeb0333a1d0248254dfc1380fcac7d748dfc44c391acd1a1766c6e44ea2e276a3,,,,,
0xb92a75f0ea4c6174e44d524868980a0ea2544f1a4864dfceadc8b8ef97655375,,,,,
0xb160453c1aaf21b232d2e986b4782c0b93745de66a30eb8634835d31876c64d9,,,,,
0x91469c593530fde02da1c99f30d61a052d28f02bc8204803df2c2b1d4de9cec4,,,,,
0x0955391bfe342d00f165

2025-01-25 12:22:12 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:22:12 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:22:12 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:22:13 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-25 12:22:13 - snowflake.connector.connection - INFO - closed
2025-01-25 12:22:13 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:22:14 - root - INFO - SQL:
SELECT
  TRANSACTION_HASH,
  REGEXP_REPLACE(ARGS_JSON:"l1Token"::STRING, '^0x0*', '') AS L1_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON:"l2Token"::STRING, '^0x0*', '') AS L2_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON:"from"::STRING, '^0x0*', '') AS FROM_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON:"to"::STRING, '^0x0*', '') AS TO_ADDRESS,
  ARGS_JSON:"amount"::STRING AS AMOUNT
FROM (
  SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
  FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
)
LIMIT 100
Results:
Too long, hard cut:
TRANSACTION_HASH,L1_TOKEN_ADDRESS,L2_TOKEN_ADDRESS,FROM_ADDRESS,TO_ADDRESS,AMOUNT
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,,,,,
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,,,,,
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,,,,,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,,,,,
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,,,,,
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,,,,,
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,,,,,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,,,,,
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,,,,,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,,,,,
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,,,,,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,,,,,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,,,,,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,,,,,
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,,,,,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,,,,,
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,,,,,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,,,,,
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,,,,,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,,,,,
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,,,,,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,,,,,
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,,,,,
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,,,,,
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,,,,,
0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,,,,,
0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,,,,,
0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,,,,,
0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,,,,,
0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,,,,,
0xa6a3c2e7d28a3a37425569021858f00580b1c244164b4ddc0cf9482c85259707,,,,,
0x63908c9c53571d21e4829219ee361ab5b6879cdba33d418d58ecd8e09629ef50,,,,,
0x52349485a96a0f0e94e256cbd2d4a0b04a0f894f70d300deb3ae1e3d53ce999e,,,,,
0xdc612a208da0eb6dabe17be97ee0f949e09d7119021c52457e54379b6d16a58e,,,,,
0x523d1c41ead0047fca38677f91ecddbff8d1a8eebbfaa1895a95cd100a7928b3,,,,,
0xba85fe694ba9b3e708d0fbc9a917084c945a9ace062c792b083f8478d2492c01,,,,,
0xfeabefe7da977f7faeae8affd4f03ecf31979a24d0cd705a7bdac324474fa9b9,,,,,
0xc8fd092a7b85bea3373dfe86b8b6e05cdde369af8a126a9dc00ab066fda448dc,,,,,
0x7f0ccd85f2ff5a67c5ce535fc0ef5d74de124f640909851bf144ac62b64b7001,,,,,
0x1830722d8526a5934d0cc42906a522b414258aa96b844033a86cf6664d011392,,,,,
0xe85e1ac593948dd02b9257f69de6e2b4ee05ac7c2e6066eb16651ad34be11196,,,,,
0xf579da1d8364b13dc42405af248b77c9415fd23a1c9cdf6522d730d138dcf9b3,,,,,
0x5d9f435a9c307171602ec9f1c9d280776e129e49142bb51c4930a5cc10bced26,,,,,
0x29324eba2cdfb974d7c89e1eac17937684574be04793e4edee7d876793a89d24,,,,,
0x0df5f7a9e7b9d40aa7123935f024e0cf268f0095081883e29911f69c3b630fec,,,,,
0x5938c977f8f26e994852ee2f0c50240d88223e1f49f5c571200a64229fbc1f5c,,,,,
0xf29d2d677265dc004e5b8299be0dd9ca15d19260eb9ffa8018fed2cab3c54ae6,,,,,
0x5edbd448989c3f1c293a0c35b8ac6ac2862e7b55390d42234f247fc68ee1d07d,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0x285237d9f95b5b2b12c7fb922ea3e9edb990d825da8f39a3644711030a6dd677,,,,,
0x4381f2ea5a77c018df9d89d497c4a0c4cd2414d92c575fb853b130c171e8ed09,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0xd3758e48727d12ccd88b5c0e340bf5c1f5a922b0f161f4c2ac980161a0e8f451,,,,,
0xb6b9e382601e0d487691f99fdd67b0c383587bd071f1e756e25cc548eeca4963,,,,,
0xf2b1e46fc61a5053c946eed5e648c1d4d272fe6edf9bdb33da17805c7bbddbfc,,,,,
0xe9f382f7441cb30e11bf7d83e1b3851034f5805d99adf87c6c34a29188956086,,,,,
0x4cd33279b5c87d1f6f867df9333b2eeac35d1a862d301118d51e4fcfe3240b04,,,,,
0xeb0333a1d0248254dfc1380fcac7d748dfc44c391acd1a1766c6e44ea2e276a3,,,,,
0xb92a75f0ea4c6174e44d524868980a0ea2544f1a4864dfceadc8b8ef97655375,,,,,
0xb160453c1aaf21b232d2e986b4782c0b93745de66a30eb8634835d31876c64d9,,,,,
0x91469c593530fde02da1c99f30d61a052d28f02bc8204803df2c2b1d4de9cec4,,,,,
0x0955391bfe342d00f165

2025-01-25 12:22:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:22:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:22:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:22:15 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-25 12:22:15 - snowflake.connector.connection - INFO - closed
2025-01-25 12:22:15 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:22:16 - root - INFO - SQL:
SELECT
  TRANSACTION_HASH,
  CONCAT('https://arbiscan.io/tx/', TRANSACTION_HASH) AS ETHERSCAN_LINK
FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
LIMIT 100
Results:
Too long, hard cut:
TRANSACTION_HASH,ETHERSCAN_LINK
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,https://arbiscan.io/tx/0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,https://arbiscan.io/tx/0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,https://arbiscan.io/tx/0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,https://arbiscan.io/tx/0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,https://arbiscan.io/tx/0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,https://arbiscan.io/tx/0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,https://arbiscan.io/tx/0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,https://arbiscan.io/tx/0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,https://arbiscan.io/tx/0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,https://arbiscan.io/tx/0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,https://arbiscan.io/tx/0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,https://arbiscan.io/tx/0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,https://arbiscan.io/tx/0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,https://arbiscan.io/tx/0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,https://arbiscan.io/tx/0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,https://arbiscan.io/tx/0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,https://arbiscan.io/tx/0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,https://arbiscan.io/tx/0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,https://arbiscan.io/tx/0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,https://arbiscan.io/tx/0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,https://arbiscan.io/tx/0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,https://arbiscan.io/tx/0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,https://arbiscan.io/tx/0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,https://arbiscan.io/tx/0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,https://arbiscan.io/tx/0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0
0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,https://arbiscan.io/tx/0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee
0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,https://arbiscan.io/tx/0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f
0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,https://arbiscan.io/tx/0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5
0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,https://arbiscan.io/tx/0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e
0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,https://arbiscan.io/tx/0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193
0xa6a3c2e7d28a3a37425569021858f00580b1c244164b4ddc0cf9482c85259707,https://arbiscan.io/tx/0xa6a3c2e7d28a3a37425569021858f00580b1c244164b4ddc0cf9482c85259707
0x63908c9c53571d21e4829219ee361ab5b6879cdba33d418d58ecd8e09629ef50,https://arbiscan.io/tx/0x63908c9c5

2025-01-25 12:22:16 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:22:16 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:22:16 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:22:17 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-25 12:22:17 - snowflake.connector.connection - INFO - closed
2025-01-25 12:22:17 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:22:17 - root - INFO - SQL:
SELECT
  TRANSACTION_HASH,
  ARGS_JSON:"amount"::STRING AS AMOUNT_HEX,
  TRY_TO_NUMBER(REGEXP_REPLACE(ARGS_JSON:"amount"::STRING, '^0x', ''), 16) AS AMOUNT_DECIMAL
FROM (
  SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
  FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
)
LIMIT 100
Results:
Too long, hard cut:
TRANSACTION_HASH,AMOUNT_HEX,AMOUNT_DECIMAL
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,,
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,,
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,,
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,,
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,,
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,,
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,,
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,,
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,,
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,,
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,,
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,,
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,,
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,,
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,,
0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,,
0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,,
0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,,
0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,,
0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,,
0xa6a3c2e7d28a3a37425569021858f00580b1c244164b4ddc0cf9482c85259707,,
0x63908c9c53571d21e4829219ee361ab5b6879cdba33d418d58ecd8e09629ef50,,
0x52349485a96a0f0e94e256cbd2d4a0b04a0f894f70d300deb3ae1e3d53ce999e,,
0xdc612a208da0eb6dabe17be97ee0f949e09d7119021c52457e54379b6d16a58e,,
0x523d1c41ead0047fca38677f91ecddbff8d1a8eebbfaa1895a95cd100a7928b3,,
0xba85fe694ba9b3e708d0fbc9a917084c945a9ace062c792b083f8478d2492c01,,
0xfeabefe7da977f7faeae8affd4f03ecf31979a24d0cd705a7bdac324474fa9b9,,
0xc8fd092a7b85bea3373dfe86b8b6e05cdde369af8a126a9dc00ab066fda448dc,,
0x7f0ccd85f2ff5a67c5ce535fc0ef5d74de124f640909851bf144ac62b64b7001,,
0x1830722d8526a5934d0cc42906a522b414258aa96b844033a86cf6664d011392,,
0xe85e1ac593948dd02b9257f69de6e2b4ee05ac7c2e6066eb16651ad34be11196,,
0xf579da1d8364b13dc42405af248b77c9415fd23a1c9cdf6522d730d138dcf9b3,,
0x5d9f435a9c307171602ec9f1c9d280776e129e49142bb51c4930a5cc10bced26,,
0x29324eba2cdfb974d7c89e1eac17937684574be04793e4edee7d876793a89d24,,
0x0df5f7a9e7b9d40aa7123935f024e0cf268f0095081883e29911f69c3b630fec,,
0x5938c977f8f26e994852ee2f0c50240d88223e1f49f5c571200a64229fbc1f5c,,
0xf29d2d677265dc004e5b8299be0dd9ca15d19260eb9ffa8018fed2cab3c54ae6,,
0x5edbd448989c3f1c293a0c35b8ac6ac2862e7b55390d42234f247fc68ee1d07d,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,
0x285237d9f95b5b2b12c7fb922ea3e9edb990d825da8f39a3644711030a6dd677,,
0x4381f2ea5a77c018df9d89d497c4a0c4cd2414d92c575fb853b130c171e8ed09,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,
0xd3758e48727d12ccd88b5c0e340bf5c1f5a922b0f161f4c2ac980161a0e8f451,,
0xb6b9e382601e0d487691f99fdd67b0c383587bd071f1e756e25cc548eeca4963,,
0xf2b1e46fc61a5053c946eed5e648c1d4d272fe6edf9bdb33da17805c7bbddbfc,,
0xe9f382f7441cb30e11bf7d83e1b3851034f5805d99adf87c6c34a29188956086,,
0x4cd33279b5c87d1f6f867df9333b2eeac35d1a862d301118d51e4fcfe3240b04,,
0xeb0333a1d0248254dfc1380fcac7d748dfc44c391acd1a1766c6e44ea2e276a3,,
0xb92a75f0ea4c6174e44d524868980a0ea2544f1a4864dfceadc8b8ef97655375,,
0xb160453c1aaf21b232d2e986b4782c0b93745de66a30eb8634835d31876c64d9,,
0x91469c593530fde02da1c99f30d61a052d28f02bc8204803df2c2b1d4de9cec4,,
0x0955391bfe342d00f165859d16a5cfcc417929045ab9ecbe75ed367bbdf49a29,,
0x0955391bfe342d00f165859d16a5cfcc417929045ab9ecbe75ed367bbdf49a29,,
0x0955391bfe342d00f165859d16a5cfcc417929045ab9ecbe75ed367bbdf49a29,,
0x3a05942ae2efd6e080ee2b73834a412b590132afb3d9105b86db8d8b

2025-01-25 12:22:17 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:22:17 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:22:17 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:22:18 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-25 12:22:18 - snowflake.connector.connection - INFO - closed
2025-01-25 12:22:19 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:22:19 - root - INFO - SQL:
SELECT COUNT(*) AS EVENT_COUNT
FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
Results:
EVENT_COUNT
368482

2025-01-25 12:22:19 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:22:19 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:22:19 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:22:21 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-25 12:22:21 - snowflake.connector.connection - INFO - closed
2025-01-25 12:22:21 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:23:09 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:23:09 - root - INFO - ```sql
SELECT
  TRANSACTION_HASH,
  CONCAT('https://arbiscan.io/tx/', TRANSACTION_HASH) AS ETHERSCAN_LINK,
  REGEXP_REPLACE(ARGS_JSON[0]::STRING, '^0x0*', '') AS L1_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[1]::STRING, '^0x0*', '') AS L2_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[2]::STRING, '^0x0*', '') AS SENDER_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[3]::STRING, '^0x0*', '') AS RECEIVER_ADDRESS,
  TRY_TO_NUMBER(REGEXP_REPLACE(ARGS_JSON[4]::STRING, '^0x', ''), 16) AS AMOUNT_DECIMAL
FROM (
  SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
  FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
)
LIMIT 100;
```
2025-01-25 12:23:09 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:23:09 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:23:09 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:23:11 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-25 12:23:11 - snowflake.connector.connection - INFO - closed
2025-01-25 12:23:11 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:23:36 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:23:36 - root - INFO - SQL:
SELECT
  TRANSACTION_HASH,
  CONCAT('https://arbiscan.io/tx/', TRANSACTION_HASH) AS ETHERSCAN_LINK,
  REGEXP_REPLACE(ARGS_JSON[0]::STRING, '^0x0*', '') AS L1_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[1]::STRING, '^0x0*', '') AS L2_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[2]::STRING, '^0x0*', '') AS SENDER_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[3]::STRING, '^0x0*', '') AS RECEIVER_ADDRESS,
  TRY_TO_NUMBER(REGEXP_REPLACE(ARGS_JSON[4]::STRING, '^0x', ''), 16) AS AMOUNT_DECIMAL
FROM (
  SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
  FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
)
LIMIT 100;
Results:
Too long, hard cut:
TRANSACTION_HASH,ETHERSCAN_LINK,L1_TOKEN_ADDRESS,L2_TOKEN_ADDRESS,SENDER_ADDRESS,RECEIVER_ADDRESS,AMOUNT_DECIMAL
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,https://arbiscan.io/tx/0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8,72000,78600,1,0.0
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,https://arbiscan.io/tx/0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,c36442b4a4522e871399cd717abdd847ab11fe88,149000,154200,219098471877079,29176006613.0
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,https://arbiscan.io/tx/0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8,-203512,-201064,5183835359841949,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,https://arbiscan.io/tx/0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,c36442b4a4522e871399cd717abdd847ab11fe88,-202980,-201780,0,0.0
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,https://arbiscan.io/tx/0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,c36442b4a4522e871399cd717abdd847ab11fe88,-234240,-233040,2366735783157456,0.0
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,https://arbiscan.io/tx/0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,c36442b4a4522e871399cd717abdd847ab11fe88,73440,74760,0,0.0
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,https://arbiscan.io/tx/0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2161385673098,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,https://arbiscan.io/tx/0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,cb0347cc2c07f827fdd49ed86ee867a754b647dc,-202740,-202260,922690969348348,0.0
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,https://arbiscan.io/tx/0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1451054568747,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,https://arbiscan.io/tx/0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,c36442b4a4522e871399cd717abdd847ab11fe88,30600,30800,44172636697258675733,3810721203883818.0
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,https://arbiscan.io/tx/0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,c36442b4a4522e871399cd717abdd847ab11fe88,-88000,-84000,9603508251585636196483,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,https://arbiscan.io/tx/0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1839749148186,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,https://arbiscan.io/tx/0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2444573072928,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,https://arbiscan.io/tx/0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,c36442b4a4522e871399cd717abdd847ab11fe88,-202310,-202290,7013655851385516,0.0
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,https://arbiscan.io/tx/0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1632624702778,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,https://arbiscan.io/tx/0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,c36442b4a4522e871399cd717abdd847ab11fe88,-71000,-66800,0,0.0
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,https://arbiscan.io/tx/0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2025167146516,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,https://arbiscan.io/tx/0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,c36442b4a4522e871399cd717abdd847ab11fe88,-59340,-48120,0,0.0
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,https://arbiscan.io/tx/0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2187992760649,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,https://arbiscan.io/tx/0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,c36442b4a4522e871399cd717abdd847ab11fe88,-32880,-11100,0,0.0
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,https://arbiscan.io/tx/0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1984042176129,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,https://arbiscan.i

2025-01-25 12:23:36 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:23:36 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:23:36 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:23:38 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-25 12:23:38 - snowflake.connector.connection - INFO - closed
2025-01-25 12:23:38 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:23:38 - root - INFO - SQL:
SELECT
  TRANSACTION_HASH,
  CONCAT('https://arbiscan.io/tx/', TRANSACTION_HASH) AS ETHERSCAN_LINK,
  REGEXP_REPLACE(ARGS_JSON[0]::STRING, '^0x0*', '') AS L1_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[1]::STRING, '^0x0*', '') AS L2_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[2]::STRING, '^0x0*', '') AS SENDER_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[3]::STRING, '^0x0*', '') AS RECEIVER_ADDRESS,
  TRY_TO_NUMBER(ARGS_JSON[4]::STRING, 10) AS AMOUNT_DECIMAL
FROM (
  SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
  FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
)
LIMIT 100
Results:
Too long, hard cut:
TRANSACTION_HASH,ETHERSCAN_LINK,L1_TOKEN_ADDRESS,L2_TOKEN_ADDRESS,SENDER_ADDRESS,RECEIVER_ADDRESS,AMOUNT_DECIMAL
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,https://arbiscan.io/tx/0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8,72000,78600,1,0.0
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,https://arbiscan.io/tx/0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,c36442b4a4522e871399cd717abdd847ab11fe88,149000,154200,219098471877079,
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,https://arbiscan.io/tx/0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8,-203512,-201064,5183835359841949,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,https://arbiscan.io/tx/0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,c36442b4a4522e871399cd717abdd847ab11fe88,-202980,-201780,0,0.0
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,https://arbiscan.io/tx/0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,c36442b4a4522e871399cd717abdd847ab11fe88,-234240,-233040,2366735783157456,0.0
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,https://arbiscan.io/tx/0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,c36442b4a4522e871399cd717abdd847ab11fe88,73440,74760,0,0.0
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,https://arbiscan.io/tx/0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2161385673098,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,https://arbiscan.io/tx/0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,cb0347cc2c07f827fdd49ed86ee867a754b647dc,-202740,-202260,922690969348348,0.0
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,https://arbiscan.io/tx/0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1451054568747,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,https://arbiscan.io/tx/0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,c36442b4a4522e871399cd717abdd847ab11fe88,30600,30800,44172636697258675733,
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,https://arbiscan.io/tx/0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,c36442b4a4522e871399cd717abdd847ab11fe88,-88000,-84000,9603508251585636196483,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,https://arbiscan.io/tx/0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1839749148186,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,https://arbiscan.io/tx/0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2444573072928,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,https://arbiscan.io/tx/0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,c36442b4a4522e871399cd717abdd847ab11fe88,-202310,-202290,7013655851385516,0.0
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,https://arbiscan.io/tx/0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1632624702778,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,https://arbiscan.io/tx/0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,c36442b4a4522e871399cd717abdd847ab11fe88,-71000,-66800,0,0.0
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,https://arbiscan.io/tx/0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2025167146516,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,https://arbiscan.io/tx/0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,c36442b4a4522e871399cd717abdd847ab11fe88,-59340,-48120,0,0.0
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,https://arbiscan.io/tx/0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2187992760649,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,https://arbiscan.io/tx/0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,c36442b4a4522e871399cd717abdd847ab11fe88,-32880,-11100,0,0.0
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,https://arbiscan.io/tx/0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1984042176129,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,https://arbiscan.io/tx/0x08560e4ec3b99ee3ecd7ce82

2025-01-25 12:23:38 - root - INFO - itercount: 0
2025-01-25 12:23:38 - root - INFO - Database Name: GOOG_BLOCKCHAIN
Schema Name: GOOG_BLOCKCHAIN_ARBITRUM_ONE_US
DDL describes table information.
,0
table_name,LOGS
description,
DDL,"create or replace TABLE LOGS (
	""block_hash"" VARCHAR(16777216),
	""block_number"" NUMBER(38,0),
	""block_timestamp"" NUMBER(38,0),
	""transaction_hash"" VARCHAR(16777216),
	""transaction_index"" NUMBER(38,0),
	""log_index"" NUMBER(38,0),
	""address"" VARCHAR(16777216),
	""data"" VARCHAR(16777216),
	""topics"" VARIANT,
	""removed"" BOOLEAN
);"

,1
table_name,DECODED_EVENTS
description,
DDL,"create or replace TABLE DECODED_EVENTS (
	BLOCK_HASH VARCHAR(16777216),
	BLOCK_NUMBER NUMBER(38,0),
	BLOCK_TIMESTAMP NUMBER(38,0),
	TRANSACTION_HASH VARCHAR(16777216),
	TRANSACTION_INDEX NUMBER(38,0),
	LOG_INDEX NUMBER(38,0),
	ADDRESS VARCHAR(16777216),
	EVENT_HASH VARCHAR(16777216),
	EVENT_SIGNATURE VARCHAR(16777216),
	TOPICS VARIANT,
	ARGS VARCHAR(16777216),
	REMOVED BOOLEAN
);"

External knowledge that might be helpful: 
---
title: "Optimism standard bridge contract walkthrough"
description: How does the standard bridge for Optimism work? Why does it work this way?
author: Ori Pomerantz
tags: ["solidity", "bridge", "layer 2"]
skill: intermediate
published: 2022-03-30
lang: en
---

[Optimism](https://www.optimism.io/) is an [Optimistic Rollup](/developers/docs/scaling/optimistic-rollups/).
Optimistic rollups can process transactions for a much lower price than Ethereum Mainnet (also known as layer 1 or L1) because transactions are only processed by a few nodes, instead of every node on the network.
At the same time, the data is all written to L1 so everything can be proved and reconstructed with all the integrity and availability guarantees of Mainnet.

To use L1 assets on Optimism (or any other L2), the assets need to be [bridged](/bridges/#prerequisites).
One way to achieve this is for users to lock assets (ETH and [ERC-20 tokens](/developers/docs/standards/tokens/erc-20/) are the most common ones) on L1, and receive equivalent assets to use on L2.
Eventually, whoever ends up with them might want to bridge them back to L1.
When doing this, the assets are burned on L2 and then released back to the user on L1.

This is the way the [Optimism standard bridge](https://community.optimism.io/docs/developers/bridge/standard-bridge) works.
In this article we go over the source code for that bridge to see how it works and study it as an example of well written Solidity code.

## Control flows {#control-flows}

The bridge has two main flows:

- Deposit (from L1 to L2)
- Withdrawal (from L2 to L1)

### Deposit flow {#deposit-flow}

#### Layer 1 {#deposit-flow-layer-1}

1. If depositing an ERC-20, the depositor gives the bridge an allowance to spend the amount being deposited
2. The depositor calls the L1 bridge (`depositERC20`, `depositERC20To`, `depositETH`, or `depositETHTo`)
3. The L1 bridge takes possession of the bridged asset
   - ETH: The asset is transferred by the depositor as part of the call
   - ERC-20: The asset is transferred by the bridge to itself using the allowance provided by the depositor
4. The L1 bridge uses the cross-domain message mechanism to call `finalizeDeposit` on the L2 bridge

#### Layer 2 {#deposit-flow-layer-2}

5. The L2 bridge verifies the call to `finalizeDeposit` is legitimate:
   - Came from the cross domain message contract
   - Was originally from the bridge on L1
6. The L2 bridge checks if the ERC-20 token contract on L2 is the correct one:
   - The L2 contract reports that its L1 counterpart is the same as the one the tokens came from on L1
   - The L2 contract reports that it supports the correct interface ([using ERC-165](https://eips.ethereum.org/EIPS/eip-165)).
7. If the L2 contract is the correct one, call it to mint the appropriate number of tokens to the appropriate address. If not, start a withdrawal process to allow the user to claim the tokens on L1.

### Withdrawal flow {#withdrawal-flow}

#### Layer 2 {#withdrawal-flow-layer-2}

1. The withdrawer calls the L2 bridge (`withdraw` or `withdrawTo`)
2. The L2 bridge burns the appropriate number of tokens belonging to `msg.sender`
3. The L2 bridge uses the cross-domain message mechanism to call `finalizeETHWithdrawal` or `finalizeERC20Withdrawal` on the L1 bridge

#### Layer 1 {#withdrawal-flow-layer-1}

4. The L1 bridge verifies the call to `finalizeETHWithdrawal` or `finalizeERC20Withdrawal` is legitimate:
   - Came from the cross domain message mechanism
   - Was originally from the bridge on L2
5. The L1 bridge transfers the appropriate asset (ETH or ERC-20) to the appropriate address

## Layer 1 code {#layer-1-code}

This is the code that runs on L1, the Ethereum Mainnet.

### IL1ERC20Bridge {#IL1ERC20Bridge}

[This interface is defined here](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L1/messaging/IL1ERC20Bridge.sol).
It includes functions and definitions required for bridging ERC-20 tokens.

```solidity
// SPDX-License-Identifier: MIT
```

[Most of Optimism's code is released under the MIT license](https://help.optimism.io/hc/en-us/articles/4411908707995-What-software-license-does-Optimism-use-).

```solidity
pragma solidity >0.5.0 <0.9.0;
```

At writing the latest version of Solidity is 0.8.12.
Until version 0.9.0 is released, we don't know if this code is compatible with it or not.

```solidity
/**
 * @title IL1ERC20Bridge
 */
interface IL1ERC20Bridge {
    /**********
     * Events *
     **********/

    event ERC20DepositInitiated(
```

In Optimism bridge terminology _deposit_ means transfer from L1 to L2, and _withdrawal_ means a transfer from L2 to L1.

```solidity
        address indexed _l1Token,
        address indexed _l2Token,
```

In most cases the address of an ERC-20 on L1 is not the same the address of the equivalent ERC-20 on L2.
[You can see the list of token addresses here](https://static.optimism.io/optimism.tokenlist.json).
The address with `chainId` 1 is on L1 (Mainnet) and the address with `chainId` 10 is on L2 (Optimism).
The other two `chainId` values are for the Kovan test network (42) and the Optimistic Kovan test network (69).

```solidity
        address indexed _from,
        address _to,
        uint256 _amount,
        bytes _data
    );
```

It is possible to add notes to transfers, in which case they are added to the events that report them.

```solidity
    event ERC20WithdrawalFinalized(
        address indexed _l1Token,
        address indexed _l2Token,
        address indexed _from,
        address _to,
        uint256 _amount,
        bytes _data
    );
```

The same bridge contract handles transfers in both directions.
In the case of the L1 bridge, this means initialization of deposits and finalization of withdrawals.

```solidity

    /********************
     * Public Functions *
     ********************/

    /**
     * @dev get the address of the corresponding L2 bridge contract.
     * @return Address of the corresponding L2 bridge contract.
     */
    function l2TokenBridge() external returns (address);
```

This function is not really needed, because on L2 it is a predeployed contract, so it is always at address `0x4200000000000000000000000000000000000010`.
It is here for symmetry with the L2 bridge, because the address of the L1 bridge is _not_ trivial to know.

```solidity
    /**
     * @dev deposit an amount of the ERC20 to the caller's balance on L2.
     * @param _l1Token Address of the L1 ERC20 we are depositing
     * @param _l2Token Address of the L1 respective L2 ERC20
     * @param _amount Amount of the ERC20 to deposit
     * @param _l2Gas Gas limit required to complete the deposit on L2.
     * @param _data Optional data to forward to L2. This data is provided
     *        solely as a convenience for external contracts. Aside from enforcing a maximum
     *        length, these contracts provide no guarantees about its content.
     */
    function depositERC20(
        address _l1Token,
        address _l2Token,
        uint256 _amount,
        uint32 _l2Gas,
        bytes calldata _data
    ) external;
```

The `_l2Gas` parameter is the amount of L2 gas the transaction is allowed to spend.
[Up to a certain (high) limit, this is free](https://community.optimism.io/docs/developers/bridge/messaging/#for-l1-%E2%87%92-l2-transactions-2), so unless the ERC-20 contract does something really strange when minting, it should not be an issue.
This function takes care of the common scenario, where a user bridges assets to the same address on a different blockchain.

```solidity
    /**
     * @dev deposit an amount of ERC20 to a recipient's balance on L2.
     * @param _l1Token Address of the L1 ERC20 we are depositing
     * @param _l2Token Address of the L1 respective L2 ERC20
     * @param _to L2 address to credit the withdrawal to.
     * @param _amount Amount of the ERC20 to deposit.
     * @param _l2Gas Gas limit required to complete the deposit on L2.
     * @param _data Optional data to forward to L2. This data is provided
     *        solely as a convenience for external contracts. Aside from enforcing a maximum
     *        length, these contracts provide no guarantees about its content.
     */
    function depositERC20To(
        address _l1Token,
        address _l2Token,
        address _to,
        uint256 _amount,
        uint32 _l2Gas,
        bytes calldata _data
    ) external;
```

This function is almost identical to `depositERC20`, but it lets you send the ERC-20 to a different address.

```solidity
    /*************************
     * Cross-chain Functions *
     *************************/

    /**
     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the
     * L1 ERC20 token.
     * This call will fail if the initialized withdrawal from L2 has not been finalized.
     *
     * @param _l1Token Address of L1 token to finalizeWithdrawal for.
     * @param _l2Token Address of L2 token where withdrawal was initiated.
     * @param _from L2 address initiating the transfer.
     * @param _to L1 address to credit the withdrawal to.
     * @param _amount Amount of the ERC20 to deposit.
     * @param _data Data provided by the sender on L2. This data is provided
     *   solely as a convenience for external contracts. Aside from enforcing a maximum
     *   length, these contracts provide no guarantees about its content.
     */
    function finalizeERC20Withdrawal(
        address _l1Token,
        address _l2Token,
        address _from,
        address _to,
        uint256 _amount,
        bytes calldata _data
    ) external;
}
```

Withdrawals (and other messages from L2 to L1) in Optimism are a two step process:

1. An initiating transaction on L2.
2. A finalizing or claiming transaction on L1.
   This transaction needs to happen after the [fault challenge period](https://community.optimism.io/docs/how-optimism-works/#fault-proofs) for the L2 transaction ends.

### IL1StandardBridge {#il1standardbridge}

[This interface is defined here](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L1/messaging/IL1StandardBridge.sol).
This file contains event and function definitions for ETH.
These definitions are very similar to those defined in `IL1ERC20Bridge` above for ERC-20.

The bridge interface is divided between two files because some ERC-20 tokens require custom processing and cannot be handled by the standard bridge.
This way the custom bridge that handles such a token can implement `IL1ERC20Bridge` and not have to also bridge ETH.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity >0.5.0 <0.9.0;

import "./IL1ERC20Bridge.sol";

/**
 * @title IL1StandardBridge
 */
interface IL1StandardBridge is IL1ERC20Bridge {
    /**********
     * Events *
     **********/
    event ETHDepositInitiated(
        address indexed _from,
        address indexed _to,
        uint256 _amount,
        bytes _data
    );
```

This event is nearly identical to the ERC-20 version (`ERC20DepositInitiated`), except without the L1 and L2 token addresses.
The same is true for the other events and the functions.

```solidity
    event ETHWithdrawalFinalized(
        .
        .
        .
    );

    /********************
     * Public Functions *
     ********************/

    /**
     * @dev Deposit an amount of the ETH to the caller's balance on L2.
            .
            .
            .
     */
    function depositETH(uint32 _l2Gas, bytes calldata _data) external payable;

    /**
     * @dev Deposit an amount of ETH to a recipient's balance on L2.
            .
            .
            .
     */
    function depositETHTo(
        address _to,
        uint32 _l2Gas,
        bytes calldata _data
    ) external payable;

    /*************************
     * Cross-chain Functions *
     *************************/

    /**
     * @dev Complete a withdrawal from L2 to L1, and credit funds to the recipient's balance of the
     * L1 ETH token. Since only the xDomainMessenger can call this function, it will never be called
     * before the withdrawal is finalized.
                .
                .
                .
     */
    function finalizeETHWithdrawal(
        address _from,
        address _to,
        uint256 _amount,
        bytes calldata _data
    ) external;
}
```

### CrossDomainEnabled {#crossdomainenabled}

[This contract](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/libraries/bridge/CrossDomainEnabled.sol) is inherited by both bridges ([L1](#the-l1-bridge-contract) and [L2](#the-l2-bridge-contract)) to send messages to the other layer.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity >0.5.0 <0.9.0;

/* Interface Imports */
import { ICrossDomainMessenger } from "./ICrossDomainMessenger.sol";
```

[This interface](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/libraries/bridge/ICrossDomainMessenger.sol) tells the contract how to send messages to the other layer, using the cross domain messenger.
This cross domain messenger is a whole other system, and deserves its own article, which I hope to write in the future.

```solidity
/**
 * @title CrossDomainEnabled
 * @dev Helper contract for contracts performing cross-domain communications
 *
 * Compiler used: defined by inheriting contract
 */
contract CrossDomainEnabled {
    /*************
     * Variables *
     *************/

    // Messenger contract used to send and receive messages from the other domain.
    address public messenger;

    /***************
     * Constructor *
     ***************/

    /**
     * @param _messenger Address of the CrossDomainMessenger on the current layer.
     */
    constructor(address _messenger) {
        messenger = _messenger;
    }
```

The one parameter that the contract needs to know, the address of the cross domain messenger on this layer.
This parameter is set once, in the constructor, and never changes.

```solidity

    /**********************
     * Function Modifiers *
     **********************/

    /**
     * Enforces that the modified function is only callable by a specific cross-domain account.
     * @param _sourceDomainAccount The only account on the originating domain which is
     *  authenticated to call this function.
     */
    modifier onlyFromCrossDomainAccount(address _sourceDomainAccount) {
```

The cross domain messaging is accessible by any contract on the blockchain where it is running (either Ethereum mainnet or Optimism).
But we need the bridge on each side to _only_ trust certain messages if they come from the bridge on the other side.

```solidity
        require(
            msg.sender == address(getCrossDomainMessenger()),
            "OVM_XCHAIN: messenger contract unauthenticated"
        );
```

Only messages from the appropriate cross domain messenger (`messenger`, as you see below) can be trusted.

```solidity

        require(
            getCrossDomainMessenger().xDomainMessageSender() == _sourceDomainAccount,
            "OVM_XCHAIN: wrong sender of cross-domain message"
        );
```

The way the cross domain messenger provides the address that sent a message with the other layer is [the `.xDomainMessageSender()` function](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L1/messaging/L1CrossDomainMessenger.sol#L122-L128).
As long as it is called in the transaction that was initiated by the message it can provide this information.

We need to make sure that the message we received came from the other bridge.

```solidity

        _;
    }

    /**********************
     * Internal Functions *
     **********************/

    /**
     * Gets the messenger, usually from storage. This function is exposed in case a child contract
     * needs to override.
     * @return The address of the cross-domain messenger contract which should be used.
     */
    function getCrossDomainMessenger() internal virtual returns (ICrossDomainMessenger) {
        return ICrossDomainMessenger(messenger);
    }
```

This function returns the cross domain messenger.
We use a function rather than the variable `messenger` to allow contracts that inherit from this one to use an algorithm to specify which cross domain messenger to use.

```solidity

    /**
     * Sends a message to an account on another domain
     * @param _crossDomainTarget The intended recipient on the destination domain
     * @param _message The data to send to the target (usually calldata to a function with
     *  `onlyFromCrossDomainAccount()`)
     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.
     */
    function sendCrossDomainMessage(
        address _crossDomainTarget,
        uint32 _gasLimit,
        bytes memory _message
```

Finally, the function that sends a message to the other layer.

```solidity
    ) internal {
        // slither-disable-next-line reentrancy-events, reentrancy-benign
```

[Slither](https://github.com/crytic/slither) is a static analyzer Optimism runs on every contract to look for vulnerabilities and other potential problems.
In this case, the following line triggers two vulnerabilities:

1. [Reentrancy events](https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-3)
2. [Benign reentrancy](https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2)

```solidity
        getCrossDomainMessenger().sendMessage(_crossDomainTarget, _message, _gasLimit);
    }
}
```

In this case we are not worried about reentrancy we know `getCrossDomainMessenger()` returns a trustworthy address, even if Slither has no way to know that.

### The L1 bridge contract {#the-l1-bridge-contract}

[The source code for this contract is here](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L1/messaging/L1StandardBridge.sol).

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;
```

The interfaces can be part of other contracts, so they have to support a wide range of Solidity versions.
But the bridge itself is our contract, and we can be strict about what Solidity version it uses.

```solidity
/* Interface Imports */
import { IL1StandardBridge } from "./IL1StandardBridge.sol";
import { IL1ERC20Bridge } from "./IL1ERC20Bridge.sol";
```

[IL1ERC20Bridge](#IL1ERC20Bridge) and [IL1StandardBridge](#IL1StandardBridge) are explained above.

```solidity
import { IL2ERC20Bridge } from "../../L2/messaging/IL2ERC20Bridge.sol";
```

[This interface](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L2/messaging/IL2ERC20Bridge.sol) lets us create messages to control the standard bridge on L2.

```solidity
import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
```

[This interface](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol) lets us control ERC-20 contracts.
[You can read more about it here](/developers/tutorials/erc20-annotated-code/#the-interface).

```solidity
/* Library Imports */
import { CrossDomainEnabled } from "../../libraries/bridge/CrossDomainEnabled.sol";
```

[As explained above](#crossdomainenabled), this contract is used for interlayer messaging.

```solidity
import { Lib_PredeployAddresses } from "../../libraries/constants/Lib_PredeployAddresses.sol";
```

[`Lib_PredeployAddresses`](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/libraries/constants/Lib_PredeployAddresses.sol) has the addresses for the L2 contracts that always have the same address. This includes the standard bridge on L2.

```solidity
import { Address } from "@openzeppelin/contracts/utils/Address.sol";
```

[OpenZeppelin's Address utilities](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol). It is used to distinguish between contract addresses and those belonging to externally owned accounts (EOA).

Note that this isn't a perfect solution, because there is no way to distinguish between direct calls and calls made from a contract's constructor, but at least this lets us identify and prevent some common user errors.

```solidity
import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
```

[The ERC-20 standard](https://eips.ethereum.org/EIPS/eip-20) supports two ways for a contract to report failure:

1. Revert
2. Return `false`

Handling both cases would make our code more complicated, so instead we use [OpenZeppelin's `SafeERC20`](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol), which makes sure [all failures result in a revert](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol#L96).

```solidity
/**
 * @title L1StandardBridge
 * @dev The L1 ETH and ERC20 Bridge is a contract which stores deposited L1 funds and standard
 * tokens that are in use on L2. It synchronizes a corresponding L2 Bridge, informing it of deposits
 * and listening to it for newly finalized withdrawals.
 *
 */
contract L1StandardBridge is IL1StandardBridge, CrossDomainEnabled {
    using SafeERC20 for IERC20;
```

This line is how we specify to use the `SafeERC20` wrapper every time we use the `IERC20` interface.

```solidity

    /********************************
     * External Contract References *
     ********************************/

    address public l2TokenBridge;
```

The address of [L2StandardBridge](#the-l2-bridge-contract).

```solidity

    // Maps L1 token to L2 token to balance of the L1 token deposited
    mapping(address => mapping(address => uint256)) public deposits;
```

A double [mapping](https://www.tutorialspoint.com/solidity/solidity_mappings.htm) like this is the way you define a [two-dimensional sparse array](https://en.wikipedia.org/wiki/Sparse_matrix).
Values in this data structure are identified as `deposit[L1 token addr][L2 token addr]`.
The default value is zero.
Only cells that are set to a different value are written to storage.

```solidity

    /***************
     * Constructor *
     ***************/

    // This contract lives behind a proxy, so the constructor parameters will go unused.
    constructor() CrossDomainEnabled(address(0)) {}
```

To want to be able to upgrade this contract without having to copy all the variables in the storage.
To do that we use a [`Proxy`](https://docs.openzeppelin.com/contracts/3.x/api/proxy), a contract that uses [`delegatecall`](https://solidity-by-example.org/delegatecall/) to transfer calls to a separate contact whose address is stored by the proxy contract (when you upgrade you tell the proxy to change that address).
When you use `delegatecall` the storage remains the storage of the _calling_ contract, so the values of all the contract state variables are unaffected.

One effect of this pattern is that the storage of the contract that is the _called_ of `delegatecall` is not used and therefore the constructor values passed to it do not matter.
This is the reason we can provide a nonsensical value to the `CrossDomainEnabled` constructor.
It is also the reason the initialization below is separate from the constructor.

```solidity
    /******************
     * Initialization *
     ******************/

    /**
     * @param _l1messenger L1 Messenger address being used for cross-chain communications.
     * @param _l2TokenBridge L2 standard bridge address.
     */
    // slither-disable-next-line external-function
```

This [Slither test](https://github.com/crytic/slither/wiki/Detector-Documentation#public-function-that-could-be-declared-external) identifies functions that are not called from the contract code and could therefore be declared `external` instead of `public`.
The gas cost of `external` functions can be lower, because they can be provided with parameters in the calldata.
Functions declared `public` have to be accessible from within the contract.
Contracts cannot modify their own calldata, so the parameters have to be in memory.
When such a function is called externally, it is necessary to copy the calldata to memory, which costs gas.
In this case the function is only called once, so the inefficiency does not matter to us.

```solidity
    function initialize(address _l1messenger, address _l2TokenBridge) public {
        require(messenger == address(0), "Contract has already been initialized.");
```

The `initialize` function should only be called once.
If the address of either the L1 cross domain messenger or the L2 token bridge changes, we create a new proxy and a new bridge that calls it.
This is unlikely to happen except when the entire system is upgraded, a very rare occurrence.

Note that this function does not have any mechanism that restricts _who_ can call it.
This means that in theory an attacker could wait until we deploy the proxy and the first version of the bridge and then [front-run](https://solidity-by-example.org/hacks/front-running/) to get to the `initialize` function before the legitimate user does. But there are two methods to prevent this:

1. If the contracts are deployed not directly by an EOA but [in a transaction that has another contract create them](https://medium.com/upstate-interactive/creating-a-contract-with-a-smart-contract-bdb67c5c8595) the entire process can be atomic, and finish before any other transaction is executed.
2. If the legitimate call to `initialize` fails it is always possible to ignore the newly created proxy and bridge and create new ones.

```solidity
        messenger = _l1messenger;
        l2TokenBridge = _l2TokenBridge;
    }
```

These are the two parameters that the bridge needs to know.

```solidity

    /**************
     * Depositing *
     **************/

    /** @dev Modifier requiring sender to be EOA.  This check could be bypassed by a malicious
     *  contract via initcode, but it takes care of the user error we want to avoid.
     */
    modifier onlyEOA() {
        // Used to stop deposits from contracts (avoid accidentally lost tokens)
        require(!Address.isContract(msg.sender), "Account not EOA");
        _;
    }
```

This is the reason we needed OpenZeppelin's `Address` utilities.

```solidity
    /**
     * @dev This function can be called with no data
     * to deposit an amount of ETH to the caller's balance on L2.
     * Since the receive function doesn't take data, a conservative
     * default amount is forwarded to L2.
     */
    receive() external payable onlyEOA {
        _initiateETHDeposit(msg.sender, msg.sender, 200_000, bytes(""));
    }
```

This function exists for testing purposes.
Notice that it doesn't appear in the interface definitions - it isn't for normal use.

```solidity
    /**
     * @inheritdoc IL1StandardBridge
     */
    function depositETH(uint32 _l2Gas, bytes calldata _data) external payable onlyEOA {
        _initiateETHDeposit(msg.sender, msg.sender, _l2Gas, _data);
    }

    /**
     * @inheritdoc IL1StandardBridge
     */
    function depositETHTo(
        address _to,
        uint32 _l2Gas,
        bytes calldata _data
    ) external payable {
        _initiateETHDeposit(msg.sender, _to, _l2Gas, _data);
    }
```

These two functions are wrappers around `_initiateETHDeposit`, the function that handles the actual ETH deposit.

```solidity
    /**
     * @dev Performs the logic for deposits by storing the ETH and informing the L2 ETH Gateway of
     * the deposit.
     * @param _from Account to pull the deposit from on L1.
     * @param _to Account to give the deposit to on L2.
     * @param _l2Gas Gas limit required to complete the deposit on L2.
     * @param _data Optional data to forward to L2. This data is provided
     *        solely as a convenience for external contracts. Aside from enforcing a maximum
     *        length, these contracts provide no guarantees about its content.
     */
    function _initiateETHDeposit(
        address _from,
        address _to,
        uint32 _l2Gas,
        bytes memory _data
    ) internal {
        // Construct calldata for finalizeDeposit call
        bytes memory message = abi.encodeWithSelector(
```

The way that cross domain messages work is that the destination contract is called with the message as its calldata.
Solidity contracts always interpret their calldata in accordance with
[the ABI specifications](https://docs.soliditylang.org/en/v0.8.12/abi-spec.html).
The Solidity function [`abi.encodeWithSelector`](https://docs.soliditylang.org/en/v0.8.12/units-and-global-variables.html#abi-encoding-and-decoding-functions) creates that calldata.

```solidity
            IL2ERC20Bridge.finalizeDeposit.selector,
            address(0),
            Lib_PredeployAddresses.OVM_ETH,
            _from,
            _to,
            msg.value,
            _data
        );
```

The message here is to call [the `finalizeDeposit` function](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L2/messaging/L2StandardBridge.sol#L141-L148) with these parameters:

| Parameter | Value                          | Meaning                                                                                                                                      |
| --------- | ------------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------- |
| \_l1Token | address(0)                     | Special value to stand for ETH (which isn't an ERC-20 token) on L1                                                                           |
| \_l2Token | Lib_PredeployAddresses.OVM_ETH | The L2 contract that manages ETH on Optimism, `0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000` (this contract is for internal Optimism use only) |
| \_from    | \_from                         | The address on L1 that sends the ETH                                                                                                         |
| \_to      | \_to                           | The address on L2 that receives the ETH                                                                                                      |
| amount    | msg.value                      | Amount of wei sent (which has already been sent to the bridge)                                                                               |
| \_data    | \_data                         | Additional data to attach to the deposit                                                                                                     |

```solidity
        // Send calldata into L2
        // slither-disable-next-line reentrancy-events
        sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);
```

Send the message through the cross domain messenger.

```solidity
        // slither-disable-next-line reentrancy-events
        emit ETHDepositInitiated(_from, _to, msg.value, _data);
    }
```

Emit an event to inform any decentralized application that listens of this transfer.

```solidity
    /**
     * @inheritdoc IL1ERC20Bridge
     */
    function depositERC20(
		.
		.
		.
    ) external virtual onlyEOA {
        _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, msg.sender, _amount, _l2Gas, _data);
    }

    /**
     * @inheritdoc IL1ERC20Bridge
     */
    function depositERC20To(
		.
		.
		.
    ) external virtual {
        _initiateERC20Deposit(_l1Token, _l2Token, msg.sender, _to, _amount, _l2Gas, _data);
    }
```

These two functions are wrappers around `_initiateERC20Deposit`, the function that handles the actual ERC-20 deposit.

```solidity
    /**
     * @dev Performs the logic for deposits by informing the L2 Deposited Token
     * contract of the deposit and calling a handler to lock the L1 funds. (e.g. transferFrom)
     *
     * @param _l1Token Address of the L1 ERC20 we are depositing
     * @param _l2Token Address of the L1 respective L2 ERC20
     * @param _from Account to pull the deposit from on L1
     * @param _to Account to give the deposit to on L2
     * @param _amount Amount of the ERC20 to deposit.
     * @param _l2Gas Gas limit required to complete the deposit on L2.
     * @param _data Optional data to forward to L2. This data is provided
     *        solely as a convenience for external contracts. Aside from enforcing a maximum
     *        length, these contracts provide no guarantees about its content.
     */
    function _initiateERC20Deposit(
        address _l1Token,
        address _l2Token,
        address _from,
        address _to,
        uint256 _amount,
        uint32 _l2Gas,
        bytes calldata _data
    ) internal {
```

This function is similar to `_initiateETHDeposit` above, with a few important differences.
The first difference is that this function receives the token addresses and the amount to transfer as parameters.
In the case of ETH the call to the bridge already includes the transfer of asset to the bridge account (`msg.value`).

```solidity
        // When a deposit is initiated on L1, the L1 Bridge transfers the funds to itself for future
        // withdrawals. safeTransferFrom also checks if the contract has code, so this will fail if
        // _from is an EOA or address(0).
        // slither-disable-next-line reentrancy-events, reentrancy-benign
        IERC20(_l1Token).safeTransferFrom(_from, address(this), _amount);
```

ERC-20 token transfers follow a different process from ETH:

1. The user (`_from`) gives an allowance to the bridge to transfer the appropriate tokens.
2. The user calls the bridge with the address of the token contract, the amount, etc.
3. The bridge transfers the tokens (to itself) as part of the deposit process.

The first step may happen in a separate transaction from the last two.
However, front-running is not a problem because the two functions that call `_initiateERC20Deposit` (`depositERC20` and `depositERC20To`) only call this function with `msg.sender` as the `_from` parameter.

```solidity
        // Construct calldata for _l2Token.finalizeDeposit(_to, _amount)
        bytes memory message = abi.encodeWithSelector(
            IL2ERC20Bridge.finalizeDeposit.selector,
            _l1Token,
            _l2Token,
            _from,
            _to,
            _amount,
            _data
        );

        // Send calldata into L2
        // slither-disable-next-line reentrancy-events, reentrancy-benign
        sendCrossDomainMessage(l2TokenBridge, _l2Gas, message);

        // slither-disable-next-line reentrancy-benign
        deposits[_l1Token][_l2Token] = deposits[_l1Token][_l2Token] + _amount;
```

Add the deposited amount of tokens to the `deposits` data structure.
There could be multiple addresses on L2 that correspond to the same L1 ERC-20 token, so it is not sufficient to use the bridge's balance of the L1 ERC-20 token to keep track of deposits.

```solidity

        // slither-disable-next-line reentrancy-events
        emit ERC20DepositInitiated(_l1Token, _l2Token, _from, _to, _amount, _data);
    }

    /*************************
     * Cross-chain Functions *
     *************************/

    /**
     * @inheritdoc IL1StandardBridge
     */
    function finalizeETHWithdrawal(
        address _from,
        address _to,
        uint256 _amount,
        bytes calldata _data
```

The L2 bridge sends a message to the L2 cross domain messenger which causes the L1 cross domain messenger to call this function (once the [transaction that finalizes the message](https://community.optimism.io/docs/developers/bridge/messaging/#fees-for-l2-%E2%87%92-l1-transactions) is submitted on L1, of course).

```solidity
    ) external onlyFromCrossDomainAccount(l2TokenBridge) {
```

Make sure that this is a _legitimate_ message, coming from the cross domain messenger and originating with the L2 token bridge.
This function is used to withdraw ETH from the bridge, so we have to make sure it is only called by the authorized caller.

```solidity
        // slither-disable-next-line reentrancy-events
        (bool success, ) = _to.call{ value: _amount }(new bytes(0));
```

The way to transfer ETH is to call the recipient with the amount of wei in the `msg.value`.

```solidity
        require(success, "TransferHelper::safeTransferETH: ETH transfer failed");

        // slither-disable-next-line reentrancy-events
        emit ETHWithdrawalFinalized(_from, _to, _amount, _data);
```

Emit an event about the withdrawal.

```solidity
    }

    /**
     * @inheritdoc IL1ERC20Bridge
     */
    function finalizeERC20Withdrawal(
        address _l1Token,
        address _l2Token,
        address _from,
        address _to,
        uint256 _amount,
        bytes calldata _data
    ) external onlyFromCrossDomainAccount(l2TokenBridge) {
```

This function is similar to `finalizeETHWithdrawal` above, with the necessary changes for ERC-20 tokens.

```solidity
        deposits[_l1Token][_l2Token] = deposits[_l1Token][_l2Token] - _amount;
```

Update the `deposits` data structure.

```solidity

        // When a withdrawal is finalized on L1, the L1 Bridge transfers the funds to the withdrawer
        // slither-disable-next-line reentrancy-events
        IERC20(_l1Token).safeTransfer(_to, _amount);

        // slither-disable-next-line reentrancy-events
        emit ERC20WithdrawalFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);
    }


    /*****************************
     * Temporary - Migrating ETH *
     *****************************/

    /**
     * @dev Adds ETH balance to the account. This is meant to allow for ETH
     * to be migrated from an old gateway to a new gateway.
     * NOTE: This is left for one upgrade only so we are able to receive the migrated ETH from the
     * old contract
     */
    function donateETH() external payable {}
}
```

There was an earlier implementation of the bridge.
When we moved from the implementation to this one, we had to move all the assets.
ERC-20 tokens can just be moved.
However, to transfer ETH to a contract you need that contract's approval, which is what `donateETH` provides us.

## ERC-20 Tokens on L2 {#erc-20-tokens-on-l2}

For an ERC-20 token to fit into the standard bridge, it needs to allow the standard bridge, and _only_ the standard bridge, to mint token.
This is necessary because the bridges need to ensure that the number of tokens circulating on Optimism is equal to the number of tokens locked inside the L1 bridge contract.
If there are too many tokens on L2 some users would be unable to bridge their assets back to L1.
Instead of a trusted bridge, we would essentially recreate [fractional reserve banking](https://www.investopedia.com/terms/f/fractionalreservebanking.asp).
If there are too many tokens on L1, some of those tokens would stay locked inside the bridge contract forever because there is no way to release them without burning L2 tokens.

### IL2StandardERC20 {#il2standarderc20}

Every ERC-20 token on L2 that uses the standard bridge needs to provide [this interface](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/standards/IL2StandardERC20.sol), which has the functions and events that the standard bridge needs.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
```

[The standard ERC-20 interface](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol) does not include the `mint` and `burn` functions.
Those methods are not required by [the ERC-20 standard](https://eips.ethereum.org/EIPS/eip-20), which leaves unspecified the mechanisms to create and destroy tokens.

```solidity
import { IERC165 } from "@openzeppelin/contracts/utils/introspection/IERC165.sol";
```

[The ERC-165 interface](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol) is used to specify what functions a contract provides.
[You can read the standard here](https://eips.ethereum.org/EIPS/eip-165).

```solidity
interface IL2StandardERC20 is IERC20, IERC165 {
    function l1Token() external returns (address);
```

This function provides the address of the L1 token which is bridged to this contract.
Note that we do not have a similar function in the opposite direction.
We need to be able to bridge any L1 token, regardless of whether L2 support was planned when it was implemented or not.

```solidity

    function mint(address _to, uint256 _amount) external;

    function burn(address _from, uint256 _amount) external;

    event Mint(address indexed _account, uint256 _amount);
    event Burn(address indexed _account, uint256 _amount);
}
```

Functions and events to mint (create) and burn (destroy) tokens.
The bridge should be the only entity that can run these functions to ensure the number of tokens is correct (equal to the number of tokens locked on L1).

### L2StandardERC20 {#L2StandardERC20}

[This is our implementation of the `IL2StandardERC20` interface](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/standards/L2StandardERC20.sol).
Unless you need some kind of custom logic, you should use this one.

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import { ERC20 } from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
```

[The OpenZeppelin ERC-20 contract](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol).
Optimism does not believe in reinventing the wheel, especially when the wheel is well audited and needs to be trustworthy enough to hold assets.

```solidity
import "./IL2StandardERC20.sol";

contract L2StandardERC20 is IL2StandardERC20, ERC20 {
    address public l1Token;
    address public l2Bridge;
```

These are the two additional configuration parameters that we require and ERC-20 normally does not.

```solidity

    /**
     * @param _l2Bridge Address of the L2 standard bridge.
     * @param _l1Token Address of the corresponding L1 token.
     * @param _name ERC20 name.
     * @param _symbol ERC20 symbol.
     */
    constructor(
        address _l2Bridge,
        address _l1Token,
        string memory _name,
        string memory _symbol
    ) ERC20(_name, _symbol) {
        l1Token = _l1Token;
        l2Bridge = _l2Bridge;
    }
```

First call the constructor for the contract we inherit from (`ERC20(_name, _symbol)`) and then set our own variables.

```solidity

    modifier onlyL2Bridge() {
        require(msg.sender == l2Bridge, "Only L2 Bridge can mint and burn");
        _;
    }


    // slither-disable-next-line external-function
    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {
        bytes4 firstSupportedInterface = bytes4(keccak256("supportsInterface(bytes4)")); // ERC165
        bytes4 secondSupportedInterface = IL2StandardERC20.l1Token.selector ^
            IL2StandardERC20.mint.selector ^
            IL2StandardERC20.burn.selector;
        return _interfaceId == firstSupportedInterface || _interfaceId == secondSupportedInterface;
    }
```

This is the way [ERC-165](https://eips.ethereum.org/EIPS/eip-165) works.
Every interface is a number of supported functions, and is identified as the [exclusive or](https://en.wikipedia.org/wiki/Exclusive_or) of the [ABI function selectors](https://docs.soliditylang.org/en/v0.8.12/abi-spec.html#function-selector) of those functions.

The L2 bridge uses ERC-165 as a sanity check to make sure that the ERC-20 contract to which it sends assets is an `IL2StandardERC20`.

**Note:** There is nothing to prevent rogue contract from providing false answers to `supportsInterface`, so this is a sanity check mechanism, _not_ a security mechanism.

```solidity
    // slither-disable-next-line external-function
    function mint(address _to, uint256 _amount) public virtual onlyL2Bridge {
        _mint(_to, _amount);

        emit Mint(_to, _amount);
    }

    // slither-disable-next-line external-function
    function burn(address _from, uint256 _amount) public virtual onlyL2Bridge {
        _burn(_from, _amount);

        emit Burn(_from, _amount);
    }
}
```

Only the L2 bridge is allowed to mint and burn assets.

`_mint` and `_burn` are actually defined in the [OpenZeppelin ERC-20 contract](/developers/tutorials/erc20-annotated-code/#the-_mint-and-_burn-functions-_mint-and-_burn).
That contract just doesn't expose them externally, because the conditions to mint and burn tokens are as varied as the number of ways to use ERC-20.

## L2 Bridge Code {#l2-bridge-code}

This is code that runs the bridge on Optimism.
[The source for this contract is here](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L2/messaging/L2StandardBridge.sol).

```solidity
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

/* Interface Imports */
import { IL1StandardBridge } from "../../L1/messaging/IL1StandardBridge.sol";
import { IL1ERC20Bridge } from "../../L1/messaging/IL1ERC20Bridge.sol";
import { IL2ERC20Bridge } from "./IL2ERC20Bridge.sol";
```

The [IL2ERC20Bridge](https://github.com/ethereum-optimism/optimism/blob/develop/packages/contracts/contracts/L2/messaging/IL2ERC20Bridge.sol) interface is very similar to the [L1 equivalent](#IL1ERC20Bridge) we saw above.
There are two significant differences:

1. On L1 you initiate deposits and finalize withdrawals.
   Here you initiate withdrawals and finalize deposits.
2. On L1 it is necessary to distinguish between ETH and ERC-20 tokens.
   On L2 we can use the same functions for both because internally ETH balances on Optimism are handled as an ERC-20 token with the address [0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000](https://optimistic.etherscan.io/address/0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000).

```solidity
/* Library Imports */
import { ERC165Checker } from "@openzeppelin/contracts/utils/introspection/ERC165Checker.sol";
import { CrossDomainEnabled } from "../../libraries/bridge/CrossDomainEnabled.sol";
import { Lib_PredeployAddresses } from "../../libraries/constants/Lib_PredeployAddresses.sol";

/* Contract Imports */
import { IL2StandardERC20 } from "../../standards/IL2StandardERC20.sol";

/**
 * @title L2StandardBridge
 * @dev The L2 Standard bridge is a contract which works together with the L1 Standard bridge to
 * enable ETH and ERC20 transitions between L1 and L2.
 * This contract acts as a minter for new tokens when it hears about deposits into the L1 Standard
 * bridge.
 * This contract also acts as a burner of the tokens intended for withdrawal, informing the L1
 * bridge to release L1 funds.
 */
contract L2StandardBridge is IL2ERC20Bridge, CrossDomainEnabled {
    /********************************
     * External Contract References *
     ********************************/

    address public l1TokenBridge;
```

Keep track of the address of the L1 bridge.
Note that in contrast to the L1 equivalent, here we _need_ this variable.
The address of the L1 bridge is not known in advance.

```solidity

    /***************
     * Constructor *
     ***************/

    /**
     * @param _l2CrossDomainMessenger Cross-domain messenger used by this contract.
     * @param _l1TokenBridge Address of the L1 bridge deployed to the main chain.
     */
    constructor(address _l2CrossDomainMessenger, address _l1TokenBridge)
        CrossDomainEnabled(_l2CrossDomainMessenger)
    {
        l1TokenBridge = _l1TokenBridge;
    }

    /***************
     * Withdrawing *
     ***************/

    /**
     * @inheritdoc IL2ERC20Bridge
     */
    function withdraw(
        address _l2Token,
        uint256 _amount,
        uint32 _l1Gas,
        bytes calldata _data
    ) external virtual {
        _initiateWithdrawal(_l2Token, msg.sender, msg.sender, _amount, _l1Gas, _data);
    }

    /**
     * @inheritdoc IL2ERC20Bridge
     */
    function withdrawTo(
        address _l2Token,
        address _to,
        uint256 _amount,
        uint32 _l1Gas,
        bytes calldata _data
    ) external virtual {
        _initiateWithdrawal(_l2Token, msg.sender, _to, _amount, _l1Gas, _data);
    }
```

These two functions initiate withdrawals.
Note that there is no needs to specify the L1 token address.
L2 tokens are expected to tell us the L1 equivalent's address.

```solidity

    /**
     * @dev Performs the logic for withdrawals by burning the token and informing
     *      the L1 token Gateway of the withdrawal.
     * @param _l2Token Address of L2 token where withdrawal is initiated.
     * @param _from Account to pull the withdrawal from on L2.
     * @param _to Account to give the withdrawal to on L1.
     * @param _amount Amount of the token to withdraw.
     * @param _l1Gas Unused, but included for potential forward compatibility considerations.
     * @param _data Optional data to forward to L1. This data is provided
     *        solely as a convenience for external contracts. Aside from enforcing a maximum
     *        length, these contracts provide no guarantees about its content.
     */
    function _initiateWithdrawal(
        address _l2Token,
        address _from,
        address _to,
        uint256 _amount,
        uint32 _l1Gas,
        bytes calldata _data
    ) internal {
        // When a withdrawal is initiated, we burn the withdrawer's funds to prevent subsequent L2
        // usage
        // slither-disable-next-line reentrancy-events
        IL2StandardERC20(_l2Token).burn(msg.sender, _amount);
```

Notice that we are _not_ relying on the `_from` parameter but on `msg.sender` which is a lot harder to fake (impossible, as far as I know).

```solidity

        // Construct calldata for l1TokenBridge.finalizeERC20Withdrawal(_to, _amount)
        // slither-disable-next-line reentrancy-events
        address l1Token = IL2StandardERC20(_l2Token).l1Token();
        bytes memory message;

        if (_l2Token == Lib_PredeployAddresses.OVM_ETH) {
```

On L1 it is necessary to distinguish between ETH and ERC-20.

```solidity
            message = abi.encodeWithSelector(
                IL1StandardBridge.finalizeETHWithdrawal.selector,
                _from,
                _to,
                _amount,
                _data
            );
        } else {
            message = abi.encodeWithSelector(
                IL1ERC20Bridge.finalizeERC20Withdrawal.selector,
                l1Token,
                _l2Token,
                _from,
                _to,
                _amount,
                _data
            );
        }

        // Send message up to L1 bridge
        // slither-disable-next-line reentrancy-events
        sendCrossDomainMessage(l1TokenBridge, _l1Gas, message);

        // slither-disable-next-line reentrancy-events
        emit WithdrawalInitiated(l1Token, _l2Token, msg.sender, _to, _amount, _data);
    }

    /************************************
     * Cross-chain Function: Depositing *
     ************************************/

    /**
     * @inheritdoc IL2ERC20Bridge
     */
    function finalizeDeposit(
        address _l1Token,
        address _l2Token,
        address _from,
        address _to,
        uint256 _amount,
        bytes calldata _data
```

This function is called by `L1StandardBridge`.

```solidity
    ) external virtual onlyFromCrossDomainAccount(l1TokenBridge) {
```

Make sure the source of the message is legitimate.
This is important because this function calls `_mint` and could be used to give tokens that are not covered by tokens the bridge owns on L1.

```solidity
        // Check the target token is compliant and
        // verify the deposited token on L1 matches the L2 deposited token representation here
        if (
            // slither-disable-next-line reentrancy-events
            ERC165Checker.supportsInterface(_l2Token, 0x1d1d8b63) &&
            _l1Token == IL2StandardERC20(_l2Token).l1Token()
```

Sanity checks:

1. The correct interface is supported
2. The L2 ERC-20 contract's L1 address matches the L1 source of the tokens

```solidity
        ) {
            // When a deposit is finalized, we credit the account on L2 with the same amount of
            // tokens.
            // slither-disable-next-line reentrancy-events
            IL2StandardERC20(_l2Token).mint(_to, _amount);
            // slither-disable-next-line reentrancy-events
            emit DepositFinalized(_l1Token, _l2Token, _from, _to, _amount, _data);
```

If the sanity checks pass, finalize the deposit:

1. Mint the tokens
2. Emit the appropriate event

```solidity
        } else {
            // Either the L2 token which is being deposited-into disagrees about the correct address
            // of its L1 token, or does not support the correct interface.
            // This should only happen if there is a  malicious L2 token, or if a user somehow
            // specified the wrong L2 token address to deposit into.
            // In either case, we stop the process here and construct a withdrawal
            // message so that users can get their funds out in some cases.
            // There is no way to prevent malicious token contracts altogether, but this does limit
            // user error and mitigate some forms of malicious contract behavior.
```

If a user made a detectable error by using the wrong L2 token address, we want to cancel the deposit and return the tokens on L1.
The only way we can do this from L2 is to send a message that will have to wait the fault challenge period, but that is much better for the user than losing the tokens permanently.

```solidity
            bytes memory message = abi.encodeWithSelector(
                IL1ERC20Bridge.finalizeERC20Withdrawal.selector,
                _l1Token,
                _l2Token,
                _to, // switched the _to and _from here to bounce back the deposit to the sender
                _from,
                _amount,
                _data
            );

            // Send message up to L1 bridge
            // slither-disable-next-line reentrancy-events
            sendCrossDomainMessage(l1TokenBridge, 0, message);
            // slither-disable-next-line reentrancy-events
            emit DepositFailed(_l1Token, _l2Token, _from, _to, _amount, _data);
        }
    }
}
```

## Conclusion {#conclusion}

The standard bridge is the most flexible mechanism for asset transfers.
However, because it is so generic it is not always the easiest mechanism to use.
Especially for withdrawals, most users prefer to use [third party bridges](https://www.optimism.io/apps/bridges) that do not wait the challenge period and do not require a Merkle proof to finalize the withdrawal.

These bridges typically work by having assets on L1, which they provide immediately for a small fee (often less than the cost of gas for a standard bridge withdrawal).
When the bridge (or the people running it) anticipates being short on L1 assets it transfers sufficient assets from L2. As these are very big withdrawals, the withdrawal cost is amortized over a large amount and is a much smaller percentage.

Hopefully this article helped you understand more about how layer 2 works, and how to write Solidity code that is clear and secure.

The table structure information is ({database name: {schema name: {table name}}}): 
{'GOOG_BLOCKCHAIN': {'GOOG_BLOCKCHAIN_ARBITRUM_ONE_US': ['DECODED_EVENTS', 'LOGS']}}
Begin Exploring Related Columns
Sure, let's begin by identifying the relevant tables, columns, and potential conditions for the task.

**Relevant Tables and Columns:**

**Table:** `GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS`

- **"BLOCK_NUMBER"**: Used to filter events at block `29815485`.
- **"EVENT_HASH"**: To identify the `DepositFinalized` event using its keccak-256 hash `"0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8"`.
- **"TRANSACTION_HASH"**: Required to retrieve the transaction hash.
- **"ADDRESS"**: The address of the contract that emitted the event (possibly the Optimism Standard Bridge).
- **"ARGS"**: Contains the event arguments in a JSON-like string format. We'll parse this to extract:
  - **"l1Token"**: The L1 token address.
  - **"l2Token"**: The L2 token address.
  - **"from"**: The sender address.
  - **"to"**: The receiver address.
  - **"amount"**: The deposited amount (may need conversion from hex to decimal).
- **"EVENT_SIGNATURE"**: Provides the event signature; useful for verification.
- **"TOPICS"**: Contains indexed parameters of the event (of type VARIANT).

**Potential Conditions:**

- Filter for block number `29815485`:
  - `"BLOCK_NUMBER" = 29815485`
- Filter for the `DepositFinalized` event:
  - `"EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8'"`

---

**SQL Queries to Explore the Data:**

1. **Select basic information from the specified block:**

   ```sql
   SELECT "BLOCK_NUMBER", "TRANSACTION_HASH", "ARGS"
   FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
   WHERE "BLOCK_NUMBER" = 29815485
   LIMIT 100;
   ```

2. **Filter events by the specific `EVENT_HASH` for `DepositFinalized`:**

   ```sql
   SELECT "BLOCK_NUMBER", "TRANSACTION_HASH", "EVENT_HASH", "ARGS"
   FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
   WHERE "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8'
   LIMIT 100;
   ```

3. **Combine both conditions to narrow down to the specific events:**

   ```sql
   SELECT "BLOCK_NUMBER", "TRANSACTION_HASH", "EVENT_HASH", "ARGS"
   FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
   WHERE "BLOCK_NUMBER" = 29815485
     AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8'
   LIMIT 100;
   ```

4. **Retrieve the event signature for verification:**

   ```sql
   SELECT DISTINCT "EVENT_SIGNATURE"
   FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
   WHERE "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8'
   LIMIT 100;
   ```

5. **Extract the ARGS column as JSON to parse it:**

   ```sql
   SELECT "TRANSACTION_HASH", parse_json("ARGS") AS "ARGS_JSON"
   FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
   WHERE "BLOCK_NUMBER" = 29815485
     AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8'
   LIMIT 100;
   ```

6. **Extract specific fields from the parsed ARGS JSON:**

   ```sql
   SELECT
     "TRANSACTION_HASH",
     "ARGS_JSON":l1Token::STRING AS "L1_TOKEN_ADDRESS",
     "ARGS_JSON":l2Token::STRING AS "L2_TOKEN_ADDRESS",
     "ARGS_JSON":"from"::STRING AS "FROM_ADDRESS",
     "ARGS_JSON":"to"::STRING AS "TO_ADDRESS",
     "ARGS_JSON":amount::STRING AS "AMOUNT"
   FROM (
     SELECT "TRANSACTION_HASH", parse_json("ARGS") AS "ARGS_JSON"
     FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
     WHERE "BLOCK_NUMBER" = 29815485
       AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8'
   )
   LIMIT 100;
   ```

7. **Remove the '0x' prefix and leading zeros from addresses (except in `TRANSACTION_HASH`):**

   ```sql
   SELECT
     "TRANSACTION_HASH",
     REGEXP_REPLACE("ARGS_JSON":l1Token::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
     REGEXP_REPLACE("ARGS_JSON":l2Token::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
     REGEXP_REPLACE("ARGS_JSON":"from"::STRING, '^0x0*', '') AS "FROM_ADDRESS",
     REGEXP_REPLACE("ARGS_JSON":"to"::STRING, '^0x0*', '') AS "TO_ADDRESS",
     "ARGS_JSON":amount::STRING AS "AMOUNT"
   FROM (
     SELECT "TRANSACTION_HASH", parse_json("ARGS") AS "ARGS_JSON"
     FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
     WHERE "BLOCK_NUMBER" = 29815485
       AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8'
   )
   LIMIT 100;
   ```

8. **Create the Etherscan links for the transactions:**

   ```sql
   SELECT
     "TRANSACTION_HASH",
     CONCAT('https://etherscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK"
   FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
   WHERE "BLOCK_NUMBER" = 29815485
   LIMIT 100;
   ```

9. **Attempt to convert the `amount` from hex to decimal (assuming it's in hex):**

   ```sql
   SELECT
     "TRANSACTION_HASH",
     "ARGS_JSON":amount::STRING AS "AMOUNT_HEX",
     TRY_TO_NUMBER("ARGS_JSON":amount::STRING, 16) AS "AMOUNT_DECIMAL"
   FROM (
     SELECT "TRANSACTION_HASH", parse_json("ARGS") AS "ARGS_JSON"
     FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
     WHERE "BLOCK_NUMBER" = 29815485
       AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8'
   )
   LIMIT 100;
   ```

10. **Count the number of `DepositFinalized` events at the specified block:**

    ```sql
    SELECT COUNT(*) AS "EVENT_COUNT"
    FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
    WHERE "BLOCK_NUMBER" = 29815485
      AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
    ```

11. **Retrieve all distinct sender and receiver addresses involved:**

    ```sql
    SELECT DISTINCT
      REGEXP_REPLACE("ARGS_JSON":"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
      REGEXP_REPLACE("ARGS_JSON":"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS"
    FROM (
      SELECT parse_json("ARGS") AS "ARGS_JSON"
      FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
      WHERE "BLOCK_NUMBER" = 29815485
        AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8'
    )
    LIMIT 100;
    ```

12. **Extract and format all required fields for the task:**

    ```sql
    SELECT
      "TRANSACTION_HASH",
      CONCAT('https://etherscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
      REGEXP_REPLACE("ARGS_JSON":l1Token::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
      REGEXP_REPLACE("ARGS_JSON":l2Token::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
      REGEXP_REPLACE("ARGS_JSON":"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
      REGEXP_REPLACE("ARGS_JSON":"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
      TRY_TO_NUMBER(REGEXP_REPLACE("ARGS_JSON":amount::STRING, '^0x', ''), 16) AS "AMOUNT_DECIMAL"
    FROM (
      SELECT "TRANSACTION_HASH", parse_json("ARGS") AS "ARGS_JSON"
      FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
      WHERE "BLOCK_NUMBER" = 29815485
        AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8'
    )
    LIMIT 100;
    ```

---

Please note that these queries are designed to explore the data and understand the structure of the relevant columns. They range from simple selections to more complex parsing and data manipulation, adhering to the requirements specified.Query:
SELECT
  l."transaction_hash" AS "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', l."transaction_hash") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(l."address", '^0x0*', '') AS "CONTRACT_ADDRESS",
  l."data" AS "DATA",
  t.value::STRING AS "TOPIC"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."LOGS" l,
LATERAL FLATTEN(input => l."topics") t
LIMIT 100;
Answer:
Too long, hard cut:
TRANSACTION_HASH,ETHERSCAN_LINK,CONTRACT_ADDRESS,DATA,TOPIC
0x4af1f3987df08ce533cd61472cdf5100a44c236d332c3283058e586e4ec26a07,https://arbiscan.io/tx/0x4af1f3987df08ce533cd61472cdf5100a44c236d332c3283058e586e4ec26a07,4d73adb72bc3dd368966edd0f0b2148401a178e2,0x000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002d400000000000f6abe006e352d8275aae3e0c2404d9f68f6cee084b5beb3dd006a9d1b1669c73b033dfe47ae5a0164ab96df25b9440000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000057e4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043b2c49f18600000000000000000000000000000000000000000000000000000000001d3e00000000000000000000000000000000000000000000000000000000000000003900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044400000000000000000000000000000000000000000000000000000000001d427d00000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001451af494f1b4d3f77835951fa827d66fc4a18dae800000000000000000000000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000286185f19838238000000000000000000000000afe8561ef64375b35f5be9ec44c0b88cffa116c8000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee00000000000000000000000000000000000000000000000001bf0cef920b20e0000000000000000000000000,0xe9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82
0x44177162c35ababbec9578b37756e4cdd0fad5e19e5fad2b1aa543d6ed7251a0,https://arbiscan.io/tx/0x44177162c35ababbec9578b37756e4cdd0fad5e19e5fad2b1aa543d6ed7251a0,4d73adb72bc3dd368966edd0f0b2148401a178e2,0x13ef352274882c080595fd8e23d848e3edbad1c44ca6c7a114ff3cbe2049c87213ef352274882c080595fd8e23d848e3edbad1c44ca6c7a114ff3cbe2049c8720000000000000000000000000000000000000000000000000000000000000014,0x74bbc026808dcba59692d6a8bb20596849ca718e10e2432c6cdf48af865bc5d9
0x44177162c35ababbec9578b37756e4cdd0fad5e19e5fad2b1aa543d6ed7251a0,https://arbiscan.io/tx/0x44177162c35ababbec9578b37756e4cdd0fad5e19e5fad2b1aa543d6ed7251a0,4d73adb72bc3dd368966edd0f0b2148401a178e2,0x13ef352274882c080595fd8e23d848e3edbad1c44ca6c7a114ff3cbe2049c87213ef352274882c080595fd8e23d848e3edbad1c44ca6c7a114ff3cbe2049c8720000000000000000000000000000000000000000000000000000000000000014,0x000000000000000000000000000000000000000000000000000000000000006f
0x44177162c35ababbec9578b37756e4cdd0fad5e19e5fad2b1aa543d6ed7251a0,https://arbiscan.io/tx/0x44177162c35ababbec9578b37756e4cdd0fad5e19e5fad2b1aa543d6ed7251a0,4d73adb72bc3dd368966edd0f0b2148401a178e2,0x13ef352274882c080595fd8e23d848e3edbad1c44ca6c7a114ff3cbe2049c87213ef352274882c080595fd8e23d848e3edbad1c44ca6c7a114ff3cbe2049c8720000000000000000000000000000000000000000000000000000000000000014,0x000000000000000000000000a0cc33dd6f4819d473226257792afe230ec3c67f
0x7c5fc50d24060f29f7f187921279cfabde55a98402b2035291dbb4d9d96ed601,https://arbiscan.io/tx/0x7c5fc50d24060f29f7f187921279cfabde55a98402b2035291dbb4d9d96ed601,a0cc33dd6f4819d473226257792afe230ec3c67f,0x000000000000000000000000000000000000000000000000000000000000006600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000014000000000000000000000000352d8275aae3e0c2404d9f68f6cee084b5beb3dd00000000000000000000000000000000000000000000000000000d3e5b19f464,0x4e41ee13e03cd5e0446487b524fdc48af6acf26c074dacdbdfb6b574b42c8146
0x67a0fd1770ef63635ee0f84ded275ababcc171f85931fc9e88eecc770329e5c9,https://arbiscan.io/tx/0x67a0fd1770ef63635ee0f84ded275ababcc171f85931fc9e88eecc770329e5c9,a03e32a42c75fdddc9a39973ddd082f147393154,0x000000000000000000000000000000000000000000000000000000000a5f4f1d0000000000000000000000000000000000000000000000000000000fe434dd9000000000000000000000000000000000000000000000000000000004acd0e33d,0xd246da22fc6064e2fae4f4affdb9425eac12bebcf4f08fb3892f08480513752e
0x67a0fd1770ef63635ee0f84ded275ababcc171f85931fc9e88eecc770329e5c9,https://arbiscan.io/tx/0x67a0fd1770ef63635ee0f84ded275ababcc171f85931fc9e88eecc770329e5c9,a03e32a42c75fdddc9a39973ddd082f147393154,0x000000000000000000000000000000000000000000000000000000000a5f4f1d0000000000000000000000000000000000000000000000000000000fe434dd9000000000000000000000000000000000000000000000000000000004acd0e33d,0x0000000000000000000000000000000000000000000000000000000000000002
0x4709e0339c8037f67bd54567df7840e3ca9465cee1ec9a2fdb53a770075f0ef8,https://arbiscan.io/tx/0x4709e0339c8037f67bd54567df7840e3ca9465cee1ec9a2fdb53a770075f0ef8,f45f2903438d383769ca3e80356
Query:
SELECT "BLOCK_NUMBER", "TRANSACTION_HASH", "EVENT_HASH", "ARGS"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
LIMIT 100
Answer:
Too long, hard cut:
BLOCK_NUMBER,TRANSACTION_HASH,EVENT_HASH,ARGS
65943439,0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0x2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8"",""72000"",""78600"",""1"",""0"",""4""]"
65943557,0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""149000"",""154200"",""219098471877079"",""29176006613"",""0""]"
65943584,0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0x2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8"",""-203512"",""-201064"",""5183835359841949"",""7320400011188982470"",""12919534685""]"
65943953,0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-202980"",""-201780"",""0"",""0"",""0""]"
65943955,0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-234240"",""-233040"",""2366735783157456"",""0"",""1199968832""]"
65944351,0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""73440"",""74760"",""0"",""0"",""0""]"
65944855,0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""2161385673098"",""19077727485743861"",""30539193""]"
65945171,0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xcb0347cc2c07f827fdd49ed86ee867a754b647dc"",""-202740"",""-202260"",""922690969348348"",""0"",""887655477""]"
65945745,0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""1451054568747"",""12806477744362749"",""20504956""]"
65946197,0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""30600"",""30800"",""44172636697258675733"",""3810721203883818"",""1967075480151059015""]"
65946342,0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-88000"",""-84000"",""9603508251585636196483"",""74897410393684262169665"",""11024366334917904849""]"
65946414,0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""1839749148186"",""16233736875741931"",""26002928""]"
65946668,0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""2444573072928"",""21571725623110665"",""34549683""]"
65946822,0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-202310"",""-202290"",""7013655851385516"",""0"",""283957733""]"
65946910,0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""1632624702778"",""14405321461188825"",""23076714""]"
65946990,0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-71000"",""-66800"",""0"",""0"",""0""]"
65947019,0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""2025167146516"",""17870139594263674"",""28623131""]"
65947039,0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-59340"",""-48120"",""0"",""0"",""0""]"
65947161,0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,0x0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c,"[""0xc36442b4a4522e871399cd717abdd847ab11fe88"",""-210810"",""-193380"",""2187992760649"",""19307574469759898"",""30923379
Query:
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE("ARGS_JSON":"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE("ARGS_JSON":"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE("ARGS_JSON":"amount"::STRING, '^0x', ''), 16) AS "AMOUNT_DECIMAL"
FROM (
  SELECT "TRANSACTION_HASH", PARSE_JSON("ARGS") AS "ARGS_JSON"
  FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
)
LIMIT 100;
Answer:
Too long, hard cut:
TRANSACTION_HASH,ETHERSCAN_LINK,L1_TOKEN_ADDRESS,L2_TOKEN_ADDRESS,SENDER_ADDRESS,RECEIVER_ADDRESS,AMOUNT_DECIMAL
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,https://arbiscan.io/tx/0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,,,,,
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,https://arbiscan.io/tx/0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,,,,,
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,https://arbiscan.io/tx/0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,,,,,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,https://arbiscan.io/tx/0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,,,,,
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,https://arbiscan.io/tx/0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,,,,,
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,https://arbiscan.io/tx/0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,,,,,
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,https://arbiscan.io/tx/0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,,,,,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,https://arbiscan.io/tx/0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,,,,,
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,https://arbiscan.io/tx/0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,,,,,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,https://arbiscan.io/tx/0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,,,,,
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,https://arbiscan.io/tx/0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,,,,,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,https://arbiscan.io/tx/0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,,,,,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,https://arbiscan.io/tx/0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,,,,,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,https://arbiscan.io/tx/0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,,,,,
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,https://arbiscan.io/tx/0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,,,,,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,https://arbiscan.io/tx/0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,,,,,
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,https://arbiscan.io/tx/0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,,,,,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,https://arbiscan.io/tx/0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,,,,,
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,https://arbiscan.io/tx/0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,,,,,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,https://arbiscan.io/tx/0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,,,,,
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,https://arbiscan.io/tx/0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,,,,,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,https://arbiscan.io/tx/0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,,,,,
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,https://arbiscan.io/tx/0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,,,,,
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,https://arbiscan.io/tx/0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,,,,,
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,https://arbiscan.io/tx/0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,,,,,
0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,https://arbiscan.io/tx/0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,,,,,
0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,https://arbiscan.io/tx/0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,,,,,
0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,https://arbiscan.io/tx/0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,,,,,
0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,https://arbiscan.io/tx/0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,,,,,
0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,https://arbiscan.io/tx/0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,,,,,
0xa6a3c2e7d28a3a37425569021
Query:
SELECT
  transaction_hash,
  CONCAT('https://arbiscan.io/tx/', transaction_hash) AS etherscan_link,
  REGEXP_REPLACE(PARSE_JSON(args):l1Token::STRING, '^0x0*', '') AS l1_token_address,
  REGEXP_REPLACE(PARSE_JSON(args):l2Token::STRING, '^0x0*', '') AS l2_token_address,
  REGEXP_REPLACE(PARSE_JSON(args):from::STRING, '^0x0*', '') AS sender_address,
  REGEXP_REPLACE(PARSE_JSON(args):to::STRING, '^0x0*', '') AS receiver_address,
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON(args):amount::STRING, '^0x', ''), 16) AS amount_decimal
FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
LIMIT 100;
Answer:
Too long, hard cut:
TRANSACTION_HASH,ETHERSCAN_LINK,L1_TOKEN_ADDRESS,L2_TOKEN_ADDRESS,SENDER_ADDRESS,RECEIVER_ADDRESS,AMOUNT_DECIMAL
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,https://arbiscan.io/tx/0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,,,,,
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,https://arbiscan.io/tx/0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,,,,,
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,https://arbiscan.io/tx/0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,,,,,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,https://arbiscan.io/tx/0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,,,,,
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,https://arbiscan.io/tx/0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,,,,,
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,https://arbiscan.io/tx/0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,,,,,
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,https://arbiscan.io/tx/0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,,,,,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,https://arbiscan.io/tx/0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,,,,,
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,https://arbiscan.io/tx/0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,,,,,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,https://arbiscan.io/tx/0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,,,,,
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,https://arbiscan.io/tx/0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,,,,,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,https://arbiscan.io/tx/0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,,,,,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,https://arbiscan.io/tx/0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,,,,,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,https://arbiscan.io/tx/0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,,,,,
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,https://arbiscan.io/tx/0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,,,,,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,https://arbiscan.io/tx/0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,,,,,
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,https://arbiscan.io/tx/0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,,,,,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,https://arbiscan.io/tx/0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,,,,,
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,https://arbiscan.io/tx/0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,,,,,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,https://arbiscan.io/tx/0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,,,,,
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,https://arbiscan.io/tx/0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,,,,,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,https://arbiscan.io/tx/0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,,,,,
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,https://arbiscan.io/tx/0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,,,,,
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,https://arbiscan.io/tx/0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,,,,,
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,https://arbiscan.io/tx/0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,,,,,
0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,https://arbiscan.io/tx/0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,,,,,
0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,https://arbiscan.io/tx/0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,,,,,
0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,https://arbiscan.io/tx/0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,,,,,
0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,https://arbiscan.io/tx/0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,,,,,
0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,https://arbiscan.io/tx/0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,,,,,
0xa6a3c2e7d28a3a37425569021
Query:
SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
LIMIT 100
Answer:
Too long, hard cut:
TRANSACTION_HASH,ARGS_JSON
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,"[
  ""0x2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8"",
  ""72000"",
  ""78600"",
  ""1"",
  ""0"",
  ""4""
]"
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""149000"",
  ""154200"",
  ""219098471877079"",
  ""29176006613"",
  ""0""
]"
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,"[
  ""0x2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8"",
  ""-203512"",
  ""-201064"",
  ""5183835359841949"",
  ""7320400011188982470"",
  ""12919534685""
]"
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-202980"",
  ""-201780"",
  ""0"",
  ""0"",
  ""0""
]"
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-234240"",
  ""-233040"",
  ""2366735783157456"",
  ""0"",
  ""1199968832""
]"
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""73440"",
  ""74760"",
  ""0"",
  ""0"",
  ""0""
]"
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""2161385673098"",
  ""19077727485743861"",
  ""30539193""
]"
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,"[
  ""0xcb0347cc2c07f827fdd49ed86ee867a754b647dc"",
  ""-202740"",
  ""-202260"",
  ""922690969348348"",
  ""0"",
  ""887655477""
]"
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""1451054568747"",
  ""12806477744362749"",
  ""20504956""
]"
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""30600"",
  ""30800"",
  ""44172636697258675733"",
  ""3810721203883818"",
  ""1967075480151059015""
]"
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-88000"",
  ""-84000"",
  ""9603508251585636196483"",
  ""74897410393684262169665"",
  ""11024366334917904849""
]"
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""1839749148186"",
  ""16233736875741931"",
  ""26002928""
]"
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""2444573072928"",
  ""21571725623110665"",
  ""34549683""
]"
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-202310"",
  ""-202290"",
  ""7013655851385516"",
  ""0"",
  ""283957733""
]"
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""1632624702778"",
  ""14405321461188825"",
  ""23076714""
]"
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-71000"",
  ""-66800"",
  ""0"",
  ""0"",
  ""0""
]"
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""2025167146516"",
  ""17870139594263674"",
  ""28623131""
]"
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-59340"",
  ""-48120"",
  ""0"",
  ""0"",
  ""0""
]"
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""2187992760649"",
  ""19307574469759898"",
  ""30923379""
]"
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-32880"",
  ""-11100"",
  ""0"",
  ""0"",
  ""0""
]"
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-210810"",
  ""-193380"",
  ""1984042176129"",
  ""17505462079715827"",
  ""28044831""
]"
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-202470"",
  ""-201990"",
  ""0"",
  ""0"",
  ""0""
]"
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-58440"",
  ""-51360"",
  ""0"",
  ""0"",
  ""0""
]"
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""78200"",
  ""88000"",
  ""0"",
  ""0"",
  ""0""
]"
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,"[
  ""0xc36442b4a4522e871399cd717abdd847ab11fe88"",
  ""-61020"",
  ""-47940"",
  ""0"",
  ""0"",
  ""0""
]
Query:
SELECT
  TRANSACTION_HASH,
  ARGS_JSON:"l1Token"::STRING AS L1_TOKEN_ADDRESS,
  ARGS_JSON:"l2Token"::STRING AS L2_TOKEN_ADDRESS,
  ARGS_JSON:"from"::STRING AS FROM_ADDRESS,
  ARGS_JSON:"to"::STRING AS TO_ADDRESS,
  ARGS_JSON:"amount"::STRING AS AMOUNT
FROM (
  SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
  FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
)
LIMIT 100
Answer:
Too long, hard cut:
TRANSACTION_HASH,L1_TOKEN_ADDRESS,L2_TOKEN_ADDRESS,FROM_ADDRESS,TO_ADDRESS,AMOUNT
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,,,,,
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,,,,,
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,,,,,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,,,,,
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,,,,,
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,,,,,
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,,,,,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,,,,,
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,,,,,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,,,,,
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,,,,,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,,,,,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,,,,,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,,,,,
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,,,,,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,,,,,
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,,,,,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,,,,,
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,,,,,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,,,,,
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,,,,,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,,,,,
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,,,,,
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,,,,,
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,,,,,
0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,,,,,
0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,,,,,
0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,,,,,
0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,,,,,
0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,,,,,
0xa6a3c2e7d28a3a37425569021858f00580b1c244164b4ddc0cf9482c85259707,,,,,
0x63908c9c53571d21e4829219ee361ab5b6879cdba33d418d58ecd8e09629ef50,,,,,
0x52349485a96a0f0e94e256cbd2d4a0b04a0f894f70d300deb3ae1e3d53ce999e,,,,,
0xdc612a208da0eb6dabe17be97ee0f949e09d7119021c52457e54379b6d16a58e,,,,,
0x523d1c41ead0047fca38677f91ecddbff8d1a8eebbfaa1895a95cd100a7928b3,,,,,
0xba85fe694ba9b3e708d0fbc9a917084c945a9ace062c792b083f8478d2492c01,,,,,
0xfeabefe7da977f7faeae8affd4f03ecf31979a24d0cd705a7bdac324474fa9b9,,,,,
0xc8fd092a7b85bea3373dfe86b8b6e05cdde369af8a126a9dc00ab066fda448dc,,,,,
0x7f0ccd85f2ff5a67c5ce535fc0ef5d74de124f640909851bf144ac62b64b7001,,,,,
0x1830722d8526a5934d0cc42906a522b414258aa96b844033a86cf6664d011392,,,,,
0xe85e1ac593948dd02b9257f69de6e2b4ee05ac7c2e6066eb16651ad34be11196,,,,,
0xf579da1d8364b13dc42405af248b77c9415fd23a1c9cdf6522d730d138dcf9b3,,,,,
0x5d9f435a9c307171602ec9f1c9d280776e129e49142bb51c4930a5cc10bced26,,,,,
0x29324eba2cdfb974d7c89e1eac17937684574be04793e4edee7d876793a89d24,,,,,
0x0df5f7a9e7b9d40aa7123935f024e0cf268f0095081883e29911f69c3b630fec,,,,,
0x5938c977f8f26e994852ee2f0c50240d88223e1f49f5c571200a64229fbc1f5c,,,,,
0xf29d2d677265dc004e5b8299be0dd9ca15d19260eb9ffa8018fed2cab3c54ae6,,,,,
0x5edbd448989c3f1c293a0c35b8ac6ac2862e7b55390d42234f247fc68ee1d07d,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0x285237d9f95b5b2b12c7fb922ea3e9edb990d825da8f39a3644711030a6dd677,,,,,
0x4381f2ea5a77c018df9d89d497c4a0c4cd2414d92c575fb853b130c171e8ed09,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0xd3758e48727d12ccd88b5c0e340bf5c1f5a922b0f161f4c2ac980161a0e8f451,,,,,
0xb6b9e382601e0d487691f99fdd67b0c383587bd071f1e756e25cc548eeca4963,,,,,
0xf2b1e46fc61a5053c946eed5e648c1d4d272fe6edf9bdb33da17805c7bbddbfc,,,,,
0xe9f382f7441cb30e11bf7d83e1b3851034f5805d99adf87c6c34a29188956086,,,,,
0x4cd33279b5c87d1f6f867df9333b2eeac35d1a862d301118d51e4fcfe3240b04,,,,,
0xeb0333a1d0248254dfc1380fcac7d748dfc44c391acd1a1766c6e44ea2e276a3,,,,,
0xb92a75f0ea4c6174e44d524868980a0ea2544f1a4864dfceadc8b8ef97655375,,,,,
0xb160453c1aaf21b232d2e986b4782c0b93745de66a30eb8634835d31876c64d9,,,,,
0x91469c593530fde02da1c99f30d61a052d28f02bc8204803df2c2b1d4de9cec4,,,,,
0x0955391bfe342d00f165
Query:
SELECT
  TRANSACTION_HASH,
  REGEXP_REPLACE(ARGS_JSON:"l1Token"::STRING, '^0x0*', '') AS L1_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON:"l2Token"::STRING, '^0x0*', '') AS L2_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON:"from"::STRING, '^0x0*', '') AS FROM_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON:"to"::STRING, '^0x0*', '') AS TO_ADDRESS,
  ARGS_JSON:"amount"::STRING AS AMOUNT
FROM (
  SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
  FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
)
LIMIT 100
Answer:
Too long, hard cut:
TRANSACTION_HASH,L1_TOKEN_ADDRESS,L2_TOKEN_ADDRESS,FROM_ADDRESS,TO_ADDRESS,AMOUNT
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,,,,,
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,,,,,
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,,,,,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,,,,,
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,,,,,
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,,,,,
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,,,,,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,,,,,
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,,,,,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,,,,,
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,,,,,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,,,,,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,,,,,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,,,,,
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,,,,,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,,,,,
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,,,,,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,,,,,
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,,,,,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,,,,,
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,,,,,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,,,,,
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,,,,,
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,,,,,
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,,,,,
0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,,,,,
0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,,,,,
0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,,,,,
0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,,,,,
0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,,,,,
0xa6a3c2e7d28a3a37425569021858f00580b1c244164b4ddc0cf9482c85259707,,,,,
0x63908c9c53571d21e4829219ee361ab5b6879cdba33d418d58ecd8e09629ef50,,,,,
0x52349485a96a0f0e94e256cbd2d4a0b04a0f894f70d300deb3ae1e3d53ce999e,,,,,
0xdc612a208da0eb6dabe17be97ee0f949e09d7119021c52457e54379b6d16a58e,,,,,
0x523d1c41ead0047fca38677f91ecddbff8d1a8eebbfaa1895a95cd100a7928b3,,,,,
0xba85fe694ba9b3e708d0fbc9a917084c945a9ace062c792b083f8478d2492c01,,,,,
0xfeabefe7da977f7faeae8affd4f03ecf31979a24d0cd705a7bdac324474fa9b9,,,,,
0xc8fd092a7b85bea3373dfe86b8b6e05cdde369af8a126a9dc00ab066fda448dc,,,,,
0x7f0ccd85f2ff5a67c5ce535fc0ef5d74de124f640909851bf144ac62b64b7001,,,,,
0x1830722d8526a5934d0cc42906a522b414258aa96b844033a86cf6664d011392,,,,,
0xe85e1ac593948dd02b9257f69de6e2b4ee05ac7c2e6066eb16651ad34be11196,,,,,
0xf579da1d8364b13dc42405af248b77c9415fd23a1c9cdf6522d730d138dcf9b3,,,,,
0x5d9f435a9c307171602ec9f1c9d280776e129e49142bb51c4930a5cc10bced26,,,,,
0x29324eba2cdfb974d7c89e1eac17937684574be04793e4edee7d876793a89d24,,,,,
0x0df5f7a9e7b9d40aa7123935f024e0cf268f0095081883e29911f69c3b630fec,,,,,
0x5938c977f8f26e994852ee2f0c50240d88223e1f49f5c571200a64229fbc1f5c,,,,,
0xf29d2d677265dc004e5b8299be0dd9ca15d19260eb9ffa8018fed2cab3c54ae6,,,,,
0x5edbd448989c3f1c293a0c35b8ac6ac2862e7b55390d42234f247fc68ee1d07d,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,,,,
0x285237d9f95b5b2b12c7fb922ea3e9edb990d825da8f39a3644711030a6dd677,,,,,
0x4381f2ea5a77c018df9d89d497c4a0c4cd2414d92c575fb853b130c171e8ed09,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,,,,
0xd3758e48727d12ccd88b5c0e340bf5c1f5a922b0f161f4c2ac980161a0e8f451,,,,,
0xb6b9e382601e0d487691f99fdd67b0c383587bd071f1e756e25cc548eeca4963,,,,,
0xf2b1e46fc61a5053c946eed5e648c1d4d272fe6edf9bdb33da17805c7bbddbfc,,,,,
0xe9f382f7441cb30e11bf7d83e1b3851034f5805d99adf87c6c34a29188956086,,,,,
0x4cd33279b5c87d1f6f867df9333b2eeac35d1a862d301118d51e4fcfe3240b04,,,,,
0xeb0333a1d0248254dfc1380fcac7d748dfc44c391acd1a1766c6e44ea2e276a3,,,,,
0xb92a75f0ea4c6174e44d524868980a0ea2544f1a4864dfceadc8b8ef97655375,,,,,
0xb160453c1aaf21b232d2e986b4782c0b93745de66a30eb8634835d31876c64d9,,,,,
0x91469c593530fde02da1c99f30d61a052d28f02bc8204803df2c2b1d4de9cec4,,,,,
0x0955391bfe342d00f165
Query:
SELECT
  TRANSACTION_HASH,
  CONCAT('https://arbiscan.io/tx/', TRANSACTION_HASH) AS ETHERSCAN_LINK
FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
LIMIT 100
Answer:
Too long, hard cut:
TRANSACTION_HASH,ETHERSCAN_LINK
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,https://arbiscan.io/tx/0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,https://arbiscan.io/tx/0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,https://arbiscan.io/tx/0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,https://arbiscan.io/tx/0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,https://arbiscan.io/tx/0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,https://arbiscan.io/tx/0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,https://arbiscan.io/tx/0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,https://arbiscan.io/tx/0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,https://arbiscan.io/tx/0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,https://arbiscan.io/tx/0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,https://arbiscan.io/tx/0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,https://arbiscan.io/tx/0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,https://arbiscan.io/tx/0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,https://arbiscan.io/tx/0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,https://arbiscan.io/tx/0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,https://arbiscan.io/tx/0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,https://arbiscan.io/tx/0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,https://arbiscan.io/tx/0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,https://arbiscan.io/tx/0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,https://arbiscan.io/tx/0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,https://arbiscan.io/tx/0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,https://arbiscan.io/tx/0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,https://arbiscan.io/tx/0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,https://arbiscan.io/tx/0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,https://arbiscan.io/tx/0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0
0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,https://arbiscan.io/tx/0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee
0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,https://arbiscan.io/tx/0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f
0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,https://arbiscan.io/tx/0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5
0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,https://arbiscan.io/tx/0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e
0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,https://arbiscan.io/tx/0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193
0xa6a3c2e7d28a3a37425569021858f00580b1c244164b4ddc0cf9482c85259707,https://arbiscan.io/tx/0xa6a3c2e7d28a3a37425569021858f00580b1c244164b4ddc0cf9482c85259707
0x63908c9c53571d21e4829219ee361ab5b6879cdba33d418d58ecd8e09629ef50,https://arbiscan.io/tx/0x63908c9c5
Query:
SELECT
  TRANSACTION_HASH,
  ARGS_JSON:"amount"::STRING AS AMOUNT_HEX,
  TRY_TO_NUMBER(REGEXP_REPLACE(ARGS_JSON:"amount"::STRING, '^0x', ''), 16) AS AMOUNT_DECIMAL
FROM (
  SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
  FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
)
LIMIT 100
Answer:
Too long, hard cut:
TRANSACTION_HASH,AMOUNT_HEX,AMOUNT_DECIMAL
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,,
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,,
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,,
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,,
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,,
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,,
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,,
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,,
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,,
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,,
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,,
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,,
0x78dc80c451a5642a91941dfb775f51fce1518b2228da423b2c378f11ab86d59f,,
0x1fa2c1c7083750a024c64d0b22a5a80f0cc42f5ebe2e7b5c39aa70ca6e2feb1f,,
0x92d0b95e566bb9333cf5f8032683082c346090cc1ba4ea39992a23fdea3e13a0,,
0x39e0d88a21e73621468f120cdce830798d6457500c17d3e965d1d07917b58eee,,
0xe3da041bf907c22c7ffc7a810ab922aa8566a80304b6590fb4f6856b5141504f,,
0x34d43223004244389bcbe0bc6e72eb01633fae503d5cdc9b9c631f696916e0f5,,
0x818b1852a394cd195c6300036207fd30995cef5879e9c130026b25be965f740e,,
0x65753d27a72d7f1ce452216b8ef12f0a5202b2223f475ffbafee3524295d1193,,
0xa6a3c2e7d28a3a37425569021858f00580b1c244164b4ddc0cf9482c85259707,,
0x63908c9c53571d21e4829219ee361ab5b6879cdba33d418d58ecd8e09629ef50,,
0x52349485a96a0f0e94e256cbd2d4a0b04a0f894f70d300deb3ae1e3d53ce999e,,
0xdc612a208da0eb6dabe17be97ee0f949e09d7119021c52457e54379b6d16a58e,,
0x523d1c41ead0047fca38677f91ecddbff8d1a8eebbfaa1895a95cd100a7928b3,,
0xba85fe694ba9b3e708d0fbc9a917084c945a9ace062c792b083f8478d2492c01,,
0xfeabefe7da977f7faeae8affd4f03ecf31979a24d0cd705a7bdac324474fa9b9,,
0xc8fd092a7b85bea3373dfe86b8b6e05cdde369af8a126a9dc00ab066fda448dc,,
0x7f0ccd85f2ff5a67c5ce535fc0ef5d74de124f640909851bf144ac62b64b7001,,
0x1830722d8526a5934d0cc42906a522b414258aa96b844033a86cf6664d011392,,
0xe85e1ac593948dd02b9257f69de6e2b4ee05ac7c2e6066eb16651ad34be11196,,
0xf579da1d8364b13dc42405af248b77c9415fd23a1c9cdf6522d730d138dcf9b3,,
0x5d9f435a9c307171602ec9f1c9d280776e129e49142bb51c4930a5cc10bced26,,
0x29324eba2cdfb974d7c89e1eac17937684574be04793e4edee7d876793a89d24,,
0x0df5f7a9e7b9d40aa7123935f024e0cf268f0095081883e29911f69c3b630fec,,
0x5938c977f8f26e994852ee2f0c50240d88223e1f49f5c571200a64229fbc1f5c,,
0xf29d2d677265dc004e5b8299be0dd9ca15d19260eb9ffa8018fed2cab3c54ae6,,
0x5edbd448989c3f1c293a0c35b8ac6ac2862e7b55390d42234f247fc68ee1d07d,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,
0xdb956e687c0371949b780e24840fb4d36693834fc99bcf6bdbd6c8aac1e560a3,,
0x285237d9f95b5b2b12c7fb922ea3e9edb990d825da8f39a3644711030a6dd677,,
0x4381f2ea5a77c018df9d89d497c4a0c4cd2414d92c575fb853b130c171e8ed09,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,
0x576c37be5fdba0793249fef087835afff10e1c976a3d798dfe0142baf1ea461c,,
0xd3758e48727d12ccd88b5c0e340bf5c1f5a922b0f161f4c2ac980161a0e8f451,,
0xb6b9e382601e0d487691f99fdd67b0c383587bd071f1e756e25cc548eeca4963,,
0xf2b1e46fc61a5053c946eed5e648c1d4d272fe6edf9bdb33da17805c7bbddbfc,,
0xe9f382f7441cb30e11bf7d83e1b3851034f5805d99adf87c6c34a29188956086,,
0x4cd33279b5c87d1f6f867df9333b2eeac35d1a862d301118d51e4fcfe3240b04,,
0xeb0333a1d0248254dfc1380fcac7d748dfc44c391acd1a1766c6e44ea2e276a3,,
0xb92a75f0ea4c6174e44d524868980a0ea2544f1a4864dfceadc8b8ef97655375,,
0xb160453c1aaf21b232d2e986b4782c0b93745de66a30eb8634835d31876c64d9,,
0x91469c593530fde02da1c99f30d61a052d28f02bc8204803df2c2b1d4de9cec4,,
0x0955391bfe342d00f165859d16a5cfcc417929045ab9ecbe75ed367bbdf49a29,,
0x0955391bfe342d00f165859d16a5cfcc417929045ab9ecbe75ed367bbdf49a29,,
0x0955391bfe342d00f165859d16a5cfcc417929045ab9ecbe75ed367bbdf49a29,,
0x3a05942ae2efd6e080ee2b73834a412b590132afb3d9105b86db8d8b
Query:
SELECT COUNT(*) AS EVENT_COUNT
FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
Answer:
EVENT_COUNT
368482
Query:
SELECT
  TRANSACTION_HASH,
  CONCAT('https://arbiscan.io/tx/', TRANSACTION_HASH) AS ETHERSCAN_LINK,
  REGEXP_REPLACE(ARGS_JSON[0]::STRING, '^0x0*', '') AS L1_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[1]::STRING, '^0x0*', '') AS L2_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[2]::STRING, '^0x0*', '') AS SENDER_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[3]::STRING, '^0x0*', '') AS RECEIVER_ADDRESS,
  TRY_TO_NUMBER(REGEXP_REPLACE(ARGS_JSON[4]::STRING, '^0x', ''), 16) AS AMOUNT_DECIMAL
FROM (
  SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
  FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
)
LIMIT 100;
Answer:
Too long, hard cut:
TRANSACTION_HASH,ETHERSCAN_LINK,L1_TOKEN_ADDRESS,L2_TOKEN_ADDRESS,SENDER_ADDRESS,RECEIVER_ADDRESS,AMOUNT_DECIMAL
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,https://arbiscan.io/tx/0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8,72000,78600,1,0.0
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,https://arbiscan.io/tx/0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,c36442b4a4522e871399cd717abdd847ab11fe88,149000,154200,219098471877079,29176006613.0
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,https://arbiscan.io/tx/0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8,-203512,-201064,5183835359841949,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,https://arbiscan.io/tx/0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,c36442b4a4522e871399cd717abdd847ab11fe88,-202980,-201780,0,0.0
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,https://arbiscan.io/tx/0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,c36442b4a4522e871399cd717abdd847ab11fe88,-234240,-233040,2366735783157456,0.0
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,https://arbiscan.io/tx/0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,c36442b4a4522e871399cd717abdd847ab11fe88,73440,74760,0,0.0
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,https://arbiscan.io/tx/0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2161385673098,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,https://arbiscan.io/tx/0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,cb0347cc2c07f827fdd49ed86ee867a754b647dc,-202740,-202260,922690969348348,0.0
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,https://arbiscan.io/tx/0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1451054568747,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,https://arbiscan.io/tx/0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,c36442b4a4522e871399cd717abdd847ab11fe88,30600,30800,44172636697258675733,3810721203883818.0
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,https://arbiscan.io/tx/0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,c36442b4a4522e871399cd717abdd847ab11fe88,-88000,-84000,9603508251585636196483,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,https://arbiscan.io/tx/0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1839749148186,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,https://arbiscan.io/tx/0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2444573072928,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,https://arbiscan.io/tx/0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,c36442b4a4522e871399cd717abdd847ab11fe88,-202310,-202290,7013655851385516,0.0
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,https://arbiscan.io/tx/0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1632624702778,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,https://arbiscan.io/tx/0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,c36442b4a4522e871399cd717abdd847ab11fe88,-71000,-66800,0,0.0
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,https://arbiscan.io/tx/0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2025167146516,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,https://arbiscan.io/tx/0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,c36442b4a4522e871399cd717abdd847ab11fe88,-59340,-48120,0,0.0
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,https://arbiscan.io/tx/0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2187992760649,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,https://arbiscan.io/tx/0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,c36442b4a4522e871399cd717abdd847ab11fe88,-32880,-11100,0,0.0
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,https://arbiscan.io/tx/0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1984042176129,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,https://arbiscan.i
Query:
SELECT
  TRANSACTION_HASH,
  CONCAT('https://arbiscan.io/tx/', TRANSACTION_HASH) AS ETHERSCAN_LINK,
  REGEXP_REPLACE(ARGS_JSON[0]::STRING, '^0x0*', '') AS L1_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[1]::STRING, '^0x0*', '') AS L2_TOKEN_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[2]::STRING, '^0x0*', '') AS SENDER_ADDRESS,
  REGEXP_REPLACE(ARGS_JSON[3]::STRING, '^0x0*', '') AS RECEIVER_ADDRESS,
  TRY_TO_NUMBER(ARGS_JSON[4]::STRING, 10) AS AMOUNT_DECIMAL
FROM (
  SELECT TRANSACTION_HASH, PARSE_JSON(ARGS) AS ARGS_JSON
  FROM GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS
)
LIMIT 100
Answer:
Too long, hard cut:
TRANSACTION_HASH,ETHERSCAN_LINK,L1_TOKEN_ADDRESS,L2_TOKEN_ADDRESS,SENDER_ADDRESS,RECEIVER_ADDRESS,AMOUNT_DECIMAL
0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,https://arbiscan.io/tx/0xdf8f3c7ad80c69b5690d0fbf5590e61836055c64d61893c1cf50740303676f77,2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8,72000,78600,1,0.0
0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,https://arbiscan.io/tx/0x3e1c362de60d7a9dca5983bec3bfe94c7c414e4c5d54cf7242f94b6b54e44f9f,c36442b4a4522e871399cd717abdd847ab11fe88,149000,154200,219098471877079,
0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,https://arbiscan.io/tx/0x2ccf4841726523e7633bdebf983fddc18c5f44eaf02d06cf8cca9023d79c05f2,2b1c7b41f6a8f2b2bc45c3233a5d5fb3cd6dc9a8,-203512,-201064,5183835359841949,
0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,https://arbiscan.io/tx/0xcde4da33656c82d0b938675fe4c4e9d2b0f3ba8064993fbfa6923b7982e36cbe,c36442b4a4522e871399cd717abdd847ab11fe88,-202980,-201780,0,0.0
0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,https://arbiscan.io/tx/0x3a906956820527dd1ea60f75ec11a36a22c55d38e4ea9d69cec708331a485cb1,c36442b4a4522e871399cd717abdd847ab11fe88,-234240,-233040,2366735783157456,0.0
0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,https://arbiscan.io/tx/0x180e0ba79278e891ad1ea65013ed0811ec80dacecc311682a8aef30cc031245f,c36442b4a4522e871399cd717abdd847ab11fe88,73440,74760,0,0.0
0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,https://arbiscan.io/tx/0xd37fca01d2117179ea81dbf11bf708891aeb2d9ce565b3c032abc4be9a785d06,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2161385673098,
0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,https://arbiscan.io/tx/0x62b4b014c62200c748db3c4597174b054c9fde21a2c5e80c5694e0bd91c25772,cb0347cc2c07f827fdd49ed86ee867a754b647dc,-202740,-202260,922690969348348,0.0
0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,https://arbiscan.io/tx/0x23fba5dd3584d3fa8598df3c82d40d598235a2ef3a8a27645eac45c574dd2f26,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1451054568747,
0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,https://arbiscan.io/tx/0x17caad071e97edcb6651567953e9d457f4bb81481a003319a7f35bd331a4b59d,c36442b4a4522e871399cd717abdd847ab11fe88,30600,30800,44172636697258675733,
0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,https://arbiscan.io/tx/0xbf3bc04124529c906d98056e6d14a280f550a193cf1dfd1001aa4578ed8e7bd1,c36442b4a4522e871399cd717abdd847ab11fe88,-88000,-84000,9603508251585636196483,
0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,https://arbiscan.io/tx/0x122126ac37dc5553fee7f639c7c540b22ee6af4fcc61e96ebcbc9d708aeb5e7c,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1839749148186,
0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,https://arbiscan.io/tx/0x917ed4b69d8fff7c74aa3cb81c86fc6ea7a49ed481bc097ceee9f2fa03e34e84,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2444573072928,
0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,https://arbiscan.io/tx/0x1828fa30b6cb3466152c0290de2c04dbe34cc1a171d085843205798a4f1065a8,c36442b4a4522e871399cd717abdd847ab11fe88,-202310,-202290,7013655851385516,0.0
0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,https://arbiscan.io/tx/0xec1143f9ef805b5b0c33341259c37327fdaec76eb037d5c2d17f91afa7a84f9b,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1632624702778,
0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,https://arbiscan.io/tx/0xf70ab36fea50330f2f7fe0756e71be254bbabafaa737d27c607801310fdafff7,c36442b4a4522e871399cd717abdd847ab11fe88,-71000,-66800,0,0.0
0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,https://arbiscan.io/tx/0x8f6cc167d29999fca854c06f8a64301058aa89e72d2d15ed13bc910258ff6176,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2025167146516,
0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,https://arbiscan.io/tx/0x8efea6f9decb6e0d8865ee7d2dd0d3971a9c79455a9211f445b8d411c284bd4a,c36442b4a4522e871399cd717abdd847ab11fe88,-59340,-48120,0,0.0
0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,https://arbiscan.io/tx/0x962079c5ea71dd5228cbe270ca0e942d2e54027aaf7393abbc8f69f6cdf57fbe,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,2187992760649,
0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,https://arbiscan.io/tx/0x9e9c89a34327259564f0726a5fb240ffa77b2e7234d5d2362e9fb13960a41f93,c36442b4a4522e871399cd717abdd847ab11fe88,-32880,-11100,0,0.0
0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,https://arbiscan.io/tx/0x92a02002e7862308f267faad7c1579ce0116f91581007acdf7f9b43d49349f3c,c36442b4a4522e871399cd717abdd847ab11fe88,-210810,-193380,1984042176129,
0x08560e4ec3b99ee3ecd7ce8254fad592b0d29c816f97c450a1583bb62515d2a5,https://arbiscan.io/tx/0x08560e4ec3b99ee3ecd7ce82
End Exploring Related Columns
Task: Retrieve all finalized deposits into Optimism at block 29815485 using the Optimism Standard Bridge, including transaction hash, an Etherscan link (the complete URL), L1 and L2 token addresses, sender and receiver addresses (with leading zeroes stripped), and the deposited amount (converted from hex to decimal). Ensure data is properly formatted and parsed according to Optimism's address and token standards, and remove the prefix '0x' except transaction hash. Note that, the keccak-256 hash of the Ethereum event signature for DepositFinalized is "0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8".

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: The following table lists all finalized deposits into Optimism at block 29815485 using the Optimism Standard Bridge. Each entry includes the transaction hash, an Etherscan link to the transaction, L1 and L2 token addresses, sender and receiver addresses (with leading zeroes stripped and without the '0x' prefix), and the deposited amount in decimal.

```csv
transaction_hash,etherscan_link,l1_token_address,l2_token_address,sender_address,receiver_address,amount
tx_hash1:str (include '0x'),link1:str,l1_token_addr1:str,l2_token_addr1:str,sender_addr1:str,receiver_addr1:str,amount1:int
tx_hash2:str (include '0x'),link2:str,l1_token_addr2:str,l2_token_addr2:str,sender_addr2:str,receiver_addr2:str,amount2:int
...
```.
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'GOOG_BLOCKCHAIN': {'GOOG_BLOCKCHAIN_ARBITRUM_ONE_US': ['DECODED_EVENTS', 'LOGS']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-25 12:24:20 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:24:20 - root - INFO - ```sql
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://etherscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON("ARGS"):"amount"::STRING, '^0x', ''), 16) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
```
2025-01-25 12:24:20 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:24:20 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:24:20 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:24:21 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-25 12:24:21 - snowflake.connector.connection - INFO - closed
2025-01-25 12:24:21 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:24:21 - root - INFO - itercount: 1
2025-01-25 12:24:21 - root - INFO - No data found for the specified query.

2025-01-25 12:24:21 - root - INFO - Input sql:
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://etherscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON("ARGS"):"amount"::STRING, '^0x', ''), 16) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
The error information is:
 No data found for the specified query.

2025-01-25 12:26:02 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:26:02 - root - INFO - ```sql
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://etherscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON("ARGS"):"amount"::STRING, '^0x', ''), 16) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_OPTIMISM_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
```
2025-01-25 12:26:02 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:26:02 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:26:02 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:26:03 - snowflake.connector.connection - INFO - closed
2025-01-25 12:26:03 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:26:03 - root - INFO - itercount: 2
2025-01-25 12:26:03 - root - INFO - 002003 (02000): 01b9f28a-0004-8038-0001-11c300fa522a: SQL compilation error:
Schema 'GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_OPTIMISM_US' does not exist or not authorized.
2025-01-25 12:26:03 - root - INFO - Input sql:
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://etherscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON("ARGS"):"amount"::STRING, '^0x', ''), 16) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_OPTIMISM_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
The error information is:
002003 (02000): 01b9f28a-0004-8038-0001-11c300fa522a: SQL compilation error:
Schema 'GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_OPTIMISM_US' does not exist or not authorized.
Please correct it and output only 1 complete SQL query.
2025-01-25 12:27:37 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:27:37 - root - INFO - ```sql
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON("ARGS"):"amount"::STRING, '^0x', ''), 16) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
```
2025-01-25 12:27:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:27:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:27:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:27:38 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-25 12:27:38 - snowflake.connector.connection - INFO - closed
2025-01-25 12:27:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:27:39 - root - INFO - itercount: 3
2025-01-25 12:27:39 - root - INFO - No data found for the specified query.

2025-01-25 12:27:39 - root - INFO - Input sql:
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON("ARGS"):"amount"::STRING, '^0x', ''), 16) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
The error information is:
 No data found for the specified query.

2025-01-25 12:29:18 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:29:18 - root - INFO - ```sql
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(PARSE_JSON("ARGS"):"amount"::STRING) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485;
```
2025-01-25 12:29:18 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:29:18 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:29:18 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:29:19 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-25 12:29:19 - snowflake.connector.connection - INFO - closed
2025-01-25 12:29:20 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:29:20 - root - INFO - itercount: 4
2025-01-25 12:29:20 - root - INFO - No data found for the specified query.

2025-01-25 12:29:20 - root - INFO - Input sql:
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(PARSE_JSON("ARGS"):"amount"::STRING) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485;
The error information is:
 No data found for the specified query.

2025-01-25 12:30:11 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:30:11 - root - INFO - ```sql
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(PARSE_JSON("ARGS"):"amount"::STRING) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x94dc77bcfc600a2b0e1443b0ab9f1bccd68fe4e23bf9c8689c5a03e88933cf01';
```
2025-01-25 12:30:11 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:30:11 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:30:11 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:30:12 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-25 12:30:12 - snowflake.connector.connection - INFO - closed
2025-01-25 12:30:12 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:30:12 - root - INFO - itercount: 5
2025-01-25 12:30:12 - root - INFO - No data found for the specified query.

2025-01-25 12:30:12 - root - INFO - Input sql:
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(PARSE_JSON("ARGS"):"amount"::STRING) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x94dc77bcfc600a2b0e1443b0ab9f1bccd68fe4e23bf9c8689c5a03e88933cf01';
The error information is:
 No data found for the specified query.

2025-01-25 12:33:17 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:33:17 - root - INFO - I apologize, but based on the information provided, it seems that the `DepositFinalized` event with the specified event hash is specific to the **Optimism** blockchain. The data available is from the **Arbitrum One** blockchain (`GOOG_BLOCKCHAIN_ARBITRUM_ONE_US`), which doesn't contain this event.

Additionally, querying block number `29815485` in the `GOOG_BLOCKCHAIN_ARBITRUM_ONE_US.DECODED_EVENTS` table returns no data, likely because this block number doesn't exist on the Arbitrum One blockchain or no events were recorded at that block.

To retrieve the `DepositFinalized` events at block `29815485` using the Optimism Standard Bridge, you would need access to the Optimism blockchain data. If the Optimism data is available in a schema like `GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_OPTIMISM_US`, and you have access to it, you can use the following SQL query:

```sql
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://optimistic.etherscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON("ARGS"):"amount"::STRING, '^0x', ''), 16) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_OPTIMISM_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
```

Please replace `"GOOG_BLOCKCHAIN_OPTIMISM_US"` with the correct schema name if it's different. This query retrieves all `DepositFinalized` events at block `29815485` on the Optimism blockchain, including the transaction hash, Etherscan link, L1 and L2 token addresses, sender and receiver addresses (with leading zeroes stripped), and the deposited amount converted from hex to decimal.
2025-01-25 12:33:17 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:33:17 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:33:17 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:33:19 - snowflake.connector.connection - INFO - closed
2025-01-25 12:33:19 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:33:19 - root - INFO - itercount: 6
2025-01-25 12:33:19 - root - INFO - 002003 (02000): 01b9f291-0004-82df-0001-11c300fa6166: SQL compilation error:
Schema 'GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_OPTIMISM_US' does not exist or not authorized.
2025-01-25 12:33:19 - root - INFO - Input sql:
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://optimistic.etherscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON("ARGS"):"amount"::STRING, '^0x', ''), 16) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_OPTIMISM_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
The error information is:
002003 (02000): 01b9f291-0004-82df-0001-11c300fa6166: SQL compilation error:
Schema 'GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_OPTIMISM_US' does not exist or not authorized.
Please correct it and output only 1 complete SQL query.
2025-01-25 12:34:46 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:34:46 - root - INFO - ```sql
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://optimistic.etherscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON("ARGS"):"amount"::STRING, '^0x', ''), 16) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."PUBLIC"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
```
2025-01-25 12:34:46 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:34:46 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:34:46 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:34:47 - snowflake.connector.connection - INFO - closed
2025-01-25 12:34:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:34:48 - root - INFO - itercount: 7
2025-01-25 12:34:48 - root - INFO - 002003 (42S02): 01b9f292-0004-7d15-0001-11c300fa45a2: SQL compilation error:
Object 'GOOG_BLOCKCHAIN.PUBLIC.DECODED_EVENTS' does not exist or not authorized.
2025-01-25 12:34:48 - root - INFO - Input sql:
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://optimistic.etherscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON("ARGS"):"amount"::STRING, '^0x', ''), 16) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."PUBLIC"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
The error information is:
002003 (42S02): 01b9f292-0004-7d15-0001-11c300fa45a2: SQL compilation error:
Object 'GOOG_BLOCKCHAIN.PUBLIC.DECODED_EVENTS' does not exist or not authorized.
Please correct it and output only 1 complete SQL query.
2025-01-25 12:36:22 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:36:22 - root - INFO - ```sql
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://etherscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON("ARGS"):"amount"::STRING, '^0x', ''), 16) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ETHEREUM_MAINNET_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
```
2025-01-25 12:36:22 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:36:22 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:36:22 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:36:23 - snowflake.connector.connection - INFO - closed
2025-01-25 12:36:24 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:36:24 - root - INFO - itercount: 8
2025-01-25 12:36:24 - root - INFO - 002003 (02000): 01b9f294-0004-82df-0001-11c300fa6172: SQL compilation error:
Schema 'GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ETHEREUM_MAINNET_US' does not exist or not authorized.
2025-01-25 12:36:24 - root - INFO - Input sql:
SELECT
  "TRANSACTION_HASH",
  CONCAT('https://etherscan.io/tx/', "TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l1Token"::STRING, '^0x0*', '') AS "L1_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"l2Token"::STRING, '^0x0*', '') AS "L2_TOKEN_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"from"::STRING, '^0x0*', '') AS "SENDER_ADDRESS",
  REGEXP_REPLACE(PARSE_JSON("ARGS"):"to"::STRING, '^0x0*', '') AS "RECEIVER_ADDRESS",
  TRY_TO_NUMBER(REGEXP_REPLACE(PARSE_JSON("ARGS"):"amount"::STRING, '^0x', ''), 16) AS "AMOUNT"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ETHEREUM_MAINNET_US"."DECODED_EVENTS"
WHERE "BLOCK_NUMBER" = 29815485
  AND "EVENT_HASH" = '0x3303facd24627943a92e9dc87cfbb34b15c49b726eec3ad3487c16be9ab8efe8';
The error information is:
002003 (02000): 01b9f294-0004-82df-0001-11c300fa6172: SQL compilation error:
Schema 'GOOG_BLOCKCHAIN.GOOG_BLOCKCHAIN_ETHEREUM_MAINNET_US' does not exist or not authorized.
Please correct it and output only 1 complete SQL query.
2025-01-25 12:37:32 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:37:32 - root - INFO - ```sql
SELECT
  l."TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', l."TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  l."ADDRESS" AS "CONTRACT_ADDRESS",
  l."DATA" AS "DATA",
  t.VALUE::STRING AS "TOPIC"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."LOGS" l,
LATERAL FLATTEN(input => l."TOPICS") t
WHERE l."BLOCK_NUMBER" = 29815485;
```
2025-01-25 12:37:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:37:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:37:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:37:33 - snowflake.connector.connection - INFO - closed
2025-01-25 12:37:34 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:37:34 - root - INFO - itercount: 9
2025-01-25 12:37:34 - root - INFO - 000904 (42000): 01b9f295-0004-82df-0001-11c300fa6176: SQL compilation error: error line 2 at position 2
invalid identifier 'L.TRANSACTION_HASH'
2025-01-25 12:37:34 - root - INFO - Input sql:
SELECT
  l."TRANSACTION_HASH",
  CONCAT('https://arbiscan.io/tx/', l."TRANSACTION_HASH") AS "ETHERSCAN_LINK",
  l."ADDRESS" AS "CONTRACT_ADDRESS",
  l."DATA" AS "DATA",
  t.VALUE::STRING AS "TOPIC"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."LOGS" l,
LATERAL FLATTEN(input => l."TOPICS") t
WHERE l."BLOCK_NUMBER" = 29815485;
The error information is:
000904 (42000): 01b9f295-0004-82df-0001-11c300fa6176: SQL compilation error: error line 2 at position 2
invalid identifier 'L.TRANSACTION_HASH'
Please correct it and output only 1 complete SQL query.
2025-01-25 12:38:08 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 12:38:08 - root - INFO - ```sql
SELECT
  l."transaction_hash",
  CONCAT('https://arbiscan.io/tx/', l."transaction_hash") AS "ETHERSCAN_LINK",
  l."address" AS "CONTRACT_ADDRESS",
  l."data" AS "DATA",
  t."value"::STRING AS "TOPIC"
FROM "GOOG_BLOCKCHAIN"."GOOG_BLOCKCHAIN_ARBITRUM_ONE_US"."LOGS" l,
LATERAL FLATTEN(input => l."topics") t
WHERE l."block_number" = 29815485;
```
2025-01-25 12:38:08 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-25 12:38:08 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-25 12:38:08 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-25 12:38:10 - snowflake.connector.connection - INFO - closed
2025-01-25 12:38:10 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-25 12:38:10 - root - INFO - Total iteration counts: 10
