After comparing the SQL queries and their results, I have determined that **`2result.sql`** is the correct answer.

**Reasoning:**

1. **Date Range Generation:**

   - **`0result.sql`:** Generates a date range by selecting from `"CRYPTO"."CRYPTO_ETHEREUM"."TRACES"` with `LIMIT 1826`. This approach is unreliable because it depends on the number of rows in the `TRACES` table and may not guarantee 1826 rows for the date range covering from '2017-01-01' to '2021-12-31'.
   
   - **`1result.sql` and `2result.sql`:** Both generate the date range using `TABLE(GENERATOR(ROWCOUNT => 1826))`, which is a more reliable and deterministic method in Snowflake to generate exactly 1826 days from '2017-01-01' through '2021-12-31' inclusive.

2. **Date Filters and Inclusion of All Dates:**

   - **`1result.sql`:** Uses a `WHERE` clause with `block_timestamp` in microseconds to filter dates. However, it sets the upper bound as `1640908800000000`, which corresponds to '2021-12-31 00:00:00' UTC. This excludes the entire day of '2021-12-31' because timestamps on that day would be greater than or equal to `1640908800000000` (midnight of '2021-12-31'). Therefore, `1result.sql` inadvertently omits data from '2021-12-31'.
   
   - **`2result.sql`:** Applies the date filter using `DATE(TO_TIMESTAMP_NTZ("block_timestamp" / 1000000)) BETWEEN '2017-01-01' AND '2021-12-31'`, which inclusively covers all dates from '2017-01-01' through '2021-12-31'. This ensures that all dates in the specified range are included, even if no new contracts were created on some days.

3. **Calculation of Cumulative Totals:**

   - Both `1result.sql` and `2result.sql` correctly calculate the cumulative totals using window functions with `ORDER BY "Date"`. However, due to the date filter issue in `1result.sql`, the cumulative counts for '2021-12-31' may not be accurate or may be missing entirely.

4. **Performance Considerations:**

   - While `1result.sql` calculates both external and internal creations in a single scan, and `2result.sql` performs two scans over the data (`external_creations` and `internal_creations`), correctness is prioritized over performance for this task. Ensuring all dates are included and the data is accurate is more critical.

**Conclusion:**

Due to the correct date handling and inclusion of all required dates, **`2result.sql`** is the correct SQL query that meets the specified requirements.

```plaintext
2result.sql
```