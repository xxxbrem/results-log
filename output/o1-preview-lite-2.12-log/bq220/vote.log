The correct SQL query is:

```plaintext
2result.sql
```

**Reasoning:**

After comparing the three provided SQL queries and their results, I determined that `2result.sql` is the most accurate and appropriate answer for the given task. Here are the reasons:

1. **Use of `measurement_year` over `inventory_year`:**
   - **`2result.sql`** uses `p.measurement_year` from the `plot` table to filter the data for the years 2015, 2016, and 2017.
   - **Importance:** The `measurement_year` represents the actual year when the plot data was collected, making it the correct choice for time-based analyses.
   - **Issue with `inventory_year`:** In contrast, `inventory_year` may contain placeholder values or less accurate data, as it can sometimes be set to defaults like 9999. Therefore, relying on `measurement_year` ensures more precise and reliable results.

2. **Mapping of State Codes to State Names:**
   - **`2result.sql`** includes a `state_mapping` CTE (Common Table Expression) that maps `state_code` values to their corresponding state names.
   - **Advantage:** This mapping provides clear and human-readable state names in the final output, making the results more understandable and informative.
   - **Comparison:** The other queries either display state codes (e.g., `6` for California) or use ambiguous state names that may not match the actual codes.

3. **Consistency and Accuracy in Results:**
   - The results from `2result.sql` are consistent with the correct use of data:
     - For **macroplots**, California had the largest average sizes in all three years (2015, 2016, 2017), which is logical given California's vast forest areas.
     - For **subplots**, Wyoming had the largest average sizes in 2015 and 2017, and also in 2016, indicating consistency.
   - **Comparison with Other Queries:**
     - In `0result.sql`, Alaska is listed as having the largest average subplot size in 2016. However, this is likely due to the use of `inventory_year`, which may not accurately represent the measurement data for that year.
     - In `1result.sql`, state codes are used without mapping, and while the results align with `2result.sql`, the lack of state names makes interpretation less clear.

4. **Comprehensive Data Filtering and Calculations:**
   - **`2result.sql`** ensures that all necessary conditions are applied:
     - Filters for `condition_status_code = 1` (accessible forest land).
     - Ensures `evaluation_type = 'EXPCURR'` for current evaluations.
     - Considers positive and non-null adjustment and expansion factors.
     - Accurately calculates average sizes using appropriate joins and groupings.

5. **Enhanced Readability and Maintenance:**
   - By structuring the query with CTEs and including comments, `2result.sql` is easier to read, understand, and maintain.
   - The use of aliases like `Type`, `Year`, `State`, and `Average_Size` makes the output clear and aligned with the task requirements.

In conclusion, `2result.sql` provides the most accurate, readable, and comprehensive solution to the task. It correctly identifies the states with the largest average subplot and macroplot sizes for each of the years 2015, 2016, and 2017, while presenting the results with clear state names and precise calculations.