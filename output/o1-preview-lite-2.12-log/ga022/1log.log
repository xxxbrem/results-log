2025-02-10 18:28:32 - openai._base_client - INFO - Retrying request to /chat/completions in 0.479039 seconds
2025-02-10 18:30:09 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-10 18:30:14 - root - INFO - SQL:
SELECT DISTINCT `event_name`
   FROM `firebase-public-project.analytics_153293282.events_*`
   LIMIT 100;
Results:
event_name
os_update
in_app_purchase
ad_reward
spend_virtual_currency
first_open
post_score
screen_view
level_start_quickplay
level_up
level_retry
level_fail
app_exception
error
no_more_extra_steps
user_engagement
level_fail_quickplay
completed_5_levels
level_retry_quickplay
use_extra_steps
app_remove
dynamic_link_first_open
app_clear_data
level_end_quickplay
level_reset_quickplay
app_update
dynamic_link_app_open
notification_foreground
level_complete_quickplay
select_content
session_start
level_complete
level_reset
firebase_campaign
challenge_accepted
level_start
level_end
challenge_a_friend

2025-02-10 18:30:19 - root - INFO - SQL:
SELECT `event_date`, `event_name`
   FROM `firebase-public-project.analytics_153293282.events_*`
   LIMIT 100;
Results:
event_date,event_name
20180613,user_engagement
20180613,level_complete_quickplay
20180613,level_fail_quickplay
20180613,level_fail_quickplay
20180613,level_end_quickplay
20180613,level_retry_quickplay
20180613,level_start_quickplay
20180613,level_end_quickplay
20180613,level_retry_quickplay
20180613,level_start_quickplay
20180613,level_end_quickplay
20180613,level_retry_quickplay
20180613,level_start_quickplay
20180613,level_fail_quickplay
20180613,level_end_quickplay
20180613,level_retry_quickplay
20180613,level_start_quickplay
20180613,post_score
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,level_complete_quickplay
20180613,level_complete_quickplay
20180613,level_start_quickplay
20180613,level_end_quickplay
20180613,level_start_quickplay
20180613,level_end_quickplay
20180613,level_start_quickplay
20180613,post_score
20180613,post_score
20180613,session_start
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,select_content
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement

2025-02-10 18:30:25 - root - INFO - SQL:
SELECT DISTINCT `user_pseudo_id`
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `event_name` = 'first_open'
     AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07'
   LIMIT 100;
Results:
user_pseudo_id
0E65A1967A3EE64A4D33E6038D677FAD
0150077AE685E3084E5DB84CF61CE383
1714B7BB554962AE0FA45425EF723D5F
C3CCCF5DAB1769C1D998957BB1C4F298
90075CB91FBC1BA3BD6B5F9A5C0869E7
96333A5A97DA9F4AEBC7A70483AF6C5C
531E7B35DE9A21A1942F057C98B4E74C
C7DD86F06FD4AA8A0967E27E20750FCD
E6E7FC8AC6D32935DA5ADCFFD14CC3A8
D6803CFD38D435F0364EB47684F7CCF6
AD7DEB9BF9C9B17C60B69DA2B3B6C59A
B743E27EAEE69B2DD8730CBC77BEC072
6264CB633D890A19B44AC69B7E62416F
AAE4779C1A0F48E482C71DE95A4FA0E1
891646F131CE2CCADB5D6676A104CB9D
EB4432A4BDAAB8F5135FCB36503ADC7D
57CEF48816FE7CE296E7BDBD7F43F646
66AFD4A2B8BC073FC2021F5C42CC7C86
78510CA2B9355AEB78FF0A52A7811B79
C044422D91ECBC6F378A4008759627BA
9077DD5C7FED955D9CB07E2EB8A3D13B
CA9136455F325D81B4A1FC232A7CCE43
B175B187062693360BCBADC4160F8D88
6955C33300255582FD3EC831F6C9E336
39747754B0805753690EFF8D9711AB0C
9E03DB30FDC576144D4BDC1B67AE6314
DFD487F27AEE9B027FFD4E736306279E
F766A5AF20BA3C1CC4146F0A59B099FC
4242F3099015CEED6E973B209C3C48BE
492F7F04FA27A466D29C9C0FE7D0E843
21FD52300AE0FBAB4C95D6D470E471D2
8F780847855ADB932B0121C7278F375F
5C7FB72A7CD89D7C56DCB2B71C91ECE9
74EFDBFCB53D83E8725D95130BA74879
E0903988A406E75F53EFB44E862DB1EA
EA5EB2459B13C163D6F1AAD3262293A5
6B41B995AAB96DF47E8B522BBD2358C3
6D2A2ACEEBFA6A03101571BEB21FB18E
57B1AEE95C1B66101A604ABA81AE7A5B
A246EAA169D582E07DBF1A672BD2A5BC
F012C58F26030BA3C7AE8A9F5FD5196C
99AEF7972E0B774A904B5F2839FC09B0
27C0BAADCE9520F17249A8B85F6477DA
9FD6E2CD74490F5DA5F52D249CBB750A
0E9150E8985138A744B88D56F015EDA7
EA89F979E0D4C374DBC95268982D18DE
6C333017CEA199B69BB27611BA5DE7B5
5A66BC427F25EFFDFEDED4A07D8F9F91
387B532B7AF7A362DBF783E34C05BF54
1E882F0B9818614D6E47620DD31229F1
9F8885F0261FE69A58C8B6AE9176E437
B82793CB1270A48BB2697C51AEED3E4A
A1D0D1B1F6207F2A909227367541C6A8
402F034E93C08042F10CAE155CADDA8F
87FD184B22403BC8671DC8B7A5575FFF
31A8ED6B3E2E7028AAF6EB107F31C239
E7F45BD93A980C6443443893DCDC0048
6B8854D5D38B4C156A41CE9C1980F5C1
0A1A9197E3080554A067BED5EE0772C2
12E605C18BD3297C684F0EC6F1D45967
B9892DCFA8E42B1F5EB44012025D9A56
BD76FA48CAC77875E95CCF0E142E4353
6423FBDB63333D5EF6E628446EDE5635
D0B47C51E0A61F1D0F25F05396D8ABA2
60A36D65D2C9A3DA5C804006972CCAF8
C1483F477709CE11455CE0E9E46E597A
D234FFF7508E1D6E24E3CE1A5AE5F0E1
923BB1C2E0D174E748826ABC096E77FA
2E452991FFE128CAA898334210805599
B0D104EE63ABB85675B078664B5924A8
0E7609CA977178EC4C6F0191922FC45A
2FF03DA9419A1F481A0CD9350B87C171
D62EDD239EF72D80713B3414F1A7C541
6D6EB70E837A5007BE550C44FF276440
5DA9B900E7C9F71714FB1AE9DA631C83
97D9D96077AD3E8859BF5C54C873E59D
D771048ADB1B9CACADFE001E6F9BA799
D1C57A2E87382A82A40B1816E85277EA
B9D800D33FDCF7AF2157CB66910A0797
DAD134C77F7E09BC552E290534CB90E8
CDB49D27B3BBEDBB8CCF4DC7667E337E
908D6EB0646A0411AB2B0D6DB73A241F
8797D8B7EE382EDE5B3E5BAD8F6A325C
53ACAE15981F1A8F9A3133340D599299
07A99B74B4D496F6BAFF9945E0A77245
AE158E6238A048413B91B5A50D08810D
C790EE2C97A43C374BEE7B516CC8615D
1CE53B7BFD311B79EBE02347FAA21B4C
8B9934BC891E0F96EE43914E6EF11A7E
6864FAEF53F37A2ED51664DCD0F0BAB0
E67AAD89794950F36FFE36E8DA277021
0A74C26349ABD323C5CE34AB8DD52164
382B7E4C3513E0B32AD100ABCC15B917

2025-02-10 18:30:30 - root - INFO - SQL:
SELECT `user_pseudo_id`, COUNT(*) AS event_count
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-30'
   GROUP BY `user_pseudo_id`
   LIMIT 100;
Results:
user_pseudo_id,event_count
5ACF1A6BFE350F7BB661BF389AF7E2F0,382
51B215871E81C64077434452838DE86A,521
B71CB5D517BE99FEEED64A0F57842032,1017
09A826527E24EFA70A0B7A8BDCD38962,83
3D03A380687FE3369E93915D50C572CB,69
B27F6463047977351E76AEED8456E9FF,156
10B0D468B5E036E16D13DB53A65F2D49,7484
CBC0686061C729A9C9181A919C4C5F9F,64
A95BA9143018CA81430258E8A725C3E6,455
CABE7E24215A5C36862658A36AE5CE12,112
343B740C7B3BD9C2CFA46BF097A8856E,1124
C677D4AC75F093F984D7881B299C8C12,141
C6DE585349744A40725DB0AB17041BA3,6562
FA5FB2ADC812A5B3696A11990CE91691,275
D08DBED31B667C28985C15B0AF489C09,88
8EDDA1DF0A706C454685D6F1412A9A24,179
FC62215B33C84EAB485FFC877E4CA7FA,229
D78D36FBC1694FDE2718E8E9A7CC99A1,333
049A296C5B282AF7100E0BC093589617,270
A878D073C2BA5201CD00FE73126C9145,1393
9AA2F9E383534B99CC25FB50699BC0C8,20
C7FB256C360417AAB8249DF90112D8BE,81
76392607940D2F7546D0DE5C96B01013,91
8EEEA60E0FAE89BB74538E965AC78CCA,15
1A0CA12EB7595B623F00DBFA2700EEB2,166
F0192BFEC0959BEE0FB12685539F4131,2499
46940B869F002DCFDDA860189AF77F23,117
5A2678EC49D852AC8DC691BDFCE53C81,73
FAFE8C032E4966360D9D8E532D8510E7,363
EEED36297DE224E3E34468ECB0BA7AF5,1404
0B15684EDDCE9514EFC8DDE9F80C5E7E,534
0BF28246916A6D54E16290E925B16593,1763
06A302E3A4767793ADBC884143708660,245
2F74E23BEA1E45E3897274EE4903DCC5,13920
DB9D0368B6DC1CD2E03CDDBE7060DE31,823
01584C13B91809E976B16BC90DBC11C8,20
67EAABE23BA806180D7012C66DD19CD5,386
B8ABD1FA94CF24CDEF5E10768CD6EF5C,547
3B62912D9F9755A6EB1253032B84DF9F,1687
919364A97A32967836018EFB36C49ADA,520
601BE700F4854082539210BD2EAABFD5,19
0C621E64FC5D74AC60AADCF0EA9D640A,329
A2E61D52E29C7A87CB8AD4911BC077FB,48
21E94A46F6DF2AF6254F916EABA0084A,1250
7386D239899D55E3D62DA619F359A7C0,1485
5E365904E412063EAFB403EBC5C06620,22
EA95104E597E6A81BDB2F5A77DAE5951,4
E993BC6B5A2E0A3A5668FC8D50DF7D57,439
A26E987AADEB6A801A0A174142382001,352
89AB6B5C88E9585DFE75C45F60BC2E72,75
C679FF00E17790E7E16AB903212EE05C,887
EDDB568DA4003B001E757D4D7C684422,1
D465218AC449070AC04C7069CDAAC4A5,1109
FDDFE28C3B0A73F93F593514F578760A,152
D64F951326C12230A4EBCA8D4C98832B,5
234DF385B94B51B87B2A5BF5B185739E,540
03915D9B9DC76855CC63C18E94C93760,552
66739352C8F94F55906F93AD35A7D894,162
940DA8879BB594A5E154B6B0FBA323C4,227
0C020AB6BBCA0E295EAFCDCCD5E3E7C9,8
25DFBAA3823DDC3B5D4C6F7B59CBF8B4,127
AADD15EC50DE974E1563DFCCBE5A4938,721
752946614C0220F566150D50BF202292,47
7D2B206A0B861F0D79786D4B4EFF7ADA,35
9B5B2CF514268808F8D23191F86959D3,34
04057328B7683ABE11C40CEC50ABF2C1,65
72A3AB64166B5D4CB2CE46D47CB562EE,107
C7911C9E567B47589E851658005072EA,14

2025-02-10 18:30:35 - root - INFO - SQL:
SELECT `user_pseudo_id`, TIMESTAMP_MICROS(`event_timestamp` + 28800000000) AS event_time_shanghai
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `event_name` = 'first_open'
     AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07'
   LIMIT 100;
Results:
user_pseudo_id,event_time_shanghai
6B743763D2790D33F26AFB5618307222,2018-09-04 08:33:09.437000+00:00
481CB078689F876EDF2BA0BA2F2E3B5E,2018-09-03 22:29:16.746000+00:00
7064BC64E47E869B36967E854748969E,2018-09-04 10:57:45.191000+00:00
5D61E6AC342F01CDCAF3A20B02426C70,2018-09-04 05:57:27.119000+00:00
456658D26CF1B27D2E9A6E8D96B3F32A,2018-09-04 09:37:05.839000+00:00
8041E05E5422C53623460B04B135D134,2018-09-04 03:52:57.036000+00:00
BD76FA48CAC77875E95CCF0E142E4353,2018-09-04 09:29:20.433000+00:00
E271C38BE1E3E9E9A1D4DE0A5CF3FA3E,2018-09-04 13:56:10.598000+00:00
192A561C1E4EA02F999662DC25B50CBE,2018-09-04 07:56:09.630000+00:00
7119284E9BA39CA0414A27EB2C0229D0,2018-09-04 13:09:00.366000+00:00
68FD7BAA83E0EBA01BF3D9944032C0B3,2018-09-04 14:02:30.091000+00:00
4242F3099015CEED6E973B209C3C48BE,2018-09-04 01:30:42.616000+00:00
6423FBDB63333D5EF6E628446EDE5635,2018-09-03 16:27:07.546000+00:00
0A74C26349ABD323C5CE34AB8DD52164,2018-09-04 10:18:24.644000+00:00
E514FE2BB2D92B8D89D71EEA7682E967,2018-09-04 00:28:43.708000+00:00
147823801E670C540091701D0B2B1BCF,2018-09-03 17:08:19.812000+00:00
E993BC6B5A2E0A3A5668FC8D50DF7D57,2018-09-04 01:17:04.881000+00:00
8984ABEF079304EFD2A1E8CDBB8D55A2,2018-09-04 06:06:31.878000+00:00
382B7E4C3513E0B32AD100ABCC15B917,2018-09-04 03:52:33.070000+00:00
A871A8E10ADB6EC112181C5894B4EBB7,2018-09-04 12:58:10.363000+00:00
492F7F04FA27A466D29C9C0FE7D0E843,2018-09-03 23:30:39.555000+00:00
6A9AB23D029870940ACDD4B67A5453EE,2018-09-04 13:05:25.352000+00:00
D0B47C51E0A61F1D0F25F05396D8ABA2,2018-09-03 16:09:11.560000+00:00
F58A583456504D4164F2F4A01BF52162,2018-09-03 17:22:44.432000+00:00
21FD52300AE0FBAB4C95D6D470E471D2,2018-09-04 04:06:37.445000+00:00
449CDABB9CC11226F694F8EF85F20A13,2018-09-04 05:18:50.109000+00:00
3114BB0EE700894607B258BC4706797C,2018-09-04 01:47:31.253000+00:00
F986632AFF804C2B2AFEFBE2C8B7ACBB,2018-09-04 03:18:11.869000+00:00
8F780847855ADB932B0121C7278F375F,2018-09-04 07:09:12.215000+00:00
0EFA419FF8D1FB5BAA12E4794D511937,2018-09-04 01:28:49.823000+00:00
A51A3E253AE3F2668DC50CB1AE96D60E,2018-09-03 23:43:59.999000+00:00
400A2BA0C0BAFC6A242E08221915D2C6,2018-09-03 21:29:31.681000+00:00

2025-02-10 18:30:41 - root - INFO - SQL:
SELECT `user_pseudo_id`, `event_name`, TIMESTAMP_MICROS(`event_timestamp` + 28800000000) AS event_time_shanghai
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `user_pseudo_id` IN (
     SELECT DISTINCT `user_pseudo_id`
     FROM `firebase-public-project.analytics_153293282.events_*`
     WHERE `event_name` = 'first_open'
       AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) = '2018-09-01'
     LIMIT 100
   )
   LIMIT 100;
Results:
user_pseudo_id,event_name,event_time_shanghai
C9262E10BCACD67DADD85566E354FEFC,session_start,2018-09-25 07:22:41.225001+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:20:58.509004+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:00.560005+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:21:52.637009+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:21:59.815005+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:29.830006+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:29.165009+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:28.637001+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:21:56.871005+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:29.896006+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:19.497009+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:26.584010+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:24:31.479020+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:24:15.507021+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:24:10.848026+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:24:26.142004+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:24:25.165005+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:24:43.140009+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:18.766001+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:03.788002+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:55.535006+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:26:04.845011+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:59.566014+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:56.926018+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:59.012019+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:19.640024+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:26:46.177033+00:00

2025-02-10 18:30:46 - root - INFO - SQL:
SELECT DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) AS event_date_shanghai, COUNT(*) AS first_open_count
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `event_name` = 'first_open'
     AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-30'
   GROUP BY event_date_shanghai
   ORDER BY event_date_shanghai
   LIMIT 100;
Results:
event_date_shanghai,first_open_count
2018-09-01,50
2018-09-02,63
2018-09-03,46
2018-09-04,49
2018-09-05,43
2018-09-06,55
2018-09-07,52
2018-09-08,65
2018-09-09,57
2018-09-10,56
2018-09-11,59
2018-09-12,45
2018-09-13,44
2018-09-14,47
2018-09-15,36
2018-09-16,50
2018-09-17,41
2018-09-18,31
2018-09-19,26
2018-09-20,34
2018-09-21,23
2018-09-22,47
2018-09-23,45
2018-09-24,50
2018-09-25,38
2018-09-26,37
2018-09-27,45
2018-09-28,34
2018-09-29,38
2018-09-30,45

2025-02-10 18:30:50 - root - INFO - SQL:
SELECT `user_pseudo_id`, up.key AS property_key, up.value.string_value AS property_value
   FROM `firebase-public-project.analytics_153293282.events_*`, UNNEST(`user_properties`) AS up
   LIMIT 100;
Results:
user_pseudo_id,property_key,property_value
2C8605D838AC52596D7B42B550C9E608,ad_frequency,2
2C8605D838AC52596D7B42B550C9E608,initial_extra_steps,3
2C8605D838AC52596D7B42B550C9E608,plays_quickplay,true
2C8605D838AC52596D7B42B550C9E608,num_levels_available,30
2C8605D838AC52596D7B42B550C9E608,firebase_last_notification,2879480449900304566
2C8605D838AC52596D7B42B550C9E608,plays_progressive,true
2C8605D838AC52596D7B42B550C9E608,firebase_exp_1,2
2C8605D838AC52596D7B42B550C9E608,first_open_time,
2C8605D838AC52596D7B42B550C9E608,ad_frequency,2
2C8605D838AC52596D7B42B550C9E608,initial_extra_steps,3
2C8605D838AC52596D7B42B550C9E608,plays_quickplay,true
2C8605D838AC52596D7B42B550C9E608,num_levels_available,30
2C8605D838AC52596D7B42B550C9E608,firebase_last_notification,2879480449900304566
2C8605D838AC52596D7B42B550C9E608,plays_progressive,true
2C8605D838AC52596D7B42B550C9E608,firebase_exp_1,2
2C8605D838AC52596D7B42B550C9E608,first_open_time,
2C8605D838AC52596D7B42B550C9E608,ad_frequency,2
2C8605D838AC52596D7B42B550C9E608,initial_extra_steps,3
2C8605D838AC52596D7B42B550C9E608,plays_quickplay,true
2C8605D838AC52596D7B42B550C9E608,num_levels_available,30
2C8605D838AC52596D7B42B550C9E608,firebase_last_notification,2879480449900304566
2C8605D838AC52596D7B42B550C9E608,plays_progressive,true
2C8605D838AC52596D7B42B550C9E608,firebase_exp_1,2
2C8605D838AC52596D7B42B550C9E608,first_open_time,
2C8605D838AC52596D7B42B550C9E608,ad_frequency,2
2C8605D838AC52596D7B42B550C9E608,initial_extra_steps,3
2C8605D838AC52596D7B42B550C9E608,plays_quickplay,true
2C8605D838AC52596D7B42B550C9E608,num_levels_available,30
2C8605D838AC52596D7B42B550C9E608,firebase_last_notification,2879480449900304566
2C8605D838AC52596D7B42B550C9E608,plays_progressive,true
2C8605D838AC52596D7B42B550C9E608,firebase_exp_1,2
2C8605D838AC52596D7B42B550C9E608,first_open_time,
2C8605D838AC52596D7B42B550C9E608,ad_frequency,2
2C8605D838AC52596D7B42B550C9E608,initial_extra_steps,3
2C8605D838AC52596D7B42B550C9E608,plays_quickplay,true
2C8605D838AC52596D7B42B550C9E608,num_levels_available,30
2C8605D838AC52596D7B42B550C9E608,firebase_last_notification,2879480449900304566
2C8605D838AC52596D7B42B550C9E608,plays_progressive,true
2C8605D838AC52596D7B42B550C9E608,firebase_exp_1,2
2C8605D838AC52596D7B42B550C9E608,first_open_time,
2C8605D838AC52596D7B42B550C9E608,ad_frequency,2
2C8605D838AC52596D7B42B550C9E608,initial_extra_steps,3
2C8605D838AC52596D7B42B550C9E608,plays_quickplay,true

2025-02-10 18:30:56 - root - INFO - SQL:
SELECT `platform`, COUNT(*) AS event_count
   FROM `firebase-public-project.analytics_153293282.events_*`
   GROUP BY `platform`
   LIMIT 100;
Results:
platform,event_count
IOS,2668218
ANDROID,3031782

2025-02-10 18:31:01 - root - INFO - SQL:
SELECT `user_pseudo_id`,
      SUM(CASE WHEN DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07' THEN 1 ELSE 0 END) AS events_week1,
      SUM(CASE WHEN DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-08' AND '2018-09-14' THEN 1 ELSE 0 END) AS events_week2,
      SUM(CASE WHEN DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-15' AND '2018-09-21' THEN 1 ELSE 0 END) AS events_week3
    FROM `firebase-public-project.analytics_153293282.events_*`
    WHERE `user_pseudo_id` IN (
      SELECT DISTINCT `user_pseudo_id`
      FROM `firebase-public-project.analytics_153293282.events_*`
      WHERE `event_name` = 'first_open'
        AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07'
    )
    GROUP BY `user_pseudo_id`
    LIMIT 100;
Results:
user_pseudo_id,events_week1,events_week2,events_week3
E458F1B823941D35957203CBF6610A33,47,0,0
5D61E6AC342F01CDCAF3A20B02426C70,169,26,0
C044422D91ECBC6F378A4008759627BA,67,54,0
34CAF47105A2D9D0AC7464BB3AF8DB2A,634,0,0
9F8D4A18FC571082BD1D7AA5597756AD,339,19,29
400A2BA0C0BAFC6A242E08221915D2C6,9,0,0
5F5D7A3F5575008A81BB77CFE70C4285,17,15,0
8EDDA1DF0A706C454685D6F1412A9A24,134,0,45
F9B1FEA75B896DA727BC733173B19D60,177,35,0
AE158E6238A048413B91B5A50D08810D,153,388,0
9EAAC1C6222FFE3D209C02C81C20F2A2,154,0,0
E7807570E39D6647CFAC88FDC2A6128A,50,17,0
6864FAEF53F37A2ED51664DCD0F0BAB0,110,0,34
860B943B030C0B95CC6BB1F8BA68D20A,168,13,0
5DA9B900E7C9F71714FB1AE9DA631C83,96,0,0
B50E2B0888440679A84A3D861332531C,240,0,0
2C45FDF91F91AE8A3A9E6F119E8BED13,121,0,0
856381949119749C6EC23A9D19B0E201,13,0,0
0FFB521F60BC6AADD9A8E24A248EE0A6,35,0,0
DC576C6DDBEC40EAC7668299D4A30F8C,76,0,0
5ABC587E26A6EF66B2E9B127E3DD497B,16,0,0
EEC7FA9B9E05990005FF736DCCADC24A,30,1,0
DF2035402F934E7B23D97854C02A1F09,40,0,0
14CDD9706D24046F309F81C86687A25C,222,0,0
A305B55D5049F38F5139DA95B3DCE247,161,27,0
06651B7BD90A9520B007ECEBF08EE9D6,8,0,0
387B532B7AF7A362DBF783E34C05BF54,422,0,0
C1483F477709CE11455CE0E9E46E597A,114,0,0
B42A29EB4F4474E9381491C9F6B920CF,11,0,0
36D4AF54541384D73D11BC19EBB0DF97,14,0,0
3B049329E3090DA7A4339C4A46EF0763,199,0,0
F505D39D04A5141F7A113A0AE18B0475,66,75,20
879503A3ED5F2DCB6592E99C42E1BDFE,461,121,0
4242F3099015CEED6E973B209C3C48BE,141,0,0
E993BC6B5A2E0A3A5668FC8D50DF7D57,438,1,0
E4CA88442149C9E1F3A64917A85797D3,46,0,0
C9262E10BCACD67DADD85566E354FEFC,234,0,0
E0903988A406E75F53EFB44E862DB1EA,26,42,0
CCC7BB053BBC6824C53FAA4A8C63E3FE,154,24,4
BA55EBF4BA0D00C60AD5735F0FEA5436,15,0,0
4F6D952B0D06FAFB9880AFF343AACD0B,47,99,1
C6A48E7151FD7570E5AB3A087E00942D,55,0,0
4AE8FCFC6BB2D2974D3C5D83DDC33993,69,0,0
89D57EAF8F7A4FF245A227FEE9AE9459,34,0,0
99AEF7972E0B774A904B5F2839FC09B0,46,0,0

2025-02-10 18:31:01 - root - INFO - itercount: 0
2025-02-10 18:31:01 - root - INFO - Database Name: firebase-public-project
Schema Name: analytics_153293282
,0
table_name,events_20180801
ddl,"CREATE TABLE `firebase-public-project.analytics_153293282.events_20180801`
(
  event_date STRING,
  event_timestamp INT64,
  event_name STRING,
  event_params ARRAY<STRUCT<key STRING, value STRUCT<string_value STRING, int_value INT64, float_value FLOAT64, double_value FLOAT64>>>,
  event_previous_timestamp INT64,
  event_value_in_usd FLOAT64,
  event_bundle_sequence_id INT64,
  event_server_timestamp_offset INT64,
  user_id STRING,
  user_pseudo_id STRING,
  user_properties ARRAY<STRUCT<key STRING, value STRUCT<string_value STRING, int_value INT64, float_value FLOAT64, double_value FLOAT64, set_timestamp_micros INT64>>>,
  user_first_touch_timestamp INT64,
  user_ltv STRUCT<revenue FLOAT64, currency STRING>,
  device STRUCT<category STRING, mobile_brand_name STRING, mobile_model_name STRING, mobile_marketing_name STRING, mobile_os_hardware_model STRING, operating_system STRING, operating_system_version STRING, vendor_id STRING, advertising_id STRING, language STRING, is_limited_ad_tracking STRING, time_zone_offset_seconds INT64>,
  geo STRUCT<continent STRING, country STRING, region STRING, city STRING>,
  app_info STRUCT<id STRING, version STRING, install_store STRING, firebase_app_id STRING, install_source STRING>,
  traffic_source STRUCT<name STRING, medium STRING, source STRING>,
  stream_id STRING,
  platform STRING
);"

Some other tables have the similar structure: ['events_20180801', 'events_20180621', 'events_20180616', 'events_20180912', 'events_20180814', 'events_20180716', 'events_20181003', 'events_20180620', 'events_20180624', 'events_20180918', 'events_20180612', 'events_20180911', 'events_20180724', 'events_20180807', 'events_20180710', 'events_20180808', 'events_20180702', 'events_20180719', 'events_20180914', 'events_20180913', 'events_20180915', 'events_20180728', 'events_20180817', 'events_20180628', 'events_20180906', 'events_20180704', 'events_20180711', 'events_20180720', 'events_20180706', 'events_20180926', 'events_20180924', 'events_20180731', 'events_20180804', 'events_20180920', 'events_20180715', 'events_20180709', 'events_20180928', 'events_20180904', 'events_20180903', 'events_20180818', 'events_20180820', 'events_20180707', 'events_20180930', 'events_20180821', 'events_20180812', 'events_20180830', 'events_20180908', 'events_20180708', 'events_20180910', 'events_20180922', 'events_20180713', 'events_20180618', 'events_20180811', 'events_20181001', 'events_20180626', 'events_20180828', 'events_20180717', 'events_20180806', 'events_20180721', 'events_20180725', 'events_20180824', 'events_20180923', 'events_20180627', 'events_20180726', 'events_20180729', 'events_20180929', 'events_20180925', 'events_20180722', 'events_20180630', 'events_20180730', 'events_20180831', 'events_20180701', 'events_20180619', 'events_20180810', 'events_20180822', 'events_20180921', 'events_20180819', 'events_20180927', 'events_20180905', 'events_20180816', 'events_20180622', 'events_20180802', 'events_20180826', 'events_20180714', 'events_20180901', 'events_20180916', 'events_20180809', 'events_20181002', 'events_20180703', 'events_20180617', 'events_20180902', 'events_20180625', 'events_20180827', 'events_20180805', 'events_20180825', 'events_20180919', 'events_20180917', 'events_20180705', 'events_20180613', 'events_20180907', 'events_20180909', 'events_20180727', 'events_20180813', 'events_20180614', 'events_20180623', 'events_20180829', 'events_20180615', 'events_20180712', 'events_20180718', 'events_20180815', 'events_20180629', 'events_20180803', 'events_20180823', 'events_20180723']
External knowledge that might be helpful: 
How to Calculate User Retention in Big Query from Google Demo Game Analytics Data

As a Product / Website Analyst, I was pretty psyched to discover Google’s public Google Analytics 4 (GA4) gaming event dataset called `firebase-public-project.analytics_153293282.events_*`. The table allows experienced developers and learners alike to experiment with raw GA4 data in Big Query for free. Event data is basically a log of user interactions with your product for analysis .For newbies interested in learning more about event data and GA4, visit my prior blog. This article provides SQL queries for a quick table overview and explains how to utilize Google Big Query to calculate user retention.


What is Retention?
User retention rates are key indicators for whether your product team meets user needs. Improving retention is often central to long term growth strategies.

**Retention measure’s how often and for how long users tend to return to your product.**

The metric can be a powerful proxy for product usefulness and user opinion. Its analysis can reveal critical information like how well your site converts new visitors to users and which items and features are associated with users coming back. If user data is available, retention can also help a business understand the profiles of its most active users (power users). Finally, retention is a great guardrail metric for A/B tests. Successful, product oriented companies prioritize a healthy user bases over short term profits.


**Common Retention Calculation Strategies**

Two common strategies to calculate retention are: 

a) N-Day retention

b) Unbounded Retention.


a) For N-Day retention, analysts calculate how many users with certain characteristics return over successive periods. It is called N days because we define the length of each period. For example, with N=7 day retention, if User A becomes part of our cohort of interest on day 0 and returns to the product day 5 and day 15, they are counted as retained for week 1 (1–7 days) and week 3 (15–21 days) but not week 2 (8–14 days).


b) For Unbounded Retention, a user is counted as retained each week so long as their most recent product contact was after the week. For example, if User A becomes part of the cohort on day 0 and last returned to the site on day 21, they will be counted as retained in week 1 (1–7 days), week 2 (8–14 days), and week 3 (15–21 days) but not week 4 (22–28 days).

By calculating these metrics, companies can evaluate how well their products hold users’ interests. It also them closer to identifying the patterns that generate return users.



The table structure information is ({database name: {schema name: [table name]}}): 
{'firebase-public-project': {'analytics_153293282': ['events_20180801', 'events_20180801', 'events_20180621', 'events_20180616', 'events_20180912', 'events_20180814', 'events_20180716', 'events_20181003', 'events_20180620', 'events_20180624', 'events_20180918', 'events_20180612', 'events_20180911', 'events_20180724', 'events_20180807', 'events_20180710', 'events_20180808', 'events_20180702', 'events_20180719', 'events_20180914', 'events_20180913', 'events_20180915', 'events_20180728', 'events_20180817', 'events_20180628', 'events_20180906', 'events_20180704', 'events_20180711', 'events_20180720', 'events_20180706', 'events_20180926', 'events_20180924', 'events_20180731', 'events_20180804', 'events_20180920', 'events_20180715', 'events_20180709', 'events_20180928', 'events_20180904', 'events_20180903', 'events_20180818', 'events_20180820', 'events_20180707', 'events_20180930', 'events_20180821', 'events_20180812', 'events_20180830', 'events_20180908', 'events_20180708', 'events_20180910', 'events_20180922', 'events_20180713', 'events_20180618', 'events_20180811', 'events_20181001', 'events_20180626', 'events_20180828', 'events_20180717', 'events_20180806', 'events_20180721', 'events_20180725', 'events_20180824', 'events_20180923', 'events_20180627', 'events_20180726', 'events_20180729', 'events_20180929', 'events_20180925', 'events_20180722', 'events_20180630', 'events_20180730', 'events_20180831', 'events_20180701', 'events_20180619', 'events_20180810', 'events_20180822', 'events_20180921', 'events_20180819', 'events_20180927', 'events_20180905', 'events_20180816', 'events_20180622', 'events_20180802', 'events_20180826', 'events_20180714', 'events_20180901', 'events_20180916', 'events_20180809', 'events_20181002', 'events_20180703', 'events_20180617', 'events_20180902', 'events_20180625', 'events_20180827', 'events_20180805', 'events_20180825', 'events_20180919', 'events_20180917', 'events_20180705', 'events_20180613', 'events_20180907', 'events_20180909', 'events_20180727', 'events_20180813', 'events_20180614', 'events_20180623', 'events_20180829', 'events_20180615', 'events_20180712', 'events_20180718', 'events_20180815', 'events_20180629', 'events_20180803', 'events_20180823', 'events_20180723']}}
Begin Exploring Related Columns
**Columns and Potential Usage:**

- **`event_name`**: Identifies the type of event (e.g., `'first_open'` to find users who first used the app).
- **`event_timestamp`**: Timestamp of the event in microseconds since the Unix epoch; can be converted to datetime and adjusted for Shanghai timezone.
- **`event_date`**: Date of the event in `'YYYYMMDD'` format; useful for filtering events by date.
- **`user_pseudo_id`**: Unique identifier for each user; used to track individual users over time.
- **`user_first_touch_timestamp`**: Timestamp of the user's first interaction with the app; can be used to verify initial usage.
- **`event_params`**: Contains additional parameters in a nested JSON structure; may be used to extract specific event details if needed.

**Conditions That May Be Used:**

- **`event_name = 'first_open'`**: To identify new users who first opened the app.
- **Date Filters**: Adjust `event_timestamp` to Shanghai timezone (UTC+8) and filter between `'2018-09-01'` and `'2018-09-07'` for the first week.
- **Time Conversion**: Use `TIMESTAMP_MICROS` function to convert microseconds to a timestamp.
- **User Identification**: Use `user_pseudo_id` to track and group events by user.
- **Limit Results**: Use `LIMIT 100` to limit the number of rows returned for exploration.

---

**SQL Queries:**

1. **List All Distinct Event Names**

   ```sql
   SELECT DISTINCT `event_name`
   FROM `firebase-public-project.analytics_153293282.events_*`
   LIMIT 100;
   ```

2. **Retrieve Event Dates and Names**

   ```sql
   SELECT `event_date`, `event_name`
   FROM `firebase-public-project.analytics_153293282.events_*`
   LIMIT 100;
   ```

3. **Find Users Who First Opened the App in the First Week of September 2018**

   ```sql
   SELECT DISTINCT `user_pseudo_id`
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `event_name` = 'first_open'
     AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07'
   LIMIT 100;
   ```

4. **Count Events per User in September 2018**

   ```sql
   SELECT `user_pseudo_id`, COUNT(*) AS event_count
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-30'
   GROUP BY `user_pseudo_id`
   LIMIT 100;
   ```

5. **Extract Event Timestamps Adjusted to Shanghai Timezone**

   ```sql
   SELECT `user_pseudo_id`, TIMESTAMP_MICROS(`event_timestamp` + 28800000000) AS event_time_shanghai
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `event_name` = 'first_open'
     AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07'
   LIMIT 100;
   ```

6. **List Events for Users Who First Opened the App on September 1, 2018**

   ```sql
   SELECT `user_pseudo_id`, `event_name`, TIMESTAMP_MICROS(`event_timestamp` + 28800000000) AS event_time_shanghai
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `user_pseudo_id` IN (
     SELECT DISTINCT `user_pseudo_id`
     FROM `firebase-public-project.analytics_153293282.events_*`
     WHERE `event_name` = 'first_open'
       AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) = '2018-09-01'
     LIMIT 100
   )
   LIMIT 100;
   ```

7. **Count 'first_open' Events Per Day in September 2018**

   ```sql
   SELECT DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) AS event_date_shanghai, COUNT(*) AS first_open_count
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `event_name` = 'first_open'
     AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-30'
   GROUP BY event_date_shanghai
   ORDER BY event_date_shanghai
   LIMIT 100;
   ```

8. **Retrieve User Properties (Nested JSON Fields)**

   ```sql
   SELECT `user_pseudo_id`, up.key AS property_key, up.value.string_value AS property_value
   FROM `firebase-public-project.analytics_153293282.events_*`, UNNEST(`user_properties`) AS up
   LIMIT 100;
   ```

9. **Check Event Distribution Across Platforms**

   ```sql
   SELECT `platform`, COUNT(*) AS event_count
   FROM `firebase-public-project.analytics_153293282.events_*`
   GROUP BY `platform`
   LIMIT 100;
   ```

10. **Count Events Per User in Weeks 1 to 3 After Initial Use**

    ```sql
    SELECT `user_pseudo_id`,
      SUM(CASE WHEN DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07' THEN 1 ELSE 0 END) AS events_week1,
      SUM(CASE WHEN DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-08' AND '2018-09-14' THEN 1 ELSE 0 END) AS events_week2,
      SUM(CASE WHEN DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-15' AND '2018-09-21' THEN 1 ELSE 0 END) AS events_week3
    FROM `firebase-public-project.analytics_153293282.events_*`
    WHERE `user_pseudo_id` IN (
      SELECT DISTINCT `user_pseudo_id`
      FROM `firebase-public-project.analytics_153293282.events_*`
      WHERE `event_name` = 'first_open'
        AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07'
    )
    GROUP BY `user_pseudo_id`
    LIMIT 100;
    ```

These queries progressively explore the data relevant to calculating the weekly customer retention rates for new users who first used the app in the first week of September 2018 in Shanghai timezone. They provide insights into event types, user activities, time zone adjustments, and user engagement over the weeks following initial app use.Query:
SELECT DISTINCT `event_name`
   FROM `firebase-public-project.analytics_153293282.events_*`
   LIMIT 100;
Answer:
event_name
os_update
in_app_purchase
ad_reward
spend_virtual_currency
first_open
post_score
screen_view
level_start_quickplay
level_up
level_retry
level_fail
app_exception
error
no_more_extra_steps
user_engagement
level_fail_quickplay
completed_5_levels
level_retry_quickplay
use_extra_steps
app_remove
dynamic_link_first_open
app_clear_data
level_end_quickplay
level_reset_quickplay
app_update
dynamic_link_app_open
notification_foreground
level_complete_quickplay
select_content
session_start
level_complete
level_reset
firebase_campaign
challenge_accepted
level_start
level_end
challenge_a_friend
Query:
SELECT `event_date`, `event_name`
   FROM `firebase-public-project.analytics_153293282.events_*`
   LIMIT 100;
Answer:
event_date,event_name
20180613,user_engagement
20180613,level_complete_quickplay
20180613,level_fail_quickplay
20180613,level_fail_quickplay
20180613,level_end_quickplay
20180613,level_retry_quickplay
20180613,level_start_quickplay
20180613,level_end_quickplay
20180613,level_retry_quickplay
20180613,level_start_quickplay
20180613,level_end_quickplay
20180613,level_retry_quickplay
20180613,level_start_quickplay
20180613,level_fail_quickplay
20180613,level_end_quickplay
20180613,level_retry_quickplay
20180613,level_start_quickplay
20180613,post_score
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,level_complete_quickplay
20180613,level_complete_quickplay
20180613,level_start_quickplay
20180613,level_end_quickplay
20180613,level_start_quickplay
20180613,level_end_quickplay
20180613,level_start_quickplay
20180613,post_score
20180613,post_score
20180613,session_start
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,screen_view
20180613,select_content
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
20180613,user_engagement
Query:
SELECT DISTINCT `user_pseudo_id`
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `event_name` = 'first_open'
     AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07'
   LIMIT 100;
Answer:
user_pseudo_id
0E65A1967A3EE64A4D33E6038D677FAD
0150077AE685E3084E5DB84CF61CE383
1714B7BB554962AE0FA45425EF723D5F
C3CCCF5DAB1769C1D998957BB1C4F298
90075CB91FBC1BA3BD6B5F9A5C0869E7
96333A5A97DA9F4AEBC7A70483AF6C5C
531E7B35DE9A21A1942F057C98B4E74C
C7DD86F06FD4AA8A0967E27E20750FCD
E6E7FC8AC6D32935DA5ADCFFD14CC3A8
D6803CFD38D435F0364EB47684F7CCF6
AD7DEB9BF9C9B17C60B69DA2B3B6C59A
B743E27EAEE69B2DD8730CBC77BEC072
6264CB633D890A19B44AC69B7E62416F
AAE4779C1A0F48E482C71DE95A4FA0E1
891646F131CE2CCADB5D6676A104CB9D
EB4432A4BDAAB8F5135FCB36503ADC7D
57CEF48816FE7CE296E7BDBD7F43F646
66AFD4A2B8BC073FC2021F5C42CC7C86
78510CA2B9355AEB78FF0A52A7811B79
C044422D91ECBC6F378A4008759627BA
9077DD5C7FED955D9CB07E2EB8A3D13B
CA9136455F325D81B4A1FC232A7CCE43
B175B187062693360BCBADC4160F8D88
6955C33300255582FD3EC831F6C9E336
39747754B0805753690EFF8D9711AB0C
9E03DB30FDC576144D4BDC1B67AE6314
DFD487F27AEE9B027FFD4E736306279E
F766A5AF20BA3C1CC4146F0A59B099FC
4242F3099015CEED6E973B209C3C48BE
492F7F04FA27A466D29C9C0FE7D0E843
21FD52300AE0FBAB4C95D6D470E471D2
8F780847855ADB932B0121C7278F375F
5C7FB72A7CD89D7C56DCB2B71C91ECE9
74EFDBFCB53D83E8725D95130BA74879
E0903988A406E75F53EFB44E862DB1EA
EA5EB2459B13C163D6F1AAD3262293A5
6B41B995AAB96DF47E8B522BBD2358C3
6D2A2ACEEBFA6A03101571BEB21FB18E
57B1AEE95C1B66101A604ABA81AE7A5B
A246EAA169D582E07DBF1A672BD2A5BC
F012C58F26030BA3C7AE8A9F5FD5196C
99AEF7972E0B774A904B5F2839FC09B0
27C0BAADCE9520F17249A8B85F6477DA
9FD6E2CD74490F5DA5F52D249CBB750A
0E9150E8985138A744B88D56F015EDA7
EA89F979E0D4C374DBC95268982D18DE
6C333017CEA199B69BB27611BA5DE7B5
5A66BC427F25EFFDFEDED4A07D8F9F91
387B532B7AF7A362DBF783E34C05BF54
1E882F0B9818614D6E47620DD31229F1
9F8885F0261FE69A58C8B6AE9176E437
B82793CB1270A48BB2697C51AEED3E4A
A1D0D1B1F6207F2A909227367541C6A8
402F034E93C08042F10CAE155CADDA8F
87FD184B22403BC8671DC8B7A5575FFF
31A8ED6B3E2E7028AAF6EB107F31C239
E7F45BD93A980C6443443893DCDC0048
6B8854D5D38B4C156A41CE9C1980F5C1
0A1A9197E3080554A067BED5EE0772C2
12E605C18BD3297C684F0EC6F1D45967
B9892DCFA8E42B1F5EB44012025D9A56
BD76FA48CAC77875E95CCF0E142E4353
6423FBDB63333D5EF6E628446EDE5635
D0B47C51E0A61F1D0F25F05396D8ABA2
60A36D65D2C9A3DA5C804006972CCAF8
C1483F477709CE11455CE0E9E46E597A
D234FFF7508E1D6E24E3CE1A5AE5F0E1
923BB1C2E0D174E748826ABC096E77FA
2E452991FFE128CAA898334210805599
B0D104EE63ABB85675B078664B5924A8
0E7609CA977178EC4C6F0191922FC45A
2FF03DA9419A1F481A0CD9350B87C171
D62EDD239EF72D80713B3414F1A7C541
6D6EB70E837A5007BE550C44FF276440
5DA9B900E7C9F71714FB1AE9DA631C83
97D9D96077AD3E8859BF5C54C873E59D
D771048ADB1B9CACADFE001E6F9BA799
D1C57A2E87382A82A40B1816E85277EA
B9D800D33FDCF7AF2157CB66910A0797
DAD134C77F7E09BC552E290534CB90E8
CDB49D27B3BBEDBB8CCF4DC7667E337E
908D6EB0646A0411AB2B0D6DB73A241F
8797D8B7EE382EDE5B3E5BAD8F6A325C
53ACAE15981F1A8F9A3133340D599299
07A99B74B4D496F6BAFF9945E0A77245
AE158E6238A048413B91B5A50D08810D
C790EE2C97A43C374BEE7B516CC8615D
1CE53B7BFD311B79EBE02347FAA21B4C
8B9934BC891E0F96EE43914E6EF11A7E
6864FAEF53F37A2ED51664DCD0F0BAB0
E67AAD89794950F36FFE36E8DA277021
0A74C26349ABD323C5CE34AB8DD52164
382B7E4C3513E0B32AD100ABCC15B917
Query:
SELECT `user_pseudo_id`, COUNT(*) AS event_count
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-30'
   GROUP BY `user_pseudo_id`
   LIMIT 100;
Answer:
user_pseudo_id,event_count
5ACF1A6BFE350F7BB661BF389AF7E2F0,382
51B215871E81C64077434452838DE86A,521
B71CB5D517BE99FEEED64A0F57842032,1017
09A826527E24EFA70A0B7A8BDCD38962,83
3D03A380687FE3369E93915D50C572CB,69
B27F6463047977351E76AEED8456E9FF,156
10B0D468B5E036E16D13DB53A65F2D49,7484
CBC0686061C729A9C9181A919C4C5F9F,64
A95BA9143018CA81430258E8A725C3E6,455
CABE7E24215A5C36862658A36AE5CE12,112
343B740C7B3BD9C2CFA46BF097A8856E,1124
C677D4AC75F093F984D7881B299C8C12,141
C6DE585349744A40725DB0AB17041BA3,6562
FA5FB2ADC812A5B3696A11990CE91691,275
D08DBED31B667C28985C15B0AF489C09,88
8EDDA1DF0A706C454685D6F1412A9A24,179
FC62215B33C84EAB485FFC877E4CA7FA,229
D78D36FBC1694FDE2718E8E9A7CC99A1,333
049A296C5B282AF7100E0BC093589617,270
A878D073C2BA5201CD00FE73126C9145,1393
9AA2F9E383534B99CC25FB50699BC0C8,20
C7FB256C360417AAB8249DF90112D8BE,81
76392607940D2F7546D0DE5C96B01013,91
8EEEA60E0FAE89BB74538E965AC78CCA,15
1A0CA12EB7595B623F00DBFA2700EEB2,166
F0192BFEC0959BEE0FB12685539F4131,2499
46940B869F002DCFDDA860189AF77F23,117
5A2678EC49D852AC8DC691BDFCE53C81,73
FAFE8C032E4966360D9D8E532D8510E7,363
EEED36297DE224E3E34468ECB0BA7AF5,1404
0B15684EDDCE9514EFC8DDE9F80C5E7E,534
0BF28246916A6D54E16290E925B16593,1763
06A302E3A4767793ADBC884143708660,245
2F74E23BEA1E45E3897274EE4903DCC5,13920
DB9D0368B6DC1CD2E03CDDBE7060DE31,823
01584C13B91809E976B16BC90DBC11C8,20
67EAABE23BA806180D7012C66DD19CD5,386
B8ABD1FA94CF24CDEF5E10768CD6EF5C,547
3B62912D9F9755A6EB1253032B84DF9F,1687
919364A97A32967836018EFB36C49ADA,520
601BE700F4854082539210BD2EAABFD5,19
0C621E64FC5D74AC60AADCF0EA9D640A,329
A2E61D52E29C7A87CB8AD4911BC077FB,48
21E94A46F6DF2AF6254F916EABA0084A,1250
7386D239899D55E3D62DA619F359A7C0,1485
5E365904E412063EAFB403EBC5C06620,22
EA95104E597E6A81BDB2F5A77DAE5951,4
E993BC6B5A2E0A3A5668FC8D50DF7D57,439
A26E987AADEB6A801A0A174142382001,352
89AB6B5C88E9585DFE75C45F60BC2E72,75
C679FF00E17790E7E16AB903212EE05C,887
EDDB568DA4003B001E757D4D7C684422,1
D465218AC449070AC04C7069CDAAC4A5,1109
FDDFE28C3B0A73F93F593514F578760A,152
D64F951326C12230A4EBCA8D4C98832B,5
234DF385B94B51B87B2A5BF5B185739E,540
03915D9B9DC76855CC63C18E94C93760,552
66739352C8F94F55906F93AD35A7D894,162
940DA8879BB594A5E154B6B0FBA323C4,227
0C020AB6BBCA0E295EAFCDCCD5E3E7C9,8
25DFBAA3823DDC3B5D4C6F7B59CBF8B4,127
AADD15EC50DE974E1563DFCCBE5A4938,721
752946614C0220F566150D50BF202292,47
7D2B206A0B861F0D79786D4B4EFF7ADA,35
9B5B2CF514268808F8D23191F86959D3,34
04057328B7683ABE11C40CEC50ABF2C1,65
72A3AB64166B5D4CB2CE46D47CB562EE,107
C7911C9E567B47589E851658005072EA,14
Query:
SELECT `user_pseudo_id`, TIMESTAMP_MICROS(`event_timestamp` + 28800000000) AS event_time_shanghai
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `event_name` = 'first_open'
     AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07'
   LIMIT 100;
Answer:
user_pseudo_id,event_time_shanghai
6B743763D2790D33F26AFB5618307222,2018-09-04 08:33:09.437000+00:00
481CB078689F876EDF2BA0BA2F2E3B5E,2018-09-03 22:29:16.746000+00:00
7064BC64E47E869B36967E854748969E,2018-09-04 10:57:45.191000+00:00
5D61E6AC342F01CDCAF3A20B02426C70,2018-09-04 05:57:27.119000+00:00
456658D26CF1B27D2E9A6E8D96B3F32A,2018-09-04 09:37:05.839000+00:00
8041E05E5422C53623460B04B135D134,2018-09-04 03:52:57.036000+00:00
BD76FA48CAC77875E95CCF0E142E4353,2018-09-04 09:29:20.433000+00:00
E271C38BE1E3E9E9A1D4DE0A5CF3FA3E,2018-09-04 13:56:10.598000+00:00
192A561C1E4EA02F999662DC25B50CBE,2018-09-04 07:56:09.630000+00:00
7119284E9BA39CA0414A27EB2C0229D0,2018-09-04 13:09:00.366000+00:00
68FD7BAA83E0EBA01BF3D9944032C0B3,2018-09-04 14:02:30.091000+00:00
4242F3099015CEED6E973B209C3C48BE,2018-09-04 01:30:42.616000+00:00
6423FBDB63333D5EF6E628446EDE5635,2018-09-03 16:27:07.546000+00:00
0A74C26349ABD323C5CE34AB8DD52164,2018-09-04 10:18:24.644000+00:00
E514FE2BB2D92B8D89D71EEA7682E967,2018-09-04 00:28:43.708000+00:00
147823801E670C540091701D0B2B1BCF,2018-09-03 17:08:19.812000+00:00
E993BC6B5A2E0A3A5668FC8D50DF7D57,2018-09-04 01:17:04.881000+00:00
8984ABEF079304EFD2A1E8CDBB8D55A2,2018-09-04 06:06:31.878000+00:00
382B7E4C3513E0B32AD100ABCC15B917,2018-09-04 03:52:33.070000+00:00
A871A8E10ADB6EC112181C5894B4EBB7,2018-09-04 12:58:10.363000+00:00
492F7F04FA27A466D29C9C0FE7D0E843,2018-09-03 23:30:39.555000+00:00
6A9AB23D029870940ACDD4B67A5453EE,2018-09-04 13:05:25.352000+00:00
D0B47C51E0A61F1D0F25F05396D8ABA2,2018-09-03 16:09:11.560000+00:00
F58A583456504D4164F2F4A01BF52162,2018-09-03 17:22:44.432000+00:00
21FD52300AE0FBAB4C95D6D470E471D2,2018-09-04 04:06:37.445000+00:00
449CDABB9CC11226F694F8EF85F20A13,2018-09-04 05:18:50.109000+00:00
3114BB0EE700894607B258BC4706797C,2018-09-04 01:47:31.253000+00:00
F986632AFF804C2B2AFEFBE2C8B7ACBB,2018-09-04 03:18:11.869000+00:00
8F780847855ADB932B0121C7278F375F,2018-09-04 07:09:12.215000+00:00
0EFA419FF8D1FB5BAA12E4794D511937,2018-09-04 01:28:49.823000+00:00
A51A3E253AE3F2668DC50CB1AE96D60E,2018-09-03 23:43:59.999000+00:00
400A2BA0C0BAFC6A242E08221915D2C6,2018-09-03 21:29:31.681000+00:00
Query:
SELECT `user_pseudo_id`, `event_name`, TIMESTAMP_MICROS(`event_timestamp` + 28800000000) AS event_time_shanghai
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `user_pseudo_id` IN (
     SELECT DISTINCT `user_pseudo_id`
     FROM `firebase-public-project.analytics_153293282.events_*`
     WHERE `event_name` = 'first_open'
       AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) = '2018-09-01'
     LIMIT 100
   )
   LIMIT 100;
Answer:
user_pseudo_id,event_name,event_time_shanghai
C9262E10BCACD67DADD85566E354FEFC,session_start,2018-09-25 07:22:41.225001+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:20:58.509004+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:00.560005+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:21:52.637009+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:21:59.815005+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:29.830006+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:29.165009+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:28.637001+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:21:56.871005+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:29.896006+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:19.497009+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:22:26.584010+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:24:31.479020+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:24:15.507021+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:24:10.848026+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:24:26.142004+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:24:25.165005+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:24:43.140009+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:18.766001+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:03.788002+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:55.535006+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:26:04.845011+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:59.566014+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:56.926018+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:59.012019+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:25:19.640024+00:00
C9262E10BCACD67DADD85566E354FEFC,screen_view,2018-09-25 07:26:46.177033+00:00
Query:
SELECT DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) AS event_date_shanghai, COUNT(*) AS first_open_count
   FROM `firebase-public-project.analytics_153293282.events_*`
   WHERE `event_name` = 'first_open'
     AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-30'
   GROUP BY event_date_shanghai
   ORDER BY event_date_shanghai
   LIMIT 100;
Answer:
event_date_shanghai,first_open_count
2018-09-01,50
2018-09-02,63
2018-09-03,46
2018-09-04,49
2018-09-05,43
2018-09-06,55
2018-09-07,52
2018-09-08,65
2018-09-09,57
2018-09-10,56
2018-09-11,59
2018-09-12,45
2018-09-13,44
2018-09-14,47
2018-09-15,36
2018-09-16,50
2018-09-17,41
2018-09-18,31
2018-09-19,26
2018-09-20,34
2018-09-21,23
2018-09-22,47
2018-09-23,45
2018-09-24,50
2018-09-25,38
2018-09-26,37
2018-09-27,45
2018-09-28,34
2018-09-29,38
2018-09-30,45
Query:
SELECT `user_pseudo_id`, up.key AS property_key, up.value.string_value AS property_value
   FROM `firebase-public-project.analytics_153293282.events_*`, UNNEST(`user_properties`) AS up
   LIMIT 100;
Answer:
user_pseudo_id,property_key,property_value
2C8605D838AC52596D7B42B550C9E608,ad_frequency,2
2C8605D838AC52596D7B42B550C9E608,initial_extra_steps,3
2C8605D838AC52596D7B42B550C9E608,plays_quickplay,true
2C8605D838AC52596D7B42B550C9E608,num_levels_available,30
2C8605D838AC52596D7B42B550C9E608,firebase_last_notification,2879480449900304566
2C8605D838AC52596D7B42B550C9E608,plays_progressive,true
2C8605D838AC52596D7B42B550C9E608,firebase_exp_1,2
2C8605D838AC52596D7B42B550C9E608,first_open_time,
2C8605D838AC52596D7B42B550C9E608,ad_frequency,2
2C8605D838AC52596D7B42B550C9E608,initial_extra_steps,3
2C8605D838AC52596D7B42B550C9E608,plays_quickplay,true
2C8605D838AC52596D7B42B550C9E608,num_levels_available,30
2C8605D838AC52596D7B42B550C9E608,firebase_last_notification,2879480449900304566
2C8605D838AC52596D7B42B550C9E608,plays_progressive,true
2C8605D838AC52596D7B42B550C9E608,firebase_exp_1,2
2C8605D838AC52596D7B42B550C9E608,first_open_time,
2C8605D838AC52596D7B42B550C9E608,ad_frequency,2
2C8605D838AC52596D7B42B550C9E608,initial_extra_steps,3
2C8605D838AC52596D7B42B550C9E608,plays_quickplay,true
2C8605D838AC52596D7B42B550C9E608,num_levels_available,30
2C8605D838AC52596D7B42B550C9E608,firebase_last_notification,2879480449900304566
2C8605D838AC52596D7B42B550C9E608,plays_progressive,true
2C8605D838AC52596D7B42B550C9E608,firebase_exp_1,2
2C8605D838AC52596D7B42B550C9E608,first_open_time,
2C8605D838AC52596D7B42B550C9E608,ad_frequency,2
2C8605D838AC52596D7B42B550C9E608,initial_extra_steps,3
2C8605D838AC52596D7B42B550C9E608,plays_quickplay,true
2C8605D838AC52596D7B42B550C9E608,num_levels_available,30
2C8605D838AC52596D7B42B550C9E608,firebase_last_notification,2879480449900304566
2C8605D838AC52596D7B42B550C9E608,plays_progressive,true
2C8605D838AC52596D7B42B550C9E608,firebase_exp_1,2
2C8605D838AC52596D7B42B550C9E608,first_open_time,
2C8605D838AC52596D7B42B550C9E608,ad_frequency,2
2C8605D838AC52596D7B42B550C9E608,initial_extra_steps,3
2C8605D838AC52596D7B42B550C9E608,plays_quickplay,true
2C8605D838AC52596D7B42B550C9E608,num_levels_available,30
2C8605D838AC52596D7B42B550C9E608,firebase_last_notification,2879480449900304566
2C8605D838AC52596D7B42B550C9E608,plays_progressive,true
2C8605D838AC52596D7B42B550C9E608,firebase_exp_1,2
2C8605D838AC52596D7B42B550C9E608,first_open_time,
2C8605D838AC52596D7B42B550C9E608,ad_frequency,2
2C8605D838AC52596D7B42B550C9E608,initial_extra_steps,3
2C8605D838AC52596D7B42B550C9E608,plays_quickplay,true
Query:
SELECT `platform`, COUNT(*) AS event_count
   FROM `firebase-public-project.analytics_153293282.events_*`
   GROUP BY `platform`
   LIMIT 100;
Answer:
platform,event_count
IOS,2668218
ANDROID,3031782
Query:
SELECT `user_pseudo_id`,
      SUM(CASE WHEN DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07' THEN 1 ELSE 0 END) AS events_week1,
      SUM(CASE WHEN DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-08' AND '2018-09-14' THEN 1 ELSE 0 END) AS events_week2,
      SUM(CASE WHEN DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-15' AND '2018-09-21' THEN 1 ELSE 0 END) AS events_week3
    FROM `firebase-public-project.analytics_153293282.events_*`
    WHERE `user_pseudo_id` IN (
      SELECT DISTINCT `user_pseudo_id`
      FROM `firebase-public-project.analytics_153293282.events_*`
      WHERE `event_name` = 'first_open'
        AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07'
    )
    GROUP BY `user_pseudo_id`
    LIMIT 100;
Answer:
user_pseudo_id,events_week1,events_week2,events_week3
E458F1B823941D35957203CBF6610A33,47,0,0
5D61E6AC342F01CDCAF3A20B02426C70,169,26,0
C044422D91ECBC6F378A4008759627BA,67,54,0
34CAF47105A2D9D0AC7464BB3AF8DB2A,634,0,0
9F8D4A18FC571082BD1D7AA5597756AD,339,19,29
400A2BA0C0BAFC6A242E08221915D2C6,9,0,0
5F5D7A3F5575008A81BB77CFE70C4285,17,15,0
8EDDA1DF0A706C454685D6F1412A9A24,134,0,45
F9B1FEA75B896DA727BC733173B19D60,177,35,0
AE158E6238A048413B91B5A50D08810D,153,388,0
9EAAC1C6222FFE3D209C02C81C20F2A2,154,0,0
E7807570E39D6647CFAC88FDC2A6128A,50,17,0
6864FAEF53F37A2ED51664DCD0F0BAB0,110,0,34
860B943B030C0B95CC6BB1F8BA68D20A,168,13,0
5DA9B900E7C9F71714FB1AE9DA631C83,96,0,0
B50E2B0888440679A84A3D861332531C,240,0,0
2C45FDF91F91AE8A3A9E6F119E8BED13,121,0,0
856381949119749C6EC23A9D19B0E201,13,0,0
0FFB521F60BC6AADD9A8E24A248EE0A6,35,0,0
DC576C6DDBEC40EAC7668299D4A30F8C,76,0,0
5ABC587E26A6EF66B2E9B127E3DD497B,16,0,0
EEC7FA9B9E05990005FF736DCCADC24A,30,1,0
DF2035402F934E7B23D97854C02A1F09,40,0,0
14CDD9706D24046F309F81C86687A25C,222,0,0
A305B55D5049F38F5139DA95B3DCE247,161,27,0
06651B7BD90A9520B007ECEBF08EE9D6,8,0,0
387B532B7AF7A362DBF783E34C05BF54,422,0,0
C1483F477709CE11455CE0E9E46E597A,114,0,0
B42A29EB4F4474E9381491C9F6B920CF,11,0,0
36D4AF54541384D73D11BC19EBB0DF97,14,0,0
3B049329E3090DA7A4339C4A46EF0763,199,0,0
F505D39D04A5141F7A113A0AE18B0475,66,75,20
879503A3ED5F2DCB6592E99C42E1BDFE,461,121,0
4242F3099015CEED6E973B209C3C48BE,141,0,0
E993BC6B5A2E0A3A5668FC8D50DF7D57,438,1,0
E4CA88442149C9E1F3A64917A85797D3,46,0,0
C9262E10BCACD67DADD85566E354FEFC,234,0,0
E0903988A406E75F53EFB44E862DB1EA,26,42,0
CCC7BB053BBC6824C53FAA4A8C63E3FE,154,24,4
BA55EBF4BA0D00C60AD5735F0FEA5436,15,0,0
4F6D952B0D06FAFB9880AFF343AACD0B,47,99,1
C6A48E7151FD7570E5AB3A087E00942D,55,0,0
4AE8FCFC6BB2D2974D3C5D83DDC33993,69,0,0
89D57EAF8F7A4FF245A227FEE9AE9459,34,0,0
99AEF7972E0B774A904B5F2839FC09B0,46,0,0
End Exploring Related Columns
Task: Could you please help me get the weekly customer retention rate in September 2018 for new customers who first used our app (first_open event) within the first week starting from September 1st, 2018 (timezone in Shanghai)? The retention rates should cover the following weeks 1, 2, and 3 period after the initial use and display them in column format.

Please answer only one complete SQL in bigquery dialect in ```sql``` format.
Usage example: ```sql
SELECT `column_name` FROM `database.schema.table` WHERE ... ``` (Replace `database`, `schema`, and `table` with actual names. Enclose column names and table identifiers with backticks.)
Follow the answer format like: ```csv
Week1_RetentionRate,Week2_RetentionRate,Week3_RetentionRate
rate1:0<=float<=100,rate2:0<=float<=100,rate3:0<=float<=100
(Attention: answer in one row)
```

**Explanation:**

The table above presents the weekly customer retention rates (as percentages between 0 and 100) for new customers who first used the app (recorded a `first_open` event) during the first week of September 2018, according to Shanghai timezone. The retention rates are for Weeks 1, 2, and 3 following their initial use, all provided in a single row as per the requested format..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'firebase-public-project': {'analytics_153293282': ['events_20180801', 'events_20180801', 'events_20180621', 'events_20180616', 'events_20180912', 'events_20180814', 'events_20180716', 'events_20181003', 'events_20180620', 'events_20180624', 'events_20180918', 'events_20180612', 'events_20180911', 'events_20180724', 'events_20180807', 'events_20180710', 'events_20180808', 'events_20180702', 'events_20180719', 'events_20180914', 'events_20180913', 'events_20180915', 'events_20180728', 'events_20180817', 'events_20180628', 'events_20180906', 'events_20180704', 'events_20180711', 'events_20180720', 'events_20180706', 'events_20180926', 'events_20180924', 'events_20180731', 'events_20180804', 'events_20180920', 'events_20180715', 'events_20180709', 'events_20180928', 'events_20180904', 'events_20180903', 'events_20180818', 'events_20180820', 'events_20180707', 'events_20180930', 'events_20180821', 'events_20180812', 'events_20180830', 'events_20180908', 'events_20180708', 'events_20180910', 'events_20180922', 'events_20180713', 'events_20180618', 'events_20180811', 'events_20181001', 'events_20180626', 'events_20180828', 'events_20180717', 'events_20180806', 'events_20180721', 'events_20180725', 'events_20180824', 'events_20180923', 'events_20180627', 'events_20180726', 'events_20180729', 'events_20180929', 'events_20180925', 'events_20180722', 'events_20180630', 'events_20180730', 'events_20180831', 'events_20180701', 'events_20180619', 'events_20180810', 'events_20180822', 'events_20180921', 'events_20180819', 'events_20180927', 'events_20180905', 'events_20180816', 'events_20180622', 'events_20180802', 'events_20180826', 'events_20180714', 'events_20180901', 'events_20180916', 'events_20180809', 'events_20181002', 'events_20180703', 'events_20180617', 'events_20180902', 'events_20180625', 'events_20180827', 'events_20180805', 'events_20180825', 'events_20180919', 'events_20180917', 'events_20180705', 'events_20180613', 'events_20180907', 'events_20180909', 'events_20180727', 'events_20180813', 'events_20180614', 'events_20180623', 'events_20180829', 'events_20180615', 'events_20180712', 'events_20180718', 'events_20180815', 'events_20180629', 'events_20180803', 'events_20180823', 'events_20180723']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-02-10 18:32:08 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-10 18:32:08 - root - INFO - ```sql
WITH cohort AS (
  SELECT DISTINCT `user_pseudo_id`
  FROM (
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180901`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180902`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180903`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180904`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180905`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180906`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180907`
  )
  WHERE `event_name` = 'first_open'
    AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07'
),
events AS (
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180901`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180902`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180903`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180904`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180905`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180906`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180907`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180908`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180909`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180910`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180911`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180912`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180913`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180914`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180915`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180916`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180917`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180918`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180919`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180920`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180921`
)
SELECT
  ROUND(100 * SUM(CASE WHEN active_week1 = 1 THEN 1 ELSE 0 END) / COUNT(*), 4) AS Week1_RetentionRate,
  ROUND(100 * SUM(CASE WHEN active_week2 = 1 THEN 1 ELSE 0 END) / COUNT(*), 4) AS Week2_RetentionRate,
  ROUND(100 * SUM(CASE WHEN active_week3 = 1 THEN 1 ELSE 0 END) / COUNT(*), 4) AS Week3_RetentionRate
FROM (
  SELECT
    cohort.`user_pseudo_id`,
    MAX(CASE WHEN DATE(TIMESTAMP_MICROS(events.`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07' THEN 1 ELSE 0 END) AS active_week1,
    MAX(CASE WHEN DATE(TIMESTAMP_MICROS(events.`event_timestamp` + 28800000000)) BETWEEN '2018-09-08' AND '2018-09-14' THEN 1 ELSE 0 END) AS active_week2,
    MAX(CASE WHEN DATE(TIMESTAMP_MICROS(events.`event_timestamp` + 28800000000)) BETWEEN '2018-09-15' AND '2018-09-21' THEN 1 ELSE 0 END) AS active_week3
  FROM cohort
  LEFT JOIN events
    ON events.`user_pseudo_id` = cohort.`user_pseudo_id`
  GROUP BY cohort.`user_pseudo_id`
)
```
2025-02-10 18:32:10 - root - INFO - itercount: 1
2025-02-10 18:32:10 - root - INFO - 0
2025-02-10 18:32:10 - root - INFO - results: 
Week1_RetentionRate,Week2_RetentionRate,Week3_RetentionRate
100.0,22.1212,8.1818


2025-02-10 18:32:10 - root - INFO - Please check the answer again by reviewing Could you please help me get the weekly customer retention rate in September 2018 for new customers who first used our app (first_open event) within the first week starting from September 1st, 2018 (timezone in Shanghai)? The retention rates should cover the following weeks 1, 2, and 3 period after the initial use and display them in column format., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Week1_RetentionRate,Week2_RetentionRate,Week3_RetentionRate
rate1:0<=float<=100,rate2:0<=float<=100,rate3:0<=float<=100
(Attention: answer in one row)
```

**Explanation:**

The table above presents the weekly customer retention rates (as percentages between 0 and 100) for new customers who first used the app (recorded a `first_open` event) during the first week of September 2018, according to Shanghai timezone. The retention rates are for Weeks 1, 2, and 3 following their initial use, all provided in a single row as per the requested format. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Week1_RetentionRate,Week2_RetentionRate,Week3_RetentionRate
100.0,22.1212,8.1818
Current sql:
WITH cohort AS (
  SELECT DISTINCT `user_pseudo_id`
  FROM (
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180901`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180902`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180903`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180904`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180905`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180906`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180907`
  )
  WHERE `event_name` = 'first_open'
    AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07'
),
events AS (
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180901`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180902`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180903`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180904`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180905`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180906`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180907`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180908`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180909`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180910`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180911`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180912`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180913`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180914`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180915`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180916`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180917`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180918`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180919`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180920`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180921`
)
SELECT
  ROUND(100 * SUM(CASE WHEN active_week1 = 1 THEN 1 ELSE 0 END) / COUNT(*), 4) AS Week1_RetentionRate,
  ROUND(100 * SUM(CASE WHEN active_week2 = 1 THEN 1 ELSE 0 END) / COUNT(*), 4) AS Week2_RetentionRate,
  ROUND(100 * SUM(CASE WHEN active_week3 = 1 THEN 1 ELSE 0 END) / COUNT(*), 4) AS Week3_RetentionRate
FROM (
  SELECT
    cohort.`user_pseudo_id`,
    MAX(CASE WHEN DATE(TIMESTAMP_MICROS(events.`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07' THEN 1 ELSE 0 END) AS active_week1,
    MAX(CASE WHEN DATE(TIMESTAMP_MICROS(events.`event_timestamp` + 28800000000)) BETWEEN '2018-09-08' AND '2018-09-14' THEN 1 ELSE 0 END) AS active_week2,
    MAX(CASE WHEN DATE(TIMESTAMP_MICROS(events.`event_timestamp` + 28800000000)) BETWEEN '2018-09-15' AND '2018-09-21' THEN 1 ELSE 0 END) AS active_week3
  FROM cohort
  LEFT JOIN events
    ON events.`user_pseudo_id` = cohort.`user_pseudo_id`
  GROUP BY cohort.`user_pseudo_id`
)
2025-02-10 18:32:47 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-10 18:32:47 - root - INFO - ```sql
WITH cohort AS (
  SELECT DISTINCT `user_pseudo_id`
  FROM (
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180901`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180902`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180903`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180904`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180905`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180906`
    UNION ALL
    SELECT * FROM `firebase-public-project.analytics_153293282.events_20180907`
  )
  WHERE `event_name` = 'first_open'
    AND DATE(TIMESTAMP_MICROS(`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07'
),
events AS (
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180901`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180902`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180903`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180904`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180905`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180906`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180907`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180908`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180909`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180910`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180911`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180912`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180913`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180914`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180915`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180916`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180917`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180918`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180919`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180920`
  UNION ALL
  SELECT * FROM `firebase-public-project.analytics_153293282.events_20180921`
)
SELECT
  ROUND(100 * SUM(CASE WHEN active_week1 = 1 THEN 1 ELSE 0 END) / COUNT(*), 4) AS Week1_RetentionRate,
  ROUND(100 * SUM(CASE WHEN active_week2 = 1 THEN 1 ELSE 0 END) / COUNT(*), 4) AS Week2_RetentionRate,
  ROUND(100 * SUM(CASE WHEN active_week3 = 1 THEN 1 ELSE 0 END) / COUNT(*), 4) AS Week3_RetentionRate
FROM (
  SELECT
    cohort.`user_pseudo_id`,
    MAX(CASE WHEN DATE(TIMESTAMP_MICROS(events.`event_timestamp` + 28800000000)) BETWEEN '2018-09-01' AND '2018-09-07' THEN 1 ELSE 0 END) AS active_week1,
    MAX(CASE WHEN DATE(TIMESTAMP_MICROS(events.`event_timestamp` + 28800000000)) BETWEEN '2018-09-08' AND '2018-09-14' THEN 1 ELSE 0 END) AS active_week2,
    MAX(CASE WHEN DATE(TIMESTAMP_MICROS(events.`event_timestamp` + 28800000000)) BETWEEN '2018-09-15' AND '2018-09-21' THEN 1 ELSE 0 END) AS active_week3
  FROM cohort
  LEFT JOIN events
    ON events.`user_pseudo_id` = cohort.`user_pseudo_id`
  GROUP BY cohort.`user_pseudo_id`
)
```
2025-02-10 18:32:48 - root - INFO - itercount: 2
2025-02-10 18:32:48 - root - INFO - 0
2025-02-10 18:32:48 - root - INFO - Total iteration counts: 2
