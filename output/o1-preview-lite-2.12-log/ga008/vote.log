**Comparison of the SQL Queries:**

Both `0result.sql` and `2result.sql` are designed to calculate the total number of page views for each day in November 2020 and the average number of page views per user on those days, restricted to users who made at least one purchase in November 2020.

---

**1. `0result.sql`:**

- **Approach:**
  - Uses a Common Table Expression (CTE) named `all_events` to combine all daily event tables for November 2020 using `UNION ALL`.
  - Creates another CTE named `purchasers` to identify users who made at least one purchase in November 2020.
  - Filters the events to include only those from users in the `purchasers` CTE.
  - Calculates total page views per day and average page views per user by dividing the total page views by the count of distinct users per day.
- **Pros:**
  - Explicitly lists each event table, making it clear which tables are included.
- **Cons:**
  - **Inefficient and Less Maintainable:**
    - Manually lists each table, which is cumbersome and error-prone, especially for months with different numbers of days.
    - If the date range changes, the SQL needs significant modifications.
  - **Scalability Issues:**
    - Not scalable for larger date ranges or multiple months.
    - The query becomes lengthy and harder to read.

---

**2. `2result.sql`:**

- **Approach:**
  - Utilizes BigQuery's table wildcard functionality by querying `events_*` and filtering dates using the `_TABLE_SUFFIX` pseudo-column.
  - Identifies users who made purchases using a subquery within the same date range.
  - Calculates `page_views_per_user` by grouping events by `event_date` and `user_pseudo_id`, and counting page views per user per day.
  - Computes total page views by summing `page_views_per_user`.
  - Calculates the average by taking the average of `page_views_per_user` per day.
- **Pros:**
  - **Efficiency and Performance:**
    - Automatically includes all event tables within the specified date range without listing each one.
    - Reduces manual effort and potential for errors.
  - **Maintainability:**
    - Easy to adjust the date range by changing the `_TABLE_SUFFIX` condition.
    - More adaptable to different date ranges and scalable for larger datasets.
  - **Readability:**
    - Cleaner and more concise SQL code.
    - Easier to understand and maintain.
- **Cons:**
  - Requires familiarity with BigQuery-specific features like table wildcards and `_TABLE_SUFFIX`.

---

**Reason for Choosing `2result.sql`:**

- **Efficiency:** Querying using `events_*` with `_TABLE_SUFFIX` is more efficient than manually UNION ALL individual tables. It reduces query complexity and execution time.
- **Maintainability:** Easier to modify for different date ranges without changing the structure of the query significantly.
- **Scalability:** Better suited for larger datasets and extended date ranges. It can handle months with varying numbers of days or even multiple months seamlessly.
- **Readability:** The query is more concise and easier to read, making it preferable for future maintenance and collaboration.

---

**Selected SQL File:**

```plaintext
2result.sql
```