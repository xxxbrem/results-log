After comparing both SQL queries and their results, I recommend **`1result.sql`** as the correct solution.

**Reasons:**

1. **Accurate Year Extraction:**  
   - **`1result.sql`** uses `substr(t."txn_date", 7, 4)` to extract the year from the transaction date. Since the date format is `'DD-MM-YYYY'`, extracting characters from position 7 for 4 characters accurately captures the year (e.g., `'2017'` from `'01-01-2017'`).
   - **`0result.sql`** uses `SUBSTR(t."txn_date", -4, 4)`, which also works by counting backwards from the end of the string. However, using positive indices is more readable and less error-prone, especially if there's variation in date formats.

2. **Excluding the First Year's Data Correctly:**  
   - **`1result.sql`** excludes the first year by comparing the year extracted from transaction dates to the earliest year in the data.
   - This ensures that all transactions from the first year are excluded from the analysis, as required.

3. **Clear and Readable Query Structure:**  
   - **`1result.sql`** uses a Common Table Expression (CTE) named `yearly_data`, which makes the query more organized and easier to understand.
   - The calculations for ranking and annual percentage change are clearly defined in the main `SELECT` statement.

4. **Consistent and Rounded Outputs:**  
   - The results in **`1result.csv`** show averages rounded to four decimal places, providing a clean and professional presentation.
   - This aligns with standard practices for reporting financial figures.

**Chosen SQL File:**

```plaintext
1result.sql
```