2025-01-25 01:48:14 - openai._base_client - INFO - Retrying request to /chat/completions in 0.412684 seconds
2025-01-25 01:49:02 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 01:49:02 - root - INFO - SQL:
SELECT DISTINCT "model"
   FROM "model_score";
Results:
model
DTCG
DTCE
RFCG
RFCE
ABC
LOGRL
LOGRS
LOGRLCV
LOGRSCV
MLPC1
MLPC2
KNCU
KNCD
Stack
GPRQ
DTRF
DTRA
DTRP
RFRS
RFRA
RFRP
ABR
HGBR
MLPR1
KNRU
KNRD
GPCL
GPCR
GPCQ
HGBC
GNB
GPRL
GPRR
ELNE
ELNECV
LINR
MLPR2
SGDCH
SGDCLL
SGDCMH
SVCL
SVCP
SVCG
SVCS
KERC
KERR

2025-01-25 01:49:02 - root - INFO - SQL:
SELECT DISTINCT "name", "version"
   FROM "model_score";
Results:
name,version
iris,1
iris,2
iris,3
concrete,1
concrete,2
concrete,3
concrete,4
concrete,5
iris,4
iris,5
Delaney solubility,1
Delaney solubility,2
Delaney solubility,3
Delaney solubility,4
Critical Heat Flux,1
Critical Heat Flux,2
Critical Heat Flux,3
Critical Heat Flux,4
Liver disease prediction,1
Liver disease prediction,2
Liver disease prediction,3
Liver disease prediction,4
Liver disease prediction,5
Pumpkin Seeds,1
Pumpkin Seeds,2
Pumpkin Seeds,3
Pumpkin Seeds,4
water quality,1
water quality,2
water quality,3
lithium ion batteries,1
lithium ion batteries,2
lithium ion batteries,3
diabetes,1
diabetes,2
diabetes,3
diabetes,4
Franck-Hertz,1
Franck-Hertz,2
Franck-Hertz,3
Franck-Hertz,4
Franck-Hertz,5
Tunnel diode,1
Tunnel diode,2
Tunnel diode,3
Tunnel diode,4
Tunnel diode,5
Tunnel diode,6
survey lung cancer,1
survey lung cancer,2
survey lung cancer,3
survey lung cancer,4
survey lung cancer,5
oil spill,1
oil spill,2
oil spill,3
oil spill,4
oil spill,5
Solar Power Generation,1
Solar Power Generation,2
Solar Power Generation,3
Solar Power Generation,4
Solar Power Generation,5
Solar Power Generation,6
PCOS,1
PCOS,2
water quality 2,1
water quality 2,2
water quality 2,3
PCOS,3
kindey stone urine analysis,1
kindey stone urine analysis,2
kindey stone urine analysis,3
kindey stone urine analysis,4
kindey stone urine analysis,5
kindey stone urine analysis,6
kindey stone urine analysis,7
kindey stone urine analysis,8
Hospital Mortality Prediction,1
Hospital Mortality Prediction,2
Hospital Mortality Prediction,3
Hospital Mortality Prediction,4
Hospital Mortality Prediction,5
Hospital Mortality Prediction,6
smoke detection iot,1
smoke detection iot,2
smoke detection iot,3
smoke detection iot,4
smoke detection iot,5
concrete,6
iris,6
iris,7
Delaney solubility,5
concrete,7
Critical Heat Flux,5
Solar Power Generation,7
PSS3E5,1
PSS3E5,2
PSS3E5,3
PSS3E5,4
PSS3E5,5

2025-01-25 01:49:02 - root - INFO - SQL:
SELECT "name", "version", "test_score"
   FROM "model_score"
   WHERE "model" = 'Stack';
Results:
Too long, hard cut:
name,version,test_score
iris,1,0.78
iris,1,0.8
iris,1,0.8
iris,2,0.78
iris,2,0.8
iris,2,0.8
iris,3,0.78
iris,3,0.8
iris,3,0.8
concrete,1,0.7491240941067063
concrete,1,0.7478259090713758
concrete,1,0.8952049262695958
concrete,2,0.7491240941067063
concrete,2,0.5153723438701945
concrete,2,0.7550913523238763
concrete,3,0.7491240941067063
concrete,3,0.6204357065145107
concrete,3,0.7624137560765165
concrete,4,0.7418636266993917
concrete,4,0.7943036798259414
concrete,4,0.7999917844923515
concrete,5,0.7418636266993917
concrete,5,0.8280251862560624
concrete,5,0.6465132269043822
iris,4,0.8
iris,4,0.74
iris,4,0.74
iris,5,0.8
iris,5,0.72
iris,5,0.72
Delaney solubility,1,0.8603318218230251
Delaney solubility,1,0.8709068763294372
Delaney solubility,1,0.8709068763294372
Delaney solubility,2,0.8603318218230251
Delaney solubility,2,0.8676115461542331
Delaney solubility,2,0.8676115461542331
Delaney solubility,3,0.7361578456024362
Delaney solubility,3,0.7688278804396981
Delaney solubility,3,0.7688278804396981
Delaney solubility,4,0.7361578456024362
Delaney solubility,4,0.7370747785614673
Delaney solubility,4,0.7370747785614673
Critical Heat Flux,1,0.8767667331999809
Critical Heat Flux,1,0.8860441283949297
Critical Heat Flux,1,0.8913847510635327
Critical Heat Flux,2,0.8767667331999809
Critical Heat Flux,2,0.8906124602518019
Critical Heat Flux,2,0.896051215319373
Critical Heat Flux,3,0.8470847778663093
Critical Heat Flux,3,0.8580739277704147
Critical Heat Flux,3,0.820001186352687
Critical Heat Flux,4,0.8470847778663093
Critical Heat Flux,4,0.8212042575388446
Critical Heat Flux,4,0.8249690699279786
Liver disease prediction,1,0.7696969696969697
Liver disease prediction,1,0.7636363636363637
Liver disease prediction,1,0.8
Liver disease prediction,2,0.8121212121212121
Liver disease prediction,2,0.8181818181818182
Liver disease prediction,2,0.8787878787878788
Liver disease prediction,3,0.793939393939394
Liver disease prediction,3,0.793939393939394
Liver disease prediction,3,0.7757575757575758
Liver disease prediction,4,0.8424242424242424
Liver disease prediction,4,0.8606060606060606
Liver disease prediction,4,0.8484848484848485
Liver disease prediction,5,0.8121212121212121
Liver disease prediction,5,0.9090909090909091
Liver disease prediction,5,0.8545454545454545
Pumpkin Seeds,1,0.8812121212121212
Pumpkin Seeds,1,0.8751515151515151
Pumpkin Seeds,1,0.8751515151515151
Pumpkin Seeds,2,0.8812121212121212
Pumpkin Seeds,2,0.8751515151515151
Pumpkin Seeds,2,0.8751515151515151
Pumpkin Seeds,3,0.7927272727272727
Pumpkin Seeds,3,0.806060606060606
Pumpkin Seeds,3,0.806060606060606
Pumpkin Seeds,4,0.7927272727272727
Pumpkin Seeds,4,0.8315151515151515
Pumpkin Seeds,4,0.7927272727272727
water quality,1,0.9545454545454546
water quality,1,0.9628099173553719
water quality,1,0.9421875
water quality,2,0.9545454545454546
water quality,2,0.9628099173553719
water quality,2,0.9615076182838813
water quality,3,0.9545454545454546
water quality,3,0.9628099173553719
water quality,3,0.9626926196269262
lithium ion batteries,1,1.0
lithium ion batteries,1,1.0
lithium ion batteries,1,0.9642857142857143
lithium ion batteries,2,0.9821428571428571
lithium ion batteries,2,0.9553571428571429
lithium ion batteries,2,0.9732142857142857
lithium ion batteries,3,1.0
lithium ion batteries,3,0.9732142857142857
lithium ion batteries,3,1.0
diabetes,1,0.7677165354330708
diabetes,1,0.7559055118110236
diabetes,1,0.7322834645669292
diabetes,2,0.7677165354330708
diabetes,2,0.7637795275590551
diabetes,2,0.7519685039370079
diabetes,3,0.7677165354330708
diabetes,3,0.7559055118110236
diabetes,3,0.7677165354330708
diabetes,4,0.7362204724409449
diabetes,4,0.7047244094488189
diabetes,4,0.65748031496063
Franck-Hertz,1,0.9937834729052744
Franck-Hertz,1,0.42050978805796646
Franck-Hertz,1,0.5283474448268917
Franck-Hertz,2,0.9824854760825303
Franck-Hertz,2,0.3962737971869513
Franck-Hertz,2,0.3962737971869513
Franck-Hertz,3,0.9811894025941343
Franck-Hertz,3,0.6847210876201288
Franck-Hertz,3,0.8055712562976802
Franck-Hertz,4,0.9792841047863904
Franck-Hertz,4,0.9755456808767655
Franck-Hertz,4,0.9755456808767655
Franck-Hertz,5,0.9769293646328994
Franck-Hertz,5,0.9658770974605881
Franck-Hertz,5,0.9658770974605881
Tunnel diode,1,0.9589824567611835
Tunnel diode,1,0.9746337026041805
Tunnel diode,1,0.9746337026041805
Tunnel diode,2,0.9771486242648221
Tunnel diode,2,0.9540815878994447
Tunnel diode,2,0.9540815878994447
Tunnel diode,3,0.9720488075258886
Tunnel diode,3,0.9758336487780627
Tunnel diode,3,0.9758336487780627
Tunnel diode,4,0.9163396138783252
Tunnel diode,4,0.8935135661670219
Tunnel diode,4,0.8935135661670219
Tunnel diode,5,0.9163396138783252
Tunnel diode,5,0.8733461450925648
Tunnel diode,5,0.8733461450925648
Tunnel diode,6,0.9163396138783252
Tunnel diode,6,0.9387671333875972
Tunnel diode,6,0.9387671333875972
survey lung cancer,1,0.9724137931034482
survey lung cancer,1,0.9724137931034482
survey lung cancer,1,0.9724137931034482
survey lung cancer,2,0.9862068965517241
survey lung cancer,2,0.98620689

2025-01-25 01:49:02 - root - INFO - SQL:
SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
   FROM "model_score"
   WHERE "model" <> 'Stack'
   GROUP BY "name", "version";
Results:
name,version,max_non_stack_score
Critical Heat Flux,1,0.8868161892955251
Critical Heat Flux,2,0.8868161892955251
Critical Heat Flux,3,0.8868161892955251
Critical Heat Flux,4,0.8868161892955251
Critical Heat Flux,5,0.8836410197441006
Delaney solubility,1,0.8498776981484352
Delaney solubility,2,0.8498776981484352
Delaney solubility,3,0.8498776981484352
Delaney solubility,4,0.8498776981484352
Delaney solubility,5,0.8498776981484352
Franck-Hertz,1,0.46929699248120293
Franck-Hertz,2,0.46929699248120293
Franck-Hertz,3,0.46929699248120293
Franck-Hertz,4,0.46929699248120293
Franck-Hertz,5,0.46929699248120293
Hospital Mortality Prediction,1,0.8545454545454545
Hospital Mortality Prediction,2,0.8909090909090909
Hospital Mortality Prediction,3,0.8727272727272727
Hospital Mortality Prediction,4,0.8666666666666667
Hospital Mortality Prediction,5,0.8666666666666667
Hospital Mortality Prediction,6,0.8787878787878788
Liver disease prediction,1,0.8303030303030303
Liver disease prediction,2,0.8666666666666667
Liver disease prediction,3,0.8424242424242424
Liver disease prediction,4,0.8727272727272727
Liver disease prediction,5,0.9212121212121213
PCOS,1,0.888268156424581
PCOS,2,0.888268156424581
PCOS,3,0.888268156424581
PSS3E5,1,0.6142270861833106
PSS3E5,2,0.5718194254445964
PSS3E5,3,0.6142270861833106
PSS3E5,4,0.6163265306122448
PSS3E5,5,0.6653061224489796
Pumpkin Seeds,1,0.8848484848484849
Pumpkin Seeds,2,0.8848484848484849
Pumpkin Seeds,3,0.8848484848484849
Pumpkin Seeds,4,0.8848484848484849
Solar Power Generation,1,0.9221791895515516
Solar Power Generation,2,0.9221791895515516
Solar Power Generation,3,0.9221791895515516
Solar Power Generation,4,0.9221791895515516
Solar Power Generation,5,0.9221791895515516
Solar Power Generation,6,0.9221791895515516
Solar Power Generation,7,0.9232764166932035
Tunnel diode,1,0.941733622559653
Tunnel diode,2,0.941733622559653
Tunnel diode,3,0.941733622559653
Tunnel diode,4,0.941733622559653
Tunnel diode,5,0.941733622559653
Tunnel diode,6,0.941733622559653
concrete,1,0.8885222604143914
concrete,2,0.8884068368127706
concrete,3,0.8884068368127706
concrete,4,0.8885222604143914
concrete,5,0.8884068368127706
concrete,6,0.8980905157142272
concrete,7,0.8881812593695267
diabetes,1,0.7598425196850394
diabetes,2,0.7677165354330708
diabetes,3,0.7677165354330708
diabetes,4,0.7677165354330708
iris,1,0.82
iris,2,0.82
iris,3,0.82
iris,4,0.82
iris,5,0.82
iris,6,0.82
iris,7,0.82
kindey stone urine analysis,1,0.8518518518518519
kindey stone urine analysis,2,0.9636363636363636
kindey stone urine analysis,3,1.0
kindey stone urine analysis,4,1.0
kindey stone urine analysis,5,1.0
kindey stone urine analysis,6,1.0
kindey stone urine analysis,7,1.0
kindey stone urine analysis,8,0.8518518518518519
lithium ion batteries,1,1.0
lithium ion batteries,2,1.0
lithium ion batteries,3,1.0
oil spill,1,0.9655172413793104
oil spill,2,0.9862068965517241
oil spill,3,0.993103448275862
oil spill,4,0.9862068965517241
oil spill,5,0.9655172413793104
smoke detection iot,1,0.9999516160247726
smoke detection iot,2,0.9999516160247726
smoke detection iot,3,0.9999516160247726
smoke detection iot,4,0.9999516160247726
smoke detection iot,5,0.9999516160247726
survey lung cancer,1,0.9724137931034482
survey lung cancer,2,0.993103448275862
survey lung cancer,3,0.9862068965517241
survey lung cancer,4,0.9793103448275862
survey lung cancer,5,0.9655172413793104
water quality,1,0.9652892561983472
water quality,2,0.9652892561983472
water quality,3,0.9652892561983472
water quality 2,1,0.7959183673469388
water quality 2,2,0.7959183673469388
water quality 2,3,0.7959183673469388

2025-01-25 01:49:02 - root - INFO - SQL:
SELECT s."name", s."version", s."test_score" AS "stack_score", n."max_non_stack_score"
   FROM (
     SELECT "name", "version", "test_score"
     FROM "model_score"
     WHERE "model" = 'Stack'
   ) AS s
   JOIN (
     SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
     FROM "model_score"
     WHERE "model" <> 'Stack'
     GROUP BY "name", "version"
   ) AS n
   ON s."name" = n."name" AND s."version" = n."version";
Results:
Too long, hard cut:
name,version,stack_score,max_non_stack_score
iris,1,0.78,0.82
iris,1,0.8,0.82
iris,1,0.8,0.82
iris,2,0.78,0.82
iris,2,0.8,0.82
iris,2,0.8,0.82
iris,3,0.78,0.82
iris,3,0.8,0.82
iris,3,0.8,0.82
concrete,1,0.7491240941067063,0.8885222604143914
concrete,1,0.7478259090713758,0.8885222604143914
concrete,1,0.8952049262695958,0.8885222604143914
concrete,2,0.7491240941067063,0.8884068368127706
concrete,2,0.5153723438701945,0.8884068368127706
concrete,2,0.7550913523238763,0.8884068368127706
concrete,3,0.7491240941067063,0.8884068368127706
concrete,3,0.6204357065145107,0.8884068368127706
concrete,3,0.7624137560765165,0.8884068368127706
concrete,4,0.7418636266993917,0.8885222604143914
concrete,4,0.7943036798259414,0.8885222604143914
concrete,4,0.7999917844923515,0.8885222604143914
concrete,5,0.7418636266993917,0.8884068368127706
concrete,5,0.8280251862560624,0.8884068368127706
concrete,5,0.6465132269043822,0.8884068368127706
iris,4,0.8,0.82
iris,4,0.74,0.82
iris,4,0.74,0.82
iris,5,0.8,0.82
iris,5,0.72,0.82
iris,5,0.72,0.82
Delaney solubility,1,0.8603318218230251,0.8498776981484352
Delaney solubility,1,0.8709068763294372,0.8498776981484352
Delaney solubility,1,0.8709068763294372,0.8498776981484352
Delaney solubility,2,0.8603318218230251,0.8498776981484352
Delaney solubility,2,0.8676115461542331,0.8498776981484352
Delaney solubility,2,0.8676115461542331,0.8498776981484352
Delaney solubility,3,0.7361578456024362,0.8498776981484352
Delaney solubility,3,0.7688278804396981,0.8498776981484352
Delaney solubility,3,0.7688278804396981,0.8498776981484352
Delaney solubility,4,0.7361578456024362,0.8498776981484352
Delaney solubility,4,0.7370747785614673,0.8498776981484352
Delaney solubility,4,0.7370747785614673,0.8498776981484352
Critical Heat Flux,1,0.8767667331999809,0.8868161892955251
Critical Heat Flux,1,0.8860441283949297,0.8868161892955251
Critical Heat Flux,1,0.8913847510635327,0.8868161892955251
Critical Heat Flux,2,0.8767667331999809,0.8868161892955251
Critical Heat Flux,2,0.8906124602518019,0.8868161892955251
Critical Heat Flux,2,0.896051215319373,0.8868161892955251
Critical Heat Flux,3,0.8470847778663093,0.8868161892955251
Critical Heat Flux,3,0.8580739277704147,0.8868161892955251
Critical Heat Flux,3,0.820001186352687,0.8868161892955251
Critical Heat Flux,4,0.8470847778663093,0.8868161892955251
Critical Heat Flux,4,0.8212042575388446,0.8868161892955251
Critical Heat Flux,4,0.8249690699279786,0.8868161892955251
Liver disease prediction,1,0.7696969696969697,0.8303030303030303
Liver disease prediction,1,0.7636363636363637,0.8303030303030303
Liver disease prediction,1,0.8,0.8303030303030303
Liver disease prediction,2,0.8121212121212121,0.8666666666666667
Liver disease prediction,2,0.8181818181818182,0.8666666666666667
Liver disease prediction,2,0.8787878787878788,0.8666666666666667
Liver disease prediction,3,0.793939393939394,0.8424242424242424
Liver disease prediction,3,0.793939393939394,0.8424242424242424
Liver disease prediction,3,0.7757575757575758,0.8424242424242424
Liver disease prediction,4,0.8424242424242424,0.8727272727272727
Liver disease prediction,4,0.8606060606060606,0.8727272727272727
Liver disease prediction,4,0.8484848484848485,0.8727272727272727
Liver disease prediction,5,0.8121212121212121,0.9212121212121213
Liver disease prediction,5,0.9090909090909091,0.9212121212121213
Liver disease prediction,5,0.8545454545454545,0.9212121212121213
Pumpkin Seeds,1,0.8812121212121212,0.8848484848484849
Pumpkin Seeds,1,0.8751515151515151,0.8848484848484849
Pumpkin Seeds,1,0.8751515151515151,0.8848484848484849
Pumpkin Seeds,2,0.8812121212121212,0.8848484848484849
Pumpkin Seeds,2,0.8751515151515151,0.8848484848484849
Pumpkin Seeds,2,0.8751515151515151,0.8848484848484849
Pumpkin Seeds,3,0.7927272727272727,0.8848484848484849
Pumpkin Seeds,3,0.806060606060606,0.8848484848484849
Pumpkin Seeds,3,0.806060606060606,0.8848484848484849
Pumpkin Seeds,4,0.7927272727272727,0.8848484848484849
Pumpkin Seeds,4,0.8315151515151515,0.8848484848484849
Pumpkin Seeds,4,0.7927272727272727,0.8848484848484849
water quality,1,0.9545454545454546,0.9652892561983472
water quality,1,0.9628099173553719,0.9652892561983472
water quality,1,0.9421875,0.9652892561983472
water quality,2,0.9545454545454546,0.9652892561983472
water quality,2,0.9628099173553719,0.9652892561983472
water quality,2,0.9615076182838813,0.9652892561983472
water quality,3,0.9545454545454546,0.9652892561983472
water quality,3,0.9628099173553719,0.9652892561983472
water quality,3,0.9626926196269262,0.9652892561983472
lithium ion batteries,1,1.0,1.0
lithium ion batteries,1,1.0,1.0
lithium ion batteries,1,0.9642857142857143,1.0
lithium ion batteries,2,0.9821428571428571,1.0
lithium ion batteries,2,0.9553571428571429,1.0
lithium ion batteries,2,0.9732142857142857,1.0
lithium ion batteries,3,1.0,1.0
lithium ion batteries,3,0.9732142857142857,1.0
lithium ion batteries,3,1.0,1.0
diabetes,1,0.7677165354330708,0.7598425196850394
diabetes,1,0.7559055118110236,0.7598425196850394
diabetes,1,0.7322

2025-01-25 01:49:02 - root - INFO - SQL:
SELECT s."name", s."version",
     CASE
       WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
       WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
     END AS "status"
   FROM (
     SELECT "name", "version", "test_score"
     FROM "model_score"
     WHERE "model" = 'Stack'
   ) AS s
   JOIN (
     SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
     FROM "model_score"
     WHERE "model" <> 'Stack'
     GROUP BY "name", "version"
   ) AS n
   ON s."name" = n."name" AND s."version" = n."version";
Results:
Too long, hard cut:
name,version,status
iris,1,
iris,1,
iris,1,
iris,2,
iris,2,
iris,2,
iris,3,
iris,3,
iris,3,
concrete,1,
concrete,1,
concrete,1,strong
concrete,2,
concrete,2,
concrete,2,
concrete,3,
concrete,3,
concrete,3,
concrete,4,
concrete,4,
concrete,4,
concrete,5,
concrete,5,
concrete,5,
iris,4,
iris,4,
iris,4,
iris,5,
iris,5,
iris,5,
Delaney solubility,1,strong
Delaney solubility,1,strong
Delaney solubility,1,strong
Delaney solubility,2,strong
Delaney solubility,2,strong
Delaney solubility,2,strong
Delaney solubility,3,
Delaney solubility,3,
Delaney solubility,3,
Delaney solubility,4,
Delaney solubility,4,
Delaney solubility,4,
Critical Heat Flux,1,
Critical Heat Flux,1,
Critical Heat Flux,1,strong
Critical Heat Flux,2,
Critical Heat Flux,2,strong
Critical Heat Flux,2,strong
Critical Heat Flux,3,
Critical Heat Flux,3,
Critical Heat Flux,3,
Critical Heat Flux,4,
Critical Heat Flux,4,
Critical Heat Flux,4,
Liver disease prediction,1,
Liver disease prediction,1,
Liver disease prediction,1,
Liver disease prediction,2,
Liver disease prediction,2,
Liver disease prediction,2,strong
Liver disease prediction,3,
Liver disease prediction,3,
Liver disease prediction,3,
Liver disease prediction,4,
Liver disease prediction,4,
Liver disease prediction,4,
Liver disease prediction,5,
Liver disease prediction,5,
Liver disease prediction,5,
Pumpkin Seeds,1,
Pumpkin Seeds,1,
Pumpkin Seeds,1,
Pumpkin Seeds,2,
Pumpkin Seeds,2,
Pumpkin Seeds,2,
Pumpkin Seeds,3,
Pumpkin Seeds,3,
Pumpkin Seeds,3,
Pumpkin Seeds,4,
Pumpkin Seeds,4,
Pumpkin Seeds,4,
water quality,1,
water quality,1,
water quality,1,
water quality,2,
water quality,2,
water quality,2,
water quality,3,
water quality,3,
water quality,3,
lithium ion batteries,1,soft
lithium ion batteries,1,soft
lithium ion batteries,1,
lithium ion batteries,2,
lithium ion batteries,2,
lithium ion batteries,2,
lithium ion batteries,3,soft
lithium ion batteries,3,
lithium ion batteries,3,soft
diabetes,1,strong
diabetes,1,
diabetes,1,
diabetes,2,soft
diabetes,2,
diabetes,2,
diabetes,3,soft
diabetes,3,
diabetes,3,soft
diabetes,4,
diabetes,4,
diabetes,4,
Franck-Hertz,1,strong
Franck-Hertz,1,
Franck-Hertz,1,strong
Franck-Hertz,2,strong
Franck-Hertz,2,
Franck-Hertz,2,
Franck-Hertz,3,strong
Franck-Hertz,3,strong
Franck-Hertz,3,strong
Franck-Hertz,4,strong
Franck-Hertz,4,strong
Franck-Hertz,4,strong
Franck-Hertz,5,strong
Franck-Hertz,5,strong
Franck-Hertz,5,strong
Tunnel diode,1,strong
Tunnel diode,1,strong
Tunnel diode,1,strong
Tunnel diode,2,strong
Tunnel diode,2,strong
Tunnel diode,2,strong
Tunnel diode,3,strong
Tunnel diode,3,strong
Tunnel diode,3,strong
Tunnel diode,4,
Tunnel diode,4,
Tunnel diode,4,
Tunnel diode,5,
Tunnel diode,5,
Tunnel diode,5,
Tunnel diode,6,
Tunnel diode,6,
Tunnel diode,6,
survey lung cancer,1,soft
survey lung cancer,1,soft
survey lung cancer,1,soft
survey lung cancer,2,
survey lung cancer,2,
survey lung cancer,2,
survey lung cancer,3,
survey lung cancer,3,
survey lung cancer,3,
survey lung cancer,4,
survey lung cancer,4,
survey lung cancer,4,
survey lung cancer,5,
survey lung cancer,5,
survey lung cancer,5,strong
oil spill,1,soft
oil spill,1,strong
oil spill,1,soft
oil spill,2,soft
oil spill,2,soft
oil spill,2,soft
oil spill,3,soft
oil spill,3,soft
oil spill,3,
oil spill,4,strong
oil spill,4,strong
oil spill,4,
oil spill,5,strong
oil spill,5,strong
oil spill,5,strong
Solar Power Generation,1,
Solar Power Generation,1,strong
Solar Power Generation,1,strong
Solar Power Generation,2,
Solar Power Generation,2,strong
Solar Power Generation,2,strong
Solar Power Generation,3,strong
Solar Power Generation,3,strong
Solar Power Generation,3,strong
Solar Power Generation,4,strong
Solar Power Generation,4,strong
Solar Power Generation,4,strong
Solar Power Generation,5,strong
Solar Power Generation,5,strong
Solar Power Generation,5,
Solar Power Generation,6,strong
Solar Power Generation,6,strong
Solar Power Generation,6,
PCOS,1,
PCOS,1,
PCOS,1,
PCOS,2,
PCOS,2,
PCOS,2,
water quality 2,1,
water quality 2,1,
water quality 2,1,
water quality 2,2,
water quality 2,2,
water quality 2,2,
water quality 2,3,
water quality 2,3,
water quality 2,3,
PCOS,3,soft
PCOS,3,strong
PCOS,3,soft
kindey stone urine analysis,1,
kindey stone urine analysis,1,
kindey stone urine analysis,1,
kindey stone urine analysis,2,soft
kindey stone urine analysis,2,soft
kindey stone urine analysis,2,soft
kindey stone urine analysis,3,soft
kindey stone urine analysis,3,
kindey stone urine analysis,3,
kindey stone urine analysis,4,soft
kindey stone urine analysis,4,soft
kindey stone urine analysis,4,soft
kindey stone urine analysis,5,soft
kindey stone urine analysis,5,soft
kindey stone urine analysis,5,soft
kindey stone urine analysis,6,soft
kindey stone urine analysis,6,soft
kindey stone urine analysis,6,soft
kindey stone urine analysis,7,soft
kindey stone urine analysis,7,soft
kindey stone urine analysis,7,soft
kindey stone urine analysis,8,
kindey stone urine analysis,8,
kindey stone urine analysis,8,
Hospital Mortality Predictio

2025-01-25 01:49:02 - root - INFO - SQL:
SELECT DISTINCT "L1_model"
   FROM "model";
Results:
L1_model
regression
tree

2025-01-25 01:49:02 - root - INFO - SQL:
SELECT ms."name", ms."version", ms."model", m."L1_model"
   FROM "model_score" AS ms
   JOIN "model" AS m
   ON ms."name" = m."name" AND ms."version" = m."version" AND ms."step" = m."step";
Results:
Too long, hard cut:
name,version,model,L1_model
iris,1,DTCG,regression
iris,1,DTCE,regression
iris,1,RFCG,regression
iris,1,RFCE,regression
iris,1,ABC,regression
iris,1,LOGRL,regression
iris,1,LOGRS,regression
iris,1,LOGRLCV,regression
iris,1,LOGRSCV,regression
iris,1,MLPC1,regression
iris,1,MLPC2,regression
iris,1,KNCU,regression
iris,1,KNCD,regression
iris,1,Stack,regression
iris,1,ABC,regression
iris,1,LOGRL,regression
iris,1,LOGRS,regression
iris,1,KNCU,regression
iris,1,KNCD,regression
iris,1,Stack,regression
iris,1,ABC,regression
iris,1,LOGRL,regression
iris,1,LOGRS,regression
iris,1,KNCU,regression
iris,1,KNCD,regression
iris,1,Stack,regression
iris,2,DTCG,regression
iris,2,DTCE,regression
iris,2,RFCG,regression
iris,2,RFCE,regression
iris,2,ABC,regression
iris,2,LOGRL,regression
iris,2,LOGRS,regression
iris,2,LOGRLCV,regression
iris,2,LOGRSCV,regression
iris,2,MLPC1,regression
iris,2,MLPC2,regression
iris,2,KNCU,regression
iris,2,KNCD,regression
iris,2,Stack,regression
iris,2,ABC,regression
iris,2,LOGRS,regression
iris,2,Stack,regression
iris,2,ABC,regression
iris,2,LOGRS,regression
iris,2,Stack,regression
iris,3,DTCG,regression
iris,3,DTCE,regression
iris,3,RFCG,regression
iris,3,RFCE,regression
iris,3,ABC,regression
iris,3,LOGRL,regression
iris,3,LOGRLCV,regression
iris,3,MLPC1,regression
iris,3,MLPC2,regression
iris,3,KNCU,regression
iris,3,KNCD,regression
iris,3,Stack,regression
iris,3,ABC,regression
iris,3,LOGRL,regression
iris,3,Stack,regression
iris,3,ABC,regression
iris,3,LOGRL,regression
iris,3,Stack,regression
concrete,1,GPRQ,regression
concrete,1,DTRF,regression
concrete,1,DTRA,regression
concrete,1,DTRP,regression
concrete,1,RFRS,regression
concrete,1,RFRA,regression
concrete,1,RFRP,regression
concrete,1,ABR,regression
concrete,1,HGBR,regression
concrete,1,MLPR1,regression
concrete,1,KNRU,regression
concrete,1,KNRD,regression
concrete,1,Stack,regression
concrete,1,GPRQ,regression
concrete,1,DTRF,regression
concrete,1,DTRA,regression
concrete,1,RFRP,regression
concrete,1,HGBR,regression
concrete,1,Stack,regression
concrete,1,GPRQ,regression
concrete,1,DTRF,regression
concrete,1,DTRA,regression
concrete,1,RFRP,regression
concrete,1,HGBR,regression
concrete,1,Stack,regression
concrete,2,GPRQ,regression
concrete,2,DTRF,regression
concrete,2,DTRA,regression
concrete,2,DTRP,regression
concrete,2,RFRS,regression
concrete,2,RFRA,regression
concrete,2,RFRP,regression
concrete,2,ABR,regression
concrete,2,HGBR,regression
concrete,2,MLPR1,regression
concrete,2,KNRU,regression
concrete,2,KNRD,regression
concrete,2,Stack,regression
concrete,2,GPRQ,regression
concrete,2,RFRP,regression
concrete,2,HGBR,regression
concrete,2,Stack,regression
concrete,2,GPRQ,regression
concrete,2,RFRP,regression
concrete,2,HGBR,regression
concrete,2,Stack,regression
concrete,3,GPRQ,regression
concrete,3,DTRF,regression
concrete,3,DTRA,regression
concrete,3,DTRP,regression
concrete,3,RFRS,regression
concrete,3,RFRA,regression
concrete,3,RFRP,regression
concrete,3,ABR,regression
concrete,3,HGBR,regression
concrete,3,MLPR1,regression
concrete,3,KNRU,regression
concrete,3,KNRD,regression
concrete,3,Stack,regression
concrete,3,GPRQ,regression
concrete,3,DTRA,regression
concrete,3,RFRP,regression
concrete,3,HGBR,regression
concrete,3,Stack,regression
concrete,3,GPRQ,regression
concrete,3,DTRA,regression
concrete,3,RFRP,regression
concrete,3,HGBR,regression
concrete,3,Stack,regression
concrete,4,GPRQ,tree
concrete,4,DTRF,tree
concrete,4,DTRA,tree
concrete,4,DTRP,tree
concrete,4,RFRS,tree
concrete,4,RFRA,tree
concrete,4,RFRP,tree
concrete,4,ABR,tree
concrete,4,HGBR,tree
concrete,4,MLPR1,tree
concrete,4,KNRU,tree
concrete,4,KNRD,tree
concrete,4,Stack,tree
concrete,4,DTRA,tree
concrete,4,RFRS,tree
concrete,4,RFRA,tree
concrete,4,RFRP,tree
concrete,4,HGBR,tree
concrete,4,Stack,tree
concrete,4,DTRA,tree
concrete,4,RFRS,tree
concrete,4,RFRA,tree
concrete,4,RFRP,tree
concrete,4,HGBR,tree
concrete,4,Stack,tree
concrete,5,GPRQ,tree
concrete,5,DTRF,tree
concrete,5,DTRA,tree
concrete,5,DTRP,tree
concrete,5,RFRS,tree
concrete,5,RFRA,tree
concrete,5,RFRP,tree
concrete,5,ABR,tree
concrete,5,HGBR,tree
concrete,5,MLPR1,tree
concrete,5,KNRU,tree
concrete,5,KNRD,tree
concrete,5,Stack,tree
concrete,5,DTRA,tree
concrete,5,RFRS,tree
concrete,5,RFRP,tree
concrete,5,HGBR,tree
concrete,5,Stack,tree
concrete,5,DTRA,tree
concrete,5,RFRS,tree
concrete,5,RFRP,tree
concrete,5,HGBR,tree
concrete,5,Stack,tree
iris,4,GPCL,tree
iris,4,GPCR,tree
iris,4,GPCQ,tree
iris,4,DTCG,tree
iris,4,DTCE,tree
iris,4,RFCG,tree
iris,4,RFCE,tree
iris,4,ABC,tree
iris,4,HGBC,tree
iris,4,LOGRL,tree
iris,4,LOGRLCV,tree
iris,4,KNCU,tree
iris,4,KNCD,tree
iris,4,GNB,tree
iris,4,Stack,tree
iris,4,GPCR,tree
iris,4,GPCQ,tree
iris,4,DTCE,tree
iris,4,RFCE,tree
iris,4,KNCD,tree
iris,4,Stack,tree
iris,4,GPCR,tree
iris,4,GPCQ,tree
iris,4,DTCE,tree
iris,4,RFCE,tree
iris,4,KNCD,tree
iris,4,Stack,tree
iris,5,GPCL,tree
iris,5,GPCR,tree
iris,5,GPCQ,tree
iris,5,DTCG,tree
iris,5,DTCE,tree
iris,5,RFCG,tree
iris,5,RFCE,tr

2025-01-25 01:49:02 - root - INFO - SQL:
SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
   FROM (
     SELECT s."name", s."version",
       CASE
         WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
         WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
       END AS "status"
     FROM (
       SELECT "name", "version", "test_score"
       FROM "model_score"
       WHERE "model" = 'Stack'
     ) AS s
     JOIN (
       SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
       FROM "model_score"
       WHERE "model" <> 'Stack'
       GROUP BY "name", "version"
     ) AS n
     ON s."name" = n."name" AND s."version" = n."version"
   ) AS status_table
   JOIN "model" AS m
   ON status_table."name" = m."name" AND status_table."version" = m."version"
   GROUP BY status_table."status", m."L1_model";
Results:
status,L1_model,count
,regression,351
,tree,204
soft,regression,102
soft,tree,30
strong,regression,186
strong,tree,36

2025-01-25 01:49:02 - root - INFO - SQL:
SELECT stats."status", stats."L1_model", stats."count"
    FROM (
      SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
      FROM (
        SELECT s."name", s."version",
          CASE
            WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
            WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
          END AS "status"
        FROM (
          SELECT "name", "version", "test_score"
          FROM "model_score"
          WHERE "model" = 'Stack'
        ) AS s
        JOIN (
          SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
          FROM "model_score"
          WHERE "model" <> 'Stack'
          GROUP BY "name", "version"
        ) AS n
        ON s."name" = n."name" AND s."version" = n."version"
      ) AS status_table
      JOIN "model" AS m
      ON status_table."name" = m."name" AND status_table."version" = m."version"
      GROUP BY status_table."status", m."L1_model"
    ) AS stats
    WHERE (stats."status", stats."count") IN (
      SELECT "status", MAX("count")
      FROM (
        SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
        FROM (
          SELECT s."name", s."version",
            CASE
              WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
              WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
            END AS "status"
          FROM (
            SELECT "name", "version", "test_score"
            FROM "model_score"
            WHERE "model" = 'Stack'
          ) AS s
          JOIN (
            SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
            FROM "model_score"
            WHERE "model" <> 'Stack'
            GROUP BY "name", "version"
          ) AS n
          ON s."name" = n."name" AND s."version" = n."version"
        ) AS status_table
        JOIN "model" AS m
        ON status_table."name" = m."name" AND status_table."version" = m."version"
        GROUP BY status_table."status", m."L1_model"
      )
      GROUP BY "status"
    );
Results:
status,L1_model,count
soft,regression,102
strong,regression,186

2025-01-25 01:49:02 - root - INFO - itercount: 0
2025-01-25 01:49:02 - root - INFO - Table: problemDDL:
CREATE TABLE problem (name TEXT NOT NULL UNIQUE, path TEXT, type TEXT CHECK (type IN ("classification", "regression")), target TEXT, PRIMARY KEY (name))
Table: edaDDL:
CREATE TABLE eda (name TEXT, version INTEGER, feature TEXT, type TEXT, "range" BLOB, drop_user INTEGER CHECK (drop_user IN (0, 1)), drop_correlation INTEGER CHECK (drop_correlation IN (0, 1)), target INTEGER CHECK (target IN (0, 1)))
Table: feature_importanceDDL:
CREATE TABLE feature_importance (name TEXT, version INTEGER, step INTEGER, feature TEXT, importance NUMERIC)
Table: solutionDDL:
CREATE TABLE solution (name TEXT, version INTEGER, correlation NUMERIC, nb_model INTEGER, nb_feature INTEGER, score NUMERIC, test_size NUMERIC, resampling INTEGER CHECK (resampling IN (0, 1)) DEFAULT (0))
Table: model_scoreDDL:
CREATE TABLE model_score (name TEXT, version INTEGER, step INTEGER, model TEXT, train_score NUMERIC, test_score NUMERIC)
Table: model_importanceDDL:
CREATE TABLE model_importance (name TEXT, version INTEGER, step INTEGER, model TEXT, importance NUMERIC)
Table: modelDDL:
CREATE TABLE model (name TEXT, version INTEGER, step INTEGER CHECK (step IN (1, 2, 3)), L1_model TEXT CHECK (L1_model IN ("regression", "tree")))
External knowledge that might be helpful: 
None
The table structure information is (table names): 
['problem', 'eda', 'feature_importance', 'solution', 'model_score', 'model_importance', 'model']
Begin Exploring Related Columns
To solve the task, we'll first identify the relevant tables and columns, considering their potential usage and any conditions that may be applied:

**Relevant Tables and Columns:**

1. **`model_score` table**
   - **Columns:**
     - `"name"`: Identifies the dataset or problem instance.
     - `"version"`: Version number of the model or solution.
     - `"step"`: Indicates the step in the modeling process.
     - `"model"`: Name of the model (e.g., 'Stack', 'Regression', 'Tree').
     - `"test_score"`: Test score of the model.
   - **Potential Usage:** Retrieve test scores of models to compare 'Stack' models with non-'Stack' models for each `name` and `version`.

2. **`model` table**
   - **Columns:**
     - `"name"`: Should match the `name` in `model_score` for joining.
     - `"version"`: Should match the `version` in `model_score` for joining.
     - `"step"`: Indicates the step in the modeling process.
     - `"L1_model"`: Type of the Level 1 model ('regression' or 'tree').
   - **Potential Usage:** Identify the `L1_model` associated with each model.

**Conditions to be Used:**

- **Identifying 'Stack' Models:**
  - In `model_score`, `"model" = 'Stack'` indicates a 'Stack' model.
- **Non-'Stack' Models:**
  - In `model_score`, `"model" <> 'Stack'` filters non-'Stack' models.
- **Comparison of Test Scores:**
  - For each `name` and `version`, compare the maximum `test_score` of non-'Stack' models with the `test_score` of the 'Stack' model.
- **Determining Status:**
  - **'Strong' Status:** When the maximum test score of non-'Stack' models is less than the 'Stack' model's test score.
  - **'Soft' Status:** When they are equal.

**Exploratory SQL Queries:**

To understand the data and values in the relevant columns, here are 10 SQL queries:

1. **List all distinct model names from `model_score`:**
   ```sql
   SELECT DISTINCT "model"
   FROM "model_score";
   ```

2. **Find all unique `name` and `version` combinations:**
   ```sql
   SELECT DISTINCT "name", "version"
   FROM "model_score";
   ```

3. **Get test scores of 'Stack' models:**
   ```sql
   SELECT "name", "version", "test_score"
   FROM "model_score"
   WHERE "model" = 'Stack';
   ```

4. **Get maximum test scores of non-'Stack' models for each `name` and `version`:**
   ```sql
   SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
   FROM "model_score"
   WHERE "model" <> 'Stack'
   GROUP BY "name", "version";
   ```

5. **Retrieve `test_score` of 'Stack' models along with maximum non-'Stack' scores:**
   ```sql
   SELECT s."name", s."version", s."test_score" AS "stack_score", n."max_non_stack_score"
   FROM (
     SELECT "name", "version", "test_score"
     FROM "model_score"
     WHERE "model" = 'Stack'
   ) AS s
   JOIN (
     SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
     FROM "model_score"
     WHERE "model" <> 'Stack'
     GROUP BY "name", "version"
   ) AS n
   ON s."name" = n."name" AND s."version" = n."version";
   ```

6. **Determine status ('strong' or 'soft') for each `name` and `version`:**
   ```sql
   SELECT s."name", s."version",
     CASE
       WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
       WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
     END AS "status"
   FROM (
     SELECT "name", "version", "test_score"
     FROM "model_score"
     WHERE "model" = 'Stack'
   ) AS s
   JOIN (
     SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
     FROM "model_score"
     WHERE "model" <> 'Stack'
     GROUP BY "name", "version"
   ) AS n
   ON s."name" = n."name" AND s."version" = n."version";
   ```

7. **List L1_models from `model` table:**
   ```sql
   SELECT DISTINCT "L1_model"
   FROM "model";
   ```

8. **Join `model` and `model_score` to associate models with their L1_model:**
   ```sql
   SELECT ms."name", ms."version", ms."model", m."L1_model"
   FROM "model_score" AS ms
   JOIN "model" AS m
   ON ms."name" = m."name" AND ms."version" = m."version" AND ms."step" = m."step";
   ```

9. **Count occurrences of each L1_model for each status:**
   ```sql
   SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
   FROM (
     SELECT s."name", s."version",
       CASE
         WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
         WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
       END AS "status"
     FROM (
       SELECT "name", "version", "test_score"
       FROM "model_score"
       WHERE "model" = 'Stack'
     ) AS s
     JOIN (
       SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
       FROM "model_score"
       WHERE "model" <> 'Stack'
       GROUP BY "name", "version"
     ) AS n
     ON s."name" = n."name" AND s."version" = n."version"
   ) AS status_table
   JOIN "model" AS m
   ON status_table."name" = m."name" AND status_table."version" = m."version"
   GROUP BY status_table."status", m."L1_model";
   ```

10. **Find the L1_model with the highest occurrence for each status:**
    ```sql
    SELECT stats."status", stats."L1_model", stats."count"
    FROM (
      SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
      FROM (
        SELECT s."name", s."version",
          CASE
            WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
            WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
          END AS "status"
        FROM (
          SELECT "name", "version", "test_score"
          FROM "model_score"
          WHERE "model" = 'Stack'
        ) AS s
        JOIN (
          SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
          FROM "model_score"
          WHERE "model" <> 'Stack'
          GROUP BY "name", "version"
        ) AS n
        ON s."name" = n."name" AND s."version" = n."version"
      ) AS status_table
      JOIN "model" AS m
      ON status_table."name" = m."name" AND status_table."version" = m."version"
      GROUP BY status_table."status", m."L1_model"
    ) AS stats
    WHERE (stats."status", stats."count") IN (
      SELECT "status", MAX("count")
      FROM (
        SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
        FROM (
          SELECT s."name", s."version",
            CASE
              WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
              WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
            END AS "status"
          FROM (
            SELECT "name", "version", "test_score"
            FROM "model_score"
            WHERE "model" = 'Stack'
          ) AS s
          JOIN (
            SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
            FROM "model_score"
            WHERE "model" <> 'Stack'
            GROUP BY "name", "version"
          ) AS n
          ON s."name" = n."name" AND s."version" = n."version"
        ) AS status_table
        JOIN "model" AS m
        ON status_table."name" = m."name" AND status_table."version" = m."version"
        GROUP BY status_table."status", m."L1_model"
      )
      GROUP BY "status"
    );
    ```

**Final Answer:**

Based on the above queries, the L1_model with the highest occurrence for each status and the number of times it occurs is:

```csv
status,L1_model,count
strong,regression,count1:int
soft,tree,count2:int
```

(Note: Replace `count1:int` and `count2:int` with the actual integer counts obtained from the database.)

**Explanation:**

- For each status ('strong' and 'soft'), we identified the `L1_model` that appeared most frequently.
- The `count` represents the number of times this `L1_model` occurs in that status category.
- This indicates which `L1_model` is most commonly associated with 'strong' and 'soft' statuses based on the test scores of the models.Query:
SELECT DISTINCT "model"
   FROM "model_score";
Answer:
model
DTCG
DTCE
RFCG
RFCE
ABC
LOGRL
LOGRS
LOGRLCV
LOGRSCV
MLPC1
MLPC2
KNCU
KNCD
Stack
GPRQ
DTRF
DTRA
DTRP
RFRS
RFRA
RFRP
ABR
HGBR
MLPR1
KNRU
KNRD
GPCL
GPCR
GPCQ
HGBC
GNB
GPRL
GPRR
ELNE
ELNECV
LINR
MLPR2
SGDCH
SGDCLL
SGDCMH
SVCL
SVCP
SVCG
SVCS
KERC
KERR
Query:
SELECT DISTINCT "name", "version"
   FROM "model_score";
Answer:
name,version
iris,1
iris,2
iris,3
concrete,1
concrete,2
concrete,3
concrete,4
concrete,5
iris,4
iris,5
Delaney solubility,1
Delaney solubility,2
Delaney solubility,3
Delaney solubility,4
Critical Heat Flux,1
Critical Heat Flux,2
Critical Heat Flux,3
Critical Heat Flux,4
Liver disease prediction,1
Liver disease prediction,2
Liver disease prediction,3
Liver disease prediction,4
Liver disease prediction,5
Pumpkin Seeds,1
Pumpkin Seeds,2
Pumpkin Seeds,3
Pumpkin Seeds,4
water quality,1
water quality,2
water quality,3
lithium ion batteries,1
lithium ion batteries,2
lithium ion batteries,3
diabetes,1
diabetes,2
diabetes,3
diabetes,4
Franck-Hertz,1
Franck-Hertz,2
Franck-Hertz,3
Franck-Hertz,4
Franck-Hertz,5
Tunnel diode,1
Tunnel diode,2
Tunnel diode,3
Tunnel diode,4
Tunnel diode,5
Tunnel diode,6
survey lung cancer,1
survey lung cancer,2
survey lung cancer,3
survey lung cancer,4
survey lung cancer,5
oil spill,1
oil spill,2
oil spill,3
oil spill,4
oil spill,5
Solar Power Generation,1
Solar Power Generation,2
Solar Power Generation,3
Solar Power Generation,4
Solar Power Generation,5
Solar Power Generation,6
PCOS,1
PCOS,2
water quality 2,1
water quality 2,2
water quality 2,3
PCOS,3
kindey stone urine analysis,1
kindey stone urine analysis,2
kindey stone urine analysis,3
kindey stone urine analysis,4
kindey stone urine analysis,5
kindey stone urine analysis,6
kindey stone urine analysis,7
kindey stone urine analysis,8
Hospital Mortality Prediction,1
Hospital Mortality Prediction,2
Hospital Mortality Prediction,3
Hospital Mortality Prediction,4
Hospital Mortality Prediction,5
Hospital Mortality Prediction,6
smoke detection iot,1
smoke detection iot,2
smoke detection iot,3
smoke detection iot,4
smoke detection iot,5
concrete,6
iris,6
iris,7
Delaney solubility,5
concrete,7
Critical Heat Flux,5
Solar Power Generation,7
PSS3E5,1
PSS3E5,2
PSS3E5,3
PSS3E5,4
PSS3E5,5
Query:
SELECT "name", "version", "test_score"
   FROM "model_score"
   WHERE "model" = 'Stack';
Answer:
Too long, hard cut:
name,version,test_score
iris,1,0.78
iris,1,0.8
iris,1,0.8
iris,2,0.78
iris,2,0.8
iris,2,0.8
iris,3,0.78
iris,3,0.8
iris,3,0.8
concrete,1,0.7491240941067063
concrete,1,0.7478259090713758
concrete,1,0.8952049262695958
concrete,2,0.7491240941067063
concrete,2,0.5153723438701945
concrete,2,0.7550913523238763
concrete,3,0.7491240941067063
concrete,3,0.6204357065145107
concrete,3,0.7624137560765165
concrete,4,0.7418636266993917
concrete,4,0.7943036798259414
concrete,4,0.7999917844923515
concrete,5,0.7418636266993917
concrete,5,0.8280251862560624
concrete,5,0.6465132269043822
iris,4,0.8
iris,4,0.74
iris,4,0.74
iris,5,0.8
iris,5,0.72
iris,5,0.72
Delaney solubility,1,0.8603318218230251
Delaney solubility,1,0.8709068763294372
Delaney solubility,1,0.8709068763294372
Delaney solubility,2,0.8603318218230251
Delaney solubility,2,0.8676115461542331
Delaney solubility,2,0.8676115461542331
Delaney solubility,3,0.7361578456024362
Delaney solubility,3,0.7688278804396981
Delaney solubility,3,0.7688278804396981
Delaney solubility,4,0.7361578456024362
Delaney solubility,4,0.7370747785614673
Delaney solubility,4,0.7370747785614673
Critical Heat Flux,1,0.8767667331999809
Critical Heat Flux,1,0.8860441283949297
Critical Heat Flux,1,0.8913847510635327
Critical Heat Flux,2,0.8767667331999809
Critical Heat Flux,2,0.8906124602518019
Critical Heat Flux,2,0.896051215319373
Critical Heat Flux,3,0.8470847778663093
Critical Heat Flux,3,0.8580739277704147
Critical Heat Flux,3,0.820001186352687
Critical Heat Flux,4,0.8470847778663093
Critical Heat Flux,4,0.8212042575388446
Critical Heat Flux,4,0.8249690699279786
Liver disease prediction,1,0.7696969696969697
Liver disease prediction,1,0.7636363636363637
Liver disease prediction,1,0.8
Liver disease prediction,2,0.8121212121212121
Liver disease prediction,2,0.8181818181818182
Liver disease prediction,2,0.8787878787878788
Liver disease prediction,3,0.793939393939394
Liver disease prediction,3,0.793939393939394
Liver disease prediction,3,0.7757575757575758
Liver disease prediction,4,0.8424242424242424
Liver disease prediction,4,0.8606060606060606
Liver disease prediction,4,0.8484848484848485
Liver disease prediction,5,0.8121212121212121
Liver disease prediction,5,0.9090909090909091
Liver disease prediction,5,0.8545454545454545
Pumpkin Seeds,1,0.8812121212121212
Pumpkin Seeds,1,0.8751515151515151
Pumpkin Seeds,1,0.8751515151515151
Pumpkin Seeds,2,0.8812121212121212
Pumpkin Seeds,2,0.8751515151515151
Pumpkin Seeds,2,0.8751515151515151
Pumpkin Seeds,3,0.7927272727272727
Pumpkin Seeds,3,0.806060606060606
Pumpkin Seeds,3,0.806060606060606
Pumpkin Seeds,4,0.7927272727272727
Pumpkin Seeds,4,0.8315151515151515
Pumpkin Seeds,4,0.7927272727272727
water quality,1,0.9545454545454546
water quality,1,0.9628099173553719
water quality,1,0.9421875
water quality,2,0.9545454545454546
water quality,2,0.9628099173553719
water quality,2,0.9615076182838813
water quality,3,0.9545454545454546
water quality,3,0.9628099173553719
water quality,3,0.9626926196269262
lithium ion batteries,1,1.0
lithium ion batteries,1,1.0
lithium ion batteries,1,0.9642857142857143
lithium ion batteries,2,0.9821428571428571
lithium ion batteries,2,0.9553571428571429
lithium ion batteries,2,0.9732142857142857
lithium ion batteries,3,1.0
lithium ion batteries,3,0.9732142857142857
lithium ion batteries,3,1.0
diabetes,1,0.7677165354330708
diabetes,1,0.7559055118110236
diabetes,1,0.7322834645669292
diabetes,2,0.7677165354330708
diabetes,2,0.7637795275590551
diabetes,2,0.7519685039370079
diabetes,3,0.7677165354330708
diabetes,3,0.7559055118110236
diabetes,3,0.7677165354330708
diabetes,4,0.7362204724409449
diabetes,4,0.7047244094488189
diabetes,4,0.65748031496063
Franck-Hertz,1,0.9937834729052744
Franck-Hertz,1,0.42050978805796646
Franck-Hertz,1,0.5283474448268917
Franck-Hertz,2,0.9824854760825303
Franck-Hertz,2,0.3962737971869513
Franck-Hertz,2,0.3962737971869513
Franck-Hertz,3,0.9811894025941343
Franck-Hertz,3,0.6847210876201288
Franck-Hertz,3,0.8055712562976802
Franck-Hertz,4,0.9792841047863904
Franck-Hertz,4,0.9755456808767655
Franck-Hertz,4,0.9755456808767655
Franck-Hertz,5,0.9769293646328994
Franck-Hertz,5,0.9658770974605881
Franck-Hertz,5,0.9658770974605881
Tunnel diode,1,0.9589824567611835
Tunnel diode,1,0.9746337026041805
Tunnel diode,1,0.9746337026041805
Tunnel diode,2,0.9771486242648221
Tunnel diode,2,0.9540815878994447
Tunnel diode,2,0.9540815878994447
Tunnel diode,3,0.9720488075258886
Tunnel diode,3,0.9758336487780627
Tunnel diode,3,0.9758336487780627
Tunnel diode,4,0.9163396138783252
Tunnel diode,4,0.8935135661670219
Tunnel diode,4,0.8935135661670219
Tunnel diode,5,0.9163396138783252
Tunnel diode,5,0.8733461450925648
Tunnel diode,5,0.8733461450925648
Tunnel diode,6,0.9163396138783252
Tunnel diode,6,0.9387671333875972
Tunnel diode,6,0.9387671333875972
survey lung cancer,1,0.9724137931034482
survey lung cancer,1,0.9724137931034482
survey lung cancer,1,0.9724137931034482
survey lung cancer,2,0.9862068965517241
survey lung cancer,2,0.98620689
Query:
SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
   FROM "model_score"
   WHERE "model" <> 'Stack'
   GROUP BY "name", "version";
Answer:
name,version,max_non_stack_score
Critical Heat Flux,1,0.8868161892955251
Critical Heat Flux,2,0.8868161892955251
Critical Heat Flux,3,0.8868161892955251
Critical Heat Flux,4,0.8868161892955251
Critical Heat Flux,5,0.8836410197441006
Delaney solubility,1,0.8498776981484352
Delaney solubility,2,0.8498776981484352
Delaney solubility,3,0.8498776981484352
Delaney solubility,4,0.8498776981484352
Delaney solubility,5,0.8498776981484352
Franck-Hertz,1,0.46929699248120293
Franck-Hertz,2,0.46929699248120293
Franck-Hertz,3,0.46929699248120293
Franck-Hertz,4,0.46929699248120293
Franck-Hertz,5,0.46929699248120293
Hospital Mortality Prediction,1,0.8545454545454545
Hospital Mortality Prediction,2,0.8909090909090909
Hospital Mortality Prediction,3,0.8727272727272727
Hospital Mortality Prediction,4,0.8666666666666667
Hospital Mortality Prediction,5,0.8666666666666667
Hospital Mortality Prediction,6,0.8787878787878788
Liver disease prediction,1,0.8303030303030303
Liver disease prediction,2,0.8666666666666667
Liver disease prediction,3,0.8424242424242424
Liver disease prediction,4,0.8727272727272727
Liver disease prediction,5,0.9212121212121213
PCOS,1,0.888268156424581
PCOS,2,0.888268156424581
PCOS,3,0.888268156424581
PSS3E5,1,0.6142270861833106
PSS3E5,2,0.5718194254445964
PSS3E5,3,0.6142270861833106
PSS3E5,4,0.6163265306122448
PSS3E5,5,0.6653061224489796
Pumpkin Seeds,1,0.8848484848484849
Pumpkin Seeds,2,0.8848484848484849
Pumpkin Seeds,3,0.8848484848484849
Pumpkin Seeds,4,0.8848484848484849
Solar Power Generation,1,0.9221791895515516
Solar Power Generation,2,0.9221791895515516
Solar Power Generation,3,0.9221791895515516
Solar Power Generation,4,0.9221791895515516
Solar Power Generation,5,0.9221791895515516
Solar Power Generation,6,0.9221791895515516
Solar Power Generation,7,0.9232764166932035
Tunnel diode,1,0.941733622559653
Tunnel diode,2,0.941733622559653
Tunnel diode,3,0.941733622559653
Tunnel diode,4,0.941733622559653
Tunnel diode,5,0.941733622559653
Tunnel diode,6,0.941733622559653
concrete,1,0.8885222604143914
concrete,2,0.8884068368127706
concrete,3,0.8884068368127706
concrete,4,0.8885222604143914
concrete,5,0.8884068368127706
concrete,6,0.8980905157142272
concrete,7,0.8881812593695267
diabetes,1,0.7598425196850394
diabetes,2,0.7677165354330708
diabetes,3,0.7677165354330708
diabetes,4,0.7677165354330708
iris,1,0.82
iris,2,0.82
iris,3,0.82
iris,4,0.82
iris,5,0.82
iris,6,0.82
iris,7,0.82
kindey stone urine analysis,1,0.8518518518518519
kindey stone urine analysis,2,0.9636363636363636
kindey stone urine analysis,3,1.0
kindey stone urine analysis,4,1.0
kindey stone urine analysis,5,1.0
kindey stone urine analysis,6,1.0
kindey stone urine analysis,7,1.0
kindey stone urine analysis,8,0.8518518518518519
lithium ion batteries,1,1.0
lithium ion batteries,2,1.0
lithium ion batteries,3,1.0
oil spill,1,0.9655172413793104
oil spill,2,0.9862068965517241
oil spill,3,0.993103448275862
oil spill,4,0.9862068965517241
oil spill,5,0.9655172413793104
smoke detection iot,1,0.9999516160247726
smoke detection iot,2,0.9999516160247726
smoke detection iot,3,0.9999516160247726
smoke detection iot,4,0.9999516160247726
smoke detection iot,5,0.9999516160247726
survey lung cancer,1,0.9724137931034482
survey lung cancer,2,0.993103448275862
survey lung cancer,3,0.9862068965517241
survey lung cancer,4,0.9793103448275862
survey lung cancer,5,0.9655172413793104
water quality,1,0.9652892561983472
water quality,2,0.9652892561983472
water quality,3,0.9652892561983472
water quality 2,1,0.7959183673469388
water quality 2,2,0.7959183673469388
water quality 2,3,0.7959183673469388
Query:
SELECT s."name", s."version", s."test_score" AS "stack_score", n."max_non_stack_score"
   FROM (
     SELECT "name", "version", "test_score"
     FROM "model_score"
     WHERE "model" = 'Stack'
   ) AS s
   JOIN (
     SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
     FROM "model_score"
     WHERE "model" <> 'Stack'
     GROUP BY "name", "version"
   ) AS n
   ON s."name" = n."name" AND s."version" = n."version";
Answer:
Too long, hard cut:
name,version,stack_score,max_non_stack_score
iris,1,0.78,0.82
iris,1,0.8,0.82
iris,1,0.8,0.82
iris,2,0.78,0.82
iris,2,0.8,0.82
iris,2,0.8,0.82
iris,3,0.78,0.82
iris,3,0.8,0.82
iris,3,0.8,0.82
concrete,1,0.7491240941067063,0.8885222604143914
concrete,1,0.7478259090713758,0.8885222604143914
concrete,1,0.8952049262695958,0.8885222604143914
concrete,2,0.7491240941067063,0.8884068368127706
concrete,2,0.5153723438701945,0.8884068368127706
concrete,2,0.7550913523238763,0.8884068368127706
concrete,3,0.7491240941067063,0.8884068368127706
concrete,3,0.6204357065145107,0.8884068368127706
concrete,3,0.7624137560765165,0.8884068368127706
concrete,4,0.7418636266993917,0.8885222604143914
concrete,4,0.7943036798259414,0.8885222604143914
concrete,4,0.7999917844923515,0.8885222604143914
concrete,5,0.7418636266993917,0.8884068368127706
concrete,5,0.8280251862560624,0.8884068368127706
concrete,5,0.6465132269043822,0.8884068368127706
iris,4,0.8,0.82
iris,4,0.74,0.82
iris,4,0.74,0.82
iris,5,0.8,0.82
iris,5,0.72,0.82
iris,5,0.72,0.82
Delaney solubility,1,0.8603318218230251,0.8498776981484352
Delaney solubility,1,0.8709068763294372,0.8498776981484352
Delaney solubility,1,0.8709068763294372,0.8498776981484352
Delaney solubility,2,0.8603318218230251,0.8498776981484352
Delaney solubility,2,0.8676115461542331,0.8498776981484352
Delaney solubility,2,0.8676115461542331,0.8498776981484352
Delaney solubility,3,0.7361578456024362,0.8498776981484352
Delaney solubility,3,0.7688278804396981,0.8498776981484352
Delaney solubility,3,0.7688278804396981,0.8498776981484352
Delaney solubility,4,0.7361578456024362,0.8498776981484352
Delaney solubility,4,0.7370747785614673,0.8498776981484352
Delaney solubility,4,0.7370747785614673,0.8498776981484352
Critical Heat Flux,1,0.8767667331999809,0.8868161892955251
Critical Heat Flux,1,0.8860441283949297,0.8868161892955251
Critical Heat Flux,1,0.8913847510635327,0.8868161892955251
Critical Heat Flux,2,0.8767667331999809,0.8868161892955251
Critical Heat Flux,2,0.8906124602518019,0.8868161892955251
Critical Heat Flux,2,0.896051215319373,0.8868161892955251
Critical Heat Flux,3,0.8470847778663093,0.8868161892955251
Critical Heat Flux,3,0.8580739277704147,0.8868161892955251
Critical Heat Flux,3,0.820001186352687,0.8868161892955251
Critical Heat Flux,4,0.8470847778663093,0.8868161892955251
Critical Heat Flux,4,0.8212042575388446,0.8868161892955251
Critical Heat Flux,4,0.8249690699279786,0.8868161892955251
Liver disease prediction,1,0.7696969696969697,0.8303030303030303
Liver disease prediction,1,0.7636363636363637,0.8303030303030303
Liver disease prediction,1,0.8,0.8303030303030303
Liver disease prediction,2,0.8121212121212121,0.8666666666666667
Liver disease prediction,2,0.8181818181818182,0.8666666666666667
Liver disease prediction,2,0.8787878787878788,0.8666666666666667
Liver disease prediction,3,0.793939393939394,0.8424242424242424
Liver disease prediction,3,0.793939393939394,0.8424242424242424
Liver disease prediction,3,0.7757575757575758,0.8424242424242424
Liver disease prediction,4,0.8424242424242424,0.8727272727272727
Liver disease prediction,4,0.8606060606060606,0.8727272727272727
Liver disease prediction,4,0.8484848484848485,0.8727272727272727
Liver disease prediction,5,0.8121212121212121,0.9212121212121213
Liver disease prediction,5,0.9090909090909091,0.9212121212121213
Liver disease prediction,5,0.8545454545454545,0.9212121212121213
Pumpkin Seeds,1,0.8812121212121212,0.8848484848484849
Pumpkin Seeds,1,0.8751515151515151,0.8848484848484849
Pumpkin Seeds,1,0.8751515151515151,0.8848484848484849
Pumpkin Seeds,2,0.8812121212121212,0.8848484848484849
Pumpkin Seeds,2,0.8751515151515151,0.8848484848484849
Pumpkin Seeds,2,0.8751515151515151,0.8848484848484849
Pumpkin Seeds,3,0.7927272727272727,0.8848484848484849
Pumpkin Seeds,3,0.806060606060606,0.8848484848484849
Pumpkin Seeds,3,0.806060606060606,0.8848484848484849
Pumpkin Seeds,4,0.7927272727272727,0.8848484848484849
Pumpkin Seeds,4,0.8315151515151515,0.8848484848484849
Pumpkin Seeds,4,0.7927272727272727,0.8848484848484849
water quality,1,0.9545454545454546,0.9652892561983472
water quality,1,0.9628099173553719,0.9652892561983472
water quality,1,0.9421875,0.9652892561983472
water quality,2,0.9545454545454546,0.9652892561983472
water quality,2,0.9628099173553719,0.9652892561983472
water quality,2,0.9615076182838813,0.9652892561983472
water quality,3,0.9545454545454546,0.9652892561983472
water quality,3,0.9628099173553719,0.9652892561983472
water quality,3,0.9626926196269262,0.9652892561983472
lithium ion batteries,1,1.0,1.0
lithium ion batteries,1,1.0,1.0
lithium ion batteries,1,0.9642857142857143,1.0
lithium ion batteries,2,0.9821428571428571,1.0
lithium ion batteries,2,0.9553571428571429,1.0
lithium ion batteries,2,0.9732142857142857,1.0
lithium ion batteries,3,1.0,1.0
lithium ion batteries,3,0.9732142857142857,1.0
lithium ion batteries,3,1.0,1.0
diabetes,1,0.7677165354330708,0.7598425196850394
diabetes,1,0.7559055118110236,0.7598425196850394
diabetes,1,0.7322
Query:
SELECT s."name", s."version",
     CASE
       WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
       WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
     END AS "status"
   FROM (
     SELECT "name", "version", "test_score"
     FROM "model_score"
     WHERE "model" = 'Stack'
   ) AS s
   JOIN (
     SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
     FROM "model_score"
     WHERE "model" <> 'Stack'
     GROUP BY "name", "version"
   ) AS n
   ON s."name" = n."name" AND s."version" = n."version";
Answer:
Too long, hard cut:
name,version,status
iris,1,
iris,1,
iris,1,
iris,2,
iris,2,
iris,2,
iris,3,
iris,3,
iris,3,
concrete,1,
concrete,1,
concrete,1,strong
concrete,2,
concrete,2,
concrete,2,
concrete,3,
concrete,3,
concrete,3,
concrete,4,
concrete,4,
concrete,4,
concrete,5,
concrete,5,
concrete,5,
iris,4,
iris,4,
iris,4,
iris,5,
iris,5,
iris,5,
Delaney solubility,1,strong
Delaney solubility,1,strong
Delaney solubility,1,strong
Delaney solubility,2,strong
Delaney solubility,2,strong
Delaney solubility,2,strong
Delaney solubility,3,
Delaney solubility,3,
Delaney solubility,3,
Delaney solubility,4,
Delaney solubility,4,
Delaney solubility,4,
Critical Heat Flux,1,
Critical Heat Flux,1,
Critical Heat Flux,1,strong
Critical Heat Flux,2,
Critical Heat Flux,2,strong
Critical Heat Flux,2,strong
Critical Heat Flux,3,
Critical Heat Flux,3,
Critical Heat Flux,3,
Critical Heat Flux,4,
Critical Heat Flux,4,
Critical Heat Flux,4,
Liver disease prediction,1,
Liver disease prediction,1,
Liver disease prediction,1,
Liver disease prediction,2,
Liver disease prediction,2,
Liver disease prediction,2,strong
Liver disease prediction,3,
Liver disease prediction,3,
Liver disease prediction,3,
Liver disease prediction,4,
Liver disease prediction,4,
Liver disease prediction,4,
Liver disease prediction,5,
Liver disease prediction,5,
Liver disease prediction,5,
Pumpkin Seeds,1,
Pumpkin Seeds,1,
Pumpkin Seeds,1,
Pumpkin Seeds,2,
Pumpkin Seeds,2,
Pumpkin Seeds,2,
Pumpkin Seeds,3,
Pumpkin Seeds,3,
Pumpkin Seeds,3,
Pumpkin Seeds,4,
Pumpkin Seeds,4,
Pumpkin Seeds,4,
water quality,1,
water quality,1,
water quality,1,
water quality,2,
water quality,2,
water quality,2,
water quality,3,
water quality,3,
water quality,3,
lithium ion batteries,1,soft
lithium ion batteries,1,soft
lithium ion batteries,1,
lithium ion batteries,2,
lithium ion batteries,2,
lithium ion batteries,2,
lithium ion batteries,3,soft
lithium ion batteries,3,
lithium ion batteries,3,soft
diabetes,1,strong
diabetes,1,
diabetes,1,
diabetes,2,soft
diabetes,2,
diabetes,2,
diabetes,3,soft
diabetes,3,
diabetes,3,soft
diabetes,4,
diabetes,4,
diabetes,4,
Franck-Hertz,1,strong
Franck-Hertz,1,
Franck-Hertz,1,strong
Franck-Hertz,2,strong
Franck-Hertz,2,
Franck-Hertz,2,
Franck-Hertz,3,strong
Franck-Hertz,3,strong
Franck-Hertz,3,strong
Franck-Hertz,4,strong
Franck-Hertz,4,strong
Franck-Hertz,4,strong
Franck-Hertz,5,strong
Franck-Hertz,5,strong
Franck-Hertz,5,strong
Tunnel diode,1,strong
Tunnel diode,1,strong
Tunnel diode,1,strong
Tunnel diode,2,strong
Tunnel diode,2,strong
Tunnel diode,2,strong
Tunnel diode,3,strong
Tunnel diode,3,strong
Tunnel diode,3,strong
Tunnel diode,4,
Tunnel diode,4,
Tunnel diode,4,
Tunnel diode,5,
Tunnel diode,5,
Tunnel diode,5,
Tunnel diode,6,
Tunnel diode,6,
Tunnel diode,6,
survey lung cancer,1,soft
survey lung cancer,1,soft
survey lung cancer,1,soft
survey lung cancer,2,
survey lung cancer,2,
survey lung cancer,2,
survey lung cancer,3,
survey lung cancer,3,
survey lung cancer,3,
survey lung cancer,4,
survey lung cancer,4,
survey lung cancer,4,
survey lung cancer,5,
survey lung cancer,5,
survey lung cancer,5,strong
oil spill,1,soft
oil spill,1,strong
oil spill,1,soft
oil spill,2,soft
oil spill,2,soft
oil spill,2,soft
oil spill,3,soft
oil spill,3,soft
oil spill,3,
oil spill,4,strong
oil spill,4,strong
oil spill,4,
oil spill,5,strong
oil spill,5,strong
oil spill,5,strong
Solar Power Generation,1,
Solar Power Generation,1,strong
Solar Power Generation,1,strong
Solar Power Generation,2,
Solar Power Generation,2,strong
Solar Power Generation,2,strong
Solar Power Generation,3,strong
Solar Power Generation,3,strong
Solar Power Generation,3,strong
Solar Power Generation,4,strong
Solar Power Generation,4,strong
Solar Power Generation,4,strong
Solar Power Generation,5,strong
Solar Power Generation,5,strong
Solar Power Generation,5,
Solar Power Generation,6,strong
Solar Power Generation,6,strong
Solar Power Generation,6,
PCOS,1,
PCOS,1,
PCOS,1,
PCOS,2,
PCOS,2,
PCOS,2,
water quality 2,1,
water quality 2,1,
water quality 2,1,
water quality 2,2,
water quality 2,2,
water quality 2,2,
water quality 2,3,
water quality 2,3,
water quality 2,3,
PCOS,3,soft
PCOS,3,strong
PCOS,3,soft
kindey stone urine analysis,1,
kindey stone urine analysis,1,
kindey stone urine analysis,1,
kindey stone urine analysis,2,soft
kindey stone urine analysis,2,soft
kindey stone urine analysis,2,soft
kindey stone urine analysis,3,soft
kindey stone urine analysis,3,
kindey stone urine analysis,3,
kindey stone urine analysis,4,soft
kindey stone urine analysis,4,soft
kindey stone urine analysis,4,soft
kindey stone urine analysis,5,soft
kindey stone urine analysis,5,soft
kindey stone urine analysis,5,soft
kindey stone urine analysis,6,soft
kindey stone urine analysis,6,soft
kindey stone urine analysis,6,soft
kindey stone urine analysis,7,soft
kindey stone urine analysis,7,soft
kindey stone urine analysis,7,soft
kindey stone urine analysis,8,
kindey stone urine analysis,8,
kindey stone urine analysis,8,
Hospital Mortality Predictio
Query:
SELECT DISTINCT "L1_model"
   FROM "model";
Answer:
L1_model
regression
tree
Query:
SELECT ms."name", ms."version", ms."model", m."L1_model"
   FROM "model_score" AS ms
   JOIN "model" AS m
   ON ms."name" = m."name" AND ms."version" = m."version" AND ms."step" = m."step";
Answer:
Too long, hard cut:
name,version,model,L1_model
iris,1,DTCG,regression
iris,1,DTCE,regression
iris,1,RFCG,regression
iris,1,RFCE,regression
iris,1,ABC,regression
iris,1,LOGRL,regression
iris,1,LOGRS,regression
iris,1,LOGRLCV,regression
iris,1,LOGRSCV,regression
iris,1,MLPC1,regression
iris,1,MLPC2,regression
iris,1,KNCU,regression
iris,1,KNCD,regression
iris,1,Stack,regression
iris,1,ABC,regression
iris,1,LOGRL,regression
iris,1,LOGRS,regression
iris,1,KNCU,regression
iris,1,KNCD,regression
iris,1,Stack,regression
iris,1,ABC,regression
iris,1,LOGRL,regression
iris,1,LOGRS,regression
iris,1,KNCU,regression
iris,1,KNCD,regression
iris,1,Stack,regression
iris,2,DTCG,regression
iris,2,DTCE,regression
iris,2,RFCG,regression
iris,2,RFCE,regression
iris,2,ABC,regression
iris,2,LOGRL,regression
iris,2,LOGRS,regression
iris,2,LOGRLCV,regression
iris,2,LOGRSCV,regression
iris,2,MLPC1,regression
iris,2,MLPC2,regression
iris,2,KNCU,regression
iris,2,KNCD,regression
iris,2,Stack,regression
iris,2,ABC,regression
iris,2,LOGRS,regression
iris,2,Stack,regression
iris,2,ABC,regression
iris,2,LOGRS,regression
iris,2,Stack,regression
iris,3,DTCG,regression
iris,3,DTCE,regression
iris,3,RFCG,regression
iris,3,RFCE,regression
iris,3,ABC,regression
iris,3,LOGRL,regression
iris,3,LOGRLCV,regression
iris,3,MLPC1,regression
iris,3,MLPC2,regression
iris,3,KNCU,regression
iris,3,KNCD,regression
iris,3,Stack,regression
iris,3,ABC,regression
iris,3,LOGRL,regression
iris,3,Stack,regression
iris,3,ABC,regression
iris,3,LOGRL,regression
iris,3,Stack,regression
concrete,1,GPRQ,regression
concrete,1,DTRF,regression
concrete,1,DTRA,regression
concrete,1,DTRP,regression
concrete,1,RFRS,regression
concrete,1,RFRA,regression
concrete,1,RFRP,regression
concrete,1,ABR,regression
concrete,1,HGBR,regression
concrete,1,MLPR1,regression
concrete,1,KNRU,regression
concrete,1,KNRD,regression
concrete,1,Stack,regression
concrete,1,GPRQ,regression
concrete,1,DTRF,regression
concrete,1,DTRA,regression
concrete,1,RFRP,regression
concrete,1,HGBR,regression
concrete,1,Stack,regression
concrete,1,GPRQ,regression
concrete,1,DTRF,regression
concrete,1,DTRA,regression
concrete,1,RFRP,regression
concrete,1,HGBR,regression
concrete,1,Stack,regression
concrete,2,GPRQ,regression
concrete,2,DTRF,regression
concrete,2,DTRA,regression
concrete,2,DTRP,regression
concrete,2,RFRS,regression
concrete,2,RFRA,regression
concrete,2,RFRP,regression
concrete,2,ABR,regression
concrete,2,HGBR,regression
concrete,2,MLPR1,regression
concrete,2,KNRU,regression
concrete,2,KNRD,regression
concrete,2,Stack,regression
concrete,2,GPRQ,regression
concrete,2,RFRP,regression
concrete,2,HGBR,regression
concrete,2,Stack,regression
concrete,2,GPRQ,regression
concrete,2,RFRP,regression
concrete,2,HGBR,regression
concrete,2,Stack,regression
concrete,3,GPRQ,regression
concrete,3,DTRF,regression
concrete,3,DTRA,regression
concrete,3,DTRP,regression
concrete,3,RFRS,regression
concrete,3,RFRA,regression
concrete,3,RFRP,regression
concrete,3,ABR,regression
concrete,3,HGBR,regression
concrete,3,MLPR1,regression
concrete,3,KNRU,regression
concrete,3,KNRD,regression
concrete,3,Stack,regression
concrete,3,GPRQ,regression
concrete,3,DTRA,regression
concrete,3,RFRP,regression
concrete,3,HGBR,regression
concrete,3,Stack,regression
concrete,3,GPRQ,regression
concrete,3,DTRA,regression
concrete,3,RFRP,regression
concrete,3,HGBR,regression
concrete,3,Stack,regression
concrete,4,GPRQ,tree
concrete,4,DTRF,tree
concrete,4,DTRA,tree
concrete,4,DTRP,tree
concrete,4,RFRS,tree
concrete,4,RFRA,tree
concrete,4,RFRP,tree
concrete,4,ABR,tree
concrete,4,HGBR,tree
concrete,4,MLPR1,tree
concrete,4,KNRU,tree
concrete,4,KNRD,tree
concrete,4,Stack,tree
concrete,4,DTRA,tree
concrete,4,RFRS,tree
concrete,4,RFRA,tree
concrete,4,RFRP,tree
concrete,4,HGBR,tree
concrete,4,Stack,tree
concrete,4,DTRA,tree
concrete,4,RFRS,tree
concrete,4,RFRA,tree
concrete,4,RFRP,tree
concrete,4,HGBR,tree
concrete,4,Stack,tree
concrete,5,GPRQ,tree
concrete,5,DTRF,tree
concrete,5,DTRA,tree
concrete,5,DTRP,tree
concrete,5,RFRS,tree
concrete,5,RFRA,tree
concrete,5,RFRP,tree
concrete,5,ABR,tree
concrete,5,HGBR,tree
concrete,5,MLPR1,tree
concrete,5,KNRU,tree
concrete,5,KNRD,tree
concrete,5,Stack,tree
concrete,5,DTRA,tree
concrete,5,RFRS,tree
concrete,5,RFRP,tree
concrete,5,HGBR,tree
concrete,5,Stack,tree
concrete,5,DTRA,tree
concrete,5,RFRS,tree
concrete,5,RFRP,tree
concrete,5,HGBR,tree
concrete,5,Stack,tree
iris,4,GPCL,tree
iris,4,GPCR,tree
iris,4,GPCQ,tree
iris,4,DTCG,tree
iris,4,DTCE,tree
iris,4,RFCG,tree
iris,4,RFCE,tree
iris,4,ABC,tree
iris,4,HGBC,tree
iris,4,LOGRL,tree
iris,4,LOGRLCV,tree
iris,4,KNCU,tree
iris,4,KNCD,tree
iris,4,GNB,tree
iris,4,Stack,tree
iris,4,GPCR,tree
iris,4,GPCQ,tree
iris,4,DTCE,tree
iris,4,RFCE,tree
iris,4,KNCD,tree
iris,4,Stack,tree
iris,4,GPCR,tree
iris,4,GPCQ,tree
iris,4,DTCE,tree
iris,4,RFCE,tree
iris,4,KNCD,tree
iris,4,Stack,tree
iris,5,GPCL,tree
iris,5,GPCR,tree
iris,5,GPCQ,tree
iris,5,DTCG,tree
iris,5,DTCE,tree
iris,5,RFCG,tree
iris,5,RFCE,tr
Query:
SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
   FROM (
     SELECT s."name", s."version",
       CASE
         WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
         WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
       END AS "status"
     FROM (
       SELECT "name", "version", "test_score"
       FROM "model_score"
       WHERE "model" = 'Stack'
     ) AS s
     JOIN (
       SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
       FROM "model_score"
       WHERE "model" <> 'Stack'
       GROUP BY "name", "version"
     ) AS n
     ON s."name" = n."name" AND s."version" = n."version"
   ) AS status_table
   JOIN "model" AS m
   ON status_table."name" = m."name" AND status_table."version" = m."version"
   GROUP BY status_table."status", m."L1_model";
Answer:
status,L1_model,count
,regression,351
,tree,204
soft,regression,102
soft,tree,30
strong,regression,186
strong,tree,36
Query:
SELECT stats."status", stats."L1_model", stats."count"
    FROM (
      SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
      FROM (
        SELECT s."name", s."version",
          CASE
            WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
            WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
          END AS "status"
        FROM (
          SELECT "name", "version", "test_score"
          FROM "model_score"
          WHERE "model" = 'Stack'
        ) AS s
        JOIN (
          SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
          FROM "model_score"
          WHERE "model" <> 'Stack'
          GROUP BY "name", "version"
        ) AS n
        ON s."name" = n."name" AND s."version" = n."version"
      ) AS status_table
      JOIN "model" AS m
      ON status_table."name" = m."name" AND status_table."version" = m."version"
      GROUP BY status_table."status", m."L1_model"
    ) AS stats
    WHERE (stats."status", stats."count") IN (
      SELECT "status", MAX("count")
      FROM (
        SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
        FROM (
          SELECT s."name", s."version",
            CASE
              WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
              WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
            END AS "status"
          FROM (
            SELECT "name", "version", "test_score"
            FROM "model_score"
            WHERE "model" = 'Stack'
          ) AS s
          JOIN (
            SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
            FROM "model_score"
            WHERE "model" <> 'Stack'
            GROUP BY "name", "version"
          ) AS n
          ON s."name" = n."name" AND s."version" = n."version"
        ) AS status_table
        JOIN "model" AS m
        ON status_table."name" = m."name" AND status_table."version" = m."version"
        GROUP BY status_table."status", m."L1_model"
      )
      GROUP BY "status"
    );
Answer:
status,L1_model,count
soft,regression,102
strong,regression,186
End Exploring Related Columns
Task: Which L1_model has the highest occurrence for each status ('strong,' where the maximum test score for non-'Stack' models is less than the 'Stack' score, and 'soft,' where it equals the 'Stack' score), and how many times does it occur?

Please answer only one complete SQL in sqlite dialect in ```sql``` format.
Usage example: ```sql
SELECT DISTINCT "column_name" FROM "table_name" WHERE ... ``` (Replace "table_name" with the actual table name. Enclose table and column names with double quotations if they contain special characters or match reserved keywords.)
Follow the answer format like: ```csv
status,L1_model,count
strong,L1_model_name1:str,count1:int
soft,L1_model_name2:str,count2:int
```

For each status ('strong' and 'soft'), the L1_model with the highest occurrence is listed along with the number of times it occurs..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: 

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-25 01:49:44 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 01:49:44 - root - INFO - ```sql
SELECT stats."status", stats."L1_model", stats."count"
FROM (
  SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
  FROM (
    SELECT s."name", s."version",
      CASE
        WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
        WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
      END AS "status"
    FROM (
      SELECT "name", "version", "test_score"
      FROM "model_score"
      WHERE "model" = 'Stack'
    ) AS s
    JOIN (
      SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
      FROM "model_score"
      WHERE "model" <> 'Stack'
      GROUP BY "name", "version"
    ) AS n
    ON s."name" = n."name" AND s."version" = n."version"
  ) AS status_table
  JOIN "model" AS m
  ON status_table."name" = m."name" AND status_table."version" = m."version"
  GROUP BY status_table."status", m."L1_model"
) AS stats
WHERE (stats."status", stats."count") IN (
  SELECT "status", MAX("count")
  FROM (
    SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
    FROM (
      SELECT s."name", s."version",
        CASE
          WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
          WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
        END AS "status"
      FROM (
        SELECT "name", "version", "test_score"
        FROM "model_score"
        WHERE "model" = 'Stack'
      ) AS s
      JOIN (
        SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
        FROM "model_score"
        WHERE "model" <> 'Stack'
        GROUP BY "name", "version"
      ) AS n
      ON s."name" = n."name" AND s."version" = n."version"
    ) AS status_table
    JOIN "model" AS m
    ON status_table."name" = m."name" AND status_table."version" = m."version"
    GROUP BY status_table."status", m."L1_model"
  )
  GROUP BY "status"
);
```
2025-01-25 01:49:44 - root - INFO - itercount: 1
2025-01-25 01:49:44 - root - INFO - 0
2025-01-25 01:49:44 - root - INFO - results: 
status,L1_model,count
soft,regression,102
strong,regression,186


2025-01-25 01:49:44 - root - INFO - Please check the answer again by reviewing Which L1_model has the highest occurrence for each status ('strong,' where the maximum test score for non-'Stack' models is less than the 'Stack' score, and 'soft,' where it equals the 'Stack' score), and how many times does it occur?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
status,L1_model,count
strong,L1_model_name1:str,count1:int
soft,L1_model_name2:str,count2:int
```

For each status ('strong' and 'soft'), the L1_model with the highest occurrence is listed along with the number of times it occurs. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
status,L1_model,count
soft,regression,102
strong,regression,186
Current sql:
SELECT stats."status", stats."L1_model", stats."count"
FROM (
  SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
  FROM (
    SELECT s."name", s."version",
      CASE
        WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
        WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
      END AS "status"
    FROM (
      SELECT "name", "version", "test_score"
      FROM "model_score"
      WHERE "model" = 'Stack'
    ) AS s
    JOIN (
      SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
      FROM "model_score"
      WHERE "model" <> 'Stack'
      GROUP BY "name", "version"
    ) AS n
    ON s."name" = n."name" AND s."version" = n."version"
  ) AS status_table
  JOIN "model" AS m
  ON status_table."name" = m."name" AND status_table."version" = m."version"
  GROUP BY status_table."status", m."L1_model"
) AS stats
WHERE (stats."status", stats."count") IN (
  SELECT "status", MAX("count")
  FROM (
    SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
    FROM (
      SELECT s."name", s."version",
        CASE
          WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
          WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
        END AS "status"
      FROM (
        SELECT "name", "version", "test_score"
        FROM "model_score"
        WHERE "model" = 'Stack'
      ) AS s
      JOIN (
        SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
        FROM "model_score"
        WHERE "model" <> 'Stack'
        GROUP BY "name", "version"
      ) AS n
      ON s."name" = n."name" AND s."version" = n."version"
    ) AS status_table
    JOIN "model" AS m
    ON status_table."name" = m."name" AND status_table."version" = m."version"
    GROUP BY status_table."status", m."L1_model"
  )
  GROUP BY "status"
);
2025-01-25 01:50:23 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-25 01:50:23 - root - INFO - ```sql
SELECT stats."status", stats."L1_model", stats."count"
FROM (
  SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
  FROM (
    SELECT s."name", s."version",
      CASE
        WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
        WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
      END AS "status"
    FROM (
      SELECT "name", "version", "test_score"
      FROM "model_score"
      WHERE "model" = 'Stack'
    ) AS s
    JOIN (
      SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
      FROM "model_score"
      WHERE "model" <> 'Stack'
      GROUP BY "name", "version"
    ) AS n
    ON s."name" = n."name" AND s."version" = n."version"
  ) AS status_table
  JOIN "model" AS m
  ON status_table."name" = m."name" AND status_table."version" = m."version"
  GROUP BY status_table."status", m."L1_model"
) AS stats
WHERE (stats."status", stats."count") IN (
  SELECT "status", MAX("count")
  FROM (
    SELECT status_table."status", m."L1_model", COUNT(*) AS "count"
    FROM (
      SELECT s."name", s."version",
        CASE
          WHEN n."max_non_stack_score" < s."test_score" THEN 'strong'
          WHEN n."max_non_stack_score" = s."test_score" THEN 'soft'
        END AS "status"
      FROM (
        SELECT "name", "version", "test_score"
        FROM "model_score"
        WHERE "model" = 'Stack'
      ) AS s
      JOIN (
        SELECT "name", "version", MAX("test_score") AS "max_non_stack_score"
        FROM "model_score"
        WHERE "model" <> 'Stack'
        GROUP BY "name", "version"
      ) AS n
      ON s."name" = n."name" AND s."version" = n."version"
    ) AS status_table
    JOIN "model" AS m
    ON status_table."name" = m."name" AND status_table."version" = m."version"
    GROUP BY status_table."status", m."L1_model"
  )
  GROUP BY "status"
);
```
2025-01-25 01:50:23 - root - INFO - itercount: 2
2025-01-25 01:50:23 - root - INFO - 0
2025-01-25 01:50:23 - root - INFO - Total iteration counts: 2
