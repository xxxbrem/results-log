2025-01-27 01:03:09 - openai._base_client - INFO - Retrying request to /chat/completions in 0.465839 seconds
2025-01-27 01:03:55 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 01:03:55 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:03:55 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:03:55 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:03:58 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-01-27 01:03:59 - snowflake.connector.connection - INFO - closed
2025-01-27 01:03:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:00 - root - INFO - SQL:
SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE
   LIMIT 100;
Results:
Too long, hard cut:
id,content
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;

2025-01-27 01:04:00 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:00 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:00 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:01 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-27 01:04:01 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:01 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:02 - root - INFO - SQL:
SELECT DISTINCT "sample_path"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   LIMIT 100;
Results:
sample_path
src/main/java/io/mycat/manager/response/ShowSQLSumUser.java
tapestry-core/src/test/java/org/apache/tapestry5/ContentTypeTest.java
vio/vio.c
Modules/BetterCms.Module.Root/Commands/Tag/SaveTag/SaveTagCommand.cs
lib/entities/plants/peatbog.dart
src/filesystem/ZWorkerPool.h
core/lib/dr_config.h
ME3Explorer/Resources/property_database_64x64.png
module/plugins/crypter/UploadableChFolder.py
content/browser/indexed_db/indexed_db_quota_client.cc
core/sis-referencing/src/main/java/org/apache/sis/referencing/datum/DefaultPrimeMeridian.java
streamingUpdate/seq1.c
grammars/unosln.cson
plugins/BackendTheme/src/Template/Element/settings.ctp
FAQ-USER
commonjs/google-map/map.js
tapestry-core/src/test/java/org/apache/tapestry5/internal/services/RequestPathOptimizerImplTest.java
rtmpdump.c
assets/variants/light/buttons/button_reverse.png
icons/file_type_source@3x.png
src/administrator/components/com_kunena/controllers/plugins.php
server/templates/emailTemplate.handlebars
WARZONE_ASSETS/sound/chars/RAB-24/misc/taunt.mp3
WARZONE_ASSETS/sound/jkg/jetpack/jetlp_BACKUP.wav
WARZONE_ASSETS/textures/bespin/u_carb02.jpg
css/load1.css
Code/Cleavir/Environment/cleavir-environment.asd
jframe/jframe-core/src/main/java/jframe/core/plugin/DefPluginContext.java
documentation/docs/index.rst
images/right.xbm
include/neolib/singleton.hpp
src/main/omr/script/doc-files/script.uxf
libyaul/scu/bus/cpu/smpc/smpc_peripheral_mouse_port.c
rinoh/document.py
wp-content/plugins/kirki/assets/scss/controls/typography.scss
tests/Iam/IamTest.php
web/files/css/desktop/windows/inv_search_window.css
client/components/characters/charactersAdd.html
src/maidsafe/routing/async_queue.h
module/EcampCore/src/EcampCore/Fieldset/User/UserCreateFieldset.php
src/kundera-hbase/kundera-hbase/src/test/java/com/impetus/client/hbase/query/LikeComparatorFactoryTest.java
doc/manual/R-exts.texi
src/local_biology/abstract_local_biology_module.cc
config/initializers/session_store.rb
src/main/java/com/github/lindenb/jvarkit/util/tabix/AbstractTabixObjectReader.java
recipes/default/assets/estilo-footer.scss
src/Java/BouncyCastle/BouncyCastle-1.54/bcprov-jdk15on-154/javadoc/org/bouncycastle/crypto/StreamCipher.html
TraktKitMac/Info.plist
third-party/org.carrot2.api/javadoc/org/carrot2/text/preprocessing/CaseNormalizerDescriptor.Keys.html
build.xml
sample/test-elements/callbacks.html
trunk/Documentation/KamanjaAPIDocs/com/ligadata/kamanja/metadata/ModelDef.html
build/changelog/entries/2015/10/10337.enhancement
src/main/java/cn/zhaosg/supports/DBUtil.java
versions.json
_protected/framework/Registry/Registry.class.php
osgi/bundles_test/regression_tests/component_test/test_target_bundles/component-api_test/bundle.manifest
src/gui/elems/ge_column.h
sketches/theme/gpgpu/gpgpu-swap-renderer/shaders/pass.frag
src/interface/tembo.render.js
corehq/ex-submodules/pillow_retry/south_migrations/006_add_doc_meta.py
src/Hystrix.Test/HystrixCommandTestImplementations/KnownFailureTestCommandWithFallbackFailure.cs
assets/css/sass/admin/_posts.scss
src/main/java/net/blay09/mods/cookingforblockheads/CookingConfig.java
WARZONE_ASSETS/sound/tts/dimitrissad22k/A280 Clone Blaster.mp3
application/sis-console/pom.xml
chromeos/network/network_configuration_handler.cc
testsuite/tests/typing-misc/pr7228.ml
Source/RobertIagar.Podcasts/RobertIagar.Podcasts.Tests/Package.appxmanifest
PythonScript/src/NotSupportedException.h
data/items/2013/06/02/18-19.csv
resources/netsynthResources/netlists_3in1out/0xBC/netlist.txt
iiab/templates/macros/_ask_user_to_update_ie.html
gov.nasa.ensemble.core.jscience/src/gov/nasa/ensemble/core/jscience/Activator.java
data/items/2009/01/18/11-12.csv
src/tool/hpcrun/sample-sources/pthread-blame.c
composer.json
toolchain/arm_cm0/share/doc/gcc-arm-none-eabi/html/gdb/MIPS-Breakpoint-Kinds.html
registry/windows2012Users.py
cs/browser/chrome/AB-CD/locale/browser/feeds/subscribe.properties
src/main/resources/assets/substratum/textures/items/dustSmallElectrum.png
keystone/tests/unit/identity/backends/test_ldap_common.py
MathEagleTests/ComplexTests.swift
lib/gwtphp/RemoteServiceServlet.class.php
ModelFit/shaders/cdepth_skinned_lbs.vert
json4s/src/main/ls/0.6.5.json
java/engine/org/apache/derby/iapi/store/access/BinaryOrderable.java
src/program/lwaftr/doc/benchmarks-v1.0/transient-self-test-gbps.png
config/services/pmwebapis.xml
browser/kango-1.7.6/samples/InternationalizationDemo/src/common/extension_info.json
src/TKXSDRAW/PACKAGES
aikau/src/main/resources/alfresco/services/i18n/ContentService_ja.properties
aclImdb/train/pos/8062_8.txt
net/instaweb/genfiles/rewriter/client_domain_rewriter_dbg.js
src/java/nxt/http/GetDGSGood.java
lib/Alchemy/Phrasea/Utilities/CrossDomainParser.php
brjs-runner/src/test/resources/CommandControllerTest/command-tests/conf/test-runner.conf
artworks/a/016/a01627-69757.json
doc/tutorials/examples/jython/swing/gui.py
src/_Code.sass

2025-01-27 01:04:02 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:02 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:02 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:03 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-27 01:04:03 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:03 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:03 - root - INFO - SQL:
SELECT "id", "size"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "size" > 1000 AND "binary" = FALSE
   LIMIT 100;
Results:
id,size
2dd586a19b594a73e9c6f7485d1e5da9203a4467,21447
7acfd43a7914620c9fef2196f9cac65d0f542d53,41645
9eb0c3299f21b4d86029ebbbf0b6ad8c0945b35d,3144
816b2d7412b432d86a4a36147255ec664f760193,3974
ca151cab87aa4ba9286dd5b3557fd75bb902c442,3025
21cab621a82b9e390ee6cfe409704954c4d90f4f,5244
026e9467f313c7776b144881ba161103119aa0a9,1506
f50a76cff9f42438026c7cf8bba687bcd2d491ea,7866
9281ba3801cf1a02af6ea13bebdc19a41d48b463,1444
89b92f14f4b3832108de19ca964f73a1e5ab0133,3031
de1cba95dbe087f858735dc17e86f1a7f5d71af8,7261
6b3e05813c8df6e5fd24b2bb2abc0f765153cf76,10163
003fd53850a89b787395007d69e0fb6f189f922c,1221
7bc2fbeb883e739d41d2bc18bcd2f76bac62405f,2873
b7cde36092689db6dada97894e63992f577dc610,6438
efc4a4e7a2a4697d74b1f5a3696800a7289963f5,17470
0052de438fe69bac42ec3caf472988bcfea7641b,7032
630abd5ef1c4a032c64b076ef06e92dc30262880,4044
35ebf1c9779099f07d0906955485d6f15608504b,13138
4a6e3ef763ac4c820ac268053084dcf2d9a5c20f,6556
e4c56a64472e33c2ceff4248a70897e2364df3e4,1062
53d41edc180367174c94ecfc3ec615dca283472e,1143
02c9781faebbba633113adee71cb90230f6203d4,37888
b39fb02fd35e99a9b9d7604b5a51bad331239d9f,26456
bd8ba51bb577cd64bbc2a2df43dd74bc78aadf1a,32982
73e022d17f9556754e9506bce20b79b9376ab059,1750
ef9b8a5ff4f0f32508c7ae873fb3326a9d656bb8,1168
e1813d75df3e183766f07b062776b3897a2523a7,2872
801612d3e022bef0512f1322806589e8824e34c9,63169
5acbb02c0bd644561fecce1ba9b5ed3431c2c400,1474
3dc7fe5332570c343998825d3e94475d4edcabf7,3444
e2521c113a74bb8250434b6efce725e1134a7003,6796
7122ce62f2d1bee4878c0593c244de80247fe88b,6444
6ef0115e036a78b7186aebf5aa390d15caeb78cd,47646
04aa747e26f22b5e6e5e33cd117d4a7adfba57f0,2427
761eaa5a1d29eee52ed9bb752756c453c8f24a2c,4665
2272ea8b5b1cbdc7b2578c6d0a8c5416c200dd57,21758
6db6b8f13a912023f4c8c889b75e7366cca6d221,12758
b2904db52dd0dce293619fc10106854823533867,5143
1cd9db02e03f907dd998722ec7c9674b6532250c,6429
98001653566ed4abf3b6980b59a53152fa8e6a24,2377
a2b13a6525699664774a1f68bdd9f271cd59198d,96596
2f678fd6a81b8653c17eaa1a5891d8ba2845b0bc,2189
f2871049dc62e26b4421e657389724706572bb26,1928
317c67b246df6fcb29d2e660159a291c4d9e1471,8402
8f7129cd125e0baf7b66a23c0548ca6c608fbacf,4471
e919d808a0495863c59c27e74e3bef40afcfcf58,3459
cf118b09856ceda177b1ff62d8662f9bc52c0cb3,42275
612de1db5cc35a0d852e260a543e686d42dfed62,1149
d2140a96a46b5196e5368ebe555bde477cf95a0d,26277
54a85e112740e947c4b982d69aea64bd360e0297,2259
75c71cd4201fa47a234b7dcc2240a415dfa5610d,6445
970816f61ec689e35495f05345d26070b95450dc,1221
320dbc0d9d8a3f40c867a51bde847fc89be76f08,1445
a266b7b1edded4066a8541baa090ac49b5ab1a50,1128
ad37595cee87b33e089abe682bc38afafb038eb7,5069
dc50bbe6a5c76a22b6532722b31f50d2e058de67,3733
1784564068511de9c6d0a8ed7946836636ae6817,7459
70cf22b949b32adfc25dd9dff4131bf2e09198dd,26147
0e1068c119973343a4230816dc1992e6b33bc318,18928
92445a58f9282b454355a57706ff39a78e8dd468,20343
11b7430362f8ba83fe471bf6a641c9c9ac8725bc,36273
41347cdcf00b2fa6a5020d967b0f3d5dd2f29c53,1220
747f288e08d93ea8bea587f77121cb822f047791,5695
97af8908bb7689c60f48beff6ec538b0a3927622,1155
95e160899c088cab1e41c90b8af1eb3b3adfa718,1919
5c16fe4787609ce827ac4115819b4ca6623d94ad,4846
67c4aed4740fc59050486d5a2a43643b129e6c4b,1705
dc0f68d612e07adee3485ed0a1d0e25d46b71424,6006
6d83eaae13a37486983bb9f66e0c7d6525270cd2,16811
370876ccf108f9d57baa192b0521b2ae4ec0cc22,1842
37362386720d22e764e4ba6bdc6f1a1cef4ceb30,32132
8da190f9fdb2ae37f87460d5b0c8ef509a80d780,2040
f033396114d42dd811127fcc7af5b45c02c735c9,1016
0a233245dde4f07ff2cb460e0e6e3e20693fd4d8,4122
de24b2fb4ad8d3c82df4b1603d71d689f643575e,10985
80a86652986ea12c53c8f58544f970ed0f993d44,18626
d51b663390da2987e63eebc3b65e1f4b0e824a93,2180
22a8998b43837661b60129698523f019abbf32c6,7864
a77682159a60b49d83af8ffb4931a9f44e879b28,28939
1879b8adfb067708f36ed5e57838f0504364e11f,1620
3045648dd2c1a3241a3525ec91b9534a2c7feb35,567260
335c56d61e119ed0244e3924ca2245f4082bc100,1486
56635e3a614ee1030b24c5b0ee758359f2cdebb5,5243
3ea1a6436cdaca6387f6d679e341821f4ff26423,22048
14c13b5e27db785e012d596e71562159019dc9ec,1073
1549d1c730d48405e2a36df4a35c21c86e259581,2644
2a04c806af4ef022883c728be85dcc9e1f59e501,3127
438832ce22e2613685a7b8429e3c4c8ab764a756,3415
1557ba292caf79f74aecb20c1c05e6f689c24f04,4331
61f44fb9ab5bed84f3c1f4a24b1e1dbeacc68b9d,9337
63c8244b198808f3add3a32a31d6d349e3396443,3106
622c141609ba994a79edca9d60dded82eb86b03c,12457
4eabf5a28e4e1d009bcedd6b15a5ff72f93a4081,1445
49b0ef8151d9c75c7f67e06c57693855752e31dc,1729
b74f0606423b8b60234a85288ed02b3484297f0c,1097
b9da673a68d204359d40e36f2b774dbd7ce3e92f,189611
1a4b9ec9f82126b3fa4073cb49e32a51a5b3cea5,6523
fce2b9152de1e56974a5c3ae3b4139b283c4dc7a,17043
b6d5fa0273fc8a3dcef84ce7705b12983b3640f4,1780

2025-01-27 01:04:03 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:03 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:03 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:05 - snowflake.connector.cursor - INFO - Number of results in first chunk: 12
2025-01-27 01:04:06 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:06 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:07 - root - INFO - SQL:
SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "content" LIKE '%\n %%'
   LIMIT 100;
Results:
Too long, hard cut:
id,content
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;

2025-01-27 01:04:07 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:07 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:07 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:08 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-01-27 01:04:10 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:10 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:10 - root - INFO - SQL:
SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "content" LIKE '% %\n%'
   LIMIT 100;
Results:
Too long, hard cut:
id,content
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;

2025-01-27 01:04:10 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:10 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:10 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:12 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-01-27 01:04:13 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:13 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:13 - root - INFO - SQL:
SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "content" LIKE '%\n%'
   LIMIT 100;
Results:
Too long, hard cut:
id,content
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;

2025-01-27 01:04:13 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:13 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:13 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:15 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-27 01:04:15 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:15 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:15 - root - INFO - SQL:
SELECT DISTINCT "sample_repo_name"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   LIMIT 100;
Results:
sample_repo_name
nigelsmall/py2neo
Esteemed-Innovation/Flaxbeards-Steam-Power
sonata-project/sandbox-build
koala-framework/koala-framework
ligaDATA/Kamanja
hiloteam/Hilo
oivva/boxy
ChildrenOfUr/coUclient
timduru/tf300t-katkernel
ChildrenOfUr/coUserver
draios/sysdig
DynamoRIO/drk
google/ktsan
apache/tomcat-native
erasaur/binary
jdahlstrom/vaadin.react
pfirmstone/river-internet
Igalia/snabb
VadimShvetsov/Yii2_GB_HW
MoonchildProductions/pale-moon-localization
aceway/findX
grap/odoo-addons-misc
ME3Explorer/ME3Explorer
ra0o0f/arangoclient.net
Lambda-X/cljs-repl-web
meteor/react-packages
getlantern/lantern
sant0ro/Yupi
apache/sis
dadoonet/spring-elasticsearch
oferei/sublime-unity-completions
versaloon/versaloon
Elders/Hystrix.NET
poise/application_ruby
GiGurra/leavu3
pegasus-isi/pegasus
settinghead/meteor-auto-nprogress
lindenb/jvarkit
SekoiaLab/Fastir_Collector
GoogleCloudPlatform/gcloud-php
DeepPhe/DeepPhe
TheTechnobear/EigenD
bosonic/bosonic
alohaeditor/Aloha-Editor
Kunena/Kunena-Forum
ecamp/ecamp3
apache/commons-collections
apache/qpid-java
oakes/Nightmod
reu/chip8.js
openstack/keystone
guangzhuwu/p2engine
psathyrella/partis
udevbe/westmalle
alixaxel/dump.HN
osmcode/osmium-tool
PGWelch/com.opendoorlogistics
codeka/wwmmo
zurmo/Zurmo
bretth18/healthLab
izumin5210/Sunazuri
aravindsagar/SmartLockScreen
Ulauncher/Ulauncher
ferventdesert/Hawk
govbr/barra.govbr
openstack/monasca-agent
opengovfoundation/madison
codykrieger/gfxCardStatus
hydralabs/pyamf
scottjehl/eCSSential
RPCS3/rpcs3
geosolutions-it/MapStore2
Warzone2100/warzone2100
KDE/kdevelop
seqan/seqan
arcusys/Valamis
golismero/golismero
OpenFOAM/OpenFOAM-dev
migueldeicaza/MonoTouch.Dialog
spacex/kernel-centos7
DF1E/SimpleExplorer
karawin/ESP8266-WebRadio
meebey/smuxi
rapidminer/rapidminer-5
eranif/codelite
BentThomsen/SmartCampusAAU
NUinfolab/context
BurstProject/burstcoin
BladeRunnerJS/brjs
coreboot/coreboot
MerlijnWajer/Simba
hrydgard/ppsspp
hlzz/dotfiles
raboof/notion
lvchaqiu/meizu-mx-kernel
openstack/compass-adapters
lronaldo/cpctelera
forcedotcom/dataloader
droolsjbpm/kie-wb-distributions
mplushnikov/lombok-intellij-plugin

2025-01-27 01:04:15 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:15 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:15 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:17 - snowflake.connector.cursor - INFO - Number of results in first chunk: 9
2025-01-27 01:04:18 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:18 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:19 - root - INFO - SQL:
SELECT "sample_path", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "sample_path" LIKE '%.txt'
   LIMIT 100;
Results:
Too long, hard cut:
sample_path,content
socketcan_interface/CMakeLists.txt,"cmake_minimum_required(VERSION 2.8.3)
project(socketcan_interface)

find_package(catkin REQUIRED
  COMPONENTS
    class_loader
)

find_package(Boost REQUIRED
  COMPONENTS
    chrono
    system
    thread
)

catkin_package(
  INCLUDE_DIRS
    include
  LIBRARIES
    socketcan_interface_string
  CATKIN_DEPENDS
  DEPENDS
    Boost
)

include_directories(
  include
  ${Boost_INCLUDE_DIRS}
  ${catkin_INCLUDE_DIRS}
)

# socketcan_interface_string
add_library(socketcan_interface_string
    src/string.cpp
)

# socketcan_dump
add_executable(socketcan_dump
  src/candump.cpp
)
target_link_libraries(socketcan_dump
   socketcan_interface_string
   ${catkin_LIBRARIES}
   ${Boost_LIBRARIES}
)

# socketcan_interface_plugin
add_library(socketcan_interface_plugin
  src/socketcan_interface_plugin.cpp
)
target_link_libraries(socketcan_interface_plugin
  ${catkin_LIBRARIES}
  ${Boost_LIBRARIES}
)

install(
  TARGETS
    socketcan_dump
    socketcan_interface_plugin
    socketcan_interface_string
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

install(
  DIRECTORY
    include/${PROJECT_NAME}/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
  FILES_MATCHING PATTERN ""*.h""
)

install(
  FILES
    socketcan_interface_plugin.xml
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
)
if(CATKIN_ENABLE_TESTING)

  catkin_add_gtest(${PROJECT_NAME}-test_dummy_interface
    test/test_dummy_interface.cpp
  )
  target_link_libraries(${PROJECT_NAME}-test_dummy_interface
    socketcan_interface_string
    ${catkin_LIBRARIES}
  )
endif()
"
top_down_classifier/data/gender/fold2005/val.txt,"# Category: gender, Random seed: 2005 - Active sequences: [1] - Shuffle samples inter-person: True - Subsampling: 5 - Balance samples: True
# No. individuals: 69 - No. samples total: 556 - Num positive class samples: 278 - Num negative class samples: 278
/home/linder/Datasets/srl_dataset_clouds/person_710/person_710_1_1_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_907/person_907_1_6_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_091/person_091_1_6_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_104/person_104_1_6_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_921/person_921_1_9_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_911/person_911_1_7_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_115/person_115_1_1_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_073/person_073_1_1_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_104/person_104_1_5_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_053/person_053_1_3_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_024/person_024_1_2_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_061/person_061_1_6_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_914/person_914_1_6_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_034/person_034_1_6_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_058/person_058_1_6_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_059/person_059_1_5_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_078/person_078_1_5_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_003/person_003_1_4_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_029/person_029_1_7_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_068/person_068_1_2_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_008/person_008_1_3_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_029/person_029_1_3_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_044/person_044_1_3_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_076/person_076_1_4_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_103/person_103_1_3_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_022/person_022_1_7_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_103/person_103_1_2_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_041/person_041_1_8_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_029/person_029_1_5_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_010/person_010_1_6_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_029/person_029_1_4_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_013/person_013_1_6_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_060/person_060_1_4_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_047/person_047_1_1_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_039/person_039_1_5_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_055/person_055_1_3_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_114/person_114_1_1_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_039/person_039

2025-01-27 01:04:19 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:19 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:19 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:21 - snowflake.connector.cursor - INFO - Number of results in first chunk: 4
2025-01-27 01:04:22 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:22 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:23 - root - INFO - SQL:
SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "content" ILIKE '%TODO%'
   LIMIT 100;
Results:
Too long, hard cut:
id,content
d67a9630786f8fc28d21f7991797537768df96cf,"// Copyright 2012 Cloudera Inc.
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace cpp impala
namespace java com.cloudera.impala.thrift

include ""CatalogObjects.thrift""
include ""JniCatalog.thrift""
include ""Types.thrift""
include ""Status.thrift""
include ""Results.thrift""

// CatalogServer service API and related structs.

enum CatalogServiceVersion {
  V1
}

// Common header included in all CatalogService requests.
// TODO: The CatalogServiceVersion/protocol version should be part of the header.
// This would require changes in BDR and break their compatibility story. We should
// coordinate a joint change somewhere down the line.
struct TCatalogServiceRequestHeader {
  // The effective user who submitted this request.
  1: optional string requesting_user
}

// Returns details on the result of an operation that updates the catalog. Information
// returned includes the Status of the operations, the catalog version that will contain
// the update, and the catalog service ID.
struct TCatalogUpdateResult {
  // The CatalogService service ID this result came from.
  1: required Types.TUniqueId catalog_service_id

  // The Catalog version that will contain this update.
  2: required i64 version

  // The status of the operation, OK if the operation was successful.
  3: required Status.TStatus status

  // The resulting TCatalogObjects that were added or modified, if applicable.
  4: optional list<CatalogObjects.TCatalogObject> updated_catalog_objects

  // The resulting TCatalogObjects that were removed, if applicable.
  5: optional list<CatalogObjects.TCatalogObject> removed_catalog_objects
}

// Request for executing a DDL operation (CREATE, ALTER, DROP).
struct TDdlExecRequest {
  1: required CatalogServiceVersion protocol_version = CatalogServiceVersion.V1

  // Common header included in all CatalogService requests.
  17: optional TCatalogServiceRequestHeader header

  2: required JniCatalog.TDdlType ddl_type

  // Parameters for ALTER TABLE
  3: optional JniCatalog.TAlterTableParams alter_table_params

  // Parameters for ALTER VIEW
  4: optional JniCatalog.TCreateOrAlterViewParams alter_view_params

  // Parameters for CREATE DATABASE
  5: optional JniCatalog.TCreateDbParams create_db_params

  // Parameters for CREATE TABLE
  6: optional JniCatalog.TCreateTableParams create_table_params

  // Parameters for CREATE TABLE LIKE
  7: optional JniCatalog.TCreateTableLikeParams create_table_like_params

  // Parameters for CREATE VIEW
  8: optional JniCatalog.TCreateOrAlterViewParams create_view_params

  // Parameters for CREATE FUNCTION
  9: optional JniCatalog.TCreateFunctionParams create_fn_params

  // Parameters for DROP DATABASE
  10: optional JniCatalog.TDropDbParams drop_db_params

  // Parameters for DROP TABLE/VIEW
  11: optional JniCatalog.TDropTableOrViewParams drop_table_or_view_params

  // Parameters for TRUNCATE TABLE
  21: optional JniCatalog.TTruncateParams truncate_params

  // Parameters for DROP FUNCTION
  12: optional JniCatalog.TDropFunctionParams drop_fn_params

  // Parameters for COMPUTE STATS
  13: optional JniCatalog.TComputeStatsParams compute_stats_params

  // Parameters for CREATE DATA SOURCE
  14: optional JniCatalog.TCreateDataSourceParams create_data_source_params

  // Parameters for DROP DATA SOURCE
  15: optional JniCatalog.TDropDataSourceParams drop_data_source_params

  // Parameters for DROP STATS
  16: optional JniCatalog.TDropStatsParams drop_stats_params

  // Parameters for CREATE/DROP ROLE
  18: optional JniCatalog.TCreateDropRoleParams create_drop_role_params

  // Parameters for GRANT/REVOKE ROLE
  19: optional JniCatalog.TGrantRevokeRoleParams grant_revoke_role_params

  // Parameters for GRANT/REVOKE privilege
  20: optional JniCatalog.TGrantRevokePrivParams grant_revoke_priv_params
}

// Response from executing a TDdlExecRequest
struct TDdlExecResponse {
  1: required TCatalogUpdateResult result

  // Set only for CREATE TABLE AS SELECT statements. Will be true iff the statement
  // resulted in a new table being created in the Metastore. This is used to
  // determine if a CREATE TABLE IF NOT EXISTS AS SELECT ... actually creates a new
  // table or whether creation was skipped because the table already existed, in which
  // case this flag would be false
  2: optional bool new_table_created;

  // Result of DDL operation to be returned to the client. Currently only set
  // by COMPUTE STATS.


2025-01-27 01:04:23 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:23 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:23 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:25 - snowflake.connector.cursor - INFO - Number of results in first chunk: 10
2025-01-27 01:04:26 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:26 - root - INFO - SQL:
SELECT c."id", c."content", c."sample_repo_name", f."repo_name"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
    JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f ON c."id" = f."id"
    WHERE c."binary" = FALSE
    LIMIT 100;
Results:
Too long, hard cut:
id,content,sample_repo_name,repo_name
f57338afd71f47681a3436ee769d6fb02cd14b06,"/*******************************************************************************

  Intel(R) Gigabit Ethernet Linux driver
  Copyright(c) 2007-2012 Intel Corporation.

  This program is free software; you can redistribute it and/or modify it
  under the terms and conditions of the GNU General Public License,
  version 2, as published by the Free Software Foundation.

  This program is distributed in the hope it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  more details.

  You should have received a copy of the GNU General Public License along with
  this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.

  The full GNU General Public License is included in this distribution in
  the file called ""COPYING"".

  Contact Information:
  e1000-devel Mailing List <e1000-devel@lists.sourceforge.net>
  Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

*******************************************************************************/

#include <linux/if_ether.h>
#include <linux/delay.h>
#include <linux/pci.h>
#include <linux/netdevice.h>
#include <linux/etherdevice.h>

#include ""e1000_mac.h""

#include ""igb.h""

static s32 igb_set_default_fc(struct e1000_hw *hw);
static s32 igb_set_fc_watermarks(struct e1000_hw *hw);

/**
 *  igb_get_bus_info_pcie - Get PCIe bus information
 *  @hw: pointer to the HW structure
 *
 *  Determines and stores the system bus information for a particular
 *  network interface.  The following bus information is determined and stored:
 *  bus speed, bus width, type (PCIe), and PCIe function.
 **/
s32 igb_get_bus_info_pcie(struct e1000_hw *hw)
{
	struct e1000_bus_info *bus = &hw->bus;
	s32 ret_val;
	u32 reg;
	u16 pcie_link_status;

	bus->type = e1000_bus_type_pci_express;

	ret_val = igb_read_pcie_cap_reg(hw,
					PCI_EXP_LNKSTA,
					&pcie_link_status);
	if (ret_val) {
		bus->width = e1000_bus_width_unknown;
		bus->speed = e1000_bus_speed_unknown;
	} else {
		switch (pcie_link_status & PCI_EXP_LNKSTA_CLS) {
		case PCI_EXP_LNKSTA_CLS_2_5GB:
			bus->speed = e1000_bus_speed_2500;
			break;
		case PCI_EXP_LNKSTA_CLS_5_0GB:
			bus->speed = e1000_bus_speed_5000;
			break;
		default:
			bus->speed = e1000_bus_speed_unknown;
			break;
		}

		bus->width = (enum e1000_bus_width)((pcie_link_status &
						     PCI_EXP_LNKSTA_NLW) >>
						     PCI_EXP_LNKSTA_NLW_SHIFT);
	}

	reg = rd32(E1000_STATUS);
	bus->func = (reg & E1000_STATUS_FUNC_MASK) >> E1000_STATUS_FUNC_SHIFT;

	return 0;
}

/**
 *  igb_clear_vfta - Clear VLAN filter table
 *  @hw: pointer to the HW structure
 *
 *  Clears the register array which contains the VLAN filter table by
 *  setting all the values to 0.
 **/
void igb_clear_vfta(struct e1000_hw *hw)
{
	u32 offset;

	for (offset = 0; offset < E1000_VLAN_FILTER_TBL_SIZE; offset++) {
		array_wr32(E1000_VFTA, offset, 0);
		wrfl();
	}
}

/**
 *  igb_write_vfta - Write value to VLAN filter table
 *  @hw: pointer to the HW structure
 *  @offset: register offset in VLAN filter table
 *  @value: register value written to VLAN filter table
 *
 *  Writes value at the given offset in the register array which stores
 *  the VLAN filter table.
 **/
static void igb_write_vfta(struct e1000_hw *hw, u32 offset, u32 value)
{
	array_wr32(E1000_VFTA, offset, value);
	wrfl();
}

/* Due to a hw errata, if the host tries to  configure the VFTA register
 * while performing queries from the BMC or DMA, then the VFTA in some
 * cases won't be written.
 */

/**
 *  igb_clear_vfta_i350 - Clear VLAN filter table
 *  @hw: pointer to the HW structure
 *
 *  Clears the register array which contains the VLAN filter table by
 *  setting all the values to 0.
 **/
void igb_clear_vfta_i350(struct e1000_hw *hw)
{
	u32 offset;
	int i;

	for (offset = 0; offset < E1000_VLAN_FILTER_TBL_SIZE; offset++) {
		for (i = 0; i < 10; i++)
			array_wr32(E1000_VFTA, offset, 0);

		wrfl();
	}
}

/**
 *  igb_write_vfta_i350 - Write value to VLAN filter table
 *  @hw: pointer to the HW structure
 *  @offset: register offset in VLAN filter table
 *  @value: register value written to VLAN filter table
 *
 *  Writes value at the given offset in the register array which stores
 *  the VLAN filter table.
 **/
static void igb_write_vfta_i350(struct e1000_hw *hw, u32 offset, u32 value)
{
	int i;

	for (i = 0; i < 10; i++)
		array_wr32(E1000_VFTA, offset, value);

	wrfl();
}

/**
 *  igb_init_rx_addrs - Initialize receive address's
 *  @hw: pointer to the HW structure
 *  @rar_count: receive address registers
 *
 *  Setups the receive address registers by setting the base receive address
 *  register to the devices MAC address and clearing all the other receive
 *  address registers to 0.
 **/
void igb_init_rx_addrs(struct e1000_hw *hw, u16 

2025-01-27 01:04:26 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:26 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:26 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:29 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-27 01:04:30 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:30 - root - INFO - SQL:
SELECT "id", "content"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
    WHERE "binary" = FALSE
      AND "content" NOT LIKE '%\n %%'
      AND "content" NOT LIKE '% %\n%'
    LIMIT 100;
Results:
Too long, hard cut:
id,content
750e6a424e8cfb7f62716e8841136b0b51736454,"head_h1,*off
head_eyes_h1,*off
head_eyelids_h1,*off

head_h2,*off
head_eyes_h2,*off

head_h3,*off
head_eyes_h3,*off

head_h4,*off
head_eyes_h4,*off
head_eyelids_h4,*off
head_bangs_h4,*off

head_twilek,*off
head_eyes_t,*off
head_eyelids_t,*off

head_quara,*off
head_eyes_q,*off

head_quarren,models/players/STKotorJedi/Qhead1.tga

head_zabrak,*off
head_eyes_z,*off
head_eyelids_z,*off

head_pada,*off
head_eyelids_p,*off
head_eyes_p,*off
head_ponytail_p,*off
head_braid_p,*off

l_hand,*off
l_hand_b,models/players/STKotorJedi/Qhands1.jpg

r_hand,*off
r_hand_b,models/players/STKotorJedi/Qhands1.jpg

mouth_h1,*off
tongue_h1,*off
teeth_h1,*off

mouth_h2,*off
tongue_h2,*off
teeth_h2,*off

mouth_h3,*off
tongue_h3,*off
teeth_h3,*off

mouth_h4,*off
tongue_h4,*off
teeth_h4,*off


"
65050e3e60616b2d689ae02fa7045244aea61ed0,".*
logs/*
redis.sock
"
f2b0d70eaa0a3fec71e4d593b4c020cf227ddc8d,"{""unit_type"": ""ESCALATOR"", ""performance_summary"": {""one_day"": {""break_days"": [], ""day_to_break_count"": {}, ""num_breaks"": 0, ""start_time"": ""2015-02-16T04:53:07.233000+00:00"", ""unit_id"": ""D08N01ESCALATOR"", ""broken_time_percentage"": 0.0, ""end_time"": ""2015-02-17T04:53:07.233000+00:00"", ""num_inspections"": 0, ""availability"": 1.0}, ""three_day"": {""break_days"": [], ""day_to_break_count"": {}, ""num_breaks"": 0, ""start_time"": ""2015-02-14T04:53:07.233000+00:00"", ""unit_id"": ""D08N01ESCALATOR"", ""broken_time_percentage"": 0.0, ""end_time"": ""2015-02-17T04:53:07.233000+00:00"", ""num_inspections"": 0, ""availability"": 1.0}, ""thirty_day"": {""break_days"": [], ""day_to_break_count"": {}, ""num_breaks"": 0, ""start_time"": ""2015-01-18T04:53:07.233000+00:00"", ""unit_id"": ""D08N01ESCALATOR"", ""broken_time_percentage"": 0.0, ""end_time"": ""2015-02-17T04:53:07.233000+00:00"", ""num_inspections"": 0, ""availability"": 1.0}, ""all_time"": {""break_days"": [""2013-06-02"", ""2013-06-14"", ""2013-06-15"", ""2013-06-16"", ""2013-06-18"", ""2013-06-19"", ""2013-06-26"", ""2013-06-30"", ""2013-07-04"", ""2013-07-05"", ""2013-07-07"", ""2013-07-12"", ""2013-07-19"", ""2013-07-20"", ""2013-07-23"", ""2013-07-24"", ""2013-08-02"", ""2013-08-06"", ""2013-08-11"", ""2013-08-14"", ""2013-08-20"", ""2013-08-22"", ""2013-08-23"", ""2013-09-04"", ""2013-09-05"", ""2013-09-06"", ""2013-09-07"", ""2013-09-10"", ""2013-09-12"", ""2013-09-14"", ""2013-09-15"", ""2013-09-16"", ""2013-09-18"", ""2013-09-21"", ""2013-09-22"", ""2013-09-23"", ""2013-09-25"", ""2013-09-26"", ""2013-09-27"", ""2013-09-28"", ""2013-09-29"", ""2013-09-30"", ""2013-10-03"", ""2013-10-04"", ""2013-10-08"", ""2013-10-12"", ""2013-10-14"", ""2013-10-15"", ""2013-10-16"", ""2013-10-25"", ""2013-10-26"", ""2013-10-29"", ""2013-10-30"", ""2013-11-01"", ""2013-11-04"", ""2013-11-11"", ""2013-11-12"", ""2013-11-13"", ""2013-11-15"", ""2013-11-21"", ""2013-11-24"", ""2013-11-28"", ""2013-11-29"", ""2013-11-30"", ""2013-12-01"", ""2013-12-06"", ""2013-12-11"", ""2013-12-13"", ""2013-12-14"", ""2013-12-16"", ""2013-12-17"", ""2013-12-20"", ""2013-12-27"", ""2014-01-03"", ""2014-01-09"", ""2014-01-13"", ""2014-01-14"", ""2014-01-15"", ""2014-01-16"", ""2014-01-17"", ""2014-01-18"", ""2014-01-19"", ""2014-01-21"", ""2014-01-24"", ""2014-02-01"", ""2014-02-03"", ""2014-02-04"", ""2014-02-05"", ""2014-02-07"", ""2014-02-08"", ""2014-02-13"", ""2014-02-14"", ""2014-02-21"", ""2014-03-03"", ""2014-03-12"", ""2014-03-16"", ""2014-03-21"", ""2014-03-25"", ""2014-03-26"", ""2014-04-01"", ""2014-04-02"", ""2014-04-03"", ""2014-04-09"", ""2014-04-10"", ""2014-04-11"", ""2014-04-18"", ""2014-04-19"", ""2014-04-20"", ""2014-04-21"", ""2014-04-22"", ""2014-05-04"", ""2014-05-05"", ""2014-05-13"", ""2014-05-14"", ""2014-05-21"", ""2014-05-24"", ""2014-05-25"", ""2014-05-29"", ""2014-05-30"", ""2014-06-03"", ""2014-06-04"", ""2014-06-05"", ""2014-06-09"", ""2014-06-10"", ""2014-06-12"", ""2014-06-13"", ""2014-06-14"", ""2014-06-16"", ""2014-06-27"", ""2014-06-28"", ""2014-07-03"", ""2014-07-19"", ""2014-07-21"", ""2014-07-26"", ""2014-07-29"", ""2014-07-30"", ""2014-07-31"", ""2014-08-01"", ""2014-08-02"", ""2014-08-03"", ""2014-08-04"", ""2014-08-05"", ""2014-08-06"", ""2014-08-07"", ""2014-08-08"", ""2014-08-09"", ""2014-08-10"", ""2014-08-11"", ""2014-08-23"", ""2014-09-05"", ""2014-09-06"", ""2014-09-07"", ""2014-09-08"", ""2014-09-09"", ""2014-09-10"", ""2014-09-11"", ""2014-09-12"", ""2014-09-13"", ""2014-09-14"", ""2014-09-15"", ""2014-09-16"", ""2014-09-17"", ""2014-09-18"", ""2014-09-19"", ""2014-09-20"", ""2014-09-21"", ""2014-09-22"", ""2014-09-23"", ""2014-09-24"", ""2014-09-25"", ""2014-09-26"", ""2014-09-27"", ""2014-09-28"", ""2014-09-29"", ""2014-09-30"", ""2014-10-01"", ""2014-10-02"", ""2014-10-03"", ""2014-10-04"", ""2014-10-05"", ""2014-10-06"", ""2014-10-07"", ""2014-10-08"", ""2014-10-09"", ""2014-10-10"", ""2014-10-11"", ""2014-10-17"", ""2014-10-18"", ""2014-10-19"", ""2014-10-20"", ""2014-10-22"", ""2014

2025-01-27 01:04:30 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:30 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:30 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:32 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-27 01:04:32 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:32 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:32 - root - INFO - SQL:
SELECT COUNT(*) AS "Total_Non_Binary_Files"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
    WHERE "binary" = FALSE;
Results:
Total_Non_Binary_Files
20500

2025-01-27 01:04:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-27 01:04:33 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:34 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:04:34 - root - INFO - SQL:
SELECT DISTINCT "size"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
    ORDER BY "size" DESC
    LIMIT 100;
Results:
size
65937671
27113519
20848033
15903868
15751892
13041328
12497699
11913763
11587465
9122304
8994860
7387623
5973306
5716028
5477627
5345656
4704256
4633818
4417719
4406180
4330722
4061380
4017972
3954138
3940664
3922814
3833856
3810702
3766234
3735552
3693609
3599200
3384832
3230650
3193068
3166961
3104232
3100568
3024140
2957308
2917196
2873165
2857900
2853888
2839503
2771830
2675679
2620128
2617744
2600081
2576384
2559999
2502144
2426020
2276881
2213814
2206312
2146320
2117954
2107942
2106355
2084971
2018304
1955468
1920173
1901478
1852676
1835721
1791803
1745762
1731076
1690112
1686528
1680501
1614276
1602506
1580657
1507859
1442018
1434722
1425153
1422978
1411082
1388272
1377812
1371053
1366124
1365955
1364658
1298680
1298386
1253762
1253511
1247076
1237136
1200640
1182424
1173591
1165778
1164595

2025-01-27 01:04:34 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:04:34 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:04:34 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:04:35 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-27 01:04:35 - snowflake.connector.connection - INFO - closed
2025-01-27 01:04:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:05:42 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 01:05:42 - root - INFO - ```sql
SELECT "id", "content"
FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
WHERE "binary" = FALSE
LIMIT 100;
```

By simplifying the query to remove the restrictive conditions on the `"content"` column, we ensure that data is returned. This query selects the `"id"` and `"content"` of non-binary files from the `SAMPLE_CONTENTS` table, retrieving up to 100 records.
2025-01-27 01:05:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:05:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:05:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:05:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-27 01:05:45 - snowflake.connector.connection - INFO - closed
2025-01-27 01:05:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:07:00 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 01:07:00 - root - INFO - SQL:
SELECT "id", "content"
FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
WHERE "binary" = FALSE
LIMIT 100;
Results:
Too long, hard cut:
id,content
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;

2025-01-27 01:07:00 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:07:00 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:07:00 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:07:02 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-01-27 01:07:03 - snowflake.connector.connection - INFO - closed
2025-01-27 01:07:03 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:07:03 - root - INFO - SQL:
SELECT "id", "content", "copies"
FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
WHERE "binary" = FALSE
LIMIT 100
Results:
Too long, hard cut:
id,content,copies
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_lo

2025-01-27 01:07:03 - root - INFO - itercount: 0
2025-01-27 01:07:03 - root - INFO - Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
DDL describes table information.
,0
table_name,SAMPLE_FILES
description,
DDL,"create or replace TABLE SAMPLE_FILES (
	""repo_name"" VARCHAR(16777216),
	""ref"" VARCHAR(16777216),
	""path"" VARCHAR(16777216),
	""mode"" NUMBER(38,0),
	""id"" VARCHAR(16777216),
	""symlink_target"" VARCHAR(16777216)
);"

,1
table_name,LANGUAGES
description,
DDL,"create or replace TABLE LANGUAGES (
	""repo_name"" VARCHAR(16777216),
	""language"" VARIANT
);"

,2
table_name,LICENSES
description,
DDL,"create or replace TABLE LICENSES (
	""repo_name"" VARCHAR(16777216),
	""license"" VARCHAR(16777216)
);"

,3
table_name,SAMPLE_COMMITS
description,
DDL,"create or replace TABLE SAMPLE_COMMITS (
	""commit"" VARCHAR(16777216),
	""tree"" VARCHAR(16777216),
	""parent"" VARIANT,
	""author"" VARIANT,
	""committer"" VARIANT,
	""subject"" VARCHAR(16777216),
	""message"" VARCHAR(16777216),
	""trailer"" VARIANT,
	""difference"" VARIANT,
	""difference_truncated"" BOOLEAN,
	""repo_name"" VARCHAR(16777216),
	""encoding"" VARCHAR(16777216)
);"

,4
table_name,SAMPLE_CONTENTS
description,
DDL,"create or replace TABLE SAMPLE_CONTENTS (
	""id"" VARCHAR(16777216),
	""size"" NUMBER(38,0),
	""content"" VARCHAR(16777216),
	""binary"" BOOLEAN,
	""copies"" NUMBER(38,0),
	""sample_repo_name"" VARCHAR(16777216),
	""sample_ref"" VARCHAR(16777216),
	""sample_path"" VARCHAR(16777216),
	""sample_mode"" NUMBER(38,0),
	""sample_symlink_target"" VARCHAR(16777216)
);"

,5
table_name,SAMPLE_REPOS
description,
DDL,"create or replace TABLE SAMPLE_REPOS (
	""repo_name"" VARCHAR(16777216),
	""watch_count"" NUMBER(38,0)
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'GITHUB_REPOS': {'GITHUB_REPOS': ['LANGUAGES', 'LICENSES', 'SAMPLE_COMMITS', 'SAMPLE_CONTENTS', 'SAMPLE_FILES', 'SAMPLE_REPOS']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

- **Table**: `GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS`
  - **Column**: `"content"`: Contains the content of files.
    - **Potential Usage**: Analyze file contents to determine if any line ends with a blank character or starts with a space.
  - **Column**: `"binary"`
    - **Potential Usage**: Filter out binary files (`"binary" = FALSE`) to focus on text files.
  - **Column**: `"id"`
    - **Potential Usage**: Unique identifier for each file; useful for joining tables or identifying files.
  - **Column**: `"sample_path"`
    - **Potential Usage**: Identify the path of files within repositories.
  - **Column**: `"sample_repo_name"`
    - **Potential Usage**: Identify the repository to which each file belongs.

- **Table**: `GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES`
  - **Column**: `"id"`
    - **Potential Usage**: Can be used to join with `SAMPLE_CONTENTS` on `"id"` to get additional file metadata.
  - **Column**: `"path"`
    - **Potential Usage**: File path; can be compared with `"sample_path"` for consistency.
  - **Column**: `"repo_name"`
    - **Potential Usage**: Repository name; useful for grouping or filtering files by repository.

**Conditions That May Be Used:**

- **Filter Non-binary Files**: `"binary" = FALSE`
- **Find Files with Lines Ending with a Blank Character**:
  - Use pattern matching to identify lines ending with a space or tab before a newline.
- **Find Files with Lines Starting with a Space**:
  - Use pattern matching to identify lines starting with a space or tab.
- **Identify 'Other' Files**:
  - Files that do not meet the above conditions.
- **Limit Results**: Use `LIMIT 100` to restrict the number of rows returned.

**SQL Queries:**

1. **Retrieve Non-Binary File Contents:**

   ```sql
   SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE
   LIMIT 100;
   ```

2. **List Distinct File Paths:**

   ```sql
   SELECT DISTINCT "sample_path"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   LIMIT 100;
   ```

3. **Find Large Text Files (Size > 1000 bytes):**

   ```sql
   SELECT "id", "size"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "size" > 1000 AND "binary" = FALSE
   LIMIT 100;
   ```

4. **Files with Lines Starting with a Space:**

   ```sql
   SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "content" LIKE '%\n %%'
   LIMIT 100;
   ```

5. **Files with Lines Ending with a Blank Character:**

   ```sql
   SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "content" LIKE '% %\n%'
   LIMIT 100;
   ```

6. **Files Containing Any Newline Characters:**

   ```sql
   SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "content" LIKE '%\n%'
   LIMIT 100;
   ```

7. **Distinct Repository Names:**

   ```sql
   SELECT DISTINCT "sample_repo_name"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   LIMIT 100;
   ```

8. **Files with Specific File Extensions (e.g., '.txt'):**

   ```sql
   SELECT "sample_path", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "sample_path" LIKE '%.txt'
   LIMIT 100;
   ```

9. **Files with Content Matching a Specific Pattern (e.g., TODO comments):**

   ```sql
   SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "content" ILIKE '%TODO%'
   LIMIT 100;
   ```

10. **Join Files with Repositories to Get Repository Names:**

    ```sql
    SELECT c."id", c."content", c."sample_repo_name", f."repo_name"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
    JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f ON c."id" = f."id"
    WHERE c."binary" = FALSE
    LIMIT 100;
    ```

11. **Files Without Lines Starting with a Space (Potential 'Other' Category):**

    ```sql
    SELECT "id", "content"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
    WHERE "binary" = FALSE
      AND "content" NOT LIKE '%\n %%'
      AND "content" NOT LIKE '% %\n%'
    LIMIT 100;
    ```

12. **Count Total Number of Non-Binary Files:**

    ```sql
    SELECT COUNT(*) AS "Total_Non_Binary_Files"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
    WHERE "binary" = FALSE;
    ```

13. **Sample of File Sizes:**

    ```sql
    SELECT DISTINCT "size"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
    ORDER BY "size" DESC
    LIMIT 100;
    ```

14. **Files from a Specific Repository:**

    ```sql
    SELECT "id", "content"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
    WHERE "binary" = FALSE AND "sample_repo_name" = 'specific_repo_name'
    LIMIT 100;
    ```

15. **Files with High Copy Counts:**

    ```sql
    SELECT "id", "content", "copies"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
    WHERE "binary" = FALSE AND "copies" > 1
    LIMIT 100;
    ```

These queries explore the relevant columns and conditions in the `SAMPLE_CONTENTS` and `SAMPLE_FILES` tables to understand the file contents and properties. They cover various aspects, such as filtering non-binary files, pattern matching in contents, joining tables, and retrieving distinct values.Query:
SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE
   LIMIT 100;
Answer:
Too long, hard cut:
id,content
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
Query:
SELECT DISTINCT "sample_path"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   LIMIT 100;
Answer:
sample_path
src/main/java/io/mycat/manager/response/ShowSQLSumUser.java
tapestry-core/src/test/java/org/apache/tapestry5/ContentTypeTest.java
vio/vio.c
Modules/BetterCms.Module.Root/Commands/Tag/SaveTag/SaveTagCommand.cs
lib/entities/plants/peatbog.dart
src/filesystem/ZWorkerPool.h
core/lib/dr_config.h
ME3Explorer/Resources/property_database_64x64.png
module/plugins/crypter/UploadableChFolder.py
content/browser/indexed_db/indexed_db_quota_client.cc
core/sis-referencing/src/main/java/org/apache/sis/referencing/datum/DefaultPrimeMeridian.java
streamingUpdate/seq1.c
grammars/unosln.cson
plugins/BackendTheme/src/Template/Element/settings.ctp
FAQ-USER
commonjs/google-map/map.js
tapestry-core/src/test/java/org/apache/tapestry5/internal/services/RequestPathOptimizerImplTest.java
rtmpdump.c
assets/variants/light/buttons/button_reverse.png
icons/file_type_source@3x.png
src/administrator/components/com_kunena/controllers/plugins.php
server/templates/emailTemplate.handlebars
WARZONE_ASSETS/sound/chars/RAB-24/misc/taunt.mp3
WARZONE_ASSETS/sound/jkg/jetpack/jetlp_BACKUP.wav
WARZONE_ASSETS/textures/bespin/u_carb02.jpg
css/load1.css
Code/Cleavir/Environment/cleavir-environment.asd
jframe/jframe-core/src/main/java/jframe/core/plugin/DefPluginContext.java
documentation/docs/index.rst
images/right.xbm
include/neolib/singleton.hpp
src/main/omr/script/doc-files/script.uxf
libyaul/scu/bus/cpu/smpc/smpc_peripheral_mouse_port.c
rinoh/document.py
wp-content/plugins/kirki/assets/scss/controls/typography.scss
tests/Iam/IamTest.php
web/files/css/desktop/windows/inv_search_window.css
client/components/characters/charactersAdd.html
src/maidsafe/routing/async_queue.h
module/EcampCore/src/EcampCore/Fieldset/User/UserCreateFieldset.php
src/kundera-hbase/kundera-hbase/src/test/java/com/impetus/client/hbase/query/LikeComparatorFactoryTest.java
doc/manual/R-exts.texi
src/local_biology/abstract_local_biology_module.cc
config/initializers/session_store.rb
src/main/java/com/github/lindenb/jvarkit/util/tabix/AbstractTabixObjectReader.java
recipes/default/assets/estilo-footer.scss
src/Java/BouncyCastle/BouncyCastle-1.54/bcprov-jdk15on-154/javadoc/org/bouncycastle/crypto/StreamCipher.html
TraktKitMac/Info.plist
third-party/org.carrot2.api/javadoc/org/carrot2/text/preprocessing/CaseNormalizerDescriptor.Keys.html
build.xml
sample/test-elements/callbacks.html
trunk/Documentation/KamanjaAPIDocs/com/ligadata/kamanja/metadata/ModelDef.html
build/changelog/entries/2015/10/10337.enhancement
src/main/java/cn/zhaosg/supports/DBUtil.java
versions.json
_protected/framework/Registry/Registry.class.php
osgi/bundles_test/regression_tests/component_test/test_target_bundles/component-api_test/bundle.manifest
src/gui/elems/ge_column.h
sketches/theme/gpgpu/gpgpu-swap-renderer/shaders/pass.frag
src/interface/tembo.render.js
corehq/ex-submodules/pillow_retry/south_migrations/006_add_doc_meta.py
src/Hystrix.Test/HystrixCommandTestImplementations/KnownFailureTestCommandWithFallbackFailure.cs
assets/css/sass/admin/_posts.scss
src/main/java/net/blay09/mods/cookingforblockheads/CookingConfig.java
WARZONE_ASSETS/sound/tts/dimitrissad22k/A280 Clone Blaster.mp3
application/sis-console/pom.xml
chromeos/network/network_configuration_handler.cc
testsuite/tests/typing-misc/pr7228.ml
Source/RobertIagar.Podcasts/RobertIagar.Podcasts.Tests/Package.appxmanifest
PythonScript/src/NotSupportedException.h
data/items/2013/06/02/18-19.csv
resources/netsynthResources/netlists_3in1out/0xBC/netlist.txt
iiab/templates/macros/_ask_user_to_update_ie.html
gov.nasa.ensemble.core.jscience/src/gov/nasa/ensemble/core/jscience/Activator.java
data/items/2009/01/18/11-12.csv
src/tool/hpcrun/sample-sources/pthread-blame.c
composer.json
toolchain/arm_cm0/share/doc/gcc-arm-none-eabi/html/gdb/MIPS-Breakpoint-Kinds.html
registry/windows2012Users.py
cs/browser/chrome/AB-CD/locale/browser/feeds/subscribe.properties
src/main/resources/assets/substratum/textures/items/dustSmallElectrum.png
keystone/tests/unit/identity/backends/test_ldap_common.py
MathEagleTests/ComplexTests.swift
lib/gwtphp/RemoteServiceServlet.class.php
ModelFit/shaders/cdepth_skinned_lbs.vert
json4s/src/main/ls/0.6.5.json
java/engine/org/apache/derby/iapi/store/access/BinaryOrderable.java
src/program/lwaftr/doc/benchmarks-v1.0/transient-self-test-gbps.png
config/services/pmwebapis.xml
browser/kango-1.7.6/samples/InternationalizationDemo/src/common/extension_info.json
src/TKXSDRAW/PACKAGES
aikau/src/main/resources/alfresco/services/i18n/ContentService_ja.properties
aclImdb/train/pos/8062_8.txt
net/instaweb/genfiles/rewriter/client_domain_rewriter_dbg.js
src/java/nxt/http/GetDGSGood.java
lib/Alchemy/Phrasea/Utilities/CrossDomainParser.php
brjs-runner/src/test/resources/CommandControllerTest/command-tests/conf/test-runner.conf
artworks/a/016/a01627-69757.json
doc/tutorials/examples/jython/swing/gui.py
src/_Code.sass
Query:
SELECT "id", "size"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "size" > 1000 AND "binary" = FALSE
   LIMIT 100;
Answer:
id,size
2dd586a19b594a73e9c6f7485d1e5da9203a4467,21447
7acfd43a7914620c9fef2196f9cac65d0f542d53,41645
9eb0c3299f21b4d86029ebbbf0b6ad8c0945b35d,3144
816b2d7412b432d86a4a36147255ec664f760193,3974
ca151cab87aa4ba9286dd5b3557fd75bb902c442,3025
21cab621a82b9e390ee6cfe409704954c4d90f4f,5244
026e9467f313c7776b144881ba161103119aa0a9,1506
f50a76cff9f42438026c7cf8bba687bcd2d491ea,7866
9281ba3801cf1a02af6ea13bebdc19a41d48b463,1444
89b92f14f4b3832108de19ca964f73a1e5ab0133,3031
de1cba95dbe087f858735dc17e86f1a7f5d71af8,7261
6b3e05813c8df6e5fd24b2bb2abc0f765153cf76,10163
003fd53850a89b787395007d69e0fb6f189f922c,1221
7bc2fbeb883e739d41d2bc18bcd2f76bac62405f,2873
b7cde36092689db6dada97894e63992f577dc610,6438
efc4a4e7a2a4697d74b1f5a3696800a7289963f5,17470
0052de438fe69bac42ec3caf472988bcfea7641b,7032
630abd5ef1c4a032c64b076ef06e92dc30262880,4044
35ebf1c9779099f07d0906955485d6f15608504b,13138
4a6e3ef763ac4c820ac268053084dcf2d9a5c20f,6556
e4c56a64472e33c2ceff4248a70897e2364df3e4,1062
53d41edc180367174c94ecfc3ec615dca283472e,1143
02c9781faebbba633113adee71cb90230f6203d4,37888
b39fb02fd35e99a9b9d7604b5a51bad331239d9f,26456
bd8ba51bb577cd64bbc2a2df43dd74bc78aadf1a,32982
73e022d17f9556754e9506bce20b79b9376ab059,1750
ef9b8a5ff4f0f32508c7ae873fb3326a9d656bb8,1168
e1813d75df3e183766f07b062776b3897a2523a7,2872
801612d3e022bef0512f1322806589e8824e34c9,63169
5acbb02c0bd644561fecce1ba9b5ed3431c2c400,1474
3dc7fe5332570c343998825d3e94475d4edcabf7,3444
e2521c113a74bb8250434b6efce725e1134a7003,6796
7122ce62f2d1bee4878c0593c244de80247fe88b,6444
6ef0115e036a78b7186aebf5aa390d15caeb78cd,47646
04aa747e26f22b5e6e5e33cd117d4a7adfba57f0,2427
761eaa5a1d29eee52ed9bb752756c453c8f24a2c,4665
2272ea8b5b1cbdc7b2578c6d0a8c5416c200dd57,21758
6db6b8f13a912023f4c8c889b75e7366cca6d221,12758
b2904db52dd0dce293619fc10106854823533867,5143
1cd9db02e03f907dd998722ec7c9674b6532250c,6429
98001653566ed4abf3b6980b59a53152fa8e6a24,2377
a2b13a6525699664774a1f68bdd9f271cd59198d,96596
2f678fd6a81b8653c17eaa1a5891d8ba2845b0bc,2189
f2871049dc62e26b4421e657389724706572bb26,1928
317c67b246df6fcb29d2e660159a291c4d9e1471,8402
8f7129cd125e0baf7b66a23c0548ca6c608fbacf,4471
e919d808a0495863c59c27e74e3bef40afcfcf58,3459
cf118b09856ceda177b1ff62d8662f9bc52c0cb3,42275
612de1db5cc35a0d852e260a543e686d42dfed62,1149
d2140a96a46b5196e5368ebe555bde477cf95a0d,26277
54a85e112740e947c4b982d69aea64bd360e0297,2259
75c71cd4201fa47a234b7dcc2240a415dfa5610d,6445
970816f61ec689e35495f05345d26070b95450dc,1221
320dbc0d9d8a3f40c867a51bde847fc89be76f08,1445
a266b7b1edded4066a8541baa090ac49b5ab1a50,1128
ad37595cee87b33e089abe682bc38afafb038eb7,5069
dc50bbe6a5c76a22b6532722b31f50d2e058de67,3733
1784564068511de9c6d0a8ed7946836636ae6817,7459
70cf22b949b32adfc25dd9dff4131bf2e09198dd,26147
0e1068c119973343a4230816dc1992e6b33bc318,18928
92445a58f9282b454355a57706ff39a78e8dd468,20343
11b7430362f8ba83fe471bf6a641c9c9ac8725bc,36273
41347cdcf00b2fa6a5020d967b0f3d5dd2f29c53,1220
747f288e08d93ea8bea587f77121cb822f047791,5695
97af8908bb7689c60f48beff6ec538b0a3927622,1155
95e160899c088cab1e41c90b8af1eb3b3adfa718,1919
5c16fe4787609ce827ac4115819b4ca6623d94ad,4846
67c4aed4740fc59050486d5a2a43643b129e6c4b,1705
dc0f68d612e07adee3485ed0a1d0e25d46b71424,6006
6d83eaae13a37486983bb9f66e0c7d6525270cd2,16811
370876ccf108f9d57baa192b0521b2ae4ec0cc22,1842
37362386720d22e764e4ba6bdc6f1a1cef4ceb30,32132
8da190f9fdb2ae37f87460d5b0c8ef509a80d780,2040
f033396114d42dd811127fcc7af5b45c02c735c9,1016
0a233245dde4f07ff2cb460e0e6e3e20693fd4d8,4122
de24b2fb4ad8d3c82df4b1603d71d689f643575e,10985
80a86652986ea12c53c8f58544f970ed0f993d44,18626
d51b663390da2987e63eebc3b65e1f4b0e824a93,2180
22a8998b43837661b60129698523f019abbf32c6,7864
a77682159a60b49d83af8ffb4931a9f44e879b28,28939
1879b8adfb067708f36ed5e57838f0504364e11f,1620
3045648dd2c1a3241a3525ec91b9534a2c7feb35,567260
335c56d61e119ed0244e3924ca2245f4082bc100,1486
56635e3a614ee1030b24c5b0ee758359f2cdebb5,5243
3ea1a6436cdaca6387f6d679e341821f4ff26423,22048
14c13b5e27db785e012d596e71562159019dc9ec,1073
1549d1c730d48405e2a36df4a35c21c86e259581,2644
2a04c806af4ef022883c728be85dcc9e1f59e501,3127
438832ce22e2613685a7b8429e3c4c8ab764a756,3415
1557ba292caf79f74aecb20c1c05e6f689c24f04,4331
61f44fb9ab5bed84f3c1f4a24b1e1dbeacc68b9d,9337
63c8244b198808f3add3a32a31d6d349e3396443,3106
622c141609ba994a79edca9d60dded82eb86b03c,12457
4eabf5a28e4e1d009bcedd6b15a5ff72f93a4081,1445
49b0ef8151d9c75c7f67e06c57693855752e31dc,1729
b74f0606423b8b60234a85288ed02b3484297f0c,1097
b9da673a68d204359d40e36f2b774dbd7ce3e92f,189611
1a4b9ec9f82126b3fa4073cb49e32a51a5b3cea5,6523
fce2b9152de1e56974a5c3ae3b4139b283c4dc7a,17043
b6d5fa0273fc8a3dcef84ce7705b12983b3640f4,1780
Query:
SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "content" LIKE '%\n %%'
   LIMIT 100;
Answer:
Too long, hard cut:
id,content
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
Query:
SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "content" LIKE '% %\n%'
   LIMIT 100;
Answer:
Too long, hard cut:
id,content
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
Query:
SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "content" LIKE '%\n%'
   LIMIT 100;
Answer:
Too long, hard cut:
id,content
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
Query:
SELECT DISTINCT "sample_repo_name"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   LIMIT 100;
Answer:
sample_repo_name
nigelsmall/py2neo
Esteemed-Innovation/Flaxbeards-Steam-Power
sonata-project/sandbox-build
koala-framework/koala-framework
ligaDATA/Kamanja
hiloteam/Hilo
oivva/boxy
ChildrenOfUr/coUclient
timduru/tf300t-katkernel
ChildrenOfUr/coUserver
draios/sysdig
DynamoRIO/drk
google/ktsan
apache/tomcat-native
erasaur/binary
jdahlstrom/vaadin.react
pfirmstone/river-internet
Igalia/snabb
VadimShvetsov/Yii2_GB_HW
MoonchildProductions/pale-moon-localization
aceway/findX
grap/odoo-addons-misc
ME3Explorer/ME3Explorer
ra0o0f/arangoclient.net
Lambda-X/cljs-repl-web
meteor/react-packages
getlantern/lantern
sant0ro/Yupi
apache/sis
dadoonet/spring-elasticsearch
oferei/sublime-unity-completions
versaloon/versaloon
Elders/Hystrix.NET
poise/application_ruby
GiGurra/leavu3
pegasus-isi/pegasus
settinghead/meteor-auto-nprogress
lindenb/jvarkit
SekoiaLab/Fastir_Collector
GoogleCloudPlatform/gcloud-php
DeepPhe/DeepPhe
TheTechnobear/EigenD
bosonic/bosonic
alohaeditor/Aloha-Editor
Kunena/Kunena-Forum
ecamp/ecamp3
apache/commons-collections
apache/qpid-java
oakes/Nightmod
reu/chip8.js
openstack/keystone
guangzhuwu/p2engine
psathyrella/partis
udevbe/westmalle
alixaxel/dump.HN
osmcode/osmium-tool
PGWelch/com.opendoorlogistics
codeka/wwmmo
zurmo/Zurmo
bretth18/healthLab
izumin5210/Sunazuri
aravindsagar/SmartLockScreen
Ulauncher/Ulauncher
ferventdesert/Hawk
govbr/barra.govbr
openstack/monasca-agent
opengovfoundation/madison
codykrieger/gfxCardStatus
hydralabs/pyamf
scottjehl/eCSSential
RPCS3/rpcs3
geosolutions-it/MapStore2
Warzone2100/warzone2100
KDE/kdevelop
seqan/seqan
arcusys/Valamis
golismero/golismero
OpenFOAM/OpenFOAM-dev
migueldeicaza/MonoTouch.Dialog
spacex/kernel-centos7
DF1E/SimpleExplorer
karawin/ESP8266-WebRadio
meebey/smuxi
rapidminer/rapidminer-5
eranif/codelite
BentThomsen/SmartCampusAAU
NUinfolab/context
BurstProject/burstcoin
BladeRunnerJS/brjs
coreboot/coreboot
MerlijnWajer/Simba
hrydgard/ppsspp
hlzz/dotfiles
raboof/notion
lvchaqiu/meizu-mx-kernel
openstack/compass-adapters
lronaldo/cpctelera
forcedotcom/dataloader
droolsjbpm/kie-wb-distributions
mplushnikov/lombok-intellij-plugin
Query:
SELECT "sample_path", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "sample_path" LIKE '%.txt'
   LIMIT 100;
Answer:
Too long, hard cut:
sample_path,content
socketcan_interface/CMakeLists.txt,"cmake_minimum_required(VERSION 2.8.3)
project(socketcan_interface)

find_package(catkin REQUIRED
  COMPONENTS
    class_loader
)

find_package(Boost REQUIRED
  COMPONENTS
    chrono
    system
    thread
)

catkin_package(
  INCLUDE_DIRS
    include
  LIBRARIES
    socketcan_interface_string
  CATKIN_DEPENDS
  DEPENDS
    Boost
)

include_directories(
  include
  ${Boost_INCLUDE_DIRS}
  ${catkin_INCLUDE_DIRS}
)

# socketcan_interface_string
add_library(socketcan_interface_string
    src/string.cpp
)

# socketcan_dump
add_executable(socketcan_dump
  src/candump.cpp
)
target_link_libraries(socketcan_dump
   socketcan_interface_string
   ${catkin_LIBRARIES}
   ${Boost_LIBRARIES}
)

# socketcan_interface_plugin
add_library(socketcan_interface_plugin
  src/socketcan_interface_plugin.cpp
)
target_link_libraries(socketcan_interface_plugin
  ${catkin_LIBRARIES}
  ${Boost_LIBRARIES}
)

install(
  TARGETS
    socketcan_dump
    socketcan_interface_plugin
    socketcan_interface_string
  ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
  RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

install(
  DIRECTORY
    include/${PROJECT_NAME}/
  DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
  FILES_MATCHING PATTERN ""*.h""
)

install(
  FILES
    socketcan_interface_plugin.xml
  DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
)
if(CATKIN_ENABLE_TESTING)

  catkin_add_gtest(${PROJECT_NAME}-test_dummy_interface
    test/test_dummy_interface.cpp
  )
  target_link_libraries(${PROJECT_NAME}-test_dummy_interface
    socketcan_interface_string
    ${catkin_LIBRARIES}
  )
endif()
"
top_down_classifier/data/gender/fold2005/val.txt,"# Category: gender, Random seed: 2005 - Active sequences: [1] - Shuffle samples inter-person: True - Subsampling: 5 - Balance samples: True
# No. individuals: 69 - No. samples total: 556 - Num positive class samples: 278 - Num negative class samples: 278
/home/linder/Datasets/srl_dataset_clouds/person_710/person_710_1_1_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_907/person_907_1_6_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_091/person_091_1_6_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_104/person_104_1_6_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_921/person_921_1_9_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_911/person_911_1_7_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_115/person_115_1_1_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_073/person_073_1_1_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_104/person_104_1_5_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_053/person_053_1_3_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_024/person_024_1_2_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_061/person_061_1_6_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_914/person_914_1_6_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_034/person_034_1_6_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_058/person_058_1_6_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_059/person_059_1_5_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_078/person_078_1_5_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_003/person_003_1_4_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_029/person_029_1_7_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_068/person_068_1_2_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_008/person_008_1_3_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_029/person_029_1_3_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_044/person_044_1_3_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_076/person_076_1_4_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_103/person_103_1_3_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_022/person_022_1_7_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_103/person_103_1_2_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_041/person_041_1_8_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_029/person_029_1_5_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_010/person_010_1_6_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_029/person_029_1_4_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_013/person_013_1_6_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_060/person_060_1_4_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_047/person_047_1_1_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_039/person_039_1_5_cloud.pcd 1
/home/linder/Datasets/srl_dataset_clouds/person_055/person_055_1_3_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_114/person_114_1_1_cloud.pcd 0
/home/linder/Datasets/srl_dataset_clouds/person_039/person_039
Query:
SELECT "id", "content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
   WHERE "binary" = FALSE AND "content" ILIKE '%TODO%'
   LIMIT 100;
Answer:
Too long, hard cut:
id,content
d67a9630786f8fc28d21f7991797537768df96cf,"// Copyright 2012 Cloudera Inc.
//
// Licensed under the Apache License, Version 2.0 (the ""License"");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an ""AS IS"" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace cpp impala
namespace java com.cloudera.impala.thrift

include ""CatalogObjects.thrift""
include ""JniCatalog.thrift""
include ""Types.thrift""
include ""Status.thrift""
include ""Results.thrift""

// CatalogServer service API and related structs.

enum CatalogServiceVersion {
  V1
}

// Common header included in all CatalogService requests.
// TODO: The CatalogServiceVersion/protocol version should be part of the header.
// This would require changes in BDR and break their compatibility story. We should
// coordinate a joint change somewhere down the line.
struct TCatalogServiceRequestHeader {
  // The effective user who submitted this request.
  1: optional string requesting_user
}

// Returns details on the result of an operation that updates the catalog. Information
// returned includes the Status of the operations, the catalog version that will contain
// the update, and the catalog service ID.
struct TCatalogUpdateResult {
  // The CatalogService service ID this result came from.
  1: required Types.TUniqueId catalog_service_id

  // The Catalog version that will contain this update.
  2: required i64 version

  // The status of the operation, OK if the operation was successful.
  3: required Status.TStatus status

  // The resulting TCatalogObjects that were added or modified, if applicable.
  4: optional list<CatalogObjects.TCatalogObject> updated_catalog_objects

  // The resulting TCatalogObjects that were removed, if applicable.
  5: optional list<CatalogObjects.TCatalogObject> removed_catalog_objects
}

// Request for executing a DDL operation (CREATE, ALTER, DROP).
struct TDdlExecRequest {
  1: required CatalogServiceVersion protocol_version = CatalogServiceVersion.V1

  // Common header included in all CatalogService requests.
  17: optional TCatalogServiceRequestHeader header

  2: required JniCatalog.TDdlType ddl_type

  // Parameters for ALTER TABLE
  3: optional JniCatalog.TAlterTableParams alter_table_params

  // Parameters for ALTER VIEW
  4: optional JniCatalog.TCreateOrAlterViewParams alter_view_params

  // Parameters for CREATE DATABASE
  5: optional JniCatalog.TCreateDbParams create_db_params

  // Parameters for CREATE TABLE
  6: optional JniCatalog.TCreateTableParams create_table_params

  // Parameters for CREATE TABLE LIKE
  7: optional JniCatalog.TCreateTableLikeParams create_table_like_params

  // Parameters for CREATE VIEW
  8: optional JniCatalog.TCreateOrAlterViewParams create_view_params

  // Parameters for CREATE FUNCTION
  9: optional JniCatalog.TCreateFunctionParams create_fn_params

  // Parameters for DROP DATABASE
  10: optional JniCatalog.TDropDbParams drop_db_params

  // Parameters for DROP TABLE/VIEW
  11: optional JniCatalog.TDropTableOrViewParams drop_table_or_view_params

  // Parameters for TRUNCATE TABLE
  21: optional JniCatalog.TTruncateParams truncate_params

  // Parameters for DROP FUNCTION
  12: optional JniCatalog.TDropFunctionParams drop_fn_params

  // Parameters for COMPUTE STATS
  13: optional JniCatalog.TComputeStatsParams compute_stats_params

  // Parameters for CREATE DATA SOURCE
  14: optional JniCatalog.TCreateDataSourceParams create_data_source_params

  // Parameters for DROP DATA SOURCE
  15: optional JniCatalog.TDropDataSourceParams drop_data_source_params

  // Parameters for DROP STATS
  16: optional JniCatalog.TDropStatsParams drop_stats_params

  // Parameters for CREATE/DROP ROLE
  18: optional JniCatalog.TCreateDropRoleParams create_drop_role_params

  // Parameters for GRANT/REVOKE ROLE
  19: optional JniCatalog.TGrantRevokeRoleParams grant_revoke_role_params

  // Parameters for GRANT/REVOKE privilege
  20: optional JniCatalog.TGrantRevokePrivParams grant_revoke_priv_params
}

// Response from executing a TDdlExecRequest
struct TDdlExecResponse {
  1: required TCatalogUpdateResult result

  // Set only for CREATE TABLE AS SELECT statements. Will be true iff the statement
  // resulted in a new table being created in the Metastore. This is used to
  // determine if a CREATE TABLE IF NOT EXISTS AS SELECT ... actually creates a new
  // table or whether creation was skipped because the table already existed, in which
  // case this flag would be false
  2: optional bool new_table_created;

  // Result of DDL operation to be returned to the client. Currently only set
  // by COMPUTE STATS.

Query:
SELECT c."id", c."content", c."sample_repo_name", f."repo_name"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
    JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f ON c."id" = f."id"
    WHERE c."binary" = FALSE
    LIMIT 100;
Answer:
Too long, hard cut:
id,content,sample_repo_name,repo_name
f57338afd71f47681a3436ee769d6fb02cd14b06,"/*******************************************************************************

  Intel(R) Gigabit Ethernet Linux driver
  Copyright(c) 2007-2012 Intel Corporation.

  This program is free software; you can redistribute it and/or modify it
  under the terms and conditions of the GNU General Public License,
  version 2, as published by the Free Software Foundation.

  This program is distributed in the hope it will be useful, but WITHOUT
  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
  more details.

  You should have received a copy of the GNU General Public License along with
  this program; if not, write to the Free Software Foundation, Inc.,
  51 Franklin St - Fifth Floor, Boston, MA 02110-1301 USA.

  The full GNU General Public License is included in this distribution in
  the file called ""COPYING"".

  Contact Information:
  e1000-devel Mailing List <e1000-devel@lists.sourceforge.net>
  Intel Corporation, 5200 N.E. Elam Young Parkway, Hillsboro, OR 97124-6497

*******************************************************************************/

#include <linux/if_ether.h>
#include <linux/delay.h>
#include <linux/pci.h>
#include <linux/netdevice.h>
#include <linux/etherdevice.h>

#include ""e1000_mac.h""

#include ""igb.h""

static s32 igb_set_default_fc(struct e1000_hw *hw);
static s32 igb_set_fc_watermarks(struct e1000_hw *hw);

/**
 *  igb_get_bus_info_pcie - Get PCIe bus information
 *  @hw: pointer to the HW structure
 *
 *  Determines and stores the system bus information for a particular
 *  network interface.  The following bus information is determined and stored:
 *  bus speed, bus width, type (PCIe), and PCIe function.
 **/
s32 igb_get_bus_info_pcie(struct e1000_hw *hw)
{
	struct e1000_bus_info *bus = &hw->bus;
	s32 ret_val;
	u32 reg;
	u16 pcie_link_status;

	bus->type = e1000_bus_type_pci_express;

	ret_val = igb_read_pcie_cap_reg(hw,
					PCI_EXP_LNKSTA,
					&pcie_link_status);
	if (ret_val) {
		bus->width = e1000_bus_width_unknown;
		bus->speed = e1000_bus_speed_unknown;
	} else {
		switch (pcie_link_status & PCI_EXP_LNKSTA_CLS) {
		case PCI_EXP_LNKSTA_CLS_2_5GB:
			bus->speed = e1000_bus_speed_2500;
			break;
		case PCI_EXP_LNKSTA_CLS_5_0GB:
			bus->speed = e1000_bus_speed_5000;
			break;
		default:
			bus->speed = e1000_bus_speed_unknown;
			break;
		}

		bus->width = (enum e1000_bus_width)((pcie_link_status &
						     PCI_EXP_LNKSTA_NLW) >>
						     PCI_EXP_LNKSTA_NLW_SHIFT);
	}

	reg = rd32(E1000_STATUS);
	bus->func = (reg & E1000_STATUS_FUNC_MASK) >> E1000_STATUS_FUNC_SHIFT;

	return 0;
}

/**
 *  igb_clear_vfta - Clear VLAN filter table
 *  @hw: pointer to the HW structure
 *
 *  Clears the register array which contains the VLAN filter table by
 *  setting all the values to 0.
 **/
void igb_clear_vfta(struct e1000_hw *hw)
{
	u32 offset;

	for (offset = 0; offset < E1000_VLAN_FILTER_TBL_SIZE; offset++) {
		array_wr32(E1000_VFTA, offset, 0);
		wrfl();
	}
}

/**
 *  igb_write_vfta - Write value to VLAN filter table
 *  @hw: pointer to the HW structure
 *  @offset: register offset in VLAN filter table
 *  @value: register value written to VLAN filter table
 *
 *  Writes value at the given offset in the register array which stores
 *  the VLAN filter table.
 **/
static void igb_write_vfta(struct e1000_hw *hw, u32 offset, u32 value)
{
	array_wr32(E1000_VFTA, offset, value);
	wrfl();
}

/* Due to a hw errata, if the host tries to  configure the VFTA register
 * while performing queries from the BMC or DMA, then the VFTA in some
 * cases won't be written.
 */

/**
 *  igb_clear_vfta_i350 - Clear VLAN filter table
 *  @hw: pointer to the HW structure
 *
 *  Clears the register array which contains the VLAN filter table by
 *  setting all the values to 0.
 **/
void igb_clear_vfta_i350(struct e1000_hw *hw)
{
	u32 offset;
	int i;

	for (offset = 0; offset < E1000_VLAN_FILTER_TBL_SIZE; offset++) {
		for (i = 0; i < 10; i++)
			array_wr32(E1000_VFTA, offset, 0);

		wrfl();
	}
}

/**
 *  igb_write_vfta_i350 - Write value to VLAN filter table
 *  @hw: pointer to the HW structure
 *  @offset: register offset in VLAN filter table
 *  @value: register value written to VLAN filter table
 *
 *  Writes value at the given offset in the register array which stores
 *  the VLAN filter table.
 **/
static void igb_write_vfta_i350(struct e1000_hw *hw, u32 offset, u32 value)
{
	int i;

	for (i = 0; i < 10; i++)
		array_wr32(E1000_VFTA, offset, value);

	wrfl();
}

/**
 *  igb_init_rx_addrs - Initialize receive address's
 *  @hw: pointer to the HW structure
 *  @rar_count: receive address registers
 *
 *  Setups the receive address registers by setting the base receive address
 *  register to the devices MAC address and clearing all the other receive
 *  address registers to 0.
 **/
void igb_init_rx_addrs(struct e1000_hw *hw, u16 
Query:
SELECT "id", "content"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
    WHERE "binary" = FALSE
      AND "content" NOT LIKE '%\n %%'
      AND "content" NOT LIKE '% %\n%'
    LIMIT 100;
Answer:
Too long, hard cut:
id,content
750e6a424e8cfb7f62716e8841136b0b51736454,"head_h1,*off
head_eyes_h1,*off
head_eyelids_h1,*off

head_h2,*off
head_eyes_h2,*off

head_h3,*off
head_eyes_h3,*off

head_h4,*off
head_eyes_h4,*off
head_eyelids_h4,*off
head_bangs_h4,*off

head_twilek,*off
head_eyes_t,*off
head_eyelids_t,*off

head_quara,*off
head_eyes_q,*off

head_quarren,models/players/STKotorJedi/Qhead1.tga

head_zabrak,*off
head_eyes_z,*off
head_eyelids_z,*off

head_pada,*off
head_eyelids_p,*off
head_eyes_p,*off
head_ponytail_p,*off
head_braid_p,*off

l_hand,*off
l_hand_b,models/players/STKotorJedi/Qhands1.jpg

r_hand,*off
r_hand_b,models/players/STKotorJedi/Qhands1.jpg

mouth_h1,*off
tongue_h1,*off
teeth_h1,*off

mouth_h2,*off
tongue_h2,*off
teeth_h2,*off

mouth_h3,*off
tongue_h3,*off
teeth_h3,*off

mouth_h4,*off
tongue_h4,*off
teeth_h4,*off


"
65050e3e60616b2d689ae02fa7045244aea61ed0,".*
logs/*
redis.sock
"
f2b0d70eaa0a3fec71e4d593b4c020cf227ddc8d,"{""unit_type"": ""ESCALATOR"", ""performance_summary"": {""one_day"": {""break_days"": [], ""day_to_break_count"": {}, ""num_breaks"": 0, ""start_time"": ""2015-02-16T04:53:07.233000+00:00"", ""unit_id"": ""D08N01ESCALATOR"", ""broken_time_percentage"": 0.0, ""end_time"": ""2015-02-17T04:53:07.233000+00:00"", ""num_inspections"": 0, ""availability"": 1.0}, ""three_day"": {""break_days"": [], ""day_to_break_count"": {}, ""num_breaks"": 0, ""start_time"": ""2015-02-14T04:53:07.233000+00:00"", ""unit_id"": ""D08N01ESCALATOR"", ""broken_time_percentage"": 0.0, ""end_time"": ""2015-02-17T04:53:07.233000+00:00"", ""num_inspections"": 0, ""availability"": 1.0}, ""thirty_day"": {""break_days"": [], ""day_to_break_count"": {}, ""num_breaks"": 0, ""start_time"": ""2015-01-18T04:53:07.233000+00:00"", ""unit_id"": ""D08N01ESCALATOR"", ""broken_time_percentage"": 0.0, ""end_time"": ""2015-02-17T04:53:07.233000+00:00"", ""num_inspections"": 0, ""availability"": 1.0}, ""all_time"": {""break_days"": [""2013-06-02"", ""2013-06-14"", ""2013-06-15"", ""2013-06-16"", ""2013-06-18"", ""2013-06-19"", ""2013-06-26"", ""2013-06-30"", ""2013-07-04"", ""2013-07-05"", ""2013-07-07"", ""2013-07-12"", ""2013-07-19"", ""2013-07-20"", ""2013-07-23"", ""2013-07-24"", ""2013-08-02"", ""2013-08-06"", ""2013-08-11"", ""2013-08-14"", ""2013-08-20"", ""2013-08-22"", ""2013-08-23"", ""2013-09-04"", ""2013-09-05"", ""2013-09-06"", ""2013-09-07"", ""2013-09-10"", ""2013-09-12"", ""2013-09-14"", ""2013-09-15"", ""2013-09-16"", ""2013-09-18"", ""2013-09-21"", ""2013-09-22"", ""2013-09-23"", ""2013-09-25"", ""2013-09-26"", ""2013-09-27"", ""2013-09-28"", ""2013-09-29"", ""2013-09-30"", ""2013-10-03"", ""2013-10-04"", ""2013-10-08"", ""2013-10-12"", ""2013-10-14"", ""2013-10-15"", ""2013-10-16"", ""2013-10-25"", ""2013-10-26"", ""2013-10-29"", ""2013-10-30"", ""2013-11-01"", ""2013-11-04"", ""2013-11-11"", ""2013-11-12"", ""2013-11-13"", ""2013-11-15"", ""2013-11-21"", ""2013-11-24"", ""2013-11-28"", ""2013-11-29"", ""2013-11-30"", ""2013-12-01"", ""2013-12-06"", ""2013-12-11"", ""2013-12-13"", ""2013-12-14"", ""2013-12-16"", ""2013-12-17"", ""2013-12-20"", ""2013-12-27"", ""2014-01-03"", ""2014-01-09"", ""2014-01-13"", ""2014-01-14"", ""2014-01-15"", ""2014-01-16"", ""2014-01-17"", ""2014-01-18"", ""2014-01-19"", ""2014-01-21"", ""2014-01-24"", ""2014-02-01"", ""2014-02-03"", ""2014-02-04"", ""2014-02-05"", ""2014-02-07"", ""2014-02-08"", ""2014-02-13"", ""2014-02-14"", ""2014-02-21"", ""2014-03-03"", ""2014-03-12"", ""2014-03-16"", ""2014-03-21"", ""2014-03-25"", ""2014-03-26"", ""2014-04-01"", ""2014-04-02"", ""2014-04-03"", ""2014-04-09"", ""2014-04-10"", ""2014-04-11"", ""2014-04-18"", ""2014-04-19"", ""2014-04-20"", ""2014-04-21"", ""2014-04-22"", ""2014-05-04"", ""2014-05-05"", ""2014-05-13"", ""2014-05-14"", ""2014-05-21"", ""2014-05-24"", ""2014-05-25"", ""2014-05-29"", ""2014-05-30"", ""2014-06-03"", ""2014-06-04"", ""2014-06-05"", ""2014-06-09"", ""2014-06-10"", ""2014-06-12"", ""2014-06-13"", ""2014-06-14"", ""2014-06-16"", ""2014-06-27"", ""2014-06-28"", ""2014-07-03"", ""2014-07-19"", ""2014-07-21"", ""2014-07-26"", ""2014-07-29"", ""2014-07-30"", ""2014-07-31"", ""2014-08-01"", ""2014-08-02"", ""2014-08-03"", ""2014-08-04"", ""2014-08-05"", ""2014-08-06"", ""2014-08-07"", ""2014-08-08"", ""2014-08-09"", ""2014-08-10"", ""2014-08-11"", ""2014-08-23"", ""2014-09-05"", ""2014-09-06"", ""2014-09-07"", ""2014-09-08"", ""2014-09-09"", ""2014-09-10"", ""2014-09-11"", ""2014-09-12"", ""2014-09-13"", ""2014-09-14"", ""2014-09-15"", ""2014-09-16"", ""2014-09-17"", ""2014-09-18"", ""2014-09-19"", ""2014-09-20"", ""2014-09-21"", ""2014-09-22"", ""2014-09-23"", ""2014-09-24"", ""2014-09-25"", ""2014-09-26"", ""2014-09-27"", ""2014-09-28"", ""2014-09-29"", ""2014-09-30"", ""2014-10-01"", ""2014-10-02"", ""2014-10-03"", ""2014-10-04"", ""2014-10-05"", ""2014-10-06"", ""2014-10-07"", ""2014-10-08"", ""2014-10-09"", ""2014-10-10"", ""2014-10-11"", ""2014-10-17"", ""2014-10-18"", ""2014-10-19"", ""2014-10-20"", ""2014-10-22"", ""2014
Query:
SELECT COUNT(*) AS "Total_Non_Binary_Files"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
    WHERE "binary" = FALSE;
Answer:
Total_Non_Binary_Files
20500
Query:
SELECT DISTINCT "size"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
    ORDER BY "size" DESC
    LIMIT 100;
Answer:
size
65937671
27113519
20848033
15903868
15751892
13041328
12497699
11913763
11587465
9122304
8994860
7387623
5973306
5716028
5477627
5345656
4704256
4633818
4417719
4406180
4330722
4061380
4017972
3954138
3940664
3922814
3833856
3810702
3766234
3735552
3693609
3599200
3384832
3230650
3193068
3166961
3104232
3100568
3024140
2957308
2917196
2873165
2857900
2853888
2839503
2771830
2675679
2620128
2617744
2600081
2576384
2559999
2502144
2426020
2276881
2213814
2206312
2146320
2117954
2107942
2106355
2084971
2018304
1955468
1920173
1901478
1852676
1835721
1791803
1745762
1731076
1690112
1686528
1680501
1614276
1602506
1580657
1507859
1442018
1434722
1425153
1422978
1411082
1388272
1377812
1371053
1366124
1365955
1364658
1298680
1298386
1253762
1253511
1247076
1237136
1200640
1182424
1173591
1165778
1164595
Query:
SELECT "id", "content"
FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
WHERE "binary" = FALSE
LIMIT 100;
Answer:
Too long, hard cut:
id,content
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
Query:
SELECT "id", "content", "copies"
FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS
WHERE "binary" = FALSE
LIMIT 100
Answer:
Too long, hard cut:
id,content,copies
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_lo
End Exploring Related Columns
Task: Please provide a report on the number files from the GitHub repository, categorized by the presence of specific line types. Categorize a file as 'trailing' if any line ends with a blank character, as 'Space' if any line starts with a space, and as 'Other' if it meets neither condition.

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
Category,Number_of_Files
Trailing,num:int
Space,num:int
Other,num:int
```

This report categorizes files from the GitHub repository based on specific line types:

- **Trailing**: Files where any line ends with a blank character.
- **Space**: Files where any line starts with a space.
- **Other**: Files that meet neither of the above conditions.

The **Number_of_Files** column represents the count of files in each category..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'GITHUB_REPOS': {'GITHUB_REPOS': ['LANGUAGES', 'LICENSES', 'SAMPLE_COMMITS', 'SAMPLE_CONTENTS', 'SAMPLE_FILES', 'SAMPLE_REPOS']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-27 01:07:27 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 01:07:27 - root - INFO - ```sql
SELECT
  "Category",
  COUNT(*) AS "Number_of_Files"
FROM (
  SELECT
    CASE
      WHEN REGEXP_LIKE("content", '[ ]$','m') THEN 'Trailing'
      WHEN REGEXP_LIKE("content", '^[ ]','m') THEN 'Space'
      ELSE 'Other'
    END AS "Category"
  FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
  WHERE "binary" = FALSE
) AS "categorized_files"
GROUP BY "Category"
ORDER BY "Category";
```
2025-01-27 01:07:27 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:07:27 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:07:27 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:07:29 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-27 01:07:29 - snowflake.connector.connection - INFO - closed
2025-01-27 01:07:29 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:07:29 - root - INFO - itercount: 1
2025-01-27 01:07:29 - root - INFO - 0
2025-01-27 01:07:29 - root - INFO - results: 
Category,Number_of_Files
Other,20500


2025-01-27 01:07:29 - root - INFO - Please check the answer again by reviewing Please provide a report on the number files from the GitHub repository, categorized by the presence of specific line types. Categorize a file as 'trailing' if any line ends with a blank character, as 'Space' if any line starts with a space, and as 'Other' if it meets neither condition., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
Category,Number_of_Files
Trailing,num:int
Space,num:int
Other,num:int
```

This report categorizes files from the GitHub repository based on specific line types:

- **Trailing**: Files where any line ends with a blank character.
- **Space**: Files where any line starts with a space.
- **Other**: Files that meet neither of the above conditions.

The **Number_of_Files** column represents the count of files in each category. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Category,Number_of_Files
Other,20500
Current sql:
SELECT
  "Category",
  COUNT(*) AS "Number_of_Files"
FROM (
  SELECT
    CASE
      WHEN REGEXP_LIKE("content", '[ ]$','m') THEN 'Trailing'
      WHEN REGEXP_LIKE("content", '^[ ]','m') THEN 'Space'
      ELSE 'Other'
    END AS "Category"
  FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
  WHERE "binary" = FALSE
) AS "categorized_files"
GROUP BY "Category"
ORDER BY "Category";
2025-01-27 01:08:27 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-27 01:08:27 - root - INFO - ```sql
SELECT
  "Category",
  COUNT(*) AS "Number_of_Files"
FROM (
  SELECT
    CASE
      WHEN REGEXP_LIKE("content", '\s$','m') THEN 'Trailing'
      WHEN REGEXP_LIKE("content", '^\s','m') THEN 'Space'
      ELSE 'Other'
    END AS "Category"
  FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
  WHERE "binary" = FALSE
) AS "categorized_files"
GROUP BY "Category"
ORDER BY "Category";
```
2025-01-27 01:08:27 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-27 01:08:27 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-27 01:08:27 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-27 01:08:28 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-27 01:08:28 - snowflake.connector.connection - INFO - closed
2025-01-27 01:08:28 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-27 01:08:29 - root - INFO - itercount: 2
2025-01-27 01:08:29 - root - INFO - 0
2025-01-27 01:08:29 - root - INFO - Total iteration counts: 2
