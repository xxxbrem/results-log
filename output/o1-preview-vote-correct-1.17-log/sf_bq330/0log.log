2025-01-16 21:01:29 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 21:02:32 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 21:02:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 282
2025-01-16 21:02:33 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:34 - root - INFO - SQL:
SELECT DISTINCT "zip_code"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 1000;
Results:
zip_code
80913
80920
80916
80907
80922
80905
80132
80921
80903
80906
80918
80914
80923
80915
80909
80932
80808
80917
80933
80840
81301
81303
81122
80524
80549
80517
80538
81501
81504
81503
81422
80723
80654
80701
80863
80911
80831
81137
80525
80537
80534
81506
81427
80424
80443
81624
81090
81428
80446
80482
81230
80815
81130
81321
81052
81132
81067
80031
80221
80301
80265
80125
80021
81621
80924
81302
80526
81526
81432
80498
80817
80904
80521
80513
80728
81520
81521
81425
80435
80813
80528
81505
81401
81147
81073
81054
81201
80810
81140
81063
81416
81324
80442
80447
80459
81224
81036
80807
80828
80821
81328
81323
80731
81041
81047
81144
81433
81435
81423
81057
81252
80836
81641
81154
80720
80030
80022
80233
80102
80229
80241
80602
80136
80112
80122
80016
80013
80120
80014
80103
80246
80123
80026
80542
80503
80207
80249
80211
80226
80223
80205
80220
80208
80109
80138
80117
80005
80228
80004
80631
80520
81620
80011
80017
80206
80107
80214
81007
81005
81006
81625
80467
80751
81101
81211
80825
81413
81419
81415
81235
81089
80480
81082
81050
80734
81648
81125
81149
80743
80758
80759
80461
81092
80824
80601
80010
80260
80234
80216
80023
80015
80012
80111
80121
80113
80110
80231
80544
80304
80504
80302
80305
80516
80466
80020
80444
80222
80224
80202
80237
80209
80204
80227
80239
80230
80293
80124
80134
80126
80104
80116
80002
80403
80215
80439
80007
80401
80232
80212
80033
80128
80433
80003
80235
80440
80634
80610
80550
80642
80615
80643
80645
80546
80651
81632
81631
81637
81657
81623
81601
81636
81647
81611
80303
80219
80620
80639
80514
81615
80027
81226
81003
81001
81019
81039
80737
80129
80501
80540
80210
80218
80238
80203
80108
80127
80621
80543
81650
81212
81008
80487
81639

2025-01-16 21:02:34 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:34 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:34 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:35 - snowflake.connector.cursor - INFO - Number of results in first chunk: 282
2025-01-16 21:02:35 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:35 - root - INFO - SQL:
SELECT "zip_code", COUNT(*) AS "bank_location_count"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   GROUP BY "zip_code"
   LIMIT 1000;
Results:
zip_code,bank_location_count
80913,2
80920,18
80916,2
80907,7
80922,4
80905,3
80132,4
80921,9
80903,24
80906,9
80918,12
80914,1
80923,2
80915,6
80909,7
80932,3
80808,2
80917,1
80933,1
80840,1
81301,15
81303,3
81122,2
80524,13
80549,2
80517,5
80538,10
81501,13
81504,2
81503,1
81422,1
80723,5
80654,1
80701,6
80863,3
80911,1
80831,4
81137,1
80525,24
80537,15
80534,5
81506,2
81427,4
80424,6
80443,5
81624,1
81090,1
81428,2
80446,2
80482,1
81230,5
80815,1
81130,1
81321,8
81052,6
81132,1
81067,4
80031,4
80221,2
80301,14
80265,1
80125,1
80021,10
81621,6
80924,1
81302,1
80526,4
81526,1
81432,2
80498,1
80817,5
80904,2
80521,6
80513,3
80728,1
81520,4
81521,5
81425,2
80435,3
80813,1
80528,7
81505,9
81401,11
81147,7
81073,3
81054,1
81201,5
80810,2
81140,1
81063,1
81416,7
81324,1
80442,3
80447,1
80459,2
81224,3
81036,1
80807,6
80828,3
80821,1
81328,1
81323,1
80731,1
81041,1
81047,1
81144,3
81433,1
81435,5
81423,1
81057,1
81252,2
80836,1
81641,2
81154,1
80720,5
80030,7
80022,8
80233,7
80102,3
80229,8
80241,5
80602,4
80136,2
80112,24
80122,10
80016,12
80013,8
80120,6
80014,6
80103,1
80246,6
80123,10
80026,7
80542,1
80503,1
80207,7
80249,5
80211,10
80226,11
80223,2
80205,4
80220,2
80208,1
80109,2
80138,1
80117,1
80005,5
80228,9
80004,4
80631,8
80520,1
81620,7
80011,9
80017,3
80206,30
80107,2
80214,5
81007,6
81005,8
81006,1
81625,3
80467,1
80751,7
81101,8
81211,5
80825,1
81413,1
81419,2
81415,1
81235,1
81089,2
80480,1
81082,7
81050,6
80734,3
81648,1
81125,1
81149,1
80743,1
80758,3
80759,4
80461,3
81092,1
80824,1
80601,13
80010,4
80260,3
80234,9
80216,4
80023,4
80015,10
80012,14
80111,33
80121,2
80113,5
80110,7
80231,6
80544,2
80304,1
80504,6
80302,20
80305,3
80516,5
80466,1
80020,12
80444,1
80222,12
80224,7
80202,31
80237,5
80209,1
80204,1
80227,7
80239,3
80230,2
80293,1
80124,9
80134,16
80126,8
80104,10
80116,1
80002,9
80403,2
80215,3
80439,8
80007,5
80401,13
80232,1
80212,1
80033,6
80128,5
80433,5
80003,2
80235,1
80440,1
80634,24
80610,1
80550,10
80642,1
80615,2
80643,2
80645,1
80546,1
80651,1
81632,7
81631,5
81637,2
81657,6
81623,6
81601,8
81636,1
81647,1
81611,11
80303,4
80219,5
80620,2
80639,1
80514,1
81615,1
80027,8
81226,2
81003,9
81001,4
81019,1
81039,2
80737,2
80129,8
80501,30
80540,1
80210,5
80218,5
80238,1
80203,8
80108,7
80127,8
80621,2
80543,1
81650,5
81212,9
81008,8
80487,8
81639,1

2025-01-16 21:02:35 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:35 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:35 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:38 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-16 21:02:42 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:42 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:42 - root - INFO - SQL:
SELECT "zip_code", "zip_code_geom"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 1000;
Results:
Too long, hard cut:
zip_code,zip_code_geom
80621,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x88\x03\x00\x00\x9b\x1f\x7fiQ<Z\xc0\xc2\xd9\xade2\x06D@d\x9b\xe2qQ<Z\xc0Nyt#,\x06D@\xd30|DL<Z\xc0\x85\xdb\xa1a1\x06D@F\xd8\xf0\xf4J<Z\xc0V#\xbb\xd22\x06D@\x9b\x02\x99\x9dE<Z\xc09\xc9V\x97S\x06D@o.\xfe\xb6\'<Z\xc0\x91D/\xa3X\x06D@\xecO\xe2s\'<Z\xc0\xc2\xb5\xda\xc3^\x06D@\x7f\x17\xb6f+<Z\xc0>\x07\x96#d\x06D@\x14{h\x1f+<Z\xc0\x9e`\xffun\x06D@\x96\xebm3\x15<Z\xc0\xca\xe0(yu\x06D@\x1e\x92\xe8e\x14<Z\xc0\xd2\x0f\xea""\x85\x06D@tF\x94\xf6\x06<Z\xc0\x85r\xa2]\x85\x06D@\xe6\x07\xae\xf2\x04<Z\xc0\xe7g\xeau\x8b\x06D@\xfb\x93\xf8\xdc\t<Z\xc0\x93\x8er0\x9b\x06D@""T\xa9\xd9\x03<Z\xc0\xd4\x02{L\xa4\x06D@\x87\x19\x1aO\x04<Z\xc0]\xbb\xb4\xe1\xb0\x06D@\xe3Y\x10\xca\xfb;Z\xc0\xcd\x17{/\xbe\x06D@\x93\x06E\xf3\x00<Z\xc0\xe8}\xe3k\xcf\x06D@\xef\xc8Xm\xfe;Z\xc0\xb2\x8d?Q\xd9\x06D@\xc0\xd4]\xd9\x05<Z\xc0\x7f\xd1\xe5\xcd\xe1\x06D@\xaa\xd5WW\x05<Z\xc0)\xa7=%\xe7\x06D@&r\xc1\x19\xfc;Z\xc0\x13\x04\x8fo\xef\x06D@\xfd7\xbd\x8b\xf7;Z\xc0\xe4U\x9d\xd5\x02\x07D@\xc4\x96\x1eM\xf5;Z\xc0\x1ac\'\xbc\x04\x07D@\xa5\xe9z\xa2\xeb;Z\xc0\xc7\x83-v\xfb\x06D@\x9b\xe6\x1d\xa7\xe8;Z\xc0\xf6\x07\xcam\xfb\x06D@\x97\xab\x1f\x9b\xe4;Z\xc0\xaa\xa8\xc14\x0c\x07D@\xde_\xcb+\xd7;Z\xc0_\x0bzo\x0c\x07D@P\x07@\xdc\xd5;Z\xc0`\x15od\x1e\x07D@\xba\xc5\xfc\xdc\xd0;Z\xc0\xf3\x8eSt$\x07D@P\xc5\x8d[\xcc;Z\xc0\xf3G\x18\x06,\x07D@-\tPS\xcb;Z\xc0\xcd\x05.\x8f5\x07D@\x8f\xc7\x0cT\xc6;Z\xc0\xac\x84\xee\x928\x07D@Q\x1bc\'\xbc;Z\xc0\x8a\x16\xa0m5\x07D@\x07\x82\x8eV\xb5;Z\xc0\x8aPl\x05M\x07D@\xff\xd4\x06\'\xa2;Z\xc0X\xc8\\\x19T\x07D@U\xa6\x98\x83\xa0;Z\xc0\x99\xb1h:;\x07D@\xba?\xa5J\x94;Z\xc0\x84\x0e\xba\x84C\x07D@\xb8\xcc\xe9\xb2\x98;Z\xc0\xe0/fKV\x07D@\x7fj\xbct\x93;Z\xc0\xa7R\xb3\x07Z\x07D@\xe2\\\xc3\x0c\x8d;Z\xc0O\xba\xf4/I\x07D@\xb6\xf6>U\x85;Z\xc0\x0f/\x88HM\x07D@\xe0\xfc\x14\xc7\x81;Z\xc0Kk\xd3\xd8^\x07D@*y\x03\xcc|;Z\xc0h\x1c\xeawa\x07D@\x024\xd8\xd4y;Z\xc0\xaf\x0f\xeb\x8dZ\x07D@\xa6\x85\xcb*l;Z\xc0{j\xf5\xd5U\x07D@z\xaf\xe8\xd6k;Z\xc0\xab\\\xa8\xfck\x07D@7\x19U\x86q;Z\xc0\x99v1\xcdt\x07D@\x96FZ*o;Z\xc0\xfa\x03\xe5\xb6}\x07D@S\x08\xe4\x12G;Z\xc0\xd2p\xca\xdc|\x07D@=HO\x91C;Z\xc00y\x03\xcc|\x07D@G_\xcf\xd7,;Z\xc0\xfc7/N|\x07D@\xd4\r\x14x\';Z\xc0\x8b\xc4\x045|\x07D@~\xac\xe0\xb7!;Z\xc0H\xd5v\x13|\x07D@\x8e\xee\xae\xb3!;Z\xc0\xd6-\x02c}\x07D@\x06\xf7\x03\x1e\x18;Z\xc0e\xba\xd7I}\x07D@\x96\xd1\xc8\xe7\x15;Z\xc0=[\x07\x07{\x07D@s/0+\x14;Z\xc0\x03]\xfb\x02z\x07D@lcz\xc2\x12;Z\xc0\x9e\x97\x8a\x8dy\x07D@\xfdL\xbdn\x11;Z\xc0[\xa8\xfcky\x07D@.t%\x02\xd5:Z\xc0W\xeb\xc4\xe5x\x07D@}\xb8r\xf6\xce:Z\xc0\xe6w\x9a\xccx\x07D@\x91\xa2\\\x1a\xbf:Z\xc0\x91\x1d\x1b\x81x\x07D@\x00\tQ\xbe\xa0:Z\xc0\xba\xe4\x7f\xf2w\x07D@\xc0\x9cg\xecK:Z\xc0\x80\xe6s\xeev\x07D@e9\t\xa5/:Z\xc0]\x10\x91\x9av\x07D@\xb0\xac4)\x05:Z\xc0\x17d\xcb\xf2u\x07D@\x89\x98\x12I\xf49Z\xc0\xa6\xf0\xa0\xd9u\x07D@\x8d\xb6*\x89\xec9Z\xc0Q\x96!\x8eu\x07D@)\xd7\x14\xc8\xec9Z\xc0c\xe4,\xeci\x07D@\xe0\xe7\x86\xa6\xec9Z\xc0Fo\xb8\x8f\xdc\x06D@\xb0c\xea\xae\xec9Z\xc0 r\xfaz\xbe\x06D@V2\x8e\x91\xec9Z\xc0\xc2\xc1\xde\xc4\x90\x06D@V2\x8e\x91\xec9Z\xc0\xdd\xb3\xae\xd1r\x06D@\x8d\xb6*\x89\xec9Z\xc0f\xcfej\x12\x06D@\xeb\x95@J\xec9Z\xc0\x1e\x88,\xd2\xc4\x05D@""\x1a\xddA\xec9Z\xc0\xfd^\n\x0f\x9a\x05D@\x98V\xd1\x1f\x9a9Z\xc0R\xb9\x89Z\x9a\x05D@^\x18w\x83h9Z\xc0\xfd^\n\x0f\x9a\x05D@e\x8dz\x88F9Z\xc0Wv\xc1\xe0\x9a\x05D@\x05s\x82699Z\xc0\x99eO\x02\x9b\x05D@U3k) 9Z\xc0\xc7\xe9\xeb\xf9\x9a\x05D@\x97VC\xe2\x1e9Z\xc0\x17\x873\xbf\x9a\x05D@1\x82T\x8a\x1d9Z\xc0AN\x980\x9a\x05D@\xbc\x94\xbad\x1c9Z\xc0\xe66\xe1^\x99\x05D@(eRC\x1b9Z\xc0\x98\xcd\xe30\x98\x05D@\xb7\x0b\xcdu\x1a9Z\xc0\x94D\xf6A\x96\x05D@\xa6\xba\x80\x97\x199Z\xc0$9`W\x93\x05D@\x8a|%\x90\x129Z\xc0~\x10\xc9\x90c\x05D@\x8c\xd9\x92U\x119Z\xc0\xca\xf4K\xc4[\x05D@\xb5\x91y\xe4\x0f9Z\xc0\xe7T2\x00T\x05D@\xa4Z\xd2Q\x0e9Z\xc0\xb3\xe3\x86\xdfM\x05D@\x18\x11\xc5\xe4\r9Z\xc0V\x0f\x98\x87L\x05D@\xa6\xb7?\x17\r9Z\xc0\x14TT\xfdJ\x05D@\xbd\xea\x8f0\x0c9Z\xc0\xd9UH\xf9I\x05D@B&\x199\x0b9Z\xc0\xc1-\x1fII\x05D@\xfb\x93\xf8\xdc\t9Z\xc0\xfd_u\xe4H\x05D@\x12\xc7H\xf6\x089Z\xc0-\xe4\x11\xdcH\x05D@\xdd\x9f\x19\xc4\x079Z\xc0""6X8I\x05D@\x94\x06E\xf3\x009Z\xc0\x01\xb5\x18<L\x05D@\xbf\xf80{\xd98Z\xc0\xf1\xb7=Ab\x05D@aX\x8c\xba\xd68Z\xc0\x9c)t^c\x05D@k\x0e\x10\xcc\xd18Z\xc0h\x80\x0b\xb2e\x05D@@8-x\xd18Z\xc0\t\xe0f\xf1b\x05D@\x11\xce5\xcc\xd08Z\xc0hP4\x0f`\x05D@\xb4""j\xa2\xcf8Z\xc0\xe8\xd9\xac\xfa\\\x05D@6\x0c\xadN\xce8Z\xc0\xcd(\x96[Z\x05D@\xd9\xb9\xf7p\xc98Z\xc0\xf1\xce\xa1\x0cU\x05D@y`\x8e\x1e\xbf8Z\xc0b\xbdQ+L\x05D@\'T\xfe\xb5\xbc8Z\xc0E\x0c;\x8cI\x05D@;\x1c]\xa5\xbb8Z\xc0\xd4\xccZ\nH\x05D@\xad\xc3\xd1U\xba8Z\xc0\xc9\x865\x95E\x05D@\xad\xddv\xa1\xb98Z\xc04qr\xbfC\x05D@x\x9c\xa2#\xb98Z\xc0\x85B\x04\x1cB\x05D@\xac\xce\xf8\xbe\xb88Z\xc0\xbf\xa8\xa4N@\x05D@\xe8\x00OZ\xb88Z\xc0\xaa\xe8\x0f\xcd<\x05D@G\t\x88I\xb88Z\xc0{\x98\xbdl;\x05D@\xa2}\xac\xe0\xb78Z\xc0sz\xde\x8d\x05\x05D@q\xd0\xec\xba\xb78Z\xc0\rZH\xc0\xe8\x04D@\x89\x12\xbb\xb6\xb78Z\xc06\x89A`\xe5\x04D@\xd8\xf2\xca\xf5\xb68Z\xc0\xbd\xbe\xd6\xa5F\x04D@\x91F\x05N\xb68Z\xc0\xe3\xf1\xb4\xfc\x

2025-01-16 21:02:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 21:02:44 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:44 - root - INFO - SQL:
SELECT DISTINCT "geo_id", "blockgroup_ce"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
Results:
Too long, hard cut:
geo_id,blockgroup_ce
080410045072,2
080590102084,4
080130125093,3
080130137023,3
080519638001,1
080050863003,3
081230004014,4
080050851002,2
080839696003,3
081190102012,2
080350145043,3
081230021034,4
080590120551,1
081010028043,3
080690028031,1
080590103072,2
080310036012,2
080050857002,2
080459518021,1
080459521002,2
080410002023,3
080870006001,1
080219749002,2
080050056261,1
080310119022,2
080690008011,1
080179606003,3
080310036013,3
080690024023,3
080590098343,3
080050868002,2
080410040081,1
080310119021,1
080770011022,2
080679707032,2
080150004022,2
080690016061,1
080050066011,1
080410037052,2
080370002003,3
080350141322,2
081170004012,2
080590098083,3
080039600002,2
080130137013,3
080050802003,3
080010080002,2
080370001001,1
080690027001,1
080130125104,4
080590118033,3
080050067093,3
080299647001,1
080410065021,1
080659617002,2
080410047022,2
080590118063,3
080690011112,2
080410044011,1
080010097521,1
080770013016,6
080259696002,2
080299647003,3
080130606003,3
081010027002,2
080310155001,1
080410045021,1
081230022041,1
080899685002,2
080010082001,1
080050068541,1
080410074002,2
080050056201,1
080350141301,1
081010024002,2
080130130061,1
080679707041,1
080140306004,4
080010093212,2
080590102113,3
081010035002,2
080590120532,2
080010096062,2
080410042002,2
080690010033,3
081230020084,4
080130127103,3
080310021003,3
080130122022,2
080839692001,1
080310037024,4
080590120232,2
080410011011,1
080010085083,3
080130135032,2
080590098362,2
080050067051,1
081259632002,2
080839693002,2
080590117123,3
080370005034,4
080350141372,2
080310070131,1
080439782001,1
080590105032,2
080310017014,4
080690011074,4
081230001002,2
080439781002,2
080310043042,2
080410009002,2
080690028021,1
080690013041,1
080050056284,4
080050855001,1
080590107011,1
080590111005,5
080690011062,2
080310083872,2
080639621004,4
081230007031,1
080130128002,2
080410039051,1
080590120574,4
080050063003,3
080410033033,3
080770015013,3
080050860002,2
081010028012,2
080050055512,2
080310068142,2
080410055022,2
080310068092,2
081010008001,1
080039603004,4
080410033053,3
080050056211,1
080010083081,1
080010091012,2
080690017062,2
080690016012,2
080899683003,3
080439785003,3
080679710001,1
080770004001,1
080310003013,3
081230018002,2
080310004014,4
081259631001,1
080310021005,5
081010020001,1
080590104051,1
080310026012,2
080050868004,4
080590120321,1
080410041004,4
080410051093,3
080050871001,1
080590098351,1
080310036032,2
080310083062,2
080310036031,1
080459518041,1
081010022001,1
080739617001,1
080310157002,2
081039512003,3
080710008001,1
080050873005,5
080050056361,1
080350141371,1
080050066014,4
080310068144,4
080050057003,3
080050871002,2
080050062001,1
081070008002,2
080590117301,1
080010092031,1
080050808002,2
081170003002,2
080050831004,4
080130127091,1
081010009041,1
081230007011,1
080310015003,3
080010096033,3
080639622001,1
080010087052,2
080010094011,1
080010080004,4
080130122012,2
080050066032,2
081230014101,1
080130608004,4
080310044032,2
080350143001,1
080050056353,3
080190147001,1
080310070062,2
080310040063,3
080050828003,3
080050873004,4
080350139091,1
081230010054,4
080310004013,3
080010092041,1
080310036024,4
080150003001,1
080010085071,1
080459517012,2
080310041035,5
080990002002,2
080410019003,3
080590106033,3
080410070002,2
080590118062,2
080759664001,1
080970005002,2
080010083091,1
081059770004,4
080130132073,3
081230019051,1
080130132081,1
080690009011,1
080050830001,1
081010029031,1
080370004032,2
080050838002,2
080310026021,1
080310045043,3
080350145032,2
080590120351,1
080350145053,3
081010029032,2
080590112021,1
080050067114,4
080140311002,2
080410029005,5
081230008004,4
080310021002,2
081010031032,2
080299652003,3
080590117093,3
080050847003,3
080310003016,6
080310040061,1
080870002001,1
080410051061,1
080050075001,1
080590103071,1
080279701001,1
080010085401,1
080010085481,1
080690005051,1
080590117331,1
080590116021,1
080590103062,2
080399612051,1
080050067072,2
080310068113,3
080410051081,1
081230021015,5
080310156002,2
080140308003,3
080559609001,1
080590098283,3
081170002004,4
080310028013,3
080050815002,2
080690020052,2
080410068022,2
080590117091,1
080150003002,2
080010093201,1
080010086031,1
080350144061,1
080310051042,2
080310041061,1
080039602004,4
080310005025,5
080130132133,3
080130126081,1
081010026001,1
080770014022,2
081010029161,1
080310043033,3
080679711003,3
081010015001,1
080310007021,1
080130132113,3
080310044043,3
080130129031,1
081230021032,2
080130132071,1
080399611002,2
081230014091,1
080679706003,3
080770008003,3
080410039063,3
081059767004,4
080410029001,1
080350141242,2
080590105041,1
080130133083,3
080590116011,1
080439784002,2
080150001001,1
080590120552,2
080010088023,3
080590098242,2
080410019002,2
080659617001,1
080130124013,3
080590117204,4
081170004022,2
080130606001,1
080590603002,2
081230020193,3
080310120143,3
080310051021,1
080050068081,1
080350139074,4
080439783001,1
080410001021,1
080590098462,2
080459518022,2
080590107021,1
081230020191,1
080310043032,2
081010019002,2
080039601003,3

2025-01-16 21:02:44 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:44 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:44 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:47 - snowflake.connector.cursor - INFO - Number of results in first chunk: 21
2025-01-16 21:02:49 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:50 - root - INFO - SQL:
SELECT "geo_id", "blockgroup_geom"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
Results:
Too long, hard cut:
geo_id,blockgroup_geom
080010093083,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x004\x00\x00\x00C\xd0_\xe8\x11@Z\xc0\xa8\x9f7\x15\xa9\xeaC@W\x98\xbe\xd7\x10@Z\xc0\xab\x07\xccC\xa6\xeaC@\xb1\xfdd\x8c\x0f@Z\xc0\xe9\xd5\x00\xa5\xa1\xeaC@v\x19\xfe\xd3\r@Z\xc0X\x90f,\x9a\xeaC@\xe0\xa6\xcd8\r@Z\xc0""\x83\xdcE\x98\xeaC@\xdc,^,\x0c@Z\xc0)\xa8\xa8\xfa\x95\xeaC@f\x16\xa1\xd8\n@Z\xc0\x8f\xd5\xad\x9e\x93\xeaC@f0F$\n@Z\xc0fB\x93\xc4\x92\xeaC@\xd2\x00\xde\x02\t@Z\xc0+D\x87\xc0\x91\xeaC@o\x89\\p\x06@Z\xc0\xb0V\xed\x9a\x90\xeaC@p\x0b\x96\xea\x02@Z\xc0\x97.\xc4\xea\x8f\xeaC@\x03,\x80)\x03@Z\xc0\x04k\x9cMG\xeaC@L\x1b\x0eK\x03@Z\xc0\x8d\xe3\x87J#\xeaC@\xf2\x98\x81\xca\xf8?Z\xc0\xcd\xe5\x06C\x1d\xeaC@#N\'\xd9\xea?Z\xc0\x13\rR\xf0\x14\xeaC@=\x85\xea\xe6\xe2?Z\xc0~_#I\x10\xeaC@\x17f\xa1\x9d\xd3?Z\xc0 \xd2o_\x07\xeaC@\x16W#\xbb\xd2?Z\xc0\x19\x158\xd9\x06\xeaC@\x87 \x07%\xcc?Z\xc0R\xf2\xea\x1c\x03\xeaC@\xed\xc0\xc7`\xc5?Z\xc0\xca\xbe+\x82\xff\xe9C@\x1a3\x89z\xc1?Z\xc0\x96\xb1\xa1\x9b\xfd\xe9C@\xa1/\xbd\xfd\xb9?Z\xc0\xd2K\x8ce\xfa\xe9C@\x05\x8aX\xc4\xb0?Z\xc0\x10\xe6v/\xf7\xe9C@K\xcbH\xbd\xa7?Z\xc0\xe8\x86\xa6\xec\xf4\xe9C@\xc5$\xea\x05\x9f?Z\xc0\x17?\x8d{\xf3\xe9C@\x88.\xa8o\x99?Z\xc0r\x8a\x8e\xe4\xf2\xe9C@\x15$D\xf9\x82?Z\xc0\xca\xd5\x8fM\xf2\xe9C@\xb2\xe0\x0c\xfe~?Z\xc0,\xde\xc8<\xf2\xe9C@E\xc2\x85<\x82?Z\xc0\x85\xd1\xacl\x1f\xeaC@\tQ\xbe\xa0\x85?Z\xc0h\xb8\x01\x9f\x1f\xeaC@\xaf\xd1r\xa0\x87?Z\xc0\xb9\x12\x81\xea\x1f\xeaC@qB\xaf?\x89?Z\xc0N\\\x8eW \xeaC@\xff\x80\x95C\x8b?Z\xc0\x07|~\x18!\xeaC@\x17\x9e\x97\x8a\x8d?Z\xc0R\xe5{F""\xeaC@(\xbb\x99\xd1\x8f?Z\xc04\x98\x86\xe1#\xeaC@\xa8""\xa3\x03\x92?Z\xc0\t\x9d\xd7\xd8%\xeaC@\x18H\xde9\x94?Z\xc0\x15\xe3\xfcM(\xeaC@Z,E\xf2\x95?Z\xc0<B\xcd\x90*\xeaC@^\xa6\xb4\xfe\x96?Z\xc0}\xfd\x10\x1b,\xeaC@\x94\xdca\x13\x99?Z\xc0)\x07\xb3\t0\xeaC@d> \xd0\x99?Z\xc0\t\xba\xbd\xa41\xeaC@\x1atB\xe8\xa0?Z\xc0L\x7f\xf6#E\xeaC@\xcdf\x9c\x86\xa8?Z\xc0eI\x80\x9aZ\xeaC@W\xd5Y-\xb0?Z\xc0\xcb\xb0Q\xd6o\xeaC@\xd8\xd8%\xaa\xb7?Z\xc0\x0fB@\xbe\x84\xeaC@\xb6\xa1b\x9c\xbf?Z\xc0\x9f<,\xd4\x9a\xeaC@\xd0\x9c\xf5)\xc7?Z\xc0\xda\xdc\x98\x9e\xb0\xeaC@ev\xa4\xfa\xce?Z\xc0\xa5\t\xdbO\xc6\xeaC@!\x92!\xc7\xd6?Z\xc0\xachs\x9c\xdb\xeaC@F^\xd6\xc4\x02@Z\xc0\x7f\xf5\xb8o\xb5\xeaC@\xc9\x98I\xd4\x0b@Z\xc0\xdbD-\xcd\xad\xeaC@C\xd0_\xe8\x11@Z\xc0\xa8\x9f7\x15\xa9\xeaC@')"
080690011111,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00i\x00\x00\x00\xc9\xadI\xb7%FZ\xc0\xaa=\xec\x85\x02HD@\xaak{\xbb%FZ\xc05u\x1e\x15\xffGD@o\x87\x14\x03$FZ\xc0\xc9\xbe+\x82\xffGD@\xc5X\xa6_""FZ\xc0\xb2b\xb8:\x00HD@\xd2:\xaa\x9a FZ\xc0y\xb9O\x8e\x02HD@\x9eajK\x1dFZ\xc0\xfc/\xd7\xa2\x05HD@j\x88*\xfc\x19FZ\xc0\x8a \xce\xc3\tHD@\x169\xd2\x19\x18FZ\xc0)\xb0\x00\xa6\x0cHD@\x84f\xd7\xbd\x15FZ\xc0\xe5X\xdeU\x0fHD@}\x80|\t\x15FZ\xc00&\xfd\xbd\x14HD@\xd7\xe5""\xbe\x13FZ\xc0\xcf\xb5/\xa0\x17HD@\x06\xda\x1dR\x0cFZ\xc0Q\xf8l\x1d\x1cHD@0\xe0\xf3\xc3\x08FZ\xc0 @\x86\x8e\x1dHD@\x05\x89\xed\xee\x01FZ\xc0\x95\x08T\xff HD@#\xe1\t\xbd\xfeEZ\xc0@F@\x85#HD@8\xf7W\x8f\xfbEZ\xc0\x11\x8eY\xf6$HD@\x05\x1e\x18@\xf8EZ\xc0\x11\x8eY\xf6$HD@,,\xb8\x1f\xf0EZ\xc09\x89\x08\xff""HD@\xb1\x974F\xebEZ\xc0\xa2\xb6\r\xa3 HD@z\xc6\xbed\xe3EZ\xc0\x16.\xab\xb0\x19HD@\xfd\xe3K\xa8\xe0EZ\xc0\xab\xdfLL\x17HD@\x18\xc2\xf8i\xdcEZ\xc0\xab\xdfLL\x17HD@\x93\xeb\xa6\x94\xd7EZ\xc0\xd1\xe9y7\x16HD@\x97\xb3\x05\x84\xd6EZ\xc0$\xac\x8d\xb1\x13HD@\n\xc3\x0ec\xd2EZ\xc0\xb2\x17\n\xd8\x0eHD@\xca;\x15p\xcfEZ\xc0\xda\x12\xb9\xe0\x0cHD@\x9d.\x8b\x89\xcdEZ\xc0\xda\x12\xb9\xe0\x0cHD@\n\x8c\x83K\xc7EZ\xc0\xb1\x17\n\xd8\x0eHD@/\xe4\x9f\x19\xc4EZ\xc0\xb1\x17\n\xd8\x0eHD@\x95\xf7\xffq\xc2EZ\xc0\xa9Z\xd2Q\x0eHD@I\xc2L\xdb\xbfEZ\xc0\xda\x12\xb9\xe0\x0cHD@\xd4\xd4\xb2\xb5\xbeEZ\xc0Z4\x9d\x9d\x0cHD@\xfd\x8c\x99D\xbdEZ\xc0\x03\xda\x1dR\x0cHD@*\xe5\xb5\x12\xbaEZ\xc0\x03\xda\x1dR\x0cHD@D\xc3b\xd4\xb5EZ\xc0\xda\x12\xb9\xe0\x0cHD@\x118\x12h\xb0EZ\xc0\xb1\x17\n\xd8\x0eHD@7\xaa\xd3\x81\xacEZ\xc0\xb5\x08\x8c\xf5\rHD@\x96\xd7\xd8%\xaaEZ\xc06\xc6Nx\tHD@\xb8\x9b\xe0\x9b\xa6EZ\xc0k;m\x8d\x08HD@cL\x88\xb9\xa4EZ\xc0k;m\x8d\x08HD@#\xc5\x8e\xc6\xa1EZ\xc05\xc6Nx\tHD@\x04\xe8\xf7\xfd\x9bEZ\xc0\x11\xbc!\x8d\nHD@\xc8\xf4\x12c\x99EZ\xc0\x11\xbc!\x8d\nHD@|\xbf_\xcc\x96EZ\xc0f~5\x07\x08HD@\xa2K\xc61\x92EZ\xc0\xffP0c\nHD@\x90j\xd8\xef\x89EZ\xc0\xb0KTo\rHD@7S!\x1e\x89EZ\xc0\xa4\x9d\x9a\xcb\rHD@\xd6\xea9\xe9}EZ\xc0J\x1eO\xcb\x0fHD@{\x1a\xbe\x85uEZ\xc0\x80\x93m\xe0\x0eHD@\xbb\x84\xd1\xaclEZ\xc0]\x89@\xf5\x0fHD@\x83\x17}\x05iEZ\xc09\x7f\x13\n\x11HD@/\xc8$#gEZ\xc0\x02\n\xf5\xf4\x11HD@\x9d\xf5)\xc7dEZ\xc0\xc1\xb2\xd2\xa4\x14HD@\xb6\x85\xe7\xa5bEZ\xc0S\x94K\xe3\x17HD@\xbcMF\x95aEZ\xc0\xd3\xd6\x88`\x1cHD@]n0\xd4aEZ\xc0)Ral!HD@V\x88\xd5\x1faEZ\xc0\x88\x8aq\xfe&HD@\xbd\x9b5x_EZ\xc0\xe8\xb3\x03\xae+HD@o28J^EZ\xc0K\xdd\x95]0HD@\xf6\xef\xfa\xccYEZ\xc0M\x96Z\xef7HD@\x9e\x0c\x8e\x92WEZ\xc0\x06\x82\x00\x19:HD@\xea$[]NEZ\xc0=\xb0\xe3\xbf@HD@Q\x86\xaa\x98JEZ\xc0\x1ec\xeeZBHD@\xbcai\xe0GEZ\xc0\xe3\xfcM(DHD@+\xc3\xb8\x1bDEZ\xc0\xc0\xf2 =EHD@\x04\x982p@EZ\xc0\xe2\xfcM(DHD@k-\xccB;EZ\xc0+E\xf2\x95@HD@;\xe8\xa0K8EZ\xc0a\xba\x10\xab?HD@Q29\xb53EZ\xc07\xf3\xab9@HD@\xbc\r\xf8\x

2025-01-16 21:02:50 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:50 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:50 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:51 - snowflake.connector.cursor - INFO - Number of results in first chunk: 525
2025-01-16 21:02:51 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:52 - root - INFO - SQL:
SELECT "zip_code", "internal_point_lat", "internal_point_lon"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 1000;
Results:
Too long, hard cut:
zip_code,internal_point_lat,internal_point_lon
81121,37.1097817,-107.4390776
80455,40.0949699,-105.3976911
80424,39.4732847,-106.0042595
80106,39.186147,-104.515915
80816,38.8577405,-105.3158641
81615,39.2206082,-106.9292957
81137,37.0519107,-107.6136014
80524,40.6468542,-105.0295194
81082,37.1818543,-104.5180427
81084,37.5857491,-102.4102843
80134,39.4861121,-104.7789231
81335,37.4964073,-108.7570717
80231,39.6714701,-104.8878238
80624,40.486854,-104.4988679
80432,39.2245324,-105.7949428
80026,40.0121745,-105.100029
81071,38.4332339,-102.2607871
81130,37.5490672,-107.003236
80207,39.7622987,-104.9165812
80927,38.9286028,-104.658013
81253,38.2270691,-105.0651712
81004,38.0440536,-104.71441
80112,39.5770705,-104.857978
80904,38.8608293,-104.8761633
80438,39.744312,-105.7962623
81640,40.6682993,-108.5140462
80546,40.5252418,-104.849696
81128,37.0796915,-106.6209626
81073,37.4254109,-102.7051363
81401,38.4841532,-107.7729196
80403,39.8369591,-105.299618
80446,40.1726417,-105.9601328
80545,40.8730964,-105.6902998
80223,39.6957936,-105.0038428
81505,39.261767,-108.619007
80863,39.0199917,-105.1135881
81152,37.1107681,-105.4021197
81434,38.9817111,-107.4305897
80235,39.6476071,-105.0894821
80215,39.7447733,-105.115977
80728,40.6448657,-102.8738802
80907,38.8782305,-104.8270146
80750,40.4147651,-103.6048459
80928,38.6304011,-104.4016371
80830,39.1142463,-103.8941181
80012,39.6997344,-104.83763
80435,39.5738982,-105.9347206
81131,37.8654124,-105.6791411
80650,40.6215184,-104.8298346
81224,38.8800767,-106.932779
81129,37.1033607,-106.0290467
80514,40.0658812,-104.955387
80615,40.5456576,-104.6456983
80741,40.5668342,-103.476991
80515,40.4623459,-105.3823032
80829,38.8294434,-104.9363727
80125,39.4850693,-105.052316
80220,39.7338219,-104.9165652
81143,38.0490081,-105.8566859
80224,39.6877632,-104.9113377
81526,39.0968881,-108.3345114
81248,38.4643016,-106.3782579
80542,40.2350812,-104.9993861
80743,40.1971178,-102.9547457
80827,39.0564833,-105.4673591
81635,39.4950287,-108.0479716
80138,39.5175324,-104.6709107
81023,38.0526345,-104.96422
80634,40.4046799,-104.7927184
80023,39.9758442,-105.0093807
80419,39.7283988,-105.2028053
80426,39.9120851,-107.0004525
80122,39.5803086,-104.9549168
80497,39.6707581,-106.0000634
80453,39.6626875,-105.2425728
81101,37.4812452,-105.8332128
80544,40.1034216,-105.1710646
80642,40.0514156,-104.6121388
80823,38.6634637,-103.4191862
80603,39.9822107,-104.7370945
81413,38.9656264,-107.9562153
81047,38.1173268,-102.4798317
81040,37.7832216,-105.2272083
80814,38.9596306,-105.1943247
80621,40.1072393,-104.8012902
81038,38.0792429,-103.1404196
81220,38.3082435,-107.480574
80219,39.6952933,-105.0356013
81020,37.5488542,-104.4910197
81007,38.3600416,-104.7731981
81655,39.7703573,-106.7731841
80727,40.0758287,-102.5109885
80525,40.5298611,-105.0366412
80117,39.3696118,-104.3429014
80443,39.5563891,-106.1702399
81049,37.3787624,-103.3875742
80433,39.4777211,-105.2623864
80640,39.8875456,-104.880815
81058,38.0999531,-103.8828594
80735,39.7098238,-102.2731641
81432,38.0971336,-107.7547605
81332,37.7003443,-107.9912267
81057,38.1218103,-102.879317
80241,39.9290792,-104.9542771
80759,40.1352409,-102.6859588
80007,39.8668926,-105.1902776
81141,37.1622985,-105.8583377
80456,39.2483221,-105.5368488
80602,39.966162,-104.9088878
80705,40.2703264,-103.8294877
81091,37.1490904,-104.9647034
80293,39.7462533,-104.9899347
81029,37.0829091,-102.508878
80840,38.9946919,-104.8619476
81649,39.5302267,-106.2781625
80025,39.9398484,-105.2839419
80951,38.898118,-104.652428
80238,39.7715923,-104.8824004
80631,40.4428679,-104.6730721
81090,37.3659022,-102.2304609
80654,40.1381033,-104.0654905
81223,38.3645292,-105.6126463
81325,37.9201631,-108.7267872
81630,39.4580099,-108.5643398
80233,39.8996713,-104.9465609
81030,38.1007377,-103.5236172
80611,40.6250584,-104.2871332
80754,40.7217546,-103.6654688
81428,38.9629875,-107.5995784
80434,40.8432515,-106.2867888
80131,39.4764403,-105.007544
80917,38.8861678,-104.7452638
80118,39.192431,-104.9052646
80427,39.7802888,-105.4949767
80757,39.7910269,-103.5831298
80864,38.6976664,-104.1867385
80033,39.7726754,-105.1048006
80420,39.3244006,-106.1161097
80301,40.0494681,-105.2014214
80938,38.9047619,-104.6633153
80126,39.540594,-104.9586396
81641,40.0842836,-107.7473455
81125,37.8192612,-106.069857
80701,40.165309,-103.8707355
80939,38.8779625,-104.6773667
80467,40.2076332,-106.8258569
80835,39.2187961,-104.0225586
81251,39.1120706,-106.4744146
80105,39.6677239,-103.9691887
81045,38.4876554,-103.1646475
80247,39.698327,-104.8788145
80908,39.0475852,-104.6905396
80834,39.2647971,-102.8836403
81427,38.0258345,-107.6097468
80745,40.8954961,-103.4125563
80011,39.7387643,-104.7821588
80726,40.9050417,-102.7930467
80116,39.3200187,-104.7097118
80923,38.9268912,-104.7148142
80751,40.63688,-103.2324063
80019,39.7785643,-104.6847111
81321,37.3129704,-108.7345371
81424,38.3081177,-108.4601667
80818,39.3859131,-103.4804093
80747,40.9256808,-103.0746508
81642,39.3182508,-106.6559561
81652,39.48

2025-01-16 21:02:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:53 - snowflake.connector.cursor - INFO - Number of results in first chunk: 525
2025-01-16 21:02:53 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:53 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:53 - root - INFO - SQL:
SELECT "zip_code", "area_land_meters"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 1000;
Results:
Too long, hard cut:
zip_code,area_land_meters
81059,2848368715.0
80915,20156914.0
81422,694362124.0
81044,844749526.0
80016,120539684.0
80755,286619195.0
81021,565815022.0
80444,82751363.0
80452,336173181.0
80211,11651228.0
81006,146952257.0
80438,144196446.0
81640,6160477420.0
80546,198281.0
81128,473332573.0
81073,1657761491.0
81401,604891430.0
80403,346167186.0
80446,774452953.0
80545,732627359.0
80223,13557819.0
81505,260754260.0
80863,320672020.0
81152,1142333056.0
81434,1550159387.0
80235,9445756.0
80215,14401011.0
80231,12234716.0
80624,81252447.0
80432,282656353.0
80026,57536898.0
81071,1473609340.0
81130,2450513772.0
80207,11827151.0
80927,11338214.0
81253,333138255.0
81004,421921554.0
80112,47852961.0
80904,24687840.0
80125,109118487.0
80220,13562573.0
81143,853395939.0
80224,8155947.0
81526,134199630.0
81248,666918255.0
80542,23222464.0
80743,1202700878.0
80827,625907809.0
81635,753553682.0
80138,163770333.0
81023,326406896.0
80634,96495292.0
80023,45593279.0
80419,258039.0
80426,344815727.0
80621,329914384.0
81038,299771.0
81220,621488665.0
80219,19441822.0
81020,1502007529.0
81007,383149965.0
81655,362240918.0
80727,531673490.0
80525,62954845.0
80117,631057174.0
80443,269458012.0
80122,18278027.0
80497,34243972.0
80453,1048446.0
81101,1060175897.0
80544,127132.0
80642,246122302.0
80823,1055770024.0
80603,208122544.0
81413,545097473.0
81047,1547094143.0
81040,1342866229.0
80814,255696757.0
80110,16439328.0
80723,751888802.0
81041,1187727511.0
81426,43823359.0
80620,17099609.0
80526,98846601.0
81504,29308164.0
80005,29521114.0
81657,288012078.0
80513,170264616.0
80230,6442932.0
80304,23626703.0
80221,23527218.0
80721,223730398.0
80206,6379350.0
80030,6832691.0
80910,14985607.0
81227,951853.0
80517,767257321.0
80532,67132918.0
80543,81648589.0
80239,25871968.0
80501,32065047.0
80475,28069385.0
81303,557450510.0
80623,1721930.0
81638,434983876.0
80210,15718796.0
80622,34244043.0
80107,403715163.0
81062,618633388.0
81121,121229618.0
80455,89929628.0
80424,326129627.0
80106,455247568.0
80816,479752646.0
81615,66211364.0
81137,658537849.0
80524,327684060.0
81082,1547722074.0
81084,623875616.0
80134,145831459.0
81335,70232820.0
81232,4950749.0
80530,4918077.0
80802,1037427744.0
81624,1445020869.0
80809,130799648.0
80922,15498201.0
80825,1707533150.0
80204,14400268.0
80520,1043747.0
81523,855307931.0
80024,105884.0
80652,485346534.0
80504,253686973.0
80804,867607791.0
80736,294694717.0
80801,401656597.0
80135,852771580.0
80449,1536745657.0
80109,68316864.0
80612,421178219.0
80482,336139408.0
80137,270839261.0
80120,21497495.0
80528,49125642.0
80236,8323017.0
81501,20654254.0
80906,120835413.0
81418,53412961.0
81141,111559185.0
80456,599168329.0
80602,77890832.0
80705,704136.0
81091,1118990197.0
80293,15517.0
81029,1420920610.0
80840,74835366.0
81649,205023579.0
80025,30359215.0
80951,12056576.0
80238,12590640.0
80631,265319954.0
80754,546637034.0
81428,568018633.0
80434,74237155.0
80131,1954445.0
80917,16886345.0
80118,353632096.0
80427,37773322.0
80757,981446241.0
80864,644193547.0
80033,21454109.0
80420,102615669.0
80301,75139988.0
80938,8626308.0
80126,27781943.0
81641,4400251877.0
81125,697614505.0
80701,1573783662.0
80939,1396969.0
80467,595430006.0
80835,370915937.0
81251,227093359.0
80105,1291547404.0
81045,591324437.0
80247,7596442.0
80908,246944141.0
80834,743832672.0
81427,265613349.0
80745,569429438.0
80011,63843089.0
81049,3330117287.0
80433,212158264.0
80640,32883607.0
81058,134907240.0
80735,758543157.0
81432,707172272.0
81332,156624913.0
81057,135618879.0
80241,17108904.0
80759,1671505720.0
80007,66575186.0
80726,409179090.0
80116,223905469.0
80923,17706474.0
80751,1216843577.0
80019,63623745.0
81321,1090631446.0
81424,795401616.0
80818,748811725.0
80747,455639002.0
81642,360399809.0
81652,230484441.0
80130,16543909.0
80465,116700021.0
80447,608282335.0
81525,308544776.0
81149,2162574060.0
81052,1719082240.0
81090,1651535907.0
80654,588571727.0
81223,1032977962.0
81325,1476500095.0
81630,3300159996.0
80233,23570009.0
81030,976619.0
80611,996215713.0
80728,939260049.0
80907,25609319.0
80750,340238877.0
80928,851544772.0
80830,578422326.0
80012,20142891.0
80435,268622166.0
81131,812405978.0
80650,131364187.0
81224,403554855.0
81129,10953265.0
80514,17455077.0
80615,272626231.0
80741,589419746.0
80515,157013908.0
80829,55830400.0
80924,14123898.0
81126,50441745.0
81410,59202025.0
81222,79957771.0
81240,385175498.0
81138,58987213.0
81423,1277060982.0
81036,1947541206.0
81645,438646936.0
80902,37146123.0
80610,438907400.0
81133,965832508.0
81425,993029256.0
81330,169148406.0
81039,1528433322.0
80045,1735746.0
80535,114702126.0
80229,33025125.0
81055,666206658.0
80212,9249943.0
80742,1154882975.0
80758,1798088196.0
81654,228627129.0
81033,837884.0
80228,28468577.0
80133,79767103.0
80101,608207508.0
80511,276231.0
80108,92120010.0
81146,585065650.0
81403,1430902199.0
80744,336222646.0
80305,18639881.0
81520,53496565.0
80903,12528741.0
81252,1594798863.0
81610,804607159.0
81027,1604236717.0
80218,4136533.0
81144,732

2025-01-16 21:02:53 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:53 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:53 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 21:02:55 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:55 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:55 - root - INFO - SQL:
SELECT "fdic_certificate_number", "institution_name", "branch_address", "zip_code"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 1000;
Results:
Too long, hard cut:
fdic_certificate_number,institution_name,branch_address,zip_code
4666,"Armed Forces Bank, National Association","6384 Wetzel Avenue, Building 1512",80913
6560,The Huntington National Bank,9265 North Union Boulevard,80920
6560,The Huntington National Bank,2930 South Academy Boulevard,80916
6560,The Huntington National Bank,3290 Centennial Boulevard,80907
6548,U.S. Bank National Association,1125 Garden Of The Gods Road,80907
6548,U.S. Bank National Association,1520 Briargate Boulevard,80920
6548,U.S. Bank National Association,6030 Stetson Hills Boulevard,80922
3511,"Wells Fargo Bank, National Association",1800 South Nevada Avenue,80905
3511,"Wells Fargo Bank, National Association",560 Garden Of The Gods Road,80907
57587,Integrity Bank & Trust,1275 Village Ridge Pt,80132
8273,"UMB Bank, National Association",502 Security Boulevard,80911
18489,Adams Bank & Trust,"1359 Interquest Parkway, Suite 150",80921
19220,ANB Bank,15 West Cimarron Street,80903
3076,Independent Bank,155 Lake Avenue,80906
3076,Independent Bank,501 South Tejon,80903
3076,Independent Bank,"104 S. Cascade Avenue, Suite 2014",80903
12633,The Central Trust Bank,5278 North Nevada Avenue Suite 100,80918
91005,5Star Bank,"Peterson Air Force Base, 455 W. Paine St., Bldg. 1485",80914
628,"JPMorgan Chase Bank, National Association",7390 Duryea Drive,80923
628,"JPMorgan Chase Bank, National Association",7685 N Academy Blvd,80920
628,"JPMorgan Chase Bank, National Association",3750 Bloomington Street,80922
628,"JPMorgan Chase Bank, National Association",11555 Meridian Market View,80831
628,"JPMorgan Chase Bank, National Association",402 North Tejon Street,80903
3511,"Wells Fargo Bank, National Association",8620 North Union Boulevard,80920
11492,InBank,945 Tenderfoot Hill Road,80906
18714,FirstBank,2790 Briargate Boulevard,80920
20156,Kirkpatrick Bank,"102 North Cascade Avenue, Suite 100",80903
628,"JPMorgan Chase Bank, National Association",3306 Centennial Blvd.,80907
16980,Bank of Colorado,El Paso County,80915
16980,Bank of Colorado,1146 Interquest Parkway,80921
16980,Bank of Colorado,4328 Edison Avenue,80915
17534,KeyBank National Association,1521 South 8th Street,80906
17534,KeyBank National Association,3085 S Academy Blvd,80916
2270,"Zions Bancorporation, N.A.",7390 North Academy Boulevard,80920
2270,"Zions Bancorporation, N.A.",111 South Tejon Street,80903
3076,Independent Bank,440 Chapel Hills Drive,80920
6548,U.S. Bank National Association,1415 North Academy Boulevard,80909
6548,U.S. Bank National Association,6925 Mesa Ridge Parkway,80817
6548,U.S. Bank National Association,2308 East Pikes Peak Avenue,80909
6548,U.S. Bank National Association,1070 West Baptist Road,80921
6560,The Huntington National Bank,2870 New Center Pt,80922
6560,The Huntington National Bank,5470 E. Woodmen Road,80920
3511,"Wells Fargo Bank, National Association",4151 North Academy Boulevard,80918
3511,"Wells Fargo Bank, National Association",15844 Jackson Creek Parkway,80132
3510,"Bank of America, National Association",7808 N Academy Blvd,80920
17782,Pikes Peak National Bank,2401 W Colorado Ave,80904
57587,Integrity Bank & Trust,5550 Powers Center Point,80920
3034,The First National Bank of Las Animas,2768 Northgate Blvd,80921
5394,Waypoint Bank,24 South Weber Street Suite 151,80903
19600,"Academy Bank, National Association",3201 E.  Platte Avenue,80909
59052,NBH Bank,"19 North Tejon, Ste 100",80903
91005,5Star Bank,104 S Cascade Ave,80903
8273,"UMB Bank, National Association",730 Citadel Drive East,80932
8273,"UMB Bank, National Association",101 North Cascade Avenue,80903
19220,ANB Bank,1130 North Circle Drive,80932
1780,Farmers State Bank of Calhan,7025 Meridian Rd,80831
1780,Farmers State Bank of Calhan,445 N Ellicott Hwy,80808
4666,"Armed Forces Bank, National Association",Coleman And Linstrom Streets,80913
6560,The Huntington National Bank,3175 East Platte Avenue,80909
6560,The Huntington National Bank,7239 N. Academy Boulevard,80920
16980,Bank of Colorado,421 North Tejon Street,80903
3511,"Wells Fargo Bank, National Association",5710 Constitution Avenue,80915
3511,"Wells Fargo Bank, National Association",9649 Prominent Point,80924
3511,"Wells Fargo Bank, National Association",90 South Cascade Avenue,80903
57587,Integrity Bank & Trust,13475 Voyager Parkway,80921
6548,U.S. Bank National Association,815 Cheyenne Meadows Road,80906
6548,U.S. Bank National Association,7655 Mclaughlin Road,80831
3510,"Bank of America, National Association",5737 Barnes Road,80917
17782,Pikes Peak National Bank,6615 Camden Boulevard,80817
18609,American Bank of Commerce,434 S. Tejon,80903
18714,FirstBank,"2 North Cascade Avenue, Suite 130",80903
91005,5Star Bank,3992 E. Bijou St,80909
628,"JPMorgan Chase Bank, National Association","1274 Interquest Pkwy, Ste 100",80921
1778,The State Bank,7495  Mclaughlin Road,80831
19600,"Academy Bank, National Association",8250 Razorback Road,80920
19600,"Academy Bank, National Association",2835 Briargate Blvd,80920
19600,"Academy Bank, National Association",

2025-01-16 21:02:55 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:55 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:55 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:57 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 21:02:57 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:57 - root - INFO - SQL:
SELECT "geo_id", "internal_point_lat", "internal_point_lon"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
Results:
Too long, hard cut:
geo_id,internal_point_lat,internal_point_lon
080590104022,39.7871907,-105.0926183
080410045072,38.7312852,-104.7031807
080410060002,38.8433637,-104.7527466
081170001005,39.6241178,-106.093135
080310036025,39.765269,-104.9575129
080310013015,39.7093433,-105.020393
080299651002,38.7370604,-108.0745567
080590120571,39.556401,-105.101203
080130132051,40.0955969,-105.1755981
080370002001,39.5321964,-106.8800519
080410045082,38.7047539,-104.7035441
080350145042,39.3666233,-104.8341858
080310068112,39.6579726,-104.8897727
081010022002,38.2269228,-104.6161323
080590111004,39.7365998,-105.0954782
081010028015,38.2295574,-104.6667016
080350144052,39.4135004,-104.8976938
081010028014,38.2241002,-104.6637891
080919676004,38.0161574,-107.7399335
080310030021,39.6767197,-104.9781675
080140302001,39.9087252,-105.0745694
080130135053,40.1978484,-105.0955116
080839694004,37.3320554,-108.5952897
080050807003,39.6868851,-104.8403339
080350139102,39.5104904,-104.7323444
080310028012,39.7217043,-104.9761484
080410064004,38.7919242,-104.7502609
080330001002,37.7117226,-108.5241156
080310028034,39.7184909,-104.9788181
080039602002,37.477422,-105.86149
080310046021,39.6931036,-105.0285637
080410067001,38.8618581,-104.9202215
081230019051,40.0802781,-104.7924525
080050820002,39.7211631,-104.7994167
080590120572,39.564438,-105.0971375
080770017023,39.1011541,-108.3685666
081230022041,40.4559625,-104.8947382
080759661004,40.6433518,-103.2116065
080690018073,40.4414471,-105.0813611
080350140111,39.5016623,-104.8403971
080590098232,39.8835222,-105.1245686
081230008002,40.3983334,-104.6884262
080410053001,38.8095247,-104.7777139
080130132081,40.1853979,-105.1390047
080350141162,39.5438662,-104.8743943
080410018001,38.8452139,-104.8024346
080410009001,38.855228,-104.8126737
080590103031,39.8235177,-105.1142387
080350141152,39.5408576,-104.8919728
080310032023,39.7323312,-104.9620172
080130136022,40.2124996,-105.6066003
080970001002,39.2055564,-107.0457972
080310070373,39.6981846,-104.871102
080590098333,39.844643,-105.069505
080590102112,39.8164845,-105.0858913
080690025023,40.7076734,-105.0077426
080590120481,39.6061125,-105.0776149
080410028004,38.8076173,-104.8021203
080710005002,37.1262754,-104.4299959
080050865003,39.5728973,-104.7607265
080079743003,37.2405262,-107.0632206
080899685002,37.9988349,-103.5410109
080050068552,39.6040739,-104.8402123
080590120361,39.4523402,-105.1884273
080519636007,38.6119502,-106.8438598
081230020042,40.0837831,-104.9287401
080590109014,39.7272131,-105.1378886
080770009001,39.1013837,-108.6167119
081230025022,40.2024937,-104.452283
080590604001,39.8960134,-105.0578373
080590120541,39.6196882,-105.0965486
080459519011,39.4647386,-107.5555836
080310157003,39.6573782,-105.0375434
080370005022,39.5902552,-106.4766673
080410008002,38.8512536,-104.8010786
080990006002,38.0882153,-102.127362
080350145051,39.347135,-104.8599916
080519638001,38.8800767,-106.932779
080310040031,39.6621808,-104.9265932
080590102084,39.8274921,-105.0751668
080410029001,38.8079539,-104.8115102
080310119023,39.6559604,-105.0628179
080130125093,39.9736734,-105.2557972
080590120311,39.565878,-105.3667811
080150003003,38.5259978,-106.2194258
080350141242,39.5285666,-105.0166877
080590118042,39.6849134,-105.066511
080310055032,39.6352457,-105.0401371
080130127102,40.0078092,-105.2104831
080130137023,39.9755267,-105.3843138
080050074001,39.7346823,-104.8565553
080770011023,39.0880893,-108.4836479
080410002024,38.8924185,-104.7665193
080310045033,39.7023582,-105.0422613
080410047052,38.91961,-104.7341743
080590117103,39.6829998,-105.1099603
081230020161,40.123332,-104.9302044
080410059003,38.8570855,-104.746302
080010093253,39.9115301,-105.017779
081059767002,37.5674218,-106.1333904
080310027014,39.7360417,-104.9835506
080930005001,39.013594,-105.4412584
080050832003,39.6429544,-104.7428726
080770016001,39.1276852,-108.6071898
080590098382,39.81815,-105.1903424
080410031006,38.777803,-104.83772
080050076004,39.7279992,-104.831023
080010085501,39.9111268,-104.9276615
080010085421,39.9803006,-104.756989
080010085422,39.9941967,-104.7480323
081230020203,40.148765,-104.93181
081010028013,38.2192461,-104.6610498
080130126071,40.0048374,-105.256109
080310013013,39.703324,-105.0163096
080050863003,39.581248,-104.798248
080590102052,39.8339629,-105.1195249
081230004014,40.4055487,-104.7070271
080470138003,39.7889947,-105.5079578
080590117272,39.6766451,-105.0944419
080050860001,39.6204749,-104.7317229
080299649003,38.7419823,-108.0574775
080310001021,39.7796752,-105.0291123
080050803001,39.6784034,-104.8612914
080130132102,40.1511275,-105.122309
080770002001,39.0738632,-108.5567202
081010025001,38.2494665,-104.6293858
080310157004,39.660641,-105.0286854
080410069011,38.9510116,-104.7299791
080590117201,39.7214565,-105.1794784
080970001003,39.2587958,-106.9358882
081230022053,40.4680981,-104.8974545
081230020133,40.1250169,-104.9484544
080590120243,39.5760175,-105.123197
080590118031,39.6940482,-105.0579605
080590107012,39.765728,-105.0767362
080

2025-01-16 21:02:57 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:57 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:57 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:58 - snowflake.connector.cursor - INFO - Number of results in first chunk: 525
2025-01-16 21:02:58 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:59 - root - INFO - SQL:
SELECT DISTINCT "zip_code", "county"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
    WHERE "state_code" = 'CO'
    LIMIT 1000;
Results:
Too long, hard cut:
zip_code,county
80642,"Adams County, Weld County, Weld County"
80014,"Denver County, Arapahoe County, Adams County, Arapahoe County, Douglas County"
80310,Boulder County
81432,Ouray County
80479,Routt
80816,Teller County
81029,Baca County
81506,Mesa County
80480,Jackson County
81211,Chaffee County
80749,Sedgwick County
81253,Custer
81230,Gunnison County
80728,Logan County
80025,Boulder County
81020,Las Animas County
81236,Chaffee
80809,"El Paso County, El Paso County, Teller County"
81220,Gunnison
81655,Eagle County
80023,"Adams County, Weld County, Adams County, Jefferson County, Broomfield County"
80427,"Gilpin County, Clear Creek County, Gilpin County"
80120,"Arapahoe County, Douglas County, Arapahoe County, Douglas County, Jefferson County"
81040,Huerfano
80473,Jackson
80923,El Paso County
81239,Gunnison
81324,Dolores County
80113,Arapahoe County
80212,"Jefferson County, Denver County, Adams County"
80512,Larimer
80005,"Adams County, Jefferson County"
80435,Summit County
81224,Gunnison County
80422,"Boulder County, Gilpin County, Jefferson County, Gilpin County, Clear Creek County, Gilpin County"
80822,Yuma County
80544,Boulder County
80128,"Jefferson County, Arapahoe County, Arapahoe County, Jefferson County, Arapahoe County, Douglas County, Jefferson County"
81030,Otero County
81210,Gunnison
81124,Conejos County
81057,Bent
81301,La Plata County
81241,Gunnison County
80228,Jefferson County
80027,"Boulder County, Jefferson County, Boulder County, Broomfield County"
80478,Grand County
80927,El Paso County
81148,Conejos County
81641,Rio Blanco County
81125,"Rio Grande County, Saguache County"
81612,
80521,Larimer County
80401,Jefferson County
81521,Mesa County
81131,Saguache County
80536,Larimer
80249,Denver County
80801,Washington
80236,"Denver County, Arapahoe County"
81424,Montrose County
80438,Clear Creek County
80743,Washington County
81635,Garfield County
80015,"Arapahoe County, Adams County, Arapahoe County, Douglas County"
80294,Denver County
81044,Bent County
80202,Denver County
80447,Grand County
81503,Mesa County
80247,"Denver County, Adams County, Arapahoe County, Douglas County"
80017,"Adams County, Arapahoe County, Douglas County"
81221,Fremont County
81021,Kiowa
80744,Sedgwick County
80910,El Paso County
80129,"Douglas County, Arapahoe County, Douglas County, Jefferson County"
81141,Conejos County
80537,"Larimer County, Larimer County, Weld County"
80549,Larimer County
80654,Morgan County
80233,"Adams County, Weld County"
80824,Yuma County
80226,"Denver County, Jefferson County"
81073,Baca County
80742,Weld County
80231,"Denver County, Adams County, Arapahoe County, Douglas County"
80126,Douglas County
81008,"Pueblo County, El Paso County"
81601,Garfield County
80528,"Larimer County, Larimer County, Weld County"
81133,Costilla County
81425,Montrose County
80475,
80241,"Adams County, Weld County"
81067,Otero County
80446,Grand County
80701,Morgan County
80134,Douglas County
80234,"Adams County, Weld County, Adams County, Jefferson County, Adams County, Broomfield County"
80221,"Denver County, Adams County, Weld County, Adams County, Adams County, Jefferson County"
80907,El Paso County
80622,
81089,Huerfano County
80118,Douglas County
80425,Jefferson
81138,
81526,Mesa County
80004,"Jefferson County, Adams County, Jefferson County"
81120,Conejos County
80002,"Jefferson County, Adams County, Jefferson County, Adams County"
81071,Kiowa County
80482,Grand County
81325,San Miguel
80428,Routt
80745,Logan County
80011,"Adams County, Arapahoe County, Douglas County"
80729,Weld County
81154,Rio Grande County
80227,"Denver County, Jefferson County"
80220,"Denver County, Adams County, Arapahoe County, Douglas County"
81323,Montezuma County
81504,Mesa County
81303,La Plata County
80612,Weld
80131,Douglas County
81027,Las Animas County
81645,Eagle County
81007,Pueblo County
80540,Boulder County
81430,San Miguel County
80815,Kit Carson County
81633,
81320,Dolores
81326,La Plata
80123,"Jefferson County, Denver County, Arapahoe County, Arapahoe County, Jefferson County, Arapahoe County, Douglas County, Jefferson County"
81242,Chaffee County
81123,Costilla County
80452,"Clear Creek County, Clear Creek County, Gilpin County"
80305,Boulder County
81637,Eagle County
81062,Crowley County
81416,Delta County
80836,Kit Carson County
80525,Larimer County
80426,Eagle
81321,Montezuma County
80498,Summit County
80304,Boulder County
81227,Chaffee County
80623,Weld County
81233,Fremont County
80467,Routt County
80804,Lincoln County
80238,Denver County
80754,Weld
81428,Delta County
81041,Prowers County
80107,Elbert County
80939,
80834,Kit Carson County
81240,Fremont County
80906,El Paso County
80758,Yuma County
80007,"Boulder County, Jefferson County, Adams County, Jefferson County"
80530,Weld County
80432,Park
80135,Douglas County
81327,Montezuma County
80436,Clear Creek County
81038,
80807,Kit Carson County
80747,Logan County
80018,"Arapahoe County, Adams County, Arapahoe County, Douglas County"
80603,"Adams County, Weld

2025-01-16 21:02:59 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:59 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:59 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:03:00 - snowflake.connector.cursor - INFO - Number of results in first chunk: 282
2025-01-16 21:03:00 - snowflake.connector.connection - INFO - closed
2025-01-16 21:03:00 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:03:00 - root - INFO - SQL:
SELECT "zip_code", COUNT(DISTINCT "fdic_certificate_number") AS "bank_institution_count"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
    LIMIT 1000;
Results:
zip_code,bank_institution_count
80913,1
80920,13
80916,2
80907,7
80911,1
80921,8
80906,8
80909,6
80915,5
81301,10
80513,3
80538,8
80922,4
80817,5
81137,1
80525,18
81505,9
81521,5
80924,1
80537,9
81303,2
80526,4
80923,2
80751,7
80728,1
81501,11
80424,5
80016,8
81520,4
81504,2
81526,1
81422,1
81624,1
81090,1
81201,4
81419,2
80734,3
81144,3
80758,3
80014,6
80027,7
81047,1
80304,1
80108,6
80132,4
80840,1
80701,6
81122,2
80528,7
80549,2
81503,1
81432,2
80825,1
81413,1
80442,3
81092,1
81154,1
80202,25
80117,1
81620,7
81057,1
80821,1
80720,5
80116,1
80918,11
80524,10
80933,1
80904,2
80914,1
80654,1
80443,4
80863,3
81427,2
80435,3
81302,1
81082,5
81067,3
80602,4
80122,8
80207,7
80231,5
80905,3
80903,22
80831,4
80917,1
80534,5
80521,4
81425,1
80723,4
81211,5
80459,2
81050,5
81052,5
80737,2
80229,8
80112,17
80444,1
80498,1
81416,7
81428,2
81324,1
81230,5
81235,1
81039,2
80731,1
81641,2
81433,1
81435,5
80759,4
81149,1
80031,4
80233,7
80234,7
80221,2
80136,2
80121,2
80123,7
80466,1
80203,6
80232,1
80002,8
80017,3
80542,1
80301,9
80220,2
80109,2
80546,1
81631,5
80033,5
81003,7
80487,7
80808,1
80302,15
81147,6
80447,1
81224,3
80836,1
80461,3
81132,1
81423,1
80030,7
80011,9
80113,5
80516,5
80020,11
80218,4
80226,11
80222,9
80223,2
80004,3
80433,5
80237,5
80209,1
81632,6
80621,1
80520,1
80615,2
80293,1
81226,2
81005,8
80111,28
81063,1
81007,6
80932,2
80260,3
80249,5
81401,9
81101,6
81089,2
81506,2
81073,3
80810,2
81252,2
81415,1
80446,2
80480,1
81036,1
80241,3
80012,11
80010,3
80015,8
80303,4
80305,3
80021,9
80224,7
80238,1
80134,11
80401,10
80007,4
80127,6
80482,1
81648,1
80013,6
80540,1
80210,4
80212,1
80138,1
81650,4
81008,8
80517,4
81130,1
80120,6
80813,1
81054,1
80828,3
81321,5
80824,1
80815,1
80102,3
80601,11
80216,4
80023,4
80129,7
80501,21
80206,24
80219,5
80124,9
80214,5
80228,9
81328,1
81323,1
81125,1
80544,2
80504,5
80204,1
80239,3
80230,2
80104,8
80125,1
80439,6
80128,5
80440,1
80634,19
80610,1
80550,8
80620,2
80639,1
80643,2
81657,5
81601,6
81647,1
81623,5
80103,1
80503,1
80403,2
80235,1
80642,1
80514,1
81615,1
80543,1
81019,1
81625,3
81636,1
80651,1
80467,1
81639,1
81140,1
80110,6
80211,10
80743,1
80003,2
80215,2
80107,2
81212,8
80005,4
80227,5
80265,1
80807,6
80246,6
80205,3
80022,7
80026,5
81041,1
80208,1
80631,7
81637,2
81621,5
80645,1
81006,1
80126,8
81611,10
81001,3

2025-01-16 21:03:00 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:03:00 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:03:00 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:03:02 - snowflake.connector.cursor - INFO - Number of results in first chunk: 64
2025-01-16 21:03:02 - snowflake.connector.connection - INFO - closed
2025-01-16 21:03:02 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:03:02 - root - INFO - SQL:
SELECT DISTINCT "county_fips_code", "county_name"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    WHERE "state_fips_code" = '08'
    LIMIT 1000;
Results:
county_fips_code,county_name
101,Pueblo County
014,Broomfield County
089,Otero County
047,Gilpin County
015,Chaffee County
001,Adams County
069,Larimer County
055,Huerfano County
011,Bent County
075,Logan County
123,Weld County
013,Boulder County
041,El Paso County
019,Clear Creek County
119,Teller County
115,Sedgwick County
043,Fremont County
085,Montrose County
103,Rio Blanco County
017,Cheyenne County
035,Douglas County
077,Mesa County
021,Conejos County
037,Eagle County
083,Montezuma County
073,Lincoln County
057,Jackson County
125,Yuma County
107,Routt County
007,Archuleta County
091,Ouray County
025,Crowley County
027,Custer County
039,Elbert County
111,San Juan County
005,Arapahoe County
031,Denver County
121,Washington County
071,Las Animas County
113,San Miguel County
059,Jefferson County
087,Morgan County
093,Park County
009,Baca County
053,Hinsdale County
097,Pitkin County
067,La Plata County
003,Alamosa County
109,Saguache County
081,Moffat County
045,Garfield County
033,Dolores County
095,Phillips County
117,Summit County
051,Gunnison County
029,Delta County
099,Prowers County
065,Lake County
049,Grand County
023,Costilla County
061,Kiowa County
079,Mineral County
105,Rio Grande County
063,Kit Carson County

2025-01-16 21:03:02 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:03:02 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:03:02 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:03:03 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 21:03:03 - snowflake.connector.connection - INFO - closed
2025-01-16 21:03:04 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:03:04 - root - INFO - SQL:
SELECT SUM("area_land_meters") AS "total_land_area_meters"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    WHERE "state_fips_code" = '08';
Results:
total_land_area_meters
268419875371

2025-01-16 21:03:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:03:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:03:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:03:05 - snowflake.connector.cursor - INFO - Number of results in first chunk: 525
2025-01-16 21:03:05 - snowflake.connector.connection - INFO - closed
2025-01-16 21:03:05 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:03:05 - root - INFO - SQL:
SELECT "zip_code", "area_land_meters"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
    WHERE "state_code" = 'CO'
    LIMIT 1000;
Results:
Too long, hard cut:
zip_code,area_land_meters
81059,2848368715.0
80915,20156914.0
81422,694362124.0
81044,844749526.0
80016,120539684.0
80755,286619195.0
81021,565815022.0
80444,82751363.0
80452,336173181.0
80211,11651228.0
81006,146952257.0
80438,144196446.0
81640,6160477420.0
80546,198281.0
81128,473332573.0
81073,1657761491.0
81401,604891430.0
80403,346167186.0
80446,774452953.0
80545,732627359.0
80223,13557819.0
81505,260754260.0
80863,320672020.0
81152,1142333056.0
81434,1550159387.0
80235,9445756.0
80215,14401011.0
80231,12234716.0
80624,81252447.0
80432,282656353.0
80026,57536898.0
81071,1473609340.0
81130,2450513772.0
80207,11827151.0
80927,11338214.0
81253,333138255.0
81004,421921554.0
80112,47852961.0
80904,24687840.0
80125,109118487.0
80220,13562573.0
81143,853395939.0
80224,8155947.0
81526,134199630.0
81248,666918255.0
80542,23222464.0
80743,1202700878.0
80827,625907809.0
81635,753553682.0
80138,163770333.0
81023,326406896.0
80634,96495292.0
80023,45593279.0
80419,258039.0
80426,344815727.0
80621,329914384.0
81038,299771.0
81220,621488665.0
80219,19441822.0
81020,1502007529.0
81007,383149965.0
81655,362240918.0
80727,531673490.0
80525,62954845.0
80117,631057174.0
80443,269458012.0
80122,18278027.0
80497,34243972.0
80453,1048446.0
81101,1060175897.0
80544,127132.0
80642,246122302.0
80823,1055770024.0
80603,208122544.0
81413,545097473.0
81047,1547094143.0
81040,1342866229.0
80814,255696757.0
80110,16439328.0
80723,751888802.0
81041,1187727511.0
81426,43823359.0
80620,17099609.0
80526,98846601.0
81504,29308164.0
80005,29521114.0
81657,288012078.0
80513,170264616.0
80230,6442932.0
80304,23626703.0
80221,23527218.0
80721,223730398.0
80206,6379350.0
80030,6832691.0
80910,14985607.0
81227,951853.0
80517,767257321.0
80532,67132918.0
80543,81648589.0
80239,25871968.0
80501,32065047.0
80475,28069385.0
81303,557450510.0
80623,1721930.0
81638,434983876.0
80210,15718796.0
80622,34244043.0
80107,403715163.0
81062,618633388.0
81121,121229618.0
80455,89929628.0
80424,326129627.0
80106,455247568.0
80816,479752646.0
81615,66211364.0
81137,658537849.0
80524,327684060.0
81082,1547722074.0
81084,623875616.0
80134,145831459.0
81335,70232820.0
81232,4950749.0
80530,4918077.0
80802,1037427744.0
81624,1445020869.0
80809,130799648.0
80922,15498201.0
80825,1707533150.0
80204,14400268.0
80520,1043747.0
81523,855307931.0
80024,105884.0
80652,485346534.0
80504,253686973.0
80804,867607791.0
80736,294694717.0
80801,401656597.0
80135,852771580.0
80449,1536745657.0
80109,68316864.0
80612,421178219.0
80482,336139408.0
80137,270839261.0
80120,21497495.0
80528,49125642.0
80236,8323017.0
81501,20654254.0
80906,120835413.0
81418,53412961.0
81141,111559185.0
80456,599168329.0
80602,77890832.0
80705,704136.0
81091,1118990197.0
80293,15517.0
81029,1420920610.0
80840,74835366.0
81649,205023579.0
80025,30359215.0
80951,12056576.0
80238,12590640.0
80631,265319954.0
80754,546637034.0
81428,568018633.0
80434,74237155.0
80131,1954445.0
80917,16886345.0
80118,353632096.0
80427,37773322.0
80757,981446241.0
80864,644193547.0
80033,21454109.0
80420,102615669.0
80301,75139988.0
80938,8626308.0
80126,27781943.0
81641,4400251877.0
81125,697614505.0
80701,1573783662.0
80939,1396969.0
80467,595430006.0
80835,370915937.0
81251,227093359.0
80105,1291547404.0
81045,591324437.0
80247,7596442.0
80908,246944141.0
80834,743832672.0
81427,265613349.0
80745,569429438.0
80011,63843089.0
81049,3330117287.0
80433,212158264.0
80640,32883607.0
81058,134907240.0
80735,758543157.0
81432,707172272.0
81332,156624913.0
81057,135618879.0
80241,17108904.0
80759,1671505720.0
80007,66575186.0
80726,409179090.0
80116,223905469.0
80923,17706474.0
80751,1216843577.0
80019,63623745.0
81321,1090631446.0
81424,795401616.0
80818,748811725.0
80747,455639002.0
81642,360399809.0
81652,230484441.0
80130,16543909.0
80465,116700021.0
80447,608282335.0
81525,308544776.0
81149,2162574060.0
81052,1719082240.0
81090,1651535907.0
80654,588571727.0
81223,1032977962.0
81325,1476500095.0
81630,3300159996.0
80233,23570009.0
81030,976619.0
80611,996215713.0
80728,939260049.0
80907,25609319.0
80750,340238877.0
80928,851544772.0
80830,578422326.0
80012,20142891.0
80435,268622166.0
81131,812405978.0
80650,131364187.0
81224,403554855.0
81129,10953265.0
80514,17455077.0
80615,272626231.0
80741,589419746.0
80515,157013908.0
80829,55830400.0
80924,14123898.0
81126,50441745.0
81410,59202025.0
81222,79957771.0
81240,385175498.0
81138,58987213.0
81423,1277060982.0
81036,1947541206.0
81645,438646936.0
80902,37146123.0
80610,438907400.0
81133,965832508.0
81425,993029256.0
81330,169148406.0
81039,1528433322.0
80045,1735746.0
80535,114702126.0
80229,33025125.0
81055,666206658.0
80212,9249943.0
80742,1154882975.0
80758,1798088196.0
81654,228627129.0
81033,837884.0
80228,28468577.0
80133,79767103.0
80101,608207508.0
80511,276231.0
80108,92120010.0
81146,585065650.0
81403,1430902199.0
80744,336222646.0
80305,18639881.0
81520,53496565.0
80903,12528741.0
81252,1594798863.0
81610,804607159.0
81027,1604236717.0
80218,4136533.0
81144,732

2025-01-16 21:03:05 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:03:05 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:03:05 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:03:07 - snowflake.connector.cursor - INFO - Number of results in first chunk: 56
2025-01-16 21:03:07 - snowflake.connector.connection - INFO - closed
2025-01-16 21:03:07 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:03:07 - root - INFO - SQL:
SELECT DISTINCT "state_fips_code"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    LIMIT 1000;
Results:
state_fips_code
23
17
34
49
50
19
44
51
69
29
53
36
24
22
11
10
47
31
01
04
48
56
02
06
05
27
08
21
26
55
42
35
38
13
20
41
15
39
45
60
72
25
16
46
37
09
18
12
54
78
28
30
33
40
66
32

2025-01-16 21:03:07 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:03:07 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:03:07 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:03:09 - snowflake.connector.cursor - INFO - Number of results in first chunk: 60
2025-01-16 21:03:09 - snowflake.connector.connection - INFO - closed
2025-01-16 21:03:09 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:03:09 - root - INFO - SQL:
SELECT DISTINCT "state"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    LIMIT 1000;
Results:
state
AL
AK
AZ
AR
CA
CO
FL
GA
HI
ID
IN
IA
KY
LA
ME
MD
MA
MI
MN
MS
MO
NE
NH
NJ
NM
NY
ND
OR
SC
SD
TN
TX
OK
PR
AS
MH
MP
PW
RI
DC
MT
IL
KS
NV
NC
PA
UT
VT
VA
WA
WV
WI
WY
""
FM
GU
VI
DE
OH
CT

2025-01-16 21:03:09 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:03:09 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:03:09 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:03:11 - snowflake.connector.cursor - INFO - Number of results in first chunk: 132
2025-01-16 21:03:11 - snowflake.connector.connection - INFO - closed
2025-01-16 21:03:11 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:03:11 - root - INFO - SQL:
SELECT "institution_name", COUNT(*) AS "total_locations"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "institution_name"
    LIMIT 1000;
Results:
institution_name,total_locations
"Armed Forces Bank, National Association",3
The Huntington National Bank,33
U.S. Bank National Association,108
"Wells Fargo Bank, National Association",130
Integrity Bank & Trust,5
"UMB Bank, National Association",12
Adams Bank & Trust,10
ANB Bank,23
Independent Bank,34
The Central Trust Bank,4
5Star Bank,6
"JPMorgan Chase Bank, National Association",112
InBank,15
FirstBank,85
Kirkpatrick Bank,3
Bank of Colorado,50
"Zions Bancorporation, N.A.",34
Pikes Peak National Bank,4
Farmers State Bank of Calhan,3
The State Bank,5
The Pueblo Bank and Trust Company,11
Riverstone Bank,1
Four Corners Community Bank,3
First Southwest Bank,6
Farmers Bank,2
First FarmBank,4
Home Loan State Bank,2
Timberline Bank,3
High Plains Bank,6
Park State Bank & Trust,1
First Colorado National Bank,2
Century Savings and Loan Association,1
Del Norte Bank,2
FNB Bank,2
Commerce Bank,3
"Morgan Stanley Private Bank, National Association",1
State Bank of Downs,1
Open Bank,1
First American State Bank,1
The First National Bank of Las Animas,7
Stockmens Bank,2
Alpine Bank,44
First National Bank of Omaha,25
Bank of Estes Park,3
Bank of the West,69
Grand Valley Bank,5
"RG Bank, A Savings and Loan Association",3
Alamosa State Bank,2
Community State Bank,2
HTLF Bank,22
MNB BANK,1
Fowler State Bank,1
Champion Bank,2
RNB STATE BANK,1
The Northern Trust Company,1
"Native American Bank, National Association",1
NBH Bank,40
"BNY Mellon, National Association",1
"Bank of America, National Association",23
"PNC Bank, National Association",36
First Interstate Bank,20
"TBK BANK, SSB",40
Rocky Mountain Bank & Trust,2
Farmers & Stockmens Bank,2
The Eastern Colorado Bank,5
Points West Community Bank,10
Mountain Valley Bank,7
First Western Trust Bank,8
Bank of England,11
The Farmers State Bank of Brush,3
The Bank of Burlington,2
The Gunnison Bank and Trust Company,2
The First National Bank in Trinidad,4
Mountain View Bank of Commerce,1
Austin Capital Bank SSB,2
Evolve Bank & Trust,1
Yampa Valley Bank,2
KeyBank National Association,58
Waypoint Bank,2
Herring Bank,2
United Business Bank,11
Glacier Bank,24
First National Bank,5
Equitable Savings and Loan Association,10
The First National Bank of Fleming,1
Oakstar Bank,1
The Citizens State Bank of Ouray,5
"Golden Belt Bank, FSA",1
High Country Bank,5
Gunnison Savings and Loan Association,1
"GNBank, National Association",2
The First National Bank of Hugo,3
The Dolores State Bank,4
The Colorado Bank and Trust Company of La Junta,2
First-Citizens Bank & Trust Company,5
North Valley Bank,2
"BOKF, National Association",14
CoreFirst Bank & Trust,1
"United Fidelity Bank, fsb",2
Colorado Federal Savings Bank,1
First Fidelity Bank,1
FlatIrons Bank,3
"Transact Bank, National Association",1
MidWestOne Bank,1
Pacific Western Bank,1
Beal Bank USA,1
Young Americans Bank,2
Western Alliance Bank,1
CIBC National Trust Company,1
"First National Bank, Cortez",1
Redstone Bank,2
MidFirst Bank,5
Evergreen National Bank,3
Members Trust Company,1
American Bank of Commerce,2
AMG National Trust Bank,2
Bankers' Bank of the West,1
Verus Bank of Commerce,1
Wray State Bank,3
"Academy Bank, National Association",26
Gateway First Bank,1
FMS Bank,2
San Luis Valley Federal Bank,3
First Pioneer National Bank,2
Fortis Private Bank,3
The Bank of Denver,4
Solera National Bank,1
FirsTier Bank,3
Frontier Bank,8
"Sunflower Bank, National Association",12
FirstOak Bank,1
McClave State Bank,1

2025-01-16 21:03:11 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:03:11 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:03:11 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:03:13 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 21:03:13 - snowflake.connector.connection - INFO - closed
2025-01-16 21:03:13 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:03:13 - root - INFO - SQL:
SELECT DISTINCT "geo_id", "county_name"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    WHERE "state_fips_code" = '08'
    LIMIT 1000;
Results:
Too long, hard cut:
geo_id,county_name
080310030021,Denver County
080130136022,Boulder County
080410031006,El Paso County
080690005033,Larimer County
080310003024,Denver County
081010012002,Pueblo County
080590120331,Jefferson County
080350141301,Douglas County
080350141333,Douglas County
080590102113,Jefferson County
080130125052,Boulder County
080130132072,Boulder County
080590158002,Jefferson County
080310002021,Denver County
080130133062,Boulder County
081010001001,Pueblo County
080130134021,Boulder County
080010094092,Adams County
080130132083,Boulder County
080130125103,Boulder County
080310041011,Denver County
080590117114,Jefferson County
080490001002,Grand County
080350139101,Douglas County
080259696001,Crowley County
081230021022,Weld County
080310039022,Denver County
080010091013,Adams County
080590117011,Jefferson County
080010096082,Adams County
080050869001,Arapahoe County
080770013021,Mesa County
080859664005,Montrose County
080050055511,Arapahoe County
080759664002,Logan County
080990007002,Prowers County
080590120454,Jefferson County
080590120581,Jefferson County
080299650001,Delta County
080690017061,Larimer County
080970004021,Pitkin County
080350141373,Douglas County
080759663001,Logan County
080050067062,Arapahoe County
080410008001,El Paso County
080050056361,Arapahoe County
080690028013,Larimer County
080050814003,Arapahoe County
080050860001,Arapahoe County
080050803001,Arapahoe County
081010025001,Pueblo County
080970001003,Pitkin County
080590120243,Jefferson County
080410051052,El Paso County
080490002011,Grand County
081010028023,Pueblo County
080130127103,Boulder County
080010093161,Adams County
080350145033,Douglas County
080050056303,Arapahoe County
080299650002,Delta County
080310035001,Denver County
080839692001,Montezuma County
080590120601,Jefferson County
080050844001,Arapahoe County
080140304002,Broomfield County
081010031051,Pueblo County
080770002002,Mesa County
080010095011,Adams County
080519638001,Gunnison County
080010085421,Adams County
081010002001,Pueblo County
080639623001,Kit Carson County
080590102132,Jefferson County
080050056141,Arapahoe County
080590098242,Jefferson County
080130135082,Boulder County
080410028001,El Paso County
081010028022,Pueblo County
080310043065,Denver County
080410047013,El Paso County
080310069013,Denver County
080130134024,Boulder County
080310005023,Denver County
080140309001,Broomfield County
080690017065,Larimer County
080310050012,Denver County
080350139074,Douglas County
080679711002,La Plata County
080410037094,El Paso County
080310023002,Denver County
080010085504,Adams County
080050806002,Arapahoe County
080010093092,Adams County
080130122043,Boulder County
080410054001,El Paso County
080010093045,Adams County
080130132131,Boulder County
080410002023,El Paso County
080710002002,Las Animas County
080050056261,Arapahoe County
080050848001,Arapahoe County
080739617003,Lincoln County
080410039022,El Paso County
080310017013,Denver County
080590120224,Jefferson County
080050839002,Arapahoe County
080130125012,Boulder County
080410051062,El Paso County
080410045032,El Paso County
080410029004,El Paso County
080130609001,Boulder County
080130127083,Boulder County
081010023003,Pueblo County
080770015015,Mesa County
080690020071,Larimer County
081230025021,Weld County
081230010051,Weld County
080130135072,Boulder County
081059767003,Rio Grande County
081010028012,Pueblo County
080590106032,Jefferson County
080130134012,Boulder County
080690005042,Larimer County
080679404001,La Plata County
080639621002,Kit Carson County
080350141251,Douglas County
080130129071,Boulder County
080690011123,Larimer County
081259632002,Yuma County
080350141232,Douglas County
080310017014,Denver County
080410044022,El Paso County
080410004001,El Paso County
080130608002,Boulder County
080140309004,Broomfield County
080010080001,Adams County
080319800001,Denver County
080130127072,Boulder County
080590117262,Jefferson County
080590107021,Jefferson County
080350141282,Douglas County
080519637002,Gunnison County
081170004024,Summit County
080679711001,La Plata County
081010008003,Pueblo County
080310003021,Denver County
080739618002,Lincoln County
080559609003,Huerfano County
080310044032,Denver County
080690017042,Larimer County
080079404002,Archuleta County
080010087062,Adams County
080590115505,Jefferson County
080310002023,Denver County
081230025023,Weld County
080770014042,Mesa County
080690013051,Larimer County
080050060003,Arapahoe County
080310005011,Denver County
080219748001,Conejos County
080810005002,Moffat County
080010093072,Adams County
080010079002,Adams County
080050842002,Arapahoe County
081230013004,Weld County
080350141361,Douglas County
080310051041,Denver County
080770014041,Mesa County
080410075002,El Paso County
080050071012,Arapahoe County
080690019022,Larimer County
080050821003,Arapahoe County
080310029021,Denver County
081010009025,Pueblo County
080410068022,El Paso County
080310003034,Denver County
080350140082,Douglas County
080310034021,Denver Co

2025-01-16 21:03:13 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:03:13 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:03:13 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:03:15 - snowflake.connector.cursor - INFO - Number of results in first chunk: 525
2025-01-16 21:03:15 - snowflake.connector.connection - INFO - closed
2025-01-16 21:03:15 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:03:15 - root - INFO - SQL:
SELECT "zip_code", "city"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
    WHERE "state_code" = 'CO'
    LIMIT 1000;
Results:
Too long, hard cut:
zip_code,city
80521,Fort Collins city
80466,"Nederland town, St. Ann Highlands CDP, Eldora CDP, Bonanza Mountain Estates CDP"
80132,"Palmer Lake town, Monument town, Woodmoor CDP"
80214,"Denver city, Edgewater city, Lakewood city, Wheat Ridge city"
80909,Colorado Springs city
81633,Grand Junction
80550,"Timnath town, Windsor town, Severance town, Greeley city"
80860,"Victor city, Goldfield CDP"
80861,Vona town
81522,Gateway
81244,Rockvale town
81643,Mesa
80481,"Bark Ranch CDP, Ward town, Hidden Lake CDP"
80925,"Colorado Springs city, Security-Widefield CDP, Fountain city"
80014,"Denver city, Greenwood Village city, Aurora city"
80740,Lindon
81025,"Boone town, Pueblo city"
80805,Bethune town
80234,"Northglenn city, Westminster city, Federal Heights city, Broomfield city"
80812,Cope
80232,"Denver city, Lakewood city"
81324,Dove Creek town
80916,"Cimarron Hills CDP, Colorado Springs city"
80451,Hot Sulphur Springs town
80113,"Englewood city, Cherry Hills Village city"
80808,"Calhan town, Ellicott CDP"
81656,Woody Creek CDP
80913,Fort Carson CDP
81069,"Rye town, Colorado City CDP"
81524,"Fruita city, Loma CDP"
80749,Sedgwick town
81429,Grand Junction
80017,Aurora city
81327,Lewis CDP
81081,Trinchera
81221,Coal Creek town
81232,Salida
80530,Frederick town
80802,Arapahoe
81624,Collbran town
80809,"Colorado Springs city, Cascade-Chipita Park CDP, Green Mountain Falls town"
80922,"Cimarron Hills CDP, Colorado Springs city"
80825,Kit Carson town
80204,Denver city
80520,Firestone town
81523,Glade park
80024,Derby CDP
80652,Roggen
80504,"Frederick town, Erie town, Mead town, Longmont city, Niwot CDP, Firestone town"
80804,Arriba town
80736,"Padroni CDP, Iliff town"
80801,Anton
80135,"Westcreek CDP, Roxborough Park CDP, Louviers CDP, Sedalia CDP"
80449,Hartsel
80109,Castle Rock town
80612,Carr
80482,"Fraser town, Winter Park town"
80137,"Watkins CDP, Aurora city"
80120,"Englewood city, Highlands Ranch CDP, Littleton city"
80528,"Loveland city, Timnath town, Windsor town, Fort Collins city"
80236,"Denver city, Sheridan city"
81501,Grand Junction city
80906,"Colorado Springs city, Stratmoor CDP"
81418,"Orchard City town, Cedaredge town"
81121,Arboles CDP
80455,"Glendale CDP, Ward town, Gold Hill CDP, Jamestown town"
80424,"Blue River town, Breckenridge town"
80106,"Black Forest CDP, Elbert CDP"
80816,"Florissant CDP, Cripple Creek city"
81615,"Woody Creek CDP, Snowmass Village town"
81137,"Ignacio town, Young Place CDP, Southern Ute CDP, Arboles CDP"
80524,"Laporte CDP, Timnath town, Severance town, Fort Collins city"
81082,"Jansen CDP, El Moro CDP, Segundo CDP, Cokedale town, Valdez CDP, Trinidad city, Hoehne CDP, Starkville town"
81084,Two Buttes town
80134,"Castle Pines North city, Meridian CDP, Parker town, Castle Rock town, Grand View Estates CDP, Lone Tree city, The Pinery CDP, Stonegate CDP"
81335,Yellow jacket
81141,Manassa town
80456,Jefferson
80602,"Thornton city, Commerce City city, Brighton city, Todd Creek CDP"
80705,Log Lane Village town
81091,"Segundo CDP, Weston CDP, Stonewall Gap CDP"
80293,Denver city
81029,Campo town
80840,Air Force Academy CDP
81649,"Red Cliff town, Minturn town"
80025,"Boulder city, Eldorado Springs CDP"
80951,Colorado Springs city
80238,Denver city
80631,"Garden City town, Windsor town, Kersey town, Greeley city, Evans city"
80721,Amherst CDP
80206,Denver city
80030,"Westminster city, Arvada city, Berkley CDP"
80910,"Colorado Springs city, Stratmoor CDP"
81227,Garfield CDP
80517,Estes Park town
80532,Glen haven
80543,"Greeley city, Evans city, Johnstown town, Milliken town"
80239,Denver city
80501,Longmont city
80475,Denver
81303,Durango city
80623,Gilcrest town
81638,Hamilton
80210,Denver city
80622,Brighton
81641,Meeker town
81125,Center town
80701,"Log Lane Village town, Trail Side CDP, Morgan Heights CDP, Fort Morgan city, Saddle Ridge CDP, Blue Sky CDP"
80939,Colorado Springs
80467,Oak Creek town
80835,Simla town
81251,Twin Lakes CDP
80105,Deer Trail town
81045,Haswell town
80247,"Denver city, Aurora city"
80908,"Black Forest CDP, Colorado Springs city"
80834,Seibert town
81427,Ouray city
80745,Padroni CDP
80011,Aurora city
80621,"Frederick town, Fort Lupton city, Brighton city, Aristocrat Ranchettes CDP, Dacono city, Lochbuie town, Hudson town, Firestone town"
81038,Pueblo
81220,Cimarron
80219,Denver city
81020,"Lynn CDP, Aguilar town"
81007,"Pueblo city, Pueblo West CDP"
81655,"Avon town, Wolcott CDP"
80727,Eckley town
80525,"Loveland city, Timnath town, Fort Collins city"
80117,Kiowa town
80443,"Copper Mountain CDP, Frisco town"
80125,"Highlands Ranch CDP, Roxborough Park CDP, Louviers CDP"
80220,"Denver city, Aurora city"
81143,Moffat town
80224,Denver city
81526,Palisade town
81248,Sargents
80542,Mead town
80743,Otis town
80827,Lake george
81635,"Battlement Mesa CDP, Parachute town"
80138,"Parker town, Aurora city"
81023,Beulah Valley CDP
80634,"Windsor town, Greeley city, Evans city, Milliken town"
80023,"Thornton city, Westminster city, Broomfield city"
80419,Golden city

2025-01-16 21:03:15 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:03:15 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:03:15 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:03:17 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 21:03:17 - snowflake.connector.connection - INFO - closed
2025-01-16 21:03:17 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:03:17 - root - INFO - SQL:
SELECT "blockgroup_ce", "area_land_meters"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    WHERE "state_fips_code" = '08'
    LIMIT 1000;
Results:
Too long, hard cut:
blockgroup_ce,area_land_meters
5,575469
2,779472
4,318608
4,334763984
1,326386
1,2584910
3,513776
4,3533623
3,839224
2,1946224
2,301254
4,805537
2,2717330424
4,119878
2,2653566
1,484919
1,4330800
1,1633616
2,1509811
2,642938
2,932342
2,345268
2,675686
5,3946317
5,256797
5,326212
2,3820759
1,1838703
1,4192987
1,359429677
2,2320346
2,3531422
2,504743
2,380595
4,660325
1,16764091
2,631561734
1,688172
1,638384
1,345650387
3,552657
2,26924710
2,371954
2,10175400
1,4623224
1,762186603
1,755145
4,581592
1,933760
3,587936
3,253260
1,25212220
3,410942533
2,497647
2,822898
2,666706
2,3132655
3,55840549
1,635599
3,754463
4,993729
3,259394
2,590852
3,616954
1,15204509
3,1018141
3,1262025
3,1849938
1,1034278
4,1334963
3,1514376
1,30251676
2,831967
2,759036
1,367176
1,1080355
2,657530
1,612253
1,611466
1,560605
2,1223451
3,280364
2,263220936
2,214922598
3,278856
3,408425
2,652868
3,1582999
1,1345445
4,2758722
2,72066156
3,3383382
3,31682917
2,8908081
2,6643780
1,71457764
7,56067582
2,745770
4,654171
1,3778678
2,5877843
3,919693
3,256647
1,109783
3,454021
3,387733
2,1387900
4,605049
3,53025987
2,4850777
4,117335
1,464621836
3,1241785
1,18169316
2,1815315
6,3397190
4,277951
1,678027
1,788893
2,7346498
4,300162986
1,91193492
2,198898123
3,543557
2,402274
4,1924748
3,1151583
4,399881290
4,249600
2,636815
2,996771
1,8587938
1,1810546
1,36999818
4,3550422
2,1097632
2,1853058
2,3445567
3,10493676
2,92816644
2,828304
1,1112298
1,2437384
2,302707
1,2072575731
2,474638
2,275010
1,640518
2,75095890
5,246586
3,78360344
2,209760700
1,396149
1,1350704
4,163130693
2,1820105
1,583728
3,370617
2,1101920
1,807589
3,5378803
1,1495885
2,491845
2,4785104
1,4307833
1,1404381
3,1289496
1,427233
3,596775
1,616292
3,361686
2,267751
1,1469920
1,2542630
4,15873839
1,509839
3,1048334
2,144125320
3,1679101
2,532725
2,17144687
2,2069654
2,216193
4,1543247
1,791319
1,1282453
2,44411454
2,124313697
2,469232379
1,2926149
1,875089
2,934821
1,878831935
3,144424787
2,625149
1,1119620
3,1354545
1,605413
2,81489914
1,1292500
5,493399
2,431520
3,315430
2,3436607
1,3344103
1,3247721
2,672982
2,3666504
2,535366
1,9723384
1,61913335
3,2701244
2,1086735
1,953750
2,141258691
3,2705582
1,491998
1,3634704
4,700567
2,157040846
3,499477
2,330301
4,711689
1,286753387
2,4083330
3,1686119
2,826854
1,96577375
2,262233
3,552776
3,626719
3,969709
1,19318124
2,2243259
2,244788
4,65604931
1,38537819
1,1168485
3,446457
1,605380
1,292413
3,488297
3,4211181
3,570406
1,2121531
2,513093
2,717994
2,16019281
2,5658710
1,411300
2,1268207
2,320192
1,918845
1,2105420
1,8440936
3,418813
2,272474
1,19221489
1,439213
2,10330260
1,19649983
1,624967
2,487673
1,1340283
2,103877880
2,1141882
1,988194
1,352561
1,3141834562
3,385195934
1,778873
3,449154
2,509658
2,1339440
1,3995924
2,3262003
1,887042
1,2168754
2,2589708
1,2407317800
2,38755599
1,550046
1,10156735
2,372513
3,291960995
2,366766
1,2416158
1,438580
2,415277
3,321635
1,1111977
1,1804229
4,397496
4,555299
2,538843
1,231889483
1,287354
4,238681
1,157730
2,656100
1,1098190
3,22402395
1,1277105785
1,6632908
1,705685
3,1472222
1,658128
2,20744928
2,1582093
2,8771923
2,170814109
4,579945
5,1698916
2,1539441
2,635340
1,574396
3,356512
1,6883393
1,39773850
2,180206
3,365354
2,441093
3,9029885
1,281036839
2,491792
1,726399
2,773639
1,718315
3,2124580
5,493165
5,1260984
1,9482330
3,387276
2,721303
2,1013924
4,374963
3,570174
2,2507753
2,4910853
3,517990
2,12530867
3,575380
4,326898
1,2894879
1,1269840
1,2772108
2,3313945
4,2518597
2,345594552
5,216082
4,1449522
2,641933
2,383872
1,8793266
2,279678
3,535918
2,649022
1,114697630
1,1014147
1,1330411
1,4217184
2,996483
2,444516
1,780485
2,417508
3,291649
3,169442
1,1850445
1,3889952
3,414670
3,88201749
1,450108
4,8020608
1,621765
1,1580379
2,2581114
3,327636
6,238390
2,1755782
3,1599229
3,850048
4,3475560
6,1091528
1,83950546
1,764067
3,35711089
2,564722
1,549569812
1,6935493
2,16192928
2,554688
2,349478
4,1056208
2,2254037
1,528151
3,51908058
1,477572
1,2588636
1,221719973
1,3734323
1,1572242
2,605112
1,691505
3,486561
1,3640929
3,461361
1,472766
3,660719
1,290704
2,1689714
1,362641
2,814632
1,295418
2,1124267
1,1329426
5,435240
2,857516
2,49533313
6,726573
2,125365758
2,7831682
3,890589
1,343946
3,446125
1,814771
1,922569
3,611458
2,464032
1,16298307
1,613221
2,5677838
4,212875
1,514197
2,13007287
1,1401973
2,417609
5,1782687
2,429228950
2,7310817
1,2128913
1,31435161
3,792965
6,324983
3,15829374
2,1460976
2,2547090
2,486912
4,325502
2,649213
3,996150
2,10570332
1,5970825
2,3240501
1,6445892
3,9838404
2,655708
2,119392
2,400983
1,499875
2,618038
1,35079738
3,475158
2,673968
2,1785709
2,459737
1,1405887
1,599989
4,30589571
2,403393
2,739907
3,654145
1,499769
1,823633
1,282991986
3,608622
3,329154
3,7400466
3,490031
2,391181
1,1509661
1,662814
1,939239739
1,3463303
2,298074
4,685914
4,491929
4,431047
3,776717
2,719671
1,30569153
5,331326
3,5542536
3,245626
2,642025
4,641341
3,648671
2,859639
3,448529344
3,41329977
3,488491936
4,1309246
1,505479
1,570732826
3,5325981
2,1955111995
4,519292
1,660644

2025-01-16 21:03:17 - root - INFO - itercount: 0
2025-01-16 21:03:17 - root - INFO - Database Name: FDA
Schema Name: CENSUS_UTILITY
DDL describes table information.
,0
table_name,FIPS_CLASS_CODE
description,
DDL,"create or replace TABLE FIPS_CLASS_CODE (
	""fips_class_code"" VARCHAR(16777216),
	""code_description"" VARCHAR(16777216)
);"

,1
table_name,FUNCTIONAL_STATUS_CODES
description,
DDL,"create or replace TABLE FUNCTIONAL_STATUS_CODES (
	""functional_status_code"" VARCHAR(16777216),
	""code_description"" VARCHAR(16777216),
	""associated_geographic_entity"" VARCHAR(16777216)
);"

,2
table_name,MTFCC_FEATURE_CLASS_CODES
description,
DDL,"create or replace TABLE MTFCC_FEATURE_CLASS_CODES (
	""feature_class_code"" VARCHAR(16777216),
	""feature_class"" VARCHAR(16777216),
	""superclass"" VARCHAR(16777216),
	""point"" BOOLEAN,
	""linear"" BOOLEAN,
	""areal"" BOOLEAN,
	""description"" VARCHAR(16777216)
);"

,3
table_name,FIPS_CODES_ALL
description,
DDL,"create or replace TABLE FIPS_CODES_ALL (
	""summary_level"" VARCHAR(16777216),
	""summary_level_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_subdivision_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""consolidated_city_fips_code"" VARCHAR(16777216),
	""area_name"" VARCHAR(16777216)
);"

,4
table_name,LSAD_CODES
description,
DDL,"create or replace TABLE LSAD_CODES (
	""lsad_code"" VARCHAR(16777216),
	""lsad_description"" VARCHAR(16777216),
	""associated_geographic_entities"" VARCHAR(16777216)
);"

,5
table_name,FIPS_CODES_STATES
description,
DDL,"create or replace TABLE FIPS_CODES_STATES (
	""state_fips_code"" VARCHAR(16777216),
	""state_postal_abbreviation"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""state_gnisid"" VARCHAR(16777216)
);"

Database Name: FDA
Schema Name: FDA_FOOD
DDL describes table information.
,0
table_name,FOOD_ENFORCEMENT
description,
DDL,"create or replace TABLE FOOD_ENFORCEMENT (
	""classification"" VARCHAR(16777216),
	""center_classification_date"" DATE,
	""report_date"" DATE,
	""postal_code"" VARCHAR(16777216),
	""termination_date"" DATE,
	""recall_initiation_date"" DATE,
	""recall_number"" VARCHAR(16777216),
	""city"" VARCHAR(16777216),
	""event_id"" NUMBER(38,0),
	""distribution_pattern"" VARCHAR(16777216),
	""recalling_firm"" VARCHAR(16777216),
	""voluntary_mandated"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""reason_for_recall"" VARCHAR(16777216),
	""initial_firm_notification"" VARCHAR(16777216),
	""status"" VARCHAR(16777216),
	""product_type"" VARCHAR(16777216),
	""country"" VARCHAR(16777216),
	""product_description"" VARCHAR(16777216),
	""code_info"" VARCHAR(16777216),
	""address_1"" VARCHAR(16777216),
	""address_2"" VARCHAR(16777216),
	""product_quantity"" VARCHAR(16777216),
	""more_code_info"" VARCHAR(16777216)
);"

,1
table_name,FOOD_EVENTS
description,
DDL,"create or replace TABLE FOOD_EVENTS (
	""report_number"" VARCHAR(16777216),
	""reactions"" VARCHAR(16777216),
	""outcomes"" VARCHAR(16777216),
	""products_brand_name"" VARCHAR(16777216),
	""products_industry_code"" VARCHAR(16777216),
	""products_role"" VARCHAR(16777216),
	""products_industry_name"" VARCHAR(16777216),
	""date_created"" DATE,
	""date_started"" DATE,
	""consumer_gender"" VARCHAR(16777216),
	""consumer_age"" FLOAT,
	""consumer_age_unit"" VARCHAR(16777216)
);"

Database Name: FDA
Schema Name: FDIC_BANKS
DDL describes table information.
,0
table_name,INSTITUTIONS
description,
DDL,"create or replace TABLE INSTITUTIONS (
	""fdic_certificate_number"" VARCHAR(16777216),
	""institution_name"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""fdic_id"" VARCHAR(16777216),
	""docket"" VARCHAR(16777216),
	""active"" BOOLEAN,
	""address"" VARCHAR(16777216),
	""total_assets"" NUMBER(38,0),
	""bank_charter_class"" VARCHAR(16777216),
	""change_code_1"" VARCHAR(16777216),
	""change_code_2"" VARCHAR(16777216),
	""change_code_3"" VARCHAR(16777216),
	""change_code_4"" VARCHAR(16777216),
	""change_code_5"" VARCHAR(16777216),
	""change_code_6"" VARCHAR(16777216),
	""change_code_7"" VARCHAR(16777216),
	""change_code_8"" VARCHAR(16777216),
	""change_code_9"" VARCHAR(16777216),
	""change_code_10"" VARCHAR(16777216),
	""change_code_11"" VARCHAR(16777216),
	""change_code_12"" VARCHAR(16777216),
	""change_code_13"" VARCHAR(16777216),
	""change_code_14"" VARCHAR(16777216),
	""change_code_15"" VARCHAR(16777216),
	""occ_charter"" VARCHAR(16777216),
	""chartering_agency"" VARCHAR(16777216),
	""conservatorship"" BOOLEAN,
	""city"" VARCHAR(16777216),
	""category_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""established_date"" DATE,
	""last_updated"" DATE,
	""effective_date"" DATE,
	""end_effective_date"" DATE,
	""denovo_institute"" BOOLEAN,
	""total_deposits"" NUMBER(38,0),
	""equity_capital"" NUMBER(38,0),
	""fdic_geo_region"" VARCHAR(16777216),
	""fdic_supervisory_region"" VARCHAR(16777216),
	""fdic_supervisory_region_code"" VARCHAR(16777216),
	""fed_reserve_district"" VARCHAR(16777216),
	""fed_reserve_district_id"" VARCHAR(16777216),
	""fed_reserve_unique_id"" VARCHAR(16777216),
	""federal_charter"" BOOLEAN,
	""fdic_field_office"" VARCHAR(16777216),
	""iba"" BOOLEAN,
	""inactive_flag"" BOOLEAN,
	""insurance_fund_membership"" VARCHAR(16777216),
	""secondary_insurance_fund"" VARCHAR(16777216),
	""deposit_insurance_date"" DATE,
	""credit_card_institution"" BOOLEAN,
	""bank_insurance_fund_member"" BOOLEAN,
	""insured_commercial_bank"" BOOLEAN,
	""deposit_insurance_fund_member"" BOOLEAN,
	""fdic_insured"" BOOLEAN,
	""saif_insured"" BOOLEAN,
	""insured_savings_institute"" BOOLEAN,
	""new_cert_number"" VARCHAR(16777216),
	""oakar_institute"" BOOLEAN,
	""ots_region"" VARCHAR(16777216),
	""last_structural_change"" DATE,
	""qbp_region"" VARCHAR(16777216),
	""regulator"" VARCHAR(16777216),
	""report_date"" DATE,
	""reporting_period_end_date"" DATE,
	""state_chartered"" BOOLEAN,
	""return_on_assets"" FLOAT,
	""roa_quarterly"" FLOAT,
	""roa_pretax"" FLOAT,
	""row_pretax_quarterly"" FLOAT,
	""return_on_equity"" FLOAT,
	""roe_quarterly"" FLOAT,
	""run_date"" DATE,
	""sasser_institute"" BOOLEAN,
	""law_sasser"" BOOLEAN,
	""state"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""trade_name_1"" VARCHAR(16777216),
	""trade_name_2"" VARCHAR(16777216),
	""trade_name_3"" VARCHAR(16777216),
	""trade_name_4"" VARCHAR(16777216),
	""trade_name_5"" VARCHAR(16777216),
	""trade_name_6"" VARCHAR(16777216),
	""zip_code"" VARCHAR(16777216),
	""occ_district"" VARCHAR(16777216),
	""ultimate_cert_number"" VARCHAR(16777216),
	""cfpb_supervisory_flag"" BOOLEAN,
	""cfpb_supervisory_start_date"" DATE,
	""cfpb_supervisory_end_date"" DATE,
	""offices_count"" NUMBER(38,0),
	""parent_fdic_cert"" VARCHAR(16777216),
	""parent_parcert"" VARCHAR(16777216),
	""high_holder_city"" VARCHAR(16777216),
	""total_domestic_deposits"" NUMBER(38,0),
	""ffiec_call_report_filer"" BOOLEAN,
	""holding_company_flag"" BOOLEAN,
	""ag_lending_flag"" BOOLEAN,
	""ownership_type"" VARCHAR(16777216),
	""top_holder"" VARCHAR(16777216),
	""net_income"" NUMBER(38,0),
	""quarterly_net_income"" NUMBER(38,0),
	""office_count_domestic"" NUMBER(38,0),
	""office_count_foreign"" NUMBER(38,0),
	""office_count_us_territories"" NUMBER(38,0),
	""rssd_id"" VARCHAR(16777216),
	""holding_company_state"" VARCHAR(16777216),
	""subchap_s_indicator"" BOOLEAN,
	""trust_powers_status"" VARCHAR(16777216),
	""asset_concentration_hierarchy"" VARCHAR(16777216),
	""primary_specialization"" VARCHAR(16777216),
	""csa_name"" VARCHAR(16777216),
	""csa_fips_code"" VARCHAR(16777216),
	""csa_indicator"" BOOLEAN,
	""cbsa_name"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""cbsa_metro_flag"" BOOLEAN,
	""cbsa_micro_flag"" BOOLEAN,
	""cbsa_division_name"" VARCHAR(16777216),
	""cbsa_division_fips_code"" VARCHAR(16777216),
	""cbsa_division_flag"" BOOLEAN
);"

,1
table_name,LOCATIONS
description,
DDL,"create or replace TABLE LOCATIONS (
	""fdic_certificate_number"" VARCHAR(16777216),
	""institution_name"" VARCHAR(16777216),
	""branch_name"" VARCHAR(16777216),
	""branch_number"" VARCHAR(16777216),
	""main_office"" BOOLEAN,
	""branch_address"" VARCHAR(16777216),
	""branch_city"" VARCHAR(16777216),
	""zip_code"" VARCHAR(16777216),
	""branch_county"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""institution_class"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""cbsa_name"" VARCHAR(16777216),
	""cbsa_division_flag"" BOOLEAN,
	""cbsa_division_fips_code"" NUMBER(38,0),
	""cbsa_division_name"" VARCHAR(16777216),
	""cbsa_metro_flag"" BOOLEAN,
	""cbsa_metro_fips_code"" VARCHAR(16777216),
	""cbsa_metro_name"" VARCHAR(16777216),
	""cbsa_micro_flag"" BOOLEAN,
	""csa_flag"" BOOLEAN,
	""csa_fips_code"" VARCHAR(16777216),
	""csa_name"" VARCHAR(16777216),
	""date_established"" DATE,
	""fdic_uninum"" VARCHAR(16777216),
	""last_updated"" DATE,
	""service_type"" VARCHAR(16777216),
	""branch_fdic_uninum"" VARCHAR(16777216)
);"

Database Name: FDA
Schema Name: GEO_CENSUS_BLOCKGROUPS
DDL describes table information.
,0
table_name,BLOCKGROUPS_04
description,
DDL,"create or replace TABLE BLOCKGROUPS_04 (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""blockgroup_ce"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""blockgroup_geom"" BINARY(8388608)
);"

Some other tables have the similar structure: ['BLOCKGROUPS_04', 'BLOCKGROUPS_08', 'BLOCKGROUPS_13', 'BLOCKGROUPS_16', 'BLOCKGROUPS_20', 'BLOCKGROUPS_23', 'BLOCKGROUPS_25', 'BLOCKGROUPS_31', 'BLOCKGROUPS_32', 'BLOCKGROUPS_39', 'BLOCKGROUPS_54', 'BLOCKGROUPS_29', 'BLOCKGROUPS_48', 'BLOCKGROUPS_19', 'BLOCKGROUPS_49', 'BLOCKGROUPS_24', 'BLOCKGROUPS_06', 'BLOCKGROUPS_09', 'BLOCKGROUPS_10', 'BLOCKGROUPS_18', 'BLOCKGROUPS_26', 'BLOCKGROUPS_36', 'BLOCKGROUPS_66', 'BLOCKGROUPS_40', 'BLOCKGROUPS_41', 'BLOCKGROUPS_01', 'BLOCKGROUPS_11', 'BLOCKGROUPS_12', 'BLOCKGROUPS_17', 'BLOCKGROUPS_30', 'BLOCKGROUPS_47', 'BLOCKGROUPS_53', 'BLOCKGROUPS_55', 'BLOCKGROUPS_33', 'BLOCKGROUPS_45', 'BLOCKGROUPS_51', 'BLOCKGROUPS_72', 'BLOCKGROUPS_02', 'BLOCKGROUPS_05', 'BLOCKGROUPS_15', 'BLOCKGROUPS_21', 'BLOCKGROUPS_22', 'BLOCKGROUPS_28', 'BLOCKGROUPS_34', 'BLOCKGROUPS_35', 'BLOCKGROUPS_37', 'BLOCKGROUPS_38', 'BLOCKGROUPS_42', 'BLOCKGROUPS_44', 'BLOCKGROUPS_50', 'BLOCKGROUPS_56', 'BLOCKGROUPS_60', 'BLOCKGROUPS_69', 'BLOCKGROUPS_78', 'BLOCKGROUPS_27', 'BLOCKGROUPS_46']
,1
table_name,US_BLOCKGROUPS_NATIONAL
description,
DDL,"create or replace TABLE US_BLOCKGROUPS_NATIONAL (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""blockgroup_ce"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""blockgroup_geom"" BINARY(8388608)
);"

Database Name: FDA
Schema Name: GEO_US_BOUNDARIES
DDL describes table information.
,0
table_name,ADJACENT_COUNTIES
description,
DDL,"create or replace TABLE ADJACENT_COUNTIES (
	""county"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""neighbors"" VARIANT,
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

,1
table_name,ADJACENT_STATES
description,
DDL,"create or replace TABLE ADJACENT_STATES (
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

,2
table_name,CBSA
description,
DDL,"create or replace TABLE CBSA (
	""geo_id"" VARCHAR(16777216),
	""csa_geo_id"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""msa_indicator"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""cbsa_geom"" BINARY(8388608)
);"

,3
table_name,CNECTA
description,
DDL,"create or replace TABLE CNECTA (
	""geo_id"" VARCHAR(16777216),
	""cnecta_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""cnecta_geom"" BINARY(8388608)
);"

,4
table_name,COASTLINE
description,
DDL,"create or replace TABLE COASTLINE (
	""name"" VARCHAR(16777216),
	""coastline_geom"" BINARY(8388608)
);"

,5
table_name,CONGRESS_DISTRICT_115
description,
DDL,"create or replace TABLE CONGRESS_DISTRICT_115 (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""district_fips_code"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""congress_session"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" BOOLEAN,
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""district_geom"" BINARY(8388608)
);"

Some other tables have the similar structure: ['CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116']
,6
table_name,COUNTIES
description,
DDL,"create or replace TABLE COUNTIES (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_gnis_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""csa_fips_code"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""met_div_fips_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""county_geom"" BINARY(8388608)
);"

,7
table_name,NATIONAL_OUTLINE
description,
DDL,"create or replace TABLE NATIONAL_OUTLINE (
	""us_outline_geom"" BINARY(8388608),
	""aff_geo_id"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""name"" VARCHAR(16777216)
);"

,8
table_name,RAILWAYS
description,
DDL,"create or replace TABLE RAILWAYS (
	""geo_id"" NUMBER(38,0),
	""full_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""railway_geom"" VARCHAR(16777216)
);"

,9
table_name,STATES
description,
DDL,"create or replace TABLE STATES (
	""geo_id"" VARCHAR(16777216),
	""region_code"" VARCHAR(16777216),
	""division_code"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_gnis_code"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""state_geom"" BINARY(8388608)
);"

,10
table_name,CSA
description,
DDL,"create or replace TABLE CSA (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""msa_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""csa_geom"" BINARY(8388608)
);"

,11
table_name,METROPOLITAN_DIVISIONS
description,
DDL,"create or replace TABLE METROPOLITAN_DIVISIONS (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""cbsa_code"" VARCHAR(16777216),
	""metdiv_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""metdiv_geom"" BINARY(8388608)
);"

,12
table_name,NWS_FORECAST_REGIONS
description,
DDL,"create or replace TABLE NWS_FORECAST_REGIONS (
	""state"" VARCHAR(16777216),
	""cwa"" VARCHAR(16777216),
	""time_zone"" VARCHAR(16777216),
	""fe_area"" VARCHAR(16777216),
	""zone"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""state_zone"" VARCHAR(16777216),
	""lon"" FLOAT,
	""lat"" FLOAT,
	""shortname"" VARCHAR(16777216),
	""shape_geometry"" BINARY(8388608)
);"

,13
table_name,URBAN_AREAS
description,
DDL,"create or replace TABLE URBAN_AREAS (
	""geo_id"" VARCHAR(16777216),
	""urban_area_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""area_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""urban_area_geom"" BINARY(8388608)
);"

,14
table_name,ZIP_CODES
description,
DDL,"create or replace TABLE ZIP_CODES (
	""zip_code"" VARCHAR(16777216),
	""city"" VARCHAR(16777216),
	""county"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_code"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""zip_code_geom"" BINARY(8388608)
);"

External knowledge that might be helpful: 
# Calculation Method: Overlap Ratio and Bank Location Data

This document describes the method used to calculate the number of bank institutions per postal code area (ZIP code) by combining geospatial data and bank location data, focusing on the overlap between postal code areas and census block groups.

## 1. Geospatial Intersection of Postal Code Areas and Census Block Groups
We are using two geographical units:
- **ZIP Code Areas**: Represented by geometries from the ZIP code boundaries dataset.
- **Census Block Groups**: Represented by geometries from the national census block groups dataset.

### Key Calculation:
- The method calculates the area of overlap between each ZIP code's geometry and each block group's geometry.
- The ratio of this intersection area to the total block group area is computed as the **overlap ratio**.

This overlap ratio represents the proportion of a block group that falls within a given ZIP code.

## 2. Bank Location Distribution Based on Overlap Ratio
The next step involves distributing the number of bank locations to the overlapping census block groups based on the calculated overlap ratio.

### Key Calculation:
- For each block group, the number of bank locations is proportionally assigned based on the overlap size. The total number of bank locations in a ZIP code is distributed to the block groups using the overlap ratio.

This provides the number of bank institutions for each block group, adjusted for the overlap with ZIP code areas.

## 3. Aggregation by ZIP Code Area
Finally, the results are aggregated by ZIP code to determine which postal code has the highest number of bank institutions.

### Key Calculation:
- The process involves grouping by ZIP code and finding the maximum number of bank locations per block group.

The table structure information is ({database name: {schema name: {table name}}}): 
{'FDA': {'CENSUS_UTILITY': ['FIPS_CLASS_CODE', 'FIPS_CODES_ALL', 'FIPS_CODES_STATES', 'FUNCTIONAL_STATUS_CODES', 'LSAD_CODES', 'MTFCC_FEATURE_CLASS_CODES'], 'FDA_FOOD': ['FOOD_ENFORCEMENT', 'FOOD_EVENTS'], 'FDIC_BANKS': ['INSTITUTIONS', 'LOCATIONS'], 'GEO_CENSUS_BLOCKGROUPS': ['BLOCKGROUPS_01', 'BLOCKGROUPS_02', 'BLOCKGROUPS_04', 'BLOCKGROUPS_05', 'BLOCKGROUPS_06', 'BLOCKGROUPS_08', 'BLOCKGROUPS_09', 'BLOCKGROUPS_10', 'BLOCKGROUPS_11', 'BLOCKGROUPS_12', 'BLOCKGROUPS_13', 'BLOCKGROUPS_15', 'BLOCKGROUPS_16', 'BLOCKGROUPS_17', 'BLOCKGROUPS_18', 'BLOCKGROUPS_19', 'BLOCKGROUPS_20', 'BLOCKGROUPS_21', 'BLOCKGROUPS_22', 'BLOCKGROUPS_23', 'BLOCKGROUPS_24', 'BLOCKGROUPS_25', 'BLOCKGROUPS_26', 'BLOCKGROUPS_27', 'BLOCKGROUPS_28', 'BLOCKGROUPS_29', 'BLOCKGROUPS_30', 'BLOCKGROUPS_31', 'BLOCKGROUPS_32', 'BLOCKGROUPS_33', 'BLOCKGROUPS_34', 'BLOCKGROUPS_35', 'BLOCKGROUPS_36', 'BLOCKGROUPS_37', 'BLOCKGROUPS_38', 'BLOCKGROUPS_39', 'BLOCKGROUPS_40', 'BLOCKGROUPS_41', 'BLOCKGROUPS_42', 'BLOCKGROUPS_44', 'BLOCKGROUPS_45', 'BLOCKGROUPS_46', 'BLOCKGROUPS_47', 'BLOCKGROUPS_48', 'BLOCKGROUPS_49', 'BLOCKGROUPS_50', 'BLOCKGROUPS_51', 'BLOCKGROUPS_53', 'BLOCKGROUPS_54', 'BLOCKGROUPS_55', 'BLOCKGROUPS_56', 'BLOCKGROUPS_60', 'BLOCKGROUPS_66', 'BLOCKGROUPS_69', 'BLOCKGROUPS_72', 'BLOCKGROUPS_78', 'US_BLOCKGROUPS_NATIONAL'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'ADJACENT_STATES', 'CBSA', 'CNECTA', 'COASTLINE', 'CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116', 'COUNTIES', 'CSA', 'METROPOLITAN_DIVISIONS', 'NATIONAL_OUTLINE', 'NWS_FORECAST_REGIONS', 'RAILWAYS', 'STATES', 'URBAN_AREAS', 'ZIP_CODES']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

1. **Table:** `FDA.FDIC_BANKS.LOCATIONS`
   - **Column:** `"zip_code"`
     - *Potential Usage:* Identifies the ZIP codes where bank locations are situated. Used to count bank locations per ZIP code.
     - *Condition:* Filter banks located in Colorado using `"state" = 'CO'`.
   - **Column:** `"state"`
     - *Potential Usage:* Specifies the state where each bank location is found. Essential for filtering Colorado bank locations.
   - **Column:** `"fdic_certificate_number"`
     - *Potential Usage:* Unique identifier for each bank institution. Used to count distinct bank locations.
   - **Column:** `"branch_address"`, `"branch_city"`, `"branch_county"`
     - *Potential Usage:* Provides additional location details that might be useful for geocoding or verification.

2. **Table:** `FDA.GEO_US_BOUNDARIES.ZIP_CODES`
   - **Column:** `"zip_code"`
     - *Potential Usage:* Identifies ZIP code areas. Used to link with bank locations and block groups.
   - **Column:** `"zip_code_geom"`
     - *Potential Usage:* Contains the geometric shape of each ZIP code area. Used to calculate overlap with block groups.
   - **Column:** `"state_code"`
     - *Potential Usage:* Indicates the state of each ZIP code. Used to select ZIP codes within Colorado (`"state_code" = 'CO'`).

3. **Table:** `FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL`
   - **Column:** `"blockgroup_geom"`
     - *Potential Usage:* Contains the geometric shape of each census block group. Used to calculate overlap with ZIP code areas.
   - **Column:** `"state_fips_code"`
     - *Potential Usage:* Identifies the state using FIPS codes. Colorado's FIPS code is `'08'`; used to select block groups within Colorado.
   - **Column:** `"blockgroup_ce"`
     - *Potential Usage:* Unique identifier for each block group. Useful for aggregating data.

**Possible Conditions:**

- **Filter for Colorado Data:**
  - In `LOCATIONS`: `"state" = 'CO'`
  - In `ZIP_CODES`: `"state_code" = 'CO'`
  - In `US_BLOCKGROUPS_NATIONAL`: `"state_fips_code" = '08'`

---

**SQL Queries to Understand Related Data:**

1. **List all unique ZIP codes in Colorado from bank locations:**
   ```sql
   SELECT DISTINCT "zip_code"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 1000;
   ```

2. **Count the number of bank locations per ZIP code in Colorado:**
   ```sql
   SELECT "zip_code", COUNT(*) AS "bank_location_count"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   GROUP BY "zip_code"
   LIMIT 1000;
   ```

3. **Retrieve geometries of Colorado ZIP codes:**
   ```sql
   SELECT "zip_code", "zip_code_geom"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 1000;
   ```

4. **List all block groups in Colorado:**
   ```sql
   SELECT DISTINCT "geo_id", "blockgroup_ce"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
   ```

5. **Retrieve geometries of Colorado block groups:**
   ```sql
   SELECT "geo_id", "blockgroup_geom"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
   ```

6. **Get internal point coordinates of Colorado ZIP codes:**
   ```sql
   SELECT "zip_code", "internal_point_lat", "internal_point_lon"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 1000;
   ```

7. **Retrieve area of Colorado ZIP codes:**
   ```sql
   SELECT "zip_code", "area_land_meters"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 1000;
   ```

8. **List bank locations in Colorado with addresses:**
   ```sql
   SELECT "fdic_certificate_number", "institution_name", "branch_address", "zip_code"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 1000;
   ```

9. **Get internal point coordinates of Colorado block groups:**
   ```sql
   SELECT "geo_id", "internal_point_lat", "internal_point_lon"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
   ```

10. **List Colorado ZIP codes along with county names:**
    ```sql
    SELECT DISTINCT "zip_code", "county"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
    WHERE "state_code" = 'CO'
    LIMIT 1000;
    ```

11. **Count distinct bank institutions per ZIP code in Colorado:**
    ```sql
    SELECT "zip_code", COUNT(DISTINCT "fdic_certificate_number") AS "bank_institution_count"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
    LIMIT 1000;
    ```

12. **Retrieve FIPS codes and names of Colorado counties:**
    ```sql
    SELECT DISTINCT "county_fips_code", "county_name"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    WHERE "state_fips_code" = '08'
    LIMIT 1000;
    ```

13. **Get total area of all block groups in Colorado:**
    ```sql
    SELECT SUM("area_land_meters") AS "total_land_area_meters"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    WHERE "state_fips_code" = '08';
    ```

14. **List ZIP codes with their corresponding area in block groups:**
    ```sql
    SELECT "zip_code", "area_land_meters"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
    WHERE "state_code" = 'CO'
    LIMIT 1000;
    ```

15. **Identify the state FIPS codes available in block groups:**
    ```sql
    SELECT DISTINCT "state_fips_code"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    LIMIT 1000;
    ```

16. **List all states in the LOCATIONS table:**
    ```sql
    SELECT DISTINCT "state"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    LIMIT 1000;
    ```

17. **Retrieve bank institutions' names and their total locations in Colorado:**
    ```sql
    SELECT "institution_name", COUNT(*) AS "total_locations"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "institution_name"
    LIMIT 1000;
    ```

18. **Get block groups with their associated county names in Colorado:**
    ```sql
    SELECT DISTINCT "geo_id", "county_name"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    WHERE "state_fips_code" = '08'
    LIMIT 1000;
    ```

19. **List ZIP codes and their corresponding city names in Colorado:**
    ```sql
    SELECT "zip_code", "city"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
    WHERE "state_code" = 'CO'
    LIMIT 1000;
    ```

20. **Retrieve the block group codes and their land areas in Colorado:**
    ```sql
    SELECT "blockgroup_ce", "area_land_meters"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    WHERE "state_fips_code" = '08'
    LIMIT 1000;
    ```

These queries help in understanding the distribution of bank locations across ZIP codes in Colorado, the geometries involved for spatial calculations, and the relationships between ZIP codes and block groups. By analyzing this data, one can proceed to calculate the overlap ratios and determine the ZIP code with the highest concentration of bank locations per block group based on the overlap between ZIP codes and block groups.Query:
SELECT DISTINCT "zip_code"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 1000;
Answer:
zip_code
80913
80920
80916
80907
80922
80905
80132
80921
80903
80906
80918
80914
80923
80915
80909
80932
80808
80917
80933
80840
81301
81303
81122
80524
80549
80517
80538
81501
81504
81503
81422
80723
80654
80701
80863
80911
80831
81137
80525
80537
80534
81506
81427
80424
80443
81624
81090
81428
80446
80482
81230
80815
81130
81321
81052
81132
81067
80031
80221
80301
80265
80125
80021
81621
80924
81302
80526
81526
81432
80498
80817
80904
80521
80513
80728
81520
81521
81425
80435
80813
80528
81505
81401
81147
81073
81054
81201
80810
81140
81063
81416
81324
80442
80447
80459
81224
81036
80807
80828
80821
81328
81323
80731
81041
81047
81144
81433
81435
81423
81057
81252
80836
81641
81154
80720
80030
80022
80233
80102
80229
80241
80602
80136
80112
80122
80016
80013
80120
80014
80103
80246
80123
80026
80542
80503
80207
80249
80211
80226
80223
80205
80220
80208
80109
80138
80117
80005
80228
80004
80631
80520
81620
80011
80017
80206
80107
80214
81007
81005
81006
81625
80467
80751
81101
81211
80825
81413
81419
81415
81235
81089
80480
81082
81050
80734
81648
81125
81149
80743
80758
80759
80461
81092
80824
80601
80010
80260
80234
80216
80023
80015
80012
80111
80121
80113
80110
80231
80544
80304
80504
80302
80305
80516
80466
80020
80444
80222
80224
80202
80237
80209
80204
80227
80239
80230
80293
80124
80134
80126
80104
80116
80002
80403
80215
80439
80007
80401
80232
80212
80033
80128
80433
80003
80235
80440
80634
80610
80550
80642
80615
80643
80645
80546
80651
81632
81631
81637
81657
81623
81601
81636
81647
81611
80303
80219
80620
80639
80514
81615
80027
81226
81003
81001
81019
81039
80737
80129
80501
80540
80210
80218
80238
80203
80108
80127
80621
80543
81650
81212
81008
80487
81639
Query:
SELECT "zip_code", COUNT(*) AS "bank_location_count"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   GROUP BY "zip_code"
   LIMIT 1000;
Answer:
zip_code,bank_location_count
80913,2
80920,18
80916,2
80907,7
80922,4
80905,3
80132,4
80921,9
80903,24
80906,9
80918,12
80914,1
80923,2
80915,6
80909,7
80932,3
80808,2
80917,1
80933,1
80840,1
81301,15
81303,3
81122,2
80524,13
80549,2
80517,5
80538,10
81501,13
81504,2
81503,1
81422,1
80723,5
80654,1
80701,6
80863,3
80911,1
80831,4
81137,1
80525,24
80537,15
80534,5
81506,2
81427,4
80424,6
80443,5
81624,1
81090,1
81428,2
80446,2
80482,1
81230,5
80815,1
81130,1
81321,8
81052,6
81132,1
81067,4
80031,4
80221,2
80301,14
80265,1
80125,1
80021,10
81621,6
80924,1
81302,1
80526,4
81526,1
81432,2
80498,1
80817,5
80904,2
80521,6
80513,3
80728,1
81520,4
81521,5
81425,2
80435,3
80813,1
80528,7
81505,9
81401,11
81147,7
81073,3
81054,1
81201,5
80810,2
81140,1
81063,1
81416,7
81324,1
80442,3
80447,1
80459,2
81224,3
81036,1
80807,6
80828,3
80821,1
81328,1
81323,1
80731,1
81041,1
81047,1
81144,3
81433,1
81435,5
81423,1
81057,1
81252,2
80836,1
81641,2
81154,1
80720,5
80030,7
80022,8
80233,7
80102,3
80229,8
80241,5
80602,4
80136,2
80112,24
80122,10
80016,12
80013,8
80120,6
80014,6
80103,1
80246,6
80123,10
80026,7
80542,1
80503,1
80207,7
80249,5
80211,10
80226,11
80223,2
80205,4
80220,2
80208,1
80109,2
80138,1
80117,1
80005,5
80228,9
80004,4
80631,8
80520,1
81620,7
80011,9
80017,3
80206,30
80107,2
80214,5
81007,6
81005,8
81006,1
81625,3
80467,1
80751,7
81101,8
81211,5
80825,1
81413,1
81419,2
81415,1
81235,1
81089,2
80480,1
81082,7
81050,6
80734,3
81648,1
81125,1
81149,1
80743,1
80758,3
80759,4
80461,3
81092,1
80824,1
80601,13
80010,4
80260,3
80234,9
80216,4
80023,4
80015,10
80012,14
80111,33
80121,2
80113,5
80110,7
80231,6
80544,2
80304,1
80504,6
80302,20
80305,3
80516,5
80466,1
80020,12
80444,1
80222,12
80224,7
80202,31
80237,5
80209,1
80204,1
80227,7
80239,3
80230,2
80293,1
80124,9
80134,16
80126,8
80104,10
80116,1
80002,9
80403,2
80215,3
80439,8
80007,5
80401,13
80232,1
80212,1
80033,6
80128,5
80433,5
80003,2
80235,1
80440,1
80634,24
80610,1
80550,10
80642,1
80615,2
80643,2
80645,1
80546,1
80651,1
81632,7
81631,5
81637,2
81657,6
81623,6
81601,8
81636,1
81647,1
81611,11
80303,4
80219,5
80620,2
80639,1
80514,1
81615,1
80027,8
81226,2
81003,9
81001,4
81019,1
81039,2
80737,2
80129,8
80501,30
80540,1
80210,5
80218,5
80238,1
80203,8
80108,7
80127,8
80621,2
80543,1
81650,5
81212,9
81008,8
80487,8
81639,1
Query:
SELECT "zip_code", "zip_code_geom"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 1000;
Answer:
Too long, hard cut:
zip_code,zip_code_geom
80621,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x88\x03\x00\x00\x9b\x1f\x7fiQ<Z\xc0\xc2\xd9\xade2\x06D@d\x9b\xe2qQ<Z\xc0Nyt#,\x06D@\xd30|DL<Z\xc0\x85\xdb\xa1a1\x06D@F\xd8\xf0\xf4J<Z\xc0V#\xbb\xd22\x06D@\x9b\x02\x99\x9dE<Z\xc09\xc9V\x97S\x06D@o.\xfe\xb6\'<Z\xc0\x91D/\xa3X\x06D@\xecO\xe2s\'<Z\xc0\xc2\xb5\xda\xc3^\x06D@\x7f\x17\xb6f+<Z\xc0>\x07\x96#d\x06D@\x14{h\x1f+<Z\xc0\x9e`\xffun\x06D@\x96\xebm3\x15<Z\xc0\xca\xe0(yu\x06D@\x1e\x92\xe8e\x14<Z\xc0\xd2\x0f\xea""\x85\x06D@tF\x94\xf6\x06<Z\xc0\x85r\xa2]\x85\x06D@\xe6\x07\xae\xf2\x04<Z\xc0\xe7g\xeau\x8b\x06D@\xfb\x93\xf8\xdc\t<Z\xc0\x93\x8er0\x9b\x06D@""T\xa9\xd9\x03<Z\xc0\xd4\x02{L\xa4\x06D@\x87\x19\x1aO\x04<Z\xc0]\xbb\xb4\xe1\xb0\x06D@\xe3Y\x10\xca\xfb;Z\xc0\xcd\x17{/\xbe\x06D@\x93\x06E\xf3\x00<Z\xc0\xe8}\xe3k\xcf\x06D@\xef\xc8Xm\xfe;Z\xc0\xb2\x8d?Q\xd9\x06D@\xc0\xd4]\xd9\x05<Z\xc0\x7f\xd1\xe5\xcd\xe1\x06D@\xaa\xd5WW\x05<Z\xc0)\xa7=%\xe7\x06D@&r\xc1\x19\xfc;Z\xc0\x13\x04\x8fo\xef\x06D@\xfd7\xbd\x8b\xf7;Z\xc0\xe4U\x9d\xd5\x02\x07D@\xc4\x96\x1eM\xf5;Z\xc0\x1ac\'\xbc\x04\x07D@\xa5\xe9z\xa2\xeb;Z\xc0\xc7\x83-v\xfb\x06D@\x9b\xe6\x1d\xa7\xe8;Z\xc0\xf6\x07\xcam\xfb\x06D@\x97\xab\x1f\x9b\xe4;Z\xc0\xaa\xa8\xc14\x0c\x07D@\xde_\xcb+\xd7;Z\xc0_\x0bzo\x0c\x07D@P\x07@\xdc\xd5;Z\xc0`\x15od\x1e\x07D@\xba\xc5\xfc\xdc\xd0;Z\xc0\xf3\x8eSt$\x07D@P\xc5\x8d[\xcc;Z\xc0\xf3G\x18\x06,\x07D@-\tPS\xcb;Z\xc0\xcd\x05.\x8f5\x07D@\x8f\xc7\x0cT\xc6;Z\xc0\xac\x84\xee\x928\x07D@Q\x1bc\'\xbc;Z\xc0\x8a\x16\xa0m5\x07D@\x07\x82\x8eV\xb5;Z\xc0\x8aPl\x05M\x07D@\xff\xd4\x06\'\xa2;Z\xc0X\xc8\\\x19T\x07D@U\xa6\x98\x83\xa0;Z\xc0\x99\xb1h:;\x07D@\xba?\xa5J\x94;Z\xc0\x84\x0e\xba\x84C\x07D@\xb8\xcc\xe9\xb2\x98;Z\xc0\xe0/fKV\x07D@\x7fj\xbct\x93;Z\xc0\xa7R\xb3\x07Z\x07D@\xe2\\\xc3\x0c\x8d;Z\xc0O\xba\xf4/I\x07D@\xb6\xf6>U\x85;Z\xc0\x0f/\x88HM\x07D@\xe0\xfc\x14\xc7\x81;Z\xc0Kk\xd3\xd8^\x07D@*y\x03\xcc|;Z\xc0h\x1c\xeawa\x07D@\x024\xd8\xd4y;Z\xc0\xaf\x0f\xeb\x8dZ\x07D@\xa6\x85\xcb*l;Z\xc0{j\xf5\xd5U\x07D@z\xaf\xe8\xd6k;Z\xc0\xab\\\xa8\xfck\x07D@7\x19U\x86q;Z\xc0\x99v1\xcdt\x07D@\x96FZ*o;Z\xc0\xfa\x03\xe5\xb6}\x07D@S\x08\xe4\x12G;Z\xc0\xd2p\xca\xdc|\x07D@=HO\x91C;Z\xc00y\x03\xcc|\x07D@G_\xcf\xd7,;Z\xc0\xfc7/N|\x07D@\xd4\r\x14x\';Z\xc0\x8b\xc4\x045|\x07D@~\xac\xe0\xb7!;Z\xc0H\xd5v\x13|\x07D@\x8e\xee\xae\xb3!;Z\xc0\xd6-\x02c}\x07D@\x06\xf7\x03\x1e\x18;Z\xc0e\xba\xd7I}\x07D@\x96\xd1\xc8\xe7\x15;Z\xc0=[\x07\x07{\x07D@s/0+\x14;Z\xc0\x03]\xfb\x02z\x07D@lcz\xc2\x12;Z\xc0\x9e\x97\x8a\x8dy\x07D@\xfdL\xbdn\x11;Z\xc0[\xa8\xfcky\x07D@.t%\x02\xd5:Z\xc0W\xeb\xc4\xe5x\x07D@}\xb8r\xf6\xce:Z\xc0\xe6w\x9a\xccx\x07D@\x91\xa2\\\x1a\xbf:Z\xc0\x91\x1d\x1b\x81x\x07D@\x00\tQ\xbe\xa0:Z\xc0\xba\xe4\x7f\xf2w\x07D@\xc0\x9cg\xecK:Z\xc0\x80\xe6s\xeev\x07D@e9\t\xa5/:Z\xc0]\x10\x91\x9av\x07D@\xb0\xac4)\x05:Z\xc0\x17d\xcb\xf2u\x07D@\x89\x98\x12I\xf49Z\xc0\xa6\xf0\xa0\xd9u\x07D@\x8d\xb6*\x89\xec9Z\xc0Q\x96!\x8eu\x07D@)\xd7\x14\xc8\xec9Z\xc0c\xe4,\xeci\x07D@\xe0\xe7\x86\xa6\xec9Z\xc0Fo\xb8\x8f\xdc\x06D@\xb0c\xea\xae\xec9Z\xc0 r\xfaz\xbe\x06D@V2\x8e\x91\xec9Z\xc0\xc2\xc1\xde\xc4\x90\x06D@V2\x8e\x91\xec9Z\xc0\xdd\xb3\xae\xd1r\x06D@\x8d\xb6*\x89\xec9Z\xc0f\xcfej\x12\x06D@\xeb\x95@J\xec9Z\xc0\x1e\x88,\xd2\xc4\x05D@""\x1a\xddA\xec9Z\xc0\xfd^\n\x0f\x9a\x05D@\x98V\xd1\x1f\x9a9Z\xc0R\xb9\x89Z\x9a\x05D@^\x18w\x83h9Z\xc0\xfd^\n\x0f\x9a\x05D@e\x8dz\x88F9Z\xc0Wv\xc1\xe0\x9a\x05D@\x05s\x82699Z\xc0\x99eO\x02\x9b\x05D@U3k) 9Z\xc0\xc7\xe9\xeb\xf9\x9a\x05D@\x97VC\xe2\x1e9Z\xc0\x17\x873\xbf\x9a\x05D@1\x82T\x8a\x1d9Z\xc0AN\x980\x9a\x05D@\xbc\x94\xbad\x1c9Z\xc0\xe66\xe1^\x99\x05D@(eRC\x1b9Z\xc0\x98\xcd\xe30\x98\x05D@\xb7\x0b\xcdu\x1a9Z\xc0\x94D\xf6A\x96\x05D@\xa6\xba\x80\x97\x199Z\xc0$9`W\x93\x05D@\x8a|%\x90\x129Z\xc0~\x10\xc9\x90c\x05D@\x8c\xd9\x92U\x119Z\xc0\xca\xf4K\xc4[\x05D@\xb5\x91y\xe4\x0f9Z\xc0\xe7T2\x00T\x05D@\xa4Z\xd2Q\x0e9Z\xc0\xb3\xe3\x86\xdfM\x05D@\x18\x11\xc5\xe4\r9Z\xc0V\x0f\x98\x87L\x05D@\xa6\xb7?\x17\r9Z\xc0\x14TT\xfdJ\x05D@\xbd\xea\x8f0\x0c9Z\xc0\xd9UH\xf9I\x05D@B&\x199\x0b9Z\xc0\xc1-\x1fII\x05D@\xfb\x93\xf8\xdc\t9Z\xc0\xfd_u\xe4H\x05D@\x12\xc7H\xf6\x089Z\xc0-\xe4\x11\xdcH\x05D@\xdd\x9f\x19\xc4\x079Z\xc0""6X8I\x05D@\x94\x06E\xf3\x009Z\xc0\x01\xb5\x18<L\x05D@\xbf\xf80{\xd98Z\xc0\xf1\xb7=Ab\x05D@aX\x8c\xba\xd68Z\xc0\x9c)t^c\x05D@k\x0e\x10\xcc\xd18Z\xc0h\x80\x0b\xb2e\x05D@@8-x\xd18Z\xc0\t\xe0f\xf1b\x05D@\x11\xce5\xcc\xd08Z\xc0hP4\x0f`\x05D@\xb4""j\xa2\xcf8Z\xc0\xe8\xd9\xac\xfa\\\x05D@6\x0c\xadN\xce8Z\xc0\xcd(\x96[Z\x05D@\xd9\xb9\xf7p\xc98Z\xc0\xf1\xce\xa1\x0cU\x05D@y`\x8e\x1e\xbf8Z\xc0b\xbdQ+L\x05D@\'T\xfe\xb5\xbc8Z\xc0E\x0c;\x8cI\x05D@;\x1c]\xa5\xbb8Z\xc0\xd4\xccZ\nH\x05D@\xad\xc3\xd1U\xba8Z\xc0\xc9\x865\x95E\x05D@\xad\xddv\xa1\xb98Z\xc04qr\xbfC\x05D@x\x9c\xa2#\xb98Z\xc0\x85B\x04\x1cB\x05D@\xac\xce\xf8\xbe\xb88Z\xc0\xbf\xa8\xa4N@\x05D@\xe8\x00OZ\xb88Z\xc0\xaa\xe8\x0f\xcd<\x05D@G\t\x88I\xb88Z\xc0{\x98\xbdl;\x05D@\xa2}\xac\xe0\xb78Z\xc0sz\xde\x8d\x05\x05D@q\xd0\xec\xba\xb78Z\xc0\rZH\xc0\xe8\x04D@\x89\x12\xbb\xb6\xb78Z\xc06\x89A`\xe5\x04D@\xd8\xf2\xca\xf5\xb68Z\xc0\xbd\xbe\xd6\xa5F\x04D@\x91F\x05N\xb68Z\xc0\xe3\xf1\xb4\xfc\x
Query:
SELECT DISTINCT "geo_id", "blockgroup_ce"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
Answer:
Too long, hard cut:
geo_id,blockgroup_ce
080410045072,2
080590102084,4
080130125093,3
080130137023,3
080519638001,1
080050863003,3
081230004014,4
080050851002,2
080839696003,3
081190102012,2
080350145043,3
081230021034,4
080590120551,1
081010028043,3
080690028031,1
080590103072,2
080310036012,2
080050857002,2
080459518021,1
080459521002,2
080410002023,3
080870006001,1
080219749002,2
080050056261,1
080310119022,2
080690008011,1
080179606003,3
080310036013,3
080690024023,3
080590098343,3
080050868002,2
080410040081,1
080310119021,1
080770011022,2
080679707032,2
080150004022,2
080690016061,1
080050066011,1
080410037052,2
080370002003,3
080350141322,2
081170004012,2
080590098083,3
080039600002,2
080130137013,3
080050802003,3
080010080002,2
080370001001,1
080690027001,1
080130125104,4
080590118033,3
080050067093,3
080299647001,1
080410065021,1
080659617002,2
080410047022,2
080590118063,3
080690011112,2
080410044011,1
080010097521,1
080770013016,6
080259696002,2
080299647003,3
080130606003,3
081010027002,2
080310155001,1
080410045021,1
081230022041,1
080899685002,2
080010082001,1
080050068541,1
080410074002,2
080050056201,1
080350141301,1
081010024002,2
080130130061,1
080679707041,1
080140306004,4
080010093212,2
080590102113,3
081010035002,2
080590120532,2
080010096062,2
080410042002,2
080690010033,3
081230020084,4
080130127103,3
080310021003,3
080130122022,2
080839692001,1
080310037024,4
080590120232,2
080410011011,1
080010085083,3
080130135032,2
080590098362,2
080050067051,1
081259632002,2
080839693002,2
080590117123,3
080370005034,4
080350141372,2
080310070131,1
080439782001,1
080590105032,2
080310017014,4
080690011074,4
081230001002,2
080439781002,2
080310043042,2
080410009002,2
080690028021,1
080690013041,1
080050056284,4
080050855001,1
080590107011,1
080590111005,5
080690011062,2
080310083872,2
080639621004,4
081230007031,1
080130128002,2
080410039051,1
080590120574,4
080050063003,3
080410033033,3
080770015013,3
080050860002,2
081010028012,2
080050055512,2
080310068142,2
080410055022,2
080310068092,2
081010008001,1
080039603004,4
080410033053,3
080050056211,1
080010083081,1
080010091012,2
080690017062,2
080690016012,2
080899683003,3
080439785003,3
080679710001,1
080770004001,1
080310003013,3
081230018002,2
080310004014,4
081259631001,1
080310021005,5
081010020001,1
080590104051,1
080310026012,2
080050868004,4
080590120321,1
080410041004,4
080410051093,3
080050871001,1
080590098351,1
080310036032,2
080310083062,2
080310036031,1
080459518041,1
081010022001,1
080739617001,1
080310157002,2
081039512003,3
080710008001,1
080050873005,5
080050056361,1
080350141371,1
080050066014,4
080310068144,4
080050057003,3
080050871002,2
080050062001,1
081070008002,2
080590117301,1
080010092031,1
080050808002,2
081170003002,2
080050831004,4
080130127091,1
081010009041,1
081230007011,1
080310015003,3
080010096033,3
080639622001,1
080010087052,2
080010094011,1
080010080004,4
080130122012,2
080050066032,2
081230014101,1
080130608004,4
080310044032,2
080350143001,1
080050056353,3
080190147001,1
080310070062,2
080310040063,3
080050828003,3
080050873004,4
080350139091,1
081230010054,4
080310004013,3
080010092041,1
080310036024,4
080150003001,1
080010085071,1
080459517012,2
080310041035,5
080990002002,2
080410019003,3
080590106033,3
080410070002,2
080590118062,2
080759664001,1
080970005002,2
080010083091,1
081059770004,4
080130132073,3
081230019051,1
080130132081,1
080690009011,1
080050830001,1
081010029031,1
080370004032,2
080050838002,2
080310026021,1
080310045043,3
080350145032,2
080590120351,1
080350145053,3
081010029032,2
080590112021,1
080050067114,4
080140311002,2
080410029005,5
081230008004,4
080310021002,2
081010031032,2
080299652003,3
080590117093,3
080050847003,3
080310003016,6
080310040061,1
080870002001,1
080410051061,1
080050075001,1
080590103071,1
080279701001,1
080010085401,1
080010085481,1
080690005051,1
080590117331,1
080590116021,1
080590103062,2
080399612051,1
080050067072,2
080310068113,3
080410051081,1
081230021015,5
080310156002,2
080140308003,3
080559609001,1
080590098283,3
081170002004,4
080310028013,3
080050815002,2
080690020052,2
080410068022,2
080590117091,1
080150003002,2
080010093201,1
080010086031,1
080350144061,1
080310051042,2
080310041061,1
080039602004,4
080310005025,5
080130132133,3
080130126081,1
081010026001,1
080770014022,2
081010029161,1
080310043033,3
080679711003,3
081010015001,1
080310007021,1
080130132113,3
080310044043,3
080130129031,1
081230021032,2
080130132071,1
080399611002,2
081230014091,1
080679706003,3
080770008003,3
080410039063,3
081059767004,4
080410029001,1
080350141242,2
080590105041,1
080130133083,3
080590116011,1
080439784002,2
080150001001,1
080590120552,2
080010088023,3
080590098242,2
080410019002,2
080659617001,1
080130124013,3
080590117204,4
081170004022,2
080130606001,1
080590603002,2
081230020193,3
080310120143,3
080310051021,1
080050068081,1
080350139074,4
080439783001,1
080410001021,1
080590098462,2
080459518022,2
080590107021,1
081230020191,1
080310043032,2
081010019002,2
080039601003,3
Query:
SELECT "geo_id", "blockgroup_geom"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
Answer:
Too long, hard cut:
geo_id,blockgroup_geom
080010093083,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x004\x00\x00\x00C\xd0_\xe8\x11@Z\xc0\xa8\x9f7\x15\xa9\xeaC@W\x98\xbe\xd7\x10@Z\xc0\xab\x07\xccC\xa6\xeaC@\xb1\xfdd\x8c\x0f@Z\xc0\xe9\xd5\x00\xa5\xa1\xeaC@v\x19\xfe\xd3\r@Z\xc0X\x90f,\x9a\xeaC@\xe0\xa6\xcd8\r@Z\xc0""\x83\xdcE\x98\xeaC@\xdc,^,\x0c@Z\xc0)\xa8\xa8\xfa\x95\xeaC@f\x16\xa1\xd8\n@Z\xc0\x8f\xd5\xad\x9e\x93\xeaC@f0F$\n@Z\xc0fB\x93\xc4\x92\xeaC@\xd2\x00\xde\x02\t@Z\xc0+D\x87\xc0\x91\xeaC@o\x89\\p\x06@Z\xc0\xb0V\xed\x9a\x90\xeaC@p\x0b\x96\xea\x02@Z\xc0\x97.\xc4\xea\x8f\xeaC@\x03,\x80)\x03@Z\xc0\x04k\x9cMG\xeaC@L\x1b\x0eK\x03@Z\xc0\x8d\xe3\x87J#\xeaC@\xf2\x98\x81\xca\xf8?Z\xc0\xcd\xe5\x06C\x1d\xeaC@#N\'\xd9\xea?Z\xc0\x13\rR\xf0\x14\xeaC@=\x85\xea\xe6\xe2?Z\xc0~_#I\x10\xeaC@\x17f\xa1\x9d\xd3?Z\xc0 \xd2o_\x07\xeaC@\x16W#\xbb\xd2?Z\xc0\x19\x158\xd9\x06\xeaC@\x87 \x07%\xcc?Z\xc0R\xf2\xea\x1c\x03\xeaC@\xed\xc0\xc7`\xc5?Z\xc0\xca\xbe+\x82\xff\xe9C@\x1a3\x89z\xc1?Z\xc0\x96\xb1\xa1\x9b\xfd\xe9C@\xa1/\xbd\xfd\xb9?Z\xc0\xd2K\x8ce\xfa\xe9C@\x05\x8aX\xc4\xb0?Z\xc0\x10\xe6v/\xf7\xe9C@K\xcbH\xbd\xa7?Z\xc0\xe8\x86\xa6\xec\xf4\xe9C@\xc5$\xea\x05\x9f?Z\xc0\x17?\x8d{\xf3\xe9C@\x88.\xa8o\x99?Z\xc0r\x8a\x8e\xe4\xf2\xe9C@\x15$D\xf9\x82?Z\xc0\xca\xd5\x8fM\xf2\xe9C@\xb2\xe0\x0c\xfe~?Z\xc0,\xde\xc8<\xf2\xe9C@E\xc2\x85<\x82?Z\xc0\x85\xd1\xacl\x1f\xeaC@\tQ\xbe\xa0\x85?Z\xc0h\xb8\x01\x9f\x1f\xeaC@\xaf\xd1r\xa0\x87?Z\xc0\xb9\x12\x81\xea\x1f\xeaC@qB\xaf?\x89?Z\xc0N\\\x8eW \xeaC@\xff\x80\x95C\x8b?Z\xc0\x07|~\x18!\xeaC@\x17\x9e\x97\x8a\x8d?Z\xc0R\xe5{F""\xeaC@(\xbb\x99\xd1\x8f?Z\xc04\x98\x86\xe1#\xeaC@\xa8""\xa3\x03\x92?Z\xc0\t\x9d\xd7\xd8%\xeaC@\x18H\xde9\x94?Z\xc0\x15\xe3\xfcM(\xeaC@Z,E\xf2\x95?Z\xc0<B\xcd\x90*\xeaC@^\xa6\xb4\xfe\x96?Z\xc0}\xfd\x10\x1b,\xeaC@\x94\xdca\x13\x99?Z\xc0)\x07\xb3\t0\xeaC@d> \xd0\x99?Z\xc0\t\xba\xbd\xa41\xeaC@\x1atB\xe8\xa0?Z\xc0L\x7f\xf6#E\xeaC@\xcdf\x9c\x86\xa8?Z\xc0eI\x80\x9aZ\xeaC@W\xd5Y-\xb0?Z\xc0\xcb\xb0Q\xd6o\xeaC@\xd8\xd8%\xaa\xb7?Z\xc0\x0fB@\xbe\x84\xeaC@\xb6\xa1b\x9c\xbf?Z\xc0\x9f<,\xd4\x9a\xeaC@\xd0\x9c\xf5)\xc7?Z\xc0\xda\xdc\x98\x9e\xb0\xeaC@ev\xa4\xfa\xce?Z\xc0\xa5\t\xdbO\xc6\xeaC@!\x92!\xc7\xd6?Z\xc0\xachs\x9c\xdb\xeaC@F^\xd6\xc4\x02@Z\xc0\x7f\xf5\xb8o\xb5\xeaC@\xc9\x98I\xd4\x0b@Z\xc0\xdbD-\xcd\xad\xeaC@C\xd0_\xe8\x11@Z\xc0\xa8\x9f7\x15\xa9\xeaC@')"
080690011111,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00i\x00\x00\x00\xc9\xadI\xb7%FZ\xc0\xaa=\xec\x85\x02HD@\xaak{\xbb%FZ\xc05u\x1e\x15\xffGD@o\x87\x14\x03$FZ\xc0\xc9\xbe+\x82\xffGD@\xc5X\xa6_""FZ\xc0\xb2b\xb8:\x00HD@\xd2:\xaa\x9a FZ\xc0y\xb9O\x8e\x02HD@\x9eajK\x1dFZ\xc0\xfc/\xd7\xa2\x05HD@j\x88*\xfc\x19FZ\xc0\x8a \xce\xc3\tHD@\x169\xd2\x19\x18FZ\xc0)\xb0\x00\xa6\x0cHD@\x84f\xd7\xbd\x15FZ\xc0\xe5X\xdeU\x0fHD@}\x80|\t\x15FZ\xc00&\xfd\xbd\x14HD@\xd7\xe5""\xbe\x13FZ\xc0\xcf\xb5/\xa0\x17HD@\x06\xda\x1dR\x0cFZ\xc0Q\xf8l\x1d\x1cHD@0\xe0\xf3\xc3\x08FZ\xc0 @\x86\x8e\x1dHD@\x05\x89\xed\xee\x01FZ\xc0\x95\x08T\xff HD@#\xe1\t\xbd\xfeEZ\xc0@F@\x85#HD@8\xf7W\x8f\xfbEZ\xc0\x11\x8eY\xf6$HD@\x05\x1e\x18@\xf8EZ\xc0\x11\x8eY\xf6$HD@,,\xb8\x1f\xf0EZ\xc09\x89\x08\xff""HD@\xb1\x974F\xebEZ\xc0\xa2\xb6\r\xa3 HD@z\xc6\xbed\xe3EZ\xc0\x16.\xab\xb0\x19HD@\xfd\xe3K\xa8\xe0EZ\xc0\xab\xdfLL\x17HD@\x18\xc2\xf8i\xdcEZ\xc0\xab\xdfLL\x17HD@\x93\xeb\xa6\x94\xd7EZ\xc0\xd1\xe9y7\x16HD@\x97\xb3\x05\x84\xd6EZ\xc0$\xac\x8d\xb1\x13HD@\n\xc3\x0ec\xd2EZ\xc0\xb2\x17\n\xd8\x0eHD@\xca;\x15p\xcfEZ\xc0\xda\x12\xb9\xe0\x0cHD@\x9d.\x8b\x89\xcdEZ\xc0\xda\x12\xb9\xe0\x0cHD@\n\x8c\x83K\xc7EZ\xc0\xb1\x17\n\xd8\x0eHD@/\xe4\x9f\x19\xc4EZ\xc0\xb1\x17\n\xd8\x0eHD@\x95\xf7\xffq\xc2EZ\xc0\xa9Z\xd2Q\x0eHD@I\xc2L\xdb\xbfEZ\xc0\xda\x12\xb9\xe0\x0cHD@\xd4\xd4\xb2\xb5\xbeEZ\xc0Z4\x9d\x9d\x0cHD@\xfd\x8c\x99D\xbdEZ\xc0\x03\xda\x1dR\x0cHD@*\xe5\xb5\x12\xbaEZ\xc0\x03\xda\x1dR\x0cHD@D\xc3b\xd4\xb5EZ\xc0\xda\x12\xb9\xe0\x0cHD@\x118\x12h\xb0EZ\xc0\xb1\x17\n\xd8\x0eHD@7\xaa\xd3\x81\xacEZ\xc0\xb5\x08\x8c\xf5\rHD@\x96\xd7\xd8%\xaaEZ\xc06\xc6Nx\tHD@\xb8\x9b\xe0\x9b\xa6EZ\xc0k;m\x8d\x08HD@cL\x88\xb9\xa4EZ\xc0k;m\x8d\x08HD@#\xc5\x8e\xc6\xa1EZ\xc05\xc6Nx\tHD@\x04\xe8\xf7\xfd\x9bEZ\xc0\x11\xbc!\x8d\nHD@\xc8\xf4\x12c\x99EZ\xc0\x11\xbc!\x8d\nHD@|\xbf_\xcc\x96EZ\xc0f~5\x07\x08HD@\xa2K\xc61\x92EZ\xc0\xffP0c\nHD@\x90j\xd8\xef\x89EZ\xc0\xb0KTo\rHD@7S!\x1e\x89EZ\xc0\xa4\x9d\x9a\xcb\rHD@\xd6\xea9\xe9}EZ\xc0J\x1eO\xcb\x0fHD@{\x1a\xbe\x85uEZ\xc0\x80\x93m\xe0\x0eHD@\xbb\x84\xd1\xaclEZ\xc0]\x89@\xf5\x0fHD@\x83\x17}\x05iEZ\xc09\x7f\x13\n\x11HD@/\xc8$#gEZ\xc0\x02\n\xf5\xf4\x11HD@\x9d\xf5)\xc7dEZ\xc0\xc1\xb2\xd2\xa4\x14HD@\xb6\x85\xe7\xa5bEZ\xc0S\x94K\xe3\x17HD@\xbcMF\x95aEZ\xc0\xd3\xd6\x88`\x1cHD@]n0\xd4aEZ\xc0)Ral!HD@V\x88\xd5\x1faEZ\xc0\x88\x8aq\xfe&HD@\xbd\x9b5x_EZ\xc0\xe8\xb3\x03\xae+HD@o28J^EZ\xc0K\xdd\x95]0HD@\xf6\xef\xfa\xccYEZ\xc0M\x96Z\xef7HD@\x9e\x0c\x8e\x92WEZ\xc0\x06\x82\x00\x19:HD@\xea$[]NEZ\xc0=\xb0\xe3\xbf@HD@Q\x86\xaa\x98JEZ\xc0\x1ec\xeeZBHD@\xbcai\xe0GEZ\xc0\xe3\xfcM(DHD@+\xc3\xb8\x1bDEZ\xc0\xc0\xf2 =EHD@\x04\x982p@EZ\xc0\xe2\xfcM(DHD@k-\xccB;EZ\xc0+E\xf2\x95@HD@;\xe8\xa0K8EZ\xc0a\xba\x10\xab?HD@Q29\xb53EZ\xc07\xf3\xab9@HD@\xbc\r\xf8\x
Query:
SELECT "zip_code", "internal_point_lat", "internal_point_lon"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 1000;
Answer:
Too long, hard cut:
zip_code,internal_point_lat,internal_point_lon
81121,37.1097817,-107.4390776
80455,40.0949699,-105.3976911
80424,39.4732847,-106.0042595
80106,39.186147,-104.515915
80816,38.8577405,-105.3158641
81615,39.2206082,-106.9292957
81137,37.0519107,-107.6136014
80524,40.6468542,-105.0295194
81082,37.1818543,-104.5180427
81084,37.5857491,-102.4102843
80134,39.4861121,-104.7789231
81335,37.4964073,-108.7570717
80231,39.6714701,-104.8878238
80624,40.486854,-104.4988679
80432,39.2245324,-105.7949428
80026,40.0121745,-105.100029
81071,38.4332339,-102.2607871
81130,37.5490672,-107.003236
80207,39.7622987,-104.9165812
80927,38.9286028,-104.658013
81253,38.2270691,-105.0651712
81004,38.0440536,-104.71441
80112,39.5770705,-104.857978
80904,38.8608293,-104.8761633
80438,39.744312,-105.7962623
81640,40.6682993,-108.5140462
80546,40.5252418,-104.849696
81128,37.0796915,-106.6209626
81073,37.4254109,-102.7051363
81401,38.4841532,-107.7729196
80403,39.8369591,-105.299618
80446,40.1726417,-105.9601328
80545,40.8730964,-105.6902998
80223,39.6957936,-105.0038428
81505,39.261767,-108.619007
80863,39.0199917,-105.1135881
81152,37.1107681,-105.4021197
81434,38.9817111,-107.4305897
80235,39.6476071,-105.0894821
80215,39.7447733,-105.115977
80728,40.6448657,-102.8738802
80907,38.8782305,-104.8270146
80750,40.4147651,-103.6048459
80928,38.6304011,-104.4016371
80830,39.1142463,-103.8941181
80012,39.6997344,-104.83763
80435,39.5738982,-105.9347206
81131,37.8654124,-105.6791411
80650,40.6215184,-104.8298346
81224,38.8800767,-106.932779
81129,37.1033607,-106.0290467
80514,40.0658812,-104.955387
80615,40.5456576,-104.6456983
80741,40.5668342,-103.476991
80515,40.4623459,-105.3823032
80829,38.8294434,-104.9363727
80125,39.4850693,-105.052316
80220,39.7338219,-104.9165652
81143,38.0490081,-105.8566859
80224,39.6877632,-104.9113377
81526,39.0968881,-108.3345114
81248,38.4643016,-106.3782579
80542,40.2350812,-104.9993861
80743,40.1971178,-102.9547457
80827,39.0564833,-105.4673591
81635,39.4950287,-108.0479716
80138,39.5175324,-104.6709107
81023,38.0526345,-104.96422
80634,40.4046799,-104.7927184
80023,39.9758442,-105.0093807
80419,39.7283988,-105.2028053
80426,39.9120851,-107.0004525
80122,39.5803086,-104.9549168
80497,39.6707581,-106.0000634
80453,39.6626875,-105.2425728
81101,37.4812452,-105.8332128
80544,40.1034216,-105.1710646
80642,40.0514156,-104.6121388
80823,38.6634637,-103.4191862
80603,39.9822107,-104.7370945
81413,38.9656264,-107.9562153
81047,38.1173268,-102.4798317
81040,37.7832216,-105.2272083
80814,38.9596306,-105.1943247
80621,40.1072393,-104.8012902
81038,38.0792429,-103.1404196
81220,38.3082435,-107.480574
80219,39.6952933,-105.0356013
81020,37.5488542,-104.4910197
81007,38.3600416,-104.7731981
81655,39.7703573,-106.7731841
80727,40.0758287,-102.5109885
80525,40.5298611,-105.0366412
80117,39.3696118,-104.3429014
80443,39.5563891,-106.1702399
81049,37.3787624,-103.3875742
80433,39.4777211,-105.2623864
80640,39.8875456,-104.880815
81058,38.0999531,-103.8828594
80735,39.7098238,-102.2731641
81432,38.0971336,-107.7547605
81332,37.7003443,-107.9912267
81057,38.1218103,-102.879317
80241,39.9290792,-104.9542771
80759,40.1352409,-102.6859588
80007,39.8668926,-105.1902776
81141,37.1622985,-105.8583377
80456,39.2483221,-105.5368488
80602,39.966162,-104.9088878
80705,40.2703264,-103.8294877
81091,37.1490904,-104.9647034
80293,39.7462533,-104.9899347
81029,37.0829091,-102.508878
80840,38.9946919,-104.8619476
81649,39.5302267,-106.2781625
80025,39.9398484,-105.2839419
80951,38.898118,-104.652428
80238,39.7715923,-104.8824004
80631,40.4428679,-104.6730721
81090,37.3659022,-102.2304609
80654,40.1381033,-104.0654905
81223,38.3645292,-105.6126463
81325,37.9201631,-108.7267872
81630,39.4580099,-108.5643398
80233,39.8996713,-104.9465609
81030,38.1007377,-103.5236172
80611,40.6250584,-104.2871332
80754,40.7217546,-103.6654688
81428,38.9629875,-107.5995784
80434,40.8432515,-106.2867888
80131,39.4764403,-105.007544
80917,38.8861678,-104.7452638
80118,39.192431,-104.9052646
80427,39.7802888,-105.4949767
80757,39.7910269,-103.5831298
80864,38.6976664,-104.1867385
80033,39.7726754,-105.1048006
80420,39.3244006,-106.1161097
80301,40.0494681,-105.2014214
80938,38.9047619,-104.6633153
80126,39.540594,-104.9586396
81641,40.0842836,-107.7473455
81125,37.8192612,-106.069857
80701,40.165309,-103.8707355
80939,38.8779625,-104.6773667
80467,40.2076332,-106.8258569
80835,39.2187961,-104.0225586
81251,39.1120706,-106.4744146
80105,39.6677239,-103.9691887
81045,38.4876554,-103.1646475
80247,39.698327,-104.8788145
80908,39.0475852,-104.6905396
80834,39.2647971,-102.8836403
81427,38.0258345,-107.6097468
80745,40.8954961,-103.4125563
80011,39.7387643,-104.7821588
80726,40.9050417,-102.7930467
80116,39.3200187,-104.7097118
80923,38.9268912,-104.7148142
80751,40.63688,-103.2324063
80019,39.7785643,-104.6847111
81321,37.3129704,-108.7345371
81424,38.3081177,-108.4601667
80818,39.3859131,-103.4804093
80747,40.9256808,-103.0746508
81642,39.3182508,-106.6559561
81652,39.48
Query:
SELECT "zip_code", "area_land_meters"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 1000;
Answer:
Too long, hard cut:
zip_code,area_land_meters
81059,2848368715.0
80915,20156914.0
81422,694362124.0
81044,844749526.0
80016,120539684.0
80755,286619195.0
81021,565815022.0
80444,82751363.0
80452,336173181.0
80211,11651228.0
81006,146952257.0
80438,144196446.0
81640,6160477420.0
80546,198281.0
81128,473332573.0
81073,1657761491.0
81401,604891430.0
80403,346167186.0
80446,774452953.0
80545,732627359.0
80223,13557819.0
81505,260754260.0
80863,320672020.0
81152,1142333056.0
81434,1550159387.0
80235,9445756.0
80215,14401011.0
80231,12234716.0
80624,81252447.0
80432,282656353.0
80026,57536898.0
81071,1473609340.0
81130,2450513772.0
80207,11827151.0
80927,11338214.0
81253,333138255.0
81004,421921554.0
80112,47852961.0
80904,24687840.0
80125,109118487.0
80220,13562573.0
81143,853395939.0
80224,8155947.0
81526,134199630.0
81248,666918255.0
80542,23222464.0
80743,1202700878.0
80827,625907809.0
81635,753553682.0
80138,163770333.0
81023,326406896.0
80634,96495292.0
80023,45593279.0
80419,258039.0
80426,344815727.0
80621,329914384.0
81038,299771.0
81220,621488665.0
80219,19441822.0
81020,1502007529.0
81007,383149965.0
81655,362240918.0
80727,531673490.0
80525,62954845.0
80117,631057174.0
80443,269458012.0
80122,18278027.0
80497,34243972.0
80453,1048446.0
81101,1060175897.0
80544,127132.0
80642,246122302.0
80823,1055770024.0
80603,208122544.0
81413,545097473.0
81047,1547094143.0
81040,1342866229.0
80814,255696757.0
80110,16439328.0
80723,751888802.0
81041,1187727511.0
81426,43823359.0
80620,17099609.0
80526,98846601.0
81504,29308164.0
80005,29521114.0
81657,288012078.0
80513,170264616.0
80230,6442932.0
80304,23626703.0
80221,23527218.0
80721,223730398.0
80206,6379350.0
80030,6832691.0
80910,14985607.0
81227,951853.0
80517,767257321.0
80532,67132918.0
80543,81648589.0
80239,25871968.0
80501,32065047.0
80475,28069385.0
81303,557450510.0
80623,1721930.0
81638,434983876.0
80210,15718796.0
80622,34244043.0
80107,403715163.0
81062,618633388.0
81121,121229618.0
80455,89929628.0
80424,326129627.0
80106,455247568.0
80816,479752646.0
81615,66211364.0
81137,658537849.0
80524,327684060.0
81082,1547722074.0
81084,623875616.0
80134,145831459.0
81335,70232820.0
81232,4950749.0
80530,4918077.0
80802,1037427744.0
81624,1445020869.0
80809,130799648.0
80922,15498201.0
80825,1707533150.0
80204,14400268.0
80520,1043747.0
81523,855307931.0
80024,105884.0
80652,485346534.0
80504,253686973.0
80804,867607791.0
80736,294694717.0
80801,401656597.0
80135,852771580.0
80449,1536745657.0
80109,68316864.0
80612,421178219.0
80482,336139408.0
80137,270839261.0
80120,21497495.0
80528,49125642.0
80236,8323017.0
81501,20654254.0
80906,120835413.0
81418,53412961.0
81141,111559185.0
80456,599168329.0
80602,77890832.0
80705,704136.0
81091,1118990197.0
80293,15517.0
81029,1420920610.0
80840,74835366.0
81649,205023579.0
80025,30359215.0
80951,12056576.0
80238,12590640.0
80631,265319954.0
80754,546637034.0
81428,568018633.0
80434,74237155.0
80131,1954445.0
80917,16886345.0
80118,353632096.0
80427,37773322.0
80757,981446241.0
80864,644193547.0
80033,21454109.0
80420,102615669.0
80301,75139988.0
80938,8626308.0
80126,27781943.0
81641,4400251877.0
81125,697614505.0
80701,1573783662.0
80939,1396969.0
80467,595430006.0
80835,370915937.0
81251,227093359.0
80105,1291547404.0
81045,591324437.0
80247,7596442.0
80908,246944141.0
80834,743832672.0
81427,265613349.0
80745,569429438.0
80011,63843089.0
81049,3330117287.0
80433,212158264.0
80640,32883607.0
81058,134907240.0
80735,758543157.0
81432,707172272.0
81332,156624913.0
81057,135618879.0
80241,17108904.0
80759,1671505720.0
80007,66575186.0
80726,409179090.0
80116,223905469.0
80923,17706474.0
80751,1216843577.0
80019,63623745.0
81321,1090631446.0
81424,795401616.0
80818,748811725.0
80747,455639002.0
81642,360399809.0
81652,230484441.0
80130,16543909.0
80465,116700021.0
80447,608282335.0
81525,308544776.0
81149,2162574060.0
81052,1719082240.0
81090,1651535907.0
80654,588571727.0
81223,1032977962.0
81325,1476500095.0
81630,3300159996.0
80233,23570009.0
81030,976619.0
80611,996215713.0
80728,939260049.0
80907,25609319.0
80750,340238877.0
80928,851544772.0
80830,578422326.0
80012,20142891.0
80435,268622166.0
81131,812405978.0
80650,131364187.0
81224,403554855.0
81129,10953265.0
80514,17455077.0
80615,272626231.0
80741,589419746.0
80515,157013908.0
80829,55830400.0
80924,14123898.0
81126,50441745.0
81410,59202025.0
81222,79957771.0
81240,385175498.0
81138,58987213.0
81423,1277060982.0
81036,1947541206.0
81645,438646936.0
80902,37146123.0
80610,438907400.0
81133,965832508.0
81425,993029256.0
81330,169148406.0
81039,1528433322.0
80045,1735746.0
80535,114702126.0
80229,33025125.0
81055,666206658.0
80212,9249943.0
80742,1154882975.0
80758,1798088196.0
81654,228627129.0
81033,837884.0
80228,28468577.0
80133,79767103.0
80101,608207508.0
80511,276231.0
80108,92120010.0
81146,585065650.0
81403,1430902199.0
80744,336222646.0
80305,18639881.0
81520,53496565.0
80903,12528741.0
81252,1594798863.0
81610,804607159.0
81027,1604236717.0
80218,4136533.0
81144,732
Query:
SELECT "fdic_certificate_number", "institution_name", "branch_address", "zip_code"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 1000;
Answer:
Too long, hard cut:
fdic_certificate_number,institution_name,branch_address,zip_code
4666,"Armed Forces Bank, National Association","6384 Wetzel Avenue, Building 1512",80913
6560,The Huntington National Bank,9265 North Union Boulevard,80920
6560,The Huntington National Bank,2930 South Academy Boulevard,80916
6560,The Huntington National Bank,3290 Centennial Boulevard,80907
6548,U.S. Bank National Association,1125 Garden Of The Gods Road,80907
6548,U.S. Bank National Association,1520 Briargate Boulevard,80920
6548,U.S. Bank National Association,6030 Stetson Hills Boulevard,80922
3511,"Wells Fargo Bank, National Association",1800 South Nevada Avenue,80905
3511,"Wells Fargo Bank, National Association",560 Garden Of The Gods Road,80907
57587,Integrity Bank & Trust,1275 Village Ridge Pt,80132
8273,"UMB Bank, National Association",502 Security Boulevard,80911
18489,Adams Bank & Trust,"1359 Interquest Parkway, Suite 150",80921
19220,ANB Bank,15 West Cimarron Street,80903
3076,Independent Bank,155 Lake Avenue,80906
3076,Independent Bank,501 South Tejon,80903
3076,Independent Bank,"104 S. Cascade Avenue, Suite 2014",80903
12633,The Central Trust Bank,5278 North Nevada Avenue Suite 100,80918
91005,5Star Bank,"Peterson Air Force Base, 455 W. Paine St., Bldg. 1485",80914
628,"JPMorgan Chase Bank, National Association",7390 Duryea Drive,80923
628,"JPMorgan Chase Bank, National Association",7685 N Academy Blvd,80920
628,"JPMorgan Chase Bank, National Association",3750 Bloomington Street,80922
628,"JPMorgan Chase Bank, National Association",11555 Meridian Market View,80831
628,"JPMorgan Chase Bank, National Association",402 North Tejon Street,80903
3511,"Wells Fargo Bank, National Association",8620 North Union Boulevard,80920
11492,InBank,945 Tenderfoot Hill Road,80906
18714,FirstBank,2790 Briargate Boulevard,80920
20156,Kirkpatrick Bank,"102 North Cascade Avenue, Suite 100",80903
628,"JPMorgan Chase Bank, National Association",3306 Centennial Blvd.,80907
16980,Bank of Colorado,El Paso County,80915
16980,Bank of Colorado,1146 Interquest Parkway,80921
16980,Bank of Colorado,4328 Edison Avenue,80915
17534,KeyBank National Association,1521 South 8th Street,80906
17534,KeyBank National Association,3085 S Academy Blvd,80916
2270,"Zions Bancorporation, N.A.",7390 North Academy Boulevard,80920
2270,"Zions Bancorporation, N.A.",111 South Tejon Street,80903
3076,Independent Bank,440 Chapel Hills Drive,80920
6548,U.S. Bank National Association,1415 North Academy Boulevard,80909
6548,U.S. Bank National Association,6925 Mesa Ridge Parkway,80817
6548,U.S. Bank National Association,2308 East Pikes Peak Avenue,80909
6548,U.S. Bank National Association,1070 West Baptist Road,80921
6560,The Huntington National Bank,2870 New Center Pt,80922
6560,The Huntington National Bank,5470 E. Woodmen Road,80920
3511,"Wells Fargo Bank, National Association",4151 North Academy Boulevard,80918
3511,"Wells Fargo Bank, National Association",15844 Jackson Creek Parkway,80132
3510,"Bank of America, National Association",7808 N Academy Blvd,80920
17782,Pikes Peak National Bank,2401 W Colorado Ave,80904
57587,Integrity Bank & Trust,5550 Powers Center Point,80920
3034,The First National Bank of Las Animas,2768 Northgate Blvd,80921
5394,Waypoint Bank,24 South Weber Street Suite 151,80903
19600,"Academy Bank, National Association",3201 E.  Platte Avenue,80909
59052,NBH Bank,"19 North Tejon, Ste 100",80903
91005,5Star Bank,104 S Cascade Ave,80903
8273,"UMB Bank, National Association",730 Citadel Drive East,80932
8273,"UMB Bank, National Association",101 North Cascade Avenue,80903
19220,ANB Bank,1130 North Circle Drive,80932
1780,Farmers State Bank of Calhan,7025 Meridian Rd,80831
1780,Farmers State Bank of Calhan,445 N Ellicott Hwy,80808
4666,"Armed Forces Bank, National Association",Coleman And Linstrom Streets,80913
6560,The Huntington National Bank,3175 East Platte Avenue,80909
6560,The Huntington National Bank,7239 N. Academy Boulevard,80920
16980,Bank of Colorado,421 North Tejon Street,80903
3511,"Wells Fargo Bank, National Association",5710 Constitution Avenue,80915
3511,"Wells Fargo Bank, National Association",9649 Prominent Point,80924
3511,"Wells Fargo Bank, National Association",90 South Cascade Avenue,80903
57587,Integrity Bank & Trust,13475 Voyager Parkway,80921
6548,U.S. Bank National Association,815 Cheyenne Meadows Road,80906
6548,U.S. Bank National Association,7655 Mclaughlin Road,80831
3510,"Bank of America, National Association",5737 Barnes Road,80917
17782,Pikes Peak National Bank,6615 Camden Boulevard,80817
18609,American Bank of Commerce,434 S. Tejon,80903
18714,FirstBank,"2 North Cascade Avenue, Suite 130",80903
91005,5Star Bank,3992 E. Bijou St,80909
628,"JPMorgan Chase Bank, National Association","1274 Interquest Pkwy, Ste 100",80921
1778,The State Bank,7495  Mclaughlin Road,80831
19600,"Academy Bank, National Association",8250 Razorback Road,80920
19600,"Academy Bank, National Association",2835 Briargate Blvd,80920
19600,"Academy Bank, National Association",
Query:
SELECT "geo_id", "internal_point_lat", "internal_point_lon"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
Answer:
Too long, hard cut:
geo_id,internal_point_lat,internal_point_lon
080590104022,39.7871907,-105.0926183
080410045072,38.7312852,-104.7031807
080410060002,38.8433637,-104.7527466
081170001005,39.6241178,-106.093135
080310036025,39.765269,-104.9575129
080310013015,39.7093433,-105.020393
080299651002,38.7370604,-108.0745567
080590120571,39.556401,-105.101203
080130132051,40.0955969,-105.1755981
080370002001,39.5321964,-106.8800519
080410045082,38.7047539,-104.7035441
080350145042,39.3666233,-104.8341858
080310068112,39.6579726,-104.8897727
081010022002,38.2269228,-104.6161323
080590111004,39.7365998,-105.0954782
081010028015,38.2295574,-104.6667016
080350144052,39.4135004,-104.8976938
081010028014,38.2241002,-104.6637891
080919676004,38.0161574,-107.7399335
080310030021,39.6767197,-104.9781675
080140302001,39.9087252,-105.0745694
080130135053,40.1978484,-105.0955116
080839694004,37.3320554,-108.5952897
080050807003,39.6868851,-104.8403339
080350139102,39.5104904,-104.7323444
080310028012,39.7217043,-104.9761484
080410064004,38.7919242,-104.7502609
080330001002,37.7117226,-108.5241156
080310028034,39.7184909,-104.9788181
080039602002,37.477422,-105.86149
080310046021,39.6931036,-105.0285637
080410067001,38.8618581,-104.9202215
081230019051,40.0802781,-104.7924525
080050820002,39.7211631,-104.7994167
080590120572,39.564438,-105.0971375
080770017023,39.1011541,-108.3685666
081230022041,40.4559625,-104.8947382
080759661004,40.6433518,-103.2116065
080690018073,40.4414471,-105.0813611
080350140111,39.5016623,-104.8403971
080590098232,39.8835222,-105.1245686
081230008002,40.3983334,-104.6884262
080410053001,38.8095247,-104.7777139
080130132081,40.1853979,-105.1390047
080350141162,39.5438662,-104.8743943
080410018001,38.8452139,-104.8024346
080410009001,38.855228,-104.8126737
080590103031,39.8235177,-105.1142387
080350141152,39.5408576,-104.8919728
080310032023,39.7323312,-104.9620172
080130136022,40.2124996,-105.6066003
080970001002,39.2055564,-107.0457972
080310070373,39.6981846,-104.871102
080590098333,39.844643,-105.069505
080590102112,39.8164845,-105.0858913
080690025023,40.7076734,-105.0077426
080590120481,39.6061125,-105.0776149
080410028004,38.8076173,-104.8021203
080710005002,37.1262754,-104.4299959
080050865003,39.5728973,-104.7607265
080079743003,37.2405262,-107.0632206
080899685002,37.9988349,-103.5410109
080050068552,39.6040739,-104.8402123
080590120361,39.4523402,-105.1884273
080519636007,38.6119502,-106.8438598
081230020042,40.0837831,-104.9287401
080590109014,39.7272131,-105.1378886
080770009001,39.1013837,-108.6167119
081230025022,40.2024937,-104.452283
080590604001,39.8960134,-105.0578373
080590120541,39.6196882,-105.0965486
080459519011,39.4647386,-107.5555836
080310157003,39.6573782,-105.0375434
080370005022,39.5902552,-106.4766673
080410008002,38.8512536,-104.8010786
080990006002,38.0882153,-102.127362
080350145051,39.347135,-104.8599916
080519638001,38.8800767,-106.932779
080310040031,39.6621808,-104.9265932
080590102084,39.8274921,-105.0751668
080410029001,38.8079539,-104.8115102
080310119023,39.6559604,-105.0628179
080130125093,39.9736734,-105.2557972
080590120311,39.565878,-105.3667811
080150003003,38.5259978,-106.2194258
080350141242,39.5285666,-105.0166877
080590118042,39.6849134,-105.066511
080310055032,39.6352457,-105.0401371
080130127102,40.0078092,-105.2104831
080130137023,39.9755267,-105.3843138
080050074001,39.7346823,-104.8565553
080770011023,39.0880893,-108.4836479
080410002024,38.8924185,-104.7665193
080310045033,39.7023582,-105.0422613
080410047052,38.91961,-104.7341743
080590117103,39.6829998,-105.1099603
081230020161,40.123332,-104.9302044
080410059003,38.8570855,-104.746302
080010093253,39.9115301,-105.017779
081059767002,37.5674218,-106.1333904
080310027014,39.7360417,-104.9835506
080930005001,39.013594,-105.4412584
080050832003,39.6429544,-104.7428726
080770016001,39.1276852,-108.6071898
080590098382,39.81815,-105.1903424
080410031006,38.777803,-104.83772
080050076004,39.7279992,-104.831023
080010085501,39.9111268,-104.9276615
080010085421,39.9803006,-104.756989
080010085422,39.9941967,-104.7480323
081230020203,40.148765,-104.93181
081010028013,38.2192461,-104.6610498
080130126071,40.0048374,-105.256109
080310013013,39.703324,-105.0163096
080050863003,39.581248,-104.798248
080590102052,39.8339629,-105.1195249
081230004014,40.4055487,-104.7070271
080470138003,39.7889947,-105.5079578
080590117272,39.6766451,-105.0944419
080050860001,39.6204749,-104.7317229
080299649003,38.7419823,-108.0574775
080310001021,39.7796752,-105.0291123
080050803001,39.6784034,-104.8612914
080130132102,40.1511275,-105.122309
080770002001,39.0738632,-108.5567202
081010025001,38.2494665,-104.6293858
080310157004,39.660641,-105.0286854
080410069011,38.9510116,-104.7299791
080590117201,39.7214565,-105.1794784
080970001003,39.2587958,-106.9358882
081230022053,40.4680981,-104.8974545
081230020133,40.1250169,-104.9484544
080590120243,39.5760175,-105.123197
080590118031,39.6940482,-105.0579605
080590107012,39.765728,-105.0767362
080
Query:
SELECT DISTINCT "zip_code", "county"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
    WHERE "state_code" = 'CO'
    LIMIT 1000;
Answer:
Too long, hard cut:
zip_code,county
80642,"Adams County, Weld County, Weld County"
80014,"Denver County, Arapahoe County, Adams County, Arapahoe County, Douglas County"
80310,Boulder County
81432,Ouray County
80479,Routt
80816,Teller County
81029,Baca County
81506,Mesa County
80480,Jackson County
81211,Chaffee County
80749,Sedgwick County
81253,Custer
81230,Gunnison County
80728,Logan County
80025,Boulder County
81020,Las Animas County
81236,Chaffee
80809,"El Paso County, El Paso County, Teller County"
81220,Gunnison
81655,Eagle County
80023,"Adams County, Weld County, Adams County, Jefferson County, Broomfield County"
80427,"Gilpin County, Clear Creek County, Gilpin County"
80120,"Arapahoe County, Douglas County, Arapahoe County, Douglas County, Jefferson County"
81040,Huerfano
80473,Jackson
80923,El Paso County
81239,Gunnison
81324,Dolores County
80113,Arapahoe County
80212,"Jefferson County, Denver County, Adams County"
80512,Larimer
80005,"Adams County, Jefferson County"
80435,Summit County
81224,Gunnison County
80422,"Boulder County, Gilpin County, Jefferson County, Gilpin County, Clear Creek County, Gilpin County"
80822,Yuma County
80544,Boulder County
80128,"Jefferson County, Arapahoe County, Arapahoe County, Jefferson County, Arapahoe County, Douglas County, Jefferson County"
81030,Otero County
81210,Gunnison
81124,Conejos County
81057,Bent
81301,La Plata County
81241,Gunnison County
80228,Jefferson County
80027,"Boulder County, Jefferson County, Boulder County, Broomfield County"
80478,Grand County
80927,El Paso County
81148,Conejos County
81641,Rio Blanco County
81125,"Rio Grande County, Saguache County"
81612,
80521,Larimer County
80401,Jefferson County
81521,Mesa County
81131,Saguache County
80536,Larimer
80249,Denver County
80801,Washington
80236,"Denver County, Arapahoe County"
81424,Montrose County
80438,Clear Creek County
80743,Washington County
81635,Garfield County
80015,"Arapahoe County, Adams County, Arapahoe County, Douglas County"
80294,Denver County
81044,Bent County
80202,Denver County
80447,Grand County
81503,Mesa County
80247,"Denver County, Adams County, Arapahoe County, Douglas County"
80017,"Adams County, Arapahoe County, Douglas County"
81221,Fremont County
81021,Kiowa
80744,Sedgwick County
80910,El Paso County
80129,"Douglas County, Arapahoe County, Douglas County, Jefferson County"
81141,Conejos County
80537,"Larimer County, Larimer County, Weld County"
80549,Larimer County
80654,Morgan County
80233,"Adams County, Weld County"
80824,Yuma County
80226,"Denver County, Jefferson County"
81073,Baca County
80742,Weld County
80231,"Denver County, Adams County, Arapahoe County, Douglas County"
80126,Douglas County
81008,"Pueblo County, El Paso County"
81601,Garfield County
80528,"Larimer County, Larimer County, Weld County"
81133,Costilla County
81425,Montrose County
80475,
80241,"Adams County, Weld County"
81067,Otero County
80446,Grand County
80701,Morgan County
80134,Douglas County
80234,"Adams County, Weld County, Adams County, Jefferson County, Adams County, Broomfield County"
80221,"Denver County, Adams County, Weld County, Adams County, Adams County, Jefferson County"
80907,El Paso County
80622,
81089,Huerfano County
80118,Douglas County
80425,Jefferson
81138,
81526,Mesa County
80004,"Jefferson County, Adams County, Jefferson County"
81120,Conejos County
80002,"Jefferson County, Adams County, Jefferson County, Adams County"
81071,Kiowa County
80482,Grand County
81325,San Miguel
80428,Routt
80745,Logan County
80011,"Adams County, Arapahoe County, Douglas County"
80729,Weld County
81154,Rio Grande County
80227,"Denver County, Jefferson County"
80220,"Denver County, Adams County, Arapahoe County, Douglas County"
81323,Montezuma County
81504,Mesa County
81303,La Plata County
80612,Weld
80131,Douglas County
81027,Las Animas County
81645,Eagle County
81007,Pueblo County
80540,Boulder County
81430,San Miguel County
80815,Kit Carson County
81633,
81320,Dolores
81326,La Plata
80123,"Jefferson County, Denver County, Arapahoe County, Arapahoe County, Jefferson County, Arapahoe County, Douglas County, Jefferson County"
81242,Chaffee County
81123,Costilla County
80452,"Clear Creek County, Clear Creek County, Gilpin County"
80305,Boulder County
81637,Eagle County
81062,Crowley County
81416,Delta County
80836,Kit Carson County
80525,Larimer County
80426,Eagle
81321,Montezuma County
80498,Summit County
80304,Boulder County
81227,Chaffee County
80623,Weld County
81233,Fremont County
80467,Routt County
80804,Lincoln County
80238,Denver County
80754,Weld
81428,Delta County
81041,Prowers County
80107,Elbert County
80939,
80834,Kit Carson County
81240,Fremont County
80906,El Paso County
80758,Yuma County
80007,"Boulder County, Jefferson County, Adams County, Jefferson County"
80530,Weld County
80432,Park
80135,Douglas County
81327,Montezuma County
80436,Clear Creek County
81038,
80807,Kit Carson County
80747,Logan County
80018,"Arapahoe County, Adams County, Arapahoe County, Douglas County"
80603,"Adams County, Weld
Query:
SELECT "zip_code", COUNT(DISTINCT "fdic_certificate_number") AS "bank_institution_count"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
    LIMIT 1000;
Answer:
zip_code,bank_institution_count
80913,1
80920,13
80916,2
80907,7
80911,1
80921,8
80906,8
80909,6
80915,5
81301,10
80513,3
80538,8
80922,4
80817,5
81137,1
80525,18
81505,9
81521,5
80924,1
80537,9
81303,2
80526,4
80923,2
80751,7
80728,1
81501,11
80424,5
80016,8
81520,4
81504,2
81526,1
81422,1
81624,1
81090,1
81201,4
81419,2
80734,3
81144,3
80758,3
80014,6
80027,7
81047,1
80304,1
80108,6
80132,4
80840,1
80701,6
81122,2
80528,7
80549,2
81503,1
81432,2
80825,1
81413,1
80442,3
81092,1
81154,1
80202,25
80117,1
81620,7
81057,1
80821,1
80720,5
80116,1
80918,11
80524,10
80933,1
80904,2
80914,1
80654,1
80443,4
80863,3
81427,2
80435,3
81302,1
81082,5
81067,3
80602,4
80122,8
80207,7
80231,5
80905,3
80903,22
80831,4
80917,1
80534,5
80521,4
81425,1
80723,4
81211,5
80459,2
81050,5
81052,5
80737,2
80229,8
80112,17
80444,1
80498,1
81416,7
81428,2
81324,1
81230,5
81235,1
81039,2
80731,1
81641,2
81433,1
81435,5
80759,4
81149,1
80031,4
80233,7
80234,7
80221,2
80136,2
80121,2
80123,7
80466,1
80203,6
80232,1
80002,8
80017,3
80542,1
80301,9
80220,2
80109,2
80546,1
81631,5
80033,5
81003,7
80487,7
80808,1
80302,15
81147,6
80447,1
81224,3
80836,1
80461,3
81132,1
81423,1
80030,7
80011,9
80113,5
80516,5
80020,11
80218,4
80226,11
80222,9
80223,2
80004,3
80433,5
80237,5
80209,1
81632,6
80621,1
80520,1
80615,2
80293,1
81226,2
81005,8
80111,28
81063,1
81007,6
80932,2
80260,3
80249,5
81401,9
81101,6
81089,2
81506,2
81073,3
80810,2
81252,2
81415,1
80446,2
80480,1
81036,1
80241,3
80012,11
80010,3
80015,8
80303,4
80305,3
80021,9
80224,7
80238,1
80134,11
80401,10
80007,4
80127,6
80482,1
81648,1
80013,6
80540,1
80210,4
80212,1
80138,1
81650,4
81008,8
80517,4
81130,1
80120,6
80813,1
81054,1
80828,3
81321,5
80824,1
80815,1
80102,3
80601,11
80216,4
80023,4
80129,7
80501,21
80206,24
80219,5
80124,9
80214,5
80228,9
81328,1
81323,1
81125,1
80544,2
80504,5
80204,1
80239,3
80230,2
80104,8
80125,1
80439,6
80128,5
80440,1
80634,19
80610,1
80550,8
80620,2
80639,1
80643,2
81657,5
81601,6
81647,1
81623,5
80103,1
80503,1
80403,2
80235,1
80642,1
80514,1
81615,1
80543,1
81019,1
81625,3
81636,1
80651,1
80467,1
81639,1
81140,1
80110,6
80211,10
80743,1
80003,2
80215,2
80107,2
81212,8
80005,4
80227,5
80265,1
80807,6
80246,6
80205,3
80022,7
80026,5
81041,1
80208,1
80631,7
81637,2
81621,5
80645,1
81006,1
80126,8
81611,10
81001,3
Query:
SELECT DISTINCT "county_fips_code", "county_name"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    WHERE "state_fips_code" = '08'
    LIMIT 1000;
Answer:
county_fips_code,county_name
101,Pueblo County
014,Broomfield County
089,Otero County
047,Gilpin County
015,Chaffee County
001,Adams County
069,Larimer County
055,Huerfano County
011,Bent County
075,Logan County
123,Weld County
013,Boulder County
041,El Paso County
019,Clear Creek County
119,Teller County
115,Sedgwick County
043,Fremont County
085,Montrose County
103,Rio Blanco County
017,Cheyenne County
035,Douglas County
077,Mesa County
021,Conejos County
037,Eagle County
083,Montezuma County
073,Lincoln County
057,Jackson County
125,Yuma County
107,Routt County
007,Archuleta County
091,Ouray County
025,Crowley County
027,Custer County
039,Elbert County
111,San Juan County
005,Arapahoe County
031,Denver County
121,Washington County
071,Las Animas County
113,San Miguel County
059,Jefferson County
087,Morgan County
093,Park County
009,Baca County
053,Hinsdale County
097,Pitkin County
067,La Plata County
003,Alamosa County
109,Saguache County
081,Moffat County
045,Garfield County
033,Dolores County
095,Phillips County
117,Summit County
051,Gunnison County
029,Delta County
099,Prowers County
065,Lake County
049,Grand County
023,Costilla County
061,Kiowa County
079,Mineral County
105,Rio Grande County
063,Kit Carson County
Query:
SELECT SUM("area_land_meters") AS "total_land_area_meters"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    WHERE "state_fips_code" = '08';
Answer:
total_land_area_meters
268419875371
Query:
SELECT "zip_code", "area_land_meters"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
    WHERE "state_code" = 'CO'
    LIMIT 1000;
Answer:
Too long, hard cut:
zip_code,area_land_meters
81059,2848368715.0
80915,20156914.0
81422,694362124.0
81044,844749526.0
80016,120539684.0
80755,286619195.0
81021,565815022.0
80444,82751363.0
80452,336173181.0
80211,11651228.0
81006,146952257.0
80438,144196446.0
81640,6160477420.0
80546,198281.0
81128,473332573.0
81073,1657761491.0
81401,604891430.0
80403,346167186.0
80446,774452953.0
80545,732627359.0
80223,13557819.0
81505,260754260.0
80863,320672020.0
81152,1142333056.0
81434,1550159387.0
80235,9445756.0
80215,14401011.0
80231,12234716.0
80624,81252447.0
80432,282656353.0
80026,57536898.0
81071,1473609340.0
81130,2450513772.0
80207,11827151.0
80927,11338214.0
81253,333138255.0
81004,421921554.0
80112,47852961.0
80904,24687840.0
80125,109118487.0
80220,13562573.0
81143,853395939.0
80224,8155947.0
81526,134199630.0
81248,666918255.0
80542,23222464.0
80743,1202700878.0
80827,625907809.0
81635,753553682.0
80138,163770333.0
81023,326406896.0
80634,96495292.0
80023,45593279.0
80419,258039.0
80426,344815727.0
80621,329914384.0
81038,299771.0
81220,621488665.0
80219,19441822.0
81020,1502007529.0
81007,383149965.0
81655,362240918.0
80727,531673490.0
80525,62954845.0
80117,631057174.0
80443,269458012.0
80122,18278027.0
80497,34243972.0
80453,1048446.0
81101,1060175897.0
80544,127132.0
80642,246122302.0
80823,1055770024.0
80603,208122544.0
81413,545097473.0
81047,1547094143.0
81040,1342866229.0
80814,255696757.0
80110,16439328.0
80723,751888802.0
81041,1187727511.0
81426,43823359.0
80620,17099609.0
80526,98846601.0
81504,29308164.0
80005,29521114.0
81657,288012078.0
80513,170264616.0
80230,6442932.0
80304,23626703.0
80221,23527218.0
80721,223730398.0
80206,6379350.0
80030,6832691.0
80910,14985607.0
81227,951853.0
80517,767257321.0
80532,67132918.0
80543,81648589.0
80239,25871968.0
80501,32065047.0
80475,28069385.0
81303,557450510.0
80623,1721930.0
81638,434983876.0
80210,15718796.0
80622,34244043.0
80107,403715163.0
81062,618633388.0
81121,121229618.0
80455,89929628.0
80424,326129627.0
80106,455247568.0
80816,479752646.0
81615,66211364.0
81137,658537849.0
80524,327684060.0
81082,1547722074.0
81084,623875616.0
80134,145831459.0
81335,70232820.0
81232,4950749.0
80530,4918077.0
80802,1037427744.0
81624,1445020869.0
80809,130799648.0
80922,15498201.0
80825,1707533150.0
80204,14400268.0
80520,1043747.0
81523,855307931.0
80024,105884.0
80652,485346534.0
80504,253686973.0
80804,867607791.0
80736,294694717.0
80801,401656597.0
80135,852771580.0
80449,1536745657.0
80109,68316864.0
80612,421178219.0
80482,336139408.0
80137,270839261.0
80120,21497495.0
80528,49125642.0
80236,8323017.0
81501,20654254.0
80906,120835413.0
81418,53412961.0
81141,111559185.0
80456,599168329.0
80602,77890832.0
80705,704136.0
81091,1118990197.0
80293,15517.0
81029,1420920610.0
80840,74835366.0
81649,205023579.0
80025,30359215.0
80951,12056576.0
80238,12590640.0
80631,265319954.0
80754,546637034.0
81428,568018633.0
80434,74237155.0
80131,1954445.0
80917,16886345.0
80118,353632096.0
80427,37773322.0
80757,981446241.0
80864,644193547.0
80033,21454109.0
80420,102615669.0
80301,75139988.0
80938,8626308.0
80126,27781943.0
81641,4400251877.0
81125,697614505.0
80701,1573783662.0
80939,1396969.0
80467,595430006.0
80835,370915937.0
81251,227093359.0
80105,1291547404.0
81045,591324437.0
80247,7596442.0
80908,246944141.0
80834,743832672.0
81427,265613349.0
80745,569429438.0
80011,63843089.0
81049,3330117287.0
80433,212158264.0
80640,32883607.0
81058,134907240.0
80735,758543157.0
81432,707172272.0
81332,156624913.0
81057,135618879.0
80241,17108904.0
80759,1671505720.0
80007,66575186.0
80726,409179090.0
80116,223905469.0
80923,17706474.0
80751,1216843577.0
80019,63623745.0
81321,1090631446.0
81424,795401616.0
80818,748811725.0
80747,455639002.0
81642,360399809.0
81652,230484441.0
80130,16543909.0
80465,116700021.0
80447,608282335.0
81525,308544776.0
81149,2162574060.0
81052,1719082240.0
81090,1651535907.0
80654,588571727.0
81223,1032977962.0
81325,1476500095.0
81630,3300159996.0
80233,23570009.0
81030,976619.0
80611,996215713.0
80728,939260049.0
80907,25609319.0
80750,340238877.0
80928,851544772.0
80830,578422326.0
80012,20142891.0
80435,268622166.0
81131,812405978.0
80650,131364187.0
81224,403554855.0
81129,10953265.0
80514,17455077.0
80615,272626231.0
80741,589419746.0
80515,157013908.0
80829,55830400.0
80924,14123898.0
81126,50441745.0
81410,59202025.0
81222,79957771.0
81240,385175498.0
81138,58987213.0
81423,1277060982.0
81036,1947541206.0
81645,438646936.0
80902,37146123.0
80610,438907400.0
81133,965832508.0
81425,993029256.0
81330,169148406.0
81039,1528433322.0
80045,1735746.0
80535,114702126.0
80229,33025125.0
81055,666206658.0
80212,9249943.0
80742,1154882975.0
80758,1798088196.0
81654,228627129.0
81033,837884.0
80228,28468577.0
80133,79767103.0
80101,608207508.0
80511,276231.0
80108,92120010.0
81146,585065650.0
81403,1430902199.0
80744,336222646.0
80305,18639881.0
81520,53496565.0
80903,12528741.0
81252,1594798863.0
81610,804607159.0
81027,1604236717.0
80218,4136533.0
81144,732
Query:
SELECT DISTINCT "state_fips_code"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    LIMIT 1000;
Answer:
state_fips_code
23
17
34
49
50
19
44
51
69
29
53
36
24
22
11
10
47
31
01
04
48
56
02
06
05
27
08
21
26
55
42
35
38
13
20
41
15
39
45
60
72
25
16
46
37
09
18
12
54
78
28
30
33
40
66
32
Query:
SELECT DISTINCT "state"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    LIMIT 1000;
Answer:
state
AL
AK
AZ
AR
CA
CO
FL
GA
HI
ID
IN
IA
KY
LA
ME
MD
MA
MI
MN
MS
MO
NE
NH
NJ
NM
NY
ND
OR
SC
SD
TN
TX
OK
PR
AS
MH
MP
PW
RI
DC
MT
IL
KS
NV
NC
PA
UT
VT
VA
WA
WV
WI
WY
""
FM
GU
VI
DE
OH
CT
Query:
SELECT "institution_name", COUNT(*) AS "total_locations"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "institution_name"
    LIMIT 1000;
Answer:
institution_name,total_locations
"Armed Forces Bank, National Association",3
The Huntington National Bank,33
U.S. Bank National Association,108
"Wells Fargo Bank, National Association",130
Integrity Bank & Trust,5
"UMB Bank, National Association",12
Adams Bank & Trust,10
ANB Bank,23
Independent Bank,34
The Central Trust Bank,4
5Star Bank,6
"JPMorgan Chase Bank, National Association",112
InBank,15
FirstBank,85
Kirkpatrick Bank,3
Bank of Colorado,50
"Zions Bancorporation, N.A.",34
Pikes Peak National Bank,4
Farmers State Bank of Calhan,3
The State Bank,5
The Pueblo Bank and Trust Company,11
Riverstone Bank,1
Four Corners Community Bank,3
First Southwest Bank,6
Farmers Bank,2
First FarmBank,4
Home Loan State Bank,2
Timberline Bank,3
High Plains Bank,6
Park State Bank & Trust,1
First Colorado National Bank,2
Century Savings and Loan Association,1
Del Norte Bank,2
FNB Bank,2
Commerce Bank,3
"Morgan Stanley Private Bank, National Association",1
State Bank of Downs,1
Open Bank,1
First American State Bank,1
The First National Bank of Las Animas,7
Stockmens Bank,2
Alpine Bank,44
First National Bank of Omaha,25
Bank of Estes Park,3
Bank of the West,69
Grand Valley Bank,5
"RG Bank, A Savings and Loan Association",3
Alamosa State Bank,2
Community State Bank,2
HTLF Bank,22
MNB BANK,1
Fowler State Bank,1
Champion Bank,2
RNB STATE BANK,1
The Northern Trust Company,1
"Native American Bank, National Association",1
NBH Bank,40
"BNY Mellon, National Association",1
"Bank of America, National Association",23
"PNC Bank, National Association",36
First Interstate Bank,20
"TBK BANK, SSB",40
Rocky Mountain Bank & Trust,2
Farmers & Stockmens Bank,2
The Eastern Colorado Bank,5
Points West Community Bank,10
Mountain Valley Bank,7
First Western Trust Bank,8
Bank of England,11
The Farmers State Bank of Brush,3
The Bank of Burlington,2
The Gunnison Bank and Trust Company,2
The First National Bank in Trinidad,4
Mountain View Bank of Commerce,1
Austin Capital Bank SSB,2
Evolve Bank & Trust,1
Yampa Valley Bank,2
KeyBank National Association,58
Waypoint Bank,2
Herring Bank,2
United Business Bank,11
Glacier Bank,24
First National Bank,5
Equitable Savings and Loan Association,10
The First National Bank of Fleming,1
Oakstar Bank,1
The Citizens State Bank of Ouray,5
"Golden Belt Bank, FSA",1
High Country Bank,5
Gunnison Savings and Loan Association,1
"GNBank, National Association",2
The First National Bank of Hugo,3
The Dolores State Bank,4
The Colorado Bank and Trust Company of La Junta,2
First-Citizens Bank & Trust Company,5
North Valley Bank,2
"BOKF, National Association",14
CoreFirst Bank & Trust,1
"United Fidelity Bank, fsb",2
Colorado Federal Savings Bank,1
First Fidelity Bank,1
FlatIrons Bank,3
"Transact Bank, National Association",1
MidWestOne Bank,1
Pacific Western Bank,1
Beal Bank USA,1
Young Americans Bank,2
Western Alliance Bank,1
CIBC National Trust Company,1
"First National Bank, Cortez",1
Redstone Bank,2
MidFirst Bank,5
Evergreen National Bank,3
Members Trust Company,1
American Bank of Commerce,2
AMG National Trust Bank,2
Bankers' Bank of the West,1
Verus Bank of Commerce,1
Wray State Bank,3
"Academy Bank, National Association",26
Gateway First Bank,1
FMS Bank,2
San Luis Valley Federal Bank,3
First Pioneer National Bank,2
Fortis Private Bank,3
The Bank of Denver,4
Solera National Bank,1
FirsTier Bank,3
Frontier Bank,8
"Sunflower Bank, National Association",12
FirstOak Bank,1
McClave State Bank,1
Query:
SELECT DISTINCT "geo_id", "county_name"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    WHERE "state_fips_code" = '08'
    LIMIT 1000;
Answer:
Too long, hard cut:
geo_id,county_name
080310030021,Denver County
080130136022,Boulder County
080410031006,El Paso County
080690005033,Larimer County
080310003024,Denver County
081010012002,Pueblo County
080590120331,Jefferson County
080350141301,Douglas County
080350141333,Douglas County
080590102113,Jefferson County
080130125052,Boulder County
080130132072,Boulder County
080590158002,Jefferson County
080310002021,Denver County
080130133062,Boulder County
081010001001,Pueblo County
080130134021,Boulder County
080010094092,Adams County
080130132083,Boulder County
080130125103,Boulder County
080310041011,Denver County
080590117114,Jefferson County
080490001002,Grand County
080350139101,Douglas County
080259696001,Crowley County
081230021022,Weld County
080310039022,Denver County
080010091013,Adams County
080590117011,Jefferson County
080010096082,Adams County
080050869001,Arapahoe County
080770013021,Mesa County
080859664005,Montrose County
080050055511,Arapahoe County
080759664002,Logan County
080990007002,Prowers County
080590120454,Jefferson County
080590120581,Jefferson County
080299650001,Delta County
080690017061,Larimer County
080970004021,Pitkin County
080350141373,Douglas County
080759663001,Logan County
080050067062,Arapahoe County
080410008001,El Paso County
080050056361,Arapahoe County
080690028013,Larimer County
080050814003,Arapahoe County
080050860001,Arapahoe County
080050803001,Arapahoe County
081010025001,Pueblo County
080970001003,Pitkin County
080590120243,Jefferson County
080410051052,El Paso County
080490002011,Grand County
081010028023,Pueblo County
080130127103,Boulder County
080010093161,Adams County
080350145033,Douglas County
080050056303,Arapahoe County
080299650002,Delta County
080310035001,Denver County
080839692001,Montezuma County
080590120601,Jefferson County
080050844001,Arapahoe County
080140304002,Broomfield County
081010031051,Pueblo County
080770002002,Mesa County
080010095011,Adams County
080519638001,Gunnison County
080010085421,Adams County
081010002001,Pueblo County
080639623001,Kit Carson County
080590102132,Jefferson County
080050056141,Arapahoe County
080590098242,Jefferson County
080130135082,Boulder County
080410028001,El Paso County
081010028022,Pueblo County
080310043065,Denver County
080410047013,El Paso County
080310069013,Denver County
080130134024,Boulder County
080310005023,Denver County
080140309001,Broomfield County
080690017065,Larimer County
080310050012,Denver County
080350139074,Douglas County
080679711002,La Plata County
080410037094,El Paso County
080310023002,Denver County
080010085504,Adams County
080050806002,Arapahoe County
080010093092,Adams County
080130122043,Boulder County
080410054001,El Paso County
080010093045,Adams County
080130132131,Boulder County
080410002023,El Paso County
080710002002,Las Animas County
080050056261,Arapahoe County
080050848001,Arapahoe County
080739617003,Lincoln County
080410039022,El Paso County
080310017013,Denver County
080590120224,Jefferson County
080050839002,Arapahoe County
080130125012,Boulder County
080410051062,El Paso County
080410045032,El Paso County
080410029004,El Paso County
080130609001,Boulder County
080130127083,Boulder County
081010023003,Pueblo County
080770015015,Mesa County
080690020071,Larimer County
081230025021,Weld County
081230010051,Weld County
080130135072,Boulder County
081059767003,Rio Grande County
081010028012,Pueblo County
080590106032,Jefferson County
080130134012,Boulder County
080690005042,Larimer County
080679404001,La Plata County
080639621002,Kit Carson County
080350141251,Douglas County
080130129071,Boulder County
080690011123,Larimer County
081259632002,Yuma County
080350141232,Douglas County
080310017014,Denver County
080410044022,El Paso County
080410004001,El Paso County
080130608002,Boulder County
080140309004,Broomfield County
080010080001,Adams County
080319800001,Denver County
080130127072,Boulder County
080590117262,Jefferson County
080590107021,Jefferson County
080350141282,Douglas County
080519637002,Gunnison County
081170004024,Summit County
080679711001,La Plata County
081010008003,Pueblo County
080310003021,Denver County
080739618002,Lincoln County
080559609003,Huerfano County
080310044032,Denver County
080690017042,Larimer County
080079404002,Archuleta County
080010087062,Adams County
080590115505,Jefferson County
080310002023,Denver County
081230025023,Weld County
080770014042,Mesa County
080690013051,Larimer County
080050060003,Arapahoe County
080310005011,Denver County
080219748001,Conejos County
080810005002,Moffat County
080010093072,Adams County
080010079002,Adams County
080050842002,Arapahoe County
081230013004,Weld County
080350141361,Douglas County
080310051041,Denver County
080770014041,Mesa County
080410075002,El Paso County
080050071012,Arapahoe County
080690019022,Larimer County
080050821003,Arapahoe County
080310029021,Denver County
081010009025,Pueblo County
080410068022,El Paso County
080310003034,Denver County
080350140082,Douglas County
080310034021,Denver Co
Query:
SELECT "zip_code", "city"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
    WHERE "state_code" = 'CO'
    LIMIT 1000;
Answer:
Too long, hard cut:
zip_code,city
80521,Fort Collins city
80466,"Nederland town, St. Ann Highlands CDP, Eldora CDP, Bonanza Mountain Estates CDP"
80132,"Palmer Lake town, Monument town, Woodmoor CDP"
80214,"Denver city, Edgewater city, Lakewood city, Wheat Ridge city"
80909,Colorado Springs city
81633,Grand Junction
80550,"Timnath town, Windsor town, Severance town, Greeley city"
80860,"Victor city, Goldfield CDP"
80861,Vona town
81522,Gateway
81244,Rockvale town
81643,Mesa
80481,"Bark Ranch CDP, Ward town, Hidden Lake CDP"
80925,"Colorado Springs city, Security-Widefield CDP, Fountain city"
80014,"Denver city, Greenwood Village city, Aurora city"
80740,Lindon
81025,"Boone town, Pueblo city"
80805,Bethune town
80234,"Northglenn city, Westminster city, Federal Heights city, Broomfield city"
80812,Cope
80232,"Denver city, Lakewood city"
81324,Dove Creek town
80916,"Cimarron Hills CDP, Colorado Springs city"
80451,Hot Sulphur Springs town
80113,"Englewood city, Cherry Hills Village city"
80808,"Calhan town, Ellicott CDP"
81656,Woody Creek CDP
80913,Fort Carson CDP
81069,"Rye town, Colorado City CDP"
81524,"Fruita city, Loma CDP"
80749,Sedgwick town
81429,Grand Junction
80017,Aurora city
81327,Lewis CDP
81081,Trinchera
81221,Coal Creek town
81232,Salida
80530,Frederick town
80802,Arapahoe
81624,Collbran town
80809,"Colorado Springs city, Cascade-Chipita Park CDP, Green Mountain Falls town"
80922,"Cimarron Hills CDP, Colorado Springs city"
80825,Kit Carson town
80204,Denver city
80520,Firestone town
81523,Glade park
80024,Derby CDP
80652,Roggen
80504,"Frederick town, Erie town, Mead town, Longmont city, Niwot CDP, Firestone town"
80804,Arriba town
80736,"Padroni CDP, Iliff town"
80801,Anton
80135,"Westcreek CDP, Roxborough Park CDP, Louviers CDP, Sedalia CDP"
80449,Hartsel
80109,Castle Rock town
80612,Carr
80482,"Fraser town, Winter Park town"
80137,"Watkins CDP, Aurora city"
80120,"Englewood city, Highlands Ranch CDP, Littleton city"
80528,"Loveland city, Timnath town, Windsor town, Fort Collins city"
80236,"Denver city, Sheridan city"
81501,Grand Junction city
80906,"Colorado Springs city, Stratmoor CDP"
81418,"Orchard City town, Cedaredge town"
81121,Arboles CDP
80455,"Glendale CDP, Ward town, Gold Hill CDP, Jamestown town"
80424,"Blue River town, Breckenridge town"
80106,"Black Forest CDP, Elbert CDP"
80816,"Florissant CDP, Cripple Creek city"
81615,"Woody Creek CDP, Snowmass Village town"
81137,"Ignacio town, Young Place CDP, Southern Ute CDP, Arboles CDP"
80524,"Laporte CDP, Timnath town, Severance town, Fort Collins city"
81082,"Jansen CDP, El Moro CDP, Segundo CDP, Cokedale town, Valdez CDP, Trinidad city, Hoehne CDP, Starkville town"
81084,Two Buttes town
80134,"Castle Pines North city, Meridian CDP, Parker town, Castle Rock town, Grand View Estates CDP, Lone Tree city, The Pinery CDP, Stonegate CDP"
81335,Yellow jacket
81141,Manassa town
80456,Jefferson
80602,"Thornton city, Commerce City city, Brighton city, Todd Creek CDP"
80705,Log Lane Village town
81091,"Segundo CDP, Weston CDP, Stonewall Gap CDP"
80293,Denver city
81029,Campo town
80840,Air Force Academy CDP
81649,"Red Cliff town, Minturn town"
80025,"Boulder city, Eldorado Springs CDP"
80951,Colorado Springs city
80238,Denver city
80631,"Garden City town, Windsor town, Kersey town, Greeley city, Evans city"
80721,Amherst CDP
80206,Denver city
80030,"Westminster city, Arvada city, Berkley CDP"
80910,"Colorado Springs city, Stratmoor CDP"
81227,Garfield CDP
80517,Estes Park town
80532,Glen haven
80543,"Greeley city, Evans city, Johnstown town, Milliken town"
80239,Denver city
80501,Longmont city
80475,Denver
81303,Durango city
80623,Gilcrest town
81638,Hamilton
80210,Denver city
80622,Brighton
81641,Meeker town
81125,Center town
80701,"Log Lane Village town, Trail Side CDP, Morgan Heights CDP, Fort Morgan city, Saddle Ridge CDP, Blue Sky CDP"
80939,Colorado Springs
80467,Oak Creek town
80835,Simla town
81251,Twin Lakes CDP
80105,Deer Trail town
81045,Haswell town
80247,"Denver city, Aurora city"
80908,"Black Forest CDP, Colorado Springs city"
80834,Seibert town
81427,Ouray city
80745,Padroni CDP
80011,Aurora city
80621,"Frederick town, Fort Lupton city, Brighton city, Aristocrat Ranchettes CDP, Dacono city, Lochbuie town, Hudson town, Firestone town"
81038,Pueblo
81220,Cimarron
80219,Denver city
81020,"Lynn CDP, Aguilar town"
81007,"Pueblo city, Pueblo West CDP"
81655,"Avon town, Wolcott CDP"
80727,Eckley town
80525,"Loveland city, Timnath town, Fort Collins city"
80117,Kiowa town
80443,"Copper Mountain CDP, Frisco town"
80125,"Highlands Ranch CDP, Roxborough Park CDP, Louviers CDP"
80220,"Denver city, Aurora city"
81143,Moffat town
80224,Denver city
81526,Palisade town
81248,Sargents
80542,Mead town
80743,Otis town
80827,Lake george
81635,"Battlement Mesa CDP, Parachute town"
80138,"Parker town, Aurora city"
81023,Beulah Valley CDP
80634,"Windsor town, Greeley city, Evans city, Milliken town"
80023,"Thornton city, Westminster city, Broomfield city"
80419,Golden city
Query:
SELECT "blockgroup_ce", "area_land_meters"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
    WHERE "state_fips_code" = '08'
    LIMIT 1000;
Answer:
Too long, hard cut:
blockgroup_ce,area_land_meters
5,575469
2,779472
4,318608
4,334763984
1,326386
1,2584910
3,513776
4,3533623
3,839224
2,1946224
2,301254
4,805537
2,2717330424
4,119878
2,2653566
1,484919
1,4330800
1,1633616
2,1509811
2,642938
2,932342
2,345268
2,675686
5,3946317
5,256797
5,326212
2,3820759
1,1838703
1,4192987
1,359429677
2,2320346
2,3531422
2,504743
2,380595
4,660325
1,16764091
2,631561734
1,688172
1,638384
1,345650387
3,552657
2,26924710
2,371954
2,10175400
1,4623224
1,762186603
1,755145
4,581592
1,933760
3,587936
3,253260
1,25212220
3,410942533
2,497647
2,822898
2,666706
2,3132655
3,55840549
1,635599
3,754463
4,993729
3,259394
2,590852
3,616954
1,15204509
3,1018141
3,1262025
3,1849938
1,1034278
4,1334963
3,1514376
1,30251676
2,831967
2,759036
1,367176
1,1080355
2,657530
1,612253
1,611466
1,560605
2,1223451
3,280364
2,263220936
2,214922598
3,278856
3,408425
2,652868
3,1582999
1,1345445
4,2758722
2,72066156
3,3383382
3,31682917
2,8908081
2,6643780
1,71457764
7,56067582
2,745770
4,654171
1,3778678
2,5877843
3,919693
3,256647
1,109783
3,454021
3,387733
2,1387900
4,605049
3,53025987
2,4850777
4,117335
1,464621836
3,1241785
1,18169316
2,1815315
6,3397190
4,277951
1,678027
1,788893
2,7346498
4,300162986
1,91193492
2,198898123
3,543557
2,402274
4,1924748
3,1151583
4,399881290
4,249600
2,636815
2,996771
1,8587938
1,1810546
1,36999818
4,3550422
2,1097632
2,1853058
2,3445567
3,10493676
2,92816644
2,828304
1,1112298
1,2437384
2,302707
1,2072575731
2,474638
2,275010
1,640518
2,75095890
5,246586
3,78360344
2,209760700
1,396149
1,1350704
4,163130693
2,1820105
1,583728
3,370617
2,1101920
1,807589
3,5378803
1,1495885
2,491845
2,4785104
1,4307833
1,1404381
3,1289496
1,427233
3,596775
1,616292
3,361686
2,267751
1,1469920
1,2542630
4,15873839
1,509839
3,1048334
2,144125320
3,1679101
2,532725
2,17144687
2,2069654
2,216193
4,1543247
1,791319
1,1282453
2,44411454
2,124313697
2,469232379
1,2926149
1,875089
2,934821
1,878831935
3,144424787
2,625149
1,1119620
3,1354545
1,605413
2,81489914
1,1292500
5,493399
2,431520
3,315430
2,3436607
1,3344103
1,3247721
2,672982
2,3666504
2,535366
1,9723384
1,61913335
3,2701244
2,1086735
1,953750
2,141258691
3,2705582
1,491998
1,3634704
4,700567
2,157040846
3,499477
2,330301
4,711689
1,286753387
2,4083330
3,1686119
2,826854
1,96577375
2,262233
3,552776
3,626719
3,969709
1,19318124
2,2243259
2,244788
4,65604931
1,38537819
1,1168485
3,446457
1,605380
1,292413
3,488297
3,4211181
3,570406
1,2121531
2,513093
2,717994
2,16019281
2,5658710
1,411300
2,1268207
2,320192
1,918845
1,2105420
1,8440936
3,418813
2,272474
1,19221489
1,439213
2,10330260
1,19649983
1,624967
2,487673
1,1340283
2,103877880
2,1141882
1,988194
1,352561
1,3141834562
3,385195934
1,778873
3,449154
2,509658
2,1339440
1,3995924
2,3262003
1,887042
1,2168754
2,2589708
1,2407317800
2,38755599
1,550046
1,10156735
2,372513
3,291960995
2,366766
1,2416158
1,438580
2,415277
3,321635
1,1111977
1,1804229
4,397496
4,555299
2,538843
1,231889483
1,287354
4,238681
1,157730
2,656100
1,1098190
3,22402395
1,1277105785
1,6632908
1,705685
3,1472222
1,658128
2,20744928
2,1582093
2,8771923
2,170814109
4,579945
5,1698916
2,1539441
2,635340
1,574396
3,356512
1,6883393
1,39773850
2,180206
3,365354
2,441093
3,9029885
1,281036839
2,491792
1,726399
2,773639
1,718315
3,2124580
5,493165
5,1260984
1,9482330
3,387276
2,721303
2,1013924
4,374963
3,570174
2,2507753
2,4910853
3,517990
2,12530867
3,575380
4,326898
1,2894879
1,1269840
1,2772108
2,3313945
4,2518597
2,345594552
5,216082
4,1449522
2,641933
2,383872
1,8793266
2,279678
3,535918
2,649022
1,114697630
1,1014147
1,1330411
1,4217184
2,996483
2,444516
1,780485
2,417508
3,291649
3,169442
1,1850445
1,3889952
3,414670
3,88201749
1,450108
4,8020608
1,621765
1,1580379
2,2581114
3,327636
6,238390
2,1755782
3,1599229
3,850048
4,3475560
6,1091528
1,83950546
1,764067
3,35711089
2,564722
1,549569812
1,6935493
2,16192928
2,554688
2,349478
4,1056208
2,2254037
1,528151
3,51908058
1,477572
1,2588636
1,221719973
1,3734323
1,1572242
2,605112
1,691505
3,486561
1,3640929
3,461361
1,472766
3,660719
1,290704
2,1689714
1,362641
2,814632
1,295418
2,1124267
1,1329426
5,435240
2,857516
2,49533313
6,726573
2,125365758
2,7831682
3,890589
1,343946
3,446125
1,814771
1,922569
3,611458
2,464032
1,16298307
1,613221
2,5677838
4,212875
1,514197
2,13007287
1,1401973
2,417609
5,1782687
2,429228950
2,7310817
1,2128913
1,31435161
3,792965
6,324983
3,15829374
2,1460976
2,2547090
2,486912
4,325502
2,649213
3,996150
2,10570332
1,5970825
2,3240501
1,6445892
3,9838404
2,655708
2,119392
2,400983
1,499875
2,618038
1,35079738
3,475158
2,673968
2,1785709
2,459737
1,1405887
1,599989
4,30589571
2,403393
2,739907
3,654145
1,499769
1,823633
1,282991986
3,608622
3,329154
3,7400466
3,490031
2,391181
1,1509661
1,662814
1,939239739
1,3463303
2,298074
4,685914
4,491929
4,431047
3,776717
2,719671
1,30569153
5,331326
3,5542536
3,245626
2,642025
4,641341
3,648671
2,859639
3,448529344
3,41329977
3,488491936
4,1309246
1,505479
1,570732826
3,5325981
2,1955111995
4,519292
1,660644
End Exploring Related Columns
Task: Which Colorado zip code has the highest concentration of bank locations per block group, based on the overlap between zip codes and block groups?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: SELECT S."Column_Name" FROM {Database Name}.{Schema Name}.{Table_name} (ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
zip_code,bank_locations_per_block_group
co_zip_code:str,float_value:float > 0
```

We determined the Colorado zip code with the highest concentration of bank locations per block group by calculating the overlap between zip codes and block groups, and distributing the number of bank locations proportionally based on the overlap ratio. The zip code listed above has the highest calculated concentration in the state..
Here are some useful tips for answering:
When calculating distances between two geometries, use `ST_MakePoint(x, y)` to make a point and `ST_Distance(geometry1 GEOMETRY, geometry2 GEOMETRY)` to compute. No need to convert from meters to miles unless requested. Don't use Haversine like 2 * 6371000 * ASIN(...), use ST_DISTANCE for more precise results.
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'FDA': {'CENSUS_UTILITY': ['FIPS_CLASS_CODE', 'FIPS_CODES_ALL', 'FIPS_CODES_STATES', 'FUNCTIONAL_STATUS_CODES', 'LSAD_CODES', 'MTFCC_FEATURE_CLASS_CODES'], 'FDA_FOOD': ['FOOD_ENFORCEMENT', 'FOOD_EVENTS'], 'FDIC_BANKS': ['INSTITUTIONS', 'LOCATIONS'], 'GEO_CENSUS_BLOCKGROUPS': ['BLOCKGROUPS_01', 'BLOCKGROUPS_02', 'BLOCKGROUPS_04', 'BLOCKGROUPS_05', 'BLOCKGROUPS_06', 'BLOCKGROUPS_08', 'BLOCKGROUPS_09', 'BLOCKGROUPS_10', 'BLOCKGROUPS_11', 'BLOCKGROUPS_12', 'BLOCKGROUPS_13', 'BLOCKGROUPS_15', 'BLOCKGROUPS_16', 'BLOCKGROUPS_17', 'BLOCKGROUPS_18', 'BLOCKGROUPS_19', 'BLOCKGROUPS_20', 'BLOCKGROUPS_21', 'BLOCKGROUPS_22', 'BLOCKGROUPS_23', 'BLOCKGROUPS_24', 'BLOCKGROUPS_25', 'BLOCKGROUPS_26', 'BLOCKGROUPS_27', 'BLOCKGROUPS_28', 'BLOCKGROUPS_29', 'BLOCKGROUPS_30', 'BLOCKGROUPS_31', 'BLOCKGROUPS_32', 'BLOCKGROUPS_33', 'BLOCKGROUPS_34', 'BLOCKGROUPS_35', 'BLOCKGROUPS_36', 'BLOCKGROUPS_37', 'BLOCKGROUPS_38', 'BLOCKGROUPS_39', 'BLOCKGROUPS_40', 'BLOCKGROUPS_41', 'BLOCKGROUPS_42', 'BLOCKGROUPS_44', 'BLOCKGROUPS_45', 'BLOCKGROUPS_46', 'BLOCKGROUPS_47', 'BLOCKGROUPS_48', 'BLOCKGROUPS_49', 'BLOCKGROUPS_50', 'BLOCKGROUPS_51', 'BLOCKGROUPS_53', 'BLOCKGROUPS_54', 'BLOCKGROUPS_55', 'BLOCKGROUPS_56', 'BLOCKGROUPS_60', 'BLOCKGROUPS_66', 'BLOCKGROUPS_69', 'BLOCKGROUPS_72', 'BLOCKGROUPS_78', 'US_BLOCKGROUPS_NATIONAL'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'ADJACENT_STATES', 'CBSA', 'CNECTA', 'COASTLINE', 'CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116', 'COUNTIES', 'CSA', 'METROPOLITAN_DIVISIONS', 'NATIONAL_OUTLINE', 'NWS_FORECAST_REGIONS', 'RAILWAYS', 'STATES', 'URBAN_AREAS', 'ZIP_CODES']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book" SQL: WHERE "title" LIKE '%book%'
However, if the string is not decided, you may use ILIKE and %. e.g. Get articles that mention "education": SQL: "body" ILIKE '%education%' OR "title" ILIKE '%education%'
When handling TO_TIMESTAMP_NTZ conversions, use query like: SELECT CASE WHEN "date" >= 1e15 THEN TO_TIMESTAMP_NTZ("date" / 1000000) WHEN "date" >= 1e12 THEN TO_TIMESTAMP_NTZ("date" / 1000) ELSE TO_TIMESTAMP_NTZ("date") END AS parsed_timestamp FROM my_table;
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Keep all decimals to four decimal places.
You need to follow the format's positive and negative signs.

2025-01-16 21:04:25 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 21:04:25 - root - INFO - ```sql
WITH bank_locations AS (
  SELECT "zip_code", COUNT(*) AS bank_location_count
  FROM "FDA"."FDIC_BANKS"."LOCATIONS"
  WHERE "state" = 'CO'
  GROUP BY "zip_code"
),
zip_codes AS (
  SELECT "zip_code", "zip_code_geom"
  FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
  WHERE "state_code" = 'CO'
),
block_groups AS (
  SELECT "geo_id" AS blockgroup_id, "blockgroup_geom", "area_land_meters"
  FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
  WHERE "state_fips_code" = '08'
),
overlaps AS (
  SELECT
    z."zip_code",
    bg.blockgroup_id,
    bg.area_land_meters,
    ST_AREA(ST_INTERSECTION(z."zip_code_geom", bg."blockgroup_geom")) AS overlap_area_meters
  FROM
    zip_codes z
  JOIN
    block_groups bg
  ON
    ST_INTERSECTS(z."zip_code_geom", bg."blockgroup_geom")
),
overlaps_with_ratios AS (
  SELECT
    o."zip_code",
    o.blockgroup_id,
    o.overlap_area_meters,
    o.area_land_meters,
    o.overlap_area_meters / o.area_land_meters AS overlap_ratio
  FROM overlaps o
  WHERE o.overlap_area_meters > 0
),
bank_locations_with_overlap AS (
  SELECT
    o."zip_code",
    o.blockgroup_id,
    o.overlap_ratio,
    bl.bank_location_count,
    bl.bank_location_count * o.overlap_ratio AS adjusted_bank_locations
  FROM overlaps_with_ratios o
  JOIN bank_locations bl
  ON o."zip_code" = bl."zip_code"
),
zip_code_concentration AS (
  SELECT
    "zip_code",
    SUM(adjusted_bank_locations) AS total_adjusted_bank_locations,
    COUNT(DISTINCT blockgroup_id) AS overlapping_blockgroups_count
  FROM bank_locations_with_overlap
  GROUP BY "zip_code"
),
zip_code_concentration_final AS (
  SELECT
    "zip_code",
    ROUND(total_adjusted_bank_locations / overlapping_blockgroups_count, 4) AS bank_locations_per_block_group
  FROM zip_code_concentration
)
SELECT "zip_code", bank_locations_per_block_group
FROM zip_code_concentration_final
ORDER BY bank_locations_per_block_group DESC NULLS LAST
LIMIT 1;
```
2025-01-16 21:04:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:04:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:04:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:04:27 - snowflake.connector.connection - INFO - closed
2025-01-16 21:04:27 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:04:27 - root - INFO - itercount: 1
2025-01-16 21:04:27 - root - INFO - 000904 (42000): 01b9c1f0-0004-7b48-0001-11c300e8d9e6: SQL compilation error: error line 21 at position 4
invalid identifier 'BG.AREA_LAND_METERS'
2025-01-16 21:04:27 - root - INFO - Input sql:
WITH bank_locations AS (
  SELECT "zip_code", COUNT(*) AS bank_location_count
  FROM "FDA"."FDIC_BANKS"."LOCATIONS"
  WHERE "state" = 'CO'
  GROUP BY "zip_code"
),
zip_codes AS (
  SELECT "zip_code", "zip_code_geom"
  FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
  WHERE "state_code" = 'CO'
),
block_groups AS (
  SELECT "geo_id" AS blockgroup_id, "blockgroup_geom", "area_land_meters"
  FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
  WHERE "state_fips_code" = '08'
),
overlaps AS (
  SELECT
    z."zip_code",
    bg.blockgroup_id,
    bg.area_land_meters,
    ST_AREA(ST_INTERSECTION(z."zip_code_geom", bg."blockgroup_geom")) AS overlap_area_meters
  FROM
    zip_codes z
  JOIN
    block_groups bg
  ON
    ST_INTERSECTS(z."zip_code_geom", bg."blockgroup_geom")
),
overlaps_with_ratios AS (
  SELECT
    o."zip_code",
    o.blockgroup_id,
    o.overlap_area_meters,
    o.area_land_meters,
    o.overlap_area_meters / o.area_land_meters AS overlap_ratio
  FROM overlaps o
  WHERE o.overlap_area_meters > 0
),
bank_locations_with_overlap AS (
  SELECT
    o."zip_code",
    o.blockgroup_id,
    o.overlap_ratio,
    bl.bank_location_count,
    bl.bank_location_count * o.overlap_ratio AS adjusted_bank_locations
  FROM overlaps_with_ratios o
  JOIN bank_locations bl
  ON o."zip_code" = bl."zip_code"
),
zip_code_concentration AS (
  SELECT
    "zip_code",
    SUM(adjusted_bank_locations) AS total_adjusted_bank_locations,
    COUNT(DISTINCT blockgroup_id) AS overlapping_blockgroups_count
  FROM bank_locations_with_overlap
  GROUP BY "zip_code"
),
zip_code_concentration_final AS (
  SELECT
    "zip_code",
    ROUND(total_adjusted_bank_locations / overlapping_blockgroups_count, 4) AS bank_locations_per_block_group
  FROM zip_code_concentration
)
SELECT "zip_code", bank_locations_per_block_group
FROM zip_code_concentration_final
ORDER BY bank_locations_per_block_group DESC NULLS LAST
LIMIT 1;
The error information is:
000904 (42000): 01b9c1f0-0004-7b48-0001-11c300e8d9e6: SQL compilation error: error line 21 at position 4
invalid identifier 'BG.AREA_LAND_METERS'
Please correct it and output only 1 complete SQL query.When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-16 21:05:22 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 21:05:22 - root - INFO - ```sql
WITH bank_locations AS (
  SELECT "zip_code", COUNT(*) AS bank_location_count
  FROM "FDA"."FDIC_BANKS"."LOCATIONS"
  WHERE "state" = 'CO'
  GROUP BY "zip_code"
),
zip_codes AS (
  SELECT "zip_code", "zip_code_geom"
  FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
  WHERE "state_code" = 'CO'
),
block_groups AS (
  SELECT "geo_id" AS blockgroup_id, "blockgroup_geom", "area_land_meters"
  FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
  WHERE "state_fips_code" = '08'
),
overlaps AS (
  SELECT
    z."zip_code",
    bg.blockgroup_id,
    bg."area_land_meters",
    ST_AREA(
      ST_INTERSECTION(
        ST_GEOGFROMWKB(z."zip_code_geom"),
        ST_GEOGFROMWKB(bg."blockgroup_geom")
      )
    ) AS overlap_area_meters
  FROM
    zip_codes z
  JOIN
    block_groups bg
  ON
    ST_INTERSECTS(
      ST_GEOGFROMWKB(z."zip_code_geom"),
      ST_GEOGFROMWKB(bg."blockgroup_geom")
    )
),
overlaps_with_ratios AS (
  SELECT
    o."zip_code",
    o.blockgroup_id,
    o.overlap_area_meters,
    o."area_land_meters",
    o.overlap_area_meters / o."area_land_meters" AS overlap_ratio
  FROM overlaps o
  WHERE o.overlap_area_meters > 0
),
bank_locations_with_overlap AS (
  SELECT
    o."zip_code",
    o.blockgroup_id,
    o.overlap_ratio,
    bl.bank_location_count,
    bl.bank_location_count * o.overlap_ratio AS adjusted_bank_locations
  FROM overlaps_with_ratios o
  JOIN bank_locations bl
  ON o."zip_code" = bl."zip_code"
),
zip_code_concentration AS (
  SELECT
    "zip_code",
    SUM(adjusted_bank_locations) AS total_adjusted_bank_locations,
    COUNT(DISTINCT blockgroup_id) AS overlapping_blockgroups_count
  FROM bank_locations_with_overlap
  GROUP BY "zip_code"
),
zip_code_concentration_final AS (
  SELECT
    "zip_code",
    ROUND(total_adjusted_bank_locations / overlapping_blockgroups_count, 4) AS bank_locations_per_block_group
  FROM zip_code_concentration
)
SELECT "zip_code", bank_locations_per_block_group
FROM zip_code_concentration_final
ORDER BY bank_locations_per_block_group DESC NULLS LAST
LIMIT 1;
```
2025-01-16 21:05:22 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:05:22 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:05:22 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:05:26 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 21:05:26 - snowflake.connector.connection - INFO - closed
2025-01-16 21:05:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:05:26 - root - INFO - itercount: 2
2025-01-16 21:05:26 - root - INFO - 0
2025-01-16 21:05:26 - root - INFO - results: 
zip_code,BANK_LOCATIONS_PER_BLOCK_GROUP
80111,29.0022


2025-01-16 21:05:26 - root - INFO - Please check the answer again by reviewing Which Colorado zip code has the highest concentration of bank locations per block group, based on the overlap between zip codes and block groups?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
zip_code,bank_locations_per_block_group
co_zip_code:str,float_value:float > 0
```

We determined the Colorado zip code with the highest concentration of bank locations per block group by calculating the overlap between zip codes and block groups, and distributing the number of bank locations proportionally based on the overlap ratio. The zip code listed above has the highest calculated concentration in the state. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
zip_code,BANK_LOCATIONS_PER_BLOCK_GROUP
80111,29.0022
Current sql:
WITH bank_locations AS (
  SELECT "zip_code", COUNT(*) AS bank_location_count
  FROM "FDA"."FDIC_BANKS"."LOCATIONS"
  WHERE "state" = 'CO'
  GROUP BY "zip_code"
),
zip_codes AS (
  SELECT "zip_code", "zip_code_geom"
  FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
  WHERE "state_code" = 'CO'
),
block_groups AS (
  SELECT "geo_id" AS blockgroup_id, "blockgroup_geom", "area_land_meters"
  FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
  WHERE "state_fips_code" = '08'
),
overlaps AS (
  SELECT
    z."zip_code",
    bg.blockgroup_id,
    bg."area_land_meters",
    ST_AREA(
      ST_INTERSECTION(
        ST_GEOGFROMWKB(z."zip_code_geom"),
        ST_GEOGFROMWKB(bg."blockgroup_geom")
      )
    ) AS overlap_area_meters
  FROM
    zip_codes z
  JOIN
    block_groups bg
  ON
    ST_INTERSECTS(
      ST_GEOGFROMWKB(z."zip_code_geom"),
      ST_GEOGFROMWKB(bg."blockgroup_geom")
    )
),
overlaps_with_ratios AS (
  SELECT
    o."zip_code",
    o.blockgroup_id,
    o.overlap_area_meters,
    o."area_land_meters",
    o.overlap_area_meters / o."area_land_meters" AS overlap_ratio
  FROM overlaps o
  WHERE o.overlap_area_meters > 0
),
bank_locations_with_overlap AS (
  SELECT
    o."zip_code",
    o.blockgroup_id,
    o.overlap_ratio,
    bl.bank_location_count,
    bl.bank_location_count * o.overlap_ratio AS adjusted_bank_locations
  FROM overlaps_with_ratios o
  JOIN bank_locations bl
  ON o."zip_code" = bl."zip_code"
),
zip_code_concentration AS (
  SELECT
    "zip_code",
    SUM(adjusted_bank_locations) AS total_adjusted_bank_locations,
    COUNT(DISTINCT blockgroup_id) AS overlapping_blockgroups_count
  FROM bank_locations_with_overlap
  GROUP BY "zip_code"
),
zip_code_concentration_final AS (
  SELECT
    "zip_code",
    ROUND(total_adjusted_bank_locations / overlapping_blockgroups_count, 4) AS bank_locations_per_block_group
  FROM zip_code_concentration
)
SELECT "zip_code", bank_locations_per_block_group
FROM zip_code_concentration_final
ORDER BY bank_locations_per_block_group DESC NULLS LAST
LIMIT 1;When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-16 21:06:04 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 21:06:04 - root - INFO - ```sql
WITH bank_locations AS (
  SELECT "zip_code", COUNT(*) AS bank_location_count
  FROM "FDA"."FDIC_BANKS"."LOCATIONS"
  WHERE "state" = 'CO'
  GROUP BY "zip_code"
),
zip_codes AS (
  SELECT "zip_code", "zip_code_geom"
  FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
  WHERE "state_code" = 'CO'
),
block_groups AS (
  SELECT "geo_id" AS blockgroup_id, "blockgroup_geom", "area_land_meters"
  FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
  WHERE "state_fips_code" = '08'
),
overlaps AS (
  SELECT
    z."zip_code",
    bg.blockgroup_id,
    bg."area_land_meters",
    ST_AREA(
      ST_INTERSECTION(
        ST_GEOGFROMWKB(z."zip_code_geom"),
        ST_GEOGFROMWKB(bg."blockgroup_geom")
      )
    ) AS overlap_area_meters
  FROM
    zip_codes z
  JOIN
    block_groups bg
  ON
    ST_INTERSECTS(
      ST_GEOGFROMWKB(z."zip_code_geom"),
      ST_GEOGFROMWKB(bg."blockgroup_geom")
    )
),
overlaps_with_ratios AS (
  SELECT
    o."zip_code",
    o.blockgroup_id,
    o.overlap_area_meters,
    o."area_land_meters",
    o.overlap_area_meters / o."area_land_meters" AS overlap_ratio
  FROM overlaps o
  WHERE o.overlap_area_meters > 0
),
bank_locations_with_overlap AS (
  SELECT
    o."zip_code",
    o.blockgroup_id,
    o.overlap_ratio,
    bl.bank_location_count,
    bl.bank_location_count * o.overlap_ratio AS adjusted_bank_locations
  FROM overlaps_with_ratios o
  JOIN bank_locations bl
  ON o."zip_code" = bl."zip_code"
),
zip_code_concentration AS (
  SELECT
    "zip_code",
    SUM(adjusted_bank_locations) AS total_adjusted_bank_locations,
    COUNT(DISTINCT blockgroup_id) AS overlapping_blockgroups_count
  FROM bank_locations_with_overlap
  GROUP BY "zip_code"
),
zip_code_concentration_final AS (
  SELECT
    "zip_code",
    ROUND(total_adjusted_bank_locations / overlapping_blockgroups_count, 4) AS bank_locations_per_block_group
  FROM zip_code_concentration
)
SELECT "zip_code", bank_locations_per_block_group
FROM zip_code_concentration_final
ORDER BY bank_locations_per_block_group DESC NULLS LAST
LIMIT 1;
```
2025-01-16 21:06:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:06:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:06:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:06:06 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 21:06:06 - snowflake.connector.connection - INFO - closed
2025-01-16 21:06:06 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:06:06 - root - INFO - itercount: 3
2025-01-16 21:06:06 - root - INFO - 0
2025-01-16 21:06:06 - root - INFO - Total iteration counts: 3
