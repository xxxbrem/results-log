2025-01-16 21:01:29 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 21:02:33 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 21:02:33 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:33 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:33 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:34 - snowflake.connector.cursor - INFO - Number of results in first chunk: 525
2025-01-16 21:02:34 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:35 - root - INFO - SQL:
SELECT DISTINCT "zip_code"
   FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
   WHERE "state_code" = 'CO'
   LIMIT 1000;
Results:
zip_code
80260
80920
80133
80510
81623
80631
80497
80824
80219
80426
80829
80653
81151
81323
80831
81146
81431
80737
80759
81081
80122
80435
81526
81023
80731
81058
81057
81149
81524
81007
81637
80101
81632
81641
80007
80705
81047
80904
80468
81044
81152
80917
80939
80540
80736
80801
80906
81130
80031
80477
80128
80303
80654
81003
81656
81620
80745
81625
81232
81624
80432
80022
80487
80454
80726
81424
80818
80734
81327
80455
80424
80543
80501
80758
81022
80118
80427
80301
81069
81040
80836
81252
80229
81101
81129
80125
80221
81005
80203
80205
80503
80003
80733
80740
80310
80525
81027
80816
81523
80504
81655
80109
80207
80542
81631
81403
80903
81423
80457
81201
81331
80928
80743
80744
80926
81503
81030
80237
80423
80476
80123
80909
80204
80117
80443
80449
80419
81133
80444
80481
80107
80129
81507
81122
80216
80536
81024
81087
80757
81090
80751
80232
80110
81433
80862
81231
81411
80528
81419
80530
81426
80446
81136
80473
80535
80754
80916
80230
80469
80813
80911
81611
80480
80863
80611
80722
81076
80720
81301
81128
80218
80905
80290
81326
80451
80642
80513
80224
80138
81001
80448
80403
80634
80651
81233
80938
81630
80825
80910
80532
80488
80835
80602
80428
81020
80438
81033
80264
81506
80104
81147
81639
80516
80951
80452
80121
80621
80124
80440
80815
81052
80467
81154
81038
80482
80546
80721
81064
80002
81155
80620
80228
80644
81144
81126
81043
80747
80479
81253
80210
81067
81006
80550
80821
80524
80515
80545
81418
80422
81211
80116
80130
80755
80209
81220
80020
81240
80136
80131
80834
80812
81221
80017
80741
80514
81303
81143
81521
80202
80222
81059
81422
80805
81527
80012
81071
81227
81226
81063
80447
80105
81432
81091
80293
81648
80214
81615
80526
80005
80246
80511
80919
80461
81124
80019
81021
81236
81653
80026
81004
81612
80127
80459
81039
80742
80537
80915
81643
80014
80470
80913
81434
80027
80434
80498
80235
80822
81092
80103
80544
80018
81425
80807
80011
81649
80238
80521
80520
80830
81131
81638
81248
80021
80102
81328
80249
80420
80860
81324
80750
80723
81435
80924
80305
80914
81237
81251
80908
81025
80809
81121
80023
80918
81241
81610
81089
81525
80466
81212
80833
80823
80106
81657
81073
81505
80010
81330
81050
81642
81125
80211
80137
81635
80746
81138
81049
80840
80729
80624
81640
80645
80478
81222
81645
80126
80603
80134
80135
81243
80512
81120
80247
80640
81652
81141
81239
80922
80727
80517
80231
80401
80648
81235
81045
80234
80113
80810
80024
80294
80226
81429
81335
81520
80013
81036
81334
81223
81325
81427
81332
81633
80929
81225
81132
80610
80421
80456
80907
81224
81501
81504
81401
80622
81019
80015
80033
81244
81084
81062
81055
80819
80817
80808
80927
80239
81647
80538
81416
80471
81522
81008
81601
80534
80030
80601
80549
80436
80233
81321
80132
80925
80804
81137
80728
80223
80236
80112
81621
80025
81320
81077
81230
81082
80612
80930
81140
80442
81410
81654
80814
80828
80650
80045
81428
80465
81210
80643
80439
80652
80827
80215
81242
80902
80004
81415
81650
80923
80701
80547
81413
81041
80206
81646
80241
80016
80220
80475
80227
80212
81123
80463
81430
80302
80861
80921
80453
80425
80108
81054
80820
81148
80433
81029
80111
80802
80623
80483
80864
80735
80649
80749
80832
80615
80120
80304

2025-01-16 21:02:35 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:35 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:35 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:36 - snowflake.connector.cursor - INFO - Number of results in first chunk: 132
2025-01-16 21:02:36 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:36 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:37 - root - INFO - SQL:
SELECT DISTINCT "institution_name"
   FROM FDA.FDIC_BANKS.LOCATIONS
   WHERE "state" = 'CO'
   LIMIT 1000;
Results:
institution_name
"Armed Forces Bank, National Association"
The Huntington National Bank
U.S. Bank National Association
"Wells Fargo Bank, National Association"
Integrity Bank & Trust
"UMB Bank, National Association"
Adams Bank & Trust
ANB Bank
Independent Bank
The Central Trust Bank
5Star Bank
"JPMorgan Chase Bank, National Association"
InBank
FirstBank
Kirkpatrick Bank
Bank of Colorado
"Zions Bancorporation, N.A."
Pikes Peak National Bank
Farmers State Bank of Calhan
The State Bank
The Pueblo Bank and Trust Company
Riverstone Bank
Four Corners Community Bank
First Southwest Bank
Farmers Bank
First FarmBank
Home Loan State Bank
Timberline Bank
High Plains Bank
Park State Bank & Trust
First Colorado National Bank
Century Savings and Loan Association
Del Norte Bank
FNB Bank
Commerce Bank
"Morgan Stanley Private Bank, National Association"
State Bank of Downs
Open Bank
First American State Bank
The First National Bank of Las Animas
Stockmens Bank
Alpine Bank
First National Bank of Omaha
Bank of Estes Park
Bank of the West
Grand Valley Bank
"RG Bank, A Savings and Loan Association"
Alamosa State Bank
Community State Bank
HTLF Bank
MNB BANK
Fowler State Bank
Champion Bank
RNB STATE BANK
The Northern Trust Company
"Native American Bank, National Association"
NBH Bank
"BNY Mellon, National Association"
"Bank of America, National Association"
"PNC Bank, National Association"
First Interstate Bank
"TBK BANK, SSB"
Rocky Mountain Bank & Trust
Farmers & Stockmens Bank
The Eastern Colorado Bank
Points West Community Bank
Mountain Valley Bank
First Western Trust Bank
Bank of England
The Farmers State Bank of Brush
The Bank of Burlington
The Gunnison Bank and Trust Company
The First National Bank in Trinidad
Mountain View Bank of Commerce
Austin Capital Bank SSB
Evolve Bank & Trust
Yampa Valley Bank
KeyBank National Association
Waypoint Bank
Herring Bank
United Business Bank
Glacier Bank
First National Bank
Equitable Savings and Loan Association
The First National Bank of Fleming
Oakstar Bank
The Citizens State Bank of Ouray
"Golden Belt Bank, FSA"
High Country Bank
Gunnison Savings and Loan Association
"GNBank, National Association"
The First National Bank of Hugo
The Dolores State Bank
The Colorado Bank and Trust Company of La Junta
First-Citizens Bank & Trust Company
North Valley Bank
"BOKF, National Association"
CoreFirst Bank & Trust
"United Fidelity Bank, fsb"
Colorado Federal Savings Bank
First Fidelity Bank
FlatIrons Bank
"Transact Bank, National Association"
MidWestOne Bank
Pacific Western Bank
Beal Bank USA
Young Americans Bank
Western Alliance Bank
CIBC National Trust Company
"First National Bank, Cortez"
Redstone Bank
MidFirst Bank
Evergreen National Bank
Members Trust Company
American Bank of Commerce
AMG National Trust Bank
Bankers' Bank of the West
Verus Bank of Commerce
Wray State Bank
"Academy Bank, National Association"
Gateway First Bank
FMS Bank
San Luis Valley Federal Bank
First Pioneer National Bank
Fortis Private Bank
The Bank of Denver
Solera National Bank
FirsTier Bank
Frontier Bank
"Sunflower Bank, National Association"
FirstOak Bank
McClave State Bank

2025-01-16 21:02:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:38 - snowflake.connector.cursor - INFO - Number of results in first chunk: 282
2025-01-16 21:02:38 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:38 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:38 - root - INFO - SQL:
SELECT "zip_code", COUNT(*) AS "bank_branch_count"
   FROM FDA.FDIC_BANKS.LOCATIONS
   WHERE "state" = 'CO'
   GROUP BY "zip_code"
   LIMIT 1000;
Results:
zip_code,bank_branch_count
80913,2
80920,18
80916,2
80907,7
80922,4
80905,3
80132,4
80921,9
80903,24
80906,9
80918,12
80914,1
80923,2
80915,6
80909,7
80932,3
80808,2
80917,1
80933,1
80840,1
81301,15
81303,3
81122,2
80524,13
80549,2
80517,5
80538,10
81501,13
81504,2
81503,1
81422,1
80723,5
80654,1
80701,6
80863,3
80911,1
80831,4
81137,1
80525,24
80537,15
80534,5
81506,2
81427,4
80424,6
80443,5
81624,1
81090,1
81428,2
80446,2
80482,1
81230,5
80815,1
81130,1
81321,8
81052,6
81132,1
81067,4
80031,4
80221,2
80301,14
80265,1
80125,1
80021,10
81621,6
80924,1
81302,1
80526,4
81526,1
81432,2
80498,1
80817,5
80904,2
80521,6
80513,3
80728,1
81520,4
81521,5
81425,2
80435,3
80813,1
80528,7
81505,9
81401,11
81147,7
81073,3
81054,1
81201,5
80810,2
81140,1
81063,1
81416,7
81324,1
80442,3
80447,1
80459,2
81224,3
81036,1
80807,6
80828,3
80821,1
81328,1
81323,1
80731,1
81041,1
81047,1
81144,3
81433,1
81435,5
81423,1
81057,1
81252,2
80836,1
81641,2
81154,1
80720,5
80030,7
80022,8
80233,7
80102,3
80229,8
80241,5
80602,4
80136,2
80112,24
80122,10
80016,12
80013,8
80120,6
80014,6
80103,1
80246,6
80123,10
80026,7
80542,1
80503,1
80207,7
80249,5
80211,10
80226,11
80223,2
80205,4
80220,2
80208,1
80109,2
80138,1
80117,1
80005,5
80228,9
80004,4
80631,8
80520,1
81620,7
80011,9
80017,3
80206,30
80107,2
80214,5
81007,6
81005,8
81006,1
81625,3
80467,1
80751,7
81101,8
81211,5
80825,1
81413,1
81419,2
81415,1
81235,1
81089,2
80480,1
81082,7
81050,6
80734,3
81648,1
81125,1
81149,1
80743,1
80758,3
80759,4
80461,3
81092,1
80824,1
80601,13
80010,4
80260,3
80234,9
80216,4
80023,4
80015,10
80012,14
80111,33
80121,2
80113,5
80110,7
80231,6
80544,2
80304,1
80504,6
80302,20
80305,3
80516,5
80466,1
80020,12
80444,1
80222,12
80224,7
80202,31
80237,5
80209,1
80204,1
80227,7
80239,3
80230,2
80293,1
80124,9
80134,16
80126,8
80104,10
80116,1
80002,9
80403,2
80215,3
80439,8
80007,5
80401,13
80232,1
80212,1
80033,6
80128,5
80433,5
80003,2
80235,1
80440,1
80634,24
80610,1
80550,10
80642,1
80615,2
80643,2
80645,1
80546,1
80651,1
81632,7
81631,5
81637,2
81657,6
81623,6
81601,8
81636,1
81647,1
81611,11
80303,4
80219,5
80620,2
80639,1
80514,1
81615,1
80027,8
81226,2
81003,9
81001,4
81019,1
81039,2
80737,2
80129,8
80501,30
80540,1
80210,5
80218,5
80238,1
80203,8
80108,7
80127,8
80621,2
80543,1
81650,5
81212,9
81008,8
80487,8
81639,1

2025-01-16 21:02:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 21:02:40 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:40 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:40 - root - INFO - SQL:
SELECT DISTINCT "geo_id", "state_fips_code"
   FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
Results:
Too long, hard cut:
geo_id,state_fips_code
080310009031,08
080310045053,08
080919676001,08
080690013071,08
080140314001,08
080590103041,08
080690018083,08
080050861003,08
080690013061,08
081170003004,08
080770010023,08
080410028002,08
080130609001,08
080310046013,08
081230010061,08
080310046035,08
080770015015,08
080310004024,08
080010092022,08
080410056012,08
080010086052,08
080410039051,08
081170002001,08
080310041012,08
080410077001,08
080310068142,08
080410055022,08
080350140062,08
081230014051,08
081230022052,08
080010090021,08
080490001001,08
080010096035,08
080590117082,08
080039603003,08
080590103033,08
080590098402,08
080130135072,08
080010085293,08
080410078001,08
080590102121,08
080690028011,08
081230004011,08
080050835004,08
081010027004,08
080310036025,08
080770011023,08
080690027004,08
080410046012,08
080439784002,08
080410007001,08
080310040022,08
080350145043,08
080010092043,08
080399612042,08
080590120414,08
080310046034,08
080310042023,08
080410005002,08
080310083043,08
080310004021,08
080130129051,08
080859664001,08
080050820002,08
080310070373,08
080590109014,08
080050806001,08
080590117302,08
081230013001,08
080410051101,08
080410044011,08
080690018061,08
080310043033,08
080590113001,08
080310007021,08
080310042012,08
081259631002,08
080310068111,08
080010085241,08
080050065011,08
080899686005,08
080010093273,08
080410027003,08
080410039063,08
080590103081,08
080130126052,08
080010601001,08
080410057001,08
080590098481,08
080410043002,08
080050059512,08
080130125091,08
080310036011,08
081170003002,08
080639621003,08
080050077031,08
080050058002,08
080590120353,08
081230015003,08
080310044042,08
080410020001,08
080350139073,08
080399611001,08
080590118031,08
081230012022,08
080770015012,08
080590120241,08
080310045062,08
080350141271,08
080490002011,08
080870006004,08
080350145031,08
080410073003,08
080350139085,08
080690011043,08
080310156004,08
080310051022,08
080050832004,08
080050821003,08
080990003003,08
080310070892,08
080759659001,08
080410047011,08
080310038001,08
080710003002,08
080590120502,08
080130133025,08
081010026002,08
080010087051,08
080010085454,08
080799736001,08
080350140082,08
080350141303,08
080710001003,08
081170001003,08
080310034011,08
081230012012,08
080690017072,08
080310044033,08
081230020171,08
080859666013,08
080410066002,08
080470138001,08
080010085053,08
080050068583,08
080459518033,08
080050811004,08
080010095021,08
080130125012,08
080050810002,08
080010087063,08
080410001013,08
080590117093,08
080490002012,08
080010094061,08
080350141392,08
080050056352,08
080050067051,08
080350141372,08
081230020101,08
080130127012,08
080410054003,08
080310043044,08
080399612044,08
081230020071,08
080010080001,08
080310032015,08
080350140013,08
080710001002,08
080410041004,08
080350140083,08
080140314003,08
080459518041,08
080010083093,08
081099777001,08
080410074003,08
080150004013,08
080590099002,08
080050832001,08
080439794001,08
080130133082,08
080050814003,08
080459517024,08
080410075002,08
080310046022,08
080310003033,08
080310020001,08
080590120472,08
080310041034,08
080590098311,08
081010027001,08
080410063022,08
080310120144,08
080990001002,08
080410070002,08
080310028011,08
080770010021,08
080690018092,08
080590109013,08
080130129042,08
080350141361,08
080010085411,08
080410027002,08
080010600002,08
080050066033,08
080140313002,08
080859666022,08
080050068564,08
080690028024,08
080590098452,08
081010036001,08
080310033001,08
080310044032,08
080010087062,08
080810004003,08
080310040023,08
080410049021,08
080410033081,08
080310040063,08
080050056262,08
080690028022,08
080350141161,08
081230014131,08
081230015002,08
080410071022,08
081010023002,08
080130121042,08
080410038022,08
080039603004,08
081230020043,08
080590103034,08
080810005003,08
080310023002,08
080590113002,08
080050056251,08
080130127101,08
080439783001,08
080050829001,08
080410051082,08
080770006013,08
080130135071,08
080930004001,08
080519636006,08
081010009024,08
080050061003,08
081230022061,08
080050059521,08
080010086062,08
080410079001,08
080010085471,08
080590098072,08
080410037052,08
080350142022,08
080679709001,08
080130133024,08
080590098241,08
080050804002,08
080050831003,08
080590117011,08
080039602005,08
080310048011,08
080590120482,08
080050075001,08
080410034003,08
080050834001,08
080050807002,08
081170001005,08
080130125093,08
080130137023,08
080519638001,08
081230014141,08
080410034002,08
081010029011,08
080310120141,08
080590098482,08
081119726001,08
080010085064,08
080310043011,08
080839694004,08
080330001002,08
080130132081,08
081230020042,08
080130136022,08
080010082001,08
080459521001,08
080310083122,08
080690016021,08
080050056291,08
081159683001,08
080370004032,08
080590119042,08
080839693003,08
080050055533,08
080310029011,08
080310026021,08
080870005003,08
080350139111,08
081010028021,08
080310009044,08
081159683003,08
080310030021,08
080350140122,08
080050833001,08
080310024021,08
080050067074,08
080130608003,08
080140300002,08
080130125011,08
081230019022,08
080770017062,08
080310070372,08
0

2025-01-16 21:02:40 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:40 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:40 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-16 21:02:47 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:47 - root - INFO - SQL:
SELECT "zip_code", "zip_code_geom"
   FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
   WHERE "state_code" = 'CO'
   LIMIT 1000;
Results:
Too long, hard cut:
zip_code,zip_code_geom
80621,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x88\x03\x00\x00\x9b\x1f\x7fiQ<Z\xc0\xc2\xd9\xade2\x06D@d\x9b\xe2qQ<Z\xc0Nyt#,\x06D@\xd30|DL<Z\xc0\x85\xdb\xa1a1\x06D@F\xd8\xf0\xf4J<Z\xc0V#\xbb\xd22\x06D@\x9b\x02\x99\x9dE<Z\xc09\xc9V\x97S\x06D@o.\xfe\xb6\'<Z\xc0\x91D/\xa3X\x06D@\xecO\xe2s\'<Z\xc0\xc2\xb5\xda\xc3^\x06D@\x7f\x17\xb6f+<Z\xc0>\x07\x96#d\x06D@\x14{h\x1f+<Z\xc0\x9e`\xffun\x06D@\x96\xebm3\x15<Z\xc0\xca\xe0(yu\x06D@\x1e\x92\xe8e\x14<Z\xc0\xd2\x0f\xea""\x85\x06D@tF\x94\xf6\x06<Z\xc0\x85r\xa2]\x85\x06D@\xe6\x07\xae\xf2\x04<Z\xc0\xe7g\xeau\x8b\x06D@\xfb\x93\xf8\xdc\t<Z\xc0\x93\x8er0\x9b\x06D@""T\xa9\xd9\x03<Z\xc0\xd4\x02{L\xa4\x06D@\x87\x19\x1aO\x04<Z\xc0]\xbb\xb4\xe1\xb0\x06D@\xe3Y\x10\xca\xfb;Z\xc0\xcd\x17{/\xbe\x06D@\x93\x06E\xf3\x00<Z\xc0\xe8}\xe3k\xcf\x06D@\xef\xc8Xm\xfe;Z\xc0\xb2\x8d?Q\xd9\x06D@\xc0\xd4]\xd9\x05<Z\xc0\x7f\xd1\xe5\xcd\xe1\x06D@\xaa\xd5WW\x05<Z\xc0)\xa7=%\xe7\x06D@&r\xc1\x19\xfc;Z\xc0\x13\x04\x8fo\xef\x06D@\xfd7\xbd\x8b\xf7;Z\xc0\xe4U\x9d\xd5\x02\x07D@\xc4\x96\x1eM\xf5;Z\xc0\x1ac\'\xbc\x04\x07D@\xa5\xe9z\xa2\xeb;Z\xc0\xc7\x83-v\xfb\x06D@\x9b\xe6\x1d\xa7\xe8;Z\xc0\xf6\x07\xcam\xfb\x06D@\x97\xab\x1f\x9b\xe4;Z\xc0\xaa\xa8\xc14\x0c\x07D@\xde_\xcb+\xd7;Z\xc0_\x0bzo\x0c\x07D@P\x07@\xdc\xd5;Z\xc0`\x15od\x1e\x07D@\xba\xc5\xfc\xdc\xd0;Z\xc0\xf3\x8eSt$\x07D@P\xc5\x8d[\xcc;Z\xc0\xf3G\x18\x06,\x07D@-\tPS\xcb;Z\xc0\xcd\x05.\x8f5\x07D@\x8f\xc7\x0cT\xc6;Z\xc0\xac\x84\xee\x928\x07D@Q\x1bc\'\xbc;Z\xc0\x8a\x16\xa0m5\x07D@\x07\x82\x8eV\xb5;Z\xc0\x8aPl\x05M\x07D@\xff\xd4\x06\'\xa2;Z\xc0X\xc8\\\x19T\x07D@U\xa6\x98\x83\xa0;Z\xc0\x99\xb1h:;\x07D@\xba?\xa5J\x94;Z\xc0\x84\x0e\xba\x84C\x07D@\xb8\xcc\xe9\xb2\x98;Z\xc0\xe0/fKV\x07D@\x7fj\xbct\x93;Z\xc0\xa7R\xb3\x07Z\x07D@\xe2\\\xc3\x0c\x8d;Z\xc0O\xba\xf4/I\x07D@\xb6\xf6>U\x85;Z\xc0\x0f/\x88HM\x07D@\xe0\xfc\x14\xc7\x81;Z\xc0Kk\xd3\xd8^\x07D@*y\x03\xcc|;Z\xc0h\x1c\xeawa\x07D@\x024\xd8\xd4y;Z\xc0\xaf\x0f\xeb\x8dZ\x07D@\xa6\x85\xcb*l;Z\xc0{j\xf5\xd5U\x07D@z\xaf\xe8\xd6k;Z\xc0\xab\\\xa8\xfck\x07D@7\x19U\x86q;Z\xc0\x99v1\xcdt\x07D@\x96FZ*o;Z\xc0\xfa\x03\xe5\xb6}\x07D@S\x08\xe4\x12G;Z\xc0\xd2p\xca\xdc|\x07D@=HO\x91C;Z\xc00y\x03\xcc|\x07D@G_\xcf\xd7,;Z\xc0\xfc7/N|\x07D@\xd4\r\x14x\';Z\xc0\x8b\xc4\x045|\x07D@~\xac\xe0\xb7!;Z\xc0H\xd5v\x13|\x07D@\x8e\xee\xae\xb3!;Z\xc0\xd6-\x02c}\x07D@\x06\xf7\x03\x1e\x18;Z\xc0e\xba\xd7I}\x07D@\x96\xd1\xc8\xe7\x15;Z\xc0=[\x07\x07{\x07D@s/0+\x14;Z\xc0\x03]\xfb\x02z\x07D@lcz\xc2\x12;Z\xc0\x9e\x97\x8a\x8dy\x07D@\xfdL\xbdn\x11;Z\xc0[\xa8\xfcky\x07D@.t%\x02\xd5:Z\xc0W\xeb\xc4\xe5x\x07D@}\xb8r\xf6\xce:Z\xc0\xe6w\x9a\xccx\x07D@\x91\xa2\\\x1a\xbf:Z\xc0\x91\x1d\x1b\x81x\x07D@\x00\tQ\xbe\xa0:Z\xc0\xba\xe4\x7f\xf2w\x07D@\xc0\x9cg\xecK:Z\xc0\x80\xe6s\xeev\x07D@e9\t\xa5/:Z\xc0]\x10\x91\x9av\x07D@\xb0\xac4)\x05:Z\xc0\x17d\xcb\xf2u\x07D@\x89\x98\x12I\xf49Z\xc0\xa6\xf0\xa0\xd9u\x07D@\x8d\xb6*\x89\xec9Z\xc0Q\x96!\x8eu\x07D@)\xd7\x14\xc8\xec9Z\xc0c\xe4,\xeci\x07D@\xe0\xe7\x86\xa6\xec9Z\xc0Fo\xb8\x8f\xdc\x06D@\xb0c\xea\xae\xec9Z\xc0 r\xfaz\xbe\x06D@V2\x8e\x91\xec9Z\xc0\xc2\xc1\xde\xc4\x90\x06D@V2\x8e\x91\xec9Z\xc0\xdd\xb3\xae\xd1r\x06D@\x8d\xb6*\x89\xec9Z\xc0f\xcfej\x12\x06D@\xeb\x95@J\xec9Z\xc0\x1e\x88,\xd2\xc4\x05D@""\x1a\xddA\xec9Z\xc0\xfd^\n\x0f\x9a\x05D@\x98V\xd1\x1f\x9a9Z\xc0R\xb9\x89Z\x9a\x05D@^\x18w\x83h9Z\xc0\xfd^\n\x0f\x9a\x05D@e\x8dz\x88F9Z\xc0Wv\xc1\xe0\x9a\x05D@\x05s\x82699Z\xc0\x99eO\x02\x9b\x05D@U3k) 9Z\xc0\xc7\xe9\xeb\xf9\x9a\x05D@\x97VC\xe2\x1e9Z\xc0\x17\x873\xbf\x9a\x05D@1\x82T\x8a\x1d9Z\xc0AN\x980\x9a\x05D@\xbc\x94\xbad\x1c9Z\xc0\xe66\xe1^\x99\x05D@(eRC\x1b9Z\xc0\x98\xcd\xe30\x98\x05D@\xb7\x0b\xcdu\x1a9Z\xc0\x94D\xf6A\x96\x05D@\xa6\xba\x80\x97\x199Z\xc0$9`W\x93\x05D@\x8a|%\x90\x129Z\xc0~\x10\xc9\x90c\x05D@\x8c\xd9\x92U\x119Z\xc0\xca\xf4K\xc4[\x05D@\xb5\x91y\xe4\x0f9Z\xc0\xe7T2\x00T\x05D@\xa4Z\xd2Q\x0e9Z\xc0\xb3\xe3\x86\xdfM\x05D@\x18\x11\xc5\xe4\r9Z\xc0V\x0f\x98\x87L\x05D@\xa6\xb7?\x17\r9Z\xc0\x14TT\xfdJ\x05D@\xbd\xea\x8f0\x0c9Z\xc0\xd9UH\xf9I\x05D@B&\x199\x0b9Z\xc0\xc1-\x1fII\x05D@\xfb\x93\xf8\xdc\t9Z\xc0\xfd_u\xe4H\x05D@\x12\xc7H\xf6\x089Z\xc0-\xe4\x11\xdcH\x05D@\xdd\x9f\x19\xc4\x079Z\xc0""6X8I\x05D@\x94\x06E\xf3\x009Z\xc0\x01\xb5\x18<L\x05D@\xbf\xf80{\xd98Z\xc0\xf1\xb7=Ab\x05D@aX\x8c\xba\xd68Z\xc0\x9c)t^c\x05D@k\x0e\x10\xcc\xd18Z\xc0h\x80\x0b\xb2e\x05D@@8-x\xd18Z\xc0\t\xe0f\xf1b\x05D@\x11\xce5\xcc\xd08Z\xc0hP4\x0f`\x05D@\xb4""j\xa2\xcf8Z\xc0\xe8\xd9\xac\xfa\\\x05D@6\x0c\xadN\xce8Z\xc0\xcd(\x96[Z\x05D@\xd9\xb9\xf7p\xc98Z\xc0\xf1\xce\xa1\x0cU\x05D@y`\x8e\x1e\xbf8Z\xc0b\xbdQ+L\x05D@\'T\xfe\xb5\xbc8Z\xc0E\x0c;\x8cI\x05D@;\x1c]\xa5\xbb8Z\xc0\xd4\xccZ\nH\x05D@\xad\xc3\xd1U\xba8Z\xc0\xc9\x865\x95E\x05D@\xad\xddv\xa1\xb98Z\xc04qr\xbfC\x05D@x\x9c\xa2#\xb98Z\xc0\x85B\x04\x1cB\x05D@\xac\xce\xf8\xbe\xb88Z\xc0\xbf\xa8\xa4N@\x05D@\xe8\x00OZ\xb88Z\xc0\xaa\xe8\x0f\xcd<\x05D@G\t\x88I\xb88Z\xc0{\x98\xbdl;\x05D@\xa2}\xac\xe0\xb78Z\xc0sz\xde\x8d\x05\x05D@q\xd0\xec\xba\xb78Z\xc0\rZH\xc0\xe8\x04D@\x89\x12\xbb\xb6\xb78Z\xc06\x89A`\xe5\x04D@\xd8\xf2\xca\xf5\xb68Z\xc0\xbd\xbe\xd6\xa5F\x04D@\x91F\x05N\xb68Z\xc0\xe3\xf1\xb4\xfc\x

2025-01-16 21:02:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:50 - snowflake.connector.cursor - INFO - Number of results in first chunk: 21
2025-01-16 21:02:52 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:52 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:52 - root - INFO - SQL:
SELECT "geo_id", "blockgroup_geom"
   FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
Results:
Too long, hard cut:
geo_id,blockgroup_geom
080010093083,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x004\x00\x00\x00C\xd0_\xe8\x11@Z\xc0\xa8\x9f7\x15\xa9\xeaC@W\x98\xbe\xd7\x10@Z\xc0\xab\x07\xccC\xa6\xeaC@\xb1\xfdd\x8c\x0f@Z\xc0\xe9\xd5\x00\xa5\xa1\xeaC@v\x19\xfe\xd3\r@Z\xc0X\x90f,\x9a\xeaC@\xe0\xa6\xcd8\r@Z\xc0""\x83\xdcE\x98\xeaC@\xdc,^,\x0c@Z\xc0)\xa8\xa8\xfa\x95\xeaC@f\x16\xa1\xd8\n@Z\xc0\x8f\xd5\xad\x9e\x93\xeaC@f0F$\n@Z\xc0fB\x93\xc4\x92\xeaC@\xd2\x00\xde\x02\t@Z\xc0+D\x87\xc0\x91\xeaC@o\x89\\p\x06@Z\xc0\xb0V\xed\x9a\x90\xeaC@p\x0b\x96\xea\x02@Z\xc0\x97.\xc4\xea\x8f\xeaC@\x03,\x80)\x03@Z\xc0\x04k\x9cMG\xeaC@L\x1b\x0eK\x03@Z\xc0\x8d\xe3\x87J#\xeaC@\xf2\x98\x81\xca\xf8?Z\xc0\xcd\xe5\x06C\x1d\xeaC@#N\'\xd9\xea?Z\xc0\x13\rR\xf0\x14\xeaC@=\x85\xea\xe6\xe2?Z\xc0~_#I\x10\xeaC@\x17f\xa1\x9d\xd3?Z\xc0 \xd2o_\x07\xeaC@\x16W#\xbb\xd2?Z\xc0\x19\x158\xd9\x06\xeaC@\x87 \x07%\xcc?Z\xc0R\xf2\xea\x1c\x03\xeaC@\xed\xc0\xc7`\xc5?Z\xc0\xca\xbe+\x82\xff\xe9C@\x1a3\x89z\xc1?Z\xc0\x96\xb1\xa1\x9b\xfd\xe9C@\xa1/\xbd\xfd\xb9?Z\xc0\xd2K\x8ce\xfa\xe9C@\x05\x8aX\xc4\xb0?Z\xc0\x10\xe6v/\xf7\xe9C@K\xcbH\xbd\xa7?Z\xc0\xe8\x86\xa6\xec\xf4\xe9C@\xc5$\xea\x05\x9f?Z\xc0\x17?\x8d{\xf3\xe9C@\x88.\xa8o\x99?Z\xc0r\x8a\x8e\xe4\xf2\xe9C@\x15$D\xf9\x82?Z\xc0\xca\xd5\x8fM\xf2\xe9C@\xb2\xe0\x0c\xfe~?Z\xc0,\xde\xc8<\xf2\xe9C@E\xc2\x85<\x82?Z\xc0\x85\xd1\xacl\x1f\xeaC@\tQ\xbe\xa0\x85?Z\xc0h\xb8\x01\x9f\x1f\xeaC@\xaf\xd1r\xa0\x87?Z\xc0\xb9\x12\x81\xea\x1f\xeaC@qB\xaf?\x89?Z\xc0N\\\x8eW \xeaC@\xff\x80\x95C\x8b?Z\xc0\x07|~\x18!\xeaC@\x17\x9e\x97\x8a\x8d?Z\xc0R\xe5{F""\xeaC@(\xbb\x99\xd1\x8f?Z\xc04\x98\x86\xe1#\xeaC@\xa8""\xa3\x03\x92?Z\xc0\t\x9d\xd7\xd8%\xeaC@\x18H\xde9\x94?Z\xc0\x15\xe3\xfcM(\xeaC@Z,E\xf2\x95?Z\xc0<B\xcd\x90*\xeaC@^\xa6\xb4\xfe\x96?Z\xc0}\xfd\x10\x1b,\xeaC@\x94\xdca\x13\x99?Z\xc0)\x07\xb3\t0\xeaC@d> \xd0\x99?Z\xc0\t\xba\xbd\xa41\xeaC@\x1atB\xe8\xa0?Z\xc0L\x7f\xf6#E\xeaC@\xcdf\x9c\x86\xa8?Z\xc0eI\x80\x9aZ\xeaC@W\xd5Y-\xb0?Z\xc0\xcb\xb0Q\xd6o\xeaC@\xd8\xd8%\xaa\xb7?Z\xc0\x0fB@\xbe\x84\xeaC@\xb6\xa1b\x9c\xbf?Z\xc0\x9f<,\xd4\x9a\xeaC@\xd0\x9c\xf5)\xc7?Z\xc0\xda\xdc\x98\x9e\xb0\xeaC@ev\xa4\xfa\xce?Z\xc0\xa5\t\xdbO\xc6\xeaC@!\x92!\xc7\xd6?Z\xc0\xachs\x9c\xdb\xeaC@F^\xd6\xc4\x02@Z\xc0\x7f\xf5\xb8o\xb5\xeaC@\xc9\x98I\xd4\x0b@Z\xc0\xdbD-\xcd\xad\xeaC@C\xd0_\xe8\x11@Z\xc0\xa8\x9f7\x15\xa9\xeaC@')"
080690011111,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00i\x00\x00\x00\xc9\xadI\xb7%FZ\xc0\xaa=\xec\x85\x02HD@\xaak{\xbb%FZ\xc05u\x1e\x15\xffGD@o\x87\x14\x03$FZ\xc0\xc9\xbe+\x82\xffGD@\xc5X\xa6_""FZ\xc0\xb2b\xb8:\x00HD@\xd2:\xaa\x9a FZ\xc0y\xb9O\x8e\x02HD@\x9eajK\x1dFZ\xc0\xfc/\xd7\xa2\x05HD@j\x88*\xfc\x19FZ\xc0\x8a \xce\xc3\tHD@\x169\xd2\x19\x18FZ\xc0)\xb0\x00\xa6\x0cHD@\x84f\xd7\xbd\x15FZ\xc0\xe5X\xdeU\x0fHD@}\x80|\t\x15FZ\xc00&\xfd\xbd\x14HD@\xd7\xe5""\xbe\x13FZ\xc0\xcf\xb5/\xa0\x17HD@\x06\xda\x1dR\x0cFZ\xc0Q\xf8l\x1d\x1cHD@0\xe0\xf3\xc3\x08FZ\xc0 @\x86\x8e\x1dHD@\x05\x89\xed\xee\x01FZ\xc0\x95\x08T\xff HD@#\xe1\t\xbd\xfeEZ\xc0@F@\x85#HD@8\xf7W\x8f\xfbEZ\xc0\x11\x8eY\xf6$HD@\x05\x1e\x18@\xf8EZ\xc0\x11\x8eY\xf6$HD@,,\xb8\x1f\xf0EZ\xc09\x89\x08\xff""HD@\xb1\x974F\xebEZ\xc0\xa2\xb6\r\xa3 HD@z\xc6\xbed\xe3EZ\xc0\x16.\xab\xb0\x19HD@\xfd\xe3K\xa8\xe0EZ\xc0\xab\xdfLL\x17HD@\x18\xc2\xf8i\xdcEZ\xc0\xab\xdfLL\x17HD@\x93\xeb\xa6\x94\xd7EZ\xc0\xd1\xe9y7\x16HD@\x97\xb3\x05\x84\xd6EZ\xc0$\xac\x8d\xb1\x13HD@\n\xc3\x0ec\xd2EZ\xc0\xb2\x17\n\xd8\x0eHD@\xca;\x15p\xcfEZ\xc0\xda\x12\xb9\xe0\x0cHD@\x9d.\x8b\x89\xcdEZ\xc0\xda\x12\xb9\xe0\x0cHD@\n\x8c\x83K\xc7EZ\xc0\xb1\x17\n\xd8\x0eHD@/\xe4\x9f\x19\xc4EZ\xc0\xb1\x17\n\xd8\x0eHD@\x95\xf7\xffq\xc2EZ\xc0\xa9Z\xd2Q\x0eHD@I\xc2L\xdb\xbfEZ\xc0\xda\x12\xb9\xe0\x0cHD@\xd4\xd4\xb2\xb5\xbeEZ\xc0Z4\x9d\x9d\x0cHD@\xfd\x8c\x99D\xbdEZ\xc0\x03\xda\x1dR\x0cHD@*\xe5\xb5\x12\xbaEZ\xc0\x03\xda\x1dR\x0cHD@D\xc3b\xd4\xb5EZ\xc0\xda\x12\xb9\xe0\x0cHD@\x118\x12h\xb0EZ\xc0\xb1\x17\n\xd8\x0eHD@7\xaa\xd3\x81\xacEZ\xc0\xb5\x08\x8c\xf5\rHD@\x96\xd7\xd8%\xaaEZ\xc06\xc6Nx\tHD@\xb8\x9b\xe0\x9b\xa6EZ\xc0k;m\x8d\x08HD@cL\x88\xb9\xa4EZ\xc0k;m\x8d\x08HD@#\xc5\x8e\xc6\xa1EZ\xc05\xc6Nx\tHD@\x04\xe8\xf7\xfd\x9bEZ\xc0\x11\xbc!\x8d\nHD@\xc8\xf4\x12c\x99EZ\xc0\x11\xbc!\x8d\nHD@|\xbf_\xcc\x96EZ\xc0f~5\x07\x08HD@\xa2K\xc61\x92EZ\xc0\xffP0c\nHD@\x90j\xd8\xef\x89EZ\xc0\xb0KTo\rHD@7S!\x1e\x89EZ\xc0\xa4\x9d\x9a\xcb\rHD@\xd6\xea9\xe9}EZ\xc0J\x1eO\xcb\x0fHD@{\x1a\xbe\x85uEZ\xc0\x80\x93m\xe0\x0eHD@\xbb\x84\xd1\xaclEZ\xc0]\x89@\xf5\x0fHD@\x83\x17}\x05iEZ\xc09\x7f\x13\n\x11HD@/\xc8$#gEZ\xc0\x02\n\xf5\xf4\x11HD@\x9d\xf5)\xc7dEZ\xc0\xc1\xb2\xd2\xa4\x14HD@\xb6\x85\xe7\xa5bEZ\xc0S\x94K\xe3\x17HD@\xbcMF\x95aEZ\xc0\xd3\xd6\x88`\x1cHD@]n0\xd4aEZ\xc0)Ral!HD@V\x88\xd5\x1faEZ\xc0\x88\x8aq\xfe&HD@\xbd\x9b5x_EZ\xc0\xe8\xb3\x03\xae+HD@o28J^EZ\xc0K\xdd\x95]0HD@\xf6\xef\xfa\xccYEZ\xc0M\x96Z\xef7HD@\x9e\x0c\x8e\x92WEZ\xc0\x06\x82\x00\x19:HD@\xea$[]NEZ\xc0=\xb0\xe3\xbf@HD@Q\x86\xaa\x98JEZ\xc0\x1ec\xeeZBHD@\xbcai\xe0GEZ\xc0\xe3\xfcM(DHD@+\xc3\xb8\x1bDEZ\xc0\xc0\xf2 =EHD@\x04\x982p@EZ\xc0\xe2\xfcM(DHD@k-\xccB;EZ\xc0+E\xf2\x95@HD@;\xe8\xa0K8EZ\xc0a\xba\x10\xab?HD@Q29\xb53EZ\xc07\xf3\xab9@HD@\xbc\r\xf8\x

2025-01-16 21:02:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:54 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 21:02:54 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:54 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:54 - root - INFO - SQL:
SELECT "institution_name", "branch_address", "branch_city", "zip_code"
   FROM FDA.FDIC_BANKS.LOCATIONS
   WHERE "state" = 'CO'
   LIMIT 1000;
Results:
Too long, hard cut:
institution_name,branch_address,branch_city,zip_code
"Armed Forces Bank, National Association","6384 Wetzel Avenue, Building 1512",Fort Carson,80913
The Huntington National Bank,9265 North Union Boulevard,Colorado Springs,80920
The Huntington National Bank,2930 South Academy Boulevard,Colorado Springs,80916
The Huntington National Bank,3290 Centennial Boulevard,Colorado Springs,80907
U.S. Bank National Association,1125 Garden Of The Gods Road,Colorado Springs,80907
U.S. Bank National Association,1520 Briargate Boulevard,Colorado Springs,80920
U.S. Bank National Association,6030 Stetson Hills Boulevard,Colorado Springs,80922
"Wells Fargo Bank, National Association",1800 South Nevada Avenue,Colorado Springs,80905
"Wells Fargo Bank, National Association",560 Garden Of The Gods Road,Colorado Springs,80907
Integrity Bank & Trust,1275 Village Ridge Pt,Monument,80132
"UMB Bank, National Association",502 Security Boulevard,Colorado Springs,80911
Adams Bank & Trust,"1359 Interquest Parkway, Suite 150",Colorado Springs,80921
ANB Bank,15 West Cimarron Street,Colorado Springs,80903
Independent Bank,155 Lake Avenue,Colorado Springs,80906
Independent Bank,501 South Tejon,Colorado Springs,80903
Independent Bank,"104 S. Cascade Avenue, Suite 2014",Colorado Springs,80903
The Central Trust Bank,5278 North Nevada Avenue Suite 100,Colorado Springs,80918
5Star Bank,"Peterson Air Force Base, 455 W. Paine St., Bldg. 1485",Colorado Springs,80914
"JPMorgan Chase Bank, National Association",7390 Duryea Drive,Colorado Springs,80923
"JPMorgan Chase Bank, National Association",7685 N Academy Blvd,Colorado Springs,80920
"JPMorgan Chase Bank, National Association",3750 Bloomington Street,Colorado Springs,80922
"JPMorgan Chase Bank, National Association",11555 Meridian Market View,Falcon,80831
"JPMorgan Chase Bank, National Association",402 North Tejon Street,Colorado Springs,80903
"Wells Fargo Bank, National Association",8620 North Union Boulevard,Colorado Springs,80920
InBank,945 Tenderfoot Hill Road,Colorado Springs,80906
FirstBank,2790 Briargate Boulevard,Colorado Springs,80920
Kirkpatrick Bank,"102 North Cascade Avenue, Suite 100",Colorado Springs,80903
"JPMorgan Chase Bank, National Association",3306 Centennial Blvd.,Colorado Springs,80907
Bank of Colorado,El Paso County,Colorado Springs,80915
Bank of Colorado,1146 Interquest Parkway,Colorado Springs,80921
Bank of Colorado,4328 Edison Avenue,Colorado Springs,80915
KeyBank National Association,1521 South 8th Street,Colorado Springs,80906
KeyBank National Association,3085 S Academy Blvd,Colorado Springs,80916
"Zions Bancorporation, N.A.",7390 North Academy Boulevard,Colorado Springs,80920
"Zions Bancorporation, N.A.",111 South Tejon Street,Colorado Springs,80903
Independent Bank,440 Chapel Hills Drive,Colorado Springs,80920
U.S. Bank National Association,1415 North Academy Boulevard,Colorado Springs,80909
U.S. Bank National Association,6925 Mesa Ridge Parkway,Fountain,80817
U.S. Bank National Association,2308 East Pikes Peak Avenue,Colorado Springs,80909
U.S. Bank National Association,1070 West Baptist Road,Colorado Springs,80921
The Huntington National Bank,2870 New Center Pt,Colorado Springs,80922
The Huntington National Bank,5470 E. Woodmen Road,Colorado Springs,80920
"Wells Fargo Bank, National Association",4151 North Academy Boulevard,Colorado Springs,80918
"Wells Fargo Bank, National Association",15844 Jackson Creek Parkway,Monument,80132
"Bank of America, National Association",7808 N Academy Blvd,Colorado Springs,80920
Pikes Peak National Bank,2401 W Colorado Ave,Colorado Springs,80904
Integrity Bank & Trust,5550 Powers Center Point,Colorado Springs,80920
The First National Bank of Las Animas,2768 Northgate Blvd,Colorado Springs,80921
Waypoint Bank,24 South Weber Street Suite 151,Colorado Springs,80903
"Academy Bank, National Association",3201 E.  Platte Avenue,Colorado Springs,80909
NBH Bank,"19 North Tejon, Ste 100",Colorado Springs,80903
5Star Bank,104 S Cascade Ave,Colorado Springs,80903
"UMB Bank, National Association",730 Citadel Drive East,Colorado Springs,80932
"UMB Bank, National Association",101 North Cascade Avenue,Colorado Springs,80903
ANB Bank,1130 North Circle Drive,Colorado Springs,80932
Farmers State Bank of Calhan,7025 Meridian Rd,Peyton,80831
Farmers State Bank of Calhan,445 N Ellicott Hwy,Calhan,80808
"Armed Forces Bank, National Association",Coleman And Linstrom Streets,Fort Carson,80913
The Huntington National Bank,3175 East Platte Avenue,Colorado Springs,80909
The Huntington National Bank,7239 N. Academy Boulevard,Colorado Springs,80920
Bank of Colorado,421 North Tejon Street,Colorado Springs,80903
"Wells Fargo Bank, National Association",5710 Constitution Avenue,Colorado Springs,80915
"Wells Fargo Bank, National Association",9649 Prominent Point,Colorado Springs,80924
"Wells Fargo Bank, National Association",90 South Cascade Avenue,Colorado Springs,80903
Integrity Bank & Trust,13475 Voyager Parkway,Colorado Springs,80921
U.S. Bank National Association,81

2025-01-16 21:02:54 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:54 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:54 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:56 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 21:02:56 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:56 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:56 - root - INFO - SQL:
SELECT DISTINCT "state_fips_code", "state_name"
   FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
Results:
state_fips_code,state_name
08,Colorado

2025-01-16 21:02:56 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:56 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:56 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:58 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 21:02:58 - snowflake.connector.connection - INFO - closed
2025-01-16 21:02:58 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:02:58 - snowflake.connector.network - ERROR - 000504: 504: HTTP 504: Gateway Timeout
Traceback (most recent call last):
  File "/usr/local/lib/python3.11/dist-packages/snowflake/connector/network.py", line 913, in _request_exec_wrapper
    return_object = self._request_exec(
                    ^^^^^^^^^^^^^^^^^^^
  File "/usr/local/lib/python3.11/dist-packages/snowflake/connector/network.py", line 1190, in _request_exec
    raise err
  File "/usr/local/lib/python3.11/dist-packages/snowflake/connector/network.py", line 1127, in _request_exec
    raise RetryRequest(err)
snowflake.connector.network.RetryRequest: 000504: 504: HTTP 504: Gateway Timeout
2025-01-16 21:02:58 - root - INFO - SQL:
SELECT COUNT(DISTINCT "geo_id") AS "block_group_count"
   FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
   WHERE "state_fips_code" = '08';
Results:
block_group_count
3532

2025-01-16 21:02:58 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:02:58 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:02:58 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:02:59 - snowflake.connector.cursor - INFO - Number of results in first chunk: 525
2025-01-16 21:02:59 - snowflake.connector.connection - INFO - closed
2025-01-16 21:03:00 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:03:00 - root - INFO - SQL:
SELECT DISTINCT "zip_code", "county"
    FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
    WHERE "state_code" = 'CO'
    LIMIT 1000;
Results:
Too long, hard cut:
zip_code,county
80447,Grand County
80017,"Adams County, Arapahoe County, Douglas County"
81221,Fremont County
81503,Mesa County
80744,Sedgwick County
81021,Kiowa
80247,"Denver County, Adams County, Arapahoe County, Douglas County"
80129,"Douglas County, Arapahoe County, Douglas County, Jefferson County"
80910,El Paso County
81045,Kiowa County
80651,Weld County
80433,Jefferson County
80734,Phillips County
81092,Prowers County
81024,Las Animas
80026,"Boulder County, Weld County, Boulder County"
81523,Mesa
81501,Mesa County
81654,Pitkin County
81418,Delta County
81652,Garfield County
80938,El Paso County
81332,Dolores County
80831,El Paso County
80303,Boulder County
80451,Grand County
80550,"Larimer County, Larimer County, Weld County, Weld County"
81426,San Miguel County
80235,"Denver County, Jefferson County"
81223,Fremont County
81058,Otero County
80218,Denver County
80463,Eagle County
81650,Garfield County
80516,"Weld County, Boulder County, Weld County, Broomfield County, Boulder County"
80214,"Denver County, Jefferson County"
80455,Boulder County
80818,Lincoln County
81525,Mesa
80534,"Larimer County, Larimer County, Weld County, Weld County"
81001,Pueblo County
81507,Mesa County
81244,Fremont County
80750,Morgan County
80829,El Paso County
80030,"Adams County, Jefferson County, Adams County"
81625,Moffat County
81147,"Hinsdale County, Archuleta County"
81212,Fremont County
80102,"Arapahoe County, Adams County, Arapahoe County, Adams County, Arapahoe County, Douglas County"
81403,"Montrose County, Ouray County"
81036,Kiowa County
80861,Kit Carson County
80864,El Paso
80736,Logan County
80721,Phillips County
80923,El Paso County
80212,"Jefferson County, Denver County, Adams County"
80473,Jackson
81324,Dolores County
80113,Arapahoe County
81239,Gunnison
80422,"Boulder County, Gilpin County, Jefferson County, Gilpin County, Clear Creek County, Gilpin County"
80005,"Adams County, Jefferson County"
81040,Huerfano
80435,Summit County
81224,Gunnison County
80512,Larimer
80302,Boulder County
80863,Teller County
81422,Montrose County
81084,Baca County
81064,Baca County
81141,Conejos County
80654,Morgan County
80233,"Adams County, Weld County"
80226,"Denver County, Jefferson County"
80549,Larimer County
80824,Yuma County
80537,"Larimer County, Larimer County, Weld County"
81073,Baca County
80902,El Paso County
80812,Washington
81434,Gunnison
80928,El Paso County
80203,Denver County
80108,Douglas County
80914,El Paso County
80457,Jefferson County
80421,Park
80470,Jefferson
81623,"Eagle County, Gunnison County, Garfield County, Pitkin County, Eagle County, Pitkin County"
80814,Teller County
80481,Boulder County
81647,Garfield County
81505,Mesa County
80024,Adams County
80130,Douglas County
80105,Arapahoe County
80924,El Paso County
80503,"Boulder County, Boulder County, Weld County"
81632,Eagle County
81025,Pueblo County
81082,Las Animas County
81030,Otero County
81057,Bent
81241,Gunnison County
81210,Gunnison
81301,La Plata County
80544,Boulder County
80822,Yuma County
81124,Conejos County
80128,"Jefferson County, Arapahoe County, Arapahoe County, Jefferson County, Arapahoe County, Douglas County, Jefferson County"
81641,Rio Blanco County
81125,"Rio Grande County, Saguache County"
80228,Jefferson County
80401,Jefferson County
81148,Conejos County
80027,"Boulder County, Jefferson County, Boulder County, Broomfield County"
81521,Mesa County
81612,
80521,Larimer County
80478,Grand County
80927,El Paso County
81131,Saguache County
81090,Baca County
80465,Jefferson County
80511,
81140,Conejos County
81006,Pueblo County
81334,Montezuma County
80731,Phillips County
80124,Douglas County
80542,Weld County
80802,Cheyenne
80210,Denver County
81242,Chaffee County
80305,Boulder County
80815,Kit Carson County
81123,Costilla County
80452,"Clear Creek County, Clear Creek County, Gilpin County"
81320,Dolores
81326,La Plata
80123,"Jefferson County, Denver County, Arapahoe County, Arapahoe County, Jefferson County, Arapahoe County, Douglas County, Jefferson County"
81637,Eagle County
81633,
80836,Kit Carson County
81416,Delta County
80525,Larimer County
81062,Crowley County
80426,Eagle
81321,Montezuma County
80467,Routt County
80498,Summit County
81233,Fremont County
80304,Boulder County
81227,Chaffee County
80623,Weld County
80427,"Gilpin County, Clear Creek County, Gilpin County"
81236,Chaffee
81220,Gunnison
81655,Eagle County
80023,"Adams County, Weld County, Adams County, Jefferson County, Broomfield County"
80809,"El Paso County, El Paso County, Teller County"
80120,"Arapahoe County, Douglas County, Arapahoe County, Douglas County, Jefferson County"
80293,Denver County
80610,Weld County
80913,El Paso County
80727,Yuma County
80737,Sedgwick County
81043,Prowers County
80209,Denver County
80223,Denver County
80112,"Arapahoe County, Douglas County, Adams County, Arapahoe County, Douglas County"
80904,El Paso County
81248,Saguache
80930,El Paso
80260,"Adams County, Adams County, Weld County, Adams County, Jefferson County"
80602,"Ada

2025-01-16 21:03:00 - root - INFO - itercount: 0
2025-01-16 21:03:00 - root - INFO - Database Name: FDA
Schema Name: CENSUS_UTILITY
DDL describes table information.
,0
table_name,FIPS_CLASS_CODE
description,
DDL,"create or replace TABLE FIPS_CLASS_CODE (
	""fips_class_code"" VARCHAR(16777216),
	""code_description"" VARCHAR(16777216)
);"

,1
table_name,FUNCTIONAL_STATUS_CODES
description,
DDL,"create or replace TABLE FUNCTIONAL_STATUS_CODES (
	""functional_status_code"" VARCHAR(16777216),
	""code_description"" VARCHAR(16777216),
	""associated_geographic_entity"" VARCHAR(16777216)
);"

,2
table_name,MTFCC_FEATURE_CLASS_CODES
description,
DDL,"create or replace TABLE MTFCC_FEATURE_CLASS_CODES (
	""feature_class_code"" VARCHAR(16777216),
	""feature_class"" VARCHAR(16777216),
	""superclass"" VARCHAR(16777216),
	""point"" BOOLEAN,
	""linear"" BOOLEAN,
	""areal"" BOOLEAN,
	""description"" VARCHAR(16777216)
);"

,3
table_name,FIPS_CODES_ALL
description,
DDL,"create or replace TABLE FIPS_CODES_ALL (
	""summary_level"" VARCHAR(16777216),
	""summary_level_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_subdivision_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""consolidated_city_fips_code"" VARCHAR(16777216),
	""area_name"" VARCHAR(16777216)
);"

,4
table_name,LSAD_CODES
description,
DDL,"create or replace TABLE LSAD_CODES (
	""lsad_code"" VARCHAR(16777216),
	""lsad_description"" VARCHAR(16777216),
	""associated_geographic_entities"" VARCHAR(16777216)
);"

,5
table_name,FIPS_CODES_STATES
description,
DDL,"create or replace TABLE FIPS_CODES_STATES (
	""state_fips_code"" VARCHAR(16777216),
	""state_postal_abbreviation"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""state_gnisid"" VARCHAR(16777216)
);"

Database Name: FDA
Schema Name: FDA_FOOD
DDL describes table information.
,0
table_name,FOOD_ENFORCEMENT
description,
DDL,"create or replace TABLE FOOD_ENFORCEMENT (
	""classification"" VARCHAR(16777216),
	""center_classification_date"" DATE,
	""report_date"" DATE,
	""postal_code"" VARCHAR(16777216),
	""termination_date"" DATE,
	""recall_initiation_date"" DATE,
	""recall_number"" VARCHAR(16777216),
	""city"" VARCHAR(16777216),
	""event_id"" NUMBER(38,0),
	""distribution_pattern"" VARCHAR(16777216),
	""recalling_firm"" VARCHAR(16777216),
	""voluntary_mandated"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""reason_for_recall"" VARCHAR(16777216),
	""initial_firm_notification"" VARCHAR(16777216),
	""status"" VARCHAR(16777216),
	""product_type"" VARCHAR(16777216),
	""country"" VARCHAR(16777216),
	""product_description"" VARCHAR(16777216),
	""code_info"" VARCHAR(16777216),
	""address_1"" VARCHAR(16777216),
	""address_2"" VARCHAR(16777216),
	""product_quantity"" VARCHAR(16777216),
	""more_code_info"" VARCHAR(16777216)
);"

,1
table_name,FOOD_EVENTS
description,
DDL,"create or replace TABLE FOOD_EVENTS (
	""report_number"" VARCHAR(16777216),
	""reactions"" VARCHAR(16777216),
	""outcomes"" VARCHAR(16777216),
	""products_brand_name"" VARCHAR(16777216),
	""products_industry_code"" VARCHAR(16777216),
	""products_role"" VARCHAR(16777216),
	""products_industry_name"" VARCHAR(16777216),
	""date_created"" DATE,
	""date_started"" DATE,
	""consumer_gender"" VARCHAR(16777216),
	""consumer_age"" FLOAT,
	""consumer_age_unit"" VARCHAR(16777216)
);"

Database Name: FDA
Schema Name: FDIC_BANKS
DDL describes table information.
,0
table_name,INSTITUTIONS
description,
DDL,"create or replace TABLE INSTITUTIONS (
	""fdic_certificate_number"" VARCHAR(16777216),
	""institution_name"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""fdic_id"" VARCHAR(16777216),
	""docket"" VARCHAR(16777216),
	""active"" BOOLEAN,
	""address"" VARCHAR(16777216),
	""total_assets"" NUMBER(38,0),
	""bank_charter_class"" VARCHAR(16777216),
	""change_code_1"" VARCHAR(16777216),
	""change_code_2"" VARCHAR(16777216),
	""change_code_3"" VARCHAR(16777216),
	""change_code_4"" VARCHAR(16777216),
	""change_code_5"" VARCHAR(16777216),
	""change_code_6"" VARCHAR(16777216),
	""change_code_7"" VARCHAR(16777216),
	""change_code_8"" VARCHAR(16777216),
	""change_code_9"" VARCHAR(16777216),
	""change_code_10"" VARCHAR(16777216),
	""change_code_11"" VARCHAR(16777216),
	""change_code_12"" VARCHAR(16777216),
	""change_code_13"" VARCHAR(16777216),
	""change_code_14"" VARCHAR(16777216),
	""change_code_15"" VARCHAR(16777216),
	""occ_charter"" VARCHAR(16777216),
	""chartering_agency"" VARCHAR(16777216),
	""conservatorship"" BOOLEAN,
	""city"" VARCHAR(16777216),
	""category_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""established_date"" DATE,
	""last_updated"" DATE,
	""effective_date"" DATE,
	""end_effective_date"" DATE,
	""denovo_institute"" BOOLEAN,
	""total_deposits"" NUMBER(38,0),
	""equity_capital"" NUMBER(38,0),
	""fdic_geo_region"" VARCHAR(16777216),
	""fdic_supervisory_region"" VARCHAR(16777216),
	""fdic_supervisory_region_code"" VARCHAR(16777216),
	""fed_reserve_district"" VARCHAR(16777216),
	""fed_reserve_district_id"" VARCHAR(16777216),
	""fed_reserve_unique_id"" VARCHAR(16777216),
	""federal_charter"" BOOLEAN,
	""fdic_field_office"" VARCHAR(16777216),
	""iba"" BOOLEAN,
	""inactive_flag"" BOOLEAN,
	""insurance_fund_membership"" VARCHAR(16777216),
	""secondary_insurance_fund"" VARCHAR(16777216),
	""deposit_insurance_date"" DATE,
	""credit_card_institution"" BOOLEAN,
	""bank_insurance_fund_member"" BOOLEAN,
	""insured_commercial_bank"" BOOLEAN,
	""deposit_insurance_fund_member"" BOOLEAN,
	""fdic_insured"" BOOLEAN,
	""saif_insured"" BOOLEAN,
	""insured_savings_institute"" BOOLEAN,
	""new_cert_number"" VARCHAR(16777216),
	""oakar_institute"" BOOLEAN,
	""ots_region"" VARCHAR(16777216),
	""last_structural_change"" DATE,
	""qbp_region"" VARCHAR(16777216),
	""regulator"" VARCHAR(16777216),
	""report_date"" DATE,
	""reporting_period_end_date"" DATE,
	""state_chartered"" BOOLEAN,
	""return_on_assets"" FLOAT,
	""roa_quarterly"" FLOAT,
	""roa_pretax"" FLOAT,
	""row_pretax_quarterly"" FLOAT,
	""return_on_equity"" FLOAT,
	""roe_quarterly"" FLOAT,
	""run_date"" DATE,
	""sasser_institute"" BOOLEAN,
	""law_sasser"" BOOLEAN,
	""state"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""trade_name_1"" VARCHAR(16777216),
	""trade_name_2"" VARCHAR(16777216),
	""trade_name_3"" VARCHAR(16777216),
	""trade_name_4"" VARCHAR(16777216),
	""trade_name_5"" VARCHAR(16777216),
	""trade_name_6"" VARCHAR(16777216),
	""zip_code"" VARCHAR(16777216),
	""occ_district"" VARCHAR(16777216),
	""ultimate_cert_number"" VARCHAR(16777216),
	""cfpb_supervisory_flag"" BOOLEAN,
	""cfpb_supervisory_start_date"" DATE,
	""cfpb_supervisory_end_date"" DATE,
	""offices_count"" NUMBER(38,0),
	""parent_fdic_cert"" VARCHAR(16777216),
	""parent_parcert"" VARCHAR(16777216),
	""high_holder_city"" VARCHAR(16777216),
	""total_domestic_deposits"" NUMBER(38,0),
	""ffiec_call_report_filer"" BOOLEAN,
	""holding_company_flag"" BOOLEAN,
	""ag_lending_flag"" BOOLEAN,
	""ownership_type"" VARCHAR(16777216),
	""top_holder"" VARCHAR(16777216),
	""net_income"" NUMBER(38,0),
	""quarterly_net_income"" NUMBER(38,0),
	""office_count_domestic"" NUMBER(38,0),
	""office_count_foreign"" NUMBER(38,0),
	""office_count_us_territories"" NUMBER(38,0),
	""rssd_id"" VARCHAR(16777216),
	""holding_company_state"" VARCHAR(16777216),
	""subchap_s_indicator"" BOOLEAN,
	""trust_powers_status"" VARCHAR(16777216),
	""asset_concentration_hierarchy"" VARCHAR(16777216),
	""primary_specialization"" VARCHAR(16777216),
	""csa_name"" VARCHAR(16777216),
	""csa_fips_code"" VARCHAR(16777216),
	""csa_indicator"" BOOLEAN,
	""cbsa_name"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""cbsa_metro_flag"" BOOLEAN,
	""cbsa_micro_flag"" BOOLEAN,
	""cbsa_division_name"" VARCHAR(16777216),
	""cbsa_division_fips_code"" VARCHAR(16777216),
	""cbsa_division_flag"" BOOLEAN
);"

,1
table_name,LOCATIONS
description,
DDL,"create or replace TABLE LOCATIONS (
	""fdic_certificate_number"" VARCHAR(16777216),
	""institution_name"" VARCHAR(16777216),
	""branch_name"" VARCHAR(16777216),
	""branch_number"" VARCHAR(16777216),
	""main_office"" BOOLEAN,
	""branch_address"" VARCHAR(16777216),
	""branch_city"" VARCHAR(16777216),
	""zip_code"" VARCHAR(16777216),
	""branch_county"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""institution_class"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""cbsa_name"" VARCHAR(16777216),
	""cbsa_division_flag"" BOOLEAN,
	""cbsa_division_fips_code"" NUMBER(38,0),
	""cbsa_division_name"" VARCHAR(16777216),
	""cbsa_metro_flag"" BOOLEAN,
	""cbsa_metro_fips_code"" VARCHAR(16777216),
	""cbsa_metro_name"" VARCHAR(16777216),
	""cbsa_micro_flag"" BOOLEAN,
	""csa_flag"" BOOLEAN,
	""csa_fips_code"" VARCHAR(16777216),
	""csa_name"" VARCHAR(16777216),
	""date_established"" DATE,
	""fdic_uninum"" VARCHAR(16777216),
	""last_updated"" DATE,
	""service_type"" VARCHAR(16777216),
	""branch_fdic_uninum"" VARCHAR(16777216)
);"

Database Name: FDA
Schema Name: GEO_CENSUS_BLOCKGROUPS
DDL describes table information.
,0
table_name,BLOCKGROUPS_04
description,
DDL,"create or replace TABLE BLOCKGROUPS_04 (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""blockgroup_ce"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""blockgroup_geom"" BINARY(8388608)
);"

Some other tables have the similar structure: ['BLOCKGROUPS_04', 'BLOCKGROUPS_08', 'BLOCKGROUPS_13', 'BLOCKGROUPS_16', 'BLOCKGROUPS_20', 'BLOCKGROUPS_23', 'BLOCKGROUPS_25', 'BLOCKGROUPS_31', 'BLOCKGROUPS_32', 'BLOCKGROUPS_39', 'BLOCKGROUPS_54', 'BLOCKGROUPS_29', 'BLOCKGROUPS_48', 'BLOCKGROUPS_19', 'BLOCKGROUPS_49', 'BLOCKGROUPS_24', 'BLOCKGROUPS_06', 'BLOCKGROUPS_09', 'BLOCKGROUPS_10', 'BLOCKGROUPS_18', 'BLOCKGROUPS_26', 'BLOCKGROUPS_36', 'BLOCKGROUPS_66', 'BLOCKGROUPS_40', 'BLOCKGROUPS_41', 'BLOCKGROUPS_01', 'BLOCKGROUPS_11', 'BLOCKGROUPS_12', 'BLOCKGROUPS_17', 'BLOCKGROUPS_30', 'BLOCKGROUPS_47', 'BLOCKGROUPS_53', 'BLOCKGROUPS_55', 'BLOCKGROUPS_33', 'BLOCKGROUPS_45', 'BLOCKGROUPS_51', 'BLOCKGROUPS_72', 'BLOCKGROUPS_02', 'BLOCKGROUPS_05', 'BLOCKGROUPS_15', 'BLOCKGROUPS_21', 'BLOCKGROUPS_22', 'BLOCKGROUPS_28', 'BLOCKGROUPS_34', 'BLOCKGROUPS_35', 'BLOCKGROUPS_37', 'BLOCKGROUPS_38', 'BLOCKGROUPS_42', 'BLOCKGROUPS_44', 'BLOCKGROUPS_50', 'BLOCKGROUPS_56', 'BLOCKGROUPS_60', 'BLOCKGROUPS_69', 'BLOCKGROUPS_78', 'BLOCKGROUPS_27', 'BLOCKGROUPS_46']
,1
table_name,US_BLOCKGROUPS_NATIONAL
description,
DDL,"create or replace TABLE US_BLOCKGROUPS_NATIONAL (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""blockgroup_ce"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""blockgroup_geom"" BINARY(8388608)
);"

Database Name: FDA
Schema Name: GEO_US_BOUNDARIES
DDL describes table information.
,0
table_name,ADJACENT_COUNTIES
description,
DDL,"create or replace TABLE ADJACENT_COUNTIES (
	""county"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""neighbors"" VARIANT,
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

,1
table_name,ADJACENT_STATES
description,
DDL,"create or replace TABLE ADJACENT_STATES (
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

,2
table_name,CBSA
description,
DDL,"create or replace TABLE CBSA (
	""geo_id"" VARCHAR(16777216),
	""csa_geo_id"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""msa_indicator"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""cbsa_geom"" BINARY(8388608)
);"

,3
table_name,CNECTA
description,
DDL,"create or replace TABLE CNECTA (
	""geo_id"" VARCHAR(16777216),
	""cnecta_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""cnecta_geom"" BINARY(8388608)
);"

,4
table_name,COASTLINE
description,
DDL,"create or replace TABLE COASTLINE (
	""name"" VARCHAR(16777216),
	""coastline_geom"" BINARY(8388608)
);"

,5
table_name,CONGRESS_DISTRICT_115
description,
DDL,"create or replace TABLE CONGRESS_DISTRICT_115 (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""district_fips_code"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""congress_session"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" BOOLEAN,
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""district_geom"" BINARY(8388608)
);"

Some other tables have the similar structure: ['CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116']
,6
table_name,COUNTIES
description,
DDL,"create or replace TABLE COUNTIES (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_gnis_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""csa_fips_code"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""met_div_fips_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""county_geom"" BINARY(8388608)
);"

,7
table_name,NATIONAL_OUTLINE
description,
DDL,"create or replace TABLE NATIONAL_OUTLINE (
	""us_outline_geom"" BINARY(8388608),
	""aff_geo_id"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""name"" VARCHAR(16777216)
);"

,8
table_name,RAILWAYS
description,
DDL,"create or replace TABLE RAILWAYS (
	""geo_id"" NUMBER(38,0),
	""full_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""railway_geom"" VARCHAR(16777216)
);"

,9
table_name,STATES
description,
DDL,"create or replace TABLE STATES (
	""geo_id"" VARCHAR(16777216),
	""region_code"" VARCHAR(16777216),
	""division_code"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_gnis_code"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""state_geom"" BINARY(8388608)
);"

,10
table_name,CSA
description,
DDL,"create or replace TABLE CSA (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""msa_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""csa_geom"" BINARY(8388608)
);"

,11
table_name,METROPOLITAN_DIVISIONS
description,
DDL,"create or replace TABLE METROPOLITAN_DIVISIONS (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""cbsa_code"" VARCHAR(16777216),
	""metdiv_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""metdiv_geom"" BINARY(8388608)
);"

,12
table_name,NWS_FORECAST_REGIONS
description,
DDL,"create or replace TABLE NWS_FORECAST_REGIONS (
	""state"" VARCHAR(16777216),
	""cwa"" VARCHAR(16777216),
	""time_zone"" VARCHAR(16777216),
	""fe_area"" VARCHAR(16777216),
	""zone"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""state_zone"" VARCHAR(16777216),
	""lon"" FLOAT,
	""lat"" FLOAT,
	""shortname"" VARCHAR(16777216),
	""shape_geometry"" BINARY(8388608)
);"

,13
table_name,URBAN_AREAS
description,
DDL,"create or replace TABLE URBAN_AREAS (
	""geo_id"" VARCHAR(16777216),
	""urban_area_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""area_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""urban_area_geom"" BINARY(8388608)
);"

,14
table_name,ZIP_CODES
description,
DDL,"create or replace TABLE ZIP_CODES (
	""zip_code"" VARCHAR(16777216),
	""city"" VARCHAR(16777216),
	""county"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_code"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""zip_code_geom"" BINARY(8388608)
);"

External knowledge that might be helpful: 
# Calculation Method: Overlap Ratio and Bank Location Data

This document describes the method used to calculate the number of bank institutions per postal code area (ZIP code) by combining geospatial data and bank location data, focusing on the overlap between postal code areas and census block groups.

## 1. Geospatial Intersection of Postal Code Areas and Census Block Groups
We are using two geographical units:
- **ZIP Code Areas**: Represented by geometries from the ZIP code boundaries dataset.
- **Census Block Groups**: Represented by geometries from the national census block groups dataset.

### Key Calculation:
- The method calculates the area of overlap between each ZIP code's geometry and each block group's geometry.
- The ratio of this intersection area to the total block group area is computed as the **overlap ratio**.

This overlap ratio represents the proportion of a block group that falls within a given ZIP code.

## 2. Bank Location Distribution Based on Overlap Ratio
The next step involves distributing the number of bank locations to the overlapping census block groups based on the calculated overlap ratio.

### Key Calculation:
- For each block group, the number of bank locations is proportionally assigned based on the overlap size. The total number of bank locations in a ZIP code is distributed to the block groups using the overlap ratio.

This provides the number of bank institutions for each block group, adjusted for the overlap with ZIP code areas.

## 3. Aggregation by ZIP Code Area
Finally, the results are aggregated by ZIP code to determine which postal code has the highest number of bank institutions.

### Key Calculation:
- The process involves grouping by ZIP code and finding the maximum number of bank locations per block group.

The table structure information is ({database name: {schema name: {table name}}}): 
{'FDA': {'CENSUS_UTILITY': ['FIPS_CLASS_CODE', 'FIPS_CODES_ALL', 'FIPS_CODES_STATES', 'FUNCTIONAL_STATUS_CODES', 'LSAD_CODES', 'MTFCC_FEATURE_CLASS_CODES'], 'FDA_FOOD': ['FOOD_ENFORCEMENT', 'FOOD_EVENTS'], 'FDIC_BANKS': ['INSTITUTIONS', 'LOCATIONS'], 'GEO_CENSUS_BLOCKGROUPS': ['BLOCKGROUPS_01', 'BLOCKGROUPS_02', 'BLOCKGROUPS_04', 'BLOCKGROUPS_05', 'BLOCKGROUPS_06', 'BLOCKGROUPS_08', 'BLOCKGROUPS_09', 'BLOCKGROUPS_10', 'BLOCKGROUPS_11', 'BLOCKGROUPS_12', 'BLOCKGROUPS_13', 'BLOCKGROUPS_15', 'BLOCKGROUPS_16', 'BLOCKGROUPS_17', 'BLOCKGROUPS_18', 'BLOCKGROUPS_19', 'BLOCKGROUPS_20', 'BLOCKGROUPS_21', 'BLOCKGROUPS_22', 'BLOCKGROUPS_23', 'BLOCKGROUPS_24', 'BLOCKGROUPS_25', 'BLOCKGROUPS_26', 'BLOCKGROUPS_27', 'BLOCKGROUPS_28', 'BLOCKGROUPS_29', 'BLOCKGROUPS_30', 'BLOCKGROUPS_31', 'BLOCKGROUPS_32', 'BLOCKGROUPS_33', 'BLOCKGROUPS_34', 'BLOCKGROUPS_35', 'BLOCKGROUPS_36', 'BLOCKGROUPS_37', 'BLOCKGROUPS_38', 'BLOCKGROUPS_39', 'BLOCKGROUPS_40', 'BLOCKGROUPS_41', 'BLOCKGROUPS_42', 'BLOCKGROUPS_44', 'BLOCKGROUPS_45', 'BLOCKGROUPS_46', 'BLOCKGROUPS_47', 'BLOCKGROUPS_48', 'BLOCKGROUPS_49', 'BLOCKGROUPS_50', 'BLOCKGROUPS_51', 'BLOCKGROUPS_53', 'BLOCKGROUPS_54', 'BLOCKGROUPS_55', 'BLOCKGROUPS_56', 'BLOCKGROUPS_60', 'BLOCKGROUPS_66', 'BLOCKGROUPS_69', 'BLOCKGROUPS_72', 'BLOCKGROUPS_78', 'US_BLOCKGROUPS_NATIONAL'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'ADJACENT_STATES', 'CBSA', 'CNECTA', 'COASTLINE', 'CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116', 'COUNTIES', 'CSA', 'METROPOLITAN_DIVISIONS', 'NATIONAL_OUTLINE', 'NWS_FORECAST_REGIONS', 'RAILWAYS', 'STATES', 'URBAN_AREAS', 'ZIP_CODES']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

1. **Table:** `FDA.GEO_US_BOUNDARIES.ZIP_CODES`
   - **"zip_code"**: Potential usage - Identifying ZIP codes in Colorado.
   - **"state_code"**: Potential usage - Filtering ZIP codes in Colorado ("CO").
   - **"zip_code_geom"**: Potential usage - Geometry of ZIP code areas for spatial analysis.

2. **Table:** `FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL`
   - **"geo_id"**: Potential usage - Identifying census block groups.
   - **"state_fips_code"**: Potential usage - Filtering block groups in Colorado ("08").
   - **"blockgroup_geom"**: Potential usage - Geometry of block groups for spatial analysis.

3. **Table:** `FDA.FDIC_BANKS.LOCATIONS`
   - **"institution_name"**: Potential usage - Identifying bank institutions.
   - **"branch_city"**: Potential usage - Determining the location of bank branches within Colorado.
   - **"zip_code"**: Potential usage - Associating bank locations with ZIP codes.
   - **"state"**: Potential usage - Filtering bank locations in Colorado ("CO").

**Conditions that may be used:**

- **"state_code" = 'CO'**: To select records related to Colorado in the `ZIP_CODES` table.
- **"state_fips_code" = '08'**: Colorado's FIPS code, used to filter block groups in the `US_BLOCKGROUPS_NATIONAL` table.
- **"state" = 'CO'**: To select bank locations in Colorado in the `LOCATIONS` table.

---

**SQL Queries:**

1. **List all ZIP codes in Colorado:**

   ```sql
   SELECT DISTINCT "zip_code"
   FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
   WHERE "state_code" = 'CO'
   LIMIT 1000;
   ```

2. **List all bank institutions operating in Colorado:**

   ```sql
   SELECT DISTINCT "institution_name"
   FROM FDA.FDIC_BANKS.LOCATIONS
   WHERE "state" = 'CO'
   LIMIT 1000;
   ```

3. **Count the number of bank branches per ZIP code in Colorado:**

   ```sql
   SELECT "zip_code", COUNT(*) AS "bank_branch_count"
   FROM FDA.FDIC_BANKS.LOCATIONS
   WHERE "state" = 'CO'
   GROUP BY "zip_code"
   LIMIT 1000;
   ```

4. **Retrieve all census block groups in Colorado:**

   ```sql
   SELECT DISTINCT "geo_id", "state_fips_code"
   FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
   ```

5. **Get geometries of ZIP codes in Colorado for spatial analysis:**

   ```sql
   SELECT "zip_code", "zip_code_geom"
   FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
   WHERE "state_code" = 'CO'
   LIMIT 1000;
   ```

6. **Get geometries of census block groups in Colorado for spatial analysis:**

   ```sql
   SELECT "geo_id", "blockgroup_geom"
   FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
   ```

7. **List bank branches in Colorado with their addresses and ZIP codes:**

   ```sql
   SELECT "institution_name", "branch_address", "branch_city", "zip_code"
   FROM FDA.FDIC_BANKS.LOCATIONS
   WHERE "state" = 'CO'
   LIMIT 1000;
   ```

8. **Retrieve state FIPS codes and state names for Colorado:**

   ```sql
   SELECT DISTINCT "state_fips_code", "state_name"
   FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
   ```

9. **Count the total number of census block groups in Colorado:**

   ```sql
   SELECT COUNT(DISTINCT "geo_id") AS "block_group_count"
   FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
   WHERE "state_fips_code" = '08';
   ```

10. **List ZIP codes in Colorado along with their corresponding counties:**

    ```sql
    SELECT DISTINCT "zip_code", "county"
    FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
    WHERE "state_code" = 'CO'
    LIMIT 1000;
    ```

---

These queries are designed to explore the relevant data needed to determine which Colorado ZIP code has the highest concentration of bank locations per block group. By understanding the distribution of bank branches, ZIP codes, and census block groups in Colorado, we can analyze the overlap and calculate the concentration.

**Note:**

- Since spatial overlap calculations cannot be performed without spatial functions and possibly nested queries or joins, the above queries focus on retrieving the necessary data for such analysis.
- The geometries retrieved in queries 5 and 6 (`"zip_code_geom"` and `"blockgroup_geom"`) are essential for spatial analysis but require spatial functions to compute overlaps, which are beyond the scope of simple SELECT statements.
- The FIPS code for Colorado is '08', which is used in filtering data related to Colorado in the census block groups.
- All column names are enclosed in double quotations as per the requirement.Query:
SELECT DISTINCT "zip_code"
   FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
   WHERE "state_code" = 'CO'
   LIMIT 1000;
Answer:
zip_code
80260
80920
80133
80510
81623
80631
80497
80824
80219
80426
80829
80653
81151
81323
80831
81146
81431
80737
80759
81081
80122
80435
81526
81023
80731
81058
81057
81149
81524
81007
81637
80101
81632
81641
80007
80705
81047
80904
80468
81044
81152
80917
80939
80540
80736
80801
80906
81130
80031
80477
80128
80303
80654
81003
81656
81620
80745
81625
81232
81624
80432
80022
80487
80454
80726
81424
80818
80734
81327
80455
80424
80543
80501
80758
81022
80118
80427
80301
81069
81040
80836
81252
80229
81101
81129
80125
80221
81005
80203
80205
80503
80003
80733
80740
80310
80525
81027
80816
81523
80504
81655
80109
80207
80542
81631
81403
80903
81423
80457
81201
81331
80928
80743
80744
80926
81503
81030
80237
80423
80476
80123
80909
80204
80117
80443
80449
80419
81133
80444
80481
80107
80129
81507
81122
80216
80536
81024
81087
80757
81090
80751
80232
80110
81433
80862
81231
81411
80528
81419
80530
81426
80446
81136
80473
80535
80754
80916
80230
80469
80813
80911
81611
80480
80863
80611
80722
81076
80720
81301
81128
80218
80905
80290
81326
80451
80642
80513
80224
80138
81001
80448
80403
80634
80651
81233
80938
81630
80825
80910
80532
80488
80835
80602
80428
81020
80438
81033
80264
81506
80104
81147
81639
80516
80951
80452
80121
80621
80124
80440
80815
81052
80467
81154
81038
80482
80546
80721
81064
80002
81155
80620
80228
80644
81144
81126
81043
80747
80479
81253
80210
81067
81006
80550
80821
80524
80515
80545
81418
80422
81211
80116
80130
80755
80209
81220
80020
81240
80136
80131
80834
80812
81221
80017
80741
80514
81303
81143
81521
80202
80222
81059
81422
80805
81527
80012
81071
81227
81226
81063
80447
80105
81432
81091
80293
81648
80214
81615
80526
80005
80246
80511
80919
80461
81124
80019
81021
81236
81653
80026
81004
81612
80127
80459
81039
80742
80537
80915
81643
80014
80470
80913
81434
80027
80434
80498
80235
80822
81092
80103
80544
80018
81425
80807
80011
81649
80238
80521
80520
80830
81131
81638
81248
80021
80102
81328
80249
80420
80860
81324
80750
80723
81435
80924
80305
80914
81237
81251
80908
81025
80809
81121
80023
80918
81241
81610
81089
81525
80466
81212
80833
80823
80106
81657
81073
81505
80010
81330
81050
81642
81125
80211
80137
81635
80746
81138
81049
80840
80729
80624
81640
80645
80478
81222
81645
80126
80603
80134
80135
81243
80512
81120
80247
80640
81652
81141
81239
80922
80727
80517
80231
80401
80648
81235
81045
80234
80113
80810
80024
80294
80226
81429
81335
81520
80013
81036
81334
81223
81325
81427
81332
81633
80929
81225
81132
80610
80421
80456
80907
81224
81501
81504
81401
80622
81019
80015
80033
81244
81084
81062
81055
80819
80817
80808
80927
80239
81647
80538
81416
80471
81522
81008
81601
80534
80030
80601
80549
80436
80233
81321
80132
80925
80804
81137
80728
80223
80236
80112
81621
80025
81320
81077
81230
81082
80612
80930
81140
80442
81410
81654
80814
80828
80650
80045
81428
80465
81210
80643
80439
80652
80827
80215
81242
80902
80004
81415
81650
80923
80701
80547
81413
81041
80206
81646
80241
80016
80220
80475
80227
80212
81123
80463
81430
80302
80861
80921
80453
80425
80108
81054
80820
81148
80433
81029
80111
80802
80623
80483
80864
80735
80649
80749
80832
80615
80120
80304
Query:
SELECT DISTINCT "institution_name"
   FROM FDA.FDIC_BANKS.LOCATIONS
   WHERE "state" = 'CO'
   LIMIT 1000;
Answer:
institution_name
"Armed Forces Bank, National Association"
The Huntington National Bank
U.S. Bank National Association
"Wells Fargo Bank, National Association"
Integrity Bank & Trust
"UMB Bank, National Association"
Adams Bank & Trust
ANB Bank
Independent Bank
The Central Trust Bank
5Star Bank
"JPMorgan Chase Bank, National Association"
InBank
FirstBank
Kirkpatrick Bank
Bank of Colorado
"Zions Bancorporation, N.A."
Pikes Peak National Bank
Farmers State Bank of Calhan
The State Bank
The Pueblo Bank and Trust Company
Riverstone Bank
Four Corners Community Bank
First Southwest Bank
Farmers Bank
First FarmBank
Home Loan State Bank
Timberline Bank
High Plains Bank
Park State Bank & Trust
First Colorado National Bank
Century Savings and Loan Association
Del Norte Bank
FNB Bank
Commerce Bank
"Morgan Stanley Private Bank, National Association"
State Bank of Downs
Open Bank
First American State Bank
The First National Bank of Las Animas
Stockmens Bank
Alpine Bank
First National Bank of Omaha
Bank of Estes Park
Bank of the West
Grand Valley Bank
"RG Bank, A Savings and Loan Association"
Alamosa State Bank
Community State Bank
HTLF Bank
MNB BANK
Fowler State Bank
Champion Bank
RNB STATE BANK
The Northern Trust Company
"Native American Bank, National Association"
NBH Bank
"BNY Mellon, National Association"
"Bank of America, National Association"
"PNC Bank, National Association"
First Interstate Bank
"TBK BANK, SSB"
Rocky Mountain Bank & Trust
Farmers & Stockmens Bank
The Eastern Colorado Bank
Points West Community Bank
Mountain Valley Bank
First Western Trust Bank
Bank of England
The Farmers State Bank of Brush
The Bank of Burlington
The Gunnison Bank and Trust Company
The First National Bank in Trinidad
Mountain View Bank of Commerce
Austin Capital Bank SSB
Evolve Bank & Trust
Yampa Valley Bank
KeyBank National Association
Waypoint Bank
Herring Bank
United Business Bank
Glacier Bank
First National Bank
Equitable Savings and Loan Association
The First National Bank of Fleming
Oakstar Bank
The Citizens State Bank of Ouray
"Golden Belt Bank, FSA"
High Country Bank
Gunnison Savings and Loan Association
"GNBank, National Association"
The First National Bank of Hugo
The Dolores State Bank
The Colorado Bank and Trust Company of La Junta
First-Citizens Bank & Trust Company
North Valley Bank
"BOKF, National Association"
CoreFirst Bank & Trust
"United Fidelity Bank, fsb"
Colorado Federal Savings Bank
First Fidelity Bank
FlatIrons Bank
"Transact Bank, National Association"
MidWestOne Bank
Pacific Western Bank
Beal Bank USA
Young Americans Bank
Western Alliance Bank
CIBC National Trust Company
"First National Bank, Cortez"
Redstone Bank
MidFirst Bank
Evergreen National Bank
Members Trust Company
American Bank of Commerce
AMG National Trust Bank
Bankers' Bank of the West
Verus Bank of Commerce
Wray State Bank
"Academy Bank, National Association"
Gateway First Bank
FMS Bank
San Luis Valley Federal Bank
First Pioneer National Bank
Fortis Private Bank
The Bank of Denver
Solera National Bank
FirsTier Bank
Frontier Bank
"Sunflower Bank, National Association"
FirstOak Bank
McClave State Bank
Query:
SELECT "zip_code", COUNT(*) AS "bank_branch_count"
   FROM FDA.FDIC_BANKS.LOCATIONS
   WHERE "state" = 'CO'
   GROUP BY "zip_code"
   LIMIT 1000;
Answer:
zip_code,bank_branch_count
80913,2
80920,18
80916,2
80907,7
80922,4
80905,3
80132,4
80921,9
80903,24
80906,9
80918,12
80914,1
80923,2
80915,6
80909,7
80932,3
80808,2
80917,1
80933,1
80840,1
81301,15
81303,3
81122,2
80524,13
80549,2
80517,5
80538,10
81501,13
81504,2
81503,1
81422,1
80723,5
80654,1
80701,6
80863,3
80911,1
80831,4
81137,1
80525,24
80537,15
80534,5
81506,2
81427,4
80424,6
80443,5
81624,1
81090,1
81428,2
80446,2
80482,1
81230,5
80815,1
81130,1
81321,8
81052,6
81132,1
81067,4
80031,4
80221,2
80301,14
80265,1
80125,1
80021,10
81621,6
80924,1
81302,1
80526,4
81526,1
81432,2
80498,1
80817,5
80904,2
80521,6
80513,3
80728,1
81520,4
81521,5
81425,2
80435,3
80813,1
80528,7
81505,9
81401,11
81147,7
81073,3
81054,1
81201,5
80810,2
81140,1
81063,1
81416,7
81324,1
80442,3
80447,1
80459,2
81224,3
81036,1
80807,6
80828,3
80821,1
81328,1
81323,1
80731,1
81041,1
81047,1
81144,3
81433,1
81435,5
81423,1
81057,1
81252,2
80836,1
81641,2
81154,1
80720,5
80030,7
80022,8
80233,7
80102,3
80229,8
80241,5
80602,4
80136,2
80112,24
80122,10
80016,12
80013,8
80120,6
80014,6
80103,1
80246,6
80123,10
80026,7
80542,1
80503,1
80207,7
80249,5
80211,10
80226,11
80223,2
80205,4
80220,2
80208,1
80109,2
80138,1
80117,1
80005,5
80228,9
80004,4
80631,8
80520,1
81620,7
80011,9
80017,3
80206,30
80107,2
80214,5
81007,6
81005,8
81006,1
81625,3
80467,1
80751,7
81101,8
81211,5
80825,1
81413,1
81419,2
81415,1
81235,1
81089,2
80480,1
81082,7
81050,6
80734,3
81648,1
81125,1
81149,1
80743,1
80758,3
80759,4
80461,3
81092,1
80824,1
80601,13
80010,4
80260,3
80234,9
80216,4
80023,4
80015,10
80012,14
80111,33
80121,2
80113,5
80110,7
80231,6
80544,2
80304,1
80504,6
80302,20
80305,3
80516,5
80466,1
80020,12
80444,1
80222,12
80224,7
80202,31
80237,5
80209,1
80204,1
80227,7
80239,3
80230,2
80293,1
80124,9
80134,16
80126,8
80104,10
80116,1
80002,9
80403,2
80215,3
80439,8
80007,5
80401,13
80232,1
80212,1
80033,6
80128,5
80433,5
80003,2
80235,1
80440,1
80634,24
80610,1
80550,10
80642,1
80615,2
80643,2
80645,1
80546,1
80651,1
81632,7
81631,5
81637,2
81657,6
81623,6
81601,8
81636,1
81647,1
81611,11
80303,4
80219,5
80620,2
80639,1
80514,1
81615,1
80027,8
81226,2
81003,9
81001,4
81019,1
81039,2
80737,2
80129,8
80501,30
80540,1
80210,5
80218,5
80238,1
80203,8
80108,7
80127,8
80621,2
80543,1
81650,5
81212,9
81008,8
80487,8
81639,1
Query:
SELECT DISTINCT "geo_id", "state_fips_code"
   FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
Answer:
Too long, hard cut:
geo_id,state_fips_code
080310009031,08
080310045053,08
080919676001,08
080690013071,08
080140314001,08
080590103041,08
080690018083,08
080050861003,08
080690013061,08
081170003004,08
080770010023,08
080410028002,08
080130609001,08
080310046013,08
081230010061,08
080310046035,08
080770015015,08
080310004024,08
080010092022,08
080410056012,08
080010086052,08
080410039051,08
081170002001,08
080310041012,08
080410077001,08
080310068142,08
080410055022,08
080350140062,08
081230014051,08
081230022052,08
080010090021,08
080490001001,08
080010096035,08
080590117082,08
080039603003,08
080590103033,08
080590098402,08
080130135072,08
080010085293,08
080410078001,08
080590102121,08
080690028011,08
081230004011,08
080050835004,08
081010027004,08
080310036025,08
080770011023,08
080690027004,08
080410046012,08
080439784002,08
080410007001,08
080310040022,08
080350145043,08
080010092043,08
080399612042,08
080590120414,08
080310046034,08
080310042023,08
080410005002,08
080310083043,08
080310004021,08
080130129051,08
080859664001,08
080050820002,08
080310070373,08
080590109014,08
080050806001,08
080590117302,08
081230013001,08
080410051101,08
080410044011,08
080690018061,08
080310043033,08
080590113001,08
080310007021,08
080310042012,08
081259631002,08
080310068111,08
080010085241,08
080050065011,08
080899686005,08
080010093273,08
080410027003,08
080410039063,08
080590103081,08
080130126052,08
080010601001,08
080410057001,08
080590098481,08
080410043002,08
080050059512,08
080130125091,08
080310036011,08
081170003002,08
080639621003,08
080050077031,08
080050058002,08
080590120353,08
081230015003,08
080310044042,08
080410020001,08
080350139073,08
080399611001,08
080590118031,08
081230012022,08
080770015012,08
080590120241,08
080310045062,08
080350141271,08
080490002011,08
080870006004,08
080350145031,08
080410073003,08
080350139085,08
080690011043,08
080310156004,08
080310051022,08
080050832004,08
080050821003,08
080990003003,08
080310070892,08
080759659001,08
080410047011,08
080310038001,08
080710003002,08
080590120502,08
080130133025,08
081010026002,08
080010087051,08
080010085454,08
080799736001,08
080350140082,08
080350141303,08
080710001003,08
081170001003,08
080310034011,08
081230012012,08
080690017072,08
080310044033,08
081230020171,08
080859666013,08
080410066002,08
080470138001,08
080010085053,08
080050068583,08
080459518033,08
080050811004,08
080010095021,08
080130125012,08
080050810002,08
080010087063,08
080410001013,08
080590117093,08
080490002012,08
080010094061,08
080350141392,08
080050056352,08
080050067051,08
080350141372,08
081230020101,08
080130127012,08
080410054003,08
080310043044,08
080399612044,08
081230020071,08
080010080001,08
080310032015,08
080350140013,08
080710001002,08
080410041004,08
080350140083,08
080140314003,08
080459518041,08
080010083093,08
081099777001,08
080410074003,08
080150004013,08
080590099002,08
080050832001,08
080439794001,08
080130133082,08
080050814003,08
080459517024,08
080410075002,08
080310046022,08
080310003033,08
080310020001,08
080590120472,08
080310041034,08
080590098311,08
081010027001,08
080410063022,08
080310120144,08
080990001002,08
080410070002,08
080310028011,08
080770010021,08
080690018092,08
080590109013,08
080130129042,08
080350141361,08
080010085411,08
080410027002,08
080010600002,08
080050066033,08
080140313002,08
080859666022,08
080050068564,08
080690028024,08
080590098452,08
081010036001,08
080310033001,08
080310044032,08
080010087062,08
080810004003,08
080310040023,08
080410049021,08
080410033081,08
080310040063,08
080050056262,08
080690028022,08
080350141161,08
081230014131,08
081230015002,08
080410071022,08
081010023002,08
080130121042,08
080410038022,08
080039603004,08
081230020043,08
080590103034,08
080810005003,08
080310023002,08
080590113002,08
080050056251,08
080130127101,08
080439783001,08
080050829001,08
080410051082,08
080770006013,08
080130135071,08
080930004001,08
080519636006,08
081010009024,08
080050061003,08
081230022061,08
080050059521,08
080010086062,08
080410079001,08
080010085471,08
080590098072,08
080410037052,08
080350142022,08
080679709001,08
080130133024,08
080590098241,08
080050804002,08
080050831003,08
080590117011,08
080039602005,08
080310048011,08
080590120482,08
080050075001,08
080410034003,08
080050834001,08
080050807002,08
081170001005,08
080130125093,08
080130137023,08
080519638001,08
081230014141,08
080410034002,08
081010029011,08
080310120141,08
080590098482,08
081119726001,08
080010085064,08
080310043011,08
080839694004,08
080330001002,08
080130132081,08
081230020042,08
080130136022,08
080010082001,08
080459521001,08
080310083122,08
080690016021,08
080050056291,08
081159683001,08
080370004032,08
080590119042,08
080839693003,08
080050055533,08
080310029011,08
080310026021,08
080870005003,08
080350139111,08
081010028021,08
080310009044,08
081159683003,08
080310030021,08
080350140122,08
080050833001,08
080310024021,08
080050067074,08
080130608003,08
080140300002,08
080130125011,08
081230019022,08
080770017062,08
080310070372,08
0
Query:
SELECT "zip_code", "zip_code_geom"
   FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
   WHERE "state_code" = 'CO'
   LIMIT 1000;
Answer:
Too long, hard cut:
zip_code,zip_code_geom
80621,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x88\x03\x00\x00\x9b\x1f\x7fiQ<Z\xc0\xc2\xd9\xade2\x06D@d\x9b\xe2qQ<Z\xc0Nyt#,\x06D@\xd30|DL<Z\xc0\x85\xdb\xa1a1\x06D@F\xd8\xf0\xf4J<Z\xc0V#\xbb\xd22\x06D@\x9b\x02\x99\x9dE<Z\xc09\xc9V\x97S\x06D@o.\xfe\xb6\'<Z\xc0\x91D/\xa3X\x06D@\xecO\xe2s\'<Z\xc0\xc2\xb5\xda\xc3^\x06D@\x7f\x17\xb6f+<Z\xc0>\x07\x96#d\x06D@\x14{h\x1f+<Z\xc0\x9e`\xffun\x06D@\x96\xebm3\x15<Z\xc0\xca\xe0(yu\x06D@\x1e\x92\xe8e\x14<Z\xc0\xd2\x0f\xea""\x85\x06D@tF\x94\xf6\x06<Z\xc0\x85r\xa2]\x85\x06D@\xe6\x07\xae\xf2\x04<Z\xc0\xe7g\xeau\x8b\x06D@\xfb\x93\xf8\xdc\t<Z\xc0\x93\x8er0\x9b\x06D@""T\xa9\xd9\x03<Z\xc0\xd4\x02{L\xa4\x06D@\x87\x19\x1aO\x04<Z\xc0]\xbb\xb4\xe1\xb0\x06D@\xe3Y\x10\xca\xfb;Z\xc0\xcd\x17{/\xbe\x06D@\x93\x06E\xf3\x00<Z\xc0\xe8}\xe3k\xcf\x06D@\xef\xc8Xm\xfe;Z\xc0\xb2\x8d?Q\xd9\x06D@\xc0\xd4]\xd9\x05<Z\xc0\x7f\xd1\xe5\xcd\xe1\x06D@\xaa\xd5WW\x05<Z\xc0)\xa7=%\xe7\x06D@&r\xc1\x19\xfc;Z\xc0\x13\x04\x8fo\xef\x06D@\xfd7\xbd\x8b\xf7;Z\xc0\xe4U\x9d\xd5\x02\x07D@\xc4\x96\x1eM\xf5;Z\xc0\x1ac\'\xbc\x04\x07D@\xa5\xe9z\xa2\xeb;Z\xc0\xc7\x83-v\xfb\x06D@\x9b\xe6\x1d\xa7\xe8;Z\xc0\xf6\x07\xcam\xfb\x06D@\x97\xab\x1f\x9b\xe4;Z\xc0\xaa\xa8\xc14\x0c\x07D@\xde_\xcb+\xd7;Z\xc0_\x0bzo\x0c\x07D@P\x07@\xdc\xd5;Z\xc0`\x15od\x1e\x07D@\xba\xc5\xfc\xdc\xd0;Z\xc0\xf3\x8eSt$\x07D@P\xc5\x8d[\xcc;Z\xc0\xf3G\x18\x06,\x07D@-\tPS\xcb;Z\xc0\xcd\x05.\x8f5\x07D@\x8f\xc7\x0cT\xc6;Z\xc0\xac\x84\xee\x928\x07D@Q\x1bc\'\xbc;Z\xc0\x8a\x16\xa0m5\x07D@\x07\x82\x8eV\xb5;Z\xc0\x8aPl\x05M\x07D@\xff\xd4\x06\'\xa2;Z\xc0X\xc8\\\x19T\x07D@U\xa6\x98\x83\xa0;Z\xc0\x99\xb1h:;\x07D@\xba?\xa5J\x94;Z\xc0\x84\x0e\xba\x84C\x07D@\xb8\xcc\xe9\xb2\x98;Z\xc0\xe0/fKV\x07D@\x7fj\xbct\x93;Z\xc0\xa7R\xb3\x07Z\x07D@\xe2\\\xc3\x0c\x8d;Z\xc0O\xba\xf4/I\x07D@\xb6\xf6>U\x85;Z\xc0\x0f/\x88HM\x07D@\xe0\xfc\x14\xc7\x81;Z\xc0Kk\xd3\xd8^\x07D@*y\x03\xcc|;Z\xc0h\x1c\xeawa\x07D@\x024\xd8\xd4y;Z\xc0\xaf\x0f\xeb\x8dZ\x07D@\xa6\x85\xcb*l;Z\xc0{j\xf5\xd5U\x07D@z\xaf\xe8\xd6k;Z\xc0\xab\\\xa8\xfck\x07D@7\x19U\x86q;Z\xc0\x99v1\xcdt\x07D@\x96FZ*o;Z\xc0\xfa\x03\xe5\xb6}\x07D@S\x08\xe4\x12G;Z\xc0\xd2p\xca\xdc|\x07D@=HO\x91C;Z\xc00y\x03\xcc|\x07D@G_\xcf\xd7,;Z\xc0\xfc7/N|\x07D@\xd4\r\x14x\';Z\xc0\x8b\xc4\x045|\x07D@~\xac\xe0\xb7!;Z\xc0H\xd5v\x13|\x07D@\x8e\xee\xae\xb3!;Z\xc0\xd6-\x02c}\x07D@\x06\xf7\x03\x1e\x18;Z\xc0e\xba\xd7I}\x07D@\x96\xd1\xc8\xe7\x15;Z\xc0=[\x07\x07{\x07D@s/0+\x14;Z\xc0\x03]\xfb\x02z\x07D@lcz\xc2\x12;Z\xc0\x9e\x97\x8a\x8dy\x07D@\xfdL\xbdn\x11;Z\xc0[\xa8\xfcky\x07D@.t%\x02\xd5:Z\xc0W\xeb\xc4\xe5x\x07D@}\xb8r\xf6\xce:Z\xc0\xe6w\x9a\xccx\x07D@\x91\xa2\\\x1a\xbf:Z\xc0\x91\x1d\x1b\x81x\x07D@\x00\tQ\xbe\xa0:Z\xc0\xba\xe4\x7f\xf2w\x07D@\xc0\x9cg\xecK:Z\xc0\x80\xe6s\xeev\x07D@e9\t\xa5/:Z\xc0]\x10\x91\x9av\x07D@\xb0\xac4)\x05:Z\xc0\x17d\xcb\xf2u\x07D@\x89\x98\x12I\xf49Z\xc0\xa6\xf0\xa0\xd9u\x07D@\x8d\xb6*\x89\xec9Z\xc0Q\x96!\x8eu\x07D@)\xd7\x14\xc8\xec9Z\xc0c\xe4,\xeci\x07D@\xe0\xe7\x86\xa6\xec9Z\xc0Fo\xb8\x8f\xdc\x06D@\xb0c\xea\xae\xec9Z\xc0 r\xfaz\xbe\x06D@V2\x8e\x91\xec9Z\xc0\xc2\xc1\xde\xc4\x90\x06D@V2\x8e\x91\xec9Z\xc0\xdd\xb3\xae\xd1r\x06D@\x8d\xb6*\x89\xec9Z\xc0f\xcfej\x12\x06D@\xeb\x95@J\xec9Z\xc0\x1e\x88,\xd2\xc4\x05D@""\x1a\xddA\xec9Z\xc0\xfd^\n\x0f\x9a\x05D@\x98V\xd1\x1f\x9a9Z\xc0R\xb9\x89Z\x9a\x05D@^\x18w\x83h9Z\xc0\xfd^\n\x0f\x9a\x05D@e\x8dz\x88F9Z\xc0Wv\xc1\xe0\x9a\x05D@\x05s\x82699Z\xc0\x99eO\x02\x9b\x05D@U3k) 9Z\xc0\xc7\xe9\xeb\xf9\x9a\x05D@\x97VC\xe2\x1e9Z\xc0\x17\x873\xbf\x9a\x05D@1\x82T\x8a\x1d9Z\xc0AN\x980\x9a\x05D@\xbc\x94\xbad\x1c9Z\xc0\xe66\xe1^\x99\x05D@(eRC\x1b9Z\xc0\x98\xcd\xe30\x98\x05D@\xb7\x0b\xcdu\x1a9Z\xc0\x94D\xf6A\x96\x05D@\xa6\xba\x80\x97\x199Z\xc0$9`W\x93\x05D@\x8a|%\x90\x129Z\xc0~\x10\xc9\x90c\x05D@\x8c\xd9\x92U\x119Z\xc0\xca\xf4K\xc4[\x05D@\xb5\x91y\xe4\x0f9Z\xc0\xe7T2\x00T\x05D@\xa4Z\xd2Q\x0e9Z\xc0\xb3\xe3\x86\xdfM\x05D@\x18\x11\xc5\xe4\r9Z\xc0V\x0f\x98\x87L\x05D@\xa6\xb7?\x17\r9Z\xc0\x14TT\xfdJ\x05D@\xbd\xea\x8f0\x0c9Z\xc0\xd9UH\xf9I\x05D@B&\x199\x0b9Z\xc0\xc1-\x1fII\x05D@\xfb\x93\xf8\xdc\t9Z\xc0\xfd_u\xe4H\x05D@\x12\xc7H\xf6\x089Z\xc0-\xe4\x11\xdcH\x05D@\xdd\x9f\x19\xc4\x079Z\xc0""6X8I\x05D@\x94\x06E\xf3\x009Z\xc0\x01\xb5\x18<L\x05D@\xbf\xf80{\xd98Z\xc0\xf1\xb7=Ab\x05D@aX\x8c\xba\xd68Z\xc0\x9c)t^c\x05D@k\x0e\x10\xcc\xd18Z\xc0h\x80\x0b\xb2e\x05D@@8-x\xd18Z\xc0\t\xe0f\xf1b\x05D@\x11\xce5\xcc\xd08Z\xc0hP4\x0f`\x05D@\xb4""j\xa2\xcf8Z\xc0\xe8\xd9\xac\xfa\\\x05D@6\x0c\xadN\xce8Z\xc0\xcd(\x96[Z\x05D@\xd9\xb9\xf7p\xc98Z\xc0\xf1\xce\xa1\x0cU\x05D@y`\x8e\x1e\xbf8Z\xc0b\xbdQ+L\x05D@\'T\xfe\xb5\xbc8Z\xc0E\x0c;\x8cI\x05D@;\x1c]\xa5\xbb8Z\xc0\xd4\xccZ\nH\x05D@\xad\xc3\xd1U\xba8Z\xc0\xc9\x865\x95E\x05D@\xad\xddv\xa1\xb98Z\xc04qr\xbfC\x05D@x\x9c\xa2#\xb98Z\xc0\x85B\x04\x1cB\x05D@\xac\xce\xf8\xbe\xb88Z\xc0\xbf\xa8\xa4N@\x05D@\xe8\x00OZ\xb88Z\xc0\xaa\xe8\x0f\xcd<\x05D@G\t\x88I\xb88Z\xc0{\x98\xbdl;\x05D@\xa2}\xac\xe0\xb78Z\xc0sz\xde\x8d\x05\x05D@q\xd0\xec\xba\xb78Z\xc0\rZH\xc0\xe8\x04D@\x89\x12\xbb\xb6\xb78Z\xc06\x89A`\xe5\x04D@\xd8\xf2\xca\xf5\xb68Z\xc0\xbd\xbe\xd6\xa5F\x04D@\x91F\x05N\xb68Z\xc0\xe3\xf1\xb4\xfc\x
Query:
SELECT "geo_id", "blockgroup_geom"
   FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
Answer:
Too long, hard cut:
geo_id,blockgroup_geom
080010093083,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x004\x00\x00\x00C\xd0_\xe8\x11@Z\xc0\xa8\x9f7\x15\xa9\xeaC@W\x98\xbe\xd7\x10@Z\xc0\xab\x07\xccC\xa6\xeaC@\xb1\xfdd\x8c\x0f@Z\xc0\xe9\xd5\x00\xa5\xa1\xeaC@v\x19\xfe\xd3\r@Z\xc0X\x90f,\x9a\xeaC@\xe0\xa6\xcd8\r@Z\xc0""\x83\xdcE\x98\xeaC@\xdc,^,\x0c@Z\xc0)\xa8\xa8\xfa\x95\xeaC@f\x16\xa1\xd8\n@Z\xc0\x8f\xd5\xad\x9e\x93\xeaC@f0F$\n@Z\xc0fB\x93\xc4\x92\xeaC@\xd2\x00\xde\x02\t@Z\xc0+D\x87\xc0\x91\xeaC@o\x89\\p\x06@Z\xc0\xb0V\xed\x9a\x90\xeaC@p\x0b\x96\xea\x02@Z\xc0\x97.\xc4\xea\x8f\xeaC@\x03,\x80)\x03@Z\xc0\x04k\x9cMG\xeaC@L\x1b\x0eK\x03@Z\xc0\x8d\xe3\x87J#\xeaC@\xf2\x98\x81\xca\xf8?Z\xc0\xcd\xe5\x06C\x1d\xeaC@#N\'\xd9\xea?Z\xc0\x13\rR\xf0\x14\xeaC@=\x85\xea\xe6\xe2?Z\xc0~_#I\x10\xeaC@\x17f\xa1\x9d\xd3?Z\xc0 \xd2o_\x07\xeaC@\x16W#\xbb\xd2?Z\xc0\x19\x158\xd9\x06\xeaC@\x87 \x07%\xcc?Z\xc0R\xf2\xea\x1c\x03\xeaC@\xed\xc0\xc7`\xc5?Z\xc0\xca\xbe+\x82\xff\xe9C@\x1a3\x89z\xc1?Z\xc0\x96\xb1\xa1\x9b\xfd\xe9C@\xa1/\xbd\xfd\xb9?Z\xc0\xd2K\x8ce\xfa\xe9C@\x05\x8aX\xc4\xb0?Z\xc0\x10\xe6v/\xf7\xe9C@K\xcbH\xbd\xa7?Z\xc0\xe8\x86\xa6\xec\xf4\xe9C@\xc5$\xea\x05\x9f?Z\xc0\x17?\x8d{\xf3\xe9C@\x88.\xa8o\x99?Z\xc0r\x8a\x8e\xe4\xf2\xe9C@\x15$D\xf9\x82?Z\xc0\xca\xd5\x8fM\xf2\xe9C@\xb2\xe0\x0c\xfe~?Z\xc0,\xde\xc8<\xf2\xe9C@E\xc2\x85<\x82?Z\xc0\x85\xd1\xacl\x1f\xeaC@\tQ\xbe\xa0\x85?Z\xc0h\xb8\x01\x9f\x1f\xeaC@\xaf\xd1r\xa0\x87?Z\xc0\xb9\x12\x81\xea\x1f\xeaC@qB\xaf?\x89?Z\xc0N\\\x8eW \xeaC@\xff\x80\x95C\x8b?Z\xc0\x07|~\x18!\xeaC@\x17\x9e\x97\x8a\x8d?Z\xc0R\xe5{F""\xeaC@(\xbb\x99\xd1\x8f?Z\xc04\x98\x86\xe1#\xeaC@\xa8""\xa3\x03\x92?Z\xc0\t\x9d\xd7\xd8%\xeaC@\x18H\xde9\x94?Z\xc0\x15\xe3\xfcM(\xeaC@Z,E\xf2\x95?Z\xc0<B\xcd\x90*\xeaC@^\xa6\xb4\xfe\x96?Z\xc0}\xfd\x10\x1b,\xeaC@\x94\xdca\x13\x99?Z\xc0)\x07\xb3\t0\xeaC@d> \xd0\x99?Z\xc0\t\xba\xbd\xa41\xeaC@\x1atB\xe8\xa0?Z\xc0L\x7f\xf6#E\xeaC@\xcdf\x9c\x86\xa8?Z\xc0eI\x80\x9aZ\xeaC@W\xd5Y-\xb0?Z\xc0\xcb\xb0Q\xd6o\xeaC@\xd8\xd8%\xaa\xb7?Z\xc0\x0fB@\xbe\x84\xeaC@\xb6\xa1b\x9c\xbf?Z\xc0\x9f<,\xd4\x9a\xeaC@\xd0\x9c\xf5)\xc7?Z\xc0\xda\xdc\x98\x9e\xb0\xeaC@ev\xa4\xfa\xce?Z\xc0\xa5\t\xdbO\xc6\xeaC@!\x92!\xc7\xd6?Z\xc0\xachs\x9c\xdb\xeaC@F^\xd6\xc4\x02@Z\xc0\x7f\xf5\xb8o\xb5\xeaC@\xc9\x98I\xd4\x0b@Z\xc0\xdbD-\xcd\xad\xeaC@C\xd0_\xe8\x11@Z\xc0\xa8\x9f7\x15\xa9\xeaC@')"
080690011111,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00i\x00\x00\x00\xc9\xadI\xb7%FZ\xc0\xaa=\xec\x85\x02HD@\xaak{\xbb%FZ\xc05u\x1e\x15\xffGD@o\x87\x14\x03$FZ\xc0\xc9\xbe+\x82\xffGD@\xc5X\xa6_""FZ\xc0\xb2b\xb8:\x00HD@\xd2:\xaa\x9a FZ\xc0y\xb9O\x8e\x02HD@\x9eajK\x1dFZ\xc0\xfc/\xd7\xa2\x05HD@j\x88*\xfc\x19FZ\xc0\x8a \xce\xc3\tHD@\x169\xd2\x19\x18FZ\xc0)\xb0\x00\xa6\x0cHD@\x84f\xd7\xbd\x15FZ\xc0\xe5X\xdeU\x0fHD@}\x80|\t\x15FZ\xc00&\xfd\xbd\x14HD@\xd7\xe5""\xbe\x13FZ\xc0\xcf\xb5/\xa0\x17HD@\x06\xda\x1dR\x0cFZ\xc0Q\xf8l\x1d\x1cHD@0\xe0\xf3\xc3\x08FZ\xc0 @\x86\x8e\x1dHD@\x05\x89\xed\xee\x01FZ\xc0\x95\x08T\xff HD@#\xe1\t\xbd\xfeEZ\xc0@F@\x85#HD@8\xf7W\x8f\xfbEZ\xc0\x11\x8eY\xf6$HD@\x05\x1e\x18@\xf8EZ\xc0\x11\x8eY\xf6$HD@,,\xb8\x1f\xf0EZ\xc09\x89\x08\xff""HD@\xb1\x974F\xebEZ\xc0\xa2\xb6\r\xa3 HD@z\xc6\xbed\xe3EZ\xc0\x16.\xab\xb0\x19HD@\xfd\xe3K\xa8\xe0EZ\xc0\xab\xdfLL\x17HD@\x18\xc2\xf8i\xdcEZ\xc0\xab\xdfLL\x17HD@\x93\xeb\xa6\x94\xd7EZ\xc0\xd1\xe9y7\x16HD@\x97\xb3\x05\x84\xd6EZ\xc0$\xac\x8d\xb1\x13HD@\n\xc3\x0ec\xd2EZ\xc0\xb2\x17\n\xd8\x0eHD@\xca;\x15p\xcfEZ\xc0\xda\x12\xb9\xe0\x0cHD@\x9d.\x8b\x89\xcdEZ\xc0\xda\x12\xb9\xe0\x0cHD@\n\x8c\x83K\xc7EZ\xc0\xb1\x17\n\xd8\x0eHD@/\xe4\x9f\x19\xc4EZ\xc0\xb1\x17\n\xd8\x0eHD@\x95\xf7\xffq\xc2EZ\xc0\xa9Z\xd2Q\x0eHD@I\xc2L\xdb\xbfEZ\xc0\xda\x12\xb9\xe0\x0cHD@\xd4\xd4\xb2\xb5\xbeEZ\xc0Z4\x9d\x9d\x0cHD@\xfd\x8c\x99D\xbdEZ\xc0\x03\xda\x1dR\x0cHD@*\xe5\xb5\x12\xbaEZ\xc0\x03\xda\x1dR\x0cHD@D\xc3b\xd4\xb5EZ\xc0\xda\x12\xb9\xe0\x0cHD@\x118\x12h\xb0EZ\xc0\xb1\x17\n\xd8\x0eHD@7\xaa\xd3\x81\xacEZ\xc0\xb5\x08\x8c\xf5\rHD@\x96\xd7\xd8%\xaaEZ\xc06\xc6Nx\tHD@\xb8\x9b\xe0\x9b\xa6EZ\xc0k;m\x8d\x08HD@cL\x88\xb9\xa4EZ\xc0k;m\x8d\x08HD@#\xc5\x8e\xc6\xa1EZ\xc05\xc6Nx\tHD@\x04\xe8\xf7\xfd\x9bEZ\xc0\x11\xbc!\x8d\nHD@\xc8\xf4\x12c\x99EZ\xc0\x11\xbc!\x8d\nHD@|\xbf_\xcc\x96EZ\xc0f~5\x07\x08HD@\xa2K\xc61\x92EZ\xc0\xffP0c\nHD@\x90j\xd8\xef\x89EZ\xc0\xb0KTo\rHD@7S!\x1e\x89EZ\xc0\xa4\x9d\x9a\xcb\rHD@\xd6\xea9\xe9}EZ\xc0J\x1eO\xcb\x0fHD@{\x1a\xbe\x85uEZ\xc0\x80\x93m\xe0\x0eHD@\xbb\x84\xd1\xaclEZ\xc0]\x89@\xf5\x0fHD@\x83\x17}\x05iEZ\xc09\x7f\x13\n\x11HD@/\xc8$#gEZ\xc0\x02\n\xf5\xf4\x11HD@\x9d\xf5)\xc7dEZ\xc0\xc1\xb2\xd2\xa4\x14HD@\xb6\x85\xe7\xa5bEZ\xc0S\x94K\xe3\x17HD@\xbcMF\x95aEZ\xc0\xd3\xd6\x88`\x1cHD@]n0\xd4aEZ\xc0)Ral!HD@V\x88\xd5\x1faEZ\xc0\x88\x8aq\xfe&HD@\xbd\x9b5x_EZ\xc0\xe8\xb3\x03\xae+HD@o28J^EZ\xc0K\xdd\x95]0HD@\xf6\xef\xfa\xccYEZ\xc0M\x96Z\xef7HD@\x9e\x0c\x8e\x92WEZ\xc0\x06\x82\x00\x19:HD@\xea$[]NEZ\xc0=\xb0\xe3\xbf@HD@Q\x86\xaa\x98JEZ\xc0\x1ec\xeeZBHD@\xbcai\xe0GEZ\xc0\xe3\xfcM(DHD@+\xc3\xb8\x1bDEZ\xc0\xc0\xf2 =EHD@\x04\x982p@EZ\xc0\xe2\xfcM(DHD@k-\xccB;EZ\xc0+E\xf2\x95@HD@;\xe8\xa0K8EZ\xc0a\xba\x10\xab?HD@Q29\xb53EZ\xc07\xf3\xab9@HD@\xbc\r\xf8\x
Query:
SELECT "institution_name", "branch_address", "branch_city", "zip_code"
   FROM FDA.FDIC_BANKS.LOCATIONS
   WHERE "state" = 'CO'
   LIMIT 1000;
Answer:
Too long, hard cut:
institution_name,branch_address,branch_city,zip_code
"Armed Forces Bank, National Association","6384 Wetzel Avenue, Building 1512",Fort Carson,80913
The Huntington National Bank,9265 North Union Boulevard,Colorado Springs,80920
The Huntington National Bank,2930 South Academy Boulevard,Colorado Springs,80916
The Huntington National Bank,3290 Centennial Boulevard,Colorado Springs,80907
U.S. Bank National Association,1125 Garden Of The Gods Road,Colorado Springs,80907
U.S. Bank National Association,1520 Briargate Boulevard,Colorado Springs,80920
U.S. Bank National Association,6030 Stetson Hills Boulevard,Colorado Springs,80922
"Wells Fargo Bank, National Association",1800 South Nevada Avenue,Colorado Springs,80905
"Wells Fargo Bank, National Association",560 Garden Of The Gods Road,Colorado Springs,80907
Integrity Bank & Trust,1275 Village Ridge Pt,Monument,80132
"UMB Bank, National Association",502 Security Boulevard,Colorado Springs,80911
Adams Bank & Trust,"1359 Interquest Parkway, Suite 150",Colorado Springs,80921
ANB Bank,15 West Cimarron Street,Colorado Springs,80903
Independent Bank,155 Lake Avenue,Colorado Springs,80906
Independent Bank,501 South Tejon,Colorado Springs,80903
Independent Bank,"104 S. Cascade Avenue, Suite 2014",Colorado Springs,80903
The Central Trust Bank,5278 North Nevada Avenue Suite 100,Colorado Springs,80918
5Star Bank,"Peterson Air Force Base, 455 W. Paine St., Bldg. 1485",Colorado Springs,80914
"JPMorgan Chase Bank, National Association",7390 Duryea Drive,Colorado Springs,80923
"JPMorgan Chase Bank, National Association",7685 N Academy Blvd,Colorado Springs,80920
"JPMorgan Chase Bank, National Association",3750 Bloomington Street,Colorado Springs,80922
"JPMorgan Chase Bank, National Association",11555 Meridian Market View,Falcon,80831
"JPMorgan Chase Bank, National Association",402 North Tejon Street,Colorado Springs,80903
"Wells Fargo Bank, National Association",8620 North Union Boulevard,Colorado Springs,80920
InBank,945 Tenderfoot Hill Road,Colorado Springs,80906
FirstBank,2790 Briargate Boulevard,Colorado Springs,80920
Kirkpatrick Bank,"102 North Cascade Avenue, Suite 100",Colorado Springs,80903
"JPMorgan Chase Bank, National Association",3306 Centennial Blvd.,Colorado Springs,80907
Bank of Colorado,El Paso County,Colorado Springs,80915
Bank of Colorado,1146 Interquest Parkway,Colorado Springs,80921
Bank of Colorado,4328 Edison Avenue,Colorado Springs,80915
KeyBank National Association,1521 South 8th Street,Colorado Springs,80906
KeyBank National Association,3085 S Academy Blvd,Colorado Springs,80916
"Zions Bancorporation, N.A.",7390 North Academy Boulevard,Colorado Springs,80920
"Zions Bancorporation, N.A.",111 South Tejon Street,Colorado Springs,80903
Independent Bank,440 Chapel Hills Drive,Colorado Springs,80920
U.S. Bank National Association,1415 North Academy Boulevard,Colorado Springs,80909
U.S. Bank National Association,6925 Mesa Ridge Parkway,Fountain,80817
U.S. Bank National Association,2308 East Pikes Peak Avenue,Colorado Springs,80909
U.S. Bank National Association,1070 West Baptist Road,Colorado Springs,80921
The Huntington National Bank,2870 New Center Pt,Colorado Springs,80922
The Huntington National Bank,5470 E. Woodmen Road,Colorado Springs,80920
"Wells Fargo Bank, National Association",4151 North Academy Boulevard,Colorado Springs,80918
"Wells Fargo Bank, National Association",15844 Jackson Creek Parkway,Monument,80132
"Bank of America, National Association",7808 N Academy Blvd,Colorado Springs,80920
Pikes Peak National Bank,2401 W Colorado Ave,Colorado Springs,80904
Integrity Bank & Trust,5550 Powers Center Point,Colorado Springs,80920
The First National Bank of Las Animas,2768 Northgate Blvd,Colorado Springs,80921
Waypoint Bank,24 South Weber Street Suite 151,Colorado Springs,80903
"Academy Bank, National Association",3201 E.  Platte Avenue,Colorado Springs,80909
NBH Bank,"19 North Tejon, Ste 100",Colorado Springs,80903
5Star Bank,104 S Cascade Ave,Colorado Springs,80903
"UMB Bank, National Association",730 Citadel Drive East,Colorado Springs,80932
"UMB Bank, National Association",101 North Cascade Avenue,Colorado Springs,80903
ANB Bank,1130 North Circle Drive,Colorado Springs,80932
Farmers State Bank of Calhan,7025 Meridian Rd,Peyton,80831
Farmers State Bank of Calhan,445 N Ellicott Hwy,Calhan,80808
"Armed Forces Bank, National Association",Coleman And Linstrom Streets,Fort Carson,80913
The Huntington National Bank,3175 East Platte Avenue,Colorado Springs,80909
The Huntington National Bank,7239 N. Academy Boulevard,Colorado Springs,80920
Bank of Colorado,421 North Tejon Street,Colorado Springs,80903
"Wells Fargo Bank, National Association",5710 Constitution Avenue,Colorado Springs,80915
"Wells Fargo Bank, National Association",9649 Prominent Point,Colorado Springs,80924
"Wells Fargo Bank, National Association",90 South Cascade Avenue,Colorado Springs,80903
Integrity Bank & Trust,13475 Voyager Parkway,Colorado Springs,80921
U.S. Bank National Association,81
Query:
SELECT DISTINCT "state_fips_code", "state_name"
   FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
   WHERE "state_fips_code" = '08'
   LIMIT 1000;
Answer:
state_fips_code,state_name
08,Colorado
Query:
SELECT COUNT(DISTINCT "geo_id") AS "block_group_count"
   FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
   WHERE "state_fips_code" = '08';
Answer:
block_group_count
3532
Query:
SELECT DISTINCT "zip_code", "county"
    FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
    WHERE "state_code" = 'CO'
    LIMIT 1000;
Answer:
Too long, hard cut:
zip_code,county
80447,Grand County
80017,"Adams County, Arapahoe County, Douglas County"
81221,Fremont County
81503,Mesa County
80744,Sedgwick County
81021,Kiowa
80247,"Denver County, Adams County, Arapahoe County, Douglas County"
80129,"Douglas County, Arapahoe County, Douglas County, Jefferson County"
80910,El Paso County
81045,Kiowa County
80651,Weld County
80433,Jefferson County
80734,Phillips County
81092,Prowers County
81024,Las Animas
80026,"Boulder County, Weld County, Boulder County"
81523,Mesa
81501,Mesa County
81654,Pitkin County
81418,Delta County
81652,Garfield County
80938,El Paso County
81332,Dolores County
80831,El Paso County
80303,Boulder County
80451,Grand County
80550,"Larimer County, Larimer County, Weld County, Weld County"
81426,San Miguel County
80235,"Denver County, Jefferson County"
81223,Fremont County
81058,Otero County
80218,Denver County
80463,Eagle County
81650,Garfield County
80516,"Weld County, Boulder County, Weld County, Broomfield County, Boulder County"
80214,"Denver County, Jefferson County"
80455,Boulder County
80818,Lincoln County
81525,Mesa
80534,"Larimer County, Larimer County, Weld County, Weld County"
81001,Pueblo County
81507,Mesa County
81244,Fremont County
80750,Morgan County
80829,El Paso County
80030,"Adams County, Jefferson County, Adams County"
81625,Moffat County
81147,"Hinsdale County, Archuleta County"
81212,Fremont County
80102,"Arapahoe County, Adams County, Arapahoe County, Adams County, Arapahoe County, Douglas County"
81403,"Montrose County, Ouray County"
81036,Kiowa County
80861,Kit Carson County
80864,El Paso
80736,Logan County
80721,Phillips County
80923,El Paso County
80212,"Jefferson County, Denver County, Adams County"
80473,Jackson
81324,Dolores County
80113,Arapahoe County
81239,Gunnison
80422,"Boulder County, Gilpin County, Jefferson County, Gilpin County, Clear Creek County, Gilpin County"
80005,"Adams County, Jefferson County"
81040,Huerfano
80435,Summit County
81224,Gunnison County
80512,Larimer
80302,Boulder County
80863,Teller County
81422,Montrose County
81084,Baca County
81064,Baca County
81141,Conejos County
80654,Morgan County
80233,"Adams County, Weld County"
80226,"Denver County, Jefferson County"
80549,Larimer County
80824,Yuma County
80537,"Larimer County, Larimer County, Weld County"
81073,Baca County
80902,El Paso County
80812,Washington
81434,Gunnison
80928,El Paso County
80203,Denver County
80108,Douglas County
80914,El Paso County
80457,Jefferson County
80421,Park
80470,Jefferson
81623,"Eagle County, Gunnison County, Garfield County, Pitkin County, Eagle County, Pitkin County"
80814,Teller County
80481,Boulder County
81647,Garfield County
81505,Mesa County
80024,Adams County
80130,Douglas County
80105,Arapahoe County
80924,El Paso County
80503,"Boulder County, Boulder County, Weld County"
81632,Eagle County
81025,Pueblo County
81082,Las Animas County
81030,Otero County
81057,Bent
81241,Gunnison County
81210,Gunnison
81301,La Plata County
80544,Boulder County
80822,Yuma County
81124,Conejos County
80128,"Jefferson County, Arapahoe County, Arapahoe County, Jefferson County, Arapahoe County, Douglas County, Jefferson County"
81641,Rio Blanco County
81125,"Rio Grande County, Saguache County"
80228,Jefferson County
80401,Jefferson County
81148,Conejos County
80027,"Boulder County, Jefferson County, Boulder County, Broomfield County"
81521,Mesa County
81612,
80521,Larimer County
80478,Grand County
80927,El Paso County
81131,Saguache County
81090,Baca County
80465,Jefferson County
80511,
81140,Conejos County
81006,Pueblo County
81334,Montezuma County
80731,Phillips County
80124,Douglas County
80542,Weld County
80802,Cheyenne
80210,Denver County
81242,Chaffee County
80305,Boulder County
80815,Kit Carson County
81123,Costilla County
80452,"Clear Creek County, Clear Creek County, Gilpin County"
81320,Dolores
81326,La Plata
80123,"Jefferson County, Denver County, Arapahoe County, Arapahoe County, Jefferson County, Arapahoe County, Douglas County, Jefferson County"
81637,Eagle County
81633,
80836,Kit Carson County
81416,Delta County
80525,Larimer County
81062,Crowley County
80426,Eagle
81321,Montezuma County
80467,Routt County
80498,Summit County
81233,Fremont County
80304,Boulder County
81227,Chaffee County
80623,Weld County
80427,"Gilpin County, Clear Creek County, Gilpin County"
81236,Chaffee
81220,Gunnison
81655,Eagle County
80023,"Adams County, Weld County, Adams County, Jefferson County, Broomfield County"
80809,"El Paso County, El Paso County, Teller County"
80120,"Arapahoe County, Douglas County, Arapahoe County, Douglas County, Jefferson County"
80293,Denver County
80610,Weld County
80913,El Paso County
80727,Yuma County
80737,Sedgwick County
81043,Prowers County
80209,Denver County
80223,Denver County
80112,"Arapahoe County, Douglas County, Adams County, Arapahoe County, Douglas County"
80904,El Paso County
81248,Saguache
80930,El Paso
80260,"Adams County, Adams County, Weld County, Adams County, Jefferson County"
80602,"Ada
End Exploring Related Columns
Task: Which Colorado zip code has the highest concentration of bank locations per block group, based on the overlap between zip codes and block groups?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: SELECT S."Column_Name" FROM {Database Name}.{Schema Name}.{Table_name} (ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
zip_code,bank_locations_per_block_group
Colorado_zip_code:str,concentration:float > 0
```

The ZIP code listed above in Colorado has the highest concentration of bank locations per block group, determined by calculating the overlap between ZIP code areas and census block groups..
Here are some useful tips for answering:
When calculating distances between two geometries, use `ST_MakePoint(x, y)` to make a point and `ST_Distance(geometry1 GEOMETRY, geometry2 GEOMETRY)` to compute. No need to convert from meters to miles unless requested. Don't use Haversine like 2 * 6371000 * ASIN(...), use ST_DISTANCE for more precise results.
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'FDA': {'CENSUS_UTILITY': ['FIPS_CLASS_CODE', 'FIPS_CODES_ALL', 'FIPS_CODES_STATES', 'FUNCTIONAL_STATUS_CODES', 'LSAD_CODES', 'MTFCC_FEATURE_CLASS_CODES'], 'FDA_FOOD': ['FOOD_ENFORCEMENT', 'FOOD_EVENTS'], 'FDIC_BANKS': ['INSTITUTIONS', 'LOCATIONS'], 'GEO_CENSUS_BLOCKGROUPS': ['BLOCKGROUPS_01', 'BLOCKGROUPS_02', 'BLOCKGROUPS_04', 'BLOCKGROUPS_05', 'BLOCKGROUPS_06', 'BLOCKGROUPS_08', 'BLOCKGROUPS_09', 'BLOCKGROUPS_10', 'BLOCKGROUPS_11', 'BLOCKGROUPS_12', 'BLOCKGROUPS_13', 'BLOCKGROUPS_15', 'BLOCKGROUPS_16', 'BLOCKGROUPS_17', 'BLOCKGROUPS_18', 'BLOCKGROUPS_19', 'BLOCKGROUPS_20', 'BLOCKGROUPS_21', 'BLOCKGROUPS_22', 'BLOCKGROUPS_23', 'BLOCKGROUPS_24', 'BLOCKGROUPS_25', 'BLOCKGROUPS_26', 'BLOCKGROUPS_27', 'BLOCKGROUPS_28', 'BLOCKGROUPS_29', 'BLOCKGROUPS_30', 'BLOCKGROUPS_31', 'BLOCKGROUPS_32', 'BLOCKGROUPS_33', 'BLOCKGROUPS_34', 'BLOCKGROUPS_35', 'BLOCKGROUPS_36', 'BLOCKGROUPS_37', 'BLOCKGROUPS_38', 'BLOCKGROUPS_39', 'BLOCKGROUPS_40', 'BLOCKGROUPS_41', 'BLOCKGROUPS_42', 'BLOCKGROUPS_44', 'BLOCKGROUPS_45', 'BLOCKGROUPS_46', 'BLOCKGROUPS_47', 'BLOCKGROUPS_48', 'BLOCKGROUPS_49', 'BLOCKGROUPS_50', 'BLOCKGROUPS_51', 'BLOCKGROUPS_53', 'BLOCKGROUPS_54', 'BLOCKGROUPS_55', 'BLOCKGROUPS_56', 'BLOCKGROUPS_60', 'BLOCKGROUPS_66', 'BLOCKGROUPS_69', 'BLOCKGROUPS_72', 'BLOCKGROUPS_78', 'US_BLOCKGROUPS_NATIONAL'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'ADJACENT_STATES', 'CBSA', 'CNECTA', 'COASTLINE', 'CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116', 'COUNTIES', 'CSA', 'METROPOLITAN_DIVISIONS', 'NATIONAL_OUTLINE', 'NWS_FORECAST_REGIONS', 'RAILWAYS', 'STATES', 'URBAN_AREAS', 'ZIP_CODES']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book" SQL: WHERE "title" LIKE '%book%'
However, if the string is not decided, you may use ILIKE and %. e.g. Get articles that mention "education": SQL: "body" ILIKE '%education%' OR "title" ILIKE '%education%'
When handling TO_TIMESTAMP_NTZ conversions, use query like: SELECT CASE WHEN "date" >= 1e15 THEN TO_TIMESTAMP_NTZ("date" / 1000000) WHEN "date" >= 1e12 THEN TO_TIMESTAMP_NTZ("date" / 1000) ELSE TO_TIMESTAMP_NTZ("date") END AS parsed_timestamp FROM my_table;
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Keep all decimals to four decimal places.
You need to follow the format's positive and negative signs.

2025-01-16 21:03:57 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 21:03:57 - root - INFO - ```sql
WITH bank_locations_per_zip AS (
    SELECT "zip_code", COUNT(*) AS "num_bank_locations"
    FROM FDA.FDIC_BANKS.LOCATIONS
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
),
zip_codes_co AS (
    SELECT "zip_code", "zip_code_geom"
    FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
    WHERE "state_code" = 'CO' AND "zip_code_geom" IS NOT NULL
),
block_groups_co AS (
    SELECT "geo_id", "blockgroup_geom"
    FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
    WHERE "state_fips_code" = '08' AND "blockgroup_geom" IS NOT NULL
),
overlap_areas AS (
    SELECT
        z."zip_code",
        b."geo_id",
        ST_AREA(ST_INTERSECTION(z."zip_code_geom", b."blockgroup_geom")) AS "overlap_area",
        ST_AREA(b."blockgroup_geom") AS "blockgroup_area"
    FROM
        zip_codes_co z
    JOIN
        block_groups_co b ON ST_INTERSECTS(z."zip_code_geom", b."blockgroup_geom")
),
overlap_ratios AS (
    SELECT
        "zip_code",
        "geo_id",
        "overlap_area" / NULLIF("blockgroup_area", 0) AS "overlap_ratio"
    FROM
        overlap_areas
    WHERE "overlap_area" > 0
),
adjusted_bank_locations AS (
    SELECT
        o."zip_code",
        o."geo_id",
        o."overlap_ratio",
        COALESCE(b."num_bank_locations", 0) AS "num_bank_locations",
        o."overlap_ratio" * COALESCE(b."num_bank_locations", 0) AS "adjusted_bank_locations"
    FROM
        overlap_ratios o
    LEFT JOIN
        bank_locations_per_zip b ON o."zip_code" = b."zip_code"
),
zip_code_concentrations AS (
    SELECT
        "zip_code",
        SUM("adjusted_bank_locations") AS "total_adjusted_bank_locations",
        COUNT(DISTINCT "geo_id") AS "num_block_groups"
    FROM
        adjusted_bank_locations
    GROUP BY "zip_code"
),
zip_code_concentration_rates AS (
    SELECT
        "zip_code",
        "total_adjusted_bank_locations",
        "num_block_groups",
        "total_adjusted_bank_locations" / NULLIF("num_block_groups", 0) AS "bank_locations_per_block_group"
    FROM
        zip_code_concentrations
)
SELECT
    "zip_code",
    ROUND("bank_locations_per_block_group", 4) AS "bank_locations_per_block_group"
FROM
    zip_code_concentration_rates
ORDER BY
    "bank_locations_per_block_group" DESC NULLS LAST
LIMIT 1;
```
2025-01-16 21:03:57 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:03:57 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:03:57 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:03:58 - snowflake.connector.connection - INFO - closed
2025-01-16 21:03:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:03:59 - root - INFO - itercount: 1
2025-01-16 21:03:59 - root - INFO - 001044 (42P13): 01b9c1ef-0004-7c54-0001-11c300e8ea72: SQL compilation error: error line 26 at position 29
Invalid argument types for function 'ST_INTERSECTS': (BINARY(8388608), BINARY(8388608))
2025-01-16 21:03:59 - root - INFO - Input sql:
WITH bank_locations_per_zip AS (
    SELECT "zip_code", COUNT(*) AS "num_bank_locations"
    FROM FDA.FDIC_BANKS.LOCATIONS
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
),
zip_codes_co AS (
    SELECT "zip_code", "zip_code_geom"
    FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
    WHERE "state_code" = 'CO' AND "zip_code_geom" IS NOT NULL
),
block_groups_co AS (
    SELECT "geo_id", "blockgroup_geom"
    FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
    WHERE "state_fips_code" = '08' AND "blockgroup_geom" IS NOT NULL
),
overlap_areas AS (
    SELECT
        z."zip_code",
        b."geo_id",
        ST_AREA(ST_INTERSECTION(z."zip_code_geom", b."blockgroup_geom")) AS "overlap_area",
        ST_AREA(b."blockgroup_geom") AS "blockgroup_area"
    FROM
        zip_codes_co z
    JOIN
        block_groups_co b ON ST_INTERSECTS(z."zip_code_geom", b."blockgroup_geom")
),
overlap_ratios AS (
    SELECT
        "zip_code",
        "geo_id",
        "overlap_area" / NULLIF("blockgroup_area", 0) AS "overlap_ratio"
    FROM
        overlap_areas
    WHERE "overlap_area" > 0
),
adjusted_bank_locations AS (
    SELECT
        o."zip_code",
        o."geo_id",
        o."overlap_ratio",
        COALESCE(b."num_bank_locations", 0) AS "num_bank_locations",
        o."overlap_ratio" * COALESCE(b."num_bank_locations", 0) AS "adjusted_bank_locations"
    FROM
        overlap_ratios o
    LEFT JOIN
        bank_locations_per_zip b ON o."zip_code" = b."zip_code"
),
zip_code_concentrations AS (
    SELECT
        "zip_code",
        SUM("adjusted_bank_locations") AS "total_adjusted_bank_locations",
        COUNT(DISTINCT "geo_id") AS "num_block_groups"
    FROM
        adjusted_bank_locations
    GROUP BY "zip_code"
),
zip_code_concentration_rates AS (
    SELECT
        "zip_code",
        "total_adjusted_bank_locations",
        "num_block_groups",
        "total_adjusted_bank_locations" / NULLIF("num_block_groups", 0) AS "bank_locations_per_block_group"
    FROM
        zip_code_concentrations
)
SELECT
    "zip_code",
    ROUND("bank_locations_per_block_group", 4) AS "bank_locations_per_block_group"
FROM
    zip_code_concentration_rates
ORDER BY
    "bank_locations_per_block_group" DESC NULLS LAST
LIMIT 1;
The error information is:
001044 (42P13): 01b9c1ef-0004-7c54-0001-11c300e8ea72: SQL compilation error: error line 26 at position 29
Invalid argument types for function 'ST_INTERSECTS': (BINARY(8388608), BINARY(8388608))
Please correct it and output only 1 complete SQL query.When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-16 21:04:25 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 21:04:25 - root - INFO - ```sql
WITH bank_locations_per_zip AS (
    SELECT "zip_code", COUNT(*) AS "num_bank_locations"
    FROM FDA.FDIC_BANKS.LOCATIONS
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
),
zip_codes_co AS (
    SELECT "zip_code", "zip_code_geom"
    FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
    WHERE "state_code" = 'CO' AND "zip_code_geom" IS NOT NULL
),
block_groups_co AS (
    SELECT "geo_id", "blockgroup_geom"
    FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
    WHERE "state_fips_code" = '08' AND "blockgroup_geom" IS NOT NULL
),
overlap_areas AS (
    SELECT
        z."zip_code",
        b."geo_id",
        ST_AREA(ST_INTERSECTION(ST_GEOGFROMWKB(z."zip_code_geom"), ST_GEOGFROMWKB(b."blockgroup_geom"))) AS "overlap_area",
        ST_AREA(ST_GEOGFROMWKB(b."blockgroup_geom")) AS "blockgroup_area"
    FROM
        zip_codes_co z
    JOIN
        block_groups_co b ON ST_INTERSECTS(ST_GEOGFROMWKB(z."zip_code_geom"), ST_GEOGFROMWKB(b."blockgroup_geom"))
),
overlap_ratios AS (
    SELECT
        "zip_code",
        "geo_id",
        "overlap_area" / NULLIF("blockgroup_area", 0) AS "overlap_ratio"
    FROM
        overlap_areas
    WHERE "overlap_area" > 0
),
adjusted_bank_locations AS (
    SELECT
        o."zip_code",
        o."geo_id",
        o."overlap_ratio",
        COALESCE(b."num_bank_locations", 0) AS "num_bank_locations",
        o."overlap_ratio" * COALESCE(b."num_bank_locations", 0) AS "adjusted_bank_locations"
    FROM
        overlap_ratios o
    LEFT JOIN
        bank_locations_per_zip b ON o."zip_code" = b."zip_code"
),
zip_code_concentrations AS (
    SELECT
        "zip_code",
        SUM("adjusted_bank_locations") AS "total_adjusted_bank_locations",
        COUNT(DISTINCT "geo_id") AS "num_block_groups"
    FROM
        adjusted_bank_locations
    GROUP BY "zip_code"
),
zip_code_concentration_rates AS (
    SELECT
        "zip_code",
        "total_adjusted_bank_locations",
        "num_block_groups",
        "total_adjusted_bank_locations" / NULLIF("num_block_groups", 0) AS "bank_locations_per_block_group"
    FROM
        zip_code_concentrations
)
SELECT
    "zip_code",
    ROUND("bank_locations_per_block_group", 4) AS "bank_locations_per_block_group"
FROM
    zip_code_concentration_rates
ORDER BY
    "bank_locations_per_block_group" DESC NULLS LAST
LIMIT 1;
```
2025-01-16 21:04:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:04:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:04:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:04:30 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 21:04:30 - snowflake.connector.connection - INFO - closed
2025-01-16 21:04:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:04:30 - root - INFO - itercount: 2
2025-01-16 21:04:30 - root - INFO - 0
2025-01-16 21:04:30 - root - INFO - results: 
zip_code,bank_locations_per_block_group
80111,28.9417


2025-01-16 21:04:30 - root - INFO - Please check the answer again by reviewing Which Colorado zip code has the highest concentration of bank locations per block group, based on the overlap between zip codes and block groups?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
zip_code,bank_locations_per_block_group
Colorado_zip_code:str,concentration:float > 0
```

The ZIP code listed above in Colorado has the highest concentration of bank locations per block group, determined by calculating the overlap between ZIP code areas and census block groups. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
zip_code,bank_locations_per_block_group
80111,28.9417
Current sql:
WITH bank_locations_per_zip AS (
    SELECT "zip_code", COUNT(*) AS "num_bank_locations"
    FROM FDA.FDIC_BANKS.LOCATIONS
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
),
zip_codes_co AS (
    SELECT "zip_code", "zip_code_geom"
    FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
    WHERE "state_code" = 'CO' AND "zip_code_geom" IS NOT NULL
),
block_groups_co AS (
    SELECT "geo_id", "blockgroup_geom"
    FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
    WHERE "state_fips_code" = '08' AND "blockgroup_geom" IS NOT NULL
),
overlap_areas AS (
    SELECT
        z."zip_code",
        b."geo_id",
        ST_AREA(ST_INTERSECTION(ST_GEOGFROMWKB(z."zip_code_geom"), ST_GEOGFROMWKB(b."blockgroup_geom"))) AS "overlap_area",
        ST_AREA(ST_GEOGFROMWKB(b."blockgroup_geom")) AS "blockgroup_area"
    FROM
        zip_codes_co z
    JOIN
        block_groups_co b ON ST_INTERSECTS(ST_GEOGFROMWKB(z."zip_code_geom"), ST_GEOGFROMWKB(b."blockgroup_geom"))
),
overlap_ratios AS (
    SELECT
        "zip_code",
        "geo_id",
        "overlap_area" / NULLIF("blockgroup_area", 0) AS "overlap_ratio"
    FROM
        overlap_areas
    WHERE "overlap_area" > 0
),
adjusted_bank_locations AS (
    SELECT
        o."zip_code",
        o."geo_id",
        o."overlap_ratio",
        COALESCE(b."num_bank_locations", 0) AS "num_bank_locations",
        o."overlap_ratio" * COALESCE(b."num_bank_locations", 0) AS "adjusted_bank_locations"
    FROM
        overlap_ratios o
    LEFT JOIN
        bank_locations_per_zip b ON o."zip_code" = b."zip_code"
),
zip_code_concentrations AS (
    SELECT
        "zip_code",
        SUM("adjusted_bank_locations") AS "total_adjusted_bank_locations",
        COUNT(DISTINCT "geo_id") AS "num_block_groups"
    FROM
        adjusted_bank_locations
    GROUP BY "zip_code"
),
zip_code_concentration_rates AS (
    SELECT
        "zip_code",
        "total_adjusted_bank_locations",
        "num_block_groups",
        "total_adjusted_bank_locations" / NULLIF("num_block_groups", 0) AS "bank_locations_per_block_group"
    FROM
        zip_code_concentrations
)
SELECT
    "zip_code",
    ROUND("bank_locations_per_block_group", 4) AS "bank_locations_per_block_group"
FROM
    zip_code_concentration_rates
ORDER BY
    "bank_locations_per_block_group" DESC NULLS LAST
LIMIT 1;When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-16 21:04:51 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 21:04:51 - root - INFO - ```sql
WITH bank_locations_per_zip AS (
    SELECT "zip_code", COUNT(*) AS "num_bank_locations"
    FROM FDA.FDIC_BANKS.LOCATIONS
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
),
zip_codes_co AS (
    SELECT "zip_code", "zip_code_geom"
    FROM FDA.GEO_US_BOUNDARIES.ZIP_CODES
    WHERE "state_code" = 'CO' AND "zip_code_geom" IS NOT NULL
),
block_groups_co AS (
    SELECT "geo_id", "blockgroup_geom"
    FROM FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL
    WHERE "state_fips_code" = '08' AND "blockgroup_geom" IS NOT NULL
),
overlap_areas AS (
    SELECT
        z."zip_code",
        b."geo_id",
        ST_AREA(ST_INTERSECTION(ST_GEOGFROMWKB(z."zip_code_geom"), ST_GEOGFROMWKB(b."blockgroup_geom"))) AS "overlap_area",
        ST_AREA(ST_GEOGFROMWKB(b."blockgroup_geom")) AS "blockgroup_area"
    FROM
        zip_codes_co z
    JOIN
        block_groups_co b ON ST_INTERSECTS(ST_GEOGFROMWKB(z."zip_code_geom"), ST_GEOGFROMWKB(b."blockgroup_geom"))
),
overlap_ratios AS (
    SELECT
        "zip_code",
        "geo_id",
        "overlap_area" / NULLIF("blockgroup_area", 0) AS "overlap_ratio"
    FROM
        overlap_areas
    WHERE "overlap_area" > 0
),
adjusted_bank_locations AS (
    SELECT
        o."zip_code",
        o."geo_id",
        o."overlap_ratio",
        COALESCE(b."num_bank_locations", 0) AS "num_bank_locations",
        o."overlap_ratio" * COALESCE(b."num_bank_locations", 0) AS "adjusted_bank_locations"
    FROM
        overlap_ratios o
    LEFT JOIN
        bank_locations_per_zip b ON o."zip_code" = b."zip_code"
),
zip_code_concentrations AS (
    SELECT
        "zip_code",
        SUM("adjusted_bank_locations") AS "total_adjusted_bank_locations",
        COUNT(DISTINCT "geo_id") AS "num_block_groups"
    FROM
        adjusted_bank_locations
    GROUP BY "zip_code"
),
zip_code_concentration_rates AS (
    SELECT
        "zip_code",
        "total_adjusted_bank_locations",
        "num_block_groups",
        "total_adjusted_bank_locations" / NULLIF("num_block_groups", 0) AS "bank_locations_per_block_group"
    FROM
        zip_code_concentrations
)
SELECT
    "zip_code",
    ROUND("bank_locations_per_block_group", 4) AS "bank_locations_per_block_group"
FROM
    zip_code_concentration_rates
ORDER BY
    "bank_locations_per_block_group" DESC NULLS LAST
LIMIT 1;
```
2025-01-16 21:04:51 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 21:04:51 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 21:04:51 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 21:04:52 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 21:04:52 - snowflake.connector.connection - INFO - closed
2025-01-16 21:04:53 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 21:04:53 - root - INFO - itercount: 3
2025-01-16 21:04:53 - root - INFO - 0
2025-01-16 21:04:53 - root - INFO - Total iteration counts: 3
