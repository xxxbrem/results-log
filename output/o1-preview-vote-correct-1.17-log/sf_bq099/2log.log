2025-01-16 14:12:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:13:52 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:13:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:13:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:13:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:13:53 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 14:13:53 - snowflake.connector.connection - INFO - closed
2025-01-16 14:13:53 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:13:53 - root - INFO - SQL:
-- 1. Explore the structure of the "cpc" field.
SELECT f.value
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") f
LIMIT 1000;
Results:
Too long, hard cut:
VALUE
"{
  ""code"": ""G01N2030/202"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""Y10T137/86815"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N2030/202"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N30/6047"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""F16K11/074"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G01N30/20"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""F16K11/074"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""B01D15/1821"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N30/20"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""B01D15/1821"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N30/6047"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N2030/201"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N2030/201"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""Y10T137/86815"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N30/461"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N30/461"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""A61K31/00"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""A61K31/00"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G02B7/16"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G02B7/16"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G02B21/248"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""Y10T74/19749"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""Y10T74/19749"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G02B21/248"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06F13/4077"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H04L5/16"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06F13/4077"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H04L5/16"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G11B7/004"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G11B7/00375"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G11B20/10"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G11B19/04"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G11B7/00375"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G11B19/04"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06V20/66"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06V10/143"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06V20/66"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06V10/143"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06V20/80"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06V20/80"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C03C3/095"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C03C3/091"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C09D11/03"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C03C12/00"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C03C3/091"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C03C12/00"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C03C3/095"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C09D11/03"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H01L28/91"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H01L28/91"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H10B12/033"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H10B12/00"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H10B12/033"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H10B12/318"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H10B12/318"",
  

2025-01-16 14:13:53 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:13:53 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:13:53 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:13:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 14:13:55 - snowflake.connector.connection - INFO - closed
2025-01-16 14:13:55 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:15:35 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:15:35 - root - INFO - ```sql
-- Corrected SQL query to extract CPC codes using "code" instead of "symbol"
SELECT DISTINCT f.value:"code"::STRING AS "cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") f
WHERE f.value:"code"::STRING IS NOT NULL
LIMIT 1000;
```
2025-01-16 14:15:35 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:15:35 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:15:35 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:15:36 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 14:15:36 - snowflake.connector.connection - INFO - closed
2025-01-16 14:15:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:15:37 - root - INFO - SQL:
-- Corrected SQL query to extract CPC codes using "code" instead of "symbol"
SELECT DISTINCT f.value:"code"::STRING AS "cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") f
WHERE f.value:"code"::STRING IS NOT NULL
LIMIT 1000;
Results:
Too long, hard cut:
cpc_code
B04C2009/008
H04N21/233
H01L2924/0105
H04L67/56
G06F11/30
H04L12/4035
C09D5/1662
A61F13/05
E21B43/38
A23V2002/00
A61K8/0241
G09G5/00
C09D5/14
A61P31/08
A61F2002/304
C07D403/14
E04F15/105
B01L3/523
H10N70/8828
Y10T292/0814
C11D7/5013
H04L5/0035
H04N19/513
A63B41/02
H01L21/28035
H04N21/251
B32B27/36
B29C65/18
G06F9/542
H01L27/0688
F02D41/1441
F16H61/16
F16K17/0433
B60R16/0231
B60W2710/08
A61B2017/8838
G05B2219/50135
B60T2270/60
B01L2300/1827
C07K16/283
F01D25/285
G06F9/5038
B60W20/30
F01N2610/1486
G05B2219/24139
G06F2201/86
A61B17/105
G08G1/09623
Y02B70/3225
A61B2017/00017
C04B7/475
H01L2224/16227
H05B33/0866
H01L2224/0567
C04B2235/40
C10G2300/1059
B32B2255/04
C01P2004/61
G10H2220/005
F16C2240/48
B32B27/285
C09J2467/006
E03D3/12
G06F21/575
G02B6/3893
A61K33/04
G01B5/28
G16H20/60
A47L9/10
G06T2207/30121
G05B19/41855
G10L25/30
C09D11/10
G06F16/9577
E04D2001/3432
G01N2333/9645
G06V30/1463
G06F9/5016
A61B6/547
G06F3/1213
B65H2801/12
H04W88/12
H01L23/12
B60R16/03
A61B90/36
G11B2220/2541
H02G3/0475
B01J2219/00317
A61M60/205
A61M25/007
A61M2025/0037
F17C2209/2154
F28D7/028
H04M3/42068
H01L27/14618
G06F12/0815
B23C5/2269
C07D213/82
C07D233/70
Y02P10/134
A61H33/06
F25J2205/40
F25J2270/04
B63B1/286
A61B6/08
F16D48/02
C25D17/06
H02K5/04
H01R4/36
C08G18/4054
H03K3/66
C12N9/54
H04N5/783
Y10T428/24289
A01N25/28
C10M3/00
G10K2210/3026
C23C16/481
E06B7/14
C04B26/02
B01J27/08
C09B43/42
C23F1/18
G01N2333/904
C23C22/34
A61B2017/1205
F16B39/286
F16B19/02
G11B7/00456
H01J37/32522
G01P15/0922
F16F15/08
F16C23/04
G01D5/2497
C08K5/0066
H02M1/44
H01L21/02554
A61F13/15
H01L23/3735
H01S5/0233
B01D19/0005
A61L27/3641
B41J3/407
B60T8/1706
H01M4/0404
B08B3/022
G06V10/80
H01L29/8083
C07D401/06
B60R19/48
H04S2420/11
G11B20/10527
H01S5/04254
A47K5/14
H04N1/053
G01K7/015
G16H50/50
G07B2017/00725
B65G1/02
A61K31/706
H04N23/20
B60W2510/182
G06V20/80
G02B6/34
A61K39/464462
A63B23/03541
G05B2219/39571
G05D1/0255
H04W4/21
G01N35/00029
G06T7/90
H02J50/402
C07C2529/44
C07C2529/48
A45B25/165
B01J2219/0892
H01Q1/005
C23C16/4581
F23G2204/101
G06F12/1441
G06T2207/10028
A62B18/003
H10K71/621
D21H27/10
H01L24/10
A61B3/113
H01J2237/0203
G06F16/24545
H01S3/1003
A61G2210/50
C03B2201/12
H10K50/15
G09G2360/145
C12N15/1055
B81C1/00293
G01V1/364
H10N30/80
H02P8/38
C07C45/58
C11D3/10
G09G3/2088
B01J29/783
B60T8/323
C12C5/02
G01N2021/6482
D01G27/04
G06Q50/12
B21D28/28
Y10T403/61
A01N43/82
B29C55/00
B01D2239/0618
F28D1/0233
G06F16/40
C08G18/1816
H05K3/281
H05K2203/0113
G12B5/00
F02B41/00
A63B53/02
A61B2018/00333
C07D239/46
A61B2017/3413
A61K31/194
B41M3/10
D21F3/0209
B29C48/405
A24F40/485
B23C5/10
C07D211/46
E03F2003/065
B05B12/082
A61B2017/2946
F16G13/06
C21D9/0087
C07D491/20
A61M25/0075
F24T10/30
B60R16/0239
G08B13/19645
H03F1/3247
G09B19/0092
G01N27/04
C08G18/7664
F16C33/34
H01R41/00
G10K2210/1282
G01M11/005
H02P2207/01
G01N21/94
H02K1/00
H01L21/02205
H04R2227/005
H02M7/487
Y10T156/13
H10N30/8542
H04M1/0274
G06T7/579
H04B1/3883
F25C1/25
A61B5/150099
C08J2359/00
G06F3/0346
C21D8/065
H01L51/5253
F02F1/242
A61B5/1126
A61F2/44
H04R2225/43
C12M27/16
G01R33/1269
C08G81/024
E04B1/24
F22B37/78
F25J3/067
Y10T137/7781
B65D5/76
F02D31/008
B42F17/00
A61H2003/043
F15B2211/7052
B01D29/213
F16B25/0057
F02M69/50
C07C37/055
B61L7/088
B60T13/245
F01N3/26
H04N21/6583
B60B25/08
A47L1/09
Y10S264/72
G02B2006/12054
D10B2501/06
C10M2203/065
H04M3/42221
F16H1/12
A61B2017/0432
A61M2205/18
B23K35/40
G01S7/521
H04W28/22
H04W4/16
A61K36/288
C07K14/405
A61M60/414
G01D3/02
A61B5/04014
B22F3/105
H04L41/08
H04L9/3213
F42B3/10
G01R31/2855
G01R31/2851
H04L29/08099
F16K31/046
H05B33/04
B64D11/0015
G10L15/20
A61P23/02
G01R31/2891
A47G23/06
B65B9/04
H04M15/785
B60K2370/193
G06F1/185
B29C2063/027
C04B2237/348
B60W50/0205
H04L12/1403
A47B57/586
H01L29/42372
A46B7/08
B60T8/17
C05D7/00
G01N2291/0256
H01Q13/10
H03L7/0814
F02M61/18
A01F2015/073
G06V40/1371
B01F35/2209
B29B9/16
H04L12/40045
H01M10/6568
C04B2237/70
G06T7/194
G06F3/1225
H01L27/016
G06F2113/14
H01L21/7681
G03B17/02
H01F41/041
H05B45/3725
H04Q11/04
F21Y2107/30
G06F21/629
C04B2235/422
Y10S210/08
G02B5/128
F24F1/0035
C07C67/327
Y10S414/126
Y10T137/8122
A41C3/0007
B21B45/0242
C10N2050/08
B01D35/02
G02B23/16
G07F15/003
B65D7/24
C10B5/02
A61K39/46432
B65D2543/0025
A41F5/00
Y10T24/3918
F16J15/3456
C07C317/22
F02C9/26
F24F13/15
D06M15/00
H01L27/11587
A41D19/04
G06Q20/201
A41B11/00
A01G25/023
Y10T29/4921
B65B57/10
H04B7/12
G02B27/0994
G02B26/008
F05D2260/821
B01J23/883
B22F2301/35
F16D2065/785
G06F9/22
C01G53/44
G10L21/04
G11C11/161
B42D15/08
H04N5/62
E05B47/00
A47F10/02
B23Q1/28
C11B1/12
C10M2221/00
G03B27/588
C10M2227/02
H01F29/02
C02F2303/20
B01J2219/3306
A01K59/04
B65D47/2018
D05B15/04
F02B2075/1824
C10K1/121
B02C13/284
B01J2/00
G03C7/383
Y10T137/87893
B29C49/04102
H01L21/12
C07C233/12
F21S41/24
H01J2237/04922
H01L45/145
A61B2018/20361
B60Q1/507
H04N19/98
H04R7/045
G06T7/155
C08L25/08
G06T2207/20221
C08G77/442
G06F9/3806
F16H7/1281
F16C2226/74
B64F5/40
H01L2224/24051
B64D2027/026
G02B5/188
H04L1/1657
C10L5/44
C08B5/00
F24D5/00
A61B5/022
F

2025-01-16 14:15:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:15:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:15:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:15:38 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 14:15:38 - snowflake.connector.connection - INFO - closed
2025-01-16 14:15:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:16:43 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:16:43 - root - INFO - ```sql
-- Corrected SQL query to retrieve the top 3 assignees in class 'A01B3' based on total applications, ensuring columns are not empty

WITH cpc_data AS (
    SELECT
        t."publication_number",
        t."publication_date",
        t."country_code",
        f_cpc.value:"code"::STRING AS cpc_code,
        f_assignee.value:"name"::STRING AS assignee_name
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."cpc") f_cpc,
         LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
          AND f_assignee.value:"name"::STRING IS NOT NULL
          AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
)

SELECT
    t.assignee_name,
    t.total_applications,
    m.year_with_most_applications,
    m.applications_in_that_year,
    c.country_code_with_most_applications_during_that_year
FROM (
    SELECT
        assignee_name,
        COUNT(*) AS total_applications
    FROM cpc_data
    GROUP BY assignee_name
) t
JOIN (
    SELECT
        assignee_name,
        publication_year AS year_with_most_applications,
        applications_in_that_year
    FROM (
        SELECT
            assignee_name,
            TO_CHAR(TO_DATE(publication_date::VARCHAR, 'YYYYMMDD'), 'YYYY') AS publication_year,
            COUNT(*) AS applications_in_that_year,
            ROW_NUMBER() OVER (PARTITION BY assignee_name ORDER BY COUNT(*) DESC) AS rn
        FROM cpc_data
        GROUP BY assignee_name, publication_year
    ) sub
    WHERE rn = 1
) m ON t.assignee_name = m.assignee_name
JOIN (
    SELECT
        assignee_name,
        publication_year,
        country_code AS country_code_with_most_applications_during_that_year
    FROM (
        SELECT
            assignee_name,
            publication_year,
            country_code,
            COUNT(*) AS applications_in_country,
            ROW_NUMBER() OVER (PARTITION BY assignee_name, publication_year ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                assignee_name,
                TO_CHAR(TO_DATE(publication_date::VARCHAR, 'YYYYMMDD'), 'YYYY') AS publication_year,
                country_code
            FROM cpc_data
        ) sub
        GROUP BY assignee_name, publication_year, country_code
    ) sub2
    WHERE rn = 1
) c ON m.assignee_name = c.assignee_name AND m.year_with_most_applications = c.publication_year
ORDER BY t.total_applications DESC
LIMIT 3;
```
2025-01-16 14:16:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:16:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:16:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:16:44 - snowflake.connector.connection - INFO - closed
2025-01-16 14:16:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:18:29 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:18:29 - root - INFO - ```sql
SELECT
    t."assignee_name",
    t."total_applications",
    m."year_with_most_applications",
    m."applications_in_that_year",
    c."country_code_with_most_applications_during_that_year"
FROM (
    SELECT
        "assignee_name",
        COUNT(*) AS "total_applications"
    FROM (
        SELECT
            f_assignee.value:"name"::STRING AS "assignee_name",
            TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year",
            t."country_code"
        FROM PATENTS.PATENTS.PUBLICATIONS t,
             LATERAL FLATTEN(input => t."cpc") f_cpc,
             LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
        WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
              AND f_assignee.value:"name"::STRING IS NOT NULL
              AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    ) base_data
    GROUP BY "assignee_name"
) t
JOIN (
    SELECT
        "assignee_name",
        "publication_year" AS "year_with_most_applications",
        "applications_in_that_year"
    FROM (
        SELECT
            "assignee_name",
            "publication_year",
            COUNT(*) AS "applications_in_that_year",
            ROW_NUMBER() OVER (PARTITION BY "assignee_name" ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS "assignee_name",
                TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."cpc") f_cpc,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
        ) sub_base
        GROUP BY "assignee_name", "publication_year"
    ) sub
    WHERE rn = 1
) m ON t."assignee_name" = m."assignee_name"
JOIN (
    SELECT
        "assignee_name",
        "publication_year",
        "country_code" AS "country_code_with_most_applications_during_that_year"
    FROM (
        SELECT
            "assignee_name",
            "publication_year",
            "country_code",
            COUNT(*) AS "applications_in_country",
            ROW_NUMBER() OVER (PARTITION BY "assignee_name", "publication_year" ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS "assignee_name",
                TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year",
                t."country_code"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."cpc") f_cpc,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
        ) sub_sub_base
        GROUP BY "assignee_name", "publication_year", "country_code"
    ) sub2
    WHERE rn = 1
) c ON m."assignee_name" = c."assignee_name" AND m."year_with_most_applications" = c."publication_year"
ORDER BY t."total_applications" DESC
LIMIT 3;
```
2025-01-16 14:18:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:18:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:18:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:18:31 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-16 14:18:31 - snowflake.connector.connection - INFO - closed
2025-01-16 14:18:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:18:31 - root - INFO - SQL:
SELECT
    t."assignee_name",
    t."total_applications",
    m."year_with_most_applications",
    m."applications_in_that_year",
    c."country_code_with_most_applications_during_that_year"
FROM (
    SELECT
        "assignee_name",
        COUNT(*) AS "total_applications"
    FROM (
        SELECT
            f_assignee.value:"name"::STRING AS "assignee_name",
            TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year",
            t."country_code"
        FROM PATENTS.PATENTS.PUBLICATIONS t,
             LATERAL FLATTEN(input => t."cpc") f_cpc,
             LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
        WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
              AND f_assignee.value:"name"::STRING IS NOT NULL
              AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    ) base_data
    GROUP BY "assignee_name"
) t
JOIN (
    SELECT
        "assignee_name",
        "publication_year" AS "year_with_most_applications",
        "applications_in_that_year"
    FROM (
        SELECT
            "assignee_name",
            "publication_year",
            COUNT(*) AS "applications_in_that_year",
            ROW_NUMBER() OVER (PARTITION BY "assignee_name" ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS "assignee_name",
                TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."cpc") f_cpc,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
        ) sub_base
        GROUP BY "assignee_name", "publication_year"
    ) sub
    WHERE rn = 1
) m ON t."assignee_name" = m."assignee_name"
JOIN (
    SELECT
        "assignee_name",
        "publication_year",
        "country_code" AS "country_code_with_most_applications_during_that_year"
    FROM (
        SELECT
            "assignee_name",
            "publication_year",
            "country_code",
            COUNT(*) AS "applications_in_country",
            ROW_NUMBER() OVER (PARTITION BY "assignee_name", "publication_year" ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS "assignee_name",
                TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year",
                t."country_code"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."cpc") f_cpc,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
        ) sub_sub_base
        GROUP BY "assignee_name", "publication_year", "country_code"
    ) sub2
    WHERE rn = 1
) c ON m."assignee_name" = c."assignee_name" AND m."year_with_most_applications" = c."publication_year"
ORDER BY t."total_applications" DESC
LIMIT 3;
Results:
assignee_name,total_applications,year_with_most_applications,applications_in_that_year,country_code_with_most_applications_during_that_year
LELY NV C VAN DER,13,1987,6,IT
TEXAS INDUSTRIES INC,6,1982,6,FR
DEERE & CO,6,2020,2,EP

2025-01-16 14:18:31 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:18:31 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:18:31 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:18:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 14:18:33 - snowflake.connector.connection - INFO - closed
2025-01-16 14:18:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:18:33 - root - INFO - SQL:
-- 4. Extract assignee names from the "assignee_harmonized" field.
SELECT f.value:"name"::STRING AS "assignee_name"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee_harmonized") f
LIMIT 1000;
Results:
Too long, hard cut:
assignee_name
STEVEN SCHON
SHACHIHATA INC
ONKIMMUNE LTD
ADVANCED COMPUTER AND COMMUNICATIONS L L C
UNITED TECHNOLOGIES CORP
SCHILLER GROUNDS CARE INC
JANSSEN PHARMACEUTICA NV
HAGGAN WILLIE
LENOVO BEIJING LTD
JAHWA ELECTRONICS CO LTD
TOSHIBA KK
SERVUTAS VITALI
XEROX CORP
ADVANCED RISC MACH LTD
UNIV MICHIGAN REGENTS
IBM
SUPERC TOUCH CORP
PETRUKHIN KONSTANTIN
CIOFFI CHRISTOPHER
JOHNSON GRAHAM
DOBRI NICOLETA
FREEMAN EMILY
CHEN PING
CONLON MICHAEL
ZHU LEI
UNIV COLUMBIA
TOSHIBA TEC KK
SK HYNIX INC
COMMVAULT SYSTEMS INC
BARD INC C R
BARD INC C R
OLYMPUS CORP
SONY CORP
BRIDGESTONE CORP
CP CASES LTD
SUMITOMO RUBBER IND
TORAY INDUSTRIES
CAREBAY EUROPE LTD
NTN TOYO BEARING CO LTD
HARMAN INT IND
NIPPON STEEL & SUMITOMO METAL CORP
TUNGALOY CORP
KEWPIE CORP
NEC EUROPE LTD
HOU HAO HSUN
UNIV CHICAGO
KARIMZADEH RAMIN
NXP USA INC
FRACTAL ANTENNA SYSTEMS INC
ADVANCED RISC MACH LTD
INCYTE CORP
RED HAT INC
SEAGATE TECHNOLOGY LLC
GUARDIAN INDUSTRIES
DAEGU GYEONGBUK INST SCIENCE & TECH
SERVANT'S HEART OUTFITTERS L L C
PACIFIC BIOSCIENCES CALIFORNIA INC
MICROSOFT TECHNOLOGY LICENSING LLC
FITBIT INC
APPLE INC
PROFESSIONAL DISPOSABLES INT INC
TRW AUTOMOTIVE US LLC
MICROSOFT TECHNOLOGY LICENSING LLC
SPORT MASKA INC
SENSITY SYSTEMS INC
SEIKO EPSON CORP
FACEBOOK INC
OLYMPUS CORP
CRODA INT PLC
FUJIFILM CORP
ACCENTURE GLOBAL SOLUTIONS LTD
LEBLAND DENNIS
ELWHA LLC
NIDEC CORP
COLLEGIUM PHARMACEUTICAL INC
THERMO FINNIGAN LLC
SYNVINA C V
AGFA HEALTHCARE
VRVIS ZENTRUM FUER VIRTUAL REALITY UND VISUALISIERUNG
AVL LIST
GOOGLE LLC
HUIZHOU TCL MOBILE COMMUNICATION CO LTD
FINKBEINER JACQUES
HEINIGER SONIA
COSANDEY JOHAN
WUHAN CHINA STAR OPTOELECTRONICS TECHNOLOGY CO LTD
NOVARTIS AG
HEWLETT PACKARD DEVELOPMENT CO
BOE TECHNOLOGY GROUP CO LTD
HEFEI XINSHENG OPTOELECTRONICS TECHNOLOGY CO LTD
HEFEI XINSHENG OPTOELECTRONICS TECHNOLOGY CO LTD
OVERKIZ
SHARP KK
PRODUCTIVE AGING LABORATORY CO LTD
SAMSUNG ELECTRONICS CO LTD
ARRAY BIOPHARMA INC
GENENTECH INC
DOORDASH INC
HARDMAN BRENNA ANN
AGIE CHARMILLES SA
MICROSOFT TECHNOLOGY LICENSING LLC
LG DISPLAY CO LTD
SAMSUNG DISPLAY CO LTD
AT & T IP I LP
BOEHRINGER INGELHEIM VETMEDICA GMBH
HONDA MOTOR CO LTD
CHART INC
24 7 INT LLC
ADVANCED RISC MACH LTD
HONDA MOTOR CO LTD
TOSHIBA TEC KK
TOKYO ELECTRON LTD
GENESYS TELECOMMUNICATIONS LABORATORIES INC
MOURI FUMIHIKO
YAMAMOTO SUSUMU
YAMAMURA SATOSHI
TOYOTA MOTOR CO LTD
KOITO MFG CO LTD
DIALOG SEMICONDUCTOR UK LTD
GILEAD CONNECTICUT INC
GENENTECH INC
RENESAS ELECTRONICS CORP
ZHANG LONG
UNIV MEDICAL PHARMACEUTICALS CORPORATION
LEA GILBERT MELBYE
LG ELECTRONICS INC
HYUNDAI MOTOR CO LTD
KIA MOTORS CORP
PAPINEAU MICHAEL
FELTHAM MARK
OFINNO TECHNOLOGIES LLC
GYRUS MEDICAL LTD
KRONES AG
AT & T IP I LP
GOPRO INC
UNDERSTORY LLC
NICHIA CORP
SEIKO EPSON CORP
SUMITOMO ELECTRIC INDUSTRIES
SEI OPTIFRONTIER CO LTD
SUMITOMO ELECTRIC LIGHTWAVE CORP
TOKAI RIKA CO LTD
DEERE & CO
EBAY INC
SAMSUNG ELECTRONICS CO LTD
ALIBABA GROUP HOLDING LTD
KONICA MINOLTA INC
HUANG CHIEN CHUNG
UNITED TECHNOLOGIES CORP
AUSTIN CHRISTOPHER B
CHINA ACADEMY TELECOMMUNICATIONS TECHNOLOGY
HITACHI HIGH TECH CORP
INOVYTEC MEDICAL SOLUTIONS LTD
HEWLETT PACKARD DEVELOPMENT CO
HEWLETT PACKARD DEVELOPMENT CO
HILTI AG
HI LEX CORP
FORBES PAUL W
SMELTZ CLAYTON PRESCAN
FORBES REHAB SERVICES INC
TFOR LLC
ERICSSON TELEFON AB L M
FROHNAPFEL DUSTIN J
OBRIEN JR WALTER F
LOWE TODD K
VIRGINIA TECH INTELLECTUAL PROPERTIES INC
Parasol Medical LLC
SAMSUNG ELECTRONICS CO LTD
UNIV WASHINGTON
TJD ENTPR INC
NIDEC CORP
CISCO TECH INC
ALLERGAN INC
CENTECH CORP
LOWES COMPANIES INC
FUJITSU LTD
BAIDU USA LLC
CommScope Connectivity Belgium BVBA
ADC CZECH REPUBLIC SRO
STATE FARM MUTUAL AUTOMOBILE INSURANCE CO
CIMPRESS SCHWEIZ GMBH
BEIJING KUANGSHI TECH CO LTD
NAT TECH & ENG SOLUTIONS SANDIA LLC
NVIDIA CORP
CHENG UEI PREC IND CO LTD
JOHNSON CONTROLS TECH CO
VALEO SYSTEMES DESSUYAGE
SAUDI ARABIAN OIL CO
ADOCIA
GONZALEZ AIDAN A
WELLS FARGO BANK NA
JANSSEN BIOTECH INC
SK HYNIX INC
UNIV NAT TSING HUA
AT & T IP I LP
EDGECRAFT CORP
HONDA MOTOR CO LTD
SAMSUNG ELECTRONICS CO LTD
ELLEX R&D PTY LTD
SIEMENS HEALTHCARE GMBH
NOKIA TECHNOLOGIES OY
UNIV DONGGUAN TECHNOLOGY
ALLURION TECH INC
FUJITSU LTD
OMRON HEALTHCARE CO LTD
TAIWAN SEMICONDUCTOR MFG CO LTD
PLASTIC REPAIR SYSTEM 2011 S L
SONY CORP
REATA PHARMACEUTICALS INC
CHENGDU BOE OPTOELECT TECH CO
BOE TECHNOLOGY GROUP CO LTD
GREENSEAL RES LTD
DAIKIN IND LTD
ZONEART NETWORKS LTD
DSM IP ASSETS BV
TOYO SEIKAN KAISHA LTD
TOYO SEIKAN GROUP HOLDINGS LTD
ERICSSON TELEFON AB L M
SONY SEMICONDUCTOR SOLUTIONS CORP
BOEING CO
PANASONIC CORP
KEYENCE CO LTD
PANASONIC IP MAN CO LTD
HUAWEI TECH CO LTD
MATTSON TECH INC
VARIAN MED SYS INC
KARSTEN MFG CORP
ITT MFG ENTERPRISES LLC
FORD GLOBAL TECH LLC
OREAL
STAGGERINGS LLC
ENVIRONMENTAL DYNAMICS INT INC
BSH HAUSGERAETE GMBH
AT & T IP I LP
HEADWATER RES LLC
PURIDIFY LTD
BROWN TAYLOR DIANTE
HOMEWAV LLC
XMOTORS AI INC
ENTIT SOFTWARE LLC
MAG INSTR INC
SK HYNIX INC
ARCUS TECH INC
COMCAST CABLE COMM LLC
WUXI PETABYTE TECH CO LTD
CANON KK
AMEC FOSTER WHEELER USA CORP
TURATTI SRL
SPO

2025-01-16 14:18:33 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:18:33 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:18:33 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:18:34 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 14:18:35 - snowflake.connector.connection - INFO - closed
2025-01-16 14:18:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:18:35 - root - INFO - SQL:
-- 5. Get distinct assignee names to understand potential top assignees.
SELECT DISTINCT f.value:"name"::STRING AS "assignee_name"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee_harmonized") f
LIMIT 1000;
Results:
Too long, hard cut:
assignee_name
PREC BIOSCIENCES INC
STANLEY WORKS LTD
CAMURUS AB
WWT SPOLKA Z OGRANICZONA ODPOWIEDZIALNOSCIA
EISEN EIKO
WISTRON NEWEB CORP
UST INC
UNIV ANGERS
CHUNG CHI Y
ZHU MIN
SUMNER MICHAEL
BERNARD MARC R
HRA PHARMA LAB
GANZHOU HEMAY PHARMACEUTICAL CO
SURROZEN OPERATING INC
KIMBERLY CLARK CO
VIGIL NEUROSCIENCE INC
ROCKWOOL INT
OMNISYSTEM CO LTD
AGCO DO BRASIL SOLUCOES AGRICOLAS LTDA
KOREA INST OCEAN SCI & TECH
MATHUR BHAVNA
VARTIAINEN PANU
KAN GEORGE L
SUN HAO
KOO YEON KWAN
ADVANCED BIONICS LLC
MICROELECTRONICS TECH INC
MARTIN DOMINIC R
BRUKER BIOSPIN AG
SOROCO PRIVATE LTD
NIKE INC
Turner Tackle LLC
WAGNER JOACHIM
TOOLTECH LLC
ATOTECH DEUTSCHLAND GMBH
AJINOMOTO KK
HIKMET RIFAT A M
AUYOUNG ALVIN
CHEVRON ORONITE SAS
UNIV MACAU
H4X EU
FUNDACION INSTITUTO DE INVESTIG SANITARIA FUNDACION JIMENEZ DIAZ
COGNEX CORP
WIRTGEN GMBH
AUE TEXTILMASCHINENBAU GMBH
OTKRYTOE AKTSIONERNOE OBSHCHESTVO INFORMATSIONNYE TEKH I KOMMUNIKATSIONNYE SISTEMY
ACTION ELIZABETH
RATKAY ALECSEU
EXXON RESEARCH ENGINEERING CO
FOSTER WHEELER ENERGY CORP
LAESSER FRANZ AG
KORPORATSIJA MASTERNEHT AOZT
HOWELL THOMAS A
SHIM JAE J
MEGURO TAKESHI
ARNEY SHANE R
UBE MAT IND LTD
POORNACHANDRAN RAJESH
OOI TETSUYA
SCHUMACHER DONALD J
DECKARD CARL
TAPIA MARIO G
PEREGO ANDREA
KAWANA TAKAHIRO
SERVIER LAB
GRINKEVICH ALEKSANDR VASIL EVICH
DVOEGLAZOV ALEKSEJ IVANOVICH
ASEA AB
SCHAEFER ELEKTROTECHNIK U SONDERMASCHINEN GMBH
ZIMMERMANN GISELA
SHINDENGEN ELECTRIC MFG CO
ATATUERK UENIVERSITESI BILIMSEL ARASTIRMA PROJELERI BIRIMI
LYUBEZNOV VALERIJ KONSTANTINOVICH
KODAMA NOBUTAKA
GUOZHU YE
HINTERMAIER WOLFGANG
MAURER JOHN H
PICHER PATRICK
LAMBA DIGVIJAY SINGH
LÉONARD FRANÇOIS
CARUELLE JEAN-PIERRE
ST MICROELECTRONICS ROUSSET
TERMINATOR IP LTD
TOTALENERGIES CORBION BV
KAISER GYPSUM COMPANY INC
LISTON JAMES A TRUSTEE
SYLVESTER RICHARD
WITTENBERGE NAEHMASCH VEB
BORG HOLDING A G
WARNER LAMBERT TECH
ORTH JANOSNE
FAIL SAFE IND INC
HIAB AB
MOBIPAYPOINT LTD
HEWLETT PACKARD DEVELOPMENT CO LP
ROBOPAC SPA
ROCHE DIAGNOSTICS OPERATIONS INC
HEINRICH GEORG GMBH MASCHF
BioVersys AG
JANSMA MICHAEL
BIOTA EUROPE LTD
VICENTE JOSE GERMAN
CELLULAR RES INC
JANSSEN PHARMACEUTICALS INC
DARNELL WAYNE
TECHNION RES & DEV FOUNDATION
ANALOGIC CORP
WEIR MINERALS AUSTRALIA LTD
FORMLABS INC
SUBARU CORP
LUKITO HARSOYO
MEEKER DAVID E
LARYNGEAL MASK CO LTD
MOLYNEUX STEPHEN
JOHNSON & JOHNSON SURGICAL VISION INC
BERTHIEZ C N M P
BASF PLANT SCIENCE CO GMBH
CQLT SAARGUMMI TECH SARL
HEFEI MIDEA REFRIGERATOR CO
FERROLI SPA
STEFFENS RALF
ZHANG JINGLIN
XIAMEN CHANGELIGHT CO LTD
MURATA TOSHIKI
SUMITOMO METAL MINING CO
SOLINAS MEDICAL INC
RADIABEAM TECH LLC
Evol Science LLC
MARTINEZ CANALES MONICA LUCIA
WAVE OPTICS LTD
JIANGSU SHEMAR ELECTRIC CO LTD
KANG MIN SOO
LUEDTKE OLIVER
BUONO JUAN C MR
FARGO KENDALL M
KELLER IGOR
MONOPANEL SA
ROLLERBLADE INC
GALLER KURT
TOLEDO ERAN
EL TAHER TODD
ISHITANI TOMOYA
MATERIALS & ELECTROCHEMICAL RES CORP
TERATRON GMBH
EUROPOLES GMBH & CO KG
WHITE IAN D
GOTFRIED YECHIEL
KESSLER MANFRED
STAPP SOEREN
EUROCATENE SRL
SEOK TAEK O
WOO DAE ENGINEERING CONSULTANT CO LTD
ELIESON CHAIMSONOVITZ PROSPER
MARSHALL & ILSLEY BANK
JAMES B BLACKBURN
BERACA SABARA QUIMICOS E INGRE
SWEETSER BERT M
LELAND ELECTRIC CO
NIPPON KOGAKU KK
BOGIE N
KELVINATOR CORP
REDINGTON COUNTERS INC
DANFOSS AS
STOCK EQUIPMENT CO
BISSETT & SONS LTD J
TAITO CORP
GROSS ISAK
TELEX CORP THE
TURNER BROTHERS ASBEST
HITACHI SOFTWARE ENG
REMINGTON TYPEWRITER CO
PEUGEOT
STIRN ALBERT L
JANSSEN VACCINES & PREVENTION BV
WARREN FASTENER CORP
MUELLER JOHANN
WHEELABRATOR CORP
PACIFIC MILLS
CANADIAN SAFETY FUSE COMPANY L
CARTIER JOSEPH GIDEON
OMARK INDUSTRIES INC
STICKEL CHARLES E A
NORGREN CO C A
HOLDEN ARTEMAS F
ARMSTRONG WHITWORTH CO ENG
CEBAL
WEA MFG INC
WILLIAM R BECKER
SICARI R
PERES DALMO JOSE
ALFRED CARRINGTON KENNEDY
CARL WALTHER OHG
KIOXIA CORP
BATTELLE ENERGY ALLIANCE LLC
SOLID INC
TG3D STUDIO
LIXIL SUZUKI SHUTTER CORP
EMPRESSA NAC DE MINERIA ENAMI
VELCRO IP HOLDINGS LLC
MATSUMOTO AYAKA
LODZKA FAB MASZYN JEDWABNI
ALLEN GROUP
SANNER FRIEDR GMBH CO KG
SINGAPORE CHARTERED IND
BEHR GMBH & CO KG
SPATTI GIOVANNI
BOMBAY TEXTILE RES ASS BTRA
SUZUKI MASAMI
WOONGJIN CHEMICAL CO LTD
Convida Wireless LLC
HEATON JEREMIAH
SONOS INC
REMEDEE LABS
BYSTRONIC MASCH
AFP ADVANCED FOOD PRODUCTS LLC
CHR HANSEN AS
THEKKADATH GOVINDANUNNY
SHANGHAI GUIMU ROBOT CO LTD
DEUTSCHE REICHSBAHN
TELO GENOMICS HOLDINGS CORP
POTOMAC PHOTONICS INC
TRIGEM COMPUTER INC
PARK MAN KI
UNIV FLORIDA STATE
MUSIL FRANTISEK
NGUYEN THIEN NHON DIANA
METAL IND RES & DEV CT
DAIKIN FLUOROCHEMICALS CHINA CO LTD
HOWARD DANE
LEPPIN HANS
PEUCKERT KLAUS
KIRCHNER RUDI
MITSUMI ELECTRIC CO LTD
REXROTH INDRAMAT GMBH
DYNAVAX TECH CORP
PROGRESSIVE TOOL & IND CO
MUROTA WATARU
PITCHER CHARLES SPENCER
REVIVE ENVIRONMENTAL TECHNOLOGY LLC
DROSTE RENATE
VRACAR VIKTOR
THE REGENTS OF UNIV OF CALIFORNIA
GEISER TOBIAS
YANG BONG HYUN
MITSUBISHI HITACHI POWER SYSTEMS ENV SOLUTIONS LTD
UNIV OHIO STATE
JEONG DONG HUN
SANKEI YAKUHIN KK
TAIWAN SEMICONDUCTOR MFG
YEH CHIH-KANG
HILL CLYDE D
YANG CHENG-CHUAN


2025-01-16 14:18:35 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:18:35 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:18:35 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:18:37 - snowflake.connector.cursor - INFO - Number of results in first chunk: 93
2025-01-16 14:18:37 - snowflake.connector.connection - INFO - closed
2025-01-16 14:18:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:18:37 - root - INFO - SQL:
-- 6. Retrieve country codes to identify where applications are filed.
SELECT DISTINCT t."country_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
LIMIT 1000;
Results:
country_code
DO
BA
RS
WO
CR
PL
EP
ZA
MY
CS
LV
HR
AU
CU
RO
KR
PT
NZ
CL
NO
HU
JP
DZ
NL
LT
UA
MW
IT
OA
CY
CZ
HN
SV
CH
TR
BG
AT
YU
ZM
MD
ZW
MA
GB
SG
EG
PA
CO
SI
AR
KE
FI
DK
CA
SK
IS
NI
US
PH
DE
DD
MX
EE
GE
HK
TN
GT
BR
ID
LU
GR
RU
JO
IN
EC
SA
MN
SU
FR
PE
KZ
IL
TW
MT
BE
SE
AP
SM
ME
EA
ES
IE
CN
MC

2025-01-16 14:18:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:18:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:18:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:18:38 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 14:18:38 - snowflake.connector.connection - INFO - closed
2025-01-16 14:18:38 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:18:39 - root - INFO - SQL:
-- 7. Extract publication years from "publication_date" for trend analysis.
SELECT TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year"
FROM PATENTS.PATENTS.PUBLICATIONS t
WHERE TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
LIMIT 1000;
Results:
Too long, hard cut:
publication_year
1884
1937
1941
1943
1975
1956
1960
1870
1914
1871
1906
1890
1954
1915
1954
1878
1907
1953
1941
1975
1881
1954
1884
1913
1914
1908
1952
1962
1960
1959
1950
1914
1948
1952
1943
1909
1912
1935
1883
1937
1951
1961
1939
1913
1958
1940
1952
1959
1956
1956
1883
1912
1936
1941
1913
1960
1960
1911
1915
1946
1961
1882
1955
1953
1953
1914
1915
1914
1960
1871
1938
1940
1915
1860
1958
1953
1914
1975
1907
1882
1962
1957
1962
1961
1941
1966
1943
1906
1945
1914
1878
1941
1936
1889
1908
1961
1954
1878
1940
1956
1958
1958
1960
1956
2010
1950
1889
1968
1913
1914
1953
1958
1914
1914
1975
1951
1952
1958
1952
1939
1947
1921
1895
1969
1936
1939
2020
1959
1964
1914
1948
1897
1915
2015
1968
1939
1915
1890
1913
1948
1951
1936
1955
1973
1866
1945
1968
1966
1967
1957
1958
1962
1940
1948
1916
1923
1968
1969
1951
1908
1974
1970
1909
1967
1967
1967
1959
1958
1958
1916
2017
1964
1936
1942
1950
1908
1951
1944
1928
1959
1972
1975
1973
1958
1963
1967
1963
1943
1972
1881
1918
1966
1970
1971
1973
1939
1940
1950
1940
1919
1966
2006
1936
1889
1896
2021
1939
1952
1952
1939
1941
1964
1886
1970
1970
1929
1941
1951
1998
1959
1959
1880
1939
1966
1951
1960
1973
1959
1961
1944
1884
1885
1941
1942
1950
1916
1960
1948
1967
1911
1922
1963
1964
2006
2006
2006
2006
2006
2005
2005
2005
2005
2006
2005
2006
2005
2006
2006
2005
2005
2005
2006
2005
2006
2006
2005
2006
2005
2005
2006
2005
2005
2006
2006
2006
2006
2005
2005
2005
2006
2005
2005
2005
2006
2005
2006
2005
2006
2006
2006
2005
2006
2006
2006
2007
2006
2005
2007
2006
2005
2007
2006
2006
2007
2007
2006
2007
2006
2006
2006
2007
2006
2006
2006
2006
2007
2006
2006
2007
2006
2006
2006
2006
2006
2006
2006
2006
2007
2007
2007
2006
2006
2006
2006
2006
2006
2007
2007
2006
2006
2006
2006
2007
2006
2006
2006
2007
2006
2006
2006
2007
2007
2006
2006
2006
2006
2006
2006
2007
2007
2008
2006
2007
2007
2008
2007
2008
2008
2006
2007
2007
2006
2007
2006
2007
2007
2007
2006
2008
2008
2007
2008
2007
2009
2008
2008
2007
2008
2007
2008
2007
2007
2008
2008
2007
2008
2007
2008
2008
2007
2007
2008
2007
2008
2007
2008
2007
2007
2007
2008
2008
2007
2007
2007
2008
2007
2009
2007
2008
2008
2008
2007
2007
2007
2007
2008
2007
2007
2007
2008
2007
2008
2007
2008
2007
2008
2008
2008
2009
2008
2009
2008
2007
2007
2008
2007
2007
2007
2007
2008
2008
2007
2008
2007
2008
2008
2009
2007
2008
2008
2007
2007
2009
2009
2008
2008
2008
2008
2008
2008
2008
2009
2009
2008
2008
2008
2008
2009
2009
2009
2008
2008
2008
2010
2008
2008
2008
2008
2008
2009
2008
2008
2008
2008
2008
2010
2008
2008
2008
2008
2008
2009
2008
2008
2009
2009
2008
2009
2009
2010
2009
2010
2011
2010
2011
2011
2011
2012
2012
2012
2012
2012
2012
2012
2012
2012
2012
2012
2012
2012
2013
2013
2013
2013
2013
2013
2014
2014
2014
2015
2015
2015
2015
2015
2016
2015
2014
2014
2015
2016
2015
2015
2015
2016
2015
2016
2016
2015
2016
2015
2016
2016
2017
2016
2017
2017
2017
2017
2018
2018
2017
2016
2017
2018
2018
2017
2017
2018
2019
2019
2017
2018
2019
2019
2019
2019
2020
2020
2019
2019
2020
2020
2019
2019
2019
2019
2020
2020
2020
2020
2020
2021
2020
2021
2021
2020
2021
2022
2021
2022
2022
2023
2022
2022
2023
2023
2022
2022
2022
2022
2023
2023
2023
2023
2022
2024
2024
2024
2023
2023
2024
2018
2018
2018
2019
2022
2022
2023
2023
2011
2011
2012
2011
2011
2011
2011
2012
2011
2012
2012
2014
2014
2014
2015
2015
2015
2015
2015
2015
2015
2015
2015
2015
2014
2016
2015
2015
2016
2016
2016
2015
2016
2015
2016
2016
2016
2016
2016
2016
2016
2016
2016
2016
2016
2016
2016
2016
2015
2015
2017
2015
2015
2016
2015
2016
2015
2015
2015
2016
2016
2015
2015
2016
2015
2015
2016
2015
2015
2015
2015
2015
2015
2015
2016
2016
2015
2015
2016
2017
2016
2016
2017
2017
2017
2016
2016
2016
2016
2016
2016
2016
2016
2017
2016
2017
2016
2016
2017
2017
2017
2016
2017
2017
2017
2017
2017
2018
2017
2018
2018
2017
2017
2016
2016
2018
2018
2017
2017
2017
2017
2017
2017
2018
2017
2017
2017
2017
2017
2017
2017
2018
2017
2017
2018
2018
2018
2018
2018
2018
2018
2017
2018
2018
2017
2018
2017
2018
2017
2018
2019
2018
2018
2018
2018
2018
2019
2019
2018
2019
2018
2018
2018
2018
2018
2019
2018
2018
2018
2018
2019
2018
2018
2018
2018
2019
2018
2018
2019
2018
2018
2018
2019
2018
2019
2018
2018
2018
2020
2018
2019
2018
2019
2018
2018
2019
2019
2018
2018
2018
2019
2018
2019
2018
2018
2018
2018
2019
2018
2018
2018
2019
2018
2018
2019
2018
2020
2020
2019
2020
2019
2019
2019
2019
2020
2021
2020
2019
2019
2018
2019
2020
2020
2018
2019
2020
2019
2019
2019
2019
2020
2019
2019
2019
2019
2020
2019
2020
2019
2019
2020
2019
2019
2019
2019
2020
2020
2019
2019
2020
2019
2019
2019
2020
2019
2019
2019
2019
2019
2019
2019
2019
2020
2019
2019
2019
2019
2019
2019
2019
2019
2019
2020
2019
2019
2020
2019
2019
2019
2020
2019
2019
2019
2019
2020
2019
2019
2019
2019
2020
2019
2020
2020
2019
2019
2019
2019
2020
2019
2020
2019
2019
2020
2021
2020
2019
2020
2020
2020
2020
2019
2021
2019
2020
2021
2020
2019
2019
2020
2021
2020
2020
2020
2020
2020
2021
2021
2021
2021
2020
2020
2020
2021
2020
2021
2020
2020
2020
2020
2021
2020
2020
2020
2021
2020
2020
2020
202

2025-01-16 14:18:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:18:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:18:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:18:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-16 14:18:40 - snowflake.connector.connection - INFO - closed
2025-01-16 14:18:40 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:19:20 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:19:20 - root - INFO - ```sql
SELECT 
    f_assignee.value:"name"::STRING AS "assignee_name",
    COUNT(*) AS "total_applications"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") f_cpc,
     LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
WHERE f_cpc.value:"code"::STRING LIKE 'A01B%'
GROUP BY "assignee_name"
ORDER BY "total_applications" DESC
LIMIT 3;
```
2025-01-16 14:19:20 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:19:20 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:19:20 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:19:22 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-16 14:19:22 - snowflake.connector.connection - INFO - closed
2025-01-16 14:19:22 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:19:22 - root - INFO - SQL:
SELECT 
    f_assignee.value:"name"::STRING AS "assignee_name",
    COUNT(*) AS "total_applications"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") f_cpc,
     LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
WHERE f_cpc.value:"code"::STRING LIKE 'A01B%'
GROUP BY "assignee_name"
ORDER BY "total_applications" DESC
LIMIT 3;
Results:
assignee_name,total_applications
DEERE & CO,97
CNH IND AMERICA LLC,47
AGSOILWORKS TECH COMPANY LLC,29

2025-01-16 14:19:22 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:19:22 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:19:22 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:19:24 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-16 14:19:24 - snowflake.connector.connection - INFO - closed
2025-01-16 14:19:24 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:20:24 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:20:24 - root - INFO - ```sql
SELECT 
    t.assignee_name,
    t.total_applications,
    m.year_with_most_applications,
    m.applications_in_that_year,
    c.country_code_with_most_applications_during_that_year
FROM (
    SELECT
        f_assignee.value:"name"::STRING AS assignee_name,
        COUNT(*) AS total_applications
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."cpc") f_cpc,
         LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE f_cpc.value:"code"::STRING LIKE 'A01B%'
    GROUP BY assignee_name
) t
JOIN (
    SELECT
        assignee_name,
        publication_year AS year_with_most_applications,
        applications_in_that_year
    FROM (
        SELECT
            f_assignee.value:"name"::STRING AS assignee_name,
            TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS publication_year,
            COUNT(*) AS applications_in_that_year,
            ROW_NUMBER() OVER (PARTITION BY f_assignee.value:"name"::STRING ORDER BY COUNT(*) DESC) AS rn
        FROM PATENTS.PATENTS.PUBLICATIONS t,
             LATERAL FLATTEN(input => t."cpc") f_cpc,
             LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
        WHERE f_cpc.value:"code"::STRING LIKE 'A01B%'
        GROUP BY f_assignee.value:"name"::STRING, publication_year
    ) sub
    WHERE rn = 1
) m ON t.assignee_name = m.assignee_name
JOIN (
    SELECT
        assignee_name,
        publication_year,
        country_code AS country_code_with_most_applications_during_that_year
    FROM (
        SELECT
            f_assignee.value:"name"::STRING AS assignee_name,
            TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS publication_year,
            t."country_code",
            COUNT(*) AS applications_in_country,
            ROW_NUMBER() OVER (PARTITION BY f_assignee.value:"name"::STRING, publication_year ORDER BY COUNT(*) DESC) AS rn
        FROM PATENTS.PATENTS.PUBLICATIONS t,
             LATERAL FLATTEN(input => t."cpc") f_cpc,
             LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
        WHERE f_cpc.value:"code"::STRING LIKE 'A01B%'
        GROUP BY f_assignee.value:"name"::STRING, publication_year, t."country_code"
    ) sub2
    WHERE rn = 1
) c ON m.assignee_name = c.assignee_name AND m.year_with_most_applications = c.publication_year
ORDER BY t.total_applications DESC
LIMIT 3;
```
2025-01-16 14:20:24 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:20:24 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:20:24 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:20:25 - snowflake.connector.connection - INFO - closed
2025-01-16 14:20:25 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:21:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:21:39 - root - INFO - ```sql
-- Corrected SQL query to retrieve the top 3 assignees in class 'A01B3' based on total applications

SELECT 
    t.assignee_name,
    COUNT(*) AS total_applications,
    y.year_with_most_applications,
    y.applications_in_that_year,
    c.country_code_with_most_applications_during_that_year
FROM (
    SELECT
        f_assignee.value:"name"::STRING AS assignee_name,
        t."publication_date",
        t."country_code"
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee,
         LATERAL FLATTEN(input => t."cpc") f_cpc
    WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
          AND f_assignee.value:"name"::STRING IS NOT NULL
          AND t."publication_date" IS NOT NULL
) t
JOIN (
    SELECT
        assignee_name,
        publication_year AS year_with_most_applications,
        MAX(applications_in_that_year) AS applications_in_that_year
    FROM (
        SELECT
            assignee_name,
            TO_CHAR(TO_DATE(publication_date::VARCHAR, 'YYYYMMDD'), 'YYYY') AS publication_year,
            COUNT(*) AS applications_in_that_year
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS assignee_name,
                t."publication_date"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee,
                 LATERAL FLATTEN(input => t."cpc") f_cpc
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND t."publication_date" IS NOT NULL
        ) sub
        GROUP BY assignee_name, publication_year
    ) agg
    GROUP BY assignee_name, publication_year
    ORDER BY applications_in_that_year DESC
    LIMIT 1
) y ON t.assignee_name = y.assignee_name
JOIN (
    SELECT
        assignee_name,
        country_code_with_most_applications_during_that_year
    FROM (
        SELECT
            assignee_name,
            country_code AS country_code_with_most_applications_during_that_year,
            COUNT(*) AS applications_in_country,
            ROW_NUMBER() OVER (PARTITION BY assignee_name ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS assignee_name,
                t."country_code"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee,
                 LATERAL FLATTEN(input => t."cpc") f_cpc
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND t."country_code" IS NOT NULL
        ) sub_country
        GROUP BY assignee_name, country_code
    ) country_rank
    WHERE rn = 1
) c ON t.assignee_name = c.assignee_name
GROUP BY t.assignee_name, y.year_with_most_applications, y.applications_in_that_year, c.country_code_with_most_applications_during_that_year
ORDER BY total_applications DESC
LIMIT 3;
```

**Explanation:**

We corrected the SQL query to address the error regarding the invalid identifier `'COUNTRY_CODE'`. The issue was that in some subqueries, the `"country_code"` column was not properly referenced or included.

In this query:

- We select the necessary fields from the `PUBLICATIONS` table, ensuring that `"country_code"` is available in the scope where it's used.

- **Main Table (`t`)**:
  - Contains `assignee_name`, `publication_date`, and `country_code`.
  - Filters patents where the CPC code starts with `'A01B3'`.

- **Year with Most Applications (`y`)**:
  - Calculates the year in which each assignee filed the most applications.
  - Uses `GROUP BY` on `assignee_name` and `publication_year`.

- **Country Code with Most Applications During That Year (`c`)**:
  - Finds the country code where each assignee filed the most applications.
  - Uses `ROW_NUMBER()` to rank countries and selects the top one.

- We join these subqueries on `assignee_name` to get the combined information.

- Finally, we group and order the results to get the top 3 assignees based on the total number of applications.

This query should now run without errors and provide the desired output.
2025-01-16 14:21:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:21:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:21:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:21:41 - snowflake.connector.connection - INFO - closed
2025-01-16 14:21:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:23:19 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:23:19 - root - INFO - I understand that you're encountering an `invalid identifier 'PUBLICATION_DATE'` error in your SQL query. This error often occurs due to case sensitivity in column names or misreferenced identifiers. In Snowflake, when column names are enclosed in double quotes, they are case-sensitive and must match exactly as defined in the table schema.

**Issue Explanation:**

- The column `"publication_date"` is defined in the `PUBLICATIONS` table with lowercase letters and double quotes.
- In your query, there might be instances where `"publication_date"` is referenced without double quotes or with incorrect casing (e.g., `publication_date` or `PUBLICATION_DATE`), leading to the error.

**Corrected SQL Query:**

Below is the corrected SQL query that retrieves the top 3 assignees in class `'A01B3'` based on total applications, along with the additional requested information. I've ensured that all column names are properly quoted and cased.

```sql
SELECT 
    t.assignee_name,
    COUNT(*) AS total_applications,
    y.year_with_most_applications,
    y.applications_in_that_year,
    c.country_code_with_most_applications_during_that_year
FROM (
    SELECT
        f_assignee.value:"name"::STRING AS assignee_name,
        t."publication_date",
        t."country_code"
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."cpc") f_cpc,
         LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
          AND f_assignee.value:"name"::STRING IS NOT NULL
          AND t."publication_date" IS NOT NULL
) t
JOIN (
    SELECT
        assignee_name,
        publication_year AS year_with_most_applications,
        applications_in_that_year
    FROM (
        SELECT
            assignee_name,
            TO_CHAR(TO_DATE("publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS publication_year,
            COUNT(*) AS applications_in_that_year,
            ROW_NUMBER() OVER (PARTITION BY assignee_name ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS assignee_name,
                t."publication_date"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."cpc") f_cpc,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND t."publication_date" IS NOT NULL
        ) sub
        GROUP BY assignee_name, "publication_year"
    ) agg
    WHERE rn = 1
) y ON t.assignee_name = y.assignee_name
JOIN (
    SELECT
        assignee_name,
        country_code_with_most_applications_during_that_year
    FROM (
        SELECT
            assignee_name,
            "country_code" AS country_code_with_most_applications_during_that_year,
            COUNT(*) AS applications_in_country,
            ROW_NUMBER() OVER (PARTITION BY assignee_name, "publication_year" ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS assignee_name,
                TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year",
                t."country_code"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."cpc") f_cpc,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND t."publication_date" IS NOT NULL
                  AND t."country_code" IS NOT NULL
        ) sub_country
        GROUP BY assignee_name, "publication_year", "country_code"
    ) country_rank
    WHERE rn = 1
) c ON t.assignee_name = c.assignee_name
   AND y.year_with_most_applications = c."publication_year"
GROUP BY t.assignee_name, y.year_with_most_applications, y.applications_in_that_year, c.country_code_with_most_applications_during_that_year
ORDER BY total_applications DESC
LIMIT 3;
```

**Explanation:**

- **Column Name Quoting:**
  - All column names, such as `"publication_date"` and `"country_code"`, are enclosed in double quotes with exact casing to match the table schema.
  - This avoids case sensitivity issues and ensures that Snowflake recognizes the column identifiers correctly.

- **Subquery Corrections:**
  - In the `year_with_most_applications` subquery, I ensured that `"publication_date"` is correctly referenced and that the alias `"publication_year"` is used consistently.
  - In the `country_code_with_most_applications_during_that_year` subquery, I've added `"publication_year"` to the `PARTITION BY` clause to ensure we're analyzing the correct year.

- **JOIN Conditions:**
  - The joins now correctly reference the `assignee_name` and `"publication_year"` to align the data across subqueries.

- **Row Numbering:**
  - I've used `ROW_NUMBER()` to rank the years and countries, selecting the ones with the most applications for each assignee.

- **Data Filtering:**
  - The query filters patents classified under `'A01B3'` and ensures that relevant fields are not null.

**Final Output Format:**

When you execute this query, it will provide the following information:

- **assignee_name**: Name of the assignee.
- **total_applications**: Total number of applications by the assignee in class `'A01B3'`.
- **year_with_most_applications**: The year in which the assignee filed the most applications.
- **applications_in_that_year**: Number of applications filed by the assignee in that year.
- **country_code_with_most_applications_during_that_year**: The country code where the assignee filed the most applications during that year.

**Note:**

- Ensure that your database connection has access to the `PATENTS.PATENTS.PUBLICATIONS` table and the necessary permissions to execute the query.
- Double-check the column names in your actual database schema to confirm they match exactly, including case sensitivity.

**Additional Tips:**

- **Case Sensitivity**: Always use the exact column names as defined in your schema, including the correct case and enclosing them in double quotes if they are case-sensitive.
- **Debugging**: If you encounter similar errors, check for typos or mismatches in column names and ensure all referenced columns are included in your SELECT statements or subqueries.

I hope this resolves the error and helps you retrieve the desired data.
2025-01-16 14:23:19 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:23:19 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:23:19 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:23:20 - snowflake.connector.connection - INFO - closed
2025-01-16 14:23:21 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:23:21 - root - INFO - SQL:
SELECT 
    t.assignee_name,
    COUNT(*) AS total_applications,
    y.year_with_most_applications,
    y.applications_in_that_year,
    c.country_code_with_most_applications_during_that_year
FROM (
    SELECT
        f_assignee.value:"name"::STRING AS assignee_name,
        t."publication_date",
        t."country_code"
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."cpc") f_cpc,
         LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
          AND f_assignee.value:"name"::STRING IS NOT NULL
          AND t."publication_date" IS NOT NULL
) t
JOIN (
    SELECT
        assignee_name,
        publication_year AS year_with_most_applications,
        applications_in_that_year
    FROM (
        SELECT
            assignee_name,
            TO_CHAR(TO_DATE("publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS publication_year,
            COUNT(*) AS applications_in_that_year,
            ROW_NUMBER() OVER (PARTITION BY assignee_name ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS assignee_name,
                t."publication_date"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."cpc") f_cpc,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND t."publication_date" IS NOT NULL
        ) sub
        GROUP BY assignee_name, "publication_year"
    ) agg
    WHERE rn = 1
) y ON t.assignee_name = y.assignee_name
JOIN (
    SELECT
        assignee_name,
        country_code_with_most_applications_during_that_year
    FROM (
        SELECT
            assignee_name,
            "country_code" AS country_code_with_most_applications_during_that_year,
            COUNT(*) AS applications_in_country,
            ROW_NUMBER() OVER (PARTITION BY assignee_name, "publication_year" ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS assignee_name,
                TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year",
                t."country_code"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."cpc") f_cpc,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND t."publication_date" IS NOT NULL
                  AND t."country_code" IS NOT NULL
        ) sub_country
        GROUP BY assignee_name, "publication_year", "country_code"
    ) country_rank
    WHERE rn = 1
) c ON t.assignee_name = c.assignee_name
   AND y.year_with_most_applications = c."publication_year"
GROUP BY t.assignee_name, y.year_with_most_applications, y.applications_in_that_year, c.country_code_with_most_applications_during_that_year
ORDER BY total_applications DESC
LIMIT 3;
Results:
000904 (42000): 01b9c05f-0004-7b48-0001-11c300d943f6: SQL compilation error: error line 41 at position 32
invalid identifier '"publication_year"'
2025-01-16 14:23:21 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:23:21 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:23:21 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:23:22 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-16 14:23:22 - snowflake.connector.connection - INFO - closed
2025-01-16 14:23:22 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:24:22 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:24:22 - root - INFO - ```sql
WITH top_assignees AS (
    SELECT
        f_assignee.value:"name"::STRING AS assignee_name,
        COUNT(*) AS total_applications
    FROM
        PATENTS.PATENTS.PUBLICATIONS t
        , LATERAL FLATTEN(input => t."cpc") f_cpc
        , LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE
        f_cpc.value:"code"::STRING LIKE 'A01B3%'
    GROUP BY
        assignee_name
    ORDER BY
        total_applications DESC
    LIMIT 3
),
year_applications AS (
    SELECT
        f_assignee.value:"name"::STRING AS assignee_name,
        TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS publication_year,
        COUNT(*) AS applications_in_year
    FROM
        PATENTS.PATENTS.PUBLICATIONS t
        , LATERAL FLATTEN(input => t."cpc") f_cpc
        , LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE
        f_cpc.value:"code"::STRING LIKE 'A01B3%'
        AND f_assignee.value:"name"::STRING IN (SELECT assignee_name FROM top_assignees)
        AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    GROUP BY
        assignee_name, publication_year
),
max_years AS (
    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY assignee_name ORDER BY applications_in_year DESC) AS rn
    FROM
        year_applications
)
SELECT
    ta.assignee_name,
    ta.total_applications,
    my.publication_year AS year_with_most_applications,
    my.applications_in_year AS applications_in_that_year
FROM
    top_assignees ta
JOIN
    max_years my ON ta.assignee_name = my.assignee_name
WHERE
    my.rn = 1
ORDER BY
    ta.total_applications DESC;
```
2025-01-16 14:24:22 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:24:22 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:24:22 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:24:23 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-16 14:24:23 - snowflake.connector.connection - INFO - closed
2025-01-16 14:24:23 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:24:24 - root - INFO - SQL:
WITH top_assignees AS (
    SELECT
        f_assignee.value:"name"::STRING AS assignee_name,
        COUNT(*) AS total_applications
    FROM
        PATENTS.PATENTS.PUBLICATIONS t
        , LATERAL FLATTEN(input => t."cpc") f_cpc
        , LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE
        f_cpc.value:"code"::STRING LIKE 'A01B3%'
    GROUP BY
        assignee_name
    ORDER BY
        total_applications DESC
    LIMIT 3
),
year_applications AS (
    SELECT
        f_assignee.value:"name"::STRING AS assignee_name,
        TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS publication_year,
        COUNT(*) AS applications_in_year
    FROM
        PATENTS.PATENTS.PUBLICATIONS t
        , LATERAL FLATTEN(input => t."cpc") f_cpc
        , LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE
        f_cpc.value:"code"::STRING LIKE 'A01B3%'
        AND f_assignee.value:"name"::STRING IN (SELECT assignee_name FROM top_assignees)
        AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    GROUP BY
        assignee_name, publication_year
),
max_years AS (
    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY assignee_name ORDER BY applications_in_year DESC) AS rn
    FROM
        year_applications
)
SELECT
    ta.assignee_name,
    ta.total_applications,
    my.publication_year AS year_with_most_applications,
    my.applications_in_year AS applications_in_that_year
FROM
    top_assignees ta
JOIN
    max_years my ON ta.assignee_name = my.assignee_name
WHERE
    my.rn = 1
ORDER BY
    ta.total_applications DESC;
Results:
ASSIGNEE_NAME,TOTAL_APPLICATIONS,YEAR_WITH_MOST_APPLICATIONS,APPLICATIONS_IN_THAT_YEAR
LELY NV C VAN DER,13,1987,6
TEXAS INDUSTRIES INC,6,1982,6
DEERE & CO,6,2007,2

2025-01-16 14:24:24 - root - INFO - itercount: 0
2025-01-16 14:24:24 - root - INFO - Database Name: PATENTS
Schema Name: PATENTS
DDL describes table information.
,0
table_name,DISCLOSURES_13
description,
DDL,"create or replace TABLE DISCLOSURES_13 (
	""family_id"" VARCHAR(16777216),
	""record_id"" VARCHAR(16777216),
	""disclosure_event"" VARCHAR(16777216),
	""sso"" VARCHAR(16777216),
	""patent_owner_harmonized"" VARCHAR(16777216),
	""patent_owner_unharmonized"" VARCHAR(16777216),
	""date"" NUMBER(38,0),
	""standard"" VARCHAR(16777216),
	""committee_project"" VARCHAR(16777216),
	""tc_name"" VARCHAR(16777216),
	""sc_name"" VARCHAR(16777216),
	""wg_name"" VARCHAR(16777216),
	""licensing_commitment"" VARCHAR(16777216),
	""copyright"" VARCHAR(16777216),
	""blanket_type"" VARCHAR(16777216),
	""blanket_scope"" VARCHAR(16777216),
	""third_party"" VARCHAR(16777216),
	""reciprocity"" VARCHAR(16777216),
	""serial_cleaned"" VARCHAR(16777216),
	""pub_cleaned"" VARCHAR(16777216)
);"

,1
table_name,PUBLICATIONS
description,
DDL,"create or replace TABLE PUBLICATIONS (
	""publication_number"" VARCHAR(16777216),
	""application_number"" VARCHAR(16777216),
	""country_code"" VARCHAR(16777216),
	""kind_code"" VARCHAR(16777216),
	""application_kind"" VARCHAR(16777216),
	""application_number_formatted"" VARCHAR(16777216),
	""pct_number"" VARCHAR(16777216),
	""family_id"" VARCHAR(16777216),
	""spif_publication_number"" VARCHAR(16777216),
	""spif_application_number"" VARCHAR(16777216),
	""title_localized"" VARIANT,
	""abstract_localized"" VARIANT,
	""claims_localized"" VARIANT,
	""claims_localized_html"" VARIANT,
	""description_localized"" VARIANT,
	""description_localized_html"" VARIANT,
	""publication_date"" NUMBER(38,0),
	""filing_date"" NUMBER(38,0),
	""grant_date"" NUMBER(38,0),
	""priority_date"" NUMBER(38,0),
	""priority_claim"" VARIANT,
	""inventor"" VARIANT,
	""inventor_harmonized"" VARIANT,
	""assignee"" VARIANT,
	""assignee_harmonized"" VARIANT,
	""examiner"" VARIANT,
	""uspc"" VARIANT,
	""ipc"" VARIANT,
	""cpc"" VARIANT,
	""fi"" VARIANT,
	""fterm"" VARIANT,
	""locarno"" VARIANT,
	""citation"" VARIANT,
	""parent"" VARIANT,
	""child"" VARIANT,
	""entity_status"" VARCHAR(16777216),
	""art_unit"" VARCHAR(16777216)
);"

,2
table_name,CPC_DEFINITION
description,
DDL,"create or replace TABLE CPC_DEFINITION (
	""applicationReferences"" VARIANT,
	""breakdownCode"" BOOLEAN,
	""childGroups"" VARIANT,
	""children"" VARIANT,
	""dateRevised"" FLOAT,
	""definition"" VARIANT,
	""glossary"" VARIANT,
	""informativeReferences"" VARIANT,
	""ipcConcordant"" VARCHAR(16777216),
	""level"" FLOAT,
	""limitingReferences"" VARIANT,
	""notAllocatable"" BOOLEAN,
	""parents"" VARIANT,
	""precedenceLimitingReferences"" VARIANT,
	""residualReferences"" VARIANT,
	""rules"" VARIANT,
	""scopeLimitingReferences"" VARIANT,
	""status"" VARCHAR(16777216),
	""symbol"" VARCHAR(16777216),
	""synonyms"" VARIANT,
	""titleFull"" VARCHAR(16777216),
	""titlePart"" VARIANT
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'PATENTS': {'PATENTS': ['CPC_DEFINITION', 'DISCLOSURES_13', 'PUBLICATIONS']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

**Table:** `PATENTS.PATENTS.PUBLICATIONS`

- **"cpc"**: Contains the CPC (Cooperative Patent Classification) codes for each patent application. *Potential usage*: Identify applications classified under `A01B3`.
- **"assignee_harmonized"**: Contains harmonized assignee information in VARIANT format. *Potential usage*: Extract assignee names for analysis.
- **"publication_date"**: The date the patent was published. *Potential usage*: Determine the year with the most applications.
- **"country_code"**: The country code where the patent application was filed. *Potential usage*: Identify the country with the most applications during the peak year.
- **"publication_number"**: Unique identifier for each patent publication. *Potential usage*: Count total applications.
- **"filing_date"**: The date the patent application was filed. *Potential usage*: Additional date reference if needed.
  
**Conditions That May Be Used:**

- Filter applications where the CPC code starts with `'A01B3'`.
- Extract and group data by assignee names.
- Convert and extract the year from the `"publication_date"` field.
- Group data by `"country_code"` to find the most frequent country.

---

**SQL Queries:**

```sql
-- 1. Explore the structure of the "cpc" field.
SELECT f.value
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") f
LIMIT 1000;
```

```sql
-- 2. Extract CPC symbols to identify classification codes.
SELECT f.value:"symbol"::STRING AS "cpc_symbol"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") f
LIMIT 1000;
```

```sql
-- 3. Get distinct CPC symbols to see available classifications.
SELECT DISTINCT f.value:"symbol"::STRING AS "cpc_symbol"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") f
LIMIT 1000;
```

```sql
-- 4. Extract assignee names from the "assignee_harmonized" field.
SELECT f.value:"name"::STRING AS "assignee_name"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee_harmonized") f
LIMIT 1000;
```

```sql
-- 5. Get distinct assignee names to understand potential top assignees.
SELECT DISTINCT f.value:"name"::STRING AS "assignee_name"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee_harmonized") f
LIMIT 1000;
```

```sql
-- 6. Retrieve country codes to identify where applications are filed.
SELECT DISTINCT t."country_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
LIMIT 1000;
```

```sql
-- 7. Extract publication years from "publication_date" for trend analysis.
SELECT TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year"
FROM PATENTS.PATENTS.PUBLICATIONS t
WHERE TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
LIMIT 1000;
```

```sql
-- 8. Identify CPC symbols starting with 'A01B3' to filter relevant patents.
SELECT DISTINCT f.value:"symbol"::STRING AS "cpc_symbol"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") f
WHERE f.value:"symbol"::STRING LIKE 'A01B3%'
LIMIT 1000;
```

```sql
-- 9. Retrieve publication numbers and assignee names for 'A01B3' patents.
SELECT t."publication_number", f.value:"name"::STRING AS "assignee_name"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee_harmonized") f,
     LATERAL FLATTEN(input => t."cpc") cpc_flat
WHERE cpc_flat.value:"symbol"::STRING LIKE 'A01B3%'
LIMIT 1000;
```

```sql
-- 10. Get the number of 'A01B3' applications per publication year.
SELECT TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year",
       COUNT(*) AS "num_applications"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") cpc_flat
WHERE cpc_flat.value:"symbol"::STRING LIKE 'A01B3%'
  AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
GROUP BY "publication_year"
ORDER BY "publication_year"
LIMIT 1000;
```

---

**Explanation:**

We identified the `PUBLICATIONS` table as the most relevant for this analysis, focusing on patents classified under CPC code `A01B3`. The queries above help explore:

- **CPC Codes**: Understanding how CPC codes are stored and how to extract them to filter patents in class `A01B3`.
- **Assignee Names**: Extracting assignee names using the `"assignee_harmonized"` field, which is crucial for identifying the top assignees.
- **Publication Dates**: Converting the `"publication_date"` field to extract the publication year, necessary for identifying peak application years.
- **Country Codes**: Retrieving country codes to determine the countries where most applications are filed.

The queries use `LATERAL FLATTEN` to handle VARIANT columns (`"cpc"` and `"assignee_harmonized"`), allowing us to access nested JSON data. We applied simple filters and limits to understand the data without directly performing the final analysis requested in the task.Query:
-- 1. Explore the structure of the "cpc" field.
SELECT f.value
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") f
LIMIT 1000;
Answer:
Too long, hard cut:
VALUE
"{
  ""code"": ""G01N2030/202"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""Y10T137/86815"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N2030/202"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N30/6047"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""F16K11/074"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G01N30/20"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""F16K11/074"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""B01D15/1821"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N30/20"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""B01D15/1821"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N30/6047"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N2030/201"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N2030/201"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""Y10T137/86815"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N30/461"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G01N30/461"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""A61K31/00"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""A61K31/00"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G02B7/16"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G02B7/16"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G02B21/248"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""Y10T74/19749"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""Y10T74/19749"",
  ""first"": false,
  ""inventive"": false,
  ""tree"": []
}"
"{
  ""code"": ""G02B21/248"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06F13/4077"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H04L5/16"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06F13/4077"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H04L5/16"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G11B7/004"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G11B7/00375"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G11B20/10"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G11B19/04"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G11B7/00375"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G11B19/04"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06V20/66"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06V10/143"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06V20/66"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06V10/143"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06V20/80"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""G06V20/80"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C03C3/095"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C03C3/091"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C09D11/03"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C03C12/00"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C03C3/091"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C03C12/00"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C03C3/095"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""C09D11/03"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H01L28/91"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H01L28/91"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H10B12/033"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H10B12/00"",
  ""first"": true,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H10B12/033"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H10B12/318"",
  ""first"": false,
  ""inventive"": true,
  ""tree"": []
}"
"{
  ""code"": ""H10B12/318"",
  
Query:
-- Corrected SQL query to extract CPC codes using "code" instead of "symbol"
SELECT DISTINCT f.value:"code"::STRING AS "cpc_code"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") f
WHERE f.value:"code"::STRING IS NOT NULL
LIMIT 1000;
Answer:
Too long, hard cut:
cpc_code
B04C2009/008
H04N21/233
H01L2924/0105
H04L67/56
G06F11/30
H04L12/4035
C09D5/1662
A61F13/05
E21B43/38
A23V2002/00
A61K8/0241
G09G5/00
C09D5/14
A61P31/08
A61F2002/304
C07D403/14
E04F15/105
B01L3/523
H10N70/8828
Y10T292/0814
C11D7/5013
H04L5/0035
H04N19/513
A63B41/02
H01L21/28035
H04N21/251
B32B27/36
B29C65/18
G06F9/542
H01L27/0688
F02D41/1441
F16H61/16
F16K17/0433
B60R16/0231
B60W2710/08
A61B2017/8838
G05B2219/50135
B60T2270/60
B01L2300/1827
C07K16/283
F01D25/285
G06F9/5038
B60W20/30
F01N2610/1486
G05B2219/24139
G06F2201/86
A61B17/105
G08G1/09623
Y02B70/3225
A61B2017/00017
C04B7/475
H01L2224/16227
H05B33/0866
H01L2224/0567
C04B2235/40
C10G2300/1059
B32B2255/04
C01P2004/61
G10H2220/005
F16C2240/48
B32B27/285
C09J2467/006
E03D3/12
G06F21/575
G02B6/3893
A61K33/04
G01B5/28
G16H20/60
A47L9/10
G06T2207/30121
G05B19/41855
G10L25/30
C09D11/10
G06F16/9577
E04D2001/3432
G01N2333/9645
G06V30/1463
G06F9/5016
A61B6/547
G06F3/1213
B65H2801/12
H04W88/12
H01L23/12
B60R16/03
A61B90/36
G11B2220/2541
H02G3/0475
B01J2219/00317
A61M60/205
A61M25/007
A61M2025/0037
F17C2209/2154
F28D7/028
H04M3/42068
H01L27/14618
G06F12/0815
B23C5/2269
C07D213/82
C07D233/70
Y02P10/134
A61H33/06
F25J2205/40
F25J2270/04
B63B1/286
A61B6/08
F16D48/02
C25D17/06
H02K5/04
H01R4/36
C08G18/4054
H03K3/66
C12N9/54
H04N5/783
Y10T428/24289
A01N25/28
C10M3/00
G10K2210/3026
C23C16/481
E06B7/14
C04B26/02
B01J27/08
C09B43/42
C23F1/18
G01N2333/904
C23C22/34
A61B2017/1205
F16B39/286
F16B19/02
G11B7/00456
H01J37/32522
G01P15/0922
F16F15/08
F16C23/04
G01D5/2497
C08K5/0066
H02M1/44
H01L21/02554
A61F13/15
H01L23/3735
H01S5/0233
B01D19/0005
A61L27/3641
B41J3/407
B60T8/1706
H01M4/0404
B08B3/022
G06V10/80
H01L29/8083
C07D401/06
B60R19/48
H04S2420/11
G11B20/10527
H01S5/04254
A47K5/14
H04N1/053
G01K7/015
G16H50/50
G07B2017/00725
B65G1/02
A61K31/706
H04N23/20
B60W2510/182
G06V20/80
G02B6/34
A61K39/464462
A63B23/03541
G05B2219/39571
G05D1/0255
H04W4/21
G01N35/00029
G06T7/90
H02J50/402
C07C2529/44
C07C2529/48
A45B25/165
B01J2219/0892
H01Q1/005
C23C16/4581
F23G2204/101
G06F12/1441
G06T2207/10028
A62B18/003
H10K71/621
D21H27/10
H01L24/10
A61B3/113
H01J2237/0203
G06F16/24545
H01S3/1003
A61G2210/50
C03B2201/12
H10K50/15
G09G2360/145
C12N15/1055
B81C1/00293
G01V1/364
H10N30/80
H02P8/38
C07C45/58
C11D3/10
G09G3/2088
B01J29/783
B60T8/323
C12C5/02
G01N2021/6482
D01G27/04
G06Q50/12
B21D28/28
Y10T403/61
A01N43/82
B29C55/00
B01D2239/0618
F28D1/0233
G06F16/40
C08G18/1816
H05K3/281
H05K2203/0113
G12B5/00
F02B41/00
A63B53/02
A61B2018/00333
C07D239/46
A61B2017/3413
A61K31/194
B41M3/10
D21F3/0209
B29C48/405
A24F40/485
B23C5/10
C07D211/46
E03F2003/065
B05B12/082
A61B2017/2946
F16G13/06
C21D9/0087
C07D491/20
A61M25/0075
F24T10/30
B60R16/0239
G08B13/19645
H03F1/3247
G09B19/0092
G01N27/04
C08G18/7664
F16C33/34
H01R41/00
G10K2210/1282
G01M11/005
H02P2207/01
G01N21/94
H02K1/00
H01L21/02205
H04R2227/005
H02M7/487
Y10T156/13
H10N30/8542
H04M1/0274
G06T7/579
H04B1/3883
F25C1/25
A61B5/150099
C08J2359/00
G06F3/0346
C21D8/065
H01L51/5253
F02F1/242
A61B5/1126
A61F2/44
H04R2225/43
C12M27/16
G01R33/1269
C08G81/024
E04B1/24
F22B37/78
F25J3/067
Y10T137/7781
B65D5/76
F02D31/008
B42F17/00
A61H2003/043
F15B2211/7052
B01D29/213
F16B25/0057
F02M69/50
C07C37/055
B61L7/088
B60T13/245
F01N3/26
H04N21/6583
B60B25/08
A47L1/09
Y10S264/72
G02B2006/12054
D10B2501/06
C10M2203/065
H04M3/42221
F16H1/12
A61B2017/0432
A61M2205/18
B23K35/40
G01S7/521
H04W28/22
H04W4/16
A61K36/288
C07K14/405
A61M60/414
G01D3/02
A61B5/04014
B22F3/105
H04L41/08
H04L9/3213
F42B3/10
G01R31/2855
G01R31/2851
H04L29/08099
F16K31/046
H05B33/04
B64D11/0015
G10L15/20
A61P23/02
G01R31/2891
A47G23/06
B65B9/04
H04M15/785
B60K2370/193
G06F1/185
B29C2063/027
C04B2237/348
B60W50/0205
H04L12/1403
A47B57/586
H01L29/42372
A46B7/08
B60T8/17
C05D7/00
G01N2291/0256
H01Q13/10
H03L7/0814
F02M61/18
A01F2015/073
G06V40/1371
B01F35/2209
B29B9/16
H04L12/40045
H01M10/6568
C04B2237/70
G06T7/194
G06F3/1225
H01L27/016
G06F2113/14
H01L21/7681
G03B17/02
H01F41/041
H05B45/3725
H04Q11/04
F21Y2107/30
G06F21/629
C04B2235/422
Y10S210/08
G02B5/128
F24F1/0035
C07C67/327
Y10S414/126
Y10T137/8122
A41C3/0007
B21B45/0242
C10N2050/08
B01D35/02
G02B23/16
G07F15/003
B65D7/24
C10B5/02
A61K39/46432
B65D2543/0025
A41F5/00
Y10T24/3918
F16J15/3456
C07C317/22
F02C9/26
F24F13/15
D06M15/00
H01L27/11587
A41D19/04
G06Q20/201
A41B11/00
A01G25/023
Y10T29/4921
B65B57/10
H04B7/12
G02B27/0994
G02B26/008
F05D2260/821
B01J23/883
B22F2301/35
F16D2065/785
G06F9/22
C01G53/44
G10L21/04
G11C11/161
B42D15/08
H04N5/62
E05B47/00
A47F10/02
B23Q1/28
C11B1/12
C10M2221/00
G03B27/588
C10M2227/02
H01F29/02
C02F2303/20
B01J2219/3306
A01K59/04
B65D47/2018
D05B15/04
F02B2075/1824
C10K1/121
B02C13/284
B01J2/00
G03C7/383
Y10T137/87893
B29C49/04102
H01L21/12
C07C233/12
F21S41/24
H01J2237/04922
H01L45/145
A61B2018/20361
B60Q1/507
H04N19/98
H04R7/045
G06T7/155
C08L25/08
G06T2207/20221
C08G77/442
G06F9/3806
F16H7/1281
F16C2226/74
B64F5/40
H01L2224/24051
B64D2027/026
G02B5/188
H04L1/1657
C10L5/44
C08B5/00
F24D5/00
A61B5/022
F
Query:
SELECT
    t."assignee_name",
    t."total_applications",
    m."year_with_most_applications",
    m."applications_in_that_year",
    c."country_code_with_most_applications_during_that_year"
FROM (
    SELECT
        "assignee_name",
        COUNT(*) AS "total_applications"
    FROM (
        SELECT
            f_assignee.value:"name"::STRING AS "assignee_name",
            TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year",
            t."country_code"
        FROM PATENTS.PATENTS.PUBLICATIONS t,
             LATERAL FLATTEN(input => t."cpc") f_cpc,
             LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
        WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
              AND f_assignee.value:"name"::STRING IS NOT NULL
              AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    ) base_data
    GROUP BY "assignee_name"
) t
JOIN (
    SELECT
        "assignee_name",
        "publication_year" AS "year_with_most_applications",
        "applications_in_that_year"
    FROM (
        SELECT
            "assignee_name",
            "publication_year",
            COUNT(*) AS "applications_in_that_year",
            ROW_NUMBER() OVER (PARTITION BY "assignee_name" ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS "assignee_name",
                TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."cpc") f_cpc,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
        ) sub_base
        GROUP BY "assignee_name", "publication_year"
    ) sub
    WHERE rn = 1
) m ON t."assignee_name" = m."assignee_name"
JOIN (
    SELECT
        "assignee_name",
        "publication_year",
        "country_code" AS "country_code_with_most_applications_during_that_year"
    FROM (
        SELECT
            "assignee_name",
            "publication_year",
            "country_code",
            COUNT(*) AS "applications_in_country",
            ROW_NUMBER() OVER (PARTITION BY "assignee_name", "publication_year" ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS "assignee_name",
                TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year",
                t."country_code"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."cpc") f_cpc,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
        ) sub_sub_base
        GROUP BY "assignee_name", "publication_year", "country_code"
    ) sub2
    WHERE rn = 1
) c ON m."assignee_name" = c."assignee_name" AND m."year_with_most_applications" = c."publication_year"
ORDER BY t."total_applications" DESC
LIMIT 3;
Answer:
assignee_name,total_applications,year_with_most_applications,applications_in_that_year,country_code_with_most_applications_during_that_year
LELY NV C VAN DER,13,1987,6,IT
TEXAS INDUSTRIES INC,6,1982,6,FR
DEERE & CO,6,2020,2,EP
Query:
-- 4. Extract assignee names from the "assignee_harmonized" field.
SELECT f.value:"name"::STRING AS "assignee_name"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee_harmonized") f
LIMIT 1000;
Answer:
Too long, hard cut:
assignee_name
STEVEN SCHON
SHACHIHATA INC
ONKIMMUNE LTD
ADVANCED COMPUTER AND COMMUNICATIONS L L C
UNITED TECHNOLOGIES CORP
SCHILLER GROUNDS CARE INC
JANSSEN PHARMACEUTICA NV
HAGGAN WILLIE
LENOVO BEIJING LTD
JAHWA ELECTRONICS CO LTD
TOSHIBA KK
SERVUTAS VITALI
XEROX CORP
ADVANCED RISC MACH LTD
UNIV MICHIGAN REGENTS
IBM
SUPERC TOUCH CORP
PETRUKHIN KONSTANTIN
CIOFFI CHRISTOPHER
JOHNSON GRAHAM
DOBRI NICOLETA
FREEMAN EMILY
CHEN PING
CONLON MICHAEL
ZHU LEI
UNIV COLUMBIA
TOSHIBA TEC KK
SK HYNIX INC
COMMVAULT SYSTEMS INC
BARD INC C R
BARD INC C R
OLYMPUS CORP
SONY CORP
BRIDGESTONE CORP
CP CASES LTD
SUMITOMO RUBBER IND
TORAY INDUSTRIES
CAREBAY EUROPE LTD
NTN TOYO BEARING CO LTD
HARMAN INT IND
NIPPON STEEL & SUMITOMO METAL CORP
TUNGALOY CORP
KEWPIE CORP
NEC EUROPE LTD
HOU HAO HSUN
UNIV CHICAGO
KARIMZADEH RAMIN
NXP USA INC
FRACTAL ANTENNA SYSTEMS INC
ADVANCED RISC MACH LTD
INCYTE CORP
RED HAT INC
SEAGATE TECHNOLOGY LLC
GUARDIAN INDUSTRIES
DAEGU GYEONGBUK INST SCIENCE & TECH
SERVANT'S HEART OUTFITTERS L L C
PACIFIC BIOSCIENCES CALIFORNIA INC
MICROSOFT TECHNOLOGY LICENSING LLC
FITBIT INC
APPLE INC
PROFESSIONAL DISPOSABLES INT INC
TRW AUTOMOTIVE US LLC
MICROSOFT TECHNOLOGY LICENSING LLC
SPORT MASKA INC
SENSITY SYSTEMS INC
SEIKO EPSON CORP
FACEBOOK INC
OLYMPUS CORP
CRODA INT PLC
FUJIFILM CORP
ACCENTURE GLOBAL SOLUTIONS LTD
LEBLAND DENNIS
ELWHA LLC
NIDEC CORP
COLLEGIUM PHARMACEUTICAL INC
THERMO FINNIGAN LLC
SYNVINA C V
AGFA HEALTHCARE
VRVIS ZENTRUM FUER VIRTUAL REALITY UND VISUALISIERUNG
AVL LIST
GOOGLE LLC
HUIZHOU TCL MOBILE COMMUNICATION CO LTD
FINKBEINER JACQUES
HEINIGER SONIA
COSANDEY JOHAN
WUHAN CHINA STAR OPTOELECTRONICS TECHNOLOGY CO LTD
NOVARTIS AG
HEWLETT PACKARD DEVELOPMENT CO
BOE TECHNOLOGY GROUP CO LTD
HEFEI XINSHENG OPTOELECTRONICS TECHNOLOGY CO LTD
HEFEI XINSHENG OPTOELECTRONICS TECHNOLOGY CO LTD
OVERKIZ
SHARP KK
PRODUCTIVE AGING LABORATORY CO LTD
SAMSUNG ELECTRONICS CO LTD
ARRAY BIOPHARMA INC
GENENTECH INC
DOORDASH INC
HARDMAN BRENNA ANN
AGIE CHARMILLES SA
MICROSOFT TECHNOLOGY LICENSING LLC
LG DISPLAY CO LTD
SAMSUNG DISPLAY CO LTD
AT & T IP I LP
BOEHRINGER INGELHEIM VETMEDICA GMBH
HONDA MOTOR CO LTD
CHART INC
24 7 INT LLC
ADVANCED RISC MACH LTD
HONDA MOTOR CO LTD
TOSHIBA TEC KK
TOKYO ELECTRON LTD
GENESYS TELECOMMUNICATIONS LABORATORIES INC
MOURI FUMIHIKO
YAMAMOTO SUSUMU
YAMAMURA SATOSHI
TOYOTA MOTOR CO LTD
KOITO MFG CO LTD
DIALOG SEMICONDUCTOR UK LTD
GILEAD CONNECTICUT INC
GENENTECH INC
RENESAS ELECTRONICS CORP
ZHANG LONG
UNIV MEDICAL PHARMACEUTICALS CORPORATION
LEA GILBERT MELBYE
LG ELECTRONICS INC
HYUNDAI MOTOR CO LTD
KIA MOTORS CORP
PAPINEAU MICHAEL
FELTHAM MARK
OFINNO TECHNOLOGIES LLC
GYRUS MEDICAL LTD
KRONES AG
AT & T IP I LP
GOPRO INC
UNDERSTORY LLC
NICHIA CORP
SEIKO EPSON CORP
SUMITOMO ELECTRIC INDUSTRIES
SEI OPTIFRONTIER CO LTD
SUMITOMO ELECTRIC LIGHTWAVE CORP
TOKAI RIKA CO LTD
DEERE & CO
EBAY INC
SAMSUNG ELECTRONICS CO LTD
ALIBABA GROUP HOLDING LTD
KONICA MINOLTA INC
HUANG CHIEN CHUNG
UNITED TECHNOLOGIES CORP
AUSTIN CHRISTOPHER B
CHINA ACADEMY TELECOMMUNICATIONS TECHNOLOGY
HITACHI HIGH TECH CORP
INOVYTEC MEDICAL SOLUTIONS LTD
HEWLETT PACKARD DEVELOPMENT CO
HEWLETT PACKARD DEVELOPMENT CO
HILTI AG
HI LEX CORP
FORBES PAUL W
SMELTZ CLAYTON PRESCAN
FORBES REHAB SERVICES INC
TFOR LLC
ERICSSON TELEFON AB L M
FROHNAPFEL DUSTIN J
OBRIEN JR WALTER F
LOWE TODD K
VIRGINIA TECH INTELLECTUAL PROPERTIES INC
Parasol Medical LLC
SAMSUNG ELECTRONICS CO LTD
UNIV WASHINGTON
TJD ENTPR INC
NIDEC CORP
CISCO TECH INC
ALLERGAN INC
CENTECH CORP
LOWES COMPANIES INC
FUJITSU LTD
BAIDU USA LLC
CommScope Connectivity Belgium BVBA
ADC CZECH REPUBLIC SRO
STATE FARM MUTUAL AUTOMOBILE INSURANCE CO
CIMPRESS SCHWEIZ GMBH
BEIJING KUANGSHI TECH CO LTD
NAT TECH & ENG SOLUTIONS SANDIA LLC
NVIDIA CORP
CHENG UEI PREC IND CO LTD
JOHNSON CONTROLS TECH CO
VALEO SYSTEMES DESSUYAGE
SAUDI ARABIAN OIL CO
ADOCIA
GONZALEZ AIDAN A
WELLS FARGO BANK NA
JANSSEN BIOTECH INC
SK HYNIX INC
UNIV NAT TSING HUA
AT & T IP I LP
EDGECRAFT CORP
HONDA MOTOR CO LTD
SAMSUNG ELECTRONICS CO LTD
ELLEX R&D PTY LTD
SIEMENS HEALTHCARE GMBH
NOKIA TECHNOLOGIES OY
UNIV DONGGUAN TECHNOLOGY
ALLURION TECH INC
FUJITSU LTD
OMRON HEALTHCARE CO LTD
TAIWAN SEMICONDUCTOR MFG CO LTD
PLASTIC REPAIR SYSTEM 2011 S L
SONY CORP
REATA PHARMACEUTICALS INC
CHENGDU BOE OPTOELECT TECH CO
BOE TECHNOLOGY GROUP CO LTD
GREENSEAL RES LTD
DAIKIN IND LTD
ZONEART NETWORKS LTD
DSM IP ASSETS BV
TOYO SEIKAN KAISHA LTD
TOYO SEIKAN GROUP HOLDINGS LTD
ERICSSON TELEFON AB L M
SONY SEMICONDUCTOR SOLUTIONS CORP
BOEING CO
PANASONIC CORP
KEYENCE CO LTD
PANASONIC IP MAN CO LTD
HUAWEI TECH CO LTD
MATTSON TECH INC
VARIAN MED SYS INC
KARSTEN MFG CORP
ITT MFG ENTERPRISES LLC
FORD GLOBAL TECH LLC
OREAL
STAGGERINGS LLC
ENVIRONMENTAL DYNAMICS INT INC
BSH HAUSGERAETE GMBH
AT & T IP I LP
HEADWATER RES LLC
PURIDIFY LTD
BROWN TAYLOR DIANTE
HOMEWAV LLC
XMOTORS AI INC
ENTIT SOFTWARE LLC
MAG INSTR INC
SK HYNIX INC
ARCUS TECH INC
COMCAST CABLE COMM LLC
WUXI PETABYTE TECH CO LTD
CANON KK
AMEC FOSTER WHEELER USA CORP
TURATTI SRL
SPO
Query:
-- 5. Get distinct assignee names to understand potential top assignees.
SELECT DISTINCT f.value:"name"::STRING AS "assignee_name"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee_harmonized") f
LIMIT 1000;
Answer:
Too long, hard cut:
assignee_name
PREC BIOSCIENCES INC
STANLEY WORKS LTD
CAMURUS AB
WWT SPOLKA Z OGRANICZONA ODPOWIEDZIALNOSCIA
EISEN EIKO
WISTRON NEWEB CORP
UST INC
UNIV ANGERS
CHUNG CHI Y
ZHU MIN
SUMNER MICHAEL
BERNARD MARC R
HRA PHARMA LAB
GANZHOU HEMAY PHARMACEUTICAL CO
SURROZEN OPERATING INC
KIMBERLY CLARK CO
VIGIL NEUROSCIENCE INC
ROCKWOOL INT
OMNISYSTEM CO LTD
AGCO DO BRASIL SOLUCOES AGRICOLAS LTDA
KOREA INST OCEAN SCI & TECH
MATHUR BHAVNA
VARTIAINEN PANU
KAN GEORGE L
SUN HAO
KOO YEON KWAN
ADVANCED BIONICS LLC
MICROELECTRONICS TECH INC
MARTIN DOMINIC R
BRUKER BIOSPIN AG
SOROCO PRIVATE LTD
NIKE INC
Turner Tackle LLC
WAGNER JOACHIM
TOOLTECH LLC
ATOTECH DEUTSCHLAND GMBH
AJINOMOTO KK
HIKMET RIFAT A M
AUYOUNG ALVIN
CHEVRON ORONITE SAS
UNIV MACAU
H4X EU
FUNDACION INSTITUTO DE INVESTIG SANITARIA FUNDACION JIMENEZ DIAZ
COGNEX CORP
WIRTGEN GMBH
AUE TEXTILMASCHINENBAU GMBH
OTKRYTOE AKTSIONERNOE OBSHCHESTVO INFORMATSIONNYE TEKH I KOMMUNIKATSIONNYE SISTEMY
ACTION ELIZABETH
RATKAY ALECSEU
EXXON RESEARCH ENGINEERING CO
FOSTER WHEELER ENERGY CORP
LAESSER FRANZ AG
KORPORATSIJA MASTERNEHT AOZT
HOWELL THOMAS A
SHIM JAE J
MEGURO TAKESHI
ARNEY SHANE R
UBE MAT IND LTD
POORNACHANDRAN RAJESH
OOI TETSUYA
SCHUMACHER DONALD J
DECKARD CARL
TAPIA MARIO G
PEREGO ANDREA
KAWANA TAKAHIRO
SERVIER LAB
GRINKEVICH ALEKSANDR VASIL EVICH
DVOEGLAZOV ALEKSEJ IVANOVICH
ASEA AB
SCHAEFER ELEKTROTECHNIK U SONDERMASCHINEN GMBH
ZIMMERMANN GISELA
SHINDENGEN ELECTRIC MFG CO
ATATUERK UENIVERSITESI BILIMSEL ARASTIRMA PROJELERI BIRIMI
LYUBEZNOV VALERIJ KONSTANTINOVICH
KODAMA NOBUTAKA
GUOZHU YE
HINTERMAIER WOLFGANG
MAURER JOHN H
PICHER PATRICK
LAMBA DIGVIJAY SINGH
LÉONARD FRANÇOIS
CARUELLE JEAN-PIERRE
ST MICROELECTRONICS ROUSSET
TERMINATOR IP LTD
TOTALENERGIES CORBION BV
KAISER GYPSUM COMPANY INC
LISTON JAMES A TRUSTEE
SYLVESTER RICHARD
WITTENBERGE NAEHMASCH VEB
BORG HOLDING A G
WARNER LAMBERT TECH
ORTH JANOSNE
FAIL SAFE IND INC
HIAB AB
MOBIPAYPOINT LTD
HEWLETT PACKARD DEVELOPMENT CO LP
ROBOPAC SPA
ROCHE DIAGNOSTICS OPERATIONS INC
HEINRICH GEORG GMBH MASCHF
BioVersys AG
JANSMA MICHAEL
BIOTA EUROPE LTD
VICENTE JOSE GERMAN
CELLULAR RES INC
JANSSEN PHARMACEUTICALS INC
DARNELL WAYNE
TECHNION RES & DEV FOUNDATION
ANALOGIC CORP
WEIR MINERALS AUSTRALIA LTD
FORMLABS INC
SUBARU CORP
LUKITO HARSOYO
MEEKER DAVID E
LARYNGEAL MASK CO LTD
MOLYNEUX STEPHEN
JOHNSON & JOHNSON SURGICAL VISION INC
BERTHIEZ C N M P
BASF PLANT SCIENCE CO GMBH
CQLT SAARGUMMI TECH SARL
HEFEI MIDEA REFRIGERATOR CO
FERROLI SPA
STEFFENS RALF
ZHANG JINGLIN
XIAMEN CHANGELIGHT CO LTD
MURATA TOSHIKI
SUMITOMO METAL MINING CO
SOLINAS MEDICAL INC
RADIABEAM TECH LLC
Evol Science LLC
MARTINEZ CANALES MONICA LUCIA
WAVE OPTICS LTD
JIANGSU SHEMAR ELECTRIC CO LTD
KANG MIN SOO
LUEDTKE OLIVER
BUONO JUAN C MR
FARGO KENDALL M
KELLER IGOR
MONOPANEL SA
ROLLERBLADE INC
GALLER KURT
TOLEDO ERAN
EL TAHER TODD
ISHITANI TOMOYA
MATERIALS & ELECTROCHEMICAL RES CORP
TERATRON GMBH
EUROPOLES GMBH & CO KG
WHITE IAN D
GOTFRIED YECHIEL
KESSLER MANFRED
STAPP SOEREN
EUROCATENE SRL
SEOK TAEK O
WOO DAE ENGINEERING CONSULTANT CO LTD
ELIESON CHAIMSONOVITZ PROSPER
MARSHALL & ILSLEY BANK
JAMES B BLACKBURN
BERACA SABARA QUIMICOS E INGRE
SWEETSER BERT M
LELAND ELECTRIC CO
NIPPON KOGAKU KK
BOGIE N
KELVINATOR CORP
REDINGTON COUNTERS INC
DANFOSS AS
STOCK EQUIPMENT CO
BISSETT & SONS LTD J
TAITO CORP
GROSS ISAK
TELEX CORP THE
TURNER BROTHERS ASBEST
HITACHI SOFTWARE ENG
REMINGTON TYPEWRITER CO
PEUGEOT
STIRN ALBERT L
JANSSEN VACCINES & PREVENTION BV
WARREN FASTENER CORP
MUELLER JOHANN
WHEELABRATOR CORP
PACIFIC MILLS
CANADIAN SAFETY FUSE COMPANY L
CARTIER JOSEPH GIDEON
OMARK INDUSTRIES INC
STICKEL CHARLES E A
NORGREN CO C A
HOLDEN ARTEMAS F
ARMSTRONG WHITWORTH CO ENG
CEBAL
WEA MFG INC
WILLIAM R BECKER
SICARI R
PERES DALMO JOSE
ALFRED CARRINGTON KENNEDY
CARL WALTHER OHG
KIOXIA CORP
BATTELLE ENERGY ALLIANCE LLC
SOLID INC
TG3D STUDIO
LIXIL SUZUKI SHUTTER CORP
EMPRESSA NAC DE MINERIA ENAMI
VELCRO IP HOLDINGS LLC
MATSUMOTO AYAKA
LODZKA FAB MASZYN JEDWABNI
ALLEN GROUP
SANNER FRIEDR GMBH CO KG
SINGAPORE CHARTERED IND
BEHR GMBH & CO KG
SPATTI GIOVANNI
BOMBAY TEXTILE RES ASS BTRA
SUZUKI MASAMI
WOONGJIN CHEMICAL CO LTD
Convida Wireless LLC
HEATON JEREMIAH
SONOS INC
REMEDEE LABS
BYSTRONIC MASCH
AFP ADVANCED FOOD PRODUCTS LLC
CHR HANSEN AS
THEKKADATH GOVINDANUNNY
SHANGHAI GUIMU ROBOT CO LTD
DEUTSCHE REICHSBAHN
TELO GENOMICS HOLDINGS CORP
POTOMAC PHOTONICS INC
TRIGEM COMPUTER INC
PARK MAN KI
UNIV FLORIDA STATE
MUSIL FRANTISEK
NGUYEN THIEN NHON DIANA
METAL IND RES & DEV CT
DAIKIN FLUOROCHEMICALS CHINA CO LTD
HOWARD DANE
LEPPIN HANS
PEUCKERT KLAUS
KIRCHNER RUDI
MITSUMI ELECTRIC CO LTD
REXROTH INDRAMAT GMBH
DYNAVAX TECH CORP
PROGRESSIVE TOOL & IND CO
MUROTA WATARU
PITCHER CHARLES SPENCER
REVIVE ENVIRONMENTAL TECHNOLOGY LLC
DROSTE RENATE
VRACAR VIKTOR
THE REGENTS OF UNIV OF CALIFORNIA
GEISER TOBIAS
YANG BONG HYUN
MITSUBISHI HITACHI POWER SYSTEMS ENV SOLUTIONS LTD
UNIV OHIO STATE
JEONG DONG HUN
SANKEI YAKUHIN KK
TAIWAN SEMICONDUCTOR MFG
YEH CHIH-KANG
HILL CLYDE D
YANG CHENG-CHUAN

Query:
-- 6. Retrieve country codes to identify where applications are filed.
SELECT DISTINCT t."country_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
LIMIT 1000;
Answer:
country_code
DO
BA
RS
WO
CR
PL
EP
ZA
MY
CS
LV
HR
AU
CU
RO
KR
PT
NZ
CL
NO
HU
JP
DZ
NL
LT
UA
MW
IT
OA
CY
CZ
HN
SV
CH
TR
BG
AT
YU
ZM
MD
ZW
MA
GB
SG
EG
PA
CO
SI
AR
KE
FI
DK
CA
SK
IS
NI
US
PH
DE
DD
MX
EE
GE
HK
TN
GT
BR
ID
LU
GR
RU
JO
IN
EC
SA
MN
SU
FR
PE
KZ
IL
TW
MT
BE
SE
AP
SM
ME
EA
ES
IE
CN
MC
Query:
-- 7. Extract publication years from "publication_date" for trend analysis.
SELECT TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year"
FROM PATENTS.PATENTS.PUBLICATIONS t
WHERE TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
LIMIT 1000;
Answer:
Too long, hard cut:
publication_year
1884
1937
1941
1943
1975
1956
1960
1870
1914
1871
1906
1890
1954
1915
1954
1878
1907
1953
1941
1975
1881
1954
1884
1913
1914
1908
1952
1962
1960
1959
1950
1914
1948
1952
1943
1909
1912
1935
1883
1937
1951
1961
1939
1913
1958
1940
1952
1959
1956
1956
1883
1912
1936
1941
1913
1960
1960
1911
1915
1946
1961
1882
1955
1953
1953
1914
1915
1914
1960
1871
1938
1940
1915
1860
1958
1953
1914
1975
1907
1882
1962
1957
1962
1961
1941
1966
1943
1906
1945
1914
1878
1941
1936
1889
1908
1961
1954
1878
1940
1956
1958
1958
1960
1956
2010
1950
1889
1968
1913
1914
1953
1958
1914
1914
1975
1951
1952
1958
1952
1939
1947
1921
1895
1969
1936
1939
2020
1959
1964
1914
1948
1897
1915
2015
1968
1939
1915
1890
1913
1948
1951
1936
1955
1973
1866
1945
1968
1966
1967
1957
1958
1962
1940
1948
1916
1923
1968
1969
1951
1908
1974
1970
1909
1967
1967
1967
1959
1958
1958
1916
2017
1964
1936
1942
1950
1908
1951
1944
1928
1959
1972
1975
1973
1958
1963
1967
1963
1943
1972
1881
1918
1966
1970
1971
1973
1939
1940
1950
1940
1919
1966
2006
1936
1889
1896
2021
1939
1952
1952
1939
1941
1964
1886
1970
1970
1929
1941
1951
1998
1959
1959
1880
1939
1966
1951
1960
1973
1959
1961
1944
1884
1885
1941
1942
1950
1916
1960
1948
1967
1911
1922
1963
1964
2006
2006
2006
2006
2006
2005
2005
2005
2005
2006
2005
2006
2005
2006
2006
2005
2005
2005
2006
2005
2006
2006
2005
2006
2005
2005
2006
2005
2005
2006
2006
2006
2006
2005
2005
2005
2006
2005
2005
2005
2006
2005
2006
2005
2006
2006
2006
2005
2006
2006
2006
2007
2006
2005
2007
2006
2005
2007
2006
2006
2007
2007
2006
2007
2006
2006
2006
2007
2006
2006
2006
2006
2007
2006
2006
2007
2006
2006
2006
2006
2006
2006
2006
2006
2007
2007
2007
2006
2006
2006
2006
2006
2006
2007
2007
2006
2006
2006
2006
2007
2006
2006
2006
2007
2006
2006
2006
2007
2007
2006
2006
2006
2006
2006
2006
2007
2007
2008
2006
2007
2007
2008
2007
2008
2008
2006
2007
2007
2006
2007
2006
2007
2007
2007
2006
2008
2008
2007
2008
2007
2009
2008
2008
2007
2008
2007
2008
2007
2007
2008
2008
2007
2008
2007
2008
2008
2007
2007
2008
2007
2008
2007
2008
2007
2007
2007
2008
2008
2007
2007
2007
2008
2007
2009
2007
2008
2008
2008
2007
2007
2007
2007
2008
2007
2007
2007
2008
2007
2008
2007
2008
2007
2008
2008
2008
2009
2008
2009
2008
2007
2007
2008
2007
2007
2007
2007
2008
2008
2007
2008
2007
2008
2008
2009
2007
2008
2008
2007
2007
2009
2009
2008
2008
2008
2008
2008
2008
2008
2009
2009
2008
2008
2008
2008
2009
2009
2009
2008
2008
2008
2010
2008
2008
2008
2008
2008
2009
2008
2008
2008
2008
2008
2010
2008
2008
2008
2008
2008
2009
2008
2008
2009
2009
2008
2009
2009
2010
2009
2010
2011
2010
2011
2011
2011
2012
2012
2012
2012
2012
2012
2012
2012
2012
2012
2012
2012
2012
2013
2013
2013
2013
2013
2013
2014
2014
2014
2015
2015
2015
2015
2015
2016
2015
2014
2014
2015
2016
2015
2015
2015
2016
2015
2016
2016
2015
2016
2015
2016
2016
2017
2016
2017
2017
2017
2017
2018
2018
2017
2016
2017
2018
2018
2017
2017
2018
2019
2019
2017
2018
2019
2019
2019
2019
2020
2020
2019
2019
2020
2020
2019
2019
2019
2019
2020
2020
2020
2020
2020
2021
2020
2021
2021
2020
2021
2022
2021
2022
2022
2023
2022
2022
2023
2023
2022
2022
2022
2022
2023
2023
2023
2023
2022
2024
2024
2024
2023
2023
2024
2018
2018
2018
2019
2022
2022
2023
2023
2011
2011
2012
2011
2011
2011
2011
2012
2011
2012
2012
2014
2014
2014
2015
2015
2015
2015
2015
2015
2015
2015
2015
2015
2014
2016
2015
2015
2016
2016
2016
2015
2016
2015
2016
2016
2016
2016
2016
2016
2016
2016
2016
2016
2016
2016
2016
2016
2015
2015
2017
2015
2015
2016
2015
2016
2015
2015
2015
2016
2016
2015
2015
2016
2015
2015
2016
2015
2015
2015
2015
2015
2015
2015
2016
2016
2015
2015
2016
2017
2016
2016
2017
2017
2017
2016
2016
2016
2016
2016
2016
2016
2016
2017
2016
2017
2016
2016
2017
2017
2017
2016
2017
2017
2017
2017
2017
2018
2017
2018
2018
2017
2017
2016
2016
2018
2018
2017
2017
2017
2017
2017
2017
2018
2017
2017
2017
2017
2017
2017
2017
2018
2017
2017
2018
2018
2018
2018
2018
2018
2018
2017
2018
2018
2017
2018
2017
2018
2017
2018
2019
2018
2018
2018
2018
2018
2019
2019
2018
2019
2018
2018
2018
2018
2018
2019
2018
2018
2018
2018
2019
2018
2018
2018
2018
2019
2018
2018
2019
2018
2018
2018
2019
2018
2019
2018
2018
2018
2020
2018
2019
2018
2019
2018
2018
2019
2019
2018
2018
2018
2019
2018
2019
2018
2018
2018
2018
2019
2018
2018
2018
2019
2018
2018
2019
2018
2020
2020
2019
2020
2019
2019
2019
2019
2020
2021
2020
2019
2019
2018
2019
2020
2020
2018
2019
2020
2019
2019
2019
2019
2020
2019
2019
2019
2019
2020
2019
2020
2019
2019
2020
2019
2019
2019
2019
2020
2020
2019
2019
2020
2019
2019
2019
2020
2019
2019
2019
2019
2019
2019
2019
2019
2020
2019
2019
2019
2019
2019
2019
2019
2019
2019
2020
2019
2019
2020
2019
2019
2019
2020
2019
2019
2019
2019
2020
2019
2019
2019
2019
2020
2019
2020
2020
2019
2019
2019
2019
2020
2019
2020
2019
2019
2020
2021
2020
2019
2020
2020
2020
2020
2019
2021
2019
2020
2021
2020
2019
2019
2020
2021
2020
2020
2020
2020
2020
2021
2021
2021
2021
2020
2020
2020
2021
2020
2021
2020
2020
2020
2020
2021
2020
2020
2020
2021
2020
2020
2020
202
Query:
SELECT 
    f_assignee.value:"name"::STRING AS "assignee_name",
    COUNT(*) AS "total_applications"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."cpc") f_cpc,
     LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
WHERE f_cpc.value:"code"::STRING LIKE 'A01B%'
GROUP BY "assignee_name"
ORDER BY "total_applications" DESC
LIMIT 3;
Answer:
assignee_name,total_applications
DEERE & CO,97
CNH IND AMERICA LLC,47
AGSOILWORKS TECH COMPANY LLC,29
Query:
SELECT 
    t.assignee_name,
    COUNT(*) AS total_applications,
    y.year_with_most_applications,
    y.applications_in_that_year,
    c.country_code_with_most_applications_during_that_year
FROM (
    SELECT
        f_assignee.value:"name"::STRING AS assignee_name,
        t."publication_date",
        t."country_code"
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."cpc") f_cpc,
         LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
          AND f_assignee.value:"name"::STRING IS NOT NULL
          AND t."publication_date" IS NOT NULL
) t
JOIN (
    SELECT
        assignee_name,
        publication_year AS year_with_most_applications,
        applications_in_that_year
    FROM (
        SELECT
            assignee_name,
            TO_CHAR(TO_DATE("publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS publication_year,
            COUNT(*) AS applications_in_that_year,
            ROW_NUMBER() OVER (PARTITION BY assignee_name ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS assignee_name,
                t."publication_date"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."cpc") f_cpc,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND t."publication_date" IS NOT NULL
        ) sub
        GROUP BY assignee_name, "publication_year"
    ) agg
    WHERE rn = 1
) y ON t.assignee_name = y.assignee_name
JOIN (
    SELECT
        assignee_name,
        country_code_with_most_applications_during_that_year
    FROM (
        SELECT
            assignee_name,
            "country_code" AS country_code_with_most_applications_during_that_year,
            COUNT(*) AS applications_in_country,
            ROW_NUMBER() OVER (PARTITION BY assignee_name, "publication_year" ORDER BY COUNT(*) DESC) AS rn
        FROM (
            SELECT
                f_assignee.value:"name"::STRING AS assignee_name,
                TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year",
                t."country_code"
            FROM PATENTS.PATENTS.PUBLICATIONS t,
                 LATERAL FLATTEN(input => t."cpc") f_cpc,
                 LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
            WHERE f_cpc.value:"code"::STRING LIKE 'A01B3%'
                  AND f_assignee.value:"name"::STRING IS NOT NULL
                  AND t."publication_date" IS NOT NULL
                  AND t."country_code" IS NOT NULL
        ) sub_country
        GROUP BY assignee_name, "publication_year", "country_code"
    ) country_rank
    WHERE rn = 1
) c ON t.assignee_name = c.assignee_name
   AND y.year_with_most_applications = c."publication_year"
GROUP BY t.assignee_name, y.year_with_most_applications, y.applications_in_that_year, c.country_code_with_most_applications_during_that_year
ORDER BY total_applications DESC
LIMIT 3;
Answer:
000904 (42000): 01b9c05f-0004-7b48-0001-11c300d943f6: SQL compilation error: error line 41 at position 32
invalid identifier '"publication_year"'Query:
WITH top_assignees AS (
    SELECT
        f_assignee.value:"name"::STRING AS assignee_name,
        COUNT(*) AS total_applications
    FROM
        PATENTS.PATENTS.PUBLICATIONS t
        , LATERAL FLATTEN(input => t."cpc") f_cpc
        , LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE
        f_cpc.value:"code"::STRING LIKE 'A01B3%'
    GROUP BY
        assignee_name
    ORDER BY
        total_applications DESC
    LIMIT 3
),
year_applications AS (
    SELECT
        f_assignee.value:"name"::STRING AS assignee_name,
        TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS publication_year,
        COUNT(*) AS applications_in_year
    FROM
        PATENTS.PATENTS.PUBLICATIONS t
        , LATERAL FLATTEN(input => t."cpc") f_cpc
        , LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE
        f_cpc.value:"code"::STRING LIKE 'A01B3%'
        AND f_assignee.value:"name"::STRING IN (SELECT assignee_name FROM top_assignees)
        AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    GROUP BY
        assignee_name, publication_year
),
max_years AS (
    SELECT
        *,
        ROW_NUMBER() OVER (PARTITION BY assignee_name ORDER BY applications_in_year DESC) AS rn
    FROM
        year_applications
)
SELECT
    ta.assignee_name,
    ta.total_applications,
    my.publication_year AS year_with_most_applications,
    my.applications_in_year AS applications_in_that_year
FROM
    top_assignees ta
JOIN
    max_years my ON ta.assignee_name = my.assignee_name
WHERE
    my.rn = 1
ORDER BY
    ta.total_applications DESC;
Answer:
ASSIGNEE_NAME,TOTAL_APPLICATIONS,YEAR_WITH_MOST_APPLICATIONS,APPLICATIONS_IN_THAT_YEAR
LELY NV C VAN DER,13,1987,6
TEXAS INDUSTRIES INC,6,1982,6
DEERE & CO,6,2007,2
End Exploring Related Columns
Task: For patent class A01B3, I want to analyze the information of the top 3 assignees based on the total number of applications. Please provide the following five pieces of information: the name of this assignee,  total number of applications, the year with the most applications, the number of applications in that year, and the country code with the most applications during that year.

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: SELECT S."Column_Name" FROM {Database Name}.{Schema Name}.{Table_name} (ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
assignee_name,total_applications,year_with_most_applications,applications_in_that_year,country_code_with_most_applications_during_that_year
Assignee A,num:int,year:int,num:int,country_code:str
Assignee B,num:int,year:int,num:int,country_code:str
Assignee C,num:int,year:int,num:int,country_code:str
```

**Explanation:**

We analyzed patent applications classified under A01B3 to identify the top three assignees based on the total number of applications they have filed. For each of these assignees, we provided:

- **assignee_name**: The name of the assignee (e.g., "Assignee A").
- **total_applications**: The total number of applications filed by the assignee in class A01B3 (an integer value).
- **year_with_most_applications**: The year in which the assignee filed the most applications (an integer representing the year).
- **applications_in_that_year**: The number of applications the assignee filed in that peak year (an integer value).
- **country_code_with_most_applications_during_that_year**: The country code where the assignee filed the most applications during that peak year (a string value representing the country code).

Since specific data is unavailable from the task description, we used placeholders indicating the data types (e.g., `num:int`, `year:int`, `country_code:str`) to represent the expected values..
Here are some useful tips for answering:
When calculating distances between two geometries, use `ST_MakePoint(x, y)` to make a point and `ST_Distance(geometry1 GEOMETRY, geometry2 GEOMETRY)` to compute. No need to convert from meters to miles unless requested. Don't use Haversine like 2 * 6371000 * ASIN(...), use ST_DISTANCE for more precise results.
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'PATENTS': {'PATENTS': ['CPC_DEFINITION', 'DISCLOSURES_13', 'PUBLICATIONS']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book" SQL: WHERE "title" LIKE '%book%'
However, if the string is not decided, you may use ILIKE and %. e.g. Get articles that mention "education": SQL: "body" ILIKE '%education%' OR "title" ILIKE '%education%'
When handling TO_TIMESTAMP_NTZ conversions, use query like: SELECT CASE WHEN "date" >= 1e15 THEN TO_TIMESTAMP_NTZ("date" / 1000000) WHEN "date" >= 1e12 THEN TO_TIMESTAMP_NTZ("date" / 1000) ELSE TO_TIMESTAMP_NTZ("date") END AS parsed_timestamp FROM my_table;
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Keep all decimals to four decimal places.

2025-01-16 14:25:25 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:25:25 - root - INFO - ```sql
WITH base_data AS (
    SELECT
        f_assignee.value:"name"::STRING AS "assignee_name",
        t."publication_date",
        t."country_code",
        TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t
        , LATERAL FLATTEN(input => t."cpc") f_cpc
        , LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE
        f_cpc.value:"code"::STRING LIKE 'A01B3%'
        AND f_assignee.value:"name" IS NOT NULL
        AND t."publication_date" IS NOT NULL
        AND t."country_code" IS NOT NULL
        AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
)
, total_applications_per_assignee AS (
    SELECT
        "assignee_name",
        COUNT(*) AS "total_applications"
    FROM base_data
    GROUP BY "assignee_name"
)
, applications_per_year AS (
    SELECT
        "assignee_name",
        "publication_year",
        COUNT(*) AS "applications_in_year"
    FROM base_data
    GROUP BY "assignee_name", "publication_year"
)
, year_with_most_applications AS (
    SELECT
        "assignee_name",
        "publication_year" AS "year_with_most_applications",
        "applications_in_year",
        ROW_NUMBER() OVER(PARTITION BY "assignee_name" ORDER BY "applications_in_year" DESC) AS "rn_year"
    FROM applications_per_year
)
, country_applications AS (
    SELECT
        bd."assignee_name",
        bd."publication_year",
        bd."country_code",
        COUNT(*) AS "applications_in_country"
    FROM base_data bd
    JOIN (SELECT * FROM year_with_most_applications WHERE "rn_year" = 1) y
        ON bd."assignee_name" = y."assignee_name" AND bd."publication_year" = y."year_with_most_applications"
    GROUP BY bd."assignee_name", bd."publication_year", bd."country_code"
)
, country_with_most_applications AS (
    SELECT
        ca."assignee_name",
        ca."publication_year",
        ca."country_code" AS "country_code_with_most_applications_during_that_year",
        ca."applications_in_country",
        ROW_NUMBER() OVER(PARTITION BY ca."assignee_name", ca."publication_year" ORDER BY ca."applications_in_country" DESC) AS "rn_country"
    FROM country_applications ca
)
SELECT
    t."assignee_name",
    t."total_applications",
    y."year_with_most_applications",
    y."applications_in_year" AS "applications_in_that_year",
    c."country_code_with_most_applications_during_that_year"
FROM
    total_applications_per_assignee t
JOIN
    (SELECT * FROM year_with_most_applications WHERE "rn_year" = 1) y
    ON t."assignee_name" = y."assignee_name"
JOIN
    (SELECT * FROM country_with_most_applications WHERE "rn_country" = 1) c
    ON t."assignee_name" = c."assignee_name" AND y."year_with_most_applications" = c."publication_year"
ORDER BY t."total_applications" DESC
LIMIT 3;
```
2025-01-16 14:25:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:25:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:25:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:25:26 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-16 14:25:26 - snowflake.connector.connection - INFO - closed
2025-01-16 14:25:27 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:25:27 - root - INFO - itercount: 1
2025-01-16 14:25:27 - root - INFO - 0
2025-01-16 14:25:27 - root - INFO - results: 
assignee_name,total_applications,year_with_most_applications,applications_in_that_year,country_code_with_most_applications_during_that_year
LELY NV C VAN DER,13,1987,6,IT
TEXAS INDUSTRIES INC,6,1982,6,FR
DEERE & CO,6,2007,2,AU


2025-01-16 14:25:27 - root - INFO - Please check the answer again by reviewing For patent class A01B3, I want to analyze the information of the top 3 assignees based on the total number of applications. Please provide the following five pieces of information: the name of this assignee,  total number of applications, the year with the most applications, the number of applications in that year, and the country code with the most applications during that year., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
assignee_name,total_applications,year_with_most_applications,applications_in_that_year,country_code_with_most_applications_during_that_year
Assignee A,num:int,year:int,num:int,country_code:str
Assignee B,num:int,year:int,num:int,country_code:str
Assignee C,num:int,year:int,num:int,country_code:str
```

**Explanation:**

We analyzed patent applications classified under A01B3 to identify the top three assignees based on the total number of applications they have filed. For each of these assignees, we provided:

- **assignee_name**: The name of the assignee (e.g., "Assignee A").
- **total_applications**: The total number of applications filed by the assignee in class A01B3 (an integer value).
- **year_with_most_applications**: The year in which the assignee filed the most applications (an integer representing the year).
- **applications_in_that_year**: The number of applications the assignee filed in that peak year (an integer value).
- **country_code_with_most_applications_during_that_year**: The country code where the assignee filed the most applications during that peak year (a string value representing the country code).

Since specific data is unavailable from the task description, we used placeholders indicating the data types (e.g., `num:int`, `year:int`, `country_code:str`) to represent the expected values. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
assignee_name,total_applications,year_with_most_applications,applications_in_that_year,country_code_with_most_applications_during_that_year
LELY NV C VAN DER,13,1987,6,IT
TEXAS INDUSTRIES INC,6,1982,6,FR
DEERE & CO,6,2007,2,AU
Current sql:
WITH base_data AS (
    SELECT
        f_assignee.value:"name"::STRING AS "assignee_name",
        t."publication_date",
        t."country_code",
        TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t
        , LATERAL FLATTEN(input => t."cpc") f_cpc
        , LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE
        f_cpc.value:"code"::STRING LIKE 'A01B3%'
        AND f_assignee.value:"name" IS NOT NULL
        AND t."publication_date" IS NOT NULL
        AND t."country_code" IS NOT NULL
        AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
)
, total_applications_per_assignee AS (
    SELECT
        "assignee_name",
        COUNT(*) AS "total_applications"
    FROM base_data
    GROUP BY "assignee_name"
)
, applications_per_year AS (
    SELECT
        "assignee_name",
        "publication_year",
        COUNT(*) AS "applications_in_year"
    FROM base_data
    GROUP BY "assignee_name", "publication_year"
)
, year_with_most_applications AS (
    SELECT
        "assignee_name",
        "publication_year" AS "year_with_most_applications",
        "applications_in_year",
        ROW_NUMBER() OVER(PARTITION BY "assignee_name" ORDER BY "applications_in_year" DESC) AS "rn_year"
    FROM applications_per_year
)
, country_applications AS (
    SELECT
        bd."assignee_name",
        bd."publication_year",
        bd."country_code",
        COUNT(*) AS "applications_in_country"
    FROM base_data bd
    JOIN (SELECT * FROM year_with_most_applications WHERE "rn_year" = 1) y
        ON bd."assignee_name" = y."assignee_name" AND bd."publication_year" = y."year_with_most_applications"
    GROUP BY bd."assignee_name", bd."publication_year", bd."country_code"
)
, country_with_most_applications AS (
    SELECT
        ca."assignee_name",
        ca."publication_year",
        ca."country_code" AS "country_code_with_most_applications_during_that_year",
        ca."applications_in_country",
        ROW_NUMBER() OVER(PARTITION BY ca."assignee_name", ca."publication_year" ORDER BY ca."applications_in_country" DESC) AS "rn_country"
    FROM country_applications ca
)
SELECT
    t."assignee_name",
    t."total_applications",
    y."year_with_most_applications",
    y."applications_in_year" AS "applications_in_that_year",
    c."country_code_with_most_applications_during_that_year"
FROM
    total_applications_per_assignee t
JOIN
    (SELECT * FROM year_with_most_applications WHERE "rn_year" = 1) y
    ON t."assignee_name" = y."assignee_name"
JOIN
    (SELECT * FROM country_with_most_applications WHERE "rn_country" = 1) c
    ON t."assignee_name" = c."assignee_name" AND y."year_with_most_applications" = c."publication_year"
ORDER BY t."total_applications" DESC
LIMIT 3;When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.

2025-01-16 14:26:05 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:26:05 - root - INFO - ```sql
WITH base_data AS (
    SELECT
        f_assignee.value:"name"::STRING AS "assignee_name",
        t."publication_date",
        t."country_code",
        TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t
        , LATERAL FLATTEN(input => t."cpc") f_cpc
        , LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE
        f_cpc.value:"code"::STRING LIKE 'A01B3%'
        AND f_assignee.value:"name" IS NOT NULL
        AND t."publication_date" IS NOT NULL
        AND t."country_code" IS NOT NULL
        AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
)
, total_applications_per_assignee AS (
    SELECT
        "assignee_name",
        COUNT(*) AS "total_applications"
    FROM base_data
    GROUP BY "assignee_name"
)
, applications_per_year AS (
    SELECT
        "assignee_name",
        "publication_year",
        COUNT(*) AS "applications_in_year"
    FROM base_data
    GROUP BY "assignee_name", "publication_year"
)
, year_with_most_applications AS (
    SELECT
        "assignee_name",
        "publication_year" AS "year_with_most_applications",
        "applications_in_year",
        ROW_NUMBER() OVER(PARTITION BY "assignee_name" ORDER BY "applications_in_year" DESC NULLS LAST) AS "rn_year"
    FROM applications_per_year
)
, country_applications AS (
    SELECT
        bd."assignee_name",
        bd."publication_year",
        bd."country_code",
        COUNT(*) AS "applications_in_country"
    FROM base_data bd
    JOIN (SELECT * FROM year_with_most_applications WHERE "rn_year" = 1) y
        ON bd."assignee_name" = y."assignee_name" AND bd."publication_year" = y."year_with_most_applications"
    GROUP BY bd."assignee_name", bd."publication_year", bd."country_code"
)
, country_with_most_applications AS (
    SELECT
        ca."assignee_name",
        ca."publication_year",
        ca."country_code" AS "country_code_with_most_applications_during_that_year",
        ca."applications_in_country",
        ROW_NUMBER() OVER(PARTITION BY ca."assignee_name", ca."publication_year" ORDER BY ca."applications_in_country" DESC NULLS LAST) AS "rn_country"
    FROM country_applications ca
)
SELECT
    t."assignee_name",
    t."total_applications",
    y."year_with_most_applications",
    y."applications_in_year" AS "applications_in_that_year",
    c."country_code_with_most_applications_during_that_year"
FROM
    total_applications_per_assignee t
JOIN
    (SELECT * FROM year_with_most_applications WHERE "rn_year" = 1) y
    ON t."assignee_name" = y."assignee_name"
JOIN
    (SELECT * FROM country_with_most_applications WHERE "rn_country" = 1) c
    ON t."assignee_name" = c."assignee_name" AND y."year_with_most_applications" = c."publication_year"
ORDER BY t."total_applications" DESC NULLS LAST
LIMIT 3;
```
2025-01-16 14:26:05 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:26:05 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:26:05 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:26:07 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-16 14:26:07 - snowflake.connector.connection - INFO - closed
2025-01-16 14:26:07 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:26:07 - root - INFO - itercount: 2
2025-01-16 14:26:07 - root - INFO - 0
2025-01-16 14:26:07 - root - INFO - results: 
assignee_name,total_applications,year_with_most_applications,applications_in_that_year,country_code_with_most_applications_during_that_year
LELY NV C VAN DER,13,1987,6,IT
TEXAS INDUSTRIES INC,6,1982,6,FR
DEERE & CO,6,2020,2,EP


2025-01-16 14:26:07 - root - INFO - Please check the answer again by reviewing For patent class A01B3, I want to analyze the information of the top 3 assignees based on the total number of applications. Please provide the following five pieces of information: the name of this assignee,  total number of applications, the year with the most applications, the number of applications in that year, and the country code with the most applications during that year., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
assignee_name,total_applications,year_with_most_applications,applications_in_that_year,country_code_with_most_applications_during_that_year
Assignee A,num:int,year:int,num:int,country_code:str
Assignee B,num:int,year:int,num:int,country_code:str
Assignee C,num:int,year:int,num:int,country_code:str
```

**Explanation:**

We analyzed patent applications classified under A01B3 to identify the top three assignees based on the total number of applications they have filed. For each of these assignees, we provided:

- **assignee_name**: The name of the assignee (e.g., "Assignee A").
- **total_applications**: The total number of applications filed by the assignee in class A01B3 (an integer value).
- **year_with_most_applications**: The year in which the assignee filed the most applications (an integer representing the year).
- **applications_in_that_year**: The number of applications the assignee filed in that peak year (an integer value).
- **country_code_with_most_applications_during_that_year**: The country code where the assignee filed the most applications during that peak year (a string value representing the country code).

Since specific data is unavailable from the task description, we used placeholders indicating the data types (e.g., `num:int`, `year:int`, `country_code:str`) to represent the expected values. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
assignee_name,total_applications,year_with_most_applications,applications_in_that_year,country_code_with_most_applications_during_that_year
LELY NV C VAN DER,13,1987,6,IT
TEXAS INDUSTRIES INC,6,1982,6,FR
DEERE & CO,6,2020,2,EP
Current sql:
WITH base_data AS (
    SELECT
        f_assignee.value:"name"::STRING AS "assignee_name",
        t."publication_date",
        t."country_code",
        TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t
        , LATERAL FLATTEN(input => t."cpc") f_cpc
        , LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE
        f_cpc.value:"code"::STRING LIKE 'A01B3%'
        AND f_assignee.value:"name" IS NOT NULL
        AND t."publication_date" IS NOT NULL
        AND t."country_code" IS NOT NULL
        AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
)
, total_applications_per_assignee AS (
    SELECT
        "assignee_name",
        COUNT(*) AS "total_applications"
    FROM base_data
    GROUP BY "assignee_name"
)
, applications_per_year AS (
    SELECT
        "assignee_name",
        "publication_year",
        COUNT(*) AS "applications_in_year"
    FROM base_data
    GROUP BY "assignee_name", "publication_year"
)
, year_with_most_applications AS (
    SELECT
        "assignee_name",
        "publication_year" AS "year_with_most_applications",
        "applications_in_year",
        ROW_NUMBER() OVER(PARTITION BY "assignee_name" ORDER BY "applications_in_year" DESC NULLS LAST) AS "rn_year"
    FROM applications_per_year
)
, country_applications AS (
    SELECT
        bd."assignee_name",
        bd."publication_year",
        bd."country_code",
        COUNT(*) AS "applications_in_country"
    FROM base_data bd
    JOIN (SELECT * FROM year_with_most_applications WHERE "rn_year" = 1) y
        ON bd."assignee_name" = y."assignee_name" AND bd."publication_year" = y."year_with_most_applications"
    GROUP BY bd."assignee_name", bd."publication_year", bd."country_code"
)
, country_with_most_applications AS (
    SELECT
        ca."assignee_name",
        ca."publication_year",
        ca."country_code" AS "country_code_with_most_applications_during_that_year",
        ca."applications_in_country",
        ROW_NUMBER() OVER(PARTITION BY ca."assignee_name", ca."publication_year" ORDER BY ca."applications_in_country" DESC NULLS LAST) AS "rn_country"
    FROM country_applications ca
)
SELECT
    t."assignee_name",
    t."total_applications",
    y."year_with_most_applications",
    y."applications_in_year" AS "applications_in_that_year",
    c."country_code_with_most_applications_during_that_year"
FROM
    total_applications_per_assignee t
JOIN
    (SELECT * FROM year_with_most_applications WHERE "rn_year" = 1) y
    ON t."assignee_name" = y."assignee_name"
JOIN
    (SELECT * FROM country_with_most_applications WHERE "rn_country" = 1) c
    ON t."assignee_name" = c."assignee_name" AND y."year_with_most_applications" = c."publication_year"
ORDER BY t."total_applications" DESC NULLS LAST
LIMIT 3;When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.

2025-01-16 14:27:18 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 14:27:18 - root - INFO - ```sql
WITH base_data AS (
    SELECT
        f_assignee.value:"name"::STRING AS "assignee_name",
        t."publication_date",
        t."country_code",
        TO_CHAR(TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD'), 'YYYY') AS "publication_year"
    FROM
        PATENTS.PATENTS.PUBLICATIONS t
        , LATERAL FLATTEN(input => t."cpc") f_cpc
        , LATERAL FLATTEN(input => t."assignee_harmonized") f_assignee
    WHERE
        f_cpc.value:"code"::STRING LIKE 'A01B3%'
        AND f_assignee.value:"name" IS NOT NULL
        AND t."publication_date" IS NOT NULL
        AND t."country_code" IS NOT NULL
        AND TRY_TO_DATE(t."publication_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
)
, total_applications_per_assignee AS (
    SELECT
        "assignee_name",
        COUNT(*) AS "total_applications"
    FROM base_data
    GROUP BY "assignee_name"
)
, applications_per_year AS (
    SELECT
        "assignee_name",
        "publication_year",
        COUNT(*) AS "applications_in_year"
    FROM base_data
    GROUP BY "assignee_name", "publication_year"
)
, year_with_most_applications AS (
    SELECT
        "assignee_name",
        "publication_year" AS "year_with_most_applications",
        "applications_in_year",
        ROW_NUMBER() OVER(PARTITION BY "assignee_name" ORDER BY "applications_in_year" DESC NULLS LAST) AS "rn_year"
    FROM applications_per_year
)
, country_applications AS (
    SELECT
        bd."assignee_name",
        bd."publication_year",
        bd."country_code",
        COUNT(*) AS "applications_in_country"
    FROM base_data bd
    JOIN (SELECT * FROM year_with_most_applications WHERE "rn_year" = 1) y
        ON bd."assignee_name" = y."assignee_name" AND bd."publication_year" = y."year_with_most_applications"
    GROUP BY bd."assignee_name", bd."publication_year", bd."country_code"
)
, country_with_most_applications AS (
    SELECT
        ca."assignee_name",
        ca."publication_year",
        ca."country_code" AS "country_code_with_most_applications_during_that_year",
        ca."applications_in_country",
        ROW_NUMBER() OVER(PARTITION BY ca."assignee_name", ca."publication_year" ORDER BY ca."applications_in_country" DESC NULLS LAST) AS "rn_country"
    FROM country_applications ca
)
SELECT
    t."assignee_name",
    t."total_applications",
    y."year_with_most_applications",
    y."applications_in_year" AS "applications_in_that_year",
    c."country_code_with_most_applications_during_that_year"
FROM
    total_applications_per_assignee t
JOIN
    (SELECT * FROM year_with_most_applications WHERE "rn_year" = 1) y
    ON t."assignee_name" = y."assignee_name"
JOIN
    (SELECT * FROM country_with_most_applications WHERE "rn_country" = 1) c
    ON t."assignee_name" = c."assignee_name" AND y."year_with_most_applications" = c."publication_year"
ORDER BY t."total_applications" DESC NULLS LAST
LIMIT 3;
```
2025-01-16 14:27:18 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 14:27:18 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 14:27:18 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 14:27:20 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-16 14:27:20 - snowflake.connector.connection - INFO - closed
2025-01-16 14:27:20 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 14:27:20 - root - INFO - itercount: 3
2025-01-16 14:27:20 - root - INFO - 0
2025-01-16 14:27:20 - root - INFO - Total iteration counts: 3
