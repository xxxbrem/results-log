2025-01-18 01:58:41 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 01:59:38 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 01:59:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 01:59:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 01:59:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 01:59:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 72
2025-01-18 01:59:40 - snowflake.connector.connection - INFO - closed
2025-01-18 01:59:40 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 01:59:40 - root - INFO - SQL:
SELECT DISTINCT "week_date"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   ORDER BY "week_date"
   LIMIT 1000;
Results:
week_date
1/4/19
1/6/20
1/7/19
10/6/19
10/8/20
11/5/20
11/6/18
12/8/19
13/4/20
13/5/19
13/7/20
13/8/18
14/5/18
15/4/19
15/6/20
15/7/19
16/4/18
16/7/18
17/6/19
17/8/20
18/5/20
18/6/18
19/8/19
2/4/18
2/7/18
2/9/19
20/4/20
20/5/19
20/7/20
20/8/18
21/5/18
22/4/19
22/6/20
22/7/19
23/3/20
23/4/18
23/7/18
24/6/19
24/8/20
25/3/19
25/5/20
25/6/18
26/3/18
26/8/19
27/4/20
27/5/19
27/7/20
27/8/18
28/5/18
29/4/19
29/6/20
29/7/19
3/6/19
3/8/20
3/9/18
30/3/20
30/4/18
30/7/18
31/8/20
4/5/20
4/6/18
5/8/19
6/4/20
6/5/19
6/7/20
6/8/18
7/5/18
8/4/19
8/6/20
8/7/19
9/4/18
9/7/18

2025-01-18 01:59:40 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 01:59:40 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 01:59:40 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 01:59:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-18 01:59:41 - snowflake.connector.connection - INFO - closed
2025-01-18 01:59:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 01:59:42 - root - INFO - SQL:
SELECT MIN("week_date") AS "earliest_date", MAX("week_date") AS "latest_date"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES";
Results:
earliest_date,latest_date
1/4/19,9/7/18

2025-01-18 01:59:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 01:59:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 01:59:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 01:59:43 - snowflake.connector.cursor - INFO - Number of results in first chunk: 72
2025-01-18 01:59:43 - snowflake.connector.connection - INFO - closed
2025-01-18 01:59:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 01:59:43 - root - INFO - SQL:
SELECT SUBSTRING("week_date", 1, 4) AS "year", COUNT(*) AS "record_count"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   GROUP BY SUBSTRING("week_date", 1, 4);
Results:
year,record_count
31/8,238
24/8,237
17/8,238
10/8,238
3/8/,238
27/7,238
20/7,238
13/7,238
6/7/,238
29/6,238
15/6,238
8/6/,238
1/6/,238
25/5,238
11/5,238
18/5,238
20/4,238
13/4,238
30/3,238
23/3,238
2/9/,237
26/8,238
12/8,238
22/7,238
1/7/,238
15/7,238
8/7/,238
24/6,238
17/6,238
20/5,238
13/5,238
6/5/,238
22/4,237
1/4/,237
25/3,238
27/8,237
20/8,237
30/7,238
9/7/,238
11/6,238
28/5,237
14/5,238
30/4,238
26/3,237
22/6,238
4/5/,238
27/4,238
6/4/,238
19/8,237
5/8/,238
29/7,238
10/6,238
3/6/,238
15/4,238
8/4/,238
3/9/,237
29/4,238
13/8,238
23/7,238
16/7,237
2/7/,237
25/6,238
18/6,238
4/6/,237
21/5,237
7/5/,237
23/4,238
16/4,237
9/4/,237
2/4/,237
27/5,238
6/8/,237

2025-01-18 01:59:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 01:59:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 01:59:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 01:59:45 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 01:59:45 - snowflake.connector.connection - INFO - closed
2025-01-18 01:59:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:00:35 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:00:35 - root - INFO - ```sql
SELECT
  EXTRACT(YEAR FROM TO_DATE("week_date", 'D/M/YY')) AS "year",
  SUM(CASE WHEN TO_DATE("week_date", 'D/M/YY') BETWEEN DATEADD(WEEK, -4, TO_DATE('15/6/' || RIGHT("week_date",2), 'D/M/YY')) AND DATEADD(DAY, -1, TO_DATE('15/6/' || RIGHT("week_date",2), 'D/M/YY')) THEN "sales" ELSE 0 END) AS "pre_june15_sales",
  SUM(CASE WHEN TO_DATE("week_date", 'D/M/YY') BETWEEN TO_DATE('15/6/' || RIGHT("week_date",2), 'D/M/YY') AND DATEADD(WEEK, 4, DATEADD(DAY, -1, TO_DATE('15/6/' || RIGHT("week_date",2), 'D/M/YY'))) THEN "sales" ELSE 0 END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE EXTRACT(YEAR FROM TO_DATE("week_date", 'D/M/YY')) IN (2018, 2019, 2020)
GROUP BY EXTRACT(YEAR FROM TO_DATE("week_date", 'D/M/YY'))
ORDER BY "year";
```
2025-01-18 02:00:35 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:00:35 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:00:35 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:00:37 - snowflake.connector.connection - INFO - closed
2025-01-18 02:00:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:01:29 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:01:29 - root - INFO - The error occurs because in the date format model, `'D'` represents the **day of the week** (1-7), not the **day of the month**. To parse dates like `'31/8/20'`, we need to use `'DD'` for the day of the month.

Here is the corrected SQL query:

```sql
SELECT
  EXTRACT(YEAR FROM TO_DATE("week_date", 'DD/M/YY')) AS "year",
  SUM(CASE WHEN TO_DATE("week_date", 'DD/M/YY') BETWEEN DATEADD(WEEK, -4, TO_DATE('15/6/' || RIGHT("week_date",2), 'DD/M/YY')) AND DATEADD(DAY, -1, TO_DATE('15/6/' || RIGHT("week_date",2), 'DD/M/YY')) THEN "sales" ELSE 0 END) AS "pre_june15_sales",
  SUM(CASE WHEN TO_DATE("week_date", 'DD/M/YY') BETWEEN TO_DATE('15/6/' || RIGHT("week_date",2), 'DD/M/YY') AND DATEADD(WEEK, 4, DATEADD(DAY, -1, TO_DATE('15/6/' || RIGHT("week_date",2), 'DD/M/YY'))) THEN "sales" ELSE 0 END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE EXTRACT(YEAR FROM TO_DATE("week_date", 'DD/M/YY')) IN (2018, 2019, 2020)
GROUP BY EXTRACT(YEAR FROM TO_DATE("week_date", 'DD/M/YY'))
ORDER BY "year";
```

This query should now execute without errors and provide the desired analysis.
2025-01-18 02:01:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:01:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:01:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:01:31 - snowflake.connector.connection - INFO - closed
2025-01-18 02:01:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:02:51 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:02:51 - root - INFO - The error you're encountering is due to two main issues:

1. **Incorrect Filtering by Year:**
   - Your `week_date` column is in the format `'DD/M/YY'`, so using `WHERE "week_date" LIKE '2018%'` doesn't match any records because no dates start with `'2018'`.
   - To filter by year, you need to extract the year portion from the `week_date`.

2. **Incorrect Date Format in `TO_DATE`:**
   - The `TO_DATE` function fails because the date format model `'DD/M/YY'` expects leading zeros for single-digit days and months (e.g., `'01/04/19'` for 1st April 2019).
   - In your data, days and months are not zero-padded (e.g., `'1/4/19'`), so you need to use the `'FM'` (Fill Mode) format modifier to handle flexible-length numbers without leading zeros.

---

**Corrected Approach:**

1. **Use the 'FM' Format Modifier:**
   - Update your date format in `TO_DATE` to `'FMDD/FM/FMYY'` to correctly parse dates like `'1/4/19'`.

2. **Extract the Year Correctly:**
   - Use `RIGHT("week_date", 2)` to get the year part from `week_date`.
   - Convert the two-digit year to a four-digit year for clarity.

3. **Filter Dates Around Mid-June:**
   - Construct the `June 15` date for each year.
   - Use `DATEADD` to calculate four weeks before and after June 15.
   - Use `TO_DATE` with the corrected format to parse `week_date` and compare dates.

---

**Here is the corrected SQL query:**

```sql
SELECT 
    (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
    SUM(CASE
        WHEN TO_DATE("week_date", 'FMDD/FM/FMYY') BETWEEN 
             DATEADD(WEEK, -4, TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY')) AND 
             DATEADD(DAY, -1, TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY'))
        THEN "sales"
        ELSE 0
    END) AS "pre_june15_sales",
    SUM(CASE
        WHEN TO_DATE("week_date", 'FMDD/FM/FMYY') BETWEEN 
             TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY') AND 
             DATEADD(WEEK, 4, DATEADD(DAY, -1, TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY')))
        THEN "sales"
        ELSE 0
    END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE RIGHT("week_date", 2) IN ('18', '19', '20')
GROUP BY "year"
ORDER BY "year";
```

---

**Explanation:**

- **Parsing Dates with Variable Length:**
  - `TO_DATE("week_date", 'FMDD/FM/FMYY')` correctly parses dates like `'1/4/19'` and `'31/8/20'` by ignoring leading zeros.

- **Extracting the Year:**
  - `(2000 + TO_NUMBER(RIGHT("week_date", 2)))` converts the two-digit year into a four-digit year (e.g., `'18'` becomes `2018`).

- **Filtering by Year:**
  - `WHERE RIGHT("week_date", 2) IN ('18', '19', '20')` ensures we're only processing data for the years 2018, 2019, and 2020.

- **Calculating Pre and Post June 15 Sales:**
  - We construct `June 15` of each year using `'15/6/' || RIGHT("week_date", 2)` and parse it with `TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY')`.
  - We then calculate the date ranges for four weeks before and after June 15 using `DATEADD`.
  - The `CASE` statements sum the `sales` for weeks falling into these ranges.

---

**Final Output:**

Based on this query, you'll get the total sales for the four weeks before and after June 15 for each year. To calculate the percentage change, you can use the following SQL:

```sql
SELECT 
    "year",
    "pre_june15_sales",
    "post_june15_sales",
    ROUND((("post_june15_sales" - "pre_june15_sales") / NULLIF("pre_june15_sales", 0)) * 100, 4) AS "percentage_change"
FROM (
    -- [The previous SQL query goes here]
) AS sales_data;
```

---

**CSV Format as per Your Request:**

```csv
year,pre_june15_sales,post_june15_sales,percentage_change
2018,num:float,num:float,float
2019,num:float,num:float,float
2020,num:float,num:float,float
```

- **Note:**
  - `num:float` represents the total sales amounts, which are floating-point numbers.
  - `percentage_change` is calculated as:
    \[
    \left( \frac{\text{post\_june15\_sales} - \text{pre\_june15\_sales}}{\text{pre\_june15\_sales}} \right) \times 100
    \]
  - The `NULLIF` function ensures we don't divide by zero if `pre_june15_sales` is zero.

---

**Summary:**

- Use `'FMDD/FM/FMYY'` in `TO_DATE` to correctly parse your date strings.
- Extract the year using `RIGHT("week_date", 2)` and convert it to a four-digit year.
- Adjust your filtering and date calculations based on the corrected date parsing.
- The provided SQL query should now execute without errors and yield the desired analysis.

---

If you have any further questions or need assistance with the query, feel free to ask!
2025-01-18 02:02:51 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:02:51 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:02:51 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:02:53 - snowflake.connector.connection - INFO - closed
2025-01-18 02:02:53 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:02:53 - root - INFO - SQL:
SELECT 
    (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
    SUM(CASE
        WHEN TO_DATE("week_date", 'FMDD/FM/FMYY') BETWEEN 
             DATEADD(WEEK, -4, TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY')) AND 
             DATEADD(DAY, -1, TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY'))
        THEN "sales"
        ELSE 0
    END) AS "pre_june15_sales",
    SUM(CASE
        WHEN TO_DATE("week_date", 'FMDD/FM/FMYY') BETWEEN 
             TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY') AND 
             DATEADD(WEEK, 4, DATEADD(DAY, -1, TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY')))
        THEN "sales"
        ELSE 0
    END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE RIGHT("week_date", 2) IN ('18', '19', '20')
GROUP BY "year"
ORDER BY "year";
Results:
100097 (22007): 01b9c8ba-0004-7b17-0001-11c300edd612: Can't parse '31/8/20' as date with format 'FMDD/FM/FMYY'
2025-01-18 02:02:53 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:02:53 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:02:53 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:02:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 02:02:55 - snowflake.connector.connection - INFO - closed
2025-01-18 02:02:55 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:03:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:03:39 - root - INFO - ```sql
WITH formatted_dates AS (
  SELECT
    "week_date",
    "sales",
    (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
    TRY_TO_DATE(
      LPAD(SPLIT_PART("week_date", '/', 1), 2, '0') || '/' ||
      LPAD(SPLIT_PART("week_date", '/', 2), 2, '0') || '/' ||
      SPLIT_PART("week_date", '/', 3),
      'DD/MM/YY'
    ) AS "parsed_date"
  FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
  WHERE RIGHT("week_date", 2) IN ('18', '19', '20')
    AND TRY_TO_DATE(
      LPAD(SPLIT_PART("week_date", '/', 1), 2, '0') || '/' ||
      LPAD(SPLIT_PART("week_date", '/', 2), 2, '0') || '/' ||
      SPLIT_PART("week_date", '/', 3),
      'DD/MM/YY'
    ) IS NOT NULL
)
SELECT
  "year",
  SUM(CASE
    WHEN "parsed_date" >= DATEADD(WEEK, -4, DATE_FROM_PARTS("year", 6, 15))
     AND "parsed_date" < DATE_FROM_PARTS("year", 6, 15)
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN "parsed_date" >= DATE_FROM_PARTS("year", 6, 15)
     AND "parsed_date" < DATEADD(WEEK, 4, DATE_FROM_PARTS("year", 6, 15))
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales"
FROM formatted_dates
GROUP BY "year"
ORDER BY "year";
```
2025-01-18 02:03:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:03:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:03:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:03:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-18 02:03:41 - snowflake.connector.connection - INFO - closed
2025-01-18 02:03:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:03:41 - root - INFO - SQL:
WITH formatted_dates AS (
  SELECT
    "week_date",
    "sales",
    (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
    TRY_TO_DATE(
      LPAD(SPLIT_PART("week_date", '/', 1), 2, '0') || '/' ||
      LPAD(SPLIT_PART("week_date", '/', 2), 2, '0') || '/' ||
      SPLIT_PART("week_date", '/', 3),
      'DD/MM/YY'
    ) AS "parsed_date"
  FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
  WHERE RIGHT("week_date", 2) IN ('18', '19', '20')
    AND TRY_TO_DATE(
      LPAD(SPLIT_PART("week_date", '/', 1), 2, '0') || '/' ||
      LPAD(SPLIT_PART("week_date", '/', 2), 2, '0') || '/' ||
      SPLIT_PART("week_date", '/', 3),
      'DD/MM/YY'
    ) IS NOT NULL
)
SELECT
  "year",
  SUM(CASE
    WHEN "parsed_date" >= DATEADD(WEEK, -4, DATE_FROM_PARTS("year", 6, 15))
     AND "parsed_date" < DATE_FROM_PARTS("year", 6, 15)
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN "parsed_date" >= DATE_FROM_PARTS("year", 6, 15)
     AND "parsed_date" < DATEADD(WEEK, 4, DATE_FROM_PARTS("year", 6, 15))
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales"
FROM formatted_dates
GROUP BY "year"
ORDER BY "year";
Results:
year,pre_june15_sales,post_june15_sales
2018,2125140809,2129242914
2019,2249989796,2252326390
2020,2345878357,2318994169

2025-01-18 02:03:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:03:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:03:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:03:42 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 02:03:42 - snowflake.connector.connection - INFO - closed
2025-01-18 02:03:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:04:30 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:04:30 - root - INFO - ```sql
SELECT
  (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
  SUM(CASE
    WHEN "week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18')
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN "week_date" IN ('18/6/18', '25/6/18', '2/7/18', '9/7/18')
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE RIGHT("week_date", 2) = '18'
GROUP BY "year"

UNION ALL

SELECT
  (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
  SUM(CASE
    WHEN "week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19')
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN "week_date" IN ('17/6/19', '24/6/19', '1/7/19', '8/7/19')
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE RIGHT("week_date", 2) = '19'
GROUP BY "year"

UNION ALL

SELECT
  (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
  SUM(CASE
    WHEN "week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20')
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN "week_date" IN ('15/6/20', '22/6/20', '29/6/20', '6/7/20')
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE RIGHT("week_date", 2) = '20'
GROUP BY "year";
```
2025-01-18 02:04:30 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:04:30 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:04:30 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:04:31 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-18 02:04:31 - snowflake.connector.connection - INFO - closed
2025-01-18 02:04:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:04:32 - root - INFO - SQL:
SELECT
  (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
  SUM(CASE
    WHEN "week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18')
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN "week_date" IN ('18/6/18', '25/6/18', '2/7/18', '9/7/18')
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE RIGHT("week_date", 2) = '18'
GROUP BY "year"

UNION ALL

SELECT
  (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
  SUM(CASE
    WHEN "week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19')
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN "week_date" IN ('17/6/19', '24/6/19', '1/7/19', '8/7/19')
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE RIGHT("week_date", 2) = '19'
GROUP BY "year"

UNION ALL

SELECT
  (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
  SUM(CASE
    WHEN "week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20')
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN "week_date" IN ('15/6/20', '22/6/20', '29/6/20', '6/7/20')
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE RIGHT("week_date", 2) = '20'
GROUP BY "year";
Results:
year,pre_june15_sales,post_june15_sales
2018,2119669585,2129242914
2019,2257925201,2252326390
2020,2346142369,2318994169

2025-01-18 02:04:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:04:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:04:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:04:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 02:04:33 - snowflake.connector.connection - INFO - closed
2025-01-18 02:04:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:04:33 - root - INFO - SQL:
SELECT "week_date", TRY_TO_DATE("week_date", 'YYYY-MM-DD') AS "date_converted"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   LIMIT 1000;
Results:
Too long, hard cut:
week_date,date_converted
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20

2025-01-18 02:04:33 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:04:33 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:04:33 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:04:35 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-18 02:04:35 - snowflake.connector.connection - INFO - closed
2025-01-18 02:04:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:05:48 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:05:48 - root - INFO - ```sql
WITH sales_data AS (
  SELECT
    (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
    "week_date",
    "sales"
  FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
  WHERE RIGHT("week_date", 2) IN ('18', '19', '20')
)
SELECT
  "year",
  SUM(CASE
    WHEN ("year" = 2018 AND "week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18')) OR
         ("year" = 2019 AND "week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19')) OR
         ("year" = 2020 AND "week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20'))
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN ("year" = 2018 AND "week_date" IN ('18/6/18', '25/6/18', '2/7/18', '9/7/18')) OR
         ("year" = 2019 AND "week_date" IN ('17/6/19', '24/6/19', '1/7/19', '8/7/19')) OR
         ("year" = 2020 AND "week_date" IN ('15/6/20', '22/6/20', '29/6/20', '6/7/20'))
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales",
  ROUND(
    (SUM(
      CASE
        WHEN ("year" = 2018 AND "week_date" IN ('18/6/18', '25/6/18', '2/7/18', '9/7/18')) OR
             ("year" = 2019 AND "week_date" IN ('17/6/19', '24/6/19', '1/7/19', '8/7/19')) OR
             ("year" = 2020 AND "week_date" IN ('15/6/20', '22/6/20', '29/6/20', '6/7/20'))
        THEN "sales"
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN ("year" = 2018 AND "week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18')) OR
             ("year" = 2019 AND "week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19')) OR
             ("year" = 2020 AND "week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20'))
        THEN "sales"
        ELSE 0
      END
    )) / NULLIF(SUM(
      CASE
        WHEN ("year" = 2018 AND "week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18')) OR
             ("year" = 2019 AND "week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19')) OR
             ("year" = 2020 AND "week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20'))
        THEN "sales"
        ELSE 0
      END
    ), 0) * 100, 4) AS "percentage_change"
FROM sales_data
GROUP BY "year"
ORDER BY "year";
```
2025-01-18 02:05:48 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:05:48 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:05:48 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:05:50 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-18 02:05:50 - snowflake.connector.connection - INFO - closed
2025-01-18 02:05:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:05:50 - root - INFO - SQL:
WITH sales_data AS (
  SELECT
    (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
    "week_date",
    "sales"
  FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
  WHERE RIGHT("week_date", 2) IN ('18', '19', '20')
)
SELECT
  "year",
  SUM(CASE
    WHEN ("year" = 2018 AND "week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18')) OR
         ("year" = 2019 AND "week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19')) OR
         ("year" = 2020 AND "week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20'))
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN ("year" = 2018 AND "week_date" IN ('18/6/18', '25/6/18', '2/7/18', '9/7/18')) OR
         ("year" = 2019 AND "week_date" IN ('17/6/19', '24/6/19', '1/7/19', '8/7/19')) OR
         ("year" = 2020 AND "week_date" IN ('15/6/20', '22/6/20', '29/6/20', '6/7/20'))
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales",
  ROUND(
    (SUM(
      CASE
        WHEN ("year" = 2018 AND "week_date" IN ('18/6/18', '25/6/18', '2/7/18', '9/7/18')) OR
             ("year" = 2019 AND "week_date" IN ('17/6/19', '24/6/19', '1/7/19', '8/7/19')) OR
             ("year" = 2020 AND "week_date" IN ('15/6/20', '22/6/20', '29/6/20', '6/7/20'))
        THEN "sales"
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN ("year" = 2018 AND "week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18')) OR
             ("year" = 2019 AND "week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19')) OR
             ("year" = 2020 AND "week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20'))
        THEN "sales"
        ELSE 0
      END
    )) / NULLIF(SUM(
      CASE
        WHEN ("year" = 2018 AND "week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18')) OR
             ("year" = 2019 AND "week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19')) OR
             ("year" = 2020 AND "week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20'))
        THEN "sales"
        ELSE 0
      END
    ), 0) * 100, 4) AS "percentage_change"
FROM sales_data
GROUP BY "year"
ORDER BY "year";
Results:
year,pre_june15_sales,post_june15_sales,percentage_change
2018,2119669585,2129242914,0.4516
2019,2257925201,2252326390,-0.2480
2020,2346142369,2318994169,-1.1571

2025-01-18 02:05:50 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:05:50 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:05:50 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:05:51 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 02:05:51 - snowflake.connector.connection - INFO - closed
2025-01-18 02:05:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:05:52 - root - INFO - SQL:
SELECT "sales"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   WHERE "sales" IS NOT NULL
   LIMIT 1000;
Results:
Too long, hard cut:
sales
3656163
996575
16509610
141942
1758388
243878
519502
371417
49557
3888162
260773
882690
38762
917
35215
30371770
374327
5185233
2980673
463738
65730
14430196
2176980
478756
3319
5306746
4511841
134249
1579
11451
31589
53567
4023
4768214
396909
8562
8723663
957939
7625
20635
2265
633917
72293
13839
68009
269176
10874
1306932
3507
1144376
3325
15074
1473178
1369115
20255591
48773122
55780
554
2126153
6603287
1026838
11086427
19049
564306
7331
2272687
1562
12836
1548637
45518
37786
48624
2156778
5941067
395877
22712143
16149
3322211
66422
27184
979807
833470
7178808
7422165
91616
661362
786613
11755
883573
2232935
12438
8473
104677
2016930
461694
1221
95547
990085
10624187
2078649
33536
35957
40760
8917
154393
2393490
3288
1437
30264
530397
2494
3101538
158799
1096531
35519
16520774
45036
126801
56734
6218547
1373529
3964262
14694
690966
1520060
52421
3352338
6107
402380
14910405
25858
4085
481198
11133538
1063716
1001335
63989387
79359
836865
67279
11863
72565
3749562
40740
5786447
250536
2056315
372
136743
16103
407861
10501
451994
29757
125653
35572
35314
83877
2819145
2770220
224778
210754
51883
15077
18437
472
411147
55333
85926
20927
1657269
6147
4894437
44346247
839437
134990
23057
49263
1493771
57455
561282
930478
132424
20860
6891042
269373
16755039
33200
9284850
887564
27732
2423159
15927
44500
623
1769576
665292
2186307
277104
2234801
25762
312519
4971
3227065
269863
2291992
150741
46931
30015
5527494
128749
48912
2829225
815588
471837
372983
48796
25570
694767
121005
944157
2299419
18073554
479002
458589
80612
2472247
69079
11256
2340
8381
4929679
4917788
1924
70596
1026555
14789
26393
44081216
397206
489706
258395
1082176
71730
809732
138404
136429
1464490
3383683
437390
32507
988
7823
2023506
40229
6585
26362
50284
14534326
50201
2470906
637913
13605
4996901
6803
3295
1307272
35424
471401
21917
2666
17385
919265
928412
16312
1116468
29642
126151
6645099
2371526
13461
39564
120729
270496
45870
13692
10269
760
3387
567165
11196782
34932
125849
2227688
3010765
31067
47032
9372
7470104
310461
6265
4841694
1547953
52387
36620
89309
813088
7671
82693
58239
18083790
266751
378826
2208090
74178
11098
152027
625492
66080
9346295
2140
8698
680924
679544
10733
42883
1292
8036
4463
840537
1096534
20686
1931973
5452817
20669
2456263
106346
641
2337007
4573475
14854110
1015278
6906988
34728
3741035
2819086
3241876
71648
52221
809
3630
2280564
115870
1033296
500046
29492
14157
64047
26524
64142815
214075
54039
7374481
1561210
469133
11980
16616246
43242
10645503
22769738
20476242
1524244
1407
528808
53692
33223
78136
16290625
996924
13714
4182786
2836
413897
9137
159543
1298505
10941951
207813
5239692
3330717
537132
3280
5765461
266237
131072
10467
25194
1797843
38345
6315069
129020
1860988
486331
28542
18712
5133194
2462103
50412
1064389
697708
3967870
1032953
863537
258305
135256
16974
1869997
976399
47335
360482
133782
86927
17670
38556
486
48873892
3192813
64341
20685
16395314
387214
55996
836190
89676
3154333
288470
777026
2478289
70227
5212768
267523
408353
67176
64705
679
914171
29672
17632
885333
1685
386494
3787305
318
4928018
8667351
11312
17346
18969
6032018
457814
4271
1015962
2165779
557640
60937
2814143
1488390
30166464
1414999
546690
2267164
383717
41345
2211329
24784
1773019
16139861
199
3828901
40596
4001
166106
10905332
2644212
32059
398543
835663
244502
486614
13673
50681
800804
1412
8678
9779
22610
596390
7745
29942596
1266247
5073372
10896424
466859
916054
2037182
373940
65504
22773234
913223
983842
14221
32930
18084
21468
265997
60436
1675283
3020
41059
1250772
1002507
47810123
2153208
1134144
19877010
1277367
5273053
1699
355884
41827
3617509
10924
1446964
212219
524853
31608
58876
53030
2729635
2224
38114
84305
74690
3274278
1633
1068
7066700
12192
556672
9569
1931124
471211
593
46232
880164
766933
483235
2166279
35185
61480
1441867
52721
6472772
2224654
2078217
4764104
4804807
5799
12880
5742
958584
20831
354
2396327
196866
659557
405589
1941072
16388534
4369157
34274
14503756
105769
94505
3912906
317465
128297
123399
28697
3137725
22123
2710
87587
6347
268347
16176
2921332
779071
12524
57614
4808790
3213
1559841
5717894
644709
2058152
6051427
387318
23675
845338
2416174
45713
874082
1057891
33141
26023
1599
6123591
15761
621053
5845
123917
63334453
894642
3448590
1077
2200563
7415
368572
49916
404619
27185
73925
55995
18426
10304393
48155
384548
8256
885237
15916
980601
1695344
130673
34939
545091
6906
187
4848872
5734
469577
73775
108996
963016
130572
44301952
8408
4506
11766
464078
2838862
14564224
2422702
24158
19159
13301
239332
17601663
52204
581819
237160
128072
2165593
114229
18101
8634287
62113
54266
49047
3505589
263342
132755
26856
1321634
87885
5322541
13519
9224860
35386
256974
16378438
32131
6889807
2313650
457017
90457
143406
135718
32055
1362736
33973
7366089
4431
2918338
4448
67376
432164
806
302157
1001518
62170
37346
795013
754876
6740764
210922
3707
14470
1765560
2644705
235905
31132
50571
153407
138141
46890
1735568
61261
869093
10752020
203301
823074
809294
2

2025-01-18 02:05:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:05:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:05:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:05:53 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 02:05:53 - snowflake.connector.connection - INFO - closed
2025-01-18 02:05:53 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:06:36 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:06:36 - root - INFO - ```sql
WITH parsed_dates AS (
  SELECT
    "sales",
    TO_NUMBER(SPLIT_PART("week_date", '/', 1)) AS "day",
    TO_NUMBER(SPLIT_PART("week_date", '/', 2)) AS "month",
    (2000 + TO_NUMBER(SPLIT_PART("week_date", '/', 3))) AS "year"
  FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
)
SELECT
  "year",
  SUM(CASE
    WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN ("month" = 6 AND "day" >= 15) OR ("month" = 7 AND "day" < 15)
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales",
  ROUND(
    (SUM(
      CASE
        WHEN ("month" = 6 AND "day" >= 15) OR ("month" = 7 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    )) / NULLIF(SUM(
      CASE
        WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    ), 0) * 100, 4
  ) AS "percentage_change"
FROM parsed_dates
WHERE "year" IN (2018, 2019, 2020)
GROUP BY "year"
ORDER BY "year";
```
2025-01-18 02:06:36 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:06:36 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:06:36 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:06:37 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-18 02:06:37 - snowflake.connector.connection - INFO - closed
2025-01-18 02:06:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:06:37 - root - INFO - SQL:
WITH parsed_dates AS (
  SELECT
    "sales",
    TO_NUMBER(SPLIT_PART("week_date", '/', 1)) AS "day",
    TO_NUMBER(SPLIT_PART("week_date", '/', 2)) AS "month",
    (2000 + TO_NUMBER(SPLIT_PART("week_date", '/', 3))) AS "year"
  FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
)
SELECT
  "year",
  SUM(CASE
    WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN ("month" = 6 AND "day" >= 15) OR ("month" = 7 AND "day" < 15)
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales",
  ROUND(
    (SUM(
      CASE
        WHEN ("month" = 6 AND "day" >= 15) OR ("month" = 7 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    )) / NULLIF(SUM(
      CASE
        WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    ), 0) * 100, 4
  ) AS "percentage_change"
FROM parsed_dates
WHERE "year" IN (2018, 2019, 2020)
GROUP BY "year"
ORDER BY "year";
Results:
year,pre_june15_sales,post_june15_sales,percentage_change
2018,2125140809,2129242914,0.1930
2019,2249989796,2252326390,0.1038
2020,2345878357,2904930571,23.8313

2025-01-18 02:06:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:06:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:06:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:06:39 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 02:06:39 - snowflake.connector.connection - INFO - closed
2025-01-18 02:06:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:07:41 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:07:41 - root - INFO - ```sql
WITH dates AS (
    SELECT 
        "sales",
        TO_DATE("week_date", 'DD/M/YY') AS "week_date_parsed"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    WHERE TRY_TO_DATE("week_date", 'DD/M/YY') IS NOT NULL
)
SELECT
    EXTRACT(YEAR FROM "week_date_parsed") AS "year",
    SUM(CASE 
        WHEN "week_date_parsed" >= DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        AND "week_date_parsed" < DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
        THEN "sales"
        ELSE 0
    END) AS "pre_june15_sales",
    SUM(CASE 
        WHEN "week_date_parsed" >= DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
        AND "week_date_parsed" < DATEADD(WEEK, 4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        THEN "sales"
        ELSE 0
    END) AS "post_june15_sales",
    ROUND(
        (SUM(CASE 
            WHEN "week_date_parsed" >= DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
            AND "week_date_parsed" < DATEADD(WEEK, 4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
            THEN "sales"
            ELSE 0
        END) - 
        SUM(CASE 
            WHEN "week_date_parsed" >= DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
            AND "week_date_parsed" < DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
            THEN "sales"
            ELSE 0
        END)
        ) / NULLIF(SUM(CASE 
            WHEN "week_date_parsed" >= DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
            AND "week_date_parsed" < DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
            THEN "sales"
            ELSE 0
        END),0) * 100, 4
    ) AS "percentage_change"
FROM dates
WHERE EXTRACT(YEAR FROM "week_date_parsed") IN (2018, 2019, 2020)
GROUP BY "year"
ORDER BY "year";
```
2025-01-18 02:07:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:07:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:07:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:07:42 - snowflake.connector.connection - INFO - closed
2025-01-18 02:07:42 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:08:29 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:08:29 - root - INFO - It appears that the error arises because the `"week_date"` column is stored as a string in the format `'DD/M/YY'`, and we're attempting to compare it directly with dates in the `'YYYY-MM-DD'` format. To resolve this, we need to parse the `"week_date"` string into a proper date format that SQL can recognize for comparison.

Here is the corrected SQL query to perform the analysis:

```sql
WITH parsed_sales AS (
    SELECT
        TO_DATE("week_date", 'DD/M/YY') AS "week_date_parsed",
        "sales"
    FROM
        "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    WHERE
        TRY_TO_DATE("week_date", 'DD/M/YY') IS NOT NULL
)
SELECT
    EXTRACT(YEAR FROM "week_date_parsed") AS "year",
    SUM(
        CASE
            WHEN "week_date_parsed" BETWEEN DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
            AND DATEADD(DAY, -1, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
            THEN "sales"
            ELSE 0
        END
    ) AS "pre_june15_sales",
    SUM(
        CASE
            WHEN "week_date_parsed" BETWEEN DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
            AND DATEADD(WEEK, 4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)) - 1
            THEN "sales"
            ELSE 0
        END
    ) AS "post_june15_sales",
    ROUND(
        (SUM(
            CASE
                WHEN "week_date_parsed" BETWEEN DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
                AND DATEADD(WEEK, 4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)) - 1
                THEN "sales"
                ELSE 0
            END
        ) - SUM(
            CASE
                WHEN "week_date_parsed" BETWEEN DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
                AND DATEADD(DAY, -1, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
                THEN "sales"
                ELSE 0
            END
        )) / NULLIF(SUM(
            CASE
                WHEN "week_date_parsed" BETWEEN DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
                AND DATEADD(DAY, -1, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
                THEN "sales"
                ELSE 0
            END
        ), 0) * 100, 4
    ) AS "percentage_change"
FROM
    parsed_sales
WHERE
    EXTRACT(YEAR FROM "week_date_parsed") IN (2018, 2019, 2020)
GROUP BY
    "year"
ORDER BY
    "year";
```

**Explanation:**

- **Parsing the Dates:**
  - The `TO_DATE("week_date", 'DD/M/YY')` function converts the `"week_date"` string into a date format. The `'DD/M/YY'` format handles dates like `'31/8/20'`.
  - The `TRY_TO_DATE` function ensures that only valid dates are considered, filtering out any invalid entries.

- **Calculating Sales Before and After June 15:**
  - For each year, we sum the `"sales"` for the four weeks before June 15 (`"pre_june15_sales"`) and the four weeks after June 15 (`"post_june15_sales"`).
  - We use `DATE_FROM_PARTS` to construct June 15 of each year.
  - `DATEADD` adjusts the dates by weeks to define the 4-week periods.

- **Calculating the Percentage Change:**
  - We compute the percentage change using the formula:
    \[
    \text{percentage\_change} = \left( \frac{\text{post\_june15\_sales} - \text{pre\_june15\_sales}}{\text{pre\_june15\_sales}} \right) \times 100
    \]
  - `NULLIF` prevents division by zero in cases where `pre_june15_sales` might be zero.
  - The result is rounded to four decimal places.

**Here is the requested output in CSV format:**

```csv
year,pre_june15_sales,post_june15_sales,percentage_change
2018,num:float,num:float,float
2019,num:float,num:float,float
2020,num:float,num:float,float
```

*Note:* The `percentage_change` is calculated as described and is expressed as a numeric value without the `%` symbol.

**Additional Notes:**

- Ensure that all date formats match the data in your `"week_date"` column.
- The `TO_DATE` function with the format `'DD/M/YY'` accommodates dates without leading zeros.
- Adjust the date ranges if your business logic requires different periods.

**Example Calculation of Percentage Change:**

If for 2018:
- `pre_june15_sales` = 2,000,000
- `post_june15_sales` = 2,100,000

Then:
\[
\text{percentage\_change} = \left( \frac{2,100,000 - 2,000,000}{2,000,000} \right) \times 100 = 5.0000
\]

Feel free to run the provided SQL query to obtain the exact figures from your database.
2025-01-18 02:08:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:08:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:08:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:08:31 - snowflake.connector.connection - INFO - closed
2025-01-18 02:08:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:09:35 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:09:35 - root - INFO - ```sql
WITH parsed_sales AS (
    SELECT
        "week_date",
        "sales",
        TO_DATE(
            LPAD(SPLIT_PART("week_date", '/', 1), 2, '0') || '/' ||
            LPAD(SPLIT_PART("week_date", '/', 2), 2, '0') || '/' ||
            LPAD(SPLIT_PART("week_date", '/', 2), 2, '0'),
            'DD/MM/YY'
        ) AS "week_date_parsed"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    WHERE TRY_TO_DATE(
        LPAD(SPLIT_PART("week_date", '/', 1), 2, '0') || '/' ||
        LPAD(SPLIT_PART("week_date", '/', 2), 2, '0') || '/' ||
        LPAD(SPLIT_PART("week_date", '/', 3), 2, '0'),
        'DD/MM/YY'
    ) IS NOT NULL
)
SELECT
    EXTRACT(YEAR FROM "week_date_parsed") AS "year",
    SUM(CASE
        WHEN "week_date_parsed" BETWEEN DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        AND DATEADD(DAY, -1, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        THEN "sales"
        ELSE 0
    END) AS "pre_june15_sales",
    SUM(CASE
        WHEN "week_date_parsed" BETWEEN DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
        AND DATEADD(WEEK, 4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)) - 1
        THEN "sales"
        ELSE 0
    END) AS "post_june15_sales",
    ROUND((
        SUM(CASE
            WHEN "week_date_parsed" BETWEEN DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
            AND DATEADD(WEEK, 4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)) - 1
            THEN "sales"
            ELSE 0
        END) - SUM(CASE
            WHEN "week_date_parsed" BETWEEN DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
            AND DATEADD(DAY, -1, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
            THEN "sales"
            ELSE 0
        END)
    ) / NULLIF(SUM(CASE
        WHEN "week_date_parsed" BETWEEN DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        AND DATEADD(DAY, -1, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        THEN "sales"
        ELSE 0
    END), 0) * 100, 4) AS "percentage_change"
FROM parsed_sales
WHERE EXTRACT(YEAR FROM "week_date_parsed") IN (2018, 2019, 2020)
GROUP BY "year"
ORDER BY "year";
```
2025-01-18 02:09:35 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:09:35 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:09:35 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:09:37 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 02:09:37 - snowflake.connector.connection - INFO - closed
2025-01-18 02:09:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:09:37 - root - INFO - SQL:
WITH parsed_sales AS (
    SELECT
        "week_date",
        "sales",
        TO_DATE(
            LPAD(SPLIT_PART("week_date", '/', 1), 2, '0') || '/' ||
            LPAD(SPLIT_PART("week_date", '/', 2), 2, '0') || '/' ||
            LPAD(SPLIT_PART("week_date", '/', 2), 2, '0'),
            'DD/MM/YY'
        ) AS "week_date_parsed"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    WHERE TRY_TO_DATE(
        LPAD(SPLIT_PART("week_date", '/', 1), 2, '0') || '/' ||
        LPAD(SPLIT_PART("week_date", '/', 2), 2, '0') || '/' ||
        LPAD(SPLIT_PART("week_date", '/', 3), 2, '0'),
        'DD/MM/YY'
    ) IS NOT NULL
)
SELECT
    EXTRACT(YEAR FROM "week_date_parsed") AS "year",
    SUM(CASE
        WHEN "week_date_parsed" BETWEEN DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        AND DATEADD(DAY, -1, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        THEN "sales"
        ELSE 0
    END) AS "pre_june15_sales",
    SUM(CASE
        WHEN "week_date_parsed" BETWEEN DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
        AND DATEADD(WEEK, 4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)) - 1
        THEN "sales"
        ELSE 0
    END) AS "post_june15_sales",
    ROUND((
        SUM(CASE
            WHEN "week_date_parsed" BETWEEN DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
            AND DATEADD(WEEK, 4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)) - 1
            THEN "sales"
            ELSE 0
        END) - SUM(CASE
            WHEN "week_date_parsed" BETWEEN DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
            AND DATEADD(DAY, -1, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
            THEN "sales"
            ELSE 0
        END)
    ) / NULLIF(SUM(CASE
        WHEN "week_date_parsed" BETWEEN DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        AND DATEADD(DAY, -1, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        THEN "sales"
        ELSE 0
    END), 0) * 100, 4) AS "percentage_change"
FROM parsed_sales
WHERE EXTRACT(YEAR FROM "week_date_parsed") IN (2018, 2019, 2020)
GROUP BY "year"
ORDER BY "year";
Results:
No data found for the specified query.

2025-01-18 02:09:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:09:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:09:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:09:39 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 02:09:39 - snowflake.connector.connection - INFO - closed
2025-01-18 02:09:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:10:10 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:10:10 - root - INFO - ```sql
WITH parsed_dates AS (
  SELECT
    "sales",
    TO_NUMBER(SPLIT_PART("week_date", '/', 1)) AS "day",
    TO_NUMBER(SPLIT_PART("week_date", '/', 2)) AS "month",
    (2000 + TO_NUMBER(SPLIT_PART("week_date", '/', 3))) AS "year"
  FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
)
SELECT
  "year",
  SUM(CASE
    WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN ("month" = 6 AND "day" >= 15) OR ("month" = 7 AND "day" < 15)
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales",
  ROUND(
    (SUM(
      CASE
        WHEN ("month" = 6 AND "day" >= 15) OR ("month" = 7 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    )) / NULLIF(SUM(
      CASE
        WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    ), 0) * 100, 4
  ) AS "percentage_change"
FROM parsed_dates
WHERE "year" IN (2018, 2019, 2020)
GROUP BY "year"
ORDER BY "year";
```
2025-01-18 02:10:10 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:10:10 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:10:10 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:10:12 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-18 02:10:12 - snowflake.connector.connection - INFO - closed
2025-01-18 02:10:12 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:10:12 - root - INFO - SQL:
WITH parsed_dates AS (
  SELECT
    "sales",
    TO_NUMBER(SPLIT_PART("week_date", '/', 1)) AS "day",
    TO_NUMBER(SPLIT_PART("week_date", '/', 2)) AS "month",
    (2000 + TO_NUMBER(SPLIT_PART("week_date", '/', 3))) AS "year"
  FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
)
SELECT
  "year",
  SUM(CASE
    WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN ("month" = 6 AND "day" >= 15) OR ("month" = 7 AND "day" < 15)
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales",
  ROUND(
    (SUM(
      CASE
        WHEN ("month" = 6 AND "day" >= 15) OR ("month" = 7 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    )) / NULLIF(SUM(
      CASE
        WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    ), 0) * 100, 4
  ) AS "percentage_change"
FROM parsed_dates
WHERE "year" IN (2018, 2019, 2020)
GROUP BY "year"
ORDER BY "year";
Results:
year,pre_june15_sales,post_june15_sales,percentage_change
2018,2125140809,2129242914,0.1930
2019,2249989796,2252326390,0.1038
2020,2345878357,2904930571,23.8313

2025-01-18 02:10:12 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:10:12 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:10:12 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:10:14 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-18 02:10:14 - snowflake.connector.connection - INFO - closed
2025-01-18 02:10:14 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:10:14 - root - INFO - SQL:
SELECT DISTINCT "customer_type"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES";
Results:
customer_type
New
Guest
Existing

2025-01-18 02:10:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:10:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:10:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:10:15 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 02:10:15 - snowflake.connector.connection - INFO - closed
2025-01-18 02:10:16 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:10:16 - root - INFO - SQL:
SELECT "transactions", "sales"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    LIMIT 1000;
Results:
Too long, hard cut:
transactions,sales
120631,3656163
31574,996575
529151,16509610
4517,141942
58046,1758388
1336,243878
2514,519502
2158,371417
318,49557
111032,3888162
1398,260773
4661,882690
1029,38762
6,917
115,35215
551905,30371770
1969,374327
97604,5185233
111219,2980673
11820,463738
1363,65730
284971,14430196
70496,2176980
2678,478756
22,3319
94274,5306746
94287,4511841
3064,134249
7,1579
329,11451
854,31589
180,53567
15,4023
112361,4768214
2269,396909
58,8562
142898,8723663
4703,957939
40,7625
164,20635
20,2265
14583,633917
452,72293
382,13839
1503,68009
7033,269176
329,10874
24153,1306932
15,3507
18676,1144376
19,3325
87,15074
29577,1473178
41631,1369115
402652,20255591
1936351,48773122
413,55780
4,554
43493,2126153
169157,6603287
5893,1026838
245151,11086427
119,19049
2983,564306
32,7331
40076,2272687
7,1562
88,12836
46545,1548637
228,45518
1045,37786
279,48624
66042,2156778
117018,5941067
6769,395877
403810,22712143
74,16149
61517,3322211
1655,66422
201,27184
5794,979807
23416,833470
144056,7178808
151673,7422165
585,91616
18180,661362
30402,786613
69,11755
26620,883573
58165,2232935
97,12438
37,8473
2857,104677
65594,2016930
9710,461694
3,1221
567,95547
36069,990085
220712,10624187
11218,2078649
205,33536
299,35957
953,40760
45,8917
846,154393
57648,2393490
21,3288
9,1437
190,30264
2647,530397
21,2494
91435,3101538
3843,158799
28987,1096531
245,35519
339633,16520774
182,45036
659,126801
340,56734
187781,6218547
6870,1373529
172521,3964262
105,14694
19524,690966
53286,1520060
2466,52421
97001,3352338
36,6107
2031,402380
277600,14910405
157,25858
20,4085
2801,481198
396145,11133538
28592,1063716
23062,1001335
2437738,63989387
343,79359
3920,836865
384,67279
329,11863
1738,72565
110894,3749562
196,40740
102736,5786447
4652,250536
50786,2056315
3,372
731,136743
115,16103
2172,407861
63,10501
13579,451994
164,29757
726,125653
247,35572
277,35314
507,83877
132545,2819145
89785,2770220
1083,224778
1282,210754
300,51883
100,15077
414,18437
3,472
8410,411147
249,55333
3087,85926
122,20927
37883,1657269
46,6147
110176,4894437
1547309,44346247
4498,839437
789,134990
109,23057
1352,49263
38663,1493771
389,57455
14685,561282
22186,930478
842,132424
135,20860
186404,6891042
1689,269373
413244,16755039
228,33200
260181,9284850
14482,887564
118,27732
97673,2423159
113,15927
1266,44500
6,623
46838,1769576
18774,665292
40024,2186307
1420,277104
87269,2234801
154,25762
1501,312519
22,4971
62206,3227065
1621,269863
65304,2291992
3211,150741
278,46931
138,30015
96079,5527494
739,128749
1098,48912
83764,2829225
14816,815588
2568,471837
1916,372983
333,48796
906,25570
14146,694767
621,121005
4911,944157
56256,2299419
345420,18073554
2647,479002
14915,458589
438,80612
69632,2472247
522,69079
312,11256
17,2340
61,8381
153925,4929679
129513,4917788
12,1924
376,70596
29338,1026555
98,14789
134,26393
1548059,44081216
1898,397206
2592,489706
1350,258395
28566,1082176
430,71730
30970,809732
773,138404
2986,136429
29326,1464490
98743,3383683
13219,437390
167,32507
5,988
46,7823
65546,2023506
932,40229
30,6585
132,26362
318,50284
287091,14534326
1127,50201
69461,2470906
18109,637913
76,13605
129144,4996901
40,6803
14,3295
6502,1307272
269,35424
2673,471401
151,21917
16,2666
446,17385
21594,919265
4689,928412
89,16312
18657,1116468
949,29642
762,126151
169736,6645099
40597,2371526
96,13461
293,39564
695,120729
1658,270496
301,45870
84,13692
62,10269
5,760
27,3387
2947,567165
244816,11196782
154,34932
687,125849
40986,2227688
134550,3010765
773,31067
151,47032
314,9372
152920,7470104
1420,310461
20,6265
113188,4841694
53411,1547953
2393,52387
238,36620
555,89309
15076,813088
38,7671
3053,82693
386,58239
348114,18083790
6852,266751
6739,378826
64558,2208090
1652,74178
292,11098
799,152027
14862,625492
338,66080
261672,9346295
17,2140
55,8698
19493,680924
18943,679544
279,10733
1202,42883
7,1292
36,8036
28,4463
14483,840537
29273,1096534
96,20686
10804,1931973
96492,5452817
128,20669
58184,2456263
2918,106346
5,641
65760,2337007
94451,4573475
279576,14854110
23267,1015278
188391,6906988
239,34728
121636,3741035
90129,2819086
61805,3241876
1735,71648
287,52221
4,809
14,3630
56667,2280564
563,115870
5776,1033296
2603,500046
113,29492
93,14157
1330,64047
160,26524
2433987,64142815
1254,214075
311,54039
146120,7374481
47161,1561210
9838,469133
67,11980
343102,16616246
159,43242
220882,10645503
407927,22769738
403795,20476242
42198,1524244
6,1407
15253,528808
315,53692
192,33223
404,78136
405864,16290625
27156,996924
64,13714
176101,4182786
14,2836
2297,413897
52,9137
3841,159543
24088,1298505
394587,10941951
974,207813
98813,5239692
112315,3330717
12337,537132
12,3280
103120,5765461
4953,266237
650,131072
80,10467
124,25194
47022,1797843
952,38345
188753,6315069
2962,129020
58705,1860988
2331,486331
208,28542
91,18712
155586,5133194
87964,2462103
1374,50412
37271,1064389
13157,697708
111964,3967870
31513,1032953
4527,863537
1334,258305
4520,135256
106,16974
45824,1869997
5867,976399
216,47335
7536,360482
769,133782
536,86927
115,17670
987,38556
4,486
191

2025-01-18 02:10:16 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:10:16 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:10:16 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:10:17 - snowflake.connector.cursor - INFO - Number of results in first chunk: 10
2025-01-18 02:10:17 - snowflake.connector.connection - INFO - closed
2025-01-18 02:10:17 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:10:18 - root - INFO - SQL:
SELECT "week_date", "sales"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    ORDER BY "sales" DESC
    LIMIT 10;
Results:
week_date,sales
23/3/20,69763805
30/3/20,68637072
1/4/19,68245299
8/4/19,67537025
4/5/20,67372865
6/5/19,67213310
25/3/19,67081020
29/4/19,67067216
2/9/19,66938191
13/4/20,66917047

2025-01-18 02:10:18 - root - INFO - itercount: 0
2025-01-18 02:10:18 - root - INFO - Database Name: BANK_SALES_TRADING
Schema Name: BANK_SALES_TRADING
DDL describes table information.
,0
table_name,INTEREST_MAP
description,
DDL,"create or replace TABLE INTEREST_MAP (
	""id"" NUMBER(38,0),
	""interest_name"" VARCHAR(16777216),
	""interest_summary"" VARCHAR(16777216),
	""created_at"" VARCHAR(16777216),
	""last_modified"" VARCHAR(16777216)
);"

,1
table_name,INTEREST_METRICS
description,
DDL,"create or replace TABLE INTEREST_METRICS (
	""_month"" FLOAT,
	""_year"" FLOAT,
	""month_year"" VARCHAR(16777216),
	""interest_id"" FLOAT,
	""composition"" FLOAT,
	""index_value"" FLOAT,
	""ranking"" NUMBER(38,0),
	""percentile_ranking"" FLOAT
);"

,2
table_name,BITCOIN_PRICES
description,
DDL,"create or replace TABLE BITCOIN_PRICES (
	""ticker"" VARCHAR(16777216),
	""market_date"" VARCHAR(16777216),
	""price"" FLOAT,
	""open"" FLOAT,
	""high"" FLOAT,
	""low"" FLOAT,
	""volume"" VARCHAR(16777216),
	""change"" VARCHAR(16777216)
);"

,3
table_name,SHOPPING_CART_CAMPAIGN_IDENTIFIER
description,
DDL,"create or replace TABLE SHOPPING_CART_CAMPAIGN_IDENTIFIER (
	""campaign_id"" NUMBER(38,0),
	""products"" VARCHAR(16777216),
	""campaign_name"" VARCHAR(16777216),
	""start_date"" VARCHAR(16777216),
	""end_date"" VARCHAR(16777216)
);"

,4
table_name,SHOPPING_CART_EVENT_IDENTIFIER
description,
DDL,"create or replace TABLE SHOPPING_CART_EVENT_IDENTIFIER (
	""event_type"" NUMBER(38,0),
	""event_name"" VARCHAR(16777216)
);"

,5
table_name,VEG_CAT
description,
DDL,"create or replace TABLE VEG_CAT (
	""index"" NUMBER(38,0),
	""item_code"" NUMBER(38,0),
	""item_name"" VARCHAR(16777216),
	""category_code"" NUMBER(38,0),
	""category_name"" VARCHAR(16777216)
);"

,6
table_name,VEG_WHSLE_DF
description,
DDL,"create or replace TABLE VEG_WHSLE_DF (
	""index"" NUMBER(38,0),
	""whsle_date"" VARCHAR(16777216),
	""item_code"" NUMBER(38,0),
	""whsle_px_rmb-kg"" FLOAT
);"

,7
table_name,BITCOIN_TRANSACTIONS
description,
DDL,"create or replace TABLE BITCOIN_TRANSACTIONS (
	""txn_id"" NUMBER(38,0),
	""member_id"" VARCHAR(16777216),
	""ticker"" VARCHAR(16777216),
	""txn_date"" VARCHAR(16777216),
	""txn_type"" VARCHAR(16777216),
	""quantity"" FLOAT,
	""percentage_fee"" FLOAT,
	""txn_time"" VARCHAR(16777216)
);"

,8
table_name,SHOPPING_CART_EVENTS
description,
DDL,"create or replace TABLE SHOPPING_CART_EVENTS (
	""visit_id"" VARCHAR(16777216),
	""cookie_id"" VARCHAR(16777216),
	""page_id"" NUMBER(38,0),
	""event_type"" NUMBER(38,0),
	""sequence_number"" NUMBER(38,0),
	""event_time"" VARCHAR(16777216)
);"

,9
table_name,VEG_LOSS_RATE_DF
description,
DDL,"create or replace TABLE VEG_LOSS_RATE_DF (
	""index"" NUMBER(38,0),
	""item_code"" NUMBER(38,0),
	""item_name"" VARCHAR(16777216),
	""loss_rate_%"" FLOAT
);"

,10
table_name,CUSTOMER_NODES
description,
DDL,"create or replace TABLE CUSTOMER_NODES (
	""customer_id"" NUMBER(38,0),
	""region_id"" NUMBER(38,0),
	""node_id"" NUMBER(38,0),
	""start_date"" VARCHAR(16777216),
	""end_date"" VARCHAR(16777216)
);"

,11
table_name,WEEKLY_SALES
description,
DDL,"create or replace TABLE WEEKLY_SALES (
	""week_date"" VARCHAR(16777216),
	""region"" VARCHAR(16777216),
	""platform"" VARCHAR(16777216),
	""segment"" VARCHAR(16777216),
	""customer_type"" VARCHAR(16777216),
	""transactions"" NUMBER(38,0),
	""sales"" NUMBER(38,0)
);"

,12
table_name,BITCOIN_MEMBERS
description,
DDL,"create or replace TABLE BITCOIN_MEMBERS (
	""member_id"" VARCHAR(16777216),
	""first_name"" VARCHAR(16777216),
	""region"" VARCHAR(16777216)
);"

,13
table_name,CLEANED_WEEKLY_SALES
description,
DDL,"create or replace TABLE CLEANED_WEEKLY_SALES (
	""week_date_formatted"" VARCHAR(16777216),
	""week_date"" VARCHAR(16777216),
	""region"" VARCHAR(16777216),
	""platform"" VARCHAR(16777216),
	""segment"" VARCHAR(16777216),
	""customer_type"" VARCHAR(16777216),
	""transactions"" NUMBER(38,0),
	""sales"" NUMBER(38,0),
	""week_number"" NUMBER(38,0),
	""month_number"" NUMBER(38,0),
	""calendar_year"" NUMBER(38,0),
	""age_band"" VARCHAR(16777216),
	""demographic"" VARCHAR(16777216),
	""avg_transaction"" FLOAT
);"

,14
table_name,CUSTOMER_REGIONS
description,
DDL,"create or replace TABLE CUSTOMER_REGIONS (
	""region_id"" NUMBER(38,0),
	""region_name"" VARCHAR(16777216)
);"

,15
table_name,CUSTOMER_TRANSACTIONS
description,
DDL,"create or replace TABLE CUSTOMER_TRANSACTIONS (
	""customer_id"" NUMBER(38,0),
	""txn_date"" VARCHAR(16777216),
	""txn_type"" VARCHAR(16777216),
	""txn_amount"" NUMBER(38,0)
);"

,16
table_name,SHOPPING_CART_USERS
description,
DDL,"create or replace TABLE SHOPPING_CART_USERS (
	""user_id"" NUMBER(38,0),
	""cookie_id"" VARCHAR(16777216),
	""start_date"" VARCHAR(16777216)
);"

,17
table_name,VEG_TXN_DF
description,
DDL,"create or replace TABLE VEG_TXN_DF (
	""index"" NUMBER(38,0),
	""txn_date"" VARCHAR(16777216),
	""txn_time"" VARCHAR(16777216),
	""item_code"" NUMBER(38,0),
	""qty_sold(kg)"" FLOAT,
	""unit_selling_px_rmb/kg"" FLOAT,
	""sale/return"" VARCHAR(16777216),
	""discount(%)"" NUMBER(38,0),
	""day_of_week"" VARCHAR(16777216)
);"

,18
table_name,SHOPPING_CART_PAGE_HIERARCHY
description,
DDL,"create or replace TABLE SHOPPING_CART_PAGE_HIERARCHY (
	""page_id"" NUMBER(38,0),
	""page_name"" VARCHAR(16777216),
	""product_category"" VARCHAR(16777216),
	""product_id"" FLOAT
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'BANK_SALES_TRADING': {'BANK_SALES_TRADING': ['BITCOIN_MEMBERS', 'BITCOIN_PRICES', 'BITCOIN_TRANSACTIONS', 'CLEANED_WEEKLY_SALES', 'CUSTOMER_NODES', 'CUSTOMER_REGIONS', 'CUSTOMER_TRANSACTIONS', 'INTEREST_MAP', 'INTEREST_METRICS', 'SHOPPING_CART_CAMPAIGN_IDENTIFIER', 'SHOPPING_CART_EVENTS', 'SHOPPING_CART_EVENT_IDENTIFIER', 'SHOPPING_CART_PAGE_HIERARCHY', 'SHOPPING_CART_USERS', 'VEG_CAT', 'VEG_LOSS_RATE_DF', 'VEG_TXN_DF', 'VEG_WHSLE_DF', 'WEEKLY_SALES']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

- **Table:** `"WEEKLY_SALES"`

- **Columns:**
  - `"week_date"`: Potential usage - Represents the date of each week; used to filter and select the four weeks before and after June 15 for each year.
  - `"sales"`: Potential usage - Contains the sales amount for each week; used to calculate total sales in the specified periods.
  - `"transactions"`: Potential usage - May provide additional context on the number of transactions during each week.
  - `"region"`, `"platform"`, `"segment"`, `"customer_type"`: Potential usage - Could be used for additional analysis or filtering if needed.

**Conditions that may be used:**

- Filter `"week_date"` to select the four weeks before and after June 15 for the years 2018, 2019, and 2020.
- Ensure that `"sales"` data is not null and is a valid number.
- Possibly convert `"week_date"` to a date format if it's stored as a string.

---

**SQL Queries to Understand the Data:**

1. **View distinct formats of "week_date" to understand its structure:**
   ```sql
   SELECT DISTINCT "week_date"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   ORDER BY "week_date"
   LIMIT 1000;
   ```

2. **Find the earliest and latest "week_date" values:**
   ```sql
   SELECT MIN("week_date") AS "earliest_date", MAX("week_date") AS "latest_date"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES";
   ```

3. **Count the number of records per year to see available data:**
   ```sql
   SELECT SUBSTRING("week_date", 1, 4) AS "year", COUNT(*) AS "record_count"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   GROUP BY SUBSTRING("week_date", 1, 4);
   ```

4. **List "week_date" and "sales" for the year 2018 to observe data patterns:**
   ```sql
   SELECT "week_date", "sales"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   WHERE "week_date" LIKE '2018%'
   ORDER BY "week_date"
   LIMIT 1000;
   ```

5. **List "week_date" and "sales" for the year 2019 to observe data patterns:**
   ```sql
   SELECT "week_date", "sales"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   WHERE "week_date" LIKE '2019%'
   ORDER BY "week_date"
   LIMIT 1000;
   ```

6. **List "week_date" and "sales" for the year 2020 to observe data patterns:**
   ```sql
   SELECT "week_date", "sales"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   WHERE "week_date" LIKE '2020%'
   ORDER BY "week_date"
   LIMIT 1000;
   ```

7. **Check if "week_date" can be converted to a date type to use date functions:**
   ```sql
   SELECT "week_date", TRY_TO_DATE("week_date", 'YYYY-MM-DD') AS "date_converted"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   LIMIT 1000;
   ```

8. **Identify any null or invalid "sales" entries:**
   ```sql
   SELECT COUNT(*) AS "invalid_sales_count"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   WHERE "sales" IS NULL OR "sales" < 0;
   ```

9. **Examine the distribution of "sales" values:**
   ```sql
   SELECT "sales"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   WHERE "sales" IS NOT NULL
   LIMIT 1000;
   ```

10. **Retrieve "week_date" and "sales" for weeks around mid-June 2018:**
    ```sql
    SELECT "week_date", "sales"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    WHERE "week_date" BETWEEN '2018-05-18' AND '2018-07-13'
    ORDER BY "week_date";
    ```

11. **Retrieve "week_date" and "sales" for weeks around mid-June 2019:**
    ```sql
    SELECT "week_date", "sales"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    WHERE "week_date" BETWEEN '2019-05-18' AND '2019-07-13'
    ORDER BY "week_date";
    ```

12. **Retrieve "week_date" and "sales" for weeks around mid-June 2020:**
    ```sql
    SELECT "week_date", "sales"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    WHERE "week_date" BETWEEN '2020-05-18' AND '2020-07-13'
    ORDER BY "week_date";
    ```

13. **List distinct "customer_type" values for potential segmentation:**
    ```sql
    SELECT DISTINCT "customer_type"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES";
    ```

14. **Check if "transactions" correlate with "sales":**
    ```sql
    SELECT "transactions", "sales"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    LIMIT 1000;
    ```

15. **Identify any weeks with exceptionally high or low sales:**
    ```sql
    SELECT "week_date", "sales"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    ORDER BY "sales" DESC
    LIMIT 10;
    ```

---

These queries help in understanding the structure and content of the `WEEKLY_SALES` table, the format of the `week_date` column, and the distribution of sales data. This information is essential for accurately filtering the data for the specified periods and calculating the percentage changes in sales as required for the analysis.Query:
SELECT DISTINCT "week_date"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   ORDER BY "week_date"
   LIMIT 1000;
Answer:
week_date
1/4/19
1/6/20
1/7/19
10/6/19
10/8/20
11/5/20
11/6/18
12/8/19
13/4/20
13/5/19
13/7/20
13/8/18
14/5/18
15/4/19
15/6/20
15/7/19
16/4/18
16/7/18
17/6/19
17/8/20
18/5/20
18/6/18
19/8/19
2/4/18
2/7/18
2/9/19
20/4/20
20/5/19
20/7/20
20/8/18
21/5/18
22/4/19
22/6/20
22/7/19
23/3/20
23/4/18
23/7/18
24/6/19
24/8/20
25/3/19
25/5/20
25/6/18
26/3/18
26/8/19
27/4/20
27/5/19
27/7/20
27/8/18
28/5/18
29/4/19
29/6/20
29/7/19
3/6/19
3/8/20
3/9/18
30/3/20
30/4/18
30/7/18
31/8/20
4/5/20
4/6/18
5/8/19
6/4/20
6/5/19
6/7/20
6/8/18
7/5/18
8/4/19
8/6/20
8/7/19
9/4/18
9/7/18
Query:
SELECT MIN("week_date") AS "earliest_date", MAX("week_date") AS "latest_date"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES";
Answer:
earliest_date,latest_date
1/4/19,9/7/18
Query:
SELECT SUBSTRING("week_date", 1, 4) AS "year", COUNT(*) AS "record_count"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   GROUP BY SUBSTRING("week_date", 1, 4);
Answer:
year,record_count
31/8,238
24/8,237
17/8,238
10/8,238
3/8/,238
27/7,238
20/7,238
13/7,238
6/7/,238
29/6,238
15/6,238
8/6/,238
1/6/,238
25/5,238
11/5,238
18/5,238
20/4,238
13/4,238
30/3,238
23/3,238
2/9/,237
26/8,238
12/8,238
22/7,238
1/7/,238
15/7,238
8/7/,238
24/6,238
17/6,238
20/5,238
13/5,238
6/5/,238
22/4,237
1/4/,237
25/3,238
27/8,237
20/8,237
30/7,238
9/7/,238
11/6,238
28/5,237
14/5,238
30/4,238
26/3,237
22/6,238
4/5/,238
27/4,238
6/4/,238
19/8,237
5/8/,238
29/7,238
10/6,238
3/6/,238
15/4,238
8/4/,238
3/9/,237
29/4,238
13/8,238
23/7,238
16/7,237
2/7/,237
25/6,238
18/6,238
4/6/,237
21/5,237
7/5/,237
23/4,238
16/4,237
9/4/,237
2/4/,237
27/5,238
6/8/,237
Query:
SELECT 
    (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
    SUM(CASE
        WHEN TO_DATE("week_date", 'FMDD/FM/FMYY') BETWEEN 
             DATEADD(WEEK, -4, TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY')) AND 
             DATEADD(DAY, -1, TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY'))
        THEN "sales"
        ELSE 0
    END) AS "pre_june15_sales",
    SUM(CASE
        WHEN TO_DATE("week_date", 'FMDD/FM/FMYY') BETWEEN 
             TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY') AND 
             DATEADD(WEEK, 4, DATEADD(DAY, -1, TO_DATE('15/6/' || RIGHT("week_date", 2), 'FMDD/FM/FMYY')))
        THEN "sales"
        ELSE 0
    END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE RIGHT("week_date", 2) IN ('18', '19', '20')
GROUP BY "year"
ORDER BY "year";
Answer:
100097 (22007): 01b9c8ba-0004-7b17-0001-11c300edd612: Can't parse '31/8/20' as date with format 'FMDD/FM/FMYY'Query:
WITH formatted_dates AS (
  SELECT
    "week_date",
    "sales",
    (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
    TRY_TO_DATE(
      LPAD(SPLIT_PART("week_date", '/', 1), 2, '0') || '/' ||
      LPAD(SPLIT_PART("week_date", '/', 2), 2, '0') || '/' ||
      SPLIT_PART("week_date", '/', 3),
      'DD/MM/YY'
    ) AS "parsed_date"
  FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
  WHERE RIGHT("week_date", 2) IN ('18', '19', '20')
    AND TRY_TO_DATE(
      LPAD(SPLIT_PART("week_date", '/', 1), 2, '0') || '/' ||
      LPAD(SPLIT_PART("week_date", '/', 2), 2, '0') || '/' ||
      SPLIT_PART("week_date", '/', 3),
      'DD/MM/YY'
    ) IS NOT NULL
)
SELECT
  "year",
  SUM(CASE
    WHEN "parsed_date" >= DATEADD(WEEK, -4, DATE_FROM_PARTS("year", 6, 15))
     AND "parsed_date" < DATE_FROM_PARTS("year", 6, 15)
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN "parsed_date" >= DATE_FROM_PARTS("year", 6, 15)
     AND "parsed_date" < DATEADD(WEEK, 4, DATE_FROM_PARTS("year", 6, 15))
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales"
FROM formatted_dates
GROUP BY "year"
ORDER BY "year";
Answer:
year,pre_june15_sales,post_june15_sales
2018,2125140809,2129242914
2019,2249989796,2252326390
2020,2345878357,2318994169
Query:
SELECT
  (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
  SUM(CASE
    WHEN "week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18')
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN "week_date" IN ('18/6/18', '25/6/18', '2/7/18', '9/7/18')
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE RIGHT("week_date", 2) = '18'
GROUP BY "year"

UNION ALL

SELECT
  (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
  SUM(CASE
    WHEN "week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19')
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN "week_date" IN ('17/6/19', '24/6/19', '1/7/19', '8/7/19')
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE RIGHT("week_date", 2) = '19'
GROUP BY "year"

UNION ALL

SELECT
  (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
  SUM(CASE
    WHEN "week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20')
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN "week_date" IN ('15/6/20', '22/6/20', '29/6/20', '6/7/20')
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales"
FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
WHERE RIGHT("week_date", 2) = '20'
GROUP BY "year";
Answer:
year,pre_june15_sales,post_june15_sales
2018,2119669585,2129242914
2019,2257925201,2252326390
2020,2346142369,2318994169
Query:
SELECT "week_date", TRY_TO_DATE("week_date", 'YYYY-MM-DD') AS "date_converted"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   LIMIT 1000;
Answer:
Too long, hard cut:
week_date,date_converted
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
31/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
24/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20,
17/8/20
Query:
WITH sales_data AS (
  SELECT
    (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
    "week_date",
    "sales"
  FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
  WHERE RIGHT("week_date", 2) IN ('18', '19', '20')
)
SELECT
  "year",
  SUM(CASE
    WHEN ("year" = 2018 AND "week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18')) OR
         ("year" = 2019 AND "week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19')) OR
         ("year" = 2020 AND "week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20'))
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN ("year" = 2018 AND "week_date" IN ('18/6/18', '25/6/18', '2/7/18', '9/7/18')) OR
         ("year" = 2019 AND "week_date" IN ('17/6/19', '24/6/19', '1/7/19', '8/7/19')) OR
         ("year" = 2020 AND "week_date" IN ('15/6/20', '22/6/20', '29/6/20', '6/7/20'))
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales",
  ROUND(
    (SUM(
      CASE
        WHEN ("year" = 2018 AND "week_date" IN ('18/6/18', '25/6/18', '2/7/18', '9/7/18')) OR
             ("year" = 2019 AND "week_date" IN ('17/6/19', '24/6/19', '1/7/19', '8/7/19')) OR
             ("year" = 2020 AND "week_date" IN ('15/6/20', '22/6/20', '29/6/20', '6/7/20'))
        THEN "sales"
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN ("year" = 2018 AND "week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18')) OR
             ("year" = 2019 AND "week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19')) OR
             ("year" = 2020 AND "week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20'))
        THEN "sales"
        ELSE 0
      END
    )) / NULLIF(SUM(
      CASE
        WHEN ("year" = 2018 AND "week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18')) OR
             ("year" = 2019 AND "week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19')) OR
             ("year" = 2020 AND "week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20'))
        THEN "sales"
        ELSE 0
      END
    ), 0) * 100, 4) AS "percentage_change"
FROM sales_data
GROUP BY "year"
ORDER BY "year";
Answer:
year,pre_june15_sales,post_june15_sales,percentage_change
2018,2119669585,2129242914,0.4516
2019,2257925201,2252326390,-0.2480
2020,2346142369,2318994169,-1.1571
Query:
SELECT "sales"
   FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
   WHERE "sales" IS NOT NULL
   LIMIT 1000;
Answer:
Too long, hard cut:
sales
3656163
996575
16509610
141942
1758388
243878
519502
371417
49557
3888162
260773
882690
38762
917
35215
30371770
374327
5185233
2980673
463738
65730
14430196
2176980
478756
3319
5306746
4511841
134249
1579
11451
31589
53567
4023
4768214
396909
8562
8723663
957939
7625
20635
2265
633917
72293
13839
68009
269176
10874
1306932
3507
1144376
3325
15074
1473178
1369115
20255591
48773122
55780
554
2126153
6603287
1026838
11086427
19049
564306
7331
2272687
1562
12836
1548637
45518
37786
48624
2156778
5941067
395877
22712143
16149
3322211
66422
27184
979807
833470
7178808
7422165
91616
661362
786613
11755
883573
2232935
12438
8473
104677
2016930
461694
1221
95547
990085
10624187
2078649
33536
35957
40760
8917
154393
2393490
3288
1437
30264
530397
2494
3101538
158799
1096531
35519
16520774
45036
126801
56734
6218547
1373529
3964262
14694
690966
1520060
52421
3352338
6107
402380
14910405
25858
4085
481198
11133538
1063716
1001335
63989387
79359
836865
67279
11863
72565
3749562
40740
5786447
250536
2056315
372
136743
16103
407861
10501
451994
29757
125653
35572
35314
83877
2819145
2770220
224778
210754
51883
15077
18437
472
411147
55333
85926
20927
1657269
6147
4894437
44346247
839437
134990
23057
49263
1493771
57455
561282
930478
132424
20860
6891042
269373
16755039
33200
9284850
887564
27732
2423159
15927
44500
623
1769576
665292
2186307
277104
2234801
25762
312519
4971
3227065
269863
2291992
150741
46931
30015
5527494
128749
48912
2829225
815588
471837
372983
48796
25570
694767
121005
944157
2299419
18073554
479002
458589
80612
2472247
69079
11256
2340
8381
4929679
4917788
1924
70596
1026555
14789
26393
44081216
397206
489706
258395
1082176
71730
809732
138404
136429
1464490
3383683
437390
32507
988
7823
2023506
40229
6585
26362
50284
14534326
50201
2470906
637913
13605
4996901
6803
3295
1307272
35424
471401
21917
2666
17385
919265
928412
16312
1116468
29642
126151
6645099
2371526
13461
39564
120729
270496
45870
13692
10269
760
3387
567165
11196782
34932
125849
2227688
3010765
31067
47032
9372
7470104
310461
6265
4841694
1547953
52387
36620
89309
813088
7671
82693
58239
18083790
266751
378826
2208090
74178
11098
152027
625492
66080
9346295
2140
8698
680924
679544
10733
42883
1292
8036
4463
840537
1096534
20686
1931973
5452817
20669
2456263
106346
641
2337007
4573475
14854110
1015278
6906988
34728
3741035
2819086
3241876
71648
52221
809
3630
2280564
115870
1033296
500046
29492
14157
64047
26524
64142815
214075
54039
7374481
1561210
469133
11980
16616246
43242
10645503
22769738
20476242
1524244
1407
528808
53692
33223
78136
16290625
996924
13714
4182786
2836
413897
9137
159543
1298505
10941951
207813
5239692
3330717
537132
3280
5765461
266237
131072
10467
25194
1797843
38345
6315069
129020
1860988
486331
28542
18712
5133194
2462103
50412
1064389
697708
3967870
1032953
863537
258305
135256
16974
1869997
976399
47335
360482
133782
86927
17670
38556
486
48873892
3192813
64341
20685
16395314
387214
55996
836190
89676
3154333
288470
777026
2478289
70227
5212768
267523
408353
67176
64705
679
914171
29672
17632
885333
1685
386494
3787305
318
4928018
8667351
11312
17346
18969
6032018
457814
4271
1015962
2165779
557640
60937
2814143
1488390
30166464
1414999
546690
2267164
383717
41345
2211329
24784
1773019
16139861
199
3828901
40596
4001
166106
10905332
2644212
32059
398543
835663
244502
486614
13673
50681
800804
1412
8678
9779
22610
596390
7745
29942596
1266247
5073372
10896424
466859
916054
2037182
373940
65504
22773234
913223
983842
14221
32930
18084
21468
265997
60436
1675283
3020
41059
1250772
1002507
47810123
2153208
1134144
19877010
1277367
5273053
1699
355884
41827
3617509
10924
1446964
212219
524853
31608
58876
53030
2729635
2224
38114
84305
74690
3274278
1633
1068
7066700
12192
556672
9569
1931124
471211
593
46232
880164
766933
483235
2166279
35185
61480
1441867
52721
6472772
2224654
2078217
4764104
4804807
5799
12880
5742
958584
20831
354
2396327
196866
659557
405589
1941072
16388534
4369157
34274
14503756
105769
94505
3912906
317465
128297
123399
28697
3137725
22123
2710
87587
6347
268347
16176
2921332
779071
12524
57614
4808790
3213
1559841
5717894
644709
2058152
6051427
387318
23675
845338
2416174
45713
874082
1057891
33141
26023
1599
6123591
15761
621053
5845
123917
63334453
894642
3448590
1077
2200563
7415
368572
49916
404619
27185
73925
55995
18426
10304393
48155
384548
8256
885237
15916
980601
1695344
130673
34939
545091
6906
187
4848872
5734
469577
73775
108996
963016
130572
44301952
8408
4506
11766
464078
2838862
14564224
2422702
24158
19159
13301
239332
17601663
52204
581819
237160
128072
2165593
114229
18101
8634287
62113
54266
49047
3505589
263342
132755
26856
1321634
87885
5322541
13519
9224860
35386
256974
16378438
32131
6889807
2313650
457017
90457
143406
135718
32055
1362736
33973
7366089
4431
2918338
4448
67376
432164
806
302157
1001518
62170
37346
795013
754876
6740764
210922
3707
14470
1765560
2644705
235905
31132
50571
153407
138141
46890
1735568
61261
869093
10752020
203301
823074
809294
2
Query:
WITH parsed_dates AS (
  SELECT
    "sales",
    TO_NUMBER(SPLIT_PART("week_date", '/', 1)) AS "day",
    TO_NUMBER(SPLIT_PART("week_date", '/', 2)) AS "month",
    (2000 + TO_NUMBER(SPLIT_PART("week_date", '/', 3))) AS "year"
  FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
)
SELECT
  "year",
  SUM(CASE
    WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
    THEN "sales"
    ELSE 0
  END) AS "pre_june15_sales",
  SUM(CASE
    WHEN ("month" = 6 AND "day" >= 15) OR ("month" = 7 AND "day" < 15)
    THEN "sales"
    ELSE 0
  END) AS "post_june15_sales",
  ROUND(
    (SUM(
      CASE
        WHEN ("month" = 6 AND "day" >= 15) OR ("month" = 7 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    ) - SUM(
      CASE
        WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    )) / NULLIF(SUM(
      CASE
        WHEN ("month" = 5 AND "day" >= 15) OR ("month" = 6 AND "day" < 15)
        THEN "sales"
        ELSE 0
      END
    ), 0) * 100, 4
  ) AS "percentage_change"
FROM parsed_dates
WHERE "year" IN (2018, 2019, 2020)
GROUP BY "year"
ORDER BY "year";
Answer:
year,pre_june15_sales,post_june15_sales,percentage_change
2018,2125140809,2129242914,0.1930
2019,2249989796,2252326390,0.1038
2020,2345878357,2904930571,23.8313
Query:
WITH parsed_sales AS (
    SELECT
        "week_date",
        "sales",
        TO_DATE(
            LPAD(SPLIT_PART("week_date", '/', 1), 2, '0') || '/' ||
            LPAD(SPLIT_PART("week_date", '/', 2), 2, '0') || '/' ||
            LPAD(SPLIT_PART("week_date", '/', 2), 2, '0'),
            'DD/MM/YY'
        ) AS "week_date_parsed"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    WHERE TRY_TO_DATE(
        LPAD(SPLIT_PART("week_date", '/', 1), 2, '0') || '/' ||
        LPAD(SPLIT_PART("week_date", '/', 2), 2, '0') || '/' ||
        LPAD(SPLIT_PART("week_date", '/', 3), 2, '0'),
        'DD/MM/YY'
    ) IS NOT NULL
)
SELECT
    EXTRACT(YEAR FROM "week_date_parsed") AS "year",
    SUM(CASE
        WHEN "week_date_parsed" BETWEEN DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        AND DATEADD(DAY, -1, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        THEN "sales"
        ELSE 0
    END) AS "pre_june15_sales",
    SUM(CASE
        WHEN "week_date_parsed" BETWEEN DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
        AND DATEADD(WEEK, 4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)) - 1
        THEN "sales"
        ELSE 0
    END) AS "post_june15_sales",
    ROUND((
        SUM(CASE
            WHEN "week_date_parsed" BETWEEN DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)
            AND DATEADD(WEEK, 4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15)) - 1
            THEN "sales"
            ELSE 0
        END) - SUM(CASE
            WHEN "week_date_parsed" BETWEEN DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
            AND DATEADD(DAY, -1, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
            THEN "sales"
            ELSE 0
        END)
    ) / NULLIF(SUM(CASE
        WHEN "week_date_parsed" BETWEEN DATEADD(WEEK, -4, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        AND DATEADD(DAY, -1, DATE_FROM_PARTS(EXTRACT(YEAR FROM "week_date_parsed"), 6, 15))
        THEN "sales"
        ELSE 0
    END), 0) * 100, 4) AS "percentage_change"
FROM parsed_sales
WHERE EXTRACT(YEAR FROM "week_date_parsed") IN (2018, 2019, 2020)
GROUP BY "year"
ORDER BY "year";
Answer:
No data found for the specified query.
Query:
SELECT DISTINCT "customer_type"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES";
Answer:
customer_type
New
Guest
Existing
Query:
SELECT "transactions", "sales"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    LIMIT 1000;
Answer:
Too long, hard cut:
transactions,sales
120631,3656163
31574,996575
529151,16509610
4517,141942
58046,1758388
1336,243878
2514,519502
2158,371417
318,49557
111032,3888162
1398,260773
4661,882690
1029,38762
6,917
115,35215
551905,30371770
1969,374327
97604,5185233
111219,2980673
11820,463738
1363,65730
284971,14430196
70496,2176980
2678,478756
22,3319
94274,5306746
94287,4511841
3064,134249
7,1579
329,11451
854,31589
180,53567
15,4023
112361,4768214
2269,396909
58,8562
142898,8723663
4703,957939
40,7625
164,20635
20,2265
14583,633917
452,72293
382,13839
1503,68009
7033,269176
329,10874
24153,1306932
15,3507
18676,1144376
19,3325
87,15074
29577,1473178
41631,1369115
402652,20255591
1936351,48773122
413,55780
4,554
43493,2126153
169157,6603287
5893,1026838
245151,11086427
119,19049
2983,564306
32,7331
40076,2272687
7,1562
88,12836
46545,1548637
228,45518
1045,37786
279,48624
66042,2156778
117018,5941067
6769,395877
403810,22712143
74,16149
61517,3322211
1655,66422
201,27184
5794,979807
23416,833470
144056,7178808
151673,7422165
585,91616
18180,661362
30402,786613
69,11755
26620,883573
58165,2232935
97,12438
37,8473
2857,104677
65594,2016930
9710,461694
3,1221
567,95547
36069,990085
220712,10624187
11218,2078649
205,33536
299,35957
953,40760
45,8917
846,154393
57648,2393490
21,3288
9,1437
190,30264
2647,530397
21,2494
91435,3101538
3843,158799
28987,1096531
245,35519
339633,16520774
182,45036
659,126801
340,56734
187781,6218547
6870,1373529
172521,3964262
105,14694
19524,690966
53286,1520060
2466,52421
97001,3352338
36,6107
2031,402380
277600,14910405
157,25858
20,4085
2801,481198
396145,11133538
28592,1063716
23062,1001335
2437738,63989387
343,79359
3920,836865
384,67279
329,11863
1738,72565
110894,3749562
196,40740
102736,5786447
4652,250536
50786,2056315
3,372
731,136743
115,16103
2172,407861
63,10501
13579,451994
164,29757
726,125653
247,35572
277,35314
507,83877
132545,2819145
89785,2770220
1083,224778
1282,210754
300,51883
100,15077
414,18437
3,472
8410,411147
249,55333
3087,85926
122,20927
37883,1657269
46,6147
110176,4894437
1547309,44346247
4498,839437
789,134990
109,23057
1352,49263
38663,1493771
389,57455
14685,561282
22186,930478
842,132424
135,20860
186404,6891042
1689,269373
413244,16755039
228,33200
260181,9284850
14482,887564
118,27732
97673,2423159
113,15927
1266,44500
6,623
46838,1769576
18774,665292
40024,2186307
1420,277104
87269,2234801
154,25762
1501,312519
22,4971
62206,3227065
1621,269863
65304,2291992
3211,150741
278,46931
138,30015
96079,5527494
739,128749
1098,48912
83764,2829225
14816,815588
2568,471837
1916,372983
333,48796
906,25570
14146,694767
621,121005
4911,944157
56256,2299419
345420,18073554
2647,479002
14915,458589
438,80612
69632,2472247
522,69079
312,11256
17,2340
61,8381
153925,4929679
129513,4917788
12,1924
376,70596
29338,1026555
98,14789
134,26393
1548059,44081216
1898,397206
2592,489706
1350,258395
28566,1082176
430,71730
30970,809732
773,138404
2986,136429
29326,1464490
98743,3383683
13219,437390
167,32507
5,988
46,7823
65546,2023506
932,40229
30,6585
132,26362
318,50284
287091,14534326
1127,50201
69461,2470906
18109,637913
76,13605
129144,4996901
40,6803
14,3295
6502,1307272
269,35424
2673,471401
151,21917
16,2666
446,17385
21594,919265
4689,928412
89,16312
18657,1116468
949,29642
762,126151
169736,6645099
40597,2371526
96,13461
293,39564
695,120729
1658,270496
301,45870
84,13692
62,10269
5,760
27,3387
2947,567165
244816,11196782
154,34932
687,125849
40986,2227688
134550,3010765
773,31067
151,47032
314,9372
152920,7470104
1420,310461
20,6265
113188,4841694
53411,1547953
2393,52387
238,36620
555,89309
15076,813088
38,7671
3053,82693
386,58239
348114,18083790
6852,266751
6739,378826
64558,2208090
1652,74178
292,11098
799,152027
14862,625492
338,66080
261672,9346295
17,2140
55,8698
19493,680924
18943,679544
279,10733
1202,42883
7,1292
36,8036
28,4463
14483,840537
29273,1096534
96,20686
10804,1931973
96492,5452817
128,20669
58184,2456263
2918,106346
5,641
65760,2337007
94451,4573475
279576,14854110
23267,1015278
188391,6906988
239,34728
121636,3741035
90129,2819086
61805,3241876
1735,71648
287,52221
4,809
14,3630
56667,2280564
563,115870
5776,1033296
2603,500046
113,29492
93,14157
1330,64047
160,26524
2433987,64142815
1254,214075
311,54039
146120,7374481
47161,1561210
9838,469133
67,11980
343102,16616246
159,43242
220882,10645503
407927,22769738
403795,20476242
42198,1524244
6,1407
15253,528808
315,53692
192,33223
404,78136
405864,16290625
27156,996924
64,13714
176101,4182786
14,2836
2297,413897
52,9137
3841,159543
24088,1298505
394587,10941951
974,207813
98813,5239692
112315,3330717
12337,537132
12,3280
103120,5765461
4953,266237
650,131072
80,10467
124,25194
47022,1797843
952,38345
188753,6315069
2962,129020
58705,1860988
2331,486331
208,28542
91,18712
155586,5133194
87964,2462103
1374,50412
37271,1064389
13157,697708
111964,3967870
31513,1032953
4527,863537
1334,258305
4520,135256
106,16974
45824,1869997
5867,976399
216,47335
7536,360482
769,133782
536,86927
115,17670
987,38556
4,486
191
Query:
SELECT "week_date", "sales"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    ORDER BY "sales" DESC
    LIMIT 10;
Answer:
week_date,sales
23/3/20,69763805
30/3/20,68637072
1/4/19,68245299
8/4/19,67537025
4/5/20,67372865
6/5/19,67213310
25/3/19,67081020
29/4/19,67067216
2/9/19,66938191
13/4/20,66917047
End Exploring Related Columns
Task: For weekly-sales data, I need an analysis of our sales performance around mid-June for the years 2018, 2019, and 2020. Specifically, calculate the percentage change in sales between the four weeks leading up to June 15 and the four weeks following June 15 for each year.

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: SELECT S."Column_Name" FROM {Database Name}.{Schema Name}.{Table_name} (ensure all column names are enclosed in double quotations)
Follow the answer format like: Here is the percentage change in sales around mid-June for the years 2018, 2019, and 2020:

```csv
year,pre_june15_sales,post_june15_sales,percentage_change
2018,num:float,num:float,float
2019,num:float,num:float,float
2020,num:float,num:float,float
```

*Note:* The `percentage_change` is calculated as \(((\text{post\_june15\_sales} - \text{pre\_june15\_sales}) / \text{pre\_june15\_sales}) \times 100\), and is expressed as a numeric value without the `%` symbol..
Here are some useful tips for answering:
When calculating distances between two geometries, use `ST_MakePoint(x, y)` to make a point and `ST_Distance(geometry1 GEOMETRY, geometry2 GEOMETRY)` to compute. No need to convert from meters to miles unless requested. Don't use Haversine like 2 * 6371000 * ASIN(...), use ST_DISTANCE for more precise results.
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'BANK_SALES_TRADING': {'BANK_SALES_TRADING': ['BITCOIN_MEMBERS', 'BITCOIN_PRICES', 'BITCOIN_TRANSACTIONS', 'CLEANED_WEEKLY_SALES', 'CUSTOMER_NODES', 'CUSTOMER_REGIONS', 'CUSTOMER_TRANSACTIONS', 'INTEREST_MAP', 'INTEREST_METRICS', 'SHOPPING_CART_CAMPAIGN_IDENTIFIER', 'SHOPPING_CART_EVENTS', 'SHOPPING_CART_EVENT_IDENTIFIER', 'SHOPPING_CART_PAGE_HIERARCHY', 'SHOPPING_CART_USERS', 'VEG_CAT', 'VEG_LOSS_RATE_DF', 'VEG_TXN_DF', 'VEG_WHSLE_DF', 'WEEKLY_SALES']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book" SQL: WHERE "title" LIKE '%book%'
However, if the string is not decided, you may use ILIKE and %. e.g. Get articles that mention "education": SQL: "body" ILIKE '%education%' OR "title" ILIKE '%education%'
When handling TO_TIMESTAMP_NTZ conversions, use query like: SELECT CASE WHEN "date" >= 1e15 THEN TO_TIMESTAMP_NTZ("date" / 1000000) WHEN "date" >= 1e12 THEN TO_TIMESTAMP_NTZ("date" / 1000) ELSE TO_TIMESTAMP_NTZ("date") END AS parsed_timestamp FROM my_table;
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Keep all decimals to four decimal places.

2025-01-18 02:11:28 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:11:28 - root - INFO - Here is the percentage change in sales around mid-June for the years 2018, 2019, and 2020:

```sql
SELECT
    "year",
    SUM(CASE WHEN "period" = 'pre_june15' THEN "sales" ELSE 0 END) AS pre_june15_sales,
    SUM(CASE WHEN "period" = 'post_june15' THEN "sales" ELSE 0 END) AS post_june15_sales,
    ROUND(
        (
            SUM(CASE WHEN "period" = 'post_june15' THEN "sales" ELSE 0 END) - 
            SUM(CASE WHEN "period" = 'pre_june15' THEN "sales" ELSE 0 END)
        ) / NULLIF(SUM(CASE WHEN "period" = 'pre_june15' THEN "sales" ELSE 0 END), 0) * 100, 4
    ) AS percentage_change
FROM (
    SELECT
        (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
        "sales",
        CASE
            WHEN ("week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18') AND RIGHT("week_date", 2) = '18')
                THEN 'pre_june15'
            WHEN ("week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19') AND RIGHT("week_date", 2) = '19')
                THEN 'pre_june15'
            WHEN ("week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20') AND RIGHT("week_date", 2) = '20')
                THEN 'pre_june15'
            WHEN ("week_date" IN ('18/6/18', '25/6/18', '2/7/18', '9/7/18') AND RIGHT("week_date", 2) = '18')
                THEN 'post_june15'
            WHEN ("week_date" IN ('17/6/19', '24/6/19', '1/7/19', '8/7/19') AND RIGHT("week_date", 2) = '19')
                THEN 'post_june15'
            WHEN ("week_date" IN ('15/6/20', '22/6/20', '29/6/20', '6/7/20') AND RIGHT("week_date", 2) = '20')
                THEN 'post_june15'
            ELSE NULL
        END AS "period"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    WHERE RIGHT("week_date", 2) IN ('18', '19', '20')
) sub
WHERE "period" IS NOT NULL
GROUP BY "year"
ORDER BY "year";
```
2025-01-18 02:11:28 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:11:28 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:11:28 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:11:30 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-18 02:11:30 - snowflake.connector.connection - INFO - closed
2025-01-18 02:11:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:11:30 - root - INFO - itercount: 1
2025-01-18 02:11:30 - root - INFO - 0
2025-01-18 02:11:30 - root - INFO - results: 
year,PRE_JUNE15_SALES,POST_JUNE15_SALES,PERCENTAGE_CHANGE
2018,2119669585,2129242914,0.4516
2019,2257925201,2252326390,-0.2480
2020,2346142369,2318994169,-1.1571


2025-01-18 02:11:30 - root - INFO - Please check the answer again by reviewing For weekly-sales data, I need an analysis of our sales performance around mid-June for the years 2018, 2019, and 2020. Specifically, calculate the percentage change in sales between the four weeks leading up to June 15 and the four weeks following June 15 for each year., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: Here is the percentage change in sales around mid-June for the years 2018, 2019, and 2020:

```csv
year,pre_june15_sales,post_june15_sales,percentage_change
2018,num:float,num:float,float
2019,num:float,num:float,float
2020,num:float,num:float,float
```

*Note:* The `percentage_change` is calculated as \(((\text{post\_june15\_sales} - \text{pre\_june15\_sales}) / \text{pre\_june15\_sales}) \times 100\), and is expressed as a numeric value without the `%` symbol. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
year,PRE_JUNE15_SALES,POST_JUNE15_SALES,PERCENTAGE_CHANGE
2018,2119669585,2129242914,0.4516
2019,2257925201,2252326390,-0.2480
2020,2346142369,2318994169,-1.1571
Current sql:
SELECT
    "year",
    SUM(CASE WHEN "period" = 'pre_june15' THEN "sales" ELSE 0 END) AS pre_june15_sales,
    SUM(CASE WHEN "period" = 'post_june15' THEN "sales" ELSE 0 END) AS post_june15_sales,
    ROUND(
        (
            SUM(CASE WHEN "period" = 'post_june15' THEN "sales" ELSE 0 END) - 
            SUM(CASE WHEN "period" = 'pre_june15' THEN "sales" ELSE 0 END)
        ) / NULLIF(SUM(CASE WHEN "period" = 'pre_june15' THEN "sales" ELSE 0 END), 0) * 100, 4
    ) AS percentage_change
FROM (
    SELECT
        (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
        "sales",
        CASE
            WHEN ("week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18') AND RIGHT("week_date", 2) = '18')
                THEN 'pre_june15'
            WHEN ("week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19') AND RIGHT("week_date", 2) = '19')
                THEN 'pre_june15'
            WHEN ("week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20') AND RIGHT("week_date", 2) = '20')
                THEN 'pre_june15'
            WHEN ("week_date" IN ('18/6/18', '25/6/18', '2/7/18', '9/7/18') AND RIGHT("week_date", 2) = '18')
                THEN 'post_june15'
            WHEN ("week_date" IN ('17/6/19', '24/6/19', '1/7/19', '8/7/19') AND RIGHT("week_date", 2) = '19')
                THEN 'post_june15'
            WHEN ("week_date" IN ('15/6/20', '22/6/20', '29/6/20', '6/7/20') AND RIGHT("week_date", 2) = '20')
                THEN 'post_june15'
            ELSE NULL
        END AS "period"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    WHERE RIGHT("week_date", 2) IN ('18', '19', '20')
) sub
WHERE "period" IS NOT NULL
GROUP BY "year"
ORDER BY "year";
2025-01-18 02:12:29 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 02:12:29 - root - INFO - Here is the percentage change in sales around mid-June for the years 2018, 2019, and 2020:

```sql
SELECT
    "year",
    SUM(CASE WHEN "period" = 'pre_june15' THEN "sales" ELSE 0 END) AS pre_june15_sales,
    SUM(CASE WHEN "period" = 'post_june15' THEN "sales" ELSE 0 END) AS post_june15_sales,
    ROUND(
        (
            SUM(CASE WHEN "period" = 'post_june15' THEN "sales" ELSE 0 END) - 
            SUM(CASE WHEN "period" = 'pre_june15' THEN "sales" ELSE 0 END)
        ) / NULLIF(SUM(CASE WHEN "period" = 'pre_june15' THEN "sales" ELSE 0 END), 0) * 100, 4
    ) AS percentage_change
FROM (
    SELECT
        (2000 + TO_NUMBER(RIGHT("week_date", 2))) AS "year",
        "sales",
        CASE
            WHEN ("week_date" IN ('14/5/18', '21/5/18', '28/5/18', '4/6/18') AND RIGHT("week_date", 2) = '18')
                THEN 'pre_june15'
            WHEN ("week_date" IN ('13/5/19', '20/5/19', '27/5/19', '3/6/19') AND RIGHT("week_date", 2) = '19')
                THEN 'pre_june15'
            WHEN ("week_date" IN ('11/5/20', '18/5/20', '25/5/20', '1/6/20') AND RIGHT("week_date", 2) = '20')
                THEN 'pre_june15'
            WHEN ("week_date" IN ('18/6/18', '25/6/18', '2/7/18', '9/7/18') AND RIGHT("week_date", 2) = '18')
                THEN 'post_june15'
            WHEN ("week_date" IN ('17/6/19', '24/6/19', '1/7/19', '8/7/19') AND RIGHT("week_date", 2) = '19')
                THEN 'post_june15'
            WHEN ("week_date" IN ('15/6/20', '22/6/20', '29/6/20', '6/7/20') AND RIGHT("week_date", 2) = '20')
                THEN 'post_june15'
            ELSE NULL
        END AS "period"
    FROM "BANK_SALES_TRADING"."BANK_SALES_TRADING"."WEEKLY_SALES"
    WHERE RIGHT("week_date", 2) IN ('18', '19', '20')
) sub
WHERE "period" IS NOT NULL
GROUP BY "year"
ORDER BY "year";
```
2025-01-18 02:12:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 02:12:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 02:12:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 02:12:30 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-18 02:12:30 - snowflake.connector.connection - INFO - closed
2025-01-18 02:12:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 02:12:30 - root - INFO - itercount: 2
2025-01-18 02:12:30 - root - INFO - 0
2025-01-18 02:12:30 - root - INFO - Total iteration counts: 2
