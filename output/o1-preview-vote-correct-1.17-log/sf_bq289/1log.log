2025-01-16 19:28:16 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:29:09 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:29:09 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:29:09 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:29:09 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:29:11 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1728
2025-01-16 19:29:11 - snowflake.connector.connection - INFO - closed
2025-01-16 19:29:11 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:29:12 - root - INFO - SQL:
SELECT DISTINCT "place_name"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA";
Results:
Too long, hard cut:
place_name
West Easton
Montgomery
Salladasburg
Claysville
West Pittston
Carmichaels
Athens
Burlington
Canton
Edwardsville
Rices Landing
New Albany
Rome
South Waverly
Towanda
Troy
Wyalusing
Deer Lake
Gilberton
Manheim
Lewistown
Schuylkill Haven
Strasburg
Bernville
Norwood
Prospect Park
St. Lawrence
Shillington
Topton
Wyomissing
Conshohocken
Herndon
Green Hills
Woodbury
Hyndman
Curwensville
Nuangola
Trumbauersville
Weissport
Lititz
Mount Joy
New Holland
Kutztown
Leesport
Wernersville
West Reading
Pennsburg
Cornwall
Newburg
Le Raysville
New Washington
Shamokin Dam
Fayette City
Emlenton
Hawthorn
Smethport
Rouseville
Silverdale
Enon Valley
New Eagle
Albion
New Berlin
Eagles Mere
Malvern
Oakmont
Elco
Mercer
Newton Hamilton
Mountville
Adamstown
Birdsboro
Mohnton
New Morgan
Confluence
Girardville
Sinking Spring
Womelsdorf
Norristown
McVeytown
Middletown
Coalport
Hamburg
Waymart
Tarentum
Jersey Shore
South Williamsport
Macungie
Burnham
Bridgeport
Fleetwood
Danville
South Connellsville
Trainer
Everett
Glen Hope
Dauphin
Sylvania
Selinsgrove
Centerport
Honesdale
Prompton
Starrucca
Lyons
California
Mount Pocono
Ohiopyle
Sayre
Dushore
Emporium
Emsworth
Point Marion
Knox
Sligo
Harrisville
Media
Duryea
Kingston
Duboistown
Telford
Coraopolis
Ephrata
Quarryville
Ohioville
Shippingport
Jefferson
Freeport
North Apollo
Slatington
Alburtis
Union City
Charleroi
Coal Center
Wallaceton
Bechtelsville
Mifflinburg
Flemington
East Brady
Worthville
Vandergrift
Valley-Hi
Springdale
Hulmeville
Harveys Lake
Speers
Sellersville
Bessemer
S.N.P.J.
Wampum
Elizabethtown
Roscoe
Montoursville
Collegeville
Cranesville
Lenhartsville
York Haven
Schwenksville
Galeton
Millersburg
Nicholson
Irvona
Masontown
Shinglehouse
Chester Hill
Smithton
Chapman
Honey Brook
Casselman
Economy
Freedom
Christiana
Denver
Hallstead
Dunlevy
East Vandergrift
Archbald
Sutersville
Tullytown
Yardley
Conway
Monaca
Middleburg
West Middlesex
Johnsonburg
Langhorne
Hellertown
Snydertown
St. Clair
Roaring Spring
Twilight
Coudersport
East Butler
South Greensburg
Ramey
Monroe
Greensboro
Shoemakersville
Ridley Park
Wind Gap
Hawley
Hopewell
Grampian
Tioga
Wellsboro
East Rochester
Newell
Saegertown
Eldred
Port Allegany
Wyoming
Swissvale
Riegelsville
Cheswick
Volant
Columbia
Ellsworth
Avondale
Atwood
Kittanning
Allenport
Jim Thorpe
Donora
West Conshohocken
Millersville
Bedford
Manns Choice
Troutville
Glenfield
Laporte
Centerville
New Bethlehem
Conneautville
Clarion
Kane
Mount Jewett
Whitaker
Bristol
Exeter
Lewis Run
Picture Rocks
White Oak
Edgeworth
Bear Creek Village
Shickshinny
Quakertown
Elizabeth
Ellport
New Beaver
Rochester
Stockdale
West Brownsville
Edinboro
Girard
Wattsburg
Bowmanstown
Lehighton
Nesquehoning
East Side
Royalton
Northampton
Blooming Valley
Dallas
Brookhaven
Tionesta
Auburn
Eastvale
Beavertown
Landingville
Robesonia
Mahaffey
Driftwood
Green Lane
Palmerton
Parryville
Lansford
Pottstown
Royersford
Tunkhannock
Big Beaver
Glasgow
Clearfield
Port Clinton
Patterson Heights
Falls Creek
Brisbin
Westover
Eddystone
Folcroft
Bangor
Polk
Vintondale
Vandling
Marietta
West Newton
Youngwood
Atglen
Downingtown
Elverson
Kennett Square
Modena
Chester Heights
East Stroudsburg
Ambridge
Baden
New Lebanon
Utica
Terre Hill
Parkesburg
South Coatesville
West Chester
Newport
West Elizabeth
Aspinwall
Dravosburg
Akron
Industry
Koppel
Midland
East Petersburg
Hop Bottom
Plum
Stillwater
Plymouth
Harmony
West Leechburg
Hyde Park
Milford
New Stanton
Olyphant
Mount Union
Great Bend
Oklahoma
Biglerville
East Berlin
Gettysburg
Bolivar
Derry
Manorville
Liverpool
Marysville
New Brighton
Tidioute
Zelienople
McClure
South Heights
Sharpsville
Stoneboro
Mill Hall
East Conemaugh
Briar Creek
Catawissa
Forest City
Lanesboro
Susquehanna Depot
Union Dale
Chicora
Ferndale
Franklin
Ehrenfeld
Tatamy
Dublin
Ivyland
North Catasauqua
Loganton
West Liberty
McKees Rocks
Ernest
Indiana
Clintonville
South Fork
Cherry Tree
Foxburg
New Hope
Perkasie
Summerville
Ellwood City
Brackenridge
Belle Vernon
Big Run
West Grove
Brockway
Sykesville
Timblin
Brookville
Riverside
Watsontown
Jefferson Hills
Fox Chapel
Franklin Park
Haysville
Delaware Water Gap
Meshoppen
Forty Fort
Mansfield
Freemansburg
Portland
Hollidaysburg
Mount Oliver
Aldan
West Hazleton
Hughestown
Ashland
East Prospect
Juniata Terrace
Kistler
Tower City
Tremont
New Centerville
Boyertown
Addison
Paint
Salisbury
East Greenville
Hatfield
Rose Valley
State College
Coaldale
Osceola Mills
Shanksville
Winterstown
Yorkana
Dunbar
Weatherly
Cochranton
Callensburg
Fairview
Seven Fields
Adamsburg
Donegal
Markleysburg
Barkeyville
Garrett
Freeland
Thompsontown
Wilmerding
Knoxville
New Columbus
Dickson City
Loganville
Manchester
Mill Village
Elizabethville
Cambridge Springs
Conneaut Lake
Linesville
Halifax
Williamstown
Houston
Frackville
Penn
Summerhill
Beaver
Rankin
Versailles
West Mifflin
Palmyra
Penn Lake Park
Marklesburg
Avonmore
Millerstown
Philipsburg
Jamestown
Sugarcreek
Nanty-Glo
Lincoln
Avalon
Ben Avon
North Braddock
Blawnox
Brownsville
Etna
Fountain Hill
Port Vue
Phoenixv

2025-01-16 19:29:12 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:29:12 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:29:12 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:29:14 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 19:29:14 - snowflake.connector.connection - INFO - closed
2025-01-16 19:29:14 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:29:14 - root - INFO - SQL:
SELECT *
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
   WHERE "place_name" = 'Philadelphia';
Results:
Too long, hard cut:
state_fips_code,place_fips_code,place_gnis_code,place_id,place_name,name_lsad,lsad_code,fips_class_code,principal_city_msa,principal_city_ne,functional_status,area_land_meters,area_water_meters,internal_point_lat,internal_point_lon,internal_point_geom,place_geom
42,60000,01215531,4260000,Philadelphia,Philadelphia city,25,C5,True,False,A,347661370,21926542,40.0093755,-75.1333459,bytearray(b'\x01\x01\x00\x00\x00\x90\xe3=\xbd\x88\xc8R\xc0\x1c\xf1d73\x01D@'),"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\xbc\x0b\x00\x00\xebV\xcfI\xef\xd1R\xc0\xa5\xa1F!\xc9\xfcC@t&m\xaa\xee\xd1R\xc0\x82\xff\xadd\xc7\xfcC@9(a\xa6\xed\xd1R\xc0\x1f\xa2\xd1\x1d\xc4\xfcC@i\xc6\xa2\xe9\xec\xd1R\xc0\xc8\xf2\xaez\xc0\xfcC@:\\\xab=\xec\xd1R\xc0jR\n\xba\xbd\xfcC@\xcf\xbf]\xf6\xeb\xd1R\xc0}\xf1E{\xbc\xfcC@\x82V`\xc8\xea\xd1R\xc0\x018\xf6\xec\xb9\xfcC@w\x10;S\xe8\xd1R\xc0Z\xeb\x8b\x84\xb6\xfcC@\x8b\xfde\xf7\xe4\xd1R\xc0{\xa0\x15\x18\xb2\xfcC@\x1b\xd8*\xc1\xe2\xd1R\xc06(\x9a\x07\xb0\xfcC@\xf85\x92\x04\xe1\xd1R\xc0\x83\xf9+d\xae\xfcC@\xdbj\xd6\x19\xdf\xd1R\xc0#%=\x0c\xad\xfcC@\x8e\x01\xd9\xeb\xdd\xd1R\xc0\x84a\xc0\x92\xab\xfcC@\xee#\xb7&\xdd\xd1R\xc0\x1b\x13b.\xa9\xfcC@=\xc1\xfe\xeb\xdc\xd1R\xc0\xe79""\xdf\xa5\xfcC@\xd7\xfb\x8dv\xdc\xd1R\xc0l\xb4\x1c\xe8\xa1\xfcC@\x18\x05\xc1\xe3\xdb\xd1R\xc0\x03f\xbe\x83\x9f\xfcC@\x90im\x1a\xdb\xd1R\xc0!\xe7\xfd\x7f\x9c\xfcC@\x13b.\xa9\xda\xd1R\xc0\x056\xe7\xe0\x99\xfcC@\xd8I}Y\xda\xd1R\xc06""\x18\x07\x97\xfcC@1\x95~\xc2\xd9\xd1R\xc0f\xda\xfe\x95\x95\xfcC@\x7fLk\xd3\xd8\xd1R\xc0\x0e\xf7\x91[\x93\xfcC@2\xc9\xc8Y\xd8\xd1R\xc0\xe0\xda\x89\x92\x90\xfcC@\x0e\xf3\xe5\x05\xd8\xd1R\xc0\x88+g\xef\x8c\xfcC@t\xd2\xfb\xc6\xd7\xd1R\xc0TR\'\xa0\x89\xfcC@z\xa9\xd8\x98\xd7\xd1R\xc0\x9f\x9a\xcb\r\x86\xfcC@\xd9\xb1\x11\x88\xd7\xd1R\xc0},}\xe8\x82\xfcC@!x|{\xd7\xd1R\xc0Y\x8a\xe4+\x81\xfcC@\xcd\x1d\xfd/\xd7\xd1R\xc0$}ZE\x7f\xfcC@\x0f\'0\x9d\xd6\xd1R\xc0\x7f0\xf0\xdc{\xfcC@\x03\x93\x1bE\xd6\xd1R\xc0\xe0\xa0\xbd\xfax\xfcC@\x92\x1f\xf1+\xd6\xd1R\xc0\x17\x16\xdc\x0fx\xfcC@Ks+\x84\xd5\xd1R\xc0Ym\xfe_u\xfcC@\xc3\xd7\xd7\xba\xd4\xd1R\xc00\x0e.\x1ds\xfcC@vn\xda\x8c\xd3\xd1R\xc0\xb6T\xde\x8ep\xfcC@\xa6&\xc1\x1b\xd2\xd1R\xc0i\x1f+\xf8m\xfcC@\xad1\xe8\x84\xd0\xd1R\xc0\xb7$\x07\xecj\xfcC@\xcbd8\x9e\xcf\xd1R\xc0\x89\x08\xff""h\xfcC@\xc2l\x02\x0c\xcb\xd1R\xc0zm6Vb\xfcC@\x81\x97\x196\xca\xd1R\xc0]\x88\xd5\x1fa\xfcC@\n\x81\\\xe2\xc8\xd1R\xc0F`\xaco`\xfcC@M\xbe\xd9\xe6\xc6\xd1R\xc0\x11\x1f\xd8\xf1_\xfcC@\x95\xb8\x8eq\xc5\xd1R\xc0\x9a\xeeuR_\xfcC@\xd8\xc1\xc1\xde\xc4\xd1R\xc0\x931>\xcc^\xfcC@~\xaa\n\r\xc4\xd1R\xc0\xca\xa6\\\xe1]\xfcC@\x07z\xa8m\xc3\xd1R\xc0\xc0,\xed\xd4\\\xfcC@C\xac\xfe\x08\xc3\xd1R\xc0\xf5\xa1\x0b\xea[\xfcC@\xc0\xcd\xe2\xc5\xc2\xd1R\xc0\xd7\xbc\xaa\xb3Z\xfcC@\x7f\xdeT\xa4\xc2\xd1R\xc0\x9d\xbe\x9e\xafY\xfcC@\xaeb\xf1\x9b\xc2\xd1R\xc0 \xd1\x04\x8aX\xfcC@\x1f\xd6\x1b\xb5\xc2\xd1R\xc0VF#\x9fW\xfcC@\xd28\xd4\xef\xc2\xd1R\xc0\x9e&3\xdeV\xfcC@8\xfeDe\xc3\xd1R\xc0i\xe5^`V\xfcC@\x08`\x03""\xc4\xd1R\xc0\x16\x8b\xdf\x14V\xfcC@`w\xba\xf3\xc4\xd1R\xc0\xdfI\x0b\x97U\xfcC@x\x9f\xe3\xa3\xc5\xd1R\xc0\n\x11p\x08U\xfcC@$+\xbf\x0c\xc6\xd1R\xc0\x82u\x1c?T\xfcC@\xfa}\xff\xe6\xc5\xd1R\xc0d\x90\xbb\x08S\xfcC@\x8f\xe1\xb1\x9f\xc5\xd1R\xc0H\xabZ\xd2Q\xfcC@q\xe2\xab\x1d\xc5\xd1R\xc0ZJ\x96\x93P\xfcC@\xa1\x80\xed`\xc4\xd1R\xc0\xae\xd8_vO\xfcC@\xe3\x89 \xce\xc3\xd1R\xc0T\xc1\xa8\xa4N\xfcC@=\xd5!7\xc3\xd1R\xc0\x9d\xa1\xb8\xe3M\xfcC@\xcc{\x9ci\xc2\xd1R\xc0\xc7h\x1dUM\xfcC@P\x8e\x02D\xc1\xd1R\xc01\x1f\x10\xe8L\xfcC@\n\xfc\xe1\xe7\xbf\xd1R\xc0\xccY\x9frL\xfcC@\xbc\x92\xe4\xb9\xbe\xd1R\xc0\xfd\xdd;jL\xfcC@\x10!\xae\x9c\xbd\xd1R\xc0\xfd\xdd;jL\xfcC@\xd5""\xa2\x98\xbc\xd1R\xc0\xaf@\xf4\xa4L\xfcC@\xb2fd\x90\xbb\xd1R\xc0\xb5\xfd++M\xfcC@*\x19\x00\xaa\xb8\xd1R\xc0\xae\xd8_vO\xfcC@\xc6m4\x80\xb7\xd1R\xc0;1\xeb\xc5P\xfcC@\xd25\x93o\xb6\xd1R\xc0\xd670\xb9Q\xfcC@n\x8a\xc7E\xb5\xd1R\xc0)\x92\xaf\x04R\xfcC@K\xe8.\x89\xb3\xd1R\xc0}\xec.PR\xfcC@\xc8#\xb8\x91\xb2\xd1R\xc0\x8f\x8bj\x11Q\xfcC@i5$\xee\xb1\xd1R\xc0\x1fL\x8a\x8fO\xfcC@\xb7\xd2k\xb3\xb1\xd1R\xc0\x1f\x80\xd4&N\xfcC@i\x1b\x7f\xa2\xb2\xd1R\xc0\x91\'I\xd7L\xfcC@\xec\xdf\xf5\x99\xb3\xd1R\xc0\xd3J!\x90K\xfcC@\\9{g\xb4\xd1R\xc0E\xf2\x95@J\xfcC@\xf1\x82\x88\xd4\xb4\xd1R\xc0j\xfc\xc2+I\xfcC@\xd3i\xdd\x06\xb5\xd1R\xc0|\x9b\xfe\xecG\xfcC@z8\x81\xe9\xb4\xd1R\xc0\x8f::\xaeF\xfcC@\x80\x0f^\xbb\xb4\xd1R\xc0\xeev\xbd4E\xfcC@\xfd0Bx\xb4\xd1R\xc0B\x05\x87\x17D\xfcC@\xb0\xad\x9f\xfe\xb3\xd1R\xc0\xef\xdeQcB\xfcC@\x16\xa7Z\x0b\xb3\xd1R\xc0K\x92\xe7\xfa>\xfcC@FE\x9cN\xb2\xd1R\xc0\x8e\xe9\tK<\xfcC@\x16\xdb\xa4\xa2\xb1\xd1R\xc0\x95\x0e\xd6\xff9\xfcC@\xc9W\x02)\xb1\xd1R\xc0C\xe8\xa0K8\xfcC@LP\xc3\xb7\xb0\xd1R\xc0\xf0\xc1k\x976\xfcC@\x1d\xe6\xcb\x0b\xb0\xd1R\xc0&7\x8a\xac5\xfcC@qt\x95\xee\xae\xd1R\xc0\nR)v4\xfcC@\xc4\xe8\xb9\x85\xae\xd1R\xc0\xb6\xf7\xa9*4\xfcC@\xbf+\x82\xff\xad\xd1R\xc0\xf1)\x00\xc63\xfcC@<g\x0b\x08\xad\xd1R\xc0\x0eC\xab\x933\xfcC@\x14""\xe0\x10\xaa\xd1R\xc0Ju\x01/3\xfcC@c\'\xbc\x04\xa7\xd1R\xc0\xaa}:\x1e3\xfcC@\xff\x95\x95&\xa5\xd1R\xc0\xd5D\x9f\x8f2\xfcC@\xedDIH\xa4\xd1R\xc0(\xd3hr1\xfcC@6%Y\x87\xa3\xd1R\xc0\x17\x9c\xc

2025-01-16 19:29:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:29:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:29:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:29:16 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 19:29:16 - snowflake.connector.connection - INFO - closed
2025-01-16 19:29:16 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:29:16 - root - INFO - SQL:
SELECT "place_geom"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
   WHERE "place_name" = 'Philadelphia';
Results:
Too long, hard cut:
place_geom
"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\xbc\x0b\x00\x00\xebV\xcfI\xef\xd1R\xc0\xa5\xa1F!\xc9\xfcC@t&m\xaa\xee\xd1R\xc0\x82\xff\xadd\xc7\xfcC@9(a\xa6\xed\xd1R\xc0\x1f\xa2\xd1\x1d\xc4\xfcC@i\xc6\xa2\xe9\xec\xd1R\xc0\xc8\xf2\xaez\xc0\xfcC@:\\\xab=\xec\xd1R\xc0jR\n\xba\xbd\xfcC@\xcf\xbf]\xf6\xeb\xd1R\xc0}\xf1E{\xbc\xfcC@\x82V`\xc8\xea\xd1R\xc0\x018\xf6\xec\xb9\xfcC@w\x10;S\xe8\xd1R\xc0Z\xeb\x8b\x84\xb6\xfcC@\x8b\xfde\xf7\xe4\xd1R\xc0{\xa0\x15\x18\xb2\xfcC@\x1b\xd8*\xc1\xe2\xd1R\xc06(\x9a\x07\xb0\xfcC@\xf85\x92\x04\xe1\xd1R\xc0\x83\xf9+d\xae\xfcC@\xdbj\xd6\x19\xdf\xd1R\xc0#%=\x0c\xad\xfcC@\x8e\x01\xd9\xeb\xdd\xd1R\xc0\x84a\xc0\x92\xab\xfcC@\xee#\xb7&\xdd\xd1R\xc0\x1b\x13b.\xa9\xfcC@=\xc1\xfe\xeb\xdc\xd1R\xc0\xe79""\xdf\xa5\xfcC@\xd7\xfb\x8dv\xdc\xd1R\xc0l\xb4\x1c\xe8\xa1\xfcC@\x18\x05\xc1\xe3\xdb\xd1R\xc0\x03f\xbe\x83\x9f\xfcC@\x90im\x1a\xdb\xd1R\xc0!\xe7\xfd\x7f\x9c\xfcC@\x13b.\xa9\xda\xd1R\xc0\x056\xe7\xe0\x99\xfcC@\xd8I}Y\xda\xd1R\xc06""\x18\x07\x97\xfcC@1\x95~\xc2\xd9\xd1R\xc0f\xda\xfe\x95\x95\xfcC@\x7fLk\xd3\xd8\xd1R\xc0\x0e\xf7\x91[\x93\xfcC@2\xc9\xc8Y\xd8\xd1R\xc0\xe0\xda\x89\x92\x90\xfcC@\x0e\xf3\xe5\x05\xd8\xd1R\xc0\x88+g\xef\x8c\xfcC@t\xd2\xfb\xc6\xd7\xd1R\xc0TR\'\xa0\x89\xfcC@z\xa9\xd8\x98\xd7\xd1R\xc0\x9f\x9a\xcb\r\x86\xfcC@\xd9\xb1\x11\x88\xd7\xd1R\xc0},}\xe8\x82\xfcC@!x|{\xd7\xd1R\xc0Y\x8a\xe4+\x81\xfcC@\xcd\x1d\xfd/\xd7\xd1R\xc0$}ZE\x7f\xfcC@\x0f\'0\x9d\xd6\xd1R\xc0\x7f0\xf0\xdc{\xfcC@\x03\x93\x1bE\xd6\xd1R\xc0\xe0\xa0\xbd\xfax\xfcC@\x92\x1f\xf1+\xd6\xd1R\xc0\x17\x16\xdc\x0fx\xfcC@Ks+\x84\xd5\xd1R\xc0Ym\xfe_u\xfcC@\xc3\xd7\xd7\xba\xd4\xd1R\xc00\x0e.\x1ds\xfcC@vn\xda\x8c\xd3\xd1R\xc0\xb6T\xde\x8ep\xfcC@\xa6&\xc1\x1b\xd2\xd1R\xc0i\x1f+\xf8m\xfcC@\xad1\xe8\x84\xd0\xd1R\xc0\xb7$\x07\xecj\xfcC@\xcbd8\x9e\xcf\xd1R\xc0\x89\x08\xff""h\xfcC@\xc2l\x02\x0c\xcb\xd1R\xc0zm6Vb\xfcC@\x81\x97\x196\xca\xd1R\xc0]\x88\xd5\x1fa\xfcC@\n\x81\\\xe2\xc8\xd1R\xc0F`\xaco`\xfcC@M\xbe\xd9\xe6\xc6\xd1R\xc0\x11\x1f\xd8\xf1_\xfcC@\x95\xb8\x8eq\xc5\xd1R\xc0\x9a\xeeuR_\xfcC@\xd8\xc1\xc1\xde\xc4\xd1R\xc0\x931>\xcc^\xfcC@~\xaa\n\r\xc4\xd1R\xc0\xca\xa6\\\xe1]\xfcC@\x07z\xa8m\xc3\xd1R\xc0\xc0,\xed\xd4\\\xfcC@C\xac\xfe\x08\xc3\xd1R\xc0\xf5\xa1\x0b\xea[\xfcC@\xc0\xcd\xe2\xc5\xc2\xd1R\xc0\xd7\xbc\xaa\xb3Z\xfcC@\x7f\xdeT\xa4\xc2\xd1R\xc0\x9d\xbe\x9e\xafY\xfcC@\xaeb\xf1\x9b\xc2\xd1R\xc0 \xd1\x04\x8aX\xfcC@\x1f\xd6\x1b\xb5\xc2\xd1R\xc0VF#\x9fW\xfcC@\xd28\xd4\xef\xc2\xd1R\xc0\x9e&3\xdeV\xfcC@8\xfeDe\xc3\xd1R\xc0i\xe5^`V\xfcC@\x08`\x03""\xc4\xd1R\xc0\x16\x8b\xdf\x14V\xfcC@`w\xba\xf3\xc4\xd1R\xc0\xdfI\x0b\x97U\xfcC@x\x9f\xe3\xa3\xc5\xd1R\xc0\n\x11p\x08U\xfcC@$+\xbf\x0c\xc6\xd1R\xc0\x82u\x1c?T\xfcC@\xfa}\xff\xe6\xc5\xd1R\xc0d\x90\xbb\x08S\xfcC@\x8f\xe1\xb1\x9f\xc5\xd1R\xc0H\xabZ\xd2Q\xfcC@q\xe2\xab\x1d\xc5\xd1R\xc0ZJ\x96\x93P\xfcC@\xa1\x80\xed`\xc4\xd1R\xc0\xae\xd8_vO\xfcC@\xe3\x89 \xce\xc3\xd1R\xc0T\xc1\xa8\xa4N\xfcC@=\xd5!7\xc3\xd1R\xc0\x9d\xa1\xb8\xe3M\xfcC@\xcc{\x9ci\xc2\xd1R\xc0\xc7h\x1dUM\xfcC@P\x8e\x02D\xc1\xd1R\xc01\x1f\x10\xe8L\xfcC@\n\xfc\xe1\xe7\xbf\xd1R\xc0\xccY\x9frL\xfcC@\xbc\x92\xe4\xb9\xbe\xd1R\xc0\xfd\xdd;jL\xfcC@\x10!\xae\x9c\xbd\xd1R\xc0\xfd\xdd;jL\xfcC@\xd5""\xa2\x98\xbc\xd1R\xc0\xaf@\xf4\xa4L\xfcC@\xb2fd\x90\xbb\xd1R\xc0\xb5\xfd++M\xfcC@*\x19\x00\xaa\xb8\xd1R\xc0\xae\xd8_vO\xfcC@\xc6m4\x80\xb7\xd1R\xc0;1\xeb\xc5P\xfcC@\xd25\x93o\xb6\xd1R\xc0\xd670\xb9Q\xfcC@n\x8a\xc7E\xb5\xd1R\xc0)\x92\xaf\x04R\xfcC@K\xe8.\x89\xb3\xd1R\xc0}\xec.PR\xfcC@\xc8#\xb8\x91\xb2\xd1R\xc0\x8f\x8bj\x11Q\xfcC@i5$\xee\xb1\xd1R\xc0\x1fL\x8a\x8fO\xfcC@\xb7\xd2k\xb3\xb1\xd1R\xc0\x1f\x80\xd4&N\xfcC@i\x1b\x7f\xa2\xb2\xd1R\xc0\x91\'I\xd7L\xfcC@\xec\xdf\xf5\x99\xb3\xd1R\xc0\xd3J!\x90K\xfcC@\\9{g\xb4\xd1R\xc0E\xf2\x95@J\xfcC@\xf1\x82\x88\xd4\xb4\xd1R\xc0j\xfc\xc2+I\xfcC@\xd3i\xdd\x06\xb5\xd1R\xc0|\x9b\xfe\xecG\xfcC@z8\x81\xe9\xb4\xd1R\xc0\x8f::\xaeF\xfcC@\x80\x0f^\xbb\xb4\xd1R\xc0\xeev\xbd4E\xfcC@\xfd0Bx\xb4\xd1R\xc0B\x05\x87\x17D\xfcC@\xb0\xad\x9f\xfe\xb3\xd1R\xc0\xef\xdeQcB\xfcC@\x16\xa7Z\x0b\xb3\xd1R\xc0K\x92\xe7\xfa>\xfcC@FE\x9cN\xb2\xd1R\xc0\x8e\xe9\tK<\xfcC@\x16\xdb\xa4\xa2\xb1\xd1R\xc0\x95\x0e\xd6\xff9\xfcC@\xc9W\x02)\xb1\xd1R\xc0C\xe8\xa0K8\xfcC@LP\xc3\xb7\xb0\xd1R\xc0\xf0\xc1k\x976\xfcC@\x1d\xe6\xcb\x0b\xb0\xd1R\xc0&7\x8a\xac5\xfcC@qt\x95\xee\xae\xd1R\xc0\nR)v4\xfcC@\xc4\xe8\xb9\x85\xae\xd1R\xc0\xb6\xf7\xa9*4\xfcC@\xbf+\x82\xff\xad\xd1R\xc0\xf1)\x00\xc63\xfcC@<g\x0b\x08\xad\xd1R\xc0\x0eC\xab\x933\xfcC@\x14""\xe0\x10\xaa\xd1R\xc0Ju\x01/3\xfcC@c\'\xbc\x04\xa7\xd1R\xc0\xaa}:\x1e3\xfcC@\xff\x95\x95&\xa5\xd1R\xc0\xd5D\x9f\x8f2\xfcC@\xedDIH\xa4\xd1R\xc0(\xd3hr1\xfcC@6%Y\x87\xa3\xd1R\xc0\x17\x9c\xc1\xdf/\xfcC@\xd76\xc5\xe3\xa2\xd1R\xc0\x19\x04V\x0e-\xfcC@\xa1\x0f\x96\xb1\xa1\xd1R\xc0\x938+\xa2&\xfcC@+\xdf3\x12\xa1\xd1R\xc0\xae0}\xaf!\xfcC@\xf0\xe0\'\x0e\xa0\xd1R\xc0u\x02\x9a\x08\x1b\xfcC@\xea#\xf0\x87\x9f\xd1R\xc0\xdc/\x9f\xac\x18\xfcC@\xa3w*\xe0\x9e\xd1R\xc0\r\x1c\xd0\xd2\x15\xfcC@\xd9\xecH\xf5\x9d\xd1R\xc0\xba\xf5\x9a\x1e\x14\xfcC@E\xbd\xe0\xd3\x9c\xd1R\xc0\xfc\x18s\xd7\x12\xfcC@\xc9\xe9\xeb\xf9\x9a\xd1R\xc03\x8e\x91\xec\x11\xfcC@\x16\

2025-01-16 19:29:16 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:29:16 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:29:16 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:29:18 - snowflake.connector.connection - INFO - closed
2025-01-16 19:29:18 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:30:04 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:30:04 - root - INFO - The error you're encountering:

```
SQL compilation error: error line 1 at position 16
invalid identifier 'F."key"'
```

occurs because the `LATERAL FLATTEN` function does not produce a column named `"key"` in lowercase. In Snowflake, when you use `LATERAL FLATTEN` on a VARIANT column (like `"all_tags"`), the resulting columns are:

- `"SEQ"`
- `"KEY"`
- `"PATH"`
- `"INDEX"`
- `"VALUE"`
- `"THIS"`

Note that the column names are uppercase unless explicitly defined otherwise. Here's how you can adjust your query to fix the error:

---

**Corrected Query:**

```sql
SELECT DISTINCT f."KEY"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
LATERAL FLATTEN(input => t."all_tags") f;
```

---

**Explanation:**

- **Use Correct Column Name:**
  - Change `f."key"` to `f."KEY"`. The `FLATTEN` function outputs a column named `"KEY"` in uppercase.

- **Understanding Available Columns:**
  - To see all available columns from the `FLATTEN` operation, you can run:

    ```sql
    SELECT f.*
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
    LATERAL FLATTEN(input => t."all_tags") f
    LIMIT 10;
    ```

  - This will display columns like `"SEQ"`, `"KEY"`, `"PATH"`, `"INDEX"`, `"VALUE"`, and `"THIS"`.

- **Alternative Method Using `OBJECT_KEYS`:**

  If for some reason the above adjustment doesn't work, you can use the `OBJECT_KEYS` function, which is designed to return the keys from a VARIANT that contains an object:

  ```sql
  SELECT DISTINCT k AS "key"
  FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
  LATERAL OBJECT_KEYS(t."all_tags") k;
  ```

---

**Further Steps:**

To better understand the structure of the `"all_tags"` column and ensure you are correctly accessing the desired data:

1. **Inspect the `all_tags` Column:**

   ```sql
   SELECT t."all_tags"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t
   LIMIT 10;
   ```

   - This will give you a glimpse into how the data is structured within the `VARIANT` column.

2. **Explore Key-Value Pairs:**

   ```sql
   SELECT f."KEY", f."VALUE"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
   LATERAL FLATTEN(input => t."all_tags") f
   LIMIT 10;
   ```

   - This query will show you the keys and their corresponding values, allowing you to identify the amenities you're interested in (e.g., 'library', 'place_of_worship', 'community_centre').

---

**Example Usage:**

To retrieve distinct amenities available in the data, adjust your original query as follows:

```sql
SELECT DISTINCT f."VALUE"::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
LATERAL FLATTEN(input => t."all_tags") f
WHERE f."KEY" = 'amenity';
```

This query will:

- Use `f."KEY"` (uppercase) to match the 'amenity' key.
- Extract the corresponding `f."VALUE"` for each amenity.
- List distinct amenity types present in the dataset.

---

**Summary:**

- The error was due to case sensitivity in column names resulting from `LATERAL FLATTEN`.
- Using the correct uppercase column names resolves the issue.
- Exploring the structure of the data with `SELECT f.*` helps identify available columns.
- Utilizing functions like `OBJECT_KEYS` can also effectively extract keys from a VARIANT column.

---

**Note on Case Sensitivity:**

In Snowflake, when you enclose identifiers in double quotes, they become case-sensitive. Without double quotes, Snowflake treats identifiers as uppercase by default. Since `LATERAL FLATTEN` produces columns in uppercase, referencing them with lowercase in double quotes leads to an "invalid identifier" error.

---

Feel free to adjust your queries accordingly, and let me know if you need further assistance!
2025-01-16 19:30:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:30:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:30:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:30:06 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-16 19:30:06 - snowflake.connector.connection - INFO - closed
2025-01-16 19:30:07 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:30:45 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:30:45 - root - INFO - ```sql
SELECT t."osm_id", t."geometry", t."all_tags":amenity::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t
WHERE t."all_tags":amenity::STRING IN ('library', 'place_of_worship', 'community_centre')
  AND t."geometry" IS NOT NULL
LIMIT 1000;
```
2025-01-16 19:30:45 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:30:45 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:30:45 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:30:47 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-16 19:30:47 - snowflake.connector.connection - INFO - closed
2025-01-16 19:30:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:31:43 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:31:43 - root - INFO - ```sql
SELECT t."osm_id", t."geometry", f."VALUE"::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
LATERAL FLATTEN(input => t."all_tags") f
WHERE f."KEY" = 'amenity'
LIMIT 1000;
```
2025-01-16 19:31:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:31:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:31:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:31:45 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-16 19:31:45 - snowflake.connector.connection - INFO - closed
2025-01-16 19:31:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:31:45 - root - INFO - SQL:
SELECT t."osm_id", t."geometry", f."VALUE"::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
LATERAL FLATTEN(input => t."all_tags") f
WHERE f."KEY" = 'amenity'
LIMIT 1000;
Results:
No data found for the specified query.

2025-01-16 19:31:45 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:31:45 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:31:45 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:31:47 - snowflake.connector.connection - INFO - closed
2025-01-16 19:31:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:32:54 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:32:54 - root - INFO - ```sql
SELECT t."osm_id", t."geometry", t."all_tags":amenity::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES" t
WHERE t."all_tags":amenity IS NOT NULL
LIMIT 1000;
```
2025-01-16 19:32:54 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:32:54 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:32:54 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:32:56 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-16 19:32:56 - snowflake.connector.connection - INFO - closed
2025-01-16 19:32:56 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:33:27 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:33:27 - root - INFO - ```sql
SELECT t."id", t."geometry", t."all_tags":amenity::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_NODES" t
WHERE t."all_tags":amenity IS NOT NULL
LIMIT 1000;
```
2025-01-16 19:33:27 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:33:27 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:33:27 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:33:29 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-16 19:33:29 - snowflake.connector.connection - INFO - closed
2025-01-16 19:33:29 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:33:55 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:33:55 - root - INFO - ```sql
SELECT t."id", t."geometry", t."all_tags"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_WAYS" t
LIMIT 1000;
```
2025-01-16 19:33:55 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:33:55 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:33:55 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:33:57 - snowflake.connector.cursor - INFO - Number of results in first chunk: 82
2025-01-16 19:33:59 - snowflake.connector.connection - INFO - closed
2025-01-16 19:33:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:33:59 - root - INFO - SQL:
SELECT t."id", t."geometry", t."all_tags"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_WAYS" t
LIMIT 1000;
Results:
Too long, hard cut:
id,geometry,all_tags
173040551,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x000\xf9\x9f\xfc]\xcf]\xc0Mx\xae\x94\n\xcdA@\xe0\xa3Y4x\xcf]\xc0\x01\x7fB\x87\n\xcdA@\xbe\xa9\xa3>$\xd0]\xc0\xc6\xf6\xff\x16\t\xcdA@\x17\tm9\x97\xd0]\xc0\x91+\xf5,\x08\xcdA@\x9a[!\xac\xc6\xd0]\xc0\xcc]K\xc8\x07\xcdA@\xf9\xe1 !\xca\xd0]\xc0U\xe51\xb9\x07\xcdA@')","[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
173040548,"bytearray(b""\x01\x02\x00\x00\x00\r\x00\x00\x00\x05\x7f\xael\xd5\xd0]\xc0U\xe51\xb9\x07\xcdA@ \xd7<\xfd\xd6\xd0]\xc0\xd8\x95;\xd8\x07\xcdA@\xc7,{\x12\xd8\xd0]\xc0\xbb\xf2Y\x9e\x07\xcdA@\x87p\xcc\xb2\'\xd1]\xc0tF\x94\xf6\x06\xcdA@%\xcb\xeen\x8a\xd1]\xc0\\\x1ekF\x06\xcdA@\xb3\xce\xf8\xbe\xb8\xd1]\xc0\x86\xe5\xcf\xb7\x05\xcdA@\xd9\xed\xb3\xcaL\xd2]\xc0i\x00o\x81\x04\xcdA@\x04~\xe8\xdd\xb3\xd2]\xc04\xab-+\x03\xcdA@q\x1cx\xb5\xdc\xd2]\xc0\xec\x12\xd5[\x03\xcdA@\x14\xab\x06an\xd3]\xc0\xa0\xa9\xd7-\x02\xcdA@1\x84\x9c\xf7\xff\xd3]\xc0S@\xda\xff\x00\xcdA@\x1b\xbf\xf0J\x92\xd4]\xc0d\xdf\x15\xc1\xff\xccA@\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@"")","[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
173040547,"bytearray(b""\x01\x02\x00\x00\x00\x0b\x00\x00\x00\xc5\xe0\xabgR\xcf]\xc0\xd8-\xa7\xa9\n\xcdA@\x99\x94\'\xb5<\xcf]\xc00\x17LW\x0b\xcdA@\xf0f\xb2$\xe5\xce]\xc0*\xca\xa5\xf1\x0b\xcdA@\x1b^\xb5\xd7\xa7\xce]\xc04\x8c\xccm\x0c\xcdA@\xe7& \xdcS\xce]\xc0;\x1b\xf2\xcf\x0c\xcdA@m\xcf,\tP\xce]\xc0$\xd9#\xd4\x0c\xcdA@C\x8e\xadg\x08\xce]\xc0)\x96[Z\r\xcdA@y\xe2\x83\xe8\xda\xcd]\xc0/\xf7n\x98\r\xcdA@\xd1]\x12g\xc5\xcd]\xc0\x89\\\x15M\x0c\xcdA@\xcd\x9a\x0eS\x91\xcd]\xc0\xd1\xe68\xb7\t\xcdA@\x8a\x90_\xe4\x8a\xcd]\xc0NdA\xbc\t\xcdA@"")","[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
10674916,"bytearray(b'\x01\x02\x00\x00\x00\x18\x00\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@_\xab\xf3^k\xc3]\xc0@\xdd@\x81w\xe5A@d\xde\xf4xk\xc3]\xc0@,@\x80\xb1\xe5A@\x93\xbb\x19\x7fl\xc3]\xc0;\xac\xcb\x84\xba\xe6A@\xce\xbc\xc1\xbcl\xc3]\xc0vA\x8e\xf7\xf4\xe6A@\xcf\x18\xe6\x04m\xc3]\xc0\x84\x89\x9aC\xad\xe7A@\xc9\x9d-{m\xc3]\xc0rKPh\xfe\xe7A@\x04\x9f\xd5\xb8m\xc3]\xc0|\x7f\x83\xf6\xea\xe8A@:\xc9\xa0$n\xc3]\xc0\xc2\xd7|\x01b\xe9A@7\x81\xe9\xb4n\xc3]\xc0\x03\x16e\xdb\x0e\xeaA@n}\xa2\xfcn\xc3]\xc0:tz\xde\x8d\xeaA@W\xdc\x13\x7fo\xc3]\xc0T\xaf[\x04\xc6\xeaA@n\xd9\xc6Do\xc3]\xc0\x08k\xady\x9f\xebA@\xa3\x8d\xc8\x1cp\xc3]\xc0\x01\xd6O\xa4\xa0\xecA@\xd2j\xed""q\xc3]\xc0\xdbx\xc1\xf1\xc6\xedA@,\x9cI@q\xc3]\xc00\x19\xc7H\xf6\xedA@%\x83\xedqp\xc3]\xc0\xcb\xdeR\xce\x17\xeeA@\x1aQ5\xd5n\xc3]\xc0\xabO(\xfa2\xeeA@o\xcb\x91\xdfl\xc3]\xc0\x1e#4\xddF\xeeA@\xae\xb0\xcfRh\xc3]\xc0\x88\x164\x88j\xeeA@\xe0\xfe\\4d\xc3]\xc0\xa0\x08\x98\xaf\x81\xeeA@{\xfd\xa45a\xc3]\xc0\xbb\xd0\\\xa7\x91\xeeA@\xf9\xb4/E^\xc3]\xc0In\xa8s\xa0\xeeA@\xd1D\x8ecZ\xc3]\xc0\x93\xc8>\xc8\xb2\xeeA@')","[
  {
    ""key"": ""NHS"",
    ""value"": ""yes""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""trunk""
  },
  {
    ""key"": ""lanes"",
    ""value"": ""2""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 65""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  },
  {
    ""key"": ""tiger:cfcc"",
    ""value"": ""A21; A31""
  },
  {
    ""key"": ""tiger:county"",
    ""value"": ""Tulare, CA""
  },
  {
    ""key"": ""tiger:name_base"",
    ""value"": ""State Highway 65; Highway 65; State Highway 65""
  },
  {
    ""key"": ""tiger:name_base_1"",
    

2025-01-16 19:33:59 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:33:59 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:33:59 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:34:01 - snowflake.connector.connection - INFO - closed
2025-01-16 19:34:01 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:34:47 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:34:47 - root - INFO - ```sql
SELECT t."id", t."geometry", f."VALUE":"value"::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_WAYS" t,
LATERAL FLATTEN(input => t."all_tags") f
WHERE f."VALUE":"key"::STRING = 'amenity'
  AND f."VALUE":"value"::STRING IN ('library', 'place_of_worship', 'community_centre')
LIMIT 1000;
```
2025-01-16 19:34:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:34:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:34:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:34:49 - snowflake.connector.cursor - INFO - Number of results in first chunk: 56
2025-01-16 19:34:49 - snowflake.connector.connection - INFO - closed
2025-01-16 19:34:49 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:34:50 - root - INFO - SQL:
SELECT t."id", t."geometry", f."VALUE":"value"::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_WAYS" t,
LATERAL FLATTEN(input => t."all_tags") f
WHERE f."VALUE":"key"::STRING = 'amenity'
  AND f."VALUE":"value"::STRING IN ('library', 'place_of_worship', 'community_centre')
LIMIT 1000;
Results:
Too long, hard cut:
id,geometry,amenity
316594420,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00Oy\xcf\xdc\x9e&^\xc0H\xb6\x04*-\x8eA@E\x89\xf1\xf5\x90&^\xc0\xcbf\x0eI-\x8eA@3L\x12\xf0\x90&^\xc0\xca\xea\x0cB/\x8eA@\xbc\xbc\xef\xce\x90&^\xc0\x15;u@m\x8eA@\xd8\x11\x87l\xa0&^\xc0\x03\xd0\x83\x16m\x8eA@r\xbfCQ\xa0&^\xc0g\xf9\xcb8W\x8eA@r\xbfCQ\xa0&^\xc05y%$-\x8eA@Oy\xcf\xdc\x9e&^\xc0H\xb6\x04*-\x8eA@'),place_of_worship
733763525,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xf8\xbc\x87\xf0T""^\xc0\x8eW zR`A@\x89\x83:\x9bD""^\xc0\xa2\xd7\xfa}Z`A@\xa1\xb7xxO""^\xc04\'\xd4x\x8e`A@\x12\x14?\xc6\\""^\xc0\xecQ\xb8\x1e\x85`A@\xf8\xbc\x87\xf0T""^\xc0\x8eW zR`A@')",community_centre
394724803,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xab\x8d\xfb\xa0x\x18^\xc0^\x92\x14\xa2\x8d\xd3A@\x93\x90H\xdbx\x18^\xc0\xd0\x8c4\xa7\x81\xd3A@\xfe\xd8\xc9\x85o\x18^\xc0\xa6\x83P9\x81\xd3A@\'Xw\x87o\x18^\xc0A\x93\x0e \x8d\xd3A@\xab\x8d\xfb\xa0x\x18^\xc0^\x92\x14\xa2\x8d\xd3A@"")",place_of_worship
165928158,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\r\x00\x00\x00@\x86\xe9\xd6\xc6\x1b^\xc0\x912=\xbcByA@#?,\xe5\xc6\x1b^\xc0Q\xf0\xb9\xb82yA@\x9c0\x06{\xb8\x1b^\xc0"">\x0b\x9d2yA@H\x04\x99S\xb8\x1b^\xc0\xa0\xde1\xe1<yA@C\x16\xb3o\xb8\x1b^\xc0\xc1\n\x01\n?yA@\xean\x8d\xbe\xb8\x1b^\xc0\x026\xd6\xb4AyA@\xbe\xecC\x83\xb9\x1b^\xc0\x8a\x9d\xdf\xe6CyA@<\xc3\xd4\x96\xba\x1b^\xc0\xb2ry\xbdEyA@\xc3\xe8^\xcc\xbb\x1b^\xc0\xdbu%\xb8GyA@k\xce\x0b\xc1\xbb\x1b^\xc0o]\xd6iIyA@3~+#\xbf\x1b^\xc0\x04K\xbf\x8eIyA@?\xcd$E\xbf\x1b^\xc0\x19\x8c\x11\x89ByA@@\x86\xe9\xd6\xc6\x1b^\xc0\x912=\xbcByA@')",community_centre
391259880,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\n\x00\x00\x00\xba\x15x\xdd\x91\x1a^\xc0\xd8\xc1wQ\xaanA@b\x0f\x92\xaa\x92\x1a^\xc0j\x18>""\xa6nA@\xce\x97r\x19\x92\x1a^\xc0\x0bDO\xca\xa4nA@\xda\xd2\xfeb\x91\x1a^\xc0Gb8\x8d\xa3nA@\x81\xbe\xe3\xca\x8f\x1a^\xc0Gb8\x8d\xa3nA@\x9e3\xb3\xe0\x8f\x1a^\xc0\xce>\x8fQ\x9enA@P\xdd\xa6\x89\x88\x1a^\xc0a\xd0S.\x9enA@T\xb4\x83[\x88\x1a^\xc0\xe0_N\x1a\xb4nA@\xf1\x14\xcd^\x91\x1a^\xc0b\xc8\xa0\xc9\xb4nA@\xba\x15x\xdd\x91\x1a^\xc0\xd8\xc1wQ\xaanA@')",place_of_worship
377631023,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xb3\x1dBK\r\x1b^\xc0\x00\x97\xb6n9wA@{8\x92\x15\r\x1b^\xc0]L\xd8#ywA@\x07\xad\xd1\xbc-\x1b^\xc0\x86\'\xaamywA@p2\x16\xf2-\x1b^\xc0\x95\xb2\xb1\xb79wA@\xb3\x1dBK\r\x1b^\xc0\x00\x97\xb6n9wA@"")",place_of_worship
376277862,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00oc\xfd\xb0o,^\xc0\x14`\xfdD\n\xc0A@hG\x05\xa9o,^\xc0~\xb4\x93\x1c\x0b\xc0A@\x8b\xaa\xba\xa2o,^\xc0\xe11M""\x0c\xc0A@7\x05\xe8\xadp,^\xc0\x83)\x143\x0c\xc0A@\xc1\xa3\xd7\xb0p,^\xc0\r\'\xc4\xb7\x0b\xc0A@s\xc1t\xb5p,^\xc0q\xaa\xb50\x0b\xc0A@\xe4\x1d\x96\xbcp,^\xc0\xef\x13Q]\n\xc0A@oc\xfd\xb0o,^\xc0\x14`\xfdD\n\xc0A@')",library
786339169,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00+\xd4?-\xab\x05^\xc0\x96jU\x01\xad]A@\xa3\rvy\xa9\x05^\xc0\x00\xbf\xeb\xd8\xad]A@\xe0jB\xff\xa9\x05^\xc0d\x92\x91\xb3\xb0]A@(\x99A!\xa7\x05^\xc0""\x9d\xcb\x1e\xb2]A@9IN\x81\xa7\x05^\xc0\x15\x17\xec+\xb4]A@\xf1N\x99\xf6\xa8\x05^\xc0,s_s\xb3]A@\xa5\x9aH\x1f\xa9\x05^\xc0\xaa\x04\xd5P\xb4]A@,-\xc8;\xac\x05^\xc0iI\x91\xc6\xb2]A@+\xd4?-\xab\x05^\xc0\x96jU\x01\xad]A@')",library
728288732,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00.\x9b\x94\xdd\xa7\xeb]\xc0=\'b\xb6\tyA@]\x1f1\xd5\xa7\xeb]\xc0\xc1\xcfn\xe3\x05yA@ug7D\xa6\xeb]\xc0\xc1\xcfn\xe3\x05yA@\x10C\x06M\xa6\xeb]\xc0\x8a \xce\xc3\tyA@.\x9b\x94\xdd\xa7\xeb]\xc0=\'b\xb6\tyA@"")",library
197994540,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\n\x82\xc7\xb7\xf7\x1b^\xc0\x87M\t-\x90yA@\x08p\x1f^\xfc\x1b^\xc0j\x06L;\x90yA@\'\xce\xe5a\xfc\x1b^\xc0\xa1\xc9Y3\x8dyA@\xf1\xeem\x9f\xfa\x1b^\xc0\x8e\x8cz-\x8dyA@\xaf-\xf2\xa1\xfa\x1b^\xc0\x0bXr\x15\x8byA@6\x0b\xc5g\xfc\x1b^\xc0\x1e\x95Q\x1b\x8byA@\xb3\x88\xcdl\xfc\x1b^\xc0mX\xae\x12\x87yA@\x99<\xaf\xc2\xf7\x1b^\xc0\xf6\xdf\x94\x03\x87yA@\n\x82\xc7\xb7\xf7\x1b^\xc0\x87M\t-\x90yA@"")",place_of_worship
166264589,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00%\x0e\xd9@:\x00^\xc0\xaf\xdd\x87\xcd\x11\xa9A@\xde\x9b\x95\xa36\x00^\xc0\x9e*\xdf3\x12\xa9A@\xd3\xa8\xc0\xc96\x00^\xc0\xd0_C\xcb\x15\xa9A@\xaf\x9e\x93\xde7\x00^\xc0\xe3n\x10\xad\x15\xa9A@\xcc*l\x068\x00^\xc0\xd5\x10\x0bk\x19\xa9A@\xc1#*T7\x00^\xc03GV~\x19\xa9A@P\xf5\x1aq7\x00^\xc0\x15j\xf29\x1c\xa9A@\x8f\xd88\xac:\x00^\xc0\xb6\xd7\x82\xde\x1b\xa9A@%\x0e\xd9@:\x00^\xc0\xaf\xdd\x87\xcd\x11\xa9A@'),library
218739357,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xb6< \x1a\xa7\x19^\xc0H\xe8\xc2\xa3\xe8zA@\xc8\x90\x082\xa7\x19^\xc0\xc8\x97P\xc1\xe1zA@\xf5\xcbq\xb8\xa0\x19^\xc0\x81u\xc1\x85\xe1zA@\xe2w\x89\xa0\xa0\x19^\xc0k\x06]g\xe8zA@\xb6< \x1a\xa7\x19^\xc0H\xe8\xc2\xa3\xe8zA@'),community_centre
171358951,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\xcc\xee\xc9\xc3\xc2\x1b^\xc0\xd4\xff(\xa0?yA@\xba$\x18\x18\xc3\x1b^\xc0\x0f`\x91_?yA@\xc0

2025-01-16 19:34:50 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:34:50 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:34:50 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:34:51 - snowflake.connector.connection - INFO - closed
2025-01-16 19:34:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:35:49 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:35:49 - root - INFO - ```sql
SELECT t."osm_id", t."geometry", f."VALUE"::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
LATERAL FLATTEN(input => t."all_tags") f
WHERE f."KEY" = 'amenity' AND f."VALUE"::STRING = 'place_of_worship'
LIMIT 1000;
```
2025-01-16 19:35:49 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:35:49 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:35:49 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:35:54 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-16 19:35:54 - snowflake.connector.connection - INFO - closed
2025-01-16 19:35:54 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:36:38 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:36:38 - root - INFO - ```sql
SELECT t."id", t."geometry", f.value:"value"::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_WAYS" t,
LATERAL FLATTEN(input => t."all_tags") f
WHERE f.value:"key"::STRING = 'amenity'
LIMIT 1000;
```
2025-01-16 19:36:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:36:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:36:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:36:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 476
2025-01-16 19:36:41 - snowflake.connector.connection - INFO - closed
2025-01-16 19:36:42 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:36:42 - root - INFO - SQL:
SELECT t."id", t."geometry", f.value:"value"::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_WAYS" t,
LATERAL FLATTEN(input => t."all_tags") f
WHERE f.value:"key"::STRING = 'amenity'
LIMIT 1000;
Results:
Too long, hard cut:
id,geometry,amenity
161926427,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x88*\xfc\x19\xde&^\xc0\xf4\xdb!\x0f\x8e\x90A@\x89\x9a\x8d:\xdf&^\xc0$\xb4\xe5\\\x8a\x90A@Y\xf1\xb2\xcb\xdc&^\xc0\xd21\x8c`\x88\x90A@\xae|\xe0t\xdc&^\xc0}\xa3\xc2}\x89\x90A@Y\xf4N\x05\xdc&^\xc0 \x11S""\x89\x90A@\xb5\xd2Z\x87\xd9&^\xc0\x85\xbd\x9aM\x91\x90A@\x0c\xaaW\xdb\xde&^\xc0\x06\xd2\xc5\xa6\x95\x90A@\xca\xb7-\x80\xdf&^\xc02\x9fb\x8b\x93\x90A@\x99\xc0c.\xdf&^\xc0D\x80\x1dI\x93\x90A@R\xe0S\xef\xdf&^\xc0\xe6;\x9d\xd0\x90\x90A@5&i\xa3\xdf&^\xc0\xe0\xda\x89\x92\x90\x90A@\xbd\tt\xdc\xdf&^\xc0\xa58\xa2\xd6\x8f\x90A@5\x15\x98\x04\xde&^\xc0\xc9\xb8\x98U\x8e\x90A@\x88*\xfc\x19\xde&^\xc0\xf4\xdb!\x0f\x8e\x90A@')",restaurant
43701392,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\xa0\x1a\xd4#\xb2\x16^\xc0\xdc\'G\x01\xa2\xd5A@\x1f\t\xa0\xbd\x9f\x16^\xc0\xd1\xefV\xf1\xa1\xd5A@[\xae#\xb3\x9f\x16^\xc0\xb2w\x90\xe8\xaf\xd5A@\x90\xbeI\xd3\xa0\x16^\xc0,g\xef\x8c\xb6\xd5A@N%\xa8\x86\xa2\x16^\xc0\xac\x1f\xf6\x9d\xba\xd5A@|\xff\xd5\x99\xb1\x16^\xc0\xad{\x1a\xe6\xba\xd5A@\xa0\x1a\xd4#\xb2\x16^\xc0\xdc\'G\x01\xa2\xd5A@"")",grave_yard
43702323,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x002c\xc0H\x1e*^\xc0_\x1d\xc7\x0f\x95\xbfA@\x84\x80|\t\x15*^\xc0`\xc9U,~\xbfA@\x9f\x08=\xf6\x0e*^\xc0\xc5\xfb\x16Bs\xbfA@\x1a\xc7H\xf6\x08*^\xc06\xc8$#g\xbfA@\xe6\x07\xae\xf2\x04*^\xc0\xa0\xc5R$_\xbfA@\xe2\x1a\x9f\xc9\xfe)^\xc0|\xefo\xd0^\xbfA@-\xb12\x1a\xf9)^\xc0\xfde\xf7\xe4a\xbfA@G\x8f\xdf\xdb\xf4)^\xc0\xbfcx\xecg\xbfA@\xd9\xa6\xc2\xe9\xee)^\xc0)|\x11\xc8\x80\xbfA@\x90\xba\x9d}\xe5)^\xc0\xb7\xd4\xe6\xa4\x9c\xbfA@\xa1\x95\xc5\x0e\xf4)^\xc0\x90\xdb/\x9f\xac\xbfA@\xa7\xfc\xb5\x06\x00*^\xc0\x19\x9a\xa1\xa7\xb7\xbfA@\xc4/\xabf\x0c*^\xc0\xaf\xb0\xe0~\xc0\xbfA@2c\xc0H\x1e*^\xc0_\x1d\xc7\x0f\x95\xbfA@')",grave_yard
43700199,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xea\x9e+\x00|\x1a^\xc0\xcb\x81\x1ej\xdb\xeeA@\x90\xe8T\xe8r\x1a^\xc0\xa9\xdf\x85\xad\xd9\xeeA@\x0e$\xde\xf0q\x1a^\xc0\x1bFA\xf0\xf8\xeeA@Vo\xc3\xdez\x1a^\xc0>\xe8\xd9\xac\xfa\xeeA@\xea\x9e+\x00|\x1a^\xc0\xcb\x81\x1ej\xdb\xeeA@'),grave_yard
43702335,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\xc6\x9c\xb1y\xe6,^\xc0\x96\x8a\xd7\x068\xc9A@\xcc\xa1\xa0o\xe6,^\xc0Kg\x16WK\xc9A@\xe4\x9ft}\xfa,^\xc0&\xedWKK\xc9A@\xbb\xd8\x0f\x0c\xfb,^\xc0<\xa0l\xca\x15\xc9A@!""5\xed\xe2,^\xc0rq\xaf\'\x15\xc9A@\x04\x96\\\xc5\xe2,^\xc0\x7f\x1a\xf7\xe67\xc9A@\xc6\x9c\xb1y\xe6,^\xc0\x96\x8a\xd7\x068\xc9A@')",grave_yard
43702691,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\xa1\xb4&\xccj&^\xc0\x95\'\x10v\x8a\x8dA@&\x1b\xb4\xfce&^\xc0\x00\xde\x02\t\x8a\x8dA@\x0e\x07S\xdeX&^\xc0\xda(F\xf1\x85\x8dA@\xfd\xa1\x99\'W&^\xc0v\x0bn\xb5\x98\x8dA@\x17\x02\xca\xf0i&^\xc0\x99Q\xe2)\x9a\x8dA@\xa1\xb4&\xccj&^\xc0\x95\'\x10v\x8a\x8dA@"")",grave_yard
43702338,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00!\x00\x00\x000\xe1\x86\xce\xa1*^\xc0\xb6L\x86\xe3\xf9\xbeA@{\x9a8^\xa6*^\xc0\nN\xd8\xd9\xeb\xbeA@\xb5[&\x1e\xab*^\xc0XxM\xfe\xdd\xbeA@Jw!g\xab*^\xc0A""\x12*\xdd\xbeA@;\xce\xc8{\xb0*^\xc0s9\x14\xf4\xcd\xbeA@\x10]P\xdf\xb2*^\xc0\xdcJ\xaf\xcd\xc6\xbeA@\x93i\xd9\xff\xa5*^\xc0\xa1\x15\x18\xb2\xba\xbeA@\x14\xee\xf02\x9e*^\xc0\xec\xdf\xf5\x99\xb3\xbeA@\x9e\x08\xe2<\x9c*^\xc0L\xc0T\xd8\xb1\xbeA@\xe4)\xf5v\x95*^\xc0%\x87\x99\xc7\xab\xbeA@\xf8\x1cX\x8e\x90*^\xc0\xdf1<\xf6\xb3\xbeA@\xe3\xaa\xb2\xef\x8a*^\xc0\xd1\xb3Y\xf5\xb9\xbeA@\xdf\x89Y/\x86*^\xc0\xcf\xe30\x98\xbf\xbeA@e8\x9e\xcf\x80*^\xc0\xc2\x86\xa7W\xca\xbeA@[\xd8\xd3\x0e\x7f*^\xc0\x08\x97\x8e9\xcf\xbeA@\xc7\xa8k\xed}*^\xc0\xc3\xd7\xd7\xba\xd4\xbeA@\xd8G\xa7\xae|*^\xc0\x02+\x87\x16\xd9\xbeA@\xc8\xf6Z\xd0{*^\xc0b\x1c\\:\xe6\xbeA@\xa3\x06\xd30|*^\xc0z\xfdI|\xee\xbeA@\xea\x98\xf3\x8c}*^\xc0\x11\x00\x1c{\xf6\xbeA@\xf4\xf8\xbdM\x7f*^\xc0\x8bQ\xd7\xda\xfb\xbeA@\xb9xx\xcf\x81*^\xc0\xbd\xc2\x82\xfb\x01\xbfA@\xa0\xe8\xba\xf0\x83*^\xc02W\x06\xd5\x06\xbfA@z\xaaCn\x86*^\xc0N\xd4\xd2\xdc\n\xbfA@\xd8\xc0\xb1\xc2\x88*^\xc0\x0b;1\x90\x0c\xbfA@\xd7\xb7\xdd\x15\x8b*^\xc0\xd4\xf8\xe0\x10\x05\xbfA@\xa0{jP\x8f*^\xc0\x9d$]3\xf9\xbeA@\xb3/\x8f\xeb\x95*^\xc0~\xdfd\xc0\xfe\xbeA@\xc0\xd7\x10\x1c\x97*^\xc0\x08\xe9\x84+\xfb\xbeA@\xefo\x1a\xec\x97*^\xc0Wx\x97\x8b\xf8\xbeA@\xfdi\xa3:\x9d*^\xc0\xb4T\x83\xd5\xfd\xbeA@\xf5A;L\xa0*^\xc0rKPh\xfe\xbeA@0\xe1\x86\xce\xa1*^\xc0\xb6L\x86\xe3\xf9\xbeA@')",school
43703541,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\xe9\x9a\xc97[,^\xc0y\x8d\x02\xe9\x07\xc0A@\x1be\xa2\xado,^\xc0@\x98%K\xf7\xbfA@\x9d\xbf\xbf\xf7m,^\xc0\xc0\xcb\xb1a\xf2\xbfA@X[\xb1\xbfl,^\xc0>\xcb\xf3\xe0\xee\xbfA@\xe1\xd1\xc6\x11k,^\xc0v\x1ep\xb8\xea\xbfA@\xac\xc4<+i,^\xc07\x83\t\xed\xe6\xbfA@y\x8c<Zf,^\xc0K\xa4~(\xe2\xbfA@\xc6c\x06*c,^\xc0\xd5\xad\x9e\x93\xde\xbfA@\xb1\xbaz\xba_,^\xc0\xe39\xb6\xf9\xda\xbfA@y\xe5\x1f""Z,^\xc0D\xaa\x83\x17\xd8\xbfA@\x913^\x04W,^\xc0\xbc\x84\xf9\xe1\xd6\xbfA@\xd9Wh1B,^\xc0\xfb\xd4g\xbd\xce\xbfA@D\x14\x937@,^\xc0\x7fq\x04\x04\xce\xbfA@\xabz\x9e\xe43,^\xc0hA(\xef\xe3

2025-01-16 19:36:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:36:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:36:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:36:43 - snowflake.connector.connection - INFO - closed
2025-01-16 19:36:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:37:37 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:37:37 - root - INFO - ```sql
SELECT t."id", t."geometry", t."all_tags":amenity::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_WAYS" t
WHERE t."all_tags":amenity IS NOT NULL
LIMIT 1000;
```
2025-01-16 19:37:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:37:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:37:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:37:39 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-16 19:37:39 - snowflake.connector.connection - INFO - closed
2025-01-16 19:37:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:38:48 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:38:48 - root - INFO - ```sql
SELECT t."osm_id", t."geometry", f.value:"key"::STRING AS "key", f.value:"value"::STRING AS "value"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES" t,
LATERAL FLATTEN(input => t."all_tags") f
LIMIT 1000;
```
2025-01-16 19:38:48 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:38:48 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:38:48 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:38:50 - snowflake.connector.cursor - INFO - Number of results in first chunk: 788
2025-01-16 19:38:51 - snowflake.connector.connection - INFO - closed
2025-01-16 19:38:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:38:51 - root - INFO - SQL:
SELECT t."osm_id", t."geometry", f.value:"key"::STRING AS "key", f.value:"value"::STRING AS "value"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES" t,
LATERAL FLATTEN(input => t."all_tags") f
LIMIT 1000;
Results:
Too long, hard cut:
osm_id,geometry,key,value
,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x04|\xb7yc9^@sA}\xcb\x9c\xdc0@\x02\x1a[\xbed9^@\x8f\xbd\xcd\xd1\x99\xdc0@\x84h\x08""f9^@\xfb@\xf2\xce\xa1\xdc0@>\xbf\xde\xb3d9^@Y\xf5\x03h\xa5\xdc0@\x04|\xb7yc9^@sA}\xcb\x9c\xdc0@')",building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\xd7_\xc0\\\x19^@U\xc9[\t8C0@\xfa?\x87\xf9r\x19^@\xe8\x88|\x97RC0@\x18\x8a\xe0$r\x19^@}kq\xd7\\C0@\x1f!\xb9\xeb[\x19^@\xea\xabPIBC0@\x01\xd7_\xc0\\\x19^@U\xc9[\t8C0@'),building,yes
,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\xdbX\x89y\xd6^^@~W\x04\xff[\xa50@\x15\x9fL\xed\xd6^^@\x8b%\x9baY\xa50@\\\xd8\xe4:\xd7^^@\xc1\xc2\x93\'Z\xa50@\xc9\xd3\xf2\x03\xd7^^@\xae#Xf[\xa50@!\x92!\xc7\xd6^^@\xb3\xf4\xfc\xc4\\\xa50@\xdbX\x89y\xd6^^@~W\x04\xff[\xa50@"")",building,yes
,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xd5|\xf05_\'^@:""\x84\xecab0@\xac\x00\xdfm^\'^@\x11\xafF\xd1^b0@\x9f\xdc[6_\'^@\xf5\xa1\x0b\xea[b0@\xcaXm\xfe_\'^@\x1e\x15I\x05_b0@\xd5|\xf05_\'^@:""\x84\xecab0@')",building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xdb\xacU\x16`c^@\x8a\x8f\xf4\x0e\\(0@\x8dT)\x87`c^@\xed\xec\xd0U_(0@}b\x9d*_c^@\xfd\x93\t\tb(0@\xca\xba\xc9\xb9^c^@\x9b6-\xc2^(0@\xdb\xacU\x16`c^@\x8a\x8f\xf4\x0e\\(0@'),building,yes
,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x89\x1c""n\xce&^@Z\xe4\xe8;\tB0@\xa2\xa0of\xcf&^@;/_\xa8\rB0@\xc6\xd8\xaeu\xce&^@\xc2\xaa\xd5\xb2\x10B0@\xaeTa}\xcd&^@\xb7\xe0\xb1D\x0cB0@\x89\x1c""n\xce&^@Z\xe4\xe8;\tB0@')",building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xe2\xb8\x8c\x9b\x1a\x14^@\xa3\xc5\xbe\t*\x990@L>\xd1\xd0\x1a\x14^@\x9b\xf0\xa6\xb6/\x990@i\xfe\xf3\x8f\x19\x14^@]\x1auc0\x990@\x00y\xafZ\x19\x14^@g\xef\x8c\xb6*\x990@\xe2\xb8\x8c\x9b\x1a\x14^@\xa3\xc5\xbe\t*\x990@'),building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xa1drjgF^@\x0b\xce\x856\xa5\xc90@\xdd\xd8G\x02hF^@\x91=\x8cZ\xab\xc90@\xc7\x85\xa8gfF^@\xe3\x1b\n\x9f\xad\xc90@\x8b\x11\xd3\xcfeF^@]\xac\x03{\xa7\xc90@\xa1drjgF^@\x0b\xce\x856\xa5\xc90@'),building,yes
,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\r\x00\x00\x00z\x8f\xd8\x93e`^@\x99\xb6\xc9\xf2\xbf\xa00@\x0e8\xa6\x82e`^@\xb8\xb3\n\xf6\xba\xa00@7\xc8$#g`^@\x94\xdd\'\xa2\xba\xa00@\x19\x81g1g`^@\xabU\x05\xb4\xbe\xa00@\x06\x9d\x10:h`^@\x9f\xef\x02\x80\xbe\xa00@\xa7\xab\xe0\\h`^@S\xeb\xa2\x8d\xc8\xa00@\xcb\xcc\x16Zg`^@^Q\xa5\xc1\xc8\xa00@$\xd0`Sg`^@\x88LT\xca\xc6\xa00@\xfb\xc9\x18\x1ff`^@e.\xba\x06\xc7\xa00@7\x86\xa5&f`^@c\x0e\xddG\xc9\xa00@\xa4\xe3\x0f\xabd`^@\xb7h\\\x93\xc9\xa00@\xf6\xb3X\x8ad`^@\xa4\x1c\xcc&\xc0\xa00@z\x8f\xd8\x93e`^@\x99\xb6\xc9\xf2\xbf\xa00@"")",building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00B\xd0\xd1\xaa\x96b^@U\xb0|LZ\x830@\xb8+\xaa4\x98b^@\x91\x86\xae\x9fY\x830@\xcf\xb2\x93f\x98b^@.\xc2\xb9+`\x830@ZW\xbb\xdc\x96b^@\xf2\xeb\x87\xd8`\x830@B\xd0\xd1\xaa\x96b^@U\xb0|LZ\x830@'),building,yes
,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00U~\xbe\xd2\x1e\x17^@\xe4|\xfb\x84\xfdl/@&\x95)\xe6 \x17^@\xb4\xe4\xf1\xb4\xfcl/@\xc6\x8c\xf0\xf6 \x17^@\xc1\xe3\xdb\xbb\x06m/@,\x16\x1a\xe3\x1e\x17^@\x9d}\x8a\x88\x07m/@U~\xbe\xd2\x1e\x17^@\xe4|\xfb\x84\xfdl/@')",building,yes
,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00 \x01\x92\x9f\xc3%^@\x98RM\xffHW/@\x96\xe9<\xcf\xc4%^@\x82>\x91\'IW/@Y-\xb0\xc7\xc4%^@\x9f\xe4\xb3\xe1UW/@\xe3D\x05\x98\xc3%^@\xb5\xf8o\xb9UW/@ \x01\x92\x9f\xc3%^@\x98RM\xffHW/@"")",building,yes
,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00J\x85\xb1\x85 \x8eA@\x91\xdb\x8aX\x1f\xc6#\xc0So\xb2\xb2""\x8eA@3\xc0`\x92%\xc6#\xc0\xff\x84\xc4\x87#\x8eA@7\x00\x1b\x10!\xc6#\xc0\xf5\x9a\xc3Z!\x8eA@\x93\x1bE\xd6\x1a\xc6#\xc0J\x85\xb1\x85 \x8eA@\x91\xdb\x8aX\x1f\xc6#\xc0')",building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xfd\x7f\x9c0atA@\x1a\x8f\xad\xc2\xc1\xed!\xc0KE\xbe\xa6btA@\x03\xeey\xfe\xb4\xed!\xc0\x04k\xe6\xdaatA@\xda\xa2\x16\x94\xb3\xed!\xc0\xb7\xa5\xc4d`tA@\x9eE\xefT\xc0\xed!\xc0\xfd\x7f\x9c0atA@\x1a\x8f\xad\xc2\xc1\xed!\xc0'),building,yes
,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x82\x07\x06\x10>XB@\x07\x17\xe1\xdc\x15\x98%\xc0\x8d%Q\xd4>XB@\xdbC\x0c\x85\x19\x98%\xc0,E\xf2\x95@XB@=\x1cn\xd1\x13\x98%\xc0!\'\xa7\xd1?XB@\xbc\xed\x9d,\x10\x98%\xc0\x82\x07\x06\x10>XB@\x07\x17\xe1\xdc\x15\x98%\xc0"")",building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00bX\x0f\xa9\xb3RA@\x15\x9a\xda\x08z\x06&\xc0\xa9\xd0\x8a\xb9\xb5RA@P\x84y4z\x06&\xc0P\xcd@\xc0\xb5RA@\x82\xec\xabau\x06&\xc0\nU\xc5\xaf\xb3RA@H\x02\r6u\x06&\xc0bX\x0f\xa9\xb3RA@\x15\x9a\xda\x08z\x06&\xc0'),building,yes
,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00$<\xa1\xd7\x9f\xfcA@\xbe`\x81\xf9u\x89%\xc0\x9c>\xf1R\xa0\xfcA@j\xb2\xdaWy\x89%\xc0\x82f|\x04\xa3\xfcA@\xf5\xad\xc5]s\x89%\xc0\rd,\x89\xa2\xfcA@J\\l\xffo\x89%\xc0$<\xa1\xd7\x9f\xfc

2025-01-16 19:38:51 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:38:51 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:38:51 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:38:53 - snowflake.connector.cursor - INFO - Number of results in first chunk: 250
2025-01-16 19:38:54 - snowflake.connector.connection - INFO - closed
2025-01-16 19:38:54 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:38:54 - root - INFO - SQL:
SELECT t."all_tags"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t
   LIMIT 1000;
Results:
Too long, hard cut:
all_tags
"[
  {
    ""key"": ""id"",
    ""value"": ""1""
  }
]"
"[
  {
    ""key"": ""id"",
    ""value"": ""1""
  }
]"
"[
  {
    ""key"": ""id"",
    ""value"": ""1""
  }
]"
"[
  {
    ""key"": ""id"",
    ""value"": ""1""
  }
]"
"[
  {
    ""key"": ""id"",
    ""value"": ""1""
  }
]"
"[
  {
    ""key"": ""id"",
    ""value"": ""1""
  }
]"
"[
  {
    ""key"": ""INN"",
    ""value"": ""201348059""
  },
  {
    ""key"": ""addr:city"",
    ""value"": ""Shovot qo‘rg‘oni""
  },
  {
    ""key"": ""addr:city:ru"",
    ""value"": ""-""
  },
  {
    ""key"": ""addr:city:uz-cyr"",
    ""value"": ""Шовот қўрғони""
  },
  {
    ""key"": ""addr:district:ru"",
    ""value"": ""Шаватский""
  },
  {
    ""key"": ""addr:full"",
    ""value"": ""220900, Xorazm viloyati, Shovot tumani, Shovot qo‘rg‘oni, J. Manguberdi ko‘chasi, 9 uy""
  },
  {
    ""key"": ""addr:full:ru"",
    ""value"": ""221000, Хорезмская область, Шаватский район, гп Шават, ул. Ж. Мангуберди, 9""
  },
  {
    ""key"": ""addr:full:uz-cyr"",
    ""value"": ""221000, Хоразм вилояти, Шовот тумани, Шовот қўрғони, Замахшарий кўчаси, 19 уй""
  },
  {
    ""key"": ""addr:housenumber"",
    ""value"": ""9""
  },
  {
    ""key"": ""addr:region"",
    ""value"": ""Shovot tumani""
  },
  {
    ""key"": ""addr:region:ru"",
    ""value"": ""Хорезмская область""
  },
  {
    ""key"": ""addr:region:uz-cyr"",
    ""value"": ""Шовот тумани""
  },
  {
    ""key"": ""addr:street"",
    ""value"": ""J.Manguberdi ko'chasi""
  },
  {
    ""key"": ""amenity"",
    ""value"": ""bank""
  },
  {
    ""key"": ""bank-type"",
    ""value"": ""3""
  },
  {
    ""key"": ""brand"",
    ""value"": ""Xalq bank""
  },
  {
    ""key"": ""brand:ru"",
    ""value"": ""Народный банк""
  },
  {
    ""key"": ""brand:uz-cyr"",
    ""value"": ""Агробанк""
  },
  {
    ""key"": ""contact:website"",
    ""value"": ""www.xb.uz""
  },
  {
    ""key"": ""mfo"",
    ""value"": ""00810""
  },
  {
    ""key"": ""name"",
    ""value"": ""Xalq bank Shovot filiali""
  },
  {
    ""key"": ""name:ru"",
    ""value"": ""Шаватский филиал Народного банка""
  },
  {
    ""key"": ""name:uz-cyr"",
    ""value"": ""Агробанк Шовот филиали""
  }
]"
"[
  {
    ""key"": ""LAT"",
    ""value"": ""-15.353824""
  },
  {
    ""key"": ""LONG"",
    ""value"": ""34.800967""
  },
  {
    ""key"": ""Village_Na"",
    ""value"": ""Kasamba 1""
  },
  {
    ""key"": ""name"",
    ""value"": ""Kasamba 1""
  },
  {
    ""key"": ""place"",
    ""value"": ""village""
  }
]"
"[
  {
    ""key"": ""LAT"",
    ""value"": ""-15.515855""
  },
  {
    ""key"": ""LONG"",
    ""value"": ""34.664071""
  },
  {
    ""key"": ""Village_Na"",
    ""value"": ""Kaduka""
  },
  {
    ""key"": ""name"",
    ""value"": ""Kaduka""
  },
  {
    ""key"": ""place"",
    ""value"": ""village""
  }
]"
"[
  {
    ""key"": ""MCC"",
    ""value"": ""216""
  },
  {
    ""key"": ""MNC"",
    ""value"": ""70""
  },
  {
    ""key"": ""communication:mobile_phone"",
    ""value"": ""gsm;umts""
  },
  {
    ""key"": ""gsm:LAC"",
    ""value"": ""125""
  },
  {
    ""key"": ""gsm:cellid"",
    ""value"": ""29504;29505;29506""
  },
  {
    ""key"": ""man_made"",
    ""value"": ""tower""
  },
  {
    ""key"": ""operator"",
    ""value"": ""Vodafone""
  },
  {
    ""key"": ""source"",
    ""value"": ""survey;Bing""
  },
  {
    ""key"": ""tower:type"",
    ""value"": ""communication""
  },
  {
    ""key"": ""umts:LAC"",
    ""value"": ""225""
  },
  {
    ""key"": ""umts:PSC"",
    ""value"": ""392""
  },
  {
    ""key"": ""umts:RNC"",
    ""value"": ""21""
  },
  {
    ""key"": ""umts:cellid"",
    ""value"": ""29507""
  }
]"
"[
  {
    ""key"": ""MCC"",
    ""value"": ""262""
  },
  {
    ""key"": ""MNC"",
    ""value"": ""02""
  },
  {
    ""key"": ""communication:mobile_phone"",
    ""value"": ""yes""
  },
  {
    ""key"": ""gsm:LAC"",
    ""value"": ""360""
  },
  {
    ""key"": ""gsm:cellid"",
    ""value"": ""17941;17942;17943""
  },
  {
    ""key"": ""umts:LAC"",
    ""value"": ""1365""
  },
  {
    ""key"": ""umts:cellid"",
    ""value"": ""80627221;80627222;80627223;80627225;80627226""
  }
]"
"[
  {
    ""key"": ""MCC"",
    ""value"": ""286""
  },
  {
    ""key"": ""communication:microwave"",
    ""value"": ""yes""
  },
  {
    ""key"": ""communication:mobile_phone"",
    ""value"": ""gsm;umts""
  },
  {
    ""key"": ""man_made"",
    ""value"": ""mast""
  },
  {
    ""key"": ""tower:type"",
    ""value"": ""communication""
  }
]"
"[
  {
    ""key"": ""atm"",
    ""value"": ""yes""
  },
  {
    ""key"": ""name"",
    ""value"": ""BR Mania""
  },
  {
    ""key"": ""operator"",
    ""value"": ""BR""
  },
  {
    ""key"": ""shop"",
    ""value"": ""convenience""
  },
  {
    ""key"": ""source"",
    ""value"": ""Bing""
  }
]"
"[
  {
    ""key"": ""atm"",
    ""value"": ""yes""
  },
  {
    ""key"": ""brand"",
    ""value"": ""全家便利商店""
  },
  {
    ""key"": ""brand:en"",
    ""value"": ""FamilyMart""
  },
  {
    ""key"": ""brand:ja"",
    ""value"": ""ファミリーマート""
  

2025-01-16 19:38:54 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:38:54 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:38:54 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:38:56 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 19:38:56 - snowflake.connector.connection - INFO - closed
2025-01-16 19:38:56 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:38:56 - root - INFO - SQL:
SELECT t."geometry"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t
    LIMIT 1000;
Results:
Too long, hard cut:
geometry
bytearray(b'\x01\x01\x00\x00\x00T\x00\x8cg\xd0\x9a4@\xaey\xfa\xadB^C@')
bytearray(b'\x01\x01\x00\x00\x00\xd1\x8b\x7fD\xb8\x9a4@]\xcc\x85\x802^C@')
bytearray(b'\x01\x01\x00\x00\x00\xf5\x92\x10\xf67\x9a4@\xa6\x1a\x07\xa8\xba]C@')
bytearray(b'\x01\x01\x00\x00\x00\x81|d\xce\x8e\x9b4@r@\x01\xca\x95^C@')
bytearray(b'\x01\x01\x00\x00\x00m\x9b\x98\xe46\x9a4@Uh \x96\xcd]C@')
bytearray(b'\x01\x01\x00\x00\x00g\x9c\xe1a5\x9b4@U\xf2V\x02\xce^C@')
bytearray(b'\x01\x01\x00\x00\x00R\xd1X\xfb;%N@]S \xb3\xb3\xd3D@')
bytearray(b'\x01\x01\x00\x00\x00n\x16/\x16\x86fA@n\x14Yk(\xb5.\xc0')
bytearray(b'\x01\x01\x00\x00\x00)\xdb\xd1I\x00UA@\xc8\xf4\x84%\x1e\x08/\xc0')
bytearray(b'\x01\x01\x00\x00\x00\xac\xc2\xb0\r&\xff1@\x9fS5\xe6\x1a\xedF@')
bytearray(b'\x01\x01\x00\x00\x00\xfa\xd3\xeb\xbb\xc7R&@\xadD\x8f\xce\xaf{I@')
bytearray(b'\x01\x01\x00\x00\x00:\xd1d\xb5\xaf$;@1B\xd3m\xe48D@')
bytearray(b'\x01\x01\x00\x00\x002\xf4>DY\x97E\xc0W\xd6\x91~V\xf86\xc0')
"bytearray(b'\x01\x01\x00\x00\x00B\xb0O\xa5\x0b,^@\x94|6\xbcj\x0b8@')"
"bytearray(b""\x01\x01\x00\x00\x00v(\x9e\x0e\xbf\'S\xc0\xc9\x98\x16P\x03\xa9C@"")"
bytearray(b'\x01\x01\x00\x00\x00ms\x08\xc1O\xa5*@\xf6\x13)(\xa0\x17J@')
bytearray(b'\x01\x01\x00\x00\x00[=\xcc\x03\xfdB\x13@\xe3>rk\xd2\xf8E@')
bytearray(b'\x01\x01\x00\x00\x00@\xb9m\xdf\xa3v\x1e@\xd5\xd4\ro1`G@')
"bytearray(b'\x01\x01\x00\x00\x008p\xbd\\zB\x1e@\t\xef\xbc\x9e\xf9,I@')"
"bytearray(b""\x01\x01\x00\x00\x00/\x96\xd8k0W(@\'w\x8e\xb7K\xebG@"")"
bytearray(b'\x01\x01\x00\x00\x00\xb19b\x88\xf7w&@\x89\x07\x94M\xb9{I@')
"bytearray(b""\x01\x01\x00\x00\x00s\xdc)\x1d\xac\'\x1d@h\xcaN?\xa8\xdbH@"")"
bytearray(b'\x01\x01\x00\x00\x00`\x8dX0\x96\x1eC@PE\xe0\xfe\x12pK@')
bytearray(b'\x01\x01\x00\x00\x00\xe1\xccC\x016\x9b\x1f@39\x10\xed\xbe\xffH@')
bytearray(b'\x01\x01\x00\x00\x00$&\x97\xb5\x03\xc4\x1c@h\xaaq\x80\xaa\xacH@')
"bytearray(b'\x01\x01\x00\x00\x00r}i\x9b,\xff\x1c@O\xccz1\x94\xadH@')"
"bytearray(b""\x01\x01\x00\x00\x00)\xfa2\x07\xf7\t\'@\xa5D\xb7\x03\x1a\x80I@"")"
bytearray(b'\x01\x01\x00\x00\x00\x17P\xa8\xa7\x8f\x10\x13@\x0b\\\xc3\xb1\xd3pG@')
bytearray(b'\x01\x01\x00\x00\x00s\xf6\x84\xdb\x90\x154@\xfe\x95:m2%J@')
bytearray(b'\x01\x01\x00\x00\x00\x1b\xbc\xaf\xca\x85\x06 @<\x0cR\x95[lG@')
bytearray(b'\x01\x01\x00\x00\x00W\xf1\xa1\x9f\x04\x11!@\x9ahF\xf5\x8c\xacG@')
bytearray(b'\x01\x01\x00\x00\x00e\x87\x9d\xce\xba\x0f!@\xd7z\xd0\xfd\xe6\xabG@')
bytearray(b'\x01\x01\x00\x00\x00\xab\xdf\xf1\x92\xa4\x90\x1f@\xe0\x98\n\x96\x8fWG@')
bytearray(b'\x01\x01\x00\x00\x00\xb3\xc0\xb2-^\x7f\x1e@\xec^8!\xbe\\G@')
bytearray(b'\x01\x01\x00\x00\x00\xa0\x01P G\x8e\x1c@\xe6\xea\xc7&\xf9gG@')
bytearray(b'\x01\x01\x00\x00\x00\r~\xd1\xd4\xa1\xd1\x1d@\x81\xc2\xea\xd9\xbdiG@')
bytearray(b'\x01\x01\x00\x00\x00\x8d\x97n\x12\x83\x88\x1e@3\xd2\x9c\x06V[G@')
bytearray(b'\x01\x01\x00\x00\x00q\x93Qe\x18S @\xf8Z\x86\xeeH\x83G@')
bytearray(b'\x01\x01\x00\x00\x00\x0c\xb6l\x08\xe94!@\xa1\xcf\x91\xa6\x8b\xc9G@')
bytearray(b'\x01\x01\x00\x00\x00?1\xfc\xf1\xa8\x92!@\xa8\xba\x91\xc3q\xbcG@')
bytearray(b'\x01\x01\x00\x00\x00\x88\xefi\xf3\xa4\xf1!@\xe5\xcd+\xe8\x07\xc6G@')
"bytearray(b'\x01\x01\x00\x00\x00\xa0\x8e""\xc6\xc6{ @\x9b\x8bd4\x97ZG@')"
bytearray(b'\x01\x01\x00\x00\x00\xf80  \x04\x1d @\x1bz0\xce\x84_G@')
bytearray(b'\x01\x01\x00\x00\x00B\xcc\xca\x9bh( @U\xa1&\x9f\xc3gG@')
bytearray(b'\x01\x01\x00\x00\x00\x83\x105v.\xf1\x1d@uM7?\xb4gG@')
bytearray(b'\x01\x01\x00\x00\x00\xc5\xb9<\x8c\xff\xe5 @\xc0?\x00\x04\x07\x9eG@')
bytearray(b'\x01\x01\x00\x00\x00`_F\x0c\x96\xfd @\x9f\xafY.\x1b\xafG@')
bytearray(b'\x01\x01\x00\x00\x00\x9e\xe5\xc3\xfd\x91\xb7 @\xc4\x03o\xed\xe9{G@')
"bytearray(b""\x01\x01\x00\x00\x00\xb4e\xaf-\xf2Q!@\xd3\'\x03QA\xc3G@"")"
bytearray(b'\x01\x01\x00\x00\x00:Fh\xba\x8d\xa0 @q\xd5\xd0a\x19\x8cG@')
bytearray(b'\x01\x01\x00\x00\x00\xa9\tG5\x91\x12 @\xf9\xfa\xb5P\x8d\x91G@')
bytearray(b'\x01\x01\x00\x00\x00(\xe3)\xf5v\x99 @\xd7\xe6\xffUG\x87G@')
bytearray(b'\x01\x01\x00\x00\x00_\x1c\xa6\xc7\x00\x8e @\xb9WAg-\x85G@')
bytearray(b'\x01\x01\x00\x00\x00\x19Xl8\xd1\x17 @U\xf6\xa7\x9e\x16\x95G@')
bytearray(b'\x01\x01\x00\x00\x00\xe8Z\x0f\xba\xdf\x84\x1e@\x0f\x14\xd3\xe0\x11ZG@')
bytearray(b'\x01\x01\x00\x00\x00\x07\xa6\x89-\xf3\xcc\x1e@\xab\xb4\xc55>kG@')
"bytearray(b'\x01\x01\x00\x00\x00\xf3\x87\x0b\xe5\xe9M!@e\xd4\xc6""\x97\xd8G@')"
bytearray(b'\x01\x01\x00\x00\x00\xa8hQD+\x98 @\xfej\xc4\x82\xb1\x85G@')
bytearray(b'\x01\x01\x00\x00\x00b8\x8d\xa3(\xfe\x1f@\x13\x05D\xd2\xb8\x90G@')
bytearray(b'\x01\x01\x00\x00\x00\xfeG\xa6C\xa77\x1e@J\xb8\x90GpkG@')
bytearray(b'\x01\x01\x00\x00\x00\x81\xfeB\x8f\x18\x9d\x1f@\xd9\x98\xd7\x11\x87nG@')
bytearray(b'\x01\x01\x00\x00\x00\xa9\xf9*\xf9\xd8\xc1 @\xe1Qtn$\x89G@')
bytearray(b'\x01\x01\x00\x00\x00k\x9b\xe2qQ) @\x0f\xa0:\xb1\xe2\x8eG@')
bytearray(b'\x01\x01\x00\x00\x00\xed\x88Tb\xe8\xa2\x1f@@/7s\xa3rG@')
bytearray(b'\x01\x01\x00\x00\x00\x92\t\xf85\x92\xcc\x1e@\x96\x81\xb9\xcc\x9flG@')
bytearray(b'\x01\x01\x00\x00\x00\x97go:\x13\xcc\x1e@)\xd1H:\xb9cG@')
bytearray(b'\x01\x01\x00\x00\x00\xff\x8e\xf2\xdd\xf7\x81

2025-01-16 19:38:56 - root - INFO - itercount: 0
2025-01-16 19:38:56 - root - INFO - Database Name: GEO_OPENSTREETMAP_CENSUS_PLACES
Schema Name: GEO_OPENSTREETMAP
DDL describes table information.
,0
table_name,PLANET_LAYERS
description,
DDL,"create or replace TABLE PLANET_LAYERS (
	""layer_code"" NUMBER(38,0),
	""layer_class"" VARCHAR(16777216),
	""layer_name"" VARCHAR(16777216),
	""gdal_type"" VARCHAR(16777216),
	""osm_id"" NUMBER(38,0),
	""osm_way_id"" NUMBER(38,0),
	""osm_timestamp"" NUMBER(38,0),
	""osm_version"" NUMBER(38,0),
	""all_tags"" VARIANT,
	""geometry"" BINARY(8388608)
);"

,1
table_name,PLANET_NODES
description,
DDL,"create or replace TABLE PLANET_NODES (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT,
	""latitude"" NUMBER(38,9),
	""longitude"" NUMBER(38,9)
);"

,2
table_name,PLANET_WAYS
description,
DDL,"create or replace TABLE PLANET_WAYS (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT,
	""nodes"" VARIANT
);"

,3
table_name,PLANET_RELATIONS
description,
DDL,"create or replace TABLE PLANET_RELATIONS (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT,
	""members"" VARIANT
);"

,4
table_name,HISTORY_NODES
description,
DDL,"create or replace TABLE HISTORY_NODES (
	ID NUMBER(38,0),
	VERSION NUMBER(38,0),
	USERNAME VARCHAR(16777216),
	CHANGESET NUMBER(38,0),
	VISIBLE BOOLEAN,
	OSM_TIMESTAMP NUMBER(38,0),
	GEOMETRY BINARY(8388608),
	ALL_TAGS VARIANT,
	LATITUDE NUMBER(38,9),
	LONGITUDE NUMBER(38,9)
);"

,5
table_name,HISTORY_RELATIONS
description,
DDL,"create or replace TABLE HISTORY_RELATIONS (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""members"" VARIANT,
	""all_tags"" VARIANT
);"

,6
table_name,PLANET_FEATURES
description,
DDL,"create or replace TABLE PLANET_FEATURES (
	""feature_type"" VARCHAR(16777216),
	""osm_id"" NUMBER(38,0),
	""osm_way_id"" NUMBER(38,0),
	""osm_version"" NUMBER(38,0),
	""osm_timestamp"" NUMBER(38,0),
	""all_tags"" VARIANT,
	""geometry"" BINARY(8388608)
);"

,7
table_name,PLANET_FEATURES_POINTS
description,
DDL,"create or replace TABLE PLANET_FEATURES_POINTS (
	""osm_id"" NUMBER(38,0),
	""osm_version"" NUMBER(38,0),
	""osm_way_id"" NUMBER(38,0),
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT
);"

,8
table_name,HISTORY_CHANGESETS
description,
DDL,"create or replace TABLE HISTORY_CHANGESETS (
	""id"" NUMBER(38,0),
	""osm_timestamp_min"" NUMBER(38,0),
	""osm_timestamp_max"" NUMBER(38,0),
	""relations"" VARIANT,
	""ways"" VARIANT,
	""nodes"" VARIANT
);"

,9
table_name,HISTORY_LAYERS
description,
DDL,"create or replace TABLE HISTORY_LAYERS (
	""layer_code"" NUMBER(38,0),
	""layer_class"" VARCHAR(16777216),
	""layer_name"" VARCHAR(16777216),
	""osm_id"" NUMBER(38,0),
	""osm_way_id"" NUMBER(38,0),
	""osm_timestamp"" NUMBER(38,0),
	""osm_version"" NUMBER(38,0),
	""all_tags"" VARIANT,
	""geometry"" BINARY(8388608),
	""gdal_type"" VARCHAR(16777216)
);"

Database Name: GEO_OPENSTREETMAP_CENSUS_PLACES
Schema Name: GEO_US_CENSUS_PLACES
DDL describes table information.
,0
table_name,PLACES_COLORADO
description,
DDL,"create or replace TABLE PLACES_COLORADO (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,1
table_name,PLACES_CONNECTICUT
description,
DDL,"create or replace TABLE PLACES_CONNECTICUT (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,2
table_name,PLACES_IDAHO
description,
DDL,"create or replace TABLE PLACES_IDAHO (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,3
table_name,PLACES_INDIANA
description,
DDL,"create or replace TABLE PLACES_INDIANA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,4
table_name,PLACES_MINNESOTA
description,
DDL,"create or replace TABLE PLACES_MINNESOTA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,5
table_name,PLACES_PENNSYLVANIA
description,
DDL,"create or replace TABLE PLACES_PENNSYLVANIA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,6
table_name,PLACES_DELAWARE
description,
DDL,"create or replace TABLE PLACES_DELAWARE (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,7
table_name,PLACES_DISTRICT_OF_COLUMBIA
description,
DDL,"create or replace TABLE PLACES_DISTRICT_OF_COLUMBIA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,8
table_name,PLACES_GEORGIA
description,
DDL,"create or replace TABLE PLACES_GEORGIA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,9
table_name,PLACES_NORTH_CAROLINA
description,
DDL,"create or replace TABLE PLACES_NORTH_CAROLINA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,10
table_name,PLACES_OHIO
description,
DDL,"create or replace TABLE PLACES_OHIO (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,11
table_name,PLACES_SOUTH_DAKOTA
description,
DDL,"create or replace TABLE PLACES_SOUTH_DAKOTA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,12
table_name,PLACES_TEXAS
description,
DDL,"create or replace TABLE PLACES_TEXAS (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,13
table_name,PLACES_WISCONSIN
description,
DDL,"create or replace TABLE PLACES_WISCONSIN (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,14
table_name,PLACES_WYOMING
description,
DDL,"create or replace TABLE PLACES_WYOMING (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,15
table_name,PLACES_KANSAS
description,
DDL,"create or replace TABLE PLACES_KANSAS (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,16
table_name,PLACES_ALABAMA
description,
DDL,"create or replace TABLE PLACES_ALABAMA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,17
table_name,PLACES_FLORIDA
description,
DDL,"create or replace TABLE PLACES_FLORIDA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,18
table_name,PLACES_HAWAII
description,
DDL,"create or replace TABLE PLACES_HAWAII (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,19
table_name,PLACES_KENTUCKY
description,
DDL,"create or replace TABLE PLACES_KENTUCKY (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,20
table_name,PLACES_MASSACHUSETTS
description,
DDL,"create or replace TABLE PLACES_MASSACHUSETTS (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,21
table_name,PLACES_MISSOURI
description,
DDL,"create or replace TABLE PLACES_MISSOURI (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,22
table_name,PLACES_NEW_YORK
description,
DDL,"create or replace TABLE PLACES_NEW_YORK (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,23
table_name,PLACES_NORTHERN_MARIANA_ISLANDS
description,
DDL,"create or replace TABLE PLACES_NORTHERN_MARIANA_ISLANDS (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,24
table_name,PLACES_VERMONT
description,
DDL,"create or replace TABLE PLACES_VERMONT (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,25
table_name,PLACES_GUAM
description,
DDL,"create or replace TABLE PLACES_GUAM (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,26
table_name,PLACES_NORTH_DAKOTA
description,
DDL,"create or replace TABLE PLACES_NORTH_DAKOTA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,27
table_name,PLACES_PUERTO_RICO
description,
DDL,"create or replace TABLE PLACES_PUERTO_RICO (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,28
table_name,PLACES_SOUTH_CAROLINA
description,
DDL,"create or replace TABLE PLACES_SOUTH_CAROLINA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,29
table_name,PLACES_US_VIRGIN_ISLANDS
description,
DDL,"create or replace TABLE PLACES_US_VIRGIN_ISLANDS (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,30
table_name,PLACES_MAINE
description,
DDL,"create or replace TABLE PLACES_MAINE (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,31
table_name,PLACES_WEST_VIRGINIA
description,
DDL,"create or replace TABLE PLACES_WEST_VIRGINIA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,32
table_name,PLACES_WASHINGTON
description,
DDL,"create or replace TABLE PLACES_WASHINGTON (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,33
table_name,PLACES_CALIFORNIA
description,
DDL,"create or replace TABLE PLACES_CALIFORNIA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,34
table_name,PLACES_ILLINOIS
description,
DDL,"create or replace TABLE PLACES_ILLINOIS (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,35
table_name,PLACES_MONTANA
description,
DDL,"create or replace TABLE PLACES_MONTANA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,36
table_name,PLACES_NEVADA
description,
DDL,"create or replace TABLE PLACES_NEVADA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,37
table_name,PLACES_NEW_HAMPSHIRE
description,
DDL,"create or replace TABLE PLACES_NEW_HAMPSHIRE (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,38
table_name,PLACES_OREGON
description,
DDL,"create or replace TABLE PLACES_OREGON (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,39
table_name,PLACES_RHODE_ISLAND
description,
DDL,"create or replace TABLE PLACES_RHODE_ISLAND (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,40
table_name,PLACES_UTAH
description,
DDL,"create or replace TABLE PLACES_UTAH (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,41
table_name,US_NATIONAL_PLACES
description,
DDL,"create or replace TABLE US_NATIONAL_PLACES (
	""state_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,42
table_name,PLACES_LOUISIANA
description,
DDL,"create or replace TABLE PLACES_LOUISIANA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,43
table_name,PLACES_MISSISSIPPI
description,
DDL,"create or replace TABLE PLACES_MISSISSIPPI (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,44
table_name,PLACES_NEW_MEXICO
description,
DDL,"create or replace TABLE PLACES_NEW_MEXICO (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,45
table_name,PLACES_OKLAHOMA
description,
DDL,"create or replace TABLE PLACES_OKLAHOMA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,46
table_name,PLACES_TENNESSEE
description,
DDL,"create or replace TABLE PLACES_TENNESSEE (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,47
table_name,PLACES_ALASKA
description,
DDL,"create or replace TABLE PLACES_ALASKA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,48
table_name,PLACES_AMERICAN_SAMOA
description,
DDL,"create or replace TABLE PLACES_AMERICAN_SAMOA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,49
table_name,PLACES_ARIZONA
description,
DDL,"create or replace TABLE PLACES_ARIZONA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,50
table_name,PLACES_ARKANSAS
description,
DDL,"create or replace TABLE PLACES_ARKANSAS (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,51
table_name,PLACES_IOWA
description,
DDL,"create or replace TABLE PLACES_IOWA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,52
table_name,PLACES_MARYLAND
description,
DDL,"create or replace TABLE PLACES_MARYLAND (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,53
table_name,PLACES_MICHIGAN
description,
DDL,"create or replace TABLE PLACES_MICHIGAN (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,54
table_name,PLACES_VIRGINIA
description,
DDL,"create or replace TABLE PLACES_VIRGINIA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,55
table_name,PLACES_NEBRASKA
description,
DDL,"create or replace TABLE PLACES_NEBRASKA (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

,56
table_name,PLACES_NEW_JERSEY
description,
DDL,"create or replace TABLE PLACES_NEW_JERSEY (
	""state_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""place_gnis_code"" VARCHAR(16777216),
	""place_id"" VARCHAR(16777216),
	""place_name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""principal_city_msa"" BOOLEAN,
	""principal_city_ne"" BOOLEAN,
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""place_geom"" BINARY(8388608)
);"

External knowledge that might be helpful: 
Categories: Geospatial functions


## ST_CONTAINS

Returns TRUE if a GEOGRAPHY or GEOMETRY object is completely inside another object of the same type.
More strictly, object g1 contains object g2 if and only if no points of g2 lie in the exterior of g1, and at least one point of the interior of B lies in the interior of A. There are certain subtleties in this definition that are not immediately obvious. For more details on what “contains” means, see the Dimensionally Extended 9-Intersection Model (DE-9IM).
Although ST_COVERS and ST_CONTAINS might seem similar, the two functions have subtle differences. For details on the differences between “covers” and “contains”, see the Dimensionally Extended 9-Intersection Model (DE-9IM).

Note This function does not support using a GeometryCollection or FeatureCollection as input values.

Tip You can use the search optimization service to improve the performance of queries that call this function.
For details, see Search Optimization Service.

See also:ST_WITHIN , ST_COVERS , ST_COVEREDBY


## Syntax

ST_CONTAINS( <geography_expression_1> , <geography_expression_2> )

ST_CONTAINS( <geometry_expression_1> , <geometry_expression_2> )


## Arguments


geography_expression_1A GEOGRAPHY object that is not a GeometryCollection or FeatureCollection.

geography_expression_2A GEOGRAPHY object that is not a GeometryCollection or FeatureCollection.

geometry_expression_1A GEOMETRY object that is not a GeometryCollection or FeatureCollection.

geometry_expression_2A GEOMETRY object that is not a GeometryCollection or FeatureCollection.


## Returns

BOOLEAN.

## Usage notes


For GEOMETRY objects, the function reports an error if the two input GEOMETRY objects have different SRIDs.


## Examples


## GEOGRAPHY examples

This shows a simple use of the ST_CONTAINS function:

create table geospatial_table_01 (g1 GEOGRAPHY, g2 GEOGRAPHY);
insert into geospatial_table_01 (g1, g2) values 
    ('POLYGON((0 0, 3 0, 3 3, 0 3, 0 0))', 'POLYGON((1 1, 2 1, 2 2, 1 2, 1 1))');

Copy SELECT ST_CONTAINS(g1, g2) 
    FROM geospatial_table_01;
+---------------------+
| ST_CONTAINS(G1, G2) |
|---------------------|
| True                |
+---------------------+



## GEOMETRY examples

The query below shows several examples of using ST_CONTAINS. Note how ST_CONTAINS determines that:

The Polygon contains itself.
The Polygon does not contain the LineString that is on its border.
SELECT ST_CONTAINS(poly, poly_inside),
      ST_CONTAINS(poly, poly),
      ST_CONTAINS(poly, line_on_boundary),
      ST_CONTAINS(poly, line_inside)
  FROM (SELECT
    TO_GEOMETRY('POLYGON((-2 0, 0 2, 2 0, -2 0))') AS poly,
    TO_GEOMETRY('POLYGON((-1 0, 0 1, 1 0, -1 0))') AS poly_inside,
    TO_GEOMETRY('LINESTRING(-1 1, 0 2, 1 1)') AS line_on_boundary,
    TO_GEOMETRY('LINESTRING(-2 0, 0 0, 0 1)') AS line_inside);

+--------------------------------+------------------------+------------------------------------+-------------------------------+
| ST_CONTAINS(POLY, POLY_INSIDE) | ST_CONTAINS(POLY,POLY) | ST_CONTAINS(POLY,LINE_ON_BOUNDARY) | ST_CONTAINS(POLY,LINE_INSIDE) |
|--------------------------------+------------------------+------------------------------------+-------------------------------|
| True                           | True                   | False                              | True                          |
+--------------------------------+------------------------+------------------------------------+-------------------------------+
The table structure information is ({database name: {schema name: {table name}}}): 
{'GEO_OPENSTREETMAP_CENSUS_PLACES': {'GEO_OPENSTREETMAP': ['HISTORY_CHANGESETS', 'HISTORY_LAYERS', 'HISTORY_NODES', 'HISTORY_RELATIONS', 'PLANET_FEATURES', 'PLANET_FEATURES_POINTS', 'PLANET_LAYERS', 'PLANET_NODES', 'PLANET_RELATIONS', 'PLANET_WAYS'], 'GEO_US_CENSUS_PLACES': ['PLACES_ALABAMA', 'PLACES_ALASKA', 'PLACES_AMERICAN_SAMOA', 'PLACES_ARIZONA', 'PLACES_ARKANSAS', 'PLACES_CALIFORNIA', 'PLACES_COLORADO', 'PLACES_CONNECTICUT', 'PLACES_DELAWARE', 'PLACES_DISTRICT_OF_COLUMBIA', 'PLACES_FLORIDA', 'PLACES_GEORGIA', 'PLACES_GUAM', 'PLACES_HAWAII', 'PLACES_IDAHO', 'PLACES_ILLINOIS', 'PLACES_INDIANA', 'PLACES_IOWA', 'PLACES_KANSAS', 'PLACES_KENTUCKY', 'PLACES_LOUISIANA', 'PLACES_MAINE', 'PLACES_MARYLAND', 'PLACES_MASSACHUSETTS', 'PLACES_MICHIGAN', 'PLACES_MINNESOTA', 'PLACES_MISSISSIPPI', 'PLACES_MISSOURI', 'PLACES_MONTANA', 'PLACES_NEBRASKA', 'PLACES_NEVADA', 'PLACES_NEW_HAMPSHIRE', 'PLACES_NEW_JERSEY', 'PLACES_NEW_MEXICO', 'PLACES_NEW_YORK', 'PLACES_NORTHERN_MARIANA_ISLANDS', 'PLACES_NORTH_CAROLINA', 'PLACES_NORTH_DAKOTA', 'PLACES_OHIO', 'PLACES_OKLAHOMA', 'PLACES_OREGON', 'PLACES_PENNSYLVANIA', 'PLACES_PUERTO_RICO', 'PLACES_RHODE_ISLAND', 'PLACES_SOUTH_CAROLINA', 'PLACES_SOUTH_DAKOTA', 'PLACES_TENNESSEE', 'PLACES_TEXAS', 'PLACES_US_VIRGIN_ISLANDS', 'PLACES_UTAH', 'PLACES_VERMONT', 'PLACES_VIRGINIA', 'PLACES_WASHINGTON', 'PLACES_WEST_VIRGINIA', 'PLACES_WISCONSIN', 'PLACES_WYOMING', 'US_NATIONAL_PLACES']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

- **Table:** `GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"`

  - `"place_name"`: Used to identify places by name, such as 'Philadelphia'.
  - `"place_geom"`: Geometry of the place, used for spatial operations.

- **Table:** `GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS"`

  - `"all_tags"`: Contains key-value pairs of attributes; used to find amenities like 'library', 'place_of_worship', or 'community_centre'.
  - `"geometry"`: The geographic location of the feature.
  - `"osm_id"`: Unique identifier for each feature.
  - `"osm_timestamp"`: Timestamp of when the feature was last updated.

**Conditions that may be used:**

- Filtering `"place_name"` to locate 'Philadelphia'.
- Extracting and filtering `"all_tags"` where the `"key"` is 'amenity' and the `"value"` is one of the desired amenities.
- Using spatial functions to assess if features are within Philadelphia's geometry.

---

**SQL Queries:**

1. **Retrieve distinct place names in Pennsylvania:**

   ```sql
   SELECT DISTINCT "place_name"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA";
   ```

2. **Get details of the place named 'Philadelphia':**

   ```sql
   SELECT *
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
   WHERE "place_name" = 'Philadelphia';
   ```

3. **Retrieve the geometry of Philadelphia:**

   ```sql
   SELECT "place_geom"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
   WHERE "place_name" = 'Philadelphia';
   ```

4. **List distinct keys present in the `"all_tags"` column:**

   ```sql
   SELECT DISTINCT f."key"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
   LATERAL FLATTEN(input => t."all_tags") f;
   ```

5. **List distinct amenities available in the data:**

   ```sql
   SELECT DISTINCT f."value"::STRING AS "amenity"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
   LATERAL FLATTEN(input => t."all_tags") f
   WHERE f."key" = 'amenity';
   ```

6. **Get features that are libraries:**

   ```sql
   SELECT t."osm_id", t."geometry", f."value"::STRING AS "amenity"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
   LATERAL FLATTEN(input => t."all_tags") f
   WHERE f."key" = 'amenity' AND f."value"::STRING = 'library';
   ```

7. **Get features that are places of worship:**

   ```sql
   SELECT t."osm_id", t."geometry", f."value"::STRING AS "amenity"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
   LATERAL FLATTEN(input => t."all_tags") f
   WHERE f."key" = 'amenity' AND f."value"::STRING = 'place_of_worship';
   ```

8. **Get features that are community centres:**

   ```sql
   SELECT t."osm_id", t."geometry", f."value"::STRING AS "amenity"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
   LATERAL FLATTEN(input => t."all_tags") f
   WHERE f."key" = 'amenity' AND f."value"::STRING = 'community_centre';
   ```

9. **Extract samples of the `"all_tags"` column to understand its structure:**

   ```sql
   SELECT t."all_tags"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t
   LIMIT 1000;
   ```

10. **Retrieve sample geometries of point features:**

    ```sql
    SELECT t."geometry"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t
    LIMIT 1000;
    ```

---

These queries help in understanding the relevant data needed to find amenities within Philadelphia and calculate distances between them. They focus on exploring the potential values and structures of important columns without directly solving the original task.Query:
SELECT DISTINCT "place_name"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA";
Answer:
Too long, hard cut:
place_name
West Easton
Montgomery
Salladasburg
Claysville
West Pittston
Carmichaels
Athens
Burlington
Canton
Edwardsville
Rices Landing
New Albany
Rome
South Waverly
Towanda
Troy
Wyalusing
Deer Lake
Gilberton
Manheim
Lewistown
Schuylkill Haven
Strasburg
Bernville
Norwood
Prospect Park
St. Lawrence
Shillington
Topton
Wyomissing
Conshohocken
Herndon
Green Hills
Woodbury
Hyndman
Curwensville
Nuangola
Trumbauersville
Weissport
Lititz
Mount Joy
New Holland
Kutztown
Leesport
Wernersville
West Reading
Pennsburg
Cornwall
Newburg
Le Raysville
New Washington
Shamokin Dam
Fayette City
Emlenton
Hawthorn
Smethport
Rouseville
Silverdale
Enon Valley
New Eagle
Albion
New Berlin
Eagles Mere
Malvern
Oakmont
Elco
Mercer
Newton Hamilton
Mountville
Adamstown
Birdsboro
Mohnton
New Morgan
Confluence
Girardville
Sinking Spring
Womelsdorf
Norristown
McVeytown
Middletown
Coalport
Hamburg
Waymart
Tarentum
Jersey Shore
South Williamsport
Macungie
Burnham
Bridgeport
Fleetwood
Danville
South Connellsville
Trainer
Everett
Glen Hope
Dauphin
Sylvania
Selinsgrove
Centerport
Honesdale
Prompton
Starrucca
Lyons
California
Mount Pocono
Ohiopyle
Sayre
Dushore
Emporium
Emsworth
Point Marion
Knox
Sligo
Harrisville
Media
Duryea
Kingston
Duboistown
Telford
Coraopolis
Ephrata
Quarryville
Ohioville
Shippingport
Jefferson
Freeport
North Apollo
Slatington
Alburtis
Union City
Charleroi
Coal Center
Wallaceton
Bechtelsville
Mifflinburg
Flemington
East Brady
Worthville
Vandergrift
Valley-Hi
Springdale
Hulmeville
Harveys Lake
Speers
Sellersville
Bessemer
S.N.P.J.
Wampum
Elizabethtown
Roscoe
Montoursville
Collegeville
Cranesville
Lenhartsville
York Haven
Schwenksville
Galeton
Millersburg
Nicholson
Irvona
Masontown
Shinglehouse
Chester Hill
Smithton
Chapman
Honey Brook
Casselman
Economy
Freedom
Christiana
Denver
Hallstead
Dunlevy
East Vandergrift
Archbald
Sutersville
Tullytown
Yardley
Conway
Monaca
Middleburg
West Middlesex
Johnsonburg
Langhorne
Hellertown
Snydertown
St. Clair
Roaring Spring
Twilight
Coudersport
East Butler
South Greensburg
Ramey
Monroe
Greensboro
Shoemakersville
Ridley Park
Wind Gap
Hawley
Hopewell
Grampian
Tioga
Wellsboro
East Rochester
Newell
Saegertown
Eldred
Port Allegany
Wyoming
Swissvale
Riegelsville
Cheswick
Volant
Columbia
Ellsworth
Avondale
Atwood
Kittanning
Allenport
Jim Thorpe
Donora
West Conshohocken
Millersville
Bedford
Manns Choice
Troutville
Glenfield
Laporte
Centerville
New Bethlehem
Conneautville
Clarion
Kane
Mount Jewett
Whitaker
Bristol
Exeter
Lewis Run
Picture Rocks
White Oak
Edgeworth
Bear Creek Village
Shickshinny
Quakertown
Elizabeth
Ellport
New Beaver
Rochester
Stockdale
West Brownsville
Edinboro
Girard
Wattsburg
Bowmanstown
Lehighton
Nesquehoning
East Side
Royalton
Northampton
Blooming Valley
Dallas
Brookhaven
Tionesta
Auburn
Eastvale
Beavertown
Landingville
Robesonia
Mahaffey
Driftwood
Green Lane
Palmerton
Parryville
Lansford
Pottstown
Royersford
Tunkhannock
Big Beaver
Glasgow
Clearfield
Port Clinton
Patterson Heights
Falls Creek
Brisbin
Westover
Eddystone
Folcroft
Bangor
Polk
Vintondale
Vandling
Marietta
West Newton
Youngwood
Atglen
Downingtown
Elverson
Kennett Square
Modena
Chester Heights
East Stroudsburg
Ambridge
Baden
New Lebanon
Utica
Terre Hill
Parkesburg
South Coatesville
West Chester
Newport
West Elizabeth
Aspinwall
Dravosburg
Akron
Industry
Koppel
Midland
East Petersburg
Hop Bottom
Plum
Stillwater
Plymouth
Harmony
West Leechburg
Hyde Park
Milford
New Stanton
Olyphant
Mount Union
Great Bend
Oklahoma
Biglerville
East Berlin
Gettysburg
Bolivar
Derry
Manorville
Liverpool
Marysville
New Brighton
Tidioute
Zelienople
McClure
South Heights
Sharpsville
Stoneboro
Mill Hall
East Conemaugh
Briar Creek
Catawissa
Forest City
Lanesboro
Susquehanna Depot
Union Dale
Chicora
Ferndale
Franklin
Ehrenfeld
Tatamy
Dublin
Ivyland
North Catasauqua
Loganton
West Liberty
McKees Rocks
Ernest
Indiana
Clintonville
South Fork
Cherry Tree
Foxburg
New Hope
Perkasie
Summerville
Ellwood City
Brackenridge
Belle Vernon
Big Run
West Grove
Brockway
Sykesville
Timblin
Brookville
Riverside
Watsontown
Jefferson Hills
Fox Chapel
Franklin Park
Haysville
Delaware Water Gap
Meshoppen
Forty Fort
Mansfield
Freemansburg
Portland
Hollidaysburg
Mount Oliver
Aldan
West Hazleton
Hughestown
Ashland
East Prospect
Juniata Terrace
Kistler
Tower City
Tremont
New Centerville
Boyertown
Addison
Paint
Salisbury
East Greenville
Hatfield
Rose Valley
State College
Coaldale
Osceola Mills
Shanksville
Winterstown
Yorkana
Dunbar
Weatherly
Cochranton
Callensburg
Fairview
Seven Fields
Adamsburg
Donegal
Markleysburg
Barkeyville
Garrett
Freeland
Thompsontown
Wilmerding
Knoxville
New Columbus
Dickson City
Loganville
Manchester
Mill Village
Elizabethville
Cambridge Springs
Conneaut Lake
Linesville
Halifax
Williamstown
Houston
Frackville
Penn
Summerhill
Beaver
Rankin
Versailles
West Mifflin
Palmyra
Penn Lake Park
Marklesburg
Avonmore
Millerstown
Philipsburg
Jamestown
Sugarcreek
Nanty-Glo
Lincoln
Avalon
Ben Avon
North Braddock
Blawnox
Brownsville
Etna
Fountain Hill
Port Vue
Phoenixv
Query:
SELECT *
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
   WHERE "place_name" = 'Philadelphia';
Answer:
Too long, hard cut:
state_fips_code,place_fips_code,place_gnis_code,place_id,place_name,name_lsad,lsad_code,fips_class_code,principal_city_msa,principal_city_ne,functional_status,area_land_meters,area_water_meters,internal_point_lat,internal_point_lon,internal_point_geom,place_geom
42,60000,01215531,4260000,Philadelphia,Philadelphia city,25,C5,True,False,A,347661370,21926542,40.0093755,-75.1333459,bytearray(b'\x01\x01\x00\x00\x00\x90\xe3=\xbd\x88\xc8R\xc0\x1c\xf1d73\x01D@'),"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\xbc\x0b\x00\x00\xebV\xcfI\xef\xd1R\xc0\xa5\xa1F!\xc9\xfcC@t&m\xaa\xee\xd1R\xc0\x82\xff\xadd\xc7\xfcC@9(a\xa6\xed\xd1R\xc0\x1f\xa2\xd1\x1d\xc4\xfcC@i\xc6\xa2\xe9\xec\xd1R\xc0\xc8\xf2\xaez\xc0\xfcC@:\\\xab=\xec\xd1R\xc0jR\n\xba\xbd\xfcC@\xcf\xbf]\xf6\xeb\xd1R\xc0}\xf1E{\xbc\xfcC@\x82V`\xc8\xea\xd1R\xc0\x018\xf6\xec\xb9\xfcC@w\x10;S\xe8\xd1R\xc0Z\xeb\x8b\x84\xb6\xfcC@\x8b\xfde\xf7\xe4\xd1R\xc0{\xa0\x15\x18\xb2\xfcC@\x1b\xd8*\xc1\xe2\xd1R\xc06(\x9a\x07\xb0\xfcC@\xf85\x92\x04\xe1\xd1R\xc0\x83\xf9+d\xae\xfcC@\xdbj\xd6\x19\xdf\xd1R\xc0#%=\x0c\xad\xfcC@\x8e\x01\xd9\xeb\xdd\xd1R\xc0\x84a\xc0\x92\xab\xfcC@\xee#\xb7&\xdd\xd1R\xc0\x1b\x13b.\xa9\xfcC@=\xc1\xfe\xeb\xdc\xd1R\xc0\xe79""\xdf\xa5\xfcC@\xd7\xfb\x8dv\xdc\xd1R\xc0l\xb4\x1c\xe8\xa1\xfcC@\x18\x05\xc1\xe3\xdb\xd1R\xc0\x03f\xbe\x83\x9f\xfcC@\x90im\x1a\xdb\xd1R\xc0!\xe7\xfd\x7f\x9c\xfcC@\x13b.\xa9\xda\xd1R\xc0\x056\xe7\xe0\x99\xfcC@\xd8I}Y\xda\xd1R\xc06""\x18\x07\x97\xfcC@1\x95~\xc2\xd9\xd1R\xc0f\xda\xfe\x95\x95\xfcC@\x7fLk\xd3\xd8\xd1R\xc0\x0e\xf7\x91[\x93\xfcC@2\xc9\xc8Y\xd8\xd1R\xc0\xe0\xda\x89\x92\x90\xfcC@\x0e\xf3\xe5\x05\xd8\xd1R\xc0\x88+g\xef\x8c\xfcC@t\xd2\xfb\xc6\xd7\xd1R\xc0TR\'\xa0\x89\xfcC@z\xa9\xd8\x98\xd7\xd1R\xc0\x9f\x9a\xcb\r\x86\xfcC@\xd9\xb1\x11\x88\xd7\xd1R\xc0},}\xe8\x82\xfcC@!x|{\xd7\xd1R\xc0Y\x8a\xe4+\x81\xfcC@\xcd\x1d\xfd/\xd7\xd1R\xc0$}ZE\x7f\xfcC@\x0f\'0\x9d\xd6\xd1R\xc0\x7f0\xf0\xdc{\xfcC@\x03\x93\x1bE\xd6\xd1R\xc0\xe0\xa0\xbd\xfax\xfcC@\x92\x1f\xf1+\xd6\xd1R\xc0\x17\x16\xdc\x0fx\xfcC@Ks+\x84\xd5\xd1R\xc0Ym\xfe_u\xfcC@\xc3\xd7\xd7\xba\xd4\xd1R\xc00\x0e.\x1ds\xfcC@vn\xda\x8c\xd3\xd1R\xc0\xb6T\xde\x8ep\xfcC@\xa6&\xc1\x1b\xd2\xd1R\xc0i\x1f+\xf8m\xfcC@\xad1\xe8\x84\xd0\xd1R\xc0\xb7$\x07\xecj\xfcC@\xcbd8\x9e\xcf\xd1R\xc0\x89\x08\xff""h\xfcC@\xc2l\x02\x0c\xcb\xd1R\xc0zm6Vb\xfcC@\x81\x97\x196\xca\xd1R\xc0]\x88\xd5\x1fa\xfcC@\n\x81\\\xe2\xc8\xd1R\xc0F`\xaco`\xfcC@M\xbe\xd9\xe6\xc6\xd1R\xc0\x11\x1f\xd8\xf1_\xfcC@\x95\xb8\x8eq\xc5\xd1R\xc0\x9a\xeeuR_\xfcC@\xd8\xc1\xc1\xde\xc4\xd1R\xc0\x931>\xcc^\xfcC@~\xaa\n\r\xc4\xd1R\xc0\xca\xa6\\\xe1]\xfcC@\x07z\xa8m\xc3\xd1R\xc0\xc0,\xed\xd4\\\xfcC@C\xac\xfe\x08\xc3\xd1R\xc0\xf5\xa1\x0b\xea[\xfcC@\xc0\xcd\xe2\xc5\xc2\xd1R\xc0\xd7\xbc\xaa\xb3Z\xfcC@\x7f\xdeT\xa4\xc2\xd1R\xc0\x9d\xbe\x9e\xafY\xfcC@\xaeb\xf1\x9b\xc2\xd1R\xc0 \xd1\x04\x8aX\xfcC@\x1f\xd6\x1b\xb5\xc2\xd1R\xc0VF#\x9fW\xfcC@\xd28\xd4\xef\xc2\xd1R\xc0\x9e&3\xdeV\xfcC@8\xfeDe\xc3\xd1R\xc0i\xe5^`V\xfcC@\x08`\x03""\xc4\xd1R\xc0\x16\x8b\xdf\x14V\xfcC@`w\xba\xf3\xc4\xd1R\xc0\xdfI\x0b\x97U\xfcC@x\x9f\xe3\xa3\xc5\xd1R\xc0\n\x11p\x08U\xfcC@$+\xbf\x0c\xc6\xd1R\xc0\x82u\x1c?T\xfcC@\xfa}\xff\xe6\xc5\xd1R\xc0d\x90\xbb\x08S\xfcC@\x8f\xe1\xb1\x9f\xc5\xd1R\xc0H\xabZ\xd2Q\xfcC@q\xe2\xab\x1d\xc5\xd1R\xc0ZJ\x96\x93P\xfcC@\xa1\x80\xed`\xc4\xd1R\xc0\xae\xd8_vO\xfcC@\xe3\x89 \xce\xc3\xd1R\xc0T\xc1\xa8\xa4N\xfcC@=\xd5!7\xc3\xd1R\xc0\x9d\xa1\xb8\xe3M\xfcC@\xcc{\x9ci\xc2\xd1R\xc0\xc7h\x1dUM\xfcC@P\x8e\x02D\xc1\xd1R\xc01\x1f\x10\xe8L\xfcC@\n\xfc\xe1\xe7\xbf\xd1R\xc0\xccY\x9frL\xfcC@\xbc\x92\xe4\xb9\xbe\xd1R\xc0\xfd\xdd;jL\xfcC@\x10!\xae\x9c\xbd\xd1R\xc0\xfd\xdd;jL\xfcC@\xd5""\xa2\x98\xbc\xd1R\xc0\xaf@\xf4\xa4L\xfcC@\xb2fd\x90\xbb\xd1R\xc0\xb5\xfd++M\xfcC@*\x19\x00\xaa\xb8\xd1R\xc0\xae\xd8_vO\xfcC@\xc6m4\x80\xb7\xd1R\xc0;1\xeb\xc5P\xfcC@\xd25\x93o\xb6\xd1R\xc0\xd670\xb9Q\xfcC@n\x8a\xc7E\xb5\xd1R\xc0)\x92\xaf\x04R\xfcC@K\xe8.\x89\xb3\xd1R\xc0}\xec.PR\xfcC@\xc8#\xb8\x91\xb2\xd1R\xc0\x8f\x8bj\x11Q\xfcC@i5$\xee\xb1\xd1R\xc0\x1fL\x8a\x8fO\xfcC@\xb7\xd2k\xb3\xb1\xd1R\xc0\x1f\x80\xd4&N\xfcC@i\x1b\x7f\xa2\xb2\xd1R\xc0\x91\'I\xd7L\xfcC@\xec\xdf\xf5\x99\xb3\xd1R\xc0\xd3J!\x90K\xfcC@\\9{g\xb4\xd1R\xc0E\xf2\x95@J\xfcC@\xf1\x82\x88\xd4\xb4\xd1R\xc0j\xfc\xc2+I\xfcC@\xd3i\xdd\x06\xb5\xd1R\xc0|\x9b\xfe\xecG\xfcC@z8\x81\xe9\xb4\xd1R\xc0\x8f::\xaeF\xfcC@\x80\x0f^\xbb\xb4\xd1R\xc0\xeev\xbd4E\xfcC@\xfd0Bx\xb4\xd1R\xc0B\x05\x87\x17D\xfcC@\xb0\xad\x9f\xfe\xb3\xd1R\xc0\xef\xdeQcB\xfcC@\x16\xa7Z\x0b\xb3\xd1R\xc0K\x92\xe7\xfa>\xfcC@FE\x9cN\xb2\xd1R\xc0\x8e\xe9\tK<\xfcC@\x16\xdb\xa4\xa2\xb1\xd1R\xc0\x95\x0e\xd6\xff9\xfcC@\xc9W\x02)\xb1\xd1R\xc0C\xe8\xa0K8\xfcC@LP\xc3\xb7\xb0\xd1R\xc0\xf0\xc1k\x976\xfcC@\x1d\xe6\xcb\x0b\xb0\xd1R\xc0&7\x8a\xac5\xfcC@qt\x95\xee\xae\xd1R\xc0\nR)v4\xfcC@\xc4\xe8\xb9\x85\xae\xd1R\xc0\xb6\xf7\xa9*4\xfcC@\xbf+\x82\xff\xad\xd1R\xc0\xf1)\x00\xc63\xfcC@<g\x0b\x08\xad\xd1R\xc0\x0eC\xab\x933\xfcC@\x14""\xe0\x10\xaa\xd1R\xc0Ju\x01/3\xfcC@c\'\xbc\x04\xa7\xd1R\xc0\xaa}:\x1e3\xfcC@\xff\x95\x95&\xa5\xd1R\xc0\xd5D\x9f\x8f2\xfcC@\xedDIH\xa4\xd1R\xc0(\xd3hr1\xfcC@6%Y\x87\xa3\xd1R\xc0\x17\x9c\xc
Query:
SELECT "place_geom"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
   WHERE "place_name" = 'Philadelphia';
Answer:
Too long, hard cut:
place_geom
"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\xbc\x0b\x00\x00\xebV\xcfI\xef\xd1R\xc0\xa5\xa1F!\xc9\xfcC@t&m\xaa\xee\xd1R\xc0\x82\xff\xadd\xc7\xfcC@9(a\xa6\xed\xd1R\xc0\x1f\xa2\xd1\x1d\xc4\xfcC@i\xc6\xa2\xe9\xec\xd1R\xc0\xc8\xf2\xaez\xc0\xfcC@:\\\xab=\xec\xd1R\xc0jR\n\xba\xbd\xfcC@\xcf\xbf]\xf6\xeb\xd1R\xc0}\xf1E{\xbc\xfcC@\x82V`\xc8\xea\xd1R\xc0\x018\xf6\xec\xb9\xfcC@w\x10;S\xe8\xd1R\xc0Z\xeb\x8b\x84\xb6\xfcC@\x8b\xfde\xf7\xe4\xd1R\xc0{\xa0\x15\x18\xb2\xfcC@\x1b\xd8*\xc1\xe2\xd1R\xc06(\x9a\x07\xb0\xfcC@\xf85\x92\x04\xe1\xd1R\xc0\x83\xf9+d\xae\xfcC@\xdbj\xd6\x19\xdf\xd1R\xc0#%=\x0c\xad\xfcC@\x8e\x01\xd9\xeb\xdd\xd1R\xc0\x84a\xc0\x92\xab\xfcC@\xee#\xb7&\xdd\xd1R\xc0\x1b\x13b.\xa9\xfcC@=\xc1\xfe\xeb\xdc\xd1R\xc0\xe79""\xdf\xa5\xfcC@\xd7\xfb\x8dv\xdc\xd1R\xc0l\xb4\x1c\xe8\xa1\xfcC@\x18\x05\xc1\xe3\xdb\xd1R\xc0\x03f\xbe\x83\x9f\xfcC@\x90im\x1a\xdb\xd1R\xc0!\xe7\xfd\x7f\x9c\xfcC@\x13b.\xa9\xda\xd1R\xc0\x056\xe7\xe0\x99\xfcC@\xd8I}Y\xda\xd1R\xc06""\x18\x07\x97\xfcC@1\x95~\xc2\xd9\xd1R\xc0f\xda\xfe\x95\x95\xfcC@\x7fLk\xd3\xd8\xd1R\xc0\x0e\xf7\x91[\x93\xfcC@2\xc9\xc8Y\xd8\xd1R\xc0\xe0\xda\x89\x92\x90\xfcC@\x0e\xf3\xe5\x05\xd8\xd1R\xc0\x88+g\xef\x8c\xfcC@t\xd2\xfb\xc6\xd7\xd1R\xc0TR\'\xa0\x89\xfcC@z\xa9\xd8\x98\xd7\xd1R\xc0\x9f\x9a\xcb\r\x86\xfcC@\xd9\xb1\x11\x88\xd7\xd1R\xc0},}\xe8\x82\xfcC@!x|{\xd7\xd1R\xc0Y\x8a\xe4+\x81\xfcC@\xcd\x1d\xfd/\xd7\xd1R\xc0$}ZE\x7f\xfcC@\x0f\'0\x9d\xd6\xd1R\xc0\x7f0\xf0\xdc{\xfcC@\x03\x93\x1bE\xd6\xd1R\xc0\xe0\xa0\xbd\xfax\xfcC@\x92\x1f\xf1+\xd6\xd1R\xc0\x17\x16\xdc\x0fx\xfcC@Ks+\x84\xd5\xd1R\xc0Ym\xfe_u\xfcC@\xc3\xd7\xd7\xba\xd4\xd1R\xc00\x0e.\x1ds\xfcC@vn\xda\x8c\xd3\xd1R\xc0\xb6T\xde\x8ep\xfcC@\xa6&\xc1\x1b\xd2\xd1R\xc0i\x1f+\xf8m\xfcC@\xad1\xe8\x84\xd0\xd1R\xc0\xb7$\x07\xecj\xfcC@\xcbd8\x9e\xcf\xd1R\xc0\x89\x08\xff""h\xfcC@\xc2l\x02\x0c\xcb\xd1R\xc0zm6Vb\xfcC@\x81\x97\x196\xca\xd1R\xc0]\x88\xd5\x1fa\xfcC@\n\x81\\\xe2\xc8\xd1R\xc0F`\xaco`\xfcC@M\xbe\xd9\xe6\xc6\xd1R\xc0\x11\x1f\xd8\xf1_\xfcC@\x95\xb8\x8eq\xc5\xd1R\xc0\x9a\xeeuR_\xfcC@\xd8\xc1\xc1\xde\xc4\xd1R\xc0\x931>\xcc^\xfcC@~\xaa\n\r\xc4\xd1R\xc0\xca\xa6\\\xe1]\xfcC@\x07z\xa8m\xc3\xd1R\xc0\xc0,\xed\xd4\\\xfcC@C\xac\xfe\x08\xc3\xd1R\xc0\xf5\xa1\x0b\xea[\xfcC@\xc0\xcd\xe2\xc5\xc2\xd1R\xc0\xd7\xbc\xaa\xb3Z\xfcC@\x7f\xdeT\xa4\xc2\xd1R\xc0\x9d\xbe\x9e\xafY\xfcC@\xaeb\xf1\x9b\xc2\xd1R\xc0 \xd1\x04\x8aX\xfcC@\x1f\xd6\x1b\xb5\xc2\xd1R\xc0VF#\x9fW\xfcC@\xd28\xd4\xef\xc2\xd1R\xc0\x9e&3\xdeV\xfcC@8\xfeDe\xc3\xd1R\xc0i\xe5^`V\xfcC@\x08`\x03""\xc4\xd1R\xc0\x16\x8b\xdf\x14V\xfcC@`w\xba\xf3\xc4\xd1R\xc0\xdfI\x0b\x97U\xfcC@x\x9f\xe3\xa3\xc5\xd1R\xc0\n\x11p\x08U\xfcC@$+\xbf\x0c\xc6\xd1R\xc0\x82u\x1c?T\xfcC@\xfa}\xff\xe6\xc5\xd1R\xc0d\x90\xbb\x08S\xfcC@\x8f\xe1\xb1\x9f\xc5\xd1R\xc0H\xabZ\xd2Q\xfcC@q\xe2\xab\x1d\xc5\xd1R\xc0ZJ\x96\x93P\xfcC@\xa1\x80\xed`\xc4\xd1R\xc0\xae\xd8_vO\xfcC@\xe3\x89 \xce\xc3\xd1R\xc0T\xc1\xa8\xa4N\xfcC@=\xd5!7\xc3\xd1R\xc0\x9d\xa1\xb8\xe3M\xfcC@\xcc{\x9ci\xc2\xd1R\xc0\xc7h\x1dUM\xfcC@P\x8e\x02D\xc1\xd1R\xc01\x1f\x10\xe8L\xfcC@\n\xfc\xe1\xe7\xbf\xd1R\xc0\xccY\x9frL\xfcC@\xbc\x92\xe4\xb9\xbe\xd1R\xc0\xfd\xdd;jL\xfcC@\x10!\xae\x9c\xbd\xd1R\xc0\xfd\xdd;jL\xfcC@\xd5""\xa2\x98\xbc\xd1R\xc0\xaf@\xf4\xa4L\xfcC@\xb2fd\x90\xbb\xd1R\xc0\xb5\xfd++M\xfcC@*\x19\x00\xaa\xb8\xd1R\xc0\xae\xd8_vO\xfcC@\xc6m4\x80\xb7\xd1R\xc0;1\xeb\xc5P\xfcC@\xd25\x93o\xb6\xd1R\xc0\xd670\xb9Q\xfcC@n\x8a\xc7E\xb5\xd1R\xc0)\x92\xaf\x04R\xfcC@K\xe8.\x89\xb3\xd1R\xc0}\xec.PR\xfcC@\xc8#\xb8\x91\xb2\xd1R\xc0\x8f\x8bj\x11Q\xfcC@i5$\xee\xb1\xd1R\xc0\x1fL\x8a\x8fO\xfcC@\xb7\xd2k\xb3\xb1\xd1R\xc0\x1f\x80\xd4&N\xfcC@i\x1b\x7f\xa2\xb2\xd1R\xc0\x91\'I\xd7L\xfcC@\xec\xdf\xf5\x99\xb3\xd1R\xc0\xd3J!\x90K\xfcC@\\9{g\xb4\xd1R\xc0E\xf2\x95@J\xfcC@\xf1\x82\x88\xd4\xb4\xd1R\xc0j\xfc\xc2+I\xfcC@\xd3i\xdd\x06\xb5\xd1R\xc0|\x9b\xfe\xecG\xfcC@z8\x81\xe9\xb4\xd1R\xc0\x8f::\xaeF\xfcC@\x80\x0f^\xbb\xb4\xd1R\xc0\xeev\xbd4E\xfcC@\xfd0Bx\xb4\xd1R\xc0B\x05\x87\x17D\xfcC@\xb0\xad\x9f\xfe\xb3\xd1R\xc0\xef\xdeQcB\xfcC@\x16\xa7Z\x0b\xb3\xd1R\xc0K\x92\xe7\xfa>\xfcC@FE\x9cN\xb2\xd1R\xc0\x8e\xe9\tK<\xfcC@\x16\xdb\xa4\xa2\xb1\xd1R\xc0\x95\x0e\xd6\xff9\xfcC@\xc9W\x02)\xb1\xd1R\xc0C\xe8\xa0K8\xfcC@LP\xc3\xb7\xb0\xd1R\xc0\xf0\xc1k\x976\xfcC@\x1d\xe6\xcb\x0b\xb0\xd1R\xc0&7\x8a\xac5\xfcC@qt\x95\xee\xae\xd1R\xc0\nR)v4\xfcC@\xc4\xe8\xb9\x85\xae\xd1R\xc0\xb6\xf7\xa9*4\xfcC@\xbf+\x82\xff\xad\xd1R\xc0\xf1)\x00\xc63\xfcC@<g\x0b\x08\xad\xd1R\xc0\x0eC\xab\x933\xfcC@\x14""\xe0\x10\xaa\xd1R\xc0Ju\x01/3\xfcC@c\'\xbc\x04\xa7\xd1R\xc0\xaa}:\x1e3\xfcC@\xff\x95\x95&\xa5\xd1R\xc0\xd5D\x9f\x8f2\xfcC@\xedDIH\xa4\xd1R\xc0(\xd3hr1\xfcC@6%Y\x87\xa3\xd1R\xc0\x17\x9c\xc1\xdf/\xfcC@\xd76\xc5\xe3\xa2\xd1R\xc0\x19\x04V\x0e-\xfcC@\xa1\x0f\x96\xb1\xa1\xd1R\xc0\x938+\xa2&\xfcC@+\xdf3\x12\xa1\xd1R\xc0\xae0}\xaf!\xfcC@\xf0\xe0\'\x0e\xa0\xd1R\xc0u\x02\x9a\x08\x1b\xfcC@\xea#\xf0\x87\x9f\xd1R\xc0\xdc/\x9f\xac\x18\xfcC@\xa3w*\xe0\x9e\xd1R\xc0\r\x1c\xd0\xd2\x15\xfcC@\xd9\xecH\xf5\x9d\xd1R\xc0\xba\xf5\x9a\x1e\x14\xfcC@E\xbd\xe0\xd3\x9c\xd1R\xc0\xfc\x18s\xd7\x12\xfcC@\xc9\xe9\xeb\xf9\x9a\xd1R\xc03\x8e\x91\xec\x11\xfcC@\x16\
Query:
SELECT t."osm_id", t."geometry", f."VALUE"::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
LATERAL FLATTEN(input => t."all_tags") f
WHERE f."KEY" = 'amenity'
LIMIT 1000;
Answer:
No data found for the specified query.
Query:
SELECT t."id", t."geometry", t."all_tags"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_WAYS" t
LIMIT 1000;
Answer:
Too long, hard cut:
id,geometry,all_tags
173040551,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x000\xf9\x9f\xfc]\xcf]\xc0Mx\xae\x94\n\xcdA@\xe0\xa3Y4x\xcf]\xc0\x01\x7fB\x87\n\xcdA@\xbe\xa9\xa3>$\xd0]\xc0\xc6\xf6\xff\x16\t\xcdA@\x17\tm9\x97\xd0]\xc0\x91+\xf5,\x08\xcdA@\x9a[!\xac\xc6\xd0]\xc0\xcc]K\xc8\x07\xcdA@\xf9\xe1 !\xca\xd0]\xc0U\xe51\xb9\x07\xcdA@')","[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
173040548,"bytearray(b""\x01\x02\x00\x00\x00\r\x00\x00\x00\x05\x7f\xael\xd5\xd0]\xc0U\xe51\xb9\x07\xcdA@ \xd7<\xfd\xd6\xd0]\xc0\xd8\x95;\xd8\x07\xcdA@\xc7,{\x12\xd8\xd0]\xc0\xbb\xf2Y\x9e\x07\xcdA@\x87p\xcc\xb2\'\xd1]\xc0tF\x94\xf6\x06\xcdA@%\xcb\xeen\x8a\xd1]\xc0\\\x1ekF\x06\xcdA@\xb3\xce\xf8\xbe\xb8\xd1]\xc0\x86\xe5\xcf\xb7\x05\xcdA@\xd9\xed\xb3\xcaL\xd2]\xc0i\x00o\x81\x04\xcdA@\x04~\xe8\xdd\xb3\xd2]\xc04\xab-+\x03\xcdA@q\x1cx\xb5\xdc\xd2]\xc0\xec\x12\xd5[\x03\xcdA@\x14\xab\x06an\xd3]\xc0\xa0\xa9\xd7-\x02\xcdA@1\x84\x9c\xf7\xff\xd3]\xc0S@\xda\xff\x00\xcdA@\x1b\xbf\xf0J\x92\xd4]\xc0d\xdf\x15\xc1\xff\xccA@\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@"")","[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
173040547,"bytearray(b""\x01\x02\x00\x00\x00\x0b\x00\x00\x00\xc5\xe0\xabgR\xcf]\xc0\xd8-\xa7\xa9\n\xcdA@\x99\x94\'\xb5<\xcf]\xc00\x17LW\x0b\xcdA@\xf0f\xb2$\xe5\xce]\xc0*\xca\xa5\xf1\x0b\xcdA@\x1b^\xb5\xd7\xa7\xce]\xc04\x8c\xccm\x0c\xcdA@\xe7& \xdcS\xce]\xc0;\x1b\xf2\xcf\x0c\xcdA@m\xcf,\tP\xce]\xc0$\xd9#\xd4\x0c\xcdA@C\x8e\xadg\x08\xce]\xc0)\x96[Z\r\xcdA@y\xe2\x83\xe8\xda\xcd]\xc0/\xf7n\x98\r\xcdA@\xd1]\x12g\xc5\xcd]\xc0\x89\\\x15M\x0c\xcdA@\xcd\x9a\x0eS\x91\xcd]\xc0\xd1\xe68\xb7\t\xcdA@\x8a\x90_\xe4\x8a\xcd]\xc0NdA\xbc\t\xcdA@"")","[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
10674916,"bytearray(b'\x01\x02\x00\x00\x00\x18\x00\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@_\xab\xf3^k\xc3]\xc0@\xdd@\x81w\xe5A@d\xde\xf4xk\xc3]\xc0@,@\x80\xb1\xe5A@\x93\xbb\x19\x7fl\xc3]\xc0;\xac\xcb\x84\xba\xe6A@\xce\xbc\xc1\xbcl\xc3]\xc0vA\x8e\xf7\xf4\xe6A@\xcf\x18\xe6\x04m\xc3]\xc0\x84\x89\x9aC\xad\xe7A@\xc9\x9d-{m\xc3]\xc0rKPh\xfe\xe7A@\x04\x9f\xd5\xb8m\xc3]\xc0|\x7f\x83\xf6\xea\xe8A@:\xc9\xa0$n\xc3]\xc0\xc2\xd7|\x01b\xe9A@7\x81\xe9\xb4n\xc3]\xc0\x03\x16e\xdb\x0e\xeaA@n}\xa2\xfcn\xc3]\xc0:tz\xde\x8d\xeaA@W\xdc\x13\x7fo\xc3]\xc0T\xaf[\x04\xc6\xeaA@n\xd9\xc6Do\xc3]\xc0\x08k\xady\x9f\xebA@\xa3\x8d\xc8\x1cp\xc3]\xc0\x01\xd6O\xa4\xa0\xecA@\xd2j\xed""q\xc3]\xc0\xdbx\xc1\xf1\xc6\xedA@,\x9cI@q\xc3]\xc00\x19\xc7H\xf6\xedA@%\x83\xedqp\xc3]\xc0\xcb\xdeR\xce\x17\xeeA@\x1aQ5\xd5n\xc3]\xc0\xabO(\xfa2\xeeA@o\xcb\x91\xdfl\xc3]\xc0\x1e#4\xddF\xeeA@\xae\xb0\xcfRh\xc3]\xc0\x88\x164\x88j\xeeA@\xe0\xfe\\4d\xc3]\xc0\xa0\x08\x98\xaf\x81\xeeA@{\xfd\xa45a\xc3]\xc0\xbb\xd0\\\xa7\x91\xeeA@\xf9\xb4/E^\xc3]\xc0In\xa8s\xa0\xeeA@\xd1D\x8ecZ\xc3]\xc0\x93\xc8>\xc8\xb2\xeeA@')","[
  {
    ""key"": ""NHS"",
    ""value"": ""yes""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""trunk""
  },
  {
    ""key"": ""lanes"",
    ""value"": ""2""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 65""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  },
  {
    ""key"": ""tiger:cfcc"",
    ""value"": ""A21; A31""
  },
  {
    ""key"": ""tiger:county"",
    ""value"": ""Tulare, CA""
  },
  {
    ""key"": ""tiger:name_base"",
    ""value"": ""State Highway 65; Highway 65; State Highway 65""
  },
  {
    ""key"": ""tiger:name_base_1"",
    
Query:
SELECT t."id", t."geometry", f."VALUE":"value"::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_WAYS" t,
LATERAL FLATTEN(input => t."all_tags") f
WHERE f."VALUE":"key"::STRING = 'amenity'
  AND f."VALUE":"value"::STRING IN ('library', 'place_of_worship', 'community_centre')
LIMIT 1000;
Answer:
Too long, hard cut:
id,geometry,amenity
316594420,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00Oy\xcf\xdc\x9e&^\xc0H\xb6\x04*-\x8eA@E\x89\xf1\xf5\x90&^\xc0\xcbf\x0eI-\x8eA@3L\x12\xf0\x90&^\xc0\xca\xea\x0cB/\x8eA@\xbc\xbc\xef\xce\x90&^\xc0\x15;u@m\x8eA@\xd8\x11\x87l\xa0&^\xc0\x03\xd0\x83\x16m\x8eA@r\xbfCQ\xa0&^\xc0g\xf9\xcb8W\x8eA@r\xbfCQ\xa0&^\xc05y%$-\x8eA@Oy\xcf\xdc\x9e&^\xc0H\xb6\x04*-\x8eA@'),place_of_worship
733763525,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xf8\xbc\x87\xf0T""^\xc0\x8eW zR`A@\x89\x83:\x9bD""^\xc0\xa2\xd7\xfa}Z`A@\xa1\xb7xxO""^\xc04\'\xd4x\x8e`A@\x12\x14?\xc6\\""^\xc0\xecQ\xb8\x1e\x85`A@\xf8\xbc\x87\xf0T""^\xc0\x8eW zR`A@')",community_centre
394724803,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xab\x8d\xfb\xa0x\x18^\xc0^\x92\x14\xa2\x8d\xd3A@\x93\x90H\xdbx\x18^\xc0\xd0\x8c4\xa7\x81\xd3A@\xfe\xd8\xc9\x85o\x18^\xc0\xa6\x83P9\x81\xd3A@\'Xw\x87o\x18^\xc0A\x93\x0e \x8d\xd3A@\xab\x8d\xfb\xa0x\x18^\xc0^\x92\x14\xa2\x8d\xd3A@"")",place_of_worship
165928158,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\r\x00\x00\x00@\x86\xe9\xd6\xc6\x1b^\xc0\x912=\xbcByA@#?,\xe5\xc6\x1b^\xc0Q\xf0\xb9\xb82yA@\x9c0\x06{\xb8\x1b^\xc0"">\x0b\x9d2yA@H\x04\x99S\xb8\x1b^\xc0\xa0\xde1\xe1<yA@C\x16\xb3o\xb8\x1b^\xc0\xc1\n\x01\n?yA@\xean\x8d\xbe\xb8\x1b^\xc0\x026\xd6\xb4AyA@\xbe\xecC\x83\xb9\x1b^\xc0\x8a\x9d\xdf\xe6CyA@<\xc3\xd4\x96\xba\x1b^\xc0\xb2ry\xbdEyA@\xc3\xe8^\xcc\xbb\x1b^\xc0\xdbu%\xb8GyA@k\xce\x0b\xc1\xbb\x1b^\xc0o]\xd6iIyA@3~+#\xbf\x1b^\xc0\x04K\xbf\x8eIyA@?\xcd$E\xbf\x1b^\xc0\x19\x8c\x11\x89ByA@@\x86\xe9\xd6\xc6\x1b^\xc0\x912=\xbcByA@')",community_centre
391259880,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\n\x00\x00\x00\xba\x15x\xdd\x91\x1a^\xc0\xd8\xc1wQ\xaanA@b\x0f\x92\xaa\x92\x1a^\xc0j\x18>""\xa6nA@\xce\x97r\x19\x92\x1a^\xc0\x0bDO\xca\xa4nA@\xda\xd2\xfeb\x91\x1a^\xc0Gb8\x8d\xa3nA@\x81\xbe\xe3\xca\x8f\x1a^\xc0Gb8\x8d\xa3nA@\x9e3\xb3\xe0\x8f\x1a^\xc0\xce>\x8fQ\x9enA@P\xdd\xa6\x89\x88\x1a^\xc0a\xd0S.\x9enA@T\xb4\x83[\x88\x1a^\xc0\xe0_N\x1a\xb4nA@\xf1\x14\xcd^\x91\x1a^\xc0b\xc8\xa0\xc9\xb4nA@\xba\x15x\xdd\x91\x1a^\xc0\xd8\xc1wQ\xaanA@')",place_of_worship
377631023,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xb3\x1dBK\r\x1b^\xc0\x00\x97\xb6n9wA@{8\x92\x15\r\x1b^\xc0]L\xd8#ywA@\x07\xad\xd1\xbc-\x1b^\xc0\x86\'\xaamywA@p2\x16\xf2-\x1b^\xc0\x95\xb2\xb1\xb79wA@\xb3\x1dBK\r\x1b^\xc0\x00\x97\xb6n9wA@"")",place_of_worship
376277862,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x08\x00\x00\x00oc\xfd\xb0o,^\xc0\x14`\xfdD\n\xc0A@hG\x05\xa9o,^\xc0~\xb4\x93\x1c\x0b\xc0A@\x8b\xaa\xba\xa2o,^\xc0\xe11M""\x0c\xc0A@7\x05\xe8\xadp,^\xc0\x83)\x143\x0c\xc0A@\xc1\xa3\xd7\xb0p,^\xc0\r\'\xc4\xb7\x0b\xc0A@s\xc1t\xb5p,^\xc0q\xaa\xb50\x0b\xc0A@\xe4\x1d\x96\xbcp,^\xc0\xef\x13Q]\n\xc0A@oc\xfd\xb0o,^\xc0\x14`\xfdD\n\xc0A@')",library
786339169,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00+\xd4?-\xab\x05^\xc0\x96jU\x01\xad]A@\xa3\rvy\xa9\x05^\xc0\x00\xbf\xeb\xd8\xad]A@\xe0jB\xff\xa9\x05^\xc0d\x92\x91\xb3\xb0]A@(\x99A!\xa7\x05^\xc0""\x9d\xcb\x1e\xb2]A@9IN\x81\xa7\x05^\xc0\x15\x17\xec+\xb4]A@\xf1N\x99\xf6\xa8\x05^\xc0,s_s\xb3]A@\xa5\x9aH\x1f\xa9\x05^\xc0\xaa\x04\xd5P\xb4]A@,-\xc8;\xac\x05^\xc0iI\x91\xc6\xb2]A@+\xd4?-\xab\x05^\xc0\x96jU\x01\xad]A@')",library
728288732,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00.\x9b\x94\xdd\xa7\xeb]\xc0=\'b\xb6\tyA@]\x1f1\xd5\xa7\xeb]\xc0\xc1\xcfn\xe3\x05yA@ug7D\xa6\xeb]\xc0\xc1\xcfn\xe3\x05yA@\x10C\x06M\xa6\xeb]\xc0\x8a \xce\xc3\tyA@.\x9b\x94\xdd\xa7\xeb]\xc0=\'b\xb6\tyA@"")",library
197994540,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00\n\x82\xc7\xb7\xf7\x1b^\xc0\x87M\t-\x90yA@\x08p\x1f^\xfc\x1b^\xc0j\x06L;\x90yA@\'\xce\xe5a\xfc\x1b^\xc0\xa1\xc9Y3\x8dyA@\xf1\xeem\x9f\xfa\x1b^\xc0\x8e\x8cz-\x8dyA@\xaf-\xf2\xa1\xfa\x1b^\xc0\x0bXr\x15\x8byA@6\x0b\xc5g\xfc\x1b^\xc0\x1e\x95Q\x1b\x8byA@\xb3\x88\xcdl\xfc\x1b^\xc0mX\xae\x12\x87yA@\x99<\xaf\xc2\xf7\x1b^\xc0\xf6\xdf\x94\x03\x87yA@\n\x82\xc7\xb7\xf7\x1b^\xc0\x87M\t-\x90yA@"")",place_of_worship
166264589,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\t\x00\x00\x00%\x0e\xd9@:\x00^\xc0\xaf\xdd\x87\xcd\x11\xa9A@\xde\x9b\x95\xa36\x00^\xc0\x9e*\xdf3\x12\xa9A@\xd3\xa8\xc0\xc96\x00^\xc0\xd0_C\xcb\x15\xa9A@\xaf\x9e\x93\xde7\x00^\xc0\xe3n\x10\xad\x15\xa9A@\xcc*l\x068\x00^\xc0\xd5\x10\x0bk\x19\xa9A@\xc1#*T7\x00^\xc03GV~\x19\xa9A@P\xf5\x1aq7\x00^\xc0\x15j\xf29\x1c\xa9A@\x8f\xd88\xac:\x00^\xc0\xb6\xd7\x82\xde\x1b\xa9A@%\x0e\xd9@:\x00^\xc0\xaf\xdd\x87\xcd\x11\xa9A@'),library
218739357,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xb6< \x1a\xa7\x19^\xc0H\xe8\xc2\xa3\xe8zA@\xc8\x90\x082\xa7\x19^\xc0\xc8\x97P\xc1\xe1zA@\xf5\xcbq\xb8\xa0\x19^\xc0\x81u\xc1\x85\xe1zA@\xe2w\x89\xa0\xa0\x19^\xc0k\x06]g\xe8zA@\xb6< \x1a\xa7\x19^\xc0H\xe8\xc2\xa3\xe8zA@'),community_centre
171358951,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00-\x00\x00\x00\xcc\xee\xc9\xc3\xc2\x1b^\xc0\xd4\xff(\xa0?yA@\xba$\x18\x18\xc3\x1b^\xc0\x0f`\x91_?yA@\xc0
Query:
SELECT t."id", t."geometry", f.value:"value"::STRING AS "amenity"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_WAYS" t,
LATERAL FLATTEN(input => t."all_tags") f
WHERE f.value:"key"::STRING = 'amenity'
LIMIT 1000;
Answer:
Too long, hard cut:
id,geometry,amenity
161926427,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x00\x88*\xfc\x19\xde&^\xc0\xf4\xdb!\x0f\x8e\x90A@\x89\x9a\x8d:\xdf&^\xc0$\xb4\xe5\\\x8a\x90A@Y\xf1\xb2\xcb\xdc&^\xc0\xd21\x8c`\x88\x90A@\xae|\xe0t\xdc&^\xc0}\xa3\xc2}\x89\x90A@Y\xf4N\x05\xdc&^\xc0 \x11S""\x89\x90A@\xb5\xd2Z\x87\xd9&^\xc0\x85\xbd\x9aM\x91\x90A@\x0c\xaaW\xdb\xde&^\xc0\x06\xd2\xc5\xa6\x95\x90A@\xca\xb7-\x80\xdf&^\xc02\x9fb\x8b\x93\x90A@\x99\xc0c.\xdf&^\xc0D\x80\x1dI\x93\x90A@R\xe0S\xef\xdf&^\xc0\xe6;\x9d\xd0\x90\x90A@5&i\xa3\xdf&^\xc0\xe0\xda\x89\x92\x90\x90A@\xbd\tt\xdc\xdf&^\xc0\xa58\xa2\xd6\x8f\x90A@5\x15\x98\x04\xde&^\xc0\xc9\xb8\x98U\x8e\x90A@\x88*\xfc\x19\xde&^\xc0\xf4\xdb!\x0f\x8e\x90A@')",restaurant
43701392,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\xa0\x1a\xd4#\xb2\x16^\xc0\xdc\'G\x01\xa2\xd5A@\x1f\t\xa0\xbd\x9f\x16^\xc0\xd1\xefV\xf1\xa1\xd5A@[\xae#\xb3\x9f\x16^\xc0\xb2w\x90\xe8\xaf\xd5A@\x90\xbeI\xd3\xa0\x16^\xc0,g\xef\x8c\xb6\xd5A@N%\xa8\x86\xa2\x16^\xc0\xac\x1f\xf6\x9d\xba\xd5A@|\xff\xd5\x99\xb1\x16^\xc0\xad{\x1a\xe6\xba\xd5A@\xa0\x1a\xd4#\xb2\x16^\xc0\xdc\'G\x01\xa2\xd5A@"")",grave_yard
43702323,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x0e\x00\x00\x002c\xc0H\x1e*^\xc0_\x1d\xc7\x0f\x95\xbfA@\x84\x80|\t\x15*^\xc0`\xc9U,~\xbfA@\x9f\x08=\xf6\x0e*^\xc0\xc5\xfb\x16Bs\xbfA@\x1a\xc7H\xf6\x08*^\xc06\xc8$#g\xbfA@\xe6\x07\xae\xf2\x04*^\xc0\xa0\xc5R$_\xbfA@\xe2\x1a\x9f\xc9\xfe)^\xc0|\xefo\xd0^\xbfA@-\xb12\x1a\xf9)^\xc0\xfde\xf7\xe4a\xbfA@G\x8f\xdf\xdb\xf4)^\xc0\xbfcx\xecg\xbfA@\xd9\xa6\xc2\xe9\xee)^\xc0)|\x11\xc8\x80\xbfA@\x90\xba\x9d}\xe5)^\xc0\xb7\xd4\xe6\xa4\x9c\xbfA@\xa1\x95\xc5\x0e\xf4)^\xc0\x90\xdb/\x9f\xac\xbfA@\xa7\xfc\xb5\x06\x00*^\xc0\x19\x9a\xa1\xa7\xb7\xbfA@\xc4/\xabf\x0c*^\xc0\xaf\xb0\xe0~\xc0\xbfA@2c\xc0H\x1e*^\xc0_\x1d\xc7\x0f\x95\xbfA@')",grave_yard
43700199,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xea\x9e+\x00|\x1a^\xc0\xcb\x81\x1ej\xdb\xeeA@\x90\xe8T\xe8r\x1a^\xc0\xa9\xdf\x85\xad\xd9\xeeA@\x0e$\xde\xf0q\x1a^\xc0\x1bFA\xf0\xf8\xeeA@Vo\xc3\xdez\x1a^\xc0>\xe8\xd9\xac\xfa\xeeA@\xea\x9e+\x00|\x1a^\xc0\xcb\x81\x1ej\xdb\xeeA@'),grave_yard
43702335,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x07\x00\x00\x00\xc6\x9c\xb1y\xe6,^\xc0\x96\x8a\xd7\x068\xc9A@\xcc\xa1\xa0o\xe6,^\xc0Kg\x16WK\xc9A@\xe4\x9ft}\xfa,^\xc0&\xedWKK\xc9A@\xbb\xd8\x0f\x0c\xfb,^\xc0<\xa0l\xca\x15\xc9A@!""5\xed\xe2,^\xc0rq\xaf\'\x15\xc9A@\x04\x96\\\xc5\xe2,^\xc0\x7f\x1a\xf7\xe67\xc9A@\xc6\x9c\xb1y\xe6,^\xc0\x96\x8a\xd7\x068\xc9A@')",grave_yard
43702691,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\xa1\xb4&\xccj&^\xc0\x95\'\x10v\x8a\x8dA@&\x1b\xb4\xfce&^\xc0\x00\xde\x02\t\x8a\x8dA@\x0e\x07S\xdeX&^\xc0\xda(F\xf1\x85\x8dA@\xfd\xa1\x99\'W&^\xc0v\x0bn\xb5\x98\x8dA@\x17\x02\xca\xf0i&^\xc0\x99Q\xe2)\x9a\x8dA@\xa1\xb4&\xccj&^\xc0\x95\'\x10v\x8a\x8dA@"")",grave_yard
43702338,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00!\x00\x00\x000\xe1\x86\xce\xa1*^\xc0\xb6L\x86\xe3\xf9\xbeA@{\x9a8^\xa6*^\xc0\nN\xd8\xd9\xeb\xbeA@\xb5[&\x1e\xab*^\xc0XxM\xfe\xdd\xbeA@Jw!g\xab*^\xc0A""\x12*\xdd\xbeA@;\xce\xc8{\xb0*^\xc0s9\x14\xf4\xcd\xbeA@\x10]P\xdf\xb2*^\xc0\xdcJ\xaf\xcd\xc6\xbeA@\x93i\xd9\xff\xa5*^\xc0\xa1\x15\x18\xb2\xba\xbeA@\x14\xee\xf02\x9e*^\xc0\xec\xdf\xf5\x99\xb3\xbeA@\x9e\x08\xe2<\x9c*^\xc0L\xc0T\xd8\xb1\xbeA@\xe4)\xf5v\x95*^\xc0%\x87\x99\xc7\xab\xbeA@\xf8\x1cX\x8e\x90*^\xc0\xdf1<\xf6\xb3\xbeA@\xe3\xaa\xb2\xef\x8a*^\xc0\xd1\xb3Y\xf5\xb9\xbeA@\xdf\x89Y/\x86*^\xc0\xcf\xe30\x98\xbf\xbeA@e8\x9e\xcf\x80*^\xc0\xc2\x86\xa7W\xca\xbeA@[\xd8\xd3\x0e\x7f*^\xc0\x08\x97\x8e9\xcf\xbeA@\xc7\xa8k\xed}*^\xc0\xc3\xd7\xd7\xba\xd4\xbeA@\xd8G\xa7\xae|*^\xc0\x02+\x87\x16\xd9\xbeA@\xc8\xf6Z\xd0{*^\xc0b\x1c\\:\xe6\xbeA@\xa3\x06\xd30|*^\xc0z\xfdI|\xee\xbeA@\xea\x98\xf3\x8c}*^\xc0\x11\x00\x1c{\xf6\xbeA@\xf4\xf8\xbdM\x7f*^\xc0\x8bQ\xd7\xda\xfb\xbeA@\xb9xx\xcf\x81*^\xc0\xbd\xc2\x82\xfb\x01\xbfA@\xa0\xe8\xba\xf0\x83*^\xc02W\x06\xd5\x06\xbfA@z\xaaCn\x86*^\xc0N\xd4\xd2\xdc\n\xbfA@\xd8\xc0\xb1\xc2\x88*^\xc0\x0b;1\x90\x0c\xbfA@\xd7\xb7\xdd\x15\x8b*^\xc0\xd4\xf8\xe0\x10\x05\xbfA@\xa0{jP\x8f*^\xc0\x9d$]3\xf9\xbeA@\xb3/\x8f\xeb\x95*^\xc0~\xdfd\xc0\xfe\xbeA@\xc0\xd7\x10\x1c\x97*^\xc0\x08\xe9\x84+\xfb\xbeA@\xefo\x1a\xec\x97*^\xc0Wx\x97\x8b\xf8\xbeA@\xfdi\xa3:\x9d*^\xc0\xb4T\x83\xd5\xfd\xbeA@\xf5A;L\xa0*^\xc0rKPh\xfe\xbeA@0\xe1\x86\xce\xa1*^\xc0\xb6L\x86\xe3\xf9\xbeA@')",school
43703541,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x14\x00\x00\x00\xe9\x9a\xc97[,^\xc0y\x8d\x02\xe9\x07\xc0A@\x1be\xa2\xado,^\xc0@\x98%K\xf7\xbfA@\x9d\xbf\xbf\xf7m,^\xc0\xc0\xcb\xb1a\xf2\xbfA@X[\xb1\xbfl,^\xc0>\xcb\xf3\xe0\xee\xbfA@\xe1\xd1\xc6\x11k,^\xc0v\x1ep\xb8\xea\xbfA@\xac\xc4<+i,^\xc07\x83\t\xed\xe6\xbfA@y\x8c<Zf,^\xc0K\xa4~(\xe2\xbfA@\xc6c\x06*c,^\xc0\xd5\xad\x9e\x93\xde\xbfA@\xb1\xbaz\xba_,^\xc0\xe39\xb6\xf9\xda\xbfA@y\xe5\x1f""Z,^\xc0D\xaa\x83\x17\xd8\xbfA@\x913^\x04W,^\xc0\xbc\x84\xf9\xe1\xd6\xbfA@\xd9Wh1B,^\xc0\xfb\xd4g\xbd\xce\xbfA@D\x14\x937@,^\xc0\x7fq\x04\x04\xce\xbfA@\xabz\x9e\xe43,^\xc0hA(\xef\xe3
Query:
SELECT t."osm_id", t."geometry", f.value:"key"::STRING AS "key", f.value:"value"::STRING AS "value"
FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES" t,
LATERAL FLATTEN(input => t."all_tags") f
LIMIT 1000;
Answer:
Too long, hard cut:
osm_id,geometry,key,value
,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x04|\xb7yc9^@sA}\xcb\x9c\xdc0@\x02\x1a[\xbed9^@\x8f\xbd\xcd\xd1\x99\xdc0@\x84h\x08""f9^@\xfb@\xf2\xce\xa1\xdc0@>\xbf\xde\xb3d9^@Y\xf5\x03h\xa5\xdc0@\x04|\xb7yc9^@sA}\xcb\x9c\xdc0@')",building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x01\xd7_\xc0\\\x19^@U\xc9[\t8C0@\xfa?\x87\xf9r\x19^@\xe8\x88|\x97RC0@\x18\x8a\xe0$r\x19^@}kq\xd7\\C0@\x1f!\xb9\xeb[\x19^@\xea\xabPIBC0@\x01\xd7_\xc0\\\x19^@U\xc9[\t8C0@'),building,yes
,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x06\x00\x00\x00\xdbX\x89y\xd6^^@~W\x04\xff[\xa50@\x15\x9fL\xed\xd6^^@\x8b%\x9baY\xa50@\\\xd8\xe4:\xd7^^@\xc1\xc2\x93\'Z\xa50@\xc9\xd3\xf2\x03\xd7^^@\xae#Xf[\xa50@!\x92!\xc7\xd6^^@\xb3\xf4\xfc\xc4\\\xa50@\xdbX\x89y\xd6^^@~W\x04\xff[\xa50@"")",building,yes
,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xd5|\xf05_\'^@:""\x84\xecab0@\xac\x00\xdfm^\'^@\x11\xafF\xd1^b0@\x9f\xdc[6_\'^@\xf5\xa1\x0b\xea[b0@\xcaXm\xfe_\'^@\x1e\x15I\x05_b0@\xd5|\xf05_\'^@:""\x84\xecab0@')",building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xdb\xacU\x16`c^@\x8a\x8f\xf4\x0e\\(0@\x8dT)\x87`c^@\xed\xec\xd0U_(0@}b\x9d*_c^@\xfd\x93\t\tb(0@\xca\xba\xc9\xb9^c^@\x9b6-\xc2^(0@\xdb\xacU\x16`c^@\x8a\x8f\xf4\x0e\\(0@'),building,yes
,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x89\x1c""n\xce&^@Z\xe4\xe8;\tB0@\xa2\xa0of\xcf&^@;/_\xa8\rB0@\xc6\xd8\xaeu\xce&^@\xc2\xaa\xd5\xb2\x10B0@\xaeTa}\xcd&^@\xb7\xe0\xb1D\x0cB0@\x89\x1c""n\xce&^@Z\xe4\xe8;\tB0@')",building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xe2\xb8\x8c\x9b\x1a\x14^@\xa3\xc5\xbe\t*\x990@L>\xd1\xd0\x1a\x14^@\x9b\xf0\xa6\xb6/\x990@i\xfe\xf3\x8f\x19\x14^@]\x1auc0\x990@\x00y\xafZ\x19\x14^@g\xef\x8c\xb6*\x990@\xe2\xb8\x8c\x9b\x1a\x14^@\xa3\xc5\xbe\t*\x990@'),building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xa1drjgF^@\x0b\xce\x856\xa5\xc90@\xdd\xd8G\x02hF^@\x91=\x8cZ\xab\xc90@\xc7\x85\xa8gfF^@\xe3\x1b\n\x9f\xad\xc90@\x8b\x11\xd3\xcfeF^@]\xac\x03{\xa7\xc90@\xa1drjgF^@\x0b\xce\x856\xa5\xc90@'),building,yes
,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\r\x00\x00\x00z\x8f\xd8\x93e`^@\x99\xb6\xc9\xf2\xbf\xa00@\x0e8\xa6\x82e`^@\xb8\xb3\n\xf6\xba\xa00@7\xc8$#g`^@\x94\xdd\'\xa2\xba\xa00@\x19\x81g1g`^@\xabU\x05\xb4\xbe\xa00@\x06\x9d\x10:h`^@\x9f\xef\x02\x80\xbe\xa00@\xa7\xab\xe0\\h`^@S\xeb\xa2\x8d\xc8\xa00@\xcb\xcc\x16Zg`^@^Q\xa5\xc1\xc8\xa00@$\xd0`Sg`^@\x88LT\xca\xc6\xa00@\xfb\xc9\x18\x1ff`^@e.\xba\x06\xc7\xa00@7\x86\xa5&f`^@c\x0e\xddG\xc9\xa00@\xa4\xe3\x0f\xabd`^@\xb7h\\\x93\xc9\xa00@\xf6\xb3X\x8ad`^@\xa4\x1c\xcc&\xc0\xa00@z\x8f\xd8\x93e`^@\x99\xb6\xc9\xf2\xbf\xa00@"")",building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00B\xd0\xd1\xaa\x96b^@U\xb0|LZ\x830@\xb8+\xaa4\x98b^@\x91\x86\xae\x9fY\x830@\xcf\xb2\x93f\x98b^@.\xc2\xb9+`\x830@ZW\xbb\xdc\x96b^@\xf2\xeb\x87\xd8`\x830@B\xd0\xd1\xaa\x96b^@U\xb0|LZ\x830@'),building,yes
,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00U~\xbe\xd2\x1e\x17^@\xe4|\xfb\x84\xfdl/@&\x95)\xe6 \x17^@\xb4\xe4\xf1\xb4\xfcl/@\xc6\x8c\xf0\xf6 \x17^@\xc1\xe3\xdb\xbb\x06m/@,\x16\x1a\xe3\x1e\x17^@\x9d}\x8a\x88\x07m/@U~\xbe\xd2\x1e\x17^@\xe4|\xfb\x84\xfdl/@')",building,yes
,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00 \x01\x92\x9f\xc3%^@\x98RM\xffHW/@\x96\xe9<\xcf\xc4%^@\x82>\x91\'IW/@Y-\xb0\xc7\xc4%^@\x9f\xe4\xb3\xe1UW/@\xe3D\x05\x98\xc3%^@\xb5\xf8o\xb9UW/@ \x01\x92\x9f\xc3%^@\x98RM\xffHW/@"")",building,yes
,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00J\x85\xb1\x85 \x8eA@\x91\xdb\x8aX\x1f\xc6#\xc0So\xb2\xb2""\x8eA@3\xc0`\x92%\xc6#\xc0\xff\x84\xc4\x87#\x8eA@7\x00\x1b\x10!\xc6#\xc0\xf5\x9a\xc3Z!\x8eA@\x93\x1bE\xd6\x1a\xc6#\xc0J\x85\xb1\x85 \x8eA@\x91\xdb\x8aX\x1f\xc6#\xc0')",building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\xfd\x7f\x9c0atA@\x1a\x8f\xad\xc2\xc1\xed!\xc0KE\xbe\xa6btA@\x03\xeey\xfe\xb4\xed!\xc0\x04k\xe6\xdaatA@\xda\xa2\x16\x94\xb3\xed!\xc0\xb7\xa5\xc4d`tA@\x9eE\xefT\xc0\xed!\xc0\xfd\x7f\x9c0atA@\x1a\x8f\xad\xc2\xc1\xed!\xc0'),building,yes
,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00\x82\x07\x06\x10>XB@\x07\x17\xe1\xdc\x15\x98%\xc0\x8d%Q\xd4>XB@\xdbC\x0c\x85\x19\x98%\xc0,E\xf2\x95@XB@=\x1cn\xd1\x13\x98%\xc0!\'\xa7\xd1?XB@\xbc\xed\x9d,\x10\x98%\xc0\x82\x07\x06\x10>XB@\x07\x17\xe1\xdc\x15\x98%\xc0"")",building,yes
,bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00bX\x0f\xa9\xb3RA@\x15\x9a\xda\x08z\x06&\xc0\xa9\xd0\x8a\xb9\xb5RA@P\x84y4z\x06&\xc0P\xcd@\xc0\xb5RA@\x82\xec\xabau\x06&\xc0\nU\xc5\xaf\xb3RA@H\x02\r6u\x06&\xc0bX\x0f\xa9\xb3RA@\x15\x9a\xda\x08z\x06&\xc0'),building,yes
,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x05\x00\x00\x00$<\xa1\xd7\x9f\xfcA@\xbe`\x81\xf9u\x89%\xc0\x9c>\xf1R\xa0\xfcA@j\xb2\xdaWy\x89%\xc0\x82f|\x04\xa3\xfcA@\xf5\xad\xc5]s\x89%\xc0\rd,\x89\xa2\xfcA@J\\l\xffo\x89%\xc0$<\xa1\xd7\x9f\xfc
Query:
SELECT t."all_tags"
   FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t
   LIMIT 1000;
Answer:
Too long, hard cut:
all_tags
"[
  {
    ""key"": ""id"",
    ""value"": ""1""
  }
]"
"[
  {
    ""key"": ""id"",
    ""value"": ""1""
  }
]"
"[
  {
    ""key"": ""id"",
    ""value"": ""1""
  }
]"
"[
  {
    ""key"": ""id"",
    ""value"": ""1""
  }
]"
"[
  {
    ""key"": ""id"",
    ""value"": ""1""
  }
]"
"[
  {
    ""key"": ""id"",
    ""value"": ""1""
  }
]"
"[
  {
    ""key"": ""INN"",
    ""value"": ""201348059""
  },
  {
    ""key"": ""addr:city"",
    ""value"": ""Shovot qo‘rg‘oni""
  },
  {
    ""key"": ""addr:city:ru"",
    ""value"": ""-""
  },
  {
    ""key"": ""addr:city:uz-cyr"",
    ""value"": ""Шовот қўрғони""
  },
  {
    ""key"": ""addr:district:ru"",
    ""value"": ""Шаватский""
  },
  {
    ""key"": ""addr:full"",
    ""value"": ""220900, Xorazm viloyati, Shovot tumani, Shovot qo‘rg‘oni, J. Manguberdi ko‘chasi, 9 uy""
  },
  {
    ""key"": ""addr:full:ru"",
    ""value"": ""221000, Хорезмская область, Шаватский район, гп Шават, ул. Ж. Мангуберди, 9""
  },
  {
    ""key"": ""addr:full:uz-cyr"",
    ""value"": ""221000, Хоразм вилояти, Шовот тумани, Шовот қўрғони, Замахшарий кўчаси, 19 уй""
  },
  {
    ""key"": ""addr:housenumber"",
    ""value"": ""9""
  },
  {
    ""key"": ""addr:region"",
    ""value"": ""Shovot tumani""
  },
  {
    ""key"": ""addr:region:ru"",
    ""value"": ""Хорезмская область""
  },
  {
    ""key"": ""addr:region:uz-cyr"",
    ""value"": ""Шовот тумани""
  },
  {
    ""key"": ""addr:street"",
    ""value"": ""J.Manguberdi ko'chasi""
  },
  {
    ""key"": ""amenity"",
    ""value"": ""bank""
  },
  {
    ""key"": ""bank-type"",
    ""value"": ""3""
  },
  {
    ""key"": ""brand"",
    ""value"": ""Xalq bank""
  },
  {
    ""key"": ""brand:ru"",
    ""value"": ""Народный банк""
  },
  {
    ""key"": ""brand:uz-cyr"",
    ""value"": ""Агробанк""
  },
  {
    ""key"": ""contact:website"",
    ""value"": ""www.xb.uz""
  },
  {
    ""key"": ""mfo"",
    ""value"": ""00810""
  },
  {
    ""key"": ""name"",
    ""value"": ""Xalq bank Shovot filiali""
  },
  {
    ""key"": ""name:ru"",
    ""value"": ""Шаватский филиал Народного банка""
  },
  {
    ""key"": ""name:uz-cyr"",
    ""value"": ""Агробанк Шовот филиали""
  }
]"
"[
  {
    ""key"": ""LAT"",
    ""value"": ""-15.353824""
  },
  {
    ""key"": ""LONG"",
    ""value"": ""34.800967""
  },
  {
    ""key"": ""Village_Na"",
    ""value"": ""Kasamba 1""
  },
  {
    ""key"": ""name"",
    ""value"": ""Kasamba 1""
  },
  {
    ""key"": ""place"",
    ""value"": ""village""
  }
]"
"[
  {
    ""key"": ""LAT"",
    ""value"": ""-15.515855""
  },
  {
    ""key"": ""LONG"",
    ""value"": ""34.664071""
  },
  {
    ""key"": ""Village_Na"",
    ""value"": ""Kaduka""
  },
  {
    ""key"": ""name"",
    ""value"": ""Kaduka""
  },
  {
    ""key"": ""place"",
    ""value"": ""village""
  }
]"
"[
  {
    ""key"": ""MCC"",
    ""value"": ""216""
  },
  {
    ""key"": ""MNC"",
    ""value"": ""70""
  },
  {
    ""key"": ""communication:mobile_phone"",
    ""value"": ""gsm;umts""
  },
  {
    ""key"": ""gsm:LAC"",
    ""value"": ""125""
  },
  {
    ""key"": ""gsm:cellid"",
    ""value"": ""29504;29505;29506""
  },
  {
    ""key"": ""man_made"",
    ""value"": ""tower""
  },
  {
    ""key"": ""operator"",
    ""value"": ""Vodafone""
  },
  {
    ""key"": ""source"",
    ""value"": ""survey;Bing""
  },
  {
    ""key"": ""tower:type"",
    ""value"": ""communication""
  },
  {
    ""key"": ""umts:LAC"",
    ""value"": ""225""
  },
  {
    ""key"": ""umts:PSC"",
    ""value"": ""392""
  },
  {
    ""key"": ""umts:RNC"",
    ""value"": ""21""
  },
  {
    ""key"": ""umts:cellid"",
    ""value"": ""29507""
  }
]"
"[
  {
    ""key"": ""MCC"",
    ""value"": ""262""
  },
  {
    ""key"": ""MNC"",
    ""value"": ""02""
  },
  {
    ""key"": ""communication:mobile_phone"",
    ""value"": ""yes""
  },
  {
    ""key"": ""gsm:LAC"",
    ""value"": ""360""
  },
  {
    ""key"": ""gsm:cellid"",
    ""value"": ""17941;17942;17943""
  },
  {
    ""key"": ""umts:LAC"",
    ""value"": ""1365""
  },
  {
    ""key"": ""umts:cellid"",
    ""value"": ""80627221;80627222;80627223;80627225;80627226""
  }
]"
"[
  {
    ""key"": ""MCC"",
    ""value"": ""286""
  },
  {
    ""key"": ""communication:microwave"",
    ""value"": ""yes""
  },
  {
    ""key"": ""communication:mobile_phone"",
    ""value"": ""gsm;umts""
  },
  {
    ""key"": ""man_made"",
    ""value"": ""mast""
  },
  {
    ""key"": ""tower:type"",
    ""value"": ""communication""
  }
]"
"[
  {
    ""key"": ""atm"",
    ""value"": ""yes""
  },
  {
    ""key"": ""name"",
    ""value"": ""BR Mania""
  },
  {
    ""key"": ""operator"",
    ""value"": ""BR""
  },
  {
    ""key"": ""shop"",
    ""value"": ""convenience""
  },
  {
    ""key"": ""source"",
    ""value"": ""Bing""
  }
]"
"[
  {
    ""key"": ""atm"",
    ""value"": ""yes""
  },
  {
    ""key"": ""brand"",
    ""value"": ""全家便利商店""
  },
  {
    ""key"": ""brand:en"",
    ""value"": ""FamilyMart""
  },
  {
    ""key"": ""brand:ja"",
    ""value"": ""ファミリーマート""
  
Query:
SELECT t."geometry"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t
    LIMIT 1000;
Answer:
Too long, hard cut:
geometry
bytearray(b'\x01\x01\x00\x00\x00T\x00\x8cg\xd0\x9a4@\xaey\xfa\xadB^C@')
bytearray(b'\x01\x01\x00\x00\x00\xd1\x8b\x7fD\xb8\x9a4@]\xcc\x85\x802^C@')
bytearray(b'\x01\x01\x00\x00\x00\xf5\x92\x10\xf67\x9a4@\xa6\x1a\x07\xa8\xba]C@')
bytearray(b'\x01\x01\x00\x00\x00\x81|d\xce\x8e\x9b4@r@\x01\xca\x95^C@')
bytearray(b'\x01\x01\x00\x00\x00m\x9b\x98\xe46\x9a4@Uh \x96\xcd]C@')
bytearray(b'\x01\x01\x00\x00\x00g\x9c\xe1a5\x9b4@U\xf2V\x02\xce^C@')
bytearray(b'\x01\x01\x00\x00\x00R\xd1X\xfb;%N@]S \xb3\xb3\xd3D@')
bytearray(b'\x01\x01\x00\x00\x00n\x16/\x16\x86fA@n\x14Yk(\xb5.\xc0')
bytearray(b'\x01\x01\x00\x00\x00)\xdb\xd1I\x00UA@\xc8\xf4\x84%\x1e\x08/\xc0')
bytearray(b'\x01\x01\x00\x00\x00\xac\xc2\xb0\r&\xff1@\x9fS5\xe6\x1a\xedF@')
bytearray(b'\x01\x01\x00\x00\x00\xfa\xd3\xeb\xbb\xc7R&@\xadD\x8f\xce\xaf{I@')
bytearray(b'\x01\x01\x00\x00\x00:\xd1d\xb5\xaf$;@1B\xd3m\xe48D@')
bytearray(b'\x01\x01\x00\x00\x002\xf4>DY\x97E\xc0W\xd6\x91~V\xf86\xc0')
"bytearray(b'\x01\x01\x00\x00\x00B\xb0O\xa5\x0b,^@\x94|6\xbcj\x0b8@')"
"bytearray(b""\x01\x01\x00\x00\x00v(\x9e\x0e\xbf\'S\xc0\xc9\x98\x16P\x03\xa9C@"")"
bytearray(b'\x01\x01\x00\x00\x00ms\x08\xc1O\xa5*@\xf6\x13)(\xa0\x17J@')
bytearray(b'\x01\x01\x00\x00\x00[=\xcc\x03\xfdB\x13@\xe3>rk\xd2\xf8E@')
bytearray(b'\x01\x01\x00\x00\x00@\xb9m\xdf\xa3v\x1e@\xd5\xd4\ro1`G@')
"bytearray(b'\x01\x01\x00\x00\x008p\xbd\\zB\x1e@\t\xef\xbc\x9e\xf9,I@')"
"bytearray(b""\x01\x01\x00\x00\x00/\x96\xd8k0W(@\'w\x8e\xb7K\xebG@"")"
bytearray(b'\x01\x01\x00\x00\x00\xb19b\x88\xf7w&@\x89\x07\x94M\xb9{I@')
"bytearray(b""\x01\x01\x00\x00\x00s\xdc)\x1d\xac\'\x1d@h\xcaN?\xa8\xdbH@"")"
bytearray(b'\x01\x01\x00\x00\x00`\x8dX0\x96\x1eC@PE\xe0\xfe\x12pK@')
bytearray(b'\x01\x01\x00\x00\x00\xe1\xccC\x016\x9b\x1f@39\x10\xed\xbe\xffH@')
bytearray(b'\x01\x01\x00\x00\x00$&\x97\xb5\x03\xc4\x1c@h\xaaq\x80\xaa\xacH@')
"bytearray(b'\x01\x01\x00\x00\x00r}i\x9b,\xff\x1c@O\xccz1\x94\xadH@')"
"bytearray(b""\x01\x01\x00\x00\x00)\xfa2\x07\xf7\t\'@\xa5D\xb7\x03\x1a\x80I@"")"
bytearray(b'\x01\x01\x00\x00\x00\x17P\xa8\xa7\x8f\x10\x13@\x0b\\\xc3\xb1\xd3pG@')
bytearray(b'\x01\x01\x00\x00\x00s\xf6\x84\xdb\x90\x154@\xfe\x95:m2%J@')
bytearray(b'\x01\x01\x00\x00\x00\x1b\xbc\xaf\xca\x85\x06 @<\x0cR\x95[lG@')
bytearray(b'\x01\x01\x00\x00\x00W\xf1\xa1\x9f\x04\x11!@\x9ahF\xf5\x8c\xacG@')
bytearray(b'\x01\x01\x00\x00\x00e\x87\x9d\xce\xba\x0f!@\xd7z\xd0\xfd\xe6\xabG@')
bytearray(b'\x01\x01\x00\x00\x00\xab\xdf\xf1\x92\xa4\x90\x1f@\xe0\x98\n\x96\x8fWG@')
bytearray(b'\x01\x01\x00\x00\x00\xb3\xc0\xb2-^\x7f\x1e@\xec^8!\xbe\\G@')
bytearray(b'\x01\x01\x00\x00\x00\xa0\x01P G\x8e\x1c@\xe6\xea\xc7&\xf9gG@')
bytearray(b'\x01\x01\x00\x00\x00\r~\xd1\xd4\xa1\xd1\x1d@\x81\xc2\xea\xd9\xbdiG@')
bytearray(b'\x01\x01\x00\x00\x00\x8d\x97n\x12\x83\x88\x1e@3\xd2\x9c\x06V[G@')
bytearray(b'\x01\x01\x00\x00\x00q\x93Qe\x18S @\xf8Z\x86\xeeH\x83G@')
bytearray(b'\x01\x01\x00\x00\x00\x0c\xb6l\x08\xe94!@\xa1\xcf\x91\xa6\x8b\xc9G@')
bytearray(b'\x01\x01\x00\x00\x00?1\xfc\xf1\xa8\x92!@\xa8\xba\x91\xc3q\xbcG@')
bytearray(b'\x01\x01\x00\x00\x00\x88\xefi\xf3\xa4\xf1!@\xe5\xcd+\xe8\x07\xc6G@')
"bytearray(b'\x01\x01\x00\x00\x00\xa0\x8e""\xc6\xc6{ @\x9b\x8bd4\x97ZG@')"
bytearray(b'\x01\x01\x00\x00\x00\xf80  \x04\x1d @\x1bz0\xce\x84_G@')
bytearray(b'\x01\x01\x00\x00\x00B\xcc\xca\x9bh( @U\xa1&\x9f\xc3gG@')
bytearray(b'\x01\x01\x00\x00\x00\x83\x105v.\xf1\x1d@uM7?\xb4gG@')
bytearray(b'\x01\x01\x00\x00\x00\xc5\xb9<\x8c\xff\xe5 @\xc0?\x00\x04\x07\x9eG@')
bytearray(b'\x01\x01\x00\x00\x00`_F\x0c\x96\xfd @\x9f\xafY.\x1b\xafG@')
bytearray(b'\x01\x01\x00\x00\x00\x9e\xe5\xc3\xfd\x91\xb7 @\xc4\x03o\xed\xe9{G@')
"bytearray(b""\x01\x01\x00\x00\x00\xb4e\xaf-\xf2Q!@\xd3\'\x03QA\xc3G@"")"
bytearray(b'\x01\x01\x00\x00\x00:Fh\xba\x8d\xa0 @q\xd5\xd0a\x19\x8cG@')
bytearray(b'\x01\x01\x00\x00\x00\xa9\tG5\x91\x12 @\xf9\xfa\xb5P\x8d\x91G@')
bytearray(b'\x01\x01\x00\x00\x00(\xe3)\xf5v\x99 @\xd7\xe6\xffUG\x87G@')
bytearray(b'\x01\x01\x00\x00\x00_\x1c\xa6\xc7\x00\x8e @\xb9WAg-\x85G@')
bytearray(b'\x01\x01\x00\x00\x00\x19Xl8\xd1\x17 @U\xf6\xa7\x9e\x16\x95G@')
bytearray(b'\x01\x01\x00\x00\x00\xe8Z\x0f\xba\xdf\x84\x1e@\x0f\x14\xd3\xe0\x11ZG@')
bytearray(b'\x01\x01\x00\x00\x00\x07\xa6\x89-\xf3\xcc\x1e@\xab\xb4\xc55>kG@')
"bytearray(b'\x01\x01\x00\x00\x00\xf3\x87\x0b\xe5\xe9M!@e\xd4\xc6""\x97\xd8G@')"
bytearray(b'\x01\x01\x00\x00\x00\xa8hQD+\x98 @\xfej\xc4\x82\xb1\x85G@')
bytearray(b'\x01\x01\x00\x00\x00b8\x8d\xa3(\xfe\x1f@\x13\x05D\xd2\xb8\x90G@')
bytearray(b'\x01\x01\x00\x00\x00\xfeG\xa6C\xa77\x1e@J\xb8\x90GpkG@')
bytearray(b'\x01\x01\x00\x00\x00\x81\xfeB\x8f\x18\x9d\x1f@\xd9\x98\xd7\x11\x87nG@')
bytearray(b'\x01\x01\x00\x00\x00\xa9\xf9*\xf9\xd8\xc1 @\xe1Qtn$\x89G@')
bytearray(b'\x01\x01\x00\x00\x00k\x9b\xe2qQ) @\x0f\xa0:\xb1\xe2\x8eG@')
bytearray(b'\x01\x01\x00\x00\x00\xed\x88Tb\xe8\xa2\x1f@@/7s\xa3rG@')
bytearray(b'\x01\x01\x00\x00\x00\x92\t\xf85\x92\xcc\x1e@\x96\x81\xb9\xcc\x9flG@')
bytearray(b'\x01\x01\x00\x00\x00\x97go:\x13\xcc\x1e@)\xd1H:\xb9cG@')
bytearray(b'\x01\x01\x00\x00\x00\xff\x8e\xf2\xdd\xf7\x81
End Exploring Related Columns
Task: Can you find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, analyzed through pennsylvania table and planet features points?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: SELECT S."Column_Name" FROM {Database Name}.{Schema Name}.{Table_name} (ensure all column names are enclosed in double quotations)
Follow the answer format like: To find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, we first select all amenities of the specified types from the `PLANET_FEATURES_POINTS` table that are located within the geometry of Philadelphia from the `PLACES_PENNSYLVANIA` table. Then, we compute the pairwise distances between these amenities and identify the minimum distance.

```csv
shortest_distance_meters
distance:float
```.
Here are some useful tips for answering:
When calculating distances between two geometries, use `ST_MakePoint(x, y)` to make a point and `ST_Distance(geometry1 GEOMETRY, geometry2 GEOMETRY)` to compute. No need to convert from meters to miles unless requested. Don't use Haversine like 2 * 6371000 * ASIN(...), use ST_DISTANCE for more precise results.
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'GEO_OPENSTREETMAP_CENSUS_PLACES': {'GEO_OPENSTREETMAP': ['HISTORY_CHANGESETS', 'HISTORY_LAYERS', 'HISTORY_NODES', 'HISTORY_RELATIONS', 'PLANET_FEATURES', 'PLANET_FEATURES_POINTS', 'PLANET_LAYERS', 'PLANET_NODES', 'PLANET_RELATIONS', 'PLANET_WAYS'], 'GEO_US_CENSUS_PLACES': ['PLACES_ALABAMA', 'PLACES_ALASKA', 'PLACES_AMERICAN_SAMOA', 'PLACES_ARIZONA', 'PLACES_ARKANSAS', 'PLACES_CALIFORNIA', 'PLACES_COLORADO', 'PLACES_CONNECTICUT', 'PLACES_DELAWARE', 'PLACES_DISTRICT_OF_COLUMBIA', 'PLACES_FLORIDA', 'PLACES_GEORGIA', 'PLACES_GUAM', 'PLACES_HAWAII', 'PLACES_IDAHO', 'PLACES_ILLINOIS', 'PLACES_INDIANA', 'PLACES_IOWA', 'PLACES_KANSAS', 'PLACES_KENTUCKY', 'PLACES_LOUISIANA', 'PLACES_MAINE', 'PLACES_MARYLAND', 'PLACES_MASSACHUSETTS', 'PLACES_MICHIGAN', 'PLACES_MINNESOTA', 'PLACES_MISSISSIPPI', 'PLACES_MISSOURI', 'PLACES_MONTANA', 'PLACES_NEBRASKA', 'PLACES_NEVADA', 'PLACES_NEW_HAMPSHIRE', 'PLACES_NEW_JERSEY', 'PLACES_NEW_MEXICO', 'PLACES_NEW_YORK', 'PLACES_NORTHERN_MARIANA_ISLANDS', 'PLACES_NORTH_CAROLINA', 'PLACES_NORTH_DAKOTA', 'PLACES_OHIO', 'PLACES_OKLAHOMA', 'PLACES_OREGON', 'PLACES_PENNSYLVANIA', 'PLACES_PUERTO_RICO', 'PLACES_RHODE_ISLAND', 'PLACES_SOUTH_CAROLINA', 'PLACES_SOUTH_DAKOTA', 'PLACES_TENNESSEE', 'PLACES_TEXAS', 'PLACES_US_VIRGIN_ISLANDS', 'PLACES_UTAH', 'PLACES_VERMONT', 'PLACES_VIRGINIA', 'PLACES_WASHINGTON', 'PLACES_WEST_VIRGINIA', 'PLACES_WISCONSIN', 'PLACES_WYOMING', 'US_NATIONAL_PLACES']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book" SQL: WHERE "title" LIKE '%book%'
However, if the string is not decided, you may use ILIKE and %. e.g. Get articles that mention "education": SQL: "body" ILIKE '%education%' OR "title" ILIKE '%education%'
When handling TO_TIMESTAMP_NTZ conversions, use query like: SELECT CASE WHEN "date" >= 1e15 THEN TO_TIMESTAMP_NTZ("date" / 1000000) WHEN "date" >= 1e12 THEN TO_TIMESTAMP_NTZ("date" / 1000) ELSE TO_TIMESTAMP_NTZ("date") END AS parsed_timestamp FROM my_table;
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Keep all decimals to four decimal places.

2025-01-16 19:39:26 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:39:26 - root - INFO - To find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, we first select all amenities of the specified types from the `PLANET_FEATURES_POINTS` table that are located within the geometry of Philadelphia from the `PLACES_PENNSYLVANIA` table. Then, we compute the pairwise distances between these amenities and identify the minimum distance.

```sql
WITH philly_geom AS (
    SELECT "place_geom"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
    WHERE "place_name" = 'Philadelphia'
),
amenities_in_philly AS (
    SELECT t."osm_id", t."geometry", f.value:"value"::STRING AS "amenity"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
    LATERAL FLATTEN(input => t."all_tags") f,
    philly_geom
    WHERE f.value:"key"::STRING = 'amenity'
      AND f.value:"value"::STRING IN ('library', 'place_of_worship', 'community_centre')
      AND ST_CONTAINS(philly_geom."place_geom", t."geometry")
)
SELECT MIN(ST_DISTANCE(a1."geometry", a2."geometry")) AS shortest_distance_meters
FROM amenities_in_philly a1
JOIN amenities_in_philly a2 ON a1."osm_id" <> a2."osm_id";
```
2025-01-16 19:39:26 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:39:26 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:39:26 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:39:27 - snowflake.connector.connection - INFO - closed
2025-01-16 19:39:27 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:39:27 - root - INFO - itercount: 1
2025-01-16 19:39:27 - root - INFO - 001044 (42P13): 01b9c19b-0004-7c54-0001-11c300e8e57e: SQL compilation error: error line 13 at position 10
Invalid argument types for function 'ST_CONTAINS': (BINARY(8388608), BINARY(8388608))
2025-01-16 19:39:27 - root - INFO - Input sql:
WITH philly_geom AS (
    SELECT "place_geom"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
    WHERE "place_name" = 'Philadelphia'
),
amenities_in_philly AS (
    SELECT t."osm_id", t."geometry", f.value:"value"::STRING AS "amenity"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
    LATERAL FLATTEN(input => t."all_tags") f,
    philly_geom
    WHERE f.value:"key"::STRING = 'amenity'
      AND f.value:"value"::STRING IN ('library', 'place_of_worship', 'community_centre')
      AND ST_CONTAINS(philly_geom."place_geom", t."geometry")
)
SELECT MIN(ST_DISTANCE(a1."geometry", a2."geometry")) AS shortest_distance_meters
FROM amenities_in_philly a1
JOIN amenities_in_philly a2 ON a1."osm_id" <> a2."osm_id";
The error information is:
001044 (42P13): 01b9c19b-0004-7c54-0001-11c300e8e57e: SQL compilation error: error line 13 at position 10
Invalid argument types for function 'ST_CONTAINS': (BINARY(8388608), BINARY(8388608))
Please correct it and output only 1 complete SQL query.
2025-01-16 19:39:52 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:39:52 - root - INFO - To correct the error, we need to convert the `BINARY` geometry columns to `GEOMETRY` using the `TO_GEOMETRY` function before using them in spatial functions like `ST_CONTAINS` and `ST_DISTANCE`.

Here is the corrected SQL query:

```sql
WITH philly_geom AS (
    SELECT "place_geom"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
    WHERE "place_name" = 'Philadelphia'
    LIMIT 1
),
amenities_in_philly AS (
    SELECT t."osm_id", t."geometry", f.value:"value"::STRING AS "amenity"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
    LATERAL FLATTEN(input => t."all_tags") f,
    philly_geom
    WHERE f.value:"key"::STRING = 'amenity'
      AND f.value:"value"::STRING IN ('library', 'place_of_worship', 'community_centre')
      AND ST_CONTAINS(
          TO_GEOMETRY(philly_geom."place_geom"),
          TO_GEOMETRY(t."geometry")
      )
)
SELECT MIN(
    ST_DISTANCE(
        TO_GEOMETRY(a1."geometry"),
        TO_GEOMETRY(a2."geometry")
    )
) AS shortest_distance_meters
FROM amenities_in_philly a1
JOIN amenities_in_philly a2 ON a1."osm_id" <> a2."osm_id";
```
2025-01-16 19:39:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:39:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:39:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:39:56 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 19:39:56 - snowflake.connector.connection - INFO - closed
2025-01-16 19:39:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:39:57 - root - INFO - itercount: 2
2025-01-16 19:39:57 - root - INFO - 0
2025-01-16 19:39:57 - root - INFO - results: 
SHORTEST_DISTANCE_METERS
7.554634338253363e-05


2025-01-16 19:39:57 - root - INFO - Please check the answer again by reviewing Can you find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, analyzed through pennsylvania table and planet features points?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: To find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, we first select all amenities of the specified types from the `PLANET_FEATURES_POINTS` table that are located within the geometry of Philadelphia from the `PLACES_PENNSYLVANIA` table. Then, we compute the pairwise distances between these amenities and identify the minimum distance.

```csv
shortest_distance_meters
distance:float
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
SHORTEST_DISTANCE_METERS
7.554634338253363e-05
Current sql:
WITH philly_geom AS (
    SELECT "place_geom"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
    WHERE "place_name" = 'Philadelphia'
    LIMIT 1
),
amenities_in_philly AS (
    SELECT t."osm_id", t."geometry", f.value:"value"::STRING AS "amenity"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
    LATERAL FLATTEN(input => t."all_tags") f,
    philly_geom
    WHERE f.value:"key"::STRING = 'amenity'
      AND f.value:"value"::STRING IN ('library', 'place_of_worship', 'community_centre')
      AND ST_CONTAINS(
          TO_GEOMETRY(philly_geom."place_geom"),
          TO_GEOMETRY(t."geometry")
      )
)
SELECT MIN(
    ST_DISTANCE(
        TO_GEOMETRY(a1."geometry"),
        TO_GEOMETRY(a2."geometry")
    )
) AS shortest_distance_meters
FROM amenities_in_philly a1
JOIN amenities_in_philly a2 ON a1."osm_id" <> a2."osm_id";
2025-01-16 19:41:04 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:41:04 - root - INFO - To find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, we first select all amenities of the specified types from the `PLANET_FEATURES_POINTS` table that are located within the geometry of Philadelphia from the `PLACES_PENNSYLVANIA` table. Then, we compute the pairwise distances between these amenities and identify the minimum distance.

```csv
shortest_distance_meters
distance:float
```

```sql
WITH philly_geom AS (
    SELECT "place_geom"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
    WHERE "place_name" = 'Philadelphia'
    LIMIT 1
),
amenities_in_philly AS (
    SELECT
        t."osm_id",
        TO_GEOGRAPHY(t."geometry") AS "geometry",
        f.value:"value"::STRING AS "amenity"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
    LATERAL FLATTEN(input => t."all_tags") f,
    philly_geom
    WHERE f.value:"key"::STRING = 'amenity'
      AND f.value:"value"::STRING IN ('library', 'place_of_worship', 'community_centre')
      AND ST_CONTAINS(
          TO_GEOGRAPHY(philly_geom."place_geom"),
          TO_GEOGRAPHY(t."geometry")
      )
)
SELECT MIN(
    ST_DISTANCE(a1."geometry", a2."geometry")
) AS shortest_distance_meters
FROM amenities_in_philly a1
JOIN amenities_in_philly a2 ON a1."osm_id" <> a2."osm_id";
```
2025-01-16 19:41:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:41:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:41:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:41:09 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 19:41:09 - snowflake.connector.connection - INFO - closed
2025-01-16 19:41:09 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:41:09 - root - INFO - itercount: 3
2025-01-16 19:41:09 - root - INFO - 0
2025-01-16 19:41:09 - root - INFO - results: 
SHORTEST_DISTANCE_METERS
6.4650355089939895


2025-01-16 19:41:09 - root - INFO - Please check the answer again by reviewing Can you find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, analyzed through pennsylvania table and planet features points?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: To find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, we first select all amenities of the specified types from the `PLANET_FEATURES_POINTS` table that are located within the geometry of Philadelphia from the `PLACES_PENNSYLVANIA` table. Then, we compute the pairwise distances between these amenities and identify the minimum distance.

```csv
shortest_distance_meters
distance:float
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
SHORTEST_DISTANCE_METERS
6.4650355089939895
Current sql:
WITH philly_geom AS (
    SELECT "place_geom"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
    WHERE "place_name" = 'Philadelphia'
    LIMIT 1
),
amenities_in_philly AS (
    SELECT
        t."osm_id",
        TO_GEOGRAPHY(t."geometry") AS "geometry",
        f.value:"value"::STRING AS "amenity"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
    LATERAL FLATTEN(input => t."all_tags") f,
    philly_geom
    WHERE f.value:"key"::STRING = 'amenity'
      AND f.value:"value"::STRING IN ('library', 'place_of_worship', 'community_centre')
      AND ST_CONTAINS(
          TO_GEOGRAPHY(philly_geom."place_geom"),
          TO_GEOGRAPHY(t."geometry")
      )
)
SELECT MIN(
    ST_DISTANCE(a1."geometry", a2."geometry")
) AS shortest_distance_meters
FROM amenities_in_philly a1
JOIN amenities_in_philly a2 ON a1."osm_id" <> a2."osm_id";
2025-01-16 19:41:46 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:41:46 - root - INFO - To find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, we first select all amenities of the specified types from the `PLANET_FEATURES_POINTS` table that are located within the geometry of Philadelphia from the `PLACES_PENNSYLVANIA` table. Then, we compute the pairwise distances between these amenities and identify the minimum distance.

```csv
shortest_distance_meters
6.4650
```

```sql
WITH philly_geom AS (
    SELECT "place_geom"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
    WHERE "place_name" = 'Philadelphia'
    LIMIT 1
),
amenities_in_philly AS (
    SELECT
        t."osm_id",
        TO_GEOGRAPHY(t."geometry") AS "geometry",
        f.value:"value"::STRING AS "amenity"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
    LATERAL FLATTEN(input => t."all_tags") f,
    philly_geom
    WHERE f.value:"key"::STRING = 'amenity'
      AND f.value:"value"::STRING IN ('library', 'place_of_worship', 'community_centre')
      AND ST_CONTAINS(
          TO_GEOGRAPHY(philly_geom."place_geom"),
          TO_GEOGRAPHY(t."geometry")
      )
)
SELECT ROUND(
    MIN(
        ST_DISTANCE(a1."geometry", a2."geometry")
    ), 4
) AS shortest_distance_meters
FROM amenities_in_philly a1
JOIN amenities_in_philly a2 ON a1."osm_id" <> a2."osm_id";
```
2025-01-16 19:41:46 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:41:46 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:41:46 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:41:51 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 19:41:51 - snowflake.connector.connection - INFO - closed
2025-01-16 19:41:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:41:51 - root - INFO - itercount: 4
2025-01-16 19:41:51 - root - INFO - 0
2025-01-16 19:41:51 - root - INFO - results: 
SHORTEST_DISTANCE_METERS
6.465


2025-01-16 19:41:51 - root - INFO - Please check the answer again by reviewing Can you find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, analyzed through pennsylvania table and planet features points?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: To find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, we first select all amenities of the specified types from the `PLANET_FEATURES_POINTS` table that are located within the geometry of Philadelphia from the `PLACES_PENNSYLVANIA` table. Then, we compute the pairwise distances between these amenities and identify the minimum distance.

```csv
shortest_distance_meters
distance:float
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
SHORTEST_DISTANCE_METERS
6.465
Current sql:
WITH philly_geom AS (
    SELECT "place_geom"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
    WHERE "place_name" = 'Philadelphia'
    LIMIT 1
),
amenities_in_philly AS (
    SELECT
        t."osm_id",
        TO_GEOGRAPHY(t."geometry") AS "geometry",
        f.value:"value"::STRING AS "amenity"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
    LATERAL FLATTEN(input => t."all_tags") f,
    philly_geom
    WHERE f.value:"key"::STRING = 'amenity'
      AND f.value:"value"::STRING IN ('library', 'place_of_worship', 'community_centre')
      AND ST_CONTAINS(
          TO_GEOGRAPHY(philly_geom."place_geom"),
          TO_GEOGRAPHY(t."geometry")
      )
)
SELECT ROUND(
    MIN(
        ST_DISTANCE(a1."geometry", a2."geometry")
    ), 4
) AS shortest_distance_meters
FROM amenities_in_philly a1
JOIN amenities_in_philly a2 ON a1."osm_id" <> a2."osm_id";
2025-01-16 19:42:29 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:42:29 - root - INFO - To find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, we first select all amenities of the specified types from the `PLANET_FEATURES_POINTS` table that are located within the geometry of Philadelphia from the `PLACES_PENNSYLVANIA` table. Then, we compute the pairwise distances between these amenities and identify the minimum distance.

```csv
shortest_distance_meters
distance:float
```

```sql
WITH philly_geom AS (
    SELECT "place_geom"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
    WHERE "place_name" = 'Philadelphia'
    LIMIT 1
),
amenities_in_philly AS (
    SELECT
        t."osm_id",
        TO_GEOGRAPHY(t."geometry") AS "geometry",
        f.value:key::STRING AS "key",
        f.value:value::STRING AS "value"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
    LATERAL FLATTEN(input => t."all_tags") f,
    philly_geom
    WHERE f.value:key::STRING = 'amenity'
      AND f.value:value::STRING IN ('library', 'place_of_worship', 'community_centre')
      AND ST_CONTAINS(
          TO_GEOGRAPHY(philly_geom."place_geom"),
          TO_GEOGRAPHY(t."geometry")
      )
)
SELECT ROUND(
    MIN(
        ST_DISTANCE(a1."geometry", a2."geometry")
    ), 4
) AS distance
FROM amenities_in_philly a1
JOIN amenities_in_philly a2 ON a1."osm_id" <> a2."osm_id";
```
2025-01-16 19:42:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:42:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:42:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:42:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 19:42:33 - snowflake.connector.connection - INFO - closed
2025-01-16 19:42:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:42:34 - root - INFO - itercount: 5
2025-01-16 19:42:34 - root - INFO - 0
2025-01-16 19:42:34 - root - INFO - results: 
DISTANCE
6.465


2025-01-16 19:42:34 - root - INFO - Please check the answer again by reviewing Can you find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, analyzed through pennsylvania table and planet features points?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: To find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, we first select all amenities of the specified types from the `PLANET_FEATURES_POINTS` table that are located within the geometry of Philadelphia from the `PLACES_PENNSYLVANIA` table. Then, we compute the pairwise distances between these amenities and identify the minimum distance.

```csv
shortest_distance_meters
distance:float
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
DISTANCE
6.465
Current sql:
WITH philly_geom AS (
    SELECT "place_geom"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
    WHERE "place_name" = 'Philadelphia'
    LIMIT 1
),
amenities_in_philly AS (
    SELECT
        t."osm_id",
        TO_GEOGRAPHY(t."geometry") AS "geometry",
        f.value:key::STRING AS "key",
        f.value:value::STRING AS "value"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
    LATERAL FLATTEN(input => t."all_tags") f,
    philly_geom
    WHERE f.value:key::STRING = 'amenity'
      AND f.value:value::STRING IN ('library', 'place_of_worship', 'community_centre')
      AND ST_CONTAINS(
          TO_GEOGRAPHY(philly_geom."place_geom"),
          TO_GEOGRAPHY(t."geometry")
      )
)
SELECT ROUND(
    MIN(
        ST_DISTANCE(a1."geometry", a2."geometry")
    ), 4
) AS distance
FROM amenities_in_philly a1
JOIN amenities_in_philly a2 ON a1."osm_id" <> a2."osm_id";
2025-01-16 19:43:07 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 19:43:07 - root - INFO - To find the shortest distance between any two amenities (either a library, place of worship, or community center) located within Philadelphia, we first select all amenities of the specified types from the `PLANET_FEATURES_POINTS` table that are located within the geometry of Philadelphia from the `PLACES_PENNSYLVANIA` table. Then, we compute the pairwise distances between these amenities and identify the minimum distance.

```csv
shortest_distance_meters
6.4650
```

```sql
WITH philly_geom AS (
    SELECT "place_geom"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_US_CENSUS_PLACES."PLACES_PENNSYLVANIA"
    WHERE "place_name" = 'Philadelphia'
    LIMIT 1
),
amenities_in_philly AS (
    SELECT
        t."osm_id",
        TO_GEOGRAPHY(t."geometry") AS "geometry",
        f.value:"key"::STRING AS "key",
        f.value:"value"::STRING AS "value"
    FROM GEO_OPENSTREETMAP_CENSUS_PLACES.GEO_OPENSTREETMAP."PLANET_FEATURES_POINTS" t,
    LATERAL FLATTEN(input => t."all_tags") f,
    philly_geom
    WHERE f.value:"key"::STRING = 'amenity'
      AND f.value:"value"::STRING IN ('library', 'place_of_worship', 'community_centre')
      AND ST_CONTAINS(
          TO_GEOGRAPHY(philly_geom."place_geom"),
          TO_GEOGRAPHY(t."geometry")
      )
)
SELECT ROUND(
    MIN(
        ST_DISTANCE(a1."geometry", a2."geometry")
    ), 4
) AS shortest_distance_meters
FROM amenities_in_philly a1
JOIN amenities_in_philly a2 ON a1."osm_id" <> a2."osm_id";
```
2025-01-16 19:43:07 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 19:43:07 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 19:43:07 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 19:43:17 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 19:43:17 - snowflake.connector.connection - INFO - closed
2025-01-16 19:43:17 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 19:43:17 - root - INFO - itercount: 6
2025-01-16 19:43:17 - root - INFO - 0
2025-01-16 19:43:17 - root - INFO - Total iteration counts: 6
