After comparing both SQL scripts, I have determined that **"0result.sql"** is the correct answer.

**Reasoning:**

1. **Comprehensive Data Selection:**
   - **"0result.sql"** selects all columns (`SELECT *`) from each daily table when building the `all_events` CTE. This ensures that any additional columns that might be relevant (even if not explicitly used in the query) are included. This can be important for accuracy in more complex analyses.
   - **"2result.sql"** only selects `"USER_PSEUDO_ID"` and `"EVENT_NAME"`, which is sufficient for this specific query but may exclude other relevant data if needed.

2. **Accurate Calculation Without Unnecessary Modification:**
   - **"0result.sql"** calculates the difference in average pageviews between purchasers and non-purchasers as:
     ```sql
     AVG(pageviews of purchasers) - AVG(pageviews of non-purchasers)
     ```
     This respects the direction of the difference, indicating whether purchasers view more or fewer pages on average.
   - **"2result.sql"** uses `ABS()` to calculate the absolute value of the difference:
     ```sql
     ABS(AVG(purchaser_pageviews) - AVG(non_purchaser_pageviews))
     ```
     Using `ABS()` removes the sign of the difference, which might not be appropriate if negative differences are meaningful in the context (e.g., if non-purchasers view more pages on average).

3. **Alignment with the Task Requirements:**
   - The task is to find the **average difference** in pageviews between purchasers and non-purchasers, not the absolute difference. Therefore, preserving the sign of the difference is important to understand which group has a higher average.
   - **"0result.sql"** aligns with this requirement by not using `ABS()`.

4. **Use of `CASE` Statement for Clarity:**
   - In **"0result.sql"**, the use of a `CASE` statement within the `AVG()` functions provides clear segregation between purchasers and non-purchasers within a single query.

5. **Data Integrity and Readability:**
   - The structure of **"0result.sql"** makes it easier to read and understand the flow of data, which is beneficial for verification and future maintenance.

**Conclusion:**

Based on the above reasons, **"0result.sql"** is the correct SQL script as it accurately computes the average difference in pageviews between purchasers and non-purchasers in December 2020 without unnecessary functions that could alter the meaningfulness of the result.

```plain
0result.sql
```