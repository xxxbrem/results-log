2025-01-18 23:55:16 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 23:55:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 23:55:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:55:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:55:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:55:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 23:55:41 - snowflake.connector.connection - INFO - closed
2025-01-18 23:55:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:55:41 - root - INFO - SQL:
-- 1. Get distinct assignee names
SELECT DISTINCT f.value::STRING AS "assignee_name"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee") f
LIMIT 1000
Results:
Too long, hard cut:
assignee_name
"Rempex Pharmaceuticals, Inc."
Unchartedvr Inc.
"Workday, Inc."
Electronics And Telecommunications Research Institute
"Faurecia Interior Systems, Inc."
Sl Corporation
キヤノン株式会社
Nat Space Dev Agency
和男 矢野
Eru Orifuanto Adamu
株式会社日立製作所
住友化学株式会社
東洋鋼鈑株式会社
Roeru Lab Inc
サーキュレーション  リサーチ  リミテッド
井関農機株式会社
洋 村瀬
スタンレー電気株式会社
Teijin Agurokemikaru Kk
"Autel Robotics Co., Ltd."
Saphir Maschinenbau Gmbh
Metrawatt International Gmbh
Master Srl
Андрей Владимирович Гуревич
"Kaken Pharmaceutical Co., Ltd., Tokio/Tokyo, Jp"
Metso Paper Inc
Shire Biochem Inc
Karsten Mfg Corp
Georges Baikoff
Sony Comp Entertainment Europe
Rockwool Int
"Klimt, Hans Ulrich, 7912 Weißenhorn"
주식회사 금성사
성기설
김관성
中央建材工業株式会社
三栄厨株式会社
Headies B V
Ncr Int Inc
원종명
Biscuiterie Nantaise - Bn
Günther Prof. Dr. rer. nat. Kraft
Mortara Rangoni Europ S R L
Akad Medyczna
Erdoekemia Erdoegazdasagi
"Rohm Co., Ltd."
Toyoji Sugimoto
Andrew Paul Chapple
Domschke Angelika M
Yasuhiko Kokami
Lupke Manfred A A
Ramya Sethuraman
Yoshiharu Gotanda
Chehak Luanne
Cheng-Qun Gui
Thomas James Klofta
Macchia Joseph D.
Allawi Hatim T.
Speciality Plumbing Supplies Pty Ltd
Elanco Animal Health Incorporated
Makoto Katayama
Juan Lopez Redondo
武汉梅苑彩印股份有限公司
保定市新斯特建材有限公司
合肥工业大学
上海赛南能源有限公司
贵州省检测技术研究应用中心
金陵六一三航空设备维修(江苏)有限公司
浙江丝里伯睡眠科技股份有限公司
常州市高级职业技术学校
扬州市职业大学(扬州开放大学)
国家电网有限公司技术学院分公司
湖北天合工程技术有限公司
全位(厦门)电子有限公司
建德市磊鑫织制品有限公司
北海鑫冀海洋科技开发有限公司
Remiro Antonio Lopez
重庆丰东金属表面处理有限公司
The Victoria Falls & Transvaal Power Company Ltd
Pages Jose
Eisai Co Ltd
"Identity Concepts, Llc"
"Hoechst Marion Roussel, Inc."
Shoji Hagihara
Elefterios Koutsofios
Orgel
"L'air Liquide, Societe Anonyme Pour L'etude Et L'exploitation Des Proced Es Georges Claude"
John C. Gano
Pharmacia & Upjohn Company
Wolfgang H. Oertel
Merck & Co. Inc.
James P. Meade
Ahmet Celikkaya
Luis Lagar Garcia
John Eric Brunelle
Venkat Ganesan
Daniel M. Willis
Nikolay V. PLOTNIKOV
Marshall A. Isman
Evgene GREENBERG
Wayne S. Gourlay
Ashok Katdare
Taisuke HIGASHI
Unilever Global Ip Limited
Jean Marc Chuinard
За витель САН И 897347 (Ш
Massachusetts Institute Of Technology
Mac & Mac Hydrodemolition Inc.
Oath Inc.
Hakeem Alraheem
Oak Security Group LLC
Uniwersytet Technologiczno-Humanistyczny Im. Kazimierza Pułaskiego W Radomiu
Krzysztof Jerzy Duda
Fca Us Llc
Inventive It Bvba
Frisch Bernd D
ZF Friedrichshafen AG
インターナショナル・ビジネス・マシーンズ・コーポレーションＩｎｔｅｒｎａｔｉｏｎａｌ Ｂｕｓｉｎｅｓｓ Ｍａｓｃｈｉｎｅｓ Ｃｏｒｐｏｒａｔｉｏｎ
日清食品ホールディングス株式会社
青岛海信电器股份有限公司
Martin Marcus E
深圳市九洲电器有限公司
"Conopco, Inc., D/B/A Unilever"
Waboba Ab
日東工業株式会社
Osaka Gas Co Ltd
アーケマ・インコーポレイテッド
Univ Lodzki
Revolymer Limited
木田精工株式会社
株式会社タイトー
エボニック  インダストリーズ  アクチエンゲゼルシャフト
"Shenzhen China Star Optoelectronics Technology Co., Ltd."
Наталия Дмитриевна Олтаржевская
Беллас Хелс (Інтернешнл) Лімітед
Бп Кемикэлз Лимитед
Вишневецкий Евгений Дмитриевич
Семенов Андрей Юрьевич
Алексей Викторович Шторм
Деканов Владимир Александрович
В.И. Гнедовский
Keen Personal Media
Dowelanco
2956-9746 Quebec Inc.
Thrall Car Manufacturing Company
Charles David Musick
Amit Gupta
Aleksey Mikhaylovich KUZ'MIN
Keren BISMUTH
Bastian Hulsmann
Dayakar BADRI
Aman S. Cheema
Boldrini Massimo
Rajko Panovic
Alice Ro
"Michael E. Hebert, Jr."
Greg BRITTLES
"Opko Ireland Global Holdings, Ltd"
Jason L. WOOD
Heinz Burk
Aptevo Research And Development Llc
Emelia Eiriksdottir
Do Yun Kim
Holly Kordasiewicz
深圳市特拉风科技有限公司
广州市煜展电子有限公司
江苏德纳精工轴承有限公司
沭阳县东隆工贸有限公司
中国商用飞机有限责任公司
上海航稼自动化科技有限公司
广东亿龙电器科技有限公司
上海沪通电子有限公司
霍邱县农兴农业服务有限公司
重庆晨宇机床制造有限公司
淮北市人民医院
吴开龙
陈惠作
深圳市悦和精密模具有限公司
淮安市第一人民医院
钟文楣
深圳市悦民保安服务有限公司
天津市智诚达不锈钢制品有限公司
宜兴一木科技有限公司
上海璀华智能科技有限公司
贵州大学
江苏屹信航天科技有限公司
Chicago Forging & Mfg Co
Arthur R Hartmann
Prosper Elieson Chaimsonovitz
Saurer Ag Adolph
Jerry L Lott
Hippolyte Goupil
George P Jones
John Fish
Suld George
Watson Chester Roy
W. Forrer Homer
Huerlimann Hans
Spase Charles Beers
Michael J Kucka
Fiber Industries Inc
Compagnie Francaise D'etudes Et De Construction Technip
Westinghouse Brake & Signal
Carstedt Howard B
Sheik A. Zahir
Eli A. Zackheim
Hird Harold
Jxtg Nippon Oil & Energy Corporation
"Dolbey & Company, Inc."
Emory University
芜湖美的厨卫电器制造有限公司
中交河海工程有限公司
东莞市利发爱尔空气净化系统有限公司
苏州虹光伟业精密机械设备有限公司
魏俊花
泰安市泰山鼎峰衡器有限公司
四川朝天香食品有限公司
上海岽俊控制设备有限公司
海峡(福建)交通工程设计有限公司
江阴市福鼎通讯器材有限公司
广州市科颐轩电子科技有限公司
上海恒百机电科技有限公司
江西宏大化工有限公司
泰安市旺泰工贸有限公司
广东科学技术职业学院
江阴市尚时工程装备有限公司
孙英
天津亚润达科技有限公司
重庆宗申发动机制造有限公司
"Robert Bosch Gmbh, 7000 Stuttgart"
Franz Dipl.-Ing. 7180 Crailsheim Weinzierl
广东美的白色家电技术创新中心有限公司
Sony Europe Limited
Scopio Labs Ltd.
Arcelik Anonim Sirketi
Gm Cruise Holdings Llc
Univ Fed Do Rio Grande Do Sul
James Casey
Marvell International Ltd.
"SeeScan, Inc."
야마다 가쓰지
아사히 가세이 고오교오 가부시기가이샤
그레함 티. 윌리
Jaroslav Busta
"Yotta Networks, Inc."
쥴겐 루트
보든 케미칼 유케이 리미티드
Quantum Corporation
"Федеральное государственное учреждение ""Московский научно-исследовательский онкологический институт им. П.А. Герцена Федерального агентства по высокотехнологичной медицинской помощи"" РФ"
"Общество с ограниченной ответственностью ""Уральское конструкторское бюро вагоностроения"""
Гарбузов Валентин Георгиевич
"Открытое Акцио

2025-01-18 23:55:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:55:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:55:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:55:43 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 23:55:43 - snowflake.connector.connection - INFO - closed
2025-01-18 23:55:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:55:43 - root - INFO - SQL:
-- 2. Get distinct IPC codes
SELECT DISTINCT f.value::STRING AS "ipc_code"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."ipc") f
LIMIT 1000
Results:
Too long, hard cut:
ipc_code
"{""code"":""D03C3/24"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B29C45/26"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""B66C13/08"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""F24D13/02"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""F16K1/32"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""F21V15/04"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B02C1/04"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""H04L29/08"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""G01M11/00"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""F22D1/50"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B23B35/00"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""F16M13/02"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""A24F40/50"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B24B49/04"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A47B81/00"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""G01M3/32"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""F16N21/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H01H31/30"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H01H3/02"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""A61G7/053"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""F42C19/06"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""H04L29/06"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""F28F13/18"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""G01N1/31"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""H01L33/08"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""G06N20/00"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""H04W4/029"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""E21B43/00"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""E21B49/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61M39/16"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61P31/16"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H04W12/02"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""G06F1/3203"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H04L45/28"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H04L1/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61M25/01"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B01J35/02"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B25J9/16"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""C07K16/28"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""B60R21/0132"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""A63H3/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61L27/52"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61L2/18"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""B26D9/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""C01G53/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""E03F1/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""C03C17/34"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H02J50/80"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H04W76/14"",""first"":false,""inventive"":false,""tree"":[]}"
"{""code"":""B24B3/24"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61K38/17"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61K39/116"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""G01S19/25"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61K31/57"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""C04B35/49"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61M25/16"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""G01L19/10"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""F02D13/02"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""C03B33/09"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61L27/04"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61L27/12"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H05K1/09"",""first"":false,""inventive"":false,""tree"":[]}"
"{""code"":""A61B10/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B60Q1/48"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""E05C9/08"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""F04B39/12"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""H01H31/24"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""G09F13/00"",""first"":false,""inventive"":true,""tr

2025-01-18 23:55:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:55:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:55:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:55:45 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 23:55:45 - snowflake.connector.connection - INFO - closed
2025-01-18 23:55:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:55:45 - root - INFO - SQL:
-- 3. Get filing dates where date is not null
SELECT DISTINCT t."filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS t
WHERE t."filing_date" IS NOT NULL
LIMIT 1000
Results:
Too long, hard cut:
filing_date
20220218
20220328
20220321
20220418
20220715
20230324
20230605
20220718
20231229
19930208
19930705
19980615
19990521
20040804
19340625
20081230
20010920
19960308
19130708
19600922
19501129
19640316
19580315
19510420
19210115
19670421
19440920
19680205
19440226
19070215
19710608
19881007
19610223
19550706
20051202
19771101
20220202
20230502
20240110
20010623
19611102
19300528
19091120
19520430
19290413
19700320
19531015
19010418
19461227
19690919
19730108
19321201
19810828
19520114
19071023
19460523
20110506
20130315
20140829
20180620
20191209
20191219
20190902
20141017
20170909
19831117
19910420
19851021
19900606
20130308
20160302
19951106
19921228
19961211
19921218
20030929
20031209
20090501
20021127
20000901
20000329
20110331
20200217
20061012
19800815
19741016
19630425
19800130
19700625
19250206
19711021
19740712
19760629
19340604
19370414
19481105
19930308
19760506
19830406
19940330
19820209
19870306
19880325
19870130
19850329
20051019
20080905
19850612
19860710
19950608
19960902
20020522
20030409
20041029
20050204
20060929
20170718
20170828
20210113
19371002
19540803
19580731
19370329
19490420
19360824
19701027
20100422
19560928
19560709
19341105
19370726
19541028
18960226
19270530
19711210
19310609
19080502
19410314
19440705
19890301
19741010
19610203
19590119
19590828
19441007
19691016
19810818
19990322
19150113
19580508
18990530
19371229
19710201
19310421
18991106
18991216
19690828
19200203
19760113
19950120
19771019
19890601
19980317
20020810
20060125
20150804
20060222
20080928
19820208
19990312
19800702
19711124
19800715
19820609
20050614
20050510
19970830
20060710
20200911
20191127
20230708
20040323
20061003
19820504
19860903
20120215
19890905
19900504
19821216
19900511
19940705
20000511
19680914
19761030
19810720
19741108
19861226
20211026
19881125
19961105
20190208
20100820
20030212
20030703
20041101
19731016
19820720
19940615
19791019
19940808
19821026
19921211
19840411
20120117
20010126
20050414
20141215
20140820
19681009
19990401
19950828
19991125
19660901
19860128
19721214
20240306
19970510
20080625
19110825
19211115
19320524
19521223
19050220
19850105
19270309
19840919
19630917
19820802
20110206
19680131
19980107
19710629
19900720
19950605
20051105
20041015
19781206
19821213
19371203
19590731
19050901
19390529
19520702
19521115
19310407
19411101
19390930
19460911
19050329
19790315
19481026
19281113
19950202
19780622
19720929
20221113
19600111
19800128
20040825
19711103
19950719
19740722
19960227
19690118
19871012
20020304
20020706
20121004
20240513
19750408
19850606
19610428
19020626
19921002
19440927
19661129
19730317
19710930
20020728
20170819
19520909
19780417
20181028
19810902
19801230
19131208
19670208
19070226
19450803
19221014
19530717
19390317
19220320
19201011
19321105
19180709
19170518
19310819
19210527
19710105
19410730
19620606
19230719
19230118
19430723
19700824
19800612
19681111
19951202
19840429
19870408
18960704
19600419
20150524
20190519
19811017
19871124
19700613
19150213
19220413
18910421
19301015
19680301
19270125
19220704
19530820
19080617
19200113
19500705
19101212
19460302
19431111
18990404
19180910
19260527
19540423
19680322
19460913
19701124
19561123
19710928
19280911
19061226
19840105
19770902
19670126
20010227
19960522
19741122
19941108
19460606
19610531
19291118
19610406
19631230
19470530
19270923
19990526
19340219
19510605
19541101
19470505
19120427
19591029
19380517
19100616
19550325
19311125
18981215
19851104
19720131
19860213
19340411
20070215
19720302
19680903
19140925
19370128
19450830
20170707
20211110
20120725
20140226
20160811
20170509
20180925
20181023
20220429
19811114
19990716
19861126
19891124
20220730
20220712
20221223
20230112
20230325
20230710
20230724
20000420
20080208
19620901
19901123
19990609
20000121
20000512
19990813
20011122
20120516
19810812
19750801
19790913
20021210
19470615
20101222
20061124
19860320
20020724
20230728
19830824
20011102
20020425
20210730
20230125
19590506
19731203
19510601
19421219
19390301
20010129
19070521
19311012
19380126
19290215
19730430
19040223
19080723
19710311
19760115
19640812
19710727
19751105
19570725
20020712
20000328
20030901
20030902
20031231
20140828
20160920
20090615
20100325
20071224
20120912
20130125
20110121
20200207
20210217
20031021
20090310
20200622
20091006
20170330
20180820
20211013
20210723
20200506
20041014
20171122
20180910
20240227
19930527
20100521
20090731
20140430
19861014
19920821
19911108
19911022
20000621
20050912
20061229
20030313
20131111
19980722
20050113
20141223
20061002
19871005
19740306
20010829
19730911
19830224
19731019
19961218
19990316
20190101
20000905
20001113
19670522
19991017
19980212
19920304
19640916
19620126
19860723
19960111
19990112
19780120
19900116
20001117
20000830
19960926
19300711
19121002
19160911
19830216
19820326
19890320
19940319
19920228
19730710
19750724
19931103
19980127
19871114
19701225
19831007
20090126
20050620
20070219
20150225
19840126
19860717
19961220
20161003
20110415
20140510
19580409
19600725
19100714
19590925
19640424
19670216
19

2025-01-18 23:55:45 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:55:45 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:55:45 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:55:46 - snowflake.connector.connection - INFO - closed
2025-01-18 23:55:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:56:12 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 23:56:12 - root - INFO - The error you're encountering:

```
100097 (22007): 01b9cddb-0004-7b16-0001-11c300ee94fe: Can't parse '0' as date with format 'YYYYMMDD'
```

indicates that there are values in the `"filing_date"` column that cannot be parsed into a date using the format `'YYYYMMDD'`. Specifically, it seems that some values are `'0'` or other invalid date representations.

To handle this, you can use the `TRY_TO_DATE` function instead of `TO_DATE`. The `TRY_TO_DATE` function attempts to convert the input string to a date and returns `NULL` if it fails, without raising an error. You can then filter out any `NULL` results.

Here is the corrected SQL query:

```sql
-- 4. Get years extracted from filing dates using TRY_TO_DATE
SELECT DISTINCT YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
FROM PATENTS.PATENTS.PUBLICATIONS t
WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
LIMIT 1000;
```

This query works as follows:

- **TRY_TO_DATE**: Converts `"filing_date"` to a date using the `'YYYYMMDD'` format. If the conversion fails (e.g., due to invalid values like `'0'`), it returns `NULL`.
- **YEAR(...)**: Extracts the year from the date.
- **WHERE ... IS NOT NULL**: Filters out any rows where `"filing_date"` could not be parsed into a valid date.

By using `TRY_TO_DATE`, you avoid the error caused by invalid date formats and only process rows with valid dates.

**Additional Consideration:**

If you suspect that `'filing_date'` may contain other non-standard or invalid date values (not just `'0'`), you might want to further clean or validate your data. For instance, you could exclude any dates that don't conform to expected patterns or fall outside a reasonable date range.

**Example:**

```sql
-- 4. Get years extracted from filing dates with additional validation
SELECT DISTINCT YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
FROM PATENTS.PATENTS.PUBLICATIONS t
WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
  AND t."filing_date" != '0'
  AND t."filing_date" != ''
  AND t."filing_date" IS NOT NULL
LIMIT 1000;
```

**Explanation:**

- **AND t."filing_date" != '0'**: Excludes rows where `"filing_date"` is `'0'`.
- **AND t."filing_date" != ''**: Excludes empty strings.
- **AND t."filing_date" IS NOT NULL**: Ensures the column is not `NULL`.

**Next Steps:**

After correcting the query, you should be able to execute it without errors and get the list of distinct filing years.

---

Considering this adjustment, you can proceed with your analysis to answer the original task: determining the year in which the assignee with the most applications in the patent category `'A61'` filed the most.

Here’s how you might approach the task:

1. **Filter patents in IPC category 'A61':**

   - The `"ipc"` column contains IPC codes in variant format. You need to extract the IPC codes and filter those starting with `'A61'`.

2. **Extract assignee names:**

   - The `"assignee"` column is also a variant type. You'll need to flatten it to get the assignee names.

3. **Calculate the number of applications by assignee and year:**

   - Group the data by assignee and filing year, and count the number of applications.

4. **Identify the assignee with the most applications:**

   - Find the assignee with the highest total number of applications in category `'A61'`.

5. **Determine the year they filed the most applications:**

   - For that assignee, identify the year with the highest number of filings.

**Example SQL Query:**

```sql
-- Find the assignee with the most applications in IPC 'A61'
WITH a61_patents AS (
  SELECT
    t."publication_number",
    assignee.value::STRING AS "assignee_name",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."assignee") assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND ipc.value:"code"::STRING LIKE 'A61%'
    AND assignee.value::STRING IS NOT NULL
),

assignee_counts AS (
  SELECT
    "assignee_name",
    COUNT(*) AS "total_applications"
  FROM a61_patents
  GROUP BY "assignee_name"
),

top_assignee AS (
  SELECT "assignee_name"
  FROM assignee_counts
  ORDER BY "total_applications" DESC
  LIMIT 1
),

assignee_year_counts AS (
  SELECT
    p."filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents p
  JOIN top_assignee t
    ON p."assignee_name" = t."assignee_name"
  GROUP BY p."filing_year"
)

SELECT
  "filing_year" AS "Year"
FROM assignee_year_counts
ORDER BY "applications_in_year" DESC
LIMIT 1;
```

**Explanation:**

- **a61_patents**: Filters patents in IPC category `'A61'`, extracts assignee names and filing years.
- **assignee_counts**: Counts total applications per assignee.
- **top_assignee**: Identifies the assignee with the most applications.
- **assignee_year_counts**: For the top assignee, counts applications per year.
- **Final SELECT**: Retrieves the year with the most applications for the top assignee.

**Answer Format:**

Since we cannot provide the specific year without executing the query on actual data, the final answer should be formatted as per your instruction:

```csv
Year
year:int (Attention: answer in one row)
```

---

If you have access to execute this query, running it should give you the specific year you're looking for.
2025-01-18 23:56:12 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:56:12 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:56:12 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:56:14 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-18 23:56:14 - snowflake.connector.connection - INFO - closed
2025-01-18 23:56:14 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:56:14 - root - INFO - SQL:
-- Find the assignee with the most applications in IPC 'A61'
WITH a61_patents AS (
  SELECT
    t."publication_number",
    assignee.value::STRING AS "assignee_name",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."assignee") assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND ipc.value:"code"::STRING LIKE 'A61%'
    AND assignee.value::STRING IS NOT NULL
),

assignee_counts AS (
  SELECT
    "assignee_name",
    COUNT(*) AS "total_applications"
  FROM a61_patents
  GROUP BY "assignee_name"
),

top_assignee AS (
  SELECT "assignee_name"
  FROM assignee_counts
  ORDER BY "total_applications" DESC
  LIMIT 1
),

assignee_year_counts AS (
  SELECT
    p."filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents p
  JOIN top_assignee t
    ON p."assignee_name" = t."assignee_name"
  GROUP BY p."filing_year"
)

SELECT
  "filing_year" AS "Year"
FROM assignee_year_counts
ORDER BY "applications_in_year" DESC
LIMIT 1;
Results:
Year
2001

2025-01-18 23:56:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:56:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:56:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:56:15 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 23:56:15 - snowflake.connector.connection - INFO - closed
2025-01-18 23:56:16 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:57:02 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 23:57:02 - root - INFO - ```sql
-- Adjusted SQL query with simplified conditions
WITH a61_patents AS (
  SELECT
    t."publication_number",
    assignee.value::STRING AS "assignee_name",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."assignee") assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND PARSE_JSON(ipc.value::STRING):"code"::STRING LIKE 'A61%'
    AND assignee.value::STRING IS NOT NULL
)

SELECT
  "filing_year" AS "Year"
FROM (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
);
```
2025-01-18 23:57:02 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:57:02 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:57:02 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:57:04 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-18 23:57:04 - snowflake.connector.connection - INFO - closed
2025-01-18 23:57:04 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:57:04 - root - INFO - SQL:
-- Adjusted SQL query with simplified conditions
WITH a61_patents AS (
  SELECT
    t."publication_number",
    assignee.value::STRING AS "assignee_name",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."assignee") assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND PARSE_JSON(ipc.value::STRING):"code"::STRING LIKE 'A61%'
    AND assignee.value::STRING IS NOT NULL
)

SELECT
  "filing_year" AS "Year"
FROM (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
);
Results:
Year
2002

2025-01-18 23:57:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:57:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:57:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:57:06 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 23:57:06 - snowflake.connector.connection - INFO - closed
2025-01-18 23:57:06 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:57:06 - root - INFO - SQL:
-- 6. Get counts of patents per assignee
SELECT assignee.value::STRING AS "assignee_name", COUNT(*) AS "patent_count"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee") assignee
GROUP BY assignee.value::STRING
ORDER BY "patent_count" DESC
LIMIT 1000
Results:
Too long, hard cut:
assignee_name,patent_count
株式会社東芝,1903
松下電器産業株式会社,1816
キヤノン株式会社,1790
株式会社日立製作所,1707
Hitachi Ltd,1694
三菱電機株式会社,1694
Matsushita Electric Ind Co Ltd,1642
日本電気株式会社,1567
Toshiba Corp,1563
Canon Inc,1362
富士通株式会社,1283
トヨタ自動車株式会社,1274
삼성전자주식회사,1269
Mitsubishi Electric Corp,1248
Nec Corp,1161
Fujitsu Ltd,1078
ソニー株式会社,1022
株式会社リコー,992
엘지전자 주식회사,878
Sony Corp,874
Toyota Motor Corp,865
International Business Machines Corporation,849
セイコーエプソン株式会社,839
シャープ株式会社,820
Ricoh Co Ltd,792
华为技术有限公司,762
"Samsung Electronics Co., Ltd.",753
Seiko Epson Corp,703
国家电网公司,700
三洋電機株式会社,659
本田技研工業株式会社,654
株式会社デンソー,647
日本電信電話株式会社,605
Sharp Corp,586
日産自動車株式会社,579
Siemens Ag,543
현대자동차주식회사,528
三菱重工業株式会社,519
珠海格力电器股份有限公司,500
Canon Kabushiki Kaisha,485
中兴通讯股份有限公司,485
Honda Motor Co Ltd,474
Sanyo Electric Co Ltd,468
中国石油化工股份有限公司,462
富士写真フイルム株式会社,460
삼성전자 주식회사,456
松下電工株式会社,455
Fuji Photo Film Co Ltd,443
Robert Bosch Gmbh,438
Qualcomm Incorporated,436
Nippon Telegr & Teleph Corp <Ntt>,423
富士ゼロックス株式会社,420
General Electric Company,419
浙江大学,403
Mitsubishi Heavy Ind Ltd,379
大日本印刷株式会社,378
京セラ株式会社,370
京东方科技集团股份有限公司,364
Denso Corp,362
Nissan Motor Co Ltd,361
Bayer Ag,359
Matsushita Electric Works Ltd,354
パナソニック株式会社,353
Gen Electric,352
株式会社クボタ,350
新日本製鐵株式会社,346
Sony Corporation,345
住友電気工業株式会社,339
Fuji Xerox Co Ltd,331
清华大学,330
Nippon Steel Corp,326
"Huawei Technologies Co., Ltd.",323
美的集团股份有限公司,314
Kabushiki Kaisha Toshiba,313
Siemens Aktiengesellschaft,311
三星电子株式会社,310
国家电网有限公司,304
윤종용,302
パナソニックＩｐマネジメント株式会社,301
富士フイルム株式会社,299
富士電機株式会社,292
Toyota Jidosha Kabushiki Kaisha,292
ブラザー工業株式会社,291
Lg Electronics Inc.,290
凸版印刷株式会社,289
積水化学工業株式会社,288
Intel Corporation,284
東レ株式会社,282
マツダ株式会社,281
花王株式会社,275
한국전자통신연구원,270
沖電気工業株式会社,258
Dainippon Printing Co Ltd,257
주식회사 엘지화학,257
华南理工大学,255
Hoechst Ag,253
カシオ計算機株式会社,253
株式会社ニコン,250
中国石油天然气股份有限公司,248
腾讯科技（深圳）有限公司,247
株式会社村田製作所,241
天津大学,238
주식회사 하이닉스반도체,235
Basf Ag,232
Apple Inc.,232
Sumitomo Electric Ind Ltd,231
Kyocera Corp,231
株式会社ブリヂストン,229
株式会社三共,229
Fujitsu Limited,228
株式会社神戸製鋼所,224
주식회사 포스코,224
Fuji Electric Co Ltd,222
オムロン株式会社,219
哈尔滨工业大学,218
吉林大学,217
コニカ株式会社,215
Oppo广东移动通信有限公司,215
东南大学,212
Telefonaktiebolaget Lm Ericsson (Publ),210
矢崎総業株式会社,209
オリンパス光学工業株式会社,209
Sekisui Chem Co Ltd,207
Du Pont,205
高通股份有限公司,204
Toppan Printing Co Ltd,202
Ibm,202
Nec Corporation,201
Philips Nv,201
ダイキン工業株式会社,200
Kobe Steel Ltd,200
"Microsoft Technology Licensing, Llc",199
엘지디스플레이 주식회사,196
Oki Electric Ind Co Ltd,196
海尔智家股份有限公司,196
株式会社島津製作所,194
Bosch Gmbh Robert,194
日本精工株式会社,194
삼성에스디아이 주식회사,194
Toray Ind Inc,191
"Ford Global Technologies, Llc",191
上海交通大学,190
Ｊｆｅスチール株式会社,189
オリンパス株式会社,189
三菱化学株式会社,189
Panasonic Corp,188
松下电器产业株式会社,187
川崎製鉄株式会社,187
"Honda Motor Co., Ltd.",185
Seiko Epson Corporation,184
株式会社三洋物産,184
"Hitachi, Ltd.",183
Brother Ind Ltd,183
鸿海精密工业股份有限公司,182
Kao Corp,181
北京航空航天大学,181
井関農機株式会社,179
石川島播磨重工業株式会社,176
住友化学株式会社,175
佳能株式会社,174
Denso Corporation,174
"Micron Technology, Inc.",173
电子科技大学,172
東芝テック株式会社,172
Microsoft Corporation,172
Mazda Motor Corp,172
华中科技大学,171
古河電気工業株式会社,171
江南大学,169
Olympus Optical Co Ltd,169
The Procter & Gamble Company,169
住友電装株式会社,168
대우전자 주식회사,168
Nikon Corp,167
三菱电机株式会社,166
三菱マテリアル株式会社,166
Hoffmann La Roche,164
索尼公司,164
三井化学株式会社,163
Basf Se,163
西安交通大学,163
スズキ株式会社,163
株式会社半導体エネルギー研究所,163
丰田自动车株式会社,163
日東電工株式会社,163
Fujifilm Corp,162
比亚迪股份有限公司,162
三星電子株式会社,161
大连理工大学,160
Mitsubishi Electric Corporation,160
西安电子科技大学,159
"Samsung Display Co., Ltd.",158
ヤマハ株式会社,158
住友金属工業株式会社,158
山东大学,157
アイシン精機株式会社,157
アルプス電気株式会社,157
Samsung Electronics Co Ltd,157
Konica Corp,156
罗伯特·博世有限公司,156
浙江工业大学,155
Novartis Ag,155
Rca Corp,155
삼성디스플레이 주식회사,154
Google Llc,153
Bridgestone Corp,153
日本鋼管株式会社,153
三菱自動車工業株式会社,152
Casio Comput Co Ltd,152
中南大学,152
구자홍,151
"Hewlett-Packard Development Company, L.P.",150
鸿富锦精密工业（深圳）有限公司,149
Sharp Kabushiki Kaisha,149
The Boeing Company,147
南京林业大学,146
Kubota Corp,145
广东美的制冷设备有限公司,145
김광호,144
3M Innovative Properties Company,144
Kawasaki Steel Corp,144
维沃移动通信有限公司,143
Texas Instruments Incorporated,143
엘지이노텍 주식회사,143
昆明理工大学,142
联想(北京)有限公司,141
江苏大学,141
Ciba Geigy Ag,141
"Boe Technology Group Co., Ltd.",140
北京小米移动软件有限公司,139
Westinghouse Electric Corp,139
パイオニア株式会社,138
Xerox Corporation,138
重庆大学,138
The Regents Of The University Of California,138
삼성전기주식회사,138
村田機械株式会社,137
Hyundai Motor Company,136
北京工业大学,136
精工爱普生株式会社,135
Yazaki Corp,134
Sumitomo Metal Ind Ltd,133
東京エレクトロン株式会社,133
Procter & Gamble,133
日立金属株式会社,132
武汉理工大学,132
"Matsushita Electric Industrial Co., Ltd.",132
Ishikawajima Harima Heavy Ind Co Ltd,131
信越化学工業株式会社,131
横浜ゴム株式会社,131
株式会社吉野工業所,131
南京航空航天大学,131
四川大学,131
广东电网有限责任公司,131
Tdk Corp,130
Ici Ltd,130
北京理工大学,130
コニカミノルタ株式会社,129
Sanyo Product Co Ltd,129
日本ビクター株式会社,129
山东科技大学,127
기아자동차주식회사,127
同济大学,126
현대자동차 주식회사,126
株式会社フジクラ,126
中国矿业大学,126
Furukawa Electric Co Ltd:The,126
Bayerische Motoren Werke Aktiengesellschaft,125
Eastman Kodak Co,124
"Halliburton Energy Services, Inc.",123
阿里巴巴集团控股有限公司,123
Koninklijke Philips N.V.,123
ミノルタ株式会社,123
Koninklijke Philips Electronics N.

2025-01-18 23:57:06 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:57:06 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:57:06 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:57:08 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 23:57:08 - snowflake.connector.connection - INFO - closed
2025-01-18 23:57:08 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:57:47 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 23:57:47 - root - INFO - ```sql
-- Simplified SQL query with minimal conditions

WITH a61_patents AS (
  SELECT
    t."publication_number",
    t."assignee",
    YEAR(TRY_TO_DATE(t."filing_date", 'YYYYMMDD')) AS "filing_year",
    ipc.value:"code"::STRING AS "ipc_code"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date", 'YYYYMMDD') IS NOT NULL
    AND ipc.value:"code"::STRING LIKE 'A61%'
)

SELECT
  "filing_year" AS "Year"
FROM (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
);
```
2025-01-18 23:57:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:57:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:57:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:57:49 - snowflake.connector.connection - INFO - closed
2025-01-18 23:57:49 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:58:15 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 23:58:15 - root - INFO - ```sql
-- Corrected SQL query

WITH a61_patents AS (
  SELECT
    t."publication_number",
    t."assignee",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year",
    ipc.value:"code"::STRING AS "ipc_code"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND ipc.value:"code"::STRING LIKE 'A61%'
)

SELECT
  "filing_year" AS "Year"
FROM (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
);
```
2025-01-18 23:58:15 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:58:15 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:58:15 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:58:16 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-18 23:58:16 - snowflake.connector.connection - INFO - closed
2025-01-18 23:58:16 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:58:16 - root - INFO - SQL:
-- Corrected SQL query

WITH a61_patents AS (
  SELECT
    t."publication_number",
    t."assignee",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year",
    ipc.value:"code"::STRING AS "ipc_code"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND ipc.value:"code"::STRING LIKE 'A61%'
)

SELECT
  "filing_year" AS "Year"
FROM (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
);
Results:
Year
2020

2025-01-18 23:58:16 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:58:16 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:58:16 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:58:18 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 23:58:18 - snowflake.connector.connection - INFO - closed
2025-01-18 23:58:18 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:59:05 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 23:59:05 - root - INFO - ```sql
-- Simplified SQL query to retrieve the required year

WITH a61_patents AS (
  SELECT
    t."publication_number",
    f_assignee.value::STRING AS "assignee_name",
    YEAR(TRY_TO_DATE(t."filing_date", 'YYYYMMDD')) AS "filing_year",
    PARSE_JSON(f_ipc.value::STRING):"code"::STRING AS "ipc_code"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."assignee") f_assignee,
       LATERAL FLATTEN(input => t."ipc") f_ipc
  WHERE TRY_TO_DATE(t."filing_date", 'YYYYMMDD') IS NOT NULL
    AND PARSE_JSON(f_ipc.value::STRING):"code"::STRING LIKE 'A61%'
    AND f_assignee.value::STRING IS NOT NULL
),

top_assignee AS (
  SELECT
    "assignee_name",
    COUNT(*) AS "total_applications"
  FROM a61_patents
  GROUP BY "assignee_name"
  ORDER BY "total_applications" DESC
  LIMIT 1
),

assignee_year_counts AS (
  SELECT
    p."filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents p
  JOIN top_assignee t ON p."assignee_name" = t."assignee_name"
  GROUP BY p."filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
)

SELECT
  "filing_year" AS "Year"
FROM assignee_year_counts;
```
2025-01-18 23:59:05 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:59:05 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:59:05 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:59:06 - snowflake.connector.connection - INFO - closed
2025-01-18 23:59:06 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:59:24 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 23:59:24 - root - INFO - ```sql
-- Corrected SQL query with simplified conditions

SELECT DISTINCT YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."ipc") ipc
WHERE PARSE_JSON(ipc.value::STRING):"code"::STRING LIKE 'A61%'
  AND TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
LIMIT 1000;
```
2025-01-18 23:59:24 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:59:24 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:59:24 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:59:26 - snowflake.connector.cursor - INFO - Number of results in first chunk: 110
2025-01-18 23:59:26 - snowflake.connector.connection - INFO - closed
2025-01-18 23:59:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:59:26 - root - INFO - SQL:
-- Corrected SQL query with simplified conditions

SELECT DISTINCT YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."ipc") ipc
WHERE PARSE_JSON(ipc.value::STRING):"code"::STRING LIKE 'A61%'
  AND TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
LIMIT 1000;
Results:
filing_year
1951
1958
1956
1933
1909
1985
1960
1944
1945
2017
1983
2004
1928
1984
1967
1940
1939
2001
1980
1968
1941
1935
2015
2022
1921
1963
1905
1986
1977
1969
1938
2020
1930
1926
1920
1998
1988
1934
1955
1949
1999
1982
1972
1966
1978
1989
2009
1995
1953
1971
2008
1993
1964
1937
1931
2010
1927
2012
1957
1923
2007
1961
2005
1976
1970
1946
2014
1974
1916
1992
1952
1947
1979
1943
1994
2011
1950
2013
1954
2018
2006
1973
2024
1924
1975
1942
2023
2003
1922
1990
1914
1936
2019
1962
2002
1948
1910
1913
1987
2000
1932
2016
1996
2021
1965
1959
1991
1929
1997
1981

2025-01-18 23:59:26 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:59:26 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:59:26 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:59:28 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 23:59:28 - snowflake.connector.connection - INFO - closed
2025-01-18 23:59:28 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:59:42 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 23:59:42 - root - INFO - ```sql
-- Simplified SQL query to retrieve the required year

WITH ipc_codes AS (
    SELECT
        t."publication_number",
        t."assignee",
        t."filing_date",
        PARSE_JSON(ipc.value::STRING):"code"::STRING AS "ipc_code"
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."ipc") ipc
    WHERE t."filing_date" IS NOT NULL
),
a61_patents AS (
    SELECT
        "publication_number",
        "assignee",
        TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') AS "filing_date",
        "ipc_code"
    FROM ipc_codes
    WHERE "ipc_code" LIKE 'A61%'
        AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
),
assignee_totals AS (
    SELECT
        f_assignee.value::STRING AS "assignee_name",
        COUNT(*) AS "total_applications"
    FROM a61_patents t,
         LATERAL FLATTEN(input => t."assignee") f_assignee
    GROUP BY "assignee_name"
    ORDER BY "total_applications" DESC
    LIMIT 1
),
assignee_years AS (
    SELECT
        YEAR("filing_date") AS "filing_year",
        COUNT(*) AS "applications_in_year"
    FROM a61_patents t,
         LATERAL FLATTEN(input => t."assignee") f_assignee
    WHERE f_assignee.value::STRING = (SELECT "assignee_name" FROM assignee_totals)
    GROUP BY "filing_year"
    ORDER BY "applications_in_year" DESC
    LIMIT 1
)
SELECT
    "filing_year" AS "Year"
FROM assignee_years;
```
2025-01-18 23:59:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:59:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:59:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:59:43 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-18 23:59:43 - snowflake.connector.connection - INFO - closed
2025-01-18 23:59:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 23:59:44 - root - INFO - SQL:
-- Simplified SQL query to retrieve the required year

WITH ipc_codes AS (
    SELECT
        t."publication_number",
        t."assignee",
        t."filing_date",
        PARSE_JSON(ipc.value::STRING):"code"::STRING AS "ipc_code"
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."ipc") ipc
    WHERE t."filing_date" IS NOT NULL
),
a61_patents AS (
    SELECT
        "publication_number",
        "assignee",
        TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') AS "filing_date",
        "ipc_code"
    FROM ipc_codes
    WHERE "ipc_code" LIKE 'A61%'
        AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
),
assignee_totals AS (
    SELECT
        f_assignee.value::STRING AS "assignee_name",
        COUNT(*) AS "total_applications"
    FROM a61_patents t,
         LATERAL FLATTEN(input => t."assignee") f_assignee
    GROUP BY "assignee_name"
    ORDER BY "total_applications" DESC
    LIMIT 1
),
assignee_years AS (
    SELECT
        YEAR("filing_date") AS "filing_year",
        COUNT(*) AS "applications_in_year"
    FROM a61_patents t,
         LATERAL FLATTEN(input => t."assignee") f_assignee
    WHERE f_assignee.value::STRING = (SELECT "assignee_name" FROM assignee_totals)
    GROUP BY "filing_year"
    ORDER BY "applications_in_year" DESC
    LIMIT 1
)
SELECT
    "filing_year" AS "Year"
FROM assignee_years;
Results:
Year
2001

2025-01-18 23:59:44 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 23:59:44 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 23:59:44 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 23:59:45 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 23:59:45 - snowflake.connector.connection - INFO - closed
2025-01-18 23:59:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 00:00:17 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 00:00:17 - root - INFO - ```sql
WITH a61_patents AS (
  SELECT
    t."publication_number",
    assignee.value::STRING AS "assignee_name",
    YEAR(TRY_TO_DATE(t."filing_date", 'YYYYMMDD')) AS "filing_year"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."assignee") assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE ipc.value:"code"::STRING LIKE 'A61%'
    AND TRY_TO_DATE(t."filing_date", 'YYYYMMDD') IS NOT NULL
    AND assignee.value::STRING IS NOT NULL
)

SELECT
  "filing_year" AS "Year"
FROM (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  WHERE "assignee_name" = (
    SELECT "assignee_name"
    FROM (
      SELECT
        "assignee_name",
        COUNT(*) AS "total_applications"
      FROM a61_patents
      GROUP BY "assignee_name"
      ORDER BY "total_applications" DESC
      LIMIT 1
    )
  )
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
);
```
2025-01-19 00:00:17 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 00:00:17 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 00:00:17 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 00:00:19 - snowflake.connector.connection - INFO - closed
2025-01-19 00:00:19 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 00:00:46 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 00:00:46 - root - INFO - ```sql
-- Simplified SQL query to retrieve the required year

WITH a61_patents AS (
  SELECT
    t."publication_number",
    f_assignee.value::STRING AS "assignee_name",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."assignee") f_assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND PARSE_JSON(ipc.value::STRING):"code"::STRING LIKE 'A61%'
    AND f_assignee.value::STRING IS NOT NULL
),

top_assignee AS (
  SELECT
    "assignee_name",
    COUNT(*) AS "total_applications"
  FROM a61_patents
  GROUP BY "assignee_name"
  ORDER BY "total_applications" DESC
  LIMIT 1
),

assignee_years AS (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  WHERE "assignee_name" = (SELECT "assignee_name" FROM top_assignee)
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
)

SELECT
  "filing_year" AS "Year"
FROM assignee_years;
```
2025-01-19 00:00:46 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 00:00:46 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 00:00:46 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 00:00:47 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 00:00:47 - snowflake.connector.connection - INFO - closed
2025-01-19 00:00:48 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 00:00:48 - root - INFO - SQL:
-- Simplified SQL query to retrieve the required year

WITH a61_patents AS (
  SELECT
    t."publication_number",
    f_assignee.value::STRING AS "assignee_name",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."assignee") f_assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND PARSE_JSON(ipc.value::STRING):"code"::STRING LIKE 'A61%'
    AND f_assignee.value::STRING IS NOT NULL
),

top_assignee AS (
  SELECT
    "assignee_name",
    COUNT(*) AS "total_applications"
  FROM a61_patents
  GROUP BY "assignee_name"
  ORDER BY "total_applications" DESC
  LIMIT 1
),

assignee_years AS (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  WHERE "assignee_name" = (SELECT "assignee_name" FROM top_assignee)
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
)

SELECT
  "filing_year" AS "Year"
FROM assignee_years;
Results:
Year
2001

2025-01-19 00:00:48 - root - INFO - itercount: 0
2025-01-19 00:00:48 - root - INFO - Database Name: PATENTS
Schema Name: PATENTS
DDL describes table information.
,0
table_name,DISCLOSURES_13
description,
DDL,"create or replace TABLE DISCLOSURES_13 (
	""family_id"" VARCHAR(16777216),
	""record_id"" VARCHAR(16777216),
	""disclosure_event"" VARCHAR(16777216),
	""sso"" VARCHAR(16777216),
	""patent_owner_harmonized"" VARCHAR(16777216),
	""patent_owner_unharmonized"" VARCHAR(16777216),
	""date"" NUMBER(38,0),
	""standard"" VARCHAR(16777216),
	""committee_project"" VARCHAR(16777216),
	""tc_name"" VARCHAR(16777216),
	""sc_name"" VARCHAR(16777216),
	""wg_name"" VARCHAR(16777216),
	""licensing_commitment"" VARCHAR(16777216),
	""copyright"" VARCHAR(16777216),
	""blanket_type"" VARCHAR(16777216),
	""blanket_scope"" VARCHAR(16777216),
	""third_party"" VARCHAR(16777216),
	""reciprocity"" VARCHAR(16777216),
	""serial_cleaned"" VARCHAR(16777216),
	""pub_cleaned"" VARCHAR(16777216)
);"

,1
table_name,PUBLICATIONS
description,
DDL,"create or replace TABLE PUBLICATIONS (
	""publication_number"" VARCHAR(16777216),
	""application_number"" VARCHAR(16777216),
	""country_code"" VARCHAR(16777216),
	""kind_code"" VARCHAR(16777216),
	""application_kind"" VARCHAR(16777216),
	""application_number_formatted"" VARCHAR(16777216),
	""pct_number"" VARCHAR(16777216),
	""family_id"" VARCHAR(16777216),
	""spif_publication_number"" VARCHAR(16777216),
	""spif_application_number"" VARCHAR(16777216),
	""title_localized"" VARIANT,
	""abstract_localized"" VARIANT,
	""claims_localized"" VARIANT,
	""claims_localized_html"" VARIANT,
	""description_localized"" VARIANT,
	""description_localized_html"" VARIANT,
	""publication_date"" NUMBER(38,0),
	""filing_date"" NUMBER(38,0),
	""grant_date"" NUMBER(38,0),
	""priority_date"" NUMBER(38,0),
	""priority_claim"" VARIANT,
	""inventor"" VARIANT,
	""inventor_harmonized"" VARIANT,
	""assignee"" VARIANT,
	""assignee_harmonized"" VARIANT,
	""examiner"" VARIANT,
	""uspc"" VARIANT,
	""ipc"" VARIANT,
	""cpc"" VARIANT,
	""fi"" VARIANT,
	""fterm"" VARIANT,
	""locarno"" VARIANT,
	""citation"" VARIANT,
	""parent"" VARIANT,
	""child"" VARIANT,
	""entity_status"" VARCHAR(16777216),
	""art_unit"" VARCHAR(16777216)
);"

,2
table_name,CPC_DEFINITION
description,
DDL,"create or replace TABLE CPC_DEFINITION (
	""applicationReferences"" VARIANT,
	""breakdownCode"" BOOLEAN,
	""childGroups"" VARIANT,
	""children"" VARIANT,
	""dateRevised"" FLOAT,
	""definition"" VARIANT,
	""glossary"" VARIANT,
	""informativeReferences"" VARIANT,
	""ipcConcordant"" VARCHAR(16777216),
	""level"" FLOAT,
	""limitingReferences"" VARIANT,
	""notAllocatable"" BOOLEAN,
	""parents"" VARIANT,
	""precedenceLimitingReferences"" VARIANT,
	""residualReferences"" VARIANT,
	""rules"" VARIANT,
	""scopeLimitingReferences"" VARIANT,
	""status"" VARCHAR(16777216),
	""symbol"" VARCHAR(16777216),
	""synonyms"" VARIANT,
	""titleFull"" VARCHAR(16777216),
	""titlePart"" VARIANT
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'PATENTS': {'PATENTS': ['CPC_DEFINITION', 'DISCLOSURES_13', 'PUBLICATIONS']}}
Begin Exploring Related Columns
Consider the following columns from the `PUBLICATIONS` table and their potential usage:

- `"assignee"`: Contains information about the assignees of the patents. We can use this to identify the assignee with the most applications.
- `"ipc"`: Contains International Patent Classification codes. We can use this to filter patents in the category `'A61'`.
- `"filing_date"`: Contains the filing date of the patents. We can extract the year from this to analyze the number of filings per year.

Potential conditions:

- Filter `"ipc"` to include codes starting with `'A61'`.
- Use `TRY_TO_DATE` or appropriate date functions to extract the year from `"filing_date"`.
- Since `"assignee"` and `"ipc"` are of `VARIANT` type, we may need to flatten or access specific keys within them.

Here are 10 SQL queries to understand the values in the related columns:

```sql
-- 1. Get distinct assignee names
SELECT DISTINCT f.value::STRING AS "assignee_name"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee") f
LIMIT 1000;

-- 2. Get distinct IPC codes
SELECT DISTINCT f.value::STRING AS "ipc_code"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."ipc") f
LIMIT 1000;

-- 3. Get filing dates where date is not null
SELECT DISTINCT t."filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS t
WHERE t."filing_date" IS NOT NULL
LIMIT 1000;

-- 4. Get years extracted from filing dates
SELECT DISTINCT YEAR(TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
FROM PATENTS.PATENTS.PUBLICATIONS t
WHERE t."filing_date" IS NOT NULL
LIMIT 1000;

-- 5. Get assignee names for patents in IPC category 'A61'
SELECT DISTINCT assignee.value::STRING AS "assignee_name"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee") assignee,
     LATERAL FLATTEN(input => t."ipc") ipc
WHERE ipc.value::STRING LIKE 'A61%'
LIMIT 1000;

-- 6. Get counts of patents per assignee
SELECT assignee.value::STRING AS "assignee_name", COUNT(*) AS "patent_count"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee") assignee
GROUP BY assignee.value::STRING
ORDER BY "patent_count" DESC
LIMIT 1000;

-- 7. List IPC codes starting with 'A61'
SELECT DISTINCT ipc.value::STRING AS "ipc_code"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."ipc") ipc
WHERE ipc.value::STRING LIKE 'A61%'
LIMIT 1000;

-- 8. Get filing years for patents in IPC category 'A61'
SELECT DISTINCT YEAR(TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."ipc") ipc
WHERE ipc.value::STRING LIKE 'A61%' AND t."filing_date" IS NOT NULL
LIMIT 1000;

-- 9. Get assignee names and filing years for patents in IPC category 'A61'
SELECT DISTINCT assignee.value::STRING AS "assignee_name",
                YEAR(TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee") assignee,
     LATERAL FLATTEN(input => t."ipc") ipc
WHERE ipc.value::STRING LIKE 'A61%' AND t."filing_date" IS NOT NULL
LIMIT 1000;

-- 10. Get the number of patents filed each year in IPC category 'A61'
SELECT YEAR(TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year",
       COUNT(*) AS "patent_count"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."ipc") ipc
WHERE ipc.value::STRING LIKE 'A61%' AND t."filing_date" IS NOT NULL
GROUP BY "filing_year"
ORDER BY "filing_year"
LIMIT 1000;
```

These queries help in understanding the data in the relevant columns and how they can be used to address the task.Query:
-- 1. Get distinct assignee names
SELECT DISTINCT f.value::STRING AS "assignee_name"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee") f
LIMIT 1000
Answer:
Too long, hard cut:
assignee_name
"Rempex Pharmaceuticals, Inc."
Unchartedvr Inc.
"Workday, Inc."
Electronics And Telecommunications Research Institute
"Faurecia Interior Systems, Inc."
Sl Corporation
キヤノン株式会社
Nat Space Dev Agency
和男 矢野
Eru Orifuanto Adamu
株式会社日立製作所
住友化学株式会社
東洋鋼鈑株式会社
Roeru Lab Inc
サーキュレーション  リサーチ  リミテッド
井関農機株式会社
洋 村瀬
スタンレー電気株式会社
Teijin Agurokemikaru Kk
"Autel Robotics Co., Ltd."
Saphir Maschinenbau Gmbh
Metrawatt International Gmbh
Master Srl
Андрей Владимирович Гуревич
"Kaken Pharmaceutical Co., Ltd., Tokio/Tokyo, Jp"
Metso Paper Inc
Shire Biochem Inc
Karsten Mfg Corp
Georges Baikoff
Sony Comp Entertainment Europe
Rockwool Int
"Klimt, Hans Ulrich, 7912 Weißenhorn"
주식회사 금성사
성기설
김관성
中央建材工業株式会社
三栄厨株式会社
Headies B V
Ncr Int Inc
원종명
Biscuiterie Nantaise - Bn
Günther Prof. Dr. rer. nat. Kraft
Mortara Rangoni Europ S R L
Akad Medyczna
Erdoekemia Erdoegazdasagi
"Rohm Co., Ltd."
Toyoji Sugimoto
Andrew Paul Chapple
Domschke Angelika M
Yasuhiko Kokami
Lupke Manfred A A
Ramya Sethuraman
Yoshiharu Gotanda
Chehak Luanne
Cheng-Qun Gui
Thomas James Klofta
Macchia Joseph D.
Allawi Hatim T.
Speciality Plumbing Supplies Pty Ltd
Elanco Animal Health Incorporated
Makoto Katayama
Juan Lopez Redondo
武汉梅苑彩印股份有限公司
保定市新斯特建材有限公司
合肥工业大学
上海赛南能源有限公司
贵州省检测技术研究应用中心
金陵六一三航空设备维修(江苏)有限公司
浙江丝里伯睡眠科技股份有限公司
常州市高级职业技术学校
扬州市职业大学(扬州开放大学)
国家电网有限公司技术学院分公司
湖北天合工程技术有限公司
全位(厦门)电子有限公司
建德市磊鑫织制品有限公司
北海鑫冀海洋科技开发有限公司
Remiro Antonio Lopez
重庆丰东金属表面处理有限公司
The Victoria Falls & Transvaal Power Company Ltd
Pages Jose
Eisai Co Ltd
"Identity Concepts, Llc"
"Hoechst Marion Roussel, Inc."
Shoji Hagihara
Elefterios Koutsofios
Orgel
"L'air Liquide, Societe Anonyme Pour L'etude Et L'exploitation Des Proced Es Georges Claude"
John C. Gano
Pharmacia & Upjohn Company
Wolfgang H. Oertel
Merck & Co. Inc.
James P. Meade
Ahmet Celikkaya
Luis Lagar Garcia
John Eric Brunelle
Venkat Ganesan
Daniel M. Willis
Nikolay V. PLOTNIKOV
Marshall A. Isman
Evgene GREENBERG
Wayne S. Gourlay
Ashok Katdare
Taisuke HIGASHI
Unilever Global Ip Limited
Jean Marc Chuinard
За витель САН И 897347 (Ш
Massachusetts Institute Of Technology
Mac & Mac Hydrodemolition Inc.
Oath Inc.
Hakeem Alraheem
Oak Security Group LLC
Uniwersytet Technologiczno-Humanistyczny Im. Kazimierza Pułaskiego W Radomiu
Krzysztof Jerzy Duda
Fca Us Llc
Inventive It Bvba
Frisch Bernd D
ZF Friedrichshafen AG
インターナショナル・ビジネス・マシーンズ・コーポレーションＩｎｔｅｒｎａｔｉｏｎａｌ Ｂｕｓｉｎｅｓｓ Ｍａｓｃｈｉｎｅｓ Ｃｏｒｐｏｒａｔｉｏｎ
日清食品ホールディングス株式会社
青岛海信电器股份有限公司
Martin Marcus E
深圳市九洲电器有限公司
"Conopco, Inc., D/B/A Unilever"
Waboba Ab
日東工業株式会社
Osaka Gas Co Ltd
アーケマ・インコーポレイテッド
Univ Lodzki
Revolymer Limited
木田精工株式会社
株式会社タイトー
エボニック  インダストリーズ  アクチエンゲゼルシャフト
"Shenzhen China Star Optoelectronics Technology Co., Ltd."
Наталия Дмитриевна Олтаржевская
Беллас Хелс (Інтернешнл) Лімітед
Бп Кемикэлз Лимитед
Вишневецкий Евгений Дмитриевич
Семенов Андрей Юрьевич
Алексей Викторович Шторм
Деканов Владимир Александрович
В.И. Гнедовский
Keen Personal Media
Dowelanco
2956-9746 Quebec Inc.
Thrall Car Manufacturing Company
Charles David Musick
Amit Gupta
Aleksey Mikhaylovich KUZ'MIN
Keren BISMUTH
Bastian Hulsmann
Dayakar BADRI
Aman S. Cheema
Boldrini Massimo
Rajko Panovic
Alice Ro
"Michael E. Hebert, Jr."
Greg BRITTLES
"Opko Ireland Global Holdings, Ltd"
Jason L. WOOD
Heinz Burk
Aptevo Research And Development Llc
Emelia Eiriksdottir
Do Yun Kim
Holly Kordasiewicz
深圳市特拉风科技有限公司
广州市煜展电子有限公司
江苏德纳精工轴承有限公司
沭阳县东隆工贸有限公司
中国商用飞机有限责任公司
上海航稼自动化科技有限公司
广东亿龙电器科技有限公司
上海沪通电子有限公司
霍邱县农兴农业服务有限公司
重庆晨宇机床制造有限公司
淮北市人民医院
吴开龙
陈惠作
深圳市悦和精密模具有限公司
淮安市第一人民医院
钟文楣
深圳市悦民保安服务有限公司
天津市智诚达不锈钢制品有限公司
宜兴一木科技有限公司
上海璀华智能科技有限公司
贵州大学
江苏屹信航天科技有限公司
Chicago Forging & Mfg Co
Arthur R Hartmann
Prosper Elieson Chaimsonovitz
Saurer Ag Adolph
Jerry L Lott
Hippolyte Goupil
George P Jones
John Fish
Suld George
Watson Chester Roy
W. Forrer Homer
Huerlimann Hans
Spase Charles Beers
Michael J Kucka
Fiber Industries Inc
Compagnie Francaise D'etudes Et De Construction Technip
Westinghouse Brake & Signal
Carstedt Howard B
Sheik A. Zahir
Eli A. Zackheim
Hird Harold
Jxtg Nippon Oil & Energy Corporation
"Dolbey & Company, Inc."
Emory University
芜湖美的厨卫电器制造有限公司
中交河海工程有限公司
东莞市利发爱尔空气净化系统有限公司
苏州虹光伟业精密机械设备有限公司
魏俊花
泰安市泰山鼎峰衡器有限公司
四川朝天香食品有限公司
上海岽俊控制设备有限公司
海峡(福建)交通工程设计有限公司
江阴市福鼎通讯器材有限公司
广州市科颐轩电子科技有限公司
上海恒百机电科技有限公司
江西宏大化工有限公司
泰安市旺泰工贸有限公司
广东科学技术职业学院
江阴市尚时工程装备有限公司
孙英
天津亚润达科技有限公司
重庆宗申发动机制造有限公司
"Robert Bosch Gmbh, 7000 Stuttgart"
Franz Dipl.-Ing. 7180 Crailsheim Weinzierl
广东美的白色家电技术创新中心有限公司
Sony Europe Limited
Scopio Labs Ltd.
Arcelik Anonim Sirketi
Gm Cruise Holdings Llc
Univ Fed Do Rio Grande Do Sul
James Casey
Marvell International Ltd.
"SeeScan, Inc."
야마다 가쓰지
아사히 가세이 고오교오 가부시기가이샤
그레함 티. 윌리
Jaroslav Busta
"Yotta Networks, Inc."
쥴겐 루트
보든 케미칼 유케이 리미티드
Quantum Corporation
"Федеральное государственное учреждение ""Московский научно-исследовательский онкологический институт им. П.А. Герцена Федерального агентства по высокотехнологичной медицинской помощи"" РФ"
"Общество с ограниченной ответственностью ""Уральское конструкторское бюро вагоностроения"""
Гарбузов Валентин Георгиевич
"Открытое Акцио
Query:
-- 2. Get distinct IPC codes
SELECT DISTINCT f.value::STRING AS "ipc_code"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."ipc") f
LIMIT 1000
Answer:
Too long, hard cut:
ipc_code
"{""code"":""D03C3/24"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B29C45/26"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""B66C13/08"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""F24D13/02"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""F16K1/32"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""F21V15/04"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B02C1/04"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""H04L29/08"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""G01M11/00"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""F22D1/50"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B23B35/00"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""F16M13/02"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""A24F40/50"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B24B49/04"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A47B81/00"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""G01M3/32"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""F16N21/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H01H31/30"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H01H3/02"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""A61G7/053"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""F42C19/06"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""H04L29/06"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""F28F13/18"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""G01N1/31"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""H01L33/08"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""G06N20/00"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""H04W4/029"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""E21B43/00"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""E21B49/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61M39/16"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61P31/16"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H04W12/02"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""G06F1/3203"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H04L45/28"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H04L1/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61M25/01"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B01J35/02"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B25J9/16"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""C07K16/28"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""B60R21/0132"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""A63H3/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61L27/52"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61L2/18"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""B26D9/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""C01G53/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""E03F1/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""C03C17/34"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H02J50/80"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H04W76/14"",""first"":false,""inventive"":false,""tree"":[]}"
"{""code"":""B24B3/24"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61K38/17"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61K39/116"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""G01S19/25"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61K31/57"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""C04B35/49"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61M25/16"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""G01L19/10"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""F02D13/02"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""C03B33/09"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61L27/04"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""A61L27/12"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""H05K1/09"",""first"":false,""inventive"":false,""tree"":[]}"
"{""code"":""A61B10/00"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""B60Q1/48"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""E05C9/08"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""F04B39/12"",""first"":true,""inventive"":true,""tree"":[]}"
"{""code"":""H01H31/24"",""first"":false,""inventive"":true,""tree"":[]}"
"{""code"":""G09F13/00"",""first"":false,""inventive"":true,""tr
Query:
-- 3. Get filing dates where date is not null
SELECT DISTINCT t."filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS t
WHERE t."filing_date" IS NOT NULL
LIMIT 1000
Answer:
Too long, hard cut:
filing_date
20220218
20220328
20220321
20220418
20220715
20230324
20230605
20220718
20231229
19930208
19930705
19980615
19990521
20040804
19340625
20081230
20010920
19960308
19130708
19600922
19501129
19640316
19580315
19510420
19210115
19670421
19440920
19680205
19440226
19070215
19710608
19881007
19610223
19550706
20051202
19771101
20220202
20230502
20240110
20010623
19611102
19300528
19091120
19520430
19290413
19700320
19531015
19010418
19461227
19690919
19730108
19321201
19810828
19520114
19071023
19460523
20110506
20130315
20140829
20180620
20191209
20191219
20190902
20141017
20170909
19831117
19910420
19851021
19900606
20130308
20160302
19951106
19921228
19961211
19921218
20030929
20031209
20090501
20021127
20000901
20000329
20110331
20200217
20061012
19800815
19741016
19630425
19800130
19700625
19250206
19711021
19740712
19760629
19340604
19370414
19481105
19930308
19760506
19830406
19940330
19820209
19870306
19880325
19870130
19850329
20051019
20080905
19850612
19860710
19950608
19960902
20020522
20030409
20041029
20050204
20060929
20170718
20170828
20210113
19371002
19540803
19580731
19370329
19490420
19360824
19701027
20100422
19560928
19560709
19341105
19370726
19541028
18960226
19270530
19711210
19310609
19080502
19410314
19440705
19890301
19741010
19610203
19590119
19590828
19441007
19691016
19810818
19990322
19150113
19580508
18990530
19371229
19710201
19310421
18991106
18991216
19690828
19200203
19760113
19950120
19771019
19890601
19980317
20020810
20060125
20150804
20060222
20080928
19820208
19990312
19800702
19711124
19800715
19820609
20050614
20050510
19970830
20060710
20200911
20191127
20230708
20040323
20061003
19820504
19860903
20120215
19890905
19900504
19821216
19900511
19940705
20000511
19680914
19761030
19810720
19741108
19861226
20211026
19881125
19961105
20190208
20100820
20030212
20030703
20041101
19731016
19820720
19940615
19791019
19940808
19821026
19921211
19840411
20120117
20010126
20050414
20141215
20140820
19681009
19990401
19950828
19991125
19660901
19860128
19721214
20240306
19970510
20080625
19110825
19211115
19320524
19521223
19050220
19850105
19270309
19840919
19630917
19820802
20110206
19680131
19980107
19710629
19900720
19950605
20051105
20041015
19781206
19821213
19371203
19590731
19050901
19390529
19520702
19521115
19310407
19411101
19390930
19460911
19050329
19790315
19481026
19281113
19950202
19780622
19720929
20221113
19600111
19800128
20040825
19711103
19950719
19740722
19960227
19690118
19871012
20020304
20020706
20121004
20240513
19750408
19850606
19610428
19020626
19921002
19440927
19661129
19730317
19710930
20020728
20170819
19520909
19780417
20181028
19810902
19801230
19131208
19670208
19070226
19450803
19221014
19530717
19390317
19220320
19201011
19321105
19180709
19170518
19310819
19210527
19710105
19410730
19620606
19230719
19230118
19430723
19700824
19800612
19681111
19951202
19840429
19870408
18960704
19600419
20150524
20190519
19811017
19871124
19700613
19150213
19220413
18910421
19301015
19680301
19270125
19220704
19530820
19080617
19200113
19500705
19101212
19460302
19431111
18990404
19180910
19260527
19540423
19680322
19460913
19701124
19561123
19710928
19280911
19061226
19840105
19770902
19670126
20010227
19960522
19741122
19941108
19460606
19610531
19291118
19610406
19631230
19470530
19270923
19990526
19340219
19510605
19541101
19470505
19120427
19591029
19380517
19100616
19550325
19311125
18981215
19851104
19720131
19860213
19340411
20070215
19720302
19680903
19140925
19370128
19450830
20170707
20211110
20120725
20140226
20160811
20170509
20180925
20181023
20220429
19811114
19990716
19861126
19891124
20220730
20220712
20221223
20230112
20230325
20230710
20230724
20000420
20080208
19620901
19901123
19990609
20000121
20000512
19990813
20011122
20120516
19810812
19750801
19790913
20021210
19470615
20101222
20061124
19860320
20020724
20230728
19830824
20011102
20020425
20210730
20230125
19590506
19731203
19510601
19421219
19390301
20010129
19070521
19311012
19380126
19290215
19730430
19040223
19080723
19710311
19760115
19640812
19710727
19751105
19570725
20020712
20000328
20030901
20030902
20031231
20140828
20160920
20090615
20100325
20071224
20120912
20130125
20110121
20200207
20210217
20031021
20090310
20200622
20091006
20170330
20180820
20211013
20210723
20200506
20041014
20171122
20180910
20240227
19930527
20100521
20090731
20140430
19861014
19920821
19911108
19911022
20000621
20050912
20061229
20030313
20131111
19980722
20050113
20141223
20061002
19871005
19740306
20010829
19730911
19830224
19731019
19961218
19990316
20190101
20000905
20001113
19670522
19991017
19980212
19920304
19640916
19620126
19860723
19960111
19990112
19780120
19900116
20001117
20000830
19960926
19300711
19121002
19160911
19830216
19820326
19890320
19940319
19920228
19730710
19750724
19931103
19980127
19871114
19701225
19831007
20090126
20050620
20070219
20150225
19840126
19860717
19961220
20161003
20110415
20140510
19580409
19600725
19100714
19590925
19640424
19670216
19
Query:
-- Find the assignee with the most applications in IPC 'A61'
WITH a61_patents AS (
  SELECT
    t."publication_number",
    assignee.value::STRING AS "assignee_name",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."assignee") assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND ipc.value:"code"::STRING LIKE 'A61%'
    AND assignee.value::STRING IS NOT NULL
),

assignee_counts AS (
  SELECT
    "assignee_name",
    COUNT(*) AS "total_applications"
  FROM a61_patents
  GROUP BY "assignee_name"
),

top_assignee AS (
  SELECT "assignee_name"
  FROM assignee_counts
  ORDER BY "total_applications" DESC
  LIMIT 1
),

assignee_year_counts AS (
  SELECT
    p."filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents p
  JOIN top_assignee t
    ON p."assignee_name" = t."assignee_name"
  GROUP BY p."filing_year"
)

SELECT
  "filing_year" AS "Year"
FROM assignee_year_counts
ORDER BY "applications_in_year" DESC
LIMIT 1;
Answer:
Year
2001
Query:
-- Adjusted SQL query with simplified conditions
WITH a61_patents AS (
  SELECT
    t."publication_number",
    assignee.value::STRING AS "assignee_name",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."assignee") assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND PARSE_JSON(ipc.value::STRING):"code"::STRING LIKE 'A61%'
    AND assignee.value::STRING IS NOT NULL
)

SELECT
  "filing_year" AS "Year"
FROM (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
);
Answer:
Year
2002
Query:
-- 6. Get counts of patents per assignee
SELECT assignee.value::STRING AS "assignee_name", COUNT(*) AS "patent_count"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."assignee") assignee
GROUP BY assignee.value::STRING
ORDER BY "patent_count" DESC
LIMIT 1000
Answer:
Too long, hard cut:
assignee_name,patent_count
株式会社東芝,1903
松下電器産業株式会社,1816
キヤノン株式会社,1790
株式会社日立製作所,1707
Hitachi Ltd,1694
三菱電機株式会社,1694
Matsushita Electric Ind Co Ltd,1642
日本電気株式会社,1567
Toshiba Corp,1563
Canon Inc,1362
富士通株式会社,1283
トヨタ自動車株式会社,1274
삼성전자주식회사,1269
Mitsubishi Electric Corp,1248
Nec Corp,1161
Fujitsu Ltd,1078
ソニー株式会社,1022
株式会社リコー,992
엘지전자 주식회사,878
Sony Corp,874
Toyota Motor Corp,865
International Business Machines Corporation,849
セイコーエプソン株式会社,839
シャープ株式会社,820
Ricoh Co Ltd,792
华为技术有限公司,762
"Samsung Electronics Co., Ltd.",753
Seiko Epson Corp,703
国家电网公司,700
三洋電機株式会社,659
本田技研工業株式会社,654
株式会社デンソー,647
日本電信電話株式会社,605
Sharp Corp,586
日産自動車株式会社,579
Siemens Ag,543
현대자동차주식회사,528
三菱重工業株式会社,519
珠海格力电器股份有限公司,500
Canon Kabushiki Kaisha,485
中兴通讯股份有限公司,485
Honda Motor Co Ltd,474
Sanyo Electric Co Ltd,468
中国石油化工股份有限公司,462
富士写真フイルム株式会社,460
삼성전자 주식회사,456
松下電工株式会社,455
Fuji Photo Film Co Ltd,443
Robert Bosch Gmbh,438
Qualcomm Incorporated,436
Nippon Telegr & Teleph Corp <Ntt>,423
富士ゼロックス株式会社,420
General Electric Company,419
浙江大学,403
Mitsubishi Heavy Ind Ltd,379
大日本印刷株式会社,378
京セラ株式会社,370
京东方科技集团股份有限公司,364
Denso Corp,362
Nissan Motor Co Ltd,361
Bayer Ag,359
Matsushita Electric Works Ltd,354
パナソニック株式会社,353
Gen Electric,352
株式会社クボタ,350
新日本製鐵株式会社,346
Sony Corporation,345
住友電気工業株式会社,339
Fuji Xerox Co Ltd,331
清华大学,330
Nippon Steel Corp,326
"Huawei Technologies Co., Ltd.",323
美的集团股份有限公司,314
Kabushiki Kaisha Toshiba,313
Siemens Aktiengesellschaft,311
三星电子株式会社,310
国家电网有限公司,304
윤종용,302
パナソニックＩｐマネジメント株式会社,301
富士フイルム株式会社,299
富士電機株式会社,292
Toyota Jidosha Kabushiki Kaisha,292
ブラザー工業株式会社,291
Lg Electronics Inc.,290
凸版印刷株式会社,289
積水化学工業株式会社,288
Intel Corporation,284
東レ株式会社,282
マツダ株式会社,281
花王株式会社,275
한국전자통신연구원,270
沖電気工業株式会社,258
Dainippon Printing Co Ltd,257
주식회사 엘지화학,257
华南理工大学,255
Hoechst Ag,253
カシオ計算機株式会社,253
株式会社ニコン,250
中国石油天然气股份有限公司,248
腾讯科技（深圳）有限公司,247
株式会社村田製作所,241
天津大学,238
주식회사 하이닉스반도체,235
Basf Ag,232
Apple Inc.,232
Sumitomo Electric Ind Ltd,231
Kyocera Corp,231
株式会社ブリヂストン,229
株式会社三共,229
Fujitsu Limited,228
株式会社神戸製鋼所,224
주식회사 포스코,224
Fuji Electric Co Ltd,222
オムロン株式会社,219
哈尔滨工业大学,218
吉林大学,217
コニカ株式会社,215
Oppo广东移动通信有限公司,215
东南大学,212
Telefonaktiebolaget Lm Ericsson (Publ),210
矢崎総業株式会社,209
オリンパス光学工業株式会社,209
Sekisui Chem Co Ltd,207
Du Pont,205
高通股份有限公司,204
Toppan Printing Co Ltd,202
Ibm,202
Nec Corporation,201
Philips Nv,201
ダイキン工業株式会社,200
Kobe Steel Ltd,200
"Microsoft Technology Licensing, Llc",199
엘지디스플레이 주식회사,196
Oki Electric Ind Co Ltd,196
海尔智家股份有限公司,196
株式会社島津製作所,194
Bosch Gmbh Robert,194
日本精工株式会社,194
삼성에스디아이 주식회사,194
Toray Ind Inc,191
"Ford Global Technologies, Llc",191
上海交通大学,190
Ｊｆｅスチール株式会社,189
オリンパス株式会社,189
三菱化学株式会社,189
Panasonic Corp,188
松下电器产业株式会社,187
川崎製鉄株式会社,187
"Honda Motor Co., Ltd.",185
Seiko Epson Corporation,184
株式会社三洋物産,184
"Hitachi, Ltd.",183
Brother Ind Ltd,183
鸿海精密工业股份有限公司,182
Kao Corp,181
北京航空航天大学,181
井関農機株式会社,179
石川島播磨重工業株式会社,176
住友化学株式会社,175
佳能株式会社,174
Denso Corporation,174
"Micron Technology, Inc.",173
电子科技大学,172
東芝テック株式会社,172
Microsoft Corporation,172
Mazda Motor Corp,172
华中科技大学,171
古河電気工業株式会社,171
江南大学,169
Olympus Optical Co Ltd,169
The Procter & Gamble Company,169
住友電装株式会社,168
대우전자 주식회사,168
Nikon Corp,167
三菱电机株式会社,166
三菱マテリアル株式会社,166
Hoffmann La Roche,164
索尼公司,164
三井化学株式会社,163
Basf Se,163
西安交通大学,163
スズキ株式会社,163
株式会社半導体エネルギー研究所,163
丰田自动车株式会社,163
日東電工株式会社,163
Fujifilm Corp,162
比亚迪股份有限公司,162
三星電子株式会社,161
大连理工大学,160
Mitsubishi Electric Corporation,160
西安电子科技大学,159
"Samsung Display Co., Ltd.",158
ヤマハ株式会社,158
住友金属工業株式会社,158
山东大学,157
アイシン精機株式会社,157
アルプス電気株式会社,157
Samsung Electronics Co Ltd,157
Konica Corp,156
罗伯特·博世有限公司,156
浙江工业大学,155
Novartis Ag,155
Rca Corp,155
삼성디스플레이 주식회사,154
Google Llc,153
Bridgestone Corp,153
日本鋼管株式会社,153
三菱自動車工業株式会社,152
Casio Comput Co Ltd,152
中南大学,152
구자홍,151
"Hewlett-Packard Development Company, L.P.",150
鸿富锦精密工业（深圳）有限公司,149
Sharp Kabushiki Kaisha,149
The Boeing Company,147
南京林业大学,146
Kubota Corp,145
广东美的制冷设备有限公司,145
김광호,144
3M Innovative Properties Company,144
Kawasaki Steel Corp,144
维沃移动通信有限公司,143
Texas Instruments Incorporated,143
엘지이노텍 주식회사,143
昆明理工大学,142
联想(北京)有限公司,141
江苏大学,141
Ciba Geigy Ag,141
"Boe Technology Group Co., Ltd.",140
北京小米移动软件有限公司,139
Westinghouse Electric Corp,139
パイオニア株式会社,138
Xerox Corporation,138
重庆大学,138
The Regents Of The University Of California,138
삼성전기주식회사,138
村田機械株式会社,137
Hyundai Motor Company,136
北京工业大学,136
精工爱普生株式会社,135
Yazaki Corp,134
Sumitomo Metal Ind Ltd,133
東京エレクトロン株式会社,133
Procter & Gamble,133
日立金属株式会社,132
武汉理工大学,132
"Matsushita Electric Industrial Co., Ltd.",132
Ishikawajima Harima Heavy Ind Co Ltd,131
信越化学工業株式会社,131
横浜ゴム株式会社,131
株式会社吉野工業所,131
南京航空航天大学,131
四川大学,131
广东电网有限责任公司,131
Tdk Corp,130
Ici Ltd,130
北京理工大学,130
コニカミノルタ株式会社,129
Sanyo Product Co Ltd,129
日本ビクター株式会社,129
山东科技大学,127
기아자동차주식회사,127
同济大学,126
현대자동차 주식회사,126
株式会社フジクラ,126
中国矿业大学,126
Furukawa Electric Co Ltd:The,126
Bayerische Motoren Werke Aktiengesellschaft,125
Eastman Kodak Co,124
"Halliburton Energy Services, Inc.",123
阿里巴巴集团控股有限公司,123
Koninklijke Philips N.V.,123
ミノルタ株式会社,123
Koninklijke Philips Electronics N.
Query:
-- Corrected SQL query

WITH a61_patents AS (
  SELECT
    t."publication_number",
    t."assignee",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year",
    ipc.value:"code"::STRING AS "ipc_code"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND ipc.value:"code"::STRING LIKE 'A61%'
)

SELECT
  "filing_year" AS "Year"
FROM (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
);
Answer:
Year
2020
Query:
-- Corrected SQL query with simplified conditions

SELECT DISTINCT YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
FROM PATENTS.PATENTS.PUBLICATIONS t,
     LATERAL FLATTEN(input => t."ipc") ipc
WHERE PARSE_JSON(ipc.value::STRING):"code"::STRING LIKE 'A61%'
  AND TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
LIMIT 1000;
Answer:
filing_year
1951
1958
1956
1933
1909
1985
1960
1944
1945
2017
1983
2004
1928
1984
1967
1940
1939
2001
1980
1968
1941
1935
2015
2022
1921
1963
1905
1986
1977
1969
1938
2020
1930
1926
1920
1998
1988
1934
1955
1949
1999
1982
1972
1966
1978
1989
2009
1995
1953
1971
2008
1993
1964
1937
1931
2010
1927
2012
1957
1923
2007
1961
2005
1976
1970
1946
2014
1974
1916
1992
1952
1947
1979
1943
1994
2011
1950
2013
1954
2018
2006
1973
2024
1924
1975
1942
2023
2003
1922
1990
1914
1936
2019
1962
2002
1948
1910
1913
1987
2000
1932
2016
1996
2021
1965
1959
1991
1929
1997
1981
Query:
-- Simplified SQL query to retrieve the required year

WITH ipc_codes AS (
    SELECT
        t."publication_number",
        t."assignee",
        t."filing_date",
        PARSE_JSON(ipc.value::STRING):"code"::STRING AS "ipc_code"
    FROM PATENTS.PATENTS.PUBLICATIONS t,
         LATERAL FLATTEN(input => t."ipc") ipc
    WHERE t."filing_date" IS NOT NULL
),
a61_patents AS (
    SELECT
        "publication_number",
        "assignee",
        TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') AS "filing_date",
        "ipc_code"
    FROM ipc_codes
    WHERE "ipc_code" LIKE 'A61%'
        AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
),
assignee_totals AS (
    SELECT
        f_assignee.value::STRING AS "assignee_name",
        COUNT(*) AS "total_applications"
    FROM a61_patents t,
         LATERAL FLATTEN(input => t."assignee") f_assignee
    GROUP BY "assignee_name"
    ORDER BY "total_applications" DESC
    LIMIT 1
),
assignee_years AS (
    SELECT
        YEAR("filing_date") AS "filing_year",
        COUNT(*) AS "applications_in_year"
    FROM a61_patents t,
         LATERAL FLATTEN(input => t."assignee") f_assignee
    WHERE f_assignee.value::STRING = (SELECT "assignee_name" FROM assignee_totals)
    GROUP BY "filing_year"
    ORDER BY "applications_in_year" DESC
    LIMIT 1
)
SELECT
    "filing_year" AS "Year"
FROM assignee_years;
Answer:
Year
2001
Query:
-- Simplified SQL query to retrieve the required year

WITH a61_patents AS (
  SELECT
    t."publication_number",
    f_assignee.value::STRING AS "assignee_name",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
  FROM PATENTS.PATENTS.PUBLICATIONS t,
       LATERAL FLATTEN(input => t."assignee") f_assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND PARSE_JSON(ipc.value::STRING):"code"::STRING LIKE 'A61%'
    AND f_assignee.value::STRING IS NOT NULL
),

top_assignee AS (
  SELECT
    "assignee_name",
    COUNT(*) AS "total_applications"
  FROM a61_patents
  GROUP BY "assignee_name"
  ORDER BY "total_applications" DESC
  LIMIT 1
),

assignee_years AS (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  WHERE "assignee_name" = (SELECT "assignee_name" FROM top_assignee)
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
)

SELECT
  "filing_year" AS "Year"
FROM assignee_years;
Answer:
Year
2001
End Exploring Related Columns
Task: In which year did the assignee with the most applications in the patent category 'A61' file the most?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: SELECT S."Column_Name" FROM {Database Name}.{Schema Name}.{Table_name} (ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
Year
year:int (Attention: answer in one row)
```

We cannot provide the specific year without the actual data. The table `PUBLICATIONS` contains the necessary columns such as `assignee`, `ipc`, and `filing_date` to perform this analysis..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'PATENTS': {'PATENTS': ['CPC_DEFINITION', 'DISCLOSURES_13', 'PUBLICATIONS']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book" SQL: WHERE "title" LIKE '%book%'
However, if the string is not decided, you may use ILIKE and %. e.g. Get articles that mention "education": SQL: "body" ILIKE '%education%' OR "title" ILIKE '%education%'
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.

2025-01-19 00:01:17 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 00:01:17 - root - INFO - ```sql
WITH a61_patents AS (
  SELECT
    t."publication_number",
    assignee.value::STRING AS "assignee_name",
    TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') AS "filing_date",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
  FROM "PATENTS"."PATENTS"."PUBLICATIONS" t,
       LATERAL FLATTEN(input => t."assignee") assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE PARSE_JSON(ipc.value::STRING):"code"::STRING LIKE 'A61%'
    AND TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND assignee.value::STRING IS NOT NULL
),

top_assignee AS (
  SELECT
    "assignee_name",
    COUNT(*) AS "total_applications"
  FROM a61_patents
  GROUP BY "assignee_name"
  ORDER BY "total_applications" DESC
  LIMIT 1
),

assignee_years AS (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  WHERE "assignee_name" = (SELECT "assignee_name" FROM top_assignee)
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
)

SELECT
  "filing_year" AS "Year"
FROM assignee_years;
```
2025-01-19 00:01:17 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 00:01:17 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 00:01:17 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 00:01:19 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 00:01:19 - snowflake.connector.connection - INFO - closed
2025-01-19 00:01:19 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 00:01:20 - root - INFO - itercount: 1
2025-01-19 00:01:20 - root - INFO - 0
2025-01-19 00:01:20 - root - INFO - results: 
Year
2001


2025-01-19 00:01:20 - root - INFO - Please check the answer again by reviewing In which year did the assignee with the most applications in the patent category 'A61' file the most?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
Year
year:int (Attention: answer in one row)
```

We cannot provide the specific year without the actual data. The table `PUBLICATIONS` contains the necessary columns such as `assignee`, `ipc`, and `filing_date` to perform this analysis. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Year
2001
Current sql:
WITH a61_patents AS (
  SELECT
    t."publication_number",
    assignee.value::STRING AS "assignee_name",
    TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') AS "filing_date",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
  FROM "PATENTS"."PATENTS"."PUBLICATIONS" t,
       LATERAL FLATTEN(input => t."assignee") assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE PARSE_JSON(ipc.value::STRING):"code"::STRING LIKE 'A61%'
    AND TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND assignee.value::STRING IS NOT NULL
),

top_assignee AS (
  SELECT
    "assignee_name",
    COUNT(*) AS "total_applications"
  FROM a61_patents
  GROUP BY "assignee_name"
  ORDER BY "total_applications" DESC
  LIMIT 1
),

assignee_years AS (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  WHERE "assignee_name" = (SELECT "assignee_name" FROM top_assignee)
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC
  LIMIT 1
)

SELECT
  "filing_year" AS "Year"
FROM assignee_years;When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.

2025-01-19 00:01:42 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 00:01:42 - root - INFO - ```sql
WITH a61_patents AS (
  SELECT
    t."publication_number",
    assignee.value::STRING AS "assignee_name",
    TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') AS "filing_date",
    YEAR(TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_year"
  FROM "PATENTS"."PATENTS"."PUBLICATIONS" t,
       LATERAL FLATTEN(input => t."assignee") assignee,
       LATERAL FLATTEN(input => t."ipc") ipc
  WHERE PARSE_JSON(ipc.value::STRING):"code"::STRING LIKE 'A61%'
    AND TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL
    AND assignee.value::STRING IS NOT NULL
),

top_assignee AS (
  SELECT
    "assignee_name",
    COUNT(*) AS "total_applications"
  FROM a61_patents
  GROUP BY "assignee_name"
  ORDER BY "total_applications" DESC NULLS LAST
  LIMIT 1
),

assignee_years AS (
  SELECT
    "filing_year",
    COUNT(*) AS "applications_in_year"
  FROM a61_patents
  WHERE "assignee_name" = (SELECT "assignee_name" FROM top_assignee)
  GROUP BY "filing_year"
  ORDER BY "applications_in_year" DESC NULLS LAST
  LIMIT 1
)

SELECT
  "filing_year" AS "Year"
FROM assignee_years;
```

```csv
Year
2001
```
2025-01-19 00:01:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 00:01:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 00:01:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 00:01:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 00:01:44 - snowflake.connector.connection - INFO - closed
2025-01-19 00:01:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 00:01:45 - root - INFO - itercount: 2
2025-01-19 00:01:45 - root - INFO - 0
2025-01-19 00:01:45 - root - INFO - Total iteration counts: 2
