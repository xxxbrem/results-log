2025-01-19 12:42:10 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 12:43:05 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 12:43:05 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:43:05 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:43:05 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:43:07 - snowflake.connector.cursor - INFO - Number of results in first chunk: 9
2025-01-19 12:43:07 - snowflake.connector.connection - INFO - closed
2025-01-19 12:43:07 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:43:07 - root - INFO - SQL:
-- 1. Get distinct season IDs from MATCH table
SELECT DISTINCT "season_id" FROM IPL.IPL."MATCH"
Results:
season_id
1
2
3
4
5
6
7
9
8

2025-01-19 12:43:07 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:43:07 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:43:07 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:43:09 - snowflake.connector.cursor - INFO - Number of results in first chunk: 74
2025-01-19 12:43:09 - snowflake.connector.connection - INFO - closed
2025-01-19 12:43:09 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:43:09 - root - INFO - SQL:
-- 2. Get match IDs for season 5
SELECT "match_id" FROM IPL.IPL."MATCH" WHERE "season_id" = 5 LIMIT 1000
Results:
match_id
548311
548312
548313
548314
548315
548316
548317
548318
548319
548320
548321
548322
548323
548324
548325
548326
548327
548328
548329
548330
548331
548332
548333
548334
548335
548336
548337
548338
548339
548340
548341
548342
548344
548346
548347
548348
548349
548350
548351
548352
548353
548354
548355
548356
548357
548358
548359
548360
548361
548362
548363
548364
548365
548366
548367
548368
548369
548370
548371
548372
548373
548374
548375
548376
548377
548378
548379
548380
548381
548382
548383
548384
548385
548386

2025-01-19 12:43:09 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:43:09 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:43:09 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:43:10 - snowflake.connector.cursor - INFO - Number of results in first chunk: 468
2025-01-19 12:43:10 - snowflake.connector.connection - INFO - closed
2025-01-19 12:43:11 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:43:11 - root - INFO - SQL:
-- 3. Get player IDs and names from PLAYER table
SELECT "player_id", "player_name" FROM IPL.IPL."PLAYER" LIMIT 1000
Results:
Too long, hard cut:
player_id,player_name
1,SC Ganguly
2,BB McCullum
3,RT Ponting
4,DJ Hussey
5,Mohammad Hafeez
6,R Dravid
7,W Jaffer
8,V Kohli
9,JH Kallis
10,CL White
11,MV Boucher
12,B Akhil
13,AA Noffke
14,P Kumar
15,Z Khan
16,SB Joshi
17,PA Patel
18,ML Hayden
19,MEK Hussey
20,MS Dhoni
21,SK Raina
22,JDP Oram
23,S Badrinath
24,K Goel
25,JR Hopes
26,KC Sangakkara
27,Yuvraj Singh
28,SM Katich
29,IK Pathan
30,T Kohli
31,YK Pathan
32,SR Watson
33,M Kaif
34,DS Lehmann
36,M Rawat
37,D Salunkhe
38,SK Warne
39,SK Trivedi
40,G Gambhir
41,V Sehwag
42,S Dhawan
43,L Ronchi
44,ST Jayasuriya
45,DJ Thornely
46,RV Uthappa
47,PR Shah
48,AM Nayar
49,SM Pollock
50,Harbhajan Singh
51,S Chanderpaul
52,LRPL Taylor
53,AC Gilchrist
54,Y Venugopal Rao
55,VVS Laxman
56,A Symonds
57,RG Sharma
58,SB Styris
59,SB Bangar
60,WPUJC Vaas
61,RP Singh
62,WP Saha
63,LR Shukla
64,DPMD Jayawardene
65,S Sohal
66,B Lee
67,PP Chawla
68,WA Mota
69,Kamran Akmal
70,Shahid Afridi
71,DJ Bravo
72,MA Khote
73,A Nehra
74,GC Smith
75,Pankaj Singh
76,RR Sarwan
77,S Sreesanth
78,VRV Singh
79,SS Tiwary
80,DS Kulkarni
81,R Vinay Kumar
82,AB Agarkar
83,M Kartik
84,I Sharma
85,AM Rahane
86,Shoaib Malik
87,MK Tiwary
88,KD Karthik
89,R Bhatia
90,MF Maharoof
91,VY Mahesh
92,TM Srivastava
93,B Chipli
94,DW Steyn
95,DB Das
96,MK Pandey
97,HH Gibbs
98,DNT Zoysa
99,D Kalyankrishna
100,SE Marsh
101,SA Asnodkar
102,Sohail Tanvir
103,Salman Butt
104,BJ Hodge
105,Umar Gul
106,AB Dinda
107,SP Fleming
108,S Vidyut
109,JA Morkel
110,AB de Villiers
111,LPC Silva
112,DB Ravi Teja
113,Misbah-ul-Haq
114,YV Takawale
115,RR Raje
116,PJ Sangwan
117,Mohammad Asif
118,GD McGrath
119,Joginder Sharma
120,MS Gony
121,M Muralitharan
122,M Ntini
123,DT Patil
124,A Kumble
125,S Anirudha
126,MM Patel
127,CK Kapugedera
128,A Chopra
129,T Taibu
130,J Arunkumar
131,PP Ojha
132,SP Goswami
133,SR Tendulkar
134,U Kaul
135,TM Dilshan
136,A Mishra
137,AD Mascarenhas
138,NK Patel
139,LA Pomersbach
140,Iqbal Abdulla
141,Younis Khan
142,PM Sarvesh Kumar
143,DP Vijaykumar
144,Shoaib Akhtar
145,Abdur Razzak
146,H Das
147,DR Smith
148,SD Chitnis
149,CRD Fernando
150,VS Yeligati
151,L Balaji
152,A Mukund
153,RR Powar
154,JP Duminy
155,A Flintoff
156,T Thushara
157,JD Ryder
158,KP Pietersen
159,T Henderson
160,Kamran Khan
161,RS Bopara
162,CH Gayle
163,MC Henriques
164,R Bishnoi
165,FH Edwards
166,KV Sharma
167,PC Valthaty
168,RJ Quiney
169,AS Raut
170,Yashpal Singh
171,M Manhas
172,AA Bilakhia
173,AN Ghosh
174,BAW Mendis
175,DL Vettori
176,MN van Wyk
177,RE van der Merwe
178,TL Suman
179,Shoaib Ahmed
180,GR Napier
181,KP Appanna
182,LA Carseldine
183,NV Ojha
184,SM Harwood
185,M Vijay
186,SB Jakati
187,DA Warner
188,RJ Harris
189,D du Preez
190,M Morkel
191,AD Mathews
192,J Botha
193,C Nanda
194,SL Malinga
195,Mashrafe Mortaza
196,A Singh
197,GJ Bailey
198,AB McDonald
199,Y Nagar
200,SS Shaikh
201,R Ashwin
202,Mohammad Ashraful
203,CA Pujara
204,OA Shah
205,Anirudh Singh
206,Jaskaran Singh
207,AP Tare
208,AT Rayudu
209,R Sathish
210,R McLaren
211,AA Jhunjhunwala
212,P Dogra
213,A Uniyal
214,MS Bisla
215,YA Abdulla
216,EJG Morgan
217,JM Kemp
218,S Tyagi
219,RS Gavaskar
220,SE Bond
221,KA Pollard
222,S Ladda
223,DP Nannes
224,MJ Lumb
225,DR Martyn
226,S Narwal
227,AB Barath
228,Bipul Sharma
229,FY Fazal
230,AC Voges
231,MD Mishra
232,UT Yadav
233,J Theron
234,SJ Srivastava
235,R Sharma
236,Mandeep Singh
237,KM Jadhav
238,SW Tait
239,KB Arun Karthik
240,KAJ Roach
241,PD Collingwood
242,CK Langeveldt
243,VS Malik
244,A Mithun
245,AP Dole
246,AN Ahmed
247,RS Sodhi
248,DE Bollinger
249,S Sriram
250,B Sumanth
251,C Madan
252,AG Paunikar
253,MR Marsh
254,AJ Finch
255,STR Binny
256,Harmeet Singh
257,IR Jaggi
258,DT Christian
259,RV Gomez
260,MA Agarwal
261,AUK Pathan
262,UBT Chand
263,DJ Jacobs
264,Sunny Singh
265,NJ Rimmington
266,AL Menaria
267,WD Parnell
268,JJ van der Wath
269,R Ninan
270,S Aravind
271,MS Wade
272,TD Paine
273,SB Wagh
274,AC Thomas
275,JEC Franklin
276,Shakib Al Hasan
277,DH Yagnik
278,S Randiv
279,BJ Haddin
280,NLTC Perera
281,NL McCullum
282,JE Taylor
283,J Syed Mohammad
284,RN ten Doeschate
285,TR Birt
286,AG Murtaza
287,Harpreet Singh
288,M Klinger
289,AC Blizzard
290,I Malhotra
291,L Ablish
292,CA Ingram
293,S Nadeem
294,P Parameswaran
295,CJ Ferguson
296,VR Aaron
297,AA Chavan
298,ND Doshi
299,B Kumar
300,Y Gnaneswara Rao
301,S Rana
302,BA Bhatt
303,F du Plessis
304,RE Levi
305,GJ Maxwell
306,SPD Smith
307,MN Samuels
308,SA Yadav
309,KK Cooper
310,JP Faulkner
311,HV Patel
312,DAJ Bracewell
313,DJ Harris
314,Ankit Sharma
315,SP Narine
316,GB Hogg
317,RR Bhatkal
318,CJ McKay
319,N Saini
320,DA Miller
321,Azhar Mahmood
322,P Negi
323,RJ Peterson
324,KMDN Kulasekara
325,A Ashish Reddy
326,V Pratap Singh
327,BB Samantray
328,MJ Clarke
329,Gurkeerat Singh
330,AP Majumdar
331,PA Reddy
332,K Upadhyay
333,P Awana
334,AD Russell
335,A Chandila
336,CA Lynn
337,Sunny Gupta
338,MC Juneja
339,KK Nair
340,GH Vihari
341,MDKJ Perera
342,R Shukla
343,B Laughlin
344,AS Rajpoot
345,M Vohra
346,JD Unadkat
347,Mohammed Shami
3

2025-01-19 12:43:11 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:43:11 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:43:11 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:43:12 - snowflake.connector.cursor - INFO - Number of results in first chunk: 434
2025-01-19 12:43:12 - snowflake.connector.connection - INFO - closed
2025-01-19 12:43:12 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:43:12 - root - INFO - SQL:
-- 4. Get distinct player IDs (strikers) from BALL_BY_BALL table
SELECT DISTINCT "striker" FROM IPL.IPL."BALL_BY_BALL" LIMIT 1000
Results:
striker
6
2
7
1
9
3
11
13
14
15
4
16
5
24
18
17
25
19
26
20
21
22
23
40
31
41
33
35
43
51
28
49
57
63
60
69
65
71
75
86
87
90
99
104
109
111
114
115
121
129
132
135
143
144
160
169
177
184
189
195
197
218
228
349
8
10
12
27
29
30
42
34
36
37
44
52
32
38
45
46
39
48
50
62
58
232
59
61
66
67
70
53
68
72
79
80
78
81
82
84
88
89
91
93
95
96
97
102
113
116
118
120
125
127
133
134
137
130
140
141
142
145
147
148
151
153
158
162
163
164
172
174
180
181
183
188
191
192
201
203
205
207
212
213
216
217
219
224
231
234
238
246
247
254
259
275
274
278
281
282
288
290
294
295
308
307
311
325
328
334
336
335
343
350
355
373
374
384
388
397
47
54
55
56
64
74
76
77
85
92
94
83
100
103
105
106
107
108
110
112
117
122
123
124
128
131
119
138
139
146
149
152
155
154
157
159
161
166
165
171
168
170
173
175
178
179
182
185
187
186
193
194
196
198
199
202
204
206
211
208
209
210
214
220
222
223
221
226
229
233
235
236
237
239
240
241
242
244
245
250
251
252
253
255
256
257
258
261
263
262
266
267
268
269
270
271
272
273
276
285
284
286
291
292
293
297
298
299
300
301
302
303
304
306
310
312
313
314
315
317
320
321
323
324
326
329
332
333
337
338
339
341
342
344
345
347
348
352
356
357
358
359
353
361
362
363
354
366
367
368
369
370
371
376
377
378
379
381
382
386
385
389
390
392
393
394
395
398
399
401
402
405
407
409
411
412
413
415
417
418
419
422
423
426
425
427
429
431
433
73
98
101
126
136
150
156
167
176
190
200
215
225
230
243
248
249
260
264
277
279
280
287
289
296
305
309
316
322
327
330
331
351
360
364
365
346
372
375
380
383
387
391
396
400
403
404
408
410
414
416
420
421
424
428
430
432
434
227
265
283
318
319
340
406

2025-01-19 12:43:12 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:43:12 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:43:12 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:43:14 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-19 12:43:14 - snowflake.connector.connection - INFO - closed
2025-01-19 12:43:14 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:43:14 - root - INFO - SQL:
-- 5. Get runs scored from BATSMAN_SCORED table
SELECT "runs_scored" FROM IPL.IPL."BATSMAN_SCORED" LIMIT 1000
Results:
runs_scored
1
0
0
0
1
0
1
0
0
0
0
0
0
4
0
4
0
6
1
4
0
0
0
0
0
0
0
0
1
4
0
1
0
0
1
2
6
1
0
0
4
0
0
0
1
0
6
4
1
1
1
4
0
0
6
1
0
0
0
1
0
0
0
0
0
0
1
0
1
0
0
1
0
1
0
1
1
2
1
1
0
0
4
0
1
1
0
1
1
1
2
1
0
1
0
0
0
0
0
0
0
1
1
2
1
2
0
1
1
1
0
1
0
0
6
0
1
4
1
1
0
4
0
0
0
6
1
0
4
0
0
0
1
6
0
2
0
1
1
0
0
1
1
0
6
4
0
1
2
1
0
4
0
1
1
1
0
0
1
1
0
1
0
1
0
2
6
4
1
0
6
0
4
1
0
1
1
6
0
0
1
0
2
0
1
0
1
2
1
6
2
2
0
1
0
1
4
1
6
0
6
4
1
4
6
6
2
0
2
6
0
4
0
0
1
0
0
1
4
0
0
4
4
1
4
0
4
1
2
0
4
0
1
0
0
1
4
4
0
0
1
4
0
1
1
1
0
0
0
0
0
1
1
1
1
0
2
4
6
0
0
0
0
4
1
4
1
0
4
0
4
4
1
6
6
0
1
1
0
0
0
0
6
4
1
0
1
1
1
2
1
1
0
1
1
0
4
1
4
0
1
1
1
6
4
0
1
1
4
4
4
1
1
0
1
6
1
1
1
2
1
1
6
1
0
0
1
0
4
1
1
6
1
1
0
2
1
0
1
6
1
4
1
6
1
4
6
1
4
6
0
1
0
2
1
0
0
6
1
1
0
0
4
1
1
1
1
1
1
0
1
1
1
1
6
6
0
0
0
4
1
1
0
2
4
1
1
4
1
6
6
6
2
0
0
0
4
0
1
1
1
1
2
1
0
1
1
6
1
4
4
1
1
1
2
0
1
4
1
1
2
2
0
6
0
4
0
4
1
1
1
1
1
1
1
6
2
2
1
6
1
6
1
4
0
1
6
6
1
2
0
0
0
0
0
0
0
0
0
4
0
4
6
1
4
0
4
0
4
1
0
4
0
4
0
0
0
0
4
0
0
0
1
0
0
0
0
1
1
0
0
4
4
1
1
0
4
4
0
0
0
0
1
1
6
4
4
0
0
1
1
0
0
1
0
1
0
0
1
4
0
1
0
0
1
1
1
2
0
0
0
0
1
1
1
0
1
1
4
1
0
0
0
4
1
2
0
0
0
0
1
0
4
1
0
0
1
1
1
0
0
1
1
4
1
1
1
1
1
0
1
0
1
0
1
0
4
1
1
0
1
1
1
6
1
4
1
1
2
0
1
1
0
0
0
0
1
4
1
1
1
1
0
1
1
1
1
4
1
1
0
1
1
0
1
1
1
0
0
6
0
1
0
4
1
2
1
4
1
1
0
0
4
0
4
0
4
2
1
0
1
0
1
1
0
0
0
0
1
0
0
1
4
4
0
1
4
0
1
1
2
0
0
0
4
1
0
0
0
1
4
4
0
4
1
0
0
0
0
0
0
0
0
0
0
1
0
0
4
4
0
1
1
1
0
4
1
0
0
0
1
1
0
1
0
1
2
1
0
1
4
4
1
4
4
0
0
4
0
0
6
0
1
1
4
0
0
0
0
1
1
1
0
0
1
1
0
0
1
4
4
0
1
0
0
1
0
2
1
1
1
1
1
1
1
1
2
2
0
6
1
6
1
4
0
1
1
4
0
1
0
1
1
4
0
1
0
0
0
1
0
0
1
1
1
1
4
0
1
1
0
0
0
1
0
1
2
4
1
1
0
1
4
6
6
1
0
0
1
4
0
4
0
0
1
1
1
1
0
1
0
0
0
1
0
0
0
0
0
2
1
1
1
1
1
1
0
4
2
1
1
1
1
1
1
4
1
1
0
1
1
4
1
4
1
6
0
1
4
1
1
1
0
1
4
0
2
6
6
1
1
1
4
1
6
4
1
6
1
1
1
4
0
1
1
0
0
2
6
0
1
1
0
4
0
1
0
1
1
0
1
1
0
4
2
0
0
1
0
0
0
0
5
0
0
1
0
0
0
1
2
0
0
4
0
1
0
0
0
0
0
1
0
4
0
1
1
0
0
0
0
0
1
0
1
0
0
0
1
1
0
0
0
0
0
1
1
0
0
0
1
6
1
0
0
6
0
4
0
0
1
0
1
1
0
0
0
1
0
4
0
0
0
1
1
0
0
0
1
0
0
1
0
0
0
0
0
0
0
0

2025-01-19 12:43:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:43:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:43:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:43:16 - snowflake.connector.cursor - INFO - Number of results in first chunk: 411
2025-01-19 12:43:16 - snowflake.connector.connection - INFO - closed
2025-01-19 12:43:16 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:43:16 - root - INFO - SQL:
-- 6. Get player IDs of dismissed players from WICKET_TAKEN table
SELECT DISTINCT "player_out" FROM IPL.IPL."WICKET_TAKEN" LIMIT 1000
Results:
player_out
154
46
8
96
208
18
21
53
57
20
109
188
125
54
221
63
26
258
112
135
55
260
14
93
64
231
235
255
210
281
272
56
257
254
183
171
67
104
169
40
263
216
284
187
253
132
211
292
228
303
320
313
310
295
3
349
355
299
95
177
395
99
238
178
131
23
133
79
9
252
94
259
74
167
157
31
41
6
266
19
278
279
81
42
185
106
100
48
262
35
110
65
203
268
269
214
275
32
209
4
25
288
29
83
201
199
87
192
289
190
236
148
38
239
298
1
62
50
194
15
304
71
120
317
204
158
318
191
307
325
323
147
328
89
334
331
336
338
362
351
354
36
163
357
350
373
197
339
379
311
384
383
374
389
386
393
402
388
410
409
415
417
431
428
72
86
97
113
172
186
233
224
420
153
234
115
37
264
66
2
88
17
273
280
237
162
10
27
244
287
52
293
85
136
198
139
33
249
47
261
248
306
305
314
137
276
297
212
121
321
326
267
61
73
341
347
345
329
356
315
358
166
283
363
348
207
372
376
114
378
380
39
353
308
370
342
301
390
346
394
397
401
400
403
405
371
140
398
414
418
419
408
369
366
421
427
430
432
426
416
391
411
433
385
11
16
30
5
60
44
70
76
77
92
108
118
119
107
127
129
58
103
128
144
123
124
102
91
68
138
164
168
176
151
189
179
175
202
219
241
84
161
423
24
51
69
117
130
22
126
173
229
28
75
274
343
387
213
80
217
242
141
392
196
359
152
271
422
159
246
174
250
122
13
302
425
438
434
182
218
200
222
404
181
282
34
337
286
367
361
45
285
12
309
316
256
319
330
232
333
327
82
226
364
360
322
396
377
49
101
116
78
90
105
160
155
170
180
205
230
206
245
413
59
156
251
220
223
225
243
240
365
296
165
381
412
146
150
193
352
424
300
340
407
375
7
111
227
98
277
43

2025-01-19 12:43:16 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:43:16 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:43:16 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:43:17 - snowflake.connector.cursor - INFO - Number of results in first chunk: 9
2025-01-19 12:43:17 - snowflake.connector.connection - INFO - closed
2025-01-19 12:43:18 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:43:18 - root - INFO - SQL:
-- 7. Get kinds of dismissal from WICKET_TAKEN table
SELECT DISTINCT "kind_out" FROM IPL.IPL."WICKET_TAKEN"
Results:
kind_out
caught
bowled
run out
lbw
retired hurt
stumped
caught and bowled
hit wicket
obstructing the field

2025-01-19 12:43:18 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:43:18 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:43:18 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:43:19 - snowflake.connector.cursor - INFO - Number of results in first chunk: 74
2025-01-19 12:43:19 - snowflake.connector.connection - INFO - closed
2025-01-19 12:43:19 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:43:19 - root - INFO - SQL:
-- 8. Get match IDs from BALL_BY_BALL table in season 5
SELECT DISTINCT b."match_id"
FROM IPL.IPL."BALL_BY_BALL" b
JOIN IPL.IPL."MATCH" m ON b."match_id" = m."match_id"
WHERE m."season_id" = 5 LIMIT 1000
Results:
match_id
548370
548323
548312
548374
548352
548378
548349
548344
548365
548367
548363
548348
548330
548384
548362
548357
548359
548347
548379
548331
548350
548322
548341
548375
548318
548333
548337
548325
548338
548334
548372
548373
548380
548351
548327
548324
548317
548321
548328
548360
548382
548386
548326
548381
548366
548311
548342
548346
548335
548316
548319
548361
548353
548385
548377
548355
548332
548329
548313
548315
548339
548354
548340
548376
548356
548371
548314
548364
548358
548336
548368
548383
548369
548320

2025-01-19 12:43:19 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:43:19 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:43:19 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:43:21 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-19 12:43:21 - snowflake.connector.connection - INFO - closed
2025-01-19 12:43:21 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:43:21 - root - INFO - SQL:
-- 9. Get over and ball numbers from BALL_BY_BALL table
SELECT "over_id", "ball_id" FROM IPL.IPL."BALL_BY_BALL" LIMIT 1000
Results:
over_id,ball_id
1,1
1,2
1,2
1,3
1,3
1,4
1,4
1,5
1,5
1,6
1,6
1,7
1,7
2,1
2,1
2,2
2,2
2,3
2,3
2,4
2,4
2,5
2,5
2,6
2,6
3,1
3,1
3,2
3,2
3,3
3,3
3,4
3,4
3,5
3,5
3,6
3,6
3,7
4,1
4,1
4,2
4,2
4,3
4,3
4,4
4,4
4,5
4,5
4,6
4,6
4,7
5,1
5,1
5,2
5,2
5,3
5,3
5,4
5,4
5,5
5,5
5,6
5,6
6,1
6,1
6,2
6,2
6,3
6,3
6,4
6,4
6,5
6,5
6,6
6,6
7,1
7,1
7,2
7,2
7,3
7,3
7,4
7,4
7,5
7,5
7,6
7,6
7,7
7,8
8,1
8,1
8,2
8,2
8,3
8,3
8,4
8,4
8,5
8,5
8,6
8,6
9,1
9,1
9,2
9,2
9,3
9,3
9,4
9,4
9,5
9,5
9,6
9,6
9,7
9,8
10,1
10,1
10,2
10,2
10,3
10,3
10,4
10,4
10,5
10,5
10,6
10,6
10,7
11,1
11,1
11,2
11,2
11,3
11,3
11,4
11,4
11,5
11,5
11,6
11,6
12,1
12,1
12,2
12,2
12,3
12,3
12,4
12,4
12,5
12,5
12,6
12,6
13,1
13,1
13,2
13,2
13,3
13,3
13,4
13,4
13,5
13,5
13,6
13,6
13,7
13,7
14,1
14,1
14,2
14,2
14,3
14,3
14,4
14,4
14,5
14,5
14,6
14,6
15,1
15,1
15,2
15,2
15,3
15,3
15,4
15,4
15,5
15,5
15,6
15,6
15,7
15,7
16,1
16,1
16,2
16,2
16,3
16,4
16,5
16,6
17,1
17,2
17,3
17,4
17,5
17,6
18,1
18,2
18,3
18,4
18,5
18,6
19,1
19,2
19,3
19,4
19,5
19,6
20,1
20,2
20,3
20,4
20,5
20,6
1,1
1,1
1,2
1,2
1,3
1,3
1,4
1,4
1,5
1,5
1,6
1,6
2,1
2,1
2,2
2,2
2,3
2,3
2,4
2,4
2,5
2,5
2,6
2,6
2,7
3,1
3,1
3,2
3,2
3,3
3,3
3,4
3,4
3,5
3,5
3,6
3,6
3,7
4,1
4,1
4,2
4,2
4,3
4,3
4,4
4,4
4,5
4,5
4,6
4,6
5,1
5,1
5,2
5,2
5,3
5,3
5,4
5,4
5,5
5,5
5,6
5,6
6,1
6,1
6,2
6,2
6,3
6,3
6,4
6,4
6,5
6,5
6,6
6,6
6,7
6,8
7,1
7,1
7,2
7,2
7,3
7,3
7,4
7,4
7,5
7,5
7,6
7,6
8,1
8,1
8,2
8,2
8,3
8,3
8,4
8,4
8,5
8,5
8,6
8,6
9,1
9,1
9,2
9,2
9,3
9,3
9,4
9,4
9,5
9,5
9,6
9,6
9,7
10,1
10,1
10,2
10,2
10,3
10,3
10,4
10,4
10,5
10,5
10,6
10,6
11,1
11,1
11,2
11,2
11,3
11,3
11,4
11,4
11,5
11,5
11,6
11,6
12,1
12,1
12,2
12,2
12,3
12,3
12,4
12,4
12,5
12,5
12,6
12,6
13,1
13,1
13,2
13,2
13,3
13,3
13,4
13,4
13,5
13,5
13,6
13,6
13,7
13,8
14,1
14,1
14,2
14,2
14,3
14,3
14,4
14,4
14,5
14,5
14,6
14,6
14,7
15,1
15,1
15,2
15,2
15,3
15,3
15,4
15,4
15,5
15,5
15,6
15,6
16,1
16,1
16,2
16,2
16,3
16,3
16,4
16,4
16,5
16,5
16,6
16,6
17,1
17,1
17,2
17,2
17,3
17,3
17,4
17,4
17,5
17,5
17,6
17,6
18,1
18,1
18,2
18,2
18,3
18,3
18,4
18,4
18,5
18,5
18,6
18,6
19,1
19,1
19,2
19,2
19,3
19,3
19,4
19,4
19,5
19,5
19,6
19,6
20,1
20,1
20,2
20,2
20,3
20,3
20,4
20,4
20,5
20,5
20,6
20,6
1,1
1,1
1,2
1,2
1,3
1,3
1,4
1,4
1,5
1,5
1,6
1,6
1,7
2,1
2,1
2,2
2,2
2,3
2,3
2,4
2,4
2,5
2,5
2,6
2,6
2,7
3,1
3,1
3,2
3,2
3,3
3,3
3,4
3,4
3,5
3,5
3,6
3,6
4,1
4,1
4,2
4,2
4,3
4,3
4,4
4,4
4,5
4,5
4,6
4,6
5,1
5,1
5,2
5,2
5,3
5,3
5,4
5,4
5,5
5,5
5,6
5,6
6,1
6,1
6,2
6,2
6,3
6,3
6,4
6,4
6,5
6,5
6,6
6,6
6,7
7,1
7,1
7,2
7,2
7,3
7,3
7,4
7,4
7,5
7,5
7,6
7,6
8,1
8,1
8,2
8,2
8,3
8,3
8,4
8,4
8,5
8,5
8,6
8,6
8,7
9,1
9,1
9,2
9,2
9,3
9,3
9,4
9,4
9,5
9,5
9,6
9,6
10,1
10,1
10,2
10,2
10,3
10,3
10,4
10,4
10,5
10,5
10,6
10,6
10,7
11,1
11,1
11,2
11,2
11,3
11,3
11,4
11,4
11,5
11,5
11,6
11,6
12,1
12,1
12,2
12,2
12,3
12,3
12,4
12,4
12,5
12,5
12,6
12,6
13,1
13,1
13,2
13,2
13,3
13,3
13,4
13,4
13,5
13,5
13,6
13,6
13,7
13,7
14,1
14,1
14,2
14,2
14,3
14,3
14,4
14,4
14,5
14,5
14,6
14,6
15,1
15,1
15,2
15,2
15,3
15,3
15,4
15,4
15,5
15,5
15,6
15,6
15,7
16,1
16,1
16,2
16,3
16,4
16,5
16,6
17,1
17,2
17,3
17,4
17,5
17,6
18,1
18,2
18,3
18,4
18,5
18,6
19,1
19,2
19,3
19,4
19,5
19,6
20,1
20,2
20,3
20,4
20,5
20,6
1,1
1,1
1,2
1,2
1,3
1,3
1,4
1,4
1,5
1,5
1,6
1,6
2,1
2,1
2,2
2,2
2,3
2,3
2,4
2,4
2,5
2,5
2,6
2,6
3,1
3,1
3,2
3,2
3,3
3,3
3,4
3,4
3,5
3,5
3,6
3,6
3,7
4,1
4,1
4,2
4,2
4,3
4,3
4,4
4,4
4,5
4,5
4,6
4,6
5,1
5,1
5,2
5,2
5,3
5,3
5,4
5,4
5,5
5,5
5,6
5,6
5,7
5,7
6,1
6,1
6,2
6,2
6,3
6,3
6,4
6,4
6,5
6,5
6,6
6,6
7,1
7,1
7,2
7,2
7,3
7,3
7,4
7,4
7,5
7,5
7,6
7,6
8,1
8,1
8,2
8,2
8,3
8,3
8,4
8,4
8,5
8,5
8,6
8,6
9,1
9,1
9,2
9,2
9,3
9,3
9,4
9,4
9,5
9,5
9,6
9,6
9,7
10,1
10,1
10,2
10,2
10,3
10,3
10,4
10,4
10,5
10,5
10,6
10,6
11,1
11,1
11,2
11,2
11,3
11,3
11,4
11,4
11,5
11,5
11,6
11,6
12,1
12,1
12,2
12,2
12,3
12,3
12,4
12,4
12,5
12,5
12,6
12,6
13,1
13,1
13,2
13,2
13,3
13,3
13,4
13,4
13,5
13,5
13,6
13,6
14,1
14,1
14,2
14,2
14,3
14,3
14,4
14,4
14,5
14,5
14,6
14,6
14,7
14,8
15,1
15,1
15,2
15,2
15,3
15,3
15,4
15,4
15,5
15,5
15,6
15,6
16,1
16,1
16,2
16,2
16,3
16,3
16,4
16,4
16,5
16,5
16,6
16,6
16,7
17,1
17,1
17,2
17,2
17,3
17,3
17,4
17,4
17,5
17,5
17,6
17,6
18,1
18,1
18,2
18,2
18,3
18,3
18,4
18,4
18,5
18,5
18,6
18,6
19,1
19,1
19,2
19,2
19,3
19,3
19,4
19,4
19,5
19,5
19,6
19,6
20,1
20,1
20,2
20,2
20,3
20,3
20,4
20,4
20,5
20,5
20,6
1,1
1,1
1,2
1,2
1,3
1,3
1,4
1,4
1,5
1,5
1,6
1,6
1,7
2,1
2,1
2,2
2,2
2,3
2,3
2,4
2,4
2,5
2,5
2,6
2,6
2,7
2,8
3,1
3,1
3,2
3,2
3,3
3,3
3,4
3,4
3,5
3,5
3,6
3,6
4,1
4,1
4,2
4,2
4,3
4,3
4,4
4,4
4,5
4,5
4,6
4,6
5,1
5,1
5,2
5,2
5,3
5,3
5,4
5,4
5,5
5,5
5,6
5,6

2025-01-19 12:43:21 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:43:21 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:43:21 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:43:22 - snowflake.connector.cursor - INFO - Number of results in first chunk: 170
2025-01-19 12:43:22 - snowflake.connector.connection - INFO - closed
2025-01-19 12:43:23 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:43:23 - root - INFO - SQL:
-- 10. Get player IDs of strikers in season 5
SELECT DISTINCT b."striker"
FROM IPL.IPL."BALL_BY_BALL" b
JOIN IPL.IPL."MATCH" m ON b."match_id" = m."match_id"
WHERE m."season_id" = 5 LIMIT 1000
Results:
striker
303
304
133
57
208
275
23
35
2
254
31
29
307
131
309
312
162
297
317
33
270
121
187
255
289
19
233
21
260
89
126
236
17
235
196
120
154
277
274
62
324
147
125
332
335
190
228
14
201
306
194
183
294
305
1
67
95
85
110
79
314
315
198
311
284
73
135
325
330
296
334
313
10
157
64
211
263
61
293
171
26
320
326
331
231
318
185
71
109
20
186
248
41
40
87
66
140
96
267
46
299
48
266
204
42
94
50
100
178
283
63
295
83
104
203
6
276
308
221
256
81
106
212
319
188
148
262
232
287
337
199
158
93
191
323
286
9
167
132
8
322
53
258
214
39
88
15
54
137
192
316
302
257
327
329
4
175
52
280
328
32
261
333
336
80
136
321
112
310
97

2025-01-19 12:43:23 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:43:23 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:43:23 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:43:24 - snowflake.connector.cursor - INFO - Number of results in first chunk: 568
2025-01-19 12:43:24 - snowflake.connector.connection - INFO - closed
2025-01-19 12:43:24 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:43:25 - root - INFO - SQL:
-- 11. Get total runs scored per match from BATSMAN_SCORED table
SELECT "match_id", SUM("runs_scored") AS "total_runs"
FROM IPL.IPL."BATSMAN_SCORED"
GROUP BY "match_id" LIMIT 1000
Results:
Too long, hard cut:
match_id,total_runs
335987,268
335988,430
335989,240
335990,315
335991,184
335992,318
335993,268
335994,379
335995,418
335997,264
335999,289
336000,300
336001,332
336002,247
336003,356
336007,320
336010,191
336011,226
336013,188
336014,352
336015,242
336016,264
336017,224
336020,287
336026,117
336031,291
336032,285
336034,222
336041,262
392188,149
392189,198
392196,320
392199,284
392217,259
392220,215
392230,263
419118,262
419129,319
419132,303
419133,325
501214,296
335996,284
336006,328
336033,342
336043,268
392204,264
392205,207
392210,269
392219,347
392227,217
392233,312
419130,333
419148,292
501225,323
501239,221
501275,309
548349,323
548359,293
734040,303
829756,279
419150,347
501212,277
501242,278
548358,264
336008,326
336024,392
336028,297
336038,396
336039,298
336044,220
392193,328
392194,353
392213,285
392222,264
392238,193
392244,262
419121,355
419153,300
419155,291
501217,312
501236,180
548355,311
548362,277
335998,273
336004,321
336009,281
336018,326
336019,358
336023,286
336029,303
336036,340
336037,343
336045,306
392186,299
392187,178
392190,248
392191,221
392197,297
392201,317
392207,277
392209,263
392211,296
392212,290
392214,261
392216,299
392226,331
392228,314
392241,313
392243,284
419111,284
419113,268
419122,321
419137,289
419142,448
419144,386
419145,321
419151,304
419152,261
419161,331
419168,222
501206,179
501219,150
501227,328
501235,264
501237,325
501240,271
501250,165
501251,309
501258,316
501267,220
501276,337
548314,326
548327,300
548351,186
548357,298
548361,354
548372,319
548377,398
598008,193
598049,152
598050,335
733976,252
829794,309
980962,306
336030,187
392203,276
392215,321
392223,277
392231,216
392234,255
392239,195
392242,291
419134,328
419139,293
419146,294
419154,199
501209,282
501243,256
501255,269
501259,328
501264,262
501265,317
548319,271
548336,313
548339,314
548347,364
548364,296
548367,298
548369,221
548373,310
548386,367
598025,239
598031,354
598043,281
598070,228
729306,353
733982,298
734000,301
734024,309
829718,342
829728,304
829762,184
829792,373
829810,319
980924,292
980926,360
980970,309
548338,344
419124,290
501224,239
548317,296
336012,277
392200,228
392202,269
392224,227
392236,352
392240,298
419112,399
419120,171
419123,289
419125,326
419131,277
419136,299
419138,308
419147,274
419158,247
419166,246
419167,310
501208,298
501211,375
501215,338
501216,332
501226,296
501234,189
501256,223
501274,285
548313,211
548325,246
548337,277
548350,291
548365,271
548375,230
548376,234
598004,286
598006,305
598021,292
598024,249
598045,264
598056,355
829720,355
829774,345
829828,350
980940,279
980980,311
980982,340
336005,321
336021,263
336025,365
336027,198
336042,268
392206,275
392221,321
392225,273
392229,249
392235,268
392237,263
419114,260
419115,330
419116,269
419119,310
419141,344
419143,279
419156,267
419159,253
419160,204
419164,372
419165,271
501203,293
501204,269
501205,299
501207,211
501210,265
501220,260
501221,302
501230,205
501232,290
501233,273
501238,252
501241,297
501246,274
501247,286
501248,334
501249,314
501252,238
501254,316
501260,181
501261,235
501262,286
501266,280
501269,294
501272,331
548311,209
548315,284
548321,214
548326,309
548328,250
548330,165
548332,354
548335,298
548341,303
548342,282
548352,260
548353,342
548354,271
548363,241
548370,288
548371,367
548378,238
548381,236
548382,293
548383,288
548385,341
598010,249
598011,354
598012,266
598014,280
598017,315
598018,292
598026,237
598032,381
598034,311
598036,282
598037,277
598038,310
598039,363
598042,323
598044,249
598054,291
598058,243
598062,223
598063,276
598065,348
598068,295
598069,363
598071,300
598072,285
598073,181
598074,239
598077,310
598078,259
729284,272
729286,277
729288,391
729294,308
729302,258
729308,275
729316,271
733990,301
733994,214
733996,343
734004,367
734022,317
734030,297
734036,316
734042,295
734048,286
829714,268
829722,322
829740,306
829744,273
829748,270
829758,267
829772,221
829790,294
829798,312
829806,232
829812,210
829820,213
829822,332
829824,274
980906,229
980908,174
980914,355
980920,275
980922,269
980932,325
980934,257
980946,343
980950,337
980952,346
980958,365
980964,351
980972,244
980994,153
980996,347
981010,333
981012,331
981014,305
981022,318
336022,224
392208,266
419135,282
419170,291
501218,359
501228,412
501229,290
501244,304
501245,285
501257,278
501271,237
501273,330
548312,185
548323,391
548334,362
548340,241
548360,335
598003,246
598007,271
598020,284
598028,224
598033,313
598040,293
598041,329
598051,205
598052,346
598059,346
598064,228
729300,297
729310,134
729318,229
729322,302
733984,313
733986,337
733988,320
734002,290
734008,277
734014,271
734034,361
734052,401
734054,385
829732,245
829738,299
829754,255
829764,272
829766,310
829770,249
829778,350
829788,292
829826,265
980910,310
980912,391
980918,210
980928,274
980960,277
980976,336
980984,262
980986,287
980990,232
980992,332
981016,261
548346,316
548379,269
598005,225
598013,296
598060,220
734020,277
829784,265
980978,258
501231,248
419140,317
548368,328
980938,303
336040,3

2025-01-19 12:43:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:43:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:43:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:43:26 - snowflake.connector.cursor - INFO - Number of results in first chunk: 411
2025-01-19 12:43:26 - snowflake.connector.connection - INFO - closed
2025-01-19 12:43:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:43:26 - root - INFO - SQL:
-- 12. Get number of dismissals per player in WICKET_TAKEN table
SELECT "player_out", COUNT(*) AS "dismissals"
FROM IPL.IPL."WICKET_TAKEN"
GROUP BY "player_out" LIMIT 1000
Results:
player_out,dismissals
154,50
46,114
8,105
96,69
208,84
18,29
21,121
53,76
57,115
20,83
109,40
188,12
125,8
54,44
221,68
63,26
26,63
258,18
112,19
135,42
55,19
260,42
14,37
93,15
64,61
231,16
235,14
255,32
210,8
281,1
272,2
56,27
257,4
254,47
183,69
171,23
67,40
104,41
169,9
40,118
263,7
216,36
284,14
187,86
253,12
132,15
211,13
292,2
228,7
303,42
320,40
313,4
310,20
295,6
3,9
349,5
355,24
299,18
95,14
177,11
395,3
99,1
238,3
178,32
131,12
23,46
133,69
79,44
9,84
252,5
94,22
259,5
74,25
167,21
157,28
31,89
41,97
6,77
266,21
19,51
278,1
279,1
81,26
42,96
185,93
106,9
100,53
48,38
262,20
35,67
110,81
65,20
203,19
268,2
269,1
214,36
275,11
32,76
209,17
4,49
25,16
288,4
29,51
83,7
201,21
199,14
87,46
192,20
289,7
190,11
236,44
148,7
38,20
239,3
298,1
1,52
62,50
50,49
194,16
15,13
304,6
71,55
120,9
317,1
204,15
158,28
318,1
191,28
307,9
325,14
323,3
147,73
328,6
89,29
334,22
331,9
336,4
338,6
362,15
351,41
354,23
36,5
163,27
357,13
350,7
373,3
197,27
339,30
379,3
311,8
384,2
383,20
374,22
389,1
386,4
393,18
402,6
388,2
410,5
409,4
415,3
417,2
431,3
428,2
72,2
86,4
97,32
113,7
172,5
186,1
233,1
224,12
420,8
153,3
234,1
115,1
37,2
264,4
66,10
2,86
88,106
17,88
273,2
280,21
237,25
162,75
10,35
27,90
244,5
287,2
52,40
293,9
85,74
136,27
198,4
139,11
33,17
249,2
47,8
261,5
248,1
306,33
305,38
314,6
137,8
276,23
297,2
212,11
121,6
321,19
326,1
267,9
61,15
73,7
341,2
347,3
345,30
329,21
356,7
315,7
358,5
166,15
283,1
363,3
348,3
207,21
372,12
376,3
114,8
378,7
380,5
39,7
353,5
308,21
370,2
342,1
301,4
390,1
346,1
394,22
397,2
401,3
400,12
403,4
405,1
371,5
140,2
398,1
414,3
418,1
419,2
408,6
369,5
366,2
421,4
427,6
430,1
432,1
426,6
416,1
391,5
411,3
433,2
385,3
11,14
16,2
30,3
5,7
60,8
44,28
70,8
76,4
77,4
92,1
108,8
118,1
119,4
107,9
127,3
129,3
58,7
103,7
128,6
144,1
123,2
124,3
102,3
91,2
68,6
138,4
164,3
168,6
176,3
151,8
189,1
179,2
175,8
202,1
219,1
241,5
84,3
161,17
423,1
24,15
51,3
69,5
117,2
130,3
22,8
126,5
173,2
229,10
28,10
75,2
274,2
343,1
387,1
213,1
80,7
217,2
242,2
141,1
392,1
196,4
359,1
152,2
271,2
422,1
159,2
246,1
174,2
250,1
122,1
13,1
302,1
425,2
438,1
434,1
182,4
218,1
200,1
222,1
404,1
181,1
282,1
34,2
337,1
286,1
367,1
361,1
45,3
285,5
12,6
309,9
316,3
256,4
319,10
330,4
232,12
333,2
327,5
82,10
226,3
364,8
360,10
322,12
396,7
377,5
49,8
101,20
116,4
78,2
90,10
105,3
160,1
155,2
170,3
180,1
205,4
230,4
206,1
245,2
413,6
59,6
156,2
251,1
220,1
223,1
225,1
243,1
240,1
365,1
296,3
165,1
381,1
412,1
146,1
150,1
193,1
352,1
424,1
300,1
340,18
407,11
375,1
7,8
111,2
227,2
98,1
277,10
43,5

2025-01-19 12:43:26 - root - INFO - itercount: 0
2025-01-19 12:43:26 - root - INFO - Database Name: IPL
Schema Name: IPL
DDL describes table information.
,0
table_name,PLAYER_MATCH
description,
DDL,"create or replace TABLE PLAYER_MATCH (
	""match_id"" NUMBER(38,0),
	""player_id"" NUMBER(38,0),
	""role"" VARCHAR(16777216),
	""team_id"" NUMBER(38,0)
);"

,1
table_name,PLAYER
description,
DDL,"create or replace TABLE PLAYER (
	""player_id"" NUMBER(38,0),
	""player_name"" VARCHAR(16777216),
	""dob"" VARCHAR(16777216),
	""batting_hand"" VARCHAR(16777216),
	""bowling_skill"" VARCHAR(16777216),
	""country_name"" VARCHAR(16777216)
);"

,2
table_name,BATSMAN_SCORED
description,
DDL,"create or replace TABLE BATSMAN_SCORED (
	""match_id"" NUMBER(38,0),
	""over_id"" NUMBER(38,0),
	""ball_id"" NUMBER(38,0),
	""runs_scored"" NUMBER(38,0),
	""innings_no"" NUMBER(38,0)
);"

,3
table_name,WICKET_TAKEN
description,
DDL,"create or replace TABLE WICKET_TAKEN (
	""match_id"" NUMBER(38,0),
	""over_id"" NUMBER(38,0),
	""ball_id"" NUMBER(38,0),
	""player_out"" NUMBER(38,0),
	""kind_out"" VARCHAR(16777216),
	""innings_no"" NUMBER(38,0)
);"

,4
table_name,BALL_BY_BALL
description,
DDL,"create or replace TABLE BALL_BY_BALL (
	""match_id"" NUMBER(38,0),
	""over_id"" NUMBER(38,0),
	""ball_id"" NUMBER(38,0),
	""innings_no"" NUMBER(38,0),
	""team_batting"" NUMBER(38,0),
	""team_bowling"" NUMBER(38,0),
	""striker_batting_position"" NUMBER(38,0),
	""striker"" NUMBER(38,0),
	""non_striker"" NUMBER(38,0),
	""bowler"" NUMBER(38,0)
);"

,5
table_name,EXTRA_RUNS
description,
DDL,"create or replace TABLE EXTRA_RUNS (
	""match_id"" NUMBER(38,0),
	""over_id"" NUMBER(38,0),
	""ball_id"" NUMBER(38,0),
	""extra_type"" VARCHAR(16777216),
	""extra_runs"" NUMBER(38,0),
	""innings_no"" NUMBER(38,0)
);"

,6
table_name,MATCH
description,
DDL,"create or replace TABLE MATCH (
	""match_id"" NUMBER(38,0),
	""team_1"" NUMBER(38,0),
	""team_2"" NUMBER(38,0),
	""match_date"" VARCHAR(16777216),
	""season_id"" NUMBER(38,0),
	""venue"" VARCHAR(16777216),
	""toss_winner"" NUMBER(38,0),
	""toss_decision"" VARCHAR(16777216),
	""win_type"" VARCHAR(16777216),
	""win_margin"" NUMBER(38,0),
	""outcome_type"" VARCHAR(16777216),
	""match_winner"" NUMBER(38,0),
	""man_of_the_match"" NUMBER(38,0)
);"

,7
table_name,TEAM
description,
DDL,"create or replace TABLE TEAM (
	""team_id"" NUMBER(38,0),
	""name"" VARCHAR(16777216)
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'IPL': {'IPL': ['BALL_BY_BALL', 'BATSMAN_SCORED', 'EXTRA_RUNS', 'MATCH', 'PLAYER', 'PLAYER_MATCH', 'TEAM', 'WICKET_TAKEN']}}
Begin Exploring Related Columns
**Relevant tables and columns:**

- `"MATCH"."match_id"`: To identify matches.
- `"MATCH"."season_id"`: To filter matches in season 5.
- `"BATSMAN_SCORED"."match_id"`: To link runs scored to matches.
- `"BATSMAN_SCORED"."runs_scored"`: To get runs scored per delivery.
- `"BALL_BY_BALL"."match_id"`: To link deliveries to matches.
- `"BALL_BY_BALL"."over_id"`: To join with BATSMAN_SCORED.
- `"BALL_BY_BALL"."ball_id"`: To join with BATSMAN_SCORED.
- `"BALL_BY_BALL"."innings_no"`: To join with BATSMAN_SCORED.
- `"BALL_BY_BALL"."striker"`: To identify batsmen.
- `"WICKET_TAKEN"."match_id"`: To link wickets to matches.
- `"WICKET_TAKEN"."player_out"`: To identify dismissals.
- `"PLAYER"."player_id"`: To get player information.
- `"PLAYER"."player_name"`: To get player names.

**Conditions that may be used:**

- `"MATCH"."season_id" = 5`: To focus on season 5.
- Joins on `"match_id"`, `"over_id"`, `"ball_id"`, and `"innings_no"` between tables.
- Filters on specific `"player_id"`s or `"match_id"`s as needed.

**SQL queries:**

```sql
-- 1. Get distinct season IDs from MATCH table
SELECT DISTINCT "season_id" FROM IPL.IPL."MATCH";

-- 2. Get match IDs for season 5
SELECT "match_id" FROM IPL.IPL."MATCH" WHERE "season_id" = 5 LIMIT 1000;

-- 3. Get player IDs and names from PLAYER table
SELECT "player_id", "player_name" FROM IPL.IPL."PLAYER" LIMIT 1000;

-- 4. Get distinct player IDs (strikers) from BALL_BY_BALL table
SELECT DISTINCT "striker" FROM IPL.IPL."BALL_BY_BALL" LIMIT 1000;

-- 5. Get runs scored from BATSMAN_SCORED table
SELECT "runs_scored" FROM IPL.IPL."BATSMAN_SCORED" LIMIT 1000;

-- 6. Get player IDs of dismissed players from WICKET_TAKEN table
SELECT DISTINCT "player_out" FROM IPL.IPL."WICKET_TAKEN" LIMIT 1000;

-- 7. Get kinds of dismissal from WICKET_TAKEN table
SELECT DISTINCT "kind_out" FROM IPL.IPL."WICKET_TAKEN";

-- 8. Get match IDs from BALL_BY_BALL table in season 5
SELECT DISTINCT b."match_id"
FROM IPL.IPL."BALL_BY_BALL" b
JOIN IPL.IPL."MATCH" m ON b."match_id" = m."match_id"
WHERE m."season_id" = 5 LIMIT 1000;

-- 9. Get over and ball numbers from BALL_BY_BALL table
SELECT "over_id", "ball_id" FROM IPL.IPL."BALL_BY_BALL" LIMIT 1000;

-- 10. Get player IDs of strikers in season 5
SELECT DISTINCT b."striker"
FROM IPL.IPL."BALL_BY_BALL" b
JOIN IPL.IPL."MATCH" m ON b."match_id" = m."match_id"
WHERE m."season_id" = 5 LIMIT 1000;

-- 11. Get total runs scored per match from BATSMAN_SCORED table
SELECT "match_id", SUM("runs_scored") AS "total_runs"
FROM IPL.IPL."BATSMAN_SCORED"
GROUP BY "match_id" LIMIT 1000;

-- 12. Get number of dismissals per player in WICKET_TAKEN table
SELECT "player_out", COUNT(*) AS "dismissals"
FROM IPL.IPL."WICKET_TAKEN"
GROUP BY "player_out" LIMIT 1000;
```Query:
-- 1. Get distinct season IDs from MATCH table
SELECT DISTINCT "season_id" FROM IPL.IPL."MATCH"
Answer:
season_id
1
2
3
4
5
6
7
9
8
Query:
-- 2. Get match IDs for season 5
SELECT "match_id" FROM IPL.IPL."MATCH" WHERE "season_id" = 5 LIMIT 1000
Answer:
match_id
548311
548312
548313
548314
548315
548316
548317
548318
548319
548320
548321
548322
548323
548324
548325
548326
548327
548328
548329
548330
548331
548332
548333
548334
548335
548336
548337
548338
548339
548340
548341
548342
548344
548346
548347
548348
548349
548350
548351
548352
548353
548354
548355
548356
548357
548358
548359
548360
548361
548362
548363
548364
548365
548366
548367
548368
548369
548370
548371
548372
548373
548374
548375
548376
548377
548378
548379
548380
548381
548382
548383
548384
548385
548386
Query:
-- 3. Get player IDs and names from PLAYER table
SELECT "player_id", "player_name" FROM IPL.IPL."PLAYER" LIMIT 1000
Answer:
Too long, hard cut:
player_id,player_name
1,SC Ganguly
2,BB McCullum
3,RT Ponting
4,DJ Hussey
5,Mohammad Hafeez
6,R Dravid
7,W Jaffer
8,V Kohli
9,JH Kallis
10,CL White
11,MV Boucher
12,B Akhil
13,AA Noffke
14,P Kumar
15,Z Khan
16,SB Joshi
17,PA Patel
18,ML Hayden
19,MEK Hussey
20,MS Dhoni
21,SK Raina
22,JDP Oram
23,S Badrinath
24,K Goel
25,JR Hopes
26,KC Sangakkara
27,Yuvraj Singh
28,SM Katich
29,IK Pathan
30,T Kohli
31,YK Pathan
32,SR Watson
33,M Kaif
34,DS Lehmann
36,M Rawat
37,D Salunkhe
38,SK Warne
39,SK Trivedi
40,G Gambhir
41,V Sehwag
42,S Dhawan
43,L Ronchi
44,ST Jayasuriya
45,DJ Thornely
46,RV Uthappa
47,PR Shah
48,AM Nayar
49,SM Pollock
50,Harbhajan Singh
51,S Chanderpaul
52,LRPL Taylor
53,AC Gilchrist
54,Y Venugopal Rao
55,VVS Laxman
56,A Symonds
57,RG Sharma
58,SB Styris
59,SB Bangar
60,WPUJC Vaas
61,RP Singh
62,WP Saha
63,LR Shukla
64,DPMD Jayawardene
65,S Sohal
66,B Lee
67,PP Chawla
68,WA Mota
69,Kamran Akmal
70,Shahid Afridi
71,DJ Bravo
72,MA Khote
73,A Nehra
74,GC Smith
75,Pankaj Singh
76,RR Sarwan
77,S Sreesanth
78,VRV Singh
79,SS Tiwary
80,DS Kulkarni
81,R Vinay Kumar
82,AB Agarkar
83,M Kartik
84,I Sharma
85,AM Rahane
86,Shoaib Malik
87,MK Tiwary
88,KD Karthik
89,R Bhatia
90,MF Maharoof
91,VY Mahesh
92,TM Srivastava
93,B Chipli
94,DW Steyn
95,DB Das
96,MK Pandey
97,HH Gibbs
98,DNT Zoysa
99,D Kalyankrishna
100,SE Marsh
101,SA Asnodkar
102,Sohail Tanvir
103,Salman Butt
104,BJ Hodge
105,Umar Gul
106,AB Dinda
107,SP Fleming
108,S Vidyut
109,JA Morkel
110,AB de Villiers
111,LPC Silva
112,DB Ravi Teja
113,Misbah-ul-Haq
114,YV Takawale
115,RR Raje
116,PJ Sangwan
117,Mohammad Asif
118,GD McGrath
119,Joginder Sharma
120,MS Gony
121,M Muralitharan
122,M Ntini
123,DT Patil
124,A Kumble
125,S Anirudha
126,MM Patel
127,CK Kapugedera
128,A Chopra
129,T Taibu
130,J Arunkumar
131,PP Ojha
132,SP Goswami
133,SR Tendulkar
134,U Kaul
135,TM Dilshan
136,A Mishra
137,AD Mascarenhas
138,NK Patel
139,LA Pomersbach
140,Iqbal Abdulla
141,Younis Khan
142,PM Sarvesh Kumar
143,DP Vijaykumar
144,Shoaib Akhtar
145,Abdur Razzak
146,H Das
147,DR Smith
148,SD Chitnis
149,CRD Fernando
150,VS Yeligati
151,L Balaji
152,A Mukund
153,RR Powar
154,JP Duminy
155,A Flintoff
156,T Thushara
157,JD Ryder
158,KP Pietersen
159,T Henderson
160,Kamran Khan
161,RS Bopara
162,CH Gayle
163,MC Henriques
164,R Bishnoi
165,FH Edwards
166,KV Sharma
167,PC Valthaty
168,RJ Quiney
169,AS Raut
170,Yashpal Singh
171,M Manhas
172,AA Bilakhia
173,AN Ghosh
174,BAW Mendis
175,DL Vettori
176,MN van Wyk
177,RE van der Merwe
178,TL Suman
179,Shoaib Ahmed
180,GR Napier
181,KP Appanna
182,LA Carseldine
183,NV Ojha
184,SM Harwood
185,M Vijay
186,SB Jakati
187,DA Warner
188,RJ Harris
189,D du Preez
190,M Morkel
191,AD Mathews
192,J Botha
193,C Nanda
194,SL Malinga
195,Mashrafe Mortaza
196,A Singh
197,GJ Bailey
198,AB McDonald
199,Y Nagar
200,SS Shaikh
201,R Ashwin
202,Mohammad Ashraful
203,CA Pujara
204,OA Shah
205,Anirudh Singh
206,Jaskaran Singh
207,AP Tare
208,AT Rayudu
209,R Sathish
210,R McLaren
211,AA Jhunjhunwala
212,P Dogra
213,A Uniyal
214,MS Bisla
215,YA Abdulla
216,EJG Morgan
217,JM Kemp
218,S Tyagi
219,RS Gavaskar
220,SE Bond
221,KA Pollard
222,S Ladda
223,DP Nannes
224,MJ Lumb
225,DR Martyn
226,S Narwal
227,AB Barath
228,Bipul Sharma
229,FY Fazal
230,AC Voges
231,MD Mishra
232,UT Yadav
233,J Theron
234,SJ Srivastava
235,R Sharma
236,Mandeep Singh
237,KM Jadhav
238,SW Tait
239,KB Arun Karthik
240,KAJ Roach
241,PD Collingwood
242,CK Langeveldt
243,VS Malik
244,A Mithun
245,AP Dole
246,AN Ahmed
247,RS Sodhi
248,DE Bollinger
249,S Sriram
250,B Sumanth
251,C Madan
252,AG Paunikar
253,MR Marsh
254,AJ Finch
255,STR Binny
256,Harmeet Singh
257,IR Jaggi
258,DT Christian
259,RV Gomez
260,MA Agarwal
261,AUK Pathan
262,UBT Chand
263,DJ Jacobs
264,Sunny Singh
265,NJ Rimmington
266,AL Menaria
267,WD Parnell
268,JJ van der Wath
269,R Ninan
270,S Aravind
271,MS Wade
272,TD Paine
273,SB Wagh
274,AC Thomas
275,JEC Franklin
276,Shakib Al Hasan
277,DH Yagnik
278,S Randiv
279,BJ Haddin
280,NLTC Perera
281,NL McCullum
282,JE Taylor
283,J Syed Mohammad
284,RN ten Doeschate
285,TR Birt
286,AG Murtaza
287,Harpreet Singh
288,M Klinger
289,AC Blizzard
290,I Malhotra
291,L Ablish
292,CA Ingram
293,S Nadeem
294,P Parameswaran
295,CJ Ferguson
296,VR Aaron
297,AA Chavan
298,ND Doshi
299,B Kumar
300,Y Gnaneswara Rao
301,S Rana
302,BA Bhatt
303,F du Plessis
304,RE Levi
305,GJ Maxwell
306,SPD Smith
307,MN Samuels
308,SA Yadav
309,KK Cooper
310,JP Faulkner
311,HV Patel
312,DAJ Bracewell
313,DJ Harris
314,Ankit Sharma
315,SP Narine
316,GB Hogg
317,RR Bhatkal
318,CJ McKay
319,N Saini
320,DA Miller
321,Azhar Mahmood
322,P Negi
323,RJ Peterson
324,KMDN Kulasekara
325,A Ashish Reddy
326,V Pratap Singh
327,BB Samantray
328,MJ Clarke
329,Gurkeerat Singh
330,AP Majumdar
331,PA Reddy
332,K Upadhyay
333,P Awana
334,AD Russell
335,A Chandila
336,CA Lynn
337,Sunny Gupta
338,MC Juneja
339,KK Nair
340,GH Vihari
341,MDKJ Perera
342,R Shukla
343,B Laughlin
344,AS Rajpoot
345,M Vohra
346,JD Unadkat
347,Mohammed Shami
3
Query:
-- 4. Get distinct player IDs (strikers) from BALL_BY_BALL table
SELECT DISTINCT "striker" FROM IPL.IPL."BALL_BY_BALL" LIMIT 1000
Answer:
striker
6
2
7
1
9
3
11
13
14
15
4
16
5
24
18
17
25
19
26
20
21
22
23
40
31
41
33
35
43
51
28
49
57
63
60
69
65
71
75
86
87
90
99
104
109
111
114
115
121
129
132
135
143
144
160
169
177
184
189
195
197
218
228
349
8
10
12
27
29
30
42
34
36
37
44
52
32
38
45
46
39
48
50
62
58
232
59
61
66
67
70
53
68
72
79
80
78
81
82
84
88
89
91
93
95
96
97
102
113
116
118
120
125
127
133
134
137
130
140
141
142
145
147
148
151
153
158
162
163
164
172
174
180
181
183
188
191
192
201
203
205
207
212
213
216
217
219
224
231
234
238
246
247
254
259
275
274
278
281
282
288
290
294
295
308
307
311
325
328
334
336
335
343
350
355
373
374
384
388
397
47
54
55
56
64
74
76
77
85
92
94
83
100
103
105
106
107
108
110
112
117
122
123
124
128
131
119
138
139
146
149
152
155
154
157
159
161
166
165
171
168
170
173
175
178
179
182
185
187
186
193
194
196
198
199
202
204
206
211
208
209
210
214
220
222
223
221
226
229
233
235
236
237
239
240
241
242
244
245
250
251
252
253
255
256
257
258
261
263
262
266
267
268
269
270
271
272
273
276
285
284
286
291
292
293
297
298
299
300
301
302
303
304
306
310
312
313
314
315
317
320
321
323
324
326
329
332
333
337
338
339
341
342
344
345
347
348
352
356
357
358
359
353
361
362
363
354
366
367
368
369
370
371
376
377
378
379
381
382
386
385
389
390
392
393
394
395
398
399
401
402
405
407
409
411
412
413
415
417
418
419
422
423
426
425
427
429
431
433
73
98
101
126
136
150
156
167
176
190
200
215
225
230
243
248
249
260
264
277
279
280
287
289
296
305
309
316
322
327
330
331
351
360
364
365
346
372
375
380
383
387
391
396
400
403
404
408
410
414
416
420
421
424
428
430
432
434
227
265
283
318
319
340
406
Query:
-- 5. Get runs scored from BATSMAN_SCORED table
SELECT "runs_scored" FROM IPL.IPL."BATSMAN_SCORED" LIMIT 1000
Answer:
runs_scored
1
0
0
0
1
0
1
0
0
0
0
0
0
4
0
4
0
6
1
4
0
0
0
0
0
0
0
0
1
4
0
1
0
0
1
2
6
1
0
0
4
0
0
0
1
0
6
4
1
1
1
4
0
0
6
1
0
0
0
1
0
0
0
0
0
0
1
0
1
0
0
1
0
1
0
1
1
2
1
1
0
0
4
0
1
1
0
1
1
1
2
1
0
1
0
0
0
0
0
0
0
1
1
2
1
2
0
1
1
1
0
1
0
0
6
0
1
4
1
1
0
4
0
0
0
6
1
0
4
0
0
0
1
6
0
2
0
1
1
0
0
1
1
0
6
4
0
1
2
1
0
4
0
1
1
1
0
0
1
1
0
1
0
1
0
2
6
4
1
0
6
0
4
1
0
1
1
6
0
0
1
0
2
0
1
0
1
2
1
6
2
2
0
1
0
1
4
1
6
0
6
4
1
4
6
6
2
0
2
6
0
4
0
0
1
0
0
1
4
0
0
4
4
1
4
0
4
1
2
0
4
0
1
0
0
1
4
4
0
0
1
4
0
1
1
1
0
0
0
0
0
1
1
1
1
0
2
4
6
0
0
0
0
4
1
4
1
0
4
0
4
4
1
6
6
0
1
1
0
0
0
0
6
4
1
0
1
1
1
2
1
1
0
1
1
0
4
1
4
0
1
1
1
6
4
0
1
1
4
4
4
1
1
0
1
6
1
1
1
2
1
1
6
1
0
0
1
0
4
1
1
6
1
1
0
2
1
0
1
6
1
4
1
6
1
4
6
1
4
6
0
1
0
2
1
0
0
6
1
1
0
0
4
1
1
1
1
1
1
0
1
1
1
1
6
6
0
0
0
4
1
1
0
2
4
1
1
4
1
6
6
6
2
0
0
0
4
0
1
1
1
1
2
1
0
1
1
6
1
4
4
1
1
1
2
0
1
4
1
1
2
2
0
6
0
4
0
4
1
1
1
1
1
1
1
6
2
2
1
6
1
6
1
4
0
1
6
6
1
2
0
0
0
0
0
0
0
0
0
4
0
4
6
1
4
0
4
0
4
1
0
4
0
4
0
0
0
0
4
0
0
0
1
0
0
0
0
1
1
0
0
4
4
1
1
0
4
4
0
0
0
0
1
1
6
4
4
0
0
1
1
0
0
1
0
1
0
0
1
4
0
1
0
0
1
1
1
2
0
0
0
0
1
1
1
0
1
1
4
1
0
0
0
4
1
2
0
0
0
0
1
0
4
1
0
0
1
1
1
0
0
1
1
4
1
1
1
1
1
0
1
0
1
0
1
0
4
1
1
0
1
1
1
6
1
4
1
1
2
0
1
1
0
0
0
0
1
4
1
1
1
1
0
1
1
1
1
4
1
1
0
1
1
0
1
1
1
0
0
6
0
1
0
4
1
2
1
4
1
1
0
0
4
0
4
0
4
2
1
0
1
0
1
1
0
0
0
0
1
0
0
1
4
4
0
1
4
0
1
1
2
0
0
0
4
1
0
0
0
1
4
4
0
4
1
0
0
0
0
0
0
0
0
0
0
1
0
0
4
4
0
1
1
1
0
4
1
0
0
0
1
1
0
1
0
1
2
1
0
1
4
4
1
4
4
0
0
4
0
0
6
0
1
1
4
0
0
0
0
1
1
1
0
0
1
1
0
0
1
4
4
0
1
0
0
1
0
2
1
1
1
1
1
1
1
1
2
2
0
6
1
6
1
4
0
1
1
4
0
1
0
1
1
4
0
1
0
0
0
1
0
0
1
1
1
1
4
0
1
1
0
0
0
1
0
1
2
4
1
1
0
1
4
6
6
1
0
0
1
4
0
4
0
0
1
1
1
1
0
1
0
0
0
1
0
0
0
0
0
2
1
1
1
1
1
1
0
4
2
1
1
1
1
1
1
4
1
1
0
1
1
4
1
4
1
6
0
1
4
1
1
1
0
1
4
0
2
6
6
1
1
1
4
1
6
4
1
6
1
1
1
4
0
1
1
0
0
2
6
0
1
1
0
4
0
1
0
1
1
0
1
1
0
4
2
0
0
1
0
0
0
0
5
0
0
1
0
0
0
1
2
0
0
4
0
1
0
0
0
0
0
1
0
4
0
1
1
0
0
0
0
0
1
0
1
0
0
0
1
1
0
0
0
0
0
1
1
0
0
0
1
6
1
0
0
6
0
4
0
0
1
0
1
1
0
0
0
1
0
4
0
0
0
1
1
0
0
0
1
0
0
1
0
0
0
0
0
0
0
0
Query:
-- 6. Get player IDs of dismissed players from WICKET_TAKEN table
SELECT DISTINCT "player_out" FROM IPL.IPL."WICKET_TAKEN" LIMIT 1000
Answer:
player_out
154
46
8
96
208
18
21
53
57
20
109
188
125
54
221
63
26
258
112
135
55
260
14
93
64
231
235
255
210
281
272
56
257
254
183
171
67
104
169
40
263
216
284
187
253
132
211
292
228
303
320
313
310
295
3
349
355
299
95
177
395
99
238
178
131
23
133
79
9
252
94
259
74
167
157
31
41
6
266
19
278
279
81
42
185
106
100
48
262
35
110
65
203
268
269
214
275
32
209
4
25
288
29
83
201
199
87
192
289
190
236
148
38
239
298
1
62
50
194
15
304
71
120
317
204
158
318
191
307
325
323
147
328
89
334
331
336
338
362
351
354
36
163
357
350
373
197
339
379
311
384
383
374
389
386
393
402
388
410
409
415
417
431
428
72
86
97
113
172
186
233
224
420
153
234
115
37
264
66
2
88
17
273
280
237
162
10
27
244
287
52
293
85
136
198
139
33
249
47
261
248
306
305
314
137
276
297
212
121
321
326
267
61
73
341
347
345
329
356
315
358
166
283
363
348
207
372
376
114
378
380
39
353
308
370
342
301
390
346
394
397
401
400
403
405
371
140
398
414
418
419
408
369
366
421
427
430
432
426
416
391
411
433
385
11
16
30
5
60
44
70
76
77
92
108
118
119
107
127
129
58
103
128
144
123
124
102
91
68
138
164
168
176
151
189
179
175
202
219
241
84
161
423
24
51
69
117
130
22
126
173
229
28
75
274
343
387
213
80
217
242
141
392
196
359
152
271
422
159
246
174
250
122
13
302
425
438
434
182
218
200
222
404
181
282
34
337
286
367
361
45
285
12
309
316
256
319
330
232
333
327
82
226
364
360
322
396
377
49
101
116
78
90
105
160
155
170
180
205
230
206
245
413
59
156
251
220
223
225
243
240
365
296
165
381
412
146
150
193
352
424
300
340
407
375
7
111
227
98
277
43
Query:
-- 7. Get kinds of dismissal from WICKET_TAKEN table
SELECT DISTINCT "kind_out" FROM IPL.IPL."WICKET_TAKEN"
Answer:
kind_out
caught
bowled
run out
lbw
retired hurt
stumped
caught and bowled
hit wicket
obstructing the field
Query:
-- 8. Get match IDs from BALL_BY_BALL table in season 5
SELECT DISTINCT b."match_id"
FROM IPL.IPL."BALL_BY_BALL" b
JOIN IPL.IPL."MATCH" m ON b."match_id" = m."match_id"
WHERE m."season_id" = 5 LIMIT 1000
Answer:
match_id
548370
548323
548312
548374
548352
548378
548349
548344
548365
548367
548363
548348
548330
548384
548362
548357
548359
548347
548379
548331
548350
548322
548341
548375
548318
548333
548337
548325
548338
548334
548372
548373
548380
548351
548327
548324
548317
548321
548328
548360
548382
548386
548326
548381
548366
548311
548342
548346
548335
548316
548319
548361
548353
548385
548377
548355
548332
548329
548313
548315
548339
548354
548340
548376
548356
548371
548314
548364
548358
548336
548368
548383
548369
548320
Query:
-- 9. Get over and ball numbers from BALL_BY_BALL table
SELECT "over_id", "ball_id" FROM IPL.IPL."BALL_BY_BALL" LIMIT 1000
Answer:
over_id,ball_id
1,1
1,2
1,2
1,3
1,3
1,4
1,4
1,5
1,5
1,6
1,6
1,7
1,7
2,1
2,1
2,2
2,2
2,3
2,3
2,4
2,4
2,5
2,5
2,6
2,6
3,1
3,1
3,2
3,2
3,3
3,3
3,4
3,4
3,5
3,5
3,6
3,6
3,7
4,1
4,1
4,2
4,2
4,3
4,3
4,4
4,4
4,5
4,5
4,6
4,6
4,7
5,1
5,1
5,2
5,2
5,3
5,3
5,4
5,4
5,5
5,5
5,6
5,6
6,1
6,1
6,2
6,2
6,3
6,3
6,4
6,4
6,5
6,5
6,6
6,6
7,1
7,1
7,2
7,2
7,3
7,3
7,4
7,4
7,5
7,5
7,6
7,6
7,7
7,8
8,1
8,1
8,2
8,2
8,3
8,3
8,4
8,4
8,5
8,5
8,6
8,6
9,1
9,1
9,2
9,2
9,3
9,3
9,4
9,4
9,5
9,5
9,6
9,6
9,7
9,8
10,1
10,1
10,2
10,2
10,3
10,3
10,4
10,4
10,5
10,5
10,6
10,6
10,7
11,1
11,1
11,2
11,2
11,3
11,3
11,4
11,4
11,5
11,5
11,6
11,6
12,1
12,1
12,2
12,2
12,3
12,3
12,4
12,4
12,5
12,5
12,6
12,6
13,1
13,1
13,2
13,2
13,3
13,3
13,4
13,4
13,5
13,5
13,6
13,6
13,7
13,7
14,1
14,1
14,2
14,2
14,3
14,3
14,4
14,4
14,5
14,5
14,6
14,6
15,1
15,1
15,2
15,2
15,3
15,3
15,4
15,4
15,5
15,5
15,6
15,6
15,7
15,7
16,1
16,1
16,2
16,2
16,3
16,4
16,5
16,6
17,1
17,2
17,3
17,4
17,5
17,6
18,1
18,2
18,3
18,4
18,5
18,6
19,1
19,2
19,3
19,4
19,5
19,6
20,1
20,2
20,3
20,4
20,5
20,6
1,1
1,1
1,2
1,2
1,3
1,3
1,4
1,4
1,5
1,5
1,6
1,6
2,1
2,1
2,2
2,2
2,3
2,3
2,4
2,4
2,5
2,5
2,6
2,6
2,7
3,1
3,1
3,2
3,2
3,3
3,3
3,4
3,4
3,5
3,5
3,6
3,6
3,7
4,1
4,1
4,2
4,2
4,3
4,3
4,4
4,4
4,5
4,5
4,6
4,6
5,1
5,1
5,2
5,2
5,3
5,3
5,4
5,4
5,5
5,5
5,6
5,6
6,1
6,1
6,2
6,2
6,3
6,3
6,4
6,4
6,5
6,5
6,6
6,6
6,7
6,8
7,1
7,1
7,2
7,2
7,3
7,3
7,4
7,4
7,5
7,5
7,6
7,6
8,1
8,1
8,2
8,2
8,3
8,3
8,4
8,4
8,5
8,5
8,6
8,6
9,1
9,1
9,2
9,2
9,3
9,3
9,4
9,4
9,5
9,5
9,6
9,6
9,7
10,1
10,1
10,2
10,2
10,3
10,3
10,4
10,4
10,5
10,5
10,6
10,6
11,1
11,1
11,2
11,2
11,3
11,3
11,4
11,4
11,5
11,5
11,6
11,6
12,1
12,1
12,2
12,2
12,3
12,3
12,4
12,4
12,5
12,5
12,6
12,6
13,1
13,1
13,2
13,2
13,3
13,3
13,4
13,4
13,5
13,5
13,6
13,6
13,7
13,8
14,1
14,1
14,2
14,2
14,3
14,3
14,4
14,4
14,5
14,5
14,6
14,6
14,7
15,1
15,1
15,2
15,2
15,3
15,3
15,4
15,4
15,5
15,5
15,6
15,6
16,1
16,1
16,2
16,2
16,3
16,3
16,4
16,4
16,5
16,5
16,6
16,6
17,1
17,1
17,2
17,2
17,3
17,3
17,4
17,4
17,5
17,5
17,6
17,6
18,1
18,1
18,2
18,2
18,3
18,3
18,4
18,4
18,5
18,5
18,6
18,6
19,1
19,1
19,2
19,2
19,3
19,3
19,4
19,4
19,5
19,5
19,6
19,6
20,1
20,1
20,2
20,2
20,3
20,3
20,4
20,4
20,5
20,5
20,6
20,6
1,1
1,1
1,2
1,2
1,3
1,3
1,4
1,4
1,5
1,5
1,6
1,6
1,7
2,1
2,1
2,2
2,2
2,3
2,3
2,4
2,4
2,5
2,5
2,6
2,6
2,7
3,1
3,1
3,2
3,2
3,3
3,3
3,4
3,4
3,5
3,5
3,6
3,6
4,1
4,1
4,2
4,2
4,3
4,3
4,4
4,4
4,5
4,5
4,6
4,6
5,1
5,1
5,2
5,2
5,3
5,3
5,4
5,4
5,5
5,5
5,6
5,6
6,1
6,1
6,2
6,2
6,3
6,3
6,4
6,4
6,5
6,5
6,6
6,6
6,7
7,1
7,1
7,2
7,2
7,3
7,3
7,4
7,4
7,5
7,5
7,6
7,6
8,1
8,1
8,2
8,2
8,3
8,3
8,4
8,4
8,5
8,5
8,6
8,6
8,7
9,1
9,1
9,2
9,2
9,3
9,3
9,4
9,4
9,5
9,5
9,6
9,6
10,1
10,1
10,2
10,2
10,3
10,3
10,4
10,4
10,5
10,5
10,6
10,6
10,7
11,1
11,1
11,2
11,2
11,3
11,3
11,4
11,4
11,5
11,5
11,6
11,6
12,1
12,1
12,2
12,2
12,3
12,3
12,4
12,4
12,5
12,5
12,6
12,6
13,1
13,1
13,2
13,2
13,3
13,3
13,4
13,4
13,5
13,5
13,6
13,6
13,7
13,7
14,1
14,1
14,2
14,2
14,3
14,3
14,4
14,4
14,5
14,5
14,6
14,6
15,1
15,1
15,2
15,2
15,3
15,3
15,4
15,4
15,5
15,5
15,6
15,6
15,7
16,1
16,1
16,2
16,3
16,4
16,5
16,6
17,1
17,2
17,3
17,4
17,5
17,6
18,1
18,2
18,3
18,4
18,5
18,6
19,1
19,2
19,3
19,4
19,5
19,6
20,1
20,2
20,3
20,4
20,5
20,6
1,1
1,1
1,2
1,2
1,3
1,3
1,4
1,4
1,5
1,5
1,6
1,6
2,1
2,1
2,2
2,2
2,3
2,3
2,4
2,4
2,5
2,5
2,6
2,6
3,1
3,1
3,2
3,2
3,3
3,3
3,4
3,4
3,5
3,5
3,6
3,6
3,7
4,1
4,1
4,2
4,2
4,3
4,3
4,4
4,4
4,5
4,5
4,6
4,6
5,1
5,1
5,2
5,2
5,3
5,3
5,4
5,4
5,5
5,5
5,6
5,6
5,7
5,7
6,1
6,1
6,2
6,2
6,3
6,3
6,4
6,4
6,5
6,5
6,6
6,6
7,1
7,1
7,2
7,2
7,3
7,3
7,4
7,4
7,5
7,5
7,6
7,6
8,1
8,1
8,2
8,2
8,3
8,3
8,4
8,4
8,5
8,5
8,6
8,6
9,1
9,1
9,2
9,2
9,3
9,3
9,4
9,4
9,5
9,5
9,6
9,6
9,7
10,1
10,1
10,2
10,2
10,3
10,3
10,4
10,4
10,5
10,5
10,6
10,6
11,1
11,1
11,2
11,2
11,3
11,3
11,4
11,4
11,5
11,5
11,6
11,6
12,1
12,1
12,2
12,2
12,3
12,3
12,4
12,4
12,5
12,5
12,6
12,6
13,1
13,1
13,2
13,2
13,3
13,3
13,4
13,4
13,5
13,5
13,6
13,6
14,1
14,1
14,2
14,2
14,3
14,3
14,4
14,4
14,5
14,5
14,6
14,6
14,7
14,8
15,1
15,1
15,2
15,2
15,3
15,3
15,4
15,4
15,5
15,5
15,6
15,6
16,1
16,1
16,2
16,2
16,3
16,3
16,4
16,4
16,5
16,5
16,6
16,6
16,7
17,1
17,1
17,2
17,2
17,3
17,3
17,4
17,4
17,5
17,5
17,6
17,6
18,1
18,1
18,2
18,2
18,3
18,3
18,4
18,4
18,5
18,5
18,6
18,6
19,1
19,1
19,2
19,2
19,3
19,3
19,4
19,4
19,5
19,5
19,6
19,6
20,1
20,1
20,2
20,2
20,3
20,3
20,4
20,4
20,5
20,5
20,6
1,1
1,1
1,2
1,2
1,3
1,3
1,4
1,4
1,5
1,5
1,6
1,6
1,7
2,1
2,1
2,2
2,2
2,3
2,3
2,4
2,4
2,5
2,5
2,6
2,6
2,7
2,8
3,1
3,1
3,2
3,2
3,3
3,3
3,4
3,4
3,5
3,5
3,6
3,6
4,1
4,1
4,2
4,2
4,3
4,3
4,4
4,4
4,5
4,5
4,6
4,6
5,1
5,1
5,2
5,2
5,3
5,3
5,4
5,4
5,5
5,5
5,6
5,6
Query:
-- 10. Get player IDs of strikers in season 5
SELECT DISTINCT b."striker"
FROM IPL.IPL."BALL_BY_BALL" b
JOIN IPL.IPL."MATCH" m ON b."match_id" = m."match_id"
WHERE m."season_id" = 5 LIMIT 1000
Answer:
striker
303
304
133
57
208
275
23
35
2
254
31
29
307
131
309
312
162
297
317
33
270
121
187
255
289
19
233
21
260
89
126
236
17
235
196
120
154
277
274
62
324
147
125
332
335
190
228
14
201
306
194
183
294
305
1
67
95
85
110
79
314
315
198
311
284
73
135
325
330
296
334
313
10
157
64
211
263
61
293
171
26
320
326
331
231
318
185
71
109
20
186
248
41
40
87
66
140
96
267
46
299
48
266
204
42
94
50
100
178
283
63
295
83
104
203
6
276
308
221
256
81
106
212
319
188
148
262
232
287
337
199
158
93
191
323
286
9
167
132
8
322
53
258
214
39
88
15
54
137
192
316
302
257
327
329
4
175
52
280
328
32
261
333
336
80
136
321
112
310
97
Query:
-- 11. Get total runs scored per match from BATSMAN_SCORED table
SELECT "match_id", SUM("runs_scored") AS "total_runs"
FROM IPL.IPL."BATSMAN_SCORED"
GROUP BY "match_id" LIMIT 1000
Answer:
Too long, hard cut:
match_id,total_runs
335987,268
335988,430
335989,240
335990,315
335991,184
335992,318
335993,268
335994,379
335995,418
335997,264
335999,289
336000,300
336001,332
336002,247
336003,356
336007,320
336010,191
336011,226
336013,188
336014,352
336015,242
336016,264
336017,224
336020,287
336026,117
336031,291
336032,285
336034,222
336041,262
392188,149
392189,198
392196,320
392199,284
392217,259
392220,215
392230,263
419118,262
419129,319
419132,303
419133,325
501214,296
335996,284
336006,328
336033,342
336043,268
392204,264
392205,207
392210,269
392219,347
392227,217
392233,312
419130,333
419148,292
501225,323
501239,221
501275,309
548349,323
548359,293
734040,303
829756,279
419150,347
501212,277
501242,278
548358,264
336008,326
336024,392
336028,297
336038,396
336039,298
336044,220
392193,328
392194,353
392213,285
392222,264
392238,193
392244,262
419121,355
419153,300
419155,291
501217,312
501236,180
548355,311
548362,277
335998,273
336004,321
336009,281
336018,326
336019,358
336023,286
336029,303
336036,340
336037,343
336045,306
392186,299
392187,178
392190,248
392191,221
392197,297
392201,317
392207,277
392209,263
392211,296
392212,290
392214,261
392216,299
392226,331
392228,314
392241,313
392243,284
419111,284
419113,268
419122,321
419137,289
419142,448
419144,386
419145,321
419151,304
419152,261
419161,331
419168,222
501206,179
501219,150
501227,328
501235,264
501237,325
501240,271
501250,165
501251,309
501258,316
501267,220
501276,337
548314,326
548327,300
548351,186
548357,298
548361,354
548372,319
548377,398
598008,193
598049,152
598050,335
733976,252
829794,309
980962,306
336030,187
392203,276
392215,321
392223,277
392231,216
392234,255
392239,195
392242,291
419134,328
419139,293
419146,294
419154,199
501209,282
501243,256
501255,269
501259,328
501264,262
501265,317
548319,271
548336,313
548339,314
548347,364
548364,296
548367,298
548369,221
548373,310
548386,367
598025,239
598031,354
598043,281
598070,228
729306,353
733982,298
734000,301
734024,309
829718,342
829728,304
829762,184
829792,373
829810,319
980924,292
980926,360
980970,309
548338,344
419124,290
501224,239
548317,296
336012,277
392200,228
392202,269
392224,227
392236,352
392240,298
419112,399
419120,171
419123,289
419125,326
419131,277
419136,299
419138,308
419147,274
419158,247
419166,246
419167,310
501208,298
501211,375
501215,338
501216,332
501226,296
501234,189
501256,223
501274,285
548313,211
548325,246
548337,277
548350,291
548365,271
548375,230
548376,234
598004,286
598006,305
598021,292
598024,249
598045,264
598056,355
829720,355
829774,345
829828,350
980940,279
980980,311
980982,340
336005,321
336021,263
336025,365
336027,198
336042,268
392206,275
392221,321
392225,273
392229,249
392235,268
392237,263
419114,260
419115,330
419116,269
419119,310
419141,344
419143,279
419156,267
419159,253
419160,204
419164,372
419165,271
501203,293
501204,269
501205,299
501207,211
501210,265
501220,260
501221,302
501230,205
501232,290
501233,273
501238,252
501241,297
501246,274
501247,286
501248,334
501249,314
501252,238
501254,316
501260,181
501261,235
501262,286
501266,280
501269,294
501272,331
548311,209
548315,284
548321,214
548326,309
548328,250
548330,165
548332,354
548335,298
548341,303
548342,282
548352,260
548353,342
548354,271
548363,241
548370,288
548371,367
548378,238
548381,236
548382,293
548383,288
548385,341
598010,249
598011,354
598012,266
598014,280
598017,315
598018,292
598026,237
598032,381
598034,311
598036,282
598037,277
598038,310
598039,363
598042,323
598044,249
598054,291
598058,243
598062,223
598063,276
598065,348
598068,295
598069,363
598071,300
598072,285
598073,181
598074,239
598077,310
598078,259
729284,272
729286,277
729288,391
729294,308
729302,258
729308,275
729316,271
733990,301
733994,214
733996,343
734004,367
734022,317
734030,297
734036,316
734042,295
734048,286
829714,268
829722,322
829740,306
829744,273
829748,270
829758,267
829772,221
829790,294
829798,312
829806,232
829812,210
829820,213
829822,332
829824,274
980906,229
980908,174
980914,355
980920,275
980922,269
980932,325
980934,257
980946,343
980950,337
980952,346
980958,365
980964,351
980972,244
980994,153
980996,347
981010,333
981012,331
981014,305
981022,318
336022,224
392208,266
419135,282
419170,291
501218,359
501228,412
501229,290
501244,304
501245,285
501257,278
501271,237
501273,330
548312,185
548323,391
548334,362
548340,241
548360,335
598003,246
598007,271
598020,284
598028,224
598033,313
598040,293
598041,329
598051,205
598052,346
598059,346
598064,228
729300,297
729310,134
729318,229
729322,302
733984,313
733986,337
733988,320
734002,290
734008,277
734014,271
734034,361
734052,401
734054,385
829732,245
829738,299
829754,255
829764,272
829766,310
829770,249
829778,350
829788,292
829826,265
980910,310
980912,391
980918,210
980928,274
980960,277
980976,336
980984,262
980986,287
980990,232
980992,332
981016,261
548346,316
548379,269
598005,225
598013,296
598060,220
734020,277
829784,265
980978,258
501231,248
419140,317
548368,328
980938,303
336040,3
Query:
-- 12. Get number of dismissals per player in WICKET_TAKEN table
SELECT "player_out", COUNT(*) AS "dismissals"
FROM IPL.IPL."WICKET_TAKEN"
GROUP BY "player_out" LIMIT 1000
Answer:
player_out,dismissals
154,50
46,114
8,105
96,69
208,84
18,29
21,121
53,76
57,115
20,83
109,40
188,12
125,8
54,44
221,68
63,26
26,63
258,18
112,19
135,42
55,19
260,42
14,37
93,15
64,61
231,16
235,14
255,32
210,8
281,1
272,2
56,27
257,4
254,47
183,69
171,23
67,40
104,41
169,9
40,118
263,7
216,36
284,14
187,86
253,12
132,15
211,13
292,2
228,7
303,42
320,40
313,4
310,20
295,6
3,9
349,5
355,24
299,18
95,14
177,11
395,3
99,1
238,3
178,32
131,12
23,46
133,69
79,44
9,84
252,5
94,22
259,5
74,25
167,21
157,28
31,89
41,97
6,77
266,21
19,51
278,1
279,1
81,26
42,96
185,93
106,9
100,53
48,38
262,20
35,67
110,81
65,20
203,19
268,2
269,1
214,36
275,11
32,76
209,17
4,49
25,16
288,4
29,51
83,7
201,21
199,14
87,46
192,20
289,7
190,11
236,44
148,7
38,20
239,3
298,1
1,52
62,50
50,49
194,16
15,13
304,6
71,55
120,9
317,1
204,15
158,28
318,1
191,28
307,9
325,14
323,3
147,73
328,6
89,29
334,22
331,9
336,4
338,6
362,15
351,41
354,23
36,5
163,27
357,13
350,7
373,3
197,27
339,30
379,3
311,8
384,2
383,20
374,22
389,1
386,4
393,18
402,6
388,2
410,5
409,4
415,3
417,2
431,3
428,2
72,2
86,4
97,32
113,7
172,5
186,1
233,1
224,12
420,8
153,3
234,1
115,1
37,2
264,4
66,10
2,86
88,106
17,88
273,2
280,21
237,25
162,75
10,35
27,90
244,5
287,2
52,40
293,9
85,74
136,27
198,4
139,11
33,17
249,2
47,8
261,5
248,1
306,33
305,38
314,6
137,8
276,23
297,2
212,11
121,6
321,19
326,1
267,9
61,15
73,7
341,2
347,3
345,30
329,21
356,7
315,7
358,5
166,15
283,1
363,3
348,3
207,21
372,12
376,3
114,8
378,7
380,5
39,7
353,5
308,21
370,2
342,1
301,4
390,1
346,1
394,22
397,2
401,3
400,12
403,4
405,1
371,5
140,2
398,1
414,3
418,1
419,2
408,6
369,5
366,2
421,4
427,6
430,1
432,1
426,6
416,1
391,5
411,3
433,2
385,3
11,14
16,2
30,3
5,7
60,8
44,28
70,8
76,4
77,4
92,1
108,8
118,1
119,4
107,9
127,3
129,3
58,7
103,7
128,6
144,1
123,2
124,3
102,3
91,2
68,6
138,4
164,3
168,6
176,3
151,8
189,1
179,2
175,8
202,1
219,1
241,5
84,3
161,17
423,1
24,15
51,3
69,5
117,2
130,3
22,8
126,5
173,2
229,10
28,10
75,2
274,2
343,1
387,1
213,1
80,7
217,2
242,2
141,1
392,1
196,4
359,1
152,2
271,2
422,1
159,2
246,1
174,2
250,1
122,1
13,1
302,1
425,2
438,1
434,1
182,4
218,1
200,1
222,1
404,1
181,1
282,1
34,2
337,1
286,1
367,1
361,1
45,3
285,5
12,6
309,9
316,3
256,4
319,10
330,4
232,12
333,2
327,5
82,10
226,3
364,8
360,10
322,12
396,7
377,5
49,8
101,20
116,4
78,2
90,10
105,3
160,1
155,2
170,3
180,1
205,4
230,4
206,1
245,2
413,6
59,6
156,2
251,1
220,1
223,1
225,1
243,1
240,1
365,1
296,3
165,1
381,1
412,1
146,1
150,1
193,1
352,1
424,1
300,1
340,18
407,11
375,1
7,8
111,2
227,2
98,1
277,10
43,5
End Exploring Related Columns
Task: Please help me find the names of top 5 players with the highest average runs per match in season 5, along with their batting averages.

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: SELECT S."Column_Name" FROM {Database Name}.{Schema Name}.{Table_name} (ensure all column names are enclosed in double quotations)
Follow the answer format like: To find the top 5 players with the highest average runs per match in season 5, we calculate the total runs scored by each player in that season and divide it by the number of matches they played. The batting average is calculated as the total runs scored divided by the number of times the player was dismissed.

Here is the list of the top 5 players:

```csv
Name,Batting_Average
player_name1:str,batting_average1:float
player_name2:str,batting_average2:float
player_name3:str,batting_average3:float
player_name4:str,batting_average4:float
player_name5:str,batting_average5:float
```.
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'IPL': {'IPL': ['BALL_BY_BALL', 'BATSMAN_SCORED', 'EXTRA_RUNS', 'MATCH', 'PLAYER', 'PLAYER_MATCH', 'TEAM', 'WICKET_TAKEN']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book" SQL: WHERE "title" LIKE '%book%'
However, if the string is not decided, you may use ILIKE and %. e.g. Get articles that mention "education": SQL: "body" ILIKE '%education%' OR "title" ILIKE '%education%'
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.

2025-01-19 12:44:18 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 12:44:18 - root - INFO - ```sql
WITH season_5_matches AS (
    SELECT "match_id"
    FROM IPL.IPL."MATCH"
    WHERE "season_id" = 5
),
total_runs_per_player AS (
    SELECT bbb."striker" AS "player_id", SUM(bs."runs_scored") AS total_runs
    FROM IPL.IPL."BATSMAN_SCORED" bs
    JOIN IPL.IPL."BALL_BY_BALL" bbb ON bs."match_id" = bbb."match_id"
      AND bs."over_id" = bbb."over_id"
      AND bs."ball_id" = bbb."ball_id"
      AND bs."innings_no" = bbb."innings_no"
    WHERE bs."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY bbb."striker"
),
matches_played_per_player AS (
    SELECT pm."player_id", COUNT(DISTINCT pm."match_id") AS matches_played
    FROM IPL.IPL."PLAYER_MATCH" pm
    WHERE pm."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY pm."player_id"
),
times_dismissed_per_player AS (
    SELECT wt."player_out" AS "player_id", COUNT(*) AS times_dismissed
    FROM IPL.IPL."WICKET_TAKEN" wt
    WHERE wt."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY wt."player_out"
)
SELECT p."player_name" AS "Name",
       ROUND(trp.total_runs * 1.0 / mpp.matches_played, 4) AS "Average_Runs_Per_Match",
       ROUND(CASE 
            WHEN tdp.times_dismissed > 0 THEN trp.total_runs * 1.0 / tdp.times_dismissed
            ELSE trp.total_runs
       END, 4) AS "Batting_Average"
FROM total_runs_per_player trp
JOIN matches_played_per_player mpp ON trp."player_id" = mpp."player_id"
LEFT JOIN times_dismissed_per_player tdp ON trp."player_id" = tdp."player_id"
JOIN IPL.IPL."PLAYER" p ON trp."player_id" = p."player_id"
ORDER BY "Average_Runs_Per_Match" DESC NULLS LAST,
         "Batting_Average" DESC NULLS LAST
LIMIT 5;
```
2025-01-19 12:44:18 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:44:18 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:44:18 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:44:19 - snowflake.connector.cursor - INFO - Number of results in first chunk: 5
2025-01-19 12:44:19 - snowflake.connector.connection - INFO - closed
2025-01-19 12:44:20 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:44:20 - root - INFO - itercount: 1
2025-01-19 12:44:20 - root - INFO - 0
2025-01-19 12:44:20 - root - INFO - results: 
Name,Average_Runs_Per_Match,Batting_Average
CH Gayle,52.3571,61.0833
KP Pietersen,38.1250,61.0000
S Dhawan,37.9333,40.6429
CL White,36.8462,43.5455
SR Watson,36.4286,42.5000


2025-01-19 12:44:20 - root - INFO - Please check the answer again by reviewing Please help me find the names of top 5 players with the highest average runs per match in season 5, along with their batting averages., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: To find the top 5 players with the highest average runs per match in season 5, we calculate the total runs scored by each player in that season and divide it by the number of matches they played. The batting average is calculated as the total runs scored divided by the number of times the player was dismissed.

Here is the list of the top 5 players:

```csv
Name,Batting_Average
player_name1:str,batting_average1:float
player_name2:str,batting_average2:float
player_name3:str,batting_average3:float
player_name4:str,batting_average4:float
player_name5:str,batting_average5:float
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Name,Average_Runs_Per_Match,Batting_Average
CH Gayle,52.3571,61.0833
KP Pietersen,38.1250,61.0000
S Dhawan,37.9333,40.6429
CL White,36.8462,43.5455
SR Watson,36.4286,42.5000
Current sql:
WITH season_5_matches AS (
    SELECT "match_id"
    FROM IPL.IPL."MATCH"
    WHERE "season_id" = 5
),
total_runs_per_player AS (
    SELECT bbb."striker" AS "player_id", SUM(bs."runs_scored") AS total_runs
    FROM IPL.IPL."BATSMAN_SCORED" bs
    JOIN IPL.IPL."BALL_BY_BALL" bbb ON bs."match_id" = bbb."match_id"
      AND bs."over_id" = bbb."over_id"
      AND bs."ball_id" = bbb."ball_id"
      AND bs."innings_no" = bbb."innings_no"
    WHERE bs."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY bbb."striker"
),
matches_played_per_player AS (
    SELECT pm."player_id", COUNT(DISTINCT pm."match_id") AS matches_played
    FROM IPL.IPL."PLAYER_MATCH" pm
    WHERE pm."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY pm."player_id"
),
times_dismissed_per_player AS (
    SELECT wt."player_out" AS "player_id", COUNT(*) AS times_dismissed
    FROM IPL.IPL."WICKET_TAKEN" wt
    WHERE wt."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY wt."player_out"
)
SELECT p."player_name" AS "Name",
       ROUND(trp.total_runs * 1.0 / mpp.matches_played, 4) AS "Average_Runs_Per_Match",
       ROUND(CASE 
            WHEN tdp.times_dismissed > 0 THEN trp.total_runs * 1.0 / tdp.times_dismissed
            ELSE trp.total_runs
       END, 4) AS "Batting_Average"
FROM total_runs_per_player trp
JOIN matches_played_per_player mpp ON trp."player_id" = mpp."player_id"
LEFT JOIN times_dismissed_per_player tdp ON trp."player_id" = tdp."player_id"
JOIN IPL.IPL."PLAYER" p ON trp."player_id" = p."player_id"
ORDER BY "Average_Runs_Per_Match" DESC NULLS LAST,
         "Batting_Average" DESC NULLS LAST
LIMIT 5;
2025-01-19 12:44:57 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 12:44:57 - root - INFO - ```sql
WITH season_5_matches AS (
    SELECT "match_id"
    FROM IPL.IPL."MATCH"
    WHERE "season_id" = 5
),
total_runs_per_player AS (
    SELECT bbb."striker" AS "player_id", SUM(bs."runs_scored") AS total_runs
    FROM IPL.IPL."BATSMAN_SCORED" bs
    JOIN IPL.IPL."BALL_BY_BALL" bbb ON bs."match_id" = bbb."match_id"
      AND bs."over_id" = bbb."over_id"
      AND bs."ball_id" = bbb."ball_id"
      AND bs."innings_no" = bbb."innings_no"
    WHERE bs."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY bbb."striker"
),
times_dismissed_per_player AS (
    SELECT wt."player_out" AS "player_id", COUNT(*) AS times_dismissed
    FROM IPL.IPL."WICKET_TAKEN" wt
    WHERE wt."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY wt."player_out"
)
SELECT p."player_name" AS "Name",
       ROUND(CASE 
            WHEN tdp.times_dismissed > 0 THEN trp.total_runs * 1.0 / tdp.times_dismissed
            ELSE trp.total_runs
       END, 4) AS "Batting_Average"
FROM total_runs_per_player trp
LEFT JOIN times_dismissed_per_player tdp ON trp."player_id" = tdp."player_id"
JOIN IPL.IPL."PLAYER" p ON trp."player_id" = p."player_id"
ORDER BY "Batting_Average" DESC NULLS LAST
LIMIT 5;
```
2025-01-19 12:44:57 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:44:57 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:44:57 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:44:59 - snowflake.connector.cursor - INFO - Number of results in first chunk: 5
2025-01-19 12:44:59 - snowflake.connector.connection - INFO - closed
2025-01-19 12:44:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:44:59 - root - INFO - itercount: 2
2025-01-19 12:44:59 - root - INFO - 0
2025-01-19 12:44:59 - root - INFO - results: 
Name,Batting_Average
JP Duminy,81.3333
CH Gayle,61.0833
KP Pietersen,61.0000
DJ Bravo,46.3750
CL White,43.5455


2025-01-19 12:44:59 - root - INFO - Please check the answer again by reviewing Please help me find the names of top 5 players with the highest average runs per match in season 5, along with their batting averages., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: To find the top 5 players with the highest average runs per match in season 5, we calculate the total runs scored by each player in that season and divide it by the number of matches they played. The batting average is calculated as the total runs scored divided by the number of times the player was dismissed.

Here is the list of the top 5 players:

```csv
Name,Batting_Average
player_name1:str,batting_average1:float
player_name2:str,batting_average2:float
player_name3:str,batting_average3:float
player_name4:str,batting_average4:float
player_name5:str,batting_average5:float
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Name,Batting_Average
JP Duminy,81.3333
CH Gayle,61.0833
KP Pietersen,61.0000
DJ Bravo,46.3750
CL White,43.5455
Current sql:
WITH season_5_matches AS (
    SELECT "match_id"
    FROM IPL.IPL."MATCH"
    WHERE "season_id" = 5
),
total_runs_per_player AS (
    SELECT bbb."striker" AS "player_id", SUM(bs."runs_scored") AS total_runs
    FROM IPL.IPL."BATSMAN_SCORED" bs
    JOIN IPL.IPL."BALL_BY_BALL" bbb ON bs."match_id" = bbb."match_id"
      AND bs."over_id" = bbb."over_id"
      AND bs."ball_id" = bbb."ball_id"
      AND bs."innings_no" = bbb."innings_no"
    WHERE bs."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY bbb."striker"
),
times_dismissed_per_player AS (
    SELECT wt."player_out" AS "player_id", COUNT(*) AS times_dismissed
    FROM IPL.IPL."WICKET_TAKEN" wt
    WHERE wt."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY wt."player_out"
)
SELECT p."player_name" AS "Name",
       ROUND(CASE 
            WHEN tdp.times_dismissed > 0 THEN trp.total_runs * 1.0 / tdp.times_dismissed
            ELSE trp.total_runs
       END, 4) AS "Batting_Average"
FROM total_runs_per_player trp
LEFT JOIN times_dismissed_per_player tdp ON trp."player_id" = tdp."player_id"
JOIN IPL.IPL."PLAYER" p ON trp."player_id" = p."player_id"
ORDER BY "Batting_Average" DESC NULLS LAST
LIMIT 5;
2025-01-19 12:45:37 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 12:45:37 - root - INFO - ```sql
WITH season_5_matches AS (
    SELECT "match_id"
    FROM IPL.IPL."MATCH"
    WHERE "season_id" = 5
),
total_runs_per_player AS (
    SELECT bbb."striker" AS "player_id", SUM(bs."runs_scored") AS total_runs
    FROM IPL.IPL."BATSMAN_SCORED" bs
    JOIN IPL.IPL."BALL_BY_BALL" bbb ON bs."match_id" = bbb."match_id"
      AND bs."over_id" = bbb."over_id"
      AND bs."ball_id" = bbb."ball_id"
      AND bs."innings_no" = bbb."innings_no"
    WHERE bs."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY bbb."striker"
),
matches_played_per_player AS (
    SELECT bbb."striker" AS "player_id", COUNT(DISTINCT bbb."match_id") AS matches_played
    FROM IPL.IPL."BALL_BY_BALL" bbb
    WHERE bbb."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY bbb."striker"
),
times_dismissed_per_player AS (
    SELECT wt."player_out" AS "player_id", COUNT(*) AS times_dismissed
    FROM IPL.IPL."WICKET_TAKEN" wt
    WHERE wt."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY wt."player_out"
)
SELECT p."player_name" AS "Name",
       ROUND(CASE 
            WHEN tdp.times_dismissed > 0 THEN trp.total_runs * 1.0 / tdp.times_dismissed
            ELSE trp.total_runs
       END, 4) AS "Batting_Average"
FROM total_runs_per_player trp
JOIN matches_played_per_player mpp ON trp."player_id" = mpp."player_id"
LEFT JOIN times_dismissed_per_player tdp ON trp."player_id" = tdp."player_id"
JOIN IPL.IPL."PLAYER" p ON trp."player_id" = p."player_id"
ORDER BY (trp.total_runs * 1.0 / mpp.matches_played) DESC NULLS LAST
LIMIT 5;
```
2025-01-19 12:45:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:45:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:45:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:45:39 - snowflake.connector.cursor - INFO - Number of results in first chunk: 5
2025-01-19 12:45:39 - snowflake.connector.connection - INFO - closed
2025-01-19 12:45:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:45:39 - root - INFO - itercount: 3
2025-01-19 12:45:39 - root - INFO - 0
2025-01-19 12:45:39 - root - INFO - results: 
Name,Batting_Average
CH Gayle,61.0833
KP Pietersen,61.0000
S Dhawan,40.6429
CL White,43.5455
SR Watson,42.5000


2025-01-19 12:45:39 - root - INFO - Please check the answer again by reviewing Please help me find the names of top 5 players with the highest average runs per match in season 5, along with their batting averages., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: To find the top 5 players with the highest average runs per match in season 5, we calculate the total runs scored by each player in that season and divide it by the number of matches they played. The batting average is calculated as the total runs scored divided by the number of times the player was dismissed.

Here is the list of the top 5 players:

```csv
Name,Batting_Average
player_name1:str,batting_average1:float
player_name2:str,batting_average2:float
player_name3:str,batting_average3:float
player_name4:str,batting_average4:float
player_name5:str,batting_average5:float
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Name,Batting_Average
CH Gayle,61.0833
KP Pietersen,61.0000
S Dhawan,40.6429
CL White,43.5455
SR Watson,42.5000
Current sql:
WITH season_5_matches AS (
    SELECT "match_id"
    FROM IPL.IPL."MATCH"
    WHERE "season_id" = 5
),
total_runs_per_player AS (
    SELECT bbb."striker" AS "player_id", SUM(bs."runs_scored") AS total_runs
    FROM IPL.IPL."BATSMAN_SCORED" bs
    JOIN IPL.IPL."BALL_BY_BALL" bbb ON bs."match_id" = bbb."match_id"
      AND bs."over_id" = bbb."over_id"
      AND bs."ball_id" = bbb."ball_id"
      AND bs."innings_no" = bbb."innings_no"
    WHERE bs."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY bbb."striker"
),
matches_played_per_player AS (
    SELECT bbb."striker" AS "player_id", COUNT(DISTINCT bbb."match_id") AS matches_played
    FROM IPL.IPL."BALL_BY_BALL" bbb
    WHERE bbb."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY bbb."striker"
),
times_dismissed_per_player AS (
    SELECT wt."player_out" AS "player_id", COUNT(*) AS times_dismissed
    FROM IPL.IPL."WICKET_TAKEN" wt
    WHERE wt."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY wt."player_out"
)
SELECT p."player_name" AS "Name",
       ROUND(CASE 
            WHEN tdp.times_dismissed > 0 THEN trp.total_runs * 1.0 / tdp.times_dismissed
            ELSE trp.total_runs
       END, 4) AS "Batting_Average"
FROM total_runs_per_player trp
JOIN matches_played_per_player mpp ON trp."player_id" = mpp."player_id"
LEFT JOIN times_dismissed_per_player tdp ON trp."player_id" = tdp."player_id"
JOIN IPL.IPL."PLAYER" p ON trp."player_id" = p."player_id"
ORDER BY (trp.total_runs * 1.0 / mpp.matches_played) DESC NULLS LAST
LIMIT 5;
2025-01-19 12:46:26 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 12:46:26 - root - INFO - ```sql
WITH season_5_matches AS (
    SELECT "match_id"
    FROM IPL.IPL."MATCH"
    WHERE "season_id" = 5
),
total_runs_per_player AS (
    SELECT bbb."striker" AS "player_id", SUM(bs."runs_scored") AS total_runs
    FROM IPL.IPL."BATSMAN_SCORED" bs
    JOIN IPL.IPL."BALL_BY_BALL" bbb ON bs."match_id" = bbb."match_id"
      AND bs."over_id" = bbb."over_id"
      AND bs."ball_id" = bbb."ball_id"
      AND bs."innings_no" = bbb."innings_no"
    WHERE bs."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY bbb."striker"
),
matches_played_per_player AS (
    SELECT bbb."striker" AS "player_id", COUNT(DISTINCT bbb."match_id") AS matches_played
    FROM IPL.IPL."BALL_BY_BALL" bbb
    WHERE bbb."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY bbb."striker"
),
times_dismissed_per_player AS (
    SELECT wt."player_out" AS "player_id", COUNT(*) AS times_dismissed
    FROM IPL.IPL."WICKET_TAKEN" wt
    WHERE wt."match_id" IN (SELECT "match_id" FROM season_5_matches)
    GROUP BY wt."player_out"
)
SELECT p."player_name" AS "Name",
       ROUND(CASE 
            WHEN tdp.times_dismissed > 0 THEN trp.total_runs * 1.0 / tdp.times_dismissed
            ELSE trp.total_runs
       END, 4) AS "Batting_Average"
FROM total_runs_per_player trp
JOIN matches_played_per_player mpp ON trp."player_id" = mpp."player_id"
LEFT JOIN times_dismissed_per_player tdp ON trp."player_id" = tdp."player_id"
JOIN IPL.IPL."PLAYER" p ON trp."player_id" = p."player_id"
ORDER BY (trp.total_runs * 1.0 / mpp.matches_played) DESC NULLS LAST
LIMIT 5;
```
2025-01-19 12:46:26 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 12:46:26 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 12:46:26 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 12:46:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 5
2025-01-19 12:46:27 - snowflake.connector.connection - INFO - closed
2025-01-19 12:46:28 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 12:46:28 - root - INFO - itercount: 4
2025-01-19 12:46:28 - root - INFO - 0
2025-01-19 12:46:28 - root - INFO - Total iteration counts: 4
