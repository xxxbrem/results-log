2025-02-12 21:26:44 - openai._base_client - INFO - Retrying request to /chat/completions in 0.492360 seconds
2025-02-12 21:27:38 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:27:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 80
2025-02-12 21:27:40 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:40 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:40 - root - INFO - SQL:
SELECT DISTINCT "kind_code"
   FROM PATENTS.PATENTS.PUBLICATIONS
   LIMIT 100;
Results:
kind_code
S2
P
B7
C9
F1
P9
D1
A4
V0
Z
A1
H1
Y8
A8
I2
B1
S
U8
D2
I1
T9
U9
V
U1
U4
A3
R
Z2
T3
B5
L
A0
B9
U5
A7
C3
F2
B8
C0
T2
Y2
D
R1
B2
G2
T5
B
Y1
C
U2
A5
B3
T4
C1
U0
E
G
D0
A2
U
T8
P1
C4
A6
Y
A
M
S1
U3
T
Q
B4
C2
H3
C5
A9
B6
E2
T1
Y4

2025-02-12 21:27:40 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:40 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:40 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:27:41 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:41 - root - INFO - SQL:
SELECT "publication_number", "grant_date"
   FROM PATENTS.PATENTS.PUBLICATIONS
   WHERE "country_code" = 'US' AND "kind_code" = 'B2'
   LIMIT 100;
Results:
publication_number,grant_date
US-8857551-B2,20141014
US-9370027-B2,20160614
US-9042351-B2,20150526
US-10561638-B2,20200218
US-8962445-B2,20150224
US-9270639-B2,20160223
US-8938152-B2,20150120
US-9389656-B2,20160712
US-9482287-B2,20161101
US-9386020-B2,20160705
US-10142276-B2,20181127
US-9216545-B2,20151222
US-9548844-B2,20170117
US-9111730-B2,20150818
US-9340798-B2,20160517
US-10324723-B2,20190618
US-9190745-B2,20151117
US-9380603-B2,20160628
US-9650743-B2,20170516
US-10140934-B2,20181127
US-9556907-B2,20170131
US-9567200-B2,20170214
US-10722723-B2,20200728
US-9188941-B2,20151117
US-9048861-B2,20150602
US-9460689-B2,20161004
US-9318050-B2,20160419
US-10533556-B2,20200114
US-9520094-B2,20161213
US-9412846-B2,20160809
US-10070142-B2,20180904
US-9585927-B2,20170307
US-9415120-B2,20160816
US-10533291-B2,20200114
US-9329543-B2,20160503
US-10487804-B2,20191126
US-9502685-B2,20161122
US-9434993-B2,20160906
US-10120886-B2,20181106
US-9343259-B2,20160517
US-10025922-B2,20180717
US-10093135-B2,20181009
US-11058417-B2,20210713
US-10791626-B2,20200929
US-10040253-B2,20180807
US-10268050-B2,20190423
US-9595167-B2,20170314
US-9425382-B2,20160823
US-10292858-B2,20190521
US-10439992-B2,20191008
US-10463632-B2,20191105
US-10040372-B2,20180807
US-11043142-B2,20210622
US-10096317-B2,20181009
US-10620487-B2,20200414
US-9616746-B2,20170411
US-10132013-B2,20181120
US-10075410-B2,20180911
US-11055623-B2,20210706
US-10501667-B2,20191210
US-10614930-B2,20200407
US-11100138-B2,20210824
US-10294485-B2,20190521
US-10420148-B2,20190917
US-10192648-B2,20190129
US-10799929-B2,20201013
US-10132055-B2,20181120
US-10306558-B2,20190528
US-10266255-B2,20190423
US-11229607-B2,20220125
US-11099445-B2,20210824
US-10918669-B2,20210216
US-10104056-B2,20181016
US-10170592-B2,20190101
US-10949373-B2,20210316
US-10637868-B2,20200428
US-10828230-B2,20201110
US-10612778-B2,20200407
US-10891534-B2,20210112
US-10827186-B2,20201103
US-10798073-B2,20201006
US-10574908-B2,20200225
US-10199059-B2,20190205
US-10178137-B2,20190108
US-10377792-B2,20190813
US-10141686-B2,20181127
US-11154290-B2,20211026
US-10891268-B2,20210112
US-10141468-B2,20181127
US-10941196-B2,20210309
US-10543714-B2,20200128
US-10513055-B2,20191224
US-10968393-B2,20210406
US-10630153-B2,20200421
US-10418599-B2,20190917
US-10128451-B2,20181113
US-10150865-B2,20181211
US-10483008-B2,20191119
US-10619236-B2,20200414
US-10634183-B2,20200428

2025-02-12 21:27:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:43 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:27:43 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:43 - root - INFO - SQL:
SELECT "publication_number", "ipc"
   FROM PATENTS.PATENTS.PUBLICATIONS
   WHERE "grant_date" BETWEEN 20150101 AND 20181231
   LIMIT 100;
Results:
Too long, hard cut:
publication_number,ipc
EP-1579759-B2,"[
  {
    ""code"": ""A01J7/02"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""A01J5/08"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
FR-2999294-B1,"[
  {
    ""code"": ""H02H3/34"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G01R31/08"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
FR-3038536-B1,"[
  {
    ""code"": ""B23B47/34"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B23Q5/32"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
FR-3044851-B1,"[
  {
    ""code"": ""H04N7/18"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G02C7/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-8934926-B1,"[
  {
    ""code"": ""H04M3/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W68/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W68/02"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W24/08"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W8/22"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W4/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-9321563-B1,"[
  {
    ""code"": ""A47G19/22"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""B65D43/06"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B65D43/02"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B65D43/10"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-9257577-B1,"[
  {
    ""code"": ""H01L27/146"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H01L31/0224"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H01L31/0216"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-9434668-B1,"[
  {
    ""code"": ""C07C37/11"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C07C37/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
AT-511923-B1,"[
  {
    ""code"": ""G03B29/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G03B17/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
AU-2015100348-A4,"[
  {
    ""code"": ""H04L12/26"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F11/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
AU-2016102250-A4,"[
  {
    ""code"": ""C07C49/80"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C07C45/46"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
JO-2951-B1,[]
US-9028758-B2,"[
  {
    ""code"": ""G01N1/02"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""G01N33/22"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B04C3/06"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G01N1/22"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B04C9/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-9143515-B2,"[
  {
    ""code"": ""G11B20/00"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""H04L29/08"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04L29/06"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F17/30"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W4/021"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W4/029"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W4/02"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-8967144-B2,"[
  {
    ""code"": ""A61M16/06"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""A61M16/12"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""A61M16/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""A62B18/02"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""A61N1/39"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""

2025-02-12 21:27:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:27:44 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:44 - root - INFO - SQL:
SELECT "publication_number", f.value
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
   LIMIT 100;
Results:
Too long, hard cut:
publication_number,VALUE
US-2021236923-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-7159217-B2"",
  ""type"": """"
}"
US-2021236923-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2016296840-A1"",
  ""type"": """"
}"
US-2021236923-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-10315113-B2"",
  ""type"": """"
}"
US-2021236923-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-10376781-B2"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2010279682-A1"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2013136025-A1"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2014313902-A1"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2014335869-A1"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2015382221-A1"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2017195935-A1"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2017208488-A1"",
  ""type"": """"
}"
US-2021172647-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-4313609-A"",
  ""type"": """"
}"
US-2021172647-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-4382460-A"",
  ""type"": """"
}"
US-2021172647-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2016116184-A1"",
  ""type"": """"
}"
US-2021179984-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2012107468-A1"",
  ""type"": """"
}"
US-2021210786-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2006275666-A1"",
  ""type"": """"
}"
US-2021210786-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2009305132-A1"",
  ""type"": """"
}"
US-2021210786-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2016028070-A1"",
  ""type"": """"
}"
US-2021210786-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2016350565-A1"",
  ""type"": """"
}"
US-2021210786-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2023378610-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2013120575-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2015217801-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2019072674-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2019152473-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2019286149-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2019315366-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",

2025-02-12 21:27:44 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:44 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:44 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:45 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:27:45 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:46 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:46 - root - INFO - SQL:
SELECT t."publication_number", f.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
   LIMIT 100;
Results:
publication_number,cited_publication_number
IT-MI20100095-A1,US-5589376-A
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20121273-A1,US-3624729-A
IT-MI20121273-A1,US-3831516-A
IT-MI20121273-A1,US-4106404-A
IT-MI20121273-A1,US-4513659-A
IT-MI20121273-A1,EP-0569695-A2
IT-MI20121273-A1,US-5451415-A
IT-CR20130004-A1,WO-2004058329-A2
IT-CR20130004-A1,WO-2007143676-A2
IT-CR20130004-A1,CN-101695488-B
IT-CR20130004-A1,
IT-UB20159176-A1,US-6721445-B1
IT-UB20159176-A1,WO-2014033433-A1
IT-UB20159176-A1,
IT-UB20159176-A1,
IT-UB20153665-A1,US-3985379-A
IT-UB20153665-A1,US-4037864-A
IT-UB20153665-A1,US-4235461-A
IT-BO20090144-A1,FR-2434081-A1
IT-BO20090144-A1,WO-2007042492-A1
IT-BO20090144-A1,US-2007115141-A1
IT-BO20090144-A1,WO-2007133819-A2
IT-TO20110413-A1,US-5151638-A
IT-TO20110413-A1,US-5777833-A
IT-TO20110413-A1,US-2002093306-A1
IT-TO20110413-A1,US-2005073278-A1
IT-MI20092150-A1,JP-2004010703-A
IT-MI20092150-A1,US-2004147701-A1
IT-MI20092150-A1,
IT-MI20092150-A1,
IT-PD20100207-A1,US-2011575-A
IT-PD20100207-A1,US-2004152035-A1
IT-PD20100207-A1,US-2010003634-A1
IT-PD20100207-A1,US-2010151401-A1
IT-PD20100207-A1,WO-2010076328-A1
IT-MI20081860-A1,WO-9505160-A1
IT-MI20081860-A1,US-5661189-A
IT-MI20081860-A1,FR-2789308-A1
IT-MI20081860-A1,WO-03032943-A1
IT-MI20081860-A1,DE-102005033663-A1
IT-RM20110163-A1,WO-0101832-A1
IT-RM20110163-A1,WO-2004037058-A1
IT-PO20090001-A1,FR-912637-A
IT-PO20090001-A1,DE-856046-C
IT-PO20090001-A1,GB-1476323-A
IT-PO20090001-A1,US-5715642-A
IT-PO20090001-A1,FR-2754837-A1
IT-PO20090001-A1,FR-2807082-A1
IT-PO20090001-A1,DE-202007012570-U1
IT-MO20110165-A1,US-3985127-A
IT-MO20110165-A1,RU-2220676-C2
IT-MO20110165-A1,EP-1857063-A1
IT-MO20110165-A1,US-2010076435-A1
IT-MO20130290-A1,DE-212861-C
IT-MO20130290-A1,WO-9832362-A1
IT-VR20130148-A1,GB-2069305-A
IT-VR20130148-A1,US-5661958-A
IT-VR20130148-A1,GB-2404835-A
IT-VR20130148-A1,US-2007039289-A1
IT-VR20130148-A1,EP-2409565-A1
US-2020372460-A1,US-2009015400-A1
US-2020372460-A1,US-2016379157-A1
US-2020372460-A1,US-10111043-B1
US-2020372460-A1,US-2021043091-A1
US-2020372460-A1,US-2021216958-A1
US-2020372460-A1,US-11222486-B1
US-2020372460-A1,US-2022092532-A1
US-2021265514-A1,US-6313397-B1
US-2021265514-A1,US-2010018576-A1
US-2021265514-A1,US-2013003204-A1
US-2021257383-A1,US-2020006373-A1
US-2020401918-A1,US-2002138455-A1
US-2020401918-A1,US-6996560-B1
US-2020401918-A1,US-2006248057-A1
US-2020401918-A1,US-2007033084-A1
US-2020401918-A1,WO-2007103938-A2
US-2020401918-A1,US-7337158-B2
US-2020401918-A1,US-2009083367-A1
US-2020401918-A1,US-7657523-B2
US-2020401918-A1,US-8538970-B1
US-2020401918-A1,US-8930204-B1
US-2022093492-A1,US-6465892-B1
US-2022093492-A1,US-7078811-B2
US-2022093492-A1,US-7217631-B2
US-2022093492-A1,US-2010233850-A1
US-2022093492-A1,US-8778773-B2
US-2022093492-A1,US-8792034-B2
US-2022093492-A1,US-2014239499-A1
US-2022093492-A1,US-2014284744-A1
US-2022093492-A1,US-8896125-B2

2025-02-12 21:27:46 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:46 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:46 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:47 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:27:47 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:47 - root - INFO - SQL:
SELECT DISTINCT f.value::VARIANT:"code"::STRING AS "ipc_code"
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."ipc") f
   LIMIT 100;
Results:
ipc_code
E01D19/06
G06F17/30
G02B6/34
H01L29/26
G06F1/03
C04B40/00
A63B71/10
G11B7/125
G01N21/94
B60T8/17
B01D3/36
B29C67/24
G06F12/0888
B29C48/355
B32B27/36
C10G70/04
H01M10/6568
B60H3/00
B41J3/407
A23N12/06
B60R16/03
F16H61/16
B60R19/48
F01D17/16
E06B5/16
F16N1/00
G01B5/28
C12M1/02
B08B1/20
G08B13/02
B05B15/25
F04D29/00
E02B7/20
F24F13/15
G01N1/40
A41B11/00
D06M15/00
F25C1/25
C07D403/14
G06F11/30
G06F9/22
H04B7/12
H10N10/856
H04L41/08
G02B27/00
G01S7/4861
A23C19/084
G02B5/128
E04B1/24
F24F1/0035
F02B41/00
F02M61/18
H01Q13/10
F41B5/14
A61F2/44
G09G5/00
G06V30/24
C10L5/44
A23C9/152
C07D401/06
G16H50/80
C09J109/08
C08F120/08
D21F11/08
B22F3/105
A24F40/485
G06Q50/12
A61K31/235
C07D213/82
C07D243/26
C07D233/70
C25D17/06
A61H33/06
A61F13/15
H02K5/04
A01C7/20
B24C3/22
A61K39/116
H04Q11/04
G01S5/00
C07D241/28
C07C51/27
F24D5/00
B60T8/42
B21F9/00
C07C37/055
H05K13/00
H02M7/487
H10N30/80
C09J123/04
G10L15/20
G06F3/0346
C04B14/38
H02J9/04
C07D213/26
F21V15/01
E05F15/00
G09G3/10
G01B9/02
C07J21/00

2025-02-12 21:27:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:48 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:27:48 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:48 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:27:49 - root - INFO - SQL:
SELECT t."publication_number", SUBSTR(f.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."ipc") f
   LIMIT 100;
Results:
publication_number,ipc4_code
CN-214601582-U,B21D
CN-215596566-U,F16L
CN-215863800-U,F24F
CN-215863800-U,F24F
CN-215863800-U,F24F
CN-215863800-U,F24F
CN-215051470-U,D06F
CN-215051470-U,D06F
CN-214626576-U,H02K
CN-215044242-U,B65B
CN-215151019-U,B29L
CN-215151019-U,B29C
CN-214736877-U,D06H
CN-214736877-U,D06H
CN-214660813-U,F04C
CN-214660813-U,F04C
CN-214660813-U,F04C
CN-215198330-U,B07C
CN-215198330-U,B07C
CN-214883725-U,E02D
CN-214883725-U,E02D
CN-214611982-U,C02F
CN-214592184-U,H05K
CN-214592184-U,H05K
CN-214637364-U,B04B
CN-214637364-U,B04B
CN-216414274-U,H03H
CN-216414274-U,H04B
CN-216602367-U,A47G
CN-216602367-U,A47G
CN-215127550-U,A47J
CN-214766819-U,B07B
CN-214766819-U,B07B
CN-214766819-U,B07B
CN-214576726-U,E21B
CN-214576726-U,E21B
CN-214576726-U,E21B
CN-214945514-U,F16B
CN-215265335-U,G09F
CN-215048831-U,C02F
CN-214603948-U,B25B
CN-215149970-U,B27G
CN-215149970-U,B27D
CN-215149970-U,B05C
CN-215149970-U,B05C
CN-215149970-U,B05C
CN-215149970-U,B27G
CN-214513805-U,B01D
CN-214513805-U,B01D
CN-214513805-U,B01D
CN-214531034-U,E03F
CN-214570148-U,B66C
CN-214570148-U,B66C
CN-214554710-U,B05B
CN-214554710-U,B05B
CN-214554710-U,B05B
CN-215006193-U,G03B
CN-214376014-U,G05B
CN-214922825-U,B24B
CN-214922825-U,B24B
CN-214922825-U,B24B
CN-214922825-U,B24B
CN-214922825-U,B24B
CN-214675905-U,H05K
CN-214675905-U,H05K
CN-214538192-U,G01G
CN-214538192-U,G01G
CN-214586427-U,G04D
CN-214586427-U,B08B
CN-214539513-U,G01D
CN-214539513-U,G08C
CN-214539513-U,G01N
CN-214539513-U,G01N
CN-214782126-U,C23C
CN-214782126-U,C23C
CN-214782126-U,C23C
CN-215441279-U,E01C
CN-215441279-U,B01D
CN-215441279-U,F28D
CN-215036629-U,B24D
CN-215820934-U,A61B
CN-215995176-U,B65H
CN-215995176-U,A61M
CN-215995176-U,A61M
CN-214572490-U,D03C
CN-214572490-U,D03C
CN-215210614-U,E01D
CN-215210614-U,E01D
CN-215210614-U,E01D
CN-214627208-U,H04N
CN-214627208-U,G09F
CN-214627208-U,E04H
CN-215311664-U,G01G
CN-215311664-U,G01G
CN-215311664-U,B01F
CN-215311664-U,B01F
CN-215311664-U,B01F
CN-215311664-U,B01F
CN-215311664-U,B08B
CN-214566218-U,B64F

2025-02-12 21:27:49 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:27:49 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:27:49 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:27:50 - snowflake.connector.connection - INFO - closed
2025-02-12 21:27:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:28:31 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:28:31 - root - INFO - I apologize for the confusion. The error occurred because in the SQL query, the alias `c` was used in the `SELECT` clause but was not defined in the `FROM` clause. Here's how you can correct the query:

**Explanation:**

- **Issue:** The alias `c` is not defined in the `FROM` clause, leading to the error: `invalid identifier 'C."cited_publication_number"'`.
- **Solution:** We need to extract the `"cited_publication_number"` directly from the `LATERAL FLATTEN` operation and assign it an alias. Alternatively, we can adjust the query to use the correct references.

**Corrected SQL Query:**

```sql
SELECT 
  t."publication_number", 
  f.value::VARIANT:"publication_number"::STRING AS "cited_publication_number", 
  cp."ipc"
FROM 
  PATENTS.PATENTS.PUBLICATIONS t
JOIN 
  LATERAL FLATTEN(input => t."citation") f ON TRUE
JOIN 
  PATENTS.PATENTS.PUBLICATIONS cp 
    ON f.value::VARIANT:"publication_number"::STRING = cp."publication_number"
LIMIT 100;
```

**Explanation of the Corrected Query:**

- We **removed** the undefined alias `c` and directly extracted `"cited_publication_number"` from `f.value`.
- The alias `f` is used to reference the flattened `citation` array.
- The `f.value::VARIANT:"publication_number"::STRING` extracts the `"publication_number"` from each citation.
- We join the `PUBLICATIONS` table again (aliased as `cp`) to get the `"ipc"` codes of the cited publications.

**Additional Notes:**

- If you want to keep the intermediate step and define `c` properly, you can use a subquery or a `CROSS JOIN LATERAL`. Here's how you can do it:

  ```sql
  SELECT 
    t."publication_number", 
    c."cited_publication_number", 
    cp."ipc"
  FROM 
    PATENTS.PATENTS.PUBLICATIONS t
  CROSS JOIN LATERAL (
    SELECT f.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
    FROM TABLE(FLATTEN(input => t."citation")) f
  ) c
  JOIN 
    PATENTS.PATENTS.PUBLICATIONS cp 
      ON c."cited_publication_number" = cp."publication_number"
  LIMIT 100;
  ```

  In this version:

  - We define `c` as an alias for the result of the `LATERAL` subquery that extracts `"cited_publication_number"`.
  - We use `CROSS JOIN LATERAL` to ensure that we join each row of the main table `t` with its corresponding citations.

**Summary:**

- The error was due to an undefined alias `c`.
- By correctly extracting the `"cited_publication_number"` and adjusting the query, we can fix the error.
- Ensure that all aliases used in the `SELECT` clause are properly defined in the `FROM` clause.

---

### **Answering the Original Task:**

Since we're aiming to compute the originality score for US patents with kind code 'B2' granted between 2015 and 2018, let's outline the steps and provide the SQL query to find the patent with the highest originality score.

**Steps:**

1. **Select US patents with kind code 'B2' granted between 2015 and 2018.**
2. **Extract backward citations for each patent.**
3. **For each cited patent, extract its IPC codes and get the 4-digit IPC codes.**
4. **Count the occurrences of each distinct 4-digit IPC code in the backward citations of each patent.**
5. **Calculate the originality score for each patent.**
6. **Find the patent with the highest originality score.**

**SQL Query:**

```sql
WITH us_b2_patents AS (
  SELECT 
    t."publication_number", 
    t."grant_date"
  FROM 
    PATENTS.PATENTS.PUBLICATIONS t
  WHERE 
    t."country_code" = 'US' AND 
    t."kind_code" = 'B2' AND 
    t."grant_date" BETWEEN 20150101 AND 20181231
), backward_citations AS (
  SELECT 
    t."publication_number" AS citing_publication_number, 
    f.value::VARIANT:"publication_number"::STRING AS cited_publication_number
  FROM 
    us_b2_patents t
  JOIN 
    LATERAL FLATTEN(input => t."citation") f ON TRUE
), cited_ipc_codes AS (
  SELECT 
    bc.citing_publication_number, 
    SUBSTR(ipc_f.value::VARIANT:"code"::STRING, 1, 4) AS ipc4_code
  FROM 
    backward_citations bc
  JOIN 
    PATENTS.PATENTS.PUBLICATIONS cp ON bc.cited_publication_number = cp."publication_number"
  JOIN 
    LATERAL FLATTEN(input => cp."ipc") ipc_f ON TRUE
), originality_calculations AS (
  SELECT 
    citing_publication_number,
    SUM(cnt * cnt) AS sum_sq_occurrences,
    (SUM(cnt)) * (SUM(cnt)) AS total_occurrences_sq,
    1 - (SUM(cnt * cnt))::FLOAT / ((SUM(cnt)) * (SUM(cnt)))::FLOAT AS originality_score
  FROM (
    SELECT 
      citing_publication_number, 
      ipc4_code, 
      COUNT(*) AS cnt
    FROM 
      cited_ipc_codes
    GROUP BY 
      citing_publication_number, ipc4_code
  ) ipc_counts
  GROUP BY 
    citing_publication_number
)
SELECT 
  citing_publication_number AS "Publication_Number", 
  originality_score AS "Originality_Score"
FROM 
  originality_calculations
ORDER BY 
  originality_score DESC
LIMIT 1;
```

**Explanation:**

- **us_b2_patents:** Filters for US patents with kind code 'B2' and grant dates between 2015 and 2018.
- **backward_citations:** Extracts the publication numbers of the cited patents (backward citations).
- **cited_ipc_codes:** Retrieves the 4-digit IPC codes of the cited patents.
- **originality_calculations:** Calculates the originality score for each patent using the formula:

  \[
  \text{Originality Score} = 1 - \frac{\sum (\text{occurrences of each IPC code})^2}{(\text{total occurrences of IPC codes})^2}
  \]

- **Final SELECT:** Retrieves the patent with the highest originality score.

**Note:**

- This query assumes that all required data is present and correctly formatted in the `PUBLICATIONS` table.
- The calculation converts integers to floats to ensure accurate division.
- The result will be in the format:

  ```csv
  Publication_Number,Originality_Score
  patent_number:str,score:float
  (Attention: answer in one row)
  ```

---

### **Final Answer:**

```csv
Publication_Number,Originality_Score
patent_number:str,score:float
(Attention: answer in one row)
```

Since we don't have actual data outputs, placeholders are provided for the publication number and originality score. Running the provided SQL query will yield the US patent (with kind code 'B2' and grant date between 2015 and 2018) that has the highest originality score as per the given calculation.
2025-02-12 21:28:31 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:28:31 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:28:31 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:28:33 - snowflake.connector.connection - INFO - closed
2025-02-12 21:28:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:29:06 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:29:06 - root - INFO - The error you're encountering is due to the way the `LATERAL FLATTEN` function is being used in your `JOIN` statement. In Snowflake SQL, you cannot use a regular `JOIN` with a lateral table function (`LATERAL FLATTEN`) and an `ON` clause. Instead, you should use `CROSS JOIN LATERAL` when joining with table functions like `FLATTEN`.

Here's the corrected SQL query:

```sql
SELECT 
  t."publication_number", 
  f.value::VARIANT:"publication_number"::STRING AS "cited_publication_number", 
  cp."ipc"
FROM 
  PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL 
  FLATTEN(input => t."citation") f
JOIN 
  PATENTS.PATENTS.PUBLICATIONS cp 
    ON f.value::VARIANT:"publication_number"::STRING = cp."publication_number"
LIMIT 100;
```

**Explanation:**

- **CROSS JOIN LATERAL:** Replaces `JOIN LATERAL ... ON TRUE` to correctly join each row of `t` with its corresponding flattened `citation` array.
  - In Snowflake, `CROSS JOIN LATERAL` allows you to join each row from the left table (`t`) with the result of the `LATERAL` table function (`FLATTEN`), without using an `ON` clause.
- **FLATTEN Function:** Unpacks the `citation` array in the `t."citation"` field so that each citation becomes a separate row.
- **JOIN with `cp`:** Joins the cited publications (`cp`) based on the extracted `cited_publication_number`.

By using `CROSS JOIN LATERAL`, you avoid the unsupported syntax of using `JOIN LATERAL ... ON ...`, which is not permitted in Snowflake SQL.

---

**Alternative Approach:**

If you need to perform a `LEFT JOIN` to include all publications, even those without citations or matching IPC codes, you can restructure the query using a subquery. Here's how:

```sql
SELECT 
  t."publication_number", 
  c."cited_publication_number", 
  cp."ipc"
FROM 
  PATENTS.PATENTS.PUBLICATIONS t
LEFT JOIN (
  SELECT 
    t_inner."publication_number" AS "publication_number",
    f.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
  FROM 
    PATENTS.PATENTS.PUBLICATIONS t_inner
  CROSS JOIN LATERAL 
    FLATTEN(input => t_inner."citation") f
) c ON t."publication_number" = c."publication_number"
LEFT JOIN 
  PATENTS.PATENTS.PUBLICATIONS cp 
    ON c."cited_publication_number" = cp."publication_number"
LIMIT 100;
```

**Explanation:**

- **Subquery `c`:** Extracts `cited_publication_number` for each `publication_number` using `CROSS JOIN LATERAL FLATTEN`.
  - We alias `t_inner` to differentiate it from the outer `t`.
- **LEFT JOINs:**
  - The first `LEFT JOIN` ensures all publications from `t` are included, even if they have no citations.
  - The second `LEFT JOIN` includes all cited publications, even if a `cited_publication_number` doesn't exist in the `PUBLICATIONS` table.
- This structure allows for comprehensive data retrieval, including patents without citations or missing IPC codes.

---

**Additional Notes:**

- **Performance Considerations:** When working with large datasets, these queries can become resource-intensive. Applying `LIMIT` helps to manage the output, but consider adding additional filters if necessary.
- **Data Integrity:** Ensure that the `citation` field contains valid JSON data with a `"publication_number"` field. Some citations might be non-patent literature (NPL) and may not have a `publication_number`.
- **Field Existence:** It's a good practice to check if the `publication_number` exists in the `citation` value to prevent null values from causing issues.

---

**General Tips:**

- **Understanding `CROSS JOIN LATERAL`:** In Snowflake, `CROSS JOIN LATERAL` allows each row from the left table to be joined with the result of a table function that depends on that row. This is essential when using functions like `FLATTEN` that expand array or object data.
- **Avoiding Unsupported Syntax:** The error message indicates that certain join patterns are not supported, particularly combining `JOIN LATERAL` with an `ON` clause. Adjusting to `CROSS JOIN LATERAL` resolves this.
- **Testing Queries:** When building complex queries, it can be helpful to test each subcomponent individually to ensure it works as expected before integrating it into a larger query.

---

**Applying to the Original Task:**

If you're working towards calculating the originality score as per your original task, ensure that the joins and data extractions are correctly structured. Here's how you might incorporate the corrected join into your larger query:

```sql
WITH us_b2_patents AS (
  SELECT 
    t."publication_number", 
    t."grant_date"
  FROM 
    PATENTS.PATENTS.PUBLICATIONS t
  WHERE 
    t."country_code" = 'US' AND 
    t."kind_code" = 'B2' AND 
    t."grant_date" BETWEEN 20150101 AND 20181231
),
backward_citations AS (
  SELECT 
    t."publication_number" AS citing_publication_number, 
    f.value::VARIANT:"publication_number"::STRING AS cited_publication_number
  FROM 
    us_b2_patents t
  CROSS JOIN LATERAL 
    FLATTEN(input => t."citation") f
),
cited_ipc_codes AS (
  SELECT 
    bc.citing_publication_number, 
    SUBSTR(ipc_f.value::VARIANT:"code"::STRING, 1, 4) AS ipc4_code
  FROM 
    backward_citations bc
  JOIN 
    PATENTS.PATENTS.PUBLICATIONS cp ON bc.cited_publication_number = cp."publication_number"
  CROSS JOIN LATERAL 
    FLATTEN(input => cp."ipc") ipc_f
),
ipc_counts AS (
  SELECT 
    citing_publication_number, 
    ipc4_code, 
    COUNT(*) AS cnt
  FROM 
    cited_ipc_codes
  GROUP BY 
    citing_publication_number, ipc4_code
),
originality_calculations AS (
  SELECT 
    citing_publication_number AS "Publication_Number",
    1 - (SUM(cnt * cnt)::FLOAT) / ((SUM(cnt)) * (SUM(cnt)))::FLOAT AS "Originality_Score"
  FROM 
    ipc_counts
  GROUP BY 
    citing_publication_number
)
SELECT 
  "Publication_Number", 
  "Originality_Score"
FROM 
  originality_calculations
ORDER BY 
  "Originality_Score" DESC
LIMIT 1;
```

**Explanation:**

- **Adjustments Made:**
  - Changed `JOIN LATERAL` to `CROSS JOIN LATERAL` in the common table expressions (CTEs).
  - Ensured that all joins conform to Snowflake SQL syntax.
- **Originality Calculation:**
  - Calculated using the formula provided: \( 1 - \frac{\sum (\text{occurrences of each IPC code})^2}{(\text{total occurrences of IPC codes})^2} \).
- **Final Selection:**
  - Retrieves the patent with the highest originality score.

**Note:** Replace or adjust any field names or table references as necessary based on your actual schema.

---

Feel free to run the corrected queries and let me know if you need further assistance!
2025-02-12 21:29:06 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:29:06 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:29:06 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:29:07 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:29:07 - snowflake.connector.connection - INFO - closed
2025-02-12 21:29:07 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:30:02 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:30:02 - root - INFO - SQL:
SELECT 
  t."publication_number", 
  f.value::VARIANT:"publication_number"::STRING AS "cited_publication_number", 
  cp."ipc"
FROM 
  PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL 
  FLATTEN(input => t."citation") f
JOIN 
  PATENTS.PATENTS.PUBLICATIONS cp 
    ON f.value::VARIANT:"publication_number"::STRING = cp."publication_number"
LIMIT 100;
Results:
Too long, hard cut:
publication_number,cited_publication_number,ipc
WO-2020064776-A1,US-5705370-A,"[
  {
    ""code"": ""C12R1/15"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""C12R1/13"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""C12N1/21"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C12N1/20"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C12P13/04"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
KR-101804754-B1,KR-200259263-Y1,[]
US-2022280127-A1,US-11246549-B2,"[
  {
    ""code"": ""H05G1/02"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""A61B6/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-4598390-A,US-3942160-A,"[
  {
    ""code"": ""G11C11/4094"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G11C11/406"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G11C11/405"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-2006149939-A1,US-5838984-A,"[
  {
    ""code"": ""G06F17/16"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F15/78"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F9/30"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F12/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F9/318"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F15/16"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
CN-105129474-A,US-5445461-A,"[
  {
    ""code"": ""B26D7/24"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B65H20/16"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B65H35/06"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B65H19/26"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-11802860-B1,US-11215593-B2,"[
  {
    ""code"": ""E21B41/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G08B21/16"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H02S20/10"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G01N33/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""A01K31/14"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-2021239174-A1,US-2265629-A,"[
  {
    ""code"": ""G01G23/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-8636975-B2,US-3980280-A,"[
  {
    ""code"": ""B01F11/02"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-11162596-B1,US-5121595-A,"[
  {
    ""code"": ""A63H27/10"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
KR-20220099935-A,US-2010133923-A1,"[
  {
    ""code"": ""H02K41/035"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-2017060065-A1,US-2010123914-A1,"[
  {
    ""code"": ""H04N1/60"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-9226006-B2,JP-H0744930-Y2,"[
  {
    ""code"": ""F25D21/04"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""F25D3/14"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""F25D3/06"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B65D81/38"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-9399738-B2,US-3993583-A,"[
  {
    ""code"": ""C10J3/54"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B01J8/24"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-6799827-B2,US-6123410-A,"[
  {
    ""code"": ""B41J2/14"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B41J2/05"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B41J2/16"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B41J2/155"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-7976125-B2,US-6123410-A,"[
  {
    ""code"": ""B41J2/14"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B41J2/05"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B41J2/16"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B41J2/155"",
    ""f

2025-02-12 21:30:02 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:30:02 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:30:02 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:30:03 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:30:03 - snowflake.connector.connection - INFO - closed
2025-02-12 21:30:03 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:30:04 - root - INFO - SQL:
SELECT t."publication_number", COUNT(f.value) AS "citation_count"
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
   GROUP BY t."publication_number"
   LIMIT 100;
Results:
publication_number,citation_count
US-10791628-B2,16
US-11639882-B2,2
US-11578901-B2,32
US-12000319-B2,12
JP-3298935-B2,3
AU-2012283387-B2,1
JP-6992160-B2,7
JP-7122388-B2,3
DE-10145463-B4,1
US-2649182-A,8
US-2432303-A,2
US-2467872-A,3
US-2838702-A,2
US-2993227-A,9
US-2810822-A,3
US-2664858-A,7
US-4061640-A,4
US-4112104-A,1
US-4149514-A,8
US-4105244-A,9
US-4379289-A,14
US-4530169-A,2
US-4954237-A,10
US-4708429-A,5
US-3948647-A,2
US-4801344-A,19
US-4817692-A,9
US-5235613-A,18
US-2785097-A,3
JP-H01244109-A,3
JP-S5230990-A,2
US-4688271-A,4
US-5125280-A,5
US-5398904-A,6
US-5815740-A,12
US-5892034-A,19
US-5872032-A,15
JP-H0813815-A,4
JP-H06457-A,1
JP-H0843057-A,9
JP-S6169233-A,1
JP-S61145204-A,1
US-5238165-A,16
US-10868012-B2,7
US-11570601-B2,125
DE-102018133394-B4,11
RU-2625675-C1,6
RU-2439005-C2,1
JP-S575493-Y2,2
JP-S6238623-Y2,2
RU-2682615-C1,8
US-11006567-B2,17
US-10775929-B2,21
US-11032628-B2,79
US-11718439-B2,24
US-11665400-B2,31
JP-H0828963-B2,1
AU-2015265241-B2,3
JP-4602838-B2,6
JP-4534967-B2,6
JP-5600254-B2,2
JP-7142175-B2,11
RU-2389732-C2,2
DE-102006001406-B4,3
DE-202008018655-U1,3
JP-S6227343-Y2,1
DE-4208912-C1,3
RU-2738104-C1,5
US-2023270247-A1,10
US-2023040852-A1,9
US-2023077066-A1,7
EP-0672179-A1,1
EP-0841246-A1,2
EP-1612525-A1,2
EP-2010606-A1,1
EP-3340589-A1,3
EP-4016453-A1,9
JP-WO2006132351-A1,1
JP-WO2021112138-A1,6
DE-102008058042-A1,4
DE-102010050223-A1,8
DE-102020117796-A1,3
WO-2022266703-A1,7
WO-2019214997-A1,5
WO-2022013713-A1,5
WO-2019171941-A1,5
WO-2021124462-A1,4
WO-2022064954-A1,5
WO-2022225689-A1,3
WO-2024092204-A1,4
EP-0090207-A3,5
EP-1029433-A3,6
EP-3469084-A4,9
US-6782009-B1,9
US-8713631-B1,16
EP-3390416-B1,1
JP-7179911-B1,6
KR-100760811-B1,3
KR-101069457-B1,4
KR-101168608-B1,1

2025-02-12 21:30:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:30:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:30:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:30:05 - snowflake.connector.connection - INFO - closed
2025-02-12 21:30:05 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:30:33 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:30:33 - root - INFO - Certainly! The error you're encountering is due to the way the `LATERAL FLATTEN` function is being used in your SQL query. In Snowflake SQL, you cannot use `JOIN LATERAL` with an `ON` clause. Instead, you should use `CROSS JOIN LATERAL` when joining with table functions like `FLATTEN`.

Here's the corrected SQL query:

```sql
SELECT 
  c."cited_publication_number", 
  SUBSTR(fi.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
FROM (
  SELECT 
    fc.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
  FROM 
    PATENTS.PATENTS.PUBLICATIONS t
  CROSS JOIN LATERAL 
    FLATTEN(input => t."citation") fc
  WHERE 
    t."publication_number" = 'US1234567B2'
) c
JOIN 
  PATENTS.PATENTS.PUBLICATIONS cp 
    ON c."cited_publication_number" = cp."publication_number"
CROSS JOIN LATERAL 
  FLATTEN(input => cp."ipc") fi
LIMIT 100;
```

**Explanation:**

- **Use of `CROSS JOIN LATERAL`:** In both the subquery and the outer query, replace the comma `,` and `JOIN LATERAL` syntax with `CROSS JOIN LATERAL`. This is necessary because Snowflake SQL does not support `JOIN LATERAL` with an `ON` clause or join predicate. The `CROSS JOIN LATERAL` syntax correctly joins each row with the result of the lateral function.

- **Aliasing the `FLATTEN` Functions:**
  - In the subquery:
    - Changed the alias from `f` to `fc` for clarity (flattening citations).
    - This avoids confusion with other aliases and ensures that each alias is unique.
  - In the outer query:
    - Changed the alias from `f` to `fi` (flattening IPC codes).
    - Again, this avoids conflicts and maintains clarity.

- **Removal of `ON TRUE`:** When using `CROSS JOIN LATERAL`, there is no need (and it's not allowed) to include an `ON` clause. The `CROSS JOIN LATERAL` inherently applies the function to each row of the left-hand table.

**Structure of the Corrected Query:**

- **Subquery (`c`):**

  - Retrieves the `"cited_publication_number"` by flattening the `"citation"` array for the specific patent `'US1234567B2'`.
  - Uses `CROSS JOIN LATERAL` to properly flatten the `"citation"` field.

- **Main Query:**

  - Joins the cited publications (`cp`) on the matching `"publication_number"`.
  - Uses `CROSS JOIN LATERAL` to flatten the `"ipc"` array of the cited publications.
  - Extracts the 4-digit IPC code using `SUBSTR`.

**Why This Correction Works:**

- **Compliance with Snowflake SQL Syntax:**

  - Snowflake requires the use of `CROSS JOIN LATERAL` when joining a table function like `FLATTEN` without any join predicates.
  - The error you encountered was due to the unsupported syntax of `JOIN LATERAL ... ON TRUE`.

- **Avoiding Alias Conflicts:**

  - By renaming aliases (`fc` and `fi`), we prevent any potential conflicts or confusion between different parts of the query that might use the same alias name.

**Additional Notes:**

- **Consistency in Aliases:**

  - It's important to maintain unique and meaningful aliases, especially when dealing with multiple `FLATTEN` functions in nested queries.

- **Performance Considerations:**

  - Be cautious when running such queries on large datasets, as flattening operations can be resource-intensive.

**Example Usage:**

If you want to retrieve the distinct 4-digit IPC codes from the backward citations of a specific patent (in this case, `'US1234567B2'`), this corrected query will accomplish that without encountering the previous error.

---

**General Tip:**

When using `FLATTEN` or other table functions in Snowflake, always use `CROSS JOIN LATERAL` or `LEFT JOIN LATERAL` (if you need to include rows where the function returns no results). Avoid using `JOIN LATERAL ... ON ...`, as it's not supported in Snowflake.

---

Let me know if you have any more questions or need further assistance!
2025-02-12 21:30:33 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:30:33 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:30:33 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:30:35 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-02-12 21:30:35 - snowflake.connector.connection - INFO - closed
2025-02-12 21:30:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:31:00 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:31:00 - root - INFO - ```sql
SELECT 
  c."cited_publication_number", 
  SUBSTR(fi.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
FROM (
  SELECT 
    fc.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
  FROM 
    PATENTS.PATENTS.PUBLICATIONS t
  CROSS JOIN LATERAL 
    FLATTEN(input => t."citation") fc
  LIMIT 100
) c
JOIN 
  PATENTS.PATENTS.PUBLICATIONS cp 
    ON c."cited_publication_number" = cp."publication_number"
CROSS JOIN LATERAL 
  FLATTEN(input => cp."ipc") fi
LIMIT 100;
```
2025-02-12 21:31:00 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:31:00 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:31:00 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:31:01 - snowflake.connector.cursor - INFO - Number of results in first chunk: 8
2025-02-12 21:31:01 - snowflake.connector.connection - INFO - closed
2025-02-12 21:31:02 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:31:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:31:39 - root - INFO - SQL:
SELECT 
  c."cited_publication_number", 
  SUBSTR(fi.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
FROM (
  SELECT 
    fc.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
  FROM 
    PATENTS.PATENTS.PUBLICATIONS t
  CROSS JOIN LATERAL 
    FLATTEN(input => t."citation") fc
  LIMIT 100
) c
JOIN 
  PATENTS.PATENTS.PUBLICATIONS cp 
    ON c."cited_publication_number" = cp."publication_number"
CROSS JOIN LATERAL 
  FLATTEN(input => cp."ipc") fi
LIMIT 100;
Results:
cited_publication_number,ipc4_code
US-2008037721-A1,H04M
US-2017079328-A1,A24F
US-2017079328-A1,A24F
US-2017079328-A1,A24F
US-2017079328-A1,B65D
US-2017079328-A1,A61M
US-2017079328-A1,G06K
US-2017079328-A1,F16L

2025-02-12 21:31:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:31:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:31:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:31:40 - snowflake.connector.connection - INFO - closed
2025-02-12 21:31:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:31:54 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:31:54 - root - INFO - ```sql
SELECT DISTINCT SUBSTR(fi.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
FROM (
  SELECT 
    fc.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
  FROM 
    PATENTS.PATENTS.PUBLICATIONS t
  CROSS JOIN LATERAL 
    FLATTEN(input => t."citation") fc
  WHERE 
    t."publication_number" = 'US1234567B2'
) c
JOIN 
  PATENTS.PATENTS.PUBLICATIONS cp 
    ON c."cited_publication_number" = cp."publication_number"
CROSS JOIN LATERAL 
  FLATTEN(input => cp."ipc") fi
LIMIT 100;
```
2025-02-12 21:31:54 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:31:54 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:31:54 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:31:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-02-12 21:31:55 - snowflake.connector.connection - INFO - closed
2025-02-12 21:31:56 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:32:51 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:32:51 - root - INFO - ```sql
SELECT DISTINCT SUBSTR(fi.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") fc
JOIN PATENTS.PATENTS.PUBLICATIONS cp ON fc.value::VARIANT:"publication_number"::STRING = cp."publication_number"
CROSS JOIN LATERAL FLATTEN(input => cp."ipc") fi
LIMIT 100;
```
2025-02-12 21:32:51 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:32:51 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:32:51 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:32:52 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:32:52 - snowflake.connector.connection - INFO - closed
2025-02-12 21:32:52 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:33:25 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:33:25 - root - INFO - SQL:
SELECT DISTINCT SUBSTR(fi.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") fc
JOIN PATENTS.PATENTS.PUBLICATIONS cp ON fc.value::VARIANT:"publication_number"::STRING = cp."publication_number"
CROSS JOIN LATERAL FLATTEN(input => cp."ipc") fi
LIMIT 100;
Results:
ipc4_code
B60L
F26B
C12R
E04C
G05G
H01P
B67B
D01D
B64F
B60H
H01F
B66D
C23F
G03F
D06M
B23P
A44B
F24S
B41C
F16F
B29L
F28G
D21H
H02P
B66C
H01H
C22C
F01L
C08G
G21C
E03C
F41A
B09B
A61F
H04M
B23D
G02F
C10N
B03D
F16S
A61G
A46D
G01B
A22C
A01M
B28D
A23C
B66B
B27B
F21L
B09C
A47J
B03C
A47D
C09K
B04B
A01F
D21G
H01B
C01F
G01Q
H04K
F25C
C10J
D06B
B60R
F42D
F16J
E01B
C07F
C07D
G09G
C12P
H04R
B08B
E01F
F22B
C14B
E04B
B60T
B60C
A47B
E01C
F21Y
G11C
B60S
H03B
G12B
G06F
A23F
B65H
C12Q
D06F
B25G
C08H
H01C
C07C
H02M
F02D
B60B

2025-02-12 21:33:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:33:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:33:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:33:26 - snowflake.connector.connection - INFO - closed
2025-02-12 21:33:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:33:48 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:33:48 - root - INFO - ```sql
SELECT SUBSTR(fi.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code", COUNT(*) AS "occurrences"
FROM (
  SELECT 
    fc.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
  FROM 
    PATENTS.PATENTS.PUBLICATIONS t
  CROSS JOIN LATERAL 
    FLATTEN(input => t."citation") fc
  LIMIT 100
) c
JOIN 
  PATENTS.PATENTS.PUBLICATIONS cp 
    ON c."cited_publication_number" = cp."publication_number"
CROSS JOIN LATERAL 
  FLATTEN(input => cp."ipc") fi
GROUP BY 
  "ipc4_code"
LIMIT 100;
```
2025-02-12 21:33:48 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:33:48 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:33:48 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:33:50 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-02-12 21:33:50 - snowflake.connector.connection - INFO - closed
2025-02-12 21:33:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:34:11 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:34:11 - root - INFO - ```sql
SELECT SUBSTR(fi.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code", COUNT(*) AS "occurrences"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") fc
JOIN PATENTS.PATENTS.PUBLICATIONS cp ON fc.value::VARIANT:"publication_number"::STRING = cp."publication_number"
CROSS JOIN LATERAL FLATTEN(input => cp."ipc") fi
GROUP BY "ipc4_code"
LIMIT 100;
```
2025-02-12 21:34:11 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:34:11 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:34:11 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:34:12 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:34:12 - snowflake.connector.connection - INFO - closed
2025-02-12 21:34:12 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:34:40 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:34:40 - root - INFO - SQL:
SELECT SUBSTR(fi.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code", COUNT(*) AS "occurrences"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") fc
JOIN PATENTS.PATENTS.PUBLICATIONS cp ON fc.value::VARIANT:"publication_number"::STRING = cp."publication_number"
CROSS JOIN LATERAL FLATTEN(input => cp."ipc") fi
GROUP BY "ipc4_code"
LIMIT 100;
Results:
ipc4_code,occurrences
A61G,15
A46D,2
G05G,1
B60L,25
B67B,2
E04C,5
D01D,6
H01P,5
F26B,13
C12R,7
C03C,12
G21K,5
F16M,15
C09J,53
E06B,24
B61L,6
H04Q,18
F25J,5
G02C,7
C10G,27
A01C,12
A43D,1
A23N,3
B62K,1
C21C,6
F41J,1
F16F,24
B29L,7
D21H,7
F28G,2
F03D,17
G01C,40
B04C,3
F02B,42
A63C,4
A47J,34
B03C,7
B09C,8
A47D,1
G01B,58
A01M,8
B66B,7
A22C,5
A23C,6
B28D,7
B27B,1
F21L,1
G06N,39
H04J,23
E04D,5
A43C,2
D07B,2
C12M,1
F23B,1
A47C,20
B23B,14
B65B,23
G01L,18
A62B,7
E02B,7
A62D,7
G07B,4
F27B,3
G06Q,232
B25H,3
H01Q,53
E02F,1
C05G,6
F01B,1
H02K,59
C23C,98
G08B,23
B23C,7
A42B,4
F16G,5
G01J,10
A01J,2
G21F,3
E05F,9
B01D,145
H03K,31
G07C,16
B29B,14
F02P,6
B31B,1
F04F,1
A61F,247
B23D,18
H04M,88
G02F,98
B03D,1
C10N,30
F16S,1
C10M,29
C01B,42
C09C,7
E05D,4
D01H,1
F23L,5
G01G,3

2025-02-12 21:34:40 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:34:40 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:34:40 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:34:41 - snowflake.connector.connection - INFO - closed
2025-02-12 21:34:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:35:01 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:35:01 - root - INFO - ```sql
SELECT t."publication_number", SUBSTR(f.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."ipc") f
WHERE t."country_code" = 'US' AND t."kind_code" = 'B2'
LIMIT 100;
```
2025-02-12 21:35:01 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:35:01 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:35:01 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:35:02 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:35:02 - snowflake.connector.connection - INFO - closed
2025-02-12 21:35:02 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:35:27 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:35:27 - root - INFO - SQL:
SELECT t."publication_number", SUBSTR(f.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."ipc") f
WHERE t."country_code" = 'US' AND t."kind_code" = 'B2'
LIMIT 100;
Results:
publication_number,ipc4_code
US-8210142-B2,F01L
US-8338035-B2,H01M
US-8609829-B2,C07H
US-8609829-B2,C12Q
US-8240274-B2,A01K
US-8904292-B2,G06Q
US-8904292-B2,G06F
US-8480325-B2,A46B
US-8480325-B2,A46B
US-8480325-B2,A46B
US-8480325-B2,A46B
US-8480325-B2,A46B
US-9028758-B2,G01N
US-9028758-B2,G01N
US-9028758-B2,B04C
US-9028758-B2,G01N
US-9028758-B2,B04C
US-8462223-B2,H04N
US-8462223-B2,G06K
US-7944609-B2,G02B
US-10236950-B2,H04W
US-10236950-B2,H04L
US-10236950-B2,H04L
US-10236950-B2,H04B
US-8733262-B2,D05B
US-8248448-B2,H04M
US-8590235-B2,E04F
US-8086194-B2,H04B
US-8086194-B2,H04B
US-8086194-B2,H04B
US-8086194-B2,H04L
US-8086194-B2,H04L
US-8086194-B2,H04B
US-8086194-B2,H04L
US-8086194-B2,H04M
US-8086194-B2,H04B
US-8086194-B2,H04L
US-8086194-B2,H04L
US-8086194-B2,H04B
US-8086194-B2,H04J
US-8086194-B2,H04L
US-8086194-B2,H04B
US-9143515-B2,G11B
US-9143515-B2,H04L
US-9143515-B2,H04L
US-9143515-B2,G06F
US-9143515-B2,H04W
US-9143515-B2,H04W
US-9143515-B2,H04W
US-8587485-B2,H01Q
US-8383945-B2,H02G
US-8246716-B2,C21C
US-8246716-B2,C21B
US-8246716-B2,C21B
US-8246716-B2,C01F
US-8246716-B2,C21C
US-8246716-B2,C23G
US-8915088-B2,F02C
US-8915088-B2,F02C
US-8915088-B2,F02C
US-8915088-B2,F02C
US-8915088-B2,F02C
US-8644322-B2,H04L
US-8967144-B2,A61M
US-8967144-B2,A61M
US-8967144-B2,A61M
US-8967144-B2,A62B
US-8967144-B2,A61N
US-8967144-B2,A61N
US-8967144-B2,A61M
US-8967144-B2,A61H
US-8967144-B2,A61M
US-8500357-B2,F16B
US-8480874-B2,B31B
US-8480874-B2,G01N
US-8707381-B2,G10L
US-8707381-B2,H04N
US-8707381-B2,G10L
US-8707381-B2,G10L
US-8707381-B2,H04N
US-9038000-B2,G06Q
US-9038000-B2,G06F
US-8777568-B2,F01D
US-8349603-B2,C12M
US-8508509-B2,G06F
US-9144476-B2,A61C
US-9144476-B2,A61C
US-9144476-B2,A46B
US-9144476-B2,A61C
US-9144476-B2,A46B
US-8739403-B2,H01R
US-8381946-B2,B65D
US-8381946-B2,B65D
US-8573754-B2,H03H
US-8573754-B2,B05C
US-8573754-B2,B41J
US-8573754-B2,B41J
US-8573754-B2,H03H
US-8573754-B2,H10N
US-8573754-B2,H10N

2025-02-12 21:35:27 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:35:27 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:35:27 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:35:29 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:35:29 - snowflake.connector.connection - INFO - closed
2025-02-12 21:35:29 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:35:29 - root - INFO - SQL:
SELECT t."publication_number", COUNT(f.value) AS "total_citations"
    FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
    WHERE t."country_code" = 'US' AND t."kind_code" = 'B2' AND t."grant_date" BETWEEN 20150101 AND 20181231
    GROUP BY t."publication_number"
    LIMIT 100;
Results:
publication_number,total_citations
US-9181681-B2,15
US-10121264-B2,33
US-10116352-B2,16
US-9157491-B2,13
US-9207691-B2,4
US-9068247-B2,30
US-9087924-B2,41
US-10121790-B2,13
US-9459437-B2,15
US-9119720-B2,112
US-9585927-B2,10
US-9447712-B2,23
US-9216062-B2,9
US-10075826-B2,14
US-8928823-B2,1
US-9232163-B2,11
US-10064731-B2,29
US-9166674-B2,7
US-10015072-B2,5
US-10155928-B2,22
US-10134165-B2,13
US-9258696-B2,22
US-10094379-B2,20
US-10079751-B2,21
US-9503862-B2,7
US-8997705-B2,14
US-10119697-B2,9
US-9376833-B2,16
US-9124016-B2,6
US-10070538-B2,22
US-9081290-B2,43
US-9143515-B2,15
US-8981843-B2,14
US-9169941-B2,14
US-9499521-B2,303
US-9141212-B2,8
US-9359468-B2,9
US-9483346-B2,134
US-9650743-B2,23
US-9279991-B2,22
US-9308847-B2,14
US-8994331-B2,31
US-10078378-B2,4
US-10137049-B2,12
US-10036488-B2,40
US-9028637-B2,4
US-9026162-B2,72
US-9302877-B2,12
US-9011636-B2,26
US-10112826-B2,5
US-8996479-B2,15
US-9632295-B2,60
US-9300877-B2,21
US-9474616-B2,144
US-9452411-B2,5
US-8933524-B2,20
US-9146908-B2,20
US-10136806-B2,10
US-9150564-B2,222
US-9291582-B2,2
US-9322880-B2,21
US-9270639-B2,34
US-10142276-B2,231
US-9277390-B2,39
US-9084483-B2,11
US-10040376-B2,5
US-9562348-B2,8
US-8964230-B2,10
US-10144495-B2,4
US-9404543-B2,6
US-9245361-B2,20
US-9160809-B2,230
US-8954157-B2,13
US-9527297-B2,22
US-9100914-B2,7
US-9534310-B2,16
US-9297098-B2,22
US-9106422-B2,187
US-9166782-B2,20
US-8944695-B2,30
US-9344698-B2,18
US-9505537-B2,36
US-9309435-B2,146
US-9254730-B2,16
US-9412846-B2,12
US-9335448-B2,9
US-10152369-B2,9
US-9529903-B2,40
US-8971612-B2,226
US-9160895-B2,15
US-8953633-B2,33
US-9466467-B2,12
US-10079102-B2,5
US-9185094-B2,140
US-9280023-B2,12
US-9356222-B2,6
US-9182815-B2,149
US-9448946-B2,333
US-9233779-B2,10
US-9436209-B2,7

2025-02-12 21:35:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:35:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:35:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:35:30 - snowflake.connector.connection - INFO - closed
2025-02-12 21:35:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:35:47 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:35:47 - root - INFO - ```sql
SELECT t."publication_number", 
       SUBSTR(f2.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code", 
       COUNT(*) AS "occurrences"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") f1
JOIN PATENTS.PATENTS.PUBLICATIONS cp ON f1.value::VARIANT:"publication_number"::STRING = cp."publication_number"
CROSS JOIN LATERAL FLATTEN(input => cp."ipc") f2
GROUP BY t."publication_number", "ipc4_code"
LIMIT 100;
```
2025-02-12 21:35:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:35:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:35:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:35:48 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 21:35:48 - snowflake.connector.connection - INFO - closed
2025-02-12 21:35:48 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:35:58 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:36:24 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:36:24 - root - INFO - SQL:
SELECT t."publication_number", 
       SUBSTR(f2.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code", 
       COUNT(*) AS "occurrences"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") f1
JOIN PATENTS.PATENTS.PUBLICATIONS cp ON f1.value::VARIANT:"publication_number"::STRING = cp."publication_number"
CROSS JOIN LATERAL FLATTEN(input => cp."ipc") f2
GROUP BY t."publication_number", "ipc4_code"
LIMIT 100;
Results:
publication_number,ipc4_code,occurrences
US-2006198446-A1,H04N,1
US-2009039418-A1,H10B,1
CN-107449018-B,E04F,1
US-2006189901-A1,A61N,1
CN-113614573-B,G01S,1
JP-2008184694-A,D04B,1
AU-650819-B2,G06K,1
WO-2020025576-A1,C12N,1
US-8279165-B2,H01L,3
US-2010215346-A1,G11B,7
US-12066647-B2,G02B,1
US-8878950-B2,G02B,4
WO-2020115607-A3,F16L,1
DE-102009007947-A1,H01L,2
US-5303288-A,H04M,4
US-8440053-B2,C09J,1
JP-2001359018-A,H04M,1
CN-102830968-A,G06F,1
US-11157517-B2,G06Q,1
JP-2014078116-A,G09G,1
EP-2267549-A1,B82B,1
US-6246092-B1,H01L,6
US-11442822-B1,G06F,2
WO-2019242081-A1,G01S,1
US-3856072-A,B60J,1
CN-113776473-A,G01B,2
CN-113721260-B,G01C,1
US-4074776-A,E02D,1
US-8732743-B2,G11B,1
US-8186416-B2,B22C,3
JP-2009174175-A,F16K,3
US-2022027967-A1,G06Q,1
US-2022027967-A1,G06F,1
JP-4746874-B2,B22D,1
US-11123443-B2,A61K,10
CN-105300862-A,G01N,1
JP-6878711-B1,D04H,1
CN-109814691-A,G12B,1
CN-107633653-A,A61B,5
US-11573539-B1,E03D,1
CN-115005794-A,A61B,3
CN-106562565-A,A47B,2
DE-102016002636-A1,G02B,1
WO-2018196232-A1,B25J,1
CN-104997501-A,A61B,2
CN-105159504-A,G06F,1
FR-3031517-A1,C08G,2
KR-101042272-B1,E02D,2
US-10872778-B2,C23F,1
KR-102236955-B1,H02P,1
CN-102073149-B,G02C,4
CN-102073149-B,B29L,1
US-2010002669-A1,H04L,1
JP-2015178100-A,B09B,1
US-5650398-A,A61K,3
CN-103185129-A,F16H,1
KR-102281651-B1,B60W,2
US-11056344-B2,C23F,1
JP-4643521-B2,B41J,1
CN-107199613-A,A62D,2
CN-108157587-A,A23K,5
CN-107163979-A,C10G,2
CN-107761125-A,C02F,2
WO-2014063800-A1,G07C,1
WO-2014063800-A1,B60W,1
US-2006115184-A1,G06T,3
US-10615444-B2,H01L,1
US-11092368-B2,F25B,4
CN-107632294-A,G01S,1
CN-106153646-B,G01T,1
DE-102006000312-B4,G01L,1
US-9522312-B2,A63B,2
KR-101038786-B1,F16C,2
KR-100437290-B1,H01L,4
CN-109533104-A,B62H,1
US-8817527-B2,C09K,1
US-8779798-B2,C09K,1
US-10559695-B2,C09K,1
KR-102646494-B1,G05B,2
KR-20220024265-A,A61B,1
US-2017126311-A1,H04W,4
CN-109740298-B,G06F,1
JP-H02177666-A,H04N,2
US-8572389-B2,H04L,7
US-8510602-B2,G06F,1
US-10793182-B2,H02K,1
US-10744347-B2,H10N,1
KR-20150039485-A,H10K,1
US-11125058-B2,E21B,5
US-2006016752-A1,C07D,1
US-2707037-A,B60K,1
US-9175419-B2,H01L,4
CN-103490238-A,H01H,2
WO-2023111180-A1,C40B,1
JP-WO2006022173-A1,A23G,3
JP-2014153763-A,G06T,1
CN-105252891-A,B41F,1
US-11809692-B2,G06K,3
KR-20210120521-A,B25G,2
CN-102528808-A,G06K,2

2025-02-12 21:36:24 - root - INFO - itercount: 0
2025-02-12 21:36:24 - root - INFO - Database Name: PATENTS
Schema Name: PATENTS
,0
table_name,DISCLOSURES_13
description,
DDL,"create or replace TABLE DISCLOSURES_13 (
	""family_id"" VARCHAR(16777216),
	""record_id"" VARCHAR(16777216),
	""disclosure_event"" VARCHAR(16777216),
	""sso"" VARCHAR(16777216),
	""patent_owner_harmonized"" VARCHAR(16777216),
	""patent_owner_unharmonized"" VARCHAR(16777216),
	""date"" NUMBER(38,0),
	""standard"" VARCHAR(16777216),
	""committee_project"" VARCHAR(16777216),
	""tc_name"" VARCHAR(16777216),
	""sc_name"" VARCHAR(16777216),
	""wg_name"" VARCHAR(16777216),
	""licensing_commitment"" VARCHAR(16777216),
	""copyright"" VARCHAR(16777216),
	""blanket_type"" VARCHAR(16777216),
	""blanket_scope"" VARCHAR(16777216),
	""third_party"" VARCHAR(16777216),
	""reciprocity"" VARCHAR(16777216),
	""serial_cleaned"" VARCHAR(16777216),
	""pub_cleaned"" VARCHAR(16777216)
);"

Database Name: PATENTS
Schema Name: PATENTS
,1
table_name,PUBLICATIONS
description,
DDL,"create or replace TABLE PUBLICATIONS (
	""publication_number"" VARCHAR(16777216),
	""application_number"" VARCHAR(16777216),
	""country_code"" VARCHAR(16777216),
	""kind_code"" VARCHAR(16777216),
	""application_kind"" VARCHAR(16777216),
	""application_number_formatted"" VARCHAR(16777216),
	""pct_number"" VARCHAR(16777216),
	""family_id"" VARCHAR(16777216),
	""spif_publication_number"" VARCHAR(16777216),
	""spif_application_number"" VARCHAR(16777216),
	""title_localized"" VARIANT,
	""abstract_localized"" VARIANT,
	""claims_localized"" VARIANT,
	""claims_localized_html"" VARIANT,
	""description_localized"" VARIANT,
	""description_localized_html"" VARIANT,
	""publication_date"" NUMBER(38,0),
	""filing_date"" NUMBER(38,0),
	""grant_date"" NUMBER(38,0),
	""priority_date"" NUMBER(38,0),
	""priority_claim"" VARIANT,
	""inventor"" VARIANT,
	""inventor_harmonized"" VARIANT,
	""assignee"" VARIANT,
	""assignee_harmonized"" VARIANT,
	""examiner"" VARIANT,
	""uspc"" VARIANT,
	""ipc"" VARIANT,
	""cpc"" VARIANT,
	""fi"" VARIANT,
	""fterm"" VARIANT,
	""locarno"" VARIANT,
	""citation"" VARIANT,
	""parent"" VARIANT,
	""child"" VARIANT,
	""entity_status"" VARCHAR(16777216),
	""art_unit"" VARCHAR(16777216)
);"

Database Name: PATENTS
Schema Name: PATENTS
,2
table_name,CPC_DEFINITION
description,
DDL,"create or replace TABLE CPC_DEFINITION (
	""applicationReferences"" VARIANT,
	""breakdownCode"" BOOLEAN,
	""childGroups"" VARIANT,
	""children"" VARIANT,
	""dateRevised"" FLOAT,
	""definition"" VARIANT,
	""glossary"" VARIANT,
	""informativeReferences"" VARIANT,
	""ipcConcordant"" VARCHAR(16777216),
	""level"" FLOAT,
	""limitingReferences"" VARIANT,
	""notAllocatable"" BOOLEAN,
	""parents"" VARIANT,
	""precedenceLimitingReferences"" VARIANT,
	""residualReferences"" VARIANT,
	""rules"" VARIANT,
	""scopeLimitingReferences"" VARIANT,
	""status"" VARCHAR(16777216),
	""symbol"" VARCHAR(16777216),
	""synonyms"" VARIANT,
	""titleFull"" VARCHAR(16777216),
	""titlePart"" VARIANT
);"

External knowledge that might be helpful: 
### IPC Codes: Handling Main IPC Code Selection

When dealing with the `ipc` field in the `patents-public-data.patents.publications` dataset, it is important to understand the structure of this field, especially the subfield `first`. This subfield is a boolean that indicates whether a given IPC code is the main code for the publication number in question. This is crucial because each patent publication can be associated with multiple IPC codes, signifying the various aspects of the technology covered by the patent.

However, not every publication in the dataset has a designated main IPC code. This lack of a clearly identified main IPC code complicates the process of determining the most relevant IPC code for each publication, as selecting a single IPC code from multiple possibilities without clear prioritization can lead to inconsistent or skewed analyses.

This approach ensures a more consistent and representative selection of IPC codes across the dataset, facilitating more accurate and meaningful analysis of patent trends and classifications. By focusing on the most frequently occurring 4-digit IPC code, the view helps overcome the limitations posed by the absence of a designated main IPC code, thereby enhancing the reliability of patent-related studies and insights derived from this data.

Here is an example

```
SELECT 
    t1.publication_number, 
    SUBSTR(ipc_u.code, 0, 4) as ipc4, 
    COUNT(
    SUBSTR(ipc_u.code, 0, 4)
    ) as ipc4_count 
FROM 
    `patents-public-data.patents.publications` t1, 
    UNNEST(ipc) AS ipc_u 
GROUP BY 
    t1.publication_number, 
    ipc4

```



# Text Embeddings (Similarity)

Patent documents are rich with textual data. In fact, most of the information contained in a patent document is text. This includes the `abstract_localized`, `description_localized`, and `claims_localized`. Textual data can be a powerful tool to analyze and compare patent scope and content across patents. However, before being able to use textual data, it needs to be vectorized or transformed into text embeddings that can be used by machine learning models. Therefore, creating text embeddings from the textual data of patents is necessary to compare patent contents. Technically speaking, running an NLP algorithm that creates embeddings for all U.S. patents is computationally difficult.

Nevertheless, Google runs their own machine learning algorithm which transforms patent text metadata into text embeddings which they report in `patents-public-data.google_patents_research.publications` table. The textual embeddings of one patent, without any knowledge on the algorithm being used to create them, are meaningless on their own. However, the embeddings are powerful when it comes to comparing textual content of two or more patents. Embeddings can be used to calculate a similarity score between any two patents. This similarity score is calculated by applying the dot product of the embeddings vector of the patents, as shown below:

The similarity \( \text{Similarty}_{i,k} \) between two patents \( i \) and \( k \) is calculated as the dot product of their embedding vectors:

\[
\text{Similarty}_{i,k} = \mathbf{v}_i \cdot \mathbf{v}_k
\]

where

\[
\mathbf{v}_i = [v_{i1}, v_{i2}, v_{i3}, \ldots, v_{iN}]
\]
and
\[
\mathbf{v}_k = [v_{k1}, v_{k2}, v_{k3}, \ldots, v_{kN}]
\]

are the embedding vectors for patents \( i \) and \( k \) respectively. The higher the dot product, the more similar the patents.





# Originality (Trajtenberg)

One of the most important measures of a patent is "basicness". The aspects of basicness are tough to measure. Nevertheless, some literature finds that important aspects of these measures are embodied in the relationship between the invention and the technological predcessors and successors it is connected to through, for example, patent citations. We can thus use patent citations to construct measures that identify basicness and appropriability. Trajtenberg et al. 1997 provide a number of these measures. They distinguish between:

1. Forward-looking measures: measures that are derived from the relationship between an invention and subsequent technologies that build upon it. These measures are thus constructed from the forward citations. One example of a forward-looking basicness measure they provide is Generality, which is calculated as:

\[
\text{GENERALITY}_i = 1 - \sum_{k=1}^{N_i} \left( \frac{\text{NCITING}_{G_k}}{\text{NCITING}_i} \right)
\]


2. Backward-looking measures: measures that are derived from the relationship between a given patent and the body of knowledge that preceded it. These measure are thus constructed from the backward citations. One example of a backward-looking basicness measure they provide is Orginality, which is calculated as:

\[
\text{ORIGINALITY}_i = 1 - \sum_{k=1}^{N_i} \left( \frac{\text{NCITED}_{i,k}}{\text{NCITED}_i} \right)
\]

With **NCITING** and **NCITED** defined as the number of patents citing the focal patent and the number of patents cited by the focal patent, respectively. Index `i` corresponds to the focal patent considered, and `k` is the index of patent classes. For example, **NCITED_2,3** refers to the number of patents in patent class 3 and cited by our focal patent 2.


The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTS': {'PATENTS': ['DISCLOSURES_13', 'PUBLICATIONS', 'CPC_DEFINITION']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

- **Table:** `PATENTS.PATENTS.PUBLICATIONS`

  - **"publication_number"**: Used to uniquely identify each patent publication.
  - **"kind_code"**: To filter patents with kind code 'B2'.
  - **"grant_date"**: To select patents granted between 2015 and 2018.
  - **"country_code"**: To select US patents (`'US'`).
  - **"citation"**: Contains backward citations; needed to extract cited patents' publication numbers.
  - **"ipc"**: Contains IPC codes of the patent; needed to extract 4-digit IPC codes.
  
**Conditions to be Used:**

- **"country_code" = 'US'**: To select US patents.
- **"kind_code" = 'B2'**: To select patents with kind code 'B2'.
- **"grant_date" BETWEEN 20150101 AND 20181231**: To select patents granted between 2015 and 2018.

---

**SQL Queries:**

1. **Retrieve distinct kind codes available in the publications:**
   ```sql
   SELECT DISTINCT "kind_code"
   FROM PATENTS.PATENTS.PUBLICATIONS
   LIMIT 100;
   ```

2. **Select publication numbers and grant dates for US patents with kind code 'B2':**
   ```sql
   SELECT "publication_number", "grant_date"
   FROM PATENTS.PATENTS.PUBLICATIONS
   WHERE "country_code" = 'US' AND "kind_code" = 'B2'
   LIMIT 100;
   ```

3. **Get publication numbers and IPC codes for patents granted between 2015 and 2018:**
   ```sql
   SELECT "publication_number", "ipc"
   FROM PATENTS.PATENTS.PUBLICATIONS
   WHERE "grant_date" BETWEEN 20150101 AND 20181231
   LIMIT 100;
   ```

4. **Extract and view the structure of the "citation" field for sample patents:**
   ```sql
   SELECT "publication_number", f.value
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
   LIMIT 100;
   ```

5. **Retrieve the publication numbers of patents cited by sample patents:**
   ```sql
   SELECT t."publication_number", f.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
   LIMIT 100;
   ```

6. **Select distinct IPC codes from sample patents:**
   ```sql
   SELECT DISTINCT f.value::VARIANT:"code"::STRING AS "ipc_code"
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."ipc") f
   LIMIT 100;
   ```

7. **Get 4-digit IPC codes for patents by extracting from the IPC code:**
   ```sql
   SELECT t."publication_number", SUBSTR(f.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."ipc") f
   LIMIT 100;
   ```

8. **List patents with their cited patents and the IPC codes of the cited patents:**
   ```sql
   SELECT t."publication_number", c."cited_publication_number", cp."ipc"
   FROM PATENTS.PATENTS.PUBLICATIONS t
   JOIN LATERAL FLATTEN(input => t."citation") f ON TRUE
   JOIN (
     SELECT "publication_number", "ipc"
     FROM PATENTS.PATENTS.PUBLICATIONS
   ) cp ON f.value::VARIANT:"publication_number"::STRING = cp."publication_number"
   LIMIT 100;
   ```

9. **Count the number of citations for sample patents:**
   ```sql
   SELECT t."publication_number", COUNT(f.value) AS "citation_count"
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
   GROUP BY t."publication_number"
   LIMIT 100;
   ```

10. **Retrieve IPC codes of cited patents to analyze backward citations:**
    ```sql
    SELECT c."cited_publication_number", SUBSTR(f.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
    FROM (
      SELECT f.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
      FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
      WHERE t."publication_number" = 'US1234567B2'
    ) c
    JOIN PATENTS.PATENTS.PUBLICATIONS cp ON c."cited_publication_number" = cp."publication_number"
    JOIN LATERAL FLATTEN(input => cp."ipc") f ON TRUE
    LIMIT 100;
    ```

11. **Find distinct 4-digit IPC codes in the backward citations of a sample patent:**
    ```sql
    SELECT DISTINCT SUBSTR(f.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
    FROM (
      SELECT f.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
      FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
      WHERE t."publication_number" = 'US1234567B2'
    ) c
    JOIN PATENTS.PATENTS.PUBLICATIONS cp ON c."cited_publication_number" = cp."publication_number"
    JOIN LATERAL FLATTEN(input => cp."ipc") f ON TRUE
    LIMIT 100;
    ```

12. **Calculate the frequency of each 4-digit IPC code in backward citations:**
    ```sql
    SELECT SUBSTR(f.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code", COUNT(*) AS "occurrences"
    FROM (
      SELECT f.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
      FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
      WHERE t."publication_number" = 'US1234567B2'
    ) c
    JOIN PATENTS.PATENTS.PUBLICATIONS cp ON c."cited_publication_number" = cp."publication_number"
    JOIN LATERAL FLATTEN(input => cp."ipc") f ON TRUE
    GROUP BY "ipc4_code"
    LIMIT 100;
    ```

13. **List US patents with kind code 'B2' granted between 2015 and 2018 with their IPC codes:**
    ```sql
    SELECT t."publication_number", SUBSTR(f.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
    FROM PATENTS.PATENTS.PUBLICATIONS t
    JOIN LATERAL FLATTEN(input => t."ipc") f ON TRUE
    WHERE t."country_code" = 'US' AND t."kind_code" = 'B2' AND t."grant_date" BETWEEN 20150101 AND 20181231
    LIMIT 100;
    ```

14. **Count the total number of backward citations for each patent:**
    ```sql
    SELECT t."publication_number", COUNT(f.value) AS "total_citations"
    FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
    WHERE t."country_code" = 'US' AND t."kind_code" = 'B2' AND t."grant_date" BETWEEN 20150101 AND 20181231
    GROUP BY t."publication_number"
    LIMIT 100;
    ```

15. **Find the occurrence of each 4-digit IPC code in backward citations across multiple patents:**
    ```sql
    SELECT t."publication_number", SUBSTR(f2.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code", COUNT(*) AS "occurrences"
    FROM PATENTS.PATENTS.PUBLICATIONS t
    JOIN LATERAL FLATTEN(input => t."citation") f1 ON TRUE
    JOIN PATENTS.PATENTS.PUBLICATIONS cp ON f1.value::VARIANT:"publication_number"::STRING = cp."publication_number"
    JOIN LATERAL FLATTEN(input => cp."ipc") f2 ON TRUE
    WHERE t."country_code" = 'US' AND t."kind_code" = 'B2' AND t."grant_date" BETWEEN 20150101 AND 20181231
    GROUP BY t."publication_number", "ipc4_code"
    LIMIT 100;
    ```

---

These queries progressively explore the data required to calculate the originality score for US patents with kind code 'B2' granted between 2015 and 2018. The queries extract and analyze the IPC codes of patents and their backward citations, which are essential for computing the originality score as specified.

Note: Replace `'US1234567B2'` with an actual publication number when running the queries.Query:
SELECT DISTINCT "kind_code"
   FROM PATENTS.PATENTS.PUBLICATIONS
   LIMIT 100;
Answer:
kind_code
S2
P
B7
C9
F1
P9
D1
A4
V0
Z
A1
H1
Y8
A8
I2
B1
S
U8
D2
I1
T9
U9
V
U1
U4
A3
R
Z2
T3
B5
L
A0
B9
U5
A7
C3
F2
B8
C0
T2
Y2
D
R1
B2
G2
T5
B
Y1
C
U2
A5
B3
T4
C1
U0
E
G
D0
A2
U
T8
P1
C4
A6
Y
A
M
S1
U3
T
Q
B4
C2
H3
C5
A9
B6
E2
T1
Y4
Query:
SELECT "publication_number", "grant_date"
   FROM PATENTS.PATENTS.PUBLICATIONS
   WHERE "country_code" = 'US' AND "kind_code" = 'B2'
   LIMIT 100;
Answer:
publication_number,grant_date
US-8857551-B2,20141014
US-9370027-B2,20160614
US-9042351-B2,20150526
US-10561638-B2,20200218
US-8962445-B2,20150224
US-9270639-B2,20160223
US-8938152-B2,20150120
US-9389656-B2,20160712
US-9482287-B2,20161101
US-9386020-B2,20160705
US-10142276-B2,20181127
US-9216545-B2,20151222
US-9548844-B2,20170117
US-9111730-B2,20150818
US-9340798-B2,20160517
US-10324723-B2,20190618
US-9190745-B2,20151117
US-9380603-B2,20160628
US-9650743-B2,20170516
US-10140934-B2,20181127
US-9556907-B2,20170131
US-9567200-B2,20170214
US-10722723-B2,20200728
US-9188941-B2,20151117
US-9048861-B2,20150602
US-9460689-B2,20161004
US-9318050-B2,20160419
US-10533556-B2,20200114
US-9520094-B2,20161213
US-9412846-B2,20160809
US-10070142-B2,20180904
US-9585927-B2,20170307
US-9415120-B2,20160816
US-10533291-B2,20200114
US-9329543-B2,20160503
US-10487804-B2,20191126
US-9502685-B2,20161122
US-9434993-B2,20160906
US-10120886-B2,20181106
US-9343259-B2,20160517
US-10025922-B2,20180717
US-10093135-B2,20181009
US-11058417-B2,20210713
US-10791626-B2,20200929
US-10040253-B2,20180807
US-10268050-B2,20190423
US-9595167-B2,20170314
US-9425382-B2,20160823
US-10292858-B2,20190521
US-10439992-B2,20191008
US-10463632-B2,20191105
US-10040372-B2,20180807
US-11043142-B2,20210622
US-10096317-B2,20181009
US-10620487-B2,20200414
US-9616746-B2,20170411
US-10132013-B2,20181120
US-10075410-B2,20180911
US-11055623-B2,20210706
US-10501667-B2,20191210
US-10614930-B2,20200407
US-11100138-B2,20210824
US-10294485-B2,20190521
US-10420148-B2,20190917
US-10192648-B2,20190129
US-10799929-B2,20201013
US-10132055-B2,20181120
US-10306558-B2,20190528
US-10266255-B2,20190423
US-11229607-B2,20220125
US-11099445-B2,20210824
US-10918669-B2,20210216
US-10104056-B2,20181016
US-10170592-B2,20190101
US-10949373-B2,20210316
US-10637868-B2,20200428
US-10828230-B2,20201110
US-10612778-B2,20200407
US-10891534-B2,20210112
US-10827186-B2,20201103
US-10798073-B2,20201006
US-10574908-B2,20200225
US-10199059-B2,20190205
US-10178137-B2,20190108
US-10377792-B2,20190813
US-10141686-B2,20181127
US-11154290-B2,20211026
US-10891268-B2,20210112
US-10141468-B2,20181127
US-10941196-B2,20210309
US-10543714-B2,20200128
US-10513055-B2,20191224
US-10968393-B2,20210406
US-10630153-B2,20200421
US-10418599-B2,20190917
US-10128451-B2,20181113
US-10150865-B2,20181211
US-10483008-B2,20191119
US-10619236-B2,20200414
US-10634183-B2,20200428
Query:
SELECT "publication_number", "ipc"
   FROM PATENTS.PATENTS.PUBLICATIONS
   WHERE "grant_date" BETWEEN 20150101 AND 20181231
   LIMIT 100;
Answer:
Too long, hard cut:
publication_number,ipc
EP-1579759-B2,"[
  {
    ""code"": ""A01J7/02"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""A01J5/08"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
FR-2999294-B1,"[
  {
    ""code"": ""H02H3/34"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G01R31/08"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
FR-3038536-B1,"[
  {
    ""code"": ""B23B47/34"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B23Q5/32"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
FR-3044851-B1,"[
  {
    ""code"": ""H04N7/18"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G02C7/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-8934926-B1,"[
  {
    ""code"": ""H04M3/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W68/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W68/02"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W24/08"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W8/22"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W4/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-9321563-B1,"[
  {
    ""code"": ""A47G19/22"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""B65D43/06"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B65D43/02"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B65D43/10"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-9257577-B1,"[
  {
    ""code"": ""H01L27/146"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H01L31/0224"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H01L31/0216"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-9434668-B1,"[
  {
    ""code"": ""C07C37/11"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C07C37/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
AT-511923-B1,"[
  {
    ""code"": ""G03B29/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G03B17/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
AU-2015100348-A4,"[
  {
    ""code"": ""H04L12/26"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F11/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
AU-2016102250-A4,"[
  {
    ""code"": ""C07C49/80"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C07C45/46"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
JO-2951-B1,[]
US-9028758-B2,"[
  {
    ""code"": ""G01N1/02"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""G01N33/22"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B04C3/06"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G01N1/22"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B04C9/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-9143515-B2,"[
  {
    ""code"": ""G11B20/00"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""H04L29/08"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04L29/06"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F17/30"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W4/021"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W4/029"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H04W4/02"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-8967144-B2,"[
  {
    ""code"": ""A61M16/06"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""A61M16/12"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""A61M16/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""A62B18/02"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""A61N1/39"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""
Query:
SELECT "publication_number", f.value
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
   LIMIT 100;
Answer:
Too long, hard cut:
publication_number,VALUE
US-2021236923-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-7159217-B2"",
  ""type"": """"
}"
US-2021236923-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2016296840-A1"",
  ""type"": """"
}"
US-2021236923-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-10315113-B2"",
  ""type"": """"
}"
US-2021236923-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-10376781-B2"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2010279682-A1"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2013136025-A1"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2014313902-A1"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2014335869-A1"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2015382221-A1"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2017195935-A1"",
  ""type"": """"
}"
US-2021176690-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2017208488-A1"",
  ""type"": """"
}"
US-2021172647-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-4313609-A"",
  ""type"": """"
}"
US-2021172647-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-4382460-A"",
  ""type"": """"
}"
US-2021172647-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2016116184-A1"",
  ""type"": """"
}"
US-2021179984-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2012107468-A1"",
  ""type"": """"
}"
US-2021210786-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2006275666-A1"",
  ""type"": """"
}"
US-2021210786-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2009305132-A1"",
  ""type"": """"
}"
US-2021210786-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2016028070-A1"",
  ""type"": """"
}"
US-2021210786-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2016350565-A1"",
  ""type"": """"
}"
US-2021210786-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2023378610-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2013120575-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2015217801-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2019072674-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2019152473-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2019286149-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
  ""filing_date"": 0,
  ""npl_text"": """",
  ""publication_number"": ""US-2019315366-A1"",
  ""type"": """"
}"
US-2021300347-A1,"{
  ""application_number"": """",
  ""category"": ""SEA"",
Query:
SELECT t."publication_number", f.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
   LIMIT 100;
Answer:
publication_number,cited_publication_number
IT-MI20100095-A1,US-5589376-A
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20100095-A1,
IT-MI20121273-A1,US-3624729-A
IT-MI20121273-A1,US-3831516-A
IT-MI20121273-A1,US-4106404-A
IT-MI20121273-A1,US-4513659-A
IT-MI20121273-A1,EP-0569695-A2
IT-MI20121273-A1,US-5451415-A
IT-CR20130004-A1,WO-2004058329-A2
IT-CR20130004-A1,WO-2007143676-A2
IT-CR20130004-A1,CN-101695488-B
IT-CR20130004-A1,
IT-UB20159176-A1,US-6721445-B1
IT-UB20159176-A1,WO-2014033433-A1
IT-UB20159176-A1,
IT-UB20159176-A1,
IT-UB20153665-A1,US-3985379-A
IT-UB20153665-A1,US-4037864-A
IT-UB20153665-A1,US-4235461-A
IT-BO20090144-A1,FR-2434081-A1
IT-BO20090144-A1,WO-2007042492-A1
IT-BO20090144-A1,US-2007115141-A1
IT-BO20090144-A1,WO-2007133819-A2
IT-TO20110413-A1,US-5151638-A
IT-TO20110413-A1,US-5777833-A
IT-TO20110413-A1,US-2002093306-A1
IT-TO20110413-A1,US-2005073278-A1
IT-MI20092150-A1,JP-2004010703-A
IT-MI20092150-A1,US-2004147701-A1
IT-MI20092150-A1,
IT-MI20092150-A1,
IT-PD20100207-A1,US-2011575-A
IT-PD20100207-A1,US-2004152035-A1
IT-PD20100207-A1,US-2010003634-A1
IT-PD20100207-A1,US-2010151401-A1
IT-PD20100207-A1,WO-2010076328-A1
IT-MI20081860-A1,WO-9505160-A1
IT-MI20081860-A1,US-5661189-A
IT-MI20081860-A1,FR-2789308-A1
IT-MI20081860-A1,WO-03032943-A1
IT-MI20081860-A1,DE-102005033663-A1
IT-RM20110163-A1,WO-0101832-A1
IT-RM20110163-A1,WO-2004037058-A1
IT-PO20090001-A1,FR-912637-A
IT-PO20090001-A1,DE-856046-C
IT-PO20090001-A1,GB-1476323-A
IT-PO20090001-A1,US-5715642-A
IT-PO20090001-A1,FR-2754837-A1
IT-PO20090001-A1,FR-2807082-A1
IT-PO20090001-A1,DE-202007012570-U1
IT-MO20110165-A1,US-3985127-A
IT-MO20110165-A1,RU-2220676-C2
IT-MO20110165-A1,EP-1857063-A1
IT-MO20110165-A1,US-2010076435-A1
IT-MO20130290-A1,DE-212861-C
IT-MO20130290-A1,WO-9832362-A1
IT-VR20130148-A1,GB-2069305-A
IT-VR20130148-A1,US-5661958-A
IT-VR20130148-A1,GB-2404835-A
IT-VR20130148-A1,US-2007039289-A1
IT-VR20130148-A1,EP-2409565-A1
US-2020372460-A1,US-2009015400-A1
US-2020372460-A1,US-2016379157-A1
US-2020372460-A1,US-10111043-B1
US-2020372460-A1,US-2021043091-A1
US-2020372460-A1,US-2021216958-A1
US-2020372460-A1,US-11222486-B1
US-2020372460-A1,US-2022092532-A1
US-2021265514-A1,US-6313397-B1
US-2021265514-A1,US-2010018576-A1
US-2021265514-A1,US-2013003204-A1
US-2021257383-A1,US-2020006373-A1
US-2020401918-A1,US-2002138455-A1
US-2020401918-A1,US-6996560-B1
US-2020401918-A1,US-2006248057-A1
US-2020401918-A1,US-2007033084-A1
US-2020401918-A1,WO-2007103938-A2
US-2020401918-A1,US-7337158-B2
US-2020401918-A1,US-2009083367-A1
US-2020401918-A1,US-7657523-B2
US-2020401918-A1,US-8538970-B1
US-2020401918-A1,US-8930204-B1
US-2022093492-A1,US-6465892-B1
US-2022093492-A1,US-7078811-B2
US-2022093492-A1,US-7217631-B2
US-2022093492-A1,US-2010233850-A1
US-2022093492-A1,US-8778773-B2
US-2022093492-A1,US-8792034-B2
US-2022093492-A1,US-2014239499-A1
US-2022093492-A1,US-2014284744-A1
US-2022093492-A1,US-8896125-B2
Query:
SELECT DISTINCT f.value::VARIANT:"code"::STRING AS "ipc_code"
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."ipc") f
   LIMIT 100;
Answer:
ipc_code
E01D19/06
G06F17/30
G02B6/34
H01L29/26
G06F1/03
C04B40/00
A63B71/10
G11B7/125
G01N21/94
B60T8/17
B01D3/36
B29C67/24
G06F12/0888
B29C48/355
B32B27/36
C10G70/04
H01M10/6568
B60H3/00
B41J3/407
A23N12/06
B60R16/03
F16H61/16
B60R19/48
F01D17/16
E06B5/16
F16N1/00
G01B5/28
C12M1/02
B08B1/20
G08B13/02
B05B15/25
F04D29/00
E02B7/20
F24F13/15
G01N1/40
A41B11/00
D06M15/00
F25C1/25
C07D403/14
G06F11/30
G06F9/22
H04B7/12
H10N10/856
H04L41/08
G02B27/00
G01S7/4861
A23C19/084
G02B5/128
E04B1/24
F24F1/0035
F02B41/00
F02M61/18
H01Q13/10
F41B5/14
A61F2/44
G09G5/00
G06V30/24
C10L5/44
A23C9/152
C07D401/06
G16H50/80
C09J109/08
C08F120/08
D21F11/08
B22F3/105
A24F40/485
G06Q50/12
A61K31/235
C07D213/82
C07D243/26
C07D233/70
C25D17/06
A61H33/06
A61F13/15
H02K5/04
A01C7/20
B24C3/22
A61K39/116
H04Q11/04
G01S5/00
C07D241/28
C07C51/27
F24D5/00
B60T8/42
B21F9/00
C07C37/055
H05K13/00
H02M7/487
H10N30/80
C09J123/04
G10L15/20
G06F3/0346
C04B14/38
H02J9/04
C07D213/26
F21V15/01
E05F15/00
G09G3/10
G01B9/02
C07J21/00
Query:
SELECT t."publication_number", SUBSTR(f.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."ipc") f
   LIMIT 100;
Answer:
publication_number,ipc4_code
CN-214601582-U,B21D
CN-215596566-U,F16L
CN-215863800-U,F24F
CN-215863800-U,F24F
CN-215863800-U,F24F
CN-215863800-U,F24F
CN-215051470-U,D06F
CN-215051470-U,D06F
CN-214626576-U,H02K
CN-215044242-U,B65B
CN-215151019-U,B29L
CN-215151019-U,B29C
CN-214736877-U,D06H
CN-214736877-U,D06H
CN-214660813-U,F04C
CN-214660813-U,F04C
CN-214660813-U,F04C
CN-215198330-U,B07C
CN-215198330-U,B07C
CN-214883725-U,E02D
CN-214883725-U,E02D
CN-214611982-U,C02F
CN-214592184-U,H05K
CN-214592184-U,H05K
CN-214637364-U,B04B
CN-214637364-U,B04B
CN-216414274-U,H03H
CN-216414274-U,H04B
CN-216602367-U,A47G
CN-216602367-U,A47G
CN-215127550-U,A47J
CN-214766819-U,B07B
CN-214766819-U,B07B
CN-214766819-U,B07B
CN-214576726-U,E21B
CN-214576726-U,E21B
CN-214576726-U,E21B
CN-214945514-U,F16B
CN-215265335-U,G09F
CN-215048831-U,C02F
CN-214603948-U,B25B
CN-215149970-U,B27G
CN-215149970-U,B27D
CN-215149970-U,B05C
CN-215149970-U,B05C
CN-215149970-U,B05C
CN-215149970-U,B27G
CN-214513805-U,B01D
CN-214513805-U,B01D
CN-214513805-U,B01D
CN-214531034-U,E03F
CN-214570148-U,B66C
CN-214570148-U,B66C
CN-214554710-U,B05B
CN-214554710-U,B05B
CN-214554710-U,B05B
CN-215006193-U,G03B
CN-214376014-U,G05B
CN-214922825-U,B24B
CN-214922825-U,B24B
CN-214922825-U,B24B
CN-214922825-U,B24B
CN-214922825-U,B24B
CN-214675905-U,H05K
CN-214675905-U,H05K
CN-214538192-U,G01G
CN-214538192-U,G01G
CN-214586427-U,G04D
CN-214586427-U,B08B
CN-214539513-U,G01D
CN-214539513-U,G08C
CN-214539513-U,G01N
CN-214539513-U,G01N
CN-214782126-U,C23C
CN-214782126-U,C23C
CN-214782126-U,C23C
CN-215441279-U,E01C
CN-215441279-U,B01D
CN-215441279-U,F28D
CN-215036629-U,B24D
CN-215820934-U,A61B
CN-215995176-U,B65H
CN-215995176-U,A61M
CN-215995176-U,A61M
CN-214572490-U,D03C
CN-214572490-U,D03C
CN-215210614-U,E01D
CN-215210614-U,E01D
CN-215210614-U,E01D
CN-214627208-U,H04N
CN-214627208-U,G09F
CN-214627208-U,E04H
CN-215311664-U,G01G
CN-215311664-U,G01G
CN-215311664-U,B01F
CN-215311664-U,B01F
CN-215311664-U,B01F
CN-215311664-U,B01F
CN-215311664-U,B08B
CN-214566218-U,B64F
Query:
SELECT 
  t."publication_number", 
  f.value::VARIANT:"publication_number"::STRING AS "cited_publication_number", 
  cp."ipc"
FROM 
  PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL 
  FLATTEN(input => t."citation") f
JOIN 
  PATENTS.PATENTS.PUBLICATIONS cp 
    ON f.value::VARIANT:"publication_number"::STRING = cp."publication_number"
LIMIT 100;
Answer:
Too long, hard cut:
publication_number,cited_publication_number,ipc
WO-2020064776-A1,US-5705370-A,"[
  {
    ""code"": ""C12R1/15"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""C12R1/13"",
    ""first"": false,
    ""inventive"": false,
    ""tree"": []
  },
  {
    ""code"": ""C12N1/21"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C12N1/20"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""C12P13/04"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
KR-101804754-B1,KR-200259263-Y1,[]
US-2022280127-A1,US-11246549-B2,"[
  {
    ""code"": ""H05G1/02"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""A61B6/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-4598390-A,US-3942160-A,"[
  {
    ""code"": ""G11C11/4094"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G11C11/406"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G11C11/405"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-2006149939-A1,US-5838984-A,"[
  {
    ""code"": ""G06F17/16"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F15/78"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F9/30"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F12/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F9/318"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G06F15/16"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
CN-105129474-A,US-5445461-A,"[
  {
    ""code"": ""B26D7/24"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B65H20/16"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B65H35/06"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B65H19/26"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-11802860-B1,US-11215593-B2,"[
  {
    ""code"": ""E21B41/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G08B21/16"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""H02S20/10"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""G01N33/00"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""A01K31/14"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-2021239174-A1,US-2265629-A,"[
  {
    ""code"": ""G01G23/00"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-8636975-B2,US-3980280-A,"[
  {
    ""code"": ""B01F11/02"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-11162596-B1,US-5121595-A,"[
  {
    ""code"": ""A63H27/10"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
KR-20220099935-A,US-2010133923-A1,"[
  {
    ""code"": ""H02K41/035"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-2017060065-A1,US-2010123914-A1,"[
  {
    ""code"": ""H04N1/60"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-9226006-B2,JP-H0744930-Y2,"[
  {
    ""code"": ""F25D21/04"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""F25D3/14"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""F25D3/06"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B65D81/38"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-9399738-B2,US-3993583-A,"[
  {
    ""code"": ""C10J3/54"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B01J8/24"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-6799827-B2,US-6123410-A,"[
  {
    ""code"": ""B41J2/14"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B41J2/05"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B41J2/16"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B41J2/155"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  }
]"
US-7976125-B2,US-6123410-A,"[
  {
    ""code"": ""B41J2/14"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B41J2/05"",
    ""first"": true,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B41J2/16"",
    ""first"": false,
    ""inventive"": true,
    ""tree"": []
  },
  {
    ""code"": ""B41J2/155"",
    ""f
Query:
SELECT t."publication_number", COUNT(f.value) AS "citation_count"
   FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
   GROUP BY t."publication_number"
   LIMIT 100;
Answer:
publication_number,citation_count
US-10791628-B2,16
US-11639882-B2,2
US-11578901-B2,32
US-12000319-B2,12
JP-3298935-B2,3
AU-2012283387-B2,1
JP-6992160-B2,7
JP-7122388-B2,3
DE-10145463-B4,1
US-2649182-A,8
US-2432303-A,2
US-2467872-A,3
US-2838702-A,2
US-2993227-A,9
US-2810822-A,3
US-2664858-A,7
US-4061640-A,4
US-4112104-A,1
US-4149514-A,8
US-4105244-A,9
US-4379289-A,14
US-4530169-A,2
US-4954237-A,10
US-4708429-A,5
US-3948647-A,2
US-4801344-A,19
US-4817692-A,9
US-5235613-A,18
US-2785097-A,3
JP-H01244109-A,3
JP-S5230990-A,2
US-4688271-A,4
US-5125280-A,5
US-5398904-A,6
US-5815740-A,12
US-5892034-A,19
US-5872032-A,15
JP-H0813815-A,4
JP-H06457-A,1
JP-H0843057-A,9
JP-S6169233-A,1
JP-S61145204-A,1
US-5238165-A,16
US-10868012-B2,7
US-11570601-B2,125
DE-102018133394-B4,11
RU-2625675-C1,6
RU-2439005-C2,1
JP-S575493-Y2,2
JP-S6238623-Y2,2
RU-2682615-C1,8
US-11006567-B2,17
US-10775929-B2,21
US-11032628-B2,79
US-11718439-B2,24
US-11665400-B2,31
JP-H0828963-B2,1
AU-2015265241-B2,3
JP-4602838-B2,6
JP-4534967-B2,6
JP-5600254-B2,2
JP-7142175-B2,11
RU-2389732-C2,2
DE-102006001406-B4,3
DE-202008018655-U1,3
JP-S6227343-Y2,1
DE-4208912-C1,3
RU-2738104-C1,5
US-2023270247-A1,10
US-2023040852-A1,9
US-2023077066-A1,7
EP-0672179-A1,1
EP-0841246-A1,2
EP-1612525-A1,2
EP-2010606-A1,1
EP-3340589-A1,3
EP-4016453-A1,9
JP-WO2006132351-A1,1
JP-WO2021112138-A1,6
DE-102008058042-A1,4
DE-102010050223-A1,8
DE-102020117796-A1,3
WO-2022266703-A1,7
WO-2019214997-A1,5
WO-2022013713-A1,5
WO-2019171941-A1,5
WO-2021124462-A1,4
WO-2022064954-A1,5
WO-2022225689-A1,3
WO-2024092204-A1,4
EP-0090207-A3,5
EP-1029433-A3,6
EP-3469084-A4,9
US-6782009-B1,9
US-8713631-B1,16
EP-3390416-B1,1
JP-7179911-B1,6
KR-100760811-B1,3
KR-101069457-B1,4
KR-101168608-B1,1
Query:
SELECT 
  c."cited_publication_number", 
  SUBSTR(fi.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
FROM (
  SELECT 
    fc.value::VARIANT:"publication_number"::STRING AS "cited_publication_number"
  FROM 
    PATENTS.PATENTS.PUBLICATIONS t
  CROSS JOIN LATERAL 
    FLATTEN(input => t."citation") fc
  LIMIT 100
) c
JOIN 
  PATENTS.PATENTS.PUBLICATIONS cp 
    ON c."cited_publication_number" = cp."publication_number"
CROSS JOIN LATERAL 
  FLATTEN(input => cp."ipc") fi
LIMIT 100;
Answer:
cited_publication_number,ipc4_code
US-2008037721-A1,H04M
US-2017079328-A1,A24F
US-2017079328-A1,A24F
US-2017079328-A1,A24F
US-2017079328-A1,B65D
US-2017079328-A1,A61M
US-2017079328-A1,G06K
US-2017079328-A1,F16L
Query:
SELECT DISTINCT SUBSTR(fi.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") fc
JOIN PATENTS.PATENTS.PUBLICATIONS cp ON fc.value::VARIANT:"publication_number"::STRING = cp."publication_number"
CROSS JOIN LATERAL FLATTEN(input => cp."ipc") fi
LIMIT 100;
Answer:
ipc4_code
B60L
F26B
C12R
E04C
G05G
H01P
B67B
D01D
B64F
B60H
H01F
B66D
C23F
G03F
D06M
B23P
A44B
F24S
B41C
F16F
B29L
F28G
D21H
H02P
B66C
H01H
C22C
F01L
C08G
G21C
E03C
F41A
B09B
A61F
H04M
B23D
G02F
C10N
B03D
F16S
A61G
A46D
G01B
A22C
A01M
B28D
A23C
B66B
B27B
F21L
B09C
A47J
B03C
A47D
C09K
B04B
A01F
D21G
H01B
C01F
G01Q
H04K
F25C
C10J
D06B
B60R
F42D
F16J
E01B
C07F
C07D
G09G
C12P
H04R
B08B
E01F
F22B
C14B
E04B
B60T
B60C
A47B
E01C
F21Y
G11C
B60S
H03B
G12B
G06F
A23F
B65H
C12Q
D06F
B25G
C08H
H01C
C07C
H02M
F02D
B60B
Query:
SELECT SUBSTR(fi.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code", COUNT(*) AS "occurrences"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") fc
JOIN PATENTS.PATENTS.PUBLICATIONS cp ON fc.value::VARIANT:"publication_number"::STRING = cp."publication_number"
CROSS JOIN LATERAL FLATTEN(input => cp."ipc") fi
GROUP BY "ipc4_code"
LIMIT 100;
Answer:
ipc4_code,occurrences
A61G,15
A46D,2
G05G,1
B60L,25
B67B,2
E04C,5
D01D,6
H01P,5
F26B,13
C12R,7
C03C,12
G21K,5
F16M,15
C09J,53
E06B,24
B61L,6
H04Q,18
F25J,5
G02C,7
C10G,27
A01C,12
A43D,1
A23N,3
B62K,1
C21C,6
F41J,1
F16F,24
B29L,7
D21H,7
F28G,2
F03D,17
G01C,40
B04C,3
F02B,42
A63C,4
A47J,34
B03C,7
B09C,8
A47D,1
G01B,58
A01M,8
B66B,7
A22C,5
A23C,6
B28D,7
B27B,1
F21L,1
G06N,39
H04J,23
E04D,5
A43C,2
D07B,2
C12M,1
F23B,1
A47C,20
B23B,14
B65B,23
G01L,18
A62B,7
E02B,7
A62D,7
G07B,4
F27B,3
G06Q,232
B25H,3
H01Q,53
E02F,1
C05G,6
F01B,1
H02K,59
C23C,98
G08B,23
B23C,7
A42B,4
F16G,5
G01J,10
A01J,2
G21F,3
E05F,9
B01D,145
H03K,31
G07C,16
B29B,14
F02P,6
B31B,1
F04F,1
A61F,247
B23D,18
H04M,88
G02F,98
B03D,1
C10N,30
F16S,1
C10M,29
C01B,42
C09C,7
E05D,4
D01H,1
F23L,5
G01G,3
Query:
SELECT t."publication_number", SUBSTR(f.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."ipc") f
WHERE t."country_code" = 'US' AND t."kind_code" = 'B2'
LIMIT 100;
Answer:
publication_number,ipc4_code
US-8210142-B2,F01L
US-8338035-B2,H01M
US-8609829-B2,C07H
US-8609829-B2,C12Q
US-8240274-B2,A01K
US-8904292-B2,G06Q
US-8904292-B2,G06F
US-8480325-B2,A46B
US-8480325-B2,A46B
US-8480325-B2,A46B
US-8480325-B2,A46B
US-8480325-B2,A46B
US-9028758-B2,G01N
US-9028758-B2,G01N
US-9028758-B2,B04C
US-9028758-B2,G01N
US-9028758-B2,B04C
US-8462223-B2,H04N
US-8462223-B2,G06K
US-7944609-B2,G02B
US-10236950-B2,H04W
US-10236950-B2,H04L
US-10236950-B2,H04L
US-10236950-B2,H04B
US-8733262-B2,D05B
US-8248448-B2,H04M
US-8590235-B2,E04F
US-8086194-B2,H04B
US-8086194-B2,H04B
US-8086194-B2,H04B
US-8086194-B2,H04L
US-8086194-B2,H04L
US-8086194-B2,H04B
US-8086194-B2,H04L
US-8086194-B2,H04M
US-8086194-B2,H04B
US-8086194-B2,H04L
US-8086194-B2,H04L
US-8086194-B2,H04B
US-8086194-B2,H04J
US-8086194-B2,H04L
US-8086194-B2,H04B
US-9143515-B2,G11B
US-9143515-B2,H04L
US-9143515-B2,H04L
US-9143515-B2,G06F
US-9143515-B2,H04W
US-9143515-B2,H04W
US-9143515-B2,H04W
US-8587485-B2,H01Q
US-8383945-B2,H02G
US-8246716-B2,C21C
US-8246716-B2,C21B
US-8246716-B2,C21B
US-8246716-B2,C01F
US-8246716-B2,C21C
US-8246716-B2,C23G
US-8915088-B2,F02C
US-8915088-B2,F02C
US-8915088-B2,F02C
US-8915088-B2,F02C
US-8915088-B2,F02C
US-8644322-B2,H04L
US-8967144-B2,A61M
US-8967144-B2,A61M
US-8967144-B2,A61M
US-8967144-B2,A62B
US-8967144-B2,A61N
US-8967144-B2,A61N
US-8967144-B2,A61M
US-8967144-B2,A61H
US-8967144-B2,A61M
US-8500357-B2,F16B
US-8480874-B2,B31B
US-8480874-B2,G01N
US-8707381-B2,G10L
US-8707381-B2,H04N
US-8707381-B2,G10L
US-8707381-B2,G10L
US-8707381-B2,H04N
US-9038000-B2,G06Q
US-9038000-B2,G06F
US-8777568-B2,F01D
US-8349603-B2,C12M
US-8508509-B2,G06F
US-9144476-B2,A61C
US-9144476-B2,A61C
US-9144476-B2,A46B
US-9144476-B2,A61C
US-9144476-B2,A46B
US-8739403-B2,H01R
US-8381946-B2,B65D
US-8381946-B2,B65D
US-8573754-B2,H03H
US-8573754-B2,B05C
US-8573754-B2,B41J
US-8573754-B2,B41J
US-8573754-B2,H03H
US-8573754-B2,H10N
US-8573754-B2,H10N
Query:
SELECT t."publication_number", COUNT(f.value) AS "total_citations"
    FROM PATENTS.PATENTS.PUBLICATIONS t, LATERAL FLATTEN(input => t."citation") f
    WHERE t."country_code" = 'US' AND t."kind_code" = 'B2' AND t."grant_date" BETWEEN 20150101 AND 20181231
    GROUP BY t."publication_number"
    LIMIT 100;
Answer:
publication_number,total_citations
US-9181681-B2,15
US-10121264-B2,33
US-10116352-B2,16
US-9157491-B2,13
US-9207691-B2,4
US-9068247-B2,30
US-9087924-B2,41
US-10121790-B2,13
US-9459437-B2,15
US-9119720-B2,112
US-9585927-B2,10
US-9447712-B2,23
US-9216062-B2,9
US-10075826-B2,14
US-8928823-B2,1
US-9232163-B2,11
US-10064731-B2,29
US-9166674-B2,7
US-10015072-B2,5
US-10155928-B2,22
US-10134165-B2,13
US-9258696-B2,22
US-10094379-B2,20
US-10079751-B2,21
US-9503862-B2,7
US-8997705-B2,14
US-10119697-B2,9
US-9376833-B2,16
US-9124016-B2,6
US-10070538-B2,22
US-9081290-B2,43
US-9143515-B2,15
US-8981843-B2,14
US-9169941-B2,14
US-9499521-B2,303
US-9141212-B2,8
US-9359468-B2,9
US-9483346-B2,134
US-9650743-B2,23
US-9279991-B2,22
US-9308847-B2,14
US-8994331-B2,31
US-10078378-B2,4
US-10137049-B2,12
US-10036488-B2,40
US-9028637-B2,4
US-9026162-B2,72
US-9302877-B2,12
US-9011636-B2,26
US-10112826-B2,5
US-8996479-B2,15
US-9632295-B2,60
US-9300877-B2,21
US-9474616-B2,144
US-9452411-B2,5
US-8933524-B2,20
US-9146908-B2,20
US-10136806-B2,10
US-9150564-B2,222
US-9291582-B2,2
US-9322880-B2,21
US-9270639-B2,34
US-10142276-B2,231
US-9277390-B2,39
US-9084483-B2,11
US-10040376-B2,5
US-9562348-B2,8
US-8964230-B2,10
US-10144495-B2,4
US-9404543-B2,6
US-9245361-B2,20
US-9160809-B2,230
US-8954157-B2,13
US-9527297-B2,22
US-9100914-B2,7
US-9534310-B2,16
US-9297098-B2,22
US-9106422-B2,187
US-9166782-B2,20
US-8944695-B2,30
US-9344698-B2,18
US-9505537-B2,36
US-9309435-B2,146
US-9254730-B2,16
US-9412846-B2,12
US-9335448-B2,9
US-10152369-B2,9
US-9529903-B2,40
US-8971612-B2,226
US-9160895-B2,15
US-8953633-B2,33
US-9466467-B2,12
US-10079102-B2,5
US-9185094-B2,140
US-9280023-B2,12
US-9356222-B2,6
US-9182815-B2,149
US-9448946-B2,333
US-9233779-B2,10
US-9436209-B2,7
Query:
SELECT t."publication_number", 
       SUBSTR(f2.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code", 
       COUNT(*) AS "occurrences"
FROM PATENTS.PATENTS.PUBLICATIONS t
CROSS JOIN LATERAL FLATTEN(input => t."citation") f1
JOIN PATENTS.PATENTS.PUBLICATIONS cp ON f1.value::VARIANT:"publication_number"::STRING = cp."publication_number"
CROSS JOIN LATERAL FLATTEN(input => cp."ipc") f2
GROUP BY t."publication_number", "ipc4_code"
LIMIT 100;
Answer:
publication_number,ipc4_code,occurrences
US-2006198446-A1,H04N,1
US-2009039418-A1,H10B,1
CN-107449018-B,E04F,1
US-2006189901-A1,A61N,1
CN-113614573-B,G01S,1
JP-2008184694-A,D04B,1
AU-650819-B2,G06K,1
WO-2020025576-A1,C12N,1
US-8279165-B2,H01L,3
US-2010215346-A1,G11B,7
US-12066647-B2,G02B,1
US-8878950-B2,G02B,4
WO-2020115607-A3,F16L,1
DE-102009007947-A1,H01L,2
US-5303288-A,H04M,4
US-8440053-B2,C09J,1
JP-2001359018-A,H04M,1
CN-102830968-A,G06F,1
US-11157517-B2,G06Q,1
JP-2014078116-A,G09G,1
EP-2267549-A1,B82B,1
US-6246092-B1,H01L,6
US-11442822-B1,G06F,2
WO-2019242081-A1,G01S,1
US-3856072-A,B60J,1
CN-113776473-A,G01B,2
CN-113721260-B,G01C,1
US-4074776-A,E02D,1
US-8732743-B2,G11B,1
US-8186416-B2,B22C,3
JP-2009174175-A,F16K,3
US-2022027967-A1,G06Q,1
US-2022027967-A1,G06F,1
JP-4746874-B2,B22D,1
US-11123443-B2,A61K,10
CN-105300862-A,G01N,1
JP-6878711-B1,D04H,1
CN-109814691-A,G12B,1
CN-107633653-A,A61B,5
US-11573539-B1,E03D,1
CN-115005794-A,A61B,3
CN-106562565-A,A47B,2
DE-102016002636-A1,G02B,1
WO-2018196232-A1,B25J,1
CN-104997501-A,A61B,2
CN-105159504-A,G06F,1
FR-3031517-A1,C08G,2
KR-101042272-B1,E02D,2
US-10872778-B2,C23F,1
KR-102236955-B1,H02P,1
CN-102073149-B,G02C,4
CN-102073149-B,B29L,1
US-2010002669-A1,H04L,1
JP-2015178100-A,B09B,1
US-5650398-A,A61K,3
CN-103185129-A,F16H,1
KR-102281651-B1,B60W,2
US-11056344-B2,C23F,1
JP-4643521-B2,B41J,1
CN-107199613-A,A62D,2
CN-108157587-A,A23K,5
CN-107163979-A,C10G,2
CN-107761125-A,C02F,2
WO-2014063800-A1,G07C,1
WO-2014063800-A1,B60W,1
US-2006115184-A1,G06T,3
US-10615444-B2,H01L,1
US-11092368-B2,F25B,4
CN-107632294-A,G01S,1
CN-106153646-B,G01T,1
DE-102006000312-B4,G01L,1
US-9522312-B2,A63B,2
KR-101038786-B1,F16C,2
KR-100437290-B1,H01L,4
CN-109533104-A,B62H,1
US-8817527-B2,C09K,1
US-8779798-B2,C09K,1
US-10559695-B2,C09K,1
KR-102646494-B1,G05B,2
KR-20220024265-A,A61B,1
US-2017126311-A1,H04W,4
CN-109740298-B,G06F,1
JP-H02177666-A,H04N,2
US-8572389-B2,H04L,7
US-8510602-B2,G06F,1
US-10793182-B2,H02K,1
US-10744347-B2,H10N,1
KR-20150039485-A,H10K,1
US-11125058-B2,E21B,5
US-2006016752-A1,C07D,1
US-2707037-A,B60K,1
US-9175419-B2,H01L,4
CN-103490238-A,H01H,2
WO-2023111180-A1,C40B,1
JP-WO2006022173-A1,A23G,3
JP-2014153763-A,G06T,1
CN-105252891-A,B41F,1
US-11809692-B2,G06K,3
KR-20210120521-A,B25G,2
CN-102528808-A,G06K,2
End Exploring Related Columns
Task: Which US patent (with a B2 kind code and a grant date between 2015 and 2018) has the highest originality score calculated as 1 - (the sum of squared occurrences of distinct 4-digit IPC codes in its backward citations divided by the square of the total occurrences of these 4-digit IPC codes)?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
Publication_Number,Originality_Score
patent_number:str,score:float
(Attention: answer in one row)
```

The above table represents the US patent with a B2 kind code and a grant date between 2015 and 2018 that has the highest originality score, calculated as \( 1 - \frac{\sum (\text{occurrences of each 4-digit IPC code})^2}{(\text{total occurrences of 4-digit IPC codes})^2} \). Since specific data is not provided, placeholders for the publication number and originality score are used..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'PATENTS': {'PATENTS': ['DISCLOSURES_13', 'PUBLICATIONS', 'CPC_DEFINITION']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-02-12 21:37:04 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:37:04 - root - INFO - ```sql
WITH ipc_counts AS (
  SELECT 
    t1."publication_number",
    SUBSTR(fipc.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code",
    COUNT(*) AS "occurrences_per_ipc"
  FROM PATENTS.PATENTS.PUBLICATIONS t1
  CROSS JOIN LATERAL FLATTEN(input => t1."citation") fc
  JOIN PATENTS.PATENTS.PUBLICATIONS cp ON fc.value::VARIANT:"publication_number"::STRING = cp."publication_number"
  CROSS JOIN LATERAL FLATTEN(input => cp."ipc") fipc
  WHERE t1."country_code" = 'US'
    AND t1."kind_code" = 'B2'
    AND t1."grant_date" BETWEEN 20150101 AND 20181231
  GROUP BY t1."publication_number", "ipc4_code"
),
total_occurrences AS (
  SELECT 
    "publication_number",
    SUM("occurrences_per_ipc") AS "total_occurrences"
  FROM ipc_counts
  GROUP BY "publication_number"
),
sum_occurrences_squared AS (
  SELECT
    "publication_number",
    SUM(POWER("occurrences_per_ipc", 2)) AS "sum_occurrences_per_ipc_squared"
  FROM ipc_counts
  GROUP BY "publication_number"
),
originality_scores AS (
  SELECT
    t."publication_number",
    1 - ("s"."sum_occurrences_per_ipc_squared" / POWER("t"."total_occurrences", 2)) AS "originality_score"
  FROM total_occurrences t
  JOIN sum_occurrences_squared s ON t."publication_number" = s."publication_number"
  WHERE t."total_occurrences" > 0
)

SELECT "publication_number" AS "Publication_Number", "originality_score" AS "Originality_Score"
FROM originality_scores
ORDER BY "originality_score" DESC NULLS LAST, "publication_number" ASC
LIMIT 1;
```
2025-02-12 21:37:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:37:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:37:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:37:05 - snowflake.connector.connection - INFO - closed
2025-02-12 21:37:05 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:37:06 - root - INFO - itercount: 1
2025-02-12 21:37:06 - root - INFO - 000904 (42000): 01ba59f1-0004-9c22-0001-11c3011467ea: SQL compilation error: error line 32 at position 9
invalid identifier '"s"."sum_occurrences_per_ipc_squared"'
2025-02-12 21:37:06 - root - INFO - Input sql:
WITH ipc_counts AS (
  SELECT 
    t1."publication_number",
    SUBSTR(fipc.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code",
    COUNT(*) AS "occurrences_per_ipc"
  FROM PATENTS.PATENTS.PUBLICATIONS t1
  CROSS JOIN LATERAL FLATTEN(input => t1."citation") fc
  JOIN PATENTS.PATENTS.PUBLICATIONS cp ON fc.value::VARIANT:"publication_number"::STRING = cp."publication_number"
  CROSS JOIN LATERAL FLATTEN(input => cp."ipc") fipc
  WHERE t1."country_code" = 'US'
    AND t1."kind_code" = 'B2'
    AND t1."grant_date" BETWEEN 20150101 AND 20181231
  GROUP BY t1."publication_number", "ipc4_code"
),
total_occurrences AS (
  SELECT 
    "publication_number",
    SUM("occurrences_per_ipc") AS "total_occurrences"
  FROM ipc_counts
  GROUP BY "publication_number"
),
sum_occurrences_squared AS (
  SELECT
    "publication_number",
    SUM(POWER("occurrences_per_ipc", 2)) AS "sum_occurrences_per_ipc_squared"
  FROM ipc_counts
  GROUP BY "publication_number"
),
originality_scores AS (
  SELECT
    t."publication_number",
    1 - ("s"."sum_occurrences_per_ipc_squared" / POWER("t"."total_occurrences", 2)) AS "originality_score"
  FROM total_occurrences t
  JOIN sum_occurrences_squared s ON t."publication_number" = s."publication_number"
  WHERE t."total_occurrences" > 0
)

SELECT "publication_number" AS "Publication_Number", "originality_score" AS "Originality_Score"
FROM originality_scores
ORDER BY "originality_score" DESC NULLS LAST, "publication_number" ASC
LIMIT 1;
The error information is:
000904 (42000): 01ba59f1-0004-9c22-0001-11c3011467ea: SQL compilation error: error line 32 at position 9
invalid identifier '"s"."sum_occurrences_per_ipc_squared"'
Please correct it and output only 1 complete SQL query.
2025-02-12 21:37:21 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:37:21 - root - INFO - ```sql
WITH ipc_counts AS (
  SELECT 
    t1."publication_number",
    SUBSTR(fipc.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code",
    COUNT(*) AS "occurrences_per_ipc"
  FROM PATENTS.PATENTS.PUBLICATIONS t1
  CROSS JOIN LATERAL FLATTEN(input => t1."citation") fc
  JOIN PATENTS.PATENTS.PUBLICATIONS cp ON fc.value::VARIANT:"publication_number"::STRING = cp."publication_number"
  CROSS JOIN LATERAL FLATTEN(input => cp."ipc") fipc
  WHERE t1."country_code" = 'US'
    AND t1."kind_code" = 'B2'
    AND t1."grant_date" BETWEEN 20150101 AND 20181231
  GROUP BY t1."publication_number", "ipc4_code"
),
total_occurrences AS (
  SELECT 
    "publication_number",
    SUM("occurrences_per_ipc") AS "total_occurrences"
  FROM ipc_counts
  GROUP BY "publication_number"
),
sum_occurrences_squared AS (
  SELECT
    "publication_number",
    SUM(POWER("occurrences_per_ipc", 2)) AS "sum_occurrences_per_ipc_squared"
  FROM ipc_counts
  GROUP BY "publication_number"
),
originality_scores AS (
  SELECT
    t."publication_number",
    1 - (s."sum_occurrences_per_ipc_squared" / POWER(t."total_occurrences", 2)) AS "originality_score"
  FROM total_occurrences t
  JOIN sum_occurrences_squared s ON t."publication_number" = s."publication_number"
  WHERE t."total_occurrences" > 0
)

SELECT "publication_number" AS "Publication_Number", "originality_score" AS "Originality_Score"
FROM originality_scores
ORDER BY "originality_score" DESC NULLS LAST, "publication_number" ASC
LIMIT 1;
```
2025-02-12 21:37:21 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:37:21 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:37:21 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:37:22 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-02-12 21:37:23 - snowflake.connector.connection - INFO - closed
2025-02-12 21:37:23 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:37:23 - root - INFO - itercount: 2
2025-02-12 21:37:23 - root - INFO - 0
2025-02-12 21:37:23 - root - INFO - results: 
Publication_Number,Originality_Score
US-9121016-B2,0.8365650969529086


2025-02-12 21:37:23 - root - INFO - Please check the answer again by reviewing Which US patent (with a B2 kind code and a grant date between 2015 and 2018) has the highest originality score calculated as 1 - (the sum of squared occurrences of distinct 4-digit IPC codes in its backward citations divided by the square of the total occurrences of these 4-digit IPC codes)?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Publication_Number,Originality_Score
patent_number:str,score:float
(Attention: answer in one row)
```

The above table represents the US patent with a B2 kind code and a grant date between 2015 and 2018 that has the highest originality score, calculated as \( 1 - \frac{\sum (\text{occurrences of each 4-digit IPC code})^2}{(\text{total occurrences of 4-digit IPC codes})^2} \). Since specific data is not provided, placeholders for the publication number and originality score are used. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Publication_Number,Originality_Score
US-9121016-B2,0.8365650969529086
Current sql:
WITH ipc_counts AS (
  SELECT 
    t1."publication_number",
    SUBSTR(fipc.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code",
    COUNT(*) AS "occurrences_per_ipc"
  FROM PATENTS.PATENTS.PUBLICATIONS t1
  CROSS JOIN LATERAL FLATTEN(input => t1."citation") fc
  JOIN PATENTS.PATENTS.PUBLICATIONS cp ON fc.value::VARIANT:"publication_number"::STRING = cp."publication_number"
  CROSS JOIN LATERAL FLATTEN(input => cp."ipc") fipc
  WHERE t1."country_code" = 'US'
    AND t1."kind_code" = 'B2'
    AND t1."grant_date" BETWEEN 20150101 AND 20181231
  GROUP BY t1."publication_number", "ipc4_code"
),
total_occurrences AS (
  SELECT 
    "publication_number",
    SUM("occurrences_per_ipc") AS "total_occurrences"
  FROM ipc_counts
  GROUP BY "publication_number"
),
sum_occurrences_squared AS (
  SELECT
    "publication_number",
    SUM(POWER("occurrences_per_ipc", 2)) AS "sum_occurrences_per_ipc_squared"
  FROM ipc_counts
  GROUP BY "publication_number"
),
originality_scores AS (
  SELECT
    t."publication_number",
    1 - (s."sum_occurrences_per_ipc_squared" / POWER(t."total_occurrences", 2)) AS "originality_score"
  FROM total_occurrences t
  JOIN sum_occurrences_squared s ON t."publication_number" = s."publication_number"
  WHERE t."total_occurrences" > 0
)

SELECT "publication_number" AS "Publication_Number", "originality_score" AS "Originality_Score"
FROM originality_scores
ORDER BY "originality_score" DESC NULLS LAST, "publication_number" ASC
LIMIT 1;
2025-02-12 21:38:08 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 21:38:08 - root - INFO - ```sql
WITH ipc_counts AS (
  SELECT 
    t1."publication_number",
    SUBSTR(fipc.value::VARIANT:"code"::STRING, 1, 4) AS "ipc4_code",
    COUNT(*) AS "occurrences_per_ipc"
  FROM PATENTS.PATENTS.PUBLICATIONS t1
  CROSS JOIN LATERAL FLATTEN(input => t1."citation") fc
  JOIN PATENTS.PATENTS.PUBLICATIONS cp ON fc.value::VARIANT:"publication_number"::STRING = cp."publication_number"
  CROSS JOIN LATERAL FLATTEN(input => cp."ipc") fipc
  WHERE t1."country_code" = 'US'
    AND t1."kind_code" = 'B2'
    AND t1."grant_date" BETWEEN 20150101 AND 20181231
  GROUP BY t1."publication_number", "ipc4_code"
),
total_occurrences AS (
  SELECT 
    "publication_number",
    SUM("occurrences_per_ipc") AS "total_occurrences"
  FROM ipc_counts
  GROUP BY "publication_number"
),
sum_occurrences_squared AS (
  SELECT
    "publication_number",
    SUM(POWER("occurrences_per_ipc", 2)) AS "sum_occurrences_per_ipc_squared"
  FROM ipc_counts
  GROUP BY "publication_number"
),
originality_scores AS (
  SELECT
    t."publication_number",
    1 - (s."sum_occurrences_per_ipc_squared" / POWER(t."total_occurrences", 2)) AS "originality_score"
  FROM total_occurrences t
  JOIN sum_occurrences_squared s ON t."publication_number" = s."publication_number"
  WHERE t."total_occurrences" > 0
)

SELECT "publication_number" AS "Publication_Number", ROUND("originality_score", 4) AS "Originality_Score"
FROM originality_scores
ORDER BY "originality_score" DESC NULLS LAST, "publication_number" ASC
LIMIT 1;
```
2025-02-12 21:38:08 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 21:38:08 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 21:38:08 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 21:38:09 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-02-12 21:38:09 - snowflake.connector.connection - INFO - closed
2025-02-12 21:38:09 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 21:38:09 - root - INFO - itercount: 3
2025-02-12 21:38:09 - root - INFO - 0
2025-02-12 21:38:09 - root - INFO - Total iteration counts: 3
