2025-01-26 16:26:21 - openai._base_client - INFO - Retrying request to /chat/completions in 0.477966 seconds
2025-01-26 16:27:05 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:27:05 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:05 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:05 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:06 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:27:06 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:07 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:27:07 - root - INFO - SQL:
SELECT * FROM AIRLINES.AIRLINES."FLIGHTS" LIMIT 100;
Results:
Too long, hard cut:
flight_id,flight_no,scheduled_departure,scheduled_arrival,departure_airport,arrival_airport,status,aircraft_code,actual_departure,actual_arrival
1185,PG0134,2017-09-10 09:50:00+03,2017-09-10 14:55:00+03,DME,BTK,Scheduled,319,\N,\N
3979,PG0052,2017-08-25 14:50:00+03,2017-08-25 17:35:00+03,VKO,HMA,Scheduled,CR2,\N,\N
4739,PG0561,2017-09-05 12:30:00+03,2017-09-05 14:15:00+03,VKO,AER,Scheduled,763,\N,\N
5502,PG0529,2017-09-12 09:50:00+03,2017-09-12 11:20:00+03,SVO,UFA,Scheduled,763,\N,\N
6938,PG0461,2017-09-04 12:25:00+03,2017-09-04 13:20:00+03,SVO,ULV,Scheduled,SU9,\N,\N
7784,PG0667,2017-09-10 15:00:00+03,2017-09-10 17:30:00+03,SVO,KRO,Scheduled,CR2,\N,\N
9478,PG0360,2017-08-28 09:00:00+03,2017-08-28 11:35:00+03,LED,REN,Scheduled,CR2,\N,\N
11085,PG0569,2017-08-24 15:05:00+03,2017-08-24 16:10:00+03,SVX,SCW,Scheduled,733,\N,\N
11847,PG0498,2017-09-12 10:15:00+03,2017-09-12 14:55:00+03,KZN,IKT,Scheduled,319,\N,\N
12012,PG0621,2017-08-26 16:05:00+03,2017-08-26 17:00:00+03,KZN,MQF,Scheduled,CR2,\N,\N
13113,PG0612,2017-08-18 16:25:00+03,2017-08-18 20:05:00+03,ROV,KZN,Scheduled,CN1,\N,\N
14806,PG0676,2017-09-06 07:05:00+03,2017-09-06 07:45:00+03,PEE,CEK,Scheduled,CR2,\N,\N
16837,PG0010,2017-09-05 12:25:00+03,2017-09-05 14:35:00+03,JOK,VKO,Scheduled,CN1,\N,\N
17173,PG0059,2017-09-14 12:25:00+03,2017-09-14 14:45:00+03,SCW,NBC,Cancelled,CN1,\N,\N
19807,PG0035,2017-09-11 06:35:00+03,2017-09-11 09:25:00+03,MJZ,CNN,Scheduled,CN1,\N,\N
23609,PG0648,2017-08-31 11:35:00+03,2017-08-31 13:00:00+03,UUA,SVO,Scheduled,CR2,\N,\N
23695,PG0388,2017-08-26 10:55:00+03,2017-08-26 11:25:00+03,UUA,REN,Scheduled,CR2,\N,\N
23780,PG0098,2017-09-02 06:50:00+03,2017-09-02 10:30:00+03,SWT,CEK,Scheduled,CN1,\N,\N
23945,PG0076,2017-09-05 09:15:00+03,2017-09-05 11:50:00+03,EYK,DME,Scheduled,CR2,\N,\N
24705,PG0632,2017-08-26 15:00:00+03,2017-08-26 17:35:00+03,TJM,PES,Scheduled,CR2,\N,\N
25382,PG0556,2017-08-31 09:05:00+03,2017-08-31 10:55:00+03,IKT,MJZ,Scheduled,CR2,\N,\N
26057,PG0467,2017-08-26 15:45:00+03,2017-08-26 17:00:00+03,ULY,RTW,Scheduled,CN1,\N,\N
27580,PG0483,2017-09-12 07:20:00+03,2017-09-12 11:20:00+03,KEJ,DME,Scheduled,SU9,\N,\N
29272,PG0334,2017-09-05 16:20:00+03,2017-09-05 19:05:00+03,KGD,ESL,Scheduled,CR2,\N,\N
29440,PG0065,2017-09-02 12:15:00+03,2017-09-02 18:05:00+03,UUD,VKO,Scheduled,319,\N,\N
32658,PG0674,2017-08-19 09:35:00+03,2017-08-19 12:00:00+03,KRO,KJA,Scheduled,CR2,\N,\N
1,PG0405,2017-07-16 09:35:00+03,2017-07-16 10:30:00+03,DME,LED,Arrived,321,2017-07-16 09:44:00+03,2017-07-16 10:39:00+03
2,PG0404,2017-08-05 19:05:00+03,2017-08-05 20:00:00+03,DME,LED,Arrived,321,2017-08-05 19:06:00+03,2017-08-05 20:01:00+03
3,PG0405,2017-08-05 09:35:00+03,2017-08-05 10:30:00+03,DME,LED,Arrived,321,2017-08-05 09:39:00+03,2017-08-05 10:34:00+03
4,PG0402,2017-09-09 12:25:00+03,2017-09-09 13:20:00+03,DME,LED,Scheduled,321,\N,\N
5,PG0405,2017-08-16 09:35:00+03,2017-08-16 10:30:00+03,DME,LED,On Time,321,\N,\N
6,PG0404,2017-08-16 19:05:00+03,2017-08-16 20:00:00+03,DME,LED,Scheduled,321,\N,\N
7,PG0403,2017-08-16 11:25:00+03,2017-08-16 12:20:00+03,DME,LED,Delayed,321,\N,\N
8,PG0402,2017-08-16 12:25:00+03,2017-08-16 13:20:00+03,DME,LED,On Time,321,\N,\N
9,PG0405,2017-08-25 09:35:00+03,2017-08-25 10:30:00+03,DME,LED,Scheduled,321,\N,\N
10,PG0402,2017-08-23 12:25:00+03,2017-08-23 13:20:00+03,DME,LED,Scheduled,321,\N,\N
11,PG0403,2017-08-23 11:25:00+03,2017-08-23 12:20:00+03,DME,LED,Scheduled,321,\N,\N
12,PG0404,2017-08-23 19:05:00+03,2017-08-23 20:00:00+03,DME,LED,Scheduled,321,\N,\N
13,PG0405,2017-08-23 09:35:00+03,2017-08-23 10:30:00+03,DME,LED,Scheduled,321,\N,\N
14,PG0402,2017-08-06 12:25:00+03,2017-08-06 13:20:00+03,DME,LED,Arrived,321,2017-08-06 12:28:00+03,2017-08-06 13:23:00+03
15,PG0402,2017-07-28 12:25:00+03,2017-07-28 13:20:00+03,DME,LED,Arrived,321,2017-07-28 12:31:00+03,2017-07-28 13:26:00+03
16,PG0403,2017-08-06 11:25:00+03,2017-08-06 12:20:00+03,DME,LED,Arrived,321,2017-08-06 11:27:00+03,2017-08-06 12:22:00+03
17,PG0404,2017-08-06 19:05:00+03,2017-08-06 20:00:00+03,DME,LED,Arrived,321,2017-08-06 19:05:00+03,2017-08-06 20:00:00+03
18,PG0405,2017-08-06 09:35:00+03,2017-08-06 10:30:00+03,DME,LED,Arrived,321,2017-08-06 09:39:00+03,2017-08-06 10:35:00+03
19,PG0403,2017-07-28 11:25:00+03,2017-07-28 12:20:00+03,DME,LED,Arrived,321,2017-07-28 11:27:00+03,2017-07-28 12:22:00+03
20,PG0403,2017-07-26 11:25:00+03,2017-07-26 12:20:00+03,DME,LED,Arrived,321,2017-07-26 11:28:00+03,2017-07-26 12:23:00+03
21,PG0405,2017-07-19 09:35:00+03,2017-07-19 10:30:00+03,DME,LED,Arrived,321,2017-07-19 09:36:00+03,2017-07-19 10:31:00+03
22,PG0404,2017-07-19 19:05:00+03,2017-07-19 20:00:00+03,DME,LED,Arrived,321,2017-07-19 19:06:00+03,2017-07-19 20:00:00+03
23,PG0403,2017-07-19 11:25:00+03,2017-07-19 12:20:00+03,DME,LED,Arrived,321,2017-07-19 11:29:00+03,2017-07-19 12:25:00+03
24,PG0402,2017-07-19 12:25:00+03,2017-07-19 13:20:00+03,DME,LED,Arrived,321,2017-07-19 12:29:00+03,2017-07-19 13:24:00+03
25,PG0404,2017-07-28 19:05:00+03,2017-07-28 20:00:00+03,DME,LED,Arr

2025-01-26 16:27:07 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:07 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:07 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:08 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:27:08 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:08 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:27:09 - root - INFO - SQL:
SELECT DISTINCT "departure_airport"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   LIMIT 100;
Results:
departure_airport
DME
VKO
LED
SVX
KZN
ROV
JOK
UUA
SWT
TJM
IKT
ULY
KEJ
KRO
SVO
SCW
EYK
UUD
OVB
CEK
OMS
KUF
UFA
VOZ
VOG
MMK
GRV
PES
NAL
BTK
NBC
BQS
ABA
KYZ
NOJ
MRV
GOJ
UCT
NNM
KGP
URJ
SLY
NYA
NYM
VKT
RGK
KHV
CSY
AER
PEE
MJZ
KGD
KJA
TBW
NJC
KXK
OSW
PKV
UUS
PKC
CNN
AAQ
USK
DYR
HMA
OVS
NFG
UKX
GDZ
BAX
IAR
MCX
TOF
REN
NOZ
ASF
PEZ
KVX
MQF
BZK
EGO
SGC
HTA
ARH
YKS
NUX
ESL
GDX
UIK
PYJ
KRR
RTW
IJK
ULV
VVO
LPK
URS
STW
IWA
KLF

2025-01-26 16:27:09 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:09 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:09 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:10 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:27:10 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:10 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:27:10 - root - INFO - SQL:
SELECT DISTINCT "arrival_airport"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   LIMIT 100;
Results:
arrival_airport
BTK
HMA
AER
UFA
ULV
KRO
REN
IKT
MQF
KZN
CEK
VKO
NBC
MJZ
RTW
SVO
PES
OVB
KUF
VOZ
TBW
ROV
GRV
JOK
NAL
PKC
ABA
MRV
USK
NNM
URJ
NYM
VKT
GDZ
KHV
MCX
KEJ
ARH
OMS
NOJ
SLY
CSY
GOJ
ULY
SGC
KGP
SWT
UCT
SCW
DME
LED
ESL
KJA
PKV
UUS
NUX
DYR
OVS
UUA
EYK
BAX
TOF
ASF
PEZ
LPK
KVX
KGD
BZK
EGO
PEE
VOG
MMK
URS
NYA
NFG
VVO
OGZ
SKX
SVX
RGK
TJM
IAR
NOZ
KXK
KYZ
HTA
UKX
CNN
NJC
NSK
KRR
UUD
AAQ
IJK
STW
YKS
KLF
CEE
UIK
IWA

2025-01-26 16:27:10 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:10 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:10 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:11 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:27:11 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:11 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:27:12 - root - INFO - SQL:
SELECT "airport_code", "city"
   FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
   LIMIT 100;
Results:
Too long, hard cut:
airport_code,city
YKS,"{""en"": ""Yakutsk"", ""ru"": ""Якутск""}"
MJZ,"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}"
KHV,"{""en"": ""Khabarovsk"", ""ru"": ""Хабаровск""}"
PKC,"{""en"": ""Petropavlovsk"", ""ru"": ""Петропавловск-Камчатский""}"
UUS,"{""en"": ""Yuzhno-Sakhalinsk"", ""ru"": ""Южно-Сахалинск""}"
VVO,"{""en"": ""Vladivostok"", ""ru"": ""Владивосток""}"
LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
KGD,"{""en"": ""Kaliningrad"", ""ru"": ""Калининград""}"
KEJ,"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}"
CEK,"{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}"
MQF,"{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}"
PEE,"{""en"": ""Perm"", ""ru"": ""Пермь""}"
SGC,"{""en"": ""Surgut"", ""ru"": ""Сургут""}"
BZK,"{""en"": ""Bryansk"", ""ru"": ""Брянск""}"
MRV,"{""en"": ""Mineralnye Vody"", ""ru"": ""Минеральные Воды""}"
STW,"{""en"": ""Stavropol"", ""ru"": ""Ставрополь""}"
ASF,"{""en"": ""Astrakhan"", ""ru"": ""Астрахань""}"
NJC,"{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}"
SVX,"{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}"
SVO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
VOZ,"{""en"": ""Voronezh"", ""ru"": ""Воронеж""}"
VKO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
SCW,"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}"
KUF,"{""en"": ""Samara"", ""ru"": ""Самара""}"
DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
TJM,"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}"
GOJ,"{""en"": ""Nizhniy Novgorod"", ""ru"": ""Нижний Новгород""}"
TOF,"{""en"": ""Tomsk"", ""ru"": ""Томск""}"
UIK,"{""en"": ""Ust Ilimsk"", ""ru"": ""Усть-Илимск""}"
NSK,"{""en"": ""Norilsk"", ""ru"": ""Норильск""}"
ARH,"{""en"": ""Arkhangelsk"", ""ru"": ""Архангельск""}"
RTW,"{""en"": ""Saratov"", ""ru"": ""Саратов""}"
NUX,"{""en"": ""Novy Urengoy"", ""ru"": ""Новый Уренгой""}"
NOJ,"{""en"": ""Noyabrsk"", ""ru"": ""Ноябрьск""}"
UCT,"{""en"": ""Ukhta"", ""ru"": ""Ухта""}"
USK,"{""en"": ""Usinsk"", ""ru"": ""Усинск""}"
NNM,"{""en"": ""Naryan-Mar"", ""ru"": ""Нарьян-Мар""}"
PKV,"{""en"": ""Pskov"", ""ru"": ""Псков""}"
KGP,"{""en"": ""Kogalym"", ""ru"": ""Когалым""}"
KJA,"{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}"
URJ,"{""en"": ""Uraj"", ""ru"": ""Урай""}"
IWA,"{""en"": ""Ivanovo"", ""ru"": ""Иваново""}"
PYJ,"{""en"": ""Yakutia"", ""ru"": ""Удачный""}"
KXK,"{""en"": ""Komsomolsk-on-Amur"", ""ru"": ""Комсомольск-на-Амуре""}"
DYR,"{""en"": ""Anadyr"", ""ru"": ""Анадырь""}"
PES,"{""en"": ""Petrozavodsk"", ""ru"": ""Петрозаводск""}"
KYZ,"{""en"": ""Kyzyl"", ""ru"": ""Кызыл""}"
NOZ,"{""en"": ""Novokuznetsk"", ""ru"": ""Новокузнецк""}"
GRV,"{""en"": ""Grozny"", ""ru"": ""Грозный""}"
NAL,"{""en"": ""Nalchik"", ""ru"": ""Нальчик""}"
OGZ,"{""en"": ""Beslan"", ""ru"": ""Владикавказ""}"
ESL,"{""en"": ""Elista"", ""ru"": ""Элиста""}"
SLY,"{""en"": ""Salekhard"", ""ru"": ""Салехард""}"
HMA,"{""en"": ""Khanty-Mansiysk"", ""ru"": ""Ханты-Мансийск""}"
NYA,"{""en"": ""Nyagan"", ""ru"": ""Нягань""}"
OVS,"{""en"": ""Sovetskiy"", ""ru"": ""Советский""}"
IJK,"{""en"": ""Izhevsk"", ""ru"": ""Ижевск""}"
KVX,"{""en"": ""Kirov"", ""ru"": ""Киров""}"
NYM,"{""en"": ""Nadym"", ""ru"": ""Надым""}"
NFG,"{""en"": ""Nefteyugansk"", ""ru"": ""Нефтеюганск""}"
KRO,"{""en"": ""Kurgan"", ""ru"": ""Курган""}"
EGO,"{""en"": ""Belgorod"", ""ru"": ""Белгород""}"
URS,"{""en"": ""Kursk"", ""ru"": ""Курск""}"
LPK,"{""en"": ""Lipetsk"", ""ru"": ""Липецк""}"
VKT,"{""en"": ""Vorkuta"", ""ru"": ""Воркута""}"
UUA,"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}"
JOK,"{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}"
CSY,"{""en"": ""Cheboksary"", ""ru"": ""Чебоксары""}"
ULY,"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}"
OSW,"{""en"": ""Orsk"", ""ru"": ""Орск""}"
PEZ,"{""en"": ""Penza"", ""ru"": ""Пенза""}"
SKX,"{""en"": ""Saransk"", ""ru"": ""Саранск""}"
TBW,"{""en"": ""Tambow"", ""ru"": ""Тамбов""}"
UKX,"{""en"": ""Ust-Kut"", ""ru"": ""Усть-Кут""}"
GDZ,"{""en"": ""Gelendzhik"", ""ru"": ""Геленджик""}"
IAR,"{""en"": ""Yaroslavl"", ""ru"": ""Ярославль""}"
NBC,"{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}"
ULV,"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}"
SWT,"{""en"": ""Strezhevoy"", ""ru"": ""Стрежевой""}"
EYK,"{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}"
KLF,"{""en"": ""Kaluga"", ""ru"": ""Калуга""}"
RGK,"{""en"": ""Gorno-Altaysk"", ""ru"": ""Горно-Алтайск""}"
KRR,"{""en"": ""Krasnodar"", ""ru"": ""Краснодар""}"
MCX,"{""en"": ""Makhachkala"", ""ru"": ""Махачкала""}"
KZN,"{""en"": ""Kazan"", ""ru"": ""Казань""}"
REN,"{""en"": ""Orenburg"", ""ru"": ""Оренбург""}"
UFA,"{""en"": ""Ufa"", ""ru"": ""Уфа""}"
OVB,"{""en"": ""Novosibirsk"", ""ru"": ""Новосибирск""}"
CEE,"{""en"": ""Cherepovets"", ""ru"": ""Череповец""}"
OMS,"{""en"": ""Omsk"", ""ru"": ""Омск""}"
ROV,"{""en"": ""Rostov"", ""ru"": ""Ростов-на-Дону""}"
AER,"{""en"": ""Sochi"", ""ru"": ""Сочи""}"
VOG,"{""en"": ""Volgograd"", ""ru"": ""Волгоград""}"
BQS,"{""en"": ""Blagoveschensk"", ""ru"": ""Благовещенск""}"
GDX,"{""en"": ""Magadan"", ""ru"": ""Магадан""}"
HTA,"{""en"": ""Chita"", ""ru"": "

2025-01-26 16:27:12 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:12 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:12 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:13 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:27:13 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:13 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:27:13 - root - INFO - SQL:
SELECT "airport_code", "city", "coordinates"
   FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
   WHERE "coordinates" IS NOT NULL
   LIMIT 100;
Results:
Too long, hard cut:
airport_code,city,coordinates
YKS,"{""en"": ""Yakutsk"", ""ru"": ""Якутск""}","(129.77099609375,62.0932998657226562)"
MJZ,"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}","(114.03900146484375,62.534698486328125)"
KHV,"{""en"": ""Khabarovsk"", ""ru"": ""Хабаровск""}","(135.18800354004,48.5279998779300001)"
PKC,"{""en"": ""Petropavlovsk"", ""ru"": ""Петропавловск-Камчатский""}","(158.453994750976562,53.1679000854492188)"
UUS,"{""en"": ""Yuzhno-Sakhalinsk"", ""ru"": ""Южно-Сахалинск""}","(142.718002319335938,46.8886985778808594)"
VVO,"{""en"": ""Vladivostok"", ""ru"": ""Владивосток""}","(132.147994995117188,43.3989982604980469)"
LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}","(30.2625007629394531,59.8003005981445312)"
KGD,"{""en"": ""Kaliningrad"", ""ru"": ""Калининград""}","(20.5925998687744141,54.8899993896484375)"
KEJ,"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}","(86.1072006225585938,55.2700996398925781)"
CEK,"{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}","(61.503300000000003,55.3058010000000024)"
MQF,"{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}","(58.7556991577148438,53.3931007385253906)"
PEE,"{""en"": ""Perm"", ""ru"": ""Пермь""}","(56.021198272705,57.9145011901860016)"
SGC,"{""en"": ""Surgut"", ""ru"": ""Сургут""}","(73.4018020629882812,61.3437004089355469)"
BZK,"{""en"": ""Bryansk"", ""ru"": ""Брянск""}","(34.1763992309999978,53.2141990661999955)"
MRV,"{""en"": ""Mineralnye Vody"", ""ru"": ""Минеральные Воды""}","(43.0819015502929688,44.2251014709472656)"
STW,"{""en"": ""Stavropol"", ""ru"": ""Ставрополь""}","(42.1128005981445312,45.1091995239257812)"
ASF,"{""en"": ""Astrakhan"", ""ru"": ""Астрахань""}","(48.0063018799000005,46.2832984924000002)"
NJC,"{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}","(76.4835968017578125,60.9492988586425781)"
SVX,"{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}","(60.8027000427250002,56.7430992126460012)"
SVO,"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.4146000000000001,55.9725990000000024)"
VOZ,"{""en"": ""Voronezh"", ""ru"": ""Воронеж""}","(39.2295989990234375,51.8142013549804688)"
VKO,"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.2615013122999983,55.5914993286000012)"
SCW,"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}","(50.8451004028320312,61.6469993591308594)"
KUF,"{""en"": ""Samara"", ""ru"": ""Самара""}","(50.1642990112299998,53.5049018859860013)"
DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.9062995910644531,55.4087982177734375)"
TJM,"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}","(65.3243026732999965,57.1896018981999958)"
GOJ,"{""en"": ""Nizhniy Novgorod"", ""ru"": ""Нижний Новгород""}","(43.7840003967289988,56.2300987243649999)"
TOF,"{""en"": ""Tomsk"", ""ru"": ""Томск""}","(85.2082977294920028,56.3802986145020029)"
UIK,"{""en"": ""Ust Ilimsk"", ""ru"": ""Усть-Илимск""}","(102.56500244140625,58.1361007690429688)"
NSK,"{""en"": ""Norilsk"", ""ru"": ""Норильск""}","(87.3321990966796875,69.31109619140625)"
ARH,"{""en"": ""Arkhangelsk"", ""ru"": ""Архангельск""}","(40.7167015075683594,64.6003036499023438)"
RTW,"{""en"": ""Saratov"", ""ru"": ""Саратов""}","(46.0466995239257812,51.5649986267089844)"
NUX,"{""en"": ""Novy Urengoy"", ""ru"": ""Новый Уренгой""}","(76.5203018188476562,66.06939697265625)"
NOJ,"{""en"": ""Noyabrsk"", ""ru"": ""Ноябрьск""}","(75.2699966430664062,63.1833000183105469)"
UCT,"{""en"": ""Ukhta"", ""ru"": ""Ухта""}","(53.8046989440917969,63.5668983459472656)"
USK,"{""en"": ""Usinsk"", ""ru"": ""Усинск""}","(57.3671989440917969,66.00469970703125)"
NNM,"{""en"": ""Naryan-Mar"", ""ru"": ""Нарьян-Мар""}","(53.1218986511230469,67.6399993896484375)"
PKV,"{""en"": ""Pskov"", ""ru"": ""Псков""}","(28.395599365234375,57.7839012145996094)"
KGP,"{""en"": ""Kogalym"", ""ru"": ""Когалым""}","(74.5337982177734375,62.190399169921875)"
KJA,"{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}","(92.493301391602003,56.1729011535639984)"
URJ,"{""en"": ""Uraj"", ""ru"": ""Урай""}","(64.8266983032226562,60.1032981872558594)"
IWA,"{""en"": ""Ivanovo"", ""ru"": ""Иваново""}","(40.9407997131347656,56.9393997192382812)"
PYJ,"{""en"": ""Yakutia"", ""ru"": ""Удачный""}","(112.029998778999996,66.4003982544000024)"
KXK,"{""en"": ""Komsomolsk-on-Amur"", ""ru"": ""Комсомольск-на-Амуре""}","(136.934005737304688,50.4090003967285156)"
DYR,"{""en"": ""Anadyr"", ""ru"": ""Анадырь""}","(177.740997314453125,64.7349014282226562)"
PES,"{""en"": ""Petrozavodsk"", ""ru"": ""Петрозаводск""}","(34.1547012329101562,61.8852005004882812)"
KYZ,"{""en"": ""Kyzyl"", ""ru"": ""Кызыл""}","(94.4005966186523438,51.6693992614746094)"
NOZ,"{""en"": ""Novokuznetsk"", ""ru"": ""Новокузнецк""}","(86.877197265625,53.8114013671875)"
GRV,"{""en"": ""Grozny"", ""ru"": ""Грозный""}","(45.7840995788574219,43.2980995178222656)"
NAL,"{""en"": ""Nalchik"", ""ru"": ""Нальчик""}","(43.6366004943847656,43.5129013061523438)"
OGZ,"{""en"": ""Beslan"", ""ru"": ""Владикавказ""}","(44.6066017150999983,43.2051010132000002)"
ESL,"{""en"": ""Elista"", ""ru"": ""Элиста""}","(44.

2025-01-26 16:27:13 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:13 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:13 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:15 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:27:15 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:15 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:27:15 - root - INFO - SQL:
SELECT "FLIGHTS"."flight_id", "FLIGHTS"."departure_airport", "AIRPORTS_DATA"."city" AS "departure_city"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   JOIN AIRLINES.AIRLINES."AIRPORTS_DATA"
     ON "FLIGHTS"."departure_airport" = "AIRPORTS_DATA"."airport_code"
   LIMIT 100;
Results:
Too long, hard cut:
flight_id,departure_airport,departure_city
1185,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
3979,VKO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
4739,VKO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
5502,SVO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
6938,SVO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
7784,SVO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
9478,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
11085,SVX,"{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}"
11847,KZN,"{""en"": ""Kazan"", ""ru"": ""Казань""}"
12012,KZN,"{""en"": ""Kazan"", ""ru"": ""Казань""}"
13113,ROV,"{""en"": ""Rostov"", ""ru"": ""Ростов-на-Дону""}"
14806,PEE,"{""en"": ""Perm"", ""ru"": ""Пермь""}"
16837,JOK,"{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}"
17173,SCW,"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}"
19807,MJZ,"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}"
23609,UUA,"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}"
23695,UUA,"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}"
23780,SWT,"{""en"": ""Strezhevoy"", ""ru"": ""Стрежевой""}"
23945,EYK,"{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}"
24705,TJM,"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}"
25382,IKT,"{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}"
26057,ULY,"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}"
27580,KEJ,"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}"
29272,KGD,"{""en"": ""Kaliningrad"", ""ru"": ""Калининград""}"
29440,UUD,"{""en"": ""Ulan-ude"", ""ru"": ""Улан-Удэ""}"
32658,KRO,"{""en"": ""Kurgan"", ""ru"": ""Курган""}"
1,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
2,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
3,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
4,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
5,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
6,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
7,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
8,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
9,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
10,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
11,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
12,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
13,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
14,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
15,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
16,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
17,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
18,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
19,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
20,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
21,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
22,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
23,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
24,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
25,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
26,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
27,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
28,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
29,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
30,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
31,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
32,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
33,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
34,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
35,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
36,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
37,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
38,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
39,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
40,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
41,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
42,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
43,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
44,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
45,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
46,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
47,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
48,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
49,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
50,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
51,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
52,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
53,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
54,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
55,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
56,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
57,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
58,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
59,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
60,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
61,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
62,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
63,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
64,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
65,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
66,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
67,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
68,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
69,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
70,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"


2025-01-26 16:27:15 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:15 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:15 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:16 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:27:16 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:16 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:27:17 - root - INFO - SQL:
SELECT "FLIGHTS"."flight_id", "FLIGHTS"."arrival_airport", "AIRPORTS_DATA"."city" AS "arrival_city"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   JOIN AIRLINES.AIRLINES."AIRPORTS_DATA"
     ON "FLIGHTS"."arrival_airport" = "AIRPORTS_DATA"."airport_code"
   LIMIT 100;
Results:
Too long, hard cut:
flight_id,arrival_airport,arrival_city
1185,BTK,"{""en"": ""Bratsk"", ""ru"": ""Братск""}"
3979,HMA,"{""en"": ""Khanty-Mansiysk"", ""ru"": ""Ханты-Мансийск""}"
4739,AER,"{""en"": ""Sochi"", ""ru"": ""Сочи""}"
5502,UFA,"{""en"": ""Ufa"", ""ru"": ""Уфа""}"
6938,ULV,"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}"
7784,KRO,"{""en"": ""Kurgan"", ""ru"": ""Курган""}"
9478,REN,"{""en"": ""Orenburg"", ""ru"": ""Оренбург""}"
11085,SCW,"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}"
11847,IKT,"{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}"
12012,MQF,"{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}"
13113,KZN,"{""en"": ""Kazan"", ""ru"": ""Казань""}"
14806,CEK,"{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}"
16837,VKO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
17173,NBC,"{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}"
19807,CNN,"{""en"": ""Neryungri"", ""ru"": ""Нерюнгри""}"
23609,SVO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
23695,REN,"{""en"": ""Orenburg"", ""ru"": ""Оренбург""}"
23780,CEK,"{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}"
23945,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
24705,PES,"{""en"": ""Petrozavodsk"", ""ru"": ""Петрозаводск""}"
25382,MJZ,"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}"
26057,RTW,"{""en"": ""Saratov"", ""ru"": ""Саратов""}"
27580,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
29272,ESL,"{""en"": ""Elista"", ""ru"": ""Элиста""}"
29440,VKO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
32658,KJA,"{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}"
1,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
2,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
3,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
4,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
5,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
6,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
7,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
8,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
9,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
10,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
11,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
12,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
13,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
14,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
15,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
16,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
17,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
18,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
19,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
20,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
21,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
22,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
23,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
24,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
25,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
26,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
27,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
28,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
29,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
30,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
31,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
32,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
33,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
34,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
35,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
36,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
37,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
38,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
39,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
40,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
41,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
42,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
43,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
44,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
45,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
46,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
47,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
48,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
49,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
50,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
51,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
52,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
53,LED,"{""en"": ""S

2025-01-26 16:27:17 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:17 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:17 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:18 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:27:18 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:18 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:27:18 - root - INFO - SQL:
SELECT DISTINCT
     DEP."city" AS "departure_city",
     ARR."city" AS "arrival_city"
   FROM AIRLINES.AIRLINES."FLIGHTS" F
   JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
     ON F."departure_airport" = DEP."airport_code"
   JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
     ON F."arrival_airport" = ARR."airport_code"
   LIMIT 100;
Results:
Too long, hard cut:
departure_city,arrival_city
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Bratsk"", ""ru"": ""Братск""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Sochi"", ""ru"": ""Сочи""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Kurgan"", ""ru"": ""Курган""}"
"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}","{""en"": ""Orenburg"", ""ru"": ""Оренбург""}"
"{""en"": ""Kazan"", ""ru"": ""Казань""}","{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}"
"{""en"": ""Perm"", ""ru"": ""Пермь""}","{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}"
"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}","{""en"": ""Moscow"", ""ru"": ""Москва""}"
"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}","{""en"": ""Orenburg"", ""ru"": ""Оренбург""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Kazan"", ""ru"": ""Казань""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Elista"", ""ru"": ""Элиста""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Neryungri"", ""ru"": ""Нерюнгри""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Naryan-Mar"", ""ru"": ""Нарьян-Мар""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Astrakhan"", ""ru"": ""Астрахань""}"
"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}","{""en"": ""Tambow"", ""ru"": ""Тамбов""}"
"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}","{""en"": ""Moscow"", ""ru"": ""Москва""}"
"{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}","{""en"": ""Moscow"", ""ru"": ""Москва""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}"
"{""en"": ""Novosibirsk"", ""ru"": ""Новосибирск""}","{""en"": ""Khanty-Mansiysk"", ""ru"": ""Ханты-Мансийск""}"
"{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}","{""en"": ""Ust-Kut"", ""ru"": ""Усть-Кут""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Perm"", ""ru"": ""Пермь""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Izhevsk"", ""ru"": ""Ижевск""}"
"{""en"": ""Penza"", ""ru"": ""Пенза""}","{""en"": ""Moscow"", ""ru"": ""Москва""}"
"{""en"": ""Rostov"", ""ru"": ""Ростов-на-Дону""}","{""en"": ""Kazan"", ""ru"": ""Казань""}"
"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}","{""en"": ""Saratov"", ""ru"": ""Саратов""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Salekhard"", ""ru"": ""Салехард""}"
"{""en"": ""Kurgan"", ""ru"": ""Курган""}","{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Omsk"", ""ru"": ""Омск""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}"
"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}","{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}"
"{""en"": ""Kazan"", ""ru"": ""Казань""}","{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
"{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}","{""en"": ""Sovetskiy"", ""ru"": ""Советский""}"
"{""en"": ""Blagoveschensk"", ""ru"": ""Благовещенск""}","{""en"": ""Khabarovsk"", ""ru"": ""Хабаровск""}"
"{""en"": ""Nizhniy Novgorod"", ""ru"": ""Нижний Новгород""}","{""en"": ""Nalchik"", ""ru"": ""Нальчик""}"
"{""en"": ""Anadyr"", ""ru"": ""Анадырь""}","{""en"": ""Khabarovsk"", ""ru"": ""Хабаровск""}"
"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}","{""en"": ""Uraj"", ""ru"": ""Урай""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Nizhniy Novgorod"", ""ru"": ""Нижний Новгород""}"
"{""en"": ""Yakutsk"", ""ru"": ""Якутск""}","{""en"": ""Yuzhno-Sakhalinsk"", ""ru"": ""Южно-Сахалинск""}"
"{""en"": ""Noyabrsk"", ""ru"": ""Ноябрьск""}","{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
"{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}","{""en"": ""Cheboksary"", ""ru"": ""Чебоксары""}"
"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}","{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}"
"{""en"": ""Tomsk"", ""ru"": ""Томск""}","{""en"": ""Moscow"", ""ru"": ""Москва""}"
"{""en"": ""Cheboksary"", ""ru"": ""Чебоксары""}","{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}"
"{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}","{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}"
"{""en"": ""Novosibirsk"", ""ru"": ""Новосибирск""}","{""en"": ""Perm"", ""ru"": ""Пермь""}"
"{""en"": ""Kazan"", ""ru"": ""Казань""}","{""en"": ""Kirov"", ""ru"": ""Киров""}"
"{""en"": ""Gorno-Altaysk"", ""ru"": ""Горно-Алтайск""}","{""en"": ""Moscow"", ""ru"": ""Москва""}"
"{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}","{""en"": ""Kurgan"", ""ru"": ""Курган""}"
"{""en"": ""Arkhangelsk"", ""ru"": ""Архангельск""}","{""en"": ""Perm"", ""ru"": ""Пермь""}"
"{""en"": ""St. Petersbu

2025-01-26 16:27:18 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:18 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:18 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:19 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:27:19 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:20 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:27:20 - root - INFO - SQL:
SELECT "flight_no", "scheduled_departure", "scheduled_arrival"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   LIMIT 100;
Results:
Too long, hard cut:
flight_no,scheduled_departure,scheduled_arrival
PG0134,2017-09-10 09:50:00+03,2017-09-10 14:55:00+03
PG0052,2017-08-25 14:50:00+03,2017-08-25 17:35:00+03
PG0561,2017-09-05 12:30:00+03,2017-09-05 14:15:00+03
PG0529,2017-09-12 09:50:00+03,2017-09-12 11:20:00+03
PG0461,2017-09-04 12:25:00+03,2017-09-04 13:20:00+03
PG0667,2017-09-10 15:00:00+03,2017-09-10 17:30:00+03
PG0360,2017-08-28 09:00:00+03,2017-08-28 11:35:00+03
PG0569,2017-08-24 15:05:00+03,2017-08-24 16:10:00+03
PG0498,2017-09-12 10:15:00+03,2017-09-12 14:55:00+03
PG0621,2017-08-26 16:05:00+03,2017-08-26 17:00:00+03
PG0612,2017-08-18 16:25:00+03,2017-08-18 20:05:00+03
PG0676,2017-09-06 07:05:00+03,2017-09-06 07:45:00+03
PG0010,2017-09-05 12:25:00+03,2017-09-05 14:35:00+03
PG0059,2017-09-14 12:25:00+03,2017-09-14 14:45:00+03
PG0035,2017-09-11 06:35:00+03,2017-09-11 09:25:00+03
PG0648,2017-08-31 11:35:00+03,2017-08-31 13:00:00+03
PG0388,2017-08-26 10:55:00+03,2017-08-26 11:25:00+03
PG0098,2017-09-02 06:50:00+03,2017-09-02 10:30:00+03
PG0076,2017-09-05 09:15:00+03,2017-09-05 11:50:00+03
PG0632,2017-08-26 15:00:00+03,2017-08-26 17:35:00+03
PG0556,2017-08-31 09:05:00+03,2017-08-31 10:55:00+03
PG0467,2017-08-26 15:45:00+03,2017-08-26 17:00:00+03
PG0483,2017-09-12 07:20:00+03,2017-09-12 11:20:00+03
PG0334,2017-09-05 16:20:00+03,2017-09-05 19:05:00+03
PG0065,2017-09-02 12:15:00+03,2017-09-02 18:05:00+03
PG0674,2017-08-19 09:35:00+03,2017-08-19 12:00:00+03
PG0405,2017-07-16 09:35:00+03,2017-07-16 10:30:00+03
PG0404,2017-08-05 19:05:00+03,2017-08-05 20:00:00+03
PG0405,2017-08-05 09:35:00+03,2017-08-05 10:30:00+03
PG0402,2017-09-09 12:25:00+03,2017-09-09 13:20:00+03
PG0405,2017-08-16 09:35:00+03,2017-08-16 10:30:00+03
PG0404,2017-08-16 19:05:00+03,2017-08-16 20:00:00+03
PG0403,2017-08-16 11:25:00+03,2017-08-16 12:20:00+03
PG0402,2017-08-16 12:25:00+03,2017-08-16 13:20:00+03
PG0405,2017-08-25 09:35:00+03,2017-08-25 10:30:00+03
PG0402,2017-08-23 12:25:00+03,2017-08-23 13:20:00+03
PG0403,2017-08-23 11:25:00+03,2017-08-23 12:20:00+03
PG0404,2017-08-23 19:05:00+03,2017-08-23 20:00:00+03
PG0405,2017-08-23 09:35:00+03,2017-08-23 10:30:00+03
PG0402,2017-08-06 12:25:00+03,2017-08-06 13:20:00+03
PG0402,2017-07-28 12:25:00+03,2017-07-28 13:20:00+03
PG0403,2017-08-06 11:25:00+03,2017-08-06 12:20:00+03
PG0404,2017-08-06 19:05:00+03,2017-08-06 20:00:00+03
PG0405,2017-08-06 09:35:00+03,2017-08-06 10:30:00+03
PG0403,2017-07-28 11:25:00+03,2017-07-28 12:20:00+03
PG0403,2017-07-26 11:25:00+03,2017-07-26 12:20:00+03
PG0405,2017-07-19 09:35:00+03,2017-07-19 10:30:00+03
PG0404,2017-07-19 19:05:00+03,2017-07-19 20:00:00+03
PG0403,2017-07-19 11:25:00+03,2017-07-19 12:20:00+03
PG0402,2017-07-19 12:25:00+03,2017-07-19 13:20:00+03
PG0404,2017-07-28 19:05:00+03,2017-07-28 20:00:00+03
PG0405,2017-08-12 09:35:00+03,2017-08-12 10:30:00+03
PG0404,2017-08-12 19:05:00+03,2017-08-12 20:00:00+03
PG0405,2017-09-03 09:35:00+03,2017-09-03 10:30:00+03
PG0403,2017-08-12 11:25:00+03,2017-08-12 12:20:00+03
PG0402,2017-08-12 12:25:00+03,2017-08-12 13:20:00+03
PG0404,2017-09-03 19:05:00+03,2017-09-03 20:00:00+03
PG0403,2017-09-03 11:25:00+03,2017-09-03 12:20:00+03
PG0402,2017-09-03 12:25:00+03,2017-09-03 13:20:00+03
PG0402,2017-08-07 12:25:00+03,2017-08-07 13:20:00+03
PG0403,2017-08-07 11:25:00+03,2017-08-07 12:20:00+03
PG0404,2017-08-07 19:05:00+03,2017-08-07 20:00:00+03
PG0405,2017-08-07 09:35:00+03,2017-08-07 10:30:00+03
PG0405,2017-07-28 09:35:00+03,2017-07-28 10:30:00+03
PG0405,2017-09-08 09:35:00+03,2017-09-08 10:30:00+03
PG0402,2017-09-13 12:25:00+03,2017-09-13 13:20:00+03
PG0403,2017-09-13 11:25:00+03,2017-09-13 12:20:00+03
PG0404,2017-09-13 19:05:00+03,2017-09-13 20:00:00+03
PG0405,2017-09-13 09:35:00+03,2017-09-13 10:30:00+03
PG0404,2017-09-08 19:05:00+03,2017-09-08 20:00:00+03
PG0403,2017-09-08 11:25:00+03,2017-09-08 12:20:00+03
PG0405,2017-08-15 09:35:00+03,2017-08-15 10:30:00+03
PG0404,2017-08-15 19:05:00+03,2017-08-15 20:00:00+03
PG0403,2017-08-15 11:25:00+03,2017-08-15 12:20:00+03
PG0402,2017-08-15 12:25:00+03,2017-08-15 13:20:00+03
PG0402,2017-08-08 12:25:00+03,2017-08-08 13:20:00+03
PG0403,2017-08-08 11:25:00+03,2017-08-08 12:20:00+03
PG0404,2017-08-08 19:05:00+03,2017-08-08 20:00:00+03
PG0405,2017-08-08 09:35:00+03,2017-08-08 10:30:00+03
PG0405,2017-07-18 09:35:00+03,2017-07-18 10:30:00+03
PG0404,2017-07-18 19:05:00+03,2017-07-18 20:00:00+03
PG0403,2017-07-18 11:25:00+03,2017-07-18 12:20:00+03
PG0402,2017-07-18 12:25:00+03,2017-07-18 13:20:00+03
PG0402,2017-09-08 12:25:00+03,2017-09-08 13:20:00+03
PG0402,2017-07-26 12:25:00+03,2017-07-26 13:20:00+03
PG0402,2017-07-16 12:25:00+03,2017-07-16 13:20:00+03
PG0403,2017-07-16 11:25:00+03,2017-07-16 12:20:00+03
PG0404,2017-07-16 19:05:00+03,2017-07-16 20:00:00+03
PG0402,2017-08-30 12:25:00+03,2017-08-30 13:20:00+03
PG0403,2017-08-30 11:25:00+03,2017-08-30 12:20:00+03
PG0405,2017-09-02 09:35:00+03,2017-09-02 10:30:00+03
PG0404,2017-09-02 19:05:00+03,2017-09-02 20:00:00+03
PG0404,2017-07-26 19:05:00+03,2017-07-26 20:00:00+03
PG0403,2017-09-02 11:25

2025-01-26 16:27:20 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:20 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:20 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:21 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:27:21 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:21 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:27:21 - root - INFO - SQL:
SELECT DEP."city" AS "departure_city", COUNT(*) AS "flight_count"
    FROM AIRLINES.AIRLINES."FLIGHTS" F
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
      ON F."departure_airport" = DEP."airport_code"
    GROUP BY DEP."city"
    ORDER BY "flight_count" DESC
    LIMIT 100;
Results:
Too long, hard cut:
departure_city,flight_count
"{""en"": ""Moscow"", ""ru"": ""Москва""}",7917
"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}",1900
"{""en"": ""Novosibirsk"", ""ru"": ""Новосибирск""}",1055
"{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}",707
"{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}",689
"{""en"": ""Perm"", ""ru"": ""Пермь""}",619
"{""en"": ""Rostov"", ""ru"": ""Ростов-на-Дону""}",617
"{""en"": ""Bryansk"", ""ru"": ""Брянск""}",610
"{""en"": ""Sochi"", ""ru"": ""Сочи""}",584
"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}",584
"{""en"": ""Sovetskiy"", ""ru"": ""Советский""}",549
"{""en"": ""Surgut"", ""ru"": ""Сургут""}",531
"{""en"": ""Khanty-Mansiysk"", ""ru"": ""Ханты-Мансийск""}",515
"{""en"": ""Novy Urengoy"", ""ru"": ""Новый Уренгой""}",506
"{""en"": ""Kazan"", ""ru"": ""Казань""}",471
"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}",427
"{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}",409
"{""en"": ""Khabarovsk"", ""ru"": ""Хабаровск""}",400
"{""en"": ""Ufa"", ""ru"": ""Уфа""}",384
"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}",383
"{""en"": ""Belgorod"", ""ru"": ""Белгород""}",366
"{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}",366
"{""en"": ""Kirov"", ""ru"": ""Киров""}",366
"{""en"": ""Novokuznetsk"", ""ru"": ""Новокузнецк""}",365
"{""en"": ""Petrozavodsk"", ""ru"": ""Петрозаводск""}",358
"{""en"": ""Nizhniy Novgorod"", ""ru"": ""Нижний Новгород""}",357
"{""en"": ""Arkhangelsk"", ""ru"": ""Архангельск""}",323
"{""en"": ""Volgograd"", ""ru"": ""Волгоград""}",314
"{""en"": ""Cheboksary"", ""ru"": ""Чебоксары""}",305
"{""en"": ""Orenburg"", ""ru"": ""Оренбург""}",305
"{""en"": ""Elista"", ""ru"": ""Элиста""}",297
"{""en"": ""Vorkuta"", ""ru"": ""Воркута""}",280
"{""en"": ""Yuzhno-Sakhalinsk"", ""ru"": ""Южно-Сахалинск""}",262
"{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}",261
"{""en"": ""Tomsk"", ""ru"": ""Томск""}",254
"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}",253
"{""en"": ""Penza"", ""ru"": ""Пенза""}",244
"{""en"": ""Saratov"", ""ru"": ""Саратов""}",244
"{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}",244
"{""en"": ""Tambow"", ""ru"": ""Тамбов""}",244
"{""en"": ""Krasnodar"", ""ru"": ""Краснодар""}",236
"{""en"": ""Abakan"", ""ru"": ""Абакан""}",235
"{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}",227
"{""en"": ""Kurgan"", ""ru"": ""Курган""}",211
"{""en"": ""Mineralnye Vody"", ""ru"": ""Минеральные Воды""}",209
"{""en"": ""Makhachkala"", ""ru"": ""Махачкала""}",200
"{""en"": ""Omsk"", ""ru"": ""Омск""}",200
"{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}",192
"{""en"": ""Kogalym"", ""ru"": ""Когалым""}",192
"{""en"": ""Noyabrsk"", ""ru"": ""Ноябрьск""}",184
"{""en"": ""Samara"", ""ru"": ""Самара""}",183
"{""en"": ""Vladivostok"", ""ru"": ""Владивосток""}",183
"{""en"": ""Ukhta"", ""ru"": ""Ухта""}",183
"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}",183
"{""en"": ""Nalchik"", ""ru"": ""Нальчик""}",183
"{""en"": ""Ust Ilimsk"", ""ru"": ""Усть-Илимск""}",175
"{""en"": ""Yakutsk"", ""ru"": ""Якутск""}",166
"{""en"": ""Neryungri"", ""ru"": ""Нерюнгри""}",158
"{""en"": ""Naryan-Mar"", ""ru"": ""Нарьян-Мар""}",157
"{""en"": ""Kaliningrad"", ""ru"": ""Калининград""}",157
"{""en"": ""Barnaul"", ""ru"": ""Барнаул""}",156
"{""en"": ""Astrakhan"", ""ru"": ""Астрахань""}",148
"{""en"": ""Nadym"", ""ru"": ""Надым""}",140
"{""en"": ""Kursk"", ""ru"": ""Курск""}",139
"{""en"": ""Norilsk"", ""ru"": ""Норильск""}",139
"{""en"": ""Cherepovets"", ""ru"": ""Череповец""}",131
"{""en"": ""Anapa"", ""ru"": ""Анапа""}",131
"{""en"": ""Stavropol"", ""ru"": ""Ставрополь""}",123
"{""en"": ""Voronezh"", ""ru"": ""Воронеж""}",122
"{""en"": ""Salekhard"", ""ru"": ""Салехард""}",122
"{""en"": ""Uraj"", ""ru"": ""Урай""}",122
"{""en"": ""Saransk"", ""ru"": ""Саранск""}",122
"{""en"": ""Kaluga"", ""ru"": ""Калуга""}",122
"{""en"": ""Beslan"", ""ru"": ""Владикавказ""}",122
"{""en"": ""Murmansk"", ""ru"": ""Мурманск""}",122
"{""en"": ""Gelendzhik"", ""ru"": ""Геленджик""}",113
"{""en"": ""Chita"", ""ru"": ""Чита""}",96
"{""en"": ""Pskov"", ""ru"": ""Псков""}",96
"{""en"": ""Gorno-Altaysk"", ""ru"": ""Горно-Алтайск""}",88
"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}",87
"{""en"": ""Yaroslavl"", ""ru"": ""Ярославль""}",79
"{""en"": ""Ulan-ude"", ""ru"": ""Улан-Удэ""}",71
"{""en"": ""Orsk"", ""ru"": ""Орск""}",71
"{""en"": ""Grozny"", ""ru"": ""Грозный""}",70
"{""en"": ""Blagoveschensk"", ""ru"": ""Благовещенск""}",61
"{""en"": ""Ust-Kut"", ""ru"": ""Усть-Кут""}",61
"{""en"": ""Izhevsk"", ""ru"": ""Ижевск""}",61
"{""en"": ""Strezhevoy"", ""ru"": ""Стрежевой""}",61
"{""en"": ""Bratsk"", ""ru"": ""Братск""}",61
"{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}",53
"{""en"": ""Nefteyugansk"", ""ru"": ""Нефтеюганск""}",44
"{""en"": ""Lipetsk"", ""ru"": ""Липецк""}",43
"{""en"": ""Kyzyl"", ""ru"": ""Кызыл""}",43
"{""en"": ""Magadan"", ""ru"": ""Магадан""}",36
"{""en"": ""Anadyr"", ""ru"": ""Анадырь""}",36
"{""en"": ""Ivanovo"", ""ru"": ""Иваново""}",34
"{""en"": ""Nyagan"", ""ru"": ""Нягань""}

2025-01-26 16:27:21 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:21 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:21 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:23 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:27:23 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:23 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:27:23 - root - INFO - SQL:
SELECT ARR."city" AS "arrival_city", COUNT(*) AS "flight_count"
    FROM AIRLINES.AIRLINES."FLIGHTS" F
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
      ON F."arrival_airport" = ARR."airport_code"
    GROUP BY ARR."city"
    ORDER BY "flight_count" DESC
    LIMIT 100;
Results:
Too long, hard cut:
arrival_city,flight_count
"{""en"": ""Moscow"", ""ru"": ""Москва""}",7916
"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}",1902
"{""en"": ""Novosibirsk"", ""ru"": ""Новосибирск""}",1055
"{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}",707
"{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}",688
"{""en"": ""Rostov"", ""ru"": ""Ростов-на-Дону""}",620
"{""en"": ""Perm"", ""ru"": ""Пермь""}",619
"{""en"": ""Bryansk"", ""ru"": ""Брянск""}",610
"{""en"": ""Sochi"", ""ru"": ""Сочи""}",584
"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}",584
"{""en"": ""Sovetskiy"", ""ru"": ""Советский""}",549
"{""en"": ""Surgut"", ""ru"": ""Сургут""}",530
"{""en"": ""Khanty-Mansiysk"", ""ru"": ""Ханты-Мансийск""}",515
"{""en"": ""Novy Urengoy"", ""ru"": ""Новый Уренгой""}",506
"{""en"": ""Kazan"", ""ru"": ""Казань""}",470
"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}",428
"{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}",411
"{""en"": ""Khabarovsk"", ""ru"": ""Хабаровск""}",402
"{""en"": ""Ufa"", ""ru"": ""Уфа""}",384
"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}",383
"{""en"": ""Novokuznetsk"", ""ru"": ""Новокузнецк""}",366
"{""en"": ""Belgorod"", ""ru"": ""Белгород""}",366
"{""en"": ""Kirov"", ""ru"": ""Киров""}",366
"{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}",365
"{""en"": ""Nizhniy Novgorod"", ""ru"": ""Нижний Новгород""}",357
"{""en"": ""Petrozavodsk"", ""ru"": ""Петрозаводск""}",356
"{""en"": ""Arkhangelsk"", ""ru"": ""Архангельск""}",322
"{""en"": ""Volgograd"", ""ru"": ""Волгоград""}",314
"{""en"": ""Cheboksary"", ""ru"": ""Чебоксары""}",305
"{""en"": ""Orenburg"", ""ru"": ""Оренбург""}",305
"{""en"": ""Elista"", ""ru"": ""Элиста""}",296
"{""en"": ""Vorkuta"", ""ru"": ""Воркута""}",279
"{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}",262
"{""en"": ""Yuzhno-Sakhalinsk"", ""ru"": ""Южно-Сахалинск""}",262
"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}",253
"{""en"": ""Tomsk"", ""ru"": ""Томск""}",253
"{""en"": ""Saratov"", ""ru"": ""Саратов""}",244
"{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}",244
"{""en"": ""Penza"", ""ru"": ""Пенза""}",244
"{""en"": ""Tambow"", ""ru"": ""Тамбов""}",244
"{""en"": ""Krasnodar"", ""ru"": ""Краснодар""}",236
"{""en"": ""Abakan"", ""ru"": ""Абакан""}",235
"{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}",226
"{""en"": ""Kurgan"", ""ru"": ""Курган""}",212
"{""en"": ""Mineralnye Vody"", ""ru"": ""Минеральные Воды""}",209
"{""en"": ""Makhachkala"", ""ru"": ""Махачкала""}",201
"{""en"": ""Omsk"", ""ru"": ""Омск""}",200
"{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}",192
"{""en"": ""Kogalym"", ""ru"": ""Когалым""}",191
"{""en"": ""Vladivostok"", ""ru"": ""Владивосток""}",183
"{""en"": ""Samara"", ""ru"": ""Самара""}",183
"{""en"": ""Ukhta"", ""ru"": ""Ухта""}",183
"{""en"": ""Nalchik"", ""ru"": ""Нальчик""}",183
"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}",183
"{""en"": ""Noyabrsk"", ""ru"": ""Ноябрьск""}",182
"{""en"": ""Ust Ilimsk"", ""ru"": ""Усть-Илимск""}",175
"{""en"": ""Yakutsk"", ""ru"": ""Якутск""}",167
"{""en"": ""Neryungri"", ""ru"": ""Нерюнгри""}",158
"{""en"": ""Kaliningrad"", ""ru"": ""Калининград""}",158
"{""en"": ""Naryan-Mar"", ""ru"": ""Нарьян-Мар""}",157
"{""en"": ""Barnaul"", ""ru"": ""Барнаул""}",156
"{""en"": ""Astrakhan"", ""ru"": ""Астрахань""}",148
"{""en"": ""Norilsk"", ""ru"": ""Норильск""}",140
"{""en"": ""Nadym"", ""ru"": ""Надым""}",140
"{""en"": ""Kursk"", ""ru"": ""Курск""}",139
"{""en"": ""Anapa"", ""ru"": ""Анапа""}",131
"{""en"": ""Cherepovets"", ""ru"": ""Череповец""}",130
"{""en"": ""Stavropol"", ""ru"": ""Ставрополь""}",123
"{""en"": ""Salekhard"", ""ru"": ""Салехард""}",122
"{""en"": ""Uraj"", ""ru"": ""Урай""}",122
"{""en"": ""Voronezh"", ""ru"": ""Воронеж""}",122
"{""en"": ""Saransk"", ""ru"": ""Саранск""}",122
"{""en"": ""Murmansk"", ""ru"": ""Мурманск""}",122
"{""en"": ""Kaluga"", ""ru"": ""Калуга""}",122
"{""en"": ""Beslan"", ""ru"": ""Владикавказ""}",122
"{""en"": ""Gelendzhik"", ""ru"": ""Геленджик""}",114
"{""en"": ""Pskov"", ""ru"": ""Псков""}",96
"{""en"": ""Chita"", ""ru"": ""Чита""}",96
"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}",88
"{""en"": ""Gorno-Altaysk"", ""ru"": ""Горно-Алтайск""}",88
"{""en"": ""Yaroslavl"", ""ru"": ""Ярославль""}",79
"{""en"": ""Ulan-ude"", ""ru"": ""Улан-Удэ""}",70
"{""en"": ""Grozny"", ""ru"": ""Грозный""}",70
"{""en"": ""Orsk"", ""ru"": ""Орск""}",70
"{""en"": ""Strezhevoy"", ""ru"": ""Стрежевой""}",61
"{""en"": ""Ust-Kut"", ""ru"": ""Усть-Кут""}",61
"{""en"": ""Bratsk"", ""ru"": ""Братск""}",61
"{""en"": ""Blagoveschensk"", ""ru"": ""Благовещенск""}",61
"{""en"": ""Izhevsk"", ""ru"": ""Ижевск""}",61
"{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}",53
"{""en"": ""Lipetsk"", ""ru"": ""Липецк""}",44
"{""en"": ""Kyzyl"", ""ru"": ""Кызыл""}",44
"{""en"": ""Nefteyugansk"", ""ru"": ""Нефтеюганск""}",44
"{""en"": ""Ivanovo"", ""ru"": ""Иваново""}",36
"{""en"": ""Magadan"", ""ru"": ""Магадан""}",35
"{""en"": ""Anadyr"", ""ru"": ""Анадырь""}",34
"{""en"": ""Yakutia"", ""ru"": ""Удачный""}

2025-01-26 16:27:23 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:23 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:23 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:24 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-26 16:27:24 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:25 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:27:51 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:27:51 - root - INFO - ```sql
SELECT DISTINCT
     DEP."city"::json->>'en' AS "departure_city",
     ARR."city"::json->>'en' AS "arrival_city"
FROM AIRLINES.AIRLINES."FLIGHTS" F
JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
  ON F."departure_airport" = DEP."airport_code"
JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
  ON F."arrival_airport" = ARR."airport_code"
LIMIT 100;
```
2025-01-26 16:27:51 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:27:51 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:27:51 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:27:52 - snowflake.connector.connection - INFO - closed
2025-01-26 16:27:53 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:28:06 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:28:06 - root - INFO - ```sql
SELECT DISTINCT
     (DEP."city":en)::STRING AS "departure_city",
     (ARR."city":en)::STRING AS "arrival_city"
FROM AIRLINES.AIRLINES."FLIGHTS" F
JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
  ON F."departure_airport" = DEP."airport_code"
JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
  ON F."arrival_airport" = ARR."airport_code"
LIMIT 100;
```
2025-01-26 16:28:06 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:28:06 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:28:06 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:28:08 - snowflake.connector.connection - INFO - closed
2025-01-26 16:28:08 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:28:57 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:28:57 - root - INFO - The error you're encountering indicates that the `"timezone"` column is not of type `VARCHAR`, and applying the `ILIKE` operator directly on it is causing a data type mismatch. Specifically, the error message:

```
Invalid argument types for function 'GET': (VARCHAR(16777216), VARCHAR(2))
```

suggests that the `GET` function (which is used internally by `ILIKE` when handling certain data types) is failing because it's being provided with incorrect argument types.

**Reason for the Error:**

- **Data Type Mismatch**: The `"timezone"` column is likely stored as a `VARIANT` (possibly containing JSON data) or another data type, not as a simple `VARCHAR` string. Applying `ILIKE` directly to it tries to perform pattern matching on a non-string data type, leading to the error.

**Solution:**

To resolve this issue, we need to ensure that the `"timezone"` column is cast to a string data type before applying the `ILIKE` operator. Here's how you can modify your query:

```sql
SELECT
  "airport_code",
  PARSE_JSON("city"):"en"::STRING AS "city_en",
  TO_VARCHAR("timezone") AS "timezone_str"
FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
WHERE TO_VARCHAR("timezone") ILIKE '%UTC%'
LIMIT 100;
```

**Explanation:**

- **Casting `"timezone"` to `VARCHAR`**: The `TO_VARCHAR("timezone")` function explicitly casts the `"timezone"` column to a string, allowing `ILIKE` to perform the pattern matching operation.

- **Parsing the `"city"` Column**: Since the `"city"` column contains JSON-formatted strings (e.g., `{"en": "Moscow", "ru": "Москва"}`), we use `PARSE_JSON("city")` to convert it to a `VARIANT` data type and then extract the English city name using `:"en"`.

**Steps to Verify and Apply the Fix:**

1. **Check the Data Format of `"timezone"`:**

   Before modifying the query, it’s helpful to inspect the data stored in the `"timezone"` column to understand its format.

   ```sql
   SELECT "timezone"
   FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
   LIMIT 10;
   ```

   Review the output to determine if `"timezone"` is stored as a JSON string, `VARIANT`, or another data type.

2. **Adjust the Query Based on Data Format:**

   - **If `"timezone"` is a Simple String but Stored as `VARIANT`**:

     ```sql
     SELECT
       "airport_code",
       PARSE_JSON("city"):"en"::STRING AS "city_en",
       TO_VARCHAR("timezone") AS "timezone_str"
     FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
     WHERE TO_VARCHAR("timezone") ILIKE '%UTC%'
     LIMIT 100;
     ```

   - **If `"timezone"` Contains JSON Data**:

     You'll need to parse the `"timezone"` column just like the `"city"` column.

     ```sql
     SELECT
       "airport_code",
       PARSE_JSON("city"):"en"::STRING AS "city_en",
       PARSE_JSON("timezone"):"your_key"::STRING AS "timezone_str"
     FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
     WHERE PARSE_JSON("timezone"):"your_key"::STRING ILIKE '%UTC%'
     LIMIT 100;
     ```

     Replace `"your_key"` with the actual key that contains the timezone string.

3. **Full Corrected Query:**

   Assuming that casting to `VARCHAR` is sufficient:

   ```sql
   SELECT
     "airport_code",
     PARSE_JSON("city"):"en"::STRING AS "city_en",
     TO_VARCHAR("timezone") AS "timezone_str"
   FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
   WHERE TO_VARCHAR("timezone") ILIKE '%UTC%'
   LIMIT 100;
   ```

**Note:**

- **Casting and Parsing**: By casting `"timezone"` to `VARCHAR`, we ensure compatibility with the `ILIKE` operator. If further parsing is needed (e.g., if `"timezone"` contains JSON), you may need to use `PARSE_JSON` and extract the desired value.

- **Error Source**: The error message mentions the `GET` function because, internally, when you use `ILIKE` on a `VARIANT` data type, Snowflake tries to retrieve the string value using a method akin to `GET`, which fails if the data isn't in the expected format.

**Additional Considerations:**

- **Consistent Data Types**: Always ensure that the data types match the operations you're performing. When dealing with `VARIANT` or JSON data, parsing and casting are often necessary.

- **Data Inspection**: If you continue to encounter errors, consider inspecting the specific rows causing issues or checking for `NULL` or unexpected values.

- **Sample Output** (Assuming the data is correctly parsed):

  ```sql
  SELECT
    "airport_code",
    PARSE_JSON("city"):"en"::STRING AS "city_en",
    TO_VARCHAR("timezone") AS "timezone_str"
  FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
  WHERE TO_VARCHAR("timezone") ILIKE '%UTC%'
  LIMIT 10;
  ```

  | airport_code | city_en       | timezone_str    |
  |--------------|---------------|-----------------|
  | DME          | Moscow        | UTC+3           |
  | SVO          | Moscow        | UTC+3           |
  | LED          | St. Petersburg| UTC+3           |
  | ...          | ...           | ...             |

**Summary:**

- The error occurs due to a data type mismatch when using `ILIKE` on the `"timezone"` column.
- Casting `"timezone"` to `VARCHAR` using `TO_VARCHAR("timezone")` resolves the issue.
- Use `PARSE_JSON` to handle JSON-formatted strings in the `"city"` column.
- Always ensure data types are compatible with the functions and operators you're using.

---

**Final Corrected SQL Query:**

```sql
SELECT
  "airport_code",
  PARSE_JSON("city"):"en"::STRING AS "city_en",
  TO_VARCHAR("timezone") AS "timezone_str"
FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
WHERE TO_VARCHAR("timezone") ILIKE '%UTC%'
LIMIT 100;
```

This adjusted query should execute without errors and provide you with the desired results.
2025-01-26 16:28:57 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:28:57 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:28:57 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:28:59 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-26 16:28:59 - snowflake.connector.connection - INFO - closed
2025-01-26 16:28:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:28:59 - root - INFO - SQL:
SELECT
  "airport_code",
  PARSE_JSON("city"):"en"::STRING AS "city_en",
  TO_VARCHAR("timezone") AS "timezone_str"
FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
WHERE TO_VARCHAR("timezone") ILIKE '%UTC%'
LIMIT 100;
Results:
No data found for the specified query.

2025-01-26 16:28:59 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:28:59 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:28:59 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:29:01 - snowflake.connector.cursor - INFO - Number of results in first chunk: 9
2025-01-26 16:29:01 - snowflake.connector.connection - INFO - closed
2025-01-26 16:29:01 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:29:01 - root - INFO - SQL:
SELECT "aircraft_code", "model"
    FROM AIRLINES.AIRLINES."AIRCRAFTS_DATA"
    LIMIT 100;
Results:
aircraft_code,model
773,"{""en"": ""Boeing 777-300"", ""ru"": ""Боинг 777-300""}"
763,"{""en"": ""Boeing 767-300"", ""ru"": ""Боинг 767-300""}"
SU9,"{""en"": ""Sukhoi Superjet-100"", ""ru"": ""Сухой Суперджет-100""}"
320,"{""en"": ""Airbus A320-200"", ""ru"": ""Аэробус A320-200""}"
321,"{""en"": ""Airbus A321-200"", ""ru"": ""Аэробус A321-200""}"
319,"{""en"": ""Airbus A319-100"", ""ru"": ""Аэробус A319-100""}"
733,"{""en"": ""Boeing 737-300"", ""ru"": ""Боинг 737-300""}"
CN1,"{""en"": ""Cessna 208 Caravan"", ""ru"": ""Сессна 208 Караван""}"
CR2,"{""en"": ""Bombardier CRJ-200"", ""ru"": ""Бомбардье CRJ-200""}"

2025-01-26 16:29:01 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:29:01 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:29:01 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:29:02 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:29:02 - snowflake.connector.connection - INFO - closed
2025-01-26 16:29:03 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:29:03 - root - INFO - SQL:
SELECT "flight_no", "actual_departure", "actual_arrival"
    FROM AIRLINES.AIRLINES."FLIGHTS"
    WHERE "actual_departure" IS NOT NULL AND "actual_arrival" IS NOT NULL
    LIMIT 100;
Results:
flight_no,actual_departure,actual_arrival
PG0134,\N,\N
PG0052,\N,\N
PG0561,\N,\N
PG0529,\N,\N
PG0461,\N,\N
PG0667,\N,\N
PG0360,\N,\N
PG0569,\N,\N
PG0498,\N,\N
PG0621,\N,\N
PG0612,\N,\N
PG0676,\N,\N
PG0010,\N,\N
PG0059,\N,\N
PG0035,\N,\N
PG0648,\N,\N
PG0388,\N,\N
PG0098,\N,\N
PG0076,\N,\N
PG0632,\N,\N
PG0556,\N,\N
PG0467,\N,\N
PG0483,\N,\N
PG0334,\N,\N
PG0065,\N,\N
PG0674,\N,\N
PG0405,2017-07-16 09:44:00+03,2017-07-16 10:39:00+03
PG0404,2017-08-05 19:06:00+03,2017-08-05 20:01:00+03
PG0405,2017-08-05 09:39:00+03,2017-08-05 10:34:00+03
PG0402,\N,\N
PG0405,\N,\N
PG0404,\N,\N
PG0403,\N,\N
PG0402,\N,\N
PG0405,\N,\N
PG0402,\N,\N
PG0403,\N,\N
PG0404,\N,\N
PG0405,\N,\N
PG0402,2017-08-06 12:28:00+03,2017-08-06 13:23:00+03
PG0402,2017-07-28 12:31:00+03,2017-07-28 13:26:00+03
PG0403,2017-08-06 11:27:00+03,2017-08-06 12:22:00+03
PG0404,2017-08-06 19:05:00+03,2017-08-06 20:00:00+03
PG0405,2017-08-06 09:39:00+03,2017-08-06 10:35:00+03
PG0403,2017-07-28 11:27:00+03,2017-07-28 12:22:00+03
PG0403,2017-07-26 11:28:00+03,2017-07-26 12:23:00+03
PG0405,2017-07-19 09:36:00+03,2017-07-19 10:31:00+03
PG0404,2017-07-19 19:06:00+03,2017-07-19 20:00:00+03
PG0403,2017-07-19 11:29:00+03,2017-07-19 12:25:00+03
PG0402,2017-07-19 12:29:00+03,2017-07-19 13:24:00+03
PG0404,2017-07-28 19:11:00+03,2017-07-28 20:06:00+03
PG0405,2017-08-12 12:41:00+03,2017-08-12 13:37:00+03
PG0404,2017-08-12 19:07:00+03,2017-08-12 20:02:00+03
PG0405,\N,\N
PG0403,2017-08-12 11:28:00+03,2017-08-12 12:23:00+03
PG0402,2017-08-12 12:28:00+03,2017-08-12 13:23:00+03
PG0404,\N,\N
PG0403,\N,\N
PG0402,\N,\N
PG0402,2017-08-07 12:29:00+03,2017-08-07 13:24:00+03
PG0403,2017-08-07 11:29:00+03,2017-08-07 12:24:00+03
PG0404,2017-08-07 19:09:00+03,2017-08-07 20:04:00+03
PG0405,2017-08-07 09:38:00+03,2017-08-07 10:34:00+03
PG0405,2017-07-28 09:36:00+03,2017-07-28 10:30:00+03
PG0405,\N,\N
PG0402,\N,\N
PG0403,\N,\N
PG0404,\N,\N
PG0405,\N,\N
PG0404,\N,\N
PG0403,\N,\N
PG0405,2017-08-15 09:38:00+03,2017-08-15 10:33:00+03
PG0404,\N,\N
PG0403,2017-08-15 11:30:00+03,2017-08-15 12:25:00+03
PG0402,2017-08-15 12:28:00+03,2017-08-15 13:24:00+03
PG0402,2017-08-08 12:26:00+03,2017-08-08 13:21:00+03
PG0403,2017-08-08 11:25:00+03,2017-08-08 12:20:00+03
PG0404,2017-08-08 22:05:00+03,2017-08-08 22:59:00+03
PG0405,2017-08-08 09:35:00+03,2017-08-08 10:30:00+03
PG0405,2017-07-18 09:40:00+03,2017-07-18 10:35:00+03
PG0404,2017-07-18 19:08:00+03,2017-07-18 20:03:00+03
PG0403,2017-07-18 14:48:00+03,2017-07-18 15:43:00+03
PG0402,2017-07-18 12:29:00+03,2017-07-18 13:24:00+03
PG0402,\N,\N
PG0402,2017-07-26 12:28:00+03,2017-07-26 13:23:00+03
PG0402,2017-07-16 12:27:00+03,2017-07-16 13:22:00+03
PG0403,2017-07-16 15:15:00+03,2017-07-16 16:10:00+03
PG0404,2017-07-16 19:08:00+03,2017-07-16 20:03:00+03
PG0402,\N,\N
PG0403,\N,\N
PG0405,\N,\N
PG0404,\N,\N
PG0404,2017-07-26 19:06:00+03,2017-07-26 20:01:00+03
PG0403,\N,\N
PG0402,\N,\N
PG0404,\N,\N
PG0405,\N,\N
PG0402,2017-08-09 12:27:00+03,2017-08-09 13:23:00+03
PG0403,2017-08-09 11:30:00+03,2017-08-09 12:27:00+03
PG0404,2017-08-09 22:18:00+03,2017-08-09 23:13:00+03

2025-01-26 16:29:03 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:29:03 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:29:03 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:29:04 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:29:04 - snowflake.connector.connection - INFO - closed
2025-01-26 16:29:04 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:29:05 - root - INFO - SQL:
SELECT
      DEP."city" AS "departure_city",
      DEP."coordinates" AS "departure_coordinates",
      ARR."city" AS "arrival_city",
      ARR."coordinates" AS "arrival_coordinates"
    FROM AIRLINES.AIRLINES."FLIGHTS" F
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
      ON F."departure_airport" = DEP."airport_code"
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
      ON F."arrival_airport" = ARR."airport_code"
    LIMIT 100;
Results:
Too long, hard cut:
departure_city,departure_coordinates,arrival_city,arrival_coordinates
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.9062995910644531,55.4087982177734375)","{""en"": ""Bratsk"", ""ru"": ""Братск""}","(101.697998046875,56.3706016540527344)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.2615013122999983,55.5914993286000012)","{""en"": ""Khanty-Mansiysk"", ""ru"": ""Ханты-Мансийск""}","(69.0860977172851562,61.0284996032714844)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.2615013122999983,55.5914993286000012)","{""en"": ""Sochi"", ""ru"": ""Сочи""}","(39.9566001892089986,43.4499015808110016)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.4146000000000001,55.9725990000000024)","{""en"": ""Ufa"", ""ru"": ""Уфа""}","(55.8744010925289984,54.5574989318850001)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.4146000000000001,55.9725990000000024)","{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}","(48.2266998291000064,54.2682991027999932)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.4146000000000001,55.9725990000000024)","{""en"": ""Kurgan"", ""ru"": ""Курган""}","(65.4156036376953125,55.4752998352050781)"
"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}","(30.2625007629394531,59.8003005981445312)","{""en"": ""Orenburg"", ""ru"": ""Оренбург""}","(55.4566993713378906,51.7957992553710938)"
"{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}","(60.8027000427250002,56.7430992126460012)","{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}","(50.8451004028320312,61.6469993591308594)"
"{""en"": ""Kazan"", ""ru"": ""Казань""}","(49.278701782227003,55.606201171875)","{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}","(104.388999938959998,52.2680015563960012)"
"{""en"": ""Kazan"", ""ru"": ""Казань""}","(49.278701782227003,55.606201171875)","{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}","(58.7556991577148438,53.3931007385253906)"
"{""en"": ""Rostov"", ""ru"": ""Ростов-на-Дону""}","(39.8180999755999991,47.2582015990999977)","{""en"": ""Kazan"", ""ru"": ""Казань""}","(49.278701782227003,55.606201171875)"
"{""en"": ""Perm"", ""ru"": ""Пермь""}","(56.021198272705,57.9145011901860016)","{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}","(61.503300000000003,55.3058010000000024)"
"{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}","(47.9047012329101562,56.7005996704101562)","{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.2615013122999983,55.5914993286000012)"
"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}","(50.8451004028320312,61.6469993591308594)","{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}","(52.092498779296875,55.5647010803222656)"
"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}","(114.03900146484375,62.534698486328125)","{""en"": ""Neryungri"", ""ru"": ""Нерюнгри""}","(124.914001464839998,56.9138984680179973)"
"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}","(52.8017005920410156,54.6399993896484375)","{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.4146000000000001,55.9725990000000024)"
"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}","(52.8017005920410156,54.6399993896484375)","{""en"": ""Orenburg"", ""ru"": ""Оренбург""}","(55.4566993713378906,51.7957992553710938)"
"{""en"": ""Strezhevoy"", ""ru"": ""Стрежевой""}","(77.66000366210001,60.7094001769999991)","{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}","(61.503300000000003,55.3058010000000024)"
"{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}","(66.6986007689999951,63.6869010924999941)","{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.9062995910644531,55.4087982177734375)"
"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}","(65.3243026732999965,57.1896018981999958)","{""en"": ""Petrozavodsk"", ""ru"": ""Петрозаводск""}","(34.1547012329101562,61.8852005004882812)"
"{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}","(104.388999938959998,52.2680015563960012)","{""en"": ""Mirnyj"", ""ru"": ""Мирный""}","(114.03900146484375,62.534698486328125)"
"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}","(48.8027000427246094,54.4010009765625)","{""en"": ""Saratov"", ""ru"": ""Саратов""}","(46.0466995239257812,51.5649986267089844)"
"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}","(86.1072006225585938,55.2700996398925781)","{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.9062995910644531,55.4087982177734375)"
"{""en"": ""Kaliningrad"", ""ru"": ""Калининград""}","(20.5925998687744141,54.8899993896484375)","{""en"": ""Elista"", ""ru"": ""Элиста""}","(44.3308982849121094,46.3739013671875)"
"{""en"": ""Ulan-ude"", ""ru"": ""Улан-Удэ""}","(107.438003540039062,51.80780029296875)","{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.2615013122999983,55.5914993286000012)"
"{""en"": ""Kurgan"", ""ru"": ""Курган""}","(65.4156036376953125,55.4752998352050781)","{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}","(92.493301391602003,56.1729011535639984)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.9062995910644531,55.4087982177734375)","{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}","(30.2625007629394531,59.8003005981445312)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.9062995910644531,

2025-01-26 16:29:05 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:29:05 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:29:05 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:29:06 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-26 16:29:06 - snowflake.connector.connection - INFO - closed
2025-01-26 16:29:06 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:29:45 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:29:45 - root - INFO - ```sql
SELECT
    (PARSE_JSON(DEP."city"):"en")::STRING AS "departure_city",
    (PARSE_JSON(ARR."city"):"en")::STRING AS "arrival_city"
FROM AIRLINES.AIRLINES."FLIGHTS" F
JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
    ON F."departure_airport" = DEP."airport_code"
JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
    ON F."arrival_airport" = ARR."airport_code"
LIMIT 100;
```
2025-01-26 16:29:45 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:29:45 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:29:45 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:29:47 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:29:47 - snowflake.connector.connection - INFO - closed
2025-01-26 16:29:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:30:17 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:30:17 - root - INFO - SQL:
SELECT
    (PARSE_JSON(DEP."city"):"en")::STRING AS "departure_city",
    (PARSE_JSON(ARR."city"):"en")::STRING AS "arrival_city"
FROM AIRLINES.AIRLINES."FLIGHTS" F
JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
    ON F."departure_airport" = DEP."airport_code"
JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
    ON F."arrival_airport" = ARR."airport_code"
LIMIT 100;
Results:
departure_city,arrival_city
Moscow,Bratsk
Moscow,Khanty-Mansiysk
Moscow,Sochi
Moscow,Ufa
Moscow,Ulyanovsk
Moscow,Kurgan
St. Petersburg,Orenburg
Yekaterinburg,Syktyvkar
Kazan,Irkutsk
Kazan,Magnetiogorsk
Rostov,Kazan
Perm,Chelyabinsk
Yoshkar-Ola,Moscow
Syktyvkar,Nizhnekamsk
Mirnyj,Neryungri
Bugulma,Moscow
Bugulma,Orenburg
Strezhevoy,Chelyabinsk
Beloyarsky,Moscow
Tyumen,Petrozavodsk
Irkutsk,Mirnyj
Ulyanovsk,Saratov
Kemorovo,Moscow
Kaliningrad,Elista
Ulan-ude,Moscow
Kurgan,Krasnoyarsk
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg

2025-01-26 16:30:17 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:30:17 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:30:17 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:30:19 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:30:19 - snowflake.connector.connection - INFO - closed
2025-01-26 16:30:19 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:30:19 - root - INFO - SQL:
SELECT DISTINCT
    (PARSE_JSON("city"):"en")::STRING AS "city_en",
    TO_VARCHAR("timezone") AS "timezone_str"
FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
LIMIT 100
Results:
city_en,timezone_str
Yakutsk,Asia/Yakutsk
Mirnyj,Asia/Yakutsk
Khabarovsk,Asia/Vladivostok
Petropavlovsk,Asia/Kamchatka
Yuzhno-Sakhalinsk,Asia/Sakhalin
Vladivostok,Asia/Vladivostok
St. Petersburg,Europe/Moscow
Chelyabinsk,Asia/Yekaterinburg
Perm,Asia/Yekaterinburg
Surgut,Asia/Yekaterinburg
Mineralnye Vody,Europe/Moscow
Stavropol,Europe/Moscow
Astrakhan,Europe/Samara
Samara,Europe/Samara
Tyumen,Asia/Yekaterinburg
Nizhniy Novgorod,Europe/Moscow
Tomsk,Asia/Krasnoyarsk
Norilsk,Asia/Krasnoyarsk
Arkhangelsk,Europe/Moscow
Ukhta,Europe/Moscow
Naryan-Mar,Europe/Moscow
Ivanovo,Europe/Moscow
Komsomolsk-on-Amur,Asia/Vladivostok
Anadyr,Asia/Anadyr
Novokuznetsk,Asia/Novokuznetsk
Grozny,Europe/Moscow
Salekhard,Asia/Yekaterinburg
Khanty-Mansiysk,Asia/Yekaterinburg
Izhevsk,Europe/Samara
Ulyanovsk,Europe/Samara
Tambow,Europe/Moscow
Beloyarsky,Asia/Yekaterinburg
Kaluga,Europe/Moscow
Blagoveschensk,Asia/Yakutsk
Abakan,Asia/Krasnoyarsk
Magnetiogorsk,Asia/Yekaterinburg
Syktyvkar,Europe/Moscow
Ust Ilimsk,Asia/Irkutsk
Novy Urengoy,Asia/Yekaterinburg
Petrozavodsk,Europe/Moscow
Nalchik,Europe/Moscow
Beslan,Europe/Moscow
Sovetskiy,Asia/Yekaterinburg
Nadym,Asia/Yekaterinburg
Nefteyugansk,Asia/Yekaterinburg
Lipetsk,Europe/Moscow
Cheboksary,Europe/Moscow
Yaroslavl,Europe/Moscow
Krasnodar,Europe/Moscow
Kazan,Europe/Moscow
Kemorovo,Asia/Novokuznetsk
Nizhnevartovsk,Asia/Yekaterinburg
Voronezh,Europe/Moscow
Kyzyl,Asia/Krasnoyarsk
Elista,Europe/Moscow
Nyagan,Asia/Yekaterinburg
Kurgan,Asia/Yekaterinburg
Vorkuta,Europe/Moscow
Orsk,Asia/Yekaterinburg
Gelendzhik,Europe/Moscow
Makhachkala,Europe/Moscow
Orenburg,Asia/Yekaterinburg
Novosibirsk,Asia/Novosibirsk
Kaliningrad,Europe/Kaliningrad
Yekaterinburg,Asia/Yekaterinburg
Noyabrsk,Asia/Yekaterinburg
Usinsk,Europe/Moscow
Pskov,Europe/Moscow
Krasnoyarsk,Asia/Krasnoyarsk
Uraj,Asia/Yekaterinburg
Kirov,Europe/Moscow
Bugulma,Europe/Moscow
Yoshkar-Ola,Europe/Moscow
Saransk,Europe/Moscow
Ust-Kut,Asia/Irkutsk
Nizhnekamsk,Europe/Moscow
Gorno-Altaysk,Asia/Krasnoyarsk
Cherepovets,Europe/Moscow
Omsk,Asia/Omsk
Rostov,Europe/Moscow
Volgograd,Europe/Volgograd
Magadan,Asia/Magadan
Irkutsk,Asia/Irkutsk
Ulan-ude,Asia/Irkutsk
Anapa,Europe/Moscow
Neryungri,Asia/Yakutsk
Saratov,Europe/Volgograd
Belgorod,Europe/Moscow
Kursk,Europe/Moscow
Penza,Europe/Moscow
Chita,Asia/Chita
Bratsk,Asia/Irkutsk
Murmansk,Europe/Moscow
Kogalym,Asia/Yekaterinburg
Bryansk,Europe/Moscow
Moscow,Europe/Moscow
Strezhevoy,Asia/Krasnoyarsk
Ufa,Asia/Yekaterinburg
Sochi,Europe/Moscow
Barnaul,Asia/Krasnoyarsk

2025-01-26 16:30:19 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:30:19 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:30:19 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:30:21 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-26 16:30:21 - snowflake.connector.connection - INFO - closed
2025-01-26 16:30:21 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:30:55 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:30:55 - root - INFO - ```sql
SELECT DISTINCT
    (PARSE_JSON("city")['en'])::STRING AS "city_en",
    "timezone"
FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
LIMIT 100;
```
2025-01-26 16:30:55 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:30:55 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:30:55 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:30:56 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:30:56 - snowflake.connector.connection - INFO - closed
2025-01-26 16:30:56 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:31:26 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:31:26 - root - INFO - SQL:
SELECT DISTINCT
    (PARSE_JSON("city")['en'])::STRING AS "city_en",
    "timezone"
FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
LIMIT 100;
Results:
city_en,timezone
Yakutsk,Asia/Yakutsk
Mirnyj,Asia/Yakutsk
Khabarovsk,Asia/Vladivostok
Petropavlovsk,Asia/Kamchatka
Yuzhno-Sakhalinsk,Asia/Sakhalin
Vladivostok,Asia/Vladivostok
St. Petersburg,Europe/Moscow
Chelyabinsk,Asia/Yekaterinburg
Perm,Asia/Yekaterinburg
Surgut,Asia/Yekaterinburg
Mineralnye Vody,Europe/Moscow
Stavropol,Europe/Moscow
Astrakhan,Europe/Samara
Samara,Europe/Samara
Tyumen,Asia/Yekaterinburg
Nizhniy Novgorod,Europe/Moscow
Tomsk,Asia/Krasnoyarsk
Norilsk,Asia/Krasnoyarsk
Arkhangelsk,Europe/Moscow
Ukhta,Europe/Moscow
Naryan-Mar,Europe/Moscow
Ivanovo,Europe/Moscow
Komsomolsk-on-Amur,Asia/Vladivostok
Anadyr,Asia/Anadyr
Novokuznetsk,Asia/Novokuznetsk
Grozny,Europe/Moscow
Salekhard,Asia/Yekaterinburg
Khanty-Mansiysk,Asia/Yekaterinburg
Izhevsk,Europe/Samara
Ulyanovsk,Europe/Samara
Tambow,Europe/Moscow
Beloyarsky,Asia/Yekaterinburg
Kaluga,Europe/Moscow
Blagoveschensk,Asia/Yakutsk
Abakan,Asia/Krasnoyarsk
Magnetiogorsk,Asia/Yekaterinburg
Syktyvkar,Europe/Moscow
Ust Ilimsk,Asia/Irkutsk
Novy Urengoy,Asia/Yekaterinburg
Petrozavodsk,Europe/Moscow
Nalchik,Europe/Moscow
Beslan,Europe/Moscow
Sovetskiy,Asia/Yekaterinburg
Nadym,Asia/Yekaterinburg
Nefteyugansk,Asia/Yekaterinburg
Lipetsk,Europe/Moscow
Cheboksary,Europe/Moscow
Yaroslavl,Europe/Moscow
Krasnodar,Europe/Moscow
Kazan,Europe/Moscow
Kemorovo,Asia/Novokuznetsk
Nizhnevartovsk,Asia/Yekaterinburg
Voronezh,Europe/Moscow
Kyzyl,Asia/Krasnoyarsk
Elista,Europe/Moscow
Nyagan,Asia/Yekaterinburg
Kurgan,Asia/Yekaterinburg
Vorkuta,Europe/Moscow
Orsk,Asia/Yekaterinburg
Gelendzhik,Europe/Moscow
Makhachkala,Europe/Moscow
Orenburg,Asia/Yekaterinburg
Novosibirsk,Asia/Novosibirsk
Kaliningrad,Europe/Kaliningrad
Yekaterinburg,Asia/Yekaterinburg
Noyabrsk,Asia/Yekaterinburg
Usinsk,Europe/Moscow
Pskov,Europe/Moscow
Krasnoyarsk,Asia/Krasnoyarsk
Uraj,Asia/Yekaterinburg
Kirov,Europe/Moscow
Bugulma,Europe/Moscow
Yoshkar-Ola,Europe/Moscow
Saransk,Europe/Moscow
Ust-Kut,Asia/Irkutsk
Nizhnekamsk,Europe/Moscow
Gorno-Altaysk,Asia/Krasnoyarsk
Cherepovets,Europe/Moscow
Omsk,Asia/Omsk
Rostov,Europe/Moscow
Volgograd,Europe/Volgograd
Magadan,Asia/Magadan
Irkutsk,Asia/Irkutsk
Ulan-ude,Asia/Irkutsk
Anapa,Europe/Moscow
Neryungri,Asia/Yakutsk
Saratov,Europe/Volgograd
Belgorod,Europe/Moscow
Kursk,Europe/Moscow
Penza,Europe/Moscow
Chita,Asia/Chita
Bratsk,Asia/Irkutsk
Murmansk,Europe/Moscow
Kogalym,Asia/Yekaterinburg
Bryansk,Europe/Moscow
Moscow,Europe/Moscow
Strezhevoy,Asia/Krasnoyarsk
Ufa,Asia/Yekaterinburg
Sochi,Europe/Moscow
Barnaul,Asia/Krasnoyarsk

2025-01-26 16:31:26 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:31:26 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:31:26 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:31:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 9
2025-01-26 16:31:27 - snowflake.connector.connection - INFO - closed
2025-01-26 16:31:27 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:31:28 - root - INFO - SQL:
SELECT
    "aircraft_code",
    (PARSE_JSON("model")['en'])::STRING AS "model_en",
    "range"
FROM AIRLINES.AIRLINES."AIRCRAFTS_DATA"
ORDER BY "range" DESC
LIMIT 100
Results:
aircraft_code,model_en,range
773,Boeing 777-300,11100
763,Boeing 767-300,7900
319,Airbus A319-100,6700
320,Airbus A320-200,5700
321,Airbus A321-200,5600
733,Boeing 737-300,4200
SU9,Sukhoi Superjet-100,3000
CR2,Bombardier CRJ-200,2700
CN1,Cessna 208 Caravan,1200

2025-01-26 16:31:28 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:31:28 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:31:28 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:31:29 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-26 16:31:29 - snowflake.connector.connection - INFO - closed
2025-01-26 16:31:29 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:31:29 - root - INFO - SQL:
SELECT "flight_no", "scheduled_departure", "status"
FROM AIRLINES.AIRLINES."FLIGHTS"
WHERE UPPER(TRIM("status")) = 'CANCELLED'
LIMIT 100
Results:
flight_no,scheduled_departure,status
PG0059,2017-09-14 12:25:00+03,Cancelled
PG0416,2017-09-14 19:20:00+03,Cancelled
PG0054,2017-08-12 17:05:00+03,Cancelled
PG0045,2017-09-14 11:45:00+03,Cancelled
PG0341,2017-09-14 10:50:00+03,Cancelled
PG0368,2017-09-14 15:35:00+03,Cancelled
PG0335,2017-09-14 09:30:00+03,Cancelled
PG0136,2017-09-14 15:30:00+03,Cancelled
PG0134,2017-09-14 09:50:00+03,Cancelled
PG0005,2017-09-12 15:40:00+03,Cancelled
PG0168,2017-09-14 20:05:00+03,Cancelled
PG0144,2017-09-14 17:45:00+03,Cancelled
PG0164,2017-09-14 15:25:00+03,Cancelled
PG0509,2017-09-14 09:15:00+03,Cancelled
PG0124,2017-09-14 11:30:00+03,Cancelled
PG0112,2017-09-14 11:30:00+03,Cancelled
PG0289,2017-09-14 17:25:00+03,Cancelled
PG0019,2017-09-14 18:10:00+03,Cancelled
PG0075,2017-09-11 10:55:00+03,Cancelled
PG0072,2017-09-14 09:55:00+03,Cancelled
PG0605,2017-09-14 18:40:00+03,Cancelled
PG0657,2017-09-14 16:15:00+03,Cancelled
PG0142,2017-09-14 13:00:00+03,Cancelled
PG0607,2017-09-14 16:15:00+03,Cancelled
PG0030,2017-09-14 11:55:00+03,Cancelled
PG0085,2017-09-13 13:05:00+03,Cancelled
PG0593,2017-09-14 15:50:00+03,Cancelled
PG0196,2017-09-14 12:10:00+03,Cancelled
PG0454,2017-09-14 10:05:00+03,Cancelled
PG0384,2017-09-14 12:10:00+03,Cancelled
PG0118,2017-09-14 19:55:00+03,Cancelled
PG0370,2017-09-14 11:50:00+03,Cancelled
PG0229,2017-09-14 11:50:00+03,Cancelled
PG0396,2017-09-14 16:20:00+03,Cancelled
PG0414,2017-09-14 09:05:00+03,Cancelled
PG0050,2017-09-14 14:20:00+03,Cancelled
PG0008,2017-09-14 11:45:00+03,Cancelled
PG0025,2017-09-10 13:30:00+03,Cancelled
PG0126,2017-09-14 10:55:00+03,Cancelled
PG0052,2017-09-14 14:50:00+03,Cancelled
PG0099,2017-09-11 13:45:00+03,Cancelled
PG0442,2017-09-13 15:45:00+03,Cancelled
PG0049,2017-09-12 13:05:00+03,Cancelled
PG0138,2017-09-14 10:15:00+03,Cancelled
PG0347,2017-09-14 12:45:00+03,Cancelled
PG0176,2017-09-14 14:50:00+03,Cancelled
PG0448,2017-09-14 18:30:00+03,Cancelled
PG0515,2017-09-14 14:00:00+03,Cancelled
PG0235,2017-09-14 19:50:00+03,Cancelled
PG0669,2017-09-14 16:15:00+03,Cancelled
PG0146,2017-09-14 12:30:00+03,Cancelled
PG0358,2017-09-14 12:05:00+03,Cancelled
PG0277,2017-09-14 11:45:00+03,Cancelled
PG0503,2017-09-14 13:55:00+03,Cancelled
PG0152,2017-09-14 17:45:00+03,Cancelled
PG0457,2017-09-14 11:10:00+03,Cancelled
PG0496,2017-09-14 12:45:00+03,Cancelled
PG0703,2017-09-14 17:15:00+03,Cancelled
PG0299,2017-09-14 13:00:00+03,Cancelled
PG0093,2017-09-12 09:40:00+03,Cancelled
PG0679,2017-09-14 11:30:00+03,Cancelled
PG0643,2017-09-10 13:45:00+03,Cancelled
PG0089,2017-09-14 16:40:00+03,Cancelled
PG0041,2017-09-14 09:50:00+03,Cancelled
PG0015,2017-09-13 12:40:00+03,Cancelled
PG0261,2017-09-14 12:55:00+03,Cancelled
PG0043,2017-09-14 14:40:00+03,Cancelled
PG0452,2017-09-13 12:35:00+03,Cancelled
PG0283,2017-09-14 13:25:00+03,Cancelled
PG0677,2017-09-14 09:40:00+03,Cancelled
PG0591,2017-09-14 09:00:00+03,Cancelled
PG0663,2017-09-12 12:30:00+03,Cancelled
PG0128,2017-09-14 11:00:00+03,Cancelled
PG0066,2017-09-14 12:15:00+03,Cancelled
PG0160,2017-09-14 11:25:00+03,Cancelled
PG0667,2017-09-14 15:00:00+03,Cancelled
PG0549,2017-09-14 11:55:00+03,Cancelled
PG0062,2017-09-14 14:40:00+03,Cancelled
PG0243,2017-09-14 20:55:00+03,Cancelled
PG0439,2017-09-14 12:55:00+03,Cancelled
PG0156,2017-09-14 14:55:00+03,Cancelled
PG0114,2017-09-13 14:20:00+03,Cancelled
PG0245,2017-09-10 20:50:00+03,Cancelled
PG0339,2017-09-11 09:10:00+03,Cancelled
PG0685,2017-09-14 15:15:00+03,Cancelled
PG0271,2017-09-13 16:50:00+03,Cancelled
PG0188,2017-09-14 11:15:00+03,Cancelled
PG0198,2017-09-14 09:10:00+03,Cancelled
PG0436,2017-09-14 10:55:00+03,Cancelled
PG0360,2017-09-14 09:00:00+03,Cancelled
PG0285,2017-09-14 10:50:00+03,Cancelled
PG0410,2017-09-14 13:15:00+03,Cancelled
PG0078,2017-09-14 18:25:00+03,Cancelled
PG0205,2017-09-14 13:30:00+03,Cancelled
PG0186,2017-09-14 13:50:00+03,Cancelled
PG0584,2017-09-14 07:45:00+03,Cancelled
PG0390,2017-09-14 07:10:00+03,Cancelled
PG0083,2017-09-11 06:15:00+03,Cancelled
PG0376,2017-09-14 10:05:00+03,Cancelled
PG0574,2017-08-26 11:45:00+03,Cancelled

2025-01-26 16:31:29 - root - INFO - itercount: 0
2025-01-26 16:31:29 - root - INFO - Database Name: AIRLINES
Schema Name: AIRLINES
DDL describes table information.
,0
table_name,FLIGHTS
description,
DDL,"create or replace TABLE FLIGHTS (
	""flight_id"" NUMBER(38,0),
	""flight_no"" VARCHAR(16777216),
	""scheduled_departure"" VARCHAR(16777216),
	""scheduled_arrival"" VARCHAR(16777216),
	""departure_airport"" VARCHAR(16777216),
	""arrival_airport"" VARCHAR(16777216),
	""status"" VARCHAR(16777216),
	""aircraft_code"" VARCHAR(16777216),
	""actual_departure"" VARCHAR(16777216),
	""actual_arrival"" VARCHAR(16777216)
);"

,1
table_name,SEATS
description,
DDL,"create or replace TABLE SEATS (
	""aircraft_code"" VARCHAR(16777216),
	""seat_no"" VARCHAR(16777216),
	""fare_conditions"" VARCHAR(16777216)
);"

,2
table_name,TICKETS
description,
DDL,"create or replace TABLE TICKETS (
	""ticket_no"" VARCHAR(16777216),
	""book_ref"" VARCHAR(16777216),
	""passenger_id"" VARCHAR(16777216)
);"

,3
table_name,BOOKINGS
description,
DDL,"create or replace TABLE BOOKINGS (
	""book_ref"" VARCHAR(16777216),
	""book_date"" VARCHAR(16777216),
	""total_amount"" NUMBER(38,0)
);"

,4
table_name,AIRCRAFTS_DATA
description,
DDL,"create or replace TABLE AIRCRAFTS_DATA (
	""aircraft_code"" VARCHAR(16777216),
	""model"" VARCHAR(16777216),
	""range"" NUMBER(38,0)
);"

,5
table_name,AIRPORTS_DATA
description,
DDL,"create or replace TABLE AIRPORTS_DATA (
	""airport_code"" VARCHAR(16777216),
	""airport_name"" VARCHAR(16777216),
	""city"" VARCHAR(16777216),
	""coordinates"" VARCHAR(16777216),
	""timezone"" VARCHAR(16777216)
);"

,6
table_name,BOARDING_PASSES
description,
DDL,"create or replace TABLE BOARDING_PASSES (
	""ticket_no"" VARCHAR(16777216),
	""flight_id"" NUMBER(38,0),
	""boarding_no"" NUMBER(38,0),
	""seat_no"" VARCHAR(16777216)
);"

,7
table_name,TICKET_FLIGHTS
description,
DDL,"create or replace TABLE TICKET_FLIGHTS (
	""ticket_no"" VARCHAR(16777216),
	""flight_id"" NUMBER(38,0),
	""fare_conditions"" VARCHAR(16777216),
	""amount"" NUMBER(38,0)
);"

External knowledge that might be helpful: 

# Flight Route Distance Calculation

## Introduction

This document describes the method used to calculate the distance between two cities for flight routes. The calculation is based on the Haversine formula, which is commonly used to find the shortest distance between two points on a sphere given their latitude and longitude. This method is especially useful for determining flight distances between airports located in different cities around the world.

## City and Coordinate Extraction

For each flight, the following data is obtained:

- **Departure city** (referred to as `from_city`) and its geographical coordinates (longitude and latitude).
- **Arrival city** (referred to as `to_city`) and its geographical coordinates (longitude and latitude).

The coordinates are extracted as decimal values, with longitude and latitude represented in degrees. This ensures that trigonometric operations can be applied during the distance calculation.

## Haversine Formula

The Haversine formula is used to calculate the great-circle distance between two points on a sphere using their latitude and longitude. The formula is given as:

\[
d = 2r \cdot \arcsin\left(\sqrt{\sin^2\left(\frac{\Delta \phi}{2}\right) + \cos(\phi_1) \cdot \cos(\phi_2) \cdot \sin^2\left(\frac{\Delta \lambda}{2}\right)}\right)
\]

Where:

- \( d \) is the distance between the two points (in kilometers).
- \( r \) is the radius of the Earth (approximately 6371 km).
- \( \phi_1 \) and \( \phi_2 \) are the latitudes of the departure and arrival points, respectively, in radians.
- \( \Delta \phi = \phi_2 - \phi_1 \) is the difference in latitudes.
- \( \lambda_1 \) and \( \lambda_2 \) are the longitudes of the departure and arrival points, respectively, in radians.
- \( \Delta \lambda = \lambda_2 - \lambda_1 \) is the difference in longitudes.

### Conversion to Radians

Since the input coordinates are in degrees, they must be converted to radians before applying the Haversine formula. This conversion is done using the formula:

\[
\text{radians} = \text{degrees} \times \frac{\pi}{180}
\]

## Symmetry of Routes

To identify unique flight routes between two cities, we standardize the order of cities in each route. Specifically, we ensure that the lexicographically smaller city name is always listed as the first city (`city1`), and the larger city is listed as the second city (`city2`). This ensures that a flight from City A to City B is treated the same as a flight from City B to City A.

## Average Route Distance

Once the distances for all flights between two cities are computed, the average distance for each city pair is calculated by summing the distances and dividing by the total number of flights between those cities:

\[
\text{Average Distance} = \frac{\sum \text{Flight Distances}}{\text{Number of Flights}}
\]

## Conclusion

This method of flight route distance calculation provides a reliable way to determine the great-circle distance between cities based on the coordinates of their respective airports. The use of the Haversine formula ensures accurate results for distances on the Earth's surface, making it ideal for aviation and travel analysis.

The table structure information is ({database name: {schema name: {table name}}}): 
{'AIRLINES': {'AIRLINES': ['AIRCRAFTS_DATA', 'AIRPORTS_DATA', 'BOARDING_PASSES', 'BOOKINGS', 'FLIGHTS', 'SEATS', 'TICKETS', 'TICKET_FLIGHTS']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

- **FLIGHTS**
  - `"flight_id"`: Unique identifier for each flight.
  - `"departure_airport"`: Code of the departure airport; used to join with `"airport_code"` in `AIRPORTS_DATA`.
  - `"arrival_airport"`: Code of the arrival airport; used to join with `"airport_code"` in `AIRPORTS_DATA`.

- **AIRPORTS_DATA**
  - `"airport_code"`: Unique code for each airport; used to join with `"departure_airport"` and `"arrival_airport"`.
  - `"city"`: Name of the city where the airport is located; used to identify departure and arrival cities.
  - `"coordinates"`: Geographical coordinates of the airport; used to calculate distances.

**Potential Conditions:**

- Joining `FLIGHTS` with `AIRPORTS_DATA` on `"departure_airport"` and `"arrival_airport"` to obtain city names and coordinates.
- Using `DISTINCT` to get unique city pairs.
- Filtering out flights or airports with missing coordinate data.
- Ordering cities lexicographically to standardize city pairs.

**SQL Queries:**

1. **List first 100 flights:**
   ```sql
   SELECT * FROM AIRLINES.AIRLINES."FLIGHTS" LIMIT 100;
   ```

2. **Get distinct departure airports:**
   ```sql
   SELECT DISTINCT "departure_airport"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   LIMIT 100;
   ```

3. **Get distinct arrival airports:**
   ```sql
   SELECT DISTINCT "arrival_airport"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   LIMIT 100;
   ```

4. **Get airport codes and cities:**
   ```sql
   SELECT "airport_code", "city"
   FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
   LIMIT 100;
   ```

5. **Get airports with coordinates:**
   ```sql
   SELECT "airport_code", "city", "coordinates"
   FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
   WHERE "coordinates" IS NOT NULL
   LIMIT 100;
   ```

6. **Join flights with departure city:**
   ```sql
   SELECT "FLIGHTS"."flight_id", "FLIGHTS"."departure_airport", "AIRPORTS_DATA"."city" AS "departure_city"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   JOIN AIRLINES.AIRLINES."AIRPORTS_DATA"
     ON "FLIGHTS"."departure_airport" = "AIRPORTS_DATA"."airport_code"
   LIMIT 100;
   ```

7. **Join flights with arrival city:**
   ```sql
   SELECT "FLIGHTS"."flight_id", "FLIGHTS"."arrival_airport", "AIRPORTS_DATA"."city" AS "arrival_city"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   JOIN AIRLINES.AIRLINES."AIRPORTS_DATA"
     ON "FLIGHTS"."arrival_airport" = "AIRPORTS_DATA"."airport_code"
   LIMIT 100;
   ```

8. **Get distinct city pairs from flights:**
   ```sql
   SELECT DISTINCT
     DEP."city" AS "departure_city",
     ARR."city" AS "arrival_city"
   FROM AIRLINES.AIRLINES."FLIGHTS" F
   JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
     ON F."departure_airport" = DEP."airport_code"
   JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
     ON F."arrival_airport" = ARR."airport_code"
   LIMIT 100;
   ```

9. **List flights with scheduled times:**
   ```sql
   SELECT "flight_no", "scheduled_departure", "scheduled_arrival"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   LIMIT 100;
   ```

10. **Count flights per departure city:**
    ```sql
    SELECT DEP."city" AS "departure_city", COUNT(*) AS "flight_count"
    FROM AIRLINES.AIRLINES."FLIGHTS" F
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
      ON F."departure_airport" = DEP."airport_code"
    GROUP BY DEP."city"
    ORDER BY "flight_count" DESC
    LIMIT 100;
    ```

11. **Count flights per arrival city:**
    ```sql
    SELECT ARR."city" AS "arrival_city", COUNT(*) AS "flight_count"
    FROM AIRLINES.AIRLINES."FLIGHTS" F
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
      ON F."arrival_airport" = ARR."airport_code"
    GROUP BY ARR."city"
    ORDER BY "flight_count" DESC
    LIMIT 100;
    ```

12. **Find airports in a specific timezone (e.g., 'UTC'):**
    ```sql
    SELECT "airport_code", "city", "timezone"
    FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
    WHERE "timezone" ILIKE '%UTC%'
    LIMIT 100;
    ```

13. **List aircraft codes and models:**
    ```sql
    SELECT "aircraft_code", "model"
    FROM AIRLINES.AIRLINES."AIRCRAFTS_DATA"
    LIMIT 100;
    ```

14. **Get flights with actual departure and arrival times:**
    ```sql
    SELECT "flight_no", "actual_departure", "actual_arrival"
    FROM AIRLINES.AIRLINES."FLIGHTS"
    WHERE "actual_departure" IS NOT NULL AND "actual_arrival" IS NOT NULL
    LIMIT 100;
    ```

15. **Get coordinates of departure and arrival airports:**
    ```sql
    SELECT
      DEP."city" AS "departure_city",
      DEP."coordinates" AS "departure_coordinates",
      ARR."city" AS "arrival_city",
      ARR."coordinates" AS "arrival_coordinates"
    FROM AIRLINES.AIRLINES."FLIGHTS" F
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
      ON F."departure_airport" = DEP."airport_code"
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
      ON F."arrival_airport" = ARR."airport_code"
    LIMIT 100;
    ```

16. **Find flights using a specific aircraft code (e.g., 'ABCD'):**
    ```sql
    SELECT "flight_id", "flight_no", "aircraft_code"
    FROM AIRLINES.AIRLINES."FLIGHTS"
    WHERE "aircraft_code" = 'ABCD'
    LIMIT 100;
    ```

17. **Get distinct cities with their timezones:**
    ```sql
    SELECT DISTINCT "city", "timezone"
    FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
    LIMIT 100;
    ```

18. **Find flights between two specific cities:**
    ```sql
    SELECT F."flight_id", F."flight_no", DEP."city" AS "departure_city", ARR."city" AS "arrival_city"
    FROM AIRLINES.AIRLINES."FLIGHTS" F
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
      ON F."departure_airport" = DEP."airport_code"
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
      ON F."arrival_airport" = ARR."airport_code"
    WHERE DEP."city" ILIKE '%CityA%' AND ARR."city" ILIKE '%CityB%'
    LIMIT 100;
    ```

19. **Get the range of aircrafts (from AIRCRAFTS_DATA):**
    ```sql
    SELECT "aircraft_code", "model", "range"
    FROM AIRLINES.AIRLINES."AIRCRAFTS_DATA"
    ORDER BY "range" DESC
    LIMIT 100;
    ```

20. **List flights with status 'Cancelled':**
    ```sql
    SELECT "flight_no", "scheduled_departure", "status"
    FROM AIRLINES.AIRLINES."FLIGHTS"
    WHERE "status" = 'Cancelled'
    LIMIT 100;
    ```

**Explanation:**

These queries are designed to explore the relevant data needed for the task:

- They help identify how cities are connected through flights.
- They show how to join tables to get necessary information like city names and coordinates.
- Using `DISTINCT` and `LIMIT` helps in understanding the unique values and managing the result set size.
- Conditions like `ILIKE`, `IS NOT NULL`, and specific filters help in data exploration without exact string matches or time conversions.Query:
SELECT * FROM AIRLINES.AIRLINES."FLIGHTS" LIMIT 100;
Answer:
Too long, hard cut:
flight_id,flight_no,scheduled_departure,scheduled_arrival,departure_airport,arrival_airport,status,aircraft_code,actual_departure,actual_arrival
1185,PG0134,2017-09-10 09:50:00+03,2017-09-10 14:55:00+03,DME,BTK,Scheduled,319,\N,\N
3979,PG0052,2017-08-25 14:50:00+03,2017-08-25 17:35:00+03,VKO,HMA,Scheduled,CR2,\N,\N
4739,PG0561,2017-09-05 12:30:00+03,2017-09-05 14:15:00+03,VKO,AER,Scheduled,763,\N,\N
5502,PG0529,2017-09-12 09:50:00+03,2017-09-12 11:20:00+03,SVO,UFA,Scheduled,763,\N,\N
6938,PG0461,2017-09-04 12:25:00+03,2017-09-04 13:20:00+03,SVO,ULV,Scheduled,SU9,\N,\N
7784,PG0667,2017-09-10 15:00:00+03,2017-09-10 17:30:00+03,SVO,KRO,Scheduled,CR2,\N,\N
9478,PG0360,2017-08-28 09:00:00+03,2017-08-28 11:35:00+03,LED,REN,Scheduled,CR2,\N,\N
11085,PG0569,2017-08-24 15:05:00+03,2017-08-24 16:10:00+03,SVX,SCW,Scheduled,733,\N,\N
11847,PG0498,2017-09-12 10:15:00+03,2017-09-12 14:55:00+03,KZN,IKT,Scheduled,319,\N,\N
12012,PG0621,2017-08-26 16:05:00+03,2017-08-26 17:00:00+03,KZN,MQF,Scheduled,CR2,\N,\N
13113,PG0612,2017-08-18 16:25:00+03,2017-08-18 20:05:00+03,ROV,KZN,Scheduled,CN1,\N,\N
14806,PG0676,2017-09-06 07:05:00+03,2017-09-06 07:45:00+03,PEE,CEK,Scheduled,CR2,\N,\N
16837,PG0010,2017-09-05 12:25:00+03,2017-09-05 14:35:00+03,JOK,VKO,Scheduled,CN1,\N,\N
17173,PG0059,2017-09-14 12:25:00+03,2017-09-14 14:45:00+03,SCW,NBC,Cancelled,CN1,\N,\N
19807,PG0035,2017-09-11 06:35:00+03,2017-09-11 09:25:00+03,MJZ,CNN,Scheduled,CN1,\N,\N
23609,PG0648,2017-08-31 11:35:00+03,2017-08-31 13:00:00+03,UUA,SVO,Scheduled,CR2,\N,\N
23695,PG0388,2017-08-26 10:55:00+03,2017-08-26 11:25:00+03,UUA,REN,Scheduled,CR2,\N,\N
23780,PG0098,2017-09-02 06:50:00+03,2017-09-02 10:30:00+03,SWT,CEK,Scheduled,CN1,\N,\N
23945,PG0076,2017-09-05 09:15:00+03,2017-09-05 11:50:00+03,EYK,DME,Scheduled,CR2,\N,\N
24705,PG0632,2017-08-26 15:00:00+03,2017-08-26 17:35:00+03,TJM,PES,Scheduled,CR2,\N,\N
25382,PG0556,2017-08-31 09:05:00+03,2017-08-31 10:55:00+03,IKT,MJZ,Scheduled,CR2,\N,\N
26057,PG0467,2017-08-26 15:45:00+03,2017-08-26 17:00:00+03,ULY,RTW,Scheduled,CN1,\N,\N
27580,PG0483,2017-09-12 07:20:00+03,2017-09-12 11:20:00+03,KEJ,DME,Scheduled,SU9,\N,\N
29272,PG0334,2017-09-05 16:20:00+03,2017-09-05 19:05:00+03,KGD,ESL,Scheduled,CR2,\N,\N
29440,PG0065,2017-09-02 12:15:00+03,2017-09-02 18:05:00+03,UUD,VKO,Scheduled,319,\N,\N
32658,PG0674,2017-08-19 09:35:00+03,2017-08-19 12:00:00+03,KRO,KJA,Scheduled,CR2,\N,\N
1,PG0405,2017-07-16 09:35:00+03,2017-07-16 10:30:00+03,DME,LED,Arrived,321,2017-07-16 09:44:00+03,2017-07-16 10:39:00+03
2,PG0404,2017-08-05 19:05:00+03,2017-08-05 20:00:00+03,DME,LED,Arrived,321,2017-08-05 19:06:00+03,2017-08-05 20:01:00+03
3,PG0405,2017-08-05 09:35:00+03,2017-08-05 10:30:00+03,DME,LED,Arrived,321,2017-08-05 09:39:00+03,2017-08-05 10:34:00+03
4,PG0402,2017-09-09 12:25:00+03,2017-09-09 13:20:00+03,DME,LED,Scheduled,321,\N,\N
5,PG0405,2017-08-16 09:35:00+03,2017-08-16 10:30:00+03,DME,LED,On Time,321,\N,\N
6,PG0404,2017-08-16 19:05:00+03,2017-08-16 20:00:00+03,DME,LED,Scheduled,321,\N,\N
7,PG0403,2017-08-16 11:25:00+03,2017-08-16 12:20:00+03,DME,LED,Delayed,321,\N,\N
8,PG0402,2017-08-16 12:25:00+03,2017-08-16 13:20:00+03,DME,LED,On Time,321,\N,\N
9,PG0405,2017-08-25 09:35:00+03,2017-08-25 10:30:00+03,DME,LED,Scheduled,321,\N,\N
10,PG0402,2017-08-23 12:25:00+03,2017-08-23 13:20:00+03,DME,LED,Scheduled,321,\N,\N
11,PG0403,2017-08-23 11:25:00+03,2017-08-23 12:20:00+03,DME,LED,Scheduled,321,\N,\N
12,PG0404,2017-08-23 19:05:00+03,2017-08-23 20:00:00+03,DME,LED,Scheduled,321,\N,\N
13,PG0405,2017-08-23 09:35:00+03,2017-08-23 10:30:00+03,DME,LED,Scheduled,321,\N,\N
14,PG0402,2017-08-06 12:25:00+03,2017-08-06 13:20:00+03,DME,LED,Arrived,321,2017-08-06 12:28:00+03,2017-08-06 13:23:00+03
15,PG0402,2017-07-28 12:25:00+03,2017-07-28 13:20:00+03,DME,LED,Arrived,321,2017-07-28 12:31:00+03,2017-07-28 13:26:00+03
16,PG0403,2017-08-06 11:25:00+03,2017-08-06 12:20:00+03,DME,LED,Arrived,321,2017-08-06 11:27:00+03,2017-08-06 12:22:00+03
17,PG0404,2017-08-06 19:05:00+03,2017-08-06 20:00:00+03,DME,LED,Arrived,321,2017-08-06 19:05:00+03,2017-08-06 20:00:00+03
18,PG0405,2017-08-06 09:35:00+03,2017-08-06 10:30:00+03,DME,LED,Arrived,321,2017-08-06 09:39:00+03,2017-08-06 10:35:00+03
19,PG0403,2017-07-28 11:25:00+03,2017-07-28 12:20:00+03,DME,LED,Arrived,321,2017-07-28 11:27:00+03,2017-07-28 12:22:00+03
20,PG0403,2017-07-26 11:25:00+03,2017-07-26 12:20:00+03,DME,LED,Arrived,321,2017-07-26 11:28:00+03,2017-07-26 12:23:00+03
21,PG0405,2017-07-19 09:35:00+03,2017-07-19 10:30:00+03,DME,LED,Arrived,321,2017-07-19 09:36:00+03,2017-07-19 10:31:00+03
22,PG0404,2017-07-19 19:05:00+03,2017-07-19 20:00:00+03,DME,LED,Arrived,321,2017-07-19 19:06:00+03,2017-07-19 20:00:00+03
23,PG0403,2017-07-19 11:25:00+03,2017-07-19 12:20:00+03,DME,LED,Arrived,321,2017-07-19 11:29:00+03,2017-07-19 12:25:00+03
24,PG0402,2017-07-19 12:25:00+03,2017-07-19 13:20:00+03,DME,LED,Arrived,321,2017-07-19 12:29:00+03,2017-07-19 13:24:00+03
25,PG0404,2017-07-28 19:05:00+03,2017-07-28 20:00:00+03,DME,LED,Arr
Query:
SELECT DISTINCT "departure_airport"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   LIMIT 100;
Answer:
departure_airport
DME
VKO
LED
SVX
KZN
ROV
JOK
UUA
SWT
TJM
IKT
ULY
KEJ
KRO
SVO
SCW
EYK
UUD
OVB
CEK
OMS
KUF
UFA
VOZ
VOG
MMK
GRV
PES
NAL
BTK
NBC
BQS
ABA
KYZ
NOJ
MRV
GOJ
UCT
NNM
KGP
URJ
SLY
NYA
NYM
VKT
RGK
KHV
CSY
AER
PEE
MJZ
KGD
KJA
TBW
NJC
KXK
OSW
PKV
UUS
PKC
CNN
AAQ
USK
DYR
HMA
OVS
NFG
UKX
GDZ
BAX
IAR
MCX
TOF
REN
NOZ
ASF
PEZ
KVX
MQF
BZK
EGO
SGC
HTA
ARH
YKS
NUX
ESL
GDX
UIK
PYJ
KRR
RTW
IJK
ULV
VVO
LPK
URS
STW
IWA
KLF
Query:
SELECT DISTINCT "arrival_airport"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   LIMIT 100;
Answer:
arrival_airport
BTK
HMA
AER
UFA
ULV
KRO
REN
IKT
MQF
KZN
CEK
VKO
NBC
MJZ
RTW
SVO
PES
OVB
KUF
VOZ
TBW
ROV
GRV
JOK
NAL
PKC
ABA
MRV
USK
NNM
URJ
NYM
VKT
GDZ
KHV
MCX
KEJ
ARH
OMS
NOJ
SLY
CSY
GOJ
ULY
SGC
KGP
SWT
UCT
SCW
DME
LED
ESL
KJA
PKV
UUS
NUX
DYR
OVS
UUA
EYK
BAX
TOF
ASF
PEZ
LPK
KVX
KGD
BZK
EGO
PEE
VOG
MMK
URS
NYA
NFG
VVO
OGZ
SKX
SVX
RGK
TJM
IAR
NOZ
KXK
KYZ
HTA
UKX
CNN
NJC
NSK
KRR
UUD
AAQ
IJK
STW
YKS
KLF
CEE
UIK
IWA
Query:
SELECT "airport_code", "city"
   FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
   LIMIT 100;
Answer:
Too long, hard cut:
airport_code,city
YKS,"{""en"": ""Yakutsk"", ""ru"": ""Якутск""}"
MJZ,"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}"
KHV,"{""en"": ""Khabarovsk"", ""ru"": ""Хабаровск""}"
PKC,"{""en"": ""Petropavlovsk"", ""ru"": ""Петропавловск-Камчатский""}"
UUS,"{""en"": ""Yuzhno-Sakhalinsk"", ""ru"": ""Южно-Сахалинск""}"
VVO,"{""en"": ""Vladivostok"", ""ru"": ""Владивосток""}"
LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
KGD,"{""en"": ""Kaliningrad"", ""ru"": ""Калининград""}"
KEJ,"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}"
CEK,"{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}"
MQF,"{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}"
PEE,"{""en"": ""Perm"", ""ru"": ""Пермь""}"
SGC,"{""en"": ""Surgut"", ""ru"": ""Сургут""}"
BZK,"{""en"": ""Bryansk"", ""ru"": ""Брянск""}"
MRV,"{""en"": ""Mineralnye Vody"", ""ru"": ""Минеральные Воды""}"
STW,"{""en"": ""Stavropol"", ""ru"": ""Ставрополь""}"
ASF,"{""en"": ""Astrakhan"", ""ru"": ""Астрахань""}"
NJC,"{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}"
SVX,"{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}"
SVO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
VOZ,"{""en"": ""Voronezh"", ""ru"": ""Воронеж""}"
VKO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
SCW,"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}"
KUF,"{""en"": ""Samara"", ""ru"": ""Самара""}"
DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
TJM,"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}"
GOJ,"{""en"": ""Nizhniy Novgorod"", ""ru"": ""Нижний Новгород""}"
TOF,"{""en"": ""Tomsk"", ""ru"": ""Томск""}"
UIK,"{""en"": ""Ust Ilimsk"", ""ru"": ""Усть-Илимск""}"
NSK,"{""en"": ""Norilsk"", ""ru"": ""Норильск""}"
ARH,"{""en"": ""Arkhangelsk"", ""ru"": ""Архангельск""}"
RTW,"{""en"": ""Saratov"", ""ru"": ""Саратов""}"
NUX,"{""en"": ""Novy Urengoy"", ""ru"": ""Новый Уренгой""}"
NOJ,"{""en"": ""Noyabrsk"", ""ru"": ""Ноябрьск""}"
UCT,"{""en"": ""Ukhta"", ""ru"": ""Ухта""}"
USK,"{""en"": ""Usinsk"", ""ru"": ""Усинск""}"
NNM,"{""en"": ""Naryan-Mar"", ""ru"": ""Нарьян-Мар""}"
PKV,"{""en"": ""Pskov"", ""ru"": ""Псков""}"
KGP,"{""en"": ""Kogalym"", ""ru"": ""Когалым""}"
KJA,"{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}"
URJ,"{""en"": ""Uraj"", ""ru"": ""Урай""}"
IWA,"{""en"": ""Ivanovo"", ""ru"": ""Иваново""}"
PYJ,"{""en"": ""Yakutia"", ""ru"": ""Удачный""}"
KXK,"{""en"": ""Komsomolsk-on-Amur"", ""ru"": ""Комсомольск-на-Амуре""}"
DYR,"{""en"": ""Anadyr"", ""ru"": ""Анадырь""}"
PES,"{""en"": ""Petrozavodsk"", ""ru"": ""Петрозаводск""}"
KYZ,"{""en"": ""Kyzyl"", ""ru"": ""Кызыл""}"
NOZ,"{""en"": ""Novokuznetsk"", ""ru"": ""Новокузнецк""}"
GRV,"{""en"": ""Grozny"", ""ru"": ""Грозный""}"
NAL,"{""en"": ""Nalchik"", ""ru"": ""Нальчик""}"
OGZ,"{""en"": ""Beslan"", ""ru"": ""Владикавказ""}"
ESL,"{""en"": ""Elista"", ""ru"": ""Элиста""}"
SLY,"{""en"": ""Salekhard"", ""ru"": ""Салехард""}"
HMA,"{""en"": ""Khanty-Mansiysk"", ""ru"": ""Ханты-Мансийск""}"
NYA,"{""en"": ""Nyagan"", ""ru"": ""Нягань""}"
OVS,"{""en"": ""Sovetskiy"", ""ru"": ""Советский""}"
IJK,"{""en"": ""Izhevsk"", ""ru"": ""Ижевск""}"
KVX,"{""en"": ""Kirov"", ""ru"": ""Киров""}"
NYM,"{""en"": ""Nadym"", ""ru"": ""Надым""}"
NFG,"{""en"": ""Nefteyugansk"", ""ru"": ""Нефтеюганск""}"
KRO,"{""en"": ""Kurgan"", ""ru"": ""Курган""}"
EGO,"{""en"": ""Belgorod"", ""ru"": ""Белгород""}"
URS,"{""en"": ""Kursk"", ""ru"": ""Курск""}"
LPK,"{""en"": ""Lipetsk"", ""ru"": ""Липецк""}"
VKT,"{""en"": ""Vorkuta"", ""ru"": ""Воркута""}"
UUA,"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}"
JOK,"{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}"
CSY,"{""en"": ""Cheboksary"", ""ru"": ""Чебоксары""}"
ULY,"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}"
OSW,"{""en"": ""Orsk"", ""ru"": ""Орск""}"
PEZ,"{""en"": ""Penza"", ""ru"": ""Пенза""}"
SKX,"{""en"": ""Saransk"", ""ru"": ""Саранск""}"
TBW,"{""en"": ""Tambow"", ""ru"": ""Тамбов""}"
UKX,"{""en"": ""Ust-Kut"", ""ru"": ""Усть-Кут""}"
GDZ,"{""en"": ""Gelendzhik"", ""ru"": ""Геленджик""}"
IAR,"{""en"": ""Yaroslavl"", ""ru"": ""Ярославль""}"
NBC,"{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}"
ULV,"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}"
SWT,"{""en"": ""Strezhevoy"", ""ru"": ""Стрежевой""}"
EYK,"{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}"
KLF,"{""en"": ""Kaluga"", ""ru"": ""Калуга""}"
RGK,"{""en"": ""Gorno-Altaysk"", ""ru"": ""Горно-Алтайск""}"
KRR,"{""en"": ""Krasnodar"", ""ru"": ""Краснодар""}"
MCX,"{""en"": ""Makhachkala"", ""ru"": ""Махачкала""}"
KZN,"{""en"": ""Kazan"", ""ru"": ""Казань""}"
REN,"{""en"": ""Orenburg"", ""ru"": ""Оренбург""}"
UFA,"{""en"": ""Ufa"", ""ru"": ""Уфа""}"
OVB,"{""en"": ""Novosibirsk"", ""ru"": ""Новосибирск""}"
CEE,"{""en"": ""Cherepovets"", ""ru"": ""Череповец""}"
OMS,"{""en"": ""Omsk"", ""ru"": ""Омск""}"
ROV,"{""en"": ""Rostov"", ""ru"": ""Ростов-на-Дону""}"
AER,"{""en"": ""Sochi"", ""ru"": ""Сочи""}"
VOG,"{""en"": ""Volgograd"", ""ru"": ""Волгоград""}"
BQS,"{""en"": ""Blagoveschensk"", ""ru"": ""Благовещенск""}"
GDX,"{""en"": ""Magadan"", ""ru"": ""Магадан""}"
HTA,"{""en"": ""Chita"", ""ru"": "
Query:
SELECT "airport_code", "city", "coordinates"
   FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
   WHERE "coordinates" IS NOT NULL
   LIMIT 100;
Answer:
Too long, hard cut:
airport_code,city,coordinates
YKS,"{""en"": ""Yakutsk"", ""ru"": ""Якутск""}","(129.77099609375,62.0932998657226562)"
MJZ,"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}","(114.03900146484375,62.534698486328125)"
KHV,"{""en"": ""Khabarovsk"", ""ru"": ""Хабаровск""}","(135.18800354004,48.5279998779300001)"
PKC,"{""en"": ""Petropavlovsk"", ""ru"": ""Петропавловск-Камчатский""}","(158.453994750976562,53.1679000854492188)"
UUS,"{""en"": ""Yuzhno-Sakhalinsk"", ""ru"": ""Южно-Сахалинск""}","(142.718002319335938,46.8886985778808594)"
VVO,"{""en"": ""Vladivostok"", ""ru"": ""Владивосток""}","(132.147994995117188,43.3989982604980469)"
LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}","(30.2625007629394531,59.8003005981445312)"
KGD,"{""en"": ""Kaliningrad"", ""ru"": ""Калининград""}","(20.5925998687744141,54.8899993896484375)"
KEJ,"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}","(86.1072006225585938,55.2700996398925781)"
CEK,"{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}","(61.503300000000003,55.3058010000000024)"
MQF,"{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}","(58.7556991577148438,53.3931007385253906)"
PEE,"{""en"": ""Perm"", ""ru"": ""Пермь""}","(56.021198272705,57.9145011901860016)"
SGC,"{""en"": ""Surgut"", ""ru"": ""Сургут""}","(73.4018020629882812,61.3437004089355469)"
BZK,"{""en"": ""Bryansk"", ""ru"": ""Брянск""}","(34.1763992309999978,53.2141990661999955)"
MRV,"{""en"": ""Mineralnye Vody"", ""ru"": ""Минеральные Воды""}","(43.0819015502929688,44.2251014709472656)"
STW,"{""en"": ""Stavropol"", ""ru"": ""Ставрополь""}","(42.1128005981445312,45.1091995239257812)"
ASF,"{""en"": ""Astrakhan"", ""ru"": ""Астрахань""}","(48.0063018799000005,46.2832984924000002)"
NJC,"{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}","(76.4835968017578125,60.9492988586425781)"
SVX,"{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}","(60.8027000427250002,56.7430992126460012)"
SVO,"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.4146000000000001,55.9725990000000024)"
VOZ,"{""en"": ""Voronezh"", ""ru"": ""Воронеж""}","(39.2295989990234375,51.8142013549804688)"
VKO,"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.2615013122999983,55.5914993286000012)"
SCW,"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}","(50.8451004028320312,61.6469993591308594)"
KUF,"{""en"": ""Samara"", ""ru"": ""Самара""}","(50.1642990112299998,53.5049018859860013)"
DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.9062995910644531,55.4087982177734375)"
TJM,"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}","(65.3243026732999965,57.1896018981999958)"
GOJ,"{""en"": ""Nizhniy Novgorod"", ""ru"": ""Нижний Новгород""}","(43.7840003967289988,56.2300987243649999)"
TOF,"{""en"": ""Tomsk"", ""ru"": ""Томск""}","(85.2082977294920028,56.3802986145020029)"
UIK,"{""en"": ""Ust Ilimsk"", ""ru"": ""Усть-Илимск""}","(102.56500244140625,58.1361007690429688)"
NSK,"{""en"": ""Norilsk"", ""ru"": ""Норильск""}","(87.3321990966796875,69.31109619140625)"
ARH,"{""en"": ""Arkhangelsk"", ""ru"": ""Архангельск""}","(40.7167015075683594,64.6003036499023438)"
RTW,"{""en"": ""Saratov"", ""ru"": ""Саратов""}","(46.0466995239257812,51.5649986267089844)"
NUX,"{""en"": ""Novy Urengoy"", ""ru"": ""Новый Уренгой""}","(76.5203018188476562,66.06939697265625)"
NOJ,"{""en"": ""Noyabrsk"", ""ru"": ""Ноябрьск""}","(75.2699966430664062,63.1833000183105469)"
UCT,"{""en"": ""Ukhta"", ""ru"": ""Ухта""}","(53.8046989440917969,63.5668983459472656)"
USK,"{""en"": ""Usinsk"", ""ru"": ""Усинск""}","(57.3671989440917969,66.00469970703125)"
NNM,"{""en"": ""Naryan-Mar"", ""ru"": ""Нарьян-Мар""}","(53.1218986511230469,67.6399993896484375)"
PKV,"{""en"": ""Pskov"", ""ru"": ""Псков""}","(28.395599365234375,57.7839012145996094)"
KGP,"{""en"": ""Kogalym"", ""ru"": ""Когалым""}","(74.5337982177734375,62.190399169921875)"
KJA,"{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}","(92.493301391602003,56.1729011535639984)"
URJ,"{""en"": ""Uraj"", ""ru"": ""Урай""}","(64.8266983032226562,60.1032981872558594)"
IWA,"{""en"": ""Ivanovo"", ""ru"": ""Иваново""}","(40.9407997131347656,56.9393997192382812)"
PYJ,"{""en"": ""Yakutia"", ""ru"": ""Удачный""}","(112.029998778999996,66.4003982544000024)"
KXK,"{""en"": ""Komsomolsk-on-Amur"", ""ru"": ""Комсомольск-на-Амуре""}","(136.934005737304688,50.4090003967285156)"
DYR,"{""en"": ""Anadyr"", ""ru"": ""Анадырь""}","(177.740997314453125,64.7349014282226562)"
PES,"{""en"": ""Petrozavodsk"", ""ru"": ""Петрозаводск""}","(34.1547012329101562,61.8852005004882812)"
KYZ,"{""en"": ""Kyzyl"", ""ru"": ""Кызыл""}","(94.4005966186523438,51.6693992614746094)"
NOZ,"{""en"": ""Novokuznetsk"", ""ru"": ""Новокузнецк""}","(86.877197265625,53.8114013671875)"
GRV,"{""en"": ""Grozny"", ""ru"": ""Грозный""}","(45.7840995788574219,43.2980995178222656)"
NAL,"{""en"": ""Nalchik"", ""ru"": ""Нальчик""}","(43.6366004943847656,43.5129013061523438)"
OGZ,"{""en"": ""Beslan"", ""ru"": ""Владикавказ""}","(44.6066017150999983,43.2051010132000002)"
ESL,"{""en"": ""Elista"", ""ru"": ""Элиста""}","(44.
Query:
SELECT "FLIGHTS"."flight_id", "FLIGHTS"."departure_airport", "AIRPORTS_DATA"."city" AS "departure_city"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   JOIN AIRLINES.AIRLINES."AIRPORTS_DATA"
     ON "FLIGHTS"."departure_airport" = "AIRPORTS_DATA"."airport_code"
   LIMIT 100;
Answer:
Too long, hard cut:
flight_id,departure_airport,departure_city
1185,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
3979,VKO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
4739,VKO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
5502,SVO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
6938,SVO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
7784,SVO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
9478,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
11085,SVX,"{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}"
11847,KZN,"{""en"": ""Kazan"", ""ru"": ""Казань""}"
12012,KZN,"{""en"": ""Kazan"", ""ru"": ""Казань""}"
13113,ROV,"{""en"": ""Rostov"", ""ru"": ""Ростов-на-Дону""}"
14806,PEE,"{""en"": ""Perm"", ""ru"": ""Пермь""}"
16837,JOK,"{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}"
17173,SCW,"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}"
19807,MJZ,"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}"
23609,UUA,"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}"
23695,UUA,"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}"
23780,SWT,"{""en"": ""Strezhevoy"", ""ru"": ""Стрежевой""}"
23945,EYK,"{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}"
24705,TJM,"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}"
25382,IKT,"{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}"
26057,ULY,"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}"
27580,KEJ,"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}"
29272,KGD,"{""en"": ""Kaliningrad"", ""ru"": ""Калининград""}"
29440,UUD,"{""en"": ""Ulan-ude"", ""ru"": ""Улан-Удэ""}"
32658,KRO,"{""en"": ""Kurgan"", ""ru"": ""Курган""}"
1,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
2,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
3,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
4,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
5,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
6,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
7,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
8,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
9,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
10,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
11,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
12,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
13,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
14,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
15,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
16,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
17,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
18,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
19,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
20,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
21,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
22,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
23,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
24,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
25,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
26,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
27,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
28,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
29,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
30,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
31,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
32,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
33,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
34,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
35,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
36,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
37,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
38,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
39,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
40,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
41,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
42,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
43,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
44,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
45,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
46,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
47,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
48,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
49,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
50,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
51,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
52,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
53,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
54,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
55,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
56,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
57,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
58,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
59,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
60,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
61,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
62,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
63,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
64,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
65,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
66,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
67,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
68,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
69,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
70,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"

Query:
SELECT "FLIGHTS"."flight_id", "FLIGHTS"."arrival_airport", "AIRPORTS_DATA"."city" AS "arrival_city"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   JOIN AIRLINES.AIRLINES."AIRPORTS_DATA"
     ON "FLIGHTS"."arrival_airport" = "AIRPORTS_DATA"."airport_code"
   LIMIT 100;
Answer:
Too long, hard cut:
flight_id,arrival_airport,arrival_city
1185,BTK,"{""en"": ""Bratsk"", ""ru"": ""Братск""}"
3979,HMA,"{""en"": ""Khanty-Mansiysk"", ""ru"": ""Ханты-Мансийск""}"
4739,AER,"{""en"": ""Sochi"", ""ru"": ""Сочи""}"
5502,UFA,"{""en"": ""Ufa"", ""ru"": ""Уфа""}"
6938,ULV,"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}"
7784,KRO,"{""en"": ""Kurgan"", ""ru"": ""Курган""}"
9478,REN,"{""en"": ""Orenburg"", ""ru"": ""Оренбург""}"
11085,SCW,"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}"
11847,IKT,"{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}"
12012,MQF,"{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}"
13113,KZN,"{""en"": ""Kazan"", ""ru"": ""Казань""}"
14806,CEK,"{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}"
16837,VKO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
17173,NBC,"{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}"
19807,CNN,"{""en"": ""Neryungri"", ""ru"": ""Нерюнгри""}"
23609,SVO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
23695,REN,"{""en"": ""Orenburg"", ""ru"": ""Оренбург""}"
23780,CEK,"{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}"
23945,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
24705,PES,"{""en"": ""Petrozavodsk"", ""ru"": ""Петрозаводск""}"
25382,MJZ,"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}"
26057,RTW,"{""en"": ""Saratov"", ""ru"": ""Саратов""}"
27580,DME,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
29272,ESL,"{""en"": ""Elista"", ""ru"": ""Элиста""}"
29440,VKO,"{""en"": ""Moscow"", ""ru"": ""Москва""}"
32658,KJA,"{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}"
1,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
2,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
3,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
4,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
5,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
6,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
7,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
8,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
9,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
10,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
11,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
12,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
13,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
14,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
15,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
16,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
17,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
18,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
19,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
20,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
21,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
22,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
23,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
24,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
25,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
26,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
27,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
28,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
29,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
30,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
31,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
32,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
33,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
34,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
35,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
36,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
37,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
38,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
39,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
40,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
41,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
42,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
43,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
44,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
45,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
46,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
47,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
48,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
49,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
50,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
51,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
52,LED,"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
53,LED,"{""en"": ""S
Query:
SELECT DISTINCT
     DEP."city" AS "departure_city",
     ARR."city" AS "arrival_city"
   FROM AIRLINES.AIRLINES."FLIGHTS" F
   JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
     ON F."departure_airport" = DEP."airport_code"
   JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
     ON F."arrival_airport" = ARR."airport_code"
   LIMIT 100;
Answer:
Too long, hard cut:
departure_city,arrival_city
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Bratsk"", ""ru"": ""Братск""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Sochi"", ""ru"": ""Сочи""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Kurgan"", ""ru"": ""Курган""}"
"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}","{""en"": ""Orenburg"", ""ru"": ""Оренбург""}"
"{""en"": ""Kazan"", ""ru"": ""Казань""}","{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}"
"{""en"": ""Perm"", ""ru"": ""Пермь""}","{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}"
"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}","{""en"": ""Moscow"", ""ru"": ""Москва""}"
"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}","{""en"": ""Orenburg"", ""ru"": ""Оренбург""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Kazan"", ""ru"": ""Казань""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Elista"", ""ru"": ""Элиста""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Neryungri"", ""ru"": ""Нерюнгри""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Naryan-Mar"", ""ru"": ""Нарьян-Мар""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Astrakhan"", ""ru"": ""Астрахань""}"
"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}","{""en"": ""Tambow"", ""ru"": ""Тамбов""}"
"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}","{""en"": ""Moscow"", ""ru"": ""Москва""}"
"{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}","{""en"": ""Moscow"", ""ru"": ""Москва""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}"
"{""en"": ""Novosibirsk"", ""ru"": ""Новосибирск""}","{""en"": ""Khanty-Mansiysk"", ""ru"": ""Ханты-Мансийск""}"
"{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}","{""en"": ""Ust-Kut"", ""ru"": ""Усть-Кут""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Perm"", ""ru"": ""Пермь""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Izhevsk"", ""ru"": ""Ижевск""}"
"{""en"": ""Penza"", ""ru"": ""Пенза""}","{""en"": ""Moscow"", ""ru"": ""Москва""}"
"{""en"": ""Rostov"", ""ru"": ""Ростов-на-Дону""}","{""en"": ""Kazan"", ""ru"": ""Казань""}"
"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}","{""en"": ""Saratov"", ""ru"": ""Саратов""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Salekhard"", ""ru"": ""Салехард""}"
"{""en"": ""Kurgan"", ""ru"": ""Курган""}","{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Omsk"", ""ru"": ""Омск""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}"
"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}","{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}"
"{""en"": ""Kazan"", ""ru"": ""Казань""}","{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
"{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}","{""en"": ""Sovetskiy"", ""ru"": ""Советский""}"
"{""en"": ""Blagoveschensk"", ""ru"": ""Благовещенск""}","{""en"": ""Khabarovsk"", ""ru"": ""Хабаровск""}"
"{""en"": ""Nizhniy Novgorod"", ""ru"": ""Нижний Новгород""}","{""en"": ""Nalchik"", ""ru"": ""Нальчик""}"
"{""en"": ""Anadyr"", ""ru"": ""Анадырь""}","{""en"": ""Khabarovsk"", ""ru"": ""Хабаровск""}"
"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}","{""en"": ""Uraj"", ""ru"": ""Урай""}"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","{""en"": ""Nizhniy Novgorod"", ""ru"": ""Нижний Новгород""}"
"{""en"": ""Yakutsk"", ""ru"": ""Якутск""}","{""en"": ""Yuzhno-Sakhalinsk"", ""ru"": ""Южно-Сахалинск""}"
"{""en"": ""Noyabrsk"", ""ru"": ""Ноябрьск""}","{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}"
"{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}","{""en"": ""Cheboksary"", ""ru"": ""Чебоксары""}"
"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}","{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}"
"{""en"": ""Tomsk"", ""ru"": ""Томск""}","{""en"": ""Moscow"", ""ru"": ""Москва""}"
"{""en"": ""Cheboksary"", ""ru"": ""Чебоксары""}","{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}"
"{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}","{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}"
"{""en"": ""Novosibirsk"", ""ru"": ""Новосибирск""}","{""en"": ""Perm"", ""ru"": ""Пермь""}"
"{""en"": ""Kazan"", ""ru"": ""Казань""}","{""en"": ""Kirov"", ""ru"": ""Киров""}"
"{""en"": ""Gorno-Altaysk"", ""ru"": ""Горно-Алтайск""}","{""en"": ""Moscow"", ""ru"": ""Москва""}"
"{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}","{""en"": ""Kurgan"", ""ru"": ""Курган""}"
"{""en"": ""Arkhangelsk"", ""ru"": ""Архангельск""}","{""en"": ""Perm"", ""ru"": ""Пермь""}"
"{""en"": ""St. Petersbu
Query:
SELECT "flight_no", "scheduled_departure", "scheduled_arrival"
   FROM AIRLINES.AIRLINES."FLIGHTS"
   LIMIT 100;
Answer:
Too long, hard cut:
flight_no,scheduled_departure,scheduled_arrival
PG0134,2017-09-10 09:50:00+03,2017-09-10 14:55:00+03
PG0052,2017-08-25 14:50:00+03,2017-08-25 17:35:00+03
PG0561,2017-09-05 12:30:00+03,2017-09-05 14:15:00+03
PG0529,2017-09-12 09:50:00+03,2017-09-12 11:20:00+03
PG0461,2017-09-04 12:25:00+03,2017-09-04 13:20:00+03
PG0667,2017-09-10 15:00:00+03,2017-09-10 17:30:00+03
PG0360,2017-08-28 09:00:00+03,2017-08-28 11:35:00+03
PG0569,2017-08-24 15:05:00+03,2017-08-24 16:10:00+03
PG0498,2017-09-12 10:15:00+03,2017-09-12 14:55:00+03
PG0621,2017-08-26 16:05:00+03,2017-08-26 17:00:00+03
PG0612,2017-08-18 16:25:00+03,2017-08-18 20:05:00+03
PG0676,2017-09-06 07:05:00+03,2017-09-06 07:45:00+03
PG0010,2017-09-05 12:25:00+03,2017-09-05 14:35:00+03
PG0059,2017-09-14 12:25:00+03,2017-09-14 14:45:00+03
PG0035,2017-09-11 06:35:00+03,2017-09-11 09:25:00+03
PG0648,2017-08-31 11:35:00+03,2017-08-31 13:00:00+03
PG0388,2017-08-26 10:55:00+03,2017-08-26 11:25:00+03
PG0098,2017-09-02 06:50:00+03,2017-09-02 10:30:00+03
PG0076,2017-09-05 09:15:00+03,2017-09-05 11:50:00+03
PG0632,2017-08-26 15:00:00+03,2017-08-26 17:35:00+03
PG0556,2017-08-31 09:05:00+03,2017-08-31 10:55:00+03
PG0467,2017-08-26 15:45:00+03,2017-08-26 17:00:00+03
PG0483,2017-09-12 07:20:00+03,2017-09-12 11:20:00+03
PG0334,2017-09-05 16:20:00+03,2017-09-05 19:05:00+03
PG0065,2017-09-02 12:15:00+03,2017-09-02 18:05:00+03
PG0674,2017-08-19 09:35:00+03,2017-08-19 12:00:00+03
PG0405,2017-07-16 09:35:00+03,2017-07-16 10:30:00+03
PG0404,2017-08-05 19:05:00+03,2017-08-05 20:00:00+03
PG0405,2017-08-05 09:35:00+03,2017-08-05 10:30:00+03
PG0402,2017-09-09 12:25:00+03,2017-09-09 13:20:00+03
PG0405,2017-08-16 09:35:00+03,2017-08-16 10:30:00+03
PG0404,2017-08-16 19:05:00+03,2017-08-16 20:00:00+03
PG0403,2017-08-16 11:25:00+03,2017-08-16 12:20:00+03
PG0402,2017-08-16 12:25:00+03,2017-08-16 13:20:00+03
PG0405,2017-08-25 09:35:00+03,2017-08-25 10:30:00+03
PG0402,2017-08-23 12:25:00+03,2017-08-23 13:20:00+03
PG0403,2017-08-23 11:25:00+03,2017-08-23 12:20:00+03
PG0404,2017-08-23 19:05:00+03,2017-08-23 20:00:00+03
PG0405,2017-08-23 09:35:00+03,2017-08-23 10:30:00+03
PG0402,2017-08-06 12:25:00+03,2017-08-06 13:20:00+03
PG0402,2017-07-28 12:25:00+03,2017-07-28 13:20:00+03
PG0403,2017-08-06 11:25:00+03,2017-08-06 12:20:00+03
PG0404,2017-08-06 19:05:00+03,2017-08-06 20:00:00+03
PG0405,2017-08-06 09:35:00+03,2017-08-06 10:30:00+03
PG0403,2017-07-28 11:25:00+03,2017-07-28 12:20:00+03
PG0403,2017-07-26 11:25:00+03,2017-07-26 12:20:00+03
PG0405,2017-07-19 09:35:00+03,2017-07-19 10:30:00+03
PG0404,2017-07-19 19:05:00+03,2017-07-19 20:00:00+03
PG0403,2017-07-19 11:25:00+03,2017-07-19 12:20:00+03
PG0402,2017-07-19 12:25:00+03,2017-07-19 13:20:00+03
PG0404,2017-07-28 19:05:00+03,2017-07-28 20:00:00+03
PG0405,2017-08-12 09:35:00+03,2017-08-12 10:30:00+03
PG0404,2017-08-12 19:05:00+03,2017-08-12 20:00:00+03
PG0405,2017-09-03 09:35:00+03,2017-09-03 10:30:00+03
PG0403,2017-08-12 11:25:00+03,2017-08-12 12:20:00+03
PG0402,2017-08-12 12:25:00+03,2017-08-12 13:20:00+03
PG0404,2017-09-03 19:05:00+03,2017-09-03 20:00:00+03
PG0403,2017-09-03 11:25:00+03,2017-09-03 12:20:00+03
PG0402,2017-09-03 12:25:00+03,2017-09-03 13:20:00+03
PG0402,2017-08-07 12:25:00+03,2017-08-07 13:20:00+03
PG0403,2017-08-07 11:25:00+03,2017-08-07 12:20:00+03
PG0404,2017-08-07 19:05:00+03,2017-08-07 20:00:00+03
PG0405,2017-08-07 09:35:00+03,2017-08-07 10:30:00+03
PG0405,2017-07-28 09:35:00+03,2017-07-28 10:30:00+03
PG0405,2017-09-08 09:35:00+03,2017-09-08 10:30:00+03
PG0402,2017-09-13 12:25:00+03,2017-09-13 13:20:00+03
PG0403,2017-09-13 11:25:00+03,2017-09-13 12:20:00+03
PG0404,2017-09-13 19:05:00+03,2017-09-13 20:00:00+03
PG0405,2017-09-13 09:35:00+03,2017-09-13 10:30:00+03
PG0404,2017-09-08 19:05:00+03,2017-09-08 20:00:00+03
PG0403,2017-09-08 11:25:00+03,2017-09-08 12:20:00+03
PG0405,2017-08-15 09:35:00+03,2017-08-15 10:30:00+03
PG0404,2017-08-15 19:05:00+03,2017-08-15 20:00:00+03
PG0403,2017-08-15 11:25:00+03,2017-08-15 12:20:00+03
PG0402,2017-08-15 12:25:00+03,2017-08-15 13:20:00+03
PG0402,2017-08-08 12:25:00+03,2017-08-08 13:20:00+03
PG0403,2017-08-08 11:25:00+03,2017-08-08 12:20:00+03
PG0404,2017-08-08 19:05:00+03,2017-08-08 20:00:00+03
PG0405,2017-08-08 09:35:00+03,2017-08-08 10:30:00+03
PG0405,2017-07-18 09:35:00+03,2017-07-18 10:30:00+03
PG0404,2017-07-18 19:05:00+03,2017-07-18 20:00:00+03
PG0403,2017-07-18 11:25:00+03,2017-07-18 12:20:00+03
PG0402,2017-07-18 12:25:00+03,2017-07-18 13:20:00+03
PG0402,2017-09-08 12:25:00+03,2017-09-08 13:20:00+03
PG0402,2017-07-26 12:25:00+03,2017-07-26 13:20:00+03
PG0402,2017-07-16 12:25:00+03,2017-07-16 13:20:00+03
PG0403,2017-07-16 11:25:00+03,2017-07-16 12:20:00+03
PG0404,2017-07-16 19:05:00+03,2017-07-16 20:00:00+03
PG0402,2017-08-30 12:25:00+03,2017-08-30 13:20:00+03
PG0403,2017-08-30 11:25:00+03,2017-08-30 12:20:00+03
PG0405,2017-09-02 09:35:00+03,2017-09-02 10:30:00+03
PG0404,2017-09-02 19:05:00+03,2017-09-02 20:00:00+03
PG0404,2017-07-26 19:05:00+03,2017-07-26 20:00:00+03
PG0403,2017-09-02 11:25
Query:
SELECT DEP."city" AS "departure_city", COUNT(*) AS "flight_count"
    FROM AIRLINES.AIRLINES."FLIGHTS" F
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
      ON F."departure_airport" = DEP."airport_code"
    GROUP BY DEP."city"
    ORDER BY "flight_count" DESC
    LIMIT 100;
Answer:
Too long, hard cut:
departure_city,flight_count
"{""en"": ""Moscow"", ""ru"": ""Москва""}",7917
"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}",1900
"{""en"": ""Novosibirsk"", ""ru"": ""Новосибирск""}",1055
"{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}",707
"{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}",689
"{""en"": ""Perm"", ""ru"": ""Пермь""}",619
"{""en"": ""Rostov"", ""ru"": ""Ростов-на-Дону""}",617
"{""en"": ""Bryansk"", ""ru"": ""Брянск""}",610
"{""en"": ""Sochi"", ""ru"": ""Сочи""}",584
"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}",584
"{""en"": ""Sovetskiy"", ""ru"": ""Советский""}",549
"{""en"": ""Surgut"", ""ru"": ""Сургут""}",531
"{""en"": ""Khanty-Mansiysk"", ""ru"": ""Ханты-Мансийск""}",515
"{""en"": ""Novy Urengoy"", ""ru"": ""Новый Уренгой""}",506
"{""en"": ""Kazan"", ""ru"": ""Казань""}",471
"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}",427
"{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}",409
"{""en"": ""Khabarovsk"", ""ru"": ""Хабаровск""}",400
"{""en"": ""Ufa"", ""ru"": ""Уфа""}",384
"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}",383
"{""en"": ""Belgorod"", ""ru"": ""Белгород""}",366
"{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}",366
"{""en"": ""Kirov"", ""ru"": ""Киров""}",366
"{""en"": ""Novokuznetsk"", ""ru"": ""Новокузнецк""}",365
"{""en"": ""Petrozavodsk"", ""ru"": ""Петрозаводск""}",358
"{""en"": ""Nizhniy Novgorod"", ""ru"": ""Нижний Новгород""}",357
"{""en"": ""Arkhangelsk"", ""ru"": ""Архангельск""}",323
"{""en"": ""Volgograd"", ""ru"": ""Волгоград""}",314
"{""en"": ""Cheboksary"", ""ru"": ""Чебоксары""}",305
"{""en"": ""Orenburg"", ""ru"": ""Оренбург""}",305
"{""en"": ""Elista"", ""ru"": ""Элиста""}",297
"{""en"": ""Vorkuta"", ""ru"": ""Воркута""}",280
"{""en"": ""Yuzhno-Sakhalinsk"", ""ru"": ""Южно-Сахалинск""}",262
"{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}",261
"{""en"": ""Tomsk"", ""ru"": ""Томск""}",254
"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}",253
"{""en"": ""Penza"", ""ru"": ""Пенза""}",244
"{""en"": ""Saratov"", ""ru"": ""Саратов""}",244
"{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}",244
"{""en"": ""Tambow"", ""ru"": ""Тамбов""}",244
"{""en"": ""Krasnodar"", ""ru"": ""Краснодар""}",236
"{""en"": ""Abakan"", ""ru"": ""Абакан""}",235
"{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}",227
"{""en"": ""Kurgan"", ""ru"": ""Курган""}",211
"{""en"": ""Mineralnye Vody"", ""ru"": ""Минеральные Воды""}",209
"{""en"": ""Makhachkala"", ""ru"": ""Махачкала""}",200
"{""en"": ""Omsk"", ""ru"": ""Омск""}",200
"{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}",192
"{""en"": ""Kogalym"", ""ru"": ""Когалым""}",192
"{""en"": ""Noyabrsk"", ""ru"": ""Ноябрьск""}",184
"{""en"": ""Samara"", ""ru"": ""Самара""}",183
"{""en"": ""Vladivostok"", ""ru"": ""Владивосток""}",183
"{""en"": ""Ukhta"", ""ru"": ""Ухта""}",183
"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}",183
"{""en"": ""Nalchik"", ""ru"": ""Нальчик""}",183
"{""en"": ""Ust Ilimsk"", ""ru"": ""Усть-Илимск""}",175
"{""en"": ""Yakutsk"", ""ru"": ""Якутск""}",166
"{""en"": ""Neryungri"", ""ru"": ""Нерюнгри""}",158
"{""en"": ""Naryan-Mar"", ""ru"": ""Нарьян-Мар""}",157
"{""en"": ""Kaliningrad"", ""ru"": ""Калининград""}",157
"{""en"": ""Barnaul"", ""ru"": ""Барнаул""}",156
"{""en"": ""Astrakhan"", ""ru"": ""Астрахань""}",148
"{""en"": ""Nadym"", ""ru"": ""Надым""}",140
"{""en"": ""Kursk"", ""ru"": ""Курск""}",139
"{""en"": ""Norilsk"", ""ru"": ""Норильск""}",139
"{""en"": ""Cherepovets"", ""ru"": ""Череповец""}",131
"{""en"": ""Anapa"", ""ru"": ""Анапа""}",131
"{""en"": ""Stavropol"", ""ru"": ""Ставрополь""}",123
"{""en"": ""Voronezh"", ""ru"": ""Воронеж""}",122
"{""en"": ""Salekhard"", ""ru"": ""Салехард""}",122
"{""en"": ""Uraj"", ""ru"": ""Урай""}",122
"{""en"": ""Saransk"", ""ru"": ""Саранск""}",122
"{""en"": ""Kaluga"", ""ru"": ""Калуга""}",122
"{""en"": ""Beslan"", ""ru"": ""Владикавказ""}",122
"{""en"": ""Murmansk"", ""ru"": ""Мурманск""}",122
"{""en"": ""Gelendzhik"", ""ru"": ""Геленджик""}",113
"{""en"": ""Chita"", ""ru"": ""Чита""}",96
"{""en"": ""Pskov"", ""ru"": ""Псков""}",96
"{""en"": ""Gorno-Altaysk"", ""ru"": ""Горно-Алтайск""}",88
"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}",87
"{""en"": ""Yaroslavl"", ""ru"": ""Ярославль""}",79
"{""en"": ""Ulan-ude"", ""ru"": ""Улан-Удэ""}",71
"{""en"": ""Orsk"", ""ru"": ""Орск""}",71
"{""en"": ""Grozny"", ""ru"": ""Грозный""}",70
"{""en"": ""Blagoveschensk"", ""ru"": ""Благовещенск""}",61
"{""en"": ""Ust-Kut"", ""ru"": ""Усть-Кут""}",61
"{""en"": ""Izhevsk"", ""ru"": ""Ижевск""}",61
"{""en"": ""Strezhevoy"", ""ru"": ""Стрежевой""}",61
"{""en"": ""Bratsk"", ""ru"": ""Братск""}",61
"{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}",53
"{""en"": ""Nefteyugansk"", ""ru"": ""Нефтеюганск""}",44
"{""en"": ""Lipetsk"", ""ru"": ""Липецк""}",43
"{""en"": ""Kyzyl"", ""ru"": ""Кызыл""}",43
"{""en"": ""Magadan"", ""ru"": ""Магадан""}",36
"{""en"": ""Anadyr"", ""ru"": ""Анадырь""}",36
"{""en"": ""Ivanovo"", ""ru"": ""Иваново""}",34
"{""en"": ""Nyagan"", ""ru"": ""Нягань""}
Query:
SELECT ARR."city" AS "arrival_city", COUNT(*) AS "flight_count"
    FROM AIRLINES.AIRLINES."FLIGHTS" F
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
      ON F."arrival_airport" = ARR."airport_code"
    GROUP BY ARR."city"
    ORDER BY "flight_count" DESC
    LIMIT 100;
Answer:
Too long, hard cut:
arrival_city,flight_count
"{""en"": ""Moscow"", ""ru"": ""Москва""}",7916
"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}",1902
"{""en"": ""Novosibirsk"", ""ru"": ""Новосибирск""}",1055
"{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}",707
"{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}",688
"{""en"": ""Rostov"", ""ru"": ""Ростов-на-Дону""}",620
"{""en"": ""Perm"", ""ru"": ""Пермь""}",619
"{""en"": ""Bryansk"", ""ru"": ""Брянск""}",610
"{""en"": ""Sochi"", ""ru"": ""Сочи""}",584
"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}",584
"{""en"": ""Sovetskiy"", ""ru"": ""Советский""}",549
"{""en"": ""Surgut"", ""ru"": ""Сургут""}",530
"{""en"": ""Khanty-Mansiysk"", ""ru"": ""Ханты-Мансийск""}",515
"{""en"": ""Novy Urengoy"", ""ru"": ""Новый Уренгой""}",506
"{""en"": ""Kazan"", ""ru"": ""Казань""}",470
"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}",428
"{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}",411
"{""en"": ""Khabarovsk"", ""ru"": ""Хабаровск""}",402
"{""en"": ""Ufa"", ""ru"": ""Уфа""}",384
"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}",383
"{""en"": ""Novokuznetsk"", ""ru"": ""Новокузнецк""}",366
"{""en"": ""Belgorod"", ""ru"": ""Белгород""}",366
"{""en"": ""Kirov"", ""ru"": ""Киров""}",366
"{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}",365
"{""en"": ""Nizhniy Novgorod"", ""ru"": ""Нижний Новгород""}",357
"{""en"": ""Petrozavodsk"", ""ru"": ""Петрозаводск""}",356
"{""en"": ""Arkhangelsk"", ""ru"": ""Архангельск""}",322
"{""en"": ""Volgograd"", ""ru"": ""Волгоград""}",314
"{""en"": ""Cheboksary"", ""ru"": ""Чебоксары""}",305
"{""en"": ""Orenburg"", ""ru"": ""Оренбург""}",305
"{""en"": ""Elista"", ""ru"": ""Элиста""}",296
"{""en"": ""Vorkuta"", ""ru"": ""Воркута""}",279
"{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}",262
"{""en"": ""Yuzhno-Sakhalinsk"", ""ru"": ""Южно-Сахалинск""}",262
"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}",253
"{""en"": ""Tomsk"", ""ru"": ""Томск""}",253
"{""en"": ""Saratov"", ""ru"": ""Саратов""}",244
"{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}",244
"{""en"": ""Penza"", ""ru"": ""Пенза""}",244
"{""en"": ""Tambow"", ""ru"": ""Тамбов""}",244
"{""en"": ""Krasnodar"", ""ru"": ""Краснодар""}",236
"{""en"": ""Abakan"", ""ru"": ""Абакан""}",235
"{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}",226
"{""en"": ""Kurgan"", ""ru"": ""Курган""}",212
"{""en"": ""Mineralnye Vody"", ""ru"": ""Минеральные Воды""}",209
"{""en"": ""Makhachkala"", ""ru"": ""Махачкала""}",201
"{""en"": ""Omsk"", ""ru"": ""Омск""}",200
"{""en"": ""Nizhnevartovsk"", ""ru"": ""Нижневартовск""}",192
"{""en"": ""Kogalym"", ""ru"": ""Когалым""}",191
"{""en"": ""Vladivostok"", ""ru"": ""Владивосток""}",183
"{""en"": ""Samara"", ""ru"": ""Самара""}",183
"{""en"": ""Ukhta"", ""ru"": ""Ухта""}",183
"{""en"": ""Nalchik"", ""ru"": ""Нальчик""}",183
"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}",183
"{""en"": ""Noyabrsk"", ""ru"": ""Ноябрьск""}",182
"{""en"": ""Ust Ilimsk"", ""ru"": ""Усть-Илимск""}",175
"{""en"": ""Yakutsk"", ""ru"": ""Якутск""}",167
"{""en"": ""Neryungri"", ""ru"": ""Нерюнгри""}",158
"{""en"": ""Kaliningrad"", ""ru"": ""Калининград""}",158
"{""en"": ""Naryan-Mar"", ""ru"": ""Нарьян-Мар""}",157
"{""en"": ""Barnaul"", ""ru"": ""Барнаул""}",156
"{""en"": ""Astrakhan"", ""ru"": ""Астрахань""}",148
"{""en"": ""Norilsk"", ""ru"": ""Норильск""}",140
"{""en"": ""Nadym"", ""ru"": ""Надым""}",140
"{""en"": ""Kursk"", ""ru"": ""Курск""}",139
"{""en"": ""Anapa"", ""ru"": ""Анапа""}",131
"{""en"": ""Cherepovets"", ""ru"": ""Череповец""}",130
"{""en"": ""Stavropol"", ""ru"": ""Ставрополь""}",123
"{""en"": ""Salekhard"", ""ru"": ""Салехард""}",122
"{""en"": ""Uraj"", ""ru"": ""Урай""}",122
"{""en"": ""Voronezh"", ""ru"": ""Воронеж""}",122
"{""en"": ""Saransk"", ""ru"": ""Саранск""}",122
"{""en"": ""Murmansk"", ""ru"": ""Мурманск""}",122
"{""en"": ""Kaluga"", ""ru"": ""Калуга""}",122
"{""en"": ""Beslan"", ""ru"": ""Владикавказ""}",122
"{""en"": ""Gelendzhik"", ""ru"": ""Геленджик""}",114
"{""en"": ""Pskov"", ""ru"": ""Псков""}",96
"{""en"": ""Chita"", ""ru"": ""Чита""}",96
"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}",88
"{""en"": ""Gorno-Altaysk"", ""ru"": ""Горно-Алтайск""}",88
"{""en"": ""Yaroslavl"", ""ru"": ""Ярославль""}",79
"{""en"": ""Ulan-ude"", ""ru"": ""Улан-Удэ""}",70
"{""en"": ""Grozny"", ""ru"": ""Грозный""}",70
"{""en"": ""Orsk"", ""ru"": ""Орск""}",70
"{""en"": ""Strezhevoy"", ""ru"": ""Стрежевой""}",61
"{""en"": ""Ust-Kut"", ""ru"": ""Усть-Кут""}",61
"{""en"": ""Bratsk"", ""ru"": ""Братск""}",61
"{""en"": ""Blagoveschensk"", ""ru"": ""Благовещенск""}",61
"{""en"": ""Izhevsk"", ""ru"": ""Ижевск""}",61
"{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}",53
"{""en"": ""Lipetsk"", ""ru"": ""Липецк""}",44
"{""en"": ""Kyzyl"", ""ru"": ""Кызыл""}",44
"{""en"": ""Nefteyugansk"", ""ru"": ""Нефтеюганск""}",44
"{""en"": ""Ivanovo"", ""ru"": ""Иваново""}",36
"{""en"": ""Magadan"", ""ru"": ""Магадан""}",35
"{""en"": ""Anadyr"", ""ru"": ""Анадырь""}",34
"{""en"": ""Yakutia"", ""ru"": ""Удачный""}
Query:
SELECT
  "airport_code",
  PARSE_JSON("city"):"en"::STRING AS "city_en",
  TO_VARCHAR("timezone") AS "timezone_str"
FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
WHERE TO_VARCHAR("timezone") ILIKE '%UTC%'
LIMIT 100;
Answer:
No data found for the specified query.
Query:
SELECT "aircraft_code", "model"
    FROM AIRLINES.AIRLINES."AIRCRAFTS_DATA"
    LIMIT 100;
Answer:
aircraft_code,model
773,"{""en"": ""Boeing 777-300"", ""ru"": ""Боинг 777-300""}"
763,"{""en"": ""Boeing 767-300"", ""ru"": ""Боинг 767-300""}"
SU9,"{""en"": ""Sukhoi Superjet-100"", ""ru"": ""Сухой Суперджет-100""}"
320,"{""en"": ""Airbus A320-200"", ""ru"": ""Аэробус A320-200""}"
321,"{""en"": ""Airbus A321-200"", ""ru"": ""Аэробус A321-200""}"
319,"{""en"": ""Airbus A319-100"", ""ru"": ""Аэробус A319-100""}"
733,"{""en"": ""Boeing 737-300"", ""ru"": ""Боинг 737-300""}"
CN1,"{""en"": ""Cessna 208 Caravan"", ""ru"": ""Сессна 208 Караван""}"
CR2,"{""en"": ""Bombardier CRJ-200"", ""ru"": ""Бомбардье CRJ-200""}"
Query:
SELECT "flight_no", "actual_departure", "actual_arrival"
    FROM AIRLINES.AIRLINES."FLIGHTS"
    WHERE "actual_departure" IS NOT NULL AND "actual_arrival" IS NOT NULL
    LIMIT 100;
Answer:
flight_no,actual_departure,actual_arrival
PG0134,\N,\N
PG0052,\N,\N
PG0561,\N,\N
PG0529,\N,\N
PG0461,\N,\N
PG0667,\N,\N
PG0360,\N,\N
PG0569,\N,\N
PG0498,\N,\N
PG0621,\N,\N
PG0612,\N,\N
PG0676,\N,\N
PG0010,\N,\N
PG0059,\N,\N
PG0035,\N,\N
PG0648,\N,\N
PG0388,\N,\N
PG0098,\N,\N
PG0076,\N,\N
PG0632,\N,\N
PG0556,\N,\N
PG0467,\N,\N
PG0483,\N,\N
PG0334,\N,\N
PG0065,\N,\N
PG0674,\N,\N
PG0405,2017-07-16 09:44:00+03,2017-07-16 10:39:00+03
PG0404,2017-08-05 19:06:00+03,2017-08-05 20:01:00+03
PG0405,2017-08-05 09:39:00+03,2017-08-05 10:34:00+03
PG0402,\N,\N
PG0405,\N,\N
PG0404,\N,\N
PG0403,\N,\N
PG0402,\N,\N
PG0405,\N,\N
PG0402,\N,\N
PG0403,\N,\N
PG0404,\N,\N
PG0405,\N,\N
PG0402,2017-08-06 12:28:00+03,2017-08-06 13:23:00+03
PG0402,2017-07-28 12:31:00+03,2017-07-28 13:26:00+03
PG0403,2017-08-06 11:27:00+03,2017-08-06 12:22:00+03
PG0404,2017-08-06 19:05:00+03,2017-08-06 20:00:00+03
PG0405,2017-08-06 09:39:00+03,2017-08-06 10:35:00+03
PG0403,2017-07-28 11:27:00+03,2017-07-28 12:22:00+03
PG0403,2017-07-26 11:28:00+03,2017-07-26 12:23:00+03
PG0405,2017-07-19 09:36:00+03,2017-07-19 10:31:00+03
PG0404,2017-07-19 19:06:00+03,2017-07-19 20:00:00+03
PG0403,2017-07-19 11:29:00+03,2017-07-19 12:25:00+03
PG0402,2017-07-19 12:29:00+03,2017-07-19 13:24:00+03
PG0404,2017-07-28 19:11:00+03,2017-07-28 20:06:00+03
PG0405,2017-08-12 12:41:00+03,2017-08-12 13:37:00+03
PG0404,2017-08-12 19:07:00+03,2017-08-12 20:02:00+03
PG0405,\N,\N
PG0403,2017-08-12 11:28:00+03,2017-08-12 12:23:00+03
PG0402,2017-08-12 12:28:00+03,2017-08-12 13:23:00+03
PG0404,\N,\N
PG0403,\N,\N
PG0402,\N,\N
PG0402,2017-08-07 12:29:00+03,2017-08-07 13:24:00+03
PG0403,2017-08-07 11:29:00+03,2017-08-07 12:24:00+03
PG0404,2017-08-07 19:09:00+03,2017-08-07 20:04:00+03
PG0405,2017-08-07 09:38:00+03,2017-08-07 10:34:00+03
PG0405,2017-07-28 09:36:00+03,2017-07-28 10:30:00+03
PG0405,\N,\N
PG0402,\N,\N
PG0403,\N,\N
PG0404,\N,\N
PG0405,\N,\N
PG0404,\N,\N
PG0403,\N,\N
PG0405,2017-08-15 09:38:00+03,2017-08-15 10:33:00+03
PG0404,\N,\N
PG0403,2017-08-15 11:30:00+03,2017-08-15 12:25:00+03
PG0402,2017-08-15 12:28:00+03,2017-08-15 13:24:00+03
PG0402,2017-08-08 12:26:00+03,2017-08-08 13:21:00+03
PG0403,2017-08-08 11:25:00+03,2017-08-08 12:20:00+03
PG0404,2017-08-08 22:05:00+03,2017-08-08 22:59:00+03
PG0405,2017-08-08 09:35:00+03,2017-08-08 10:30:00+03
PG0405,2017-07-18 09:40:00+03,2017-07-18 10:35:00+03
PG0404,2017-07-18 19:08:00+03,2017-07-18 20:03:00+03
PG0403,2017-07-18 14:48:00+03,2017-07-18 15:43:00+03
PG0402,2017-07-18 12:29:00+03,2017-07-18 13:24:00+03
PG0402,\N,\N
PG0402,2017-07-26 12:28:00+03,2017-07-26 13:23:00+03
PG0402,2017-07-16 12:27:00+03,2017-07-16 13:22:00+03
PG0403,2017-07-16 15:15:00+03,2017-07-16 16:10:00+03
PG0404,2017-07-16 19:08:00+03,2017-07-16 20:03:00+03
PG0402,\N,\N
PG0403,\N,\N
PG0405,\N,\N
PG0404,\N,\N
PG0404,2017-07-26 19:06:00+03,2017-07-26 20:01:00+03
PG0403,\N,\N
PG0402,\N,\N
PG0404,\N,\N
PG0405,\N,\N
PG0402,2017-08-09 12:27:00+03,2017-08-09 13:23:00+03
PG0403,2017-08-09 11:30:00+03,2017-08-09 12:27:00+03
PG0404,2017-08-09 22:18:00+03,2017-08-09 23:13:00+03
Query:
SELECT
      DEP."city" AS "departure_city",
      DEP."coordinates" AS "departure_coordinates",
      ARR."city" AS "arrival_city",
      ARR."coordinates" AS "arrival_coordinates"
    FROM AIRLINES.AIRLINES."FLIGHTS" F
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
      ON F."departure_airport" = DEP."airport_code"
    JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
      ON F."arrival_airport" = ARR."airport_code"
    LIMIT 100;
Answer:
Too long, hard cut:
departure_city,departure_coordinates,arrival_city,arrival_coordinates
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.9062995910644531,55.4087982177734375)","{""en"": ""Bratsk"", ""ru"": ""Братск""}","(101.697998046875,56.3706016540527344)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.2615013122999983,55.5914993286000012)","{""en"": ""Khanty-Mansiysk"", ""ru"": ""Ханты-Мансийск""}","(69.0860977172851562,61.0284996032714844)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.2615013122999983,55.5914993286000012)","{""en"": ""Sochi"", ""ru"": ""Сочи""}","(39.9566001892089986,43.4499015808110016)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.4146000000000001,55.9725990000000024)","{""en"": ""Ufa"", ""ru"": ""Уфа""}","(55.8744010925289984,54.5574989318850001)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.4146000000000001,55.9725990000000024)","{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}","(48.2266998291000064,54.2682991027999932)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.4146000000000001,55.9725990000000024)","{""en"": ""Kurgan"", ""ru"": ""Курган""}","(65.4156036376953125,55.4752998352050781)"
"{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}","(30.2625007629394531,59.8003005981445312)","{""en"": ""Orenburg"", ""ru"": ""Оренбург""}","(55.4566993713378906,51.7957992553710938)"
"{""en"": ""Yekaterinburg"", ""ru"": ""Екатеринбург""}","(60.8027000427250002,56.7430992126460012)","{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}","(50.8451004028320312,61.6469993591308594)"
"{""en"": ""Kazan"", ""ru"": ""Казань""}","(49.278701782227003,55.606201171875)","{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}","(104.388999938959998,52.2680015563960012)"
"{""en"": ""Kazan"", ""ru"": ""Казань""}","(49.278701782227003,55.606201171875)","{""en"": ""Magnetiogorsk"", ""ru"": ""Магнитогорск""}","(58.7556991577148438,53.3931007385253906)"
"{""en"": ""Rostov"", ""ru"": ""Ростов-на-Дону""}","(39.8180999755999991,47.2582015990999977)","{""en"": ""Kazan"", ""ru"": ""Казань""}","(49.278701782227003,55.606201171875)"
"{""en"": ""Perm"", ""ru"": ""Пермь""}","(56.021198272705,57.9145011901860016)","{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}","(61.503300000000003,55.3058010000000024)"
"{""en"": ""Yoshkar-Ola"", ""ru"": ""Йошкар-Ола""}","(47.9047012329101562,56.7005996704101562)","{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.2615013122999983,55.5914993286000012)"
"{""en"": ""Syktyvkar"", ""ru"": ""Сыктывкар""}","(50.8451004028320312,61.6469993591308594)","{""en"": ""Nizhnekamsk"", ""ru"": ""Нижнекамск""}","(52.092498779296875,55.5647010803222656)"
"{""en"": ""Mirnyj"", ""ru"": ""Мирный""}","(114.03900146484375,62.534698486328125)","{""en"": ""Neryungri"", ""ru"": ""Нерюнгри""}","(124.914001464839998,56.9138984680179973)"
"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}","(52.8017005920410156,54.6399993896484375)","{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.4146000000000001,55.9725990000000024)"
"{""en"": ""Bugulma"", ""ru"": ""Бугульма""}","(52.8017005920410156,54.6399993896484375)","{""en"": ""Orenburg"", ""ru"": ""Оренбург""}","(55.4566993713378906,51.7957992553710938)"
"{""en"": ""Strezhevoy"", ""ru"": ""Стрежевой""}","(77.66000366210001,60.7094001769999991)","{""en"": ""Chelyabinsk"", ""ru"": ""Челябинск""}","(61.503300000000003,55.3058010000000024)"
"{""en"": ""Beloyarsky"", ""ru"": ""Белоярский""}","(66.6986007689999951,63.6869010924999941)","{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.9062995910644531,55.4087982177734375)"
"{""en"": ""Tyumen"", ""ru"": ""Тюмень""}","(65.3243026732999965,57.1896018981999958)","{""en"": ""Petrozavodsk"", ""ru"": ""Петрозаводск""}","(34.1547012329101562,61.8852005004882812)"
"{""en"": ""Irkutsk"", ""ru"": ""Иркутск""}","(104.388999938959998,52.2680015563960012)","{""en"": ""Mirnyj"", ""ru"": ""Мирный""}","(114.03900146484375,62.534698486328125)"
"{""en"": ""Ulyanovsk"", ""ru"": ""Ульяновск""}","(48.8027000427246094,54.4010009765625)","{""en"": ""Saratov"", ""ru"": ""Саратов""}","(46.0466995239257812,51.5649986267089844)"
"{""en"": ""Kemorovo"", ""ru"": ""Кемерово""}","(86.1072006225585938,55.2700996398925781)","{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.9062995910644531,55.4087982177734375)"
"{""en"": ""Kaliningrad"", ""ru"": ""Калининград""}","(20.5925998687744141,54.8899993896484375)","{""en"": ""Elista"", ""ru"": ""Элиста""}","(44.3308982849121094,46.3739013671875)"
"{""en"": ""Ulan-ude"", ""ru"": ""Улан-Удэ""}","(107.438003540039062,51.80780029296875)","{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.2615013122999983,55.5914993286000012)"
"{""en"": ""Kurgan"", ""ru"": ""Курган""}","(65.4156036376953125,55.4752998352050781)","{""en"": ""Krasnoyarsk"", ""ru"": ""Красноярск""}","(92.493301391602003,56.1729011535639984)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.9062995910644531,55.4087982177734375)","{""en"": ""St. Petersburg"", ""ru"": ""Санкт-Петербург""}","(30.2625007629394531,59.8003005981445312)"
"{""en"": ""Moscow"", ""ru"": ""Москва""}","(37.9062995910644531,
Query:
SELECT
    (PARSE_JSON(DEP."city"):"en")::STRING AS "departure_city",
    (PARSE_JSON(ARR."city"):"en")::STRING AS "arrival_city"
FROM AIRLINES.AIRLINES."FLIGHTS" F
JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
    ON F."departure_airport" = DEP."airport_code"
JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
    ON F."arrival_airport" = ARR."airport_code"
LIMIT 100;
Answer:
departure_city,arrival_city
Moscow,Bratsk
Moscow,Khanty-Mansiysk
Moscow,Sochi
Moscow,Ufa
Moscow,Ulyanovsk
Moscow,Kurgan
St. Petersburg,Orenburg
Yekaterinburg,Syktyvkar
Kazan,Irkutsk
Kazan,Magnetiogorsk
Rostov,Kazan
Perm,Chelyabinsk
Yoshkar-Ola,Moscow
Syktyvkar,Nizhnekamsk
Mirnyj,Neryungri
Bugulma,Moscow
Bugulma,Orenburg
Strezhevoy,Chelyabinsk
Beloyarsky,Moscow
Tyumen,Petrozavodsk
Irkutsk,Mirnyj
Ulyanovsk,Saratov
Kemorovo,Moscow
Kaliningrad,Elista
Ulan-ude,Moscow
Kurgan,Krasnoyarsk
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Moscow,St. Petersburg
Query:
SELECT DISTINCT
    (PARSE_JSON("city"):"en")::STRING AS "city_en",
    TO_VARCHAR("timezone") AS "timezone_str"
FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
LIMIT 100
Answer:
city_en,timezone_str
Yakutsk,Asia/Yakutsk
Mirnyj,Asia/Yakutsk
Khabarovsk,Asia/Vladivostok
Petropavlovsk,Asia/Kamchatka
Yuzhno-Sakhalinsk,Asia/Sakhalin
Vladivostok,Asia/Vladivostok
St. Petersburg,Europe/Moscow
Chelyabinsk,Asia/Yekaterinburg
Perm,Asia/Yekaterinburg
Surgut,Asia/Yekaterinburg
Mineralnye Vody,Europe/Moscow
Stavropol,Europe/Moscow
Astrakhan,Europe/Samara
Samara,Europe/Samara
Tyumen,Asia/Yekaterinburg
Nizhniy Novgorod,Europe/Moscow
Tomsk,Asia/Krasnoyarsk
Norilsk,Asia/Krasnoyarsk
Arkhangelsk,Europe/Moscow
Ukhta,Europe/Moscow
Naryan-Mar,Europe/Moscow
Ivanovo,Europe/Moscow
Komsomolsk-on-Amur,Asia/Vladivostok
Anadyr,Asia/Anadyr
Novokuznetsk,Asia/Novokuznetsk
Grozny,Europe/Moscow
Salekhard,Asia/Yekaterinburg
Khanty-Mansiysk,Asia/Yekaterinburg
Izhevsk,Europe/Samara
Ulyanovsk,Europe/Samara
Tambow,Europe/Moscow
Beloyarsky,Asia/Yekaterinburg
Kaluga,Europe/Moscow
Blagoveschensk,Asia/Yakutsk
Abakan,Asia/Krasnoyarsk
Magnetiogorsk,Asia/Yekaterinburg
Syktyvkar,Europe/Moscow
Ust Ilimsk,Asia/Irkutsk
Novy Urengoy,Asia/Yekaterinburg
Petrozavodsk,Europe/Moscow
Nalchik,Europe/Moscow
Beslan,Europe/Moscow
Sovetskiy,Asia/Yekaterinburg
Nadym,Asia/Yekaterinburg
Nefteyugansk,Asia/Yekaterinburg
Lipetsk,Europe/Moscow
Cheboksary,Europe/Moscow
Yaroslavl,Europe/Moscow
Krasnodar,Europe/Moscow
Kazan,Europe/Moscow
Kemorovo,Asia/Novokuznetsk
Nizhnevartovsk,Asia/Yekaterinburg
Voronezh,Europe/Moscow
Kyzyl,Asia/Krasnoyarsk
Elista,Europe/Moscow
Nyagan,Asia/Yekaterinburg
Kurgan,Asia/Yekaterinburg
Vorkuta,Europe/Moscow
Orsk,Asia/Yekaterinburg
Gelendzhik,Europe/Moscow
Makhachkala,Europe/Moscow
Orenburg,Asia/Yekaterinburg
Novosibirsk,Asia/Novosibirsk
Kaliningrad,Europe/Kaliningrad
Yekaterinburg,Asia/Yekaterinburg
Noyabrsk,Asia/Yekaterinburg
Usinsk,Europe/Moscow
Pskov,Europe/Moscow
Krasnoyarsk,Asia/Krasnoyarsk
Uraj,Asia/Yekaterinburg
Kirov,Europe/Moscow
Bugulma,Europe/Moscow
Yoshkar-Ola,Europe/Moscow
Saransk,Europe/Moscow
Ust-Kut,Asia/Irkutsk
Nizhnekamsk,Europe/Moscow
Gorno-Altaysk,Asia/Krasnoyarsk
Cherepovets,Europe/Moscow
Omsk,Asia/Omsk
Rostov,Europe/Moscow
Volgograd,Europe/Volgograd
Magadan,Asia/Magadan
Irkutsk,Asia/Irkutsk
Ulan-ude,Asia/Irkutsk
Anapa,Europe/Moscow
Neryungri,Asia/Yakutsk
Saratov,Europe/Volgograd
Belgorod,Europe/Moscow
Kursk,Europe/Moscow
Penza,Europe/Moscow
Chita,Asia/Chita
Bratsk,Asia/Irkutsk
Murmansk,Europe/Moscow
Kogalym,Asia/Yekaterinburg
Bryansk,Europe/Moscow
Moscow,Europe/Moscow
Strezhevoy,Asia/Krasnoyarsk
Ufa,Asia/Yekaterinburg
Sochi,Europe/Moscow
Barnaul,Asia/Krasnoyarsk
Query:
SELECT DISTINCT
    (PARSE_JSON("city")['en'])::STRING AS "city_en",
    "timezone"
FROM AIRLINES.AIRLINES."AIRPORTS_DATA"
LIMIT 100;
Answer:
city_en,timezone
Yakutsk,Asia/Yakutsk
Mirnyj,Asia/Yakutsk
Khabarovsk,Asia/Vladivostok
Petropavlovsk,Asia/Kamchatka
Yuzhno-Sakhalinsk,Asia/Sakhalin
Vladivostok,Asia/Vladivostok
St. Petersburg,Europe/Moscow
Chelyabinsk,Asia/Yekaterinburg
Perm,Asia/Yekaterinburg
Surgut,Asia/Yekaterinburg
Mineralnye Vody,Europe/Moscow
Stavropol,Europe/Moscow
Astrakhan,Europe/Samara
Samara,Europe/Samara
Tyumen,Asia/Yekaterinburg
Nizhniy Novgorod,Europe/Moscow
Tomsk,Asia/Krasnoyarsk
Norilsk,Asia/Krasnoyarsk
Arkhangelsk,Europe/Moscow
Ukhta,Europe/Moscow
Naryan-Mar,Europe/Moscow
Ivanovo,Europe/Moscow
Komsomolsk-on-Amur,Asia/Vladivostok
Anadyr,Asia/Anadyr
Novokuznetsk,Asia/Novokuznetsk
Grozny,Europe/Moscow
Salekhard,Asia/Yekaterinburg
Khanty-Mansiysk,Asia/Yekaterinburg
Izhevsk,Europe/Samara
Ulyanovsk,Europe/Samara
Tambow,Europe/Moscow
Beloyarsky,Asia/Yekaterinburg
Kaluga,Europe/Moscow
Blagoveschensk,Asia/Yakutsk
Abakan,Asia/Krasnoyarsk
Magnetiogorsk,Asia/Yekaterinburg
Syktyvkar,Europe/Moscow
Ust Ilimsk,Asia/Irkutsk
Novy Urengoy,Asia/Yekaterinburg
Petrozavodsk,Europe/Moscow
Nalchik,Europe/Moscow
Beslan,Europe/Moscow
Sovetskiy,Asia/Yekaterinburg
Nadym,Asia/Yekaterinburg
Nefteyugansk,Asia/Yekaterinburg
Lipetsk,Europe/Moscow
Cheboksary,Europe/Moscow
Yaroslavl,Europe/Moscow
Krasnodar,Europe/Moscow
Kazan,Europe/Moscow
Kemorovo,Asia/Novokuznetsk
Nizhnevartovsk,Asia/Yekaterinburg
Voronezh,Europe/Moscow
Kyzyl,Asia/Krasnoyarsk
Elista,Europe/Moscow
Nyagan,Asia/Yekaterinburg
Kurgan,Asia/Yekaterinburg
Vorkuta,Europe/Moscow
Orsk,Asia/Yekaterinburg
Gelendzhik,Europe/Moscow
Makhachkala,Europe/Moscow
Orenburg,Asia/Yekaterinburg
Novosibirsk,Asia/Novosibirsk
Kaliningrad,Europe/Kaliningrad
Yekaterinburg,Asia/Yekaterinburg
Noyabrsk,Asia/Yekaterinburg
Usinsk,Europe/Moscow
Pskov,Europe/Moscow
Krasnoyarsk,Asia/Krasnoyarsk
Uraj,Asia/Yekaterinburg
Kirov,Europe/Moscow
Bugulma,Europe/Moscow
Yoshkar-Ola,Europe/Moscow
Saransk,Europe/Moscow
Ust-Kut,Asia/Irkutsk
Nizhnekamsk,Europe/Moscow
Gorno-Altaysk,Asia/Krasnoyarsk
Cherepovets,Europe/Moscow
Omsk,Asia/Omsk
Rostov,Europe/Moscow
Volgograd,Europe/Volgograd
Magadan,Asia/Magadan
Irkutsk,Asia/Irkutsk
Ulan-ude,Asia/Irkutsk
Anapa,Europe/Moscow
Neryungri,Asia/Yakutsk
Saratov,Europe/Volgograd
Belgorod,Europe/Moscow
Kursk,Europe/Moscow
Penza,Europe/Moscow
Chita,Asia/Chita
Bratsk,Asia/Irkutsk
Murmansk,Europe/Moscow
Kogalym,Asia/Yekaterinburg
Bryansk,Europe/Moscow
Moscow,Europe/Moscow
Strezhevoy,Asia/Krasnoyarsk
Ufa,Asia/Yekaterinburg
Sochi,Europe/Moscow
Barnaul,Asia/Krasnoyarsk
Query:
SELECT
    "aircraft_code",
    (PARSE_JSON("model")['en'])::STRING AS "model_en",
    "range"
FROM AIRLINES.AIRLINES."AIRCRAFTS_DATA"
ORDER BY "range" DESC
LIMIT 100
Answer:
aircraft_code,model_en,range
773,Boeing 777-300,11100
763,Boeing 767-300,7900
319,Airbus A319-100,6700
320,Airbus A320-200,5700
321,Airbus A321-200,5600
733,Boeing 737-300,4200
SU9,Sukhoi Superjet-100,3000
CR2,Bombardier CRJ-200,2700
CN1,Cessna 208 Caravan,1200
Query:
SELECT "flight_no", "scheduled_departure", "status"
FROM AIRLINES.AIRLINES."FLIGHTS"
WHERE UPPER(TRIM("status")) = 'CANCELLED'
LIMIT 100
Answer:
flight_no,scheduled_departure,status
PG0059,2017-09-14 12:25:00+03,Cancelled
PG0416,2017-09-14 19:20:00+03,Cancelled
PG0054,2017-08-12 17:05:00+03,Cancelled
PG0045,2017-09-14 11:45:00+03,Cancelled
PG0341,2017-09-14 10:50:00+03,Cancelled
PG0368,2017-09-14 15:35:00+03,Cancelled
PG0335,2017-09-14 09:30:00+03,Cancelled
PG0136,2017-09-14 15:30:00+03,Cancelled
PG0134,2017-09-14 09:50:00+03,Cancelled
PG0005,2017-09-12 15:40:00+03,Cancelled
PG0168,2017-09-14 20:05:00+03,Cancelled
PG0144,2017-09-14 17:45:00+03,Cancelled
PG0164,2017-09-14 15:25:00+03,Cancelled
PG0509,2017-09-14 09:15:00+03,Cancelled
PG0124,2017-09-14 11:30:00+03,Cancelled
PG0112,2017-09-14 11:30:00+03,Cancelled
PG0289,2017-09-14 17:25:00+03,Cancelled
PG0019,2017-09-14 18:10:00+03,Cancelled
PG0075,2017-09-11 10:55:00+03,Cancelled
PG0072,2017-09-14 09:55:00+03,Cancelled
PG0605,2017-09-14 18:40:00+03,Cancelled
PG0657,2017-09-14 16:15:00+03,Cancelled
PG0142,2017-09-14 13:00:00+03,Cancelled
PG0607,2017-09-14 16:15:00+03,Cancelled
PG0030,2017-09-14 11:55:00+03,Cancelled
PG0085,2017-09-13 13:05:00+03,Cancelled
PG0593,2017-09-14 15:50:00+03,Cancelled
PG0196,2017-09-14 12:10:00+03,Cancelled
PG0454,2017-09-14 10:05:00+03,Cancelled
PG0384,2017-09-14 12:10:00+03,Cancelled
PG0118,2017-09-14 19:55:00+03,Cancelled
PG0370,2017-09-14 11:50:00+03,Cancelled
PG0229,2017-09-14 11:50:00+03,Cancelled
PG0396,2017-09-14 16:20:00+03,Cancelled
PG0414,2017-09-14 09:05:00+03,Cancelled
PG0050,2017-09-14 14:20:00+03,Cancelled
PG0008,2017-09-14 11:45:00+03,Cancelled
PG0025,2017-09-10 13:30:00+03,Cancelled
PG0126,2017-09-14 10:55:00+03,Cancelled
PG0052,2017-09-14 14:50:00+03,Cancelled
PG0099,2017-09-11 13:45:00+03,Cancelled
PG0442,2017-09-13 15:45:00+03,Cancelled
PG0049,2017-09-12 13:05:00+03,Cancelled
PG0138,2017-09-14 10:15:00+03,Cancelled
PG0347,2017-09-14 12:45:00+03,Cancelled
PG0176,2017-09-14 14:50:00+03,Cancelled
PG0448,2017-09-14 18:30:00+03,Cancelled
PG0515,2017-09-14 14:00:00+03,Cancelled
PG0235,2017-09-14 19:50:00+03,Cancelled
PG0669,2017-09-14 16:15:00+03,Cancelled
PG0146,2017-09-14 12:30:00+03,Cancelled
PG0358,2017-09-14 12:05:00+03,Cancelled
PG0277,2017-09-14 11:45:00+03,Cancelled
PG0503,2017-09-14 13:55:00+03,Cancelled
PG0152,2017-09-14 17:45:00+03,Cancelled
PG0457,2017-09-14 11:10:00+03,Cancelled
PG0496,2017-09-14 12:45:00+03,Cancelled
PG0703,2017-09-14 17:15:00+03,Cancelled
PG0299,2017-09-14 13:00:00+03,Cancelled
PG0093,2017-09-12 09:40:00+03,Cancelled
PG0679,2017-09-14 11:30:00+03,Cancelled
PG0643,2017-09-10 13:45:00+03,Cancelled
PG0089,2017-09-14 16:40:00+03,Cancelled
PG0041,2017-09-14 09:50:00+03,Cancelled
PG0015,2017-09-13 12:40:00+03,Cancelled
PG0261,2017-09-14 12:55:00+03,Cancelled
PG0043,2017-09-14 14:40:00+03,Cancelled
PG0452,2017-09-13 12:35:00+03,Cancelled
PG0283,2017-09-14 13:25:00+03,Cancelled
PG0677,2017-09-14 09:40:00+03,Cancelled
PG0591,2017-09-14 09:00:00+03,Cancelled
PG0663,2017-09-12 12:30:00+03,Cancelled
PG0128,2017-09-14 11:00:00+03,Cancelled
PG0066,2017-09-14 12:15:00+03,Cancelled
PG0160,2017-09-14 11:25:00+03,Cancelled
PG0667,2017-09-14 15:00:00+03,Cancelled
PG0549,2017-09-14 11:55:00+03,Cancelled
PG0062,2017-09-14 14:40:00+03,Cancelled
PG0243,2017-09-14 20:55:00+03,Cancelled
PG0439,2017-09-14 12:55:00+03,Cancelled
PG0156,2017-09-14 14:55:00+03,Cancelled
PG0114,2017-09-13 14:20:00+03,Cancelled
PG0245,2017-09-10 20:50:00+03,Cancelled
PG0339,2017-09-11 09:10:00+03,Cancelled
PG0685,2017-09-14 15:15:00+03,Cancelled
PG0271,2017-09-13 16:50:00+03,Cancelled
PG0188,2017-09-14 11:15:00+03,Cancelled
PG0198,2017-09-14 09:10:00+03,Cancelled
PG0436,2017-09-14 10:55:00+03,Cancelled
PG0360,2017-09-14 09:00:00+03,Cancelled
PG0285,2017-09-14 10:50:00+03,Cancelled
PG0410,2017-09-14 13:15:00+03,Cancelled
PG0078,2017-09-14 18:25:00+03,Cancelled
PG0205,2017-09-14 13:30:00+03,Cancelled
PG0186,2017-09-14 13:50:00+03,Cancelled
PG0584,2017-09-14 07:45:00+03,Cancelled
PG0390,2017-09-14 07:10:00+03,Cancelled
PG0083,2017-09-11 06:15:00+03,Cancelled
PG0376,2017-09-14 10:05:00+03,Cancelled
PG0574,2017-08-26 11:45:00+03,Cancelled
End Exploring Related Columns
Task: Distribute all the unique city pairs into the distance ranges 0, 1000, 2000, 3000, 4000, 5000, and 6000+, based on their average distance of all routes between them. Then how many pairs are there in the distance range with the fewest unique city paires?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
Number_of_Pairs_in_Smallest_Range
num:int
(Attention: answer in one row)
```

Since we are tasked with finding the number of unique city pairs in the distance range with the fewest pairs, and exact values cannot be determined without the actual data, the result is represented as `num:int`..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'AIRLINES': {'AIRLINES': ['AIRCRAFTS_DATA', 'AIRPORTS_DATA', 'BOARDING_PASSES', 'BOOKINGS', 'FLIGHTS', 'SEATS', 'TICKETS', 'TICKET_FLIGHTS']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-26 16:32:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:32:39 - root - INFO - ```sql
WITH FlightDistances AS (
  SELECT
    LEAST(
      (PARSE_JSON(DEP."city"):"en")::STRING,
      (PARSE_JSON(ARR."city"):"en")::STRING
    ) AS "city1",
    GREATEST(
      (PARSE_JSON(DEP."city"):"en")::STRING,
      (PARSE_JSON(ARR."city"):"en")::STRING
    ) AS "city2",
    CAST(TRIM(SPLIT(TRIM(DEP."coordinates", '()'), ',')[1]) AS FLOAT) * PI() / 180 AS dep_lat_rad,
    CAST(TRIM(SPLIT(TRIM(DEP."coordinates", '()'), ',')[0]) AS FLOAT) * PI() / 180 AS dep_long_rad,
    CAST(TRIM(SPLIT(TRIM(ARR."coordinates", '()'), ',')[1]) AS FLOAT) * PI() / 180 AS arr_lat_rad,
    CAST(TRIM(SPLIT(TRIM(ARR."coordinates", '()'), ',')[0]) AS FLOAT) * PI() / 180 AS arr_long_rad
  FROM AIRLINES.AIRLINES."FLIGHTS" F
  JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
    ON F."departure_airport" = DEP."airport_code"
  JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
    ON F."arrival_airport" = ARR."airport_code"
  WHERE DEP."coordinates" IS NOT NULL AND ARR."coordinates" IS NOT NULL
),
Distances AS (
  SELECT
    "city1",
    "city2",
    2 * ASIN(SQRT(
      POWER(SIN(("arr_lat_rad" - "dep_lat_rad") / 2), 2) +
      COS("dep_lat_rad") * COS("arr_lat_rad") *
      POWER(SIN(("arr_long_rad" - "dep_long_rad") / 2), 2)
    )) * 6371 AS distance_km
  FROM FlightDistances
),
AverageDistances AS (
  SELECT
    "city1",
    "city2",
    AVG(distance_km) AS avg_distance_km
  FROM Distances
  GROUP BY
    "city1",
    "city2"
),
DistanceRanges AS (
  SELECT
    "city1",
    "city2",
    avg_distance_km,
    CASE
      WHEN avg_distance_km < 1000 THEN '0-999 km'
      WHEN avg_distance_km < 2000 THEN '1000-1999 km'
      WHEN avg_distance_km < 3000 THEN '2000-2999 km'
      WHEN avg_distance_km < 4000 THEN '3000-3999 km'
      WHEN avg_distance_km < 5000 THEN '4000-4999 km'
      WHEN avg_distance_km < 6000 THEN '5000-5999 km'
      ELSE '6000 km and above'
    END AS distance_range
  FROM AverageDistances
),
RangeCounts AS (
  SELECT
    distance_range,
    COUNT(*) AS num
  FROM DistanceRanges
  GROUP BY distance_range
),
MinRange AS (
  SELECT
    MIN(num) AS num
  FROM RangeCounts
)
SELECT
  num AS "Number_of_Pairs_in_Smallest_Range"
FROM MinRange;
```
2025-01-26 16:32:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:32:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:32:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:32:40 - snowflake.connector.connection - INFO - closed
2025-01-26 16:32:40 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:32:41 - root - INFO - itercount: 1
2025-01-26 16:32:41 - root - INFO - 000904 (42000): 01b9f920-0004-7d15-0001-11c300fb7eb2: SQL compilation error: error line 27 at position 17
invalid identifier '"arr_lat_rad"'
2025-01-26 16:32:41 - root - INFO - Input sql:
WITH FlightDistances AS (
  SELECT
    LEAST(
      (PARSE_JSON(DEP."city"):"en")::STRING,
      (PARSE_JSON(ARR."city"):"en")::STRING
    ) AS "city1",
    GREATEST(
      (PARSE_JSON(DEP."city"):"en")::STRING,
      (PARSE_JSON(ARR."city"):"en")::STRING
    ) AS "city2",
    CAST(TRIM(SPLIT(TRIM(DEP."coordinates", '()'), ',')[1]) AS FLOAT) * PI() / 180 AS dep_lat_rad,
    CAST(TRIM(SPLIT(TRIM(DEP."coordinates", '()'), ',')[0]) AS FLOAT) * PI() / 180 AS dep_long_rad,
    CAST(TRIM(SPLIT(TRIM(ARR."coordinates", '()'), ',')[1]) AS FLOAT) * PI() / 180 AS arr_lat_rad,
    CAST(TRIM(SPLIT(TRIM(ARR."coordinates", '()'), ',')[0]) AS FLOAT) * PI() / 180 AS arr_long_rad
  FROM AIRLINES.AIRLINES."FLIGHTS" F
  JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
    ON F."departure_airport" = DEP."airport_code"
  JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
    ON F."arrival_airport" = ARR."airport_code"
  WHERE DEP."coordinates" IS NOT NULL AND ARR."coordinates" IS NOT NULL
),
Distances AS (
  SELECT
    "city1",
    "city2",
    2 * ASIN(SQRT(
      POWER(SIN(("arr_lat_rad" - "dep_lat_rad") / 2), 2) +
      COS("dep_lat_rad") * COS("arr_lat_rad") *
      POWER(SIN(("arr_long_rad" - "dep_long_rad") / 2), 2)
    )) * 6371 AS distance_km
  FROM FlightDistances
),
AverageDistances AS (
  SELECT
    "city1",
    "city2",
    AVG(distance_km) AS avg_distance_km
  FROM Distances
  GROUP BY
    "city1",
    "city2"
),
DistanceRanges AS (
  SELECT
    "city1",
    "city2",
    avg_distance_km,
    CASE
      WHEN avg_distance_km < 1000 THEN '0-999 km'
      WHEN avg_distance_km < 2000 THEN '1000-1999 km'
      WHEN avg_distance_km < 3000 THEN '2000-2999 km'
      WHEN avg_distance_km < 4000 THEN '3000-3999 km'
      WHEN avg_distance_km < 5000 THEN '4000-4999 km'
      WHEN avg_distance_km < 6000 THEN '5000-5999 km'
      ELSE '6000 km and above'
    END AS distance_range
  FROM AverageDistances
),
RangeCounts AS (
  SELECT
    distance_range,
    COUNT(*) AS num
  FROM DistanceRanges
  GROUP BY distance_range
),
MinRange AS (
  SELECT
    MIN(num) AS num
  FROM RangeCounts
)
SELECT
  num AS "Number_of_Pairs_in_Smallest_Range"
FROM MinRange;
The error information is:
000904 (42000): 01b9f920-0004-7d15-0001-11c300fb7eb2: SQL compilation error: error line 27 at position 17
invalid identifier '"arr_lat_rad"'
Please correct it and output only 1 complete SQL query.When calculating distances between two geometries, use `ST_MakePoint(x, y)` to make a point and `ST_Distance(geometry1 GEOMETRY, geometry2 GEOMETRY)` to compute. No need to convert from meters to miles unless requested. Don't use Haversine like 2 * 6371000 * ASIN(...), use ST_DISTANCE for more precise results.

2025-01-26 16:33:43 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:33:43 - root - INFO - ```sql
WITH FlightDistances AS (
  SELECT
    LEAST(
      (PARSE_JSON(DEP."city"):"en")::STRING,
      (PARSE_JSON(ARR."city"):"en")::STRING
    ) AS "city1",
    GREATEST(
      (PARSE_JSON(DEP."city"):"en")::STRING,
      (PARSE_JSON(ARR."city"):"en")::STRING
    ) AS "city2",
    ST_POINT(
      CAST(TRIM(SPLIT(TRIM(DEP."coordinates", '()'), ',')[0]) AS FLOAT),
      CAST(TRIM(SPLIT(TRIM(DEP."coordinates", '()'), ',')[1]) AS FLOAT)
    ) AS "dep_point",
    ST_POINT(
      CAST(TRIM(SPLIT(TRIM(ARR."coordinates", '()'), ',')[0]) AS FLOAT),
      CAST(TRIM(SPLIT(TRIM(ARR."coordinates", '()'), ',')[1]) AS FLOAT)
    ) AS "arr_point"
  FROM AIRLINES.AIRLINES."FLIGHTS" F
  JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
    ON F."departure_airport" = DEP."airport_code"
  JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
    ON F."arrival_airport" = ARR."airport_code"
  WHERE DEP."coordinates" IS NOT NULL AND ARR."coordinates" IS NOT NULL
),
Distances AS (
  SELECT
    "city1",
    "city2",
    ST_DISTANCE("dep_point", "arr_point") / 1000 AS "distance_km"  -- Convert meters to kilometers
  FROM FlightDistances
),
AverageDistances AS (
  SELECT
    "city1",
    "city2",
    AVG("distance_km") AS "avg_distance_km"
  FROM Distances
  GROUP BY
    "city1",
    "city2"
),
DistanceRanges AS (
  SELECT
    "city1",
    "city2",
    "avg_distance_km",
    CASE
      WHEN "avg_distance_km" < 1000 THEN '0-999 km'
      WHEN "avg_distance_km" < 2000 THEN '1000-1999 km'
      WHEN "avg_distance_km" < 3000 THEN '2000-2999 km'
      WHEN "avg_distance_km" < 4000 THEN '3000-3999 km'
      WHEN "avg_distance_km" < 5000 THEN '4000-4999 km'
      WHEN "avg_distance_km" < 6000 THEN '5000-5999 km'
      ELSE '6000 km and above'
    END AS "distance_range"
  FROM AverageDistances
),
RangeCounts AS (
  SELECT
    "distance_range",
    COUNT(*) AS "num"
  FROM DistanceRanges
  GROUP BY "distance_range"
),
MinRange AS (
  SELECT
    MIN("num") AS "num"
  FROM RangeCounts
)
SELECT
  "num" AS "Number_of_Pairs_in_Smallest_Range"
FROM MinRange;
```
2025-01-26 16:33:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:33:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:33:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:33:46 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-26 16:33:46 - snowflake.connector.connection - INFO - closed
2025-01-26 16:33:46 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:33:46 - root - INFO - itercount: 2
2025-01-26 16:33:46 - root - INFO - 0
2025-01-26 16:33:46 - root - INFO - results: 
Number_of_Pairs_in_Smallest_Range
3


2025-01-26 16:33:46 - root - INFO - Please check the answer again by reviewing Distribute all the unique city pairs into the distance ranges 0, 1000, 2000, 3000, 4000, 5000, and 6000+, based on their average distance of all routes between them. Then how many pairs are there in the distance range with the fewest unique city paires?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
Number_of_Pairs_in_Smallest_Range
num:int
(Attention: answer in one row)
```

Since we are tasked with finding the number of unique city pairs in the distance range with the fewest pairs, and exact values cannot be determined without the actual data, the result is represented as `num:int`. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Number_of_Pairs_in_Smallest_Range
3
Current sql:
WITH FlightDistances AS (
  SELECT
    LEAST(
      (PARSE_JSON(DEP."city"):"en")::STRING,
      (PARSE_JSON(ARR."city"):"en")::STRING
    ) AS "city1",
    GREATEST(
      (PARSE_JSON(DEP."city"):"en")::STRING,
      (PARSE_JSON(ARR."city"):"en")::STRING
    ) AS "city2",
    ST_POINT(
      CAST(TRIM(SPLIT(TRIM(DEP."coordinates", '()'), ',')[0]) AS FLOAT),
      CAST(TRIM(SPLIT(TRIM(DEP."coordinates", '()'), ',')[1]) AS FLOAT)
    ) AS "dep_point",
    ST_POINT(
      CAST(TRIM(SPLIT(TRIM(ARR."coordinates", '()'), ',')[0]) AS FLOAT),
      CAST(TRIM(SPLIT(TRIM(ARR."coordinates", '()'), ',')[1]) AS FLOAT)
    ) AS "arr_point"
  FROM AIRLINES.AIRLINES."FLIGHTS" F
  JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
    ON F."departure_airport" = DEP."airport_code"
  JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
    ON F."arrival_airport" = ARR."airport_code"
  WHERE DEP."coordinates" IS NOT NULL AND ARR."coordinates" IS NOT NULL
),
Distances AS (
  SELECT
    "city1",
    "city2",
    ST_DISTANCE("dep_point", "arr_point") / 1000 AS "distance_km"  -- Convert meters to kilometers
  FROM FlightDistances
),
AverageDistances AS (
  SELECT
    "city1",
    "city2",
    AVG("distance_km") AS "avg_distance_km"
  FROM Distances
  GROUP BY
    "city1",
    "city2"
),
DistanceRanges AS (
  SELECT
    "city1",
    "city2",
    "avg_distance_km",
    CASE
      WHEN "avg_distance_km" < 1000 THEN '0-999 km'
      WHEN "avg_distance_km" < 2000 THEN '1000-1999 km'
      WHEN "avg_distance_km" < 3000 THEN '2000-2999 km'
      WHEN "avg_distance_km" < 4000 THEN '3000-3999 km'
      WHEN "avg_distance_km" < 5000 THEN '4000-4999 km'
      WHEN "avg_distance_km" < 6000 THEN '5000-5999 km'
      ELSE '6000 km and above'
    END AS "distance_range"
  FROM AverageDistances
),
RangeCounts AS (
  SELECT
    "distance_range",
    COUNT(*) AS "num"
  FROM DistanceRanges
  GROUP BY "distance_range"
),
MinRange AS (
  SELECT
    MIN("num") AS "num"
  FROM RangeCounts
)
SELECT
  "num" AS "Number_of_Pairs_in_Smallest_Range"
FROM MinRange;
2025-01-26 16:34:42 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-26 16:34:42 - root - INFO - ```sql
WITH FlightDistances AS (
  SELECT
    LEAST(
      (PARSE_JSON(DEP."city"):"en")::STRING,
      (PARSE_JSON(ARR."city"):"en")::STRING
    ) AS "city1",
    GREATEST(
      (PARSE_JSON(DEP."city"):"en")::STRING,
      (PARSE_JSON(ARR."city"):"en")::STRING
    ) AS "city2",
    ST_POINT(
      CAST(TRIM(SPLIT(TRIM(DEP."coordinates", '()'), ',')[0]) AS FLOAT),
      CAST(TRIM(SPLIT(TRIM(DEP."coordinates", '()'), ',')[1]) AS FLOAT)
    ) AS "dep_point",
    ST_POINT(
      CAST(TRIM(SPLIT(TRIM(ARR."coordinates", '()'), ',')[0]) AS FLOAT),
      CAST(TRIM(SPLIT(TRIM(ARR."coordinates", '()'), ',')[1]) AS FLOAT)
    ) AS "arr_point"
  FROM AIRLINES.AIRLINES."FLIGHTS" F
  JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" DEP
    ON F."departure_airport" = DEP."airport_code"
  JOIN AIRLINES.AIRLINES."AIRPORTS_DATA" ARR
    ON F."arrival_airport" = ARR."airport_code"
  WHERE DEP."coordinates" IS NOT NULL AND ARR."coordinates" IS NOT NULL
),
Distances AS (
  SELECT
    "city1",
    "city2",
    ROUND(ST_DISTANCE("dep_point", "arr_point") / 1000, 4) AS "distance_km"
  FROM FlightDistances
),
AverageDistances AS (
  SELECT
    "city1",
    "city2",
    ROUND(AVG("distance_km"), 4) AS "avg_distance_km"
  FROM Distances
  GROUP BY
    "city1",
    "city2"
),
DistanceRanges AS (
  SELECT
    "city1",
    "city2",
    "avg_distance_km",
    CASE
      WHEN "avg_distance_km" < 1000 THEN '0-999 km'
      WHEN "avg_distance_km" < 2000 THEN '1000-1999 km'
      WHEN "avg_distance_km" < 3000 THEN '2000-2999 km'
      WHEN "avg_distance_km" < 4000 THEN '3000-3999 km'
      WHEN "avg_distance_km" < 5000 THEN '4000-4999 km'
      WHEN "avg_distance_km" < 6000 THEN '5000-5999 km'
      ELSE '6000 km and above'
    END AS "distance_range"
  FROM AverageDistances
),
RangeCounts AS (
  SELECT
    "distance_range",
    COUNT(*) AS "num"
  FROM DistanceRanges
  GROUP BY "distance_range"
),
MinRange AS (
  SELECT
    MIN("num") AS "num"
  FROM RangeCounts
)
SELECT
  "num" AS "Number_of_Pairs_in_Smallest_Range"
FROM MinRange;
```
2025-01-26 16:34:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-26 16:34:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-26 16:34:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-26 16:34:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-26 16:34:44 - snowflake.connector.connection - INFO - closed
2025-01-26 16:34:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-26 16:34:44 - root - INFO - itercount: 3
2025-01-26 16:34:44 - root - INFO - 0
2025-01-26 16:34:44 - root - INFO - Total iteration counts: 3
