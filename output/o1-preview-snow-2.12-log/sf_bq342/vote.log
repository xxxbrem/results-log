After reviewing the SQL queries and their results, **Candidate 1's SQL query (`1result.sql`)** appears to correctly implement the required calculations as per your task.

**Reasoning:**

- **Accurate Year and Hour Extraction:** Candidate 1's SQL correctly extracts the year and hour from the `block_timestamp`, dividing by `1e6` to account for the microsecond format.

- **Proper Grouping and Partitioning:** It groups the transaction values by both year and hour, and partitions the window function (`LAG`) by year. This ensures that hourly changes are calculated within each year separately, which is crucial for an accurate year-over-year comparison.

- **Calculation of Hourly Changes:** The query calculates the hourly change by subtracting the previous hour's total transaction value from the current hour's total within the same year.

- **Average of Absolute Hourly Changes:** It computes the average of the absolute values of these hourly changes per year, which aligns with the task's requirement to calculate "average hourly changes".

- **Difference Between Years:** The final selection computes the difference between the average hourly changes of 2020 and 2019, providing a signed value that indicates whether the average hourly change increased or decreased.

- **Logical Results:** The resulting difference (`8130644453518.101`) is within a reasonable range when considering the scale of Ethereum transactions and the given data. Candidate 2's result is significantly smaller, and Candidate 0's result uses an absolute difference, which may not reflect whether there's an increase or decrease.

- **Candidate 2's Flaws:** Candidate 2 doesn't partition the `LAG` function by year, causing hourly changes to be calculated across years, which may lead to incorrect results.

Therefore, **Candidate 1's SQL query** accurately captures the calculations needed to determine the difference in average hourly changes between 2019 and 2020.

The SQL file you should use is:

```plaintext
1result.sql
```