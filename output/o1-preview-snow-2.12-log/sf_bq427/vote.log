After analyzing the three candidate SQL queries and their results, **Candidate 2 (`2result.sql`)** is the correct one.

**Reasoning:**

- **Adjusted Coordinates:**
  - All three queries correctly adjust the x and y coordinates to ensure consistency regarding the left or right basket.

- **Data Filtering:**
  - All queries exclude shots with null shot types or coordinates.
  - They ensure shots are on the correct side of the court based on the team's basket.
  - They consider only shots taken before March 15, 2018.

- **Average Number of Shot Attempts and Successful Shots:**
  - **Candidate 0** calculates total shot attempts and successful shots per shot type, not the average per game.
  - **Candidate 1** attempts to compute the average number of shot attempts and successful shots per game but unnecessarily joins the per-game stats back to the original data, which can lead to incorrect averaging due to data duplication.
  - **Candidate 2** correctly calculates per-game shot attempts and successful shots for each shot type and then computes the averages over all games. This provides the accurate average number of shot attempts and successful shots per game, per shot type.

- **SQL Structure and Clarity:**
  - **Candidate 2** uses Common Table Expressions (CTEs) to break down the problem into manageable parts:
    - **`shot_data`**: Filters and adjusts the data as per requirements.
    - **`coordinate_avgs`**: Calculates average adjusted coordinates per shot type.
    - **`per_game_stats`**: Computes shot attempts and successful shots per game for each shot type.
    - **`avg_shot_stats`**: Calculates average shot attempts and successful shots across all games for each shot type.
  - This approach makes the query more readable and logically organized.

Therefore, **`2result.sql`** is the correct SQL query that fulfills all the requirements specified in the task.

```plaintext
2result.sql
```