2025-01-21 15:24:48 - openai._base_client - INFO - Retrying request to /chat/completions in 0.470903 seconds
2025-01-21 15:25:32 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 15:25:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 15:25:33 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:34 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:34 - root - INFO - SQL:
SELECT "insert_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   LIMIT 100;
Results:
insert_date
2022-01-12
2021-08-22
2021-03-11
2021-02-24
2023-05-04
2023-03-16
2023-04-25
2021-10-07
2021-09-01
2021-04-03
2023-04-08
2021-03-15
2023-05-22
2021-12-09
2021-12-01
2023-05-10
2023-05-31
2021-01-31
2021-05-03
2021-06-08
2021-04-15
2021-02-22
2022-03-17
2023-03-01
2021-12-18
2022-01-02
2022-01-20
2022-05-21
2021-03-02
2022-06-22
2021-09-28
2022-04-10
2022-06-25
2023-04-08
2022-04-08
2021-07-05
2021-12-15
2021-05-20
2021-05-02
2022-10-15
2021-11-25
2023-02-28
2023-05-04
2021-07-20
2022-06-11
2021-02-08
2021-11-25
2021-03-22
2021-09-17
2023-01-23
2023-05-18
2022-11-01
2022-08-26
2022-12-19
2021-09-05
2023-05-31
2022-10-31
2021-06-15
2022-04-12
2023-03-03
2023-04-16
2022-05-31
2022-12-18
2022-04-27
2022-05-23
2022-01-15
2022-09-20
2021-01-26
2022-09-19
2023-01-15
2023-01-01
2022-07-14
2022-01-14
2022-02-19
2023-01-24
2023-04-09
2023-03-15
2022-08-16
2022-06-20
2023-01-21
2022-01-29
2023-04-21
2021-12-17
2022-09-11
2022-09-17
2021-03-19
2021-11-13
2022-02-04
2022-09-10
2023-05-12
2022-06-05
2022-01-26
2022-02-17
2022-11-06
2021-05-18
2023-03-26
2022-06-24
2022-01-13
2022-07-29
2023-04-21

2025-01-21 15:25:34 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:34 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:34 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:35 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 15:25:35 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:36 - root - INFO - SQL:
SELECT DISTINCT "insert_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   LIMIT 100;
Results:
insert_date
2022-01-12
2021-08-22
2021-03-11
2021-02-24
2023-05-04
2023-03-16
2023-04-25
2021-09-01
2021-04-03
2021-03-15
2023-05-22
2021-12-01
2023-05-31
2021-01-31
2021-05-03
2021-04-15
2023-03-01
2021-12-18
2022-01-02
2022-01-20
2021-09-28
2022-04-10
2022-06-25
2022-04-08
2023-02-28
2021-09-17
2022-12-19
2022-10-31
2023-01-15
2023-04-21
2022-11-06
2021-05-25
2021-02-28
2023-03-09
2021-09-20
2022-11-12
2023-01-25
2022-07-31
2021-03-02
2022-06-22
2021-07-05
2021-12-15
2021-02-08
2023-04-16
2022-05-31
2022-09-10
2023-05-12
2022-02-17
2021-08-06
2021-11-18
2022-05-12
2023-07-01
2021-06-04
2021-01-27
2022-01-03
2022-08-05
2023-01-01
2023-01-21
2022-02-10
2022-05-16
2022-08-08
2023-06-18
2022-03-26
2023-04-08
2021-12-09
2023-05-10
2022-03-17
2021-05-02
2021-11-25
2021-03-22
2023-01-23
2022-04-12
2022-05-23
2022-01-15
2022-09-20
2021-01-26
2022-02-19
2023-04-13
2023-04-19
2021-01-01
2022-10-29
2021-10-07
2021-06-08
2022-05-21
2022-10-15
2022-06-11
2023-05-18
2022-11-01
2021-09-05
2023-03-03
2022-12-18
2022-01-14
2023-04-09
2022-06-20
2022-09-11
2022-09-17
2021-05-18
2022-07-29
2023-03-07
2021-11-01

2025-01-21 15:25:36 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:36 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:36 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:37 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-21 15:25:37 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:37 - root - INFO - SQL:
SELECT DISTINCT SUBSTRING("insert_date", 1, 4) AS "year"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   LIMIT 100;
Results:
year
2022
2021
2023

2025-01-21 15:25:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:39 - snowflake.connector.cursor - INFO - Number of results in first chunk: 12
2025-01-21 15:25:39 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:39 - root - INFO - SQL:
SELECT DISTINCT SUBSTRING("insert_date", 6, 2) AS "month"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   LIMIT 100;
Results:
month
01
08
03
02
05
04
10
09
12
07
06
11

2025-01-21 15:25:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 15:25:40 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:41 - root - INFO - SQL:
SELECT "city_id", "city_name", "insert_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   WHERE SUBSTRING("insert_date", 6, 2) = '04'
   LIMIT 100;
Results:
city_id,city_name,insert_date
7,shanghai,2023-04-25
10,mexico city,2021-04-03
11,cairo,2023-04-08
21,istanbul,2021-04-15
32,lahore,2022-04-10
34,los angeles,2023-04-08
35,baoding,2022-04-08
59,hanoi,2022-04-12
61,fuyang,2023-04-16
64,bogota,2022-04-27
76,zhumadian,2023-04-09
82,zunyi,2023-04-21
100,douala,2023-04-21
116,philadelphia,2023-04-13
123,suihua,2023-04-19
163,kunming,2023-04-28
169,meizhou,2021-04-26
184,xiaoxita,2021-04-09
216,jiaozuo,2021-04-01
221,montreal,2022-04-02
229,lucknow,2022-04-13
249,santa cruz,2021-04-02
259,athens,2022-04-01
273,incheon,2022-04-27
298,manchester,2022-04-14
302,dingxi,2021-04-19
306,maracaibo,2021-04-09
308,mbujimayi,2022-04-06
326,luohe,2021-04-08
336,hamburg,2023-04-02
340,huangshi,2021-04-19
352,nagpur,2023-04-20
371,nantong,2021-04-28
383,gaoping,2023-04-30
385,harare,2022-04-06
406,baicheng,2023-04-09
427,sacramento,2022-04-24
432,thane,2023-04-30
440,port harcourt,2023-04-29
449,wuwei,2022-04-03
460,diyarbakir,2022-04-25
465,shuozhou,2023-04-27
467,benxi,2021-04-28
477,changshu,2023-04-17
485,sangereng,2022-04-02
488,novosibirsk,2022-04-19
493,stockholm,2022-04-01
505,jamshedpur,2023-04-29
546,kharkiv,2021-04-08
549,ruian,2023-04-04
556,tel avivyafo,2023-04-15
569,huangshan,2023-04-04
570,auckland,2022-04-03
577,liangshi,2021-04-27
581,al basrah,2023-04-25
584,xintai,2023-04-28
588,rongcheng,2022-04-16
589,huazhou,2021-04-10
595,jiangyin,2023-04-09
627,jacksonville,2023-04-17
629,campinas,2022-04-17
633,najafgarh,2023-04-12
641,zhangye,2023-04-23
647,mbandaka,2021-04-06
654,cilacap,2022-04-12
658,guankou,2021-04-29
665,nay pyi taw,2021-04-02
667,kigali,2022-04-07
694,tamale,2021-04-21
695,xibeijie,2021-04-14
703,bishkek,2023-04-02
707,ezhou,2022-04-28
734,bogor,2022-04-07
735,cartagena,2021-04-05
737,jodhpur,2021-04-26
741,managua,2023-04-28
742,sanya,2022-04-13
743,shymkent,2021-04-25
757,islamabad,2023-04-08
768,quetta,2021-04-21
776,riga,2021-04-29
779,lome,2021-04-01
794,san salvador,2021-04-13
796,asuncion,2023-04-11
803,manama,2023-04-18
846,moroni,2021-04-26
848,mbabane,2023-04-09
883,lobamba,2021-04-01
893,alofi,2022-04-21
894,basseterre,2021-04-24
897,brades,2022-04-04
902,the valley,2023-04-16
906,flying fish cove,2023-04-06
915,chiba,2022-04-17
918,luocheng,2023-04-16
923,nada,2023-04-23
937,songnam,2022-04-29
942,kermanshah,2023-04-12
943,krasnodar,2023-04-22
952,khartoum north,2023-04-08

2025-01-21 15:25:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:42 - snowflake.connector.cursor - INFO - Number of results in first chunk: 32
2025-01-21 15:25:42 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:42 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:43 - root - INFO - SQL:
SELECT SUBSTRING("insert_date", 1, 7) AS "year_month", COUNT(*) AS "city_count"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   GROUP BY "year_month"
   ORDER BY "year_month"
   LIMIT 100;
Results:
year_month,city_count
2021-01,1471
2021-02,1291
2021-03,1485
2021-04,1508
2021-05,1509
2021-06,1395
2021-07,1394
2021-08,1481
2021-09,1452
2021-10,1446
2021-11,1378
2021-12,1472
2022-01,1507
2022-02,1351
2022-03,1451
2022-04,1437
2022-05,1459
2022-06,1411
2022-07,1429
2022-08,1453
2022-09,1478
2022-10,1473
2022-11,1501
2022-12,1482
2023-01,1532
2023-02,1281
2023-03,1386
2023-04,1402
2023-05,1389
2023-06,1432
2023-07,1435
2023-08,51

2025-01-21 15:25:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 15:25:44 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:44 - root - INFO - SQL:
SELECT "city_id", "city_name", "insert_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   WHERE SUBSTRING("insert_date", 1, 4) IN ('2021', '2022', '2023')
     AND SUBSTRING("insert_date", 6, 2) IN ('04', '05', '06')
   LIMIT 100;
Results:
city_id,city_name,insert_date
5,mumbai,2023-05-04
7,shanghai,2023-04-25
10,mexico city,2021-04-03
11,cairo,2023-04-08
13,dhaka,2023-05-22
16,bangkok,2023-05-10
17,shenzhen,2023-05-31
19,buenos aires,2021-05-03
20,lagos,2021-06-08
21,istanbul,2021-04-15
28,kinshasa,2022-05-21
30,chennai,2022-06-22
32,lahore,2022-04-10
33,chongqing,2022-06-25
34,los angeles,2023-04-08
35,baoding,2022-04-08
38,linyi,2021-05-20
39,dongguan,2021-05-02
43,wuhan,2023-05-04
45,hangzhou,2022-06-11
51,zhoukou,2023-05-18
56,chicago,2023-05-31
58,jining,2021-06-15
59,hanoi,2022-04-12
61,fuyang,2023-04-16
62,ahmedabad,2022-05-31
64,bogota,2022-04-27
65,dar es salaam,2022-05-23
76,zhumadian,2023-04-09
79,chattogram,2022-06-20
82,zunyi,2023-04-21
90,baghdad,2023-05-12
91,qujing,2022-06-05
95,liaocheng,2021-05-18
97,yulin,2022-06-24
100,douala,2023-04-21
114,nairobi,2023-05-20
116,philadelphia,2023-04-13
117,ankara,2022-05-12
119,dazhou,2021-05-25
121,yongzhou,2023-06-27
122,toronto,2021-05-04
123,suihua,2023-04-19
124,saint petersburg,2022-06-18
129,weinan,2023-05-24
131,zhangzhou,2021-05-12
133,xianyang,2023-05-18
146,alexandria,2023-05-02
147,mianyang,2022-05-08
148,sydney,2022-05-16
151,barcelona,2023-06-27
157,yibin,2023-05-07
162,timbio,2023-06-24
163,kunming,2023-04-28
169,meizhou,2021-04-26
173,suzhou,2023-06-08
175,linfen,2023-05-16
179,luzhou,2023-06-18
184,xiaoxita,2021-04-09
197,taiyuan,2021-06-04
201,harbin,2022-05-02
204,baojishi,2022-05-03
205,zaozhuang,2023-06-17
211,medan,2022-05-24
216,jiaozuo,2021-04-01
219,hechi,2022-06-02
221,montreal,2022-04-02
229,lucknow,2022-04-13
238,san francisco,2021-06-15
240,qincheng,2022-05-29
243,leshan,2022-06-29
245,zhenjiang,2021-06-13
246,faisalabad,2021-06-06
249,santa cruz,2021-04-02
253,heyuan,2023-05-08
259,athens,2022-04-01
260,addis ababa,2021-05-16
263,taichung,2021-05-09
265,budapest,2023-05-27
269,rizhao,2021-06-08
273,incheon,2022-04-27
274,guatemala city,2023-05-28
296,longyan,2022-06-12
298,manchester,2022-04-14
300,handan,2021-06-28
301,cawnpore,2022-05-14
302,dingxi,2021-04-19
306,maracaibo,2021-04-09
308,mbujimayi,2022-04-06
315,baoshan,2021-05-05
326,luohe,2021-04-08
330,yunfu,2023-05-04
332,yantai,2023-05-27
333,huizhou,2023-06-07
336,hamburg,2023-04-02
339,lusaka,2021-05-28
340,huangshi,2021-04-19
349,lianshan,2023-05-30
352,nagpur,2023-04-20
357,yuxi,2021-06-07

2025-01-21 15:25:44 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:44 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:44 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:46 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-21 15:25:46 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:46 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:46 - root - INFO - SQL:
SELECT SUBSTRING("insert_date", 1, 4) AS "year", COUNT(*) AS "city_count"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   GROUP BY "year"
   ORDER BY "year"
   LIMIT 100;
Results:
year,city_count
2021,17282
2022,17432
2023,9908

2025-01-21 15:25:46 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:46 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:46 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:47 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-21 15:25:47 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:48 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:48 - root - INFO - SQL:
SELECT MIN("insert_date") AS "earliest_date", MAX("insert_date") AS "latest_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES";
Results:
earliest_date,latest_date
2021-01-01,2023-08-01

2025-01-21 15:25:48 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:48 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:48 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:49 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 15:25:49 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:49 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:49 - root - INFO - SQL:
SELECT "city_id", "city_name", "insert_date"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE SUBSTRING("insert_date", 1, 4) = '2021'
    LIMIT 100;
Results:
city_id,city_name,insert_date
2,jakarta,2021-08-22
3,delhi,2021-03-11
4,guangzhou,2021-02-24
8,sao paulo,2021-10-07
9,seoul,2021-09-01
10,mexico city,2021-04-03
12,new york,2021-03-15
14,beijing,2021-12-09
15,kolkata,2021-12-01
18,moscow,2021-01-31
19,buenos aires,2021-05-03
20,lagos,2021-06-08
21,istanbul,2021-04-15
22,karachi,2021-02-22
25,osaka,2021-12-18
29,rio de janeiro,2021-03-02
31,xian,2021-09-28
36,london,2021-07-05
37,paris,2021-12-15
38,linyi,2021-05-20
39,dongguan,2021-05-02
41,tianjin,2021-11-25
44,nanyang,2021-07-20
46,foshan,2021-02-08
47,nagoya,2021-11-25
48,taipei,2021-03-22
49,tongshan,2021-09-17
55,quanzhou,2021-09-05
58,jining,2021-06-15
68,shangqiu,2021-01-26
83,surat,2021-12-17
86,maoming,2021-03-19
87,nanchong,2021-11-13
95,liaocheng,2021-05-18
101,miami,2021-09-03
104,xiangyang,2021-08-18
105,dallas,2021-08-06
106,houston,2021-11-18
107,zhengzhou,2021-11-01
119,dazhou,2021-05-25
122,toronto,2021-05-04
128,belo horizonte,2021-08-27
130,rangoon,2021-02-28
131,zhangzhou,2021-05-12
134,guilin,2021-07-17
136,taizhou,2021-02-23
139,abidjan,2021-12-05
140,suqian,2021-11-13
142,jian,2021-10-12
143,xiaoganzhan,2021-07-12
144,pingdingshan,2021-01-01
149,huanglongsi,2021-08-28
152,changsha,2021-01-14
158,yangzhou,2021-02-17
159,melbourne,2021-10-14
160,berlin,2021-03-09
169,meizhou,2021-04-26
170,zhangjiakou,2021-09-07
178,mogadishu,2021-11-17
181,boston,2021-09-20
183,zhaoqing,2021-01-17
184,xiaoxita,2021-04-09
186,ningbo,2021-10-16
187,fuzhou,2021-08-13
189,zhuzhou,2021-03-13
190,amman,2021-08-21
193,qingyuan,2021-09-09
196,deyang,2021-09-17
197,taiyuan,2021-06-04
202,abuja,2021-10-04
203,yokohama,2021-10-13
208,fuzhou,2021-12-21
209,baicheng,2021-01-27
212,yulinshi,2021-02-24
214,changzhou,2021-01-19
215,puyang,2021-08-16
216,jiaozuo,2021-04-01
217,nanchang,2021-09-07
222,busan,2021-01-08
223,hohhot,2021-08-06
224,seattle,2021-10-30
226,hanzhong,2021-07-22
227,tangshan,2021-08-31
232,boankra,2021-02-12
237,bengbu,2021-07-28
238,san francisco,2021-06-15
242,wuxi,2021-10-27
245,zhenjiang,2021-06-13
246,faisalabad,2021-06-06
247,guangan,2021-01-12
249,santa cruz,2021-04-02
250,qinhuangdao,2021-12-05
252,jinzhou,2021-09-14
258,wuzhou,2021-10-22
260,addis ababa,2021-05-16
261,chaoyang,2021-03-09
263,taichung,2021-05-09
264,kuwait city,2021-03-13
266,shaoguan,2021-02-19
269,rizhao,2021-06-08

2025-01-21 15:25:49 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:50 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:50 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:51 - snowflake.connector.cursor - INFO - Number of results in first chunk: 9
2025-01-21 15:25:51 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:51 - root - INFO - SQL:
SELECT SUBSTRING("insert_date", 1, 4) AS "year",
           SUBSTRING("insert_date", 6, 2) AS "month",
           COUNT(*) AS "city_count"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE SUBSTRING("insert_date", 6, 2) IN ('04', '05', '06')
      AND SUBSTRING("insert_date", 1, 4) IN ('2021', '2022', '2023')
    GROUP BY "year", "month"
    ORDER BY "year", "month"
    LIMIT 100;
Results:
year,month,city_count
2021,04,1508
2021,05,1509
2021,06,1395
2022,04,1437
2022,05,1459
2022,06,1411
2023,04,1402
2023,05,1389
2023,06,1432

2025-01-21 15:25:51 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:51 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:51 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:53 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 15:25:53 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:53 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:53 - root - INFO - SQL:
SELECT "city_id", "city_name", "insert_date"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE "insert_date" >= '2021-01-01'
    LIMIT 100;
Results:
city_id,city_name,insert_date
1,tokyo,2022-01-12
2,jakarta,2021-08-22
3,delhi,2021-03-11
4,guangzhou,2021-02-24
5,mumbai,2023-05-04
6,manila,2023-03-16
7,shanghai,2023-04-25
8,sao paulo,2021-10-07
9,seoul,2021-09-01
10,mexico city,2021-04-03
11,cairo,2023-04-08
12,new york,2021-03-15
13,dhaka,2023-05-22
14,beijing,2021-12-09
15,kolkata,2021-12-01
16,bangkok,2023-05-10
17,shenzhen,2023-05-31
18,moscow,2021-01-31
19,buenos aires,2021-05-03
20,lagos,2021-06-08
21,istanbul,2021-04-15
22,karachi,2021-02-22
23,bangalore,2022-03-17
24,ho chi minh city,2023-03-01
25,osaka,2021-12-18
26,chengdu,2022-01-02
27,tehran,2022-01-20
28,kinshasa,2022-05-21
29,rio de janeiro,2021-03-02
30,chennai,2022-06-22
31,xian,2021-09-28
32,lahore,2022-04-10
33,chongqing,2022-06-25
34,los angeles,2023-04-08
35,baoding,2022-04-08
36,london,2021-07-05
37,paris,2021-12-15
38,linyi,2021-05-20
39,dongguan,2021-05-02
40,hyderabad,2022-10-15
41,tianjin,2021-11-25
42,lima,2023-02-28
43,wuhan,2023-05-04
44,nanyang,2021-07-20
45,hangzhou,2022-06-11
46,foshan,2021-02-08
47,nagoya,2021-11-25
48,taipei,2021-03-22
49,tongshan,2021-09-17
50,luanda,2023-01-23
51,zhoukou,2023-05-18
52,ganzhou,2022-11-01
53,kuala lumpur,2022-08-26
54,heze,2022-12-19
55,quanzhou,2021-09-05
56,chicago,2023-05-31
57,nanjing,2022-10-31
58,jining,2021-06-15
59,hanoi,2022-04-12
60,pune,2023-03-03
61,fuyang,2023-04-16
62,ahmedabad,2022-05-31
63,johannesburg,2022-12-18
64,bogota,2022-04-27
65,dar es salaam,2022-05-23
66,shenyang,2022-01-15
67,khartoum,2022-09-20
68,shangqiu,2021-01-26
69,cangzhou,2022-09-19
70,hong kong,2023-01-15
71,shaoyang,2023-01-01
72,zhanjiang,2022-07-14
73,yancheng,2022-01-14
74,hengyang,2022-02-19
75,riyadh,2023-01-24
76,zhumadian,2023-04-09
77,santiago,2023-03-15
78,xingtai,2022-08-16
79,chattogram,2022-06-20
80,bijie,2023-01-21
81,shangrao,2022-01-29
82,zunyi,2023-04-21
83,surat,2021-12-17
84,surabaya,2022-09-11
85,huanggang,2022-09-17
86,maoming,2021-03-19
87,nanchong,2021-11-13
88,xinyang,2022-02-04
89,madrid,2022-09-10
90,baghdad,2023-05-12
91,qujing,2022-06-05
92,jieyang,2022-01-26
93,singapore,2022-02-17
94,prayagraj,2022-11-06
95,liaocheng,2021-05-18
96,dalian,2023-03-26
97,yulin,2022-06-24
98,changde,2022-01-13
99,qingdao,2022-07-29
100,douala,2023-04-21

2025-01-21 15:25:53 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:53 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:53 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:54 - snowflake.connector.cursor - INFO - Number of results in first chunk: 32
2025-01-21 15:25:54 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:55 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:55 - root - INFO - SQL:
SELECT SUBSTRING("insert_date", 1, 7) AS "year_month",
           COUNT(*) OVER (ORDER BY SUBSTRING("insert_date", 1, 7)) AS "running_total"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE SUBSTRING("insert_date", 1, 4) >= '2021'
    GROUP BY "year_month"
    ORDER BY "year_month"
    LIMIT 100;
Results:
year_month,running_total
2021-01,1
2021-02,2
2021-03,3
2021-04,4
2021-05,5
2021-06,6
2021-07,7
2021-08,8
2021-09,9
2021-10,10
2021-11,11
2021-12,12
2022-01,13
2022-02,14
2022-03,15
2022-04,16
2022-05,17
2022-06,18
2022-07,19
2022-08,20
2022-09,21
2022-10,22
2022-11,23
2022-12,24
2023-01,25
2023-02,26
2023-03,27
2023-04,28
2023-05,29
2023-06,30
2023-07,31
2023-08,32

2025-01-21 15:25:55 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:55 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:55 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:56 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-21 15:25:56 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:56 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:56 - root - INFO - SQL:
SELECT SUBSTRING("insert_date", 1, 4) AS "year",
           COUNT(*) AS "april_city_count"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE SUBSTRING("insert_date", 6, 2) = '04'
    GROUP BY "year"
    ORDER BY "year"
    LIMIT 100;
Results:
year,april_city_count
2021,1508
2022,1437
2023,1402

2025-01-21 15:25:56 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:25:56 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:25:56 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:25:58 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 15:25:58 - snowflake.connector.connection - INFO - closed
2025-01-21 15:25:58 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:25:58 - root - INFO - SQL:
SELECT "city_id", "city_name", "country_code_2", "insert_date"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    LIMIT 100;
Results:
city_id,city_name,country_code_2,insert_date
1,tokyo,jp,2022-01-12
2,jakarta,id,2021-08-22
3,delhi,in,2021-03-11
4,guangzhou,cn,2021-02-24
5,mumbai,in,2023-05-04
6,manila,ph,2023-03-16
7,shanghai,cn,2023-04-25
8,sao paulo,br,2021-10-07
9,seoul,kr,2021-09-01
10,mexico city,mx,2021-04-03
11,cairo,eg,2023-04-08
12,new york,us,2021-03-15
13,dhaka,bd,2023-05-22
14,beijing,cn,2021-12-09
15,kolkata,in,2021-12-01
16,bangkok,th,2023-05-10
17,shenzhen,cn,2023-05-31
18,moscow,ru,2021-01-31
19,buenos aires,ar,2021-05-03
20,lagos,ng,2021-06-08
21,istanbul,tr,2021-04-15
22,karachi,pk,2021-02-22
23,bangalore,in,2022-03-17
24,ho chi minh city,vn,2023-03-01
25,osaka,jp,2021-12-18
26,chengdu,cn,2022-01-02
27,tehran,ir,2022-01-20
28,kinshasa,cd,2022-05-21
29,rio de janeiro,br,2021-03-02
30,chennai,in,2022-06-22
31,xian,cn,2021-09-28
32,lahore,pk,2022-04-10
33,chongqing,cn,2022-06-25
34,los angeles,us,2023-04-08
35,baoding,cn,2022-04-08
36,london,gb,2021-07-05
37,paris,fr,2021-12-15
38,linyi,cn,2021-05-20
39,dongguan,cn,2021-05-02
40,hyderabad,in,2022-10-15
41,tianjin,cn,2021-11-25
42,lima,pe,2023-02-28
43,wuhan,cn,2023-05-04
44,nanyang,cn,2021-07-20
45,hangzhou,cn,2022-06-11
46,foshan,cn,2021-02-08
47,nagoya,jp,2021-11-25
48,taipei,tw,2021-03-22
49,tongshan,cn,2021-09-17
50,luanda,ao,2023-01-23
51,zhoukou,cn,2023-05-18
52,ganzhou,cn,2022-11-01
53,kuala lumpur,my,2022-08-26
54,heze,cn,2022-12-19
55,quanzhou,cn,2021-09-05
56,chicago,us,2023-05-31
57,nanjing,cn,2022-10-31
58,jining,cn,2021-06-15
59,hanoi,vn,2022-04-12
60,pune,in,2023-03-03
61,fuyang,cn,2023-04-16
62,ahmedabad,in,2022-05-31
63,johannesburg,za,2022-12-18
64,bogota,co,2022-04-27
65,dar es salaam,tz,2022-05-23
66,shenyang,cn,2022-01-15
67,khartoum,sd,2022-09-20
68,shangqiu,cn,2021-01-26
69,cangzhou,cn,2022-09-19
70,hong kong,hk,2023-01-15
71,shaoyang,cn,2023-01-01
72,zhanjiang,cn,2022-07-14
73,yancheng,cn,2022-01-14
74,hengyang,cn,2022-02-19
75,riyadh,sa,2023-01-24
76,zhumadian,cn,2023-04-09
77,santiago,cl,2023-03-15
78,xingtai,cn,2022-08-16
79,chattogram,bd,2022-06-20
80,bijie,cn,2023-01-21
81,shangrao,cn,2022-01-29
82,zunyi,cn,2023-04-21
83,surat,in,2021-12-17
84,surabaya,id,2022-09-11
85,huanggang,cn,2022-09-17
86,maoming,cn,2021-03-19
87,nanchong,cn,2021-11-13
88,xinyang,cn,2022-02-04
89,madrid,es,2022-09-10
90,baghdad,iq,2023-05-12
91,qujing,cn,2022-06-05
92,jieyang,cn,2022-01-26
93,singapore,sg,2022-02-17
94,prayagraj,in,2022-11-06
95,liaocheng,cn,2021-05-18
96,dalian,cn,2023-03-26
97,yulin,cn,2022-06-24
98,changde,cn,2022-01-13
99,qingdao,cn,2022-07-29
100,douala,cm,2023-04-21

2025-01-21 15:25:58 - root - INFO - itercount: 0
2025-01-21 15:25:58 - root - INFO - Database Name: CITY_LEGISLATION
Schema Name: CITY_LEGISLATION
DDL describes table information.
,0
table_name,ALIENS
description,
DDL,"create or replace TABLE ALIENS (
	""id"" NUMBER(38,0),
	""first_name"" VARCHAR(16777216),
	""last_name"" VARCHAR(16777216),
	""email"" VARCHAR(16777216),
	""gender"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""birth_year"" NUMBER(38,0)
);"

,1
table_name,ALIENS_DETAILS
description,
DDL,"create or replace TABLE ALIENS_DETAILS (
	""detail_id"" NUMBER(38,0),
	""favorite_food"" VARCHAR(16777216),
	""feeding_frequency"" VARCHAR(16777216),
	""aggressive"" NUMBER(38,0)
);"

,2
table_name,SKILLS_DIM
description,
DDL,"create or replace TABLE SKILLS_DIM (
	""skill_id"" NUMBER(38,0),
	""skills"" VARCHAR(16777216),
	""type"" VARCHAR(16777216)
);"

,3
table_name,ALIENS_LOCATION
description,
DDL,"create or replace TABLE ALIENS_LOCATION (
	""loc_id"" NUMBER(38,0),
	""current_location"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""country"" VARCHAR(16777216),
	""occupation"" VARCHAR(16777216)
);"

,4
table_name,ALIEN_DATA
description,
DDL,"create or replace TABLE ALIEN_DATA (
	""id"" NUMBER(38,0),
	""first_name"" VARCHAR(16777216),
	""last_name"" VARCHAR(16777216),
	""email"" VARCHAR(16777216),
	""gender"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""birth_year"" NUMBER(38,0),
	""age"" NUMBER(38,0),
	""favorite_food"" VARCHAR(16777216),
	""feeding_frequency"" VARCHAR(16777216),
	""aggressive"" NUMBER(38,0),
	""occupation"" VARCHAR(16777216),
	""current_location"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""us_region"" VARCHAR(16777216),
	""country"" VARCHAR(16777216)
);"

,5
table_name,CITIES
description,
DDL,"create or replace TABLE CITIES (
	""city_id"" NUMBER(38,0),
	""city_name"" VARCHAR(16777216),
	""latitude"" FLOAT,
	""longitude"" FLOAT,
	""country_code_2"" VARCHAR(16777216),
	""capital"" NUMBER(38,0),
	""population"" FLOAT,
	""insert_date"" VARCHAR(16777216)
);"

,6
table_name,CITIES_COUNTRIES
description,
DDL,"create or replace TABLE CITIES_COUNTRIES (
	""country_id"" NUMBER(38,0),
	""country_name"" VARCHAR(16777216),
	""country_code_2"" VARCHAR(16777216),
	""country_code_3"" VARCHAR(16777216),
	""region"" VARCHAR(16777216),
	""sub_region"" VARCHAR(16777216),
	""intermediate_region"" VARCHAR(16777216),
	""created_on"" VARCHAR(16777216)
);"

,7
table_name,CITIES_CURRENCIES
description,
DDL,"create or replace TABLE CITIES_CURRENCIES (
	""currency_id"" NUMBER(38,0),
	""country_code_2"" VARCHAR(16777216),
	""currency_name"" VARCHAR(16777216),
	""currency_code"" VARCHAR(16777216)
);"

,8
table_name,LEGISLATORS
description,
DDL,"create or replace TABLE LEGISLATORS (
	""full_name"" VARCHAR(16777216),
	""first_name"" VARCHAR(16777216),
	""last_name"" VARCHAR(16777216),
	""middle_name"" VARCHAR(16777216),
	""nickname"" VARCHAR(16777216),
	""suffix"" VARCHAR(16777216),
	""other_names_end"" VARCHAR(16777216),
	""other_names_middle"" VARCHAR(16777216),
	""other_names_last"" VARCHAR(16777216),
	""birthday"" VARCHAR(16777216),
	""gender"" VARCHAR(16777216),
	""id_bioguide"" VARCHAR(16777216),
	""id_bioguide_previous_0"" VARCHAR(16777216),
	""id_govtrack"" NUMBER(38,0),
	""id_icpsr"" FLOAT,
	""id_wikipedia"" VARCHAR(16777216),
	""id_wikidata"" VARCHAR(16777216),
	""id_google_entity_id"" VARCHAR(16777216),
	""id_house_history"" FLOAT,
	""id_house_history_alternate"" FLOAT,
	""id_thomas"" FLOAT,
	""id_cspan"" FLOAT,
	""id_votesmart"" FLOAT,
	""id_lis"" VARCHAR(16777216),
	""id_ballotpedia"" VARCHAR(16777216),
	""id_opensecrets"" VARCHAR(16777216),
	""id_fec_0"" VARCHAR(16777216),
	""id_fec_1"" VARCHAR(16777216),
	""id_fec_2"" VARCHAR(16777216)
);"

,9
table_name,LEGISLATORS_TERMS
description,
DDL,"create or replace TABLE LEGISLATORS_TERMS (
	""id_bioguide"" VARCHAR(16777216),
	""term_number"" NUMBER(38,0),
	""term_id"" VARCHAR(16777216),
	""term_type"" VARCHAR(16777216),
	""term_start"" VARCHAR(16777216),
	""term_end"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""district"" FLOAT,
	""class"" FLOAT,
	""party"" VARCHAR(16777216),
	""how"" VARCHAR(16777216),
	""url"" VARCHAR(16777216),
	""address"" VARCHAR(16777216),
	""phone"" VARCHAR(16777216),
	""fax"" VARCHAR(16777216),
	""contact_form"" VARCHAR(16777216),
	""office"" VARCHAR(16777216),
	""state_rank"" VARCHAR(16777216),
	""rss_url"" VARCHAR(16777216),
	""caucus"" VARCHAR(16777216)
);"

,10
table_name,SKILLS_JOB_DIM
description,
DDL,"create or replace TABLE SKILLS_JOB_DIM (
	""job_id"" NUMBER(38,0),
	""skill_id"" NUMBER(38,0)
);"

,11
table_name,CITIES_LANGUAGES
description,
DDL,"create or replace TABLE CITIES_LANGUAGES (
	""language_id"" NUMBER(38,0),
	""language"" VARCHAR(16777216),
	""country_code_2"" VARCHAR(16777216)
);"

,12
table_name,JOB_POSTINGS_FACT
description,
DDL,"create or replace TABLE JOB_POSTINGS_FACT (
	""job_id"" NUMBER(38,0),
	""company_id"" NUMBER(38,0),
	""job_title_short"" VARCHAR(16777216),
	""job_title"" VARCHAR(16777216),
	""job_location"" VARCHAR(16777216),
	""job_via"" VARCHAR(16777216),
	""job_schedule_type"" VARCHAR(16777216),
	""job_work_from_home"" NUMBER(38,0),
	""search_location"" VARCHAR(16777216),
	""job_posted_date"" VARCHAR(16777216),
	""job_no_degree_mention"" NUMBER(38,0),
	""job_health_insurance"" NUMBER(38,0),
	""job_country"" VARCHAR(16777216),
	""salary_rate"" VARCHAR(16777216),
	""salary_year_avg"" FLOAT,
	""salary_hour_avg"" FLOAT
);"

,13
table_name,LEGISLATION_DATE_DIM
description,
DDL,"create or replace TABLE LEGISLATION_DATE_DIM (
	""date"" VARCHAR(16777216),
	""month_name"" VARCHAR(16777216),
	""day_of_month"" NUMBER(38,0)
);"

,14
table_name,JOB_COMPANY
description,
DDL,"create or replace TABLE JOB_COMPANY (
	""company_id"" NUMBER(38,0),
	""name"" VARCHAR(16777216),
	""link"" VARCHAR(16777216),
	""link_google"" VARCHAR(16777216),
	""thumbnail"" VARCHAR(16777216)
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'CITY_LEGISLATION': {'CITY_LEGISLATION': ['ALIENS', 'ALIENS_DETAILS', 'ALIENS_LOCATION', 'ALIEN_DATA', 'CITIES', 'CITIES_COUNTRIES', 'CITIES_CURRENCIES', 'CITIES_LANGUAGES', 'JOB_COMPANY', 'JOB_POSTINGS_FACT', 'LEGISLATION_DATE_DIM', 'LEGISLATORS', 'LEGISLATORS_TERMS', 'SKILLS_DIM', 'SKILLS_JOB_DIM']}}
Begin Exploring Related Columns
**Relevant Columns and Potential Usage:**

- `"insert_date"`: Potential usage - Determine when each city was added to the database.
- `"city_id"`: Potential usage - Unique identifier for each city; useful for counting distinct cities.
- `"city_name"`: Potential usage - Name of the city; can be used to identify records.

**Conditions that May Be Used:**

- Extracting the year and month from `"insert_date"` to filter data for April, May, and June in the years 2021-2023.
- Filtering out data from 2021 in the final output but using it as a baseline for calculating growth rates.

---

**SQL Queries:**

1. **Inspect the format of the `insert_date` column:**

   ```sql
   SELECT "insert_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   LIMIT 100;
   ```

2. **List distinct `insert_date` values to see unique dates:**

   ```sql
   SELECT DISTINCT "insert_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   LIMIT 100;
   ```

3. **Extract and list distinct years from `insert_date`:**

   ```sql
   SELECT DISTINCT SUBSTRING("insert_date", 1, 4) AS "year"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   LIMIT 100;
   ```

4. **Extract and list distinct months from `insert_date`:**

   ```sql
   SELECT DISTINCT SUBSTRING("insert_date", 6, 2) AS "month"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   LIMIT 100;
   ```

5. **Select cities added in April (any year):**

   ```sql
   SELECT "city_id", "city_name", "insert_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   WHERE SUBSTRING("insert_date", 6, 2) = '04'
   LIMIT 100;
   ```

6. **Count the number of cities added each month:**

   ```sql
   SELECT SUBSTRING("insert_date", 1, 7) AS "year_month", COUNT(*) AS "city_count"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   GROUP BY "year_month"
   ORDER BY "year_month"
   LIMIT 100;
   ```

7. **List cities added in April, May, or June between 2021 and 2023:**

   ```sql
   SELECT "city_id", "city_name", "insert_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   WHERE SUBSTRING("insert_date", 1, 4) IN ('2021', '2022', '2023')
     AND SUBSTRING("insert_date", 6, 2) IN ('04', '05', '06')
   LIMIT 100;
   ```

8. **Count the number of cities added each year:**

   ```sql
   SELECT SUBSTRING("insert_date", 1, 4) AS "year", COUNT(*) AS "city_count"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   GROUP BY "year"
   ORDER BY "year"
   LIMIT 100;
   ```

9. **Find the earliest and latest `insert_date` values:**

   ```sql
   SELECT MIN("insert_date") AS "earliest_date", MAX("insert_date") AS "latest_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES";
   ```

10. **Retrieve cities added in 2021 (baseline year):**

    ```sql
    SELECT "city_id", "city_name", "insert_date"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE SUBSTRING("insert_date", 1, 4) = '2021'
    LIMIT 100;
    ```

11. **Count cities added in April, May, and June for each year:**

    ```sql
    SELECT SUBSTRING("insert_date", 1, 4) AS "year",
           SUBSTRING("insert_date", 6, 2) AS "month",
           COUNT(*) AS "city_count"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE SUBSTRING("insert_date", 6, 2) IN ('04', '05', '06')
      AND SUBSTRING("insert_date", 1, 4) IN ('2021', '2022', '2023')
    GROUP BY "year", "month"
    ORDER BY "year", "month"
    LIMIT 100;
    ```

12. **List all cities added after January 1, 2021:**

    ```sql
    SELECT "city_id", "city_name", "insert_date"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE "insert_date" >= '2021-01-01'
    LIMIT 100;
    ```

13. **Count total cities added up to each month (running cumulative total):**

    ```sql
    SELECT SUBSTRING("insert_date", 1, 7) AS "year_month",
           COUNT(*) OVER (ORDER BY SUBSTRING("insert_date", 1, 7)) AS "running_total"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE SUBSTRING("insert_date", 1, 4) >= '2021'
    GROUP BY "year_month"
    ORDER BY "year_month"
    LIMIT 100;
    ```

14. **Calculate year-over-year growth of cities added in April:**

    ```sql
    SELECT SUBSTRING("insert_date", 1, 4) AS "year",
           COUNT(*) AS "april_city_count"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE SUBSTRING("insert_date", 6, 2) = '04'
    GROUP BY "year"
    ORDER BY "year"
    LIMIT 100;
    ```

15. **List cities added with their country code to check for country-specific data:**

    ```sql
    SELECT "city_id", "city_name", "country_code_2", "insert_date"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    LIMIT 100;
    ```

---

These queries are designed to explore the relevant data in the `CITIES` table, focusing on the `"insert_date"` column to extract the necessary year and month information. This will help in calculating the number of new cities inserted during April, May, and June for the years 2021-2023, and in determining the year-over-year growth percentages as required.Query:
SELECT "insert_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   LIMIT 100;
Answer:
insert_date
2022-01-12
2021-08-22
2021-03-11
2021-02-24
2023-05-04
2023-03-16
2023-04-25
2021-10-07
2021-09-01
2021-04-03
2023-04-08
2021-03-15
2023-05-22
2021-12-09
2021-12-01
2023-05-10
2023-05-31
2021-01-31
2021-05-03
2021-06-08
2021-04-15
2021-02-22
2022-03-17
2023-03-01
2021-12-18
2022-01-02
2022-01-20
2022-05-21
2021-03-02
2022-06-22
2021-09-28
2022-04-10
2022-06-25
2023-04-08
2022-04-08
2021-07-05
2021-12-15
2021-05-20
2021-05-02
2022-10-15
2021-11-25
2023-02-28
2023-05-04
2021-07-20
2022-06-11
2021-02-08
2021-11-25
2021-03-22
2021-09-17
2023-01-23
2023-05-18
2022-11-01
2022-08-26
2022-12-19
2021-09-05
2023-05-31
2022-10-31
2021-06-15
2022-04-12
2023-03-03
2023-04-16
2022-05-31
2022-12-18
2022-04-27
2022-05-23
2022-01-15
2022-09-20
2021-01-26
2022-09-19
2023-01-15
2023-01-01
2022-07-14
2022-01-14
2022-02-19
2023-01-24
2023-04-09
2023-03-15
2022-08-16
2022-06-20
2023-01-21
2022-01-29
2023-04-21
2021-12-17
2022-09-11
2022-09-17
2021-03-19
2021-11-13
2022-02-04
2022-09-10
2023-05-12
2022-06-05
2022-01-26
2022-02-17
2022-11-06
2021-05-18
2023-03-26
2022-06-24
2022-01-13
2022-07-29
2023-04-21
Query:
SELECT DISTINCT "insert_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   LIMIT 100;
Answer:
insert_date
2022-01-12
2021-08-22
2021-03-11
2021-02-24
2023-05-04
2023-03-16
2023-04-25
2021-09-01
2021-04-03
2021-03-15
2023-05-22
2021-12-01
2023-05-31
2021-01-31
2021-05-03
2021-04-15
2023-03-01
2021-12-18
2022-01-02
2022-01-20
2021-09-28
2022-04-10
2022-06-25
2022-04-08
2023-02-28
2021-09-17
2022-12-19
2022-10-31
2023-01-15
2023-04-21
2022-11-06
2021-05-25
2021-02-28
2023-03-09
2021-09-20
2022-11-12
2023-01-25
2022-07-31
2021-03-02
2022-06-22
2021-07-05
2021-12-15
2021-02-08
2023-04-16
2022-05-31
2022-09-10
2023-05-12
2022-02-17
2021-08-06
2021-11-18
2022-05-12
2023-07-01
2021-06-04
2021-01-27
2022-01-03
2022-08-05
2023-01-01
2023-01-21
2022-02-10
2022-05-16
2022-08-08
2023-06-18
2022-03-26
2023-04-08
2021-12-09
2023-05-10
2022-03-17
2021-05-02
2021-11-25
2021-03-22
2023-01-23
2022-04-12
2022-05-23
2022-01-15
2022-09-20
2021-01-26
2022-02-19
2023-04-13
2023-04-19
2021-01-01
2022-10-29
2021-10-07
2021-06-08
2022-05-21
2022-10-15
2022-06-11
2023-05-18
2022-11-01
2021-09-05
2023-03-03
2022-12-18
2022-01-14
2023-04-09
2022-06-20
2022-09-11
2022-09-17
2021-05-18
2022-07-29
2023-03-07
2021-11-01
Query:
SELECT DISTINCT SUBSTRING("insert_date", 1, 4) AS "year"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   LIMIT 100;
Answer:
year
2022
2021
2023
Query:
SELECT DISTINCT SUBSTRING("insert_date", 6, 2) AS "month"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   LIMIT 100;
Answer:
month
01
08
03
02
05
04
10
09
12
07
06
11
Query:
SELECT "city_id", "city_name", "insert_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   WHERE SUBSTRING("insert_date", 6, 2) = '04'
   LIMIT 100;
Answer:
city_id,city_name,insert_date
7,shanghai,2023-04-25
10,mexico city,2021-04-03
11,cairo,2023-04-08
21,istanbul,2021-04-15
32,lahore,2022-04-10
34,los angeles,2023-04-08
35,baoding,2022-04-08
59,hanoi,2022-04-12
61,fuyang,2023-04-16
64,bogota,2022-04-27
76,zhumadian,2023-04-09
82,zunyi,2023-04-21
100,douala,2023-04-21
116,philadelphia,2023-04-13
123,suihua,2023-04-19
163,kunming,2023-04-28
169,meizhou,2021-04-26
184,xiaoxita,2021-04-09
216,jiaozuo,2021-04-01
221,montreal,2022-04-02
229,lucknow,2022-04-13
249,santa cruz,2021-04-02
259,athens,2022-04-01
273,incheon,2022-04-27
298,manchester,2022-04-14
302,dingxi,2021-04-19
306,maracaibo,2021-04-09
308,mbujimayi,2022-04-06
326,luohe,2021-04-08
336,hamburg,2023-04-02
340,huangshi,2021-04-19
352,nagpur,2023-04-20
371,nantong,2021-04-28
383,gaoping,2023-04-30
385,harare,2022-04-06
406,baicheng,2023-04-09
427,sacramento,2022-04-24
432,thane,2023-04-30
440,port harcourt,2023-04-29
449,wuwei,2022-04-03
460,diyarbakir,2022-04-25
465,shuozhou,2023-04-27
467,benxi,2021-04-28
477,changshu,2023-04-17
485,sangereng,2022-04-02
488,novosibirsk,2022-04-19
493,stockholm,2022-04-01
505,jamshedpur,2023-04-29
546,kharkiv,2021-04-08
549,ruian,2023-04-04
556,tel avivyafo,2023-04-15
569,huangshan,2023-04-04
570,auckland,2022-04-03
577,liangshi,2021-04-27
581,al basrah,2023-04-25
584,xintai,2023-04-28
588,rongcheng,2022-04-16
589,huazhou,2021-04-10
595,jiangyin,2023-04-09
627,jacksonville,2023-04-17
629,campinas,2022-04-17
633,najafgarh,2023-04-12
641,zhangye,2023-04-23
647,mbandaka,2021-04-06
654,cilacap,2022-04-12
658,guankou,2021-04-29
665,nay pyi taw,2021-04-02
667,kigali,2022-04-07
694,tamale,2021-04-21
695,xibeijie,2021-04-14
703,bishkek,2023-04-02
707,ezhou,2022-04-28
734,bogor,2022-04-07
735,cartagena,2021-04-05
737,jodhpur,2021-04-26
741,managua,2023-04-28
742,sanya,2022-04-13
743,shymkent,2021-04-25
757,islamabad,2023-04-08
768,quetta,2021-04-21
776,riga,2021-04-29
779,lome,2021-04-01
794,san salvador,2021-04-13
796,asuncion,2023-04-11
803,manama,2023-04-18
846,moroni,2021-04-26
848,mbabane,2023-04-09
883,lobamba,2021-04-01
893,alofi,2022-04-21
894,basseterre,2021-04-24
897,brades,2022-04-04
902,the valley,2023-04-16
906,flying fish cove,2023-04-06
915,chiba,2022-04-17
918,luocheng,2023-04-16
923,nada,2023-04-23
937,songnam,2022-04-29
942,kermanshah,2023-04-12
943,krasnodar,2023-04-22
952,khartoum north,2023-04-08
Query:
SELECT SUBSTRING("insert_date", 1, 7) AS "year_month", COUNT(*) AS "city_count"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   GROUP BY "year_month"
   ORDER BY "year_month"
   LIMIT 100;
Answer:
year_month,city_count
2021-01,1471
2021-02,1291
2021-03,1485
2021-04,1508
2021-05,1509
2021-06,1395
2021-07,1394
2021-08,1481
2021-09,1452
2021-10,1446
2021-11,1378
2021-12,1472
2022-01,1507
2022-02,1351
2022-03,1451
2022-04,1437
2022-05,1459
2022-06,1411
2022-07,1429
2022-08,1453
2022-09,1478
2022-10,1473
2022-11,1501
2022-12,1482
2023-01,1532
2023-02,1281
2023-03,1386
2023-04,1402
2023-05,1389
2023-06,1432
2023-07,1435
2023-08,51
Query:
SELECT "city_id", "city_name", "insert_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   WHERE SUBSTRING("insert_date", 1, 4) IN ('2021', '2022', '2023')
     AND SUBSTRING("insert_date", 6, 2) IN ('04', '05', '06')
   LIMIT 100;
Answer:
city_id,city_name,insert_date
5,mumbai,2023-05-04
7,shanghai,2023-04-25
10,mexico city,2021-04-03
11,cairo,2023-04-08
13,dhaka,2023-05-22
16,bangkok,2023-05-10
17,shenzhen,2023-05-31
19,buenos aires,2021-05-03
20,lagos,2021-06-08
21,istanbul,2021-04-15
28,kinshasa,2022-05-21
30,chennai,2022-06-22
32,lahore,2022-04-10
33,chongqing,2022-06-25
34,los angeles,2023-04-08
35,baoding,2022-04-08
38,linyi,2021-05-20
39,dongguan,2021-05-02
43,wuhan,2023-05-04
45,hangzhou,2022-06-11
51,zhoukou,2023-05-18
56,chicago,2023-05-31
58,jining,2021-06-15
59,hanoi,2022-04-12
61,fuyang,2023-04-16
62,ahmedabad,2022-05-31
64,bogota,2022-04-27
65,dar es salaam,2022-05-23
76,zhumadian,2023-04-09
79,chattogram,2022-06-20
82,zunyi,2023-04-21
90,baghdad,2023-05-12
91,qujing,2022-06-05
95,liaocheng,2021-05-18
97,yulin,2022-06-24
100,douala,2023-04-21
114,nairobi,2023-05-20
116,philadelphia,2023-04-13
117,ankara,2022-05-12
119,dazhou,2021-05-25
121,yongzhou,2023-06-27
122,toronto,2021-05-04
123,suihua,2023-04-19
124,saint petersburg,2022-06-18
129,weinan,2023-05-24
131,zhangzhou,2021-05-12
133,xianyang,2023-05-18
146,alexandria,2023-05-02
147,mianyang,2022-05-08
148,sydney,2022-05-16
151,barcelona,2023-06-27
157,yibin,2023-05-07
162,timbio,2023-06-24
163,kunming,2023-04-28
169,meizhou,2021-04-26
173,suzhou,2023-06-08
175,linfen,2023-05-16
179,luzhou,2023-06-18
184,xiaoxita,2021-04-09
197,taiyuan,2021-06-04
201,harbin,2022-05-02
204,baojishi,2022-05-03
205,zaozhuang,2023-06-17
211,medan,2022-05-24
216,jiaozuo,2021-04-01
219,hechi,2022-06-02
221,montreal,2022-04-02
229,lucknow,2022-04-13
238,san francisco,2021-06-15
240,qincheng,2022-05-29
243,leshan,2022-06-29
245,zhenjiang,2021-06-13
246,faisalabad,2021-06-06
249,santa cruz,2021-04-02
253,heyuan,2023-05-08
259,athens,2022-04-01
260,addis ababa,2021-05-16
263,taichung,2021-05-09
265,budapest,2023-05-27
269,rizhao,2021-06-08
273,incheon,2022-04-27
274,guatemala city,2023-05-28
296,longyan,2022-06-12
298,manchester,2022-04-14
300,handan,2021-06-28
301,cawnpore,2022-05-14
302,dingxi,2021-04-19
306,maracaibo,2021-04-09
308,mbujimayi,2022-04-06
315,baoshan,2021-05-05
326,luohe,2021-04-08
330,yunfu,2023-05-04
332,yantai,2023-05-27
333,huizhou,2023-06-07
336,hamburg,2023-04-02
339,lusaka,2021-05-28
340,huangshi,2021-04-19
349,lianshan,2023-05-30
352,nagpur,2023-04-20
357,yuxi,2021-06-07
Query:
SELECT SUBSTRING("insert_date", 1, 4) AS "year", COUNT(*) AS "city_count"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
   GROUP BY "year"
   ORDER BY "year"
   LIMIT 100;
Answer:
year,city_count
2021,17282
2022,17432
2023,9908
Query:
SELECT MIN("insert_date") AS "earliest_date", MAX("insert_date") AS "latest_date"
   FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES";
Answer:
earliest_date,latest_date
2021-01-01,2023-08-01
Query:
SELECT "city_id", "city_name", "insert_date"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE SUBSTRING("insert_date", 1, 4) = '2021'
    LIMIT 100;
Answer:
city_id,city_name,insert_date
2,jakarta,2021-08-22
3,delhi,2021-03-11
4,guangzhou,2021-02-24
8,sao paulo,2021-10-07
9,seoul,2021-09-01
10,mexico city,2021-04-03
12,new york,2021-03-15
14,beijing,2021-12-09
15,kolkata,2021-12-01
18,moscow,2021-01-31
19,buenos aires,2021-05-03
20,lagos,2021-06-08
21,istanbul,2021-04-15
22,karachi,2021-02-22
25,osaka,2021-12-18
29,rio de janeiro,2021-03-02
31,xian,2021-09-28
36,london,2021-07-05
37,paris,2021-12-15
38,linyi,2021-05-20
39,dongguan,2021-05-02
41,tianjin,2021-11-25
44,nanyang,2021-07-20
46,foshan,2021-02-08
47,nagoya,2021-11-25
48,taipei,2021-03-22
49,tongshan,2021-09-17
55,quanzhou,2021-09-05
58,jining,2021-06-15
68,shangqiu,2021-01-26
83,surat,2021-12-17
86,maoming,2021-03-19
87,nanchong,2021-11-13
95,liaocheng,2021-05-18
101,miami,2021-09-03
104,xiangyang,2021-08-18
105,dallas,2021-08-06
106,houston,2021-11-18
107,zhengzhou,2021-11-01
119,dazhou,2021-05-25
122,toronto,2021-05-04
128,belo horizonte,2021-08-27
130,rangoon,2021-02-28
131,zhangzhou,2021-05-12
134,guilin,2021-07-17
136,taizhou,2021-02-23
139,abidjan,2021-12-05
140,suqian,2021-11-13
142,jian,2021-10-12
143,xiaoganzhan,2021-07-12
144,pingdingshan,2021-01-01
149,huanglongsi,2021-08-28
152,changsha,2021-01-14
158,yangzhou,2021-02-17
159,melbourne,2021-10-14
160,berlin,2021-03-09
169,meizhou,2021-04-26
170,zhangjiakou,2021-09-07
178,mogadishu,2021-11-17
181,boston,2021-09-20
183,zhaoqing,2021-01-17
184,xiaoxita,2021-04-09
186,ningbo,2021-10-16
187,fuzhou,2021-08-13
189,zhuzhou,2021-03-13
190,amman,2021-08-21
193,qingyuan,2021-09-09
196,deyang,2021-09-17
197,taiyuan,2021-06-04
202,abuja,2021-10-04
203,yokohama,2021-10-13
208,fuzhou,2021-12-21
209,baicheng,2021-01-27
212,yulinshi,2021-02-24
214,changzhou,2021-01-19
215,puyang,2021-08-16
216,jiaozuo,2021-04-01
217,nanchang,2021-09-07
222,busan,2021-01-08
223,hohhot,2021-08-06
224,seattle,2021-10-30
226,hanzhong,2021-07-22
227,tangshan,2021-08-31
232,boankra,2021-02-12
237,bengbu,2021-07-28
238,san francisco,2021-06-15
242,wuxi,2021-10-27
245,zhenjiang,2021-06-13
246,faisalabad,2021-06-06
247,guangan,2021-01-12
249,santa cruz,2021-04-02
250,qinhuangdao,2021-12-05
252,jinzhou,2021-09-14
258,wuzhou,2021-10-22
260,addis ababa,2021-05-16
261,chaoyang,2021-03-09
263,taichung,2021-05-09
264,kuwait city,2021-03-13
266,shaoguan,2021-02-19
269,rizhao,2021-06-08
Query:
SELECT SUBSTRING("insert_date", 1, 4) AS "year",
           SUBSTRING("insert_date", 6, 2) AS "month",
           COUNT(*) AS "city_count"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE SUBSTRING("insert_date", 6, 2) IN ('04', '05', '06')
      AND SUBSTRING("insert_date", 1, 4) IN ('2021', '2022', '2023')
    GROUP BY "year", "month"
    ORDER BY "year", "month"
    LIMIT 100;
Answer:
year,month,city_count
2021,04,1508
2021,05,1509
2021,06,1395
2022,04,1437
2022,05,1459
2022,06,1411
2023,04,1402
2023,05,1389
2023,06,1432
Query:
SELECT "city_id", "city_name", "insert_date"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE "insert_date" >= '2021-01-01'
    LIMIT 100;
Answer:
city_id,city_name,insert_date
1,tokyo,2022-01-12
2,jakarta,2021-08-22
3,delhi,2021-03-11
4,guangzhou,2021-02-24
5,mumbai,2023-05-04
6,manila,2023-03-16
7,shanghai,2023-04-25
8,sao paulo,2021-10-07
9,seoul,2021-09-01
10,mexico city,2021-04-03
11,cairo,2023-04-08
12,new york,2021-03-15
13,dhaka,2023-05-22
14,beijing,2021-12-09
15,kolkata,2021-12-01
16,bangkok,2023-05-10
17,shenzhen,2023-05-31
18,moscow,2021-01-31
19,buenos aires,2021-05-03
20,lagos,2021-06-08
21,istanbul,2021-04-15
22,karachi,2021-02-22
23,bangalore,2022-03-17
24,ho chi minh city,2023-03-01
25,osaka,2021-12-18
26,chengdu,2022-01-02
27,tehran,2022-01-20
28,kinshasa,2022-05-21
29,rio de janeiro,2021-03-02
30,chennai,2022-06-22
31,xian,2021-09-28
32,lahore,2022-04-10
33,chongqing,2022-06-25
34,los angeles,2023-04-08
35,baoding,2022-04-08
36,london,2021-07-05
37,paris,2021-12-15
38,linyi,2021-05-20
39,dongguan,2021-05-02
40,hyderabad,2022-10-15
41,tianjin,2021-11-25
42,lima,2023-02-28
43,wuhan,2023-05-04
44,nanyang,2021-07-20
45,hangzhou,2022-06-11
46,foshan,2021-02-08
47,nagoya,2021-11-25
48,taipei,2021-03-22
49,tongshan,2021-09-17
50,luanda,2023-01-23
51,zhoukou,2023-05-18
52,ganzhou,2022-11-01
53,kuala lumpur,2022-08-26
54,heze,2022-12-19
55,quanzhou,2021-09-05
56,chicago,2023-05-31
57,nanjing,2022-10-31
58,jining,2021-06-15
59,hanoi,2022-04-12
60,pune,2023-03-03
61,fuyang,2023-04-16
62,ahmedabad,2022-05-31
63,johannesburg,2022-12-18
64,bogota,2022-04-27
65,dar es salaam,2022-05-23
66,shenyang,2022-01-15
67,khartoum,2022-09-20
68,shangqiu,2021-01-26
69,cangzhou,2022-09-19
70,hong kong,2023-01-15
71,shaoyang,2023-01-01
72,zhanjiang,2022-07-14
73,yancheng,2022-01-14
74,hengyang,2022-02-19
75,riyadh,2023-01-24
76,zhumadian,2023-04-09
77,santiago,2023-03-15
78,xingtai,2022-08-16
79,chattogram,2022-06-20
80,bijie,2023-01-21
81,shangrao,2022-01-29
82,zunyi,2023-04-21
83,surat,2021-12-17
84,surabaya,2022-09-11
85,huanggang,2022-09-17
86,maoming,2021-03-19
87,nanchong,2021-11-13
88,xinyang,2022-02-04
89,madrid,2022-09-10
90,baghdad,2023-05-12
91,qujing,2022-06-05
92,jieyang,2022-01-26
93,singapore,2022-02-17
94,prayagraj,2022-11-06
95,liaocheng,2021-05-18
96,dalian,2023-03-26
97,yulin,2022-06-24
98,changde,2022-01-13
99,qingdao,2022-07-29
100,douala,2023-04-21
Query:
SELECT SUBSTRING("insert_date", 1, 7) AS "year_month",
           COUNT(*) OVER (ORDER BY SUBSTRING("insert_date", 1, 7)) AS "running_total"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE SUBSTRING("insert_date", 1, 4) >= '2021'
    GROUP BY "year_month"
    ORDER BY "year_month"
    LIMIT 100;
Answer:
year_month,running_total
2021-01,1
2021-02,2
2021-03,3
2021-04,4
2021-05,5
2021-06,6
2021-07,7
2021-08,8
2021-09,9
2021-10,10
2021-11,11
2021-12,12
2022-01,13
2022-02,14
2022-03,15
2022-04,16
2022-05,17
2022-06,18
2022-07,19
2022-08,20
2022-09,21
2022-10,22
2022-11,23
2022-12,24
2023-01,25
2023-02,26
2023-03,27
2023-04,28
2023-05,29
2023-06,30
2023-07,31
2023-08,32
Query:
SELECT SUBSTRING("insert_date", 1, 4) AS "year",
           COUNT(*) AS "april_city_count"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE SUBSTRING("insert_date", 6, 2) = '04'
    GROUP BY "year"
    ORDER BY "year"
    LIMIT 100;
Answer:
year,april_city_count
2021,1508
2022,1437
2023,1402
Query:
SELECT "city_id", "city_name", "country_code_2", "insert_date"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    LIMIT 100;
Answer:
city_id,city_name,country_code_2,insert_date
1,tokyo,jp,2022-01-12
2,jakarta,id,2021-08-22
3,delhi,in,2021-03-11
4,guangzhou,cn,2021-02-24
5,mumbai,in,2023-05-04
6,manila,ph,2023-03-16
7,shanghai,cn,2023-04-25
8,sao paulo,br,2021-10-07
9,seoul,kr,2021-09-01
10,mexico city,mx,2021-04-03
11,cairo,eg,2023-04-08
12,new york,us,2021-03-15
13,dhaka,bd,2023-05-22
14,beijing,cn,2021-12-09
15,kolkata,in,2021-12-01
16,bangkok,th,2023-05-10
17,shenzhen,cn,2023-05-31
18,moscow,ru,2021-01-31
19,buenos aires,ar,2021-05-03
20,lagos,ng,2021-06-08
21,istanbul,tr,2021-04-15
22,karachi,pk,2021-02-22
23,bangalore,in,2022-03-17
24,ho chi minh city,vn,2023-03-01
25,osaka,jp,2021-12-18
26,chengdu,cn,2022-01-02
27,tehran,ir,2022-01-20
28,kinshasa,cd,2022-05-21
29,rio de janeiro,br,2021-03-02
30,chennai,in,2022-06-22
31,xian,cn,2021-09-28
32,lahore,pk,2022-04-10
33,chongqing,cn,2022-06-25
34,los angeles,us,2023-04-08
35,baoding,cn,2022-04-08
36,london,gb,2021-07-05
37,paris,fr,2021-12-15
38,linyi,cn,2021-05-20
39,dongguan,cn,2021-05-02
40,hyderabad,in,2022-10-15
41,tianjin,cn,2021-11-25
42,lima,pe,2023-02-28
43,wuhan,cn,2023-05-04
44,nanyang,cn,2021-07-20
45,hangzhou,cn,2022-06-11
46,foshan,cn,2021-02-08
47,nagoya,jp,2021-11-25
48,taipei,tw,2021-03-22
49,tongshan,cn,2021-09-17
50,luanda,ao,2023-01-23
51,zhoukou,cn,2023-05-18
52,ganzhou,cn,2022-11-01
53,kuala lumpur,my,2022-08-26
54,heze,cn,2022-12-19
55,quanzhou,cn,2021-09-05
56,chicago,us,2023-05-31
57,nanjing,cn,2022-10-31
58,jining,cn,2021-06-15
59,hanoi,vn,2022-04-12
60,pune,in,2023-03-03
61,fuyang,cn,2023-04-16
62,ahmedabad,in,2022-05-31
63,johannesburg,za,2022-12-18
64,bogota,co,2022-04-27
65,dar es salaam,tz,2022-05-23
66,shenyang,cn,2022-01-15
67,khartoum,sd,2022-09-20
68,shangqiu,cn,2021-01-26
69,cangzhou,cn,2022-09-19
70,hong kong,hk,2023-01-15
71,shaoyang,cn,2023-01-01
72,zhanjiang,cn,2022-07-14
73,yancheng,cn,2022-01-14
74,hengyang,cn,2022-02-19
75,riyadh,sa,2023-01-24
76,zhumadian,cn,2023-04-09
77,santiago,cl,2023-03-15
78,xingtai,cn,2022-08-16
79,chattogram,bd,2022-06-20
80,bijie,cn,2023-01-21
81,shangrao,cn,2022-01-29
82,zunyi,cn,2023-04-21
83,surat,in,2021-12-17
84,surabaya,id,2022-09-11
85,huanggang,cn,2022-09-17
86,maoming,cn,2021-03-19
87,nanchong,cn,2021-11-13
88,xinyang,cn,2022-02-04
89,madrid,es,2022-09-10
90,baghdad,iq,2023-05-12
91,qujing,cn,2022-06-05
92,jieyang,cn,2022-01-26
93,singapore,sg,2022-02-17
94,prayagraj,in,2022-11-06
95,liaocheng,cn,2021-05-18
96,dalian,cn,2023-03-26
97,yulin,cn,2022-06-24
98,changde,cn,2022-01-13
99,qingdao,cn,2022-07-29
100,douala,cm,2023-04-21
End Exploring Related Columns
Task: Calculate the number of new cities inserted each April, May, and June, along with the year-over-year growth percentage for each month from 2021-2023. List the year, month, the total number of cities added, the running cumulative total, and the year-over-year growth percentage (including "%") for both the monthly total and the running total. Ensure that 2021 data is used only as a baseline for calculating growth rates, and exclude it from the final output.

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
Year,Month,Total_cities_added,Running_cumulative_total,YoY_monthly_growth,YoY_running_total_growth
2022,April,total_cities:int,running_total:int,monthly_growth:0<=float<=100,running_growth:0<=float<=100
2022,May,total_cities:int,running_total:int,monthly_growth:0<=float<=100,running_growth:0<=float<=100
2022,June,total_cities:int,running_total:int,monthly_growth:0<=float<=100,running_growth:0<=float<=100
2023,April,total_cities:int,running_total:int,monthly_growth:0<=float<=100,running_growth:0<=float<=100
2023,May,total_cities:int,running_total:int,monthly_growth:0<=float<=100,running_growth:0<=float<=100
2023,June,total_cities:int,running_total:int,monthly_growth:0<=float<=100,running_growth:0<=float<=100
```

**Explanation:**

The table displays the number of new cities added in April, May, and June for the years 2022 and 2023. It includes:

- **Year**: The year when the cities were added.
- **Month**: The month when the cities were added.
- **Total_cities_added**: The total number of cities added in that month (`int`).
- **Running_cumulative_total**: The cumulative total number of cities added up to and including that month (`int`).
- **YoY_monthly_growth**: The year-over-year growth percentage for the monthly total compared to the same month in the previous year (value between 0 and 100).
- **YoY_running_total_growth**: The year-over-year growth percentage for the running cumulative total compared to the same point in the previous year (value between 0 and 100).

Data from 2021 is used as a baseline for calculating the growth rates but is not included in the final output. The percentages are expressed as numeric values between 0 and 100, without the "%" symbol..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'CITY_LEGISLATION': {'CITY_LEGISLATION': ['ALIENS', 'ALIENS_DETAILS', 'ALIENS_LOCATION', 'ALIEN_DATA', 'CITIES', 'CITIES_COUNTRIES', 'CITIES_CURRENCIES', 'CITIES_LANGUAGES', 'JOB_COMPANY', 'JOB_POSTINGS_FACT', 'LEGISLATION_DATE_DIM', 'LEGISLATORS', 'LEGISLATORS_TERMS', 'SKILLS_DIM', 'SKILLS_JOB_DIM']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-21 15:26:54 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 15:26:54 - root - INFO - ```sql
WITH monthly_totals AS (
    SELECT
        EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Year",
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Month_number",
        CASE
            WHEN EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) = 4 THEN 'April'
            WHEN EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) = 5 THEN 'May'
            WHEN EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) = 6 THEN 'June'
        END AS "Month",
        COUNT(*) AS "Total_cities_added"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4, 5, 6)
        AND EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) BETWEEN 2021 AND 2023
    GROUP BY
        EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')),
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD'))
),
monthly_totals_with_cumulative AS (
    SELECT
        "Year",
        "Month_number",
        "Month",
        "Total_cities_added",
        SUM("Total_cities_added") OVER (PARTITION BY "Year" ORDER BY "Month_number") AS "Running_cumulative_total"
    FROM monthly_totals
),
final_data AS (
    SELECT
        mt."Year",
        mt."Month_number",
        mt."Month",
        mt."Total_cities_added",
        mt."Running_cumulative_total",
        pmt."Total_cities_added" AS "Prior_year_total_cities_added",
        pmt."Running_cumulative_total" AS "Prior_year_running_cumulative_total"
    FROM monthly_totals_with_cumulative mt
    LEFT JOIN monthly_totals_with_cumulative pmt
        ON mt."Year" = pmt."Year" + 1
        AND mt."Month_number" = pmt."Month_number"
)
SELECT
    "Year",
    "Month",
    "Total_cities_added",
    "Running_cumulative_total",
    ROUND(
        CASE
            WHEN "Prior_year_total_cities_added" IS NOT NULL AND "Prior_year_total_cities_added" <> 0 THEN
                (("Total_cities_added" - "Prior_year_total_cities_added") / "Prior_year_total_cities_added") * 100
            ELSE NULL
        END, 4) AS "YoY_monthly_growth",
    ROUND(
        CASE
            WHEN "Prior_year_running_cumulative_total" IS NOT NULL AND "Prior_year_running_cumulative_total" <> 0 THEN
                (("Running_cumulative_total" - "Prior_year_running_cumulative_total") / "Prior_year_running_cumulative_total") * 100
            ELSE NULL
        END, 4) AS "YoY_running_total_growth"
FROM final_data
WHERE "Year" IN (2022, 2023)
ORDER BY "Year", "Month_number";
```
2025-01-21 15:26:54 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:26:54 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:26:54 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:26:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 6
2025-01-21 15:26:55 - snowflake.connector.connection - INFO - closed
2025-01-21 15:26:56 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:26:56 - root - INFO - itercount: 1
2025-01-21 15:26:56 - root - INFO - 0
2025-01-21 15:26:56 - root - INFO - results: 
Year,Month,Total_cities_added,Running_cumulative_total,YoY_monthly_growth,YoY_running_total_growth
2022,April,1437,1437,-4.7082,-4.7082
2022,May,1459,2896,-3.3135,-4.0106
2022,June,1411,4307,1.1470,-2.3799
2023,April,1402,1402,-2.4356,-2.4356
2023,May,1389,2791,-4.7978,-3.6257
2023,June,1432,4223,1.4883,-1.9503


2025-01-21 15:26:56 - root - INFO - Please check the answer again by reviewing Calculate the number of new cities inserted each April, May, and June, along with the year-over-year growth percentage for each month from 2021-2023. List the year, month, the total number of cities added, the running cumulative total, and the year-over-year growth percentage (including "%") for both the monthly total and the running total. Ensure that 2021 data is used only as a baseline for calculating growth rates, and exclude it from the final output., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
Year,Month,Total_cities_added,Running_cumulative_total,YoY_monthly_growth,YoY_running_total_growth
2022,April,total_cities:int,running_total:int,monthly_growth:0<=float<=100,running_growth:0<=float<=100
2022,May,total_cities:int,running_total:int,monthly_growth:0<=float<=100,running_growth:0<=float<=100
2022,June,total_cities:int,running_total:int,monthly_growth:0<=float<=100,running_growth:0<=float<=100
2023,April,total_cities:int,running_total:int,monthly_growth:0<=float<=100,running_growth:0<=float<=100
2023,May,total_cities:int,running_total:int,monthly_growth:0<=float<=100,running_growth:0<=float<=100
2023,June,total_cities:int,running_total:int,monthly_growth:0<=float<=100,running_growth:0<=float<=100
```

**Explanation:**

The table displays the number of new cities added in April, May, and June for the years 2022 and 2023. It includes:

- **Year**: The year when the cities were added.
- **Month**: The month when the cities were added.
- **Total_cities_added**: The total number of cities added in that month (`int`).
- **Running_cumulative_total**: The cumulative total number of cities added up to and including that month (`int`).
- **YoY_monthly_growth**: The year-over-year growth percentage for the monthly total compared to the same month in the previous year (value between 0 and 100).
- **YoY_running_total_growth**: The year-over-year growth percentage for the running cumulative total compared to the same point in the previous year (value between 0 and 100).

Data from 2021 is used as a baseline for calculating the growth rates but is not included in the final output. The percentages are expressed as numeric values between 0 and 100, without the "%" symbol. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Year,Month,Total_cities_added,Running_cumulative_total,YoY_monthly_growth,YoY_running_total_growth
2022,April,1437,1437,-4.7082,-4.7082
2022,May,1459,2896,-3.3135,-4.0106
2022,June,1411,4307,1.1470,-2.3799
2023,April,1402,1402,-2.4356,-2.4356
2023,May,1389,2791,-4.7978,-3.6257
2023,June,1432,4223,1.4883,-1.9503
Current sql:
WITH monthly_totals AS (
    SELECT
        EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Year",
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Month_number",
        CASE
            WHEN EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) = 4 THEN 'April'
            WHEN EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) = 5 THEN 'May'
            WHEN EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) = 6 THEN 'June'
        END AS "Month",
        COUNT(*) AS "Total_cities_added"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4, 5, 6)
        AND EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) BETWEEN 2021 AND 2023
    GROUP BY
        EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')),
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD'))
),
monthly_totals_with_cumulative AS (
    SELECT
        "Year",
        "Month_number",
        "Month",
        "Total_cities_added",
        SUM("Total_cities_added") OVER (PARTITION BY "Year" ORDER BY "Month_number") AS "Running_cumulative_total"
    FROM monthly_totals
),
final_data AS (
    SELECT
        mt."Year",
        mt."Month_number",
        mt."Month",
        mt."Total_cities_added",
        mt."Running_cumulative_total",
        pmt."Total_cities_added" AS "Prior_year_total_cities_added",
        pmt."Running_cumulative_total" AS "Prior_year_running_cumulative_total"
    FROM monthly_totals_with_cumulative mt
    LEFT JOIN monthly_totals_with_cumulative pmt
        ON mt."Year" = pmt."Year" + 1
        AND mt."Month_number" = pmt."Month_number"
)
SELECT
    "Year",
    "Month",
    "Total_cities_added",
    "Running_cumulative_total",
    ROUND(
        CASE
            WHEN "Prior_year_total_cities_added" IS NOT NULL AND "Prior_year_total_cities_added" <> 0 THEN
                (("Total_cities_added" - "Prior_year_total_cities_added") / "Prior_year_total_cities_added") * 100
            ELSE NULL
        END, 4) AS "YoY_monthly_growth",
    ROUND(
        CASE
            WHEN "Prior_year_running_cumulative_total" IS NOT NULL AND "Prior_year_running_cumulative_total" <> 0 THEN
                (("Running_cumulative_total" - "Prior_year_running_cumulative_total") / "Prior_year_running_cumulative_total") * 100
            ELSE NULL
        END, 4) AS "YoY_running_total_growth"
FROM final_data
WHERE "Year" IN (2022, 2023)
ORDER BY "Year", "Month_number";
2025-01-21 15:27:24 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 15:27:24 - root - INFO - ```sql
WITH monthly_totals AS (
    SELECT
        EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Year",
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Month_number",
        CASE
            WHEN EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) = 4 THEN 'April'
            WHEN EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) = 5 THEN 'May'
            WHEN EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) = 6 THEN 'June'
        END AS "Month",
        COUNT(*) AS "Total_cities_added"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4, 5, 6)
        AND EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) BETWEEN 2021 AND 2023
    GROUP BY
        EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')),
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD'))
),
monthly_totals_with_cumulative AS (
    SELECT
        "Year",
        "Month_number",
        "Month",
        "Total_cities_added",
        SUM("Total_cities_added") OVER (PARTITION BY "Year" ORDER BY "Month_number") AS "Running_cumulative_total"
    FROM monthly_totals
),
final_data AS (
    SELECT
        mt."Year",
        mt."Month_number",
        mt."Month",
        mt."Total_cities_added",
        mt."Running_cumulative_total",
        pmt."Total_cities_added" AS "Prior_year_total_cities_added",
        pmt."Running_cumulative_total" AS "Prior_year_running_cumulative_total"
    FROM monthly_totals_with_cumulative mt
    LEFT JOIN monthly_totals_with_cumulative pmt
        ON mt."Year" = pmt."Year" + 1
        AND mt."Month_number" = pmt."Month_number"
)
SELECT
    "Year",
    "Month",
    "Total_cities_added",
    "Running_cumulative_total",
    ROUND(
        CASE
            WHEN "Prior_year_total_cities_added" IS NOT NULL AND "Prior_year_total_cities_added" <> 0 THEN
                (("Total_cities_added" - "Prior_year_total_cities_added") / "Prior_year_total_cities_added") * 100
            ELSE NULL
        END, 4) AS "YoY_monthly_growth",
    ROUND(
        CASE
            WHEN "Prior_year_running_cumulative_total" IS NOT NULL AND "Prior_year_running_cumulative_total" <> 0 THEN
                (("Running_cumulative_total" - "Prior_year_running_cumulative_total") / "Prior_year_running_cumulative_total") * 100
            ELSE NULL
        END, 4) AS "YoY_running_total_growth"
FROM final_data
WHERE "Year" IN (2022, 2023)
ORDER BY "Year", "Month_number";
```
2025-01-21 15:27:24 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 15:27:24 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 15:27:24 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 15:27:25 - snowflake.connector.cursor - INFO - Number of results in first chunk: 6
2025-01-21 15:27:25 - snowflake.connector.connection - INFO - closed
2025-01-21 15:27:25 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 15:27:26 - root - INFO - itercount: 2
2025-01-21 15:27:26 - root - INFO - 0
2025-01-21 15:27:26 - root - INFO - Total iteration counts: 2
