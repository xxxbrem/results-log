2025-02-12 02:30:25 - openai._base_client - INFO - Retrying request to /chat/completions in 0.402864 seconds
2025-02-12 02:31:57 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:31:57 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:31:57 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:31:57 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:31:59 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-02-12 02:31:59 - snowflake.connector.connection - INFO - closed
2025-02-12 02:31:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:32:52 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:32:52 - root - INFO - ```sql
SELECT z."zip_code",
       SUM(t."total_pop") AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 1) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(TO_GEOGRAPHY(g."tract_geom"), TO_GEOGRAPHY(z."zip_code_geom"))
WHERE ST_DISTANCE(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY('POINT(-122.191667 47.685833)')) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC
LIMIT 100;
```
2025-02-12 02:32:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:32:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:32:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:32:57 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-02-12 02:32:57 - snowflake.connector.connection - INFO - closed
2025-02-12 02:32:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:34:28 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:34:28 - root - INFO - SQL:
SELECT z."zip_code",
       SUM(t."total_pop") AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 1) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(TO_GEOGRAPHY(g."tract_geom"), TO_GEOGRAPHY(z."zip_code_geom"))
WHERE ST_DISTANCE(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY('POINT(-122.191667 47.685833)')) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC
LIMIT 100;
Results:
zip_code,Total_Population,Average_Individual_Income
98039,59736.0,85829.7
98004,61243.0,78706.5
98112,70005.0,75368.2
98033,101279.0,65541.9
98053,55334.0,62431.8
98052,118468.0,57338.8
98105,95215.0,57017.1
98115,117399.0,56185.1
98034,108880.0,54120.7
98008,79885.0,53738.1
98005,65974.0,53685.3
98072,97706.0,52644.7
98028,61503.0,49984.2
98007,77098.0,49464.1
98011,89173.0,46576.4
98125,83754.0,46287.7
98155,100677.0,41681.6

2025-02-12 02:34:28 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:34:28 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:34:28 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:34:29 - snowflake.connector.cursor - INFO - Number of results in first chunk: 4
2025-02-12 02:34:31 - snowflake.connector.connection - INFO - closed
2025-02-12 02:34:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:34:31 - root - INFO - SQL:
-- Query 2: Retrieve geometry data for census tracts in Washington State
SELECT "geo_id", "tract_geom"
FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
LIMIT 100
Results:
Too long, hard cut:
geo_id,tract_geom
53073000100,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\xb9\x02\x00\x00dc^G\x1c\x9f^\xc0\xfd\xa3o\xd24dH@A\x81w\xf2\xe9\x9e^\xc0\xf8\xfd\x9b\x17\'dH@gb\xba\x10\xab\x9e^\xc0~\x8f\xfa\xeb\x15dH@\xa1\xd8\n\x9a\x96\x9e^\xc0v\xe5\xb3<\x0fdH@\xc4wb\xd6\x8b\x9e^\xc06\x92\x04\xe1\ndH@\xbe\x83\x9f8\x80\x9e^\xc0\'\xf7;\x14\x05dH@\x11\xa7\x93lu\x9e^\xc0H\xe0\x0f?\xffcH@\xc6\xa5*mq\x9e^\xc0\x9c\xa2#\xb9\xfccH@\x1c\x82\xe32n\x9e^\xc0&\xa6\x0b\xb1\xfacH@\x87l ]l\x9e^\xc0\xb6f+/\xf9cH@\x89\xd1s\x0b]\x9e^\xc0\x9f!\x1c\xb3\xeccH@\xdc\x0e\r\x8bQ\x9e^\xc0\t\x87\xde\xe2\xe1cH@\x97L\x15\x8cJ\x9e^\xc0\x199\x0b{\xdacH@\xc2\xa8\xa4N@\x9e^\xc0D\xe3\x89 \xcecH@7 B\\9\x9e^\xc0\xb9\xc2\xbb\\\xc4cH@\xca\xb0\x8a72\x9e^\xc0\xc5\x1fE\x9d\xb9cH@B\xe5_\xcb+\x9e^\xc0\xd0|\xce\xdd\xaecH@u\x05\xdb\x88\'\x9e^\xc03\x89z\xc1\xa7cH@\xf09\xb0\x1c!\x9e^\xc0E\xd7\x85\x1f\x9ccH@\x98\xd8|\\\x1b\x9e^\xc0\xbb\xb6\xb7[\x92cH@U\xfc\xdf\x11\x15\x9e^\xc08\x87k\xb5\x87cH@\x98\x1cwJ\x07\x9e^\xc0P\xa9\x12eocH@$\x9fW<\xf5\x9d^\xc0r\x8cd\x8fPcH@\xf9\x86\xc2g\xeb\x9d^\xc0b\xa0k_@cH@-\xf5,\x08\xe5\x9d^\xc0\xc8H\xf6\x085cH@\xb7&\xdd\x96\xc8\x9d^\xc0dw\x81\x92\x02cH@5|\x0b\xeb\xc6\x9d^\xc0\x06\xd7\xdc\xd1\xffbH@\xcf\x17{/\xbe\x9d^\xc0z\x95\xb5M\xf1bH@\xb3\xe8\x9d\n\xb8\x9d^\xc0\xe3.\xc2\x14\xe5bH@\xac>W[\xb1\x9d^\xc0p}Xo\xd4bH@%?\xe2W\xac\x9d^\xc0Bx\xb4q\xc4bH@\xc8\xd2\x87.\xa8\x9d^\xc0\x8c\x0b\x07B\xb2bH@\xa3C\xe0H\xa0\x9d^\xc0\xad\x11\xc18\xb8bH@\x87\xfa]\xd8\x9a\x9d^\xc09\x02\xb8Y\xbcbH@\x82T\x8a\x1d\x8d\x9d^\xc05\x96\xb06\xc6bH@\xbd\x83\x9f8\x80\x9d^\xc0\xef:\x1b\xf2\xcfbH@\xb0\xe5\x95\xebm\x9d^\xc0A~6r\xddbH@4,F]k\x9d^\xc0v\x8b\xc0X\xdfbH@\x93\x8f\xdd\x05J\x9d^\xc0\x93\xaa\xed&\xf8bH@D\x81>\x91\'\x9d^\xc0\xa9\xd8\x98\xd7\x11cH@\x03\x07\xb4t\x05\x9d^\xc0=((E+cH@&r\xc1\x19\xfc\x9c^\xc0i\xa8QH2cH@%\xb3z\x87\xdb\x9c^\xc0\x03\xe9b\xd3JcH@\xe6ypw\xd6\x9c^\xc0m7\xc17McH@\x9d\xf7\xffq\xc2\x9c^\xc0\x05n\xdd\xcdScH@\xb8W\xe6\xad\xba\x9c^\xc0\x86\xe4d\xe2VcH@_{fI\x80\x9c^\xc0\xa5\x9fpvkcH@\xf4\x19PoF\x9c^\xc0\xb4\xef\x8a\xe0\x7fcH@ts\xf1\xb7=\x9c^\xc0^\xf9,\xcf\x83cH@Nb\x10X9\x9c^\xc0\xd9\xb2|]\x86cH@\x10C\xab\x933\x9c^\xc0\xb9\xfd\xf2\xc9\x8acH@\xfd2\x18#\x12\x9c^\xc0\x03\xd1\x932\xa9cH@\'\xc0\xb0\xfc\xf9\x9b^\xc0o\xf5\x9c\xf4\xbecH@\xf6\xad\xd6\x89\xcb\x9b^\xc0\x95\x0fA\xd5\xe8cH@\xc6\xff\x1dQ\xa1\x9b^\xc0\xe1\x9b\xa6\xcf\x0edH@(\xa45\x06\x9d\x9b^\xc0\x9e\x10:\xe8\x12dH@\x8f9\xcf\xd8\x97\x9b^\xc0\xa6\xee\xca.\x18dH@\x03\x97\xc7\x9a\x91\x9b^\xc0\x97<\x9e\x96\x1fdH@.\x92v\xa3\x8f\x9b^\xc0w\xbb^\x9a""dH@^J]2\x8e\x9b^\xc0\xce\x9e\xcb\xd4$dH@\xd1?\xc1\xc5\x8a\x9b^\xc08\x85\x95\n*dH@\\]N\t\x88\x9b^\xc0\x95\xf1\xef3.dH@\x8e\xcb\xb8\xa9\x81\x9b^\xc0\x90\x85\xe8\x108dH@Y\x91\xd1\x01I\x9b^\xc0R\x82\xfeB\x8fdH@\xfb\xf0,AF\x9b^\xc0 b\x83\x85\x93dH@\x1f/\xa4\xc3C\x9b^\xc0Y\xf8\xfaZ\x97dH@\xbaf\xf2\xcd6\x9b^\xc0\x02\x83\xa4O\xabdH@\xa3b\x9c\xbf\t\x9b^\xc0%;6\x02\xf1dH@\xfc\xc7Bt\x08\x9b^\xc0\xca\xbb\xea\x01\xf3dH@\x1eM\xf5d\xfe\x9a^\xc0dw\x81\x92\x02eH@D\x8bl\xe7\xfb\x9a^\xc0\x80\xf4M\x9a\x06eH@\xc7\x83-v\xfb\x9a^\xc0g\x98\xdaR\x07eH@\xdaV\xb3\xce\xf8\x9a^\xc0X\xe6\xad\xba\x0eeH@\xd7O\xffY\xf3\x9a^\xc0${\x84\x9a!eH@~R\xed\xd3\xf1\x9a^\xc0.Y\x15\xe1&eH@\xb0\x8c\r\xdd\xec\x9a^\xc0\xf0\xa7\xc6K7eH@\x04\x1b\xd7\xbf\xeb\x9a^\xc0\x17\xd3L\xf7:eH@\x9b\x98.\xc4\xea\x9a^\xc0(\n\xf4\x89<eH@\xbc\x03<i\xe1\x9a^\xc0\xeb\x8c\xef\x8bKeH@&\xcd\x1f\xd3\xda\x9a^\xc0\xce\xc4t!VeH@V\x9f\xab\xad\xd8\x9a^\xc0\xfb\xe0|\xeaXeH@9\xcem\xc2\xbd\x9a^\xc0\x97r\xbe\xd8{eH@\x8a!9\x99\xb8\x9a^\xc0-\xa9\xdan\x82eH@\xe0K\xe1A\xb3\x9a^\xc0 B\\9{eH@]\xcbd8\x9e\x9a^\xc0\x13&\x8cfeeH@\x19W\\\x1c\x95\x9a^\xc0\xad\xdb\xa0\xf6[eH@Yd;\xdfO\x9a^\xc0\x98m\xa7\xad\x11eH@\x05\x00\xc7\x9e=\x9a^\xc0\x9f\xf0\x12\x9c\xfadH@\x07h[\xcd:\x9a^\xc09+\xa2&\xfadH@\x08\xb6J\xb08\x9a^\xc0\x16\xbdS\x01\xf7dH@P\x96Z\xef7\x9a^\xc0\xc0\r1^\xf3dH@\xbb\x80\x97\x196\x9a^\xc0\x87\xc2g\xeb\xe0dH@!zR&5\x9a^\xc0\xd1>V\xf0\xdbdH@\x92!\xc7\xd63\x9a^\xc0\xe5E&\xe0\xd7dH@:X\xff\xe70\x9a^\xc0\xda\xff\x00k\xd5dH@\xf0<\xf1\x9c-\x9a^\xc0\x1d#\xd9#\xd4dH@s5\xb2+-\x9a^\xc0\x00\n.V\xd4dH@\x86\x088\x84*\x9a^\xc0\n\x84\x9db\xd5dH@V\xd2\x8ao(\x9a^\xc0\xd4\xda4\xb6\xd7dH@\x11@j\x13\'\x9a^\xc0\x12.\xe4\x11\xdcdH@\x87\x8aq\xfe&\x9a^\xc0R\x81\x93m\xe0dH@\xea\x96\x1d\xe2\x1f\x9a^\xc0\xcd\x1d\xfd/\xd7dH@\x90\x15\xfc6\xc4\x99^\xc0\xc7\x8b\x85!rdH@K\xb7%r\xc1\x99^\xc0D\x15\xfe\x0codH@\xfa\xec\x80\xeb\x8a\x99^\xc0\xe8\xfa>\x1c$dH@ D2\xe4\xd8\x98^\xc0\x1d\xd0\xd2\x15lcH@\n\xf1H\xbc<\x98^\xc0\xb6\xd8\xed\xb3\xcabH@\x14\rR\xf0\x14\x98^\xc0\xcb7\xdb\xdc\x98bH@iUK:\xca\x97^\xc0S\xd4\x99{HbH@,\x9d\x0f\xcf\x12\x97^\xc0\x16Mg\'\x83aH@\xf2\x07\x03\xcf\xbd\x96^\xc0\x86p\xcc\xb2\'aH@\x0c\x04\x012t\x96^\xc0\x08\x1c\t4\xd8`H@\xca\x8f\xf8\x15k\x96^\xc0\xae\x7f\xd7g\xce`H@c\x9a\xe9^\'\x96^\xc0\xc3\xa4\xf8\xf8\x84`H@\xd9_vO\x1e\x96^\xc0}\xce\xdd\xae\x97`H@j\x9f\x8e\xc7\x0c\x96^\xc0\x0b\x03\x96\\\xc5`H@3\x8bPl\x05\x96^\xc0\x8e\xcaM\xd4\xd2`H@\xf2\x81\x1d\xff\x05\x96^\xc0\x19p\x96\x92\xe5`H@\x1a\xe1\xedA\x08\x96^\xc0R\xd2\xc3\xd0\xea`H@\x1a\xe1\xedA\x08\x96^\xc0\xd5\x1e

2025-02-12 02:34:31 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:34:31 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:34:31 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:34:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-02-12 02:34:36 - snowflake.connector.connection - INFO - closed
2025-02-12 02:34:36 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:34:36 - root - INFO - SQL:
-- Query 3: Select ZIP codes and their geometries in Washington State
SELECT "zip_code", "zip_code_geom"
FROM "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES"
WHERE "state_fips_code" = '53'
LIMIT 100
Results:
Too long, hard cut:
zip_code,zip_code_geom
98840,"bytearray(b'\x01\x03\x00\x00\x00\x02\x00\x00\x00F#\x00\x00\x1d\xb5P29\xfd]\xc0\x93/h!\x01GH@\xa56\xff\xaf:\xfd]\xc0~R\xed\xd3\xf1FH@g\xbe\x83\x9f8\xfd]\xc0\xf7\x01Hm\xe2FH@\xce\xe8G\xc3)\xfd]\xc0\xab*4\x10\xcbFH@U\xe5{F""\xfd]\xc0\x00\xa0\x8a\x1b\xb7FH@\x81\xd5\x1fa\x18\xfd]\xc0<0\x80\xf0\xa1FH@\xb1KTo\r\xfd]\xc0\x9b27\xdf\x88FH@A\xbbC\x8a\x01\xfd]\xc0_\xc6\x14\xacqFH@\xf9\xfc\xbe\x7f\xf3\xfc]\xc0\xdaE\x98\xa2\\FH@c.7\x18\xea\xfc]\xc0\x01~\x8d$AFH@~@.q\xe4\xfc]\xc0\xb0\x85 \x07%FH@\x03\xd5\xcd\xc5\xdf\xfc]\xc0\x89T\x18[\x08FH@\xe3u\xfd\x82\xdd\xfc]\xc0\x8eo\xef\x1a\xf4EH@\xd0\xfb\x8dv\xdc\xfc]\xc0\xb5\xb1\xd9\x91\xeaEH@\xfa\xc2\xf2\xe7\xdb\xfc]\xc0\xb0\x01\x11\xe2\xcaEH@\x9d\xfd\x81r\xdb\xfc]\xc0\x11U\xf83\xbcEH@\xc0\xed\t\x12\xdb\xfc]\xc0~&\xc2\x86\xa7EH@\xe8q\xa6\t\xdb\xfc]\xc0n\xd24(\x9aEH@!\xd1\x92\xc7\xd3\xfc]\xc0\xc0""\xbf~\x88EH@\xd0\xb9\xdb\xf5\xd2\xfc]\xc0\x19\xa2\n\x7f\x86EH@\x91\x80\xd1\xe5\xcd\xfc]\xc0\xcc\x1b\'\x85yEH@8tA}\xcb\xfc]\xc0\xf9\xb2\xb4SsEH@\x80TQ\xbc\xca\xfc]\xc0\xebb\x9a\xe9^EH@;\xa4\x18 \xd1\xfc]\xc07*7QKEH@\x95\x92\xac\xc3\xd1\xfc]\xc0@\xb7\x974FEH@-e\xa7\x1f\xd4\xfc]\xc0\xd8\xe71\xca3EH@\x1c\t4\xd8\xd4\xfc]\xc0!\xfc\x8b\xa01EH@\xa4p=\n\xd7\xfc]\xc0\x9a0a4+EH@t\xd2\xfb\xc6\xd7\xfc]\xc0\xb4\xc0\x1e\x13)EH@\x85\xfa$w\xd8\xfc]\xc0\xa6Y\xa0\xdd!EH@\x8b\xe0\x7f+\xd9\xfc]\xc0\xf7\xfaZ\x97\x1aEH@\x98\xc2\x83f\xd7\xfc]\xc0&.\xc7+\x10EH@\xaf\x0fy\xcb\xd5\xfc]\xc0\x15\xf7\x1f\x99\x0eEH@S\xb2\x9c\x84\xd2\xfc]\xc0$\rnk\x0bEH@\xc3d8\x9e\xcf\xfc]\xc0\xd8\x0b\x05l\x07EH@\x0c\xe9\xf0\x10\xc6\xfc]\xc0\xda\xdb-\xc9\x01EH@\x88/\xa1\x82\xc3\xfc]\xc0l\x9cMG\x00EH@\x95\xcf\xf2<\xb8\xfc]\xc0\xb0\xf7\xe2\x8b\xf6DH@;\xa9\xbd\x88\xb6\xfc]\xc0\xc0\xa9\x0f$\xefDH@]\'\xbc\x04\xa7\xfc]\xc0\xe1\xbc8\xf1\xd5DH@R\xd6o&\xa6\xfc]\xc0\x86\xd9\xcb\xb6\xd3DH@iy\x1e\xdc\x9d\xfc]\xc0\xf2\xed]\x83\xbeDH@y\xef6o\x9c\xfc]\xc06\x0b\xb4;\xa4DH@D\xc8\x07=\x9b\xfc]\xc0\x8d\xd1:\xaa\x9aDH@\x98V\xd1\x1f\x9a\xfc]\xc0\x8aL\xc0\xaf\x91DH@v\x9a\x93\x17\x99\xfc]\xc0\xd3\xf2\x03WyDH@TUh \x96\xfc]\xc0O\xa6\xd1\xe4bDH@\x95i\xc2\xf6\x93\xfc]\xc0\xd7\xd3\x0e\x7fMDH@\xb6a\x14\x04\x8f\xfc]\xc0\xf9;\xdb\xa37DH@\xb8\x95^\x9b\x8d\xfc]\xc0\xafn\xbc;2DH@\x8b\xe1\xea\x00\x88\xfc]\xc0\x869A\x9b\x1cDH@\x86I\x7f/\x85\xfc]\xc0\x13u\xe6\x1e\x12DH@wzl\xcb\x80\xfc]\xc0\x94\x15\xc3\xd5\x01DH@\x8bv\x15R~\xfc]\xc0\xe3\x823\xf8\xfbCH@\xc2\xac\xde\xe1v\xfc]\xc04\xd3\xbdN\xeaCH@\xd3\xbbx?n\xfc]\xc0\x01\x11\xe2\xca\xd9CH@r\xeb\xfc\xdbe\xfc]\xc0\xd4\x0b>\xcd\xc9CH@\xb4B\x1f,c\xfc]\xc0_\xab\x04\x8b\xc3CH@\x1f\x83\x15\xa7Z\xfc]\xc0\xf9\x0f\xe9\xb7\xafCH@D\xa7\xe7\xddX\xfc]\xc0[\xb4\x00m\xabCH@\xf1W\x8f\xfbV\xfc]\xc0\n\xf6_\xe7\xa6CH@<\xe3\xfb\xe2R\xfc]\xc0\xdeu6\xe4\x9fCH@\x1e\xef\x1c\xcaP\xfc]\xc0UBwI\x9cCH@awH1@\xfc]\xc0( \xed\x7f\x80CH@ w\x11\xa6(\xfc]\xc0\xe2m\xa5\xd7fCH@\xf4\xad\x9d(\t\xfc]\xc0\xad\xa1\xd4^DCH@\xec\x8a\x19\xe1\xed\xfb]\xc0H\xd6\xe1\xe8*CH@\x89D\xa1e\xdd\xfb]\xc0\x8b\xf37\xa1\x10CH@\xda\xfc\xbf\xea\xc8\xfb]\xc0N6\xe5\n\xefBH@\x8a!9\x99\xb8\xfb]\xc06\xe7\xe0\x99\xd0BH@\x8cJxB\xaf\xfb]\xc0\xf8Ft\xcf\xbaBH@\xad\xff\x01\xd6\xaa\xfb]\xc0iin\x85\xb0BH@+8J^\x9d\xfb]\xc0K\x16\xf7\x1f\x99BH@k\xa2]\x85\x94\xfb]\xc0qk\xd2m\x89BH@#\x8b\xc2.\x8a\xfb]\xc0C\xadi\xdeqBH@b\xfd\x9f\xc3|\xfb]\xc0\xa6\xd0y\x8d]BH@I6W\xcds\xfb]\xc0\xd3\xcf\x9b\x8aTBH@\xbcg\xeb\xe0`\xfb]\xc0\xc74\xd3\xbdNBH@5\xef8EG\xfb]\xc0\x93\xc3\'\x9dHBH@\x94\xe2qQ-\xfb]\xc0\x94_\x06cDBH@\x96\x80\x98\x84\x0b\xfb]\xc07\xbfa\xa2ABH@~\x1e\xa3<\xf3\xfa]\xc0\x83\x0by\x047BH@-\xbb`p\xcd\xfa]\xc0\x8d\xaf=\xb3$BH@. \xb4\x1e\xbe\xfa]\xc0\xad\x13\x97\xe3\x15BH@s\xf6\xceh\xab\xfa]\xc0\xdfJvl\x04BH@\x87\x1f*\x8d\x98\xfa]\xc0\xd5\x1b\xb5\xc2\xf4AH@\x8f\xb1\x13^\x82\xfa]\xc0\xf5\x96r\xbe\xd8AH@\x83\x17}\x05i\xfa]\xc0XiR\n\xbaAH@0\xdf\x88\xeeY\xfa]\xc0\x9c\xba\xf2Y\x9eAH@\xf3\n\xd2\x8cE\xfa]\xc0\xbb\x01f\xbe\x83AH@\x11\x7f\xdb\x13$\xfa]\xc0e\xde\xaa\xebPAH@\x0c\xb1\xfa#\x0c\xfa]\xc0\x8a\x16\xa0m5AH@\xe4Y\x10\xca\xfb\xf9]\xc0\xc3>\x01\x14#AH@3\x0e\xbcZ\xee\xf9]\xc0\x1b\xe8\xa1\xb6\rAH@\xbek\xd0\x97\xde\xf9]\xc0\xf1\x16HP\xfc@H@\xbf\xdbJ\xaf\xcd\xf9]\xc0\xc7\xce\xdb\xd8\xec@H@J9_\xec\xbd\xf9]\xc0\xa2""N\'\xd9@H@D\x02\xd4\xd4\xb2\xf9]\xc0\x01\xbdp\xe7\xc2@H@\xf6\xdf\x11\x15\xaa\xf9]\xc0\xb7:\x00\xe2\xae@H@\xe9K\xfd\xbc\xa9\xf9]\xc00\x9f\xac\x18\xae@H@\xacz\x87\xdb\xa1\xf9]\xc0m\x84EE\x9c@H@\x81\t\xdc\xba\x9b\xf9]\xc0\xe7\xcf~\xa4\x88@H@\xd1(]\xfa\x97\xf9]\xc0\x8d\xae\xd2\xddu@H@8\xa4Q\x81\x93\xf9]\xc0H\x19q\x01h@H@|c\x08\x00\x8e\xf9]\xc0\xd9$?\xe2W@H@m\xb9\xc1P\x87\xf9]\xc0\x89I\xb8\x90G@H@1\x11o\x9d\x7f\xf9]\xc0U\xefp;4@H@\nsI\xd5v\xf9]\xc0D3O\xae)@H@\x88R{\x11m\xf9]\xc0\x06|~\x18!@H@\xe1\xda\x17\xd0\x0b\xf9]\xc0W\x8c\xba\xd6\xde?H@\xfd\x1c\x1f-\xce\xf8]\xc0F\xd0\x98I\xd4?H@\x07_\x98L\x15\xf8]\xc0\xdd\x17\x97\xaa\xb4?H@\x04_\xd1\xad\xd7\xf7]\xc0\x9d\xd7\xd8%\xaa?H@DQ\xa0O\xe4\xf7]\xc0\x87c]\xdcF?H@C%<\xa1\xd7\xf7]\xc0\xab\xe2\x8d\xcc#?H@\x91qS\x03\xcd\xf7]\xc0\xe6l\x01\xa1\xf5>H@\xf0\x1d5&\xc4\xf7]\xc0\x15\xf8\x8an\xbd>H@V\xdd#\x9b\xab\xf7]\xc0\xb4 \x94\xf7q>H@!CUL\xa5\xf7]\xc0{\

2025-02-12 02:34:36 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:34:36 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:34:36 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:34:42 - snowflake.connector.cursor - INFO - Number of results in first chunk: 13
2025-02-12 02:34:43 - snowflake.connector.connection - INFO - closed
2025-02-12 02:34:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:34:43 - root - INFO - SQL:
-- Query 4: Find ZIP codes within a 5-mile radius of the specified point
SELECT "zip_code", "zip_code_geom"
FROM "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES"
WHERE ST_Distance(
  ST_GeogFromWKB("zip_code_geom"),
  ST_GeographyFromText('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
LIMIT 100
Results:
Too long, hard cut:
zip_code,zip_code_geom
98028,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\xb4\x01\x00\x00\xe1g\xeau\x8b\x91^\xc0\xd5n\xbb\xd0\\\xdfG@\xcd\r\x86:\xac\x91^\xc0:\x19\x1c%\xaf\xdeG@\xbfOU\xa1\x81\x91^\xc0\xbc?\xde\xabV\xdeG@\xb7\xbe\xd6\xa5F\x91^\xc0t\xab\xe7\xa4\xf7\xddG@l\x80`\x8e\x1e\x91^\xc0&\xdaUH\xf9\xddG@\xca\xaf\xad\x9f\xfe\x90^\xc0\xb42\xe1\x97\xfa\xddG@A\x9e]\xbe\xf5\x90^\xc07\x11\xfd\xda\xfa\xddG@f\xe7\xfb\xa9\xf1\x90^\xc0uCSv\xfa\xddG@\x1dN\'\xd9\xea\x90^\xc0\xfb\x12\xf1\xd6\xf9\xddG@\xb6\x1a\xa04\xd4\x90^\xc0D\'K\xad\xf7\xddG@\x9egz\x89\xb1\x90^\xc0\x12N\x0b^\xf4\xddG@\x9egz\x89\xb1\x90^\xc0\xae\x81\xad\x12,\xdeG@\xb8\xa1\xf0\xd9:\x90^\xc0xt#,*\xdeG@\xef\xfc\xa2\x04\xfd\x8f^\xc0\r\xf2z0)\xdeG@t\x9f\xaaB\x03\x90^\xc0#,*\xe2t\xdeG@<T\xe1\xcf\xf0\x8f^\xc0p\xedDIH\xdeG@\x9e\xd3,\xd0\xee\x8f^\xc0\xca\xd4$xC\xdeG@\x86Z\xd3\xbc\xe3\x8f^\xc0\xeb\x1b\x98\xdc(\xdeG@\xc8}\xabu\xe2\x8f^\xc0;!t\xd0%\xdeG@\xa64)\x05\xdd\x8f^\xc0\xad\xab\x02\xb5\x18\xdeG@\xc1\x89\xe8\xd7\xd6\x8f^\xc0\x19\xad\xa3\xaa\t\xdeG@x/\x85\x07\xcd\x8f^\xc0\xb8j\x9e#\xf2\xddG@Yl\x93\x8a\xc6\x8f^\xc0\xc0\xa6\xce\xa3\xe2\xddG@\xac\xeb\xde\x8a\xc4\x8f^\xc0\xed\t\x12\xdb\xdd\xddG@\xa5\x1c\xcc&\xc0\x8f^\xc0\xec\xb8\xe1w\xd3\xddG@\x1a\x9b\x1d\xa9\xbe\x8f^\xc0\xd6\xf8L\xf6\xcf\xddG@s\xc5\xc5Q\xb9\x8f^\xc0=\xd5!7\xc3\xddG@J\x9a?\xa6\xb5\x8f^\xc0d\x17\x0c\xae\xb9\xddG@\x07\xb6\xd8\xed\xb3\x8f^\xc0\xcc\xac\xa5\x80\xb4\xddG@\xb5u\xfe\xed\xb2\x8f^\xc0Fy\xe6\xe5\xb0\xddG@\x86%\xac\x8d\xb1\x8f^\xc0\xa1\x94\x10\xac\xaa\xddG@\x1c\xa0\xc2\x11\xa4\x8f^\xc0j\xb7]h\xae\xddG@\x18H\xde9\x94\x8f^\xc0\xda\x8e\xa9\xbb\xb2\xddG@\xe5\xa2\xe8\x81\x8f\x8f^\xc0s\x95\xee\xae\xb3\xddG@k,am\x8c\x8f^\xc0\xf6s\n\xf2\xb3\xddG@X\xe6;\xf8\x89\x8f^\xc0\xf6s\n\xf2\xb3\xddG@&\xce\x8a\xa8\x89\x8f^\xc0\xc7\xbb#c\xb5\xddG@\x92\x06\xb7\xb5\x85\x8f^\xc0V\xcdsD\xbe\xddG@\xb7\x01f\xbe\x83\x8f^\xc0kY\xbe.\xc3\xddG@BH\x160\x81\x8f^\xc0\xe4B\xe5_\xcb\xddG@\xe7\x07<0\x80\x8f^\xc0l\xaa\xee\x91\xcd\xddG@\xa6[v\x88\x7f\x8f^\xc0;\xf2\x07\x03\xcf\xddG@\x89g\x97o}\x8f^\xc0\xf2\xa9c\x95\xd2\xddG@\xbbbFx{\x8f^\xc0nc\xb3#\xd5\xddG@&M\x83\xa2y\x8f^\xc0\xa5p=\n\xd7\xddG@\x9e\xbcVBw\x8f^\xc0H\xf1\xf1\t\xd9\xddG@!\xe9ahu\x8f^\xc0\x06\xce\x19Q\xda\xddG@\xe3<\x9c\xc0t\x8f^\xc0\xfa\x1f`\xad\xda\xddG@\xb8\x9a\x03\x04s\x8f^\xc0\x94&\xa5\xa0\xdb\xddG@\xb5\x93O\x8fm\x8f^\xc0\xb2\xd7\xbb?\xde\xddG@\xc5\xd2\xc0\x8fj\x8f^\xc0\xee\xd5\xc7C\xdf\xddG@\xb4\x03\xae+f\x8f^\xc0\x98G\xfe`\xe0\xddG@\xdf\t\x84\x9db\x8f^\xc0\xf7O7P\xe0\xddG@\xe7\xd4\\n0\x8f^\xc0-\xc5Ue\xdf\xddG@Yy\x90\x9e""\x8f^\xc0\x1bZd;\xdf\xddG@\xeaB\xac\xfe\x08\x8f^\xc0\xf8\x83\x81\xe7\xde\xddG@\xc0""M\xbc\x03\x8f^\xc0X\x8c\xba\xd6\xde\xddG@f\xc5pu\x00\x8f^\xc0\xc8\xff\xe4\xef\xde\xddG@\xcd\x8eT\xdf\xf9\x8e^\xc0\xdaj\xd6\x19\xdf\xddG@\x02K\xaeb\xf1\x8e^\xc0\x0c\xefr\x11\xdf\xddG@\xbf\xa2[\xaf\xe9\x8e^\xc0\x88\x10W\xce\xde\xddG@\x9f\xe7O\x1b\xd5\x8e^\xc0\xdc\x9e \xb1\xdd\xddG@15\xd0|\xce\x8e^\xc0\x98\xaf\x92\x8f\xdd\xddG@\xe6\xb7\xe8d\xa9\x8e^\xc0\x83\x87i\xdf\xdc\xddG@@V~\x19\x8c\x8e^\xc05\x1el\xb1\xdb\xddG@e\x0c:!t\x8e^\xc0\xdc\x06\xb5\xdf\xda\xddG@\x1bb\xbc\xe6U\x8e^\xc0B\x00p\xec\xd9\xddG@\x0e\xd9\xce\xf7S\x8e^\xc0q\x84\x0c\xe4\xd9\xddG@\x8d\x11\x17\x80F\x8e^\xc0M\xae)\x90\xd9\xddG@\x11rl=C\x8e^\xc0\xdc:\xffv\xd9\xddG@\xf6\xda\xfa\xe9?\x8e^\xc0=C8f\xd9\xddG@\'\\Va3\x8e^\xc0\xe9\xe8\xb8\x1a\xd9\xddG@\xca\xca/\x831\x8e^\xc0H\xf1\xf1\t\xd9\xddG@\xd7\x9at[""\x8e^\xc0\xf5\x96r\xbe\xd8\xddG@5x_\x95\x0b\x8e^\xc0\x01E,b\xd8\xddG@\xaf^EF\x07\x8e^\xc0aMeQ\xd8\xddG@\x94\xfb\x1d\x8a\x02\x8e^\xc0\x90\xd1\x01I\xd8\xddG@X\x17\xb7\xd1\x00\x8e^\xc0\x90\xd1\x01I\xd8\xddG@\xf9(#.\x00\x8e^\xc0\xe3+\x81\x94\xd8\xddG@\x17B\xce\xfb\xff\x8d^\xc0\xf5\x96r\xbe\xd8\xddG@\xb4|]\x86\xff\x8d^\xc0\x1amU\x12\xd9\xddG@\xfe\xf0\x81\x1d\xff\x8d^\xc0\x8e\x9d\xb7\xb1\xd9\xddG@\xb2m\xdf\xa3\xfe\x8d^\xc0\xa7\xc5\xe0a\xda\xddG@\xaf\xd9\xcaK\xfe\x8d^\xc0T7\x17\x7f\xdb\xddG@M\xa8n.\xfe\x8d^\xc0p\x1cx\xb5\xdc\xddG@~U.T\xfe\x8d^\xc0a\xbb{\x80\xee\xddG@$\xfb\xae\x08\xfe\x8d^\xc0\x00\x7f\xf8\xf9\xef\xddG@xo\xd3\x9f\xfd\x8d^\xc0\xbf[ A\xf1\xddG@$/\xf9\x9f\xfc\x8d^\xc0#\xedF\x1f\xf3\xddG@\xb3\xef\x18\x1e\xfb\x8d^\xc0\xd5\x1b\xb5\xc2\xf4\xddG@\xb3\xbb\xce\x86\xfc\x8d^\xc0K\x18\xcd\xca\xf6\xddG@\xdb\xe6T2\x00\x8e^\xc0\x0c\x16N\xd2\xfc\xddG@""\x93\x1a\xda\x00\x8e^\xc0\x9bn\xd9!\xfe\xddG@S\xf2\xea\x1c\x03\x8e^\xc0\xeb,z\xa7\x02\xdeG@:\x96w\xd5\x03\x8e^\xc0\xbct\x93\x18\x04\xdeG@\xa4\xe4\xd59\x06\x8e^\xc0\xf4\xd6\xc0V\t\xdeG@~\xc6\x85\x03!\x8e^\xc0\xa7\xca\xf7\x8cD\xdeG@\x128\xa0\xa5+\x8e^\xc0S\xaaD\xd9[\xdeG@\x1dgaO;\x8e^\xc0\xa2\xd2\x88\x99}\xdeG@\x93\xa6A\xd1<\x8e^\xc0b8\x9e\xcf\x80\xdeG@\xae\xac\xfb\xc7B\x8e^\xc0\x9dS\x90\x9f\x8d\xdeG@\x9c\xe5\xb2\xd19\x8e^\xc0\xe3vhX\x8c\xdeG@>yX\xa85\x8e^\xc0.\x14\xb0\x1d\x8c\xdeG@\xab\xb9j\x9e#\x8e^\xc0\xf9\x9e\x91\x08\x8d\xdeG@\xf9Sq\xe3\x16\x8e^\xc0\xb0\xf2\xcb`\x8c\xdeG@\xc7\xee\x02%\x05\x8e^\xc0d\x89\xce2\x8b\xdeG@-\r\x8a\xe6\x01\x8e^\xc0\x82\xa2y\x00\x8b\xdeG@\x16\x97qS\x03\x8e^\xc0\xbe1\x04\x00\xc7\xdeG@-\xe8\xbd1\x04\x8e^\xc0\x07\xbei\xfa\xec\xdeG@d)

2025-02-12 02:34:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:34:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:34:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:34:49 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 02:34:49 - snowflake.connector.connection - INFO - closed
2025-02-12 02:34:49 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:34:50 - root - INFO - SQL:
-- Query 5: Get census tracts that intersect with ZIP codes
SELECT t."geo_id", t."total_pop", t."income_per_capita", z."zip_code"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
LIMIT 100
Results:
geo_id,total_pop,income_per_capita,zip_code
53007961301,1422.0,46227.0,98801
53007961301,1422.0,46227.0,98815
53061052206,4797.0,42502.0,98290
53061052206,4797.0,42502.0,98272
53061052904,5825.0,32738.0,98270
53007960700,3838.0,42582.0,98801
53007960700,3838.0,42582.0,98843
53007960700,3838.0,42582.0,98815
53007960700,3838.0,42582.0,98822
53007960700,3838.0,42582.0,98802
53007960700,3838.0,42582.0,98826
53007960801,2637.0,38102.0,98801
53007960801,2637.0,38102.0,98815
53007960801,2637.0,38102.0,98836
53071920300,8624.0,23404.0,99324
53013960200,3999.0,28950.0,99361
53027001600,6861.0,16734.0,98537
53061041202,5961.0,24299.0,98203
53061041202,5961.0,24299.0,98204
53061041202,5961.0,24299.0,98208
53061040400,4416.0,28929.0,98201
53061040400,4416.0,28929.0,98207
53063010504,3443.0,30427.0,99005
53009000600,3549.0,30623.0,98362
53075000600,7712.0,12979.0,83843
53075000600,7712.0,12979.0,99164
53075000600,7712.0,12979.0,99161
53075000600,7712.0,12979.0,99163
53017950600,4105.0,31582.0,98802
53009001000,2513.0,22593.0,98362
53049950300,3557.0,21734.0,98537
53063010202,7082.0,38428.0,99003
53063010202,7082.0,38428.0,99005
53009940000,1576.0,17135.0,98381
53007960600,4364.0,22281.0,98815
53007960600,4364.0,22281.0,98836
53017950800,5538.0,22546.0,98801
53017950800,5538.0,22546.0,98802
53009001100,3363.0,25722.0,98362
53009001100,3363.0,25722.0,98363
53033032003,5273.0,44848.0,98065
53033032003,5273.0,44848.0,98051
53033032003,5273.0,44848.0,98045
53033032003,5273.0,44848.0,98038
53033032003,5273.0,44848.0,98027
53033005100,3678.0,60534.0,98103
53033005100,3678.0,60534.0,98105
53033011001,4697.0,19228.0,98118
53033011001,4697.0,19228.0,98108
53033028403,5362.0,23449.0,98188
53033028403,5362.0,23449.0,98158
53033011800,8415.0,22407.0,98178
53033011800,8415.0,22407.0,98040
53033011800,8415.0,22407.0,98118
53009000200,969.0,26557.0,98381
53009000200,969.0,26557.0,98305
53031950702,2129.0,21598.0,98362
53009001200,3560.0,31533.0,98362
53027001600,6861.0,16734.0,98595
53027001600,6861.0,16734.0,98569
53073000600,1933.0,21943.0,98225
53073001000,7827.0,11882.0,98225
53073001000,7827.0,11882.0,98229
53073000902,5739.0,34354.0,98225
53073000902,5739.0,34354.0,98229
53073011000,1251.0,44310.0,98281
53033008300,3087.0,55769.0,98101
53033008300,3087.0,55769.0,98104
53033008300,3087.0,55769.0,98122
53033031705,4133.0,41120.0,98042
53033031705,4133.0,41120.0,98038
53033009500,6614.0,61543.0,98040
53033009500,6614.0,61543.0,98118
53033009500,6614.0,61543.0,98144
53033009500,6614.0,61543.0,98108
53033029101,3288.0,35191.0,98198
53033029101,3288.0,35191.0,98032
53017950500,2929.0,21761.0,98801
53017950500,2929.0,21761.0,98802
53053060200,1944.0,41530.0,98403
53053060200,1944.0,41530.0,98402
53011040603,4902.0,39544.0,98671
53011040603,4902.0,39544.0,98682
53011040603,4902.0,39544.0,98607
53011040603,4902.0,39544.0,98606
53011041319,5671.0,36174.0,98682
53011041319,5671.0,36174.0,98684
53011042400,2282.0,28183.0,98660
53011042400,2282.0,28183.0,98661
53011042400,2282.0,28183.0,97217
53011041313,2573.0,19807.0,98664
53011041313,2573.0,19807.0,98682
53011041313,2573.0,19807.0,98684
53011041313,2573.0,19807.0,98662
53011042900,1678.0,30233.0,98664
53011042900,1678.0,30233.0,98661
53009000800,4240.0,22174.0,98362
53009000800,4240.0,22174.0,98363
53061052905,4454.0,21319.0,98270
53053062600,3192.0,23878.0,98418

2025-02-12 02:34:50 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:34:50 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:34:50 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:34:51 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 02:34:51 - snowflake.connector.connection - INFO - closed
2025-02-12 02:34:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:34:51 - root - INFO - SQL:
-- Query 6: Calculate the area of each census tract
SELECT "geo_id", ST_Area(ST_GeogFromWKB("tract_geom")) AS "tract_area"
FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
LIMIT 100
Results:
geo_id,tract_area
53073000100,86860035.14057848
53033000100,2805191.7028481667
53073000200,46599484.724073745
53009000200,958388505.9852598
53027000200,416934645.07405746
53009000300,59320224.36387499
53073000300,7710833.632583775
53027000300,1467642481.4553044
53077000300,5150108.210551866
53015000300,36047313.74103112
53009000400,1064300759.9197084
53027000400,656417416.0567834
53073000400,5117672.10351192
53015000400,2312533.359231852
53027000500,136838086.48318827
53033000500,3838287.801653455
53073000600,1230155.3054265236
53009000600,1087353545.0315158
53027000600,99260936.01966313
53033000600,3826996.914101569
53009000700,12467339.648824628
53027000700,981643008.5524127
53075000700,900655132.8976487
53027000800,90397985.05807999
53015000800,16113381.59036376
53075000800,353883179.646604
53033000900,2850684.30129945
53027000900,27128974.285891872
53015000900,13912539.613051714
53075000900,2060066111.5954754
53063001000,3880304.048878296
53027001000,6821684.7890144475
53015001000,834988.0645067701
53075001000,1817563331.4108756
53009001100,11041633.195643358
53073001100,71322151.3381947
53027001100,5867144.144592322
53015001100,7125251.049682994
53027001200,4894932.4936579205
53027001300,46718884.60383487
53015001300,10132252.612395592
53009001400,92312587.85506314
53027001400,29891293.007078953
53033001400,2342023.273015243
53009001500,510702251.17541295
53027001500,83214987.16699222
53033001500,1564498.0377936005
53027001600,374576803.91129524
53033001600,2491611.313250001
53015001600,111119439.39857772
53015001700,392968771.91171956
53063001800,1664112.5922729345
53077001800,246354190.530048
53015001800,1152417487.626642
53015001900,300143638.9288702
53033002000,1128773.1693499293
53015002100,3892761.3400996304
53033002200,3926964.5765948365
53063002300,2736206.0871702833
53009002300,289072266.43551224
53063002400,2159473.8488627975
53063002500,3261056.9881031658
53063002600,2073406.0770134646
53033002600,1241250.0880574842
53077002900,212535097.39527172
53077003100,66381565.47326113
53033003100,2690683.4741704315
53033003200,3479942.8997603883
53077003200,10919498.339729652
53077003400,27621622.363374803
53063003500,1730864.7841931852
53063003600,4773213.095426451
53063003900,8997211.815685108
53033004000,6102879.407436935
53033004100,8557334.818052491
53063004500,2616993.136385287
53033004600,2578227.425082556
53033004700,2297447.975036044
53033004800,1356254.0600354664
53033004900,1107990.786542499
53033005200,1047324.6234551504
53033005400,1841121.8825275567
53033005600,4607096.762107438
53033005700,7384396.879196069
53033005900,1974002.953738381
53033006000,1495253.4340616358
53033006100,1882420.487408728
53033006200,3008382.312929712
53033006300,5773755.452909548
53033006600,1932809.2479246543
53033006700,1376696.5367987235
53033007800,5728114.850159613
53033008100,1193112.2753541346
53033008900,3059414.7998405853
53033009200,483731.0496308337
53033009300,10120384.463243905
53033009500,5496745.861165506
53033009600,3281567.6089125434
53033009900,8827873.91950438
53067010100,4990846.395263933

2025-02-12 02:34:51 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:34:51 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:34:51 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:34:59 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 02:34:59 - snowflake.connector.connection - INFO - closed
2025-02-12 02:34:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:35:00 - root - INFO - SQL:
-- Query 7: Determine the overlapping area between tracts and ZIP codes
SELECT t."geo_id", z."zip_code",
  ST_Area(
    ST_Intersection(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
  ) AS "overlap_area"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
LIMIT 100
Results:
geo_id,zip_code,overlap_area
53061052904,98270,3497090.7523977626
53061041202,98208,0.0
53061041202,98203,2687121.496459572
53065950300,99114,5169907.631156744
53061041202,98204,0.0
53061040400,98201,2073657.757391422
53061040400,98207,417176.1709671403
53061051500,98036,3086461.155634989
53061051500,98037,76394.93529639373
53061051500,98026,106401.45835740399
53061053101,98292,4672529.885218615
53061053101,98223,21437368.993760023
53061053101,98271,1217211.382808342
53053073122,98374,3687830.467765509
53053073122,98375,1330709.127496734
53007961301,98815,0.0
53007961301,98801,16665199.59271943
53053071307,98446,
53053071307,98373,5204310.6675025765
53053071206,98371,103089.94699758594
53053071206,98446,
53053071206,98374,0.0
53053071206,98373,7766031.7625624975
53007960700,98815,0.0
53007960700,98822,10828.35411332895
53075000600,83843,0.0
53075000600,99164,186690.24122254978
53075000600,99161,0.0
53075000600,99163,83642818.45840482
53009000600,98362,0.0
53009001000,98362,1778044.9466582672
53075000300,99111,13828669.252445411
53075000300,99163,144221143.73067492
53009001100,98363,0.0
53021020502,99336,0.0
53005010100,99352,5188684.028231692
53077001300,98902,
53005010100,99301,0.0
53021020502,99301,12835829.764602065
53005010100,99354,5290942.310576022
53005010100,98944,
53005011001,99336,5717435.828581166
53005010201,99352,0.0
53007960700,98843,0.0
53005010201,99354,30913000.339441456
53005010201,99353,13565159.294300798
53009001100,98362,11041633.195547337
53005010201,98944,
53007960700,98801,143193919.58578694
53077001901,98930,5249841.493364445
53031950702,98362,5.307429003454737
53005010400,99352,637232.639539936
53007960700,98802,0.0
53005010400,99354,861216.4484847154
53009001200,98362,6606837.373179624
53005010807,99352,7134109.107020312
53005010807,99338,0.0
53009000800,98363,3135844.3895853143
53005010807,99350,0.0
53007960700,98826,0.0
53009000800,98362,2130.3165866698105
53005010807,99320,89481037.62800898
53005010807,99353,612875.5858692062
53009001300,98362,9956245.999822862
53007960801,98815,0.0
53007960801,98801,25152155.210417975
53075000300,99113,3472143.6039304333
53007960801,98836,0.0
53009000700,98363,12443865.72978625
53017950600,98802,5909319.589205324
53009000700,98362,0.0
53075000800,99111,353883179.64107686
53007960600,98815,7508187.313981841
53007960600,98836,1977942.1074600206
53049950800,98641,106242.74133649995
53009001800,98362,41505722.6417735
53075000800,99143,0.0
53017950800,98801,1.0051112041607106
53009001400,98362,92312587.82349622
53073010401,98230,58229533.67865574
53017950800,98802,6520732.657396412
53073010401,98248,0.0
53073010401,98240,25820078.974950004
53061052004,98012,3316173.706867042
53075000800,99130,0.0
53061052004,98208,
53073010401,98264,0.48011983669013514
53061052906,98270,2411863.512716527
53073000600,98225,1230155.3054265236
53073001000,98225,2473922.5036860625
53009001600,98382,9165624.31189604
53073001000,98229,0.1549993647297867
53061052607,98205,3876906.988786885
53005011001,99301,0.0
53053070100,98323,638460624.0850799
53073000902,98225,150730.660482243
53075000800,99171,
53073000902,98229,16851134.063043177
53073011000,98281,16987518.248248868
53061052607,98290,4394136.33425401

2025-02-12 02:35:00 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:35:00 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:35:00 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:35:06 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 02:35:06 - snowflake.connector.connection - INFO - closed
2025-02-12 02:35:06 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:35:06 - root - INFO - SQL:
-- Query 8: Aggregate total population by ZIP code
SELECT z."zip_code", SUM(t."total_pop") AS "total_population"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
GROUP BY z."zip_code"
LIMIT 100
Results:
zip_code,total_population
98547,13321.0
99224,80802.0
98092,133780.0
98264,52997.0
98261,10740.0
83822,8424.0
98363,29603.0
99022,34832.0
98862,30667.0
98929,4037.0
98402,28666.0
98443,41597.0
98416,7156.0
98635,21172.0
98947,14095.0
98933,9984.0
99402,11354.0
98174,4872.0
98833,17087.0
99203,45782.0
99006,34305.0
98843,21418.0
98409,86050.0
98817,12530.0
98330,10285.0
98245,8411.0
98524,29098.0
98052,118468.0
98047,44962.0
99149,3895.0
98645,8667.0
98026,109295.0
98826,35402.0
98586,17224.0
98937,35820.0
99156,24993.0
98329,44910.0
97050,13270.0
99039,2733.0
99012,2733.0
98235,1889.0
98102,65567.0
98372,72573.0
98075,67875.0
97835,10253.0
98336,9762.0
98664,54737.0
99036,25939.0
98648,11498.0
98257,15482.0
99137,8694.0
98321,59557.0
98225,88511.0
98563,38630.0
99181,11332.0
98382,39848.0
98644,3716.0
98860,6926.0
98923,10798.0
98939,6523.0
98375,85118.0
98675,29967.0
99123,15906.0
99356,9533.0
98526,6321.0
98611,37598.0
99116,17477.0
99130,7099.0
98345,11035.0
97211,8966.0
98031,94552.0
98155,100677.0
98587,8669.0
98388,42231.0
98620,13270.0
98516,67997.0
98359,30889.0
99152,2205.0
98934,4531.0
98948,47844.0
98003,107293.0
98230,34587.0
99126,10424.0
98856,16034.0
98467,68738.0
99352,118546.0
98834,11653.0
99009,19743.0
98503,80608.0
98642,55844.0
98665,78162.0
98560,12096.0
98325,18868.0
98195,14449.0
97844,886.0
99333,9415.0
98374,103747.0
98445,87696.0
98433,56825.0
98223,108170.0

2025-02-12 02:35:06 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:35:06 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:35:06 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:35:13 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 02:35:13 - snowflake.connector.connection - INFO - closed
2025-02-12 02:35:13 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:35:13 - root - INFO - SQL:
-- Query 9: Compute average income per capita for each ZIP code
SELECT z."zip_code", AVG(t."income_per_capita") AS "average_income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
GROUP BY z."zip_code"
LIMIT 100
Results:
zip_code,average_income
98942,28862.88888888889
97846,35301.0
98628,23217.5
97231,29982.666666666668
99160,23405.0
98547,19703.333333333332
98264,28528.125
99224,33369.294117647056
98261,40978.0
83822,25181.666666666668
98092,34606.0
98315,36167.25
98951,18631.0
98685,36726.72727272727
98239,36947.666666666664
98154,70828.0
99218,28684.75
99006,27863.714285714286
98645,25026.0
98843,28215.6
98052,57338.76190476191
98047,30983.0
98409,25244.78947368421
98817,24869.0
98524,32204.6
98330,26363.0
99149,25595.0
98245,39862.0
98372,33830.13333333333
98336,22395.333333333332
98664,30120.30769230769
98648,27941.2
98075,60777.6
97835,32787.5
99036,39950.6
98026,40411.71428571428
98937,28716.0
98826,33611.0
98586,22738.0
99156,27643.714285714286
98329,37329.625
98102,62156.0
97050,23217.5
98235,29510.0
99039,27264.0
99012,27264.0
99114,26158.0
98836,29003.0
99129,21255.4
99350,27362.11111111111
83858,31872.0
98027,53379.42105263158
99027,32827.8
98363,25593.9
99022,24629.714285714286
98929,29225.0
98443,28731.0
98862,25819.571428571428
98402,30112.444444444445
98416,36213.0
98635,25348.333333333332
98833,25829.25
98947,27723.666666666668
99402,31140.666666666668
98174,70828.0
98933,17912.0
99203,38956.181818181816
98952,17912.0
98932,18372.2
83855,31324.0
98439,23800.555555555555
98444,21768.9375
98576,27528.11111111111
98589,28901.4
98199,60376.0
98255,27112.0
98108,31816.833333333332
98571,20304.5
98284,30626.25
98381,21846.0
83872,31324.0
98624,26872.666666666668
98544,28860.0
98201,31741.416666666668
98407,41043.4
98053,62431.8
98388,33689.555555555555
98948,16416.625
98516,33692.416666666664
98359,41017.71428571428
99152,30841.0
98934,29212.0
98620,23217.5
98230,30858.8
98003,30293.0
99126,26883.5
98568,28711.5
98577,22944.285714285714
98012,40383.434782608696
98638,27250.666666666668

2025-02-12 02:35:13 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:35:13 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:35:13 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:35:14 - snowflake.connector.connection - INFO - closed
2025-02-12 02:35:14 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:36:08 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:36:08 - root - INFO - The error occurred because the subquery alias `t` was referenced inside the subquery for `overlap`, but `t` is not defined within that subquery. To fix the error, we need to replace `t."geo_id"` with `g."geo_id"` in the subquery since `g` (the alias for census tracts) is defined there.

Here is the corrected SQL query:

```sql
SELECT z."zip_code",
  SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")) AS "weighted_population",
  ROUND(AVG(t."income_per_capita"), 1) AS "average_income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    TO_GEOGRAPHY(g."tract_geom"),
    TO_GEOGRAPHY(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        TO_GEOGRAPHY(g."tract_geom"),
        TO_GEOGRAPHY(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      TO_GEOGRAPHY(g."tract_geom"),
      TO_GEOGRAPHY(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  TO_GEOGRAPHY(z."zip_code_geom"),
  TO_GEOGRAPHY('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "average_income" DESC
LIMIT 100;
```

**Explanation of the correction:**

- In the subquery for `overlap`, replaced `t."geo_id"` with `g."geo_id"` because `t` (the alias for the census tract data) is not available within that subquery. The correct alias to use is `g`, which is defined in that subquery.
  
- Changed `ST_GeogFromWKB` to `TO_GEOGRAPHY` for consistency with earlier corrections.

This corrected query should resolve the error and properly calculate the weighted population and average individual income for each ZIP code within a 5-mile radius of the specified point.
2025-02-12 02:36:08 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:36:08 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:36:08 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:36:21 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-02-12 02:36:21 - snowflake.connector.connection - INFO - closed
2025-02-12 02:36:22 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:37:14 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:37:40 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:37:40 - root - INFO - SQL:
SELECT z."zip_code",
  SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")) AS "weighted_population",
  ROUND(AVG(t."income_per_capita"), 1) AS "average_income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    TO_GEOGRAPHY(g."tract_geom"),
    TO_GEOGRAPHY(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        TO_GEOGRAPHY(g."tract_geom"),
        TO_GEOGRAPHY(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      TO_GEOGRAPHY(g."tract_geom"),
      TO_GEOGRAPHY(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  TO_GEOGRAPHY(z."zip_code_geom"),
  TO_GEOGRAPHY('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "average_income" DESC
LIMIT 100;
Results:
zip_code,weighted_population,average_income
98039,3268.616292848105,85829.7
98004,31982.414251456874,78706.5
98112,23982.388364522998,75368.2
98033,40114.68213223674,65541.9
98053,27259.044530673476,62431.8
98052,62539.80077075842,57338.8
98105,46512.45568717428,57017.1
98115,51494.331146822915,56185.1
98034,38236.858911436175,54120.7
98008,25773.084418435705,53738.1
98005,23239.678162917087,53685.3
98072,28447.252494415243,52644.7
98028,21746.92540962845,49984.2
98007,24076.853903543582,49464.1
98011,32882.044190065375,46576.4
98125,39881.68613751872,46287.7
98155,34698.82837184475,41681.6

2025-02-12 02:37:40 - root - INFO - itercount: 0
2025-02-12 02:37:40 - root - INFO - Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,0
table_name,BLOCKGROUP_2014_5YR
description,
DDL,"create or replace TABLE BLOCKGROUP_2014_5YR (
	""geo_id"" VARCHAR(16777216),
	""nonfamily_households"" FLOAT,
	""family_households"" FLOAT,
	""median_year_structure_built"" FLOAT,
	""rent_burden_not_computed"" FLOAT,
	""rent_over_50_percent"" FLOAT,
	""rent_40_to_50_percent"" FLOAT,
	""rent_35_to_40_percent"" FLOAT,
	""rent_30_to_35_percent"" FLOAT,
	""rent_25_to_30_percent"" FLOAT,
	""rent_20_to_25_percent"" FLOAT,
	""rent_15_to_20_percent"" FLOAT,
	""rent_10_to_15_percent"" FLOAT,
	""rent_under_10_percent"" FLOAT,
	""total_pop"" FLOAT,
	""male_pop"" FLOAT,
	""female_pop"" FLOAT,
	""median_age"" FLOAT,
	""white_pop"" FLOAT,
	""black_pop"" FLOAT,
	""asian_pop"" FLOAT,
	""hispanic_pop"" FLOAT,
	""amerindian_pop"" FLOAT,
	""other_race_pop"" FLOAT,
	""two_or_more_races_pop"" FLOAT,
	""not_hispanic_pop"" FLOAT,
	""commuters_by_public_transportation"" FLOAT,
	""households"" FLOAT,
	""median_income"" FLOAT,
	""income_per_capita"" FLOAT,
	""housing_units"" FLOAT,
	""vacant_housing_units"" FLOAT,
	""vacant_housing_units_for_rent"" FLOAT,
	""vacant_housing_units_for_sale"" FLOAT,
	""median_rent"" FLOAT,
	""percent_income_spent_on_rent"" FLOAT,
	""owner_occupied_housing_units"" FLOAT,
	""million_dollar_housing_units"" FLOAT,
	""mortgaged_housing_units"" FLOAT,
	""families_with_young_children"" FLOAT,
	""two_parent_families_with_young_children"" FLOAT,
	""two_parents_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_father_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_mother_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_not_in_labor_force_families_with_young_children"" FLOAT,
	""one_parent_families_with_young_children"" FLOAT,
	""father_one_parent_families_with_young_children"" FLOAT,
	""father_in_labor_force_one_parent_families_with_young_children"" FLOAT,
	""commute_10_14_mins"" FLOAT,
	""commute_15_19_mins"" FLOAT,
	""commute_20_24_mins"" FLOAT,
	""commute_25_29_mins"" FLOAT,
	""commute_30_34_mins"" FLOAT,
	""commute_45_59_mins"" FLOAT,
	""aggregate_travel_time_to_work"" FLOAT,
	""income_less_10000"" FLOAT,
	""income_10000_14999"" FLOAT,
	""income_15000_19999"" FLOAT,
	""income_20000_24999"" FLOAT,
	""income_25000_29999"" FLOAT,
	""income_30000_34999"" FLOAT,
	""income_35000_39999"" FLOAT,
	""income_40000_44999"" FLOAT,
	""income_45000_49999"" FLOAT,
	""income_50000_59999"" FLOAT,
	""income_60000_74999"" FLOAT,
	""income_75000_99999"" FLOAT,
	""income_100000_124999"" FLOAT,
	""income_125000_149999"" FLOAT,
	""income_150000_199999"" FLOAT,
	""income_200000_or_more"" FLOAT,
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" FLOAT,
	""owner_occupied_housing_units_lower_value_quartile"" FLOAT,
	""owner_occupied_housing_units_median_value"" FLOAT,
	""owner_occupied_housing_units_upper_value_quartile"" FLOAT,
	""married_households"" FLOAT,
	""occupied_housing_units"" FLOAT,
	""housing_units_renter_occupied"" FLOAT,
	""dwellings_1_units_detached"" FLOAT,
	""dwellings_1_units_attached"" FLOAT,
	""dwellings_2_units"" FLOAT,
	""dwellings_3_to_4_units"" FLOAT,
	""dwellings_5_to_9_units"" FLOAT,
	""dwellings_10_to_19_units"" FLOAT,
	""dwellings_20_to_49_units"" FLOAT,
	""dwellings_50_or_more_units"" FLOAT,
	""mobile_homes"" FLOAT,
	""housing_built_2005_or_later"" FLOAT,
	""housing_built_2000_to_2004"" FLOAT,
	""housing_built_1939_or_earlier"" FLOAT,
	""male_under_5"" FLOAT,
	""male_5_to_9"" FLOAT,
	""male_10_to_14"" FLOAT,
	""male_15_to_17"" FLOAT,
	""male_18_to_19"" FLOAT,
	""male_20"" FLOAT,
	""male_21"" FLOAT,
	""male_22_to_24"" FLOAT,
	""male_25_to_29"" FLOAT,
	""male_30_to_34"" FLOAT,
	""male_35_to_39"" FLOAT,
	""male_40_to_44"" FLOAT,
	""male_45_to_49"" FLOAT,
	""male_50_to_54"" FLOAT,
	""male_55_to_59"" FLOAT,
	""male_60_61"" FLOAT,
	""male_62_64"" FLOAT,
	""male_65_to_66"" FLOAT,
	""male_67_to_69"" FLOAT,
	""male_70_to_74"" FLOAT,
	""male_75_to_79"" FLOAT,
	""male_80_to_84"" FLOAT,
	""male_85_and_over"" FLOAT,
	""female_under_5"" FLOAT,
	""female_5_to_9"" FLOAT,
	""female_10_to_14"" FLOAT,
	""female_15_to_17"" FLOAT,
	""female_18_to_19"" FLOAT,
	""female_20"" FLOAT,
	""female_21"" FLOAT,
	""female_22_to_24"" FLOAT,
	""female_25_to_29"" FLOAT,
	""female_30_to_34"" FLOAT,
	""female_35_to_39"" FLOAT,
	""female_40_to_44"" FLOAT,
	""female_45_to_49"" FLOAT,
	""female_50_to_54"" FLOAT,
	""female_55_to_59"" FLOAT,
	""female_60_to_61"" FLOAT,
	""female_62_to_64"" FLOAT,
	""female_65_to_66"" FLOAT,
	""female_67_to_69"" FLOAT,
	""female_70_to_74"" FLOAT,
	""female_75_to_79"" FLOAT,
	""female_80_to_84"" FLOAT,
	""female_85_and_over"" FLOAT,
	""white_including_hispanic"" FLOAT,
	""black_including_hispanic"" FLOAT,
	""amerindian_including_hispanic"" FLOAT,
	""asian_including_hispanic"" FLOAT,
	""commute_5_9_mins"" FLOAT,
	""commute_35_39_mins"" FLOAT,
	""commute_40_44_mins"" FLOAT,
	""commute_60_89_mins"" FLOAT,
	""commute_90_more_mins"" FLOAT,
	""households_retirement_income"" FLOAT,
	""armed_forces"" FLOAT,
	""civilian_labor_force"" FLOAT,
	""employed_pop"" FLOAT,
	""unemployed_pop"" FLOAT,
	""not_in_labor_force"" FLOAT,
	""pop_16_over"" FLOAT,
	""pop_in_labor_force"" FLOAT,
	""associates_degree"" FLOAT,
	""bachelors_degree"" FLOAT,
	""high_school_diploma"" FLOAT,
	""less_one_year_college"" FLOAT,
	""masters_degree"" FLOAT,
	""one_year_more_college"" FLOAT,
	""pop_25_years_over"" FLOAT,
	""commute_35_44_mins"" FLOAT,
	""commute_60_more_mins"" FLOAT,
	""commute_less_10_mins"" FLOAT,
	""commuters_16_over"" FLOAT,
	""do_date"" VARCHAR(16777216)
);"

Some other tables have the similar structure: ['BLOCKGROUP_2014_5YR', 'BLOCKGROUP_2016_5YR', 'BLOCKGROUP_2017_5YR', 'BLOCKGROUP_2018_5YR', 'BLOCKGROUP_2011_5YR', 'BLOCKGROUP_2012_5YR', 'BLOCKGROUP_2013_5YR', 'BLOCKGROUP_2015_5YR', 'BLOCKGROUP_2010_5YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,1
table_name,CBSA_2007_1YR
description,
DDL,"create or replace TABLE CBSA_2007_1YR (
	""geo_id"" VARCHAR(16777216),
	""nonfamily_households"" FLOAT,
	""family_households"" FLOAT,
	""median_year_structure_built"" FLOAT,
	""rent_burden_not_computed"" FLOAT,
	""rent_over_50_percent"" FLOAT,
	""rent_40_to_50_percent"" FLOAT,
	""rent_35_to_40_percent"" FLOAT,
	""rent_30_to_35_percent"" FLOAT,
	""rent_25_to_30_percent"" FLOAT,
	""rent_20_to_25_percent"" FLOAT,
	""rent_15_to_20_percent"" FLOAT,
	""rent_10_to_15_percent"" FLOAT,
	""rent_under_10_percent"" FLOAT,
	""total_pop"" FLOAT,
	""male_pop"" FLOAT,
	""female_pop"" FLOAT,
	""median_age"" FLOAT,
	""white_pop"" FLOAT,
	""black_pop"" FLOAT,
	""asian_pop"" FLOAT,
	""hispanic_pop"" FLOAT,
	""amerindian_pop"" FLOAT,
	""other_race_pop"" FLOAT,
	""two_or_more_races_pop"" FLOAT,
	""not_hispanic_pop"" FLOAT,
	""commuters_by_public_transportation"" FLOAT,
	""households"" FLOAT,
	""median_income"" FLOAT,
	""income_per_capita"" FLOAT,
	""housing_units"" FLOAT,
	""vacant_housing_units"" FLOAT,
	""vacant_housing_units_for_rent"" FLOAT,
	""vacant_housing_units_for_sale"" FLOAT,
	""median_rent"" FLOAT,
	""percent_income_spent_on_rent"" FLOAT,
	""owner_occupied_housing_units"" FLOAT,
	""million_dollar_housing_units"" FLOAT,
	""mortgaged_housing_units"" FLOAT,
	""families_with_young_children"" FLOAT,
	""two_parent_families_with_young_children"" FLOAT,
	""two_parents_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_father_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_mother_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_not_in_labor_force_families_with_young_children"" FLOAT,
	""one_parent_families_with_young_children"" FLOAT,
	""father_one_parent_families_with_young_children"" FLOAT,
	""father_in_labor_force_one_parent_families_with_young_children"" FLOAT,
	""commute_10_14_mins"" FLOAT,
	""commute_15_19_mins"" FLOAT,
	""commute_20_24_mins"" FLOAT,
	""commute_25_29_mins"" FLOAT,
	""commute_30_34_mins"" FLOAT,
	""commute_45_59_mins"" FLOAT,
	""aggregate_travel_time_to_work"" FLOAT,
	""income_less_10000"" FLOAT,
	""income_10000_14999"" FLOAT,
	""income_15000_19999"" FLOAT,
	""income_20000_24999"" FLOAT,
	""income_25000_29999"" FLOAT,
	""income_30000_34999"" FLOAT,
	""income_35000_39999"" FLOAT,
	""income_40000_44999"" FLOAT,
	""income_45000_49999"" FLOAT,
	""income_50000_59999"" FLOAT,
	""income_60000_74999"" FLOAT,
	""income_75000_99999"" FLOAT,
	""income_100000_124999"" FLOAT,
	""income_125000_149999"" FLOAT,
	""income_150000_199999"" FLOAT,
	""income_200000_or_more"" FLOAT,
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" FLOAT,
	""owner_occupied_housing_units_lower_value_quartile"" FLOAT,
	""owner_occupied_housing_units_median_value"" FLOAT,
	""owner_occupied_housing_units_upper_value_quartile"" FLOAT,
	""married_households"" FLOAT,
	""occupied_housing_units"" FLOAT,
	""housing_units_renter_occupied"" FLOAT,
	""dwellings_1_units_detached"" FLOAT,
	""dwellings_1_units_attached"" FLOAT,
	""dwellings_2_units"" FLOAT,
	""dwellings_3_to_4_units"" FLOAT,
	""dwellings_5_to_9_units"" FLOAT,
	""dwellings_10_to_19_units"" FLOAT,
	""dwellings_20_to_49_units"" FLOAT,
	""dwellings_50_or_more_units"" FLOAT,
	""mobile_homes"" FLOAT,
	""housing_built_2005_or_later"" FLOAT,
	""housing_built_2000_to_2004"" FLOAT,
	""housing_built_1939_or_earlier"" FLOAT,
	""male_under_5"" FLOAT,
	""male_5_to_9"" FLOAT,
	""male_10_to_14"" FLOAT,
	""male_15_to_17"" FLOAT,
	""male_18_to_19"" FLOAT,
	""male_20"" FLOAT,
	""male_21"" FLOAT,
	""male_22_to_24"" FLOAT,
	""male_25_to_29"" FLOAT,
	""male_30_to_34"" FLOAT,
	""male_35_to_39"" FLOAT,
	""male_40_to_44"" FLOAT,
	""male_45_to_49"" FLOAT,
	""male_50_to_54"" FLOAT,
	""male_55_to_59"" FLOAT,
	""male_60_61"" FLOAT,
	""male_62_64"" FLOAT,
	""male_65_to_66"" FLOAT,
	""male_67_to_69"" FLOAT,
	""male_70_to_74"" FLOAT,
	""male_75_to_79"" FLOAT,
	""male_80_to_84"" FLOAT,
	""male_85_and_over"" FLOAT,
	""female_under_5"" FLOAT,
	""female_5_to_9"" FLOAT,
	""female_10_to_14"" FLOAT,
	""female_15_to_17"" FLOAT,
	""female_18_to_19"" FLOAT,
	""female_20"" FLOAT,
	""female_21"" FLOAT,
	""female_22_to_24"" FLOAT,
	""female_25_to_29"" FLOAT,
	""female_30_to_34"" FLOAT,
	""female_35_to_39"" FLOAT,
	""female_40_to_44"" FLOAT,
	""female_45_to_49"" FLOAT,
	""female_50_to_54"" FLOAT,
	""female_55_to_59"" FLOAT,
	""female_60_to_61"" FLOAT,
	""female_62_to_64"" FLOAT,
	""female_65_to_66"" FLOAT,
	""female_67_to_69"" FLOAT,
	""female_70_to_74"" FLOAT,
	""female_75_to_79"" FLOAT,
	""female_80_to_84"" FLOAT,
	""female_85_and_over"" FLOAT,
	""white_including_hispanic"" FLOAT,
	""black_including_hispanic"" FLOAT,
	""amerindian_including_hispanic"" FLOAT,
	""asian_including_hispanic"" FLOAT,
	""commute_5_9_mins"" FLOAT,
	""commute_35_39_mins"" FLOAT,
	""commute_40_44_mins"" FLOAT,
	""commute_60_89_mins"" FLOAT,
	""commute_90_more_mins"" FLOAT,
	""households_retirement_income"" FLOAT,
	""armed_forces"" FLOAT,
	""civilian_labor_force"" FLOAT,
	""employed_pop"" FLOAT,
	""unemployed_pop"" FLOAT,
	""not_in_labor_force"" FLOAT,
	""pop_16_over"" FLOAT,
	""pop_in_labor_force"" FLOAT,
	""asian_male_45_54"" FLOAT,
	""asian_male_55_64"" FLOAT,
	""black_male_45_54"" FLOAT,
	""black_male_55_64"" FLOAT,
	""hispanic_male_45_54"" FLOAT,
	""hispanic_male_55_64"" FLOAT,
	""white_male_45_54"" FLOAT,
	""white_male_55_64"" FLOAT,
	""bachelors_degree_2"" FLOAT,
	""bachelors_degree_or_higher_25_64"" FLOAT,
	""children"" FLOAT,
	""children_in_single_female_hh"" FLOAT,
	""commuters_by_bus"" FLOAT,
	""commuters_by_car_truck_van"" FLOAT,
	""commuters_by_carpool"" FLOAT,
	""commuters_by_subway_or_elevated"" FLOAT,
	""commuters_drove_alone"" FLOAT,
	""different_house_year_ago_different_city"" FLOAT,
	""different_house_year_ago_same_city"" FLOAT,
	""employed_agriculture_forestry_fishing_hunting_mining"" FLOAT,
	""employed_arts_entertainment_recreation_accommodation_food"" FLOAT,
	""employed_construction"" FLOAT,
	""employed_education_health_social"" FLOAT,
	""employed_finance_insurance_real_estate"" FLOAT,
	""employed_information"" FLOAT,
	""employed_manufacturing"" FLOAT,
	""employed_other_services_not_public_admin"" FLOAT,
	""employed_public_administration"" FLOAT,
	""employed_retail_trade"" FLOAT,
	""employed_science_management_admin_waste"" FLOAT,
	""employed_transportation_warehousing_utilities"" FLOAT,
	""employed_wholesale_trade"" FLOAT,
	""female_female_households"" FLOAT,
	""four_more_cars"" FLOAT,
	""gini_index"" FLOAT,
	""graduate_professional_degree"" FLOAT,
	""group_quarters"" FLOAT,
	""high_school_including_ged"" FLOAT,
	""households_public_asst_or_food_stamps"" FLOAT,
	""in_grades_1_to_4"" FLOAT,
	""in_grades_5_to_8"" FLOAT,
	""in_grades_9_to_12"" FLOAT,
	""in_school"" FLOAT,
	""in_undergrad_college"" FLOAT,
	""less_than_high_school_graduate"" FLOAT,
	""male_45_64_associates_degree"" FLOAT,
	""male_45_64_bachelors_degree"" FLOAT,
	""male_45_64_graduate_degree"" FLOAT,
	""male_45_64_less_than_9_grade"" FLOAT,
	""male_45_64_grade_9_12"" FLOAT,
	""male_45_64_high_school"" FLOAT,
	""male_45_64_some_college"" FLOAT,
	""male_45_to_64"" FLOAT,
	""male_male_households"" FLOAT,
	""management_business_sci_arts_employed"" FLOAT,
	""no_car"" FLOAT,
	""no_cars"" FLOAT,
	""not_us_citizen_pop"" FLOAT,
	""occupation_management_arts"" FLOAT,
	""occupation_natural_resources_construction_maintenance"" FLOAT,
	""occupation_production_transportation_material"" FLOAT,
	""occupation_sales_office"" FLOAT,
	""occupation_services"" FLOAT,
	""one_car"" FLOAT,
	""two_cars"" FLOAT,
	""three_cars"" FLOAT,
	""pop_25_64"" FLOAT,
	""pop_determined_poverty_status"" FLOAT,
	""population_1_year_and_over"" FLOAT,
	""population_3_years_over"" FLOAT,
	""poverty"" FLOAT,
	""sales_office_employed"" FLOAT,
	""some_college_and_associates_degree"" FLOAT,
	""walked_to_work"" FLOAT,
	""worked_at_home"" FLOAT,
	""workers_16_and_over"" FLOAT,
	""associates_degree"" FLOAT,
	""bachelors_degree"" FLOAT,
	""high_school_diploma"" FLOAT,
	""less_one_year_college"" FLOAT,
	""masters_degree"" FLOAT,
	""one_year_more_college"" FLOAT,
	""pop_25_years_over"" FLOAT,
	""commute_35_44_mins"" FLOAT,
	""commute_60_more_mins"" FLOAT,
	""commute_less_10_mins"" FLOAT,
	""commuters_16_over"" FLOAT,
	""hispanic_any_race"" FLOAT,
	""pop_5_years_over"" FLOAT,
	""speak_only_english_at_home"" FLOAT,
	""speak_spanish_at_home"" FLOAT,
	""speak_spanish_at_home_low_english"" FLOAT,
	""pop_15_and_over"" FLOAT,
	""pop_never_married"" FLOAT,
	""pop_now_married"" FLOAT,
	""pop_separated"" FLOAT,
	""pop_widowed"" FLOAT,
	""pop_divorced"" FLOAT,
	""do_date"" VARCHAR(16777216)
);"

Some other tables have the similar structure: ['CBSA_2007_1YR', 'CBSA_2010_1YR', 'CBSA_2010_3YR', 'CBSA_2011_5YR', 'CBSA_2015_5YR', 'CBSA_2014_5YR', 'CBSA_2017_5YR', 'CBSA_2011_3YR', 'CBSA_2012_5YR', 'CBSA_2013_3YR', 'CBSA_2009_1YR', 'CBSA_2016_5YR', 'CBSA_2018_5YR', 'CBSA_2017_1YR', 'CBSA_2021_1YR', 'CBSA_2012_3YR', 'CBSA_2009_3YR', 'CBSA_2011_1YR', 'CBSA_2012_1YR', 'CBSA_2013_1YR', 'CBSA_2020_5YR', 'CBSA_2013_5YR', 'CBSA_2019_1YR', 'CBSA_2008_3YR', 'CBSA_2019_5YR', 'CBSA_2007_3YR', 'CBSA_2008_1YR', 'CBSA_2014_1YR', 'CBSA_2015_1YR', 'CBSA_2010_5YR', 'CBSA_2016_1YR', 'CBSA_2018_1YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,2
table_name,CENSUSTRACT_2011_5YR
description,
DDL,"create or replace TABLE CENSUSTRACT_2011_5YR (
	""geo_id"" VARCHAR(16777216),
	""nonfamily_households"" FLOAT,
	""family_households"" FLOAT,
	""median_year_structure_built"" FLOAT,
	""rent_burden_not_computed"" FLOAT,
	""rent_over_50_percent"" FLOAT,
	""rent_40_to_50_percent"" FLOAT,
	""rent_35_to_40_percent"" FLOAT,
	""rent_30_to_35_percent"" FLOAT,
	""rent_25_to_30_percent"" FLOAT,
	""rent_20_to_25_percent"" FLOAT,
	""rent_15_to_20_percent"" FLOAT,
	""rent_10_to_15_percent"" FLOAT,
	""rent_under_10_percent"" FLOAT,
	""total_pop"" FLOAT,
	""male_pop"" FLOAT,
	""female_pop"" FLOAT,
	""median_age"" FLOAT,
	""white_pop"" FLOAT,
	""black_pop"" FLOAT,
	""asian_pop"" FLOAT,
	""hispanic_pop"" FLOAT,
	""amerindian_pop"" FLOAT,
	""other_race_pop"" FLOAT,
	""two_or_more_races_pop"" FLOAT,
	""not_hispanic_pop"" FLOAT,
	""commuters_by_public_transportation"" FLOAT,
	""households"" FLOAT,
	""median_income"" FLOAT,
	""income_per_capita"" FLOAT,
	""housing_units"" FLOAT,
	""vacant_housing_units"" FLOAT,
	""vacant_housing_units_for_rent"" FLOAT,
	""vacant_housing_units_for_sale"" FLOAT,
	""median_rent"" FLOAT,
	""percent_income_spent_on_rent"" FLOAT,
	""owner_occupied_housing_units"" FLOAT,
	""million_dollar_housing_units"" FLOAT,
	""mortgaged_housing_units"" FLOAT,
	""families_with_young_children"" FLOAT,
	""two_parent_families_with_young_children"" FLOAT,
	""two_parents_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_father_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_mother_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_not_in_labor_force_families_with_young_children"" FLOAT,
	""one_parent_families_with_young_children"" FLOAT,
	""father_one_parent_families_with_young_children"" FLOAT,
	""father_in_labor_force_one_parent_families_with_young_children"" FLOAT,
	""commute_10_14_mins"" FLOAT,
	""commute_15_19_mins"" FLOAT,
	""commute_20_24_mins"" FLOAT,
	""commute_25_29_mins"" FLOAT,
	""commute_30_34_mins"" FLOAT,
	""commute_45_59_mins"" FLOAT,
	""aggregate_travel_time_to_work"" FLOAT,
	""income_less_10000"" FLOAT,
	""income_10000_14999"" FLOAT,
	""income_15000_19999"" FLOAT,
	""income_20000_24999"" FLOAT,
	""income_25000_29999"" FLOAT,
	""income_30000_34999"" FLOAT,
	""income_35000_39999"" FLOAT,
	""income_40000_44999"" FLOAT,
	""income_45000_49999"" FLOAT,
	""income_50000_59999"" FLOAT,
	""income_60000_74999"" FLOAT,
	""income_75000_99999"" FLOAT,
	""income_100000_124999"" FLOAT,
	""income_125000_149999"" FLOAT,
	""income_150000_199999"" FLOAT,
	""income_200000_or_more"" FLOAT,
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" FLOAT,
	""owner_occupied_housing_units_lower_value_quartile"" FLOAT,
	""owner_occupied_housing_units_median_value"" FLOAT,
	""owner_occupied_housing_units_upper_value_quartile"" FLOAT,
	""married_households"" FLOAT,
	""occupied_housing_units"" FLOAT,
	""housing_units_renter_occupied"" FLOAT,
	""dwellings_1_units_detached"" FLOAT,
	""dwellings_1_units_attached"" FLOAT,
	""dwellings_2_units"" FLOAT,
	""dwellings_3_to_4_units"" FLOAT,
	""dwellings_5_to_9_units"" FLOAT,
	""dwellings_10_to_19_units"" FLOAT,
	""dwellings_20_to_49_units"" FLOAT,
	""dwellings_50_or_more_units"" FLOAT,
	""mobile_homes"" FLOAT,
	""housing_built_2005_or_later"" FLOAT,
	""housing_built_2000_to_2004"" FLOAT,
	""housing_built_1939_or_earlier"" FLOAT,
	""male_under_5"" FLOAT,
	""male_5_to_9"" FLOAT,
	""male_10_to_14"" FLOAT,
	""male_15_to_17"" FLOAT,
	""male_18_to_19"" FLOAT,
	""male_20"" FLOAT,
	""male_21"" FLOAT,
	""male_22_to_24"" FLOAT,
	""male_25_to_29"" FLOAT,
	""male_30_to_34"" FLOAT,
	""male_35_to_39"" FLOAT,
	""male_40_to_44"" FLOAT,
	""male_45_to_49"" FLOAT,
	""male_50_to_54"" FLOAT,
	""male_55_to_59"" FLOAT,
	""male_60_61"" FLOAT,
	""male_62_64"" FLOAT,
	""male_65_to_66"" FLOAT,
	""male_67_to_69"" FLOAT,
	""male_70_to_74"" FLOAT,
	""male_75_to_79"" FLOAT,
	""male_80_to_84"" FLOAT,
	""male_85_and_over"" FLOAT,
	""female_under_5"" FLOAT,
	""female_5_to_9"" FLOAT,
	""female_10_to_14"" FLOAT,
	""female_15_to_17"" FLOAT,
	""female_18_to_19"" FLOAT,
	""female_20"" FLOAT,
	""female_21"" FLOAT,
	""female_22_to_24"" FLOAT,
	""female_25_to_29"" FLOAT,
	""female_30_to_34"" FLOAT,
	""female_35_to_39"" FLOAT,
	""female_40_to_44"" FLOAT,
	""female_45_to_49"" FLOAT,
	""female_50_to_54"" FLOAT,
	""female_55_to_59"" FLOAT,
	""female_60_to_61"" FLOAT,
	""female_62_to_64"" FLOAT,
	""female_65_to_66"" FLOAT,
	""female_67_to_69"" FLOAT,
	""female_70_to_74"" FLOAT,
	""female_75_to_79"" FLOAT,
	""female_80_to_84"" FLOAT,
	""female_85_and_over"" FLOAT,
	""white_including_hispanic"" FLOAT,
	""black_including_hispanic"" FLOAT,
	""amerindian_including_hispanic"" FLOAT,
	""asian_including_hispanic"" FLOAT,
	""commute_5_9_mins"" FLOAT,
	""commute_35_39_mins"" FLOAT,
	""commute_40_44_mins"" FLOAT,
	""commute_60_89_mins"" FLOAT,
	""commute_90_more_mins"" FLOAT,
	""households_retirement_income"" FLOAT,
	""armed_forces"" FLOAT,
	""civilian_labor_force"" FLOAT,
	""employed_pop"" FLOAT,
	""unemployed_pop"" FLOAT,
	""not_in_labor_force"" FLOAT,
	""pop_16_over"" FLOAT,
	""pop_in_labor_force"" FLOAT,
	""asian_male_45_54"" FLOAT,
	""asian_male_55_64"" FLOAT,
	""black_male_45_54"" FLOAT,
	""black_male_55_64"" FLOAT,
	""hispanic_male_45_54"" FLOAT,
	""hispanic_male_55_64"" FLOAT,
	""white_male_45_54"" FLOAT,
	""white_male_55_64"" FLOAT,
	""bachelors_degree_2"" FLOAT,
	""bachelors_degree_or_higher_25_64"" FLOAT,
	""children"" FLOAT,
	""children_in_single_female_hh"" FLOAT,
	""commuters_by_bus"" FLOAT,
	""commuters_by_car_truck_van"" FLOAT,
	""commuters_by_carpool"" FLOAT,
	""commuters_by_subway_or_elevated"" FLOAT,
	""commuters_drove_alone"" FLOAT,
	""different_house_year_ago_different_city"" FLOAT,
	""different_house_year_ago_same_city"" FLOAT,
	""employed_agriculture_forestry_fishing_hunting_mining"" FLOAT,
	""employed_arts_entertainment_recreation_accommodation_food"" FLOAT,
	""employed_construction"" FLOAT,
	""employed_education_health_social"" FLOAT,
	""employed_finance_insurance_real_estate"" FLOAT,
	""employed_information"" FLOAT,
	""employed_manufacturing"" FLOAT,
	""employed_other_services_not_public_admin"" FLOAT,
	""employed_public_administration"" FLOAT,
	""employed_retail_trade"" FLOAT,
	""employed_science_management_admin_waste"" FLOAT,
	""employed_transportation_warehousing_utilities"" FLOAT,
	""employed_wholesale_trade"" FLOAT,
	""female_female_households"" FLOAT,
	""four_more_cars"" FLOAT,
	""gini_index"" FLOAT,
	""graduate_professional_degree"" FLOAT,
	""group_quarters"" FLOAT,
	""high_school_including_ged"" FLOAT,
	""households_public_asst_or_food_stamps"" FLOAT,
	""in_grades_1_to_4"" FLOAT,
	""in_grades_5_to_8"" FLOAT,
	""in_grades_9_to_12"" FLOAT,
	""in_school"" FLOAT,
	""in_undergrad_college"" FLOAT,
	""less_than_high_school_graduate"" FLOAT,
	""male_45_64_associates_degree"" FLOAT,
	""male_45_64_bachelors_degree"" FLOAT,
	""male_45_64_graduate_degree"" FLOAT,
	""male_45_64_less_than_9_grade"" FLOAT,
	""male_45_64_grade_9_12"" FLOAT,
	""male_45_64_high_school"" FLOAT,
	""male_45_64_some_college"" FLOAT,
	""male_45_to_64"" FLOAT,
	""male_male_households"" FLOAT,
	""management_business_sci_arts_employed"" FLOAT,
	""no_car"" FLOAT,
	""no_cars"" FLOAT,
	""not_us_citizen_pop"" FLOAT,
	""occupation_management_arts"" FLOAT,
	""occupation_natural_resources_construction_maintenance"" FLOAT,
	""occupation_production_transportation_material"" FLOAT,
	""occupation_sales_office"" FLOAT,
	""occupation_services"" FLOAT,
	""one_car"" FLOAT,
	""two_cars"" FLOAT,
	""three_cars"" FLOAT,
	""pop_25_64"" FLOAT,
	""pop_determined_poverty_status"" FLOAT,
	""population_1_year_and_over"" FLOAT,
	""population_3_years_over"" FLOAT,
	""poverty"" FLOAT,
	""sales_office_employed"" FLOAT,
	""some_college_and_associates_degree"" FLOAT,
	""walked_to_work"" FLOAT,
	""worked_at_home"" FLOAT,
	""workers_16_and_over"" FLOAT,
	""associates_degree"" FLOAT,
	""bachelors_degree"" FLOAT,
	""high_school_diploma"" FLOAT,
	""less_one_year_college"" FLOAT,
	""masters_degree"" FLOAT,
	""one_year_more_college"" FLOAT,
	""pop_25_years_over"" FLOAT,
	""commute_35_44_mins"" FLOAT,
	""commute_60_more_mins"" FLOAT,
	""commute_less_10_mins"" FLOAT,
	""commuters_16_over"" FLOAT,
	""hispanic_any_race"" FLOAT,
	""pop_5_years_over"" FLOAT,
	""speak_only_english_at_home"" FLOAT,
	""speak_spanish_at_home"" FLOAT,
	""speak_spanish_at_home_low_english"" FLOAT,
	""pop_15_and_over"" FLOAT,
	""pop_never_married"" FLOAT,
	""pop_now_married"" FLOAT,
	""pop_separated"" FLOAT,
	""pop_widowed"" FLOAT,
	""pop_divorced"" FLOAT,
	""do_date"" VARCHAR(16777216)
);"

Some other tables have the similar structure: ['CENSUSTRACT_2011_5YR', 'CENSUSTRACT_2016_5YR', 'CENSUSTRACT_2014_5YR', 'CENSUSTRACT_2010_5YR', 'CENSUSTRACT_2017_5YR', 'CENSUSTRACT_2019_5YR', 'CENSUSTRACT_2018_5YR', 'CENSUSTRACT_2013_5YR', 'CENSUSTRACT_2015_5YR', 'CENSUSTRACT_2012_5YR', 'CENSUSTRACT_2020_5YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,3
table_name,CONGRESSIONALDISTRICT_2008_1YR
description,
DDL,"create or replace TABLE CONGRESSIONALDISTRICT_2008_1YR (
	""geo_id"" VARCHAR(16777216),
	""nonfamily_households"" FLOAT,
	""family_households"" FLOAT,
	""median_year_structure_built"" FLOAT,
	""rent_burden_not_computed"" FLOAT,
	""rent_over_50_percent"" FLOAT,
	""rent_40_to_50_percent"" FLOAT,
	""rent_35_to_40_percent"" FLOAT,
	""rent_30_to_35_percent"" FLOAT,
	""rent_25_to_30_percent"" FLOAT,
	""rent_20_to_25_percent"" FLOAT,
	""rent_15_to_20_percent"" FLOAT,
	""rent_10_to_15_percent"" FLOAT,
	""rent_under_10_percent"" FLOAT,
	""total_pop"" FLOAT,
	""male_pop"" FLOAT,
	""female_pop"" FLOAT,
	""median_age"" FLOAT,
	""white_pop"" FLOAT,
	""black_pop"" FLOAT,
	""asian_pop"" FLOAT,
	""hispanic_pop"" FLOAT,
	""amerindian_pop"" FLOAT,
	""other_race_pop"" FLOAT,
	""two_or_more_races_pop"" FLOAT,
	""not_hispanic_pop"" FLOAT,
	""commuters_by_public_transportation"" FLOAT,
	""households"" FLOAT,
	""median_income"" FLOAT,
	""income_per_capita"" FLOAT,
	""housing_units"" FLOAT,
	""vacant_housing_units"" FLOAT,
	""vacant_housing_units_for_rent"" FLOAT,
	""vacant_housing_units_for_sale"" FLOAT,
	""median_rent"" FLOAT,
	""percent_income_spent_on_rent"" FLOAT,
	""owner_occupied_housing_units"" FLOAT,
	""million_dollar_housing_units"" FLOAT,
	""mortgaged_housing_units"" FLOAT,
	""families_with_young_children"" FLOAT,
	""two_parent_families_with_young_children"" FLOAT,
	""two_parents_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_father_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_mother_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_not_in_labor_force_families_with_young_children"" FLOAT,
	""one_parent_families_with_young_children"" FLOAT,
	""father_one_parent_families_with_young_children"" FLOAT,
	""father_in_labor_force_one_parent_families_with_young_children"" FLOAT,
	""commute_10_14_mins"" FLOAT,
	""commute_15_19_mins"" FLOAT,
	""commute_20_24_mins"" FLOAT,
	""commute_25_29_mins"" FLOAT,
	""commute_30_34_mins"" FLOAT,
	""commute_45_59_mins"" FLOAT,
	""aggregate_travel_time_to_work"" FLOAT,
	""income_less_10000"" FLOAT,
	""income_10000_14999"" FLOAT,
	""income_15000_19999"" FLOAT,
	""income_20000_24999"" FLOAT,
	""income_25000_29999"" FLOAT,
	""income_30000_34999"" FLOAT,
	""income_35000_39999"" FLOAT,
	""income_40000_44999"" FLOAT,
	""income_45000_49999"" FLOAT,
	""income_50000_59999"" FLOAT,
	""income_60000_74999"" FLOAT,
	""income_75000_99999"" FLOAT,
	""income_100000_124999"" FLOAT,
	""income_125000_149999"" FLOAT,
	""income_150000_199999"" FLOAT,
	""income_200000_or_more"" FLOAT,
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" FLOAT,
	""owner_occupied_housing_units_lower_value_quartile"" FLOAT,
	""owner_occupied_housing_units_median_value"" FLOAT,
	""owner_occupied_housing_units_upper_value_quartile"" FLOAT,
	""married_households"" FLOAT,
	""occupied_housing_units"" FLOAT,
	""housing_units_renter_occupied"" FLOAT,
	""dwellings_1_units_detached"" FLOAT,
	""dwellings_1_units_attached"" FLOAT,
	""dwellings_2_units"" FLOAT,
	""dwellings_3_to_4_units"" FLOAT,
	""dwellings_5_to_9_units"" FLOAT,
	""dwellings_10_to_19_units"" FLOAT,
	""dwellings_20_to_49_units"" FLOAT,
	""dwellings_50_or_more_units"" FLOAT,
	""mobile_homes"" FLOAT,
	""housing_built_2005_or_later"" FLOAT,
	""housing_built_2000_to_2004"" FLOAT,
	""housing_built_1939_or_earlier"" FLOAT,
	""male_under_5"" FLOAT,
	""male_5_to_9"" FLOAT,
	""male_10_to_14"" FLOAT,
	""male_15_to_17"" FLOAT,
	""male_18_to_19"" FLOAT,
	""male_20"" FLOAT,
	""male_21"" FLOAT,
	""male_22_to_24"" FLOAT,
	""male_25_to_29"" FLOAT,
	""male_30_to_34"" FLOAT,
	""male_35_to_39"" FLOAT,
	""male_40_to_44"" FLOAT,
	""male_45_to_49"" FLOAT,
	""male_50_to_54"" FLOAT,
	""male_55_to_59"" FLOAT,
	""male_60_61"" FLOAT,
	""male_62_64"" FLOAT,
	""male_65_to_66"" FLOAT,
	""male_67_to_69"" FLOAT,
	""male_70_to_74"" FLOAT,
	""male_75_to_79"" FLOAT,
	""male_80_to_84"" FLOAT,
	""male_85_and_over"" FLOAT,
	""female_under_5"" FLOAT,
	""female_5_to_9"" FLOAT,
	""female_10_to_14"" FLOAT,
	""female_15_to_17"" FLOAT,
	""female_18_to_19"" FLOAT,
	""female_20"" FLOAT,
	""female_21"" FLOAT,
	""female_22_to_24"" FLOAT,
	""female_25_to_29"" FLOAT,
	""female_30_to_34"" FLOAT,
	""female_35_to_39"" FLOAT,
	""female_40_to_44"" FLOAT,
	""female_45_to_49"" FLOAT,
	""female_50_to_54"" FLOAT,
	""female_55_to_59"" FLOAT,
	""female_60_to_61"" FLOAT,
	""female_62_to_64"" FLOAT,
	""female_65_to_66"" FLOAT,
	""female_67_to_69"" FLOAT,
	""female_70_to_74"" FLOAT,
	""female_75_to_79"" FLOAT,
	""female_80_to_84"" FLOAT,
	""female_85_and_over"" FLOAT,
	""white_including_hispanic"" FLOAT,
	""black_including_hispanic"" FLOAT,
	""amerindian_including_hispanic"" FLOAT,
	""asian_including_hispanic"" FLOAT,
	""commute_5_9_mins"" FLOAT,
	""commute_35_39_mins"" FLOAT,
	""commute_40_44_mins"" FLOAT,
	""commute_60_89_mins"" FLOAT,
	""commute_90_more_mins"" FLOAT,
	""households_retirement_income"" FLOAT,
	""armed_forces"" FLOAT,
	""civilian_labor_force"" FLOAT,
	""employed_pop"" FLOAT,
	""unemployed_pop"" FLOAT,
	""not_in_labor_force"" FLOAT,
	""pop_16_over"" FLOAT,
	""pop_in_labor_force"" FLOAT,
	""asian_male_45_54"" FLOAT,
	""asian_male_55_64"" FLOAT,
	""black_male_45_54"" FLOAT,
	""black_male_55_64"" FLOAT,
	""hispanic_male_45_54"" FLOAT,
	""hispanic_male_55_64"" FLOAT,
	""white_male_45_54"" FLOAT,
	""white_male_55_64"" FLOAT,
	""bachelors_degree_2"" FLOAT,
	""bachelors_degree_or_higher_25_64"" FLOAT,
	""children"" FLOAT,
	""children_in_single_female_hh"" FLOAT,
	""commuters_by_bus"" FLOAT,
	""commuters_by_car_truck_van"" FLOAT,
	""commuters_by_carpool"" FLOAT,
	""commuters_by_subway_or_elevated"" FLOAT,
	""commuters_drove_alone"" FLOAT,
	""different_house_year_ago_different_city"" FLOAT,
	""different_house_year_ago_same_city"" FLOAT,
	""employed_agriculture_forestry_fishing_hunting_mining"" FLOAT,
	""employed_arts_entertainment_recreation_accommodation_food"" FLOAT,
	""employed_construction"" FLOAT,
	""employed_education_health_social"" FLOAT,
	""employed_finance_insurance_real_estate"" FLOAT,
	""employed_information"" FLOAT,
	""employed_manufacturing"" FLOAT,
	""employed_other_services_not_public_admin"" FLOAT,
	""employed_public_administration"" FLOAT,
	""employed_retail_trade"" FLOAT,
	""employed_science_management_admin_waste"" FLOAT,
	""employed_transportation_warehousing_utilities"" FLOAT,
	""employed_wholesale_trade"" FLOAT,
	""female_female_households"" FLOAT,
	""four_more_cars"" FLOAT,
	""gini_index"" FLOAT,
	""graduate_professional_degree"" FLOAT,
	""group_quarters"" FLOAT,
	""high_school_including_ged"" FLOAT,
	""households_public_asst_or_food_stamps"" FLOAT,
	""in_grades_1_to_4"" FLOAT,
	""in_grades_5_to_8"" FLOAT,
	""in_grades_9_to_12"" FLOAT,
	""in_school"" FLOAT,
	""in_undergrad_college"" FLOAT,
	""less_than_high_school_graduate"" FLOAT,
	""male_45_64_associates_degree"" FLOAT,
	""male_45_64_bachelors_degree"" FLOAT,
	""male_45_64_graduate_degree"" FLOAT,
	""male_45_64_less_than_9_grade"" FLOAT,
	""male_45_64_grade_9_12"" FLOAT,
	""male_45_64_high_school"" FLOAT,
	""male_45_64_some_college"" FLOAT,
	""male_45_to_64"" FLOAT,
	""male_male_households"" FLOAT,
	""management_business_sci_arts_employed"" FLOAT,
	""no_car"" FLOAT,
	""no_cars"" FLOAT,
	""not_us_citizen_pop"" FLOAT,
	""occupation_management_arts"" FLOAT,
	""occupation_natural_resources_construction_maintenance"" FLOAT,
	""occupation_production_transportation_material"" FLOAT,
	""occupation_sales_office"" FLOAT,
	""occupation_services"" FLOAT,
	""one_car"" FLOAT,
	""two_cars"" FLOAT,
	""three_cars"" FLOAT,
	""pop_25_64"" FLOAT,
	""pop_determined_poverty_status"" FLOAT,
	""population_1_year_and_over"" FLOAT,
	""population_3_years_over"" FLOAT,
	""poverty"" FLOAT,
	""sales_office_employed"" FLOAT,
	""some_college_and_associates_degree"" FLOAT,
	""walked_to_work"" FLOAT,
	""worked_at_home"" FLOAT,
	""workers_16_and_over"" FLOAT,
	""associates_degree"" FLOAT,
	""bachelors_degree"" FLOAT,
	""high_school_diploma"" FLOAT,
	""less_one_year_college"" FLOAT,
	""masters_degree"" FLOAT,
	""one_year_more_college"" FLOAT,
	""pop_25_years_over"" FLOAT,
	""commute_35_44_mins"" FLOAT,
	""commute_60_more_mins"" FLOAT,
	""commute_less_10_mins"" FLOAT,
	""commuters_16_over"" FLOAT,
	""hispanic_any_race"" FLOAT,
	""pop_5_years_over"" FLOAT,
	""speak_only_english_at_home"" FLOAT,
	""speak_spanish_at_home"" FLOAT,
	""speak_spanish_at_home_low_english"" FLOAT,
	""pop_15_and_over"" FLOAT,
	""pop_never_married"" FLOAT,
	""pop_now_married"" FLOAT,
	""pop_separated"" FLOAT,
	""pop_widowed"" FLOAT,
	""pop_divorced"" FLOAT,
	""do_date"" VARCHAR(16777216)
);"

Some other tables have the similar structure: ['CONGRESSIONALDISTRICT_2008_1YR', 'CONGRESSIONALDISTRICT_2009_3YR', 'CONGRESSIONALDISTRICT_2018_1YR', 'CONGRESSIONALDISTRICT_2020_5YR', 'CONGRESSIONALDISTRICT_2014_1YR', 'CONGRESSIONALDISTRICT_2019_5YR', 'CONGRESSIONALDISTRICT_2018_5YR', 'CONGRESSIONALDISTRICT_2015_1YR', 'CONGRESSIONALDISTRICT_2013_3YR', 'CONGRESSIONALDISTRICT_2014_5YR', 'CONGRESSIONALDISTRICT_2012_1YR', 'CONGRESSIONALDISTRICT_2012_5YR', 'CONGRESSIONALDISTRICT_2011_5YR', 'CONGRESSIONALDISTRICT_2011_1YR', 'CONGRESSIONALDISTRICT_2016_1YR', 'CONGRESSIONALDISTRICT_2012_3YR', 'CONGRESSIONALDISTRICT_2016_5YR', 'CONGRESSIONALDISTRICT_2009_1YR', 'CONGRESSIONALDISTRICT_2010_1YR', 'CONGRESSIONALDISTRICT_2015_5YR', 'CONGRESSIONALDISTRICT_2010_3YR', 'CONGRESSIONALDISTRICT_2013_5YR', 'CONGRESSIONALDISTRICT_2013_1YR', 'CONGRESSIONALDISTRICT_2007_1YR', 'CONGRESSIONALDISTRICT_2007_3YR', 'CONGRESSIONALDISTRICT_2011_3YR', 'CONGRESSIONALDISTRICT_2017_1YR', 'CONGRESSIONALDISTRICT_2019_1YR', 'CONGRESSIONALDISTRICT_2008_3YR', 'CONGRESSIONALDISTRICT_2010_5YR', 'CONGRESSIONALDISTRICT_2017_5YR', 'CONGRESSIONALDISTRICT_2021_1YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,4
table_name,COUNTY_2012_5YR
description,
DDL,"create or replace TABLE COUNTY_2012_5YR (
	""geo_id"" VARCHAR(16777216),
	""nonfamily_households"" FLOAT,
	""family_households"" FLOAT,
	""median_year_structure_built"" FLOAT,
	""rent_burden_not_computed"" FLOAT,
	""rent_over_50_percent"" FLOAT,
	""rent_40_to_50_percent"" FLOAT,
	""rent_35_to_40_percent"" FLOAT,
	""rent_30_to_35_percent"" FLOAT,
	""rent_25_to_30_percent"" FLOAT,
	""rent_20_to_25_percent"" FLOAT,
	""rent_15_to_20_percent"" FLOAT,
	""rent_10_to_15_percent"" FLOAT,
	""rent_under_10_percent"" FLOAT,
	""total_pop"" FLOAT,
	""male_pop"" FLOAT,
	""female_pop"" FLOAT,
	""median_age"" FLOAT,
	""white_pop"" FLOAT,
	""black_pop"" FLOAT,
	""asian_pop"" FLOAT,
	""hispanic_pop"" FLOAT,
	""amerindian_pop"" FLOAT,
	""other_race_pop"" FLOAT,
	""two_or_more_races_pop"" FLOAT,
	""not_hispanic_pop"" FLOAT,
	""commuters_by_public_transportation"" FLOAT,
	""households"" FLOAT,
	""median_income"" FLOAT,
	""income_per_capita"" FLOAT,
	""housing_units"" FLOAT,
	""vacant_housing_units"" FLOAT,
	""vacant_housing_units_for_rent"" FLOAT,
	""vacant_housing_units_for_sale"" FLOAT,
	""median_rent"" FLOAT,
	""percent_income_spent_on_rent"" FLOAT,
	""owner_occupied_housing_units"" FLOAT,
	""million_dollar_housing_units"" FLOAT,
	""mortgaged_housing_units"" FLOAT,
	""families_with_young_children"" FLOAT,
	""two_parent_families_with_young_children"" FLOAT,
	""two_parents_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_father_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_mother_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_not_in_labor_force_families_with_young_children"" FLOAT,
	""one_parent_families_with_young_children"" FLOAT,
	""father_one_parent_families_with_young_children"" FLOAT,
	""father_in_labor_force_one_parent_families_with_young_children"" FLOAT,
	""commute_10_14_mins"" FLOAT,
	""commute_15_19_mins"" FLOAT,
	""commute_20_24_mins"" FLOAT,
	""commute_25_29_mins"" FLOAT,
	""commute_30_34_mins"" FLOAT,
	""commute_45_59_mins"" FLOAT,
	""aggregate_travel_time_to_work"" FLOAT,
	""income_less_10000"" FLOAT,
	""income_10000_14999"" FLOAT,
	""income_15000_19999"" FLOAT,
	""income_20000_24999"" FLOAT,
	""income_25000_29999"" FLOAT,
	""income_30000_34999"" FLOAT,
	""income_35000_39999"" FLOAT,
	""income_40000_44999"" FLOAT,
	""income_45000_49999"" FLOAT,
	""income_50000_59999"" FLOAT,
	""income_60000_74999"" FLOAT,
	""income_75000_99999"" FLOAT,
	""income_100000_124999"" FLOAT,
	""income_125000_149999"" FLOAT,
	""income_150000_199999"" FLOAT,
	""income_200000_or_more"" FLOAT,
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" FLOAT,
	""owner_occupied_housing_units_lower_value_quartile"" FLOAT,
	""owner_occupied_housing_units_median_value"" FLOAT,
	""owner_occupied_housing_units_upper_value_quartile"" FLOAT,
	""married_households"" FLOAT,
	""occupied_housing_units"" FLOAT,
	""housing_units_renter_occupied"" FLOAT,
	""dwellings_1_units_detached"" FLOAT,
	""dwellings_1_units_attached"" FLOAT,
	""dwellings_2_units"" FLOAT,
	""dwellings_3_to_4_units"" FLOAT,
	""dwellings_5_to_9_units"" FLOAT,
	""dwellings_10_to_19_units"" FLOAT,
	""dwellings_20_to_49_units"" FLOAT,
	""dwellings_50_or_more_units"" FLOAT,
	""mobile_homes"" FLOAT,
	""housing_built_2005_or_later"" FLOAT,
	""housing_built_2000_to_2004"" FLOAT,
	""housing_built_1939_or_earlier"" FLOAT,
	""male_under_5"" FLOAT,
	""male_5_to_9"" FLOAT,
	""male_10_to_14"" FLOAT,
	""male_15_to_17"" FLOAT,
	""male_18_to_19"" FLOAT,
	""male_20"" FLOAT,
	""male_21"" FLOAT,
	""male_22_to_24"" FLOAT,
	""male_25_to_29"" FLOAT,
	""male_30_to_34"" FLOAT,
	""male_35_to_39"" FLOAT,
	""male_40_to_44"" FLOAT,
	""male_45_to_49"" FLOAT,
	""male_50_to_54"" FLOAT,
	""male_55_to_59"" FLOAT,
	""male_60_61"" FLOAT,
	""male_62_64"" FLOAT,
	""male_65_to_66"" FLOAT,
	""male_67_to_69"" FLOAT,
	""male_70_to_74"" FLOAT,
	""male_75_to_79"" FLOAT,
	""male_80_to_84"" FLOAT,
	""male_85_and_over"" FLOAT,
	""female_under_5"" FLOAT,
	""female_5_to_9"" FLOAT,
	""female_10_to_14"" FLOAT,
	""female_15_to_17"" FLOAT,
	""female_18_to_19"" FLOAT,
	""female_20"" FLOAT,
	""female_21"" FLOAT,
	""female_22_to_24"" FLOAT,
	""female_25_to_29"" FLOAT,
	""female_30_to_34"" FLOAT,
	""female_35_to_39"" FLOAT,
	""female_40_to_44"" FLOAT,
	""female_45_to_49"" FLOAT,
	""female_50_to_54"" FLOAT,
	""female_55_to_59"" FLOAT,
	""female_60_to_61"" FLOAT,
	""female_62_to_64"" FLOAT,
	""female_65_to_66"" FLOAT,
	""female_67_to_69"" FLOAT,
	""female_70_to_74"" FLOAT,
	""female_75_to_79"" FLOAT,
	""female_80_to_84"" FLOAT,
	""female_85_and_over"" FLOAT,
	""white_including_hispanic"" FLOAT,
	""black_including_hispanic"" FLOAT,
	""amerindian_including_hispanic"" FLOAT,
	""asian_including_hispanic"" FLOAT,
	""commute_5_9_mins"" FLOAT,
	""commute_35_39_mins"" FLOAT,
	""commute_40_44_mins"" FLOAT,
	""commute_60_89_mins"" FLOAT,
	""commute_90_more_mins"" FLOAT,
	""households_retirement_income"" FLOAT,
	""armed_forces"" FLOAT,
	""civilian_labor_force"" FLOAT,
	""employed_pop"" FLOAT,
	""unemployed_pop"" FLOAT,
	""not_in_labor_force"" FLOAT,
	""pop_16_over"" FLOAT,
	""pop_in_labor_force"" FLOAT,
	""asian_male_45_54"" FLOAT,
	""asian_male_55_64"" FLOAT,
	""black_male_45_54"" FLOAT,
	""black_male_55_64"" FLOAT,
	""hispanic_male_45_54"" FLOAT,
	""hispanic_male_55_64"" FLOAT,
	""white_male_45_54"" FLOAT,
	""white_male_55_64"" FLOAT,
	""bachelors_degree_2"" FLOAT,
	""bachelors_degree_or_higher_25_64"" FLOAT,
	""children"" FLOAT,
	""children_in_single_female_hh"" FLOAT,
	""commuters_by_bus"" FLOAT,
	""commuters_by_car_truck_van"" FLOAT,
	""commuters_by_carpool"" FLOAT,
	""commuters_by_subway_or_elevated"" FLOAT,
	""commuters_drove_alone"" FLOAT,
	""different_house_year_ago_different_city"" FLOAT,
	""different_house_year_ago_same_city"" FLOAT,
	""employed_agriculture_forestry_fishing_hunting_mining"" FLOAT,
	""employed_arts_entertainment_recreation_accommodation_food"" FLOAT,
	""employed_construction"" FLOAT,
	""employed_education_health_social"" FLOAT,
	""employed_finance_insurance_real_estate"" FLOAT,
	""employed_information"" FLOAT,
	""employed_manufacturing"" FLOAT,
	""employed_other_services_not_public_admin"" FLOAT,
	""employed_public_administration"" FLOAT,
	""employed_retail_trade"" FLOAT,
	""employed_science_management_admin_waste"" FLOAT,
	""employed_transportation_warehousing_utilities"" FLOAT,
	""employed_wholesale_trade"" FLOAT,
	""female_female_households"" FLOAT,
	""four_more_cars"" FLOAT,
	""gini_index"" FLOAT,
	""graduate_professional_degree"" FLOAT,
	""group_quarters"" FLOAT,
	""high_school_including_ged"" FLOAT,
	""households_public_asst_or_food_stamps"" FLOAT,
	""in_grades_1_to_4"" FLOAT,
	""in_grades_5_to_8"" FLOAT,
	""in_grades_9_to_12"" FLOAT,
	""in_school"" FLOAT,
	""in_undergrad_college"" FLOAT,
	""less_than_high_school_graduate"" FLOAT,
	""male_45_64_associates_degree"" FLOAT,
	""male_45_64_bachelors_degree"" FLOAT,
	""male_45_64_graduate_degree"" FLOAT,
	""male_45_64_less_than_9_grade"" FLOAT,
	""male_45_64_grade_9_12"" FLOAT,
	""male_45_64_high_school"" FLOAT,
	""male_45_64_some_college"" FLOAT,
	""male_45_to_64"" FLOAT,
	""male_male_households"" FLOAT,
	""management_business_sci_arts_employed"" FLOAT,
	""no_car"" FLOAT,
	""no_cars"" FLOAT,
	""not_us_citizen_pop"" FLOAT,
	""occupation_management_arts"" FLOAT,
	""occupation_natural_resources_construction_maintenance"" FLOAT,
	""occupation_production_transportation_material"" FLOAT,
	""occupation_sales_office"" FLOAT,
	""occupation_services"" FLOAT,
	""one_car"" FLOAT,
	""two_cars"" FLOAT,
	""three_cars"" FLOAT,
	""pop_25_64"" FLOAT,
	""pop_determined_poverty_status"" FLOAT,
	""population_1_year_and_over"" FLOAT,
	""population_3_years_over"" FLOAT,
	""poverty"" FLOAT,
	""sales_office_employed"" FLOAT,
	""some_college_and_associates_degree"" FLOAT,
	""walked_to_work"" FLOAT,
	""worked_at_home"" FLOAT,
	""workers_16_and_over"" FLOAT,
	""associates_degree"" FLOAT,
	""bachelors_degree"" FLOAT,
	""high_school_diploma"" FLOAT,
	""less_one_year_college"" FLOAT,
	""masters_degree"" FLOAT,
	""one_year_more_college"" FLOAT,
	""pop_25_years_over"" FLOAT,
	""commute_35_44_mins"" FLOAT,
	""commute_60_more_mins"" FLOAT,
	""commute_less_10_mins"" FLOAT,
	""commuters_16_over"" FLOAT,
	""hispanic_any_race"" FLOAT,
	""pop_5_years_over"" FLOAT,
	""speak_only_english_at_home"" FLOAT,
	""speak_spanish_at_home"" FLOAT,
	""speak_spanish_at_home_low_english"" FLOAT,
	""pop_15_and_over"" FLOAT,
	""pop_never_married"" FLOAT,
	""pop_now_married"" FLOAT,
	""pop_separated"" FLOAT,
	""pop_widowed"" FLOAT,
	""pop_divorced"" FLOAT,
	""do_date"" VARCHAR(16777216)
);"

Some other tables have the similar structure: ['COUNTY_2012_5YR', 'COUNTY_2016_1YR', 'COUNTY_2007_3YR', 'COUNTY_2013_1YR', 'COUNTY_2017_1YR', 'COUNTY_2018_5YR', 'COUNTY_2016_5YR', 'COUNTY_2008_1YR', 'COUNTY_2017_5YR', 'COUNTY_2019_5YR', 'COUNTY_2007_1YR', 'COUNTY_2013_3YR', 'COUNTY_2015_1YR', 'COUNTY_2019_1YR', 'COUNTY_2011_5YR', 'COUNTY_2008_3YR', 'COUNTY_2014_1YR', 'COUNTY_2012_3YR', 'COUNTY_2009_1YR', 'COUNTY_2010_5YR', 'COUNTY_2014_5YR', 'COUNTY_2009_3YR', 'COUNTY_2010_1YR', 'COUNTY_2010_3YR', 'COUNTY_2011_1YR', 'COUNTY_2011_3YR', 'COUNTY_2015_5YR', 'COUNTY_2018_1YR', 'COUNTY_2012_1YR', 'COUNTY_2013_5YR', 'COUNTY_2020_5YR', 'COUNTY_2021_1YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,5
table_name,PUMA_2017_1YR
description,
DDL,"create or replace TABLE PUMA_2017_1YR (
	""geo_id"" VARCHAR(16777216),
	""nonfamily_households"" FLOAT,
	""family_households"" FLOAT,
	""median_year_structure_built"" FLOAT,
	""rent_burden_not_computed"" FLOAT,
	""rent_over_50_percent"" FLOAT,
	""rent_40_to_50_percent"" FLOAT,
	""rent_35_to_40_percent"" FLOAT,
	""rent_30_to_35_percent"" FLOAT,
	""rent_25_to_30_percent"" FLOAT,
	""rent_20_to_25_percent"" FLOAT,
	""rent_15_to_20_percent"" FLOAT,
	""rent_10_to_15_percent"" FLOAT,
	""rent_under_10_percent"" FLOAT,
	""total_pop"" FLOAT,
	""male_pop"" FLOAT,
	""female_pop"" FLOAT,
	""median_age"" FLOAT,
	""white_pop"" FLOAT,
	""black_pop"" FLOAT,
	""asian_pop"" FLOAT,
	""hispanic_pop"" FLOAT,
	""amerindian_pop"" FLOAT,
	""other_race_pop"" FLOAT,
	""two_or_more_races_pop"" FLOAT,
	""not_hispanic_pop"" FLOAT,
	""commuters_by_public_transportation"" FLOAT,
	""households"" FLOAT,
	""median_income"" FLOAT,
	""income_per_capita"" FLOAT,
	""housing_units"" FLOAT,
	""vacant_housing_units"" FLOAT,
	""vacant_housing_units_for_rent"" FLOAT,
	""vacant_housing_units_for_sale"" FLOAT,
	""median_rent"" FLOAT,
	""percent_income_spent_on_rent"" FLOAT,
	""owner_occupied_housing_units"" FLOAT,
	""million_dollar_housing_units"" FLOAT,
	""mortgaged_housing_units"" FLOAT,
	""families_with_young_children"" FLOAT,
	""two_parent_families_with_young_children"" FLOAT,
	""two_parents_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_father_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_mother_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_not_in_labor_force_families_with_young_children"" FLOAT,
	""one_parent_families_with_young_children"" FLOAT,
	""father_one_parent_families_with_young_children"" FLOAT,
	""father_in_labor_force_one_parent_families_with_young_children"" FLOAT,
	""commute_10_14_mins"" FLOAT,
	""commute_15_19_mins"" FLOAT,
	""commute_20_24_mins"" FLOAT,
	""commute_25_29_mins"" FLOAT,
	""commute_30_34_mins"" FLOAT,
	""commute_45_59_mins"" FLOAT,
	""aggregate_travel_time_to_work"" FLOAT,
	""income_less_10000"" FLOAT,
	""income_10000_14999"" FLOAT,
	""income_15000_19999"" FLOAT,
	""income_20000_24999"" FLOAT,
	""income_25000_29999"" FLOAT,
	""income_30000_34999"" FLOAT,
	""income_35000_39999"" FLOAT,
	""income_40000_44999"" FLOAT,
	""income_45000_49999"" FLOAT,
	""income_50000_59999"" FLOAT,
	""income_60000_74999"" FLOAT,
	""income_75000_99999"" FLOAT,
	""income_100000_124999"" FLOAT,
	""income_125000_149999"" FLOAT,
	""income_150000_199999"" FLOAT,
	""income_200000_or_more"" FLOAT,
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" FLOAT,
	""owner_occupied_housing_units_lower_value_quartile"" FLOAT,
	""owner_occupied_housing_units_median_value"" FLOAT,
	""owner_occupied_housing_units_upper_value_quartile"" FLOAT,
	""married_households"" FLOAT,
	""occupied_housing_units"" FLOAT,
	""housing_units_renter_occupied"" FLOAT,
	""dwellings_1_units_detached"" FLOAT,
	""dwellings_1_units_attached"" FLOAT,
	""dwellings_2_units"" FLOAT,
	""dwellings_3_to_4_units"" FLOAT,
	""dwellings_5_to_9_units"" FLOAT,
	""dwellings_10_to_19_units"" FLOAT,
	""dwellings_20_to_49_units"" FLOAT,
	""dwellings_50_or_more_units"" FLOAT,
	""mobile_homes"" FLOAT,
	""housing_built_2005_or_later"" FLOAT,
	""housing_built_2000_to_2004"" FLOAT,
	""housing_built_1939_or_earlier"" FLOAT,
	""male_under_5"" FLOAT,
	""male_5_to_9"" FLOAT,
	""male_10_to_14"" FLOAT,
	""male_15_to_17"" FLOAT,
	""male_18_to_19"" FLOAT,
	""male_20"" FLOAT,
	""male_21"" FLOAT,
	""male_22_to_24"" FLOAT,
	""male_25_to_29"" FLOAT,
	""male_30_to_34"" FLOAT,
	""male_35_to_39"" FLOAT,
	""male_40_to_44"" FLOAT,
	""male_45_to_49"" FLOAT,
	""male_50_to_54"" FLOAT,
	""male_55_to_59"" FLOAT,
	""male_60_61"" FLOAT,
	""male_62_64"" FLOAT,
	""male_65_to_66"" FLOAT,
	""male_67_to_69"" FLOAT,
	""male_70_to_74"" FLOAT,
	""male_75_to_79"" FLOAT,
	""male_80_to_84"" FLOAT,
	""male_85_and_over"" FLOAT,
	""female_under_5"" FLOAT,
	""female_5_to_9"" FLOAT,
	""female_10_to_14"" FLOAT,
	""female_15_to_17"" FLOAT,
	""female_18_to_19"" FLOAT,
	""female_20"" FLOAT,
	""female_21"" FLOAT,
	""female_22_to_24"" FLOAT,
	""female_25_to_29"" FLOAT,
	""female_30_to_34"" FLOAT,
	""female_35_to_39"" FLOAT,
	""female_40_to_44"" FLOAT,
	""female_45_to_49"" FLOAT,
	""female_50_to_54"" FLOAT,
	""female_55_to_59"" FLOAT,
	""female_60_to_61"" FLOAT,
	""female_62_to_64"" FLOAT,
	""female_65_to_66"" FLOAT,
	""female_67_to_69"" FLOAT,
	""female_70_to_74"" FLOAT,
	""female_75_to_79"" FLOAT,
	""female_80_to_84"" FLOAT,
	""female_85_and_over"" FLOAT,
	""white_including_hispanic"" FLOAT,
	""black_including_hispanic"" FLOAT,
	""amerindian_including_hispanic"" FLOAT,
	""asian_including_hispanic"" FLOAT,
	""commute_5_9_mins"" FLOAT,
	""commute_35_39_mins"" FLOAT,
	""commute_40_44_mins"" FLOAT,
	""commute_60_89_mins"" FLOAT,
	""commute_90_more_mins"" FLOAT,
	""households_retirement_income"" FLOAT,
	""armed_forces"" FLOAT,
	""civilian_labor_force"" FLOAT,
	""employed_pop"" FLOAT,
	""unemployed_pop"" FLOAT,
	""not_in_labor_force"" FLOAT,
	""pop_16_over"" FLOAT,
	""pop_in_labor_force"" FLOAT,
	""asian_male_45_54"" FLOAT,
	""asian_male_55_64"" FLOAT,
	""black_male_45_54"" FLOAT,
	""black_male_55_64"" FLOAT,
	""hispanic_male_45_54"" FLOAT,
	""hispanic_male_55_64"" FLOAT,
	""white_male_45_54"" FLOAT,
	""white_male_55_64"" FLOAT,
	""bachelors_degree_2"" FLOAT,
	""bachelors_degree_or_higher_25_64"" FLOAT,
	""children"" FLOAT,
	""children_in_single_female_hh"" FLOAT,
	""commuters_by_bus"" FLOAT,
	""commuters_by_car_truck_van"" FLOAT,
	""commuters_by_carpool"" FLOAT,
	""commuters_by_subway_or_elevated"" FLOAT,
	""commuters_drove_alone"" FLOAT,
	""different_house_year_ago_different_city"" FLOAT,
	""different_house_year_ago_same_city"" FLOAT,
	""employed_agriculture_forestry_fishing_hunting_mining"" FLOAT,
	""employed_arts_entertainment_recreation_accommodation_food"" FLOAT,
	""employed_construction"" FLOAT,
	""employed_education_health_social"" FLOAT,
	""employed_finance_insurance_real_estate"" FLOAT,
	""employed_information"" FLOAT,
	""employed_manufacturing"" FLOAT,
	""employed_other_services_not_public_admin"" FLOAT,
	""employed_public_administration"" FLOAT,
	""employed_retail_trade"" FLOAT,
	""employed_science_management_admin_waste"" FLOAT,
	""employed_transportation_warehousing_utilities"" FLOAT,
	""employed_wholesale_trade"" FLOAT,
	""female_female_households"" FLOAT,
	""four_more_cars"" FLOAT,
	""gini_index"" FLOAT,
	""graduate_professional_degree"" FLOAT,
	""group_quarters"" FLOAT,
	""high_school_including_ged"" FLOAT,
	""households_public_asst_or_food_stamps"" FLOAT,
	""in_grades_1_to_4"" FLOAT,
	""in_grades_5_to_8"" FLOAT,
	""in_grades_9_to_12"" FLOAT,
	""in_school"" FLOAT,
	""in_undergrad_college"" FLOAT,
	""less_than_high_school_graduate"" FLOAT,
	""male_45_64_associates_degree"" FLOAT,
	""male_45_64_bachelors_degree"" FLOAT,
	""male_45_64_graduate_degree"" FLOAT,
	""male_45_64_less_than_9_grade"" FLOAT,
	""male_45_64_grade_9_12"" FLOAT,
	""male_45_64_high_school"" FLOAT,
	""male_45_64_some_college"" FLOAT,
	""male_45_to_64"" FLOAT,
	""male_male_households"" FLOAT,
	""management_business_sci_arts_employed"" FLOAT,
	""no_car"" FLOAT,
	""no_cars"" FLOAT,
	""not_us_citizen_pop"" FLOAT,
	""occupation_management_arts"" FLOAT,
	""occupation_natural_resources_construction_maintenance"" FLOAT,
	""occupation_production_transportation_material"" FLOAT,
	""occupation_sales_office"" FLOAT,
	""occupation_services"" FLOAT,
	""one_car"" FLOAT,
	""two_cars"" FLOAT,
	""three_cars"" FLOAT,
	""pop_25_64"" FLOAT,
	""pop_determined_poverty_status"" FLOAT,
	""population_1_year_and_over"" FLOAT,
	""population_3_years_over"" FLOAT,
	""poverty"" FLOAT,
	""sales_office_employed"" FLOAT,
	""some_college_and_associates_degree"" FLOAT,
	""walked_to_work"" FLOAT,
	""worked_at_home"" FLOAT,
	""workers_16_and_over"" FLOAT,
	""associates_degree"" FLOAT,
	""bachelors_degree"" FLOAT,
	""high_school_diploma"" FLOAT,
	""less_one_year_college"" FLOAT,
	""masters_degree"" FLOAT,
	""one_year_more_college"" FLOAT,
	""pop_25_years_over"" FLOAT,
	""commute_35_44_mins"" FLOAT,
	""commute_60_more_mins"" FLOAT,
	""commute_less_10_mins"" FLOAT,
	""commuters_16_over"" FLOAT,
	""hispanic_any_race"" FLOAT,
	""pop_5_years_over"" FLOAT,
	""speak_only_english_at_home"" FLOAT,
	""speak_spanish_at_home"" FLOAT,
	""speak_spanish_at_home_low_english"" FLOAT,
	""pop_15_and_over"" FLOAT,
	""pop_never_married"" FLOAT,
	""pop_now_married"" FLOAT,
	""pop_separated"" FLOAT,
	""pop_widowed"" FLOAT,
	""pop_divorced"" FLOAT,
	""do_date"" VARCHAR(16777216)
);"

Some other tables have the similar structure: ['PUMA_2017_1YR', 'PUMA_2013_5YR', 'PUMA_2008_1YR', 'PUMA_2013_1YR', 'PUMA_2008_3YR', 'PUMA_2007_3YR', 'PUMA_2009_3YR', 'PUMA_2014_1YR', 'PUMA_2016_5YR', 'PUMA_2018_5YR', 'PUMA_2020_5YR', 'PUMA_2009_1YR', 'PUMA_2015_1YR', 'PUMA_2017_5YR', 'PUMA_2012_3YR', 'PUMA_2013_3YR', 'PUMA_2014_5YR', 'PUMA_2018_1YR', 'PUMA_2019_1YR', 'PUMA_2011_5YR', 'PUMA_2021_1YR', 'PUMA_2011_3YR', 'PUMA_2010_3YR', 'PUMA_2007_1YR', 'PUMA_2012_1YR', 'PUMA_2015_5YR', 'PUMA_2010_1YR', 'PUMA_2010_5YR', 'PUMA_2012_5YR', 'PUMA_2019_5YR', 'PUMA_2016_1YR', 'PUMA_2011_1YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,6
table_name,PLACE_2010_3YR
description,
DDL,"create or replace TABLE PLACE_2010_3YR (
	""geo_id"" VARCHAR(16777216),
	""nonfamily_households"" FLOAT,
	""family_households"" FLOAT,
	""median_year_structure_built"" FLOAT,
	""rent_burden_not_computed"" FLOAT,
	""rent_over_50_percent"" FLOAT,
	""rent_40_to_50_percent"" FLOAT,
	""rent_35_to_40_percent"" FLOAT,
	""rent_30_to_35_percent"" FLOAT,
	""rent_25_to_30_percent"" FLOAT,
	""rent_20_to_25_percent"" FLOAT,
	""rent_15_to_20_percent"" FLOAT,
	""rent_10_to_15_percent"" FLOAT,
	""rent_under_10_percent"" FLOAT,
	""total_pop"" FLOAT,
	""male_pop"" FLOAT,
	""female_pop"" FLOAT,
	""median_age"" FLOAT,
	""white_pop"" FLOAT,
	""black_pop"" FLOAT,
	""asian_pop"" FLOAT,
	""hispanic_pop"" FLOAT,
	""amerindian_pop"" FLOAT,
	""other_race_pop"" FLOAT,
	""two_or_more_races_pop"" FLOAT,
	""not_hispanic_pop"" FLOAT,
	""commuters_by_public_transportation"" FLOAT,
	""households"" FLOAT,
	""median_income"" FLOAT,
	""income_per_capita"" FLOAT,
	""housing_units"" FLOAT,
	""vacant_housing_units"" FLOAT,
	""vacant_housing_units_for_rent"" FLOAT,
	""vacant_housing_units_for_sale"" FLOAT,
	""median_rent"" FLOAT,
	""percent_income_spent_on_rent"" FLOAT,
	""owner_occupied_housing_units"" FLOAT,
	""million_dollar_housing_units"" FLOAT,
	""mortgaged_housing_units"" FLOAT,
	""families_with_young_children"" FLOAT,
	""two_parent_families_with_young_children"" FLOAT,
	""two_parents_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_father_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_mother_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_not_in_labor_force_families_with_young_children"" FLOAT,
	""one_parent_families_with_young_children"" FLOAT,
	""father_one_parent_families_with_young_children"" FLOAT,
	""father_in_labor_force_one_parent_families_with_young_children"" FLOAT,
	""commute_10_14_mins"" FLOAT,
	""commute_15_19_mins"" FLOAT,
	""commute_20_24_mins"" FLOAT,
	""commute_25_29_mins"" FLOAT,
	""commute_30_34_mins"" FLOAT,
	""commute_45_59_mins"" FLOAT,
	""aggregate_travel_time_to_work"" FLOAT,
	""income_less_10000"" FLOAT,
	""income_10000_14999"" FLOAT,
	""income_15000_19999"" FLOAT,
	""income_20000_24999"" FLOAT,
	""income_25000_29999"" FLOAT,
	""income_30000_34999"" FLOAT,
	""income_35000_39999"" FLOAT,
	""income_40000_44999"" FLOAT,
	""income_45000_49999"" FLOAT,
	""income_50000_59999"" FLOAT,
	""income_60000_74999"" FLOAT,
	""income_75000_99999"" FLOAT,
	""income_100000_124999"" FLOAT,
	""income_125000_149999"" FLOAT,
	""income_150000_199999"" FLOAT,
	""income_200000_or_more"" FLOAT,
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" FLOAT,
	""owner_occupied_housing_units_lower_value_quartile"" FLOAT,
	""owner_occupied_housing_units_median_value"" FLOAT,
	""owner_occupied_housing_units_upper_value_quartile"" FLOAT,
	""married_households"" FLOAT,
	""occupied_housing_units"" FLOAT,
	""housing_units_renter_occupied"" FLOAT,
	""dwellings_1_units_detached"" FLOAT,
	""dwellings_1_units_attached"" FLOAT,
	""dwellings_2_units"" FLOAT,
	""dwellings_3_to_4_units"" FLOAT,
	""dwellings_5_to_9_units"" FLOAT,
	""dwellings_10_to_19_units"" FLOAT,
	""dwellings_20_to_49_units"" FLOAT,
	""dwellings_50_or_more_units"" FLOAT,
	""mobile_homes"" FLOAT,
	""housing_built_2005_or_later"" FLOAT,
	""housing_built_2000_to_2004"" FLOAT,
	""housing_built_1939_or_earlier"" FLOAT,
	""male_under_5"" FLOAT,
	""male_5_to_9"" FLOAT,
	""male_10_to_14"" FLOAT,
	""male_15_to_17"" FLOAT,
	""male_18_to_19"" FLOAT,
	""male_20"" FLOAT,
	""male_21"" FLOAT,
	""male_22_to_24"" FLOAT,
	""male_25_to_29"" FLOAT,
	""male_30_to_34"" FLOAT,
	""male_35_to_39"" FLOAT,
	""male_40_to_44"" FLOAT,
	""male_45_to_49"" FLOAT,
	""male_50_to_54"" FLOAT,
	""male_55_to_59"" FLOAT,
	""male_60_61"" FLOAT,
	""male_62_64"" FLOAT,
	""male_65_to_66"" FLOAT,
	""male_67_to_69"" FLOAT,
	""male_70_to_74"" FLOAT,
	""male_75_to_79"" FLOAT,
	""male_80_to_84"" FLOAT,
	""male_85_and_over"" FLOAT,
	""female_under_5"" FLOAT,
	""female_5_to_9"" FLOAT,
	""female_10_to_14"" FLOAT,
	""female_15_to_17"" FLOAT,
	""female_18_to_19"" FLOAT,
	""female_20"" FLOAT,
	""female_21"" FLOAT,
	""female_22_to_24"" FLOAT,
	""female_25_to_29"" FLOAT,
	""female_30_to_34"" FLOAT,
	""female_35_to_39"" FLOAT,
	""female_40_to_44"" FLOAT,
	""female_45_to_49"" FLOAT,
	""female_50_to_54"" FLOAT,
	""female_55_to_59"" FLOAT,
	""female_60_to_61"" FLOAT,
	""female_62_to_64"" FLOAT,
	""female_65_to_66"" FLOAT,
	""female_67_to_69"" FLOAT,
	""female_70_to_74"" FLOAT,
	""female_75_to_79"" FLOAT,
	""female_80_to_84"" FLOAT,
	""female_85_and_over"" FLOAT,
	""white_including_hispanic"" FLOAT,
	""black_including_hispanic"" FLOAT,
	""amerindian_including_hispanic"" FLOAT,
	""asian_including_hispanic"" FLOAT,
	""commute_5_9_mins"" FLOAT,
	""commute_35_39_mins"" FLOAT,
	""commute_40_44_mins"" FLOAT,
	""commute_60_89_mins"" FLOAT,
	""commute_90_more_mins"" FLOAT,
	""households_retirement_income"" FLOAT,
	""asian_male_45_54"" FLOAT,
	""asian_male_55_64"" FLOAT,
	""black_male_45_54"" FLOAT,
	""black_male_55_64"" FLOAT,
	""hispanic_male_45_54"" FLOAT,
	""hispanic_male_55_64"" FLOAT,
	""white_male_45_54"" FLOAT,
	""white_male_55_64"" FLOAT,
	""bachelors_degree_2"" FLOAT,
	""bachelors_degree_or_higher_25_64"" FLOAT,
	""children"" FLOAT,
	""children_in_single_female_hh"" FLOAT,
	""commuters_by_bus"" FLOAT,
	""commuters_by_car_truck_van"" FLOAT,
	""commuters_by_carpool"" FLOAT,
	""commuters_by_subway_or_elevated"" FLOAT,
	""commuters_drove_alone"" FLOAT,
	""different_house_year_ago_different_city"" FLOAT,
	""different_house_year_ago_same_city"" FLOAT,
	""employed_agriculture_forestry_fishing_hunting_mining"" FLOAT,
	""employed_arts_entertainment_recreation_accommodation_food"" FLOAT,
	""employed_construction"" FLOAT,
	""employed_education_health_social"" FLOAT,
	""employed_finance_insurance_real_estate"" FLOAT,
	""employed_information"" FLOAT,
	""employed_manufacturing"" FLOAT,
	""employed_other_services_not_public_admin"" FLOAT,
	""employed_public_administration"" FLOAT,
	""employed_retail_trade"" FLOAT,
	""employed_science_management_admin_waste"" FLOAT,
	""employed_transportation_warehousing_utilities"" FLOAT,
	""employed_wholesale_trade"" FLOAT,
	""female_female_households"" FLOAT,
	""four_more_cars"" FLOAT,
	""gini_index"" FLOAT,
	""graduate_professional_degree"" FLOAT,
	""group_quarters"" FLOAT,
	""high_school_including_ged"" FLOAT,
	""households_public_asst_or_food_stamps"" FLOAT,
	""in_grades_1_to_4"" FLOAT,
	""in_grades_5_to_8"" FLOAT,
	""in_grades_9_to_12"" FLOAT,
	""in_school"" FLOAT,
	""in_undergrad_college"" FLOAT,
	""less_than_high_school_graduate"" FLOAT,
	""male_45_64_associates_degree"" FLOAT,
	""male_45_64_bachelors_degree"" FLOAT,
	""male_45_64_graduate_degree"" FLOAT,
	""male_45_64_less_than_9_grade"" FLOAT,
	""male_45_64_grade_9_12"" FLOAT,
	""male_45_64_high_school"" FLOAT,
	""male_45_64_some_college"" FLOAT,
	""male_45_to_64"" FLOAT,
	""male_male_households"" FLOAT,
	""management_business_sci_arts_employed"" FLOAT,
	""no_car"" FLOAT,
	""no_cars"" FLOAT,
	""not_us_citizen_pop"" FLOAT,
	""occupation_management_arts"" FLOAT,
	""occupation_natural_resources_construction_maintenance"" FLOAT,
	""occupation_production_transportation_material"" FLOAT,
	""occupation_sales_office"" FLOAT,
	""occupation_services"" FLOAT,
	""one_car"" FLOAT,
	""two_cars"" FLOAT,
	""three_cars"" FLOAT,
	""pop_25_64"" FLOAT,
	""pop_determined_poverty_status"" FLOAT,
	""population_1_year_and_over"" FLOAT,
	""population_3_years_over"" FLOAT,
	""poverty"" FLOAT,
	""sales_office_employed"" FLOAT,
	""some_college_and_associates_degree"" FLOAT,
	""walked_to_work"" FLOAT,
	""worked_at_home"" FLOAT,
	""workers_16_and_over"" FLOAT,
	""associates_degree"" FLOAT,
	""bachelors_degree"" FLOAT,
	""high_school_diploma"" FLOAT,
	""less_one_year_college"" FLOAT,
	""masters_degree"" FLOAT,
	""one_year_more_college"" FLOAT,
	""pop_25_years_over"" FLOAT,
	""commute_35_44_mins"" FLOAT,
	""commute_60_more_mins"" FLOAT,
	""commute_less_10_mins"" FLOAT,
	""commuters_16_over"" FLOAT,
	""hispanic_any_race"" FLOAT,
	""pop_5_years_over"" FLOAT,
	""speak_only_english_at_home"" FLOAT,
	""speak_spanish_at_home"" FLOAT,
	""speak_spanish_at_home_low_english"" FLOAT,
	""pop_15_and_over"" FLOAT,
	""pop_never_married"" FLOAT,
	""pop_now_married"" FLOAT,
	""pop_separated"" FLOAT,
	""pop_widowed"" FLOAT,
	""pop_divorced"" FLOAT,
	""do_date"" VARCHAR(16777216),
	""armed_forces"" FLOAT,
	""civilian_labor_force"" FLOAT,
	""employed_pop"" FLOAT,
	""unemployed_pop"" FLOAT,
	""not_in_labor_force"" FLOAT,
	""pop_16_over"" FLOAT,
	""pop_in_labor_force"" FLOAT
);"

Some other tables have the similar structure: ['PLACE_2010_3YR', 'PLACE_2014_5YR', 'PLACE_2015_1YR', 'PLACE_2009_3YR', 'PLACE_2013_5YR', 'PLACE_2016_1YR', 'PLACE_2018_5YR', 'PLACE_2013_1YR', 'PLACE_2011_3YR', 'PLACE_2021_1YR', 'PLACE_2012_1YR', 'PLACE_2012_3YR', 'PLACE_2010_5YR', 'PLACE_2011_5YR', 'PLACE_2015_5YR', 'PLACE_2011_1YR', 'PLACE_2017_1YR', 'PLACE_2012_5YR', 'PLACE_2007_1YR', 'PLACE_2008_1YR', 'PLACE_2019_1YR', 'PLACE_2009_1YR', 'PLACE_2010_1YR', 'PLACE_2013_3YR', 'PLACE_2017_5YR', 'PLACE_2016_5YR', 'PLACE_2018_1YR', 'PLACE_2007_3YR', 'PLACE_2019_5YR', 'PLACE_2014_1YR', 'PLACE_2008_3YR', 'PLACE_2020_5YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,7
table_name,SCHOOLDISTRICTELEMENTARY_2014_5YR
description,
DDL,"create or replace TABLE SCHOOLDISTRICTELEMENTARY_2014_5YR (
	""geo_id"" VARCHAR(16777216),
	""nonfamily_households"" NUMBER(38,9),
	""family_households"" NUMBER(38,9),
	""median_year_structure_built"" NUMBER(38,9),
	""rent_burden_not_computed"" NUMBER(38,9),
	""rent_over_50_percent"" NUMBER(38,9),
	""rent_40_to_50_percent"" NUMBER(38,9),
	""rent_35_to_40_percent"" NUMBER(38,9),
	""rent_30_to_35_percent"" NUMBER(38,9),
	""rent_25_to_30_percent"" NUMBER(38,9),
	""rent_20_to_25_percent"" NUMBER(38,9),
	""rent_15_to_20_percent"" NUMBER(38,9),
	""rent_10_to_15_percent"" NUMBER(38,9),
	""rent_under_10_percent"" NUMBER(38,9),
	""total_pop"" NUMBER(38,9),
	""male_pop"" NUMBER(38,9),
	""female_pop"" NUMBER(38,9),
	""median_age"" NUMBER(38,9),
	""white_pop"" NUMBER(38,9),
	""black_pop"" NUMBER(38,9),
	""asian_pop"" NUMBER(38,9),
	""hispanic_pop"" NUMBER(38,9),
	""amerindian_pop"" NUMBER(38,9),
	""other_race_pop"" NUMBER(38,9),
	""two_or_more_races_pop"" NUMBER(38,9),
	""not_hispanic_pop"" NUMBER(38,9),
	""commuters_by_public_transportation"" NUMBER(38,9),
	""households"" NUMBER(38,9),
	""median_income"" NUMBER(38,9),
	""income_per_capita"" NUMBER(38,9),
	""housing_units"" NUMBER(38,9),
	""vacant_housing_units"" NUMBER(38,9),
	""vacant_housing_units_for_rent"" NUMBER(38,9),
	""vacant_housing_units_for_sale"" NUMBER(38,9),
	""median_rent"" NUMBER(38,9),
	""percent_income_spent_on_rent"" NUMBER(38,9),
	""owner_occupied_housing_units"" NUMBER(38,9),
	""million_dollar_housing_units"" NUMBER(38,9),
	""mortgaged_housing_units"" NUMBER(38,9),
	""families_with_young_children"" NUMBER(38,9),
	""two_parent_families_with_young_children"" NUMBER(38,9),
	""two_parents_in_labor_force_families_with_young_children"" NUMBER(38,9),
	""two_parents_father_in_labor_force_families_with_young_children"" NUMBER(38,9),
	""two_parents_mother_in_labor_force_families_with_young_children"" NUMBER(38,9),
	""two_parents_not_in_labor_force_families_with_young_children"" NUMBER(38,9),
	""one_parent_families_with_young_children"" NUMBER(38,9),
	""father_one_parent_families_with_young_children"" NUMBER(38,9),
	""father_in_labor_force_one_parent_families_with_young_children"" NUMBER(38,9),
	""commute_10_14_mins"" NUMBER(38,9),
	""commute_15_19_mins"" NUMBER(38,9),
	""commute_20_24_mins"" NUMBER(38,9),
	""commute_25_29_mins"" NUMBER(38,9),
	""commute_30_34_mins"" NUMBER(38,9),
	""commute_45_59_mins"" NUMBER(38,9),
	""aggregate_travel_time_to_work"" NUMBER(38,9),
	""income_less_10000"" NUMBER(38,9),
	""income_10000_14999"" NUMBER(38,9),
	""income_15000_19999"" NUMBER(38,9),
	""income_20000_24999"" NUMBER(38,9),
	""income_25000_29999"" NUMBER(38,9),
	""income_30000_34999"" NUMBER(38,9),
	""income_35000_39999"" NUMBER(38,9),
	""income_40000_44999"" NUMBER(38,9),
	""income_45000_49999"" NUMBER(38,9),
	""income_50000_59999"" NUMBER(38,9),
	""income_60000_74999"" NUMBER(38,9),
	""income_75000_99999"" NUMBER(38,9),
	""income_100000_124999"" NUMBER(38,9),
	""income_125000_149999"" NUMBER(38,9),
	""income_150000_199999"" NUMBER(38,9),
	""income_200000_or_more"" NUMBER(38,9),
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" NUMBER(38,9),
	""owner_occupied_housing_units_lower_value_quartile"" NUMBER(38,9),
	""owner_occupied_housing_units_median_value"" NUMBER(38,9),
	""owner_occupied_housing_units_upper_value_quartile"" NUMBER(38,9),
	""married_households"" NUMBER(38,9),
	""occupied_housing_units"" NUMBER(38,9),
	""housing_units_renter_occupied"" NUMBER(38,9),
	""dwellings_1_units_detached"" NUMBER(38,9),
	""dwellings_1_units_attached"" NUMBER(38,9),
	""dwellings_2_units"" NUMBER(38,9),
	""dwellings_3_to_4_units"" NUMBER(38,9),
	""dwellings_5_to_9_units"" NUMBER(38,9),
	""dwellings_10_to_19_units"" NUMBER(38,9),
	""dwellings_20_to_49_units"" NUMBER(38,9),
	""dwellings_50_or_more_units"" NUMBER(38,9),
	""mobile_homes"" NUMBER(38,9),
	""housing_built_2005_or_later"" NUMBER(38,9),
	""housing_built_2000_to_2004"" NUMBER(38,9),
	""housing_built_1939_or_earlier"" NUMBER(38,9),
	""male_under_5"" NUMBER(38,9),
	""male_5_to_9"" NUMBER(38,9),
	""male_10_to_14"" NUMBER(38,9),
	""male_15_to_17"" NUMBER(38,9),
	""male_18_to_19"" NUMBER(38,9),
	""male_20"" NUMBER(38,9),
	""male_21"" NUMBER(38,9),
	""male_22_to_24"" NUMBER(38,9),
	""male_25_to_29"" NUMBER(38,9),
	""male_30_to_34"" NUMBER(38,9),
	""male_35_to_39"" NUMBER(38,9),
	""male_40_to_44"" NUMBER(38,9),
	""male_45_to_49"" NUMBER(38,9),
	""male_50_to_54"" NUMBER(38,9),
	""male_55_to_59"" NUMBER(38,9),
	""male_60_61"" NUMBER(38,9),
	""male_62_64"" NUMBER(38,9),
	""male_65_to_66"" NUMBER(38,9),
	""male_67_to_69"" NUMBER(38,9),
	""male_70_to_74"" NUMBER(38,9),
	""male_75_to_79"" NUMBER(38,9),
	""male_80_to_84"" NUMBER(38,9),
	""male_85_and_over"" NUMBER(38,9),
	""female_under_5"" NUMBER(38,9),
	""female_5_to_9"" NUMBER(38,9),
	""female_10_to_14"" NUMBER(38,9),
	""female_15_to_17"" NUMBER(38,9),
	""female_18_to_19"" NUMBER(38,9),
	""female_20"" NUMBER(38,9),
	""female_21"" NUMBER(38,9),
	""female_22_to_24"" NUMBER(38,9),
	""female_25_to_29"" NUMBER(38,9),
	""female_30_to_34"" NUMBER(38,9),
	""female_35_to_39"" NUMBER(38,9),
	""female_40_to_44"" NUMBER(38,9),
	""female_45_to_49"" NUMBER(38,9),
	""female_50_to_54"" NUMBER(38,9),
	""female_55_to_59"" NUMBER(38,9),
	""female_60_to_61"" NUMBER(38,9),
	""female_62_to_64"" NUMBER(38,9),
	""female_65_to_66"" NUMBER(38,9),
	""female_67_to_69"" NUMBER(38,9),
	""female_70_to_74"" NUMBER(38,9),
	""female_75_to_79"" NUMBER(38,9),
	""female_80_to_84"" NUMBER(38,9),
	""female_85_and_over"" NUMBER(38,9),
	""white_including_hispanic"" NUMBER(38,9),
	""black_including_hispanic"" NUMBER(38,9),
	""amerindian_including_hispanic"" NUMBER(38,9),
	""asian_including_hispanic"" NUMBER(38,9),
	""commute_5_9_mins"" NUMBER(38,9),
	""commute_35_39_mins"" NUMBER(38,9),
	""commute_40_44_mins"" NUMBER(38,9),
	""commute_60_89_mins"" NUMBER(38,9),
	""commute_90_more_mins"" NUMBER(38,9),
	""households_retirement_income"" NUMBER(38,9),
	""armed_forces"" NUMBER(38,9),
	""civilian_labor_force"" NUMBER(38,9),
	""employed_pop"" NUMBER(38,9),
	""unemployed_pop"" NUMBER(38,9),
	""not_in_labor_force"" NUMBER(38,9),
	""pop_16_over"" NUMBER(38,9),
	""pop_in_labor_force"" NUMBER(38,9),
	""asian_male_45_54"" NUMBER(38,9),
	""asian_male_55_64"" NUMBER(38,9),
	""black_male_45_54"" NUMBER(38,9),
	""black_male_55_64"" NUMBER(38,9),
	""hispanic_male_45_54"" NUMBER(38,9),
	""hispanic_male_55_64"" NUMBER(38,9),
	""white_male_45_54"" NUMBER(38,9),
	""white_male_55_64"" NUMBER(38,9),
	""bachelors_degree_2"" NUMBER(38,9),
	""bachelors_degree_or_higher_25_64"" NUMBER(38,9),
	""children"" NUMBER(38,9),
	""children_in_single_female_hh"" NUMBER(38,9),
	""commuters_by_bus"" NUMBER(38,9),
	""commuters_by_car_truck_van"" NUMBER(38,9),
	""commuters_by_carpool"" NUMBER(38,9),
	""commuters_by_subway_or_elevated"" NUMBER(38,9),
	""commuters_drove_alone"" NUMBER(38,9),
	""different_house_year_ago_different_city"" NUMBER(38,9),
	""different_house_year_ago_same_city"" NUMBER(38,9),
	""employed_agriculture_forestry_fishing_hunting_mining"" NUMBER(38,9),
	""employed_arts_entertainment_recreation_accommodation_food"" NUMBER(38,9),
	""employed_construction"" NUMBER(38,9),
	""employed_education_health_social"" NUMBER(38,9),
	""employed_finance_insurance_real_estate"" NUMBER(38,9),
	""employed_information"" NUMBER(38,9),
	""employed_manufacturing"" NUMBER(38,9),
	""employed_other_services_not_public_admin"" NUMBER(38,9),
	""employed_public_administration"" NUMBER(38,9),
	""employed_retail_trade"" NUMBER(38,9),
	""employed_science_management_admin_waste"" NUMBER(38,9),
	""employed_transportation_warehousing_utilities"" NUMBER(38,9),
	""employed_wholesale_trade"" NUMBER(38,9),
	""female_female_households"" NUMBER(38,9),
	""four_more_cars"" NUMBER(38,9),
	""gini_index"" NUMBER(38,9),
	""graduate_professional_degree"" NUMBER(38,9),
	""group_quarters"" NUMBER(38,9),
	""high_school_including_ged"" NUMBER(38,9),
	""households_public_asst_or_food_stamps"" NUMBER(38,9),
	""in_grades_1_to_4"" NUMBER(38,9),
	""in_grades_5_to_8"" NUMBER(38,9),
	""in_grades_9_to_12"" NUMBER(38,9),
	""in_school"" NUMBER(38,9),
	""in_undergrad_college"" NUMBER(38,9),
	""less_than_high_school_graduate"" NUMBER(38,9),
	""male_45_64_associates_degree"" NUMBER(38,9),
	""male_45_64_bachelors_degree"" NUMBER(38,9),
	""male_45_64_graduate_degree"" NUMBER(38,9),
	""male_45_64_less_than_9_grade"" NUMBER(38,9),
	""male_45_64_grade_9_12"" NUMBER(38,9),
	""male_45_64_high_school"" NUMBER(38,9),
	""male_45_64_some_college"" NUMBER(38,9),
	""male_45_to_64"" NUMBER(38,9),
	""male_male_households"" NUMBER(38,9),
	""management_business_sci_arts_employed"" NUMBER(38,9),
	""no_car"" NUMBER(38,9),
	""no_cars"" NUMBER(38,9),
	""not_us_citizen_pop"" NUMBER(38,9),
	""occupation_management_arts"" NUMBER(38,9),
	""occupation_natural_resources_construction_maintenance"" NUMBER(38,9),
	""occupation_production_transportation_material"" NUMBER(38,9),
	""occupation_sales_office"" NUMBER(38,9),
	""occupation_services"" NUMBER(38,9),
	""one_car"" NUMBER(38,9),
	""two_cars"" NUMBER(38,9),
	""three_cars"" NUMBER(38,9),
	""pop_25_64"" NUMBER(38,9),
	""pop_determined_poverty_status"" NUMBER(38,9),
	""population_1_year_and_over"" NUMBER(38,9),
	""population_3_years_over"" NUMBER(38,9),
	""poverty"" NUMBER(38,9),
	""sales_office_employed"" NUMBER(38,9),
	""some_college_and_associates_degree"" NUMBER(38,9),
	""walked_to_work"" NUMBER(38,9),
	""worked_at_home"" NUMBER(38,9),
	""workers_16_and_over"" NUMBER(38,9),
	""associates_degree"" NUMBER(38,9),
	""bachelors_degree"" NUMBER(38,9),
	""high_school_diploma"" NUMBER(38,9),
	""less_one_year_college"" NUMBER(38,9),
	""masters_degree"" NUMBER(38,9),
	""one_year_more_college"" NUMBER(38,9),
	""pop_25_years_over"" NUMBER(38,9),
	""commute_35_44_mins"" NUMBER(38,9),
	""commute_60_more_mins"" NUMBER(38,9),
	""commute_less_10_mins"" NUMBER(38,9),
	""commuters_16_over"" NUMBER(38,9),
	""hispanic_any_race"" NUMBER(38,9),
	""pop_5_years_over"" NUMBER(38,9),
	""speak_only_english_at_home"" NUMBER(38,9),
	""speak_spanish_at_home"" NUMBER(38,9),
	""speak_spanish_at_home_low_english"" NUMBER(38,9),
	""pop_15_and_over"" NUMBER(38,9),
	""pop_never_married"" NUMBER(38,9),
	""pop_now_married"" NUMBER(38,9),
	""pop_separated"" NUMBER(38,9),
	""pop_widowed"" NUMBER(38,9),
	""pop_divorced"" NUMBER(38,9),
	""do_date"" VARCHAR(16777216)
);"

Some other tables have the similar structure: ['SCHOOLDISTRICTELEMENTARY_2014_5YR', 'SCHOOLDISTRICTELEMENTARY_2010_1YR', 'SCHOOLDISTRICTELEMENTARY_2016_5YR', 'SCHOOLDISTRICTELEMENTARY_2018_5YR', 'SCHOOLDISTRICTELEMENTARY_2019_5YR', 'SCHOOLDISTRICTELEMENTARY_2017_5YR', 'SCHOOLDISTRICTELEMENTARY_2015_5YR', 'SCHOOLDISTRICTELEMENTARY_2014_1YR', 'SCHOOLDISTRICTELEMENTARY_2015_1YR', 'SCHOOLDISTRICTELEMENTARY_2019_1YR', 'SCHOOLDISTRICTELEMENTARY_2016_1YR', 'SCHOOLDISTRICTELEMENTARY_2020_5YR', 'SCHOOLDISTRICTELEMENTARY_2010_5YR', 'SCHOOLDISTRICTELEMENTARY_2018_1YR', 'SCHOOLDISTRICTELEMENTARY_2017_1YR', 'SCHOOLDISTRICTELEMENTARY_2021_1YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,8
table_name,STATE_2014_1YR
description,
DDL,"create or replace TABLE STATE_2014_1YR (
	""geo_id"" VARCHAR(16777216),
	""nonfamily_households"" FLOAT,
	""family_households"" FLOAT,
	""median_year_structure_built"" FLOAT,
	""rent_burden_not_computed"" FLOAT,
	""rent_over_50_percent"" FLOAT,
	""rent_40_to_50_percent"" FLOAT,
	""rent_35_to_40_percent"" FLOAT,
	""rent_30_to_35_percent"" FLOAT,
	""rent_25_to_30_percent"" FLOAT,
	""rent_20_to_25_percent"" FLOAT,
	""rent_15_to_20_percent"" FLOAT,
	""rent_10_to_15_percent"" FLOAT,
	""rent_under_10_percent"" FLOAT,
	""total_pop"" FLOAT,
	""male_pop"" FLOAT,
	""female_pop"" FLOAT,
	""median_age"" FLOAT,
	""white_pop"" FLOAT,
	""black_pop"" FLOAT,
	""asian_pop"" FLOAT,
	""hispanic_pop"" FLOAT,
	""amerindian_pop"" FLOAT,
	""other_race_pop"" FLOAT,
	""two_or_more_races_pop"" FLOAT,
	""not_hispanic_pop"" FLOAT,
	""commuters_by_public_transportation"" FLOAT,
	""households"" FLOAT,
	""median_income"" FLOAT,
	""income_per_capita"" FLOAT,
	""housing_units"" FLOAT,
	""vacant_housing_units"" FLOAT,
	""vacant_housing_units_for_rent"" FLOAT,
	""vacant_housing_units_for_sale"" FLOAT,
	""median_rent"" FLOAT,
	""percent_income_spent_on_rent"" FLOAT,
	""owner_occupied_housing_units"" FLOAT,
	""million_dollar_housing_units"" FLOAT,
	""mortgaged_housing_units"" FLOAT,
	""families_with_young_children"" FLOAT,
	""two_parent_families_with_young_children"" FLOAT,
	""two_parents_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_father_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_mother_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_not_in_labor_force_families_with_young_children"" FLOAT,
	""one_parent_families_with_young_children"" FLOAT,
	""father_one_parent_families_with_young_children"" FLOAT,
	""father_in_labor_force_one_parent_families_with_young_children"" FLOAT,
	""commute_10_14_mins"" FLOAT,
	""commute_15_19_mins"" FLOAT,
	""commute_20_24_mins"" FLOAT,
	""commute_25_29_mins"" FLOAT,
	""commute_30_34_mins"" FLOAT,
	""commute_45_59_mins"" FLOAT,
	""aggregate_travel_time_to_work"" FLOAT,
	""income_less_10000"" FLOAT,
	""income_10000_14999"" FLOAT,
	""income_15000_19999"" FLOAT,
	""income_20000_24999"" FLOAT,
	""income_25000_29999"" FLOAT,
	""income_30000_34999"" FLOAT,
	""income_35000_39999"" FLOAT,
	""income_40000_44999"" FLOAT,
	""income_45000_49999"" FLOAT,
	""income_50000_59999"" FLOAT,
	""income_60000_74999"" FLOAT,
	""income_75000_99999"" FLOAT,
	""income_100000_124999"" FLOAT,
	""income_125000_149999"" FLOAT,
	""income_150000_199999"" FLOAT,
	""income_200000_or_more"" FLOAT,
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" FLOAT,
	""owner_occupied_housing_units_lower_value_quartile"" FLOAT,
	""owner_occupied_housing_units_median_value"" FLOAT,
	""owner_occupied_housing_units_upper_value_quartile"" FLOAT,
	""married_households"" FLOAT,
	""occupied_housing_units"" FLOAT,
	""housing_units_renter_occupied"" FLOAT,
	""dwellings_1_units_detached"" FLOAT,
	""dwellings_1_units_attached"" FLOAT,
	""dwellings_2_units"" FLOAT,
	""dwellings_3_to_4_units"" FLOAT,
	""dwellings_5_to_9_units"" FLOAT,
	""dwellings_10_to_19_units"" FLOAT,
	""dwellings_20_to_49_units"" FLOAT,
	""dwellings_50_or_more_units"" FLOAT,
	""mobile_homes"" FLOAT,
	""housing_built_2005_or_later"" FLOAT,
	""housing_built_2000_to_2004"" FLOAT,
	""housing_built_1939_or_earlier"" FLOAT,
	""male_under_5"" FLOAT,
	""male_5_to_9"" FLOAT,
	""male_10_to_14"" FLOAT,
	""male_15_to_17"" FLOAT,
	""male_18_to_19"" FLOAT,
	""male_20"" FLOAT,
	""male_21"" FLOAT,
	""male_22_to_24"" FLOAT,
	""male_25_to_29"" FLOAT,
	""male_30_to_34"" FLOAT,
	""male_35_to_39"" FLOAT,
	""male_40_to_44"" FLOAT,
	""male_45_to_49"" FLOAT,
	""male_50_to_54"" FLOAT,
	""male_55_to_59"" FLOAT,
	""male_60_61"" FLOAT,
	""male_62_64"" FLOAT,
	""male_65_to_66"" FLOAT,
	""male_67_to_69"" FLOAT,
	""male_70_to_74"" FLOAT,
	""male_75_to_79"" FLOAT,
	""male_80_to_84"" FLOAT,
	""male_85_and_over"" FLOAT,
	""female_under_5"" FLOAT,
	""female_5_to_9"" FLOAT,
	""female_10_to_14"" FLOAT,
	""female_15_to_17"" FLOAT,
	""female_18_to_19"" FLOAT,
	""female_20"" FLOAT,
	""female_21"" FLOAT,
	""female_22_to_24"" FLOAT,
	""female_25_to_29"" FLOAT,
	""female_30_to_34"" FLOAT,
	""female_35_to_39"" FLOAT,
	""female_40_to_44"" FLOAT,
	""female_45_to_49"" FLOAT,
	""female_50_to_54"" FLOAT,
	""female_55_to_59"" FLOAT,
	""female_60_to_61"" FLOAT,
	""female_62_to_64"" FLOAT,
	""female_65_to_66"" FLOAT,
	""female_67_to_69"" FLOAT,
	""female_70_to_74"" FLOAT,
	""female_75_to_79"" FLOAT,
	""female_80_to_84"" FLOAT,
	""female_85_and_over"" FLOAT,
	""white_including_hispanic"" FLOAT,
	""black_including_hispanic"" FLOAT,
	""amerindian_including_hispanic"" FLOAT,
	""asian_including_hispanic"" FLOAT,
	""commute_5_9_mins"" FLOAT,
	""commute_35_39_mins"" FLOAT,
	""commute_40_44_mins"" FLOAT,
	""commute_60_89_mins"" FLOAT,
	""commute_90_more_mins"" FLOAT,
	""households_retirement_income"" FLOAT,
	""armed_forces"" FLOAT,
	""civilian_labor_force"" FLOAT,
	""employed_pop"" FLOAT,
	""unemployed_pop"" FLOAT,
	""not_in_labor_force"" FLOAT,
	""pop_16_over"" FLOAT,
	""pop_in_labor_force"" FLOAT,
	""asian_male_45_54"" FLOAT,
	""asian_male_55_64"" FLOAT,
	""black_male_45_54"" FLOAT,
	""black_male_55_64"" FLOAT,
	""hispanic_male_45_54"" FLOAT,
	""hispanic_male_55_64"" FLOAT,
	""white_male_45_54"" FLOAT,
	""white_male_55_64"" FLOAT,
	""bachelors_degree_2"" FLOAT,
	""bachelors_degree_or_higher_25_64"" FLOAT,
	""children"" FLOAT,
	""children_in_single_female_hh"" FLOAT,
	""commuters_by_bus"" FLOAT,
	""commuters_by_car_truck_van"" FLOAT,
	""commuters_by_carpool"" FLOAT,
	""commuters_by_subway_or_elevated"" FLOAT,
	""commuters_drove_alone"" FLOAT,
	""different_house_year_ago_different_city"" FLOAT,
	""different_house_year_ago_same_city"" FLOAT,
	""employed_agriculture_forestry_fishing_hunting_mining"" FLOAT,
	""employed_arts_entertainment_recreation_accommodation_food"" FLOAT,
	""employed_construction"" FLOAT,
	""employed_education_health_social"" FLOAT,
	""employed_finance_insurance_real_estate"" FLOAT,
	""employed_information"" FLOAT,
	""employed_manufacturing"" FLOAT,
	""employed_other_services_not_public_admin"" FLOAT,
	""employed_public_administration"" FLOAT,
	""employed_retail_trade"" FLOAT,
	""employed_science_management_admin_waste"" FLOAT,
	""employed_transportation_warehousing_utilities"" FLOAT,
	""employed_wholesale_trade"" FLOAT,
	""female_female_households"" FLOAT,
	""four_more_cars"" FLOAT,
	""gini_index"" FLOAT,
	""graduate_professional_degree"" FLOAT,
	""group_quarters"" FLOAT,
	""high_school_including_ged"" FLOAT,
	""households_public_asst_or_food_stamps"" FLOAT,
	""in_grades_1_to_4"" FLOAT,
	""in_grades_5_to_8"" FLOAT,
	""in_grades_9_to_12"" FLOAT,
	""in_school"" FLOAT,
	""in_undergrad_college"" FLOAT,
	""less_than_high_school_graduate"" FLOAT,
	""male_45_64_associates_degree"" FLOAT,
	""male_45_64_bachelors_degree"" FLOAT,
	""male_45_64_graduate_degree"" FLOAT,
	""male_45_64_less_than_9_grade"" FLOAT,
	""male_45_64_grade_9_12"" FLOAT,
	""male_45_64_high_school"" FLOAT,
	""male_45_64_some_college"" FLOAT,
	""male_45_to_64"" FLOAT,
	""male_male_households"" FLOAT,
	""management_business_sci_arts_employed"" FLOAT,
	""no_car"" FLOAT,
	""no_cars"" FLOAT,
	""not_us_citizen_pop"" FLOAT,
	""occupation_management_arts"" FLOAT,
	""occupation_natural_resources_construction_maintenance"" FLOAT,
	""occupation_production_transportation_material"" FLOAT,
	""occupation_sales_office"" FLOAT,
	""occupation_services"" FLOAT,
	""one_car"" FLOAT,
	""two_cars"" FLOAT,
	""three_cars"" FLOAT,
	""pop_25_64"" FLOAT,
	""pop_determined_poverty_status"" FLOAT,
	""population_1_year_and_over"" FLOAT,
	""population_3_years_over"" FLOAT,
	""poverty"" FLOAT,
	""sales_office_employed"" FLOAT,
	""some_college_and_associates_degree"" FLOAT,
	""walked_to_work"" FLOAT,
	""worked_at_home"" FLOAT,
	""workers_16_and_over"" FLOAT,
	""associates_degree"" FLOAT,
	""bachelors_degree"" FLOAT,
	""high_school_diploma"" FLOAT,
	""less_one_year_college"" FLOAT,
	""masters_degree"" FLOAT,
	""one_year_more_college"" FLOAT,
	""pop_25_years_over"" FLOAT,
	""commute_35_44_mins"" FLOAT,
	""commute_60_more_mins"" FLOAT,
	""commute_less_10_mins"" FLOAT,
	""commuters_16_over"" FLOAT,
	""hispanic_any_race"" FLOAT,
	""pop_5_years_over"" FLOAT,
	""speak_only_english_at_home"" FLOAT,
	""speak_spanish_at_home"" FLOAT,
	""speak_spanish_at_home_low_english"" FLOAT,
	""pop_15_and_over"" FLOAT,
	""pop_never_married"" FLOAT,
	""pop_now_married"" FLOAT,
	""pop_separated"" FLOAT,
	""pop_widowed"" FLOAT,
	""pop_divorced"" FLOAT,
	""do_date"" VARCHAR(16777216)
);"

Some other tables have the similar structure: ['STATE_2014_1YR', 'STATE_2017_1YR', 'STATE_2019_1YR', 'STATE_2011_3YR', 'STATE_2016_5YR', 'STATE_2017_5YR', 'STATE_2018_5YR', 'STATE_2019_5YR', 'STATE_2020_5YR', 'STATE_2011_5YR', 'STATE_2013_1YR', 'STATE_2009_1YR', 'STATE_2014_5YR', 'STATE_2011_1YR', 'STATE_2012_5YR', 'STATE_2013_3YR', 'STATE_2013_5YR', 'STATE_2018_1YR', 'STATE_2008_3YR', 'STATE_2010_3YR', 'STATE_2007_1YR', 'STATE_2007_3YR', 'STATE_2010_5YR', 'STATE_2008_1YR', 'STATE_2009_3YR', 'STATE_2010_1YR', 'STATE_2012_1YR', 'STATE_2012_3YR', 'STATE_2015_1YR', 'STATE_2015_5YR', 'STATE_2016_1YR', 'STATE_2021_1YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,9
table_name,SCHOOLDISTRICTSECONDARY_2010_5YR
description,
DDL,"create or replace TABLE SCHOOLDISTRICTSECONDARY_2010_5YR (
	""geo_id"" VARCHAR(16777216),
	""nonfamily_households"" FLOAT,
	""family_households"" FLOAT,
	""median_year_structure_built"" FLOAT,
	""rent_burden_not_computed"" FLOAT,
	""rent_over_50_percent"" FLOAT,
	""rent_40_to_50_percent"" FLOAT,
	""rent_35_to_40_percent"" FLOAT,
	""rent_30_to_35_percent"" FLOAT,
	""rent_25_to_30_percent"" FLOAT,
	""rent_20_to_25_percent"" FLOAT,
	""rent_15_to_20_percent"" FLOAT,
	""rent_10_to_15_percent"" FLOAT,
	""rent_under_10_percent"" FLOAT,
	""total_pop"" FLOAT,
	""male_pop"" FLOAT,
	""female_pop"" FLOAT,
	""median_age"" FLOAT,
	""white_pop"" FLOAT,
	""black_pop"" FLOAT,
	""asian_pop"" FLOAT,
	""hispanic_pop"" FLOAT,
	""amerindian_pop"" FLOAT,
	""other_race_pop"" FLOAT,
	""two_or_more_races_pop"" FLOAT,
	""not_hispanic_pop"" FLOAT,
	""commuters_by_public_transportation"" FLOAT,
	""households"" FLOAT,
	""median_income"" FLOAT,
	""income_per_capita"" FLOAT,
	""housing_units"" FLOAT,
	""vacant_housing_units"" FLOAT,
	""vacant_housing_units_for_rent"" FLOAT,
	""vacant_housing_units_for_sale"" FLOAT,
	""median_rent"" FLOAT,
	""percent_income_spent_on_rent"" FLOAT,
	""owner_occupied_housing_units"" FLOAT,
	""million_dollar_housing_units"" FLOAT,
	""mortgaged_housing_units"" FLOAT,
	""families_with_young_children"" FLOAT,
	""two_parent_families_with_young_children"" FLOAT,
	""two_parents_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_father_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_mother_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_not_in_labor_force_families_with_young_children"" FLOAT,
	""one_parent_families_with_young_children"" FLOAT,
	""father_one_parent_families_with_young_children"" FLOAT,
	""father_in_labor_force_one_parent_families_with_young_children"" FLOAT,
	""commute_10_14_mins"" FLOAT,
	""commute_15_19_mins"" FLOAT,
	""commute_20_24_mins"" FLOAT,
	""commute_25_29_mins"" FLOAT,
	""commute_30_34_mins"" FLOAT,
	""commute_45_59_mins"" FLOAT,
	""aggregate_travel_time_to_work"" FLOAT,
	""income_less_10000"" FLOAT,
	""income_10000_14999"" FLOAT,
	""income_15000_19999"" FLOAT,
	""income_20000_24999"" FLOAT,
	""income_25000_29999"" FLOAT,
	""income_30000_34999"" FLOAT,
	""income_35000_39999"" FLOAT,
	""income_40000_44999"" FLOAT,
	""income_45000_49999"" FLOAT,
	""income_50000_59999"" FLOAT,
	""income_60000_74999"" FLOAT,
	""income_75000_99999"" FLOAT,
	""income_100000_124999"" FLOAT,
	""income_125000_149999"" FLOAT,
	""income_150000_199999"" FLOAT,
	""income_200000_or_more"" FLOAT,
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" FLOAT,
	""owner_occupied_housing_units_lower_value_quartile"" FLOAT,
	""owner_occupied_housing_units_median_value"" FLOAT,
	""owner_occupied_housing_units_upper_value_quartile"" FLOAT,
	""married_households"" FLOAT,
	""occupied_housing_units"" FLOAT,
	""housing_units_renter_occupied"" FLOAT,
	""dwellings_1_units_detached"" FLOAT,
	""dwellings_1_units_attached"" FLOAT,
	""dwellings_2_units"" FLOAT,
	""dwellings_3_to_4_units"" FLOAT,
	""dwellings_5_to_9_units"" FLOAT,
	""dwellings_10_to_19_units"" FLOAT,
	""dwellings_20_to_49_units"" FLOAT,
	""dwellings_50_or_more_units"" FLOAT,
	""mobile_homes"" FLOAT,
	""housing_built_2005_or_later"" FLOAT,
	""housing_built_2000_to_2004"" FLOAT,
	""housing_built_1939_or_earlier"" FLOAT,
	""male_under_5"" FLOAT,
	""male_5_to_9"" FLOAT,
	""male_10_to_14"" FLOAT,
	""male_15_to_17"" FLOAT,
	""male_18_to_19"" FLOAT,
	""male_20"" FLOAT,
	""male_21"" FLOAT,
	""male_22_to_24"" FLOAT,
	""male_25_to_29"" FLOAT,
	""male_30_to_34"" FLOAT,
	""male_35_to_39"" FLOAT,
	""male_40_to_44"" FLOAT,
	""male_45_to_49"" FLOAT,
	""male_50_to_54"" FLOAT,
	""male_55_to_59"" FLOAT,
	""male_60_61"" FLOAT,
	""male_62_64"" FLOAT,
	""male_65_to_66"" FLOAT,
	""male_67_to_69"" FLOAT,
	""male_70_to_74"" FLOAT,
	""male_75_to_79"" FLOAT,
	""male_80_to_84"" FLOAT,
	""male_85_and_over"" FLOAT,
	""female_under_5"" FLOAT,
	""female_5_to_9"" FLOAT,
	""female_10_to_14"" FLOAT,
	""female_15_to_17"" FLOAT,
	""female_18_to_19"" FLOAT,
	""female_20"" FLOAT,
	""female_21"" FLOAT,
	""female_22_to_24"" FLOAT,
	""female_25_to_29"" FLOAT,
	""female_30_to_34"" FLOAT,
	""female_35_to_39"" FLOAT,
	""female_40_to_44"" FLOAT,
	""female_45_to_49"" FLOAT,
	""female_50_to_54"" FLOAT,
	""female_55_to_59"" FLOAT,
	""female_60_to_61"" FLOAT,
	""female_62_to_64"" FLOAT,
	""female_65_to_66"" FLOAT,
	""female_67_to_69"" FLOAT,
	""female_70_to_74"" FLOAT,
	""female_75_to_79"" FLOAT,
	""female_80_to_84"" FLOAT,
	""female_85_and_over"" FLOAT,
	""white_including_hispanic"" FLOAT,
	""black_including_hispanic"" FLOAT,
	""amerindian_including_hispanic"" FLOAT,
	""asian_including_hispanic"" FLOAT,
	""commute_5_9_mins"" FLOAT,
	""commute_35_39_mins"" FLOAT,
	""commute_40_44_mins"" FLOAT,
	""commute_60_89_mins"" FLOAT,
	""commute_90_more_mins"" FLOAT,
	""households_retirement_income"" FLOAT,
	""asian_male_45_54"" FLOAT,
	""asian_male_55_64"" FLOAT,
	""black_male_45_54"" FLOAT,
	""black_male_55_64"" FLOAT,
	""hispanic_male_45_54"" FLOAT,
	""hispanic_male_55_64"" FLOAT,
	""white_male_45_54"" FLOAT,
	""white_male_55_64"" FLOAT,
	""bachelors_degree_2"" FLOAT,
	""bachelors_degree_or_higher_25_64"" FLOAT,
	""children"" FLOAT,
	""children_in_single_female_hh"" FLOAT,
	""commuters_by_bus"" FLOAT,
	""commuters_by_car_truck_van"" FLOAT,
	""commuters_by_carpool"" FLOAT,
	""commuters_by_subway_or_elevated"" FLOAT,
	""commuters_drove_alone"" FLOAT,
	""different_house_year_ago_different_city"" FLOAT,
	""different_house_year_ago_same_city"" FLOAT,
	""employed_agriculture_forestry_fishing_hunting_mining"" FLOAT,
	""employed_arts_entertainment_recreation_accommodation_food"" FLOAT,
	""employed_construction"" FLOAT,
	""employed_education_health_social"" FLOAT,
	""employed_finance_insurance_real_estate"" FLOAT,
	""employed_information"" FLOAT,
	""employed_manufacturing"" FLOAT,
	""employed_other_services_not_public_admin"" FLOAT,
	""employed_public_administration"" FLOAT,
	""employed_retail_trade"" FLOAT,
	""employed_science_management_admin_waste"" FLOAT,
	""employed_transportation_warehousing_utilities"" FLOAT,
	""employed_wholesale_trade"" FLOAT,
	""female_female_households"" FLOAT,
	""four_more_cars"" FLOAT,
	""gini_index"" FLOAT,
	""graduate_professional_degree"" FLOAT,
	""group_quarters"" FLOAT,
	""high_school_including_ged"" FLOAT,
	""households_public_asst_or_food_stamps"" FLOAT,
	""in_grades_1_to_4"" FLOAT,
	""in_grades_5_to_8"" FLOAT,
	""in_grades_9_to_12"" FLOAT,
	""in_school"" FLOAT,
	""in_undergrad_college"" FLOAT,
	""less_than_high_school_graduate"" FLOAT,
	""male_45_64_associates_degree"" FLOAT,
	""male_45_64_bachelors_degree"" FLOAT,
	""male_45_64_graduate_degree"" FLOAT,
	""male_45_64_less_than_9_grade"" FLOAT,
	""male_45_64_grade_9_12"" FLOAT,
	""male_45_64_high_school"" FLOAT,
	""male_45_64_some_college"" FLOAT,
	""male_45_to_64"" FLOAT,
	""male_male_households"" FLOAT,
	""management_business_sci_arts_employed"" FLOAT,
	""no_car"" FLOAT,
	""no_cars"" FLOAT,
	""not_us_citizen_pop"" FLOAT,
	""occupation_management_arts"" FLOAT,
	""occupation_natural_resources_construction_maintenance"" FLOAT,
	""occupation_production_transportation_material"" FLOAT,
	""occupation_sales_office"" FLOAT,
	""occupation_services"" FLOAT,
	""one_car"" FLOAT,
	""two_cars"" FLOAT,
	""three_cars"" FLOAT,
	""pop_25_64"" FLOAT,
	""pop_determined_poverty_status"" FLOAT,
	""population_1_year_and_over"" FLOAT,
	""population_3_years_over"" FLOAT,
	""poverty"" FLOAT,
	""sales_office_employed"" FLOAT,
	""some_college_and_associates_degree"" FLOAT,
	""walked_to_work"" FLOAT,
	""worked_at_home"" FLOAT,
	""workers_16_and_over"" FLOAT,
	""hispanic_any_race"" FLOAT,
	""pop_5_years_over"" FLOAT,
	""speak_only_english_at_home"" FLOAT,
	""speak_spanish_at_home"" FLOAT,
	""speak_spanish_at_home_low_english"" FLOAT,
	""pop_15_and_over"" FLOAT,
	""pop_never_married"" FLOAT,
	""pop_now_married"" FLOAT,
	""pop_separated"" FLOAT,
	""pop_widowed"" FLOAT,
	""pop_divorced"" FLOAT,
	""do_date"" VARCHAR(16777216)
);"

Some other tables have the similar structure: ['SCHOOLDISTRICTSECONDARY_2010_5YR', 'SCHOOLDISTRICTSECONDARY_2018_5YR', 'SCHOOLDISTRICTSECONDARY_2019_1YR', 'SCHOOLDISTRICTSECONDARY_2021_1YR', 'SCHOOLDISTRICTSECONDARY_2017_5YR', 'SCHOOLDISTRICTSECONDARY_2020_5YR', 'SCHOOLDISTRICTSECONDARY_2015_1YR', 'SCHOOLDISTRICTSECONDARY_2014_5YR', 'SCHOOLDISTRICTSECONDARY_2015_5YR', 'SCHOOLDISTRICTSECONDARY_2018_1YR', 'SCHOOLDISTRICTSECONDARY_2016_1YR', 'SCHOOLDISTRICTSECONDARY_2010_1YR', 'SCHOOLDISTRICTSECONDARY_2017_1YR', 'SCHOOLDISTRICTSECONDARY_2016_5YR', 'SCHOOLDISTRICTSECONDARY_2019_5YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,10
table_name,SCHOOLDISTRICTUNIFIED_2019_5YR
description,
DDL,"create or replace TABLE SCHOOLDISTRICTUNIFIED_2019_5YR (
	""geo_id"" VARCHAR(16777216),
	""aggregate_travel_time_to_work"" FLOAT,
	""amerindian_including_hispanic"" FLOAT,
	""amerindian_pop"" FLOAT,
	""armed_forces"" FLOAT,
	""asian_including_hispanic"" FLOAT,
	""asian_male_45_54"" FLOAT,
	""asian_male_55_64"" FLOAT,
	""asian_pop"" FLOAT,
	""associates_degree"" FLOAT,
	""bachelors_degree"" FLOAT,
	""bachelors_degree_2"" FLOAT,
	""bachelors_degree_or_higher_25_64"" FLOAT,
	""black_including_hispanic"" FLOAT,
	""black_male_45_54"" FLOAT,
	""black_male_55_64"" FLOAT,
	""black_pop"" FLOAT,
	""children"" FLOAT,
	""children_in_single_female_hh"" FLOAT,
	""civilian_labor_force"" FLOAT,
	""commute_10_14_mins"" FLOAT,
	""commute_15_19_mins"" FLOAT,
	""commute_20_24_mins"" FLOAT,
	""commute_25_29_mins"" FLOAT,
	""commute_30_34_mins"" FLOAT,
	""commute_35_39_mins"" FLOAT,
	""commute_35_44_mins"" FLOAT,
	""commute_40_44_mins"" FLOAT,
	""commute_45_59_mins"" FLOAT,
	""commute_5_9_mins"" FLOAT,
	""commute_60_89_mins"" FLOAT,
	""commute_60_more_mins"" FLOAT,
	""commute_90_more_mins"" FLOAT,
	""commute_less_10_mins"" FLOAT,
	""commuters_16_over"" FLOAT,
	""commuters_by_bus"" FLOAT,
	""commuters_by_car_truck_van"" FLOAT,
	""commuters_by_carpool"" FLOAT,
	""commuters_by_public_transportation"" FLOAT,
	""commuters_by_subway_or_elevated"" FLOAT,
	""commuters_drove_alone"" FLOAT,
	""different_house_year_ago_different_city"" FLOAT,
	""different_house_year_ago_same_city"" FLOAT,
	""dwellings_10_to_19_units"" FLOAT,
	""dwellings_1_units_attached"" FLOAT,
	""dwellings_1_units_detached"" FLOAT,
	""dwellings_20_to_49_units"" FLOAT,
	""dwellings_2_units"" FLOAT,
	""dwellings_3_to_4_units"" FLOAT,
	""dwellings_50_or_more_units"" FLOAT,
	""dwellings_5_to_9_units"" FLOAT,
	""employed_agriculture_forestry_fishing_hunting_mining"" FLOAT,
	""employed_arts_entertainment_recreation_accommodation_food"" FLOAT,
	""employed_construction"" FLOAT,
	""employed_education_health_social"" FLOAT,
	""employed_finance_insurance_real_estate"" FLOAT,
	""employed_information"" FLOAT,
	""employed_manufacturing"" FLOAT,
	""employed_other_services_not_public_admin"" FLOAT,
	""employed_pop"" FLOAT,
	""employed_public_administration"" FLOAT,
	""employed_retail_trade"" FLOAT,
	""employed_science_management_admin_waste"" FLOAT,
	""employed_transportation_warehousing_utilities"" FLOAT,
	""employed_wholesale_trade"" FLOAT,
	""families_with_young_children"" FLOAT,
	""family_households"" FLOAT,
	""father_in_labor_force_one_parent_families_with_young_children"" FLOAT,
	""father_one_parent_families_with_young_children"" FLOAT,
	""female_10_to_14"" FLOAT,
	""female_15_to_17"" FLOAT,
	""female_18_to_19"" FLOAT,
	""female_20"" FLOAT,
	""female_21"" FLOAT,
	""female_22_to_24"" FLOAT,
	""female_25_to_29"" FLOAT,
	""female_30_to_34"" FLOAT,
	""female_35_to_39"" FLOAT,
	""female_40_to_44"" FLOAT,
	""female_45_to_49"" FLOAT,
	""female_50_to_54"" FLOAT,
	""female_55_to_59"" FLOAT,
	""female_5_to_9"" FLOAT,
	""female_60_to_61"" FLOAT,
	""female_62_to_64"" FLOAT,
	""female_65_to_66"" FLOAT,
	""female_67_to_69"" FLOAT,
	""female_70_to_74"" FLOAT,
	""female_75_to_79"" FLOAT,
	""female_80_to_84"" FLOAT,
	""female_85_and_over"" FLOAT,
	""female_female_households"" FLOAT,
	""female_pop"" FLOAT,
	""female_under_5"" FLOAT,
	""four_more_cars"" FLOAT,
	""gini_index"" FLOAT,
	""graduate_professional_degree"" FLOAT,
	""group_quarters"" FLOAT,
	""high_school_diploma"" FLOAT,
	""high_school_including_ged"" FLOAT,
	""hispanic_any_race"" FLOAT,
	""hispanic_male_45_54"" FLOAT,
	""hispanic_male_55_64"" FLOAT,
	""hispanic_pop"" FLOAT,
	""households"" FLOAT,
	""households_public_asst_or_food_stamps"" FLOAT,
	""households_retirement_income"" FLOAT,
	""housing_built_1939_or_earlier"" FLOAT,
	""housing_built_2000_to_2004"" FLOAT,
	""housing_built_2005_or_later"" FLOAT,
	""housing_units"" FLOAT,
	""housing_units_renter_occupied"" FLOAT,
	""in_grades_1_to_4"" FLOAT,
	""in_grades_5_to_8"" FLOAT,
	""in_grades_9_to_12"" FLOAT,
	""in_school"" FLOAT,
	""in_undergrad_college"" FLOAT,
	""income_100000_124999"" FLOAT,
	""income_10000_14999"" FLOAT,
	""income_125000_149999"" FLOAT,
	""income_150000_199999"" FLOAT,
	""income_15000_19999"" FLOAT,
	""income_200000_or_more"" FLOAT,
	""income_20000_24999"" FLOAT,
	""income_25000_29999"" FLOAT,
	""income_30000_34999"" FLOAT,
	""income_35000_39999"" FLOAT,
	""income_40000_44999"" FLOAT,
	""income_45000_49999"" FLOAT,
	""income_50000_59999"" FLOAT,
	""income_60000_74999"" FLOAT,
	""income_75000_99999"" FLOAT,
	""income_less_10000"" FLOAT,
	""income_per_capita"" FLOAT,
	""less_one_year_college"" FLOAT,
	""less_than_high_school_graduate"" FLOAT,
	""male_10_to_14"" FLOAT,
	""male_15_to_17"" FLOAT,
	""male_18_to_19"" FLOAT,
	""male_20"" FLOAT,
	""male_21"" FLOAT,
	""male_22_to_24"" FLOAT,
	""male_25_to_29"" FLOAT,
	""male_30_to_34"" FLOAT,
	""male_35_to_39"" FLOAT,
	""male_40_to_44"" FLOAT,
	""male_45_64_associates_degree"" FLOAT,
	""male_45_64_bachelors_degree"" FLOAT,
	""male_45_64_grade_9_12"" FLOAT,
	""male_45_64_graduate_degree"" FLOAT,
	""male_45_64_high_school"" FLOAT,
	""male_45_64_less_than_9_grade"" FLOAT,
	""male_45_64_some_college"" FLOAT,
	""male_45_to_49"" FLOAT,
	""male_45_to_64"" FLOAT,
	""male_50_to_54"" FLOAT,
	""male_55_to_59"" FLOAT,
	""male_5_to_9"" FLOAT,
	""male_60_to_61"" FLOAT,
	""male_62_to_64"" FLOAT,
	""male_65_to_66"" FLOAT,
	""male_67_to_69"" FLOAT,
	""male_70_to_74"" FLOAT,
	""male_75_to_79"" FLOAT,
	""male_80_to_84"" FLOAT,
	""male_85_and_over"" FLOAT,
	""male_male_households"" FLOAT,
	""male_pop"" FLOAT,
	""male_under_5"" FLOAT,
	""management_business_sci_arts_employed"" FLOAT,
	""married_households"" FLOAT,
	""masters_degree"" FLOAT,
	""median_age"" FLOAT,
	""median_income"" FLOAT,
	""median_rent"" FLOAT,
	""median_year_structure_built"" FLOAT,
	""million_dollar_housing_units"" FLOAT,
	""mobile_homes"" FLOAT,
	""mortgaged_housing_units"" FLOAT,
	""no_car"" FLOAT,
	""no_cars"" FLOAT,
	""nonfamily_households"" FLOAT,
	""not_hispanic_pop"" FLOAT,
	""not_in_labor_force"" FLOAT,
	""not_us_citizen_pop"" FLOAT,
	""occupation_management_arts"" FLOAT,
	""occupation_natural_resources_construction_maintenance"" FLOAT,
	""occupation_production_transportation_material"" FLOAT,
	""occupation_sales_office"" FLOAT,
	""occupation_services"" FLOAT,
	""occupied_housing_units"" FLOAT,
	""one_car"" FLOAT,
	""one_parent_families_with_young_children"" FLOAT,
	""one_year_more_college"" FLOAT,
	""other_race_pop"" FLOAT,
	""owner_occupied_housing_units"" FLOAT,
	""owner_occupied_housing_units_lower_value_quartile"" FLOAT,
	""owner_occupied_housing_units_median_value"" FLOAT,
	""owner_occupied_housing_units_upper_value_quartile"" FLOAT,
	""percent_income_spent_on_rent"" FLOAT,
	""pop_16_over"" FLOAT,
	""pop_25_64"" FLOAT,
	""pop_25_years_over"" FLOAT,
	""pop_5_years_over"" FLOAT,
	""pop_determined_poverty_status"" FLOAT,
	""pop_in_labor_force"" FLOAT,
	""population_1_year_and_over"" FLOAT,
	""population_3_years_over"" FLOAT,
	""poverty"" FLOAT,
	""rent_10_to_15_percent"" FLOAT,
	""rent_15_to_20_percent"" FLOAT,
	""rent_20_to_25_percent"" FLOAT,
	""rent_25_to_30_percent"" FLOAT,
	""rent_30_to_35_percent"" FLOAT,
	""rent_35_to_40_percent"" FLOAT,
	""rent_40_to_50_percent"" FLOAT,
	""rent_burden_not_computed"" FLOAT,
	""rent_over_50_percent"" FLOAT,
	""rent_under_10_percent"" FLOAT,
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" FLOAT,
	""sales_office_employed"" FLOAT,
	""some_college_and_associates_degree"" FLOAT,
	""speak_only_english_at_home"" FLOAT,
	""speak_spanish_at_home"" FLOAT,
	""speak_spanish_at_home_low_english"" FLOAT,
	""three_cars"" FLOAT,
	""total_pop"" FLOAT,
	""two_cars"" FLOAT,
	""two_or_more_races_pop"" FLOAT,
	""two_parent_families_with_young_children"" FLOAT,
	""two_parents_father_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_mother_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_not_in_labor_force_families_with_young_children"" FLOAT,
	""unemployed_pop"" FLOAT,
	""vacant_housing_units"" FLOAT,
	""vacant_housing_units_for_rent"" FLOAT,
	""vacant_housing_units_for_sale"" FLOAT,
	""walked_to_work"" FLOAT,
	""white_including_hispanic"" FLOAT,
	""white_male_45_54"" FLOAT,
	""white_male_55_64"" FLOAT,
	""white_pop"" FLOAT,
	""worked_at_home"" FLOAT,
	""workers_16_and_over"" FLOAT
);"

Some other tables have the similar structure: ['SCHOOLDISTRICTUNIFIED_2019_5YR', 'SCHOOLDISTRICTUNIFIED_2016_5YR', 'SCHOOLDISTRICTUNIFIED_2017_5YR', 'SCHOOLDISTRICTUNIFIED_2021_1YR', 'SCHOOLDISTRICTUNIFIED_2018_5YR', 'SCHOOLDISTRICTUNIFIED_2014_5YR', 'SCHOOLDISTRICTUNIFIED_2015_1YR', 'SCHOOLDISTRICTUNIFIED_2010_1YR', 'SCHOOLDISTRICTUNIFIED_2015_5YR', 'SCHOOLDISTRICTUNIFIED_2010_5YR', 'SCHOOLDISTRICTUNIFIED_2016_1YR', 'SCHOOLDISTRICTUNIFIED_2020_5YR', 'SCHOOLDISTRICTUNIFIED_2019_1YR', 'SCHOOLDISTRICTUNIFIED_2018_1YR', 'SCHOOLDISTRICTUNIFIED_2014_1YR', 'SCHOOLDISTRICTUNIFIED_2017_1YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,11
table_name,ZCTA5_2011_5YR
description,
DDL,"create or replace TABLE ZCTA5_2011_5YR (
	""geo_id"" VARCHAR(16777216),
	""do_date"" DATE,
	""total_pop"" FLOAT,
	""households"" FLOAT,
	""male_pop"" FLOAT,
	""female_pop"" FLOAT,
	""median_age"" FLOAT,
	""male_under_5"" FLOAT,
	""male_5_to_9"" FLOAT,
	""male_10_to_14"" FLOAT,
	""male_15_to_17"" FLOAT,
	""male_18_to_19"" FLOAT,
	""male_20"" FLOAT,
	""male_21"" FLOAT,
	""male_22_to_24"" FLOAT,
	""male_25_to_29"" FLOAT,
	""male_30_to_34"" FLOAT,
	""male_35_to_39"" FLOAT,
	""male_40_to_44"" FLOAT,
	""male_45_to_49"" FLOAT,
	""male_50_to_54"" FLOAT,
	""male_55_to_59"" FLOAT,
	""male_65_to_66"" FLOAT,
	""male_67_to_69"" FLOAT,
	""male_70_to_74"" FLOAT,
	""male_75_to_79"" FLOAT,
	""male_80_to_84"" FLOAT,
	""male_85_and_over"" FLOAT,
	""female_under_5"" FLOAT,
	""female_5_to_9"" FLOAT,
	""female_10_to_14"" FLOAT,
	""female_15_to_17"" FLOAT,
	""female_18_to_19"" FLOAT,
	""female_20"" FLOAT,
	""female_21"" FLOAT,
	""female_22_to_24"" FLOAT,
	""female_25_to_29"" FLOAT,
	""female_30_to_34"" FLOAT,
	""female_35_to_39"" FLOAT,
	""female_40_to_44"" FLOAT,
	""female_45_to_49"" FLOAT,
	""female_50_to_54"" FLOAT,
	""female_55_to_59"" FLOAT,
	""female_60_to_61"" FLOAT,
	""female_62_to_64"" FLOAT,
	""female_65_to_66"" FLOAT,
	""female_67_to_69"" FLOAT,
	""female_70_to_74"" FLOAT,
	""female_75_to_79"" FLOAT,
	""female_80_to_84"" FLOAT,
	""female_85_and_over"" FLOAT,
	""white_pop"" FLOAT,
	""black_pop"" FLOAT,
	""asian_pop"" FLOAT,
	""hispanic_pop"" FLOAT,
	""amerindian_pop"" FLOAT,
	""other_race_pop"" FLOAT,
	""two_or_more_races_pop"" FLOAT,
	""not_hispanic_pop"" FLOAT,
	""median_income"" FLOAT,
	""income_per_capita"" FLOAT,
	""income_less_10000"" FLOAT,
	""income_10000_14999"" FLOAT,
	""income_15000_19999"" FLOAT,
	""income_20000_24999"" FLOAT,
	""income_25000_29999"" FLOAT,
	""income_30000_34999"" FLOAT,
	""income_35000_39999"" FLOAT,
	""income_40000_44999"" FLOAT,
	""income_45000_49999"" FLOAT,
	""income_50000_59999"" FLOAT,
	""income_60000_74999"" FLOAT,
	""income_75000_99999"" FLOAT,
	""income_100000_124999"" FLOAT,
	""income_125000_149999"" FLOAT,
	""income_150000_199999"" FLOAT,
	""income_200000_or_more"" FLOAT,
	""housing_units"" FLOAT,
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" FLOAT,
	""owner_occupied_housing_units_lower_value_quartile"" FLOAT,
	""owner_occupied_housing_units_median_value"" FLOAT,
	""owner_occupied_housing_units_upper_value_quartile"" FLOAT,
	""occupied_housing_units"" FLOAT,
	""housing_units_renter_occupied"" FLOAT,
	""vacant_housing_units"" FLOAT,
	""vacant_housing_units_for_rent"" FLOAT,
	""vacant_housing_units_for_sale"" FLOAT,
	""dwellings_1_units_detached"" FLOAT,
	""dwellings_1_units_attached"" FLOAT,
	""dwellings_2_units"" FLOAT,
	""dwellings_3_to_4_units"" FLOAT,
	""dwellings_5_to_9_units"" FLOAT,
	""dwellings_10_to_19_units"" FLOAT,
	""dwellings_20_to_49_units"" FLOAT,
	""dwellings_50_or_more_units"" FLOAT,
	""mobile_homes"" FLOAT,
	""housing_built_2005_or_later"" FLOAT,
	""housing_built_2000_to_2004"" FLOAT,
	""housing_built_1939_or_earlier"" FLOAT,
	""median_year_structure_built"" FLOAT,
	""married_households"" FLOAT,
	""nonfamily_households"" FLOAT,
	""family_households"" FLOAT,
	""median_rent"" FLOAT,
	""percent_income_spent_on_rent"" FLOAT,
	""rent_burden_not_computed"" FLOAT,
	""rent_over_50_percent"" FLOAT,
	""rent_40_to_50_percent"" FLOAT,
	""rent_35_to_40_percent"" FLOAT,
	""rent_30_to_35_percent"" FLOAT,
	""rent_25_to_30_percent"" FLOAT,
	""rent_20_to_25_percent"" FLOAT,
	""rent_15_to_20_percent"" FLOAT,
	""rent_10_to_15_percent"" FLOAT,
	""rent_under_10_percent"" FLOAT,
	""owner_occupied_housing_units"" FLOAT,
	""million_dollar_housing_units"" FLOAT,
	""mortgaged_housing_units"" FLOAT,
	""families_with_young_children"" FLOAT,
	""two_parent_families_with_young_children"" FLOAT,
	""two_parents_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_father_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_mother_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_not_in_labor_force_families_with_young_children"" FLOAT,
	""one_parent_families_with_young_children"" FLOAT,
	""father_one_parent_families_with_young_children"" FLOAT,
	""father_in_labor_force_one_parent_families_with_young_children"" FLOAT,
	""commute_10_14_mins"" FLOAT,
	""commute_15_19_mins"" FLOAT,
	""commute_20_24_mins"" FLOAT,
	""commute_25_29_mins"" FLOAT,
	""commute_30_34_mins"" FLOAT,
	""commute_45_59_mins"" FLOAT,
	""aggregate_travel_time_to_work"" FLOAT,
	""commuters_by_public_transportation"" FLOAT,
	""armed_forces"" FLOAT,
	""civilian_labor_force"" FLOAT,
	""employed_pop"" FLOAT,
	""unemployed_pop"" FLOAT,
	""not_in_labor_force"" FLOAT,
	""pop_16_over"" FLOAT,
	""pop_in_labor_force"" FLOAT,
	""associates_degree"" FLOAT,
	""bachelors_degree"" FLOAT,
	""high_school_diploma"" FLOAT,
	""less_one_year_college"" FLOAT,
	""masters_degree"" FLOAT,
	""one_year_more_college"" FLOAT,
	""pop_25_years_over"" FLOAT,
	""commute_35_44_mins"" FLOAT,
	""commute_60_more_mins"" FLOAT,
	""commute_less_10_mins"" FLOAT,
	""commuters_16_over"" FLOAT,
	""asian_male_45_54"" FLOAT,
	""asian_male_55_64"" FLOAT,
	""black_male_45_54"" FLOAT,
	""black_male_55_64"" FLOAT,
	""hispanic_male_45_54"" FLOAT,
	""hispanic_male_55_64"" FLOAT,
	""white_male_45_54"" FLOAT,
	""white_male_55_64"" FLOAT,
	""bachelors_degree_2"" FLOAT,
	""bachelors_degree_or_higher_25_64"" FLOAT,
	""children"" FLOAT,
	""children_in_single_female_hh"" FLOAT,
	""commuters_by_bus"" FLOAT,
	""commuters_by_car_truck_van"" FLOAT,
	""commuters_by_carpool"" FLOAT,
	""commuters_by_subway_or_elevated"" FLOAT,
	""commuters_drove_alone"" FLOAT,
	""different_house_year_ago_different_city"" FLOAT,
	""different_house_year_ago_same_city"" FLOAT,
	""employed_agriculture_forestry_fishing_hunting_mining"" FLOAT,
	""employed_arts_entertainment_recreation_accommodation_food"" FLOAT,
	""employed_construction"" FLOAT,
	""employed_education_health_social"" FLOAT,
	""employed_finance_insurance_real_estate"" FLOAT,
	""employed_information"" FLOAT,
	""employed_manufacturing"" FLOAT,
	""employed_other_services_not_public_admin"" FLOAT,
	""employed_public_administration"" FLOAT,
	""employed_retail_trade"" FLOAT,
	""employed_science_management_admin_waste"" FLOAT,
	""employed_transportation_warehousing_utilities"" FLOAT,
	""employed_wholesale_trade"" FLOAT,
	""female_female_households"" FLOAT,
	""four_more_cars"" FLOAT,
	""gini_index"" FLOAT,
	""graduate_professional_degree"" FLOAT,
	""group_quarters"" FLOAT,
	""high_school_including_ged"" FLOAT,
	""households_public_asst_or_food_stamps"" FLOAT,
	""in_grades_1_to_4"" FLOAT,
	""in_grades_5_to_8"" FLOAT,
	""in_grades_9_to_12"" FLOAT,
	""in_school"" FLOAT,
	""in_undergrad_college"" FLOAT,
	""less_than_high_school_graduate"" FLOAT,
	""male_45_64_associates_degree"" FLOAT,
	""male_45_64_bachelors_degree"" FLOAT,
	""male_45_64_graduate_degree"" FLOAT,
	""male_45_64_less_than_9_grade"" FLOAT,
	""male_45_64_grade_9_12"" FLOAT,
	""male_45_64_high_school"" FLOAT,
	""male_45_64_some_college"" FLOAT,
	""male_45_to_64"" FLOAT,
	""male_male_households"" FLOAT,
	""management_business_sci_arts_employed"" FLOAT,
	""no_car"" FLOAT,
	""no_cars"" FLOAT,
	""not_us_citizen_pop"" FLOAT,
	""occupation_management_arts"" FLOAT,
	""occupation_natural_resources_construction_maintenance"" FLOAT,
	""occupation_production_transportation_material"" FLOAT,
	""occupation_sales_office"" FLOAT,
	""occupation_services"" FLOAT,
	""one_car"" FLOAT,
	""two_cars"" FLOAT,
	""three_cars"" FLOAT,
	""pop_25_64"" FLOAT,
	""pop_determined_poverty_status"" FLOAT,
	""population_1_year_and_over"" FLOAT,
	""population_3_years_over"" FLOAT,
	""poverty"" FLOAT,
	""sales_office_employed"" FLOAT,
	""some_college_and_associates_degree"" FLOAT,
	""walked_to_work"" FLOAT,
	""worked_at_home"" FLOAT,
	""workers_16_and_over"" FLOAT,
	""hispanic_any_race"" FLOAT,
	""pop_5_years_over"" FLOAT,
	""speak_only_english_at_home"" FLOAT,
	""speak_spanish_at_home"" FLOAT,
	""speak_spanish_at_home_low_english"" FLOAT,
	""pop_15_and_over"" FLOAT,
	""pop_never_married"" FLOAT,
	""pop_now_married"" FLOAT,
	""pop_separated"" FLOAT,
	""pop_widowed"" FLOAT,
	""pop_divorced"" FLOAT
);"

Some other tables have the similar structure: ['ZCTA5_2011_5YR', 'ZCTA5_2019_5YR', 'ZCTA5_2013_5YR', 'ZCTA5_2018_5YR', 'ZCTA5_2015_5YR', 'ZCTA5_2012_5YR', 'ZCTA5_2016_5YR', 'ZCTA_2019_5YR', 'ZCTA_2020_5YR', 'ZCTA5_2014_5YR', 'ZCTA5_2017_5YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: CENSUS_BUREAU_ACS
,12
table_name,ZIP_CODES_2012_5YR
description,
DDL,"create or replace TABLE ZIP_CODES_2012_5YR (
	""geo_id"" VARCHAR(16777216),
	""nonfamily_households"" FLOAT,
	""family_households"" FLOAT,
	""median_year_structure_built"" FLOAT,
	""rent_burden_not_computed"" FLOAT,
	""rent_over_50_percent"" FLOAT,
	""rent_40_to_50_percent"" FLOAT,
	""rent_35_to_40_percent"" FLOAT,
	""rent_30_to_35_percent"" FLOAT,
	""rent_25_to_30_percent"" FLOAT,
	""rent_20_to_25_percent"" FLOAT,
	""rent_15_to_20_percent"" FLOAT,
	""rent_10_to_15_percent"" FLOAT,
	""rent_under_10_percent"" FLOAT,
	""total_pop"" FLOAT,
	""male_pop"" FLOAT,
	""female_pop"" FLOAT,
	""median_age"" FLOAT,
	""white_pop"" FLOAT,
	""black_pop"" FLOAT,
	""asian_pop"" FLOAT,
	""hispanic_pop"" FLOAT,
	""amerindian_pop"" FLOAT,
	""other_race_pop"" FLOAT,
	""two_or_more_races_pop"" FLOAT,
	""not_hispanic_pop"" FLOAT,
	""commuters_by_public_transportation"" FLOAT,
	""households"" FLOAT,
	""median_income"" FLOAT,
	""income_per_capita"" FLOAT,
	""housing_units"" FLOAT,
	""vacant_housing_units"" FLOAT,
	""vacant_housing_units_for_rent"" FLOAT,
	""vacant_housing_units_for_sale"" FLOAT,
	""median_rent"" FLOAT,
	""percent_income_spent_on_rent"" FLOAT,
	""owner_occupied_housing_units"" FLOAT,
	""million_dollar_housing_units"" FLOAT,
	""mortgaged_housing_units"" FLOAT,
	""families_with_young_children"" FLOAT,
	""two_parent_families_with_young_children"" FLOAT,
	""two_parents_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_father_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_mother_in_labor_force_families_with_young_children"" FLOAT,
	""two_parents_not_in_labor_force_families_with_young_children"" FLOAT,
	""one_parent_families_with_young_children"" FLOAT,
	""father_one_parent_families_with_young_children"" FLOAT,
	""father_in_labor_force_one_parent_families_with_young_children"" FLOAT,
	""commute_10_14_mins"" FLOAT,
	""commute_15_19_mins"" FLOAT,
	""commute_20_24_mins"" FLOAT,
	""commute_25_29_mins"" FLOAT,
	""commute_30_34_mins"" FLOAT,
	""commute_45_59_mins"" FLOAT,
	""aggregate_travel_time_to_work"" FLOAT,
	""income_less_10000"" FLOAT,
	""income_10000_14999"" FLOAT,
	""income_15000_19999"" FLOAT,
	""income_20000_24999"" FLOAT,
	""income_25000_29999"" FLOAT,
	""income_30000_34999"" FLOAT,
	""income_35000_39999"" FLOAT,
	""income_40000_44999"" FLOAT,
	""income_45000_49999"" FLOAT,
	""income_50000_59999"" FLOAT,
	""income_60000_74999"" FLOAT,
	""income_75000_99999"" FLOAT,
	""income_100000_124999"" FLOAT,
	""income_125000_149999"" FLOAT,
	""income_150000_199999"" FLOAT,
	""income_200000_or_more"" FLOAT,
	""renter_occupied_housing_units_paying_cash_median_gross_rent"" FLOAT,
	""owner_occupied_housing_units_lower_value_quartile"" FLOAT,
	""owner_occupied_housing_units_median_value"" FLOAT,
	""owner_occupied_housing_units_upper_value_quartile"" FLOAT,
	""married_households"" FLOAT,
	""occupied_housing_units"" FLOAT,
	""housing_units_renter_occupied"" FLOAT,
	""dwellings_1_units_detached"" FLOAT,
	""dwellings_1_units_attached"" FLOAT,
	""dwellings_2_units"" FLOAT,
	""dwellings_3_to_4_units"" FLOAT,
	""dwellings_5_to_9_units"" FLOAT,
	""dwellings_10_to_19_units"" FLOAT,
	""dwellings_20_to_49_units"" FLOAT,
	""dwellings_50_or_more_units"" FLOAT,
	""mobile_homes"" FLOAT,
	""housing_built_2005_or_later"" FLOAT,
	""housing_built_2000_to_2004"" FLOAT,
	""housing_built_1939_or_earlier"" FLOAT,
	""male_under_5"" FLOAT,
	""male_5_to_9"" FLOAT,
	""male_10_to_14"" FLOAT,
	""male_15_to_17"" FLOAT,
	""male_18_to_19"" FLOAT,
	""male_20"" FLOAT,
	""male_21"" FLOAT,
	""male_22_to_24"" FLOAT,
	""male_25_to_29"" FLOAT,
	""male_30_to_34"" FLOAT,
	""male_35_to_39"" FLOAT,
	""male_40_to_44"" FLOAT,
	""male_45_to_49"" FLOAT,
	""male_50_to_54"" FLOAT,
	""male_55_to_59"" FLOAT,
	""male_60_61"" FLOAT,
	""male_62_64"" FLOAT,
	""male_65_to_66"" FLOAT,
	""male_67_to_69"" FLOAT,
	""male_70_to_74"" FLOAT,
	""male_75_to_79"" FLOAT,
	""male_80_to_84"" FLOAT,
	""male_85_and_over"" FLOAT,
	""female_under_5"" FLOAT,
	""female_5_to_9"" FLOAT,
	""female_10_to_14"" FLOAT,
	""female_15_to_17"" FLOAT,
	""female_18_to_19"" FLOAT,
	""female_20"" FLOAT,
	""female_21"" FLOAT,
	""female_22_to_24"" FLOAT,
	""female_25_to_29"" FLOAT,
	""female_30_to_34"" FLOAT,
	""female_35_to_39"" FLOAT,
	""female_40_to_44"" FLOAT,
	""female_45_to_49"" FLOAT,
	""female_50_to_54"" FLOAT,
	""female_55_to_59"" FLOAT,
	""female_60_to_61"" FLOAT,
	""female_62_to_64"" FLOAT,
	""female_65_to_66"" FLOAT,
	""female_67_to_69"" FLOAT,
	""female_70_to_74"" FLOAT,
	""female_75_to_79"" FLOAT,
	""female_80_to_84"" FLOAT,
	""female_85_and_over"" FLOAT,
	""white_including_hispanic"" FLOAT,
	""black_including_hispanic"" FLOAT,
	""amerindian_including_hispanic"" FLOAT,
	""asian_including_hispanic"" FLOAT,
	""commute_5_9_mins"" FLOAT,
	""commute_35_39_mins"" FLOAT,
	""commute_40_44_mins"" FLOAT,
	""commute_60_89_mins"" FLOAT,
	""commute_90_more_mins"" FLOAT,
	""households_retirement_income"" FLOAT,
	""armed_forces"" FLOAT,
	""civilian_labor_force"" FLOAT,
	""employed_pop"" FLOAT,
	""unemployed_pop"" FLOAT,
	""not_in_labor_force"" FLOAT,
	""pop_16_over"" FLOAT,
	""pop_in_labor_force"" FLOAT,
	""asian_male_45_54"" FLOAT,
	""asian_male_55_64"" FLOAT,
	""black_male_45_54"" FLOAT,
	""black_male_55_64"" FLOAT,
	""hispanic_male_45_54"" FLOAT,
	""hispanic_male_55_64"" FLOAT,
	""white_male_45_54"" FLOAT,
	""white_male_55_64"" FLOAT,
	""bachelors_degree_2"" FLOAT,
	""bachelors_degree_or_higher_25_64"" FLOAT,
	""children"" FLOAT,
	""children_in_single_female_hh"" FLOAT,
	""commuters_by_bus"" FLOAT,
	""commuters_by_car_truck_van"" FLOAT,
	""commuters_by_carpool"" FLOAT,
	""commuters_by_subway_or_elevated"" FLOAT,
	""commuters_drove_alone"" FLOAT,
	""different_house_year_ago_different_city"" FLOAT,
	""different_house_year_ago_same_city"" FLOAT,
	""employed_agriculture_forestry_fishing_hunting_mining"" FLOAT,
	""employed_arts_entertainment_recreation_accommodation_food"" FLOAT,
	""employed_construction"" FLOAT,
	""employed_education_health_social"" FLOAT,
	""employed_finance_insurance_real_estate"" FLOAT,
	""employed_information"" FLOAT,
	""employed_manufacturing"" FLOAT,
	""employed_other_services_not_public_admin"" FLOAT,
	""employed_public_administration"" FLOAT,
	""employed_retail_trade"" FLOAT,
	""employed_science_management_admin_waste"" FLOAT,
	""employed_transportation_warehousing_utilities"" FLOAT,
	""employed_wholesale_trade"" FLOAT,
	""female_female_households"" FLOAT,
	""four_more_cars"" FLOAT,
	""gini_index"" FLOAT,
	""graduate_professional_degree"" FLOAT,
	""group_quarters"" FLOAT,
	""high_school_including_ged"" FLOAT,
	""households_public_asst_or_food_stamps"" FLOAT,
	""in_grades_1_to_4"" FLOAT,
	""in_grades_5_to_8"" FLOAT,
	""in_grades_9_to_12"" FLOAT,
	""in_school"" FLOAT,
	""in_undergrad_college"" FLOAT,
	""less_than_high_school_graduate"" FLOAT,
	""male_45_64_associates_degree"" FLOAT,
	""male_45_64_bachelors_degree"" FLOAT,
	""male_45_64_graduate_degree"" FLOAT,
	""male_45_64_less_than_9_grade"" FLOAT,
	""male_45_64_grade_9_12"" FLOAT,
	""male_45_64_high_school"" FLOAT,
	""male_45_64_some_college"" FLOAT,
	""male_45_to_64"" FLOAT,
	""male_male_households"" FLOAT,
	""management_business_sci_arts_employed"" FLOAT,
	""no_car"" FLOAT,
	""no_cars"" FLOAT,
	""not_us_citizen_pop"" FLOAT,
	""occupation_management_arts"" FLOAT,
	""occupation_natural_resources_construction_maintenance"" FLOAT,
	""occupation_production_transportation_material"" FLOAT,
	""occupation_sales_office"" FLOAT,
	""occupation_services"" FLOAT,
	""one_car"" FLOAT,
	""two_cars"" FLOAT,
	""three_cars"" FLOAT,
	""pop_25_64"" FLOAT,
	""pop_determined_poverty_status"" FLOAT,
	""population_1_year_and_over"" FLOAT,
	""population_3_years_over"" FLOAT,
	""poverty"" FLOAT,
	""sales_office_employed"" FLOAT,
	""some_college_and_associates_degree"" FLOAT,
	""walked_to_work"" FLOAT,
	""worked_at_home"" FLOAT,
	""workers_16_and_over"" FLOAT,
	""associates_degree"" FLOAT,
	""bachelors_degree"" FLOAT,
	""high_school_diploma"" FLOAT,
	""less_one_year_college"" FLOAT,
	""masters_degree"" FLOAT,
	""one_year_more_college"" FLOAT,
	""pop_25_years_over"" FLOAT,
	""commute_35_44_mins"" FLOAT,
	""commute_60_more_mins"" FLOAT,
	""commute_less_10_mins"" FLOAT,
	""commuters_16_over"" FLOAT,
	""hispanic_any_race"" FLOAT,
	""pop_5_years_over"" FLOAT,
	""speak_only_english_at_home"" FLOAT,
	""speak_spanish_at_home"" FLOAT,
	""speak_spanish_at_home_low_english"" FLOAT,
	""pop_15_and_over"" FLOAT,
	""pop_never_married"" FLOAT,
	""pop_now_married"" FLOAT,
	""pop_separated"" FLOAT,
	""pop_widowed"" FLOAT,
	""pop_divorced"" FLOAT,
	""do_date"" VARCHAR(16777216)
);"

Some other tables have the similar structure: ['ZIP_CODES_2012_5YR', 'ZIP_CODES_2011_5YR', 'ZIP_CODES_2015_5YR', 'ZIP_CODES_2016_5YR', 'ZIP_CODES_2017_5YR', 'ZIP_CODES_2018_5YR', 'ZIP_CODES_2013_5YR', 'ZIP_CODES_2014_5YR']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,0
table_name,CENSUS_TRACTS_ALASKA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_ALASKA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,1
table_name,CENSUS_TRACTS_COLORADO
description,
DDL,"create or replace TABLE CENSUS_TRACTS_COLORADO (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,2
table_name,CENSUS_TRACTS_ILLINOIS
description,
DDL,"create or replace TABLE CENSUS_TRACTS_ILLINOIS (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,3
table_name,CENSUS_TRACTS_LOUISIANA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_LOUISIANA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,4
table_name,CENSUS_TRACTS_MONTANA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_MONTANA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,5
table_name,CENSUS_TRACTS_NEW_MEXICO
description,
DDL,"create or replace TABLE CENSUS_TRACTS_NEW_MEXICO (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,6
table_name,CENSUS_TRACTS_RHODE_ISLAND
description,
DDL,"create or replace TABLE CENSUS_TRACTS_RHODE_ISLAND (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,7
table_name,CENSUS_TRACTS_HAWAII
description,
DDL,"create or replace TABLE CENSUS_TRACTS_HAWAII (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,8
table_name,CENSUS_TRACTS_MINNESOTA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_MINNESOTA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,9
table_name,CENSUS_TRACTS_NEW_HAMPSHIRE
description,
DDL,"create or replace TABLE CENSUS_TRACTS_NEW_HAMPSHIRE (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,10
table_name,CENSUS_TRACTS_VIRGINIA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_VIRGINIA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,11
table_name,CENSUS_TRACTS_WEST_VIRGINIA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_WEST_VIRGINIA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,12
table_name,CENSUS_TRACTS_MISSOURI
description,
DDL,"create or replace TABLE CENSUS_TRACTS_MISSOURI (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,13
table_name,CENSUS_TRACTS_WYOMING
description,
DDL,"create or replace TABLE CENSUS_TRACTS_WYOMING (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,14
table_name,CENSUS_TRACTS_WISCONSIN
description,
DDL,"create or replace TABLE CENSUS_TRACTS_WISCONSIN (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,15
table_name,CENSUS_TRACTS_AMERICAN_SAMOA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_AMERICAN_SAMOA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,16
table_name,CENSUS_TRACTS_ARIZONA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_ARIZONA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,17
table_name,CENSUS_TRACTS_CALIFORNIA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_CALIFORNIA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,18
table_name,CENSUS_TRACTS_DELAWARE
description,
DDL,"create or replace TABLE CENSUS_TRACTS_DELAWARE (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,19
table_name,CENSUS_TRACTS_KENTUCKY
description,
DDL,"create or replace TABLE CENSUS_TRACTS_KENTUCKY (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,20
table_name,CENSUS_TRACTS_MAINE
description,
DDL,"create or replace TABLE CENSUS_TRACTS_MAINE (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,21
table_name,CENSUS_TRACTS_MICHIGAN
description,
DDL,"create or replace TABLE CENSUS_TRACTS_MICHIGAN (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,22
table_name,CENSUS_TRACTS_NEW_JERSEY
description,
DDL,"create or replace TABLE CENSUS_TRACTS_NEW_JERSEY (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,23
table_name,CENSUS_TRACTS_PUERTO_RICO
description,
DDL,"create or replace TABLE CENSUS_TRACTS_PUERTO_RICO (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,24
table_name,US_CENSUS_TRACTS_NATIONAL
description,
DDL,"create or replace TABLE US_CENSUS_TRACTS_NATIONAL (
	""state_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,25
table_name,CENSUS_TRACTS_FLORIDA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_FLORIDA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,26
table_name,CENSUS_TRACTS_GEORGIA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_GEORGIA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,27
table_name,CENSUS_TRACTS_OHIO
description,
DDL,"create or replace TABLE CENSUS_TRACTS_OHIO (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,28
table_name,CENSUS_TRACTS_PENNSYLVANIA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_PENNSYLVANIA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,29
table_name,CENSUS_TRACTS_WASHINGTON
description,
DDL,"create or replace TABLE CENSUS_TRACTS_WASHINGTON (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,30
table_name,CENSUS_TRACTS_VERMONT
description,
DDL,"create or replace TABLE CENSUS_TRACTS_VERMONT (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,31
table_name,CENSUS_TRACTS_SOUTH_CAROLINA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_SOUTH_CAROLINA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,32
table_name,CENSUS_TRACTS_ARKANSAS
description,
DDL,"create or replace TABLE CENSUS_TRACTS_ARKANSAS (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,33
table_name,CENSUS_TRACTS_DISTRICT_OF_COLUMBIA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_DISTRICT_OF_COLUMBIA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,34
table_name,CENSUS_TRACTS_GUAM
description,
DDL,"create or replace TABLE CENSUS_TRACTS_GUAM (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,35
table_name,CENSUS_TRACTS_MASSACHUSETTS
description,
DDL,"create or replace TABLE CENSUS_TRACTS_MASSACHUSETTS (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,36
table_name,CENSUS_TRACTS_OREGON
description,
DDL,"create or replace TABLE CENSUS_TRACTS_OREGON (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,37
table_name,CENSUS_TRACTS_INDIANA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_INDIANA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,38
table_name,CENSUS_TRACTS_NEVADA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_NEVADA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,39
table_name,CENSUS_TRACTS_NORTHERN_MARIANA_ISLANDS
description,
DDL,"create or replace TABLE CENSUS_TRACTS_NORTHERN_MARIANA_ISLANDS (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,40
table_name,CENSUS_TRACTS_ALABAMA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_ALABAMA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,41
table_name,CENSUS_TRACTS_CONNECTICUT
description,
DDL,"create or replace TABLE CENSUS_TRACTS_CONNECTICUT (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,42
table_name,CENSUS_TRACTS_IDAHO
description,
DDL,"create or replace TABLE CENSUS_TRACTS_IDAHO (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,43
table_name,CENSUS_TRACTS_IOWA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_IOWA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,44
table_name,CENSUS_TRACTS_KANSAS
description,
DDL,"create or replace TABLE CENSUS_TRACTS_KANSAS (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,45
table_name,CENSUS_TRACTS_MARYLAND
description,
DDL,"create or replace TABLE CENSUS_TRACTS_MARYLAND (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,46
table_name,CENSUS_TRACTS_NEBRASKA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_NEBRASKA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,47
table_name,CENSUS_TRACTS_NEW_YORK
description,
DDL,"create or replace TABLE CENSUS_TRACTS_NEW_YORK (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,48
table_name,CENSUS_TRACTS_TEXAS
description,
DDL,"create or replace TABLE CENSUS_TRACTS_TEXAS (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,49
table_name,CENSUS_TRACTS_UTAH
description,
DDL,"create or replace TABLE CENSUS_TRACTS_UTAH (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,50
table_name,CENSUS_TRACTS_NORTH_CAROLINA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_NORTH_CAROLINA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,51
table_name,CENSUS_TRACTS_OKLAHOMA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_OKLAHOMA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,52
table_name,CENSUS_TRACTS_SOUTH_DAKOTA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_SOUTH_DAKOTA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,53
table_name,CENSUS_TRACTS_US_VIRGIN_ISLANDS
description,
DDL,"create or replace TABLE CENSUS_TRACTS_US_VIRGIN_ISLANDS (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,54
table_name,CENSUS_TRACTS_NORTH_DAKOTA
description,
DDL,"create or replace TABLE CENSUS_TRACTS_NORTH_DAKOTA (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,55
table_name,CENSUS_TRACTS_MISSISSIPPI
description,
DDL,"create or replace TABLE CENSUS_TRACTS_MISSISSIPPI (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_CENSUS_TRACTS
,56
table_name,CENSUS_TRACTS_TENNESSEE
description,
DDL,"create or replace TABLE CENSUS_TRACTS_TENNESSEE (
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""tract_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" VARCHAR(16777216),
	""internal_point_lon"" VARCHAR(16777216),
	""internal_point_geo"" BINARY(8388608),
	""tract_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,0
table_name,ADJACENT_COUNTIES
description,
DDL,"create or replace TABLE ADJACENT_COUNTIES (
	""county"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""neighbors"" VARIANT,
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,1
table_name,CBSA
description,
DDL,"create or replace TABLE CBSA (
	""geo_id"" VARCHAR(16777216),
	""csa_geo_id"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""msa_indicator"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""cbsa_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,2
table_name,CONGRESS_DISTRICT_116
description,
DDL,"create or replace TABLE CONGRESS_DISTRICT_116 (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""district_fips_code"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""congress_session"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" BOOLEAN,
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""district_geom"" BINARY(8388608)
);"

Some other tables have the similar structure: ['CONGRESS_DISTRICT_116', 'CONGRESS_DISTRICT_115']
Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,3
table_name,ADJACENT_STATES
description,
DDL,"create or replace TABLE ADJACENT_STATES (
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,4
table_name,COASTLINE
description,
DDL,"create or replace TABLE COASTLINE (
	""name"" VARCHAR(16777216),
	""coastline_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,5
table_name,NATIONAL_OUTLINE
description,
DDL,"create or replace TABLE NATIONAL_OUTLINE (
	""us_outline_geom"" BINARY(8388608),
	""aff_geo_id"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""name"" VARCHAR(16777216)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,6
table_name,STATES
description,
DDL,"create or replace TABLE STATES (
	""geo_id"" VARCHAR(16777216),
	""region_code"" VARCHAR(16777216),
	""division_code"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_gnis_code"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""state_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,7
table_name,METROPOLITAN_DIVISIONS
description,
DDL,"create or replace TABLE METROPOLITAN_DIVISIONS (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""cbsa_code"" VARCHAR(16777216),
	""metdiv_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""metdiv_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,8
table_name,RAILWAYS
description,
DDL,"create or replace TABLE RAILWAYS (
	""geo_id"" NUMBER(38,0),
	""full_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""railway_geom"" VARCHAR(16777216)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,9
table_name,URBAN_AREAS
description,
DDL,"create or replace TABLE URBAN_AREAS (
	""geo_id"" VARCHAR(16777216),
	""urban_area_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""area_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""urban_area_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,10
table_name,ZIP_CODES
description,
DDL,"create or replace TABLE ZIP_CODES (
	""zip_code"" VARCHAR(16777216),
	""city"" VARCHAR(16777216),
	""county"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_code"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""zip_code_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,11
table_name,CNECTA
description,
DDL,"create or replace TABLE CNECTA (
	""geo_id"" VARCHAR(16777216),
	""cnecta_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""cnecta_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,12
table_name,COUNTIES
description,
DDL,"create or replace TABLE COUNTIES (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_gnis_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""csa_fips_code"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""met_div_fips_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""county_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,13
table_name,CSA
description,
DDL,"create or replace TABLE CSA (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""msa_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""csa_geom"" BINARY(8388608)
);"

Database Name: CENSUS_BUREAU_ACS_1
Schema Name: GEO_US_BOUNDARIES
,14
table_name,NWS_FORECAST_REGIONS
description,
DDL,"create or replace TABLE NWS_FORECAST_REGIONS (
	""state"" VARCHAR(16777216),
	""cwa"" VARCHAR(16777216),
	""time_zone"" VARCHAR(16777216),
	""fe_area"" VARCHAR(16777216),
	""zone"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""state_zone"" VARCHAR(16777216),
	""lon"" FLOAT,
	""lat"" FLOAT,
	""shortname"" VARCHAR(16777216),
	""shape_geometry"" BINARY(8388608)
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'CENSUS_BUREAU_ACS_1': {'CENSUS_BUREAU_ACS': ['BLOCKGROUP_2014_5YR', 'BLOCKGROUP_2014_5YR', 'BLOCKGROUP_2016_5YR', 'BLOCKGROUP_2017_5YR', 'BLOCKGROUP_2018_5YR', 'BLOCKGROUP_2011_5YR', 'BLOCKGROUP_2012_5YR', 'BLOCKGROUP_2013_5YR', 'BLOCKGROUP_2015_5YR', 'BLOCKGROUP_2010_5YR', 'CBSA_2007_1YR', 'CBSA_2007_1YR', 'CBSA_2010_1YR', 'CBSA_2010_3YR', 'CBSA_2011_5YR', 'CBSA_2015_5YR', 'CBSA_2014_5YR', 'CBSA_2017_5YR', 'CBSA_2011_3YR', 'CBSA_2012_5YR', 'CBSA_2013_3YR', 'CBSA_2009_1YR', 'CBSA_2016_5YR', 'CBSA_2018_5YR', 'CBSA_2017_1YR', 'CBSA_2021_1YR', 'CBSA_2012_3YR', 'CBSA_2009_3YR', 'CBSA_2011_1YR', 'CBSA_2012_1YR', 'CBSA_2013_1YR', 'CBSA_2020_5YR', 'CBSA_2013_5YR', 'CBSA_2019_1YR', 'CBSA_2008_3YR', 'CBSA_2019_5YR', 'CBSA_2007_3YR', 'CBSA_2008_1YR', 'CBSA_2014_1YR', 'CBSA_2015_1YR', 'CBSA_2010_5YR', 'CBSA_2016_1YR', 'CBSA_2018_1YR', 'CENSUSTRACT_2011_5YR', 'CENSUSTRACT_2011_5YR', 'CENSUSTRACT_2016_5YR', 'CENSUSTRACT_2014_5YR', 'CENSUSTRACT_2010_5YR', 'CENSUSTRACT_2017_5YR', 'CENSUSTRACT_2019_5YR', 'CENSUSTRACT_2018_5YR', 'CENSUSTRACT_2013_5YR', 'CENSUSTRACT_2015_5YR', 'CENSUSTRACT_2012_5YR', 'CENSUSTRACT_2020_5YR', 'CONGRESSIONALDISTRICT_2008_1YR', 'CONGRESSIONALDISTRICT_2008_1YR', 'CONGRESSIONALDISTRICT_2009_3YR', 'CONGRESSIONALDISTRICT_2018_1YR', 'CONGRESSIONALDISTRICT_2020_5YR', 'CONGRESSIONALDISTRICT_2014_1YR', 'CONGRESSIONALDISTRICT_2019_5YR', 'CONGRESSIONALDISTRICT_2018_5YR', 'CONGRESSIONALDISTRICT_2015_1YR', 'CONGRESSIONALDISTRICT_2013_3YR', 'CONGRESSIONALDISTRICT_2014_5YR', 'CONGRESSIONALDISTRICT_2012_1YR', 'CONGRESSIONALDISTRICT_2012_5YR', 'CONGRESSIONALDISTRICT_2011_5YR', 'CONGRESSIONALDISTRICT_2011_1YR', 'CONGRESSIONALDISTRICT_2016_1YR', 'CONGRESSIONALDISTRICT_2012_3YR', 'CONGRESSIONALDISTRICT_2016_5YR', 'CONGRESSIONALDISTRICT_2009_1YR', 'CONGRESSIONALDISTRICT_2010_1YR', 'CONGRESSIONALDISTRICT_2015_5YR', 'CONGRESSIONALDISTRICT_2010_3YR', 'CONGRESSIONALDISTRICT_2013_5YR', 'CONGRESSIONALDISTRICT_2013_1YR', 'CONGRESSIONALDISTRICT_2007_1YR', 'CONGRESSIONALDISTRICT_2007_3YR', 'CONGRESSIONALDISTRICT_2011_3YR', 'CONGRESSIONALDISTRICT_2017_1YR', 'CONGRESSIONALDISTRICT_2019_1YR', 'CONGRESSIONALDISTRICT_2008_3YR', 'CONGRESSIONALDISTRICT_2010_5YR', 'CONGRESSIONALDISTRICT_2017_5YR', 'CONGRESSIONALDISTRICT_2021_1YR', 'COUNTY_2012_5YR', 'COUNTY_2012_5YR', 'COUNTY_2016_1YR', 'COUNTY_2007_3YR', 'COUNTY_2013_1YR', 'COUNTY_2017_1YR', 'COUNTY_2018_5YR', 'COUNTY_2016_5YR', 'COUNTY_2008_1YR', 'COUNTY_2017_5YR', 'COUNTY_2019_5YR', 'COUNTY_2007_1YR', 'COUNTY_2013_3YR', 'COUNTY_2015_1YR', 'COUNTY_2019_1YR', 'COUNTY_2011_5YR', 'COUNTY_2008_3YR', 'COUNTY_2014_1YR', 'COUNTY_2012_3YR', 'COUNTY_2009_1YR', 'COUNTY_2010_5YR', 'COUNTY_2014_5YR', 'COUNTY_2009_3YR', 'COUNTY_2010_1YR', 'COUNTY_2010_3YR', 'COUNTY_2011_1YR', 'COUNTY_2011_3YR', 'COUNTY_2015_5YR', 'COUNTY_2018_1YR', 'COUNTY_2012_1YR', 'COUNTY_2013_5YR', 'COUNTY_2020_5YR', 'COUNTY_2021_1YR', 'PUMA_2017_1YR', 'PUMA_2017_1YR', 'PUMA_2013_5YR', 'PUMA_2008_1YR', 'PUMA_2013_1YR', 'PUMA_2008_3YR', 'PUMA_2007_3YR', 'PUMA_2009_3YR', 'PUMA_2014_1YR', 'PUMA_2016_5YR', 'PUMA_2018_5YR', 'PUMA_2020_5YR', 'PUMA_2009_1YR', 'PUMA_2015_1YR', 'PUMA_2017_5YR', 'PUMA_2012_3YR', 'PUMA_2013_3YR', 'PUMA_2014_5YR', 'PUMA_2018_1YR', 'PUMA_2019_1YR', 'PUMA_2011_5YR', 'PUMA_2021_1YR', 'PUMA_2011_3YR', 'PUMA_2010_3YR', 'PUMA_2007_1YR', 'PUMA_2012_1YR', 'PUMA_2015_5YR', 'PUMA_2010_1YR', 'PUMA_2010_5YR', 'PUMA_2012_5YR', 'PUMA_2019_5YR', 'PUMA_2016_1YR', 'PUMA_2011_1YR', 'PLACE_2010_3YR', 'PLACE_2010_3YR', 'PLACE_2014_5YR', 'PLACE_2015_1YR', 'PLACE_2009_3YR', 'PLACE_2013_5YR', 'PLACE_2016_1YR', 'PLACE_2018_5YR', 'PLACE_2013_1YR', 'PLACE_2011_3YR', 'PLACE_2021_1YR', 'PLACE_2012_1YR', 'PLACE_2012_3YR', 'PLACE_2010_5YR', 'PLACE_2011_5YR', 'PLACE_2015_5YR', 'PLACE_2011_1YR', 'PLACE_2017_1YR', 'PLACE_2012_5YR', 'PLACE_2007_1YR', 'PLACE_2008_1YR', 'PLACE_2019_1YR', 'PLACE_2009_1YR', 'PLACE_2010_1YR', 'PLACE_2013_3YR', 'PLACE_2017_5YR', 'PLACE_2016_5YR', 'PLACE_2018_1YR', 'PLACE_2007_3YR', 'PLACE_2019_5YR', 'PLACE_2014_1YR', 'PLACE_2008_3YR', 'PLACE_2020_5YR', 'SCHOOLDISTRICTELEMENTARY_2014_5YR', 'SCHOOLDISTRICTELEMENTARY_2014_5YR', 'SCHOOLDISTRICTELEMENTARY_2010_1YR', 'SCHOOLDISTRICTELEMENTARY_2016_5YR', 'SCHOOLDISTRICTELEMENTARY_2018_5YR', 'SCHOOLDISTRICTELEMENTARY_2019_5YR', 'SCHOOLDISTRICTELEMENTARY_2017_5YR', 'SCHOOLDISTRICTELEMENTARY_2015_5YR', 'SCHOOLDISTRICTELEMENTARY_2014_1YR', 'SCHOOLDISTRICTELEMENTARY_2015_1YR', 'SCHOOLDISTRICTELEMENTARY_2019_1YR', 'SCHOOLDISTRICTELEMENTARY_2016_1YR', 'SCHOOLDISTRICTELEMENTARY_2020_5YR', 'SCHOOLDISTRICTELEMENTARY_2010_5YR', 'SCHOOLDISTRICTELEMENTARY_2018_1YR', 'SCHOOLDISTRICTELEMENTARY_2017_1YR', 'SCHOOLDISTRICTELEMENTARY_2021_1YR', 'STATE_2014_1YR', 'STATE_2014_1YR', 'STATE_2017_1YR', 'STATE_2019_1YR', 'STATE_2011_3YR', 'STATE_2016_5YR', 'STATE_2017_5YR', 'STATE_2018_5YR', 'STATE_2019_5YR', 'STATE_2020_5YR', 'STATE_2011_5YR', 'STATE_2013_1YR', 'STATE_2009_1YR', 'STATE_2014_5YR', 'STATE_2011_1YR', 'STATE_2012_5YR', 'STATE_2013_3YR', 'STATE_2013_5YR', 'STATE_2018_1YR', 'STATE_2008_3YR', 'STATE_2010_3YR', 'STATE_2007_1YR', 'STATE_2007_3YR', 'STATE_2010_5YR', 'STATE_2008_1YR', 'STATE_2009_3YR', 'STATE_2010_1YR', 'STATE_2012_1YR', 'STATE_2012_3YR', 'STATE_2015_1YR', 'STATE_2015_5YR', 'STATE_2016_1YR', 'STATE_2021_1YR', 'SCHOOLDISTRICTSECONDARY_2010_5YR', 'SCHOOLDISTRICTSECONDARY_2010_5YR', 'SCHOOLDISTRICTSECONDARY_2018_5YR', 'SCHOOLDISTRICTSECONDARY_2019_1YR', 'SCHOOLDISTRICTSECONDARY_2021_1YR', 'SCHOOLDISTRICTSECONDARY_2017_5YR', 'SCHOOLDISTRICTSECONDARY_2020_5YR', 'SCHOOLDISTRICTSECONDARY_2015_1YR', 'SCHOOLDISTRICTSECONDARY_2014_5YR', 'SCHOOLDISTRICTSECONDARY_2015_5YR', 'SCHOOLDISTRICTSECONDARY_2018_1YR', 'SCHOOLDISTRICTSECONDARY_2016_1YR', 'SCHOOLDISTRICTSECONDARY_2010_1YR', 'SCHOOLDISTRICTSECONDARY_2017_1YR', 'SCHOOLDISTRICTSECONDARY_2016_5YR', 'SCHOOLDISTRICTSECONDARY_2019_5YR', 'SCHOOLDISTRICTUNIFIED_2019_5YR', 'SCHOOLDISTRICTUNIFIED_2019_5YR', 'SCHOOLDISTRICTUNIFIED_2016_5YR', 'SCHOOLDISTRICTUNIFIED_2017_5YR', 'SCHOOLDISTRICTUNIFIED_2021_1YR', 'SCHOOLDISTRICTUNIFIED_2018_5YR', 'SCHOOLDISTRICTUNIFIED_2014_5YR', 'SCHOOLDISTRICTUNIFIED_2015_1YR', 'SCHOOLDISTRICTUNIFIED_2010_1YR', 'SCHOOLDISTRICTUNIFIED_2015_5YR', 'SCHOOLDISTRICTUNIFIED_2010_5YR', 'SCHOOLDISTRICTUNIFIED_2016_1YR', 'SCHOOLDISTRICTUNIFIED_2020_5YR', 'SCHOOLDISTRICTUNIFIED_2019_1YR', 'SCHOOLDISTRICTUNIFIED_2018_1YR', 'SCHOOLDISTRICTUNIFIED_2014_1YR', 'SCHOOLDISTRICTUNIFIED_2017_1YR', 'ZCTA5_2011_5YR', 'ZCTA5_2011_5YR', 'ZCTA5_2019_5YR', 'ZCTA5_2013_5YR', 'ZCTA5_2018_5YR', 'ZCTA5_2015_5YR', 'ZCTA5_2012_5YR', 'ZCTA5_2016_5YR', 'ZCTA_2019_5YR', 'ZCTA_2020_5YR', 'ZCTA5_2014_5YR', 'ZCTA5_2017_5YR', 'ZIP_CODES_2012_5YR', 'ZIP_CODES_2012_5YR', 'ZIP_CODES_2011_5YR', 'ZIP_CODES_2015_5YR', 'ZIP_CODES_2016_5YR', 'ZIP_CODES_2017_5YR', 'ZIP_CODES_2018_5YR', 'ZIP_CODES_2013_5YR', 'ZIP_CODES_2014_5YR'], 'GEO_CENSUS_TRACTS': ['CENSUS_TRACTS_ALASKA', 'CENSUS_TRACTS_COLORADO', 'CENSUS_TRACTS_ILLINOIS', 'CENSUS_TRACTS_LOUISIANA', 'CENSUS_TRACTS_MONTANA', 'CENSUS_TRACTS_NEW_MEXICO', 'CENSUS_TRACTS_RHODE_ISLAND', 'CENSUS_TRACTS_HAWAII', 'CENSUS_TRACTS_MINNESOTA', 'CENSUS_TRACTS_NEW_HAMPSHIRE', 'CENSUS_TRACTS_VIRGINIA', 'CENSUS_TRACTS_WEST_VIRGINIA', 'CENSUS_TRACTS_MISSOURI', 'CENSUS_TRACTS_WYOMING', 'CENSUS_TRACTS_WISCONSIN', 'CENSUS_TRACTS_AMERICAN_SAMOA', 'CENSUS_TRACTS_ARIZONA', 'CENSUS_TRACTS_CALIFORNIA', 'CENSUS_TRACTS_DELAWARE', 'CENSUS_TRACTS_KENTUCKY', 'CENSUS_TRACTS_MAINE', 'CENSUS_TRACTS_MICHIGAN', 'CENSUS_TRACTS_NEW_JERSEY', 'CENSUS_TRACTS_PUERTO_RICO', 'US_CENSUS_TRACTS_NATIONAL', 'CENSUS_TRACTS_FLORIDA', 'CENSUS_TRACTS_GEORGIA', 'CENSUS_TRACTS_OHIO', 'CENSUS_TRACTS_PENNSYLVANIA', 'CENSUS_TRACTS_WASHINGTON', 'CENSUS_TRACTS_VERMONT', 'CENSUS_TRACTS_SOUTH_CAROLINA', 'CENSUS_TRACTS_ARKANSAS', 'CENSUS_TRACTS_DISTRICT_OF_COLUMBIA', 'CENSUS_TRACTS_GUAM', 'CENSUS_TRACTS_MASSACHUSETTS', 'CENSUS_TRACTS_OREGON', 'CENSUS_TRACTS_INDIANA', 'CENSUS_TRACTS_NEVADA', 'CENSUS_TRACTS_NORTHERN_MARIANA_ISLANDS', 'CENSUS_TRACTS_ALABAMA', 'CENSUS_TRACTS_CONNECTICUT', 'CENSUS_TRACTS_IDAHO', 'CENSUS_TRACTS_IOWA', 'CENSUS_TRACTS_KANSAS', 'CENSUS_TRACTS_MARYLAND', 'CENSUS_TRACTS_NEBRASKA', 'CENSUS_TRACTS_NEW_YORK', 'CENSUS_TRACTS_TEXAS', 'CENSUS_TRACTS_UTAH', 'CENSUS_TRACTS_NORTH_CAROLINA', 'CENSUS_TRACTS_OKLAHOMA', 'CENSUS_TRACTS_SOUTH_DAKOTA', 'CENSUS_TRACTS_US_VIRGIN_ISLANDS', 'CENSUS_TRACTS_NORTH_DAKOTA', 'CENSUS_TRACTS_MISSISSIPPI', 'CENSUS_TRACTS_TENNESSEE'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'CBSA', 'CONGRESS_DISTRICT_116', 'CONGRESS_DISTRICT_116', 'CONGRESS_DISTRICT_115', 'ADJACENT_STATES', 'COASTLINE', 'NATIONAL_OUTLINE', 'STATES', 'METROPOLITAN_DIVISIONS', 'RAILWAYS', 'URBAN_AREAS', 'ZIP_CODES', 'CNECTA', 'COUNTIES', 'CSA', 'NWS_FORECAST_REGIONS']}}
Begin Exploring Related Columns
```
Columns and their potential usage:

- "geo_id": Census tract identifier, used to join tract data with geometry data.
- "total_pop": Total population in each census tract.
- "income_per_capita": Average individual income in each census tract.
- "tract_geom": Geometry of census tracts, used for spatial operations.
- "zip_code": ZIP code identifier.
- "zip_code_geom": Geometry of ZIP code areas, used for spatial operations.

Conditions that may be used:

- Filtering data for Washington State.
- Finding ZIP codes within a 5-mile radius of a specific point (latitude 47.685833, longitude -122.191667).
- Performing spatial joins where geometries intersect.

SQL Queries:

```sql
-- Query 1: Select total population and income per capita for tracts in Washington State
SELECT "geo_id", "total_pop", "income_per_capita"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR"
WHERE "geo_id" LIKE '14000US53%'
LIMIT 100;

-- Query 2: Retrieve geometry data for census tracts in Washington State
SELECT "geo_id", "tract_geom"
FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
LIMIT 100;

-- Query 3: Select ZIP codes and their geometries in Washington State
SELECT "zip_code", "zip_code_geom"
FROM "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES"
WHERE "state_fips_code" = '53'
LIMIT 100;

-- Query 4: Find ZIP codes within a 5-mile radius of the specified point
SELECT "zip_code", "zip_code_geom"
FROM "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES"
WHERE ST_Distance(
  ST_GeogFromWKB("zip_code_geom"),
  ST_GeographyFromText('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
LIMIT 100;

-- Query 5: Get census tracts that intersect with ZIP codes
SELECT t."geo_id", t."total_pop", t."income_per_capita", z."zip_code"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
LIMIT 100;

-- Query 6: Calculate the area of each census tract
SELECT "geo_id", ST_Area(ST_GeogFromWKB("tract_geom")) AS "tract_area"
FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
LIMIT 100;

-- Query 7: Determine the overlapping area between tracts and ZIP codes
SELECT t."geo_id", z."zip_code",
  ST_Area(
    ST_Intersection(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
  ) AS "overlap_area"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
LIMIT 100;

-- Query 8: Aggregate total population by ZIP code
SELECT z."zip_code", SUM(t."total_pop") AS "total_population"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
GROUP BY z."zip_code"
LIMIT 100;

-- Query 9: Compute average income per capita for each ZIP code
SELECT z."zip_code", AVG(t."income_per_capita") AS "average_income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
GROUP BY z."zip_code"
LIMIT 100;

-- Query 10: Get ZIP codes within 5 miles and calculate weighted population and income
SELECT z."zip_code",
  SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")) AS "weighted_population",
  AVG(t."income_per_capita") AS "average_income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_Area(ST_GeogFromWKB("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
JOIN (
  SELECT t."geo_id", z."zip_code",
    ST_Area(
      ST_Intersection(
        ST_GeogFromWKB(g."tract_geom"),
        ST_GeogFromWKB(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_Intersects(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_Distance(
  ST_GeogFromWKB(z."zip_code_geom"),
  ST_GeographyFromText('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "average_income" DESC
LIMIT 100;
```Query:
SELECT z."zip_code",
       SUM(t."total_pop") AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 1) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(TO_GEOGRAPHY(g."tract_geom"), TO_GEOGRAPHY(z."zip_code_geom"))
WHERE ST_DISTANCE(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY('POINT(-122.191667 47.685833)')) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC
LIMIT 100;
Answer:
zip_code,Total_Population,Average_Individual_Income
98039,59736.0,85829.7
98004,61243.0,78706.5
98112,70005.0,75368.2
98033,101279.0,65541.9
98053,55334.0,62431.8
98052,118468.0,57338.8
98105,95215.0,57017.1
98115,117399.0,56185.1
98034,108880.0,54120.7
98008,79885.0,53738.1
98005,65974.0,53685.3
98072,97706.0,52644.7
98028,61503.0,49984.2
98007,77098.0,49464.1
98011,89173.0,46576.4
98125,83754.0,46287.7
98155,100677.0,41681.6
Query:
-- Query 2: Retrieve geometry data for census tracts in Washington State
SELECT "geo_id", "tract_geom"
FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
LIMIT 100
Answer:
Too long, hard cut:
geo_id,tract_geom
53073000100,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\xb9\x02\x00\x00dc^G\x1c\x9f^\xc0\xfd\xa3o\xd24dH@A\x81w\xf2\xe9\x9e^\xc0\xf8\xfd\x9b\x17\'dH@gb\xba\x10\xab\x9e^\xc0~\x8f\xfa\xeb\x15dH@\xa1\xd8\n\x9a\x96\x9e^\xc0v\xe5\xb3<\x0fdH@\xc4wb\xd6\x8b\x9e^\xc06\x92\x04\xe1\ndH@\xbe\x83\x9f8\x80\x9e^\xc0\'\xf7;\x14\x05dH@\x11\xa7\x93lu\x9e^\xc0H\xe0\x0f?\xffcH@\xc6\xa5*mq\x9e^\xc0\x9c\xa2#\xb9\xfccH@\x1c\x82\xe32n\x9e^\xc0&\xa6\x0b\xb1\xfacH@\x87l ]l\x9e^\xc0\xb6f+/\xf9cH@\x89\xd1s\x0b]\x9e^\xc0\x9f!\x1c\xb3\xeccH@\xdc\x0e\r\x8bQ\x9e^\xc0\t\x87\xde\xe2\xe1cH@\x97L\x15\x8cJ\x9e^\xc0\x199\x0b{\xdacH@\xc2\xa8\xa4N@\x9e^\xc0D\xe3\x89 \xcecH@7 B\\9\x9e^\xc0\xb9\xc2\xbb\\\xc4cH@\xca\xb0\x8a72\x9e^\xc0\xc5\x1fE\x9d\xb9cH@B\xe5_\xcb+\x9e^\xc0\xd0|\xce\xdd\xaecH@u\x05\xdb\x88\'\x9e^\xc03\x89z\xc1\xa7cH@\xf09\xb0\x1c!\x9e^\xc0E\xd7\x85\x1f\x9ccH@\x98\xd8|\\\x1b\x9e^\xc0\xbb\xb6\xb7[\x92cH@U\xfc\xdf\x11\x15\x9e^\xc08\x87k\xb5\x87cH@\x98\x1cwJ\x07\x9e^\xc0P\xa9\x12eocH@$\x9fW<\xf5\x9d^\xc0r\x8cd\x8fPcH@\xf9\x86\xc2g\xeb\x9d^\xc0b\xa0k_@cH@-\xf5,\x08\xe5\x9d^\xc0\xc8H\xf6\x085cH@\xb7&\xdd\x96\xc8\x9d^\xc0dw\x81\x92\x02cH@5|\x0b\xeb\xc6\x9d^\xc0\x06\xd7\xdc\xd1\xffbH@\xcf\x17{/\xbe\x9d^\xc0z\x95\xb5M\xf1bH@\xb3\xe8\x9d\n\xb8\x9d^\xc0\xe3.\xc2\x14\xe5bH@\xac>W[\xb1\x9d^\xc0p}Xo\xd4bH@%?\xe2W\xac\x9d^\xc0Bx\xb4q\xc4bH@\xc8\xd2\x87.\xa8\x9d^\xc0\x8c\x0b\x07B\xb2bH@\xa3C\xe0H\xa0\x9d^\xc0\xad\x11\xc18\xb8bH@\x87\xfa]\xd8\x9a\x9d^\xc09\x02\xb8Y\xbcbH@\x82T\x8a\x1d\x8d\x9d^\xc05\x96\xb06\xc6bH@\xbd\x83\x9f8\x80\x9d^\xc0\xef:\x1b\xf2\xcfbH@\xb0\xe5\x95\xebm\x9d^\xc0A~6r\xddbH@4,F]k\x9d^\xc0v\x8b\xc0X\xdfbH@\x93\x8f\xdd\x05J\x9d^\xc0\x93\xaa\xed&\xf8bH@D\x81>\x91\'\x9d^\xc0\xa9\xd8\x98\xd7\x11cH@\x03\x07\xb4t\x05\x9d^\xc0=((E+cH@&r\xc1\x19\xfc\x9c^\xc0i\xa8QH2cH@%\xb3z\x87\xdb\x9c^\xc0\x03\xe9b\xd3JcH@\xe6ypw\xd6\x9c^\xc0m7\xc17McH@\x9d\xf7\xffq\xc2\x9c^\xc0\x05n\xdd\xcdScH@\xb8W\xe6\xad\xba\x9c^\xc0\x86\xe4d\xe2VcH@_{fI\x80\x9c^\xc0\xa5\x9fpvkcH@\xf4\x19PoF\x9c^\xc0\xb4\xef\x8a\xe0\x7fcH@ts\xf1\xb7=\x9c^\xc0^\xf9,\xcf\x83cH@Nb\x10X9\x9c^\xc0\xd9\xb2|]\x86cH@\x10C\xab\x933\x9c^\xc0\xb9\xfd\xf2\xc9\x8acH@\xfd2\x18#\x12\x9c^\xc0\x03\xd1\x932\xa9cH@\'\xc0\xb0\xfc\xf9\x9b^\xc0o\xf5\x9c\xf4\xbecH@\xf6\xad\xd6\x89\xcb\x9b^\xc0\x95\x0fA\xd5\xe8cH@\xc6\xff\x1dQ\xa1\x9b^\xc0\xe1\x9b\xa6\xcf\x0edH@(\xa45\x06\x9d\x9b^\xc0\x9e\x10:\xe8\x12dH@\x8f9\xcf\xd8\x97\x9b^\xc0\xa6\xee\xca.\x18dH@\x03\x97\xc7\x9a\x91\x9b^\xc0\x97<\x9e\x96\x1fdH@.\x92v\xa3\x8f\x9b^\xc0w\xbb^\x9a""dH@^J]2\x8e\x9b^\xc0\xce\x9e\xcb\xd4$dH@\xd1?\xc1\xc5\x8a\x9b^\xc08\x85\x95\n*dH@\\]N\t\x88\x9b^\xc0\x95\xf1\xef3.dH@\x8e\xcb\xb8\xa9\x81\x9b^\xc0\x90\x85\xe8\x108dH@Y\x91\xd1\x01I\x9b^\xc0R\x82\xfeB\x8fdH@\xfb\xf0,AF\x9b^\xc0 b\x83\x85\x93dH@\x1f/\xa4\xc3C\x9b^\xc0Y\xf8\xfaZ\x97dH@\xbaf\xf2\xcd6\x9b^\xc0\x02\x83\xa4O\xabdH@\xa3b\x9c\xbf\t\x9b^\xc0%;6\x02\xf1dH@\xfc\xc7Bt\x08\x9b^\xc0\xca\xbb\xea\x01\xf3dH@\x1eM\xf5d\xfe\x9a^\xc0dw\x81\x92\x02eH@D\x8bl\xe7\xfb\x9a^\xc0\x80\xf4M\x9a\x06eH@\xc7\x83-v\xfb\x9a^\xc0g\x98\xdaR\x07eH@\xdaV\xb3\xce\xf8\x9a^\xc0X\xe6\xad\xba\x0eeH@\xd7O\xffY\xf3\x9a^\xc0${\x84\x9a!eH@~R\xed\xd3\xf1\x9a^\xc0.Y\x15\xe1&eH@\xb0\x8c\r\xdd\xec\x9a^\xc0\xf0\xa7\xc6K7eH@\x04\x1b\xd7\xbf\xeb\x9a^\xc0\x17\xd3L\xf7:eH@\x9b\x98.\xc4\xea\x9a^\xc0(\n\xf4\x89<eH@\xbc\x03<i\xe1\x9a^\xc0\xeb\x8c\xef\x8bKeH@&\xcd\x1f\xd3\xda\x9a^\xc0\xce\xc4t!VeH@V\x9f\xab\xad\xd8\x9a^\xc0\xfb\xe0|\xeaXeH@9\xcem\xc2\xbd\x9a^\xc0\x97r\xbe\xd8{eH@\x8a!9\x99\xb8\x9a^\xc0-\xa9\xdan\x82eH@\xe0K\xe1A\xb3\x9a^\xc0 B\\9{eH@]\xcbd8\x9e\x9a^\xc0\x13&\x8cfeeH@\x19W\\\x1c\x95\x9a^\xc0\xad\xdb\xa0\xf6[eH@Yd;\xdfO\x9a^\xc0\x98m\xa7\xad\x11eH@\x05\x00\xc7\x9e=\x9a^\xc0\x9f\xf0\x12\x9c\xfadH@\x07h[\xcd:\x9a^\xc09+\xa2&\xfadH@\x08\xb6J\xb08\x9a^\xc0\x16\xbdS\x01\xf7dH@P\x96Z\xef7\x9a^\xc0\xc0\r1^\xf3dH@\xbb\x80\x97\x196\x9a^\xc0\x87\xc2g\xeb\xe0dH@!zR&5\x9a^\xc0\xd1>V\xf0\xdbdH@\x92!\xc7\xd63\x9a^\xc0\xe5E&\xe0\xd7dH@:X\xff\xe70\x9a^\xc0\xda\xff\x00k\xd5dH@\xf0<\xf1\x9c-\x9a^\xc0\x1d#\xd9#\xd4dH@s5\xb2+-\x9a^\xc0\x00\n.V\xd4dH@\x86\x088\x84*\x9a^\xc0\n\x84\x9db\xd5dH@V\xd2\x8ao(\x9a^\xc0\xd4\xda4\xb6\xd7dH@\x11@j\x13\'\x9a^\xc0\x12.\xe4\x11\xdcdH@\x87\x8aq\xfe&\x9a^\xc0R\x81\x93m\xe0dH@\xea\x96\x1d\xe2\x1f\x9a^\xc0\xcd\x1d\xfd/\xd7dH@\x90\x15\xfc6\xc4\x99^\xc0\xc7\x8b\x85!rdH@K\xb7%r\xc1\x99^\xc0D\x15\xfe\x0codH@\xfa\xec\x80\xeb\x8a\x99^\xc0\xe8\xfa>\x1c$dH@ D2\xe4\xd8\x98^\xc0\x1d\xd0\xd2\x15lcH@\n\xf1H\xbc<\x98^\xc0\xb6\xd8\xed\xb3\xcabH@\x14\rR\xf0\x14\x98^\xc0\xcb7\xdb\xdc\x98bH@iUK:\xca\x97^\xc0S\xd4\x99{HbH@,\x9d\x0f\xcf\x12\x97^\xc0\x16Mg\'\x83aH@\xf2\x07\x03\xcf\xbd\x96^\xc0\x86p\xcc\xb2\'aH@\x0c\x04\x012t\x96^\xc0\x08\x1c\t4\xd8`H@\xca\x8f\xf8\x15k\x96^\xc0\xae\x7f\xd7g\xce`H@c\x9a\xe9^\'\x96^\xc0\xc3\xa4\xf8\xf8\x84`H@\xd9_vO\x1e\x96^\xc0}\xce\xdd\xae\x97`H@j\x9f\x8e\xc7\x0c\x96^\xc0\x0b\x03\x96\\\xc5`H@3\x8bPl\x05\x96^\xc0\x8e\xcaM\xd4\xd2`H@\xf2\x81\x1d\xff\x05\x96^\xc0\x19p\x96\x92\xe5`H@\x1a\xe1\xedA\x08\x96^\xc0R\xd2\xc3\xd0\xea`H@\x1a\xe1\xedA\x08\x96^\xc0\xd5\x1e
Query:
-- Query 3: Select ZIP codes and their geometries in Washington State
SELECT "zip_code", "zip_code_geom"
FROM "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES"
WHERE "state_fips_code" = '53'
LIMIT 100
Answer:
Too long, hard cut:
zip_code,zip_code_geom
98840,"bytearray(b'\x01\x03\x00\x00\x00\x02\x00\x00\x00F#\x00\x00\x1d\xb5P29\xfd]\xc0\x93/h!\x01GH@\xa56\xff\xaf:\xfd]\xc0~R\xed\xd3\xf1FH@g\xbe\x83\x9f8\xfd]\xc0\xf7\x01Hm\xe2FH@\xce\xe8G\xc3)\xfd]\xc0\xab*4\x10\xcbFH@U\xe5{F""\xfd]\xc0\x00\xa0\x8a\x1b\xb7FH@\x81\xd5\x1fa\x18\xfd]\xc0<0\x80\xf0\xa1FH@\xb1KTo\r\xfd]\xc0\x9b27\xdf\x88FH@A\xbbC\x8a\x01\xfd]\xc0_\xc6\x14\xacqFH@\xf9\xfc\xbe\x7f\xf3\xfc]\xc0\xdaE\x98\xa2\\FH@c.7\x18\xea\xfc]\xc0\x01~\x8d$AFH@~@.q\xe4\xfc]\xc0\xb0\x85 \x07%FH@\x03\xd5\xcd\xc5\xdf\xfc]\xc0\x89T\x18[\x08FH@\xe3u\xfd\x82\xdd\xfc]\xc0\x8eo\xef\x1a\xf4EH@\xd0\xfb\x8dv\xdc\xfc]\xc0\xb5\xb1\xd9\x91\xeaEH@\xfa\xc2\xf2\xe7\xdb\xfc]\xc0\xb0\x01\x11\xe2\xcaEH@\x9d\xfd\x81r\xdb\xfc]\xc0\x11U\xf83\xbcEH@\xc0\xed\t\x12\xdb\xfc]\xc0~&\xc2\x86\xa7EH@\xe8q\xa6\t\xdb\xfc]\xc0n\xd24(\x9aEH@!\xd1\x92\xc7\xd3\xfc]\xc0\xc0""\xbf~\x88EH@\xd0\xb9\xdb\xf5\xd2\xfc]\xc0\x19\xa2\n\x7f\x86EH@\x91\x80\xd1\xe5\xcd\xfc]\xc0\xcc\x1b\'\x85yEH@8tA}\xcb\xfc]\xc0\xf9\xb2\xb4SsEH@\x80TQ\xbc\xca\xfc]\xc0\xebb\x9a\xe9^EH@;\xa4\x18 \xd1\xfc]\xc07*7QKEH@\x95\x92\xac\xc3\xd1\xfc]\xc0@\xb7\x974FEH@-e\xa7\x1f\xd4\xfc]\xc0\xd8\xe71\xca3EH@\x1c\t4\xd8\xd4\xfc]\xc0!\xfc\x8b\xa01EH@\xa4p=\n\xd7\xfc]\xc0\x9a0a4+EH@t\xd2\xfb\xc6\xd7\xfc]\xc0\xb4\xc0\x1e\x13)EH@\x85\xfa$w\xd8\xfc]\xc0\xa6Y\xa0\xdd!EH@\x8b\xe0\x7f+\xd9\xfc]\xc0\xf7\xfaZ\x97\x1aEH@\x98\xc2\x83f\xd7\xfc]\xc0&.\xc7+\x10EH@\xaf\x0fy\xcb\xd5\xfc]\xc0\x15\xf7\x1f\x99\x0eEH@S\xb2\x9c\x84\xd2\xfc]\xc0$\rnk\x0bEH@\xc3d8\x9e\xcf\xfc]\xc0\xd8\x0b\x05l\x07EH@\x0c\xe9\xf0\x10\xc6\xfc]\xc0\xda\xdb-\xc9\x01EH@\x88/\xa1\x82\xc3\xfc]\xc0l\x9cMG\x00EH@\x95\xcf\xf2<\xb8\xfc]\xc0\xb0\xf7\xe2\x8b\xf6DH@;\xa9\xbd\x88\xb6\xfc]\xc0\xc0\xa9\x0f$\xefDH@]\'\xbc\x04\xa7\xfc]\xc0\xe1\xbc8\xf1\xd5DH@R\xd6o&\xa6\xfc]\xc0\x86\xd9\xcb\xb6\xd3DH@iy\x1e\xdc\x9d\xfc]\xc0\xf2\xed]\x83\xbeDH@y\xef6o\x9c\xfc]\xc06\x0b\xb4;\xa4DH@D\xc8\x07=\x9b\xfc]\xc0\x8d\xd1:\xaa\x9aDH@\x98V\xd1\x1f\x9a\xfc]\xc0\x8aL\xc0\xaf\x91DH@v\x9a\x93\x17\x99\xfc]\xc0\xd3\xf2\x03WyDH@TUh \x96\xfc]\xc0O\xa6\xd1\xe4bDH@\x95i\xc2\xf6\x93\xfc]\xc0\xd7\xd3\x0e\x7fMDH@\xb6a\x14\x04\x8f\xfc]\xc0\xf9;\xdb\xa37DH@\xb8\x95^\x9b\x8d\xfc]\xc0\xafn\xbc;2DH@\x8b\xe1\xea\x00\x88\xfc]\xc0\x869A\x9b\x1cDH@\x86I\x7f/\x85\xfc]\xc0\x13u\xe6\x1e\x12DH@wzl\xcb\x80\xfc]\xc0\x94\x15\xc3\xd5\x01DH@\x8bv\x15R~\xfc]\xc0\xe3\x823\xf8\xfbCH@\xc2\xac\xde\xe1v\xfc]\xc04\xd3\xbdN\xeaCH@\xd3\xbbx?n\xfc]\xc0\x01\x11\xe2\xca\xd9CH@r\xeb\xfc\xdbe\xfc]\xc0\xd4\x0b>\xcd\xc9CH@\xb4B\x1f,c\xfc]\xc0_\xab\x04\x8b\xc3CH@\x1f\x83\x15\xa7Z\xfc]\xc0\xf9\x0f\xe9\xb7\xafCH@D\xa7\xe7\xddX\xfc]\xc0[\xb4\x00m\xabCH@\xf1W\x8f\xfbV\xfc]\xc0\n\xf6_\xe7\xa6CH@<\xe3\xfb\xe2R\xfc]\xc0\xdeu6\xe4\x9fCH@\x1e\xef\x1c\xcaP\xfc]\xc0UBwI\x9cCH@awH1@\xfc]\xc0( \xed\x7f\x80CH@ w\x11\xa6(\xfc]\xc0\xe2m\xa5\xd7fCH@\xf4\xad\x9d(\t\xfc]\xc0\xad\xa1\xd4^DCH@\xec\x8a\x19\xe1\xed\xfb]\xc0H\xd6\xe1\xe8*CH@\x89D\xa1e\xdd\xfb]\xc0\x8b\xf37\xa1\x10CH@\xda\xfc\xbf\xea\xc8\xfb]\xc0N6\xe5\n\xefBH@\x8a!9\x99\xb8\xfb]\xc06\xe7\xe0\x99\xd0BH@\x8cJxB\xaf\xfb]\xc0\xf8Ft\xcf\xbaBH@\xad\xff\x01\xd6\xaa\xfb]\xc0iin\x85\xb0BH@+8J^\x9d\xfb]\xc0K\x16\xf7\x1f\x99BH@k\xa2]\x85\x94\xfb]\xc0qk\xd2m\x89BH@#\x8b\xc2.\x8a\xfb]\xc0C\xadi\xdeqBH@b\xfd\x9f\xc3|\xfb]\xc0\xa6\xd0y\x8d]BH@I6W\xcds\xfb]\xc0\xd3\xcf\x9b\x8aTBH@\xbcg\xeb\xe0`\xfb]\xc0\xc74\xd3\xbdNBH@5\xef8EG\xfb]\xc0\x93\xc3\'\x9dHBH@\x94\xe2qQ-\xfb]\xc0\x94_\x06cDBH@\x96\x80\x98\x84\x0b\xfb]\xc07\xbfa\xa2ABH@~\x1e\xa3<\xf3\xfa]\xc0\x83\x0by\x047BH@-\xbb`p\xcd\xfa]\xc0\x8d\xaf=\xb3$BH@. \xb4\x1e\xbe\xfa]\xc0\xad\x13\x97\xe3\x15BH@s\xf6\xceh\xab\xfa]\xc0\xdfJvl\x04BH@\x87\x1f*\x8d\x98\xfa]\xc0\xd5\x1b\xb5\xc2\xf4AH@\x8f\xb1\x13^\x82\xfa]\xc0\xf5\x96r\xbe\xd8AH@\x83\x17}\x05i\xfa]\xc0XiR\n\xbaAH@0\xdf\x88\xeeY\xfa]\xc0\x9c\xba\xf2Y\x9eAH@\xf3\n\xd2\x8cE\xfa]\xc0\xbb\x01f\xbe\x83AH@\x11\x7f\xdb\x13$\xfa]\xc0e\xde\xaa\xebPAH@\x0c\xb1\xfa#\x0c\xfa]\xc0\x8a\x16\xa0m5AH@\xe4Y\x10\xca\xfb\xf9]\xc0\xc3>\x01\x14#AH@3\x0e\xbcZ\xee\xf9]\xc0\x1b\xe8\xa1\xb6\rAH@\xbek\xd0\x97\xde\xf9]\xc0\xf1\x16HP\xfc@H@\xbf\xdbJ\xaf\xcd\xf9]\xc0\xc7\xce\xdb\xd8\xec@H@J9_\xec\xbd\xf9]\xc0\xa2""N\'\xd9@H@D\x02\xd4\xd4\xb2\xf9]\xc0\x01\xbdp\xe7\xc2@H@\xf6\xdf\x11\x15\xaa\xf9]\xc0\xb7:\x00\xe2\xae@H@\xe9K\xfd\xbc\xa9\xf9]\xc00\x9f\xac\x18\xae@H@\xacz\x87\xdb\xa1\xf9]\xc0m\x84EE\x9c@H@\x81\t\xdc\xba\x9b\xf9]\xc0\xe7\xcf~\xa4\x88@H@\xd1(]\xfa\x97\xf9]\xc0\x8d\xae\xd2\xddu@H@8\xa4Q\x81\x93\xf9]\xc0H\x19q\x01h@H@|c\x08\x00\x8e\xf9]\xc0\xd9$?\xe2W@H@m\xb9\xc1P\x87\xf9]\xc0\x89I\xb8\x90G@H@1\x11o\x9d\x7f\xf9]\xc0U\xefp;4@H@\nsI\xd5v\xf9]\xc0D3O\xae)@H@\x88R{\x11m\xf9]\xc0\x06|~\x18!@H@\xe1\xda\x17\xd0\x0b\xf9]\xc0W\x8c\xba\xd6\xde?H@\xfd\x1c\x1f-\xce\xf8]\xc0F\xd0\x98I\xd4?H@\x07_\x98L\x15\xf8]\xc0\xdd\x17\x97\xaa\xb4?H@\x04_\xd1\xad\xd7\xf7]\xc0\x9d\xd7\xd8%\xaa?H@DQ\xa0O\xe4\xf7]\xc0\x87c]\xdcF?H@C%<\xa1\xd7\xf7]\xc0\xab\xe2\x8d\xcc#?H@\x91qS\x03\xcd\xf7]\xc0\xe6l\x01\xa1\xf5>H@\xf0\x1d5&\xc4\xf7]\xc0\x15\xf8\x8an\xbd>H@V\xdd#\x9b\xab\xf7]\xc0\xb4 \x94\xf7q>H@!CUL\xa5\xf7]\xc0{\
Query:
-- Query 4: Find ZIP codes within a 5-mile radius of the specified point
SELECT "zip_code", "zip_code_geom"
FROM "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES"
WHERE ST_Distance(
  ST_GeogFromWKB("zip_code_geom"),
  ST_GeographyFromText('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
LIMIT 100
Answer:
Too long, hard cut:
zip_code,zip_code_geom
98028,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\xb4\x01\x00\x00\xe1g\xeau\x8b\x91^\xc0\xd5n\xbb\xd0\\\xdfG@\xcd\r\x86:\xac\x91^\xc0:\x19\x1c%\xaf\xdeG@\xbfOU\xa1\x81\x91^\xc0\xbc?\xde\xabV\xdeG@\xb7\xbe\xd6\xa5F\x91^\xc0t\xab\xe7\xa4\xf7\xddG@l\x80`\x8e\x1e\x91^\xc0&\xdaUH\xf9\xddG@\xca\xaf\xad\x9f\xfe\x90^\xc0\xb42\xe1\x97\xfa\xddG@A\x9e]\xbe\xf5\x90^\xc07\x11\xfd\xda\xfa\xddG@f\xe7\xfb\xa9\xf1\x90^\xc0uCSv\xfa\xddG@\x1dN\'\xd9\xea\x90^\xc0\xfb\x12\xf1\xd6\xf9\xddG@\xb6\x1a\xa04\xd4\x90^\xc0D\'K\xad\xf7\xddG@\x9egz\x89\xb1\x90^\xc0\x12N\x0b^\xf4\xddG@\x9egz\x89\xb1\x90^\xc0\xae\x81\xad\x12,\xdeG@\xb8\xa1\xf0\xd9:\x90^\xc0xt#,*\xdeG@\xef\xfc\xa2\x04\xfd\x8f^\xc0\r\xf2z0)\xdeG@t\x9f\xaaB\x03\x90^\xc0#,*\xe2t\xdeG@<T\xe1\xcf\xf0\x8f^\xc0p\xedDIH\xdeG@\x9e\xd3,\xd0\xee\x8f^\xc0\xca\xd4$xC\xdeG@\x86Z\xd3\xbc\xe3\x8f^\xc0\xeb\x1b\x98\xdc(\xdeG@\xc8}\xabu\xe2\x8f^\xc0;!t\xd0%\xdeG@\xa64)\x05\xdd\x8f^\xc0\xad\xab\x02\xb5\x18\xdeG@\xc1\x89\xe8\xd7\xd6\x8f^\xc0\x19\xad\xa3\xaa\t\xdeG@x/\x85\x07\xcd\x8f^\xc0\xb8j\x9e#\xf2\xddG@Yl\x93\x8a\xc6\x8f^\xc0\xc0\xa6\xce\xa3\xe2\xddG@\xac\xeb\xde\x8a\xc4\x8f^\xc0\xed\t\x12\xdb\xdd\xddG@\xa5\x1c\xcc&\xc0\x8f^\xc0\xec\xb8\xe1w\xd3\xddG@\x1a\x9b\x1d\xa9\xbe\x8f^\xc0\xd6\xf8L\xf6\xcf\xddG@s\xc5\xc5Q\xb9\x8f^\xc0=\xd5!7\xc3\xddG@J\x9a?\xa6\xb5\x8f^\xc0d\x17\x0c\xae\xb9\xddG@\x07\xb6\xd8\xed\xb3\x8f^\xc0\xcc\xac\xa5\x80\xb4\xddG@\xb5u\xfe\xed\xb2\x8f^\xc0Fy\xe6\xe5\xb0\xddG@\x86%\xac\x8d\xb1\x8f^\xc0\xa1\x94\x10\xac\xaa\xddG@\x1c\xa0\xc2\x11\xa4\x8f^\xc0j\xb7]h\xae\xddG@\x18H\xde9\x94\x8f^\xc0\xda\x8e\xa9\xbb\xb2\xddG@\xe5\xa2\xe8\x81\x8f\x8f^\xc0s\x95\xee\xae\xb3\xddG@k,am\x8c\x8f^\xc0\xf6s\n\xf2\xb3\xddG@X\xe6;\xf8\x89\x8f^\xc0\xf6s\n\xf2\xb3\xddG@&\xce\x8a\xa8\x89\x8f^\xc0\xc7\xbb#c\xb5\xddG@\x92\x06\xb7\xb5\x85\x8f^\xc0V\xcdsD\xbe\xddG@\xb7\x01f\xbe\x83\x8f^\xc0kY\xbe.\xc3\xddG@BH\x160\x81\x8f^\xc0\xe4B\xe5_\xcb\xddG@\xe7\x07<0\x80\x8f^\xc0l\xaa\xee\x91\xcd\xddG@\xa6[v\x88\x7f\x8f^\xc0;\xf2\x07\x03\xcf\xddG@\x89g\x97o}\x8f^\xc0\xf2\xa9c\x95\xd2\xddG@\xbbbFx{\x8f^\xc0nc\xb3#\xd5\xddG@&M\x83\xa2y\x8f^\xc0\xa5p=\n\xd7\xddG@\x9e\xbcVBw\x8f^\xc0H\xf1\xf1\t\xd9\xddG@!\xe9ahu\x8f^\xc0\x06\xce\x19Q\xda\xddG@\xe3<\x9c\xc0t\x8f^\xc0\xfa\x1f`\xad\xda\xddG@\xb8\x9a\x03\x04s\x8f^\xc0\x94&\xa5\xa0\xdb\xddG@\xb5\x93O\x8fm\x8f^\xc0\xb2\xd7\xbb?\xde\xddG@\xc5\xd2\xc0\x8fj\x8f^\xc0\xee\xd5\xc7C\xdf\xddG@\xb4\x03\xae+f\x8f^\xc0\x98G\xfe`\xe0\xddG@\xdf\t\x84\x9db\x8f^\xc0\xf7O7P\xe0\xddG@\xe7\xd4\\n0\x8f^\xc0-\xc5Ue\xdf\xddG@Yy\x90\x9e""\x8f^\xc0\x1bZd;\xdf\xddG@\xeaB\xac\xfe\x08\x8f^\xc0\xf8\x83\x81\xe7\xde\xddG@\xc0""M\xbc\x03\x8f^\xc0X\x8c\xba\xd6\xde\xddG@f\xc5pu\x00\x8f^\xc0\xc8\xff\xe4\xef\xde\xddG@\xcd\x8eT\xdf\xf9\x8e^\xc0\xdaj\xd6\x19\xdf\xddG@\x02K\xaeb\xf1\x8e^\xc0\x0c\xefr\x11\xdf\xddG@\xbf\xa2[\xaf\xe9\x8e^\xc0\x88\x10W\xce\xde\xddG@\x9f\xe7O\x1b\xd5\x8e^\xc0\xdc\x9e \xb1\xdd\xddG@15\xd0|\xce\x8e^\xc0\x98\xaf\x92\x8f\xdd\xddG@\xe6\xb7\xe8d\xa9\x8e^\xc0\x83\x87i\xdf\xdc\xddG@@V~\x19\x8c\x8e^\xc05\x1el\xb1\xdb\xddG@e\x0c:!t\x8e^\xc0\xdc\x06\xb5\xdf\xda\xddG@\x1bb\xbc\xe6U\x8e^\xc0B\x00p\xec\xd9\xddG@\x0e\xd9\xce\xf7S\x8e^\xc0q\x84\x0c\xe4\xd9\xddG@\x8d\x11\x17\x80F\x8e^\xc0M\xae)\x90\xd9\xddG@\x11rl=C\x8e^\xc0\xdc:\xffv\xd9\xddG@\xf6\xda\xfa\xe9?\x8e^\xc0=C8f\xd9\xddG@\'\\Va3\x8e^\xc0\xe9\xe8\xb8\x1a\xd9\xddG@\xca\xca/\x831\x8e^\xc0H\xf1\xf1\t\xd9\xddG@\xd7\x9at[""\x8e^\xc0\xf5\x96r\xbe\xd8\xddG@5x_\x95\x0b\x8e^\xc0\x01E,b\xd8\xddG@\xaf^EF\x07\x8e^\xc0aMeQ\xd8\xddG@\x94\xfb\x1d\x8a\x02\x8e^\xc0\x90\xd1\x01I\xd8\xddG@X\x17\xb7\xd1\x00\x8e^\xc0\x90\xd1\x01I\xd8\xddG@\xf9(#.\x00\x8e^\xc0\xe3+\x81\x94\xd8\xddG@\x17B\xce\xfb\xff\x8d^\xc0\xf5\x96r\xbe\xd8\xddG@\xb4|]\x86\xff\x8d^\xc0\x1amU\x12\xd9\xddG@\xfe\xf0\x81\x1d\xff\x8d^\xc0\x8e\x9d\xb7\xb1\xd9\xddG@\xb2m\xdf\xa3\xfe\x8d^\xc0\xa7\xc5\xe0a\xda\xddG@\xaf\xd9\xcaK\xfe\x8d^\xc0T7\x17\x7f\xdb\xddG@M\xa8n.\xfe\x8d^\xc0p\x1cx\xb5\xdc\xddG@~U.T\xfe\x8d^\xc0a\xbb{\x80\xee\xddG@$\xfb\xae\x08\xfe\x8d^\xc0\x00\x7f\xf8\xf9\xef\xddG@xo\xd3\x9f\xfd\x8d^\xc0\xbf[ A\xf1\xddG@$/\xf9\x9f\xfc\x8d^\xc0#\xedF\x1f\xf3\xddG@\xb3\xef\x18\x1e\xfb\x8d^\xc0\xd5\x1b\xb5\xc2\xf4\xddG@\xb3\xbb\xce\x86\xfc\x8d^\xc0K\x18\xcd\xca\xf6\xddG@\xdb\xe6T2\x00\x8e^\xc0\x0c\x16N\xd2\xfc\xddG@""\x93\x1a\xda\x00\x8e^\xc0\x9bn\xd9!\xfe\xddG@S\xf2\xea\x1c\x03\x8e^\xc0\xeb,z\xa7\x02\xdeG@:\x96w\xd5\x03\x8e^\xc0\xbct\x93\x18\x04\xdeG@\xa4\xe4\xd59\x06\x8e^\xc0\xf4\xd6\xc0V\t\xdeG@~\xc6\x85\x03!\x8e^\xc0\xa7\xca\xf7\x8cD\xdeG@\x128\xa0\xa5+\x8e^\xc0S\xaaD\xd9[\xdeG@\x1dgaO;\x8e^\xc0\xa2\xd2\x88\x99}\xdeG@\x93\xa6A\xd1<\x8e^\xc0b8\x9e\xcf\x80\xdeG@\xae\xac\xfb\xc7B\x8e^\xc0\x9dS\x90\x9f\x8d\xdeG@\x9c\xe5\xb2\xd19\x8e^\xc0\xe3vhX\x8c\xdeG@>yX\xa85\x8e^\xc0.\x14\xb0\x1d\x8c\xdeG@\xab\xb9j\x9e#\x8e^\xc0\xf9\x9e\x91\x08\x8d\xdeG@\xf9Sq\xe3\x16\x8e^\xc0\xb0\xf2\xcb`\x8c\xdeG@\xc7\xee\x02%\x05\x8e^\xc0d\x89\xce2\x8b\xdeG@-\r\x8a\xe6\x01\x8e^\xc0\x82\xa2y\x00\x8b\xdeG@\x16\x97qS\x03\x8e^\xc0\xbe1\x04\x00\xc7\xdeG@-\xe8\xbd1\x04\x8e^\xc0\x07\xbei\xfa\xec\xdeG@d)
Query:
-- Query 5: Get census tracts that intersect with ZIP codes
SELECT t."geo_id", t."total_pop", t."income_per_capita", z."zip_code"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
LIMIT 100
Answer:
geo_id,total_pop,income_per_capita,zip_code
53007961301,1422.0,46227.0,98801
53007961301,1422.0,46227.0,98815
53061052206,4797.0,42502.0,98290
53061052206,4797.0,42502.0,98272
53061052904,5825.0,32738.0,98270
53007960700,3838.0,42582.0,98801
53007960700,3838.0,42582.0,98843
53007960700,3838.0,42582.0,98815
53007960700,3838.0,42582.0,98822
53007960700,3838.0,42582.0,98802
53007960700,3838.0,42582.0,98826
53007960801,2637.0,38102.0,98801
53007960801,2637.0,38102.0,98815
53007960801,2637.0,38102.0,98836
53071920300,8624.0,23404.0,99324
53013960200,3999.0,28950.0,99361
53027001600,6861.0,16734.0,98537
53061041202,5961.0,24299.0,98203
53061041202,5961.0,24299.0,98204
53061041202,5961.0,24299.0,98208
53061040400,4416.0,28929.0,98201
53061040400,4416.0,28929.0,98207
53063010504,3443.0,30427.0,99005
53009000600,3549.0,30623.0,98362
53075000600,7712.0,12979.0,83843
53075000600,7712.0,12979.0,99164
53075000600,7712.0,12979.0,99161
53075000600,7712.0,12979.0,99163
53017950600,4105.0,31582.0,98802
53009001000,2513.0,22593.0,98362
53049950300,3557.0,21734.0,98537
53063010202,7082.0,38428.0,99003
53063010202,7082.0,38428.0,99005
53009940000,1576.0,17135.0,98381
53007960600,4364.0,22281.0,98815
53007960600,4364.0,22281.0,98836
53017950800,5538.0,22546.0,98801
53017950800,5538.0,22546.0,98802
53009001100,3363.0,25722.0,98362
53009001100,3363.0,25722.0,98363
53033032003,5273.0,44848.0,98065
53033032003,5273.0,44848.0,98051
53033032003,5273.0,44848.0,98045
53033032003,5273.0,44848.0,98038
53033032003,5273.0,44848.0,98027
53033005100,3678.0,60534.0,98103
53033005100,3678.0,60534.0,98105
53033011001,4697.0,19228.0,98118
53033011001,4697.0,19228.0,98108
53033028403,5362.0,23449.0,98188
53033028403,5362.0,23449.0,98158
53033011800,8415.0,22407.0,98178
53033011800,8415.0,22407.0,98040
53033011800,8415.0,22407.0,98118
53009000200,969.0,26557.0,98381
53009000200,969.0,26557.0,98305
53031950702,2129.0,21598.0,98362
53009001200,3560.0,31533.0,98362
53027001600,6861.0,16734.0,98595
53027001600,6861.0,16734.0,98569
53073000600,1933.0,21943.0,98225
53073001000,7827.0,11882.0,98225
53073001000,7827.0,11882.0,98229
53073000902,5739.0,34354.0,98225
53073000902,5739.0,34354.0,98229
53073011000,1251.0,44310.0,98281
53033008300,3087.0,55769.0,98101
53033008300,3087.0,55769.0,98104
53033008300,3087.0,55769.0,98122
53033031705,4133.0,41120.0,98042
53033031705,4133.0,41120.0,98038
53033009500,6614.0,61543.0,98040
53033009500,6614.0,61543.0,98118
53033009500,6614.0,61543.0,98144
53033009500,6614.0,61543.0,98108
53033029101,3288.0,35191.0,98198
53033029101,3288.0,35191.0,98032
53017950500,2929.0,21761.0,98801
53017950500,2929.0,21761.0,98802
53053060200,1944.0,41530.0,98403
53053060200,1944.0,41530.0,98402
53011040603,4902.0,39544.0,98671
53011040603,4902.0,39544.0,98682
53011040603,4902.0,39544.0,98607
53011040603,4902.0,39544.0,98606
53011041319,5671.0,36174.0,98682
53011041319,5671.0,36174.0,98684
53011042400,2282.0,28183.0,98660
53011042400,2282.0,28183.0,98661
53011042400,2282.0,28183.0,97217
53011041313,2573.0,19807.0,98664
53011041313,2573.0,19807.0,98682
53011041313,2573.0,19807.0,98684
53011041313,2573.0,19807.0,98662
53011042900,1678.0,30233.0,98664
53011042900,1678.0,30233.0,98661
53009000800,4240.0,22174.0,98362
53009000800,4240.0,22174.0,98363
53061052905,4454.0,21319.0,98270
53053062600,3192.0,23878.0,98418
Query:
-- Query 6: Calculate the area of each census tract
SELECT "geo_id", ST_Area(ST_GeogFromWKB("tract_geom")) AS "tract_area"
FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
LIMIT 100
Answer:
geo_id,tract_area
53073000100,86860035.14057848
53033000100,2805191.7028481667
53073000200,46599484.724073745
53009000200,958388505.9852598
53027000200,416934645.07405746
53009000300,59320224.36387499
53073000300,7710833.632583775
53027000300,1467642481.4553044
53077000300,5150108.210551866
53015000300,36047313.74103112
53009000400,1064300759.9197084
53027000400,656417416.0567834
53073000400,5117672.10351192
53015000400,2312533.359231852
53027000500,136838086.48318827
53033000500,3838287.801653455
53073000600,1230155.3054265236
53009000600,1087353545.0315158
53027000600,99260936.01966313
53033000600,3826996.914101569
53009000700,12467339.648824628
53027000700,981643008.5524127
53075000700,900655132.8976487
53027000800,90397985.05807999
53015000800,16113381.59036376
53075000800,353883179.646604
53033000900,2850684.30129945
53027000900,27128974.285891872
53015000900,13912539.613051714
53075000900,2060066111.5954754
53063001000,3880304.048878296
53027001000,6821684.7890144475
53015001000,834988.0645067701
53075001000,1817563331.4108756
53009001100,11041633.195643358
53073001100,71322151.3381947
53027001100,5867144.144592322
53015001100,7125251.049682994
53027001200,4894932.4936579205
53027001300,46718884.60383487
53015001300,10132252.612395592
53009001400,92312587.85506314
53027001400,29891293.007078953
53033001400,2342023.273015243
53009001500,510702251.17541295
53027001500,83214987.16699222
53033001500,1564498.0377936005
53027001600,374576803.91129524
53033001600,2491611.313250001
53015001600,111119439.39857772
53015001700,392968771.91171956
53063001800,1664112.5922729345
53077001800,246354190.530048
53015001800,1152417487.626642
53015001900,300143638.9288702
53033002000,1128773.1693499293
53015002100,3892761.3400996304
53033002200,3926964.5765948365
53063002300,2736206.0871702833
53009002300,289072266.43551224
53063002400,2159473.8488627975
53063002500,3261056.9881031658
53063002600,2073406.0770134646
53033002600,1241250.0880574842
53077002900,212535097.39527172
53077003100,66381565.47326113
53033003100,2690683.4741704315
53033003200,3479942.8997603883
53077003200,10919498.339729652
53077003400,27621622.363374803
53063003500,1730864.7841931852
53063003600,4773213.095426451
53063003900,8997211.815685108
53033004000,6102879.407436935
53033004100,8557334.818052491
53063004500,2616993.136385287
53033004600,2578227.425082556
53033004700,2297447.975036044
53033004800,1356254.0600354664
53033004900,1107990.786542499
53033005200,1047324.6234551504
53033005400,1841121.8825275567
53033005600,4607096.762107438
53033005700,7384396.879196069
53033005900,1974002.953738381
53033006000,1495253.4340616358
53033006100,1882420.487408728
53033006200,3008382.312929712
53033006300,5773755.452909548
53033006600,1932809.2479246543
53033006700,1376696.5367987235
53033007800,5728114.850159613
53033008100,1193112.2753541346
53033008900,3059414.7998405853
53033009200,483731.0496308337
53033009300,10120384.463243905
53033009500,5496745.861165506
53033009600,3281567.6089125434
53033009900,8827873.91950438
53067010100,4990846.395263933
Query:
-- Query 7: Determine the overlapping area between tracts and ZIP codes
SELECT t."geo_id", z."zip_code",
  ST_Area(
    ST_Intersection(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
  ) AS "overlap_area"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
LIMIT 100
Answer:
geo_id,zip_code,overlap_area
53061052904,98270,3497090.7523977626
53061041202,98208,0.0
53061041202,98203,2687121.496459572
53065950300,99114,5169907.631156744
53061041202,98204,0.0
53061040400,98201,2073657.757391422
53061040400,98207,417176.1709671403
53061051500,98036,3086461.155634989
53061051500,98037,76394.93529639373
53061051500,98026,106401.45835740399
53061053101,98292,4672529.885218615
53061053101,98223,21437368.993760023
53061053101,98271,1217211.382808342
53053073122,98374,3687830.467765509
53053073122,98375,1330709.127496734
53007961301,98815,0.0
53007961301,98801,16665199.59271943
53053071307,98446,
53053071307,98373,5204310.6675025765
53053071206,98371,103089.94699758594
53053071206,98446,
53053071206,98374,0.0
53053071206,98373,7766031.7625624975
53007960700,98815,0.0
53007960700,98822,10828.35411332895
53075000600,83843,0.0
53075000600,99164,186690.24122254978
53075000600,99161,0.0
53075000600,99163,83642818.45840482
53009000600,98362,0.0
53009001000,98362,1778044.9466582672
53075000300,99111,13828669.252445411
53075000300,99163,144221143.73067492
53009001100,98363,0.0
53021020502,99336,0.0
53005010100,99352,5188684.028231692
53077001300,98902,
53005010100,99301,0.0
53021020502,99301,12835829.764602065
53005010100,99354,5290942.310576022
53005010100,98944,
53005011001,99336,5717435.828581166
53005010201,99352,0.0
53007960700,98843,0.0
53005010201,99354,30913000.339441456
53005010201,99353,13565159.294300798
53009001100,98362,11041633.195547337
53005010201,98944,
53007960700,98801,143193919.58578694
53077001901,98930,5249841.493364445
53031950702,98362,5.307429003454737
53005010400,99352,637232.639539936
53007960700,98802,0.0
53005010400,99354,861216.4484847154
53009001200,98362,6606837.373179624
53005010807,99352,7134109.107020312
53005010807,99338,0.0
53009000800,98363,3135844.3895853143
53005010807,99350,0.0
53007960700,98826,0.0
53009000800,98362,2130.3165866698105
53005010807,99320,89481037.62800898
53005010807,99353,612875.5858692062
53009001300,98362,9956245.999822862
53007960801,98815,0.0
53007960801,98801,25152155.210417975
53075000300,99113,3472143.6039304333
53007960801,98836,0.0
53009000700,98363,12443865.72978625
53017950600,98802,5909319.589205324
53009000700,98362,0.0
53075000800,99111,353883179.64107686
53007960600,98815,7508187.313981841
53007960600,98836,1977942.1074600206
53049950800,98641,106242.74133649995
53009001800,98362,41505722.6417735
53075000800,99143,0.0
53017950800,98801,1.0051112041607106
53009001400,98362,92312587.82349622
53073010401,98230,58229533.67865574
53017950800,98802,6520732.657396412
53073010401,98248,0.0
53073010401,98240,25820078.974950004
53061052004,98012,3316173.706867042
53075000800,99130,0.0
53061052004,98208,
53073010401,98264,0.48011983669013514
53061052906,98270,2411863.512716527
53073000600,98225,1230155.3054265236
53073001000,98225,2473922.5036860625
53009001600,98382,9165624.31189604
53073001000,98229,0.1549993647297867
53061052607,98205,3876906.988786885
53005011001,99301,0.0
53053070100,98323,638460624.0850799
53073000902,98225,150730.660482243
53075000800,99171,
53073000902,98229,16851134.063043177
53073011000,98281,16987518.248248868
53061052607,98290,4394136.33425401
Query:
-- Query 8: Aggregate total population by ZIP code
SELECT z."zip_code", SUM(t."total_pop") AS "total_population"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
GROUP BY z."zip_code"
LIMIT 100
Answer:
zip_code,total_population
98547,13321.0
99224,80802.0
98092,133780.0
98264,52997.0
98261,10740.0
83822,8424.0
98363,29603.0
99022,34832.0
98862,30667.0
98929,4037.0
98402,28666.0
98443,41597.0
98416,7156.0
98635,21172.0
98947,14095.0
98933,9984.0
99402,11354.0
98174,4872.0
98833,17087.0
99203,45782.0
99006,34305.0
98843,21418.0
98409,86050.0
98817,12530.0
98330,10285.0
98245,8411.0
98524,29098.0
98052,118468.0
98047,44962.0
99149,3895.0
98645,8667.0
98026,109295.0
98826,35402.0
98586,17224.0
98937,35820.0
99156,24993.0
98329,44910.0
97050,13270.0
99039,2733.0
99012,2733.0
98235,1889.0
98102,65567.0
98372,72573.0
98075,67875.0
97835,10253.0
98336,9762.0
98664,54737.0
99036,25939.0
98648,11498.0
98257,15482.0
99137,8694.0
98321,59557.0
98225,88511.0
98563,38630.0
99181,11332.0
98382,39848.0
98644,3716.0
98860,6926.0
98923,10798.0
98939,6523.0
98375,85118.0
98675,29967.0
99123,15906.0
99356,9533.0
98526,6321.0
98611,37598.0
99116,17477.0
99130,7099.0
98345,11035.0
97211,8966.0
98031,94552.0
98155,100677.0
98587,8669.0
98388,42231.0
98620,13270.0
98516,67997.0
98359,30889.0
99152,2205.0
98934,4531.0
98948,47844.0
98003,107293.0
98230,34587.0
99126,10424.0
98856,16034.0
98467,68738.0
99352,118546.0
98834,11653.0
99009,19743.0
98503,80608.0
98642,55844.0
98665,78162.0
98560,12096.0
98325,18868.0
98195,14449.0
97844,886.0
99333,9415.0
98374,103747.0
98445,87696.0
98433,56825.0
98223,108170.0
Query:
-- Query 9: Compute average income per capita for each ZIP code
SELECT z."zip_code", AVG(t."income_per_capita") AS "average_income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_Intersects(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
GROUP BY z."zip_code"
LIMIT 100
Answer:
zip_code,average_income
98942,28862.88888888889
97846,35301.0
98628,23217.5
97231,29982.666666666668
99160,23405.0
98547,19703.333333333332
98264,28528.125
99224,33369.294117647056
98261,40978.0
83822,25181.666666666668
98092,34606.0
98315,36167.25
98951,18631.0
98685,36726.72727272727
98239,36947.666666666664
98154,70828.0
99218,28684.75
99006,27863.714285714286
98645,25026.0
98843,28215.6
98052,57338.76190476191
98047,30983.0
98409,25244.78947368421
98817,24869.0
98524,32204.6
98330,26363.0
99149,25595.0
98245,39862.0
98372,33830.13333333333
98336,22395.333333333332
98664,30120.30769230769
98648,27941.2
98075,60777.6
97835,32787.5
99036,39950.6
98026,40411.71428571428
98937,28716.0
98826,33611.0
98586,22738.0
99156,27643.714285714286
98329,37329.625
98102,62156.0
97050,23217.5
98235,29510.0
99039,27264.0
99012,27264.0
99114,26158.0
98836,29003.0
99129,21255.4
99350,27362.11111111111
83858,31872.0
98027,53379.42105263158
99027,32827.8
98363,25593.9
99022,24629.714285714286
98929,29225.0
98443,28731.0
98862,25819.571428571428
98402,30112.444444444445
98416,36213.0
98635,25348.333333333332
98833,25829.25
98947,27723.666666666668
99402,31140.666666666668
98174,70828.0
98933,17912.0
99203,38956.181818181816
98952,17912.0
98932,18372.2
83855,31324.0
98439,23800.555555555555
98444,21768.9375
98576,27528.11111111111
98589,28901.4
98199,60376.0
98255,27112.0
98108,31816.833333333332
98571,20304.5
98284,30626.25
98381,21846.0
83872,31324.0
98624,26872.666666666668
98544,28860.0
98201,31741.416666666668
98407,41043.4
98053,62431.8
98388,33689.555555555555
98948,16416.625
98516,33692.416666666664
98359,41017.71428571428
99152,30841.0
98934,29212.0
98620,23217.5
98230,30858.8
98003,30293.0
99126,26883.5
98568,28711.5
98577,22944.285714285714
98012,40383.434782608696
98638,27250.666666666668
Query:
SELECT z."zip_code",
  SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")) AS "weighted_population",
  ROUND(AVG(t."income_per_capita"), 1) AS "average_income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    TO_GEOGRAPHY(g."tract_geom"),
    TO_GEOGRAPHY(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        TO_GEOGRAPHY(g."tract_geom"),
        TO_GEOGRAPHY(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      TO_GEOGRAPHY(g."tract_geom"),
      TO_GEOGRAPHY(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  TO_GEOGRAPHY(z."zip_code_geom"),
  TO_GEOGRAPHY('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "average_income" DESC
LIMIT 100;
Answer:
zip_code,weighted_population,average_income
98039,3268.616292848105,85829.7
98004,31982.414251456874,78706.5
98112,23982.388364522998,75368.2
98033,40114.68213223674,65541.9
98053,27259.044530673476,62431.8
98052,62539.80077075842,57338.8
98105,46512.45568717428,57017.1
98115,51494.331146822915,56185.1
98034,38236.858911436175,54120.7
98008,25773.084418435705,53738.1
98005,23239.678162917087,53685.3
98072,28447.252494415243,52644.7
98028,21746.92540962845,49984.2
98007,24076.853903543582,49464.1
98011,32882.044190065375,46576.4
98125,39881.68613751872,46287.7
98155,34698.82837184475,41681.6
End Exploring Related Columns
Task: Using the 2017 U.S. Census Tract data from the BigQuery public datasets, you need to proportionally allocate each tract's population and income to the zip codes based on the overlapping area between their geographic boundaries. Then, filter the results to include only those zip codes located within a 5-mile radius of a specific point in Washington State, with coordinates at latitude 47.685833°N and longitude -122.191667°W. Finally, calculate the total population and the average individual income for each zip code (rounded to one decimal place) and sort the results by the average individual income in descending order.

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
Zip_Code,Total_Population,Average_Individual_Income
zipcode1:str,total_population1:int,average_income1:float
zipcode2:str,total_population2:int,average_income2:float
...
```

To address the task, we first proportionally allocated the population and income from each 2017 U.S. Census Tract to overlapping zip codes based on the area of overlap between their geographic boundaries. Next, we filtered the zip codes to include only those within a 5-mile radius of the specified point in Washington State (latitude 47.685833°N, longitude -122.191667°W). Finally, we calculated the total population and the average individual income for each zip code, rounded to one decimal place, and sorted the results in descending order of average individual income..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'CENSUS_BUREAU_ACS_1': {'CENSUS_BUREAU_ACS': ['BLOCKGROUP_2014_5YR', 'BLOCKGROUP_2014_5YR', 'BLOCKGROUP_2016_5YR', 'BLOCKGROUP_2017_5YR', 'BLOCKGROUP_2018_5YR', 'BLOCKGROUP_2011_5YR', 'BLOCKGROUP_2012_5YR', 'BLOCKGROUP_2013_5YR', 'BLOCKGROUP_2015_5YR', 'BLOCKGROUP_2010_5YR', 'CBSA_2007_1YR', 'CBSA_2007_1YR', 'CBSA_2010_1YR', 'CBSA_2010_3YR', 'CBSA_2011_5YR', 'CBSA_2015_5YR', 'CBSA_2014_5YR', 'CBSA_2017_5YR', 'CBSA_2011_3YR', 'CBSA_2012_5YR', 'CBSA_2013_3YR', 'CBSA_2009_1YR', 'CBSA_2016_5YR', 'CBSA_2018_5YR', 'CBSA_2017_1YR', 'CBSA_2021_1YR', 'CBSA_2012_3YR', 'CBSA_2009_3YR', 'CBSA_2011_1YR', 'CBSA_2012_1YR', 'CBSA_2013_1YR', 'CBSA_2020_5YR', 'CBSA_2013_5YR', 'CBSA_2019_1YR', 'CBSA_2008_3YR', 'CBSA_2019_5YR', 'CBSA_2007_3YR', 'CBSA_2008_1YR', 'CBSA_2014_1YR', 'CBSA_2015_1YR', 'CBSA_2010_5YR', 'CBSA_2016_1YR', 'CBSA_2018_1YR', 'CENSUSTRACT_2011_5YR', 'CENSUSTRACT_2011_5YR', 'CENSUSTRACT_2016_5YR', 'CENSUSTRACT_2014_5YR', 'CENSUSTRACT_2010_5YR', 'CENSUSTRACT_2017_5YR', 'CENSUSTRACT_2019_5YR', 'CENSUSTRACT_2018_5YR', 'CENSUSTRACT_2013_5YR', 'CENSUSTRACT_2015_5YR', 'CENSUSTRACT_2012_5YR', 'CENSUSTRACT_2020_5YR', 'CONGRESSIONALDISTRICT_2008_1YR', 'CONGRESSIONALDISTRICT_2008_1YR', 'CONGRESSIONALDISTRICT_2009_3YR', 'CONGRESSIONALDISTRICT_2018_1YR', 'CONGRESSIONALDISTRICT_2020_5YR', 'CONGRESSIONALDISTRICT_2014_1YR', 'CONGRESSIONALDISTRICT_2019_5YR', 'CONGRESSIONALDISTRICT_2018_5YR', 'CONGRESSIONALDISTRICT_2015_1YR', 'CONGRESSIONALDISTRICT_2013_3YR', 'CONGRESSIONALDISTRICT_2014_5YR', 'CONGRESSIONALDISTRICT_2012_1YR', 'CONGRESSIONALDISTRICT_2012_5YR', 'CONGRESSIONALDISTRICT_2011_5YR', 'CONGRESSIONALDISTRICT_2011_1YR', 'CONGRESSIONALDISTRICT_2016_1YR', 'CONGRESSIONALDISTRICT_2012_3YR', 'CONGRESSIONALDISTRICT_2016_5YR', 'CONGRESSIONALDISTRICT_2009_1YR', 'CONGRESSIONALDISTRICT_2010_1YR', 'CONGRESSIONALDISTRICT_2015_5YR', 'CONGRESSIONALDISTRICT_2010_3YR', 'CONGRESSIONALDISTRICT_2013_5YR', 'CONGRESSIONALDISTRICT_2013_1YR', 'CONGRESSIONALDISTRICT_2007_1YR', 'CONGRESSIONALDISTRICT_2007_3YR', 'CONGRESSIONALDISTRICT_2011_3YR', 'CONGRESSIONALDISTRICT_2017_1YR', 'CONGRESSIONALDISTRICT_2019_1YR', 'CONGRESSIONALDISTRICT_2008_3YR', 'CONGRESSIONALDISTRICT_2010_5YR', 'CONGRESSIONALDISTRICT_2017_5YR', 'CONGRESSIONALDISTRICT_2021_1YR', 'COUNTY_2012_5YR', 'COUNTY_2012_5YR', 'COUNTY_2016_1YR', 'COUNTY_2007_3YR', 'COUNTY_2013_1YR', 'COUNTY_2017_1YR', 'COUNTY_2018_5YR', 'COUNTY_2016_5YR', 'COUNTY_2008_1YR', 'COUNTY_2017_5YR', 'COUNTY_2019_5YR', 'COUNTY_2007_1YR', 'COUNTY_2013_3YR', 'COUNTY_2015_1YR', 'COUNTY_2019_1YR', 'COUNTY_2011_5YR', 'COUNTY_2008_3YR', 'COUNTY_2014_1YR', 'COUNTY_2012_3YR', 'COUNTY_2009_1YR', 'COUNTY_2010_5YR', 'COUNTY_2014_5YR', 'COUNTY_2009_3YR', 'COUNTY_2010_1YR', 'COUNTY_2010_3YR', 'COUNTY_2011_1YR', 'COUNTY_2011_3YR', 'COUNTY_2015_5YR', 'COUNTY_2018_1YR', 'COUNTY_2012_1YR', 'COUNTY_2013_5YR', 'COUNTY_2020_5YR', 'COUNTY_2021_1YR', 'PUMA_2017_1YR', 'PUMA_2017_1YR', 'PUMA_2013_5YR', 'PUMA_2008_1YR', 'PUMA_2013_1YR', 'PUMA_2008_3YR', 'PUMA_2007_3YR', 'PUMA_2009_3YR', 'PUMA_2014_1YR', 'PUMA_2016_5YR', 'PUMA_2018_5YR', 'PUMA_2020_5YR', 'PUMA_2009_1YR', 'PUMA_2015_1YR', 'PUMA_2017_5YR', 'PUMA_2012_3YR', 'PUMA_2013_3YR', 'PUMA_2014_5YR', 'PUMA_2018_1YR', 'PUMA_2019_1YR', 'PUMA_2011_5YR', 'PUMA_2021_1YR', 'PUMA_2011_3YR', 'PUMA_2010_3YR', 'PUMA_2007_1YR', 'PUMA_2012_1YR', 'PUMA_2015_5YR', 'PUMA_2010_1YR', 'PUMA_2010_5YR', 'PUMA_2012_5YR', 'PUMA_2019_5YR', 'PUMA_2016_1YR', 'PUMA_2011_1YR', 'PLACE_2010_3YR', 'PLACE_2010_3YR', 'PLACE_2014_5YR', 'PLACE_2015_1YR', 'PLACE_2009_3YR', 'PLACE_2013_5YR', 'PLACE_2016_1YR', 'PLACE_2018_5YR', 'PLACE_2013_1YR', 'PLACE_2011_3YR', 'PLACE_2021_1YR', 'PLACE_2012_1YR', 'PLACE_2012_3YR', 'PLACE_2010_5YR', 'PLACE_2011_5YR', 'PLACE_2015_5YR', 'PLACE_2011_1YR', 'PLACE_2017_1YR', 'PLACE_2012_5YR', 'PLACE_2007_1YR', 'PLACE_2008_1YR', 'PLACE_2019_1YR', 'PLACE_2009_1YR', 'PLACE_2010_1YR', 'PLACE_2013_3YR', 'PLACE_2017_5YR', 'PLACE_2016_5YR', 'PLACE_2018_1YR', 'PLACE_2007_3YR', 'PLACE_2019_5YR', 'PLACE_2014_1YR', 'PLACE_2008_3YR', 'PLACE_2020_5YR', 'SCHOOLDISTRICTELEMENTARY_2014_5YR', 'SCHOOLDISTRICTELEMENTARY_2014_5YR', 'SCHOOLDISTRICTELEMENTARY_2010_1YR', 'SCHOOLDISTRICTELEMENTARY_2016_5YR', 'SCHOOLDISTRICTELEMENTARY_2018_5YR', 'SCHOOLDISTRICTELEMENTARY_2019_5YR', 'SCHOOLDISTRICTELEMENTARY_2017_5YR', 'SCHOOLDISTRICTELEMENTARY_2015_5YR', 'SCHOOLDISTRICTELEMENTARY_2014_1YR', 'SCHOOLDISTRICTELEMENTARY_2015_1YR', 'SCHOOLDISTRICTELEMENTARY_2019_1YR', 'SCHOOLDISTRICTELEMENTARY_2016_1YR', 'SCHOOLDISTRICTELEMENTARY_2020_5YR', 'SCHOOLDISTRICTELEMENTARY_2010_5YR', 'SCHOOLDISTRICTELEMENTARY_2018_1YR', 'SCHOOLDISTRICTELEMENTARY_2017_1YR', 'SCHOOLDISTRICTELEMENTARY_2021_1YR', 'STATE_2014_1YR', 'STATE_2014_1YR', 'STATE_2017_1YR', 'STATE_2019_1YR', 'STATE_2011_3YR', 'STATE_2016_5YR', 'STATE_2017_5YR', 'STATE_2018_5YR', 'STATE_2019_5YR', 'STATE_2020_5YR', 'STATE_2011_5YR', 'STATE_2013_1YR', 'STATE_2009_1YR', 'STATE_2014_5YR', 'STATE_2011_1YR', 'STATE_2012_5YR', 'STATE_2013_3YR', 'STATE_2013_5YR', 'STATE_2018_1YR', 'STATE_2008_3YR', 'STATE_2010_3YR', 'STATE_2007_1YR', 'STATE_2007_3YR', 'STATE_2010_5YR', 'STATE_2008_1YR', 'STATE_2009_3YR', 'STATE_2010_1YR', 'STATE_2012_1YR', 'STATE_2012_3YR', 'STATE_2015_1YR', 'STATE_2015_5YR', 'STATE_2016_1YR', 'STATE_2021_1YR', 'SCHOOLDISTRICTSECONDARY_2010_5YR', 'SCHOOLDISTRICTSECONDARY_2010_5YR', 'SCHOOLDISTRICTSECONDARY_2018_5YR', 'SCHOOLDISTRICTSECONDARY_2019_1YR', 'SCHOOLDISTRICTSECONDARY_2021_1YR', 'SCHOOLDISTRICTSECONDARY_2017_5YR', 'SCHOOLDISTRICTSECONDARY_2020_5YR', 'SCHOOLDISTRICTSECONDARY_2015_1YR', 'SCHOOLDISTRICTSECONDARY_2014_5YR', 'SCHOOLDISTRICTSECONDARY_2015_5YR', 'SCHOOLDISTRICTSECONDARY_2018_1YR', 'SCHOOLDISTRICTSECONDARY_2016_1YR', 'SCHOOLDISTRICTSECONDARY_2010_1YR', 'SCHOOLDISTRICTSECONDARY_2017_1YR', 'SCHOOLDISTRICTSECONDARY_2016_5YR', 'SCHOOLDISTRICTSECONDARY_2019_5YR', 'SCHOOLDISTRICTUNIFIED_2019_5YR', 'SCHOOLDISTRICTUNIFIED_2019_5YR', 'SCHOOLDISTRICTUNIFIED_2016_5YR', 'SCHOOLDISTRICTUNIFIED_2017_5YR', 'SCHOOLDISTRICTUNIFIED_2021_1YR', 'SCHOOLDISTRICTUNIFIED_2018_5YR', 'SCHOOLDISTRICTUNIFIED_2014_5YR', 'SCHOOLDISTRICTUNIFIED_2015_1YR', 'SCHOOLDISTRICTUNIFIED_2010_1YR', 'SCHOOLDISTRICTUNIFIED_2015_5YR', 'SCHOOLDISTRICTUNIFIED_2010_5YR', 'SCHOOLDISTRICTUNIFIED_2016_1YR', 'SCHOOLDISTRICTUNIFIED_2020_5YR', 'SCHOOLDISTRICTUNIFIED_2019_1YR', 'SCHOOLDISTRICTUNIFIED_2018_1YR', 'SCHOOLDISTRICTUNIFIED_2014_1YR', 'SCHOOLDISTRICTUNIFIED_2017_1YR', 'ZCTA5_2011_5YR', 'ZCTA5_2011_5YR', 'ZCTA5_2019_5YR', 'ZCTA5_2013_5YR', 'ZCTA5_2018_5YR', 'ZCTA5_2015_5YR', 'ZCTA5_2012_5YR', 'ZCTA5_2016_5YR', 'ZCTA_2019_5YR', 'ZCTA_2020_5YR', 'ZCTA5_2014_5YR', 'ZCTA5_2017_5YR', 'ZIP_CODES_2012_5YR', 'ZIP_CODES_2012_5YR', 'ZIP_CODES_2011_5YR', 'ZIP_CODES_2015_5YR', 'ZIP_CODES_2016_5YR', 'ZIP_CODES_2017_5YR', 'ZIP_CODES_2018_5YR', 'ZIP_CODES_2013_5YR', 'ZIP_CODES_2014_5YR'], 'GEO_CENSUS_TRACTS': ['CENSUS_TRACTS_ALASKA', 'CENSUS_TRACTS_COLORADO', 'CENSUS_TRACTS_ILLINOIS', 'CENSUS_TRACTS_LOUISIANA', 'CENSUS_TRACTS_MONTANA', 'CENSUS_TRACTS_NEW_MEXICO', 'CENSUS_TRACTS_RHODE_ISLAND', 'CENSUS_TRACTS_HAWAII', 'CENSUS_TRACTS_MINNESOTA', 'CENSUS_TRACTS_NEW_HAMPSHIRE', 'CENSUS_TRACTS_VIRGINIA', 'CENSUS_TRACTS_WEST_VIRGINIA', 'CENSUS_TRACTS_MISSOURI', 'CENSUS_TRACTS_WYOMING', 'CENSUS_TRACTS_WISCONSIN', 'CENSUS_TRACTS_AMERICAN_SAMOA', 'CENSUS_TRACTS_ARIZONA', 'CENSUS_TRACTS_CALIFORNIA', 'CENSUS_TRACTS_DELAWARE', 'CENSUS_TRACTS_KENTUCKY', 'CENSUS_TRACTS_MAINE', 'CENSUS_TRACTS_MICHIGAN', 'CENSUS_TRACTS_NEW_JERSEY', 'CENSUS_TRACTS_PUERTO_RICO', 'US_CENSUS_TRACTS_NATIONAL', 'CENSUS_TRACTS_FLORIDA', 'CENSUS_TRACTS_GEORGIA', 'CENSUS_TRACTS_OHIO', 'CENSUS_TRACTS_PENNSYLVANIA', 'CENSUS_TRACTS_WASHINGTON', 'CENSUS_TRACTS_VERMONT', 'CENSUS_TRACTS_SOUTH_CAROLINA', 'CENSUS_TRACTS_ARKANSAS', 'CENSUS_TRACTS_DISTRICT_OF_COLUMBIA', 'CENSUS_TRACTS_GUAM', 'CENSUS_TRACTS_MASSACHUSETTS', 'CENSUS_TRACTS_OREGON', 'CENSUS_TRACTS_INDIANA', 'CENSUS_TRACTS_NEVADA', 'CENSUS_TRACTS_NORTHERN_MARIANA_ISLANDS', 'CENSUS_TRACTS_ALABAMA', 'CENSUS_TRACTS_CONNECTICUT', 'CENSUS_TRACTS_IDAHO', 'CENSUS_TRACTS_IOWA', 'CENSUS_TRACTS_KANSAS', 'CENSUS_TRACTS_MARYLAND', 'CENSUS_TRACTS_NEBRASKA', 'CENSUS_TRACTS_NEW_YORK', 'CENSUS_TRACTS_TEXAS', 'CENSUS_TRACTS_UTAH', 'CENSUS_TRACTS_NORTH_CAROLINA', 'CENSUS_TRACTS_OKLAHOMA', 'CENSUS_TRACTS_SOUTH_DAKOTA', 'CENSUS_TRACTS_US_VIRGIN_ISLANDS', 'CENSUS_TRACTS_NORTH_DAKOTA', 'CENSUS_TRACTS_MISSISSIPPI', 'CENSUS_TRACTS_TENNESSEE'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'CBSA', 'CONGRESS_DISTRICT_116', 'CONGRESS_DISTRICT_116', 'CONGRESS_DISTRICT_115', 'ADJACENT_STATES', 'COASTLINE', 'NATIONAL_OUTLINE', 'STATES', 'METROPOLITAN_DIVISIONS', 'RAILWAYS', 'URBAN_AREAS', 'ZIP_CODES', 'CNECTA', 'COUNTIES', 'CSA', 'NWS_FORECAST_REGIONS']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-02-12 02:38:17 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:38:17 - root - INFO - ```sql
SELECT z."zip_code",
       SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 1) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    TO_GEOGRAPHY(g."tract_geom"),
    TO_GEOGRAPHY(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        TO_GEOGRAPHY(g."tract_geom"),
        TO_GEOGRAPHY(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      TO_GEOGRAPHY(g."tract_geom"),
      TO_GEOGRAPHY(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  TO_GEOGRAPHY(z."zip_code_geom"),
  TO_GEOGRAPHY('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC;
```

```csv
Zip_Code,Total_Population,Average_Individual_Income
98039,3268.6,85829.7
98004,31982.4,78706.5
98112,23982.4,75368.2
98033,40114.7,65541.9
98053,27259.0,62431.8
98052,62539.8,57338.8
98105,46512.5,57017.1
98115,51494.3,56185.1
98034,38236.9,54120.7
98008,25773.1,53738.1
98005,23239.7,53685.3
98072,28447.3,52644.7
98028,21746.9,49984.2
98007,24076.9,49464.1
98011,32882.0,46576.4
98125,39881.7,46287.7
98155,34698.8,41681.6
```
2025-02-12 02:38:17 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:38:17 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:38:17 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:38:30 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-02-12 02:38:30 - snowflake.connector.connection - INFO - closed
2025-02-12 02:38:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:38:31 - root - INFO - itercount: 1
2025-02-12 02:38:31 - root - INFO - 0
2025-02-12 02:38:31 - root - INFO - results: 
zip_code,Total_Population,Average_Individual_Income
98039,3268.616292848105,85829.7
98004,31982.414251456874,78706.5
98112,23982.388364522998,75368.2
98033,40114.68213223673,65541.9
98053,27259.044530673476,62431.8
98052,62539.80077075842,57338.8
98105,46512.45568717428,57017.1
98115,51494.331146822915,56185.1
98034,38236.858911436175,54120.7
98008,25773.084418435705,53738.1
98005,23239.67816291709,53685.3
98072,28447.252494415243,52644.7
98028,21746.92540962845,49984.2
98007,24076.853903543582,49464.1
98011,32882.044190065375,46576.4
98125,39881.68613751872,46287.7
98155,34698.82837184475,41681.6


2025-02-12 02:38:31 - root - INFO - Please check the answer again by reviewing Using the 2017 U.S. Census Tract data from the BigQuery public datasets, you need to proportionally allocate each tract's population and income to the zip codes based on the overlapping area between their geographic boundaries. Then, filter the results to include only those zip codes located within a 5-mile radius of a specific point in Washington State, with coordinates at latitude 47.685833°N and longitude -122.191667°W. Finally, calculate the total population and the average individual income for each zip code (rounded to one decimal place) and sort the results by the average individual income in descending order., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Zip_Code,Total_Population,Average_Individual_Income
zipcode1:str,total_population1:int,average_income1:float
zipcode2:str,total_population2:int,average_income2:float
...
```

To address the task, we first proportionally allocated the population and income from each 2017 U.S. Census Tract to overlapping zip codes based on the area of overlap between their geographic boundaries. Next, we filtered the zip codes to include only those within a 5-mile radius of the specified point in Washington State (latitude 47.685833°N, longitude -122.191667°W). Finally, we calculated the total population and the average individual income for each zip code, rounded to one decimal place, and sorted the results in descending order of average individual income. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
zip_code,Total_Population,Average_Individual_Income
98039,3268.616292848105,85829.7
98004,31982.414251456874,78706.5
98112,23982.388364522998,75368.2
98033,40114.68213223673,65541.9
98053,27259.044530673476,62431.8
98052,62539.80077075842,57338.8
98105,46512.45568717428,57017.1
98115,51494.331146822915,56185.1
98034,38236.858911436175,54120.7
98008,25773.084418435705,53738.1
98005,23239.67816291709,53685.3
98072,28447.252494415243,52644.7
98028,21746.92540962845,49984.2
98007,24076.853903543582,49464.1
98011,32882.044190065375,46576.4
98125,39881.68613751872,46287.7
98155,34698.82837184475,41681.6
Current sql:
SELECT z."zip_code",
       SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 1) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    TO_GEOGRAPHY(g."tract_geom"),
    TO_GEOGRAPHY(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        TO_GEOGRAPHY(g."tract_geom"),
        TO_GEOGRAPHY(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      TO_GEOGRAPHY(g."tract_geom"),
      TO_GEOGRAPHY(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  TO_GEOGRAPHY(z."zip_code_geom"),
  TO_GEOGRAPHY('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC;When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-02-12 02:39:03 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:39:03 - root - INFO - ```sql
SELECT z."zip_code",
       SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 4) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    TO_GEOGRAPHY(g."tract_geom"),
    TO_GEOGRAPHY(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        TO_GEOGRAPHY(g."tract_geom"),
        TO_GEOGRAPHY(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      TO_GEOGRAPHY(g."tract_geom"),
      TO_GEOGRAPHY(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  TO_GEOGRAPHY(z."zip_code_geom"),
  TO_GEOGRAPHY('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;
```

```csv
Zip_Code,Total_Population,Average_Individual_Income
98039,3268.6163,85829.7000
98004,31982.4143,78706.5000
98112,23982.3884,75368.2000
98033,40114.6821,65541.9000
98053,27259.0445,62431.8000
98052,62539.8008,57338.8000
98105,46512.4557,57017.1000
98115,51494.3311,56185.1000
98034,38236.8589,54120.7000
98008,25773.0844,53738.1000
98005,23239.6782,53685.3000
98072,28447.2525,52644.7000
98028,21746.9254,49984.2000
98007,24076.8539,49464.1000
98011,32882.0442,46576.4000
98125,39881.6861,46287.7000
98155,34698.8284,41681.6000
```
2025-02-12 02:39:03 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:39:03 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:39:03 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:39:16 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-02-12 02:39:16 - snowflake.connector.connection - INFO - closed
2025-02-12 02:39:16 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:39:16 - root - INFO - itercount: 2
2025-02-12 02:39:16 - root - INFO - 0
2025-02-12 02:39:16 - root - INFO - results: 
zip_code,Total_Population,Average_Individual_Income
98039,3268.616292848105,85829.7
98004,31982.414251456874,78706.5385
98112,23982.388364523,75368.1538
98033,40114.68213223674,65541.8947
98053,27259.044530673476,62431.8
98052,62539.80077075842,57338.7619
98105,46512.45568717428,57017.0556
98115,51494.331146822915,56185.1154
98034,38236.858911436175,54120.65
98008,25773.084418435705,53738.1333
98005,23239.678162917087,53685.3077
98072,28447.252494415246,52644.7368
98028,21746.92540962845,49984.1667
98007,24076.85390354358,49464.1429
98011,32882.044190065375,46576.4375
98125,39881.68613751872,46287.7222
98155,34698.82837184475,41681.6


2025-02-12 02:39:16 - root - INFO - Please check the answer again by reviewing Using the 2017 U.S. Census Tract data from the BigQuery public datasets, you need to proportionally allocate each tract's population and income to the zip codes based on the overlapping area between their geographic boundaries. Then, filter the results to include only those zip codes located within a 5-mile radius of a specific point in Washington State, with coordinates at latitude 47.685833°N and longitude -122.191667°W. Finally, calculate the total population and the average individual income for each zip code (rounded to one decimal place) and sort the results by the average individual income in descending order., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Zip_Code,Total_Population,Average_Individual_Income
zipcode1:str,total_population1:int,average_income1:float
zipcode2:str,total_population2:int,average_income2:float
...
```

To address the task, we first proportionally allocated the population and income from each 2017 U.S. Census Tract to overlapping zip codes based on the area of overlap between their geographic boundaries. Next, we filtered the zip codes to include only those within a 5-mile radius of the specified point in Washington State (latitude 47.685833°N, longitude -122.191667°W). Finally, we calculated the total population and the average individual income for each zip code, rounded to one decimal place, and sorted the results in descending order of average individual income. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
zip_code,Total_Population,Average_Individual_Income
98039,3268.616292848105,85829.7
98004,31982.414251456874,78706.5385
98112,23982.388364523,75368.1538
98033,40114.68213223674,65541.8947
98053,27259.044530673476,62431.8
98052,62539.80077075842,57338.7619
98105,46512.45568717428,57017.0556
98115,51494.331146822915,56185.1154
98034,38236.858911436175,54120.65
98008,25773.084418435705,53738.1333
98005,23239.678162917087,53685.3077
98072,28447.252494415246,52644.7368
98028,21746.92540962845,49984.1667
98007,24076.85390354358,49464.1429
98011,32882.044190065375,46576.4375
98125,39881.68613751872,46287.7222
98155,34698.82837184475,41681.6
Current sql:
SELECT z."zip_code",
       SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 4) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    TO_GEOGRAPHY(g."tract_geom"),
    TO_GEOGRAPHY(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        TO_GEOGRAPHY(g."tract_geom"),
        TO_GEOGRAPHY(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      TO_GEOGRAPHY(g."tract_geom"),
      TO_GEOGRAPHY(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  TO_GEOGRAPHY(z."zip_code_geom"),
  TO_GEOGRAPHY('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-02-12 02:40:14 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:40:14 - root - INFO - ```sql
SELECT z."zip_code",
       ROUND(SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")), 0) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 1) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    TO_GEOGRAPHY(g."tract_geom"),
    TO_GEOGRAPHY(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        TO_GEOGRAPHY(g."tract_geom"),
        TO_GEOGRAPHY(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      TO_GEOGRAPHY(g."tract_geom"),
      TO_GEOGRAPHY(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  TO_GEOGRAPHY(z."zip_code_geom"),
  TO_GEOGRAPHY('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;
```

```csv
Zip_Code,Total_Population,Average_Individual_Income
98039,3269,85829.7
98004,31982,78706.5
98112,23982,75368.2
98033,40115,65541.9
98053,27259,62431.8
98052,62540,57338.8
98105,46512,57017.1
98115,51494,56185.1
98034,38237,54120.7
98008,25773,53738.1
98005,23240,53685.3
98072,28447,52644.7
98028,21747,49984.2
98007,24077,49464.1
98011,32882,46576.4
98125,39882,46287.7
98155,34699,41681.6
```
2025-02-12 02:40:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:40:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:40:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:40:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-02-12 02:40:27 - snowflake.connector.connection - INFO - closed
2025-02-12 02:40:27 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:40:27 - root - INFO - itercount: 3
2025-02-12 02:40:27 - root - INFO - 0
2025-02-12 02:40:28 - root - INFO - results: 
zip_code,Total_Population,Average_Individual_Income
98039,3269.0,85829.7
98004,31982.0,78706.5
98112,23982.0,75368.2
98033,40115.0,65541.9
98053,27259.0,62431.8
98052,62540.0,57338.8
98105,46512.0,57017.1
98115,51494.0,56185.1
98034,38237.0,54120.7
98008,25773.0,53738.1
98005,23240.0,53685.3
98072,28447.0,52644.7
98028,21747.0,49984.2
98007,24077.0,49464.1
98011,32882.0,46576.4
98125,39882.0,46287.7
98155,34699.0,41681.6


2025-02-12 02:40:28 - root - INFO - Please check the answer again by reviewing Using the 2017 U.S. Census Tract data from the BigQuery public datasets, you need to proportionally allocate each tract's population and income to the zip codes based on the overlapping area between their geographic boundaries. Then, filter the results to include only those zip codes located within a 5-mile radius of a specific point in Washington State, with coordinates at latitude 47.685833°N and longitude -122.191667°W. Finally, calculate the total population and the average individual income for each zip code (rounded to one decimal place) and sort the results by the average individual income in descending order., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Zip_Code,Total_Population,Average_Individual_Income
zipcode1:str,total_population1:int,average_income1:float
zipcode2:str,total_population2:int,average_income2:float
...
```

To address the task, we first proportionally allocated the population and income from each 2017 U.S. Census Tract to overlapping zip codes based on the area of overlap between their geographic boundaries. Next, we filtered the zip codes to include only those within a 5-mile radius of the specified point in Washington State (latitude 47.685833°N, longitude -122.191667°W). Finally, we calculated the total population and the average individual income for each zip code, rounded to one decimal place, and sorted the results in descending order of average individual income. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
zip_code,Total_Population,Average_Individual_Income
98039,3269.0,85829.7
98004,31982.0,78706.5
98112,23982.0,75368.2
98033,40115.0,65541.9
98053,27259.0,62431.8
98052,62540.0,57338.8
98105,46512.0,57017.1
98115,51494.0,56185.1
98034,38237.0,54120.7
98008,25773.0,53738.1
98005,23240.0,53685.3
98072,28447.0,52644.7
98028,21747.0,49984.2
98007,24077.0,49464.1
98011,32882.0,46576.4
98125,39882.0,46287.7
98155,34699.0,41681.6
Current sql:
SELECT z."zip_code",
       ROUND(SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")), 0) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 1) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    TO_GEOGRAPHY(g."tract_geom"),
    TO_GEOGRAPHY(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        TO_GEOGRAPHY(g."tract_geom"),
        TO_GEOGRAPHY(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      TO_GEOGRAPHY(g."tract_geom"),
      TO_GEOGRAPHY(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  TO_GEOGRAPHY(z."zip_code_geom"),
  TO_GEOGRAPHY('POINT(-122.191667 47.685833)')
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-02-12 02:41:44 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:41:44 - root - INFO - ```sql
SELECT z."zip_code",
       ROUND(SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")), 1) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 1) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(ST_GeogFromWKB("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        ST_GeogFromWKB(g."tract_geom"),
        ST_GeogFromWKB(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  ST_GeogFromWKB(z."zip_code_geom"),
  ST_POINT(-122.191667, 47.685833)
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;
```
2025-02-12 02:41:44 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:41:44 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:41:44 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:41:57 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-02-12 02:41:57 - snowflake.connector.connection - INFO - closed
2025-02-12 02:41:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:41:58 - root - INFO - itercount: 4
2025-02-12 02:41:58 - root - INFO - 0
2025-02-12 02:41:58 - root - INFO - results: 
zip_code,Total_Population,Average_Individual_Income
98039,3268.6,85829.7
98004,31982.4,78706.5
98112,23982.4,75368.2
98033,40114.7,65541.9
98053,27259.0,62431.8
98052,62539.8,57338.8
98105,46512.5,57017.1
98115,51494.3,56185.1
98034,38236.9,54120.7
98008,25773.1,53738.1
98005,23239.7,53685.3
98072,28447.3,52644.7
98028,21746.9,49984.2
98007,24076.9,49464.1
98011,32882.0,46576.4
98125,39881.7,46287.7
98155,34698.8,41681.6


2025-02-12 02:41:58 - root - INFO - Please check the answer again by reviewing Using the 2017 U.S. Census Tract data from the BigQuery public datasets, you need to proportionally allocate each tract's population and income to the zip codes based on the overlapping area between their geographic boundaries. Then, filter the results to include only those zip codes located within a 5-mile radius of a specific point in Washington State, with coordinates at latitude 47.685833°N and longitude -122.191667°W. Finally, calculate the total population and the average individual income for each zip code (rounded to one decimal place) and sort the results by the average individual income in descending order., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Zip_Code,Total_Population,Average_Individual_Income
zipcode1:str,total_population1:int,average_income1:float
zipcode2:str,total_population2:int,average_income2:float
...
```

To address the task, we first proportionally allocated the population and income from each 2017 U.S. Census Tract to overlapping zip codes based on the area of overlap between their geographic boundaries. Next, we filtered the zip codes to include only those within a 5-mile radius of the specified point in Washington State (latitude 47.685833°N, longitude -122.191667°W). Finally, we calculated the total population and the average individual income for each zip code, rounded to one decimal place, and sorted the results in descending order of average individual income. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
zip_code,Total_Population,Average_Individual_Income
98039,3268.6,85829.7
98004,31982.4,78706.5
98112,23982.4,75368.2
98033,40114.7,65541.9
98053,27259.0,62431.8
98052,62539.8,57338.8
98105,46512.5,57017.1
98115,51494.3,56185.1
98034,38236.9,54120.7
98008,25773.1,53738.1
98005,23239.7,53685.3
98072,28447.3,52644.7
98028,21746.9,49984.2
98007,24076.9,49464.1
98011,32882.0,46576.4
98125,39881.7,46287.7
98155,34698.8,41681.6
Current sql:
SELECT z."zip_code",
       ROUND(SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")), 1) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 1) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(ST_GeogFromWKB("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        ST_GeogFromWKB(g."tract_geom"),
        ST_GeogFromWKB(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  ST_GeogFromWKB(z."zip_code_geom"),
  ST_POINT(-122.191667, 47.685833)
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-02-12 02:42:36 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:42:36 - root - INFO - ```sql
SELECT z."zip_code",
       ROUND(SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")), 1) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 4) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(ST_GeogFromWKB("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        ST_GeogFromWKB(g."tract_geom"),
        ST_GeogFromWKB(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  ST_GeogFromWKB(z."zip_code_geom"),
  ST_POINT(-122.191667, 47.685833)
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;
```
2025-02-12 02:42:36 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:42:36 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:42:36 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:42:48 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-02-12 02:42:48 - snowflake.connector.connection - INFO - closed
2025-02-12 02:42:49 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:42:49 - root - INFO - itercount: 5
2025-02-12 02:42:49 - root - INFO - 0
2025-02-12 02:42:49 - root - INFO - results: 
zip_code,Total_Population,Average_Individual_Income
98039,3268.6,85829.7
98004,31982.4,78706.5385
98112,23982.4,75368.1538
98033,40114.7,65541.8947
98053,27259.0,62431.8
98052,62539.8,57338.7619
98105,46512.5,57017.0556
98115,51494.3,56185.1154
98034,38236.9,54120.65
98008,25773.1,53738.1333
98005,23239.7,53685.3077
98072,28447.3,52644.7368
98028,21746.9,49984.1667
98007,24076.9,49464.1429
98011,32882.0,46576.4375
98125,39881.7,46287.7222
98155,34698.8,41681.6


2025-02-12 02:42:49 - root - INFO - Please check the answer again by reviewing Using the 2017 U.S. Census Tract data from the BigQuery public datasets, you need to proportionally allocate each tract's population and income to the zip codes based on the overlapping area between their geographic boundaries. Then, filter the results to include only those zip codes located within a 5-mile radius of a specific point in Washington State, with coordinates at latitude 47.685833°N and longitude -122.191667°W. Finally, calculate the total population and the average individual income for each zip code (rounded to one decimal place) and sort the results by the average individual income in descending order., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Zip_Code,Total_Population,Average_Individual_Income
zipcode1:str,total_population1:int,average_income1:float
zipcode2:str,total_population2:int,average_income2:float
...
```

To address the task, we first proportionally allocated the population and income from each 2017 U.S. Census Tract to overlapping zip codes based on the area of overlap between their geographic boundaries. Next, we filtered the zip codes to include only those within a 5-mile radius of the specified point in Washington State (latitude 47.685833°N, longitude -122.191667°W). Finally, we calculated the total population and the average individual income for each zip code, rounded to one decimal place, and sorted the results in descending order of average individual income. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
zip_code,Total_Population,Average_Individual_Income
98039,3268.6,85829.7
98004,31982.4,78706.5385
98112,23982.4,75368.1538
98033,40114.7,65541.8947
98053,27259.0,62431.8
98052,62539.8,57338.7619
98105,46512.5,57017.0556
98115,51494.3,56185.1154
98034,38236.9,54120.65
98008,25773.1,53738.1333
98005,23239.7,53685.3077
98072,28447.3,52644.7368
98028,21746.9,49984.1667
98007,24076.9,49464.1429
98011,32882.0,46576.4375
98125,39881.7,46287.7222
98155,34698.8,41681.6
Current sql:
SELECT z."zip_code",
       ROUND(SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")), 1) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 4) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(ST_GeogFromWKB("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        ST_GeogFromWKB(g."tract_geom"),
        ST_GeogFromWKB(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  ST_GeogFromWKB(z."zip_code_geom"),
  ST_POINT(-122.191667, 47.685833)
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-02-12 02:44:13 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:44:13 - root - INFO - ```sql
SELECT z."zip_code",
       CAST(ROUND(SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area"))) AS INT) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 4) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(ST_GeogFromWKB("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        ST_GeogFromWKB(g."tract_geom"),
        ST_GeogFromWKB(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  ST_GeogFromWKB(z."zip_code_geom"),
  ST_POINT(-122.191667, 47.685833)
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;
```

```csv
Zip_Code,Total_Population,Average_Individual_Income
98039,3269,85829.7000
98004,31982,78706.5385
98112,23982,75368.1538
98033,40115,65541.8947
98053,27259,62431.8000
98052,62540,57338.7619
98105,46513,57017.0556
98115,51494,56185.1154
98034,38237,54120.6500
98008,25773,53738.1333
98005,23240,53685.3077
98072,28447,52644.7368
98028,21747,49984.1667
98007,24077,49464.1429
98011,32882,46576.4375
98125,39882,46287.7222
98155,34699,41681.6000
```
2025-02-12 02:44:13 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:44:13 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:44:13 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:44:26 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-02-12 02:44:26 - snowflake.connector.connection - INFO - closed
2025-02-12 02:44:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:44:26 - root - INFO - itercount: 6
2025-02-12 02:44:26 - root - INFO - 0
2025-02-12 02:44:26 - root - INFO - results: 
zip_code,Total_Population,Average_Individual_Income
98039,3269,85829.7
98004,31982,78706.5385
98112,23982,75368.1538
98033,40115,65541.8947
98053,27259,62431.8
98052,62540,57338.7619
98105,46512,57017.0556
98115,51494,56185.1154
98034,38237,54120.65
98008,25773,53738.1333
98005,23240,53685.3077
98072,28447,52644.7368
98028,21747,49984.1667
98007,24077,49464.1429
98011,32882,46576.4375
98125,39882,46287.7222
98155,34699,41681.6


2025-02-12 02:44:26 - root - INFO - Please check the answer again by reviewing Using the 2017 U.S. Census Tract data from the BigQuery public datasets, you need to proportionally allocate each tract's population and income to the zip codes based on the overlapping area between their geographic boundaries. Then, filter the results to include only those zip codes located within a 5-mile radius of a specific point in Washington State, with coordinates at latitude 47.685833°N and longitude -122.191667°W. Finally, calculate the total population and the average individual income for each zip code (rounded to one decimal place) and sort the results by the average individual income in descending order., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Zip_Code,Total_Population,Average_Individual_Income
zipcode1:str,total_population1:int,average_income1:float
zipcode2:str,total_population2:int,average_income2:float
...
```

To address the task, we first proportionally allocated the population and income from each 2017 U.S. Census Tract to overlapping zip codes based on the area of overlap between their geographic boundaries. Next, we filtered the zip codes to include only those within a 5-mile radius of the specified point in Washington State (latitude 47.685833°N, longitude -122.191667°W). Finally, we calculated the total population and the average individual income for each zip code, rounded to one decimal place, and sorted the results in descending order of average individual income. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
zip_code,Total_Population,Average_Individual_Income
98039,3269,85829.7
98004,31982,78706.5385
98112,23982,75368.1538
98033,40115,65541.8947
98053,27259,62431.8
98052,62540,57338.7619
98105,46512,57017.0556
98115,51494,56185.1154
98034,38237,54120.65
98008,25773,53738.1333
98005,23240,53685.3077
98072,28447,52644.7368
98028,21747,49984.1667
98007,24077,49464.1429
98011,32882,46576.4375
98125,39882,46287.7222
98155,34699,41681.6
Current sql:
SELECT z."zip_code",
       CAST(ROUND(SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area"))) AS INT) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 4) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(ST_GeogFromWKB("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        ST_GeogFromWKB(g."tract_geom"),
        ST_GeogFromWKB(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  ST_GeogFromWKB(z."zip_code_geom"),
  ST_POINT(-122.191667, 47.685833)
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-02-12 02:45:09 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:45:09 - root - INFO - ```sql
SELECT z."zip_code" AS "Zip_Code",
       CAST(ROUND(SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")), 1) AS INT) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 4) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(ST_GeogFromWKB("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        ST_GeogFromWKB(g."tract_geom"),
        ST_GeogFromWKB(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  ST_GeogFromWKB(z."zip_code_geom"),
  ST_POINT(-122.191667, 47.685833)
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;
```

```csv
Zip_Code,Total_Population,Average_Individual_Income
98039,3269,85829.7000
98004,31982,78706.5385
98112,23982,75368.1538
98033,40115,65541.8947
98053,27259,62431.8000
98052,62540,57338.7619
98105,46513,57017.0556
98115,51494,56185.1154
98034,38237,54120.6500
98008,25773,53738.1333
```
2025-02-12 02:45:09 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:45:09 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:45:09 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:45:22 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-02-12 02:45:22 - snowflake.connector.connection - INFO - closed
2025-02-12 02:45:22 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:45:22 - root - INFO - itercount: 7
2025-02-12 02:45:22 - root - INFO - 0
2025-02-12 02:45:22 - root - INFO - results: 
Zip_Code,Total_Population,Average_Individual_Income
98039,3269,85829.7
98004,31982,78706.5385
98112,23982,75368.1538
98033,40115,65541.8947
98053,27259,62431.8
98052,62540,57338.7619
98105,46513,57017.0556
98115,51494,56185.1154
98034,38237,54120.65
98008,25773,53738.1333
98005,23240,53685.3077
98072,28447,52644.7368
98028,21747,49984.1667
98007,24077,49464.1429
98011,32882,46576.4375
98125,39882,46287.7222
98155,34699,41681.6


2025-02-12 02:45:22 - root - INFO - Please check the answer again by reviewing Using the 2017 U.S. Census Tract data from the BigQuery public datasets, you need to proportionally allocate each tract's population and income to the zip codes based on the overlapping area between their geographic boundaries. Then, filter the results to include only those zip codes located within a 5-mile radius of a specific point in Washington State, with coordinates at latitude 47.685833°N and longitude -122.191667°W. Finally, calculate the total population and the average individual income for each zip code (rounded to one decimal place) and sort the results by the average individual income in descending order., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
Zip_Code,Total_Population,Average_Individual_Income
zipcode1:str,total_population1:int,average_income1:float
zipcode2:str,total_population2:int,average_income2:float
...
```

To address the task, we first proportionally allocated the population and income from each 2017 U.S. Census Tract to overlapping zip codes based on the area of overlap between their geographic boundaries. Next, we filtered the zip codes to include only those within a 5-mile radius of the specified point in Washington State (latitude 47.685833°N, longitude -122.191667°W). Finally, we calculated the total population and the average individual income for each zip code, rounded to one decimal place, and sorted the results in descending order of average individual income. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Zip_Code,Total_Population,Average_Individual_Income
98039,3269,85829.7
98004,31982,78706.5385
98112,23982,75368.1538
98033,40115,65541.8947
98053,27259,62431.8
98052,62540,57338.7619
98105,46513,57017.0556
98115,51494,56185.1154
98034,38237,54120.65
98008,25773,53738.1333
98005,23240,53685.3077
98072,28447,52644.7368
98028,21747,49984.1667
98007,24077,49464.1429
98011,32882,46576.4375
98125,39882,46287.7222
98155,34699,41681.6
Current sql:
SELECT z."zip_code" AS "Zip_Code",
       CAST(ROUND(SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")), 1) AS INT) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 4) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(ST_GeogFromWKB("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        ST_GeogFromWKB(g."tract_geom"),
        ST_GeogFromWKB(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  ST_GeogFromWKB(z."zip_code_geom"),
  ST_POINT(-122.191667, 47.685833)
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-02-12 02:45:59 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 02:45:59 - root - INFO - ```sql
SELECT z."zip_code" AS "Zip_Code",
       CAST(ROUND(SUM(t."total_pop" * (overlap."overlap_area" / tract_area."tract_area")), 1) AS INT) AS "Total_Population",
       ROUND(AVG(t."income_per_capita"), 4) AS "Average_Individual_Income"
FROM "CENSUS_BUREAU_ACS_1"."CENSUS_BUREAU_ACS"."CENSUSTRACT_2017_5YR" t
JOIN "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  ON t."geo_id" = g."geo_id"
JOIN (
  SELECT "geo_id", ST_AREA(ST_GeogFromWKB("tract_geom")) AS "tract_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON"
) tract_area ON g."geo_id" = tract_area."geo_id"
JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
  ON ST_INTERSECTS(
    ST_GeogFromWKB(g."tract_geom"),
    ST_GeogFromWKB(z."zip_code_geom")
  )
JOIN (
  SELECT g."geo_id", z."zip_code",
    ST_AREA(
      ST_INTERSECTION(
        ST_GeogFromWKB(g."tract_geom"),
        ST_GeogFromWKB(z."zip_code_geom")
      )
    ) AS "overlap_area"
  FROM "CENSUS_BUREAU_ACS_1"."GEO_CENSUS_TRACTS"."CENSUS_TRACTS_WASHINGTON" g
  JOIN "CENSUS_BUREAU_ACS_1"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    ON ST_INTERSECTS(
      ST_GeogFromWKB(g."tract_geom"),
      ST_GeogFromWKB(z."zip_code_geom")
    )
) overlap ON t."geo_id" = overlap."geo_id" AND z."zip_code" = overlap."zip_code"
WHERE ST_DISTANCE(
  ST_GeogFromWKB(z."zip_code_geom"),
  ST_POINT(-122.191667, 47.685833)
) <= 5 * 1609.34
GROUP BY z."zip_code"
ORDER BY "Average_Individual_Income" DESC NULLS LAST;
```
2025-02-12 02:45:59 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 02:45:59 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 02:45:59 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 02:46:00 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-02-12 02:46:00 - snowflake.connector.connection - INFO - closed
2025-02-12 02:46:00 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 02:46:00 - root - INFO - itercount: 8
2025-02-12 02:46:00 - root - INFO - 0
2025-02-12 02:46:00 - root - INFO - Total iteration counts: 8
