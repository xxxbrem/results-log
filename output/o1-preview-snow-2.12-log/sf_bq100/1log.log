2025-02-12 20:33:16 - openai._base_client - INFO - Retrying request to /chat/completions in 0.438889 seconds
2025-02-12 20:33:40 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:33:40 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:33:40 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:33:40 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:33:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-02-12 20:33:42 - snowflake.connector.connection - INFO - closed
2025-02-12 20:33:42 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:33:43 - root - INFO - SQL:
SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   LIMIT 100;
Results:
Too long, hard cut:
content
"/*
 * rtc-ds1305.c -- driver for DS1305 and DS1306 SPI RTC chips
 *
 * Copyright (C) 2008 David Brownell
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 */
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/bcd.h>
#include <linux/slab.h>
#include <linux/rtc.h>
#include <linux/workqueue.h>

#include <linux/spi/spi.h>
#include <linux/spi/ds1305.h>
#include <linux/module.h>


/*
 * Registers ... mask DS1305_WRITE into register address to write,
 * otherwise you're reading it.  All non-bitmask values are BCD.
 */
#define DS1305_WRITE		0x80


/* RTC date/time ... the main special cases are that we:
 *  - Need fancy ""hours"" encoding in 12hour mode
 *  - Don't rely on the ""day-of-week"" field (or tm_wday)
 *  - Are a 21st-century clock (2000 <= year < 2100)
 */
#define DS1305_RTC_LEN		7		/* bytes for RTC regs */

#define DS1305_SEC		0x00		/* register addresses */
#define DS1305_MIN		0x01
#define DS1305_HOUR		0x02
#	define DS1305_HR_12		0x40	/* set == 12 hr mode */
#	define DS1305_HR_PM		0x20	/* set == PM (12hr mode) */
#define DS1305_WDAY		0x03
#define DS1305_MDAY		0x04
#define DS1305_MON		0x05
#define DS1305_YEAR		0x06


/* The two alarms have only sec/min/hour/wday fields (ALM_LEN).
 * DS1305_ALM_DISABLE disables a match field (some combos are bad).
 *
 * NOTE that since we don't use WDAY, we limit ourselves to alarms
 * only one day into the future (vs potentially up to a week).
 *
 * NOTE ALSO that while we could generate once-a-second IRQs (UIE), we
 * don't currently support them.  We'd either need to do it only when
 * no alarm is pending (not the standard model), or to use the second
 * alarm (implying that this is a DS1305 not DS1306, *and* that either
 * it's wired up a second IRQ we know, or that INTCN is set)
 */
#define DS1305_ALM_LEN		4		/* bytes for ALM regs */
#define DS1305_ALM_DISABLE	0x80

#define DS1305_ALM0(r)		(0x07 + (r))	/* register addresses */
#define DS1305_ALM1(r)		(0x0b + (r))


/* three control registers */
#define DS1305_CONTROL_LEN	3		/* bytes of control regs */

#define DS1305_CONTROL		0x0f		/* register addresses */
#	define DS1305_nEOSC		0x80	/* low enables oscillator */
#	define DS1305_WP		0x40	/* write protect */
#	define DS1305_INTCN		0x04	/* clear == only int0 used */
#	define DS1306_1HZ		0x04	/* enable 1Hz output */
#	define DS1305_AEI1		0x02	/* enable ALM1 IRQ */
#	define DS1305_AEI0		0x01	/* enable ALM0 IRQ */
#define DS1305_STATUS		0x10
/* status has just AEIx bits, mirrored as IRQFx */
#define DS1305_TRICKLE		0x11
/* trickle bits are defined in <linux/spi/ds1305.h> */

/* a bunch of NVRAM */
#define DS1305_NVRAM_LEN	96		/* bytes of NVRAM */

#define DS1305_NVRAM		0x20		/* register addresses */


struct ds1305 {
	struct spi_device	*spi;
	struct rtc_device	*rtc;

	struct work_struct	work;

	unsigned long		flags;
#define FLAG_EXITING	0

	bool			hr12;
	u8			ctrl[DS1305_CONTROL_LEN];
};


/*----------------------------------------------------------------------*/

/*
 * Utilities ...  tolerate 12-hour AM/PM notation in case of non-Linux
 * software (like a bootloader) which may require it.
 */

static unsigned bcd2hour(u8 bcd)
{
	if (bcd & DS1305_HR_12) {
		unsigned	hour = 0;

		bcd &= ~DS1305_HR_12;
		if (bcd & DS1305_HR_PM) {
			hour = 12;
			bcd &= ~DS1305_HR_PM;
		}
		hour += bcd2bin(bcd);
		return hour - 1;
	}
	return bcd2bin(bcd);
}

static u8 hour2bcd(bool hr12, int hour)
{
	if (hr12) {
		hour++;
		if (hour <= 12)
			return DS1305_HR_12 | bin2bcd(hour);
		hour -= 12;
		return DS1305_HR_12 | DS1305_HR_PM | bin2bcd(hour);
	}
	return bin2bcd(hour);
}

/*----------------------------------------------------------------------*/

/*
 * Interface to RTC framework
 */

static int ds1305_alarm_irq_enable(struct device *dev, unsigned int enabled)
{
	struct ds1305	*ds1305 = dev_get_drvdata(dev);
	u8		buf[2];
	long		err = -EINVAL;

	buf[0] = DS1305_WRITE | DS1305_CONTROL;
	buf[1] = ds1305->ctrl[0];

	if (enabled) {
		if (ds1305->ctrl[0] & DS1305_AEI0)
			goto done;
		buf[1] |= DS1305_AEI0;
	} else {
		if (!(buf[1] & DS1305_AEI0))
			goto done;
		buf[1] &= ~DS1305_AEI0;
	}
	err = spi_write_then_read(ds1305->spi, buf, sizeof(buf), NULL, 0);
	if (err >= 0)
		ds1305->ctrl[0] = buf[1];
done:
	return err;

}


/*
 * Get/set of date and time is pretty normal.
 */

static int ds1305_get_time(struct device *dev, struct rtc_time *time)
{
	struct ds1305	*ds1305 = dev_get_drvdata(dev);
	u8		addr = DS1305_SEC;
	u8		buf[DS1305_RTC_LEN];
	int		status;

	/* Use write-then-read to get all the date/time registers
	 * since dma from stack is nonportable
	 */
	status = spi_write_then_read(ds1305->spi, &addr, sizeof(addr),
			buf, sizeof(buf));
	if (status < 0)
		return status;

	dev_vdbg(dev, ""%s: %02x %02x %02x, %02x %02x %02x %02x\n"",
		""read"", buf[0], buf[1], buf[2], buf[3],
		buf[4], buf[5], buf[6]);

	/* Decode the registers

2025-02-12 20:33:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:33:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:33:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:33:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 13
2025-02-12 20:33:45 - snowflake.connector.connection - INFO - closed
2025-02-12 20:33:46 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:33:46 - root - INFO - SQL:
SELECT DISTINCT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   LIMIT 100;
Results:
Too long, hard cut:
content
"# The application settings for Android libSDL port

# Specify application name (e.x. My Application)
AppName=""JaggedAlliance2""

# Specify reversed site name of application (e.x. com.mysite.myapp)
AppFullName=com.opensourced.ja2

# Application version code (integer)
AppVersionCode=01235204

# Application user-visible version name (string)
AppVersionName=""0.12.352.04""

# Specify path to download application data in zip archive in the form 'Description|URL|MirrorURL^Description2|URL2|MirrorURL2^...'
# If you'll start Description with '!' symbol it will be enabled by default, other downloads should be selected by user from startup config menu
# If the URL in in the form ':dir/file.dat:http://URL/' it will be downloaded as binary BLOB to the application dir and not unzipped
# If the URL does not contain 'http://' it is treated as file from 'project/jni/application/src/AndroidData' dir -
# these files are put inside .apk package by build system
# Also please avoid 'https://' URLs, many Android devices do not have trust certificates and will fail to connect to SF.net over HTTPS
AppDataDownloadUrl=""!!JaggedAllianceData|ja2.zip""

# Reset SDL config when updating application to the new version (y) / (n)
ResetSdlConfigForThisVersion=n

# Delete application data files when upgrading (specify file/dir paths separated by spaces)
DeleteFilesOnUpgrade=""""

# Here you may type readme text, which will be shown during startup. Format is:
# Text in English, use \\\\n to separate lines (that's four backslashes)^de:Text in Deutsch^ru:Text in Russian^button:Button that will open some URL:http://url-to-open/
ReadmeText=''

# libSDL version to use (1.2/1.3/2.0)
LibSdlVersion=1.2

# Specify screen orientation: (v)ertical/(p)ortrait or (h)orizontal/(l)andscape
ScreenOrientation=h

# Video color depth - 16 BPP is the fastest and supported for all modes, 24 bpp is supported only
# with SwVideoMode=y, SDL_OPENGL mode supports everything. (16)/(24)/(32)
VideoDepthBpp=16

# Enable OpenGL depth buffer (needed only for 3-d applications, small speed decrease) (y) or (n)
NeedDepthBuffer=n

# Enable OpenGL stencil buffer (needed only for 3-d applications, small speed decrease) (y) or (n)
NeedStencilBuffer=n

# Try to use GLES 2.x context - will revert to GLES 1.X if unsupported by device
# you need this option only if you're developing 3-d app (y) or (n)
NeedGles2=n

# Application uses software video buffer - you're calling SDL_SetVideoMode() without SDL_HWSURFACE and without SDL_OPENGL,
# this will allow small speed optimization. Enable this even when you're using SDL_HWSURFACE. (y) or (n)
SwVideoMode=y

# Application video output will be resized to fit into native device screen (y)/(n)
SdlVideoResize=y

# Application resizing will keep 4:3 aspect ratio, with black bars at sides (y)/(n)
SdlVideoResizeKeepAspect=n

# Do not allow device to sleep when the application is in foreground, set this for video players or apps which use accelerometer
InhibitSuspend=y

# Create Android service, so the app is less likely to be killed while in background
CreateService=

# Application does not call SDL_Flip() or SDL_UpdateRects() appropriately, or draws from non-main thread -
# enabling the compatibility mode will force screen update every 100 milliseconds, which is laggy and inefficient (y) or (n)
CompatibilityHacksForceScreenUpdate=n

# Application does not call SDL_Flip() or SDL_UpdateRects() after mouse click (ScummVM and all Amiga emulators do that) -
# force screen update by moving mouse cursor a little after each click (y) or (n)
CompatibilityHacksForceScreenUpdateMouseClick=y

# Application initializes SDL audio/video inside static constructors (which is bad, you won't be able to run ndk-gdb) (y)/(n)
CompatibilityHacksStaticInit=n

# On-screen Android soft text input emulates hardware keyboard, this will only work with Hackers Keyboard app (y)/(n)
CompatibilityHacksTextInputEmulatesHwKeyboard=n

# Hack for broken devices: prevent audio chopping, by sleeping a bit after pushing each audio chunk (y)/(n)
CompatibilityHacksPreventAudioChopping=n

# Hack for broken apps: application ignores audio buffer size returned by SDL (y)/(n)
CompatibilityHacksAppIgnoresAudioBufferSize=n

# Hack for VCMI: preload additional shared libraries before aplication start
CompatibilityHacksAdditionalPreloadedSharedLibraries=""""

# Hack for Free Heroes 2, which redraws the screen inside SDL_PumpEvents(): slow and compatible SDL event queue -
# do not use it with accelerometer/gyroscope, or your app may freeze at random (y)/(n)
CompatibilityHacksSlowCompatibleEventQueue=n

# Save and restore OpenGL state when drawing on-screen keyboard for apps that use SDL_OPENGL
CompatibilityHacksTouchscreenKeyboardSaveRestoreOpenGLState=n

# Application uses SDL_UpdateRects() properly, and does not draw in any region outside those rects.
# This improves drawing speed, but I know only one application that does that, and it's written by me (y)/(n)
CompatibilityHacksProperU

2025-02-12 20:33:46 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:33:46 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:33:46 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:33:48 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-02-12 20:33:49 - snowflake.connector.connection - INFO - closed
2025-02-12 20:33:49 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:33:49 - root - INFO - SQL:
SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%import%'
   LIMIT 100;
Results:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd

2025-02-12 20:33:49 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:33:49 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:33:49 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:33:51 - snowflake.connector.cursor - INFO - Number of results in first chunk: 2
2025-02-12 20:33:52 - snowflake.connector.connection - INFO - closed
2025-02-12 20:33:54 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:33:54 - root - INFO - SQL:
SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%import%(%'
   LIMIT 100;
Results:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd

2025-02-12 20:33:54 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:33:54 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:33:54 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:33:56 - snowflake.connector.cursor - INFO - Number of results in first chunk: 15
2025-02-12 20:33:57 - snowflake.connector.connection - INFO - closed
2025-02-12 20:33:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:33:58 - root - INFO - SQL:
SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%"%'
   LIMIT 100;
Results:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd

2025-02-12 20:33:58 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:33:58 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:33:58 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:34:00 - snowflake.connector.cursor - INFO - Number of results in first chunk: 17
2025-02-12 20:34:01 - snowflake.connector.connection - INFO - closed
2025-02-12 20:34:01 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:34:02 - root - INFO - SQL:
SELECT "id", "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" IS NOT NULL
   LIMIT 100;
Results:
Too long, hard cut:
id,content
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;

2025-02-12 20:34:02 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:34:02 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:34:02 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:34:03 - snowflake.connector.connection - INFO - closed
2025-02-12 20:34:03 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:34:55 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:34:55 - root - INFO - The error in your SQL query occurs because the newline character `\n` is not correctly interpreted within the string literal in your `ILIKE` condition. In SQL, the backslash `\` is used as an escape character, and when you include `\n` in a string, it may not be processed as a literal backslash followed by 'n'.

To fix this issue, you can:

1. **Use double backslashes `\\n` to represent a literal `\n`**
2. **Use the `CHR(10)` function to represent the newline character**
3. **Use regular expressions with `REGEXP_LIKE` to match newline characters**

Here are the corrected queries:

---

**Option 1: Use Double Backslashes**

```sql
SELECT "content"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE "content" ILIKE '%import%\\n%'
LIMIT 100;
```

*Explanation:* By using `\\n`, you're escaping the backslash, so the pattern searches for a backslash followed by 'n', which represents a newline character in some contexts.

---

**Option 2: Use `CHR(10)` Function**

```sql
SELECT "content"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE "content" ILIKE '%import%' || CHR(10) || '%'
LIMIT 100;
```

*Explanation:* `CHR(10)` returns the newline character in ASCII. This query concatenates `%import%`, the newline character, and `%` to search for 'import' followed by a newline.

---

**Option 3: Use Regular Expressions with `REGEXP_LIKE`**

```sql
SELECT "content"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE REGEXP_LIKE("content", 'import.*\n')
LIMIT 100;
```

*Explanation:* This query uses `REGEXP_LIKE` to match any occurrence of 'import' followed by zero or more characters (including newlines, because `.` matches any character except newlines by default unless the `n` option is used) and then a newline character. If you want `.` to match newline characters as well, you can use the `s` modifier.

---

**Option 4: Use Regular Expressions to Match Any Whitespace**

```sql
SELECT "content"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE REGEXP_LIKE("content", 'import[[:space:]]*\(')
LIMIT 100;
```

*Explanation:* This query looks for 'import' followed by zero or more whitespace characters and then an opening parenthesis `(`. The `[[:space:]]*` matches any whitespace, including spaces, tabs, and newline characters.

---

**Why the Original Query Failed**

Your original query was:

```sql
SELECT "content"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE "content" ILIKE '%import%'\n'%'
LIMIT 100;
```

The error occurs because the `\n` is outside of the string literal and not correctly escaped. The SQL parser encounters an unexpected newline character, causing a syntax error. In SQL string literals, you must ensure that special characters are properly escaped or represented.

---

**Additional Notes:**

- **Escaping Characters:** In SQL string literals, to include a backslash, you often need to escape it with another backslash.
- **Using `CHR(10)`:** The `CHR(10)` function is useful for inserting ASCII control characters like the newline.
- **Regular Expressions:** Regular expressions provide a powerful way to search for patterns, including special characters like newlines.

---

**Recommendation:**

Try using **Option 2** or **Option 3**, as they are more reliable ways to include newline characters in your pattern matching within Snowflake SQL.

---

**Example Using Option 2:**

```sql
SELECT "content"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE "content" ILIKE '%import%' || CHR(10) || '%'
LIMIT 100;
```

This should execute without errors and return contents that have 'import' followed by a newline character.

---

**Proceeding with the Task:**

By correcting the query, you can continue exploring the data to fulfill the original task of identifying the top 10 most frequently used packages in the GitHub repository contents.

Feel free to ask if you need further assistance with modifying queries or interpreting results.
2025-02-12 20:34:55 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:34:55 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:34:55 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:34:57 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-02-12 20:34:59 - snowflake.connector.connection - INFO - closed
2025-02-12 20:34:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:36:07 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:36:07 - root - INFO - SQL:
SELECT "content"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE "content" ILIKE '%import%\\n%'
LIMIT 100;
Results:
Too long, hard cut:
content
"<?php
/**
 * Subclass for representing a row from the 'entry' table.
 *
 *
 *
 * @package Core
 * @subpackage model
 */
class entry extends Baseentry implements ISyncableFile, IIndexable, IOwnable, IRelatedObject
{
	protected $new_categories = '';
	protected $new_categories_ids = '';
	protected $old_categories;
	protected $is_categories_modified = false;
	protected $is_categories_names_modified = false;
	protected $creator_kuser_id = null;
	
	const MINIMUM_ID_TO_DISPLAY = 8999;
	
	const ROOTS_FIELD_PREFIX = 'K_Pref';
	const ROOTS_FIELD_ENTRY_PREFIX = 'KP_Entry';
	const ROOTS_FIELD_PARENT_ENTRY_PREFIX = 'KP_Parent';
	const ROOTS_FIELD_BULK_UPLOAD_PREFIX = 'KP_Bulk';

	// NOTE - CHANGES MUST BE MADE TO LAYOUT.PHP JS PART AS WELL
	// different sort orders for browsing entries
	const ENTRY_SORT_MOST_VIEWED = 0;
	const ENTRY_SORT_MOST_RECENT = 1;
	const ENTRY_SORT_MOST_COMMENTS = 2;
	const ENTRY_SORT_MOST_FAVORITES = 3;
	const ENTRY_SORT_RANK = 4;
	const ENTRY_SORT_MEDIA_TYPE = 5;
	const ENTRY_SORT_NAME = 6;
	const ENTRY_SORT_KUSER_SCREEN_NAME = 7;

	// NOTE - CHANGES MUST BE MADE TO LAYOUT.PHP JS PART AS WELL
	const ENTRY_MEDIA_TYPE_AUTOMATIC = -1;
	const ENTRY_MEDIA_TYPE_ANY = 0;
	const ENTRY_MEDIA_TYPE_VIDEO = 1;
	const ENTRY_MEDIA_TYPE_IMAGE = 2;
	const ENTRY_MEDIA_TYPE_TEXT = 3;
	const ENTRY_MEDIA_TYPE_HTML = 4;
	const ENTRY_MEDIA_TYPE_AUDIO = 5;
	const ENTRY_MEDIA_TYPE_SHOW = 6;
	const ENTRY_MEDIA_TYPE_SHOW_XML = 7; // for the kplayer: the data contains the xml itself and not a url
	const ENTRY_MEDIA_TYPE_BUBBLES = 9;
	const ENTRY_MEDIA_TYPE_XML = 10;
	const ENTRY_MEDIA_TYPE_DOCUMENT = 11;
	const ENTRY_MEDIA_TYPE_SWF = 12;
	const ENTRY_MEDIA_TYPE_PDF = 13;
	
	const ENTRY_MEDIA_TYPE_GENERIC_1= 101;	// these types can be used for derived classes - assume this is some kind of TXT file
	const ENTRY_MEDIA_TYPE_GENERIC_2= 102;	// these types can be used for derived classes
	const ENTRY_MEDIA_TYPE_GENERIC_3= 103;	// these types can be used for derived classes
	const ENTRY_MEDIA_TYPE_GENERIC_4= 104;	// these types can be used for derived classes
	
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_FLASH = 201;
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_WINDOWS_MEDIA = 202;
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_REAL_MEDIA = 203;
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_QUICKTIME = 204;
	
	// NOTE - CHANGES MUST BE MADE TO LAYOUT.PHP JS PART AS WELL
	const ENTRY_MEDIA_SOURCE_FILE = 1;
	const ENTRY_MEDIA_SOURCE_WEBCAM = 2;
	const ENTRY_MEDIA_SOURCE_FLICKR = 3;
	const ENTRY_MEDIA_SOURCE_YOUTUBE = 4;
	const ENTRY_MEDIA_SOURCE_URL = 5;
	const ENTRY_MEDIA_SOURCE_TEXT = 6;
	const ENTRY_MEDIA_SOURCE_MYSPACE = 7;
	const ENTRY_MEDIA_SOURCE_PHOTOBUCKET = 8;
	const ENTRY_MEDIA_SOURCE_JAMENDO = 9;
	const ENTRY_MEDIA_SOURCE_CCMIXTER = 10;
	const ENTRY_MEDIA_SOURCE_NYPL = 11;
	const ENTRY_MEDIA_SOURCE_CURRENT = 12;
	const ENTRY_MEDIA_SOURCE_MEDIA_COMMONS = 13;
	const ENTRY_MEDIA_SOURCE_KALTURA = 20;
	const ENTRY_MEDIA_SOURCE_KALTURA_USER_CLIPS = 21;
	const ENTRY_MEDIA_SOURCE_ARCHIVE_ORG = 22;
	const ENTRY_MEDIA_SOURCE_KALTURA_PARTNER = 23;
	const ENTRY_MEDIA_SOURCE_METACAFE = 24;
	const ENTRY_MEDIA_SOURCE_KALTURA_QA = 25;
	const ENTRY_MEDIA_SOURCE_KALTURA_KSHOW = 26;
	const ENTRY_MEDIA_SOURCE_KALTURA_PARTNER_KSHOW = 27;
	const ENTRY_MEDIA_SOURCE_SEARCH_PROXY = 28;
	const ENTRY_MEDIA_SOURCE_AKAMAI_LIVE = 29;
	const ENTRY_MEDIA_SOURCE_MANUAL_LIVE_STREAM = 30;
	const ENTRY_MEDIA_SOURCE_AKAMAI_UNIVERSAL_LIVE = 31;
	const ENTRY_MEDIA_SOURCE_LIVE_STREAM = 32;
	const ENTRY_MEDIA_SOURCE_LIVE_CHANNEL = 33;
	const ENTRY_MEDIA_SOURCE_RECORDED_LIVE = 34;
	const ENTRY_MEDIA_SOURCE_CLIP = 35;
	const ENTRY_MEDIA_SOURCE_PARTNER_SPECIFIC = 100;
		
	const ENTRY_MODERATION_STATUS_PENDING_MODERATION = 1;
	const ENTRY_MODERATION_STATUS_APPROVED = 2;
	const ENTRY_MODERATION_STATUS_REJECTED = 3;
	const ENTRY_MODERATION_STATUS_FLAGGED_FOR_REVIEW = 5;
	const ENTRY_MODERATION_STATUS_AUTO_APPROVED = 6;
	
	const MAX_NORMALIZED_RANK = 5;

	const MAX_CATEGORIES_PER_ENTRY = 32;
	const MAX_CATEGORIES_PER_ENTRY_DISABLE_LIMIT_FEATURE = 200;
	
	const FILE_SYNC_ENTRY_SUB_TYPE_DATA = 1;
	const FILE_SYNC_ENTRY_SUB_TYPE_DATA_EDIT = 2;
	const FILE_SYNC_ENTRY_SUB_TYPE_THUMB = 3;
	const FILE_SYNC_ENTRY_SUB_TYPE_ARCHIVE = 4;
	const FILE_SYNC_ENTRY_SUB_TYPE_DOWNLOAD = 5;
	const FILE_SYNC_ENTRY_SUB_TYPE_OFFLINE_THUMB = 6;
	const FILE_SYNC_ENTRY_SUB_TYPE_ISM = 7;
	const FILE_SYNC_ENTRY_SUB_TYPE_ISMC = 8;
	const FILE_SYNC_ENTRY_SUB_TYPE_CONVERSION_LOG = 9;
	const FILE_SYNC_ENTRY_SUB_TYPE_LIVE_PRIMARY = 10; 
	const FILE_SYNC_ENTRY_SUB_TYPE_LIVE_SECONDARY = 11; 
	
	const MIX_EDITOR_TYPE_SIMPLE = 1;
	const MIX_EDITOR_TYPE_ADVANCED = 2;
	
	const ENTRY_DURATION_TYPE_NOTAVAILABLE = ""notavailable"";
	const ENTRY_DURATION_TYPE_SHORT = ""short"";
	const ENTRY_DURATION_TYPE_MEDIUM = ""medium"";
	const ENTRY_DURATION_TYPE_LONG = ""long"";
	
	const ENTRY_CATEGORY_ESCAPE = ""_"";
	const ENTRY_CATEGORY_SEPARATOR = "","";
	
	const ENTRY_ID_THAT_DOES_NOT_EXIST = 0;
	
	const CATEGORY_SEARCH_PERFIX = 'c';
	const

2025-02-12 20:36:07 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:36:07 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:36:07 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:36:09 - snowflake.connector.cursor - INFO - Number of results in first chunk: 2
2025-02-12 20:36:10 - snowflake.connector.connection - INFO - closed
2025-02-12 20:36:10 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:36:11 - root - INFO - SQL:
SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%import%"%"%'
   LIMIT 100;
Results:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd

2025-02-12 20:36:11 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:36:11 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:36:11 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:36:12 - snowflake.connector.cursor - INFO - Number of results in first chunk: 13
2025-02-12 20:36:13 - snowflake.connector.connection - INFO - closed
2025-02-12 20:36:14 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:36:14 - root - INFO - SQL:
SELECT "sample_path", "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "sample_path" ILIKE '%.py'
   LIMIT 100;
Results:
Too long, hard cut:
sample_path,content
src/pyudev/_ctypeslib/__init__.py,"# -*- coding: utf-8 -*-
# Copyright (C) 2015 mulhern <amulhern@redhat.com>

# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation; either version 2.1 of the License, or (at your
# option) any later version.

# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
# for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

""""""
    pyudev._ctypeslib
    =================

    Wrappers for libraries.

    .. moduleauthor::  mulhern  <amulhern@redhat.com>
""""""

from . import libc
from . import libudev
"
networking_cisco/neutronclient/policyprofile.py,"# Copyright 2015 Cisco Systems, Inc.
# All rights reserved.
#
#    Licensed under the Apache License, Version 2.0 (the ""License""); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#

from neutronclient.common import extension


class PolicyProfile(extension.NeutronClientExtension):
    resource = 'policy_profile'
    resource_plural = '%ss' % resource
    object_path = '/%s' % resource_plural
    resource_path = '/%s/%%s' % resource_plural
    versions = ['2.0']
    allow_names = True


class PolicyProfileList(extension.ClientExtensionList, PolicyProfile):
    """"""List policy profiles that belong to a given tenant.""""""

    shell_command = 'cisco-policy-profile-list'
    list_columns = ['id', 'name']
    pagination_support = True
    sorting_support = True


class PolicyProfileShow(extension.ClientExtensionShow, PolicyProfile):
    """"""Show information of a given policy profile.""""""

    shell_command = 'cisco-policy-profile-show'
"
base_contact/__openerp__.py,"# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Business Applications
#    Copyright (C) 2013-TODAY OpenERP S.A. (<http://openerp.com>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

{
    'name': 'Contacts Management',
    'summary': u""[DEPRECATED] Manage your contacts separately"",
    'version': '8.0.2.0.0',
    'author': ""OpenERP SA,Odoo Community Association (OCA)"",
    'website': 'http://www.openerp.com',
    'category': 'Customer Relationship Management',
    'depends': [
        'partner_contact_birthdate',
        'partner_contact_in_several_companies',
        'partner_contact_nationality',
    ],
    'installable': False,
}
"
GPy/testing/state_space_main_tests.py,"# -*- coding: utf-8 -*-
# Copyright (c) 2015, Alex Grigorevskiy
# Licensed under the BSD 3-clause license (see LICENSE.txt)
""""""
Test module for state_space_main.py
""""""

import unittest
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

import GPy.models.state_space_setup as ss_setup
import GPy.models.state_space_main as ssm

def generate_x_points(points_num=100, x_interval = (0, 20), random=True):
    """"""
    Function generates (sorted) points on the x axis.
    
    Input:
    ---------------------------
        points_num: int
            How many points to generate
        x_interval: tuple (a,b)
            On which interval to generate points
        random: bool
            Regular points or random
    
    Output:
    ---------------------------
        x_points: np.array
            Generated points
    """"""
    
    x_interval = np.asarray( x_interval )

    if random:
        x_points = np.random.rand(points_num) 

2025-02-12 20:36:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:36:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:36:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:36:16 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 20:36:16 - snowflake.connector.connection - INFO - closed
2025-02-12 20:36:16 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:36:16 - root - INFO - SQL:
SELECT DISTINCT REGEXP_SUBSTR("content", '"([^"]+)"') AS "package_name"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%"%"%'
    LIMIT 100;
Results:
package_name
"""notavailable"""
"""pnode.h"""
"""sql_priv.h"""
"""
Test module for state_space_main.py
"""
"""query_string"""
"""/status"""
"""AKOEditorrificDelegate.h"""
"""i2p.naming.exec.command"""
"""a"""
"""mailto:jclasslib@ej-technologies.com"""
"""method"""
"""compass/reset"""
"""NSCoding not supported"""
"""utf-8"""
""" ("""
"""introduction"""
"""C#"""
"""
        Returns an dictionary sorted by the position of the respective field
        in its form.

        :param boolean exclude_missing: If ``True``, non-filled fields (those
            whose value evaluates to ``False`` are not present in the returned
            dictionary. Default: ``False``
        """
"""193.0.20/24"""
"""The menu item doesn't exist"""
"""
msgstr """
"""8'                        d"""
"""Software"""
"""C"""
"""after"""
"""http://d.android.com/tools/testing/testing_android.html"""
"""mixins/all"""
"""Returns the default slices.
    """
"""ProxGradShareGLRM"""
"""PLDLinkBankMFABaseStepView.h"""
"""/"""
"""ProductSpecificationValue.h"""
"""' . $value . '"""
"""Exchange Energy (Item): %s"""
"""Model mixins for `lino.modlib.countries`.

These include :class:`CountryCity`, :class:`CountryRegionCity` and
:class:`AddressLocation`.

"""
"""io-port"""
"""minimum"""
""
"""POST"""
"""http://clarkparsia.com/"""
"""/signin/"""
"""no-js"""
"""org.eclipse.ice.io.writer"""
"""serial"""
"""http://java.sun.com/xml/jaxb"""
"""dropdown"""
"""The device's internal counter was was smaller than expected. It's possible that the device has been cloned!"""
"""Utilities for testing"""
"""function"""
""" """
"""integration_test_helper"""
"""$directory1\Some solution"""
"""127.0.0.1"""
"""%s/%s"""
"""PFTwitterAuthenticationProvider.h"""
"""Colour..."""
""".pde"""
"""error"""
"""github.com/cloudfoundry/bosh-utils/errors"""
"""errors"""
"""unchecked"""
"""RecipeItem.h"""
"""ICurrencyRate"""
"""graph { fill-color: #141F2E; }"""
"""//build/config/ui.gni"""
"""PTDBean.h"""
"""os"""
"""
Common views dedicated to rendering xblocks.
"""
"""Classpath"""
"""pathsys.h"""
""" fs -copyFromLocal """
"""Converter for data from the ILSVRC 2010 competition.

    Source files for this dataset can be obtained by registering at
    [ILSVRC2010WEB].

    Parameters
    ----------
    input_directory : str
        Path from which to read raw data files.
    output_directory : str
        Path to which to save the HDF5 file.
    output_filename : str, optional
        The output filename for the HDF5 file. Default: 'ilsvrc2010.hdf5'.
    shuffle_seed : int or sequence, optional
        Seed for a random number generator used to shuffle the order
        of the training set on disk, so that sequential reads will not
        be ordered by class.

    .. [ILSVRC2010WEB] http://image-net.org/challenges/LSVRC/2010/index

    """
"""sync"""
"""just win"""
"""comedies"""
"""derived works"""
"""/com/openbravo/images/edit_group.png"""
"""button"""
"""flat"""
"""
Copyright (c) 2003-2010  Gustavo Niemeyer <gustavo@niemeyer.net>

This module offers extensions to the standard python 2.3+
datetime module.
"""
"""test"""
"""P9_14"""
"""bytes"""
"""countryId is null."""
"""tests for `preprocess`"""
"""ace/mode/doc_comment_highlight_rules"""
"""UTF-8"""
"""DCFrameView.h"""
"""
Tags are entities that are attached to objects in the same way as
Attributes. But contrary to Attributes, which are unique to an
individual object, a single Tag can be attached to any number of
objects at the same time.

Tags are used for tagging, obviously, but the data structure is also
used for storing Aliases and Permissions. This module contains the
respective handlers.

"""
"""#text"""
"""abc"""
"""Checking backward compatibility of old formats of tables."""
"""HCIsCollectionOnlyContaining.h"""
"""NSTableView"""
"""voteType"""
"""algo class error"""
"""
#include <openssl/asn1.h>
"""
"""singleton"""
"""unused"""
"""key"""

2025-02-12 20:36:16 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:36:16 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:36:16 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:36:18 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 20:36:18 - snowflake.connector.connection - INFO - closed
2025-02-12 20:36:18 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:36:18 - root - INFO - SQL:
SELECT REGEXP_SUBSTR("content", '"([^"]+)"') AS "package_name", COUNT(*) AS "frequency"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%"%"%'
    GROUP BY "package_name"
    ORDER BY "frequency" DESC
    LIMIT 100;
Results:
package_name,frequency
"""License""",590
"""1.0""",146
"""Software""",67
"""AS IS""",60
"""fmt""",32
"""
msgstr """,18
"""bytes""",18
"""Classpath""",15
"""unchecked""",13
"""use strict""",11
""" """,10
,10
"""/""",10
"""-//W3C//DTD XHTML 1.0 Transitional//EN""",10
"""errors""",9
"""AppDelegate.h""",8
"""name""",8
"""utf-8""",8
"""__main__""",7
"""react""",7
"""${ZSH_VERSION+set}""",7
"""object""",7
"""encoding/json""",7
"""UTF-8""",7
"""config.h""",7
"""http://java.sun.com/xml/jaxb""",6
"""testing""",6
""".""",6
"""#""",6
"""CDStructures.h""",6
"""function""",5
"""encoding/binary""",5
"""rawtypes""",5
"""ace/mode/doc_comment_highlight_rules""",5
"""en""",5
"""test""",5
"""$""",5
"""cells""",5
"""id""",5
"""C""",4
"""1""",4
"""bufio""",4
"""\n""",4
"""error""",4
"""serial""",4
"""strings""",4
"""package:expect/expect.dart""",4
"""http://d.android.com/tools/testing/testing_android.html""",4
"""x""",4
"""default""",4
"""Content-Type""",4
"""deprecation""",4
"""Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** """,4
"""unused""",3
"""version""",3
"""__""",3
"""as is""",3
"""-//W3C//DTD HTML 4.01 Transitional//EN""",3
"""Helvetica Neue""",3
"""math""",3
"""flag""",3
"""crypto""",3
"""'""",3
"""Licensee""",3
"""COPYING""",3
"""sort""",3
"""hunch_net""",3
"""admin""",3
"""os""",3
"""string""",3
"""[""",3
"""reflect""",3
"""text""",3
"""-//W3C//DTD HTML 4.0 Transitional//EN""",3
"""type""",3
"""net""",3
"""Apple""",3
"""value""",3
"""true""",3
"""ViewController.h""",3
"""import""",3
"""Pass""",3
"""button""",3
"""0""",3
"""after""",2
"""io/ioutil""",2
"""a""",2
"""C#""",2
"""s""",2
"""bottom attached""",2
"""internal.h""",2
"""POST""",2
"""Open Sans""",2
"""project""",2
"""127.0.0.1""",2
"""i""",2
"""system message""",2
"""-//W3C//DTD XHTML 1.1//EN""",2
"""title""",2
"""{http://www.w3.org/2001/XMLSchema}anyType""",2

2025-02-12 20:36:18 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:36:18 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:36:18 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:36:20 - snowflake.connector.cursor - INFO - Number of results in first chunk: 2
2025-02-12 20:36:22 - snowflake.connector.connection - INFO - closed
2025-02-12 20:36:22 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:36:22 - root - INFO - SQL:
SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
      AND "content" LIKE '%\n%'
    LIMIT 100;
Results:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd

2025-02-12 20:36:22 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:36:22 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:36:22 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:36:23 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-02-12 20:36:24 - snowflake.connector.connection - INFO - closed
2025-02-12 20:36:25 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:36:25 - root - INFO - SQL:
SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "binary" = FALSE
    LIMIT 100;
Results:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd

2025-02-12 20:36:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:36:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:36:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:36:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-02-12 20:36:28 - snowflake.connector.connection - INFO - closed
2025-02-12 20:36:29 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:36:29 - root - INFO - SQL:
SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" IS NOT NULL AND "content" ILIKE '%import%'
    LIMIT 100;
Results:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd

2025-02-12 20:36:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:36:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:36:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:36:31 - snowflake.connector.cursor - INFO - Number of results in first chunk: 15
2025-02-12 20:36:32 - snowflake.connector.connection - INFO - closed
2025-02-12 20:36:32 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:36:32 - root - INFO - SQL:
SELECT "content", "size"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "size" > 1000
    LIMIT 100;
Results:
Too long, hard cut:
content,size
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString

2025-02-12 20:36:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:36:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:36:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:36:34 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 20:36:34 - snowflake.connector.connection - INFO - closed
2025-02-12 20:36:34 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:36:35 - root - INFO - SQL:
SELECT DISTINCT "sample_path"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%'
    LIMIT 100;
Results:
Too long, hard cut:
sample_path
src/pyudev/_ctypeslib/__init__.py
alpha/lib/model/entry.php
flexmojos-testing/flexmojos-test-harness/src/test/java/net/flexmojos/oss/tests/concept/AttachAsdocTest.java
fs/namespace.c
sql/log_event.cc
pcap4j-core/src/main/java/org/pcap4j/core/NativePacketDllMappings.java
src/components/com_kunena/template/crypsis/assets/less/mediaqueries.less
metric2/ProductMetric.v
jca/src/main/java/org/apache/qpid/ra/tm/WLSTransactionManagerLocator.java
uimaj-json/src/main/java/org/apache/uima/json/impl/MetaDataObjectSerializer_json.java
objc/11-InstancedDrawing/InstancedDrawing/MBETypes.h
src/java/net/p455w0rd/wirelesscraftingterminal/core/sync/packets/PacketSetMagnet.java
YTZImageComparison/YTZMainColour.m
Core/Utility/Serialization/CerealBehaviour.cs.meta
packages/connect/src/template
src/test/java/edu/jhuapl/tinkerpop/mapreduce/InputFormatsTest.java
xmloff/source/style/PageMasterStyleMap.cxx
cdk-morphlines/cdk-morphlines-hadoop-core/src/test/java/com/cloudera/cdk/morphline/hadoop/core/MiniDFSTest.java
definitions/npm/redux-form_v5.x.x/test_redux-form_v5.js
gradle/wrapper/dists/gradle-2.2.1-all/c64ydeuardnfqctvr1gm30w53/gradle-2.2.1/src/dependency-management/org/gradle/api/internal/notations/ModuleIdentiferNotationParser.java
luigi_bigquery/config.py
utils.py
Unity 5.1 Source Project/Project/Assets/PlayFabClientSDK/Playfab/PlayFabSDK/JsonFx.meta
docs-api/deep-log/file/lib/Driver/Exception/InvalidSqsQueueUrlException.js.html
jta26/html/applet.conf
README.md
lib/atlas/schema.ex
vlo-web-app/src/main/java/eu/clarin/cmdi/vlo/wicket/model/CollectionMapEntryModel.java
Unity Project/Assets/Magicolo/GeneralTools/CustomEnums.cs.meta
server/src/scripts/ext1protoc.sh
citeproc-java/src/main/java/de/undercouch/citeproc/bibtex/NameParser.java
examples/example9/Example9.java
cloudfoundry-client/src/main/java/org/cloudfoundry/client/v2/userprovidedserviceinstances/_ListUserProvidedServiceInstancesResponse.java
mendeley/resources/groups.py
Services/Accounts/PasswordChallenge.cs.meta
echo-core/src/test/groovy/com/netflix/spinnaker/echo/services/Front50ServiceSpec.groovy
udark/underdark/src/main/java/impl/underdark/transport/bluetooth/discovery/Advertiser.java
scripts/encrypt.py
shared/src/main/scala/squants/motion/Momentum.scala
main/source/org/apach3/http/nio/NHttpServerEventHandler.java
Externals/AKOEditorrific/AKOEditorrific.h
core/src/com/clarkparsia/owlwg/testrun/SyntaxConstraintRun.java
Source/Home Screen/TransfersCellView.m
sources/DNTSettingsService.h
server/connect/networkCache.go
github-pullrequest-plugin/src/main/java/org/jenkinsci/plugins/github/pullrequest/events/impl/GitHubPRNonMergeableEvent.java
src/edu/fudan/ontology/graph/SparseMatrixT.java
Source/CAB/EntityWorkItem/EntitytWorkItem.cst
DKNightVersion/UIKit/UIProgressView+Night.m
pluginsTest/sandLanguage/src/org/mustbe/consulo/sandLanguage/ide/vfs/backgroundTask/SandBackgroundTaskByVfsChangeProvider.java
app/css/_modal.scss
app/src/main/java/com/github/baoti/pioneer/ui/news/list/INewsListView.java
toonz/sources/include/tw/fxbrowser.h
Pods/ReactiveCocoa/ReactiveCocoaFramework/ReactiveCocoa/RACBacktrace.m
aura/src/test/java/org/auraframework/test/util/AdaptiveWebElement.java
langtools/test/tools/javac/processing/model/element/TestElement.java
learn-liferay620-services/src/main/scala/com/arcusys/learn/liferay/constants/LayoutConstantsHelper.scala
plugins/plugin-git/che-plugin-git-ext-git/src/main/java/org/eclipse/che/ide/ext/git/client/reset/files/ResetFilesViewImpl.ui.xml
plugins/ui-designer/src/com/intellij/uiDesigner/actions/PreviewFormAction.java
unit-tests/src/test/java/com/gs/collections/impl/set/fixed/QuadrupletonSetTest.java
DemoApplication/Demo Application.csproj
plugins/ui-designer/src/com/intellij/uiDesigner/actions/CreateComponentAction.java
src/main/java/net/rubyeye/xmemcached/networking/Connector.java
src/l1j/server/server/model/skill/executor/L1Disease.java
src/api/java/li/cil/oc/api/component/package-info.java
jme3-core/src/test/java/com/jme3/material/plugins/LoadJ3mdTest.java
langtools/test/tools/javac/api/file/SJFM_GetFileObjects.java
tools/sqlmap/plugins/generic/search.py
library/src/main/java/eu/inmite/android/lib/validations/form/validators/ValueValidator.java
src/main/java/com/mashape/unirest/request/body/RequestBodyEntity.java
modules/graphics/src/main/native-glass/ios/GlassApplication.h
gemrb/GUIScripts/bg1/ImportFile.py
validation-test/compiler_crashers_fixed/27617-swift-markasobjc.swift
core/src/main/java/org/springframework/security/authentication/package-info.java
hyracks-fullstack/hyracks/hyracks-control/hyracks-control-common/src/main/java/org/apache/hyracks/control/common/ipc/ClusterControllerRemoteProxy.java
mycollab-mobile/src/main/java/com/esofthead/mycollab/mobile/module/crm/events/OpportunityEvent.java
gcc/gcc/cp/pt.c
state/machine_test.go
components/erRemoveDelegateRequest.js
src/contrib/capacity-scheduler/src/java/org/apache/hadoop/mapred/CapacitySchedulerConf.java
sql/sql_partition.cc
PowerEditor/src/WinControls/TabBar/TabBa

2025-02-12 20:36:35 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:36:35 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:36:35 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:36:36 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-02-12 20:36:36 - snowflake.connector.connection - INFO - closed
2025-02-12 20:36:36 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:37:01 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:37:01 - root - INFO - ```sql
SELECT DISTINCT "sample_path"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
LIMIT 100;
```
2025-02-12 20:37:02 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:37:02 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:37:02 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:37:03 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 20:37:03 - snowflake.connector.connection - INFO - closed
2025-02-12 20:37:03 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:37:33 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:37:33 - root - INFO - SQL:
SELECT DISTINCT "sample_path"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
LIMIT 100;
Results:
Too long, hard cut:
sample_path
common/thrift/CatalogService.thrift
socketcan_interface/CMakeLists.txt
bin/php7_linux1/bin/mbedtls_dh_client
src/pocketmine/block/Sugarcane.php
Install/Help/commands/3dmaths/SCALE VECTOR2.htm
src/cinder/app/linux/WindowImplLinuxEgl.cpp
libjava/javax/naming/spi/NamingManager.java
lionengine-network/src/main/java/com/b3dgs/lionengine/network/Networker.java
top_down_classifier/src/top_down_classifier/volume_visualizer.h
networking_cisco/neutronclient/policyprofile.py
third-party/org.svnkit/org/tmatesoft/svn/core/internal/wc2/ng/SvnNgRepositoryAccess.class
share/gamedir/levels/ctf_duel2/sprites/flag_y.bmp
aws-cpp-sdk-route53/include/aws/route53/model/CreateTrafficPolicyInstanceRequest.h
backend/colorAdmin/form_editable.html
src/BCR/BCRexternalBWT.cpp
util/robodoc/Source/robodoc.c
myblockchain-test/suite/rpl/r/rpl_loaddata_s.result
myblockchain-test/suite/ndb_rpl/r/ndb_rpl_mixed_tables.result
resources/assets/storagedrawers/textures/blocks/indicator/void_icon.png
GPy/testing/state_space_main_tests.py
tooling/support/provisioning-model/pom.xml
src/java/org/apache/cassandra/db/commitlog/ReplayPosition.java
chrome/browser/signin/about_signin_internals.cc
core/sis-metadata/src/test/java/org/apache/sis/metadata/iso/DefaultMetadataTest.java
src/include/platform.h
lib/padding/pad_variable.m
clients/java/src/main/java/com/senseidb/search/client/req/SenseiClientRequest.java
sal/qa/rtl/strings/test_oustring_compare.cxx
source/stylesheets/modules/_sortable.scss
bin/Skylark.dll.config
pos_position/cv483_16378.txt
src/main/webapp/fonts/DigitalDream/DIGITALDREAMNARROW-webfont.ttf
checks/decru_fans
grails-app/controllers/TagController.groovy
src/libc/stdio/FreeBSD/clrerr.c
CommonProjects/AMDTBaseTools/Include/gtStringTokenizer.h
libs/SDL2_ttf-2.0.14/debian/copyright
lionengine-core/src/main/java/com/b3dgs/lionengine/drawable/Image.java
src/main/resources/templates/layout/app.jade
spec/models/i18n_spec.rb
dbaccess/source/ui/misc/datasourceconnector.cxx
SystemEx/Windows/Forms/IpcHelper.cs
Assets/Scripts/HarryPotterUnity/Cards/Quidditch/Spells/QuickThinking.cs
authmodules/TYPO3/privacyidea/Resources/Private/Language/locallang.xlf
assets/src/scss/components/_logo.scss
Assets/Graphics/Big.psd
Product/Production/Services/PatientDiscoveryCore/src/main/java/gov/hhs/fha/nhinc/patientdiscovery/model/builder/impl/PatientSearchResultsModelBuilderImpl.java
third_party/skia/src/gpu/effects/GrConfigConversionEffect.cpp
deps/icu4c/source/i18n/hebrwcal.cpp
mapfishapp/src/main/java/org/georchestra/mapfishapp/ws/upload/FeatureGeoFileReader.java
uimaj-core/src/main/java/org/apache/uima/collection/CasConsumerDescription.java
whois-endtoend/src/test/java/net/ripe/db/whois/changedphase3/util/Scenario.java
JGTL/JGTL_API/latex/class_j_g_t_l_1_1_hex_tree_branch.tex
resources/CAVP/Vectors/OpenSSL/testvectors.SuSE/testvectors/sha/req/SHA256Monte.req
test/ddiff.052.clit
common/java/core/net/i2p/client/naming/ExecNamingService.java
third_party/skia/src/gpu/gl/GrGLProgram.cpp
pack.cmd
spec/test_app/spec-opal/active_record/update_associations_spec.rb
classes/time_series/@ts/acosh.m
html/partials/compare/os_table.html.haml
app/src/main/res/drawable-xxxhdpi/ic_headphones_grey600_48dp.png
app/src/main/res/drawable/key8.png
src/libs/css/daterangepicker-bs3.css
util/misc/cdna_fasta_file_to_transcript_gtf.pl
docs/html/T_AForge_Video_Ximea_XimeaCamera.htm
chromium/src/third_party/WebKit/Source/modules/webaudio/OfflineAudioDestinationNode.h
Helpers/INRIAEval/data-USA/annotations/set06/V017.vbb
include/bot-logic/behaviour_drive_neuralnet.h
src/Scriban.Tests/TestFiles/100-expressions/150-range-expression.txt
application/var/generation/Magento/AdminNotification/Controller/Adminhtml/Notification/Remove/Interceptor.php
test/VisualStudio.Test/VisualStudio.Test.csproj
subjectivity/objective/default/file4850
conda_manager/__init__.py
Vendor Firmware/Kinetis SDK v.1.3.0 API Reference Manual/fsl__clock__MKV40F15_8h.html
xxl-job-admin/src/main/java/com/xxl/job/admin/core/jobbean/impl/DemoConcurrentJobBean.java
dev.watchr.rb
.settings/org.eclipse.core.resources.prefs
virtual_memory.h
ArcFormats/BlackCyc/ArcGPK.cs
src/main/java/io/mycat/manager/response/ShowSQLSumUser.java
tapestry-core/src/test/java/org/apache/tapestry5/ContentTypeTest.java
vio/vio.c
Modules/BetterCms.Module.Root/Commands/Tag/SaveTag/SaveTagCommand.cs
lib/entities/plants/peatbog.dart
src/filesystem/ZWorkerPool.h
third-party/org.carrot2.api/javadoc/org/carrot2/text/preprocessing/CaseNormalizerDescriptor.Keys.html
core/lib/dr_config.h
ME3Explorer/Resources/property_database_64x64.png
module/plugins/crypter/UploadableChFolder.py
build.xml
content/browser/indexed_db/indexed_db_quota_client.cc
core/sis-referencing/src/main/java/org/apache/sis/referencing/datum/DefaultPrimeMeridian.java
streamingUpdate/seq1.c
grammars/unosln.cson
plugins/BackendTheme/src/Template/Element/settings.ctp
FAQ-USER
commonjs/google-map/map.js
tapestry-core/src/test/java/org/apache/tapestry5/internal/services/RequestPathOptimizer

2025-02-12 20:37:33 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:37:33 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:37:33 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:37:35 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-02-12 20:37:36 - snowflake.connector.connection - INFO - closed
2025-02-12 20:37:36 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:37:37 - root - INFO - SQL:
SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%"%")%'
    LIMIT 100;
Results:
Too long, hard cut:
content
"<?php
/**
 * Subclass for representing a row from the 'entry' table.
 *
 *
 *
 * @package Core
 * @subpackage model
 */
class entry extends Baseentry implements ISyncableFile, IIndexable, IOwnable, IRelatedObject
{
	protected $new_categories = '';
	protected $new_categories_ids = '';
	protected $old_categories;
	protected $is_categories_modified = false;
	protected $is_categories_names_modified = false;
	protected $creator_kuser_id = null;
	
	const MINIMUM_ID_TO_DISPLAY = 8999;
	
	const ROOTS_FIELD_PREFIX = 'K_Pref';
	const ROOTS_FIELD_ENTRY_PREFIX = 'KP_Entry';
	const ROOTS_FIELD_PARENT_ENTRY_PREFIX = 'KP_Parent';
	const ROOTS_FIELD_BULK_UPLOAD_PREFIX = 'KP_Bulk';

	// NOTE - CHANGES MUST BE MADE TO LAYOUT.PHP JS PART AS WELL
	// different sort orders for browsing entries
	const ENTRY_SORT_MOST_VIEWED = 0;
	const ENTRY_SORT_MOST_RECENT = 1;
	const ENTRY_SORT_MOST_COMMENTS = 2;
	const ENTRY_SORT_MOST_FAVORITES = 3;
	const ENTRY_SORT_RANK = 4;
	const ENTRY_SORT_MEDIA_TYPE = 5;
	const ENTRY_SORT_NAME = 6;
	const ENTRY_SORT_KUSER_SCREEN_NAME = 7;

	// NOTE - CHANGES MUST BE MADE TO LAYOUT.PHP JS PART AS WELL
	const ENTRY_MEDIA_TYPE_AUTOMATIC = -1;
	const ENTRY_MEDIA_TYPE_ANY = 0;
	const ENTRY_MEDIA_TYPE_VIDEO = 1;
	const ENTRY_MEDIA_TYPE_IMAGE = 2;
	const ENTRY_MEDIA_TYPE_TEXT = 3;
	const ENTRY_MEDIA_TYPE_HTML = 4;
	const ENTRY_MEDIA_TYPE_AUDIO = 5;
	const ENTRY_MEDIA_TYPE_SHOW = 6;
	const ENTRY_MEDIA_TYPE_SHOW_XML = 7; // for the kplayer: the data contains the xml itself and not a url
	const ENTRY_MEDIA_TYPE_BUBBLES = 9;
	const ENTRY_MEDIA_TYPE_XML = 10;
	const ENTRY_MEDIA_TYPE_DOCUMENT = 11;
	const ENTRY_MEDIA_TYPE_SWF = 12;
	const ENTRY_MEDIA_TYPE_PDF = 13;
	
	const ENTRY_MEDIA_TYPE_GENERIC_1= 101;	// these types can be used for derived classes - assume this is some kind of TXT file
	const ENTRY_MEDIA_TYPE_GENERIC_2= 102;	// these types can be used for derived classes
	const ENTRY_MEDIA_TYPE_GENERIC_3= 103;	// these types can be used for derived classes
	const ENTRY_MEDIA_TYPE_GENERIC_4= 104;	// these types can be used for derived classes
	
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_FLASH = 201;
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_WINDOWS_MEDIA = 202;
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_REAL_MEDIA = 203;
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_QUICKTIME = 204;
	
	// NOTE - CHANGES MUST BE MADE TO LAYOUT.PHP JS PART AS WELL
	const ENTRY_MEDIA_SOURCE_FILE = 1;
	const ENTRY_MEDIA_SOURCE_WEBCAM = 2;
	const ENTRY_MEDIA_SOURCE_FLICKR = 3;
	const ENTRY_MEDIA_SOURCE_YOUTUBE = 4;
	const ENTRY_MEDIA_SOURCE_URL = 5;
	const ENTRY_MEDIA_SOURCE_TEXT = 6;
	const ENTRY_MEDIA_SOURCE_MYSPACE = 7;
	const ENTRY_MEDIA_SOURCE_PHOTOBUCKET = 8;
	const ENTRY_MEDIA_SOURCE_JAMENDO = 9;
	const ENTRY_MEDIA_SOURCE_CCMIXTER = 10;
	const ENTRY_MEDIA_SOURCE_NYPL = 11;
	const ENTRY_MEDIA_SOURCE_CURRENT = 12;
	const ENTRY_MEDIA_SOURCE_MEDIA_COMMONS = 13;
	const ENTRY_MEDIA_SOURCE_KALTURA = 20;
	const ENTRY_MEDIA_SOURCE_KALTURA_USER_CLIPS = 21;
	const ENTRY_MEDIA_SOURCE_ARCHIVE_ORG = 22;
	const ENTRY_MEDIA_SOURCE_KALTURA_PARTNER = 23;
	const ENTRY_MEDIA_SOURCE_METACAFE = 24;
	const ENTRY_MEDIA_SOURCE_KALTURA_QA = 25;
	const ENTRY_MEDIA_SOURCE_KALTURA_KSHOW = 26;
	const ENTRY_MEDIA_SOURCE_KALTURA_PARTNER_KSHOW = 27;
	const ENTRY_MEDIA_SOURCE_SEARCH_PROXY = 28;
	const ENTRY_MEDIA_SOURCE_AKAMAI_LIVE = 29;
	const ENTRY_MEDIA_SOURCE_MANUAL_LIVE_STREAM = 30;
	const ENTRY_MEDIA_SOURCE_AKAMAI_UNIVERSAL_LIVE = 31;
	const ENTRY_MEDIA_SOURCE_LIVE_STREAM = 32;
	const ENTRY_MEDIA_SOURCE_LIVE_CHANNEL = 33;
	const ENTRY_MEDIA_SOURCE_RECORDED_LIVE = 34;
	const ENTRY_MEDIA_SOURCE_CLIP = 35;
	const ENTRY_MEDIA_SOURCE_PARTNER_SPECIFIC = 100;
		
	const ENTRY_MODERATION_STATUS_PENDING_MODERATION = 1;
	const ENTRY_MODERATION_STATUS_APPROVED = 2;
	const ENTRY_MODERATION_STATUS_REJECTED = 3;
	const ENTRY_MODERATION_STATUS_FLAGGED_FOR_REVIEW = 5;
	const ENTRY_MODERATION_STATUS_AUTO_APPROVED = 6;
	
	const MAX_NORMALIZED_RANK = 5;

	const MAX_CATEGORIES_PER_ENTRY = 32;
	const MAX_CATEGORIES_PER_ENTRY_DISABLE_LIMIT_FEATURE = 200;
	
	const FILE_SYNC_ENTRY_SUB_TYPE_DATA = 1;
	const FILE_SYNC_ENTRY_SUB_TYPE_DATA_EDIT = 2;
	const FILE_SYNC_ENTRY_SUB_TYPE_THUMB = 3;
	const FILE_SYNC_ENTRY_SUB_TYPE_ARCHIVE = 4;
	const FILE_SYNC_ENTRY_SUB_TYPE_DOWNLOAD = 5;
	const FILE_SYNC_ENTRY_SUB_TYPE_OFFLINE_THUMB = 6;
	const FILE_SYNC_ENTRY_SUB_TYPE_ISM = 7;
	const FILE_SYNC_ENTRY_SUB_TYPE_ISMC = 8;
	const FILE_SYNC_ENTRY_SUB_TYPE_CONVERSION_LOG = 9;
	const FILE_SYNC_ENTRY_SUB_TYPE_LIVE_PRIMARY = 10; 
	const FILE_SYNC_ENTRY_SUB_TYPE_LIVE_SECONDARY = 11; 
	
	const MIX_EDITOR_TYPE_SIMPLE = 1;
	const MIX_EDITOR_TYPE_ADVANCED = 2;
	
	const ENTRY_DURATION_TYPE_NOTAVAILABLE = ""notavailable"";
	const ENTRY_DURATION_TYPE_SHORT = ""short"";
	const ENTRY_DURATION_TYPE_MEDIUM = ""medium"";
	const ENTRY_DURATION_TYPE_LONG = ""long"";
	
	const ENTRY_CATEGORY_ESCAPE = ""_"";
	const ENTRY_CATEGORY_SEPARATOR = "","";
	
	const ENTRY_ID_THAT_DOES_NOT_EXIST = 0;
	
	const CATEGORY_SEARCH_PERFIX = 'c';
	const

2025-02-12 20:37:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:37:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:37:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:37:38 - snowflake.connector.connection - INFO - closed
2025-02-12 20:37:38 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:38:24 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:38:24 - root - INFO - ```sql
SELECT TRIM(BOTH '\"' FROM REGEXP_SUBSTR("content", '\"([^\"]+)\"')) AS "package_name"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE "content" ILIKE '%import%"%"%'
LIMIT 100;
```
2025-02-12 20:38:24 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:38:24 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:38:24 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:38:25 - snowflake.connector.connection - INFO - closed
2025-02-12 20:38:25 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:39:22 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:39:22 - root - INFO - ```sql
SELECT TRIM(BOTH '"' FROM REGEXP_SUBSTR("content", '""([^""]+)""')) AS "package_name"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE "content" ILIKE '%import%""%""%'
LIMIT 100;
```
2025-02-12 20:39:22 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:39:22 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:39:22 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:39:23 - snowflake.connector.connection - INFO - closed
2025-02-12 20:39:23 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:40:00 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:40:00 - root - INFO - ```sql
SELECT TRIM(BOTH '"' FROM REGEXP_SUBSTR("content", '""([^""]+)""')) AS "package_name"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE "content" ILIKE '%import%""%""%'
LIMIT 100;
```
2025-02-12 20:40:00 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:40:00 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:40:00 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:40:01 - snowflake.connector.connection - INFO - closed
2025-02-12 20:40:01 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:40:01 - root - INFO - SQL:
SELECT TRIM(BOTH '"' FROM REGEXP_SUBSTR("content", '""([^""]+)""')) AS "package_name"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE "content" ILIKE '%import%""%""%'
LIMIT 100;
Results:
001003 (42000): 01ba59b8-0004-9c22-0001-11c301130b6a: SQL compilation error:
syntax error line 1 at position 17 unexpected ''"''.
syntax error line 1 at position 17 unexpected ''"''.
2025-02-12 20:40:01 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:40:01 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:40:01 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:40:02 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 20:40:02 - snowflake.connector.connection - INFO - closed
2025-02-12 20:40:03 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:40:03 - root - INFO - SQL:
SELECT "id", REGEXP_COUNT("content", 'import') AS "import_count"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    LIMIT 100;
Results:
id,import_count
2dd586a19b594a73e9c6f7485d1e5da9203a4467,0.0
7acfd43a7914620c9fef2196f9cac65d0f542d53,1.0
9eb0c3299f21b4d86029ebbbf0b6ad8c0945b35d,0.0
816b2d7412b432d86a4a36147255ec664f760193,0.0
ca151cab87aa4ba9286dd5b3557fd75bb902c442,5.0
21cab621a82b9e390ee6cfe409704954c4d90f4f,15.0
66e2bf008bdb297f2af2125a7f59afb8f90ee107,5.0
026e9467f313c7776b144881ba161103119aa0a9,6.0
f50a76cff9f42438026c7cf8bba687bcd2d491ea,0.0
8e0ab7a402ed401e4a92a0933d211dada21b4508,0.0
9281ba3801cf1a02af6ea13bebdc19a41d48b463,0.0
7ec9cbbbdc3ace14e655f751501f0b872930f34f,0.0
67c981b77bfe643e0a664f9179f84e28971e347e,
89b92f14f4b3832108de19ca964f73a1e5ab0133,0.0
de1cba95dbe087f858735dc17e86f1a7f5d71af8,0.0
6b3e05813c8df6e5fd24b2bb2abc0f765153cf76,9.0
003fd53850a89b787395007d69e0fb6f189f922c,4.0
7bc2fbeb883e739d41d2bc18bcd2f76bac62405f,9.0
b7cde36092689db6dada97894e63992f577dc610,0.0
efc4a4e7a2a4697d74b1f5a3696800a7289963f5,0.0
0052de438fe69bac42ec3caf472988bcfea7641b,5.0
630abd5ef1c4a032c64b076ef06e92dc30262880,3.0
35ebf1c9779099f07d0906955485d6f15608504b,1.0
4a6e3ef763ac4c820ac268053084dcf2d9a5c20f,2.0
e4c56a64472e33c2ceff4248a70897e2364df3e4,0.0
53d41edc180367174c94ecfc3ec615dca283472e,0.0
02c9781faebbba633113adee71cb90230f6203d4,0.0
bcaf713c6341dca3dc7506fdb71c943768248811,0.0
b39fb02fd35e99a9b9d7604b5a51bad331239d9f,0.0
bd8ba51bb577cd64bbc2a2df43dd74bc78aadf1a,0.0
73e022d17f9556754e9506bce20b79b9376ab059,0.0
21c34c1c0aba3aac858c6c975f269f141ffd091b,1.0
ef9b8a5ff4f0f32508c7ae873fb3326a9d656bb8,0.0
e1813d75df3e183766f07b062776b3897a2523a7,1.0
f7ff75ea593f6300f4ba3d488f50b6c0dcbf5621,
801612d3e022bef0512f1322806589e8824e34c9,0.0
58409ad17b6f8bc2dc6d3c095a2ace8b38996bfc,0.0
5acbb02c0bd644561fecce1ba9b5ed3431c2c400,0.0
803aef6c020618e8a2759138ba2f4992b10e377f,5.0
3dc7fe5332570c343998825d3e94475d4edcabf7,0.0
e2521c113a74bb8250434b6efce725e1134a7003,0.0
7122ce62f2d1bee4878c0593c244de80247fe88b,1.0
6ef0115e036a78b7186aebf5aa390d15caeb78cd,0.0
04aa747e26f22b5e6e5e33cd117d4a7adfba57f0,0.0
761eaa5a1d29eee52ed9bb752756c453c8f24a2c,0.0
2272ea8b5b1cbdc7b2578c6d0a8c5416c200dd57,0.0
6db6b8f13a912023f4c8c889b75e7366cca6d221,0.0
b2904db52dd0dce293619fc10106854823533867,0.0
1cd9db02e03f907dd998722ec7c9674b6532250c,20.0
51f5fb742136850f2ad2ebad70a3ef1748178b6f,
b4a319e43ad65d47a62c13cb8379699db645f95a,0.0
e30c39995034c6749d89ec2ea723d73c35869cf1,
98001653566ed4abf3b6980b59a53152fa8e6a24,2.0
a2b13a6525699664774a1f68bdd9f271cd59198d,0.0
9aa58406334a1f589e1f83c811d46fdf5f6120a1,0.0
2f678fd6a81b8653c17eaa1a5891d8ba2845b0bc,2.0
f2871049dc62e26b4421e657389724706572bb26,0.0
317c67b246df6fcb29d2e660159a291c4d9e1471,0.0
8f7129cd125e0baf7b66a23c0548ca6c608fbacf,7.0
cd625461c4640831a5f6a27c64865819addce368,0.0
e919d808a0495863c59c27e74e3bef40afcfcf58,10.0
cf118b09856ceda177b1ff62d8662f9bc52c0cb3,0.0
612de1db5cc35a0d852e260a543e686d42dfed62,0.0
d2140a96a46b5196e5368ebe555bde477cf95a0d,0.0
54a85e112740e947c4b982d69aea64bd360e0297,1.0
0928a9c76e1926b295922413d39658e8f45ab452,
f0620274b417f4b11564e2e5f530139e0f06cdb8,
75c71cd4201fa47a234b7dcc2240a415dfa5610d,0.0
970816f61ec689e35495f05345d26070b95450dc,0.0
320dbc0d9d8a3f40c867a51bde847fc89be76f08,1.0
a266b7b1edded4066a8541baa090ac49b5ab1a50,0.0
ad37595cee87b33e089abe682bc38afafb038eb7,0.0
dc50bbe6a5c76a22b6532722b31f50d2e058de67,0.0
1784564068511de9c6d0a8ed7946836636ae6817,0.0
70cf22b949b32adfc25dd9dff4131bf2e09198dd,0.0
6ff7b25011e8d2310c7f73a1c4606750989e2022,0.0
0e1068c119973343a4230816dc1992e6b33bc318,0.0
0ad8376107f9e0125c2b96cd29b8ecdd09dddeda,
92445a58f9282b454355a57706ff39a78e8dd468,0.0
11b7430362f8ba83fe471bf6a641c9c9ac8725bc,0.0
41347cdcf00b2fa6a5020d967b0f3d5dd2f29c53,0.0
747f288e08d93ea8bea587f77121cb822f047791,0.0
97af8908bb7689c60f48beff6ec538b0a3927622,0.0
fe3b18fe0a8aae2c12bf47189b89feb807c6b8a8,0.0
95e160899c088cab1e41c90b8af1eb3b3adfa718,0.0
aaa80219f1d33d142060ebd9aace5ced01ffc6b8,
5c16fe4787609ce827ac4115819b4ca6623d94ad,3.0
67c4aed4740fc59050486d5a2a43643b129e6c4b,2.0
dc0f68d612e07adee3485ed0a1d0e25d46b71424,0.0
84b1feb4e61c56ab8e2fa7bcb4ee6bf15421bd6f,0.0
6d83eaae13a37486983bb9f66e0c7d6525270cd2,0.0
b97643460fb91c62286edcb18f2357a43fce90f0,0.0
370876ccf108f9d57baa192b0521b2ae4ec0cc22,0.0
37362386720d22e764e4ba6bdc6f1a1cef4ceb30,17.0
395a3deac906aea5858b298502a9866fc9620a12,
99ba4177c70da1c9a4c8fddb68d3343152b90780,
b7e06762acb43886348a9dbe715088497912f95b,
d1b09bb181570f981826d4444fd8c91675ad7466,
879e640a5f54ecb0fee4a03801266f25bef3d919,
70198e8f66cef395063610b666e7272f61858b78,

2025-02-12 20:40:03 - root - INFO - itercount: 0
2025-02-12 20:40:03 - root - INFO - Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
,0
table_name,SAMPLE_FILES
description,
DDL,"create or replace TABLE SAMPLE_FILES (
	""repo_name"" VARCHAR(16777216),
	""ref"" VARCHAR(16777216),
	""path"" VARCHAR(16777216),
	""mode"" NUMBER(38,0),
	""id"" VARCHAR(16777216),
	""symlink_target"" VARCHAR(16777216)
);"

Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
,1
table_name,LANGUAGES
description,
DDL,"create or replace TABLE LANGUAGES (
	""repo_name"" VARCHAR(16777216),
	""language"" VARIANT
);"

Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
,2
table_name,LICENSES
description,
DDL,"create or replace TABLE LICENSES (
	""repo_name"" VARCHAR(16777216),
	""license"" VARCHAR(16777216)
);"

Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
,3
table_name,SAMPLE_COMMITS
description,
DDL,"create or replace TABLE SAMPLE_COMMITS (
	""commit"" VARCHAR(16777216),
	""tree"" VARCHAR(16777216),
	""parent"" VARIANT,
	""author"" VARIANT,
	""committer"" VARIANT,
	""subject"" VARCHAR(16777216),
	""message"" VARCHAR(16777216),
	""trailer"" VARIANT,
	""difference"" VARIANT,
	""difference_truncated"" BOOLEAN,
	""repo_name"" VARCHAR(16777216),
	""encoding"" VARCHAR(16777216)
);"

Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
,4
table_name,SAMPLE_CONTENTS
description,
DDL,"create or replace TABLE SAMPLE_CONTENTS (
	""id"" VARCHAR(16777216),
	""size"" NUMBER(38,0),
	""content"" VARCHAR(16777216),
	""binary"" BOOLEAN,
	""copies"" NUMBER(38,0),
	""sample_repo_name"" VARCHAR(16777216),
	""sample_ref"" VARCHAR(16777216),
	""sample_path"" VARCHAR(16777216),
	""sample_mode"" NUMBER(38,0),
	""sample_symlink_target"" VARCHAR(16777216)
);"

Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
,5
table_name,SAMPLE_REPOS
description,
DDL,"create or replace TABLE SAMPLE_REPOS (
	""repo_name"" VARCHAR(16777216),
	""watch_count"" NUMBER(38,0)
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'GITHUB_REPOS': {'GITHUB_REPOS': ['SAMPLE_FILES', 'LANGUAGES', 'LICENSES', 'SAMPLE_COMMITS', 'SAMPLE_CONTENTS', 'SAMPLE_REPOS']}}
Begin Exploring Related Columns
**Relevant Table and Columns:**

- **Table**: `GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS`
  - **Column**: `"content"`: Contains the code content from GitHub repository files. This is where import statements can be found and analyzed.
  - **Column**: `"id"`: May be used to uniquely identify each content entry.
  - **Column**: `"sample_path"`: Provides the file path, which might be useful to filter specific file types or directories.

**Potential Conditions:**

- Filtering `"content"` to find import statements enclosed in parentheses.
- Splitting multi-line imports by newlines.
- Extracting package names within double quotes.
- Ignoring null or empty results.
- Counting occurrences of each package name.
- Ordering results in descending order of frequency.

**SQL Queries:**

1. **Retrieve the content field from the SAMPLE_CONTENTS table:**
   ```sql
   SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   LIMIT 100;
   ```

2. **Select distinct content entries to check for duplicates:**
   ```sql
   SELECT DISTINCT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   LIMIT 100;
   ```

3. **Find contents that contain 'import' statements:**
   ```sql
   SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%import%'
   LIMIT 100;
   ```

4. **Retrieve contents with 'import' statements enclosed in parentheses:**
   ```sql
   SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%import%(%'
   LIMIT 100;
   ```

5. **Select contents containing double quotes:**
   ```sql
   SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%"%'
   LIMIT 100;
   ```

6. **Retrieve the 'id' and 'content' where 'content' is not null:**
   ```sql
   SELECT "id", "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" IS NOT NULL
   LIMIT 100;
   ```

7. **Find contents with multi-line imports (containing newlines):**
   ```sql
   SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%import%'\n'%'
   LIMIT 100;
   ```

8. **Select contents containing import statements with double-quoted package names:**
   ```sql
   SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%import%"%"%'
   LIMIT 100;
   ```

9. **Retrieve the 'sample_path' and 'content' for Python files:**
   ```sql
   SELECT "sample_path", "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "sample_path" ILIKE '%.py'
   LIMIT 100;
   ```

10. **Select distinct package names within double quotes from contents:**
    (Assuming we have a way to extract text within double quotes)
    ```sql
    SELECT DISTINCT REGEXP_SUBSTR("content", '"([^"]+)"') AS "package_name"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%"%"%'
    LIMIT 100;
    ```

11. **Count the occurrences of each package name extracted from contents:**
    ```sql
    SELECT REGEXP_SUBSTR("content", '"([^"]+)"') AS "package_name", COUNT(*) AS "frequency"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%"%"%'
    GROUP BY "package_name"
    ORDER BY "frequency" DESC
    LIMIT 100;
    ```

12. **Find contents where import statements are enclosed in parentheses and split by newlines:**
    ```sql
    SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
      AND "content" LIKE '%\n%'
    LIMIT 100;
    ```

13. **Retrieve non-binary contents to focus on text files:**
    ```sql
    SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "binary" = FALSE
    LIMIT 100;
    ```

14. **Select contents with import statements ignoring null results:**
    ```sql
    SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" IS NOT NULL AND "content" ILIKE '%import%'
    LIMIT 100;
    ```

15. **Retrieve contents and their sizes to analyze large files:**
    ```sql
    SELECT "content", "size"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "size" > 1000
    LIMIT 100;
    ```

16. **Find distinct file paths with import statements:**
    ```sql
    SELECT DISTINCT "sample_path"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%'
    LIMIT 100;
    ```

17. **Select contents that contain import statements and are associated with a specific repository:**
    ```sql
    SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "sample_repo_name" = 'specific_repo_name'
      AND "content" ILIKE '%import%'
    LIMIT 100;
    ```

18. **Select contents where import statements include parentheses and double quotes:**
    ```sql
    SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%"%")%'
    LIMIT 100;
    ```

19. **Extract package names from contents and remove quotation marks:**
    ```sql
    SELECT TRIM(BOTH '"' FROM REGEXP_SUBSTR("content", '"([^"]+)"')) AS "package_name"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%"%"%'
    LIMIT 100;
    ```

20. **Count the number of import statements per content:**
    ```sql
    SELECT "id", REGEXP_COUNT("content", 'import') AS "import_count"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    LIMIT 100;
    ```

**Note:** The above queries are designed to explore the data and understand how to extract package names from import statements in the `"content"` column. They incrementally build up from simple retrievals to more complex extractions and aggregations, following the specified guidelines.Query:
SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   LIMIT 100;
Answer:
Too long, hard cut:
content
"/*
 * rtc-ds1305.c -- driver for DS1305 and DS1306 SPI RTC chips
 *
 * Copyright (C) 2008 David Brownell
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 *
 */
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/bcd.h>
#include <linux/slab.h>
#include <linux/rtc.h>
#include <linux/workqueue.h>

#include <linux/spi/spi.h>
#include <linux/spi/ds1305.h>
#include <linux/module.h>


/*
 * Registers ... mask DS1305_WRITE into register address to write,
 * otherwise you're reading it.  All non-bitmask values are BCD.
 */
#define DS1305_WRITE		0x80


/* RTC date/time ... the main special cases are that we:
 *  - Need fancy ""hours"" encoding in 12hour mode
 *  - Don't rely on the ""day-of-week"" field (or tm_wday)
 *  - Are a 21st-century clock (2000 <= year < 2100)
 */
#define DS1305_RTC_LEN		7		/* bytes for RTC regs */

#define DS1305_SEC		0x00		/* register addresses */
#define DS1305_MIN		0x01
#define DS1305_HOUR		0x02
#	define DS1305_HR_12		0x40	/* set == 12 hr mode */
#	define DS1305_HR_PM		0x20	/* set == PM (12hr mode) */
#define DS1305_WDAY		0x03
#define DS1305_MDAY		0x04
#define DS1305_MON		0x05
#define DS1305_YEAR		0x06


/* The two alarms have only sec/min/hour/wday fields (ALM_LEN).
 * DS1305_ALM_DISABLE disables a match field (some combos are bad).
 *
 * NOTE that since we don't use WDAY, we limit ourselves to alarms
 * only one day into the future (vs potentially up to a week).
 *
 * NOTE ALSO that while we could generate once-a-second IRQs (UIE), we
 * don't currently support them.  We'd either need to do it only when
 * no alarm is pending (not the standard model), or to use the second
 * alarm (implying that this is a DS1305 not DS1306, *and* that either
 * it's wired up a second IRQ we know, or that INTCN is set)
 */
#define DS1305_ALM_LEN		4		/* bytes for ALM regs */
#define DS1305_ALM_DISABLE	0x80

#define DS1305_ALM0(r)		(0x07 + (r))	/* register addresses */
#define DS1305_ALM1(r)		(0x0b + (r))


/* three control registers */
#define DS1305_CONTROL_LEN	3		/* bytes of control regs */

#define DS1305_CONTROL		0x0f		/* register addresses */
#	define DS1305_nEOSC		0x80	/* low enables oscillator */
#	define DS1305_WP		0x40	/* write protect */
#	define DS1305_INTCN		0x04	/* clear == only int0 used */
#	define DS1306_1HZ		0x04	/* enable 1Hz output */
#	define DS1305_AEI1		0x02	/* enable ALM1 IRQ */
#	define DS1305_AEI0		0x01	/* enable ALM0 IRQ */
#define DS1305_STATUS		0x10
/* status has just AEIx bits, mirrored as IRQFx */
#define DS1305_TRICKLE		0x11
/* trickle bits are defined in <linux/spi/ds1305.h> */

/* a bunch of NVRAM */
#define DS1305_NVRAM_LEN	96		/* bytes of NVRAM */

#define DS1305_NVRAM		0x20		/* register addresses */


struct ds1305 {
	struct spi_device	*spi;
	struct rtc_device	*rtc;

	struct work_struct	work;

	unsigned long		flags;
#define FLAG_EXITING	0

	bool			hr12;
	u8			ctrl[DS1305_CONTROL_LEN];
};


/*----------------------------------------------------------------------*/

/*
 * Utilities ...  tolerate 12-hour AM/PM notation in case of non-Linux
 * software (like a bootloader) which may require it.
 */

static unsigned bcd2hour(u8 bcd)
{
	if (bcd & DS1305_HR_12) {
		unsigned	hour = 0;

		bcd &= ~DS1305_HR_12;
		if (bcd & DS1305_HR_PM) {
			hour = 12;
			bcd &= ~DS1305_HR_PM;
		}
		hour += bcd2bin(bcd);
		return hour - 1;
	}
	return bcd2bin(bcd);
}

static u8 hour2bcd(bool hr12, int hour)
{
	if (hr12) {
		hour++;
		if (hour <= 12)
			return DS1305_HR_12 | bin2bcd(hour);
		hour -= 12;
		return DS1305_HR_12 | DS1305_HR_PM | bin2bcd(hour);
	}
	return bin2bcd(hour);
}

/*----------------------------------------------------------------------*/

/*
 * Interface to RTC framework
 */

static int ds1305_alarm_irq_enable(struct device *dev, unsigned int enabled)
{
	struct ds1305	*ds1305 = dev_get_drvdata(dev);
	u8		buf[2];
	long		err = -EINVAL;

	buf[0] = DS1305_WRITE | DS1305_CONTROL;
	buf[1] = ds1305->ctrl[0];

	if (enabled) {
		if (ds1305->ctrl[0] & DS1305_AEI0)
			goto done;
		buf[1] |= DS1305_AEI0;
	} else {
		if (!(buf[1] & DS1305_AEI0))
			goto done;
		buf[1] &= ~DS1305_AEI0;
	}
	err = spi_write_then_read(ds1305->spi, buf, sizeof(buf), NULL, 0);
	if (err >= 0)
		ds1305->ctrl[0] = buf[1];
done:
	return err;

}


/*
 * Get/set of date and time is pretty normal.
 */

static int ds1305_get_time(struct device *dev, struct rtc_time *time)
{
	struct ds1305	*ds1305 = dev_get_drvdata(dev);
	u8		addr = DS1305_SEC;
	u8		buf[DS1305_RTC_LEN];
	int		status;

	/* Use write-then-read to get all the date/time registers
	 * since dma from stack is nonportable
	 */
	status = spi_write_then_read(ds1305->spi, &addr, sizeof(addr),
			buf, sizeof(buf));
	if (status < 0)
		return status;

	dev_vdbg(dev, ""%s: %02x %02x %02x, %02x %02x %02x %02x\n"",
		""read"", buf[0], buf[1], buf[2], buf[3],
		buf[4], buf[5], buf[6]);

	/* Decode the registers
Query:
SELECT DISTINCT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   LIMIT 100;
Answer:
Too long, hard cut:
content
"# The application settings for Android libSDL port

# Specify application name (e.x. My Application)
AppName=""JaggedAlliance2""

# Specify reversed site name of application (e.x. com.mysite.myapp)
AppFullName=com.opensourced.ja2

# Application version code (integer)
AppVersionCode=01235204

# Application user-visible version name (string)
AppVersionName=""0.12.352.04""

# Specify path to download application data in zip archive in the form 'Description|URL|MirrorURL^Description2|URL2|MirrorURL2^...'
# If you'll start Description with '!' symbol it will be enabled by default, other downloads should be selected by user from startup config menu
# If the URL in in the form ':dir/file.dat:http://URL/' it will be downloaded as binary BLOB to the application dir and not unzipped
# If the URL does not contain 'http://' it is treated as file from 'project/jni/application/src/AndroidData' dir -
# these files are put inside .apk package by build system
# Also please avoid 'https://' URLs, many Android devices do not have trust certificates and will fail to connect to SF.net over HTTPS
AppDataDownloadUrl=""!!JaggedAllianceData|ja2.zip""

# Reset SDL config when updating application to the new version (y) / (n)
ResetSdlConfigForThisVersion=n

# Delete application data files when upgrading (specify file/dir paths separated by spaces)
DeleteFilesOnUpgrade=""""

# Here you may type readme text, which will be shown during startup. Format is:
# Text in English, use \\\\n to separate lines (that's four backslashes)^de:Text in Deutsch^ru:Text in Russian^button:Button that will open some URL:http://url-to-open/
ReadmeText=''

# libSDL version to use (1.2/1.3/2.0)
LibSdlVersion=1.2

# Specify screen orientation: (v)ertical/(p)ortrait or (h)orizontal/(l)andscape
ScreenOrientation=h

# Video color depth - 16 BPP is the fastest and supported for all modes, 24 bpp is supported only
# with SwVideoMode=y, SDL_OPENGL mode supports everything. (16)/(24)/(32)
VideoDepthBpp=16

# Enable OpenGL depth buffer (needed only for 3-d applications, small speed decrease) (y) or (n)
NeedDepthBuffer=n

# Enable OpenGL stencil buffer (needed only for 3-d applications, small speed decrease) (y) or (n)
NeedStencilBuffer=n

# Try to use GLES 2.x context - will revert to GLES 1.X if unsupported by device
# you need this option only if you're developing 3-d app (y) or (n)
NeedGles2=n

# Application uses software video buffer - you're calling SDL_SetVideoMode() without SDL_HWSURFACE and without SDL_OPENGL,
# this will allow small speed optimization. Enable this even when you're using SDL_HWSURFACE. (y) or (n)
SwVideoMode=y

# Application video output will be resized to fit into native device screen (y)/(n)
SdlVideoResize=y

# Application resizing will keep 4:3 aspect ratio, with black bars at sides (y)/(n)
SdlVideoResizeKeepAspect=n

# Do not allow device to sleep when the application is in foreground, set this for video players or apps which use accelerometer
InhibitSuspend=y

# Create Android service, so the app is less likely to be killed while in background
CreateService=

# Application does not call SDL_Flip() or SDL_UpdateRects() appropriately, or draws from non-main thread -
# enabling the compatibility mode will force screen update every 100 milliseconds, which is laggy and inefficient (y) or (n)
CompatibilityHacksForceScreenUpdate=n

# Application does not call SDL_Flip() or SDL_UpdateRects() after mouse click (ScummVM and all Amiga emulators do that) -
# force screen update by moving mouse cursor a little after each click (y) or (n)
CompatibilityHacksForceScreenUpdateMouseClick=y

# Application initializes SDL audio/video inside static constructors (which is bad, you won't be able to run ndk-gdb) (y)/(n)
CompatibilityHacksStaticInit=n

# On-screen Android soft text input emulates hardware keyboard, this will only work with Hackers Keyboard app (y)/(n)
CompatibilityHacksTextInputEmulatesHwKeyboard=n

# Hack for broken devices: prevent audio chopping, by sleeping a bit after pushing each audio chunk (y)/(n)
CompatibilityHacksPreventAudioChopping=n

# Hack for broken apps: application ignores audio buffer size returned by SDL (y)/(n)
CompatibilityHacksAppIgnoresAudioBufferSize=n

# Hack for VCMI: preload additional shared libraries before aplication start
CompatibilityHacksAdditionalPreloadedSharedLibraries=""""

# Hack for Free Heroes 2, which redraws the screen inside SDL_PumpEvents(): slow and compatible SDL event queue -
# do not use it with accelerometer/gyroscope, or your app may freeze at random (y)/(n)
CompatibilityHacksSlowCompatibleEventQueue=n

# Save and restore OpenGL state when drawing on-screen keyboard for apps that use SDL_OPENGL
CompatibilityHacksTouchscreenKeyboardSaveRestoreOpenGLState=n

# Application uses SDL_UpdateRects() properly, and does not draw in any region outside those rects.
# This improves drawing speed, but I know only one application that does that, and it's written by me (y)/(n)
CompatibilityHacksProperU
Query:
SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%import%'
   LIMIT 100;
Answer:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd
Query:
SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%import%(%'
   LIMIT 100;
Answer:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd
Query:
SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%"%'
   LIMIT 100;
Answer:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd
Query:
SELECT "id", "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" IS NOT NULL
   LIMIT 100;
Answer:
Too long, hard cut:
id,content
91807aef6df0374714e8779b7fa2b9643b73e13e,"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
Query:
SELECT "content"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE "content" ILIKE '%import%\\n%'
LIMIT 100;
Answer:
Too long, hard cut:
content
"<?php
/**
 * Subclass for representing a row from the 'entry' table.
 *
 *
 *
 * @package Core
 * @subpackage model
 */
class entry extends Baseentry implements ISyncableFile, IIndexable, IOwnable, IRelatedObject
{
	protected $new_categories = '';
	protected $new_categories_ids = '';
	protected $old_categories;
	protected $is_categories_modified = false;
	protected $is_categories_names_modified = false;
	protected $creator_kuser_id = null;
	
	const MINIMUM_ID_TO_DISPLAY = 8999;
	
	const ROOTS_FIELD_PREFIX = 'K_Pref';
	const ROOTS_FIELD_ENTRY_PREFIX = 'KP_Entry';
	const ROOTS_FIELD_PARENT_ENTRY_PREFIX = 'KP_Parent';
	const ROOTS_FIELD_BULK_UPLOAD_PREFIX = 'KP_Bulk';

	// NOTE - CHANGES MUST BE MADE TO LAYOUT.PHP JS PART AS WELL
	// different sort orders for browsing entries
	const ENTRY_SORT_MOST_VIEWED = 0;
	const ENTRY_SORT_MOST_RECENT = 1;
	const ENTRY_SORT_MOST_COMMENTS = 2;
	const ENTRY_SORT_MOST_FAVORITES = 3;
	const ENTRY_SORT_RANK = 4;
	const ENTRY_SORT_MEDIA_TYPE = 5;
	const ENTRY_SORT_NAME = 6;
	const ENTRY_SORT_KUSER_SCREEN_NAME = 7;

	// NOTE - CHANGES MUST BE MADE TO LAYOUT.PHP JS PART AS WELL
	const ENTRY_MEDIA_TYPE_AUTOMATIC = -1;
	const ENTRY_MEDIA_TYPE_ANY = 0;
	const ENTRY_MEDIA_TYPE_VIDEO = 1;
	const ENTRY_MEDIA_TYPE_IMAGE = 2;
	const ENTRY_MEDIA_TYPE_TEXT = 3;
	const ENTRY_MEDIA_TYPE_HTML = 4;
	const ENTRY_MEDIA_TYPE_AUDIO = 5;
	const ENTRY_MEDIA_TYPE_SHOW = 6;
	const ENTRY_MEDIA_TYPE_SHOW_XML = 7; // for the kplayer: the data contains the xml itself and not a url
	const ENTRY_MEDIA_TYPE_BUBBLES = 9;
	const ENTRY_MEDIA_TYPE_XML = 10;
	const ENTRY_MEDIA_TYPE_DOCUMENT = 11;
	const ENTRY_MEDIA_TYPE_SWF = 12;
	const ENTRY_MEDIA_TYPE_PDF = 13;
	
	const ENTRY_MEDIA_TYPE_GENERIC_1= 101;	// these types can be used for derived classes - assume this is some kind of TXT file
	const ENTRY_MEDIA_TYPE_GENERIC_2= 102;	// these types can be used for derived classes
	const ENTRY_MEDIA_TYPE_GENERIC_3= 103;	// these types can be used for derived classes
	const ENTRY_MEDIA_TYPE_GENERIC_4= 104;	// these types can be used for derived classes
	
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_FLASH = 201;
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_WINDOWS_MEDIA = 202;
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_REAL_MEDIA = 203;
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_QUICKTIME = 204;
	
	// NOTE - CHANGES MUST BE MADE TO LAYOUT.PHP JS PART AS WELL
	const ENTRY_MEDIA_SOURCE_FILE = 1;
	const ENTRY_MEDIA_SOURCE_WEBCAM = 2;
	const ENTRY_MEDIA_SOURCE_FLICKR = 3;
	const ENTRY_MEDIA_SOURCE_YOUTUBE = 4;
	const ENTRY_MEDIA_SOURCE_URL = 5;
	const ENTRY_MEDIA_SOURCE_TEXT = 6;
	const ENTRY_MEDIA_SOURCE_MYSPACE = 7;
	const ENTRY_MEDIA_SOURCE_PHOTOBUCKET = 8;
	const ENTRY_MEDIA_SOURCE_JAMENDO = 9;
	const ENTRY_MEDIA_SOURCE_CCMIXTER = 10;
	const ENTRY_MEDIA_SOURCE_NYPL = 11;
	const ENTRY_MEDIA_SOURCE_CURRENT = 12;
	const ENTRY_MEDIA_SOURCE_MEDIA_COMMONS = 13;
	const ENTRY_MEDIA_SOURCE_KALTURA = 20;
	const ENTRY_MEDIA_SOURCE_KALTURA_USER_CLIPS = 21;
	const ENTRY_MEDIA_SOURCE_ARCHIVE_ORG = 22;
	const ENTRY_MEDIA_SOURCE_KALTURA_PARTNER = 23;
	const ENTRY_MEDIA_SOURCE_METACAFE = 24;
	const ENTRY_MEDIA_SOURCE_KALTURA_QA = 25;
	const ENTRY_MEDIA_SOURCE_KALTURA_KSHOW = 26;
	const ENTRY_MEDIA_SOURCE_KALTURA_PARTNER_KSHOW = 27;
	const ENTRY_MEDIA_SOURCE_SEARCH_PROXY = 28;
	const ENTRY_MEDIA_SOURCE_AKAMAI_LIVE = 29;
	const ENTRY_MEDIA_SOURCE_MANUAL_LIVE_STREAM = 30;
	const ENTRY_MEDIA_SOURCE_AKAMAI_UNIVERSAL_LIVE = 31;
	const ENTRY_MEDIA_SOURCE_LIVE_STREAM = 32;
	const ENTRY_MEDIA_SOURCE_LIVE_CHANNEL = 33;
	const ENTRY_MEDIA_SOURCE_RECORDED_LIVE = 34;
	const ENTRY_MEDIA_SOURCE_CLIP = 35;
	const ENTRY_MEDIA_SOURCE_PARTNER_SPECIFIC = 100;
		
	const ENTRY_MODERATION_STATUS_PENDING_MODERATION = 1;
	const ENTRY_MODERATION_STATUS_APPROVED = 2;
	const ENTRY_MODERATION_STATUS_REJECTED = 3;
	const ENTRY_MODERATION_STATUS_FLAGGED_FOR_REVIEW = 5;
	const ENTRY_MODERATION_STATUS_AUTO_APPROVED = 6;
	
	const MAX_NORMALIZED_RANK = 5;

	const MAX_CATEGORIES_PER_ENTRY = 32;
	const MAX_CATEGORIES_PER_ENTRY_DISABLE_LIMIT_FEATURE = 200;
	
	const FILE_SYNC_ENTRY_SUB_TYPE_DATA = 1;
	const FILE_SYNC_ENTRY_SUB_TYPE_DATA_EDIT = 2;
	const FILE_SYNC_ENTRY_SUB_TYPE_THUMB = 3;
	const FILE_SYNC_ENTRY_SUB_TYPE_ARCHIVE = 4;
	const FILE_SYNC_ENTRY_SUB_TYPE_DOWNLOAD = 5;
	const FILE_SYNC_ENTRY_SUB_TYPE_OFFLINE_THUMB = 6;
	const FILE_SYNC_ENTRY_SUB_TYPE_ISM = 7;
	const FILE_SYNC_ENTRY_SUB_TYPE_ISMC = 8;
	const FILE_SYNC_ENTRY_SUB_TYPE_CONVERSION_LOG = 9;
	const FILE_SYNC_ENTRY_SUB_TYPE_LIVE_PRIMARY = 10; 
	const FILE_SYNC_ENTRY_SUB_TYPE_LIVE_SECONDARY = 11; 
	
	const MIX_EDITOR_TYPE_SIMPLE = 1;
	const MIX_EDITOR_TYPE_ADVANCED = 2;
	
	const ENTRY_DURATION_TYPE_NOTAVAILABLE = ""notavailable"";
	const ENTRY_DURATION_TYPE_SHORT = ""short"";
	const ENTRY_DURATION_TYPE_MEDIUM = ""medium"";
	const ENTRY_DURATION_TYPE_LONG = ""long"";
	
	const ENTRY_CATEGORY_ESCAPE = ""_"";
	const ENTRY_CATEGORY_SEPARATOR = "","";
	
	const ENTRY_ID_THAT_DOES_NOT_EXIST = 0;
	
	const CATEGORY_SEARCH_PERFIX = 'c';
	const
Query:
SELECT "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "content" ILIKE '%import%"%"%'
   LIMIT 100;
Answer:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd
Query:
SELECT "sample_path", "content"
   FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
   WHERE "sample_path" ILIKE '%.py'
   LIMIT 100;
Answer:
Too long, hard cut:
sample_path,content
src/pyudev/_ctypeslib/__init__.py,"# -*- coding: utf-8 -*-
# Copyright (C) 2015 mulhern <amulhern@redhat.com>

# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by the
# Free Software Foundation; either version 2.1 of the License, or (at your
# option) any later version.

# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License
# for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with this library; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA

""""""
    pyudev._ctypeslib
    =================

    Wrappers for libraries.

    .. moduleauthor::  mulhern  <amulhern@redhat.com>
""""""

from . import libc
from . import libudev
"
networking_cisco/neutronclient/policyprofile.py,"# Copyright 2015 Cisco Systems, Inc.
# All rights reserved.
#
#    Licensed under the Apache License, Version 2.0 (the ""License""); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.
#

from neutronclient.common import extension


class PolicyProfile(extension.NeutronClientExtension):
    resource = 'policy_profile'
    resource_plural = '%ss' % resource
    object_path = '/%s' % resource_plural
    resource_path = '/%s/%%s' % resource_plural
    versions = ['2.0']
    allow_names = True


class PolicyProfileList(extension.ClientExtensionList, PolicyProfile):
    """"""List policy profiles that belong to a given tenant.""""""

    shell_command = 'cisco-policy-profile-list'
    list_columns = ['id', 'name']
    pagination_support = True
    sorting_support = True


class PolicyProfileShow(extension.ClientExtensionShow, PolicyProfile):
    """"""Show information of a given policy profile.""""""

    shell_command = 'cisco-policy-profile-show'
"
base_contact/__openerp__.py,"# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Business Applications
#    Copyright (C) 2013-TODAY OpenERP S.A. (<http://openerp.com>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################

{
    'name': 'Contacts Management',
    'summary': u""[DEPRECATED] Manage your contacts separately"",
    'version': '8.0.2.0.0',
    'author': ""OpenERP SA,Odoo Community Association (OCA)"",
    'website': 'http://www.openerp.com',
    'category': 'Customer Relationship Management',
    'depends': [
        'partner_contact_birthdate',
        'partner_contact_in_several_companies',
        'partner_contact_nationality',
    ],
    'installable': False,
}
"
GPy/testing/state_space_main_tests.py,"# -*- coding: utf-8 -*-
# Copyright (c) 2015, Alex Grigorevskiy
# Licensed under the BSD 3-clause license (see LICENSE.txt)
""""""
Test module for state_space_main.py
""""""

import unittest
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

import GPy.models.state_space_setup as ss_setup
import GPy.models.state_space_main as ssm

def generate_x_points(points_num=100, x_interval = (0, 20), random=True):
    """"""
    Function generates (sorted) points on the x axis.
    
    Input:
    ---------------------------
        points_num: int
            How many points to generate
        x_interval: tuple (a,b)
            On which interval to generate points
        random: bool
            Regular points or random
    
    Output:
    ---------------------------
        x_points: np.array
            Generated points
    """"""
    
    x_interval = np.asarray( x_interval )

    if random:
        x_points = np.random.rand(points_num) 
Query:
SELECT DISTINCT REGEXP_SUBSTR("content", '"([^"]+)"') AS "package_name"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%"%"%'
    LIMIT 100;
Answer:
package_name
"""notavailable"""
"""pnode.h"""
"""sql_priv.h"""
"""
Test module for state_space_main.py
"""
"""query_string"""
"""/status"""
"""AKOEditorrificDelegate.h"""
"""i2p.naming.exec.command"""
"""a"""
"""mailto:jclasslib@ej-technologies.com"""
"""method"""
"""compass/reset"""
"""NSCoding not supported"""
"""utf-8"""
""" ("""
"""introduction"""
"""C#"""
"""
        Returns an dictionary sorted by the position of the respective field
        in its form.

        :param boolean exclude_missing: If ``True``, non-filled fields (those
            whose value evaluates to ``False`` are not present in the returned
            dictionary. Default: ``False``
        """
"""193.0.20/24"""
"""The menu item doesn't exist"""
"""
msgstr """
"""8'                        d"""
"""Software"""
"""C"""
"""after"""
"""http://d.android.com/tools/testing/testing_android.html"""
"""mixins/all"""
"""Returns the default slices.
    """
"""ProxGradShareGLRM"""
"""PLDLinkBankMFABaseStepView.h"""
"""/"""
"""ProductSpecificationValue.h"""
"""' . $value . '"""
"""Exchange Energy (Item): %s"""
"""Model mixins for `lino.modlib.countries`.

These include :class:`CountryCity`, :class:`CountryRegionCity` and
:class:`AddressLocation`.

"""
"""io-port"""
"""minimum"""
""
"""POST"""
"""http://clarkparsia.com/"""
"""/signin/"""
"""no-js"""
"""org.eclipse.ice.io.writer"""
"""serial"""
"""http://java.sun.com/xml/jaxb"""
"""dropdown"""
"""The device's internal counter was was smaller than expected. It's possible that the device has been cloned!"""
"""Utilities for testing"""
"""function"""
""" """
"""integration_test_helper"""
"""$directory1\Some solution"""
"""127.0.0.1"""
"""%s/%s"""
"""PFTwitterAuthenticationProvider.h"""
"""Colour..."""
""".pde"""
"""error"""
"""github.com/cloudfoundry/bosh-utils/errors"""
"""errors"""
"""unchecked"""
"""RecipeItem.h"""
"""ICurrencyRate"""
"""graph { fill-color: #141F2E; }"""
"""//build/config/ui.gni"""
"""PTDBean.h"""
"""os"""
"""
Common views dedicated to rendering xblocks.
"""
"""Classpath"""
"""pathsys.h"""
""" fs -copyFromLocal """
"""Converter for data from the ILSVRC 2010 competition.

    Source files for this dataset can be obtained by registering at
    [ILSVRC2010WEB].

    Parameters
    ----------
    input_directory : str
        Path from which to read raw data files.
    output_directory : str
        Path to which to save the HDF5 file.
    output_filename : str, optional
        The output filename for the HDF5 file. Default: 'ilsvrc2010.hdf5'.
    shuffle_seed : int or sequence, optional
        Seed for a random number generator used to shuffle the order
        of the training set on disk, so that sequential reads will not
        be ordered by class.

    .. [ILSVRC2010WEB] http://image-net.org/challenges/LSVRC/2010/index

    """
"""sync"""
"""just win"""
"""comedies"""
"""derived works"""
"""/com/openbravo/images/edit_group.png"""
"""button"""
"""flat"""
"""
Copyright (c) 2003-2010  Gustavo Niemeyer <gustavo@niemeyer.net>

This module offers extensions to the standard python 2.3+
datetime module.
"""
"""test"""
"""P9_14"""
"""bytes"""
"""countryId is null."""
"""tests for `preprocess`"""
"""ace/mode/doc_comment_highlight_rules"""
"""UTF-8"""
"""DCFrameView.h"""
"""
Tags are entities that are attached to objects in the same way as
Attributes. But contrary to Attributes, which are unique to an
individual object, a single Tag can be attached to any number of
objects at the same time.

Tags are used for tagging, obviously, but the data structure is also
used for storing Aliases and Permissions. This module contains the
respective handlers.

"""
"""#text"""
"""abc"""
"""Checking backward compatibility of old formats of tables."""
"""HCIsCollectionOnlyContaining.h"""
"""NSTableView"""
"""voteType"""
"""algo class error"""
"""
#include <openssl/asn1.h>
"""
"""singleton"""
"""unused"""
"""key"""
Query:
SELECT REGEXP_SUBSTR("content", '"([^"]+)"') AS "package_name", COUNT(*) AS "frequency"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%"%"%'
    GROUP BY "package_name"
    ORDER BY "frequency" DESC
    LIMIT 100;
Answer:
package_name,frequency
"""License""",590
"""1.0""",146
"""Software""",67
"""AS IS""",60
"""fmt""",32
"""
msgstr """,18
"""bytes""",18
"""Classpath""",15
"""unchecked""",13
"""use strict""",11
""" """,10
,10
"""/""",10
"""-//W3C//DTD XHTML 1.0 Transitional//EN""",10
"""errors""",9
"""AppDelegate.h""",8
"""name""",8
"""utf-8""",8
"""__main__""",7
"""react""",7
"""${ZSH_VERSION+set}""",7
"""object""",7
"""encoding/json""",7
"""UTF-8""",7
"""config.h""",7
"""http://java.sun.com/xml/jaxb""",6
"""testing""",6
""".""",6
"""#""",6
"""CDStructures.h""",6
"""function""",5
"""encoding/binary""",5
"""rawtypes""",5
"""ace/mode/doc_comment_highlight_rules""",5
"""en""",5
"""test""",5
"""$""",5
"""cells""",5
"""id""",5
"""C""",4
"""1""",4
"""bufio""",4
"""\n""",4
"""error""",4
"""serial""",4
"""strings""",4
"""package:expect/expect.dart""",4
"""http://d.android.com/tools/testing/testing_android.html""",4
"""x""",4
"""default""",4
"""Content-Type""",4
"""deprecation""",4
"""Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are
** met:
**   * Redistributions of source code must retain the above copyright
**     notice, this list of conditions and the following disclaimer.
**   * Redistributions in binary form must reproduce the above copyright
**     notice, this list of conditions and the following disclaimer in
**     the documentation and/or other materials provided with the
**     distribution.
**   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
**     of its contributors may be used to endorse or promote products derived
**     from this software without specific prior written permission.
**
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** """,4
"""unused""",3
"""version""",3
"""__""",3
"""as is""",3
"""-//W3C//DTD HTML 4.01 Transitional//EN""",3
"""Helvetica Neue""",3
"""math""",3
"""flag""",3
"""crypto""",3
"""'""",3
"""Licensee""",3
"""COPYING""",3
"""sort""",3
"""hunch_net""",3
"""admin""",3
"""os""",3
"""string""",3
"""[""",3
"""reflect""",3
"""text""",3
"""-//W3C//DTD HTML 4.0 Transitional//EN""",3
"""type""",3
"""net""",3
"""Apple""",3
"""value""",3
"""true""",3
"""ViewController.h""",3
"""import""",3
"""Pass""",3
"""button""",3
"""0""",3
"""after""",2
"""io/ioutil""",2
"""a""",2
"""C#""",2
"""s""",2
"""bottom attached""",2
"""internal.h""",2
"""POST""",2
"""Open Sans""",2
"""project""",2
"""127.0.0.1""",2
"""i""",2
"""system message""",2
"""-//W3C//DTD XHTML 1.1//EN""",2
"""title""",2
"""{http://www.w3.org/2001/XMLSchema}anyType""",2
Query:
SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
      AND "content" LIKE '%\n%'
    LIMIT 100;
Answer:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd
Query:
SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "binary" = FALSE
    LIMIT 100;
Answer:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd
Query:
SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" IS NOT NULL AND "content" ILIKE '%import%'
    LIMIT 100;
Answer:
Too long, hard cut:
content
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString m_cd
Query:
SELECT "content", "size"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "size" > 1000
    LIMIT 100;
Answer:
Too long, hard cut:
content,size
"#pragma once
/*
 *      Copyright (C) 2005-2012 Team XBMC
 *      http://xbmc.org
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with XBMC; see the file COPYING.  If not, see
 *  <http://www.gnu.org/licenses/>.
 *
 */

#include ""utils/StdString.h""
#include <vector>

#include ""pictures/PictureScalingAlgorithm.h""
#include ""utils/GlobalsHandling.h""

class TiXmlElement;

class DatabaseSettings
{
public:
  void Reset()
  {
    type.clear();
    host.clear();
    port.clear();
    user.clear();
    pass.clear();
    name.clear();
  };
  CStdString type;
  CStdString host;
  CStdString port;
  CStdString user;
  CStdString pass;
  CStdString name;
};

struct TVShowRegexp
{
  bool byDate;
  CStdString regexp;
  int defaultSeason;
  TVShowRegexp(bool d, const CStdString& r, int s = 1)
  {
    byDate = d;
    regexp = r;
    defaultSeason = s;
  }
};

struct RefreshOverride
{
  float fpsmin;
  float fpsmax;

  float refreshmin;
  float refreshmax;

  bool  fallback;
};


struct RefreshVideoLatency
{
  float refreshmin;
  float refreshmax;

  float delay;
};

typedef std::vector<TVShowRegexp> SETTINGS_TVSHOWLIST;

class CAdvancedSettings
{
  public:
    CAdvancedSettings();

    static CAdvancedSettings* getInstance();

    void Initialize();
    bool Initialized() { return m_initialized; };
    void AddSettingsFile(const CStdString &filename);
    bool Load();
    void Clear();

    static void GetCustomTVRegexps(TiXmlElement *pRootElement, SETTINGS_TVSHOWLIST& settings);
    static void GetCustomRegexps(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomRegexpReplacers(TiXmlElement *pRootElement, CStdStringArray& settings);
    static void GetCustomExtensions(TiXmlElement *pRootElement, CStdString& extensions);

    bool CanLogComponent(int component) const;

    int m_audioHeadRoom;
#ifdef TARGET_OPENELEC
    // OpenELEC workaround for minimum sample Rate
    int m_minimumSampleRate;
#endif
    float m_ac3Gain;
    int m_maxPllAdjust;
    CStdString m_audioDefaultPlayer;
    float m_audioPlayCountMinimumPercent;
    bool m_dvdplayerIgnoreDTSinWAV;
    float m_limiterHold;
    float m_limiterRelease;

    bool  m_omxHWAudioDecode;
    bool  m_omxDecodeStartWithValidFrame;

    float m_videoSubsDelayRange;
    float m_videoAudioDelayRange;
    int m_videoSmallStepBackSeconds;
    int m_videoSmallStepBackTries;
    int m_videoSmallStepBackDelay;
    bool m_videoUseTimeSeeking;
    int m_videoTimeSeekForward;
    int m_videoTimeSeekBackward;
    int m_videoTimeSeekForwardBig;
    int m_videoTimeSeekBackwardBig;
    int m_videoPercentSeekForward;
    int m_videoPercentSeekBackward;
    int m_videoPercentSeekForwardBig;
    int m_videoPercentSeekBackwardBig;
    CStdString m_videoPPFFmpegDeint;
    CStdString m_videoPPFFmpegPostProc;
    bool m_videoVDPAUtelecine;
    bool m_videoVDPAUdeintSkipChromaHD;
    bool m_musicUseTimeSeeking;
    int m_musicTimeSeekForward;
    int m_musicTimeSeekBackward;
    int m_musicTimeSeekForwardBig;
    int m_musicTimeSeekBackwardBig;
    int m_musicPercentSeekForward;
    int m_musicPercentSeekBackward;
    int m_musicPercentSeekForwardBig;
    int m_musicPercentSeekBackwardBig;
    int m_videoBlackBarColour;
    int m_videoIgnoreSecondsAtStart;
    float m_videoIgnorePercentAtEnd;
    float m_audioApplyDrc;
    bool m_useFfmpegVda;

    int   m_videoVDPAUScaling;
    bool  m_videoVAAPIforced;
    float m_videoNonLinStretchRatio;
    bool  m_videoEnableHighQualityHwScalers;
    float m_videoAutoScaleMaxFps;
    std::vector<RefreshOverride> m_videoAdjustRefreshOverrides;
    std::vector<RefreshVideoLatency> m_videoRefreshLatency;
    float m_videoDefaultLatency;
    bool m_videoDisableBackgroundDeinterlace;
    int  m_videoCaptureUseOcclusionQuery;
    bool m_DXVACheckCompatibility;
    bool m_DXVACheckCompatibilityPresent;
    bool m_DXVAForceProcessorRenderer;
    bool m_DXVANoDeintProcForProgressive;
    bool m_DXVAAllowHqScaling;
    int  m_videoFpsDetect;
    int  m_videoBusyDialogDelay_ms;

    CStdString m_videoDefaultPlayer;
    CStdString m_videoDefaultDVDPlayer;
    float m_videoPlayCountMinimumPercent;

    float m_slideshowBlackBarCompensation;
    float m_slideshowZoomAmount;
    float m_slideshowPanAmount;

    bool m_lcdHeartbeat;
    bool m_lcdDimOnScreenSave;
    int m_lcdScrolldelay;
    CStdString m_lcdHostName;

    int m_songInfoDuration;
    int m_logLevel;
    int m_logLevelHint;
    CStdString
Query:
SELECT DISTINCT "sample_path"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%'
    LIMIT 100;
Answer:
Too long, hard cut:
sample_path
src/pyudev/_ctypeslib/__init__.py
alpha/lib/model/entry.php
flexmojos-testing/flexmojos-test-harness/src/test/java/net/flexmojos/oss/tests/concept/AttachAsdocTest.java
fs/namespace.c
sql/log_event.cc
pcap4j-core/src/main/java/org/pcap4j/core/NativePacketDllMappings.java
src/components/com_kunena/template/crypsis/assets/less/mediaqueries.less
metric2/ProductMetric.v
jca/src/main/java/org/apache/qpid/ra/tm/WLSTransactionManagerLocator.java
uimaj-json/src/main/java/org/apache/uima/json/impl/MetaDataObjectSerializer_json.java
objc/11-InstancedDrawing/InstancedDrawing/MBETypes.h
src/java/net/p455w0rd/wirelesscraftingterminal/core/sync/packets/PacketSetMagnet.java
YTZImageComparison/YTZMainColour.m
Core/Utility/Serialization/CerealBehaviour.cs.meta
packages/connect/src/template
src/test/java/edu/jhuapl/tinkerpop/mapreduce/InputFormatsTest.java
xmloff/source/style/PageMasterStyleMap.cxx
cdk-morphlines/cdk-morphlines-hadoop-core/src/test/java/com/cloudera/cdk/morphline/hadoop/core/MiniDFSTest.java
definitions/npm/redux-form_v5.x.x/test_redux-form_v5.js
gradle/wrapper/dists/gradle-2.2.1-all/c64ydeuardnfqctvr1gm30w53/gradle-2.2.1/src/dependency-management/org/gradle/api/internal/notations/ModuleIdentiferNotationParser.java
luigi_bigquery/config.py
utils.py
Unity 5.1 Source Project/Project/Assets/PlayFabClientSDK/Playfab/PlayFabSDK/JsonFx.meta
docs-api/deep-log/file/lib/Driver/Exception/InvalidSqsQueueUrlException.js.html
jta26/html/applet.conf
README.md
lib/atlas/schema.ex
vlo-web-app/src/main/java/eu/clarin/cmdi/vlo/wicket/model/CollectionMapEntryModel.java
Unity Project/Assets/Magicolo/GeneralTools/CustomEnums.cs.meta
server/src/scripts/ext1protoc.sh
citeproc-java/src/main/java/de/undercouch/citeproc/bibtex/NameParser.java
examples/example9/Example9.java
cloudfoundry-client/src/main/java/org/cloudfoundry/client/v2/userprovidedserviceinstances/_ListUserProvidedServiceInstancesResponse.java
mendeley/resources/groups.py
Services/Accounts/PasswordChallenge.cs.meta
echo-core/src/test/groovy/com/netflix/spinnaker/echo/services/Front50ServiceSpec.groovy
udark/underdark/src/main/java/impl/underdark/transport/bluetooth/discovery/Advertiser.java
scripts/encrypt.py
shared/src/main/scala/squants/motion/Momentum.scala
main/source/org/apach3/http/nio/NHttpServerEventHandler.java
Externals/AKOEditorrific/AKOEditorrific.h
core/src/com/clarkparsia/owlwg/testrun/SyntaxConstraintRun.java
Source/Home Screen/TransfersCellView.m
sources/DNTSettingsService.h
server/connect/networkCache.go
github-pullrequest-plugin/src/main/java/org/jenkinsci/plugins/github/pullrequest/events/impl/GitHubPRNonMergeableEvent.java
src/edu/fudan/ontology/graph/SparseMatrixT.java
Source/CAB/EntityWorkItem/EntitytWorkItem.cst
DKNightVersion/UIKit/UIProgressView+Night.m
pluginsTest/sandLanguage/src/org/mustbe/consulo/sandLanguage/ide/vfs/backgroundTask/SandBackgroundTaskByVfsChangeProvider.java
app/css/_modal.scss
app/src/main/java/com/github/baoti/pioneer/ui/news/list/INewsListView.java
toonz/sources/include/tw/fxbrowser.h
Pods/ReactiveCocoa/ReactiveCocoaFramework/ReactiveCocoa/RACBacktrace.m
aura/src/test/java/org/auraframework/test/util/AdaptiveWebElement.java
langtools/test/tools/javac/processing/model/element/TestElement.java
learn-liferay620-services/src/main/scala/com/arcusys/learn/liferay/constants/LayoutConstantsHelper.scala
plugins/plugin-git/che-plugin-git-ext-git/src/main/java/org/eclipse/che/ide/ext/git/client/reset/files/ResetFilesViewImpl.ui.xml
plugins/ui-designer/src/com/intellij/uiDesigner/actions/PreviewFormAction.java
unit-tests/src/test/java/com/gs/collections/impl/set/fixed/QuadrupletonSetTest.java
DemoApplication/Demo Application.csproj
plugins/ui-designer/src/com/intellij/uiDesigner/actions/CreateComponentAction.java
src/main/java/net/rubyeye/xmemcached/networking/Connector.java
src/l1j/server/server/model/skill/executor/L1Disease.java
src/api/java/li/cil/oc/api/component/package-info.java
jme3-core/src/test/java/com/jme3/material/plugins/LoadJ3mdTest.java
langtools/test/tools/javac/api/file/SJFM_GetFileObjects.java
tools/sqlmap/plugins/generic/search.py
library/src/main/java/eu/inmite/android/lib/validations/form/validators/ValueValidator.java
src/main/java/com/mashape/unirest/request/body/RequestBodyEntity.java
modules/graphics/src/main/native-glass/ios/GlassApplication.h
gemrb/GUIScripts/bg1/ImportFile.py
validation-test/compiler_crashers_fixed/27617-swift-markasobjc.swift
core/src/main/java/org/springframework/security/authentication/package-info.java
hyracks-fullstack/hyracks/hyracks-control/hyracks-control-common/src/main/java/org/apache/hyracks/control/common/ipc/ClusterControllerRemoteProxy.java
mycollab-mobile/src/main/java/com/esofthead/mycollab/mobile/module/crm/events/OpportunityEvent.java
gcc/gcc/cp/pt.c
state/machine_test.go
components/erRemoveDelegateRequest.js
src/contrib/capacity-scheduler/src/java/org/apache/hadoop/mapred/CapacitySchedulerConf.java
sql/sql_partition.cc
PowerEditor/src/WinControls/TabBar/TabBa
Query:
SELECT DISTINCT "sample_path"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
LIMIT 100;
Answer:
Too long, hard cut:
sample_path
common/thrift/CatalogService.thrift
socketcan_interface/CMakeLists.txt
bin/php7_linux1/bin/mbedtls_dh_client
src/pocketmine/block/Sugarcane.php
Install/Help/commands/3dmaths/SCALE VECTOR2.htm
src/cinder/app/linux/WindowImplLinuxEgl.cpp
libjava/javax/naming/spi/NamingManager.java
lionengine-network/src/main/java/com/b3dgs/lionengine/network/Networker.java
top_down_classifier/src/top_down_classifier/volume_visualizer.h
networking_cisco/neutronclient/policyprofile.py
third-party/org.svnkit/org/tmatesoft/svn/core/internal/wc2/ng/SvnNgRepositoryAccess.class
share/gamedir/levels/ctf_duel2/sprites/flag_y.bmp
aws-cpp-sdk-route53/include/aws/route53/model/CreateTrafficPolicyInstanceRequest.h
backend/colorAdmin/form_editable.html
src/BCR/BCRexternalBWT.cpp
util/robodoc/Source/robodoc.c
myblockchain-test/suite/rpl/r/rpl_loaddata_s.result
myblockchain-test/suite/ndb_rpl/r/ndb_rpl_mixed_tables.result
resources/assets/storagedrawers/textures/blocks/indicator/void_icon.png
GPy/testing/state_space_main_tests.py
tooling/support/provisioning-model/pom.xml
src/java/org/apache/cassandra/db/commitlog/ReplayPosition.java
chrome/browser/signin/about_signin_internals.cc
core/sis-metadata/src/test/java/org/apache/sis/metadata/iso/DefaultMetadataTest.java
src/include/platform.h
lib/padding/pad_variable.m
clients/java/src/main/java/com/senseidb/search/client/req/SenseiClientRequest.java
sal/qa/rtl/strings/test_oustring_compare.cxx
source/stylesheets/modules/_sortable.scss
bin/Skylark.dll.config
pos_position/cv483_16378.txt
src/main/webapp/fonts/DigitalDream/DIGITALDREAMNARROW-webfont.ttf
checks/decru_fans
grails-app/controllers/TagController.groovy
src/libc/stdio/FreeBSD/clrerr.c
CommonProjects/AMDTBaseTools/Include/gtStringTokenizer.h
libs/SDL2_ttf-2.0.14/debian/copyright
lionengine-core/src/main/java/com/b3dgs/lionengine/drawable/Image.java
src/main/resources/templates/layout/app.jade
spec/models/i18n_spec.rb
dbaccess/source/ui/misc/datasourceconnector.cxx
SystemEx/Windows/Forms/IpcHelper.cs
Assets/Scripts/HarryPotterUnity/Cards/Quidditch/Spells/QuickThinking.cs
authmodules/TYPO3/privacyidea/Resources/Private/Language/locallang.xlf
assets/src/scss/components/_logo.scss
Assets/Graphics/Big.psd
Product/Production/Services/PatientDiscoveryCore/src/main/java/gov/hhs/fha/nhinc/patientdiscovery/model/builder/impl/PatientSearchResultsModelBuilderImpl.java
third_party/skia/src/gpu/effects/GrConfigConversionEffect.cpp
deps/icu4c/source/i18n/hebrwcal.cpp
mapfishapp/src/main/java/org/georchestra/mapfishapp/ws/upload/FeatureGeoFileReader.java
uimaj-core/src/main/java/org/apache/uima/collection/CasConsumerDescription.java
whois-endtoend/src/test/java/net/ripe/db/whois/changedphase3/util/Scenario.java
JGTL/JGTL_API/latex/class_j_g_t_l_1_1_hex_tree_branch.tex
resources/CAVP/Vectors/OpenSSL/testvectors.SuSE/testvectors/sha/req/SHA256Monte.req
test/ddiff.052.clit
common/java/core/net/i2p/client/naming/ExecNamingService.java
third_party/skia/src/gpu/gl/GrGLProgram.cpp
pack.cmd
spec/test_app/spec-opal/active_record/update_associations_spec.rb
classes/time_series/@ts/acosh.m
html/partials/compare/os_table.html.haml
app/src/main/res/drawable-xxxhdpi/ic_headphones_grey600_48dp.png
app/src/main/res/drawable/key8.png
src/libs/css/daterangepicker-bs3.css
util/misc/cdna_fasta_file_to_transcript_gtf.pl
docs/html/T_AForge_Video_Ximea_XimeaCamera.htm
chromium/src/third_party/WebKit/Source/modules/webaudio/OfflineAudioDestinationNode.h
Helpers/INRIAEval/data-USA/annotations/set06/V017.vbb
include/bot-logic/behaviour_drive_neuralnet.h
src/Scriban.Tests/TestFiles/100-expressions/150-range-expression.txt
application/var/generation/Magento/AdminNotification/Controller/Adminhtml/Notification/Remove/Interceptor.php
test/VisualStudio.Test/VisualStudio.Test.csproj
subjectivity/objective/default/file4850
conda_manager/__init__.py
Vendor Firmware/Kinetis SDK v.1.3.0 API Reference Manual/fsl__clock__MKV40F15_8h.html
xxl-job-admin/src/main/java/com/xxl/job/admin/core/jobbean/impl/DemoConcurrentJobBean.java
dev.watchr.rb
.settings/org.eclipse.core.resources.prefs
virtual_memory.h
ArcFormats/BlackCyc/ArcGPK.cs
src/main/java/io/mycat/manager/response/ShowSQLSumUser.java
tapestry-core/src/test/java/org/apache/tapestry5/ContentTypeTest.java
vio/vio.c
Modules/BetterCms.Module.Root/Commands/Tag/SaveTag/SaveTagCommand.cs
lib/entities/plants/peatbog.dart
src/filesystem/ZWorkerPool.h
third-party/org.carrot2.api/javadoc/org/carrot2/text/preprocessing/CaseNormalizerDescriptor.Keys.html
core/lib/dr_config.h
ME3Explorer/Resources/property_database_64x64.png
module/plugins/crypter/UploadableChFolder.py
build.xml
content/browser/indexed_db/indexed_db_quota_client.cc
core/sis-referencing/src/main/java/org/apache/sis/referencing/datum/DefaultPrimeMeridian.java
streamingUpdate/seq1.c
grammars/unosln.cson
plugins/BackendTheme/src/Template/Element/settings.ctp
FAQ-USER
commonjs/google-map/map.js
tapestry-core/src/test/java/org/apache/tapestry5/internal/services/RequestPathOptimizer
Query:
SELECT "content"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%"%")%'
    LIMIT 100;
Answer:
Too long, hard cut:
content
"<?php
/**
 * Subclass for representing a row from the 'entry' table.
 *
 *
 *
 * @package Core
 * @subpackage model
 */
class entry extends Baseentry implements ISyncableFile, IIndexable, IOwnable, IRelatedObject
{
	protected $new_categories = '';
	protected $new_categories_ids = '';
	protected $old_categories;
	protected $is_categories_modified = false;
	protected $is_categories_names_modified = false;
	protected $creator_kuser_id = null;
	
	const MINIMUM_ID_TO_DISPLAY = 8999;
	
	const ROOTS_FIELD_PREFIX = 'K_Pref';
	const ROOTS_FIELD_ENTRY_PREFIX = 'KP_Entry';
	const ROOTS_FIELD_PARENT_ENTRY_PREFIX = 'KP_Parent';
	const ROOTS_FIELD_BULK_UPLOAD_PREFIX = 'KP_Bulk';

	// NOTE - CHANGES MUST BE MADE TO LAYOUT.PHP JS PART AS WELL
	// different sort orders for browsing entries
	const ENTRY_SORT_MOST_VIEWED = 0;
	const ENTRY_SORT_MOST_RECENT = 1;
	const ENTRY_SORT_MOST_COMMENTS = 2;
	const ENTRY_SORT_MOST_FAVORITES = 3;
	const ENTRY_SORT_RANK = 4;
	const ENTRY_SORT_MEDIA_TYPE = 5;
	const ENTRY_SORT_NAME = 6;
	const ENTRY_SORT_KUSER_SCREEN_NAME = 7;

	// NOTE - CHANGES MUST BE MADE TO LAYOUT.PHP JS PART AS WELL
	const ENTRY_MEDIA_TYPE_AUTOMATIC = -1;
	const ENTRY_MEDIA_TYPE_ANY = 0;
	const ENTRY_MEDIA_TYPE_VIDEO = 1;
	const ENTRY_MEDIA_TYPE_IMAGE = 2;
	const ENTRY_MEDIA_TYPE_TEXT = 3;
	const ENTRY_MEDIA_TYPE_HTML = 4;
	const ENTRY_MEDIA_TYPE_AUDIO = 5;
	const ENTRY_MEDIA_TYPE_SHOW = 6;
	const ENTRY_MEDIA_TYPE_SHOW_XML = 7; // for the kplayer: the data contains the xml itself and not a url
	const ENTRY_MEDIA_TYPE_BUBBLES = 9;
	const ENTRY_MEDIA_TYPE_XML = 10;
	const ENTRY_MEDIA_TYPE_DOCUMENT = 11;
	const ENTRY_MEDIA_TYPE_SWF = 12;
	const ENTRY_MEDIA_TYPE_PDF = 13;
	
	const ENTRY_MEDIA_TYPE_GENERIC_1= 101;	// these types can be used for derived classes - assume this is some kind of TXT file
	const ENTRY_MEDIA_TYPE_GENERIC_2= 102;	// these types can be used for derived classes
	const ENTRY_MEDIA_TYPE_GENERIC_3= 103;	// these types can be used for derived classes
	const ENTRY_MEDIA_TYPE_GENERIC_4= 104;	// these types can be used for derived classes
	
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_FLASH = 201;
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_WINDOWS_MEDIA = 202;
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_REAL_MEDIA = 203;
	const ENTRY_MEDIA_TYPE_LIVE_STREAM_QUICKTIME = 204;
	
	// NOTE - CHANGES MUST BE MADE TO LAYOUT.PHP JS PART AS WELL
	const ENTRY_MEDIA_SOURCE_FILE = 1;
	const ENTRY_MEDIA_SOURCE_WEBCAM = 2;
	const ENTRY_MEDIA_SOURCE_FLICKR = 3;
	const ENTRY_MEDIA_SOURCE_YOUTUBE = 4;
	const ENTRY_MEDIA_SOURCE_URL = 5;
	const ENTRY_MEDIA_SOURCE_TEXT = 6;
	const ENTRY_MEDIA_SOURCE_MYSPACE = 7;
	const ENTRY_MEDIA_SOURCE_PHOTOBUCKET = 8;
	const ENTRY_MEDIA_SOURCE_JAMENDO = 9;
	const ENTRY_MEDIA_SOURCE_CCMIXTER = 10;
	const ENTRY_MEDIA_SOURCE_NYPL = 11;
	const ENTRY_MEDIA_SOURCE_CURRENT = 12;
	const ENTRY_MEDIA_SOURCE_MEDIA_COMMONS = 13;
	const ENTRY_MEDIA_SOURCE_KALTURA = 20;
	const ENTRY_MEDIA_SOURCE_KALTURA_USER_CLIPS = 21;
	const ENTRY_MEDIA_SOURCE_ARCHIVE_ORG = 22;
	const ENTRY_MEDIA_SOURCE_KALTURA_PARTNER = 23;
	const ENTRY_MEDIA_SOURCE_METACAFE = 24;
	const ENTRY_MEDIA_SOURCE_KALTURA_QA = 25;
	const ENTRY_MEDIA_SOURCE_KALTURA_KSHOW = 26;
	const ENTRY_MEDIA_SOURCE_KALTURA_PARTNER_KSHOW = 27;
	const ENTRY_MEDIA_SOURCE_SEARCH_PROXY = 28;
	const ENTRY_MEDIA_SOURCE_AKAMAI_LIVE = 29;
	const ENTRY_MEDIA_SOURCE_MANUAL_LIVE_STREAM = 30;
	const ENTRY_MEDIA_SOURCE_AKAMAI_UNIVERSAL_LIVE = 31;
	const ENTRY_MEDIA_SOURCE_LIVE_STREAM = 32;
	const ENTRY_MEDIA_SOURCE_LIVE_CHANNEL = 33;
	const ENTRY_MEDIA_SOURCE_RECORDED_LIVE = 34;
	const ENTRY_MEDIA_SOURCE_CLIP = 35;
	const ENTRY_MEDIA_SOURCE_PARTNER_SPECIFIC = 100;
		
	const ENTRY_MODERATION_STATUS_PENDING_MODERATION = 1;
	const ENTRY_MODERATION_STATUS_APPROVED = 2;
	const ENTRY_MODERATION_STATUS_REJECTED = 3;
	const ENTRY_MODERATION_STATUS_FLAGGED_FOR_REVIEW = 5;
	const ENTRY_MODERATION_STATUS_AUTO_APPROVED = 6;
	
	const MAX_NORMALIZED_RANK = 5;

	const MAX_CATEGORIES_PER_ENTRY = 32;
	const MAX_CATEGORIES_PER_ENTRY_DISABLE_LIMIT_FEATURE = 200;
	
	const FILE_SYNC_ENTRY_SUB_TYPE_DATA = 1;
	const FILE_SYNC_ENTRY_SUB_TYPE_DATA_EDIT = 2;
	const FILE_SYNC_ENTRY_SUB_TYPE_THUMB = 3;
	const FILE_SYNC_ENTRY_SUB_TYPE_ARCHIVE = 4;
	const FILE_SYNC_ENTRY_SUB_TYPE_DOWNLOAD = 5;
	const FILE_SYNC_ENTRY_SUB_TYPE_OFFLINE_THUMB = 6;
	const FILE_SYNC_ENTRY_SUB_TYPE_ISM = 7;
	const FILE_SYNC_ENTRY_SUB_TYPE_ISMC = 8;
	const FILE_SYNC_ENTRY_SUB_TYPE_CONVERSION_LOG = 9;
	const FILE_SYNC_ENTRY_SUB_TYPE_LIVE_PRIMARY = 10; 
	const FILE_SYNC_ENTRY_SUB_TYPE_LIVE_SECONDARY = 11; 
	
	const MIX_EDITOR_TYPE_SIMPLE = 1;
	const MIX_EDITOR_TYPE_ADVANCED = 2;
	
	const ENTRY_DURATION_TYPE_NOTAVAILABLE = ""notavailable"";
	const ENTRY_DURATION_TYPE_SHORT = ""short"";
	const ENTRY_DURATION_TYPE_MEDIUM = ""medium"";
	const ENTRY_DURATION_TYPE_LONG = ""long"";
	
	const ENTRY_CATEGORY_ESCAPE = ""_"";
	const ENTRY_CATEGORY_SEPARATOR = "","";
	
	const ENTRY_ID_THAT_DOES_NOT_EXIST = 0;
	
	const CATEGORY_SEARCH_PERFIX = 'c';
	const
Query:
SELECT TRIM(BOTH '"' FROM REGEXP_SUBSTR("content", '""([^""]+)""')) AS "package_name"
FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
WHERE "content" ILIKE '%import%""%""%'
LIMIT 100;
Answer:
001003 (42000): 01ba59b8-0004-9c22-0001-11c301130b6a: SQL compilation error:
syntax error line 1 at position 17 unexpected ''"''.
syntax error line 1 at position 17 unexpected ''"''.Query:
SELECT "id", REGEXP_COUNT("content", 'import') AS "import_count"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    LIMIT 100;
Answer:
id,import_count
2dd586a19b594a73e9c6f7485d1e5da9203a4467,0.0
7acfd43a7914620c9fef2196f9cac65d0f542d53,1.0
9eb0c3299f21b4d86029ebbbf0b6ad8c0945b35d,0.0
816b2d7412b432d86a4a36147255ec664f760193,0.0
ca151cab87aa4ba9286dd5b3557fd75bb902c442,5.0
21cab621a82b9e390ee6cfe409704954c4d90f4f,15.0
66e2bf008bdb297f2af2125a7f59afb8f90ee107,5.0
026e9467f313c7776b144881ba161103119aa0a9,6.0
f50a76cff9f42438026c7cf8bba687bcd2d491ea,0.0
8e0ab7a402ed401e4a92a0933d211dada21b4508,0.0
9281ba3801cf1a02af6ea13bebdc19a41d48b463,0.0
7ec9cbbbdc3ace14e655f751501f0b872930f34f,0.0
67c981b77bfe643e0a664f9179f84e28971e347e,
89b92f14f4b3832108de19ca964f73a1e5ab0133,0.0
de1cba95dbe087f858735dc17e86f1a7f5d71af8,0.0
6b3e05813c8df6e5fd24b2bb2abc0f765153cf76,9.0
003fd53850a89b787395007d69e0fb6f189f922c,4.0
7bc2fbeb883e739d41d2bc18bcd2f76bac62405f,9.0
b7cde36092689db6dada97894e63992f577dc610,0.0
efc4a4e7a2a4697d74b1f5a3696800a7289963f5,0.0
0052de438fe69bac42ec3caf472988bcfea7641b,5.0
630abd5ef1c4a032c64b076ef06e92dc30262880,3.0
35ebf1c9779099f07d0906955485d6f15608504b,1.0
4a6e3ef763ac4c820ac268053084dcf2d9a5c20f,2.0
e4c56a64472e33c2ceff4248a70897e2364df3e4,0.0
53d41edc180367174c94ecfc3ec615dca283472e,0.0
02c9781faebbba633113adee71cb90230f6203d4,0.0
bcaf713c6341dca3dc7506fdb71c943768248811,0.0
b39fb02fd35e99a9b9d7604b5a51bad331239d9f,0.0
bd8ba51bb577cd64bbc2a2df43dd74bc78aadf1a,0.0
73e022d17f9556754e9506bce20b79b9376ab059,0.0
21c34c1c0aba3aac858c6c975f269f141ffd091b,1.0
ef9b8a5ff4f0f32508c7ae873fb3326a9d656bb8,0.0
e1813d75df3e183766f07b062776b3897a2523a7,1.0
f7ff75ea593f6300f4ba3d488f50b6c0dcbf5621,
801612d3e022bef0512f1322806589e8824e34c9,0.0
58409ad17b6f8bc2dc6d3c095a2ace8b38996bfc,0.0
5acbb02c0bd644561fecce1ba9b5ed3431c2c400,0.0
803aef6c020618e8a2759138ba2f4992b10e377f,5.0
3dc7fe5332570c343998825d3e94475d4edcabf7,0.0
e2521c113a74bb8250434b6efce725e1134a7003,0.0
7122ce62f2d1bee4878c0593c244de80247fe88b,1.0
6ef0115e036a78b7186aebf5aa390d15caeb78cd,0.0
04aa747e26f22b5e6e5e33cd117d4a7adfba57f0,0.0
761eaa5a1d29eee52ed9bb752756c453c8f24a2c,0.0
2272ea8b5b1cbdc7b2578c6d0a8c5416c200dd57,0.0
6db6b8f13a912023f4c8c889b75e7366cca6d221,0.0
b2904db52dd0dce293619fc10106854823533867,0.0
1cd9db02e03f907dd998722ec7c9674b6532250c,20.0
51f5fb742136850f2ad2ebad70a3ef1748178b6f,
b4a319e43ad65d47a62c13cb8379699db645f95a,0.0
e30c39995034c6749d89ec2ea723d73c35869cf1,
98001653566ed4abf3b6980b59a53152fa8e6a24,2.0
a2b13a6525699664774a1f68bdd9f271cd59198d,0.0
9aa58406334a1f589e1f83c811d46fdf5f6120a1,0.0
2f678fd6a81b8653c17eaa1a5891d8ba2845b0bc,2.0
f2871049dc62e26b4421e657389724706572bb26,0.0
317c67b246df6fcb29d2e660159a291c4d9e1471,0.0
8f7129cd125e0baf7b66a23c0548ca6c608fbacf,7.0
cd625461c4640831a5f6a27c64865819addce368,0.0
e919d808a0495863c59c27e74e3bef40afcfcf58,10.0
cf118b09856ceda177b1ff62d8662f9bc52c0cb3,0.0
612de1db5cc35a0d852e260a543e686d42dfed62,0.0
d2140a96a46b5196e5368ebe555bde477cf95a0d,0.0
54a85e112740e947c4b982d69aea64bd360e0297,1.0
0928a9c76e1926b295922413d39658e8f45ab452,
f0620274b417f4b11564e2e5f530139e0f06cdb8,
75c71cd4201fa47a234b7dcc2240a415dfa5610d,0.0
970816f61ec689e35495f05345d26070b95450dc,0.0
320dbc0d9d8a3f40c867a51bde847fc89be76f08,1.0
a266b7b1edded4066a8541baa090ac49b5ab1a50,0.0
ad37595cee87b33e089abe682bc38afafb038eb7,0.0
dc50bbe6a5c76a22b6532722b31f50d2e058de67,0.0
1784564068511de9c6d0a8ed7946836636ae6817,0.0
70cf22b949b32adfc25dd9dff4131bf2e09198dd,0.0
6ff7b25011e8d2310c7f73a1c4606750989e2022,0.0
0e1068c119973343a4230816dc1992e6b33bc318,0.0
0ad8376107f9e0125c2b96cd29b8ecdd09dddeda,
92445a58f9282b454355a57706ff39a78e8dd468,0.0
11b7430362f8ba83fe471bf6a641c9c9ac8725bc,0.0
41347cdcf00b2fa6a5020d967b0f3d5dd2f29c53,0.0
747f288e08d93ea8bea587f77121cb822f047791,0.0
97af8908bb7689c60f48beff6ec538b0a3927622,0.0
fe3b18fe0a8aae2c12bf47189b89feb807c6b8a8,0.0
95e160899c088cab1e41c90b8af1eb3b3adfa718,0.0
aaa80219f1d33d142060ebd9aace5ced01ffc6b8,
5c16fe4787609ce827ac4115819b4ca6623d94ad,3.0
67c4aed4740fc59050486d5a2a43643b129e6c4b,2.0
dc0f68d612e07adee3485ed0a1d0e25d46b71424,0.0
84b1feb4e61c56ab8e2fa7bcb4ee6bf15421bd6f,0.0
6d83eaae13a37486983bb9f66e0c7d6525270cd2,0.0
b97643460fb91c62286edcb18f2357a43fce90f0,0.0
370876ccf108f9d57baa192b0521b2ae4ec0cc22,0.0
37362386720d22e764e4ba6bdc6f1a1cef4ceb30,17.0
395a3deac906aea5858b298502a9866fc9620a12,
99ba4177c70da1c9a4c8fddb68d3343152b90780,
b7e06762acb43886348a9dbe715088497912f95b,
d1b09bb181570f981826d4444fd8c91675ad7466,
879e640a5f54ecb0fee4a03801266f25bef3d919,
70198e8f66cef395063610b666e7272f61858b78,
End Exploring Related Columns
Task: How can we identify the top 10 most frequently used packages in GitHub repository contents by looking for import statements enclosed in parentheses, splitting any multi-line imports by newlines, extracting package names that appear within double quotes, counting how often these packages appear, ignoring any null results, and finally ordering them in descending order of their frequency? The final answer should remove the quotation marks.

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: To identify the top 10 most frequently used packages in GitHub repository contents, we analyze the `content` field in the `SAMPLE_CONTENTS` table. We search for `import` statements enclosed in parentheses, split any multi-line imports by newlines, and extract package names that appear within double quotes. After counting how often these packages appear and removing any null results, we order them in descending order of their frequency. The final result removes the quotation marks from the package names.

```csv
Package,Frequency
package1:str,count1:int
package2:str,count2:int
package3:str,count3:int
package4:str,count4:int
package5:str,count5:int
package6:str,count6:int
package7:str,count7:int
package8:str,count8:int
package9:str,count9:int
package10:str,count10:int
(Attention: answer in ten rows)
```.
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'GITHUB_REPOS': {'GITHUB_REPOS': ['SAMPLE_FILES', 'LANGUAGES', 'LICENSES', 'SAMPLE_COMMITS', 'SAMPLE_CONTENTS', 'SAMPLE_REPOS']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-02-12 20:40:56 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:40:56 - root - INFO - To identify the top 10 most frequently used packages in GitHub repository contents, we analyze the `content` field in the `SAMPLE_CONTENTS` table. We search for `import` statements enclosed in parentheses, split any multi-line imports by newlines, and extract package names that appear within double quotes. After counting how often these packages appear and removing any null results, we order them in descending order of their frequency. The final result removes the quotation marks from the package names.

```sql
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1, 'in', 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        line.VALUE AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n')) AS line
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) IS NOT NULL
)
SELECT TRIM(BOTH '"' FROM "package_name") AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
```
2025-02-12 20:40:56 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:40:56 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:40:56 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:40:57 - snowflake.connector.connection - INFO - closed
2025-02-12 20:40:58 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:40:58 - root - INFO - itercount: 1
2025-02-12 20:40:58 - root - INFO - 001003 (42000): 01ba59b8-0004-9c12-0001-11c3011318e2: SQL compilation error:
syntax error line 20 at position 17 unexpected ''"''.
syntax error line 20 at position 17 unexpected ''"''.
2025-02-12 20:40:58 - root - INFO - Input sql:
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1, 'in', 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        line.VALUE AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n')) AS line
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) IS NOT NULL
)
SELECT TRIM(BOTH '"' FROM "package_name") AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
The error information is:
001003 (42000): 01ba59b8-0004-9c12-0001-11c3011318e2: SQL compilation error:
syntax error line 20 at position 17 unexpected ''"''.
syntax error line 20 at position 17 unexpected ''"''.
Please correct it and output only 1 complete SQL query.
2025-02-12 20:41:28 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:41:28 - root - INFO - ```sql
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1, 'in', 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        line.VALUE AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n')) AS line
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) IS NOT NULL
)
SELECT TRIM(BOTH CHR(34) FROM "package_name") AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
```
2025-02-12 20:41:28 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:41:28 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:41:28 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:41:29 - snowflake.connector.connection - INFO - closed
2025-02-12 20:41:29 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:41:29 - root - INFO - itercount: 2
2025-02-12 20:41:29 - root - INFO - 001003 (42000): 01ba59b9-0004-9c12-0001-11c301131a46: SQL compilation error:
syntax error line 20 at position 17 unexpected 'CHR'.
syntax error line 20 at position 17 unexpected 'CHR'.
2025-02-12 20:41:29 - root - INFO - Input sql:
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1, 'in', 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        line.VALUE AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n')) AS line
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) IS NOT NULL
)
SELECT TRIM(BOTH CHR(34) FROM "package_name") AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
The error information is:
001003 (42000): 01ba59b9-0004-9c12-0001-11c301131a46: SQL compilation error:
syntax error line 20 at position 17 unexpected 'CHR'.
syntax error line 20 at position 17 unexpected 'CHR'.
Please correct it and output only 1 complete SQL query.
2025-02-12 20:41:57 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:41:57 - root - INFO - ```sql
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1, 'in', 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        line.VALUE AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n')) AS line
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) IS NOT NULL
)
SELECT TRIM(BOTH CHAR(34) FROM "package_name") AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
```
2025-02-12 20:41:57 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:41:57 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:41:57 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:41:58 - snowflake.connector.connection - INFO - closed
2025-02-12 20:41:58 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:41:58 - root - INFO - itercount: 3
2025-02-12 20:41:58 - root - INFO - 001003 (42000): 01ba59b9-0004-9c22-0001-11c301132112: SQL compilation error:
syntax error line 20 at position 17 unexpected 'CHAR'.
syntax error line 20 at position 17 unexpected 'CHAR'.
2025-02-12 20:41:58 - root - INFO - Input sql:
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1, 'in', 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        line.VALUE AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n')) AS line
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) IS NOT NULL
)
SELECT TRIM(BOTH CHAR(34) FROM "package_name") AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
The error information is:
001003 (42000): 01ba59b9-0004-9c22-0001-11c301132112: SQL compilation error:
syntax error line 20 at position 17 unexpected 'CHAR'.
syntax error line 20 at position 17 unexpected 'CHAR'.
Please correct it and output only 1 complete SQL query.
2025-02-12 20:42:38 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:42:38 - root - INFO - ```sql
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1, 'in', 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        line.VALUE AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n')) AS line
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
```
2025-02-12 20:42:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:42:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:42:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:42:44 - snowflake.connector.connection - INFO - closed
2025-02-12 20:42:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:42:44 - root - INFO - itercount: 4
2025-02-12 20:42:44 - root - INFO - 100050 (22023): 01ba59ba-0004-9c12-0001-11c301131d6e: Invalid parameter value: in. Reason: Unknown parameter: 'n'
2025-02-12 20:42:44 - root - INFO - Input sql:
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1, 'in', 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        line.VALUE AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n')) AS line
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'n', 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
The error information is:
100050 (22023): 01ba59ba-0004-9c12-0001-11c301131d6e: Invalid parameter value: in. Reason: Unknown parameter: 'n'
Please correct it and output only 1 complete SQL query.
2025-02-12 20:43:13 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:43:13 - root - INFO - ```sql
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1, 'c', 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        line.VALUE::string AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n')) AS line
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'c', 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'c', 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
```
2025-02-12 20:43:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:43:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:43:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:43:15 - snowflake.connector.cursor - INFO - Number of results in first chunk: 10
2025-02-12 20:43:15 - snowflake.connector.connection - INFO - closed
2025-02-12 20:43:15 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:43:15 - root - INFO - itercount: 5
2025-02-12 20:43:15 - root - INFO - 0
2025-02-12 20:43:15 - root - INFO - results: 
Package,Frequency
//build/config/ui.gni,2
//build/config/android/config.gni,2
//mojo/public/mojo_application_manifest.gni,1
//clank/config.gni,1
resource://services-sync/constants.js,1
zombiezen.com/go/capnproto2/std/capnp/cxx,1
//build/compiled_action.gni,1
~/lol.css,1
cordova,1
ilixi_Widget,1


2025-02-12 20:43:15 - root - INFO - Please check the answer again by reviewing How can we identify the top 10 most frequently used packages in GitHub repository contents by looking for import statements enclosed in parentheses, splitting any multi-line imports by newlines, extracting package names that appear within double quotes, counting how often these packages appear, ignoring any null results, and finally ordering them in descending order of their frequency? The final answer should remove the quotation marks., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: To identify the top 10 most frequently used packages in GitHub repository contents, we analyze the `content` field in the `SAMPLE_CONTENTS` table. We search for `import` statements enclosed in parentheses, split any multi-line imports by newlines, and extract package names that appear within double quotes. After counting how often these packages appear and removing any null results, we order them in descending order of their frequency. The final result removes the quotation marks from the package names.

```csv
Package,Frequency
package1:str,count1:int
package2:str,count2:int
package3:str,count3:int
package4:str,count4:int
package5:str,count5:int
package6:str,count6:int
package7:str,count7:int
package8:str,count8:int
package9:str,count9:int
package10:str,count10:int
(Attention: answer in ten rows)
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Package,Frequency
//build/config/ui.gni,2
//build/config/android/config.gni,2
//mojo/public/mojo_application_manifest.gni,1
//clank/config.gni,1
resource://services-sync/constants.js,1
zombiezen.com/go/capnproto2/std/capnp/cxx,1
//build/compiled_action.gni,1
~/lol.css,1
cordova,1
ilixi_Widget,1
Current sql:
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1, 'c', 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        line.VALUE::string AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n')) AS line
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'c', 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, 'c', 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
2025-02-12 20:44:01 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:44:01 - root - INFO - ```sql
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        value::string AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n'))
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
```
2025-02-12 20:44:01 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:44:01 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:44:01 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:44:02 - snowflake.connector.cursor - INFO - Number of results in first chunk: 10
2025-02-12 20:44:02 - snowflake.connector.connection - INFO - closed
2025-02-12 20:44:02 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:44:02 - root - INFO - itercount: 6
2025-02-12 20:44:02 - root - INFO - 0
2025-02-12 20:44:02 - root - INFO - results: 
Package,Frequency
//build/config/android/config.gni,2
//build/config/ui.gni,2
//clank/config.gni,1
zombiezen.com/go/capnproto2/std/capnp/cxx,1
ilixi_Widget,1
cordova,1
~/lol.css,1
//mojo/public/mojo_application_manifest.gni,1
resource://services-sync/constants.js,1
content,1


2025-02-12 20:44:02 - root - INFO - Please check the answer again by reviewing How can we identify the top 10 most frequently used packages in GitHub repository contents by looking for import statements enclosed in parentheses, splitting any multi-line imports by newlines, extracting package names that appear within double quotes, counting how often these packages appear, ignoring any null results, and finally ordering them in descending order of their frequency? The final answer should remove the quotation marks., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: To identify the top 10 most frequently used packages in GitHub repository contents, we analyze the `content` field in the `SAMPLE_CONTENTS` table. We search for `import` statements enclosed in parentheses, split any multi-line imports by newlines, and extract package names that appear within double quotes. After counting how often these packages appear and removing any null results, we order them in descending order of their frequency. The final result removes the quotation marks from the package names.

```csv
Package,Frequency
package1:str,count1:int
package2:str,count2:int
package3:str,count3:int
package4:str,count4:int
package5:str,count5:int
package6:str,count6:int
package7:str,count7:int
package8:str,count8:int
package9:str,count9:int
package10:str,count10:int
(Attention: answer in ten rows)
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Package,Frequency
//build/config/android/config.gni,2
//build/config/ui.gni,2
//clank/config.gni,1
zombiezen.com/go/capnproto2/std/capnp/cxx,1
ilixi_Widget,1
cordova,1
~/lol.css,1
//mojo/public/mojo_application_manifest.gni,1
resource://services-sync/constants.js,1
content,1
Current sql:
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        value::string AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n'))
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
2025-02-12 20:44:30 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:44:30 - root - INFO - To identify the top 10 most frequently used packages in GitHub repository contents, we analyze the `content` field in the `SAMPLE_CONTENTS` table. We search for `import` statements enclosed in parentheses, split any multi-line imports by newlines, and extract package names that appear within double quotes. After counting how often these packages appear and removing any null results, we order them in descending order of their frequency. The final result removes the quotation marks from the package names.

```sql
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        VALUE::STRING AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n'))
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
```
2025-02-12 20:44:30 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:44:30 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:44:30 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:44:31 - snowflake.connector.cursor - INFO - Number of results in first chunk: 10
2025-02-12 20:44:31 - snowflake.connector.connection - INFO - closed
2025-02-12 20:44:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:44:31 - root - INFO - itercount: 7
2025-02-12 20:44:31 - root - INFO - 0
2025-02-12 20:44:31 - root - INFO - results: 
Package,Frequency
//build/config/android/config.gni,2
//build/config/ui.gni,2
ilixi_Widget,1
//clank/config.gni,1
resource://services-sync/constants.js,1
zombiezen.com/go/capnproto2/std/capnp/cxx,1
//build/compiled_action.gni,1
cordova,1
//mojo/public/mojo_application_manifest.gni,1
content,1


2025-02-12 20:44:31 - root - INFO - Please check the answer again by reviewing How can we identify the top 10 most frequently used packages in GitHub repository contents by looking for import statements enclosed in parentheses, splitting any multi-line imports by newlines, extracting package names that appear within double quotes, counting how often these packages appear, ignoring any null results, and finally ordering them in descending order of their frequency? The final answer should remove the quotation marks., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: To identify the top 10 most frequently used packages in GitHub repository contents, we analyze the `content` field in the `SAMPLE_CONTENTS` table. We search for `import` statements enclosed in parentheses, split any multi-line imports by newlines, and extract package names that appear within double quotes. After counting how often these packages appear and removing any null results, we order them in descending order of their frequency. The final result removes the quotation marks from the package names.

```csv
Package,Frequency
package1:str,count1:int
package2:str,count2:int
package3:str,count3:int
package4:str,count4:int
package5:str,count5:int
package6:str,count6:int
package7:str,count7:int
package8:str,count8:int
package9:str,count9:int
package10:str,count10:int
(Attention: answer in ten rows)
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Package,Frequency
//build/config/android/config.gni,2
//build/config/ui.gni,2
ilixi_Widget,1
//clank/config.gni,1
resource://services-sync/constants.js,1
zombiezen.com/go/capnproto2/std/capnp/cxx,1
//build/compiled_action.gni,1
cordova,1
//mojo/public/mojo_application_manifest.gni,1
content,1
Current sql:
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\((.*?)\\)', 1, 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        VALUE::STRING AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n'))
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
2025-02-12 20:45:32 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:45:32 - root - INFO - To identify the top 10 most frequently used packages in GitHub repository contents, we analyze the `content` field in the `SAMPLE_CONTENTS` table. We search for `import` statements enclosed in parentheses, split any multi-line imports by newlines, and extract package names that appear within double quotes. After counting how often these packages appear and removing any null results, we order them in descending order of their frequency. The final result removes the quotation marks from the package names.

```csv
Package,Frequency
package1,100
package2,90
package3,80
package4,70
package5,60
package6,50
package7,40
package8,30
package9,20
package10,10
```

```sql
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\s*\((.*?)\)', 1, 1, '', 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        VALUE::STRING AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n'))
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, '', 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, '', 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
```
2025-02-12 20:45:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:45:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:45:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:45:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 10
2025-02-12 20:45:33 - snowflake.connector.connection - INFO - closed
2025-02-12 20:45:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:45:34 - root - INFO - itercount: 8
2025-02-12 20:45:34 - root - INFO - 0
2025-02-12 20:45:34 - root - INFO - results: 
Package,Frequency
AppDelegate.h,7
 href=,6
CDStructures.h,6
react,6
",",5
package:expect/expect.dart,4
ViewController.h,3
//build/config/ui.gni,2
http://www.w3.org/XML/1998/namespace,2
//build/config/android/config.gni,2


2025-02-12 20:45:34 - root - INFO - Please check the answer again by reviewing How can we identify the top 10 most frequently used packages in GitHub repository contents by looking for import statements enclosed in parentheses, splitting any multi-line imports by newlines, extracting package names that appear within double quotes, counting how often these packages appear, ignoring any null results, and finally ordering them in descending order of their frequency? The final answer should remove the quotation marks., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: To identify the top 10 most frequently used packages in GitHub repository contents, we analyze the `content` field in the `SAMPLE_CONTENTS` table. We search for `import` statements enclosed in parentheses, split any multi-line imports by newlines, and extract package names that appear within double quotes. After counting how often these packages appear and removing any null results, we order them in descending order of their frequency. The final result removes the quotation marks from the package names.

```csv
Package,Frequency
package1:str,count1:int
package2:str,count2:int
package3:str,count3:int
package4:str,count4:int
package5:str,count5:int
package6:str,count6:int
package7:str,count7:int
package8:str,count8:int
package9:str,count9:int
package10:str,count10:int
(Attention: answer in ten rows)
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Package,Frequency
AppDelegate.h,7
 href=,6
CDStructures.h,6
react,6
",",5
package:expect/expect.dart,4
ViewController.h,3
//build/config/ui.gni,2
http://www.w3.org/XML/1998/namespace,2
//build/config/android/config.gni,2
Current sql:
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\s*\((.*?)\)', 1, 1, '', 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        VALUE::STRING AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n'))
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, '', 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, '', 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
2025-02-12 20:46:14 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:46:14 - root - INFO - To identify the top 10 most frequently used packages in GitHub repository contents, we analyze the `content` field in the `SAMPLE_CONTENTS` table. We search for `import` statements enclosed in parentheses, split any multi-line imports by newlines, and extract package names that appear within double quotes. After counting how often these packages appear and removing any null results, we order them in descending order of their frequency. The final result removes the quotation marks from the package names.

```sql
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\s*\(([^)]*)\)', 1, 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        VALUE::STRING AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n'))
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
```
2025-02-12 20:46:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:46:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:46:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:46:16 - snowflake.connector.cursor - INFO - Number of results in first chunk: 10
2025-02-12 20:46:16 - snowflake.connector.connection - INFO - closed
2025-02-12 20:46:16 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:46:16 - root - INFO - itercount: 9
2025-02-12 20:46:16 - root - INFO - 0
2025-02-12 20:46:16 - root - INFO - results: 
Package,Frequency
description,285
message,278
left,224
unfinished,151
fmt,79
nt,60
strings,46
time,43
testing,37
os,31


2025-02-12 20:46:16 - root - INFO - Please check the answer again by reviewing How can we identify the top 10 most frequently used packages in GitHub repository contents by looking for import statements enclosed in parentheses, splitting any multi-line imports by newlines, extracting package names that appear within double quotes, counting how often these packages appear, ignoring any null results, and finally ordering them in descending order of their frequency? The final answer should remove the quotation marks., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: To identify the top 10 most frequently used packages in GitHub repository contents, we analyze the `content` field in the `SAMPLE_CONTENTS` table. We search for `import` statements enclosed in parentheses, split any multi-line imports by newlines, and extract package names that appear within double quotes. After counting how often these packages appear and removing any null results, we order them in descending order of their frequency. The final result removes the quotation marks from the package names.

```csv
Package,Frequency
package1:str,count1:int
package2:str,count2:int
package3:str,count3:int
package4:str,count4:int
package5:str,count5:int
package6:str,count6:int
package7:str,count7:int
package8:str,count8:int
package9:str,count9:int
package10:str,count10:int
(Attention: answer in ten rows)
``` The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Package,Frequency
description,285
message,278
left,224
unfinished,151
fmt,79
nt,60
strings,46
time,43
testing,37
os,31
Current sql:
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\s*\(([^)]*)\)', 1, 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        VALUE::STRING AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n'))
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
2025-02-12 20:46:43 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 20:46:43 - root - INFO - To identify the top 10 most frequently used packages in GitHub repository contents, we analyze the `content` field in the `SAMPLE_CONTENTS` table. We search for `import` statements enclosed in parentheses, split any multi-line imports by newlines, and extract package names that appear within double quotes. After counting how often these packages appear and removing any null results, we order them in descending order of their frequency. The final result removes the quotation marks from the package names.

```csv
Package,Frequency
description,285
message,278
left,224
unfinished,151
fmt,79
nt,60
strings,46
time,43
testing,37
os,31
```

```sql
WITH imports AS (
    SELECT "content",
        REGEXP_SUBSTR("content", 'import\\s*\\(([^)]*)\\)', 1, 1, NULL, 1) AS "import_block"
    FROM "GITHUB_REPOS"."GITHUB_REPOS"."SAMPLE_CONTENTS"
    WHERE "content" ILIKE '%import%(%'
),
import_lines AS (
    SELECT 
        "import_block",
        VALUE::STRING AS "line"
    FROM imports,
    LATERAL FLATTEN(input => SPLIT("import_block", '\n'))
),
packages AS (
    SELECT
        REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, NULL, 1) AS "package_name"
    FROM import_lines
    WHERE REGEXP_SUBSTR("line", '"([^"]+)"', 1, 1, NULL, 1) IS NOT NULL
)
SELECT REPLACE("package_name", '"', '') AS "Package", COUNT(*) AS "Frequency"
FROM packages
WHERE "package_name" IS NOT NULL
GROUP BY "Package"
ORDER BY "Frequency" DESC NULLS LAST
LIMIT 10;
```
2025-02-12 20:46:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 20:46:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 20:46:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 20:46:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-02-12 20:46:44 - snowflake.connector.connection - INFO - closed
2025-02-12 20:46:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 20:46:44 - root - INFO - Total iteration counts: 10
