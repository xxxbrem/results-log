2025-02-12 18:28:51 - openai._base_client - INFO - Retrying request to /chat/completions in 0.406307 seconds
2025-02-12 18:29:37 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 18:29:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:29:38 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 18:29:38 - snowflake.connector.connection - INFO - closed
2025-02-12 18:29:38 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:29:39 - root - INFO - SQL:
SELECT DISTINCT "repo_name"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS
   LIMIT 100;
Results:
repo_name
kbandla/APTnotes
bigcompany/hook.io
H07000223/FlycoDialog_Master
veficos/reverse-engineering-for-beginners
oblac/jodd
leichunfeng/WXTabBarController
gavinbunney/Toucan
krisk/Fuse
brigade/react-waypoint
Quartz/mapquery
gephi/gephi
ant-design/ant-ux
CodelightStudios/Android-Smart-Login
onestraw/ebook
SwiftStudies/Duration
pgexperts/pgx_scripts
muaz-khan/WebRTC-Experiment
lovell/sharp
tombh/texttop
collinhundley/Swift-AI
laravel/homestead
raisemarketplace/ground-control
rstudio/shiny
FredKSchott/fflip
jakubpawlowicz/clean-css
tushar-rishav/code2pdf
NorthwoodsSoftware/GoJS
danikula/AndroidVideoCache
hmkcode/Android
ViccAlexander/Chameleon
0x5e/wechat-deleted-friends
ikCourage/LFS
hitsujiwool/timeline
EduMelo/jboss-ejb3-tutorial
northox/roundcube-yubikey-plugin
frc5687/pi-tracker
jaccarmac/dot-emacs-dot-d
indonesia/community
Muyangmin/AVLoadingIndicatorView
linkedin/gobblin
id-Software/DOOM-3-BFG
garnaat/kappa
evilsocket/bettercap
kevin0571/STPopup
marmelroy/PhoneNumberKit
assemble/assemble
erikflowers/weather-icons
xitu/gold-miner
densamoylov/protection_info
lixm/pybooklet
WithMeApp/LBStyle
lvogelzang/Blocky
Austin-Droids/GeoQuiz
johankson/flipper
uggla/alexandria
aaronjorbin/WordPress-Theme-Directory-Slurper
vladgolubev/mdlok
Novatics/visiteumaescola
DBTeam-ES/DBTeam-Bot
alexandramaster/bootstrap
xaviershay/kronic
coconetlero/Qt-ITK-VTK-Image-Viewer
macteo/Marklight
alioygur/godash
appbaseio/Docbase
realm/SwiftLint
isocpp/CppCoreGuidelines
google/protobuf
preciousforever/sketch-data-populator
GoogleCloudPlatform/DataflowJavaSDK
12207480/DOPDropDownMenu-Enhanced
toddmotto/echo
videojs/videojs-contrib-hls
wqi/votetube
i-make-robots/LEDWall
romka/lua-transliterator
achow101/achow101.github.io
bendycode/ruby-pivotal-tracker
sebastianomorando/OffPlyWebGLVisualizer
lenguyenthedat/dextra-mindef-2015
hackspark/SFPD-Loves-Spark
elgerlambert/redux-localstorage
rangle/batarangle
core-plot/core-plot
jakearchibald/es6-promise
WhisperSystems/Signal-Android
posva/vue-mdl
tc39/ecmascript-asyncawait
jxieeducation/DIY-Data-Science
snwh/paper-icon-theme
chrisaljoudi/uBlock
sandeepmistry/noble
objccn/articles
tealeg/xlsx
dotnet/coreclr
go-kit/kit
havthgem/quick-resize
unindented/grunt-electron-installer-debian
FrontEndHappyHour/website
brendt/Git-Alias-Pak-2.1

2025-02-12 18:29:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:29:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 18:29:40 - snowflake.connector.connection - INFO - closed
2025-02-12 18:29:40 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:29:40 - root - INFO - SQL:
SELECT "repo_name", "watch_count"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS
   ORDER BY "watch_count" DESC
   LIMIT 100;
Results:
repo_name,watch_count
FreeCodeCamp/FreeCodeCamp,90457
firehol/netdata,13208
joshbuchea/HEAD,13125
braydie/HowToBeAProgrammer,12019
sindresorhus/awesome,11063
tensorflow/tensorflow,10728
facebook/react,10458
ParsePlatform/parse-server,10339
loverajoel/jstips,9585
facebook/react-native,9437
vhf/free-programming-books,8862
vuejs/vue,8822
airbnb/javascript,8708
caesar0301/awesome-public-datasets,8653
twbs/bootstrap,8211
toddmotto/public-apis,8182
getlantern/lantern,8110
DrkSephy/es6-cheatsheet,7967
airbnb/caravel,7764
googlesamples/android-architecture,7713
getify/You-Dont-Know-JS,7650
allenwong/30DaysofSwift,7485
jgthms/bulma,7387
dthree/cash,7309
Rochester-NRT/AlphaGo,7200
apple/swift,7041
robbyrussell/oh-my-zsh,6983
github/gitignore,6898
facebook/draft-js,6715
matryer/bitbar,6384
Microsoft/vscode,6272
ptmt/react-native-desktop,6186
p-e-w/maybe,6127
parkjs814/AlgorithmVisualizer,6057
hollance/swift-algorithm-club,6012
alexjc/neural-doodle,6008
fbsamples/f8app,5987
nodejs/node,5954
jiahaog/nativefier,5836
Microsoft/CNTK,5833
atom/atom,5826
jcjohnson/neural-style,5768
tensorflow/models,5629
reactjs/redux,5622
jlevy/the-art-of-command-line,5603
mbostock/d3,5601
thejameskyle/the-super-tiny-compiler,5555
Microsoft/ChakraCore,5524
nylas/N1,5476
CRYTEK-CRYENGINE/CRYENGINE,5433
petehunt/react-howto,5428
VerbalExpressions/JSVerbalExpressions,5374
angular/angular.js,5347
torvalds/linux,5332
google/agera,5319
angular/angular,5318
atom/electron,5302
mxstbr/react-boilerplate,5163
kadirahq/react-storybook,5154
rg3/youtube-dl,5140
daneden/animate.css,5113
jbranchaud/til,5105
docker/docker,5052
shockone/black-screen,5028
google/xi-editor,5008
electron/electron,4995
CatchChat/Yep,4994
mhinz/vim-galore,4928
ReactiveX/RxJava,4926
josephmisiti/awesome-machine-learning,4917
weui/weui,4883
open-source-society/computer-science,4848
FortAwesome/Font-Awesome,4838
puikinsh/gentelella,4825
webpack/webpack,4812
soimort/you-get,4776
vinta/awesome-python,4734
CosmicMind/Material,4731
typicode/json-server,4720
aosabook/500lines,4659
golang/go,4620
0x5e/wechat-deleted-friends,4609
dear-github/dear-github,4604
nlp-compromise/nlp_compromise,4600
lodash/lodash,4596
santinic/how2,4582
google/material-design-lite,4571
callemall/material-ui,4455
nvbn/thefuck,4438
Dogfalo/materialize,4425
johnpapa/angular-styleguide,4403
JakeLin/IBAnimatable,4399
google/seesaw,4388
amzn/alexa-avs-raspberry-pi,4384
vsouza/awesome-ios,4346
letsencrypt/letsencrypt,4325
square/retrofit,4306
google/flexbox-layout,4306
Nickersoft/push.js,4284
vurtun/nuklear,4273

2025-02-12 18:29:40 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:40 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:40 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:29:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 18:29:41 - snowflake.connector.connection - INFO - closed
2025-02-12 18:29:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:29:41 - root - INFO - SQL:
SELECT "repo_name", "path", "id"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES
   LIMIT 100;
Results:
Too long, hard cut:
repo_name,path,id
np/ling,fixtures/strict-par-success/fun1_to_proc_par2.ll,316ad972693d0355c3504729fff14287419e004d
np/ling,tests/failure/wrong_order_par_seq_middle.t/wrong_order_par_seq_middle.ll,daa40d563068ee94f01b1e87952d607a6588a589
np/ling,fixtures/strict-par-success/layout_case.ll,6bd679ec4ff94d8149986d49b8e789d1b4d6a44a
np/ling,fixtures/strict-par-success/merger_loli_Sort.ll,0cfcfb70b14958a8ba30cb83808c9bcc25516969
np/ling,fixtures/failure/infer_recv.ll,de516c994d6cc8b7bcc1fb6bf986699fced404f6
np/ling,fixtures/strict-par-success/parallel_assoc_tensor3_flat.ll,248004ff4dd7722e31b548a776a3463ab8b52a78
np/ling,fixtures/strict-par-failure/ten_loli_par.ll,23bb40fccf644811f011fb80b8f484a825d66543
np/ling,fixtures/compile/my_loli.ll,561e0c258b57a3dec9da2a2b6143003ede425013
np/ling,fixtures/failure/dead_lock_tensor2_tensor2.ll,053669348398e5f7a34966fb62f93cc6f694e888
np/ling,fixtures/sequence/par_ten_ten_v1.ll,4d284e73f44321e6291601728fd1a6d15e26d2f2
np/ling,tests/failure/reusedParChannel.t/reusedParChannel.ll,8bbe09b5aa496b3e0dfa5ee085ef77b3fd3714e8
ello/Moya,Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACSerialDisposable.h,985ede4ac2cdab25e2b28dce7c2310bf15450f65
ello/Moya,Demo/Pods/Headers/Private/ReactiveCocoa/UISlider+RACSignalSupport.h,eafaa0e2b1ebdb2093a8f316d486d524992deed8
seL4/seL4,libsel4/tools/xmllint.sh,c29e50f890aa0fe602ffb85601c6b102f9aaf744
sni/Thruk,themes/themes-available/Vautour/images/logo_thruk_mid.png,97f87cede7b9796a1f8f603060901448927c69e8
NREL/SOWFA,applications/solvers/incompressible/windEnergy/pisoFoamTurbine/Make/options,d81fde3a95431043c635e7dbc53481a95e62b1ad
NREL/SOWFA,applications/solvers/incompressible/windEnergy/windPlantSolver/pEqn.H,fa85831b90c067831b653d93b5894ccc30023d16
jordic/k8s,cloudsqlip/Godeps/_workspace/src/github.com/prometheus/procfs/fixtures/26232/fd/1,ca47b50ca5ef2c33344ea5ee480712662152b70a
szaghi/OFF,examples/2D/two_dimensional_riemann_problems/kt-c03/off/OFF,99fc2a894e0015bbd0f7e1e8d98bbacdc962152e
xemul/criu,test/zdtm/static/mntns_root_bind02.c,4957c1fa1318ae7a2c2d64202ed9df29e4c492ef
artsy/eigen,fastlane/metadata/fr-FR/marketing_url.txt,f6b308af373f52cdc9d7189ef2e00505d0195abd
bing6/CNode,Pods/Headers/Private/CocoaLumberjack/DDContextFilterLogFormatter.h,f88cca8f0851c7f62d70cfb46ae0f409059ae9a3
bing6/CNode,Pods/Headers/Private/SVGKit/SVGKParserStyles.h,65f543a3154608a399e5cfb545f1816193c37f69
bing6/CNode,Pods/Headers/Public/SVGKit/SVGLength.h,d3195f6c34df4c8752096db6c1bc61c2c239dec3
bing6/CNode,Pods/Headers/Public/KSRefresh/UIScrollView+KS.h,861b1390144091b30a4db4c53e3208eff0da4e20
bing6/CNode,Pods/Headers/Private/FMDB/FMDatabasePool.h,1d78001fc11c950807b812d12487e2b470a5dcfe
dokku/dokku,plugins/20_events/post-build-dockerfile,5178a749ff6eb2ad6bb1a73faa458e1d88eb5830
fs/ios-base,Pods/Headers/Public/KIF/CGGeometry-KIFAdditions.h,84c9be74f46b762af20d569428de3f85be40fb90
google/caja,third_party/java/jetty/lib/jetty-servlet.jar,e9d581421cc543a23515d4099891cad3e33f1f3d
hgyhei/GYWy,GYnews/Pods/Headers/Public/Masonry/MASConstraintMaker.h,b6d6027bce1e275ab9963e4708797d3ec52f124a
holocm/holo,test/05-diff/source/etc/symlink-modified.conf,e9b45757822cbe2939ea34aec6bd7ab09058e97a
iovisor/bcc,examples/networking/neighbor_sharing/simulation.py,98a2055c5575994bc3d426eefabd7321e1a74245
raquo/hnapp,static/js/native.history.js,1a4c0ec56b88d659255f25f5423bfe65c8baee2e
smarr/SOMns,fast,ca3d25c4060a69102d2d66487cef931056d1bcb0
BaiduCC/BGCC,deps/openssl/include/openssl/ui_compat.h,d8c74b7c5d72f8258ae3592c8b9615ddd74a11f9
CubLinux/dev,icons/CubLinux/actions/22/gnome-logout.png,b4ea7ad25d3d1f4aee3a9781aa8dab8d5e969305
CubLinux/dev,icons/CubLinux/actions/16/window_new.png,30b601d0785a855209ad53a6c13adcb29cf6399e
CubLinux/dev,icons/CubLinux/status/22/gpm-battery-040.png,39022d7cae886b554a1b8f78354d2bc21c2216ff
CubLinux/dev,icons/CubLinux/status/Scalable/notification-gpm-battery-020.svg,85dbbfcb0f74535e25b7953859017bdceadfa002
CubLinux/dev,icons/CubLinux/status/48/battery_two_thirds.png,fd92c26df7b03d7ef2cfc05c4478990ebb16c2b6
CubLinux/dev,icons/CubLinux/places/128/gnome-fs-dav.png,95ff6aad8f369d804ec27d81e0f922e0c9fe4aad
CubLinux/dev,icons/CubLinux/actions/22/rhythmbox-set-star.png,39532a5685d25c1d256ee786599e4ede5f7fef5c
CubLinux/dev,icons/CubLinux/places/128/gnome-fs-smb.png,95ff6aad8f369d804ec27d81e0f922e0c9fe4aad
CubLinux/dev,icons/CubLinux/actions/22/gtk-find-and-replace.png,e4057afedfd0934278d9fa03823a572d16bde701
CubLinux/dev,icons/CubLinux/actions/22/filesave.png,b1240e18dfc701be27a94527e60e7f39da206d06
CubLinux/dev,icons/CubLinux/actions/24/back.png,56c7bd87160a7f54dcefddb10ed4acec3d845eea
CubLinux/dev,icons/chromiumos/cursors/sailboat,0de4e80fb08ab4f816391701f2ea07b7ec04fae8
CubLinux/dev,icons/CubLinux/status/96/ac-adapter.png,b2a8f210dce2fb7a509f58ef3f372218aad11f67
CubLinux/dev,icons/CubLinux/stock/64/stock_person-panel.png,2caa5a5b144c15977f8740c81b7f740b4a1ed6a4
CubLinux/dev,icons/CubLinux/places/96/folder-images.png,b10453063ef97c41a1774fddb72b63e8b71053e

2025-02-12 18:29:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:29:42 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-02-12 18:29:42 - snowflake.connector.connection - INFO - closed
2025-02-12 18:29:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:29:43 - root - INFO - SQL:
SELECT "repo_name", "path", "id"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES
   WHERE "path" LIKE '%.py'
   LIMIT 100;
Results:
Too long, hard cut:
repo_name,path,id
jleclanche/django-push-notifications,push_notifications/migrations/0002_auto_20160106_0850.py,d7b9d759d537697e9fd55279b5026aed022d23d3
kennyledet/Algorithm-Implementations,Maximum_Subarray/Python/shivam5992/kadane.py,9716963c79b32a474c1df22dfd68bb67ba51d334
kennyledet/Algorithm-Implementations,Caesar_Cipher/Python/kennyledet/caesar_cipher.py,13188c551074329980a22d255b09fb6ff14241bd
orcasgit/django-pgcrypto-expressions,setup.py,1db8490c8f06c13a1b0b5090f1646e229937c68f
orcasgit/django-pgcrypto-expressions,pgcrypto_expressions/test/settings.py,6b8a8f2c3a51e8930cc19384c5945dceaab9073c
percolate/ec2-security-groups-dumper,ec2_security_groups_dumper/__init__.py,e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
pythonanywhere/dirigible-spreadsheet,dirigible/info_pages/__init__.py,e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
rpm-software-management/createrepo_c,tests/python/tests/test_updatecollection.py,f3433c03327a41b67af0b63f610a679b79041c90
sbaechler/django-multilingual-search,tests/testproject/settings.py,f5bbcda46cc02b1a057555cc6757d2fafb6bc319
yandex-money/yandex-money-sdk-python,yandex_money/api.py,4fb325a7defeb7ef77deba0050575529cbddb052
GoogleCloudPlatform/DataflowPythonSDK,google/cloud/dataflow/utils/__init__.py,ba1698d67be596930b6fa85efad7fd5d33a7d878
HewlettPackard/python-ilorest-library,examples/Rest/ex20_get_ilo_nic.py,6308529ce188ceb8b2e67e09574767a66732fdcd
Sorosliu1029/Rule-based_Expert_System,try/for_now.py,825cd5ef90202258c4bffcb470f25ec147af158b
daigofuji/jekyll-foundation-5-starter,node_modules/node-sass/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py,2b0bb60cb4296b4d430050b8022b60feb646ce0e
dbrgn/heroku-buildpack-python-sklearn,vendor/distribute-0.6.36/easy_install.py,d87e984034b6e6e9eb456ebcb2b3f420c07a48bc
dbrgn/heroku-buildpack-python-sklearn,vendor/pip-1.3.1/pip/vcs/subversion.py,b8409522035f23cd7c11be9911854c3c46bb3c0c
dbrgn/heroku-buildpack-python-sklearn,vendor/distribute-0.6.36/tests/install_test.py,02deb81860c8d0c218157c79d3f357b73b671e77
django-inplaceedit/django-inplaceedit,testing/testing/unit_tests/__init__.py,e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
fracpete/python-weka-wrapper-examples,src/__init__.py,e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
jonasundderwolf/django-image-cropping,image_cropping/utils.py,6a4e1c569a5325ba8061ae735fd6ff84f84db0ba
mdaniel/virtualbox-org-svn-vbox-trunk,src/VBox/Devices/EFI/Firmware/BaseTools/Source/Python/GenFds/FfsInfStatement.py,596ef01ae7fdb7f38c985e51ec0736936f66d492
mdaniel/virtualbox-org-svn-vbox-trunk,src/VBox/Additions/common/crOpenGL/stub_common.py,d52542b6dfdd16f77ebdc260a88eebc7a5e47bb6
mdaniel/virtualbox-org-svn-vbox-trunk,src/VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Ecc/CodeFragmentCollector.py,a9ed74266e845be0ac0a4117a82dee4cf251f391
michaelhelmick/django-bootstrap-admin,project/admin/__init__.py,e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
mw-ferretti/angular-resource-tastypie,examples/backend/myproject/myproject/wsgi.py,d6634b9ae7aa770ee559e82046afe371be943c71
Anonim47/android_kernel_lenovo_a7000-a,tools/perf/tests/attr.py,c9b4b6269b514dc6e1e88608fbb9f177f2cc561e
KristianOellegaard/django-health-check,health_check_celery/tasks.py,bc5fd3ef44299fad52f29ae1a87610a95c9b8840
LumPenPacK/NetworkExtractionFromImages,osx_build/nefi2_osx_amd64_xcode_2015/site-packages/numpy/lib/user_array.py,3103da57b7d0536e525cf5a88be04522e67926eb
LumPenPacK/NetworkExtractionFromImages,osx_build/nefi2_osx_amd64_xcode_2015/site-packages/numpy/core/tests/test_multiarray_assignment.py,86e1b125e7525021d07ea2e051b317c3d8a59736
LumPenPacK/NetworkExtractionFromImages,osx_build/nefi2_osx_amd64_xcode_2015/site-packages/numpy/distutils/command/sdist.py,bfaab1c8ffa18333e41db6a9d976ce6971f5d26d
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/networkx/algorithms/traversal/tests/test_dfs.py,9fad9858488a5c7f43047c4d3722defecb84b242
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/networkx/algorithms/bipartite/tests/test_matching.py,ba841a2e7bbbcfb194be1d64906be3bc0c88596b
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/numpy/core/cversions.py,7995dd9931e7ee2aa72711db5e50a340b38b0299
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/numpy/doc/howtofind.py,e080d263a27919e627eee64d967afc5accd002ea
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/numpy/lib/tests/test__datasource.py,090f71f670c922dec541719a4f64b6593863c0f6
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/numpy/f2py/f2py2e.py,254f9996646482f95777e6ae26ebcd78f65c7476
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/numpy/polynomial/laguerre.py,fffe9e6b65465d3dc60b00821076ca65a502bdb0
LumPenPacK/NetworkExtractionFromImages,osx_build/nefi2_osx_amd64_xcode_2015/bin/nefi2/model/algorithms/invert_color.py,db6470205ed4f316818ae5ccb92fe

2025-02-12 18:29:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:29:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 4
2025-02-12 18:29:44 - snowflake.connector.connection - INFO - closed
2025-02-12 18:29:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:29:44 - root - INFO - SQL:
SELECT f."repo_name", f."path", c."size"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE f."path" LIKE '%.py'
   LIMIT 100;
Results:
repo_name,path,size
MAECProject/python-maec,maec/utils/merge.py,12077
google/rekall,rekall-core/rekall/plugins/linux/iomem.py,2331
dimagi/commcare-hq,corehq/sql_proxy_accessors/migrations/0006_get_case_by_external_id.py,564
dieseldev/diesel,examples/zeromq_receiver.py,619

2025-02-12 18:29:44 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:44 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:44 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:29:46 - snowflake.connector.cursor - INFO - Number of results in first chunk: 4
2025-02-12 18:29:46 - snowflake.connector.connection - INFO - closed
2025-02-12 18:29:46 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:29:46 - root - INFO - SQL:
SELECT f."repo_name", f."path", c."size"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE f."path" LIKE '%.py' AND c."size" < 15000
   LIMIT 100;
Results:
repo_name,path,size
google/rekall,rekall-core/rekall/plugins/linux/iomem.py,2331
dieseldev/diesel,examples/zeromq_receiver.py,619
dimagi/commcare-hq,corehq/sql_proxy_accessors/migrations/0006_get_case_by_external_id.py,564
MAECProject/python-maec,maec/utils/merge.py,12077

2025-02-12 18:29:46 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:46 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:46 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:29:48 - snowflake.connector.cursor - INFO - Number of results in first chunk: 10
2025-02-12 18:29:49 - snowflake.connector.connection - INFO - closed
2025-02-12 18:29:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:29:50 - root - INFO - SQL:
SELECT f."repo_name", f."path", c."content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE c."content" LIKE '%def %'
   LIMIT 100;
Results:
Too long, hard cut:
repo_name,path,content
CyanogenMod/android_kernel_moto_shamu,drivers/char/diag/diagfwd_sdio.h,"/* Copyright (c) 2011, The Linux Foundation. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

#ifndef DIAGFWD_SDIO_H
#define DIAGFWD_SDIO_H

#include <mach/sdio_al.h>
#define N_MDM_SDIO_WRITE	1 /* Upgrade to 2 with ping pong buffer */
#define N_MDM_SDIO_READ	1

void diagfwd_sdio_init(void);
void diagfwd_sdio_exit(void);
int diagfwd_connect_sdio(void);
int diagfwd_disconnect_sdio(void);
int diagfwd_read_complete_sdio(void);
int diagfwd_write_complete_sdio(void);

#endif
"
OnePlusOSS/android_kernel_oneplus_one,drivers/mmc/core/quirks.c,"/*
 *  This file contains work-arounds for many known SD/MMC
 *  and SDIO hardware bugs.
 *
 *  Copyright (c) 2011 Andrei Warkentin <andreiw@motorola.com>
 *  Copyright (c) 2011 Pierre Tardy <tardyp@gmail.com>
 *  Inspired from pci fixup code:
 *  Copyright (c) 1999 Martin Mares <mj@ucw.cz>
 *
 */

#include <linux/types.h>
#include <linux/kernel.h>
#include <linux/export.h>
#include <linux/mmc/card.h>

#ifndef SDIO_VENDOR_ID_TI
#define SDIO_VENDOR_ID_TI		0x0097
#endif

#ifndef SDIO_DEVICE_ID_TI_WL1271
#define SDIO_DEVICE_ID_TI_WL1271	0x4076
#endif

#ifndef SDIO_VENDOR_ID_STE
#define SDIO_VENDOR_ID_STE		0x0020
#endif

#ifndef SDIO_DEVICE_ID_STE_CW1200
#define SDIO_DEVICE_ID_STE_CW1200	0x2280
#endif

#ifndef SDIO_VENDOR_ID_MSM
#define SDIO_VENDOR_ID_MSM		0x0070
#endif

#ifndef SDIO_DEVICE_ID_MSM_WCN1314
#define SDIO_DEVICE_ID_MSM_WCN1314	0x2881
#endif

#ifndef SDIO_VENDOR_ID_MSM_QCA
#define SDIO_VENDOR_ID_MSM_QCA		0x271
#endif

#ifndef SDIO_DEVICE_ID_MSM_QCA_AR6003_1
#define SDIO_DEVICE_ID_MSM_QCA_AR6003_1	0x300
#endif

#ifndef SDIO_DEVICE_ID_MSM_QCA_AR6003_2
#define SDIO_DEVICE_ID_MSM_QCA_AR6003_2	0x301
#endif

#ifndef SDIO_DEVICE_ID_MSM_QCA_AR6004_1
#define SDIO_DEVICE_ID_MSM_QCA_AR6004_1	0x400
#endif

#ifndef SDIO_DEVICE_ID_MSM_QCA_AR6004_2
#define SDIO_DEVICE_ID_MSM_QCA_AR6004_2	0x401
#endif

/*
 * This hook just adds a quirk for all sdio devices
 */
static void add_quirk_for_sdio_devices(struct mmc_card *card, int data)
{
	if (mmc_card_sdio(card))
		card->quirks |= data;
}

static const struct mmc_fixup mmc_fixup_methods[] = {
	/* by default sdio devices are considered CLK_GATING broken */
	/* good cards will be whitelisted as they are tested */
	SDIO_FIXUP(SDIO_ANY_ID, SDIO_ANY_ID,
		   add_quirk_for_sdio_devices,
		   MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_TI, SDIO_DEVICE_ID_TI_WL1271,
		   remove_quirk, MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_MSM, SDIO_DEVICE_ID_MSM_WCN1314,
		   remove_quirk, MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_MSM_QCA, SDIO_DEVICE_ID_MSM_QCA_AR6003_1,
		   remove_quirk, MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_MSM_QCA, SDIO_DEVICE_ID_MSM_QCA_AR6003_2,
		   remove_quirk, MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_MSM_QCA, SDIO_DEVICE_ID_MSM_QCA_AR6004_1,
		   remove_quirk, MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_MSM_QCA, SDIO_DEVICE_ID_MSM_QCA_AR6004_2,
		   remove_quirk, MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_TI, SDIO_DEVICE_ID_TI_WL1271,
		   add_quirk, MMC_QUIRK_NONSTD_FUNC_IF),

	SDIO_FIXUP(SDIO_VENDOR_ID_TI, SDIO_DEVICE_ID_TI_WL1271,
		   add_quirk, MMC_QUIRK_DISABLE_CD),

	SDIO_FIXUP(SDIO_VENDOR_ID_STE, SDIO_DEVICE_ID_STE_CW1200,
		   add_quirk, MMC_QUIRK_BROKEN_BYTE_MODE_512),

	END_FIXUP
};

void mmc_fixup_device(struct mmc_card *card, const struct mmc_fixup *table)
{
	const struct mmc_fixup *f;
	u64 rev = cid_rev_card(card);

	/* Non-core specific workarounds. */
	if (!table)
		table = mmc_fixup_methods;

	for (f = table; f->vendor_fixup; f++) {
		if ((f->manfid == CID_MANFID_ANY ||
		     f->manfid == card->cid.manfid) &&
		    (f->oemid == CID_OEMID_ANY ||
		     f->oemid == card->cid.oemid) &&
		    (f->name == CID_NAME_ANY ||
		     !strncmp(f->name, card->cid.prod_name,
			      sizeof(card->cid.prod_name))) &&
		    (f->ext_csd_rev == EXT_CSD_REV_ANY ||
		     f->ext_csd_rev == card->ext_csd.rev) &&
		    (f->cis_vendor == card->cis.vendor ||
		     f->cis_vendor == (u16) SDIO_ANY_ID) &&
		    (f->cis_device == card->cis.device ||
		     f->cis_device == (u16) SDIO_ANY_ID) &&
		    rev >= f->rev_start && rev <= f->rev_end) {
			dev_dbg(&card->dev, ""calling %pF\n"", f->vendor_fixup);
			f->vendor_fixup(card, f->data);
		}
	}
}
EXPORT_SYMBOL(mmc_fixup_device);
"
CyanogenMod/android_kernel_htc_flounder,drivers/gpu/drm/radeon/si_reg.h,"/*
 * Copyright 2010 Advanced Micro Devices, Inc.
 *
 * Permi

2025-02-12 18:29:50 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:50 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:50 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:29:51 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-02-12 18:29:51 - snowflake.connector.connection - INFO - closed
2025-02-12 18:29:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:29:52 - root - INFO - SQL:
SELECT f."repo_name", f."path", c."size", c."content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
   LIMIT 100;
Results:
Too long, hard cut:
repo_name,path,size,content
google/rekall,rekall-core/rekall/plugins/linux/iomem.py,2331,"# Rekall Memory Forensics
#
# Copyright Digital Forensics Solutions.
# Copyright 2013 Google Inc. All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

__author__ = (""Andrew Case <atcuno@gmail.com>"",
              ""Michael Cohen <scudette@google.com>"")


from rekall.plugins.linux import common


class IOmem(common.LinuxPlugin):
    '''mimics /proc/iomem.'''

    __name = ""iomem""

    table_header = [
        dict(name=""Resource"", cname=""resource"", style=""address""),
        dict(name=""Start"", cname=""start"", style=""address""),
        dict(name=""End"", cname=""end"", style=""address""),
        dict(name=""Name"", cname=""name"", type=""TreeNode""),
    ]

    def GetResources(self):
        # Resources are organized in a tree structure.
        resource_tree_root = self.profile.get_constant_object(
            ""iomem_resource"", target=""resource"")

        seen = set()

        return self._GetResources(resource_tree_root, seen)

    def _GetResources(self, node, seen, depth=0):
        """"""Traverse the resource tree depth first.""""""
        if not node or node in seen:
            return

        seen.add(node)

        yield node, depth

        if node.child:
            for x in self._GetResources(node.child.deref(), seen, depth+1):
                yield x

        for sibling in node.walk_list(""sibling""):
            for x in self._GetResources(sibling, seen, depth):
                yield x


    def collect(self):
        for node, depth in self.GetResources():
            yield dict(
                resource=node,
                start=node.start,
                end=node.end,
                name=node.name.deref(),
                depth=depth)
"
dieseldev/diesel,examples/zeromq_receiver.py,619,"from diesel import quickstart, quickstop, sleep
from diesel.protocols.zeromq import DieselZMQSocket, zctx, zmq
import time

def get_messages():
    outsock = DieselZMQSocket(zctx.socket(zmq.DEALER), bind=""tcp://127.0.0.1:5000"")

    t = time.time()
    for x in xrange(500000):
        msg = outsock.recv()
        assert msg == ""yo dawg %s"" % x
        if x % 1000 == 0:
            sleep()

    delt = time.time() - t
    print ""500000 messages in %ss (%.1f/s)"" % (delt, 500000.0 / delt)
    quickstop()

def tick():
    while True:
        print ""Other diesel stuff""
        sleep(1)

quickstart(get_messages, tick)
"
MAECProject/python-maec,maec/utils/merge.py,12077,"# Copyright (c) 2015, The MITRE Corporation. All rights reserved.
# See LICENSE.txt for complete terms.

""""""Methods for merging MAEC documents""""""

from copy import deepcopy
import itertools

from mixbox import idgen
from mixbox.namespaces import Namespace

from cybox.core import Object
from cybox.common import HashList

import maec
from maec.package import (Package, MalwareSubject, MalwareConfigurationDetails,
                          FindingsBundleList, MetaAnalysis, Analyses,
                          MinorVariants, MalwareSubjectRelationshipList,
                          MalwareSubjectList)

def dict_merge(target, *args):
    '''Merge multiple dictionaries into one'''
    if len(args) > 1:
        for obj in args:
            dict_merge(target, obj)
        return target
 
    # Recursively merge dicts and set non-dict values
    obj = args[0]
    if not isinstance(obj, dict):
        return obj
    for k, v in obj.iteritems():
        if k in target and isinstance(target[k], dict):
            dict_merge(target[k], v)
        elif k in target and isinstance(target[k], list):
                target[k] = (target[k] + v)
        else:
            target[k] = deepcopy(v)
    return target

def merge_documents(input_list, output_file):
    '''Merge a list of input MAEC documents and write them to an output file'''
    parsed_documents = []
    # Parse the documents and get their API representation
    for input_file in input_list:
        api_representation = maec.parse_xml_instance(input_file)['api']
        parsed_documents.append(api_representation)
    # Do a sanity check on the input list of documents
    for document in parsed_documents:
        if isinstance(document, Package):
            continue
        else:
            print 'Error: unsupported document ty

2025-02-12 18:29:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:29:53 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-02-12 18:29:53 - snowflake.connector.connection - INFO - closed
2025-02-12 18:29:53 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:29:53 - root - INFO - SQL:
SELECT DISTINCT f."repo_name"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
   LIMIT 100;
Results:
repo_name
MAECProject/python-maec
google/rekall
dieseldev/diesel

2025-02-12 18:29:53 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:53 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:53 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:29:54 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-02-12 18:29:54 - snowflake.connector.connection - INFO - closed
2025-02-12 18:29:55 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:29:55 - root - INFO - SQL:
SELECT r."repo_name", r."watch_count"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
    WHERE r."repo_name" IN (
        SELECT DISTINCT f."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
        JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
          ON f."id" = c."id"
        WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
    )
    ORDER BY r."watch_count" DESC
    LIMIT 100;
Results:
repo_name,watch_count
google/rekall,129
dieseldev/diesel,26
MAECProject/python-maec,2

2025-02-12 18:29:55 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:55 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:55 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:29:56 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-02-12 18:29:56 - snowflake.connector.connection - INFO - closed
2025-02-12 18:29:56 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:29:57 - root - INFO - SQL:
SELECT r."repo_name", r."watch_count"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
    WHERE r."repo_name" IN (
        SELECT DISTINCT f."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
        JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
          ON f."id" = c."id"
        WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
    )
    ORDER BY r."watch_count" DESC
    LIMIT 3;
Results:
repo_name,watch_count
google/rekall,129
dieseldev/diesel,26
MAECProject/python-maec,2

2025-02-12 18:29:57 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:57 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:57 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:29:58 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-02-12 18:29:58 - snowflake.connector.connection - INFO - closed
2025-02-12 18:29:58 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:29:59 - root - INFO - SQL:
SELECT f."repo_name", f."path", c."size", c."content"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
    JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
      ON f."id" = c."id"
    WHERE f."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    ) AND f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
    LIMIT 100;
Results:
Too long, hard cut:
repo_name,path,size,content
dieseldev/diesel,examples/zeromq_receiver.py,619,"from diesel import quickstart, quickstop, sleep
from diesel.protocols.zeromq import DieselZMQSocket, zctx, zmq
import time

def get_messages():
    outsock = DieselZMQSocket(zctx.socket(zmq.DEALER), bind=""tcp://127.0.0.1:5000"")

    t = time.time()
    for x in xrange(500000):
        msg = outsock.recv()
        assert msg == ""yo dawg %s"" % x
        if x % 1000 == 0:
            sleep()

    delt = time.time() - t
    print ""500000 messages in %ss (%.1f/s)"" % (delt, 500000.0 / delt)
    quickstop()

def tick():
    while True:
        print ""Other diesel stuff""
        sleep(1)

quickstart(get_messages, tick)
"
google/rekall,rekall-core/rekall/plugins/linux/iomem.py,2331,"# Rekall Memory Forensics
#
# Copyright Digital Forensics Solutions.
# Copyright 2013 Google Inc. All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

__author__ = (""Andrew Case <atcuno@gmail.com>"",
              ""Michael Cohen <scudette@google.com>"")


from rekall.plugins.linux import common


class IOmem(common.LinuxPlugin):
    '''mimics /proc/iomem.'''

    __name = ""iomem""

    table_header = [
        dict(name=""Resource"", cname=""resource"", style=""address""),
        dict(name=""Start"", cname=""start"", style=""address""),
        dict(name=""End"", cname=""end"", style=""address""),
        dict(name=""Name"", cname=""name"", type=""TreeNode""),
    ]

    def GetResources(self):
        # Resources are organized in a tree structure.
        resource_tree_root = self.profile.get_constant_object(
            ""iomem_resource"", target=""resource"")

        seen = set()

        return self._GetResources(resource_tree_root, seen)

    def _GetResources(self, node, seen, depth=0):
        """"""Traverse the resource tree depth first.""""""
        if not node or node in seen:
            return

        seen.add(node)

        yield node, depth

        if node.child:
            for x in self._GetResources(node.child.deref(), seen, depth+1):
                yield x

        for sibling in node.walk_list(""sibling""):
            for x in self._GetResources(sibling, seen, depth):
                yield x


    def collect(self):
        for node, depth in self.GetResources():
            yield dict(
                resource=node,
                start=node.start,
                end=node.end,
                name=node.name.deref(),
                depth=depth)
"
MAECProject/python-maec,maec/utils/merge.py,12077,"# Copyright (c) 2015, The MITRE Corporation. All rights reserved.
# See LICENSE.txt for complete terms.

""""""Methods for merging MAEC documents""""""

from copy import deepcopy
import itertools

from mixbox import idgen
from mixbox.namespaces import Namespace

from cybox.core import Object
from cybox.common import HashList

import maec
from maec.package import (Package, MalwareSubject, MalwareConfigurationDetails,
                          FindingsBundleList, MetaAnalysis, Analyses,
                          MinorVariants, MalwareSubjectRelationshipList,
                          MalwareSubjectList)

def dict_merge(target, *args):
    '''Merge multiple dictionaries into one'''
    if len(args) > 1:
        for obj in args:
            dict_merge(target, obj)
        return target
 
    # Recursively merge dicts and set non-dict values
    obj = args[0]
    if not isinstance(obj, dict):
        return obj
    for k, v in obj.iteritems():
        if k in target and isinstance(target[k], dict):
            dict_merge(target[k], v)
        elif k in target and isinstance(target[k], list):
                target[k] = (target[k] + v)
        else:
            target[k] = deepcopy(v)
    return target

def merge_documents(input_list, output_file):
    '''Merge a list of input MAEC documents and write them to an output file'''
    parsed_documents = []
    # Parse the documents and get their API representation
    for input_file in input_list:
        api_representation = maec.parse_xml_instance(input_file)['api']
        parsed_documents.append(api_representation)
    # Do a sanity check on the input list of documents
    for document in parsed_documents:
        if isinstance(document, Package):
            continue
        else:
            print 'Error: unsupported document ty

2025-02-12 18:29:59 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:29:59 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:29:59 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:30:00 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-02-12 18:30:00 - snowflake.connector.connection - INFO - closed
2025-02-12 18:30:00 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:30:00 - root - INFO - SQL:
SELECT l."repo_name", l."language"
    FROM GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l
    WHERE l."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    )
    LIMIT 100;
Results:
repo_name,language
dieseldev/diesel,"[
  {
    ""bytes"": 252,
    ""name"": ""Makefile""
  },
  {
    ""bytes"": 9279,
    ""name"": ""Protocol Buffer""
  },
  {
    ""bytes"": 345729,
    ""name"": ""Python""
  }
]"
google/rekall,"[
  {
    ""bytes"": 5829,
    ""name"": ""Assembly""
  },
  {
    ""bytes"": 1189,
    ""name"": ""Batchfile""
  },
  {
    ""bytes"": 841782,
    ""name"": ""C""
  },
  {
    ""bytes"": 152532,
    ""name"": ""C++""
  },
  {
    ""bytes"": 4880,
    ""name"": ""CMake""
  },
  {
    ""bytes"": 4987,
    ""name"": ""CSS""
  },
  {
    ""bytes"": 39978,
    ""name"": ""HTML""
  },
  {
    ""bytes"": 100463,
    ""name"": ""JavaScript""
  },
  {
    ""bytes"": 3385,
    ""name"": ""M4""
  },
  {
    ""bytes"": 4427,
    ""name"": ""Makefile""
  },
  {
    ""bytes"": 20023,
    ""name"": ""Objective-C""
  },
  {
    ""bytes"": 4962359,
    ""name"": ""Python""
  },
  {
    ""bytes"": 436,
    ""name"": ""Rich Text Format""
  },
  {
    ""bytes"": 9314,
    ""name"": ""Shell""
  }
]"
MAECProject/python-maec,"[
  {
    ""bytes"": 862178,
    ""name"": ""Python""
  }
]"

2025-02-12 18:30:00 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:30:00 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:30:00 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:30:02 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-02-12 18:30:02 - snowflake.connector.connection - INFO - closed
2025-02-12 18:30:02 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:30:19 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 18:30:37 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 18:30:37 - root - INFO - ```sql
SELECT l."repo_name", l."language"
    FROM GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l
    WHERE l."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    )
    LIMIT 100;
```
2025-02-12 18:30:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:30:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:30:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:30:38 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-02-12 18:30:38 - snowflake.connector.connection - INFO - closed
2025-02-12 18:30:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:30:53 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 18:30:53 - root - INFO - SQL:
SELECT l."repo_name", l."language"
    FROM GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l
    WHERE l."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    )
    LIMIT 100;
Results:
repo_name,language
google/rekall,"[
  {
    ""bytes"": 5829,
    ""name"": ""Assembly""
  },
  {
    ""bytes"": 1189,
    ""name"": ""Batchfile""
  },
  {
    ""bytes"": 841782,
    ""name"": ""C""
  },
  {
    ""bytes"": 152532,
    ""name"": ""C++""
  },
  {
    ""bytes"": 4880,
    ""name"": ""CMake""
  },
  {
    ""bytes"": 4987,
    ""name"": ""CSS""
  },
  {
    ""bytes"": 39978,
    ""name"": ""HTML""
  },
  {
    ""bytes"": 100463,
    ""name"": ""JavaScript""
  },
  {
    ""bytes"": 3385,
    ""name"": ""M4""
  },
  {
    ""bytes"": 4427,
    ""name"": ""Makefile""
  },
  {
    ""bytes"": 20023,
    ""name"": ""Objective-C""
  },
  {
    ""bytes"": 4962359,
    ""name"": ""Python""
  },
  {
    ""bytes"": 436,
    ""name"": ""Rich Text Format""
  },
  {
    ""bytes"": 9314,
    ""name"": ""Shell""
  }
]"
MAECProject/python-maec,"[
  {
    ""bytes"": 862178,
    ""name"": ""Python""
  }
]"
dieseldev/diesel,"[
  {
    ""bytes"": 252,
    ""name"": ""Makefile""
  },
  {
    ""bytes"": 9279,
    ""name"": ""Protocol Buffer""
  },
  {
    ""bytes"": 345729,
    ""name"": ""Python""
  }
]"

2025-02-12 18:30:53 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:30:53 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:30:53 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:30:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-02-12 18:30:55 - snowflake.connector.connection - INFO - closed
2025-02-12 18:30:55 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:30:55 - root - INFO - SQL:
SELECT l."repo_name", l."license"
    FROM GITHUB_REPOS.GITHUB_REPOS.LICENSES l
    WHERE l."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    )
    LIMIT 100;
Results:
repo_name,license
google/rekall,gpl-2.0
dieseldev/diesel,bsd-3-clause
MAECProject/python-maec,bsd-3-clause

2025-02-12 18:30:55 - root - INFO - itercount: 0
2025-02-12 18:30:55 - root - INFO - Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
,0
table_name,SAMPLE_FILES
description,
DDL,"create or replace TABLE SAMPLE_FILES (
	""repo_name"" VARCHAR(16777216),
	""ref"" VARCHAR(16777216),
	""path"" VARCHAR(16777216),
	""mode"" NUMBER(38,0),
	""id"" VARCHAR(16777216),
	""symlink_target"" VARCHAR(16777216)
);"

Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
,1
table_name,LANGUAGES
description,
DDL,"create or replace TABLE LANGUAGES (
	""repo_name"" VARCHAR(16777216),
	""language"" VARIANT
);"

Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
,2
table_name,LICENSES
description,
DDL,"create or replace TABLE LICENSES (
	""repo_name"" VARCHAR(16777216),
	""license"" VARCHAR(16777216)
);"

Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
,3
table_name,SAMPLE_COMMITS
description,
DDL,"create or replace TABLE SAMPLE_COMMITS (
	""commit"" VARCHAR(16777216),
	""tree"" VARCHAR(16777216),
	""parent"" VARIANT,
	""author"" VARIANT,
	""committer"" VARIANT,
	""subject"" VARCHAR(16777216),
	""message"" VARCHAR(16777216),
	""trailer"" VARIANT,
	""difference"" VARIANT,
	""difference_truncated"" BOOLEAN,
	""repo_name"" VARCHAR(16777216),
	""encoding"" VARCHAR(16777216)
);"

Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
,4
table_name,SAMPLE_CONTENTS
description,
DDL,"create or replace TABLE SAMPLE_CONTENTS (
	""id"" VARCHAR(16777216),
	""size"" NUMBER(38,0),
	""content"" VARCHAR(16777216),
	""binary"" BOOLEAN,
	""copies"" NUMBER(38,0),
	""sample_repo_name"" VARCHAR(16777216),
	""sample_ref"" VARCHAR(16777216),
	""sample_path"" VARCHAR(16777216),
	""sample_mode"" NUMBER(38,0),
	""sample_symlink_target"" VARCHAR(16777216)
);"

Database Name: GITHUB_REPOS
Schema Name: GITHUB_REPOS
,5
table_name,SAMPLE_REPOS
description,
DDL,"create or replace TABLE SAMPLE_REPOS (
	""repo_name"" VARCHAR(16777216),
	""watch_count"" NUMBER(38,0)
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: [table name]}}): 
{'GITHUB_REPOS': {'GITHUB_REPOS': ['SAMPLE_FILES', 'LANGUAGES', 'LICENSES', 'SAMPLE_COMMITS', 'SAMPLE_CONTENTS', 'SAMPLE_REPOS']}}
Begin Exploring Related Columns
Sure, let's begin by identifying the relevant tables, columns, and potential conditions for your task.

### **Relevant Tables and Columns:**

1. **SAMPLE_FILES**
   - **"repo_name"**: Identifies the repository name.
   - **"path"**: File path, used to identify Python files with a `.py` extension.
   - **"id"**: A unique identifier for files, used to join with **SAMPLE_CONTENTS**.

2. **SAMPLE_CONTENTS**
   - **"id"**: Matches the file ID from **SAMPLE_FILES**.
   - **"size"**: Size of the file in bytes, used to filter files smaller than 15,000 bytes.
   - **"content"**: The actual content of the file, used to check for the substring `"def "`.

3. **SAMPLE_REPOS**
   - **"repo_name"**: Identifies the repository name.
   - **"watch_count"**: The total number of watch events for the repository in 2017.

### **Potential Conditions:**

- **Python Files**: Files where `"path"` ends with `.py`.
- **File Size**: `"size" < 15000` to find files smaller than 15,000 bytes.
- **Content Substring**: `"content" LIKE '%def %'` to find files containing the substring `"def "`.
- **Top Watch Counts**: Ordering results by `"watch_count"` in descending order.
- **Limit Results**: Using `LIMIT` to restrict the number of rows returned.

### **SQL Queries to Explore the Data:**

1. **List distinct repositories from `SAMPLE_REPOS`:**
   ```sql
   SELECT DISTINCT "repo_name"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS
   LIMIT 100;
   ```

2. **View the watch counts for all repositories:**
   ```sql
   SELECT "repo_name", "watch_count"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS
   ORDER BY "watch_count" DESC
   LIMIT 100;
   ```

3. **List all files with their paths and associated repositories:**
   ```sql
   SELECT "repo_name", "path", "id"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES
   LIMIT 100;
   ```

4. **Find all Python files (`.py` extension):**
   ```sql
   SELECT "repo_name", "path", "id"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES
   WHERE "path" LIKE '%.py'
   LIMIT 100;
   ```

5. **Join `SAMPLE_FILES` and `SAMPLE_CONTENTS` to get file sizes:**
   ```sql
   SELECT f."repo_name", f."path", c."size"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE f."path" LIKE '%.py'
   LIMIT 100;
   ```

6. **Find Python files smaller than 15,000 bytes:**
   ```sql
   SELECT f."repo_name", f."path", c."size"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE f."path" LIKE '%.py' AND c."size" < 15000
   LIMIT 100;
   ```

7. **Search for files containing the substring `"def "` in their content:**
   ```sql
   SELECT f."repo_name", f."path", c."content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE c."content" LIKE '%def %'
   LIMIT 100;
   ```

8. **Find Python files smaller than 15,000 bytes containing `"def "`:**
   ```sql
   SELECT f."repo_name", f."path", c."size", c."content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
   LIMIT 100;
   ```

9. **List repositories with qualifying Python files:**
   ```sql
   SELECT DISTINCT f."repo_name"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
   LIMIT 100;
   ```

10. **Get watch counts for these repositories and order them:**
    ```sql
    SELECT r."repo_name", r."watch_count"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
    WHERE r."repo_name" IN (
        SELECT DISTINCT f."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
        JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
          ON f."id" = c."id"
        WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
    )
    ORDER BY r."watch_count" DESC
    LIMIT 100;
    ```

11. **Select the top three repositories with the highest watch counts meeting the criteria:**
    ```sql
    SELECT r."repo_name", r."watch_count"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
    WHERE r."repo_name" IN (
        SELECT DISTINCT f."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
        JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
          ON f."id" = c."id"
        WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
    )
    ORDER BY r."watch_count" DESC
    LIMIT 3;
    ```

12. **Get detailed information about the top repositories' files:**
    ```sql
    SELECT f."repo_name", f."path", c."size", c."content"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
    JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
      ON f."id" = c."id"
    WHERE f."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    ) AND f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
    LIMIT 100;
    ```

13. **Check the languages used in these repositories:**
    ```sql
    SELECT l."repo_name", l."language"
    FROM GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l
    WHERE l."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    )
    LIMIT 100;
    ```

14. **Explore commit history for these repositories:**
    ```sql
    SELECT c."commit", c."author", c."message", c."repo_name"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_COMMITS c
    WHERE c."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    )
    LIMIT 100;
    ```

15. **Identify licenses for the top repositories:**
    ```sql
    SELECT l."repo_name", l."license"
    FROM GITHUB_REPOS.GITHUB_REPOS.LICENSES l
    WHERE l."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    )
    LIMIT 100;
    ```

These queries progress from simple data retrieval to more complex joins and filters, helping you understand the data and how to extract the required information:

- **Queries 1-3**: Basic data exploration of repositories and files.
- **Queries 4-6**: Filtering files to identify Python files smaller than 15,000 bytes.
- **Queries 7-9**: Searching file contents for the substring `"def "` and identifying relevant repositories.
- **Queries 10-11**: Combining all conditions to find repositories with the highest watch counts that meet the criteria.
- **Queries 12-15**: Further exploration of top repositories, including detailed file information, languages used, commit history, and licenses.

Each query is designed to help you build towards the final task by understanding the structure and content of the data in your tables.Query:
SELECT DISTINCT "repo_name"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS
   LIMIT 100;
Answer:
repo_name
kbandla/APTnotes
bigcompany/hook.io
H07000223/FlycoDialog_Master
veficos/reverse-engineering-for-beginners
oblac/jodd
leichunfeng/WXTabBarController
gavinbunney/Toucan
krisk/Fuse
brigade/react-waypoint
Quartz/mapquery
gephi/gephi
ant-design/ant-ux
CodelightStudios/Android-Smart-Login
onestraw/ebook
SwiftStudies/Duration
pgexperts/pgx_scripts
muaz-khan/WebRTC-Experiment
lovell/sharp
tombh/texttop
collinhundley/Swift-AI
laravel/homestead
raisemarketplace/ground-control
rstudio/shiny
FredKSchott/fflip
jakubpawlowicz/clean-css
tushar-rishav/code2pdf
NorthwoodsSoftware/GoJS
danikula/AndroidVideoCache
hmkcode/Android
ViccAlexander/Chameleon
0x5e/wechat-deleted-friends
ikCourage/LFS
hitsujiwool/timeline
EduMelo/jboss-ejb3-tutorial
northox/roundcube-yubikey-plugin
frc5687/pi-tracker
jaccarmac/dot-emacs-dot-d
indonesia/community
Muyangmin/AVLoadingIndicatorView
linkedin/gobblin
id-Software/DOOM-3-BFG
garnaat/kappa
evilsocket/bettercap
kevin0571/STPopup
marmelroy/PhoneNumberKit
assemble/assemble
erikflowers/weather-icons
xitu/gold-miner
densamoylov/protection_info
lixm/pybooklet
WithMeApp/LBStyle
lvogelzang/Blocky
Austin-Droids/GeoQuiz
johankson/flipper
uggla/alexandria
aaronjorbin/WordPress-Theme-Directory-Slurper
vladgolubev/mdlok
Novatics/visiteumaescola
DBTeam-ES/DBTeam-Bot
alexandramaster/bootstrap
xaviershay/kronic
coconetlero/Qt-ITK-VTK-Image-Viewer
macteo/Marklight
alioygur/godash
appbaseio/Docbase
realm/SwiftLint
isocpp/CppCoreGuidelines
google/protobuf
preciousforever/sketch-data-populator
GoogleCloudPlatform/DataflowJavaSDK
12207480/DOPDropDownMenu-Enhanced
toddmotto/echo
videojs/videojs-contrib-hls
wqi/votetube
i-make-robots/LEDWall
romka/lua-transliterator
achow101/achow101.github.io
bendycode/ruby-pivotal-tracker
sebastianomorando/OffPlyWebGLVisualizer
lenguyenthedat/dextra-mindef-2015
hackspark/SFPD-Loves-Spark
elgerlambert/redux-localstorage
rangle/batarangle
core-plot/core-plot
jakearchibald/es6-promise
WhisperSystems/Signal-Android
posva/vue-mdl
tc39/ecmascript-asyncawait
jxieeducation/DIY-Data-Science
snwh/paper-icon-theme
chrisaljoudi/uBlock
sandeepmistry/noble
objccn/articles
tealeg/xlsx
dotnet/coreclr
go-kit/kit
havthgem/quick-resize
unindented/grunt-electron-installer-debian
FrontEndHappyHour/website
brendt/Git-Alias-Pak-2.1
Query:
SELECT "repo_name", "watch_count"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS
   ORDER BY "watch_count" DESC
   LIMIT 100;
Answer:
repo_name,watch_count
FreeCodeCamp/FreeCodeCamp,90457
firehol/netdata,13208
joshbuchea/HEAD,13125
braydie/HowToBeAProgrammer,12019
sindresorhus/awesome,11063
tensorflow/tensorflow,10728
facebook/react,10458
ParsePlatform/parse-server,10339
loverajoel/jstips,9585
facebook/react-native,9437
vhf/free-programming-books,8862
vuejs/vue,8822
airbnb/javascript,8708
caesar0301/awesome-public-datasets,8653
twbs/bootstrap,8211
toddmotto/public-apis,8182
getlantern/lantern,8110
DrkSephy/es6-cheatsheet,7967
airbnb/caravel,7764
googlesamples/android-architecture,7713
getify/You-Dont-Know-JS,7650
allenwong/30DaysofSwift,7485
jgthms/bulma,7387
dthree/cash,7309
Rochester-NRT/AlphaGo,7200
apple/swift,7041
robbyrussell/oh-my-zsh,6983
github/gitignore,6898
facebook/draft-js,6715
matryer/bitbar,6384
Microsoft/vscode,6272
ptmt/react-native-desktop,6186
p-e-w/maybe,6127
parkjs814/AlgorithmVisualizer,6057
hollance/swift-algorithm-club,6012
alexjc/neural-doodle,6008
fbsamples/f8app,5987
nodejs/node,5954
jiahaog/nativefier,5836
Microsoft/CNTK,5833
atom/atom,5826
jcjohnson/neural-style,5768
tensorflow/models,5629
reactjs/redux,5622
jlevy/the-art-of-command-line,5603
mbostock/d3,5601
thejameskyle/the-super-tiny-compiler,5555
Microsoft/ChakraCore,5524
nylas/N1,5476
CRYTEK-CRYENGINE/CRYENGINE,5433
petehunt/react-howto,5428
VerbalExpressions/JSVerbalExpressions,5374
angular/angular.js,5347
torvalds/linux,5332
google/agera,5319
angular/angular,5318
atom/electron,5302
mxstbr/react-boilerplate,5163
kadirahq/react-storybook,5154
rg3/youtube-dl,5140
daneden/animate.css,5113
jbranchaud/til,5105
docker/docker,5052
shockone/black-screen,5028
google/xi-editor,5008
electron/electron,4995
CatchChat/Yep,4994
mhinz/vim-galore,4928
ReactiveX/RxJava,4926
josephmisiti/awesome-machine-learning,4917
weui/weui,4883
open-source-society/computer-science,4848
FortAwesome/Font-Awesome,4838
puikinsh/gentelella,4825
webpack/webpack,4812
soimort/you-get,4776
vinta/awesome-python,4734
CosmicMind/Material,4731
typicode/json-server,4720
aosabook/500lines,4659
golang/go,4620
0x5e/wechat-deleted-friends,4609
dear-github/dear-github,4604
nlp-compromise/nlp_compromise,4600
lodash/lodash,4596
santinic/how2,4582
google/material-design-lite,4571
callemall/material-ui,4455
nvbn/thefuck,4438
Dogfalo/materialize,4425
johnpapa/angular-styleguide,4403
JakeLin/IBAnimatable,4399
google/seesaw,4388
amzn/alexa-avs-raspberry-pi,4384
vsouza/awesome-ios,4346
letsencrypt/letsencrypt,4325
square/retrofit,4306
google/flexbox-layout,4306
Nickersoft/push.js,4284
vurtun/nuklear,4273
Query:
SELECT "repo_name", "path", "id"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES
   LIMIT 100;
Answer:
Too long, hard cut:
repo_name,path,id
np/ling,fixtures/strict-par-success/fun1_to_proc_par2.ll,316ad972693d0355c3504729fff14287419e004d
np/ling,tests/failure/wrong_order_par_seq_middle.t/wrong_order_par_seq_middle.ll,daa40d563068ee94f01b1e87952d607a6588a589
np/ling,fixtures/strict-par-success/layout_case.ll,6bd679ec4ff94d8149986d49b8e789d1b4d6a44a
np/ling,fixtures/strict-par-success/merger_loli_Sort.ll,0cfcfb70b14958a8ba30cb83808c9bcc25516969
np/ling,fixtures/failure/infer_recv.ll,de516c994d6cc8b7bcc1fb6bf986699fced404f6
np/ling,fixtures/strict-par-success/parallel_assoc_tensor3_flat.ll,248004ff4dd7722e31b548a776a3463ab8b52a78
np/ling,fixtures/strict-par-failure/ten_loli_par.ll,23bb40fccf644811f011fb80b8f484a825d66543
np/ling,fixtures/compile/my_loli.ll,561e0c258b57a3dec9da2a2b6143003ede425013
np/ling,fixtures/failure/dead_lock_tensor2_tensor2.ll,053669348398e5f7a34966fb62f93cc6f694e888
np/ling,fixtures/sequence/par_ten_ten_v1.ll,4d284e73f44321e6291601728fd1a6d15e26d2f2
np/ling,tests/failure/reusedParChannel.t/reusedParChannel.ll,8bbe09b5aa496b3e0dfa5ee085ef77b3fd3714e8
ello/Moya,Demo/Pods/Headers/Private/ReactiveCocoa/ReactiveCocoa/RACSerialDisposable.h,985ede4ac2cdab25e2b28dce7c2310bf15450f65
ello/Moya,Demo/Pods/Headers/Private/ReactiveCocoa/UISlider+RACSignalSupport.h,eafaa0e2b1ebdb2093a8f316d486d524992deed8
seL4/seL4,libsel4/tools/xmllint.sh,c29e50f890aa0fe602ffb85601c6b102f9aaf744
sni/Thruk,themes/themes-available/Vautour/images/logo_thruk_mid.png,97f87cede7b9796a1f8f603060901448927c69e8
NREL/SOWFA,applications/solvers/incompressible/windEnergy/pisoFoamTurbine/Make/options,d81fde3a95431043c635e7dbc53481a95e62b1ad
NREL/SOWFA,applications/solvers/incompressible/windEnergy/windPlantSolver/pEqn.H,fa85831b90c067831b653d93b5894ccc30023d16
jordic/k8s,cloudsqlip/Godeps/_workspace/src/github.com/prometheus/procfs/fixtures/26232/fd/1,ca47b50ca5ef2c33344ea5ee480712662152b70a
szaghi/OFF,examples/2D/two_dimensional_riemann_problems/kt-c03/off/OFF,99fc2a894e0015bbd0f7e1e8d98bbacdc962152e
xemul/criu,test/zdtm/static/mntns_root_bind02.c,4957c1fa1318ae7a2c2d64202ed9df29e4c492ef
artsy/eigen,fastlane/metadata/fr-FR/marketing_url.txt,f6b308af373f52cdc9d7189ef2e00505d0195abd
bing6/CNode,Pods/Headers/Private/CocoaLumberjack/DDContextFilterLogFormatter.h,f88cca8f0851c7f62d70cfb46ae0f409059ae9a3
bing6/CNode,Pods/Headers/Private/SVGKit/SVGKParserStyles.h,65f543a3154608a399e5cfb545f1816193c37f69
bing6/CNode,Pods/Headers/Public/SVGKit/SVGLength.h,d3195f6c34df4c8752096db6c1bc61c2c239dec3
bing6/CNode,Pods/Headers/Public/KSRefresh/UIScrollView+KS.h,861b1390144091b30a4db4c53e3208eff0da4e20
bing6/CNode,Pods/Headers/Private/FMDB/FMDatabasePool.h,1d78001fc11c950807b812d12487e2b470a5dcfe
dokku/dokku,plugins/20_events/post-build-dockerfile,5178a749ff6eb2ad6bb1a73faa458e1d88eb5830
fs/ios-base,Pods/Headers/Public/KIF/CGGeometry-KIFAdditions.h,84c9be74f46b762af20d569428de3f85be40fb90
google/caja,third_party/java/jetty/lib/jetty-servlet.jar,e9d581421cc543a23515d4099891cad3e33f1f3d
hgyhei/GYWy,GYnews/Pods/Headers/Public/Masonry/MASConstraintMaker.h,b6d6027bce1e275ab9963e4708797d3ec52f124a
holocm/holo,test/05-diff/source/etc/symlink-modified.conf,e9b45757822cbe2939ea34aec6bd7ab09058e97a
iovisor/bcc,examples/networking/neighbor_sharing/simulation.py,98a2055c5575994bc3d426eefabd7321e1a74245
raquo/hnapp,static/js/native.history.js,1a4c0ec56b88d659255f25f5423bfe65c8baee2e
smarr/SOMns,fast,ca3d25c4060a69102d2d66487cef931056d1bcb0
BaiduCC/BGCC,deps/openssl/include/openssl/ui_compat.h,d8c74b7c5d72f8258ae3592c8b9615ddd74a11f9
CubLinux/dev,icons/CubLinux/actions/22/gnome-logout.png,b4ea7ad25d3d1f4aee3a9781aa8dab8d5e969305
CubLinux/dev,icons/CubLinux/actions/16/window_new.png,30b601d0785a855209ad53a6c13adcb29cf6399e
CubLinux/dev,icons/CubLinux/status/22/gpm-battery-040.png,39022d7cae886b554a1b8f78354d2bc21c2216ff
CubLinux/dev,icons/CubLinux/status/Scalable/notification-gpm-battery-020.svg,85dbbfcb0f74535e25b7953859017bdceadfa002
CubLinux/dev,icons/CubLinux/status/48/battery_two_thirds.png,fd92c26df7b03d7ef2cfc05c4478990ebb16c2b6
CubLinux/dev,icons/CubLinux/places/128/gnome-fs-dav.png,95ff6aad8f369d804ec27d81e0f922e0c9fe4aad
CubLinux/dev,icons/CubLinux/actions/22/rhythmbox-set-star.png,39532a5685d25c1d256ee786599e4ede5f7fef5c
CubLinux/dev,icons/CubLinux/places/128/gnome-fs-smb.png,95ff6aad8f369d804ec27d81e0f922e0c9fe4aad
CubLinux/dev,icons/CubLinux/actions/22/gtk-find-and-replace.png,e4057afedfd0934278d9fa03823a572d16bde701
CubLinux/dev,icons/CubLinux/actions/22/filesave.png,b1240e18dfc701be27a94527e60e7f39da206d06
CubLinux/dev,icons/CubLinux/actions/24/back.png,56c7bd87160a7f54dcefddb10ed4acec3d845eea
CubLinux/dev,icons/chromiumos/cursors/sailboat,0de4e80fb08ab4f816391701f2ea07b7ec04fae8
CubLinux/dev,icons/CubLinux/status/96/ac-adapter.png,b2a8f210dce2fb7a509f58ef3f372218aad11f67
CubLinux/dev,icons/CubLinux/stock/64/stock_person-panel.png,2caa5a5b144c15977f8740c81b7f740b4a1ed6a4
CubLinux/dev,icons/CubLinux/places/96/folder-images.png,b10453063ef97c41a1774fddb72b63e8b71053e
Query:
SELECT "repo_name", "path", "id"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES
   WHERE "path" LIKE '%.py'
   LIMIT 100;
Answer:
Too long, hard cut:
repo_name,path,id
jleclanche/django-push-notifications,push_notifications/migrations/0002_auto_20160106_0850.py,d7b9d759d537697e9fd55279b5026aed022d23d3
kennyledet/Algorithm-Implementations,Maximum_Subarray/Python/shivam5992/kadane.py,9716963c79b32a474c1df22dfd68bb67ba51d334
kennyledet/Algorithm-Implementations,Caesar_Cipher/Python/kennyledet/caesar_cipher.py,13188c551074329980a22d255b09fb6ff14241bd
orcasgit/django-pgcrypto-expressions,setup.py,1db8490c8f06c13a1b0b5090f1646e229937c68f
orcasgit/django-pgcrypto-expressions,pgcrypto_expressions/test/settings.py,6b8a8f2c3a51e8930cc19384c5945dceaab9073c
percolate/ec2-security-groups-dumper,ec2_security_groups_dumper/__init__.py,e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
pythonanywhere/dirigible-spreadsheet,dirigible/info_pages/__init__.py,e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
rpm-software-management/createrepo_c,tests/python/tests/test_updatecollection.py,f3433c03327a41b67af0b63f610a679b79041c90
sbaechler/django-multilingual-search,tests/testproject/settings.py,f5bbcda46cc02b1a057555cc6757d2fafb6bc319
yandex-money/yandex-money-sdk-python,yandex_money/api.py,4fb325a7defeb7ef77deba0050575529cbddb052
GoogleCloudPlatform/DataflowPythonSDK,google/cloud/dataflow/utils/__init__.py,ba1698d67be596930b6fa85efad7fd5d33a7d878
HewlettPackard/python-ilorest-library,examples/Rest/ex20_get_ilo_nic.py,6308529ce188ceb8b2e67e09574767a66732fdcd
Sorosliu1029/Rule-based_Expert_System,try/for_now.py,825cd5ef90202258c4bffcb470f25ec147af158b
daigofuji/jekyll-foundation-5-starter,node_modules/node-sass/node_modules/node-gyp/gyp/pylib/gyp/easy_xml.py,2b0bb60cb4296b4d430050b8022b60feb646ce0e
dbrgn/heroku-buildpack-python-sklearn,vendor/distribute-0.6.36/easy_install.py,d87e984034b6e6e9eb456ebcb2b3f420c07a48bc
dbrgn/heroku-buildpack-python-sklearn,vendor/pip-1.3.1/pip/vcs/subversion.py,b8409522035f23cd7c11be9911854c3c46bb3c0c
dbrgn/heroku-buildpack-python-sklearn,vendor/distribute-0.6.36/tests/install_test.py,02deb81860c8d0c218157c79d3f357b73b671e77
django-inplaceedit/django-inplaceedit,testing/testing/unit_tests/__init__.py,e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
fracpete/python-weka-wrapper-examples,src/__init__.py,e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
jonasundderwolf/django-image-cropping,image_cropping/utils.py,6a4e1c569a5325ba8061ae735fd6ff84f84db0ba
mdaniel/virtualbox-org-svn-vbox-trunk,src/VBox/Devices/EFI/Firmware/BaseTools/Source/Python/GenFds/FfsInfStatement.py,596ef01ae7fdb7f38c985e51ec0736936f66d492
mdaniel/virtualbox-org-svn-vbox-trunk,src/VBox/Additions/common/crOpenGL/stub_common.py,d52542b6dfdd16f77ebdc260a88eebc7a5e47bb6
mdaniel/virtualbox-org-svn-vbox-trunk,src/VBox/Devices/EFI/Firmware/BaseTools/Source/Python/Ecc/CodeFragmentCollector.py,a9ed74266e845be0ac0a4117a82dee4cf251f391
michaelhelmick/django-bootstrap-admin,project/admin/__init__.py,e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
mw-ferretti/angular-resource-tastypie,examples/backend/myproject/myproject/wsgi.py,d6634b9ae7aa770ee559e82046afe371be943c71
Anonim47/android_kernel_lenovo_a7000-a,tools/perf/tests/attr.py,c9b4b6269b514dc6e1e88608fbb9f177f2cc561e
KristianOellegaard/django-health-check,health_check_celery/tasks.py,bc5fd3ef44299fad52f29ae1a87610a95c9b8840
LumPenPacK/NetworkExtractionFromImages,osx_build/nefi2_osx_amd64_xcode_2015/site-packages/numpy/lib/user_array.py,3103da57b7d0536e525cf5a88be04522e67926eb
LumPenPacK/NetworkExtractionFromImages,osx_build/nefi2_osx_amd64_xcode_2015/site-packages/numpy/core/tests/test_multiarray_assignment.py,86e1b125e7525021d07ea2e051b317c3d8a59736
LumPenPacK/NetworkExtractionFromImages,osx_build/nefi2_osx_amd64_xcode_2015/site-packages/numpy/distutils/command/sdist.py,bfaab1c8ffa18333e41db6a9d976ce6971f5d26d
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/networkx/algorithms/traversal/tests/test_dfs.py,9fad9858488a5c7f43047c4d3722defecb84b242
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/networkx/algorithms/bipartite/tests/test_matching.py,ba841a2e7bbbcfb194be1d64906be3bc0c88596b
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/numpy/core/cversions.py,7995dd9931e7ee2aa72711db5e50a340b38b0299
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/numpy/doc/howtofind.py,e080d263a27919e627eee64d967afc5accd002ea
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/numpy/lib/tests/test__datasource.py,090f71f670c922dec541719a4f64b6593863c0f6
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/numpy/f2py/f2py2e.py,254f9996646482f95777e6ae26ebcd78f65c7476
LumPenPacK/NetworkExtractionFromImages,win_build/nefi2_win_amd64_msvc_2015/site-packages/numpy/polynomial/laguerre.py,fffe9e6b65465d3dc60b00821076ca65a502bdb0
LumPenPacK/NetworkExtractionFromImages,osx_build/nefi2_osx_amd64_xcode_2015/bin/nefi2/model/algorithms/invert_color.py,db6470205ed4f316818ae5ccb92fe
Query:
SELECT f."repo_name", f."path", c."size"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE f."path" LIKE '%.py'
   LIMIT 100;
Answer:
repo_name,path,size
MAECProject/python-maec,maec/utils/merge.py,12077
google/rekall,rekall-core/rekall/plugins/linux/iomem.py,2331
dimagi/commcare-hq,corehq/sql_proxy_accessors/migrations/0006_get_case_by_external_id.py,564
dieseldev/diesel,examples/zeromq_receiver.py,619
Query:
SELECT f."repo_name", f."path", c."size"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE f."path" LIKE '%.py' AND c."size" < 15000
   LIMIT 100;
Answer:
repo_name,path,size
google/rekall,rekall-core/rekall/plugins/linux/iomem.py,2331
dieseldev/diesel,examples/zeromq_receiver.py,619
dimagi/commcare-hq,corehq/sql_proxy_accessors/migrations/0006_get_case_by_external_id.py,564
MAECProject/python-maec,maec/utils/merge.py,12077
Query:
SELECT f."repo_name", f."path", c."content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE c."content" LIKE '%def %'
   LIMIT 100;
Answer:
Too long, hard cut:
repo_name,path,content
CyanogenMod/android_kernel_moto_shamu,drivers/char/diag/diagfwd_sdio.h,"/* Copyright (c) 2011, The Linux Foundation. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

#ifndef DIAGFWD_SDIO_H
#define DIAGFWD_SDIO_H

#include <mach/sdio_al.h>
#define N_MDM_SDIO_WRITE	1 /* Upgrade to 2 with ping pong buffer */
#define N_MDM_SDIO_READ	1

void diagfwd_sdio_init(void);
void diagfwd_sdio_exit(void);
int diagfwd_connect_sdio(void);
int diagfwd_disconnect_sdio(void);
int diagfwd_read_complete_sdio(void);
int diagfwd_write_complete_sdio(void);

#endif
"
OnePlusOSS/android_kernel_oneplus_one,drivers/mmc/core/quirks.c,"/*
 *  This file contains work-arounds for many known SD/MMC
 *  and SDIO hardware bugs.
 *
 *  Copyright (c) 2011 Andrei Warkentin <andreiw@motorola.com>
 *  Copyright (c) 2011 Pierre Tardy <tardyp@gmail.com>
 *  Inspired from pci fixup code:
 *  Copyright (c) 1999 Martin Mares <mj@ucw.cz>
 *
 */

#include <linux/types.h>
#include <linux/kernel.h>
#include <linux/export.h>
#include <linux/mmc/card.h>

#ifndef SDIO_VENDOR_ID_TI
#define SDIO_VENDOR_ID_TI		0x0097
#endif

#ifndef SDIO_DEVICE_ID_TI_WL1271
#define SDIO_DEVICE_ID_TI_WL1271	0x4076
#endif

#ifndef SDIO_VENDOR_ID_STE
#define SDIO_VENDOR_ID_STE		0x0020
#endif

#ifndef SDIO_DEVICE_ID_STE_CW1200
#define SDIO_DEVICE_ID_STE_CW1200	0x2280
#endif

#ifndef SDIO_VENDOR_ID_MSM
#define SDIO_VENDOR_ID_MSM		0x0070
#endif

#ifndef SDIO_DEVICE_ID_MSM_WCN1314
#define SDIO_DEVICE_ID_MSM_WCN1314	0x2881
#endif

#ifndef SDIO_VENDOR_ID_MSM_QCA
#define SDIO_VENDOR_ID_MSM_QCA		0x271
#endif

#ifndef SDIO_DEVICE_ID_MSM_QCA_AR6003_1
#define SDIO_DEVICE_ID_MSM_QCA_AR6003_1	0x300
#endif

#ifndef SDIO_DEVICE_ID_MSM_QCA_AR6003_2
#define SDIO_DEVICE_ID_MSM_QCA_AR6003_2	0x301
#endif

#ifndef SDIO_DEVICE_ID_MSM_QCA_AR6004_1
#define SDIO_DEVICE_ID_MSM_QCA_AR6004_1	0x400
#endif

#ifndef SDIO_DEVICE_ID_MSM_QCA_AR6004_2
#define SDIO_DEVICE_ID_MSM_QCA_AR6004_2	0x401
#endif

/*
 * This hook just adds a quirk for all sdio devices
 */
static void add_quirk_for_sdio_devices(struct mmc_card *card, int data)
{
	if (mmc_card_sdio(card))
		card->quirks |= data;
}

static const struct mmc_fixup mmc_fixup_methods[] = {
	/* by default sdio devices are considered CLK_GATING broken */
	/* good cards will be whitelisted as they are tested */
	SDIO_FIXUP(SDIO_ANY_ID, SDIO_ANY_ID,
		   add_quirk_for_sdio_devices,
		   MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_TI, SDIO_DEVICE_ID_TI_WL1271,
		   remove_quirk, MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_MSM, SDIO_DEVICE_ID_MSM_WCN1314,
		   remove_quirk, MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_MSM_QCA, SDIO_DEVICE_ID_MSM_QCA_AR6003_1,
		   remove_quirk, MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_MSM_QCA, SDIO_DEVICE_ID_MSM_QCA_AR6003_2,
		   remove_quirk, MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_MSM_QCA, SDIO_DEVICE_ID_MSM_QCA_AR6004_1,
		   remove_quirk, MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_MSM_QCA, SDIO_DEVICE_ID_MSM_QCA_AR6004_2,
		   remove_quirk, MMC_QUIRK_BROKEN_CLK_GATING),

	SDIO_FIXUP(SDIO_VENDOR_ID_TI, SDIO_DEVICE_ID_TI_WL1271,
		   add_quirk, MMC_QUIRK_NONSTD_FUNC_IF),

	SDIO_FIXUP(SDIO_VENDOR_ID_TI, SDIO_DEVICE_ID_TI_WL1271,
		   add_quirk, MMC_QUIRK_DISABLE_CD),

	SDIO_FIXUP(SDIO_VENDOR_ID_STE, SDIO_DEVICE_ID_STE_CW1200,
		   add_quirk, MMC_QUIRK_BROKEN_BYTE_MODE_512),

	END_FIXUP
};

void mmc_fixup_device(struct mmc_card *card, const struct mmc_fixup *table)
{
	const struct mmc_fixup *f;
	u64 rev = cid_rev_card(card);

	/* Non-core specific workarounds. */
	if (!table)
		table = mmc_fixup_methods;

	for (f = table; f->vendor_fixup; f++) {
		if ((f->manfid == CID_MANFID_ANY ||
		     f->manfid == card->cid.manfid) &&
		    (f->oemid == CID_OEMID_ANY ||
		     f->oemid == card->cid.oemid) &&
		    (f->name == CID_NAME_ANY ||
		     !strncmp(f->name, card->cid.prod_name,
			      sizeof(card->cid.prod_name))) &&
		    (f->ext_csd_rev == EXT_CSD_REV_ANY ||
		     f->ext_csd_rev == card->ext_csd.rev) &&
		    (f->cis_vendor == card->cis.vendor ||
		     f->cis_vendor == (u16) SDIO_ANY_ID) &&
		    (f->cis_device == card->cis.device ||
		     f->cis_device == (u16) SDIO_ANY_ID) &&
		    rev >= f->rev_start && rev <= f->rev_end) {
			dev_dbg(&card->dev, ""calling %pF\n"", f->vendor_fixup);
			f->vendor_fixup(card, f->data);
		}
	}
}
EXPORT_SYMBOL(mmc_fixup_device);
"
CyanogenMod/android_kernel_htc_flounder,drivers/gpu/drm/radeon/si_reg.h,"/*
 * Copyright 2010 Advanced Micro Devices, Inc.
 *
 * Permi
Query:
SELECT f."repo_name", f."path", c."size", c."content"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
   LIMIT 100;
Answer:
Too long, hard cut:
repo_name,path,size,content
google/rekall,rekall-core/rekall/plugins/linux/iomem.py,2331,"# Rekall Memory Forensics
#
# Copyright Digital Forensics Solutions.
# Copyright 2013 Google Inc. All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

__author__ = (""Andrew Case <atcuno@gmail.com>"",
              ""Michael Cohen <scudette@google.com>"")


from rekall.plugins.linux import common


class IOmem(common.LinuxPlugin):
    '''mimics /proc/iomem.'''

    __name = ""iomem""

    table_header = [
        dict(name=""Resource"", cname=""resource"", style=""address""),
        dict(name=""Start"", cname=""start"", style=""address""),
        dict(name=""End"", cname=""end"", style=""address""),
        dict(name=""Name"", cname=""name"", type=""TreeNode""),
    ]

    def GetResources(self):
        # Resources are organized in a tree structure.
        resource_tree_root = self.profile.get_constant_object(
            ""iomem_resource"", target=""resource"")

        seen = set()

        return self._GetResources(resource_tree_root, seen)

    def _GetResources(self, node, seen, depth=0):
        """"""Traverse the resource tree depth first.""""""
        if not node or node in seen:
            return

        seen.add(node)

        yield node, depth

        if node.child:
            for x in self._GetResources(node.child.deref(), seen, depth+1):
                yield x

        for sibling in node.walk_list(""sibling""):
            for x in self._GetResources(sibling, seen, depth):
                yield x


    def collect(self):
        for node, depth in self.GetResources():
            yield dict(
                resource=node,
                start=node.start,
                end=node.end,
                name=node.name.deref(),
                depth=depth)
"
dieseldev/diesel,examples/zeromq_receiver.py,619,"from diesel import quickstart, quickstop, sleep
from diesel.protocols.zeromq import DieselZMQSocket, zctx, zmq
import time

def get_messages():
    outsock = DieselZMQSocket(zctx.socket(zmq.DEALER), bind=""tcp://127.0.0.1:5000"")

    t = time.time()
    for x in xrange(500000):
        msg = outsock.recv()
        assert msg == ""yo dawg %s"" % x
        if x % 1000 == 0:
            sleep()

    delt = time.time() - t
    print ""500000 messages in %ss (%.1f/s)"" % (delt, 500000.0 / delt)
    quickstop()

def tick():
    while True:
        print ""Other diesel stuff""
        sleep(1)

quickstart(get_messages, tick)
"
MAECProject/python-maec,maec/utils/merge.py,12077,"# Copyright (c) 2015, The MITRE Corporation. All rights reserved.
# See LICENSE.txt for complete terms.

""""""Methods for merging MAEC documents""""""

from copy import deepcopy
import itertools

from mixbox import idgen
from mixbox.namespaces import Namespace

from cybox.core import Object
from cybox.common import HashList

import maec
from maec.package import (Package, MalwareSubject, MalwareConfigurationDetails,
                          FindingsBundleList, MetaAnalysis, Analyses,
                          MinorVariants, MalwareSubjectRelationshipList,
                          MalwareSubjectList)

def dict_merge(target, *args):
    '''Merge multiple dictionaries into one'''
    if len(args) > 1:
        for obj in args:
            dict_merge(target, obj)
        return target
 
    # Recursively merge dicts and set non-dict values
    obj = args[0]
    if not isinstance(obj, dict):
        return obj
    for k, v in obj.iteritems():
        if k in target and isinstance(target[k], dict):
            dict_merge(target[k], v)
        elif k in target and isinstance(target[k], list):
                target[k] = (target[k] + v)
        else:
            target[k] = deepcopy(v)
    return target

def merge_documents(input_list, output_file):
    '''Merge a list of input MAEC documents and write them to an output file'''
    parsed_documents = []
    # Parse the documents and get their API representation
    for input_file in input_list:
        api_representation = maec.parse_xml_instance(input_file)['api']
        parsed_documents.append(api_representation)
    # Do a sanity check on the input list of documents
    for document in parsed_documents:
        if isinstance(document, Package):
            continue
        else:
            print 'Error: unsupported document ty
Query:
SELECT DISTINCT f."repo_name"
   FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
   JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
     ON f."id" = c."id"
   WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
   LIMIT 100;
Answer:
repo_name
MAECProject/python-maec
google/rekall
dieseldev/diesel
Query:
SELECT r."repo_name", r."watch_count"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
    WHERE r."repo_name" IN (
        SELECT DISTINCT f."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
        JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
          ON f."id" = c."id"
        WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
    )
    ORDER BY r."watch_count" DESC
    LIMIT 100;
Answer:
repo_name,watch_count
google/rekall,129
dieseldev/diesel,26
MAECProject/python-maec,2
Query:
SELECT r."repo_name", r."watch_count"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
    WHERE r."repo_name" IN (
        SELECT DISTINCT f."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
        JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
          ON f."id" = c."id"
        WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
    )
    ORDER BY r."watch_count" DESC
    LIMIT 3;
Answer:
repo_name,watch_count
google/rekall,129
dieseldev/diesel,26
MAECProject/python-maec,2
Query:
SELECT f."repo_name", f."path", c."size", c."content"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
    JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
      ON f."id" = c."id"
    WHERE f."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    ) AND f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
    LIMIT 100;
Answer:
Too long, hard cut:
repo_name,path,size,content
dieseldev/diesel,examples/zeromq_receiver.py,619,"from diesel import quickstart, quickstop, sleep
from diesel.protocols.zeromq import DieselZMQSocket, zctx, zmq
import time

def get_messages():
    outsock = DieselZMQSocket(zctx.socket(zmq.DEALER), bind=""tcp://127.0.0.1:5000"")

    t = time.time()
    for x in xrange(500000):
        msg = outsock.recv()
        assert msg == ""yo dawg %s"" % x
        if x % 1000 == 0:
            sleep()

    delt = time.time() - t
    print ""500000 messages in %ss (%.1f/s)"" % (delt, 500000.0 / delt)
    quickstop()

def tick():
    while True:
        print ""Other diesel stuff""
        sleep(1)

quickstart(get_messages, tick)
"
google/rekall,rekall-core/rekall/plugins/linux/iomem.py,2331,"# Rekall Memory Forensics
#
# Copyright Digital Forensics Solutions.
# Copyright 2013 Google Inc. All Rights Reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

__author__ = (""Andrew Case <atcuno@gmail.com>"",
              ""Michael Cohen <scudette@google.com>"")


from rekall.plugins.linux import common


class IOmem(common.LinuxPlugin):
    '''mimics /proc/iomem.'''

    __name = ""iomem""

    table_header = [
        dict(name=""Resource"", cname=""resource"", style=""address""),
        dict(name=""Start"", cname=""start"", style=""address""),
        dict(name=""End"", cname=""end"", style=""address""),
        dict(name=""Name"", cname=""name"", type=""TreeNode""),
    ]

    def GetResources(self):
        # Resources are organized in a tree structure.
        resource_tree_root = self.profile.get_constant_object(
            ""iomem_resource"", target=""resource"")

        seen = set()

        return self._GetResources(resource_tree_root, seen)

    def _GetResources(self, node, seen, depth=0):
        """"""Traverse the resource tree depth first.""""""
        if not node or node in seen:
            return

        seen.add(node)

        yield node, depth

        if node.child:
            for x in self._GetResources(node.child.deref(), seen, depth+1):
                yield x

        for sibling in node.walk_list(""sibling""):
            for x in self._GetResources(sibling, seen, depth):
                yield x


    def collect(self):
        for node, depth in self.GetResources():
            yield dict(
                resource=node,
                start=node.start,
                end=node.end,
                name=node.name.deref(),
                depth=depth)
"
MAECProject/python-maec,maec/utils/merge.py,12077,"# Copyright (c) 2015, The MITRE Corporation. All rights reserved.
# See LICENSE.txt for complete terms.

""""""Methods for merging MAEC documents""""""

from copy import deepcopy
import itertools

from mixbox import idgen
from mixbox.namespaces import Namespace

from cybox.core import Object
from cybox.common import HashList

import maec
from maec.package import (Package, MalwareSubject, MalwareConfigurationDetails,
                          FindingsBundleList, MetaAnalysis, Analyses,
                          MinorVariants, MalwareSubjectRelationshipList,
                          MalwareSubjectList)

def dict_merge(target, *args):
    '''Merge multiple dictionaries into one'''
    if len(args) > 1:
        for obj in args:
            dict_merge(target, obj)
        return target
 
    # Recursively merge dicts and set non-dict values
    obj = args[0]
    if not isinstance(obj, dict):
        return obj
    for k, v in obj.iteritems():
        if k in target and isinstance(target[k], dict):
            dict_merge(target[k], v)
        elif k in target and isinstance(target[k], list):
                target[k] = (target[k] + v)
        else:
            target[k] = deepcopy(v)
    return target

def merge_documents(input_list, output_file):
    '''Merge a list of input MAEC documents and write them to an output file'''
    parsed_documents = []
    # Parse the documents and get their API representation
    for input_file in input_list:
        api_representation = maec.parse_xml_instance(input_file)['api']
        parsed_documents.append(api_representation)
    # Do a sanity check on the input list of documents
    for document in parsed_documents:
        if isinstance(document, Package):
            continue
        else:
            print 'Error: unsupported document ty
Query:
SELECT l."repo_name", l."language"
    FROM GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l
    WHERE l."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    )
    LIMIT 100;
Answer:
repo_name,language
dieseldev/diesel,"[
  {
    ""bytes"": 252,
    ""name"": ""Makefile""
  },
  {
    ""bytes"": 9279,
    ""name"": ""Protocol Buffer""
  },
  {
    ""bytes"": 345729,
    ""name"": ""Python""
  }
]"
google/rekall,"[
  {
    ""bytes"": 5829,
    ""name"": ""Assembly""
  },
  {
    ""bytes"": 1189,
    ""name"": ""Batchfile""
  },
  {
    ""bytes"": 841782,
    ""name"": ""C""
  },
  {
    ""bytes"": 152532,
    ""name"": ""C++""
  },
  {
    ""bytes"": 4880,
    ""name"": ""CMake""
  },
  {
    ""bytes"": 4987,
    ""name"": ""CSS""
  },
  {
    ""bytes"": 39978,
    ""name"": ""HTML""
  },
  {
    ""bytes"": 100463,
    ""name"": ""JavaScript""
  },
  {
    ""bytes"": 3385,
    ""name"": ""M4""
  },
  {
    ""bytes"": 4427,
    ""name"": ""Makefile""
  },
  {
    ""bytes"": 20023,
    ""name"": ""Objective-C""
  },
  {
    ""bytes"": 4962359,
    ""name"": ""Python""
  },
  {
    ""bytes"": 436,
    ""name"": ""Rich Text Format""
  },
  {
    ""bytes"": 9314,
    ""name"": ""Shell""
  }
]"
MAECProject/python-maec,"[
  {
    ""bytes"": 862178,
    ""name"": ""Python""
  }
]"
Query:
SELECT l."repo_name", l."language"
    FROM GITHUB_REPOS.GITHUB_REPOS.LANGUAGES l
    WHERE l."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    )
    LIMIT 100;
Answer:
repo_name,language
google/rekall,"[
  {
    ""bytes"": 5829,
    ""name"": ""Assembly""
  },
  {
    ""bytes"": 1189,
    ""name"": ""Batchfile""
  },
  {
    ""bytes"": 841782,
    ""name"": ""C""
  },
  {
    ""bytes"": 152532,
    ""name"": ""C++""
  },
  {
    ""bytes"": 4880,
    ""name"": ""CMake""
  },
  {
    ""bytes"": 4987,
    ""name"": ""CSS""
  },
  {
    ""bytes"": 39978,
    ""name"": ""HTML""
  },
  {
    ""bytes"": 100463,
    ""name"": ""JavaScript""
  },
  {
    ""bytes"": 3385,
    ""name"": ""M4""
  },
  {
    ""bytes"": 4427,
    ""name"": ""Makefile""
  },
  {
    ""bytes"": 20023,
    ""name"": ""Objective-C""
  },
  {
    ""bytes"": 4962359,
    ""name"": ""Python""
  },
  {
    ""bytes"": 436,
    ""name"": ""Rich Text Format""
  },
  {
    ""bytes"": 9314,
    ""name"": ""Shell""
  }
]"
MAECProject/python-maec,"[
  {
    ""bytes"": 862178,
    ""name"": ""Python""
  }
]"
dieseldev/diesel,"[
  {
    ""bytes"": 252,
    ""name"": ""Makefile""
  },
  {
    ""bytes"": 9279,
    ""name"": ""Protocol Buffer""
  },
  {
    ""bytes"": 345729,
    ""name"": ""Python""
  }
]"
Query:
SELECT l."repo_name", l."license"
    FROM GITHUB_REPOS.GITHUB_REPOS.LICENSES l
    WHERE l."repo_name" IN (
        SELECT r."repo_name"
        FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
        WHERE r."repo_name" IN (
            SELECT DISTINCT f."repo_name"
            FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
            JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
              ON f."id" = c."id"
            WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
        )
        ORDER BY r."watch_count" DESC
        LIMIT 3
    )
    LIMIT 100;
Answer:
repo_name,license
google/rekall,gpl-2.0
dieseldev/diesel,bsd-3-clause
MAECProject/python-maec,bsd-3-clause
End Exploring Related Columns
Task: Using the 2017 GitHub Archive data for watch events, which three repositories that include at least one Python file (with a .py extension) smaller than 15,000 bytes and containing the substring "def " in its content have the highest total number of watch events for that year?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
repo_name,watch_count
repo_name1:str,watch_count1:int
repo_name2:str,watch_count2:int
repo_name3:str,watch_count3:int
(Attention: answer in three rows)
```

These are the top three repositories that include at least one Python file smaller than 15,000 bytes and containing 'def ' in its content, ranked by their total number of watch events in 2017..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: The table structure information is ({database name: {schema name: [table name]}}): 
{'GITHUB_REPOS': {'GITHUB_REPOS': ['SAMPLE_FILES', 'LANGUAGES', 'LICENSES', 'SAMPLE_COMMITS', 'SAMPLE_CONTENTS', 'SAMPLE_REPOS']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.If the task description does not specify the number of decimal places, retain all decimals to four places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-02-12 18:31:20 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 18:31:20 - root - INFO - ```sql
SELECT r."repo_name", r."watch_count"
FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
WHERE r."repo_name" IN (
    SELECT f."repo_name"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
    JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
      ON f."id" = c."id"
    WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
    GROUP BY f."repo_name"
)
ORDER BY r."watch_count" DESC NULLS LAST
LIMIT 3;
```

```csv
repo_name,watch_count
google/rekall,int:129
dieseldev/diesel,int:26
MAECProject/python-maec,int:2
```
2025-02-12 18:31:20 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:31:20 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:31:20 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:31:22 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-02-12 18:31:22 - snowflake.connector.connection - INFO - closed
2025-02-12 18:31:22 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:31:22 - root - INFO - itercount: 1
2025-02-12 18:31:22 - root - INFO - 0
2025-02-12 18:31:22 - root - INFO - results: 
repo_name,watch_count
google/rekall,129
dieseldev/diesel,26
MAECProject/python-maec,2


2025-02-12 18:31:22 - root - INFO - Please check the answer again by reviewing Using the 2017 GitHub Archive data for watch events, which three repositories that include at least one Python file (with a .py extension) smaller than 15,000 bytes and containing the substring "def " in its content have the highest total number of watch events for that year?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
If the task description does not specify the number of decimal places, retain all decimals to four places.
The answer format should be like: ```csv
repo_name,watch_count
repo_name1:str,watch_count1:int
repo_name2:str,watch_count2:int
repo_name3:str,watch_count3:int
(Attention: answer in three rows)
```

These are the top three repositories that include at least one Python file smaller than 15,000 bytes and containing 'def ' in its content, ranked by their total number of watch events in 2017. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
repo_name,watch_count
google/rekall,129
dieseldev/diesel,26
MAECProject/python-maec,2
Current sql:
SELECT r."repo_name", r."watch_count"
FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
WHERE r."repo_name" IN (
    SELECT f."repo_name"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
    JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
      ON f."id" = c."id"
    WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
    GROUP BY f."repo_name"
)
ORDER BY r."watch_count" DESC NULLS LAST
LIMIT 3;
2025-02-12 18:31:41 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com//openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-02-12 18:31:41 - root - INFO - ```sql
SELECT r."repo_name", r."watch_count"
FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_REPOS r
WHERE r."repo_name" IN (
    SELECT DISTINCT f."repo_name"
    FROM GITHUB_REPOS.GITHUB_REPOS.SAMPLE_FILES f
    JOIN GITHUB_REPOS.GITHUB_REPOS.SAMPLE_CONTENTS c
      ON f."id" = c."id"
    WHERE f."path" LIKE '%.py' AND c."size" < 15000 AND c."content" LIKE '%def %'
)
ORDER BY r."watch_count" DESC NULLS LAST
LIMIT 3;
```

```csv
repo_name,watch_count
google/rekall,129
dieseldev/diesel,26
MAECProject/python-maec,2
```
2025-02-12 18:31:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.3, Python Version: 3.10.16, Platform: Linux-6.5.0-45-generic-x86_64-with-glibc2.35
2025-02-12 18:31:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-02-12 18:31:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-02-12 18:31:42 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-02-12 18:31:42 - snowflake.connector.connection - INFO - closed
2025-02-12 18:31:42 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-02-12 18:31:43 - root - INFO - itercount: 2
2025-02-12 18:31:43 - root - INFO - 0
2025-02-12 18:31:43 - root - INFO - Total iteration counts: 2
