After analyzing the three SQL queries and their results, I have determined that **`2result.sql`** is the correct SQL script for calculating the percentage of each country's population that had been confirmed with COVID-19 by June 30, 2020. Here's the reasoning:

**1. Focus on Country-Level Data (`aggregation_level`):**
- The COVID-19 data includes different aggregation levels:
  - **`aggregation_level = 0`**: Country-level data.
  - **`aggregation_level = 1`**: Subnational or state-level data.
- To accurately calculate the percentage for each country, we should use **country-level data only**.

**2. Comparison of the SQL Queries:**

- **`0result.sql`:**
  - **Does not filter on `aggregation_level`**. This means it might include data from multiple aggregation levels, leading to duplicate or incorrect cumulative confirmed cases.
  - Uses `MAX(c."cumulative_confirmed")` to attempt to get the highest value, but without filtering on `aggregation_level`, this might pick up incorrect data.

- **`1result.sql`:**
  - Filters on **`aggregation_level = 1`**, which represents subnational data, not country-level data. This is not suitable for calculating the percentage at the country level.
  - Uses `MAX(c."cumulative_confirmed")`, but since it's using subnational data, it doesn't represent the country's total cases accurately.

- **`2result.sql`:**
  - Correctly filters on **`aggregation_level = 0`**, ensuring only country-level data is used.
  - Uses `c."cumulative_confirmed"` directly without aggregation, as there should be only one record per country on a given date at `aggregation_level = 0`.
  - Ensures accurate calculation by directly dividing the cumulative confirmed cases by the 2018 population.

**3. Conclusion:**
- **`2result.sql`** accurately calculates the percentage of each country's population confirmed with COVID-19 by:
  - Using the correct aggregation level for country-level data.
  - Avoiding unnecessary aggregation functions that might skew the results.
  - Providing accurate and precise percentages corresponding to each country.

**Final Answer:**

```plaintext
2result.sql
```