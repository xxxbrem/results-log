2025-01-16 02:08:53 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:10:00 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:10:00 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:10:00 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:10:00 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:10:01 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-16 02:10:01 - snowflake.connector.connection - INFO - closed
2025-01-16 02:10:01 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:10:02 - root - INFO - SQL:
SELECT DISTINCT "date"
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
   LIMIT 1000;
Results:
Too long, hard cut:
date
2020-11-06
2020-05-09
2022-01-30
2021-04-08
2021-08-06
2021-06-10
2022-12-31
2020-01-26
2021-03-20
2021-07-26
2020-03-28
2020-04-04
2020-09-19
2021-10-14
2021-01-18
2022-04-13
2021-04-16
2020-12-16
2022-02-10
2022-03-23
2020-07-19
2022-09-03
2022-11-27
2020-10-29
2022-11-12
2021-03-31
2022-03-31
2021-11-05
2021-08-01
2022-03-18
2020-09-18
2021-10-13
2022-11-19
2021-08-15
2021-05-08
2022-09-22
2020-04-05
2022-11-24
2022-01-03
2020-12-21
2021-06-25
2021-09-05
2022-11-22
2021-11-30
2021-10-23
2020-07-18
2020-06-01
2021-10-26
2022-06-28
2021-01-15
2020-04-15
2022-11-04
2021-03-19
2020-05-07
2022-06-15
2021-01-01
2022-07-23
2020-12-02
2021-06-27
2021-02-20
2022-04-01
2021-12-06
2020-02-28
2021-01-03
2020-12-03
2021-07-03
2021-01-21
2022-05-08
2020-03-04
2021-05-12
2022-04-12
2021-01-23
2023-01-18
2022-05-06
2021-06-16
2021-06-23
2022-10-16
2021-08-23
2020-12-04
2021-09-28
2021-01-28
2022-01-08
2020-02-17
2021-07-17
2021-04-27
2020-08-16
2023-01-05
2021-03-01
2020-03-23
2020-01-24
2020-01-31
2021-11-01
2021-08-05
2022-10-14
2021-02-03
2022-01-05
2022-11-25
2020-09-01
2020-08-05
2021-04-05
2021-03-23
2022-06-21
2021-10-03
2022-10-30
2020-08-15
2022-08-21
2020-02-03
2021-09-03
2023-02-01
2023-02-28
2020-04-09
2023-03-07
2020-12-20
2022-09-09
2022-07-30
2022-10-13
2020-06-25
2022-04-16
2020-08-25
2022-04-06
2023-01-21
2021-05-18
2022-03-07
2020-11-21
2020-10-15
2023-02-25
2022-02-13
2021-10-18
2020-08-09
2021-02-24
2020-11-15
2022-08-24
2022-11-13
2021-05-11
2021-09-04
2021-10-19
2022-07-29
2022-03-30
2021-03-02
2022-01-14
2021-04-10
2022-10-25
2021-11-07
2020-08-10
2023-01-13
2020-09-28
2020-07-31
2020-02-11
2022-05-05
2020-02-24
2022-06-13
2022-10-07
2020-09-26
2021-02-04
2021-04-06
2022-04-17
2020-06-21
2021-09-17
2020-03-02
2023-02-12
2021-09-01
2022-05-25
2021-11-25
2020-12-08
2022-02-17
2022-12-01
2020-12-24
2021-03-09
2020-06-12
2022-11-11
2022-06-23
2022-07-16
2020-03-14
2022-12-19
2021-11-29
2021-05-24
2022-01-21
2022-01-04
2020-06-30
2020-07-30
2021-01-24
2022-12-04
2022-03-10
2023-02-27
2020-05-19
2023-01-30
2021-04-09
2021-01-25
2022-11-01
2020-05-06
2020-12-19
2021-04-23
2020-07-14
2021-02-11
2021-12-16
2020-02-27
2022-12-12
2022-07-08
2021-06-11
2022-09-13
2022-03-16
2022-02-23
2022-12-28
2022-11-02
2021-03-18
2021-09-10
2020-07-26
2021-11-19
2022-04-02
2020-09-22
2021-08-27
2020-02-20
2020-03-20
2022-11-30
2022-03-05
2020-10-17
2020-04-16
2022-09-17
2021-10-08
2021-11-03
2021-08-03
2022-03-29
2020-11-16
2021-08-04
2020-09-11
2022-05-10
2021-05-14
2022-12-23
2022-06-14
2020-05-30
2021-12-02
2020-04-21
2021-07-10
2022-02-27
2022-08-30
2020-05-29
2022-05-17
2020-11-17
2020-05-24
2020-03-29
2020-06-24
2021-04-20
2020-05-17
2022-09-02
2022-09-30
2020-07-09
2020-05-25
2020-05-28
2022-08-23
2022-07-19
2022-07-25
2022-10-09
2020-06-10
2021-06-18
2022-05-16
2021-01-10
2021-12-04
2020-09-03
2020-02-01
2021-02-22
2022-01-29
2021-01-14
2023-02-09
2020-12-25
2022-04-10
2020-08-26
2020-08-20
2022-07-20
2021-06-14
2021-12-29
2020-11-27
2023-02-04
2020-04-17
2022-06-30
2021-07-11
2021-07-13
2020-02-22
2020-03-06
2022-09-19
2022-07-09
2023-03-04
2022-11-09
2021-10-12
2022-10-15
2020-06-20
2021-05-02
2022-03-27
2020-09-09
2021-06-19
2021-09-29
2023-01-23
2020-04-01
2020-07-25
2020-04-07
2021-04-29
2022-06-25
2023-01-03
2020-07-07
2020-09-13
2021-07-19
2020-10-28
2021-03-12
2020-10-25
2023-02-14
2020-04-10
2021-03-24
2021-12-08
2021-11-28
2022-12-16
2023-03-08
2020-08-23
2020-02-21
2022-12-14
2020-09-15
2020-10-21
2021-11-21
2020-08-19
2020-12-18
2020-12-28
2022-08-01
2021-12-12
2020-04-12
2020-07-05
2021-12-03
2020-08-11
2021-05-27
2020-03-31
2020-07-06
2020-04-23
2021-05-13
2021-02-21
2023-01-11
2020-10-31
2021-04-25
2022-10-11
2022-07-07
2023-01-14
2022-02-07
2022-11-03
2020-06-19
2020-08-06
2020-05-01
2022-03-03
2021-09-06
2020-08-12
2021-05-19
2020-02-13
2020-12-31
2021-01-31
2022-04-28
2022-03-11
2020-08-29
2021-09-13
2022-06-11
2022-07-28
2021-04-11
2020-03-09
2020-02-07
2023-03-03
2023-02-23
2021-03-21
2023-02-18
2022-08-11
2020-02-19
2020-06-14
2020-11-22
2023-01-08
2022-04-18
2020-01-27
2021-08-07
2021-04-07
2020-11-09
2020-06-04
2022-12-08
2021-08-11
2020-08-04
2022-07-13
2021-04-18
2020-05-16
2020-06-16
2022-10-20
2020-07-16
2021-03-10
2020-12-11
2021-07-24
2021-10-24
2021-12-18
2020-09-23
2021-02-05
2022-07-11
2021-12-26
2021-05-03
2023-03-06
2022-01-26
2022-07-31
2021-05-10
2021-12-23
2020-01-30
2020-10-13
2020-11-28
2020-07-23
2022-04-05
2022-06-05
2021-08-10
2022-12-09
2022-04-22
2022-04-23
2021-04-17
2021-09-27
2023-01-04
2021-07-07
2022-08-05
2022-02-25
2021-06-17
2022-07-18
2021-09-07
2022-06-02
2020-06-08
2021-03-14
2021-06-04
2021-07-04
2021-07-12
2021-03-06
2022-05-01
2022-06-26
2021-01-27
2022-11-29
2022-06-09
2022-07-26
2021-03-27
2021-01-11
2020-12-10
2020-06-28
2021-08-25
2022-07-14
2021-02-17
2022-06-08
2020-09-07
2020-10-16
2022-09-25
2023-02-20
2021-12-15
2021-08-17
2020-11-30
2021-04-26
2021-07-09
2022-07-21
2020-09-12
2021-08-02
2020-03-13
2021-05-06
2022-03-17
2022-02-09
2021-10-11
2

2025-01-16 02:10:02 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:10:02 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:10:02 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:10:03 - snowflake.connector.cursor - INFO - Number of results in first chunk: 253
2025-01-16 02:10:03 - snowflake.connector.connection - INFO - closed
2025-01-16 02:10:03 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:10:04 - root - INFO - SQL:
SELECT DISTINCT "country_region"
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
   LIMIT 1000;
Results:
country_region
US
Uzbekistan
Yemen
Zimbabwe
Andorra
Angola
Armenia
Benin
Botswana
Brazil
Cabo Verde
Cameroon
Chad
Comoros
Czechia
Fiji
Gabon
Greece
MS Zaandam
Niger
Nigeria
Chile
Congo (Kinshasa)
Costa Rica
Djibouti
Ghana
Ireland
Kenya
Kosovo
Liechtenstein
Mexico
Morocco
Nepal
Nicaragua
Sao Tome and Principe
Sudan
Tanzania
Jersey
Gibraltar
Zambia
Canada
Lithuania
Monaco
Croatia
Cuba
"Korea, South"
Lesotho
Madagascar
Nauru
Spain
Sri Lanka
Sweden
Turkey
Tunisia
Mainland China
"Bahamas, The"
Palestine
Vatican City
Mozambique
Thailand
Hong Kong
North Ireland
Channel Islands
Winter Olympics 2022
Albania
Argentina
United Arab Emirates
Azerbaijan
Bangladesh
Belize
Bosnia and Herzegovina
Brunei
Bulgaria
El Salvador
Indonesia
Italy
Malaysia
China
Dominica
France
Guatemala
Honduras
Iceland
Jordan
Kazakhstan
Mali
Mauritius
Moldova
Palau
Romania
Rwanda
Saint Kitts and Nevis
Saint Lucia
Senegal
Tajikistan
Tonga
Reunion
Estonia
Kyrgyzstan
Kuwait
Libya
Netherlands
Pakistan
Philippines
Portugal
Germany
San Marino
Serbia
Seychelles
Somalia
Summer Olympics 2020
Togo
"Gambia, The"
Puerto Rico
Trinidad and Tobago
Tuvalu
The Gambia
Aruba
Ivory Coast
Cape Verde
Republic of Ireland
Iran (Islamic Republic of)
Taipei and environs
Macao SAR
Saint Martin
Curacao
Vietnam
West Bank and Gaza
Afghanistan
Algeria
Antarctica
Austria
Australia
Bahamas
Barbados
Belarus
Belgium
Burkina Faso
Colombia
Finland
Guinea
India
Luxembourg
Bhutan
Guinea-Bissau
Israel
Jamaica
Japan
Laos
Maldives
Namibia
New Zealand
Norway
Oman
Peru
Eswatini
Lebanon
Saint Vincent and the Grenadines
Switzerland
Western Sahara
Others
Macau
Republic of the Congo
Hungary
Malta
Mauritania
Mongolia
Russia
Dominican Republic
Gambia
North Macedonia
Poland
Slovenia
Taiwan*
Timor-Leste
South Korea
Cruise Ship
Guadeloupe
Martinique
French Guiana
Greenland
occupied Palestinian territory
Guam
The Bahamas
Saint Barthelemy
East Timor
 Azerbaijan
St. Martin
Viet Nam
Cayman Islands
Uganda
Ukraine
United Kingdom
Uruguay
Vanuatu
Venezuela
Antigua and Barbuda
Bahrain
Burundi
Cambodia
Central African Republic
Cote d'Ivoire
Denmark
Diamond Princess
Ecuador
Eritrea
Guyana
Iran
Iraq
Latvia
Cyprus
Georgia
Liberia
Malawi
Marshall Islands
Panama
Paraguay
Qatar
"Korea, North"
Singapore
South Sudan
Taiwan
UK
Mayotte
Faroe Islands
Burma
Equatorial Guinea
Bolivia
Egypt
Ethiopia
Grenada
Haiti
Holy See
Kiribati
Micronesia
Montenegro
Papua New Guinea
Samoa
Saudi Arabia
Sierra Leone
Slovakia
South Africa
Suriname
Syria
Guernsey
Czech Republic
Congo (Brazzaville)
Solomon Islands
""
Republic of Korea
Hong Kong SAR
Russian Federation
Republic of Moldova

2025-01-16 02:10:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:10:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:10:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:10:05 - snowflake.connector.cursor - INFO - Number of results in first chunk: 185
2025-01-16 02:10:05 - snowflake.connector.connection - INFO - closed
2025-01-16 02:10:05 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:10:06 - root - INFO - SQL:
SELECT "country_region", SUM("confirmed") AS total_confirmed
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
   WHERE "date" = '2020-04-20'
   GROUP BY "country_region"
   LIMIT 1000;
Results:
country_region,TOTAL_CONFIRMED
United Kingdom,125856
Denmark,7711
Antigua and Barbuda,23
Bahrain,1907
Bolivia,564
Burundi,5
Cambodia,122
Central African Republic,12
Cyprus,772
Diamond Princess,712
Equatorial Guinea,79
Grenada,14
Liberia,99
Malawi,17
Montenegro,312
Singapore,8014
Cote d'Ivoire,847
Ecuador,10128
Egypt,3333
Georgia,402
Guyana,65
Haiti,57
Panama,4467
Sierra Leone,43
Syria,39
Uruguay,535
Eritrea,39
Iran,83505
Iraq,1574
Papua New Guinea,7
Paraguay,208
Suriname,10
Uganda,56
Holy See,9
Burma,119
Congo (Brazzaville),160
Ethiopia,111
Slovakia,1173
Ukraine,5710
South Sudan,4
Venezuela,256
Qatar,6015
South Africa,3300
Latvia,739
Saudi Arabia,10484
US,784326
Canada,37658
Andorra,717
Angola,24
Armenia,1339
Benin,54
Botswana,20
Cameroon,1163
Chad,33
Chile,10507
Congo (Kinshasa),332
Croatia,1881
Greece,2245
Kosovo,510
Brazil,40743
Czechia,6900
Djibouti,846
Fiji,18
Gabon,120
Liechtenstein,81
Monaco,94
Mozambique,39
Nepal,31
Nicaragua,10
Niger,648
Tanzania,254
Zimbabwe,25
Cuba,1087
"Korea, South",10674
MS Zaandam,9
Sri Lanka,304
Sudan,107
Thailand,2792
Turkey,90980
Yemen,1
Cabo Verde,67
Ghana,1042
Ireland,15652
Lithuania,1326
Madagascar,121
Mexico,8261
Morocco,3046
Nigeria,665
Spain,200210
Sweden,14777
Tunisia,884
Costa Rica,662
Kenya,281
Sao Tome and Principe,4
Uzbekistan,1627
Zambia,65
China,83817
Netherlands,33588
Albania,584
Argentina,2941
Azerbaijan,1436
Bangladesh,2948
Bosnia and Herzegovina,1309
Brunei,138
El Salvador,218
Estonia,1535
Honduras,477
Somalia,237
Dominica,16
Germany,147065
Iceland,1773
Jordan,425
Kazakhstan,1852
Kuwait,1995
Rwanda,147
Saint Kitts and Nevis,15
San Marino,462
Senegal,377
Serbia,6630
Guatemala,289
Kyrgyzstan,568
Libya,51
Mauritius,328
Moldova,2548
Pakistan,8418
Philippines,6459
Portugal,20863
United Arab Emirates,7265
Malaysia,5425
France,156480
Belize,18
Bulgaria,929
Indonesia,6760
Romania,8936
Seychelles,11
Italy,181228
Mali,246
Saint Lucia,15
Togo,84
Trinidad and Tobago,114
Australia,6547
Afghanistan,1026
Algeria,2718
Austria,14795
Bahamas,60
Belarus,6264
Belgium,39983
Bhutan,5
Burkina Faso,581
Colombia,3977
Hungary,1984
Jamaica,223
Mauritania,7
Switzerland,27944
Guinea,622
Guinea-Bissau,50
India,18539
Israel,13713
Japan,10797
Luxembourg,3558
Maldives,69
Namibia,16
New Zealand,1440
North Macedonia,1225
Oman,1410
Russia,47121
Saint Vincent and the Grenadines,12
Malta,431
Vietnam,268
Western Sahara,6
Timor-Leste,22
Dominican Republic,4964
Laos,19
Barbados,75
Eswatini,24
Finland,3868
Gambia,10
Norway,7156
Peru,16325
West Bank and Gaza,449
Lebanon,677
Slovenia,1335
Mongolia,33
Poland,9593
Taiwan*,422

2025-01-16 02:10:06 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:10:06 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:10:06 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:10:07 - snowflake.connector.cursor - INFO - Number of results in first chunk: 264
2025-01-16 02:10:07 - snowflake.connector.connection - INFO - closed
2025-01-16 02:10:07 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:10:08 - root - INFO - SQL:
SELECT DISTINCT "country"
   FROM COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
   LIMIT 1000;
Results:
country
Sint Maarten (Dutch part)
Not classified
West Bank and Gaza
Serbia
Cambodia
United Arab Emirates
Cyprus
Low income
Peru
Early-demographic dividend
Fiji
Chad
Middle East & North Africa (excluding high income)
Middle East & North Africa (IDA & IBRD countries)
Dominican Republic
Kenya
"Venezuela, RB"
Guinea
Pakistan
Latvia
Qatar
Nigeria
North Macedonia
Cabo Verde
Palau
Sao Tome and Principe
Pacific island small states
St. Martin (French part)
Faroe Islands
Ireland
Bhutan
Zambia
Isle of Man
Guatemala
Singapore
Finland
Montenegro
Barbados
Syrian Arab Republic
Costa Rica
St. Lucia
Afghanistan
Gibraltar
Low & middle income
Latin America & Caribbean (excluding high income)
World
Canada
Rwanda
Thailand
Solomon Islands
Japan
Albania
Andorra
South Asia
South Sudan
Azerbaijan
Jamaica
Portugal
Mali
"Congo, Dem. Rep."
IDA total
Zimbabwe
Sudan
OECD members
Maldives
Nauru
Namibia
South Africa
Pre-demographic dividend
Sierra Leone
Grenada
Mexico
Niger
Senegal
Trinidad and Tobago
Luxembourg
Indonesia
Cayman Islands
Ghana
Lower middle income
Saudi Arabia
Denmark
United States
Europe & Central Asia (IDA & IBRD countries)
"Yemen, Rep."
Least developed countries: UN classification
Central Europe and the Baltics
Brunei Darussalam
Philippines
Sri Lanka
China
Norway
Kosovo
Oman
Middle East & North Africa
East Asia & Pacific (IDA & IBRD countries)
San Marino
Poland
Fragile and conflict affected situations
Angola
Samoa
Honduras
Channel Islands
Burundi
Madagascar
"Macao SAR, China"
Mongolia
Other small states
Bahrain
United Kingdom
Moldova
Benin
Lebanon
Estonia
Middle income
Europe & Central Asia
Croatia
Mauritius
East Asia & Pacific
North America
Netherlands
Liberia
Lao PDR
Sub-Saharan Africa
Algeria
Armenia
Switzerland
Nepal
"Bahamas, The"
Hungary
Bulgaria
Brazil
Haiti
Germany
Europe & Central Asia (excluding high income)
Morocco
Liechtenstein
Ethiopia
Paraguay
High income
Late-demographic dividend
Tajikistan
Uruguay
Italy
Caribbean small states
Malta
"Korea, Dem. People’s Rep."
Post-demographic dividend
Lithuania
Bangladesh
Gabon
IDA blend
Panama
Vanuatu
Belgium
Spain
Euro area
IBRD only
Togo
Sub-Saharan Africa (excluding high income)
Puerto Rico
Greenland
Turkey
"Micronesia, Fed. Sts."
St. Kitts and Nevis
Slovenia
"Hong Kong SAR, China"
Small states
Tanzania
Tunisia
Marshall Islands
St. Vincent and the Grenadines
Vietnam
Equatorial Guinea
Burkina Faso
Dominica
Belarus
Austria
Antigua and Barbuda
Colombia
Chile
Kyrgyz Republic
Comoros
"Korea, Rep."
Belize
Russian Federation
Guyana
Ecuador
Turkmenistan
Malaysia
Cote d'Ivoire
Mauritania
Heavily indebted poor countries (HIPC)
New Zealand
Jordan
Sweden
Bosnia and Herzegovina
Nicaragua
Cameroon
South Asia (IDA & IBRD)
East Asia & Pacific (excluding high income)
IDA & IBRD total
British Virgin Islands
Arab World
Australia
Suriname
Tonga
"Congo, Rep."
Upper middle income
Lesotho
New Caledonia
Curacao
American Samoa
Iraq
Georgia
"Egypt, Arab Rep."
Turks and Caicos Islands
Aruba
IDA only
Sub-Saharan Africa (IDA & IBRD countries)
Tuvalu
Ukraine
Greece
Malawi
Czech Republic
Iceland
Latin America & the Caribbean (IDA & IBRD countries)
Latin America & Caribbean
Botswana
European Union
India
Libya
"Iran, Islamic Rep."
Israel
Seychelles
France
Mozambique
Eritrea
Myanmar
Kiribati
Argentina
Virgin Islands (U.S.)
Djibouti
Uzbekistan
Kuwait
Papua New Guinea
Eswatini
Uganda
Romania
Northern Mariana Islands
Slovak Republic
Somalia
Bermuda
Cuba
Monaco
Guam
Kazakhstan
Central African Republic
El Salvador
Timor-Leste
Guinea-Bissau
"Gambia, The"
Bolivia
French Polynesia

2025-01-16 02:10:08 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:10:08 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:10:08 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:10:09 - snowflake.connector.cursor - INFO - Number of results in first chunk: 6
2025-01-16 02:10:09 - snowflake.connector.connection - INFO - closed
2025-01-16 02:10:09 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:11:01 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:11:01 - root - INFO - ```sql
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    (cd.total_confirmed_cases / pd."year_2019") * 100000 AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                ELSE "country"
            END AS "country_region",
            "year_2019"
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) pd
    ON cd."country_region" = pd."country_region";
```
2025-01-16 02:11:01 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:11:01 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:11:01 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:11:02 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-16 02:11:02 - snowflake.connector.connection - INFO - closed
2025-01-16 02:11:03 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:11:03 - root - INFO - SQL:
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    (cd.total_confirmed_cases / pd."year_2019") * 100000 AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                ELSE "country"
            END AS "country_region",
            "year_2019"
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) pd
    ON cd."country_region" = pd."country_region";
Results:
COUNTRY,TOTAL_CONFIRMED_CASES,CASES_PER_100000_PEOPLE
China,83817,
US,784326,
Germany,147065,
Italy,181228,
Iran,83505,
France,156480,
Spain,200210,

2025-01-16 02:11:03 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:11:03 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:11:03 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:11:04 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-16 02:11:04 - snowflake.connector.connection - INFO - closed
2025-01-16 02:11:04 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:11:05 - root - INFO - SQL:
SELECT s."country_region" AS summary_country, p."country" AS population_country
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY s
   LEFT JOIN COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY p
     ON s."country_region" = p."country"
   WHERE s."country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
   GROUP BY s."country_region", p."country"
   LIMIT 1000;
Results:
SUMMARY_COUNTRY,POPULATION_COUNTRY
Germany,Germany
France,France
Spain,Spain
US,
China,China
Iran,
Italy,Italy

2025-01-16 02:11:05 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:11:05 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:11:05 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:11:06 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-16 02:11:06 - snowflake.connector.connection - INFO - closed
2025-01-16 02:11:06 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:11:06 - root - INFO - SQL:
SELECT DISTINCT "country"
   FROM COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
   WHERE "country" LIKE '%United%'
      OR "country" LIKE '%USA%'
      OR "country" LIKE '%US%'
   LIMIT 1000;
Results:
country
United Arab Emirates
United States
United Kingdom

2025-01-16 02:11:06 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:11:06 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:11:06 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:11:08 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 02:11:08 - snowflake.connector.connection - INFO - closed
2025-01-16 02:11:08 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:11:08 - root - INFO - SQL:
SELECT SUM("confirmed") AS total_confirmed
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
   WHERE "country_region" = 'US' AND "date" = '2020-04-20'
   LIMIT 1000;
Results:
TOTAL_CONFIRMED
784326

2025-01-16 02:11:08 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:11:08 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:11:08 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:11:09 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 02:11:09 - snowflake.connector.connection - INFO - closed
2025-01-16 02:11:10 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:12:26 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:12:26 - root - INFO - ```sql
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    pd."year_2019" AS population_2019,
    ROUND((cd.total_confirmed_cases / pd."year_2019") * 100000, 4) AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
JOIN
    COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY pd
    ON
        pd."country" = 
        CASE
            WHEN cd."country_region" = 'US' THEN 'United States'
            WHEN cd."country_region" = 'Iran' THEN 'Iran, Islamic Rep.'
            ELSE cd."country_region"
        END
WHERE
    pd."year_2019" IS NOT NULL;
```
2025-01-16 02:12:26 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:12:26 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:12:26 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:12:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-16 02:12:27 - snowflake.connector.connection - INFO - closed
2025-01-16 02:12:28 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:13:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:13:39 - root - INFO - ```sql
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    pd.population,
    ROUND((cd.total_confirmed_cases / pd.population) * 100000, 4) AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
JOIN
    (
        SELECT
            "country",
            COALESCE(
                "year_2019",
                "year_2018",
                "year_2017",
                "year_2016",
                "year_2015"
            ) AS population
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) pd
    ON pd."country" = CASE
        WHEN cd."country_region" = 'US' THEN 'United States'
        WHEN cd."country_region" = 'Iran' THEN 'Iran, Islamic Rep.'
        ELSE cd."country_region"
    END
WHERE
    pd.population IS NOT NULL;
```
2025-01-16 02:13:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:13:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:13:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:13:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-16 02:13:41 - snowflake.connector.connection - INFO - closed
2025-01-16 02:13:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:13:41 - root - INFO - SQL:
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    pd.population,
    ROUND((cd.total_confirmed_cases / pd.population) * 100000, 4) AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
JOIN
    (
        SELECT
            "country",
            COALESCE(
                "year_2019",
                "year_2018",
                "year_2017",
                "year_2016",
                "year_2015"
            ) AS population
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) pd
    ON pd."country" = CASE
        WHEN cd."country_region" = 'US' THEN 'United States'
        WHEN cd."country_region" = 'Iran' THEN 'Iran, Islamic Rep.'
        ELSE cd."country_region"
    END
WHERE
    pd.population IS NOT NULL;
Results:
COUNTRY,TOTAL_CONFIRMED_CASES,POPULATION,CASES_PER_100000_PEOPLE
US,784326,327167434,239.7000
China,83817,1392730000,6.0000
Germany,147065,82927922,177.3000
Italy,181228,60431283,299.9000
Spain,200210,46723749,428.5000
Iran,83505,81800269,102.1000
France,156480,66987244,233.6000

2025-01-16 02:13:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:13:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:13:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:13:43 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 02:13:43 - snowflake.connector.connection - INFO - closed
2025-01-16 02:13:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:15:36 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:15:36 - root - INFO - ```sql
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    COALESCE(
        pd."year_2019",
        pd."year_2018",
        pd."year_2017",
        pd."year_2016",
        pd."year_2015",
        pd."year_2014",
        pd."year_2013",
        pd."year_2012",
        pd."year_2011",
        pd."year_2010"
    ) AS population,
    ROUND(
        (cd.total_confirmed_cases / COALESCE(
            pd."year_2019",
            pd."year_2018",
            pd."year_2017",
            pd."year_2016",
            pd."year_2015",
            pd."year_2014",
            pd."year_2013",
            pd."year_2012",
            pd."year_2011",
            pd."year_2010"
        )) * 100000,
        4
    ) AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
LEFT JOIN
    COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY pd
    ON pd."country" = CASE
        WHEN cd."country_region" = 'US' THEN 'United States'
        WHEN cd."country_region" = 'Iran' THEN 'Iran, Islamic Rep.'
        ELSE cd."country_region"
    END
WHERE
    COALESCE(
        pd."year_2019",
        pd."year_2018",
        pd."year_2017",
        pd."year_2016",
        pd."year_2015",
        pd."year_2014",
        pd."year_2013",
        pd."year_2012",
        pd."year_2011",
        pd."year_2010"
    ) IS NOT NULL;
```
2025-01-16 02:15:36 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:15:36 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:15:36 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:15:37 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-16 02:15:38 - snowflake.connector.connection - INFO - closed
2025-01-16 02:15:38 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:15:38 - root - INFO - SQL:
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    COALESCE(
        pd."year_2019",
        pd."year_2018",
        pd."year_2017",
        pd."year_2016",
        pd."year_2015",
        pd."year_2014",
        pd."year_2013",
        pd."year_2012",
        pd."year_2011",
        pd."year_2010"
    ) AS population,
    ROUND(
        (cd.total_confirmed_cases / COALESCE(
            pd."year_2019",
            pd."year_2018",
            pd."year_2017",
            pd."year_2016",
            pd."year_2015",
            pd."year_2014",
            pd."year_2013",
            pd."year_2012",
            pd."year_2011",
            pd."year_2010"
        )) * 100000,
        4
    ) AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
LEFT JOIN
    COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY pd
    ON pd."country" = CASE
        WHEN cd."country_region" = 'US' THEN 'United States'
        WHEN cd."country_region" = 'Iran' THEN 'Iran, Islamic Rep.'
        ELSE cd."country_region"
    END
WHERE
    COALESCE(
        pd."year_2019",
        pd."year_2018",
        pd."year_2017",
        pd."year_2016",
        pd."year_2015",
        pd."year_2014",
        pd."year_2013",
        pd."year_2012",
        pd."year_2011",
        pd."year_2010"
    ) IS NOT NULL;
Results:
COUNTRY,TOTAL_CONFIRMED_CASES,POPULATION,CASES_PER_100000_PEOPLE
US,784326,327167434,239.7000
China,83817,1392730000,6.0000
Germany,147065,82927922,177.3000
Italy,181228,60431283,299.9000
Spain,200210,46723749,428.5000
Iran,83505,81800269,102.1000
France,156480,66987244,233.6000

2025-01-16 02:15:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:15:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:15:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:15:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 34
2025-01-16 02:15:40 - snowflake.connector.connection - INFO - closed
2025-01-16 02:15:40 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:15:40 - root - INFO - SQL:
SELECT DISTINCT "province_state"
    FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
    WHERE "country_region" = 'China'
    LIMIT 1000;
Results:
province_state
Beijing
Gansu
Henan
Hong Kong
Liaoning
Shandong
Shanxi
Tibet
Anhui
Hainan
Hebei
Hunan
Xinjiang
Yunnan
Inner Mongolia
Shanghai
Zhejiang
Hubei
Chongqing
Fujian
Guangdong
Heilongjiang
Jiangsu
Jiangxi
Macau
Ningxia
Guangxi
Guizhou
Jilin
Qinghai
Shaanxi
Tianjin
Sichuan
Unknown

2025-01-16 02:15:40 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:15:40 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:15:40 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:15:42 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 02:15:42 - snowflake.connector.connection - INFO - closed
2025-01-16 02:15:42 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:15:42 - root - INFO - SQL:
SELECT SUM("confirmed") AS total_confirmed
    FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
    WHERE "country_region" = 'China' AND "date" = '2020-04-20'
    LIMIT 1000;
Results:
TOTAL_CONFIRMED
83817

2025-01-16 02:15:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:15:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:15:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:15:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-16 02:15:44 - snowflake.connector.connection - INFO - closed
2025-01-16 02:15:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:17:04 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:17:04 - root - INFO - ```sql
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    pd.population,
    ROUND(
        (cd.total_confirmed_cases / pd.population) * 100000,
        4
    ) AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                WHEN "country" = 'Egypt, Arab Rep.' THEN 'Egypt'
                WHEN "country" = 'Korea, Rep.' THEN 'Korea, South'
                ELSE "country"
            END AS country_region,
            COALESCE(
                "year_2019",
                "year_2018",
                "year_2017",
                "year_2016",
                "year_2015"
            ) AS population
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) pd
ON
    cd."country_region" = pd.country_region
WHERE
    pd.population IS NOT NULL;
```
2025-01-16 02:17:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:17:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:17:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:17:06 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-16 02:17:06 - snowflake.connector.connection - INFO - closed
2025-01-16 02:17:06 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:17:06 - root - INFO - SQL:
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    pd.population,
    ROUND(
        (cd.total_confirmed_cases / pd.population) * 100000,
        4
    ) AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                WHEN "country" = 'Egypt, Arab Rep.' THEN 'Egypt'
                WHEN "country" = 'Korea, Rep.' THEN 'Korea, South'
                ELSE "country"
            END AS country_region,
            COALESCE(
                "year_2019",
                "year_2018",
                "year_2017",
                "year_2016",
                "year_2015"
            ) AS population
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) pd
ON
    cd."country_region" = pd.country_region
WHERE
    pd.population IS NOT NULL;
Results:
COUNTRY,TOTAL_CONFIRMED_CASES,POPULATION,CASES_PER_100000_PEOPLE
China,83817,1392730000,6.0000
US,784326,327167434,239.7000
Germany,147065,82927922,177.3000
Italy,181228,60431283,299.9000
Iran,83505,81800269,102.1000
France,156480,66987244,233.6000
Spain,200210,46723749,428.5000

2025-01-16 02:17:06 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:17:06 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:17:06 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:17:08 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-16 02:17:08 - snowflake.connector.connection - INFO - closed
2025-01-16 02:17:08 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:17:08 - root - INFO - SQL:
SELECT "country_region", SUM("confirmed") AS total_confirmed
    FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
    WHERE "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran') AND "date" = '2020-04-20'
    GROUP BY "country_region"
    LIMIT 1000;
Results:
country_region,TOTAL_CONFIRMED
US,784326
Spain,200210
China,83817
France,156480
Germany,147065
Italy,181228
Iran,83505

2025-01-16 02:17:08 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:17:08 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:17:08 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:17:09 - snowflake.connector.cursor - INFO - Number of results in first chunk: 264
2025-01-16 02:17:09 - snowflake.connector.connection - INFO - closed
2025-01-16 02:17:09 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:17:55 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:17:55 - root - INFO - ```sql
WITH country_mapping AS (
    SELECT 'US' AS covid_country, 'United States' AS population_country
    UNION ALL
    SELECT 'Iran' AS covid_country, 'Iran, Islamic Rep.' AS population_country
    UNION ALL
    SELECT 'France' AS covid_country, 'France' AS population_country
    UNION ALL
    SELECT 'Germany' AS covid_country, 'Germany' AS population_country
    UNION ALL
    SELECT 'Spain' AS covid_country, 'Spain' AS population_country
    UNION ALL
    SELECT 'Italy' AS covid_country, 'Italy' AS population_country
    UNION ALL
    SELECT 'China' AS covid_country, 'China' AS population_country
)
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    pd."year_2019" AS population_2019,
    ROUND((cd.total_confirmed_cases / pd."year_2019") * 100000, 4) AS cases_per_100000_people
FROM (
    SELECT
        "country_region",
        SUM("confirmed") AS total_confirmed_cases
    FROM
        COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
    WHERE
        "date" = '2020-04-20'
        AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
    GROUP BY
        "country_region"
) cd
JOIN country_mapping cm ON cd."country_region" = cm.covid_country
LEFT JOIN COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY pd
    ON pd."country" = cm.population_country
WHERE
    pd."year_2019" IS NOT NULL;
```
2025-01-16 02:17:55 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:17:55 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:17:55 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:17:57 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-16 02:17:57 - snowflake.connector.connection - INFO - closed
2025-01-16 02:17:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:18:20 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:18:20 - root - INFO - ```sql
SELECT
    s."country_region" AS country,
    SUM(s."confirmed") AS total_confirmed,
    p."year_2019" AS population_2019,
    ROUND((SUM(s."confirmed") / p."year_2019") * 100000, 4) AS cases_per_100000_people
FROM
    COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY s
JOIN
    COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY p
    ON (
        s."country_region" = p."country"
        OR (s."country_region" = 'US' AND p."country" = 'United States')
        OR (s."country_region" = 'Iran' AND p."country" = 'Iran, Islamic Rep.')
    )
WHERE
    s."date" = '2020-04-20'
    AND s."country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
GROUP BY
    s."country_region", p."year_2019";
```
2025-01-16 02:18:20 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:18:20 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:18:20 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:18:22 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-16 02:18:22 - snowflake.connector.connection - INFO - closed
2025-01-16 02:18:22 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:18:22 - root - INFO - SQL:
SELECT
    s."country_region" AS country,
    SUM(s."confirmed") AS total_confirmed,
    p."year_2019" AS population_2019,
    ROUND((SUM(s."confirmed") / p."year_2019") * 100000, 4) AS cases_per_100000_people
FROM
    COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY s
JOIN
    COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY p
    ON (
        s."country_region" = p."country"
        OR (s."country_region" = 'US' AND p."country" = 'United States')
        OR (s."country_region" = 'Iran' AND p."country" = 'Iran, Islamic Rep.')
    )
WHERE
    s."date" = '2020-04-20'
    AND s."country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
GROUP BY
    s."country_region", p."year_2019";
Results:
COUNTRY,TOTAL_CONFIRMED,POPULATION_2019,CASES_PER_100000_PEOPLE
China,83817,,
US,784326,,
Germany,147065,,
Italy,181228,,
Iran,83505,,
France,156480,,
Spain,200210,,

2025-01-16 02:18:22 - root - INFO - itercount: 0
2025-01-16 02:18:22 - root - INFO - Database Name: COVID19_JHU_WORLD_BANK
Schema Name: COVID19_JHU_CSSE
DDL describes table information.
,0
table_name,CONFIRMED_CASES
description,
DDL,"create or replace TABLE CONFIRMED_CASES (
	""province_or_state"" VARCHAR(16777216),
	""country_or_region"" VARCHAR(16777216),
	""latitude"" VARCHAR(16777216),
	""longitude"" VARCHAR(16777216),
	""location_geom"" VARCHAR(16777216),
	_1_22_20 VARCHAR(16777216),
	_1_23_20 VARCHAR(16777216),
	_1_24_20 VARCHAR(16777216),
	_1_25_20 VARCHAR(16777216),
	_1_26_20 VARCHAR(16777216),
	_1_27_20 VARCHAR(16777216),
	_1_28_20 VARCHAR(16777216),
	_1_29_20 VARCHAR(16777216),
	_1_30_20 VARCHAR(16777216),
	_1_31_20 VARCHAR(16777216),
	_2_1_20 VARCHAR(16777216),
	_2_2_20 VARCHAR(16777216),
	_2_3_20 VARCHAR(16777216),
	_2_4_20 VARCHAR(16777216),
	_2_5_20 VARCHAR(16777216),
	_2_6_20 VARCHAR(16777216),
	_2_7_20 VARCHAR(16777216),
	_2_8_20 VARCHAR(16777216),
	_2_9_20 VARCHAR(16777216),
	_2_10_20 VARCHAR(16777216),
	_2_11_20 VARCHAR(16777216),
	_2_12_20 VARCHAR(16777216),
	_2_13_20 VARCHAR(16777216),
	_2_14_20 VARCHAR(16777216),
	_2_15_20 VARCHAR(16777216),
	_2_16_20 VARCHAR(16777216),
	_2_17_20 VARCHAR(16777216),
	_2_18_20 VARCHAR(16777216),
	_2_19_20 VARCHAR(16777216),
	_2_20_20 VARCHAR(16777216),
	_2_21_20 VARCHAR(16777216),
	_2_22_20 VARCHAR(16777216),
	_2_23_20 VARCHAR(16777216),
	_2_24_20 VARCHAR(16777216),
	_2_25_20 VARCHAR(16777216),
	_2_26_20 VARCHAR(16777216),
	_2_27_20 VARCHAR(16777216),
	_2_28_20 VARCHAR(16777216),
	_2_29_20 VARCHAR(16777216),
	_3_1_20 VARCHAR(16777216),
	_3_2_20 VARCHAR(16777216),
	_3_3_20 VARCHAR(16777216),
	_3_4_20 VARCHAR(16777216),
	_3_5_20 VARCHAR(16777216),
	_3_6_20 VARCHAR(16777216),
	_3_7_20 VARCHAR(16777216),
	_3_8_20 VARCHAR(16777216),
	_3_9_20 VARCHAR(16777216),
	_3_10_20 VARCHAR(16777216),
	_3_11_20 VARCHAR(16777216),
	_3_12_20 VARCHAR(16777216),
	_3_13_20 VARCHAR(16777216),
	_3_14_20 VARCHAR(16777216),
	_3_15_20 VARCHAR(16777216),
	_3_16_20 VARCHAR(16777216),
	_3_17_20 VARCHAR(16777216),
	_3_18_20 VARCHAR(16777216),
	_3_19_20 VARCHAR(16777216),
	_3_20_20 VARCHAR(16777216),
	_3_21_20 VARCHAR(16777216),
	_3_22_20 VARCHAR(16777216),
	_3_23_20 VARCHAR(16777216),
	_3_24_20 VARCHAR(16777216),
	_3_25_20 VARCHAR(16777216),
	_3_26_20 VARCHAR(16777216),
	_3_27_20 VARCHAR(16777216),
	_3_28_20 VARCHAR(16777216),
	_3_29_20 VARCHAR(16777216),
	_3_30_20 VARCHAR(16777216),
	_3_31_20 VARCHAR(16777216),
	_4_1_20 VARCHAR(16777216),
	_4_2_20 VARCHAR(16777216),
	_4_3_20 VARCHAR(16777216),
	_4_4_20 VARCHAR(16777216),
	_4_5_20 VARCHAR(16777216),
	_4_6_20 VARCHAR(16777216),
	_4_7_20 VARCHAR(16777216),
	_4_8_20 VARCHAR(16777216),
	_4_9_20 VARCHAR(16777216),
	_4_10_20 VARCHAR(16777216),
	_4_11_20 VARCHAR(16777216),
	_4_12_20 VARCHAR(16777216),
	_4_13_20 VARCHAR(16777216),
	_4_14_20 VARCHAR(16777216),
	_4_15_20 VARCHAR(16777216),
	_4_16_20 VARCHAR(16777216),
	_4_17_20 VARCHAR(16777216),
	_4_18_20 VARCHAR(16777216),
	_4_19_20 VARCHAR(16777216),
	_4_20_20 VARCHAR(16777216),
	_4_21_20 VARCHAR(16777216),
	_4_22_20 VARCHAR(16777216),
	_4_23_20 VARCHAR(16777216),
	_4_24_20 VARCHAR(16777216),
	_4_25_20 VARCHAR(16777216),
	_4_26_20 VARCHAR(16777216),
	_4_27_20 VARCHAR(16777216),
	_4_28_20 VARCHAR(16777216),
	_4_29_20 VARCHAR(16777216),
	_4_30_20 VARCHAR(16777216),
	_5_1_20 VARCHAR(16777216),
	_5_2_20 VARCHAR(16777216),
	_5_3_20 VARCHAR(16777216),
	_5_4_20 VARCHAR(16777216),
	_5_5_20 VARCHAR(16777216),
	_5_6_20 VARCHAR(16777216),
	_5_7_20 VARCHAR(16777216),
	_5_8_20 VARCHAR(16777216),
	_5_9_20 VARCHAR(16777216),
	_5_10_20 VARCHAR(16777216),
	_5_11_20 VARCHAR(16777216),
	_5_12_20 VARCHAR(16777216),
	_5_13_20 VARCHAR(16777216),
	_5_14_20 VARCHAR(16777216),
	_5_15_20 VARCHAR(16777216),
	_5_16_20 VARCHAR(16777216),
	_5_17_20 VARCHAR(16777216),
	_5_18_20 VARCHAR(16777216),
	_5_19_20 VARCHAR(16777216),
	_5_20_20 VARCHAR(16777216),
	_5_21_20 VARCHAR(16777216),
	_5_22_20 VARCHAR(16777216),
	_5_23_20 VARCHAR(16777216),
	_5_24_20 VARCHAR(16777216),
	_5_25_20 VARCHAR(16777216),
	_5_26_20 VARCHAR(16777216),
	_5_27_20 VARCHAR(16777216),
	_5_28_20 VARCHAR(16777216),
	_5_29_20 VARCHAR(16777216),
	_5_30_20 VARCHAR(16777216),
	_5_31_20 VARCHAR(16777216),
	_6_1_20 VARCHAR(16777216),
	_6_2_20 VARCHAR(16777216),
	_6_3_20 VARCHAR(16777216),
	_6_4_20 VARCHAR(16777216),
	_6_5_20 VARCHAR(16777216),
	_6_6_20 VARCHAR(16777216),
	_6_7_20 VARCHAR(16777216),
	_6_8_20 VARCHAR(16777216),
	_6_9_20 VARCHAR(16777216),
	_6_10_20 VARCHAR(16777216),
	_6_11_20 VARCHAR(16777216),
	_6_12_20 VARCHAR(16777216),
	_6_13_20 VARCHAR(16777216),
	_6_14_20 VARCHAR(16777216),
	_6_15_20 VARCHAR(16777216),
	_6_16_20 VARCHAR(16777216),
	_6_17_20 VARCHAR(16777216),
	_6_18_20 VARCHAR(16777216),
	_6_19_20 VARCHAR(16777216),
	_6_20_20 VARCHAR(16777216),
	_6_21_20 VARCHAR(16777216),
	_6_22_20 VARCHAR(16777216),
	_6_23_20 VARCHAR(16777216),
	_6_24_20 VARCHAR(16777216),
	_6_25_20 VARCHAR(16777216),
	_6_26_20 VARCHAR(16777216),
	_6_27_20 VARCHAR(16777216),
	_6_28_20 VARCHAR(16777216),
	_6_29_20 VARCHAR(16777216),
	_6_30_20 VARCHAR(16777216),
	_7_1_20 VARCHAR(16777216),
	_7_2_20 VARCHAR(16777216),
	_7_3_20 VARCHAR(16777216),
	_7_4_20 VARCHAR(16777216),
	_7_5_20 VARCHAR(16777216),
	_7_6_20 VARCHAR(16777216),
	_7_7_20 VARCHAR(16777216),
	_7_8_20 VARCHAR(16777216),
	_7_9_20 VARCHAR(16777216),
	_7_10_20 VARCHAR(16777216),
	_7_11_20 VARCHAR(16777216),
	_7_12_20 VARCHAR(16777216),
	_7_13_20 VARCHAR(16777216),
	_7_14_20 VARCHAR(16777216),
	_7_15_20 VARCHAR(16777216),
	_7_16_20 VARCHAR(16777216),
	_7_17_20 VARCHAR(16777216),
	_7_18_20 VARCHAR(16777216),
	_7_19_20 VARCHAR(16777216),
	_7_20_20 VARCHAR(16777216),
	_7_21_20 VARCHAR(16777216),
	_7_22_20 VARCHAR(16777216),
	_7_23_20 VARCHAR(16777216),
	_7_24_20 VARCHAR(16777216),
	_7_25_20 VARCHAR(16777216),
	_7_26_20 VARCHAR(16777216),
	_7_27_20 VARCHAR(16777216),
	_7_28_20 VARCHAR(16777216),
	_7_29_20 VARCHAR(16777216),
	_7_30_20 VARCHAR(16777216),
	_7_31_20 VARCHAR(16777216),
	_8_1_20 VARCHAR(16777216),
	_8_2_20 VARCHAR(16777216),
	_8_3_20 VARCHAR(16777216),
	_8_4_20 VARCHAR(16777216),
	_8_5_20 VARCHAR(16777216),
	_8_6_20 VARCHAR(16777216),
	_8_7_20 VARCHAR(16777216),
	_8_8_20 VARCHAR(16777216),
	_8_9_20 VARCHAR(16777216),
	_8_10_20 VARCHAR(16777216),
	_8_11_20 VARCHAR(16777216),
	_8_12_20 VARCHAR(16777216),
	_8_13_20 VARCHAR(16777216),
	_8_14_20 VARCHAR(16777216),
	_8_15_20 VARCHAR(16777216),
	_8_16_20 VARCHAR(16777216),
	_8_17_20 VARCHAR(16777216),
	_8_18_20 VARCHAR(16777216),
	_8_19_20 VARCHAR(16777216),
	_8_20_20 VARCHAR(16777216),
	_8_21_20 VARCHAR(16777216),
	_8_22_20 VARCHAR(16777216),
	_8_23_20 VARCHAR(16777216),
	_8_24_20 VARCHAR(16777216),
	_8_25_20 VARCHAR(16777216),
	_8_26_20 VARCHAR(16777216),
	_8_27_20 VARCHAR(16777216),
	_8_28_20 VARCHAR(16777216),
	_8_29_20 VARCHAR(16777216),
	_8_30_20 VARCHAR(16777216),
	_8_31_20 VARCHAR(16777216),
	_9_1_20 VARCHAR(16777216),
	_9_2_20 VARCHAR(16777216),
	_9_3_20 VARCHAR(16777216),
	_9_4_20 VARCHAR(16777216),
	_9_5_20 VARCHAR(16777216),
	_9_6_20 VARCHAR(16777216),
	_9_7_20 VARCHAR(16777216),
	_9_8_20 VARCHAR(16777216),
	_9_9_20 VARCHAR(16777216),
	_9_10_20 VARCHAR(16777216),
	_9_11_20 VARCHAR(16777216),
	_9_12_20 VARCHAR(16777216),
	_9_13_20 VARCHAR(16777216),
	_9_14_20 VARCHAR(16777216),
	_9_15_20 VARCHAR(16777216),
	_9_16_20 VARCHAR(16777216),
	_9_17_20 VARCHAR(16777216),
	_9_18_20 VARCHAR(16777216),
	_9_19_20 VARCHAR(16777216),
	_9_20_20 VARCHAR(16777216),
	_9_21_20 VARCHAR(16777216),
	_9_22_20 VARCHAR(16777216),
	_9_23_20 VARCHAR(16777216),
	_9_24_20 VARCHAR(16777216),
	_9_25_20 VARCHAR(16777216),
	_9_26_20 VARCHAR(16777216),
	_9_27_20 VARCHAR(16777216),
	_9_28_20 VARCHAR(16777216),
	_9_29_20 VARCHAR(16777216),
	_9_30_20 VARCHAR(16777216),
	_10_1_20 VARCHAR(16777216),
	_10_2_20 VARCHAR(16777216),
	_10_3_20 VARCHAR(16777216),
	_10_4_20 VARCHAR(16777216),
	_10_5_20 VARCHAR(16777216),
	_10_6_20 VARCHAR(16777216),
	_10_7_20 VARCHAR(16777216),
	_10_8_20 VARCHAR(16777216),
	_10_9_20 VARCHAR(16777216),
	_10_10_20 VARCHAR(16777216),
	_10_11_20 VARCHAR(16777216),
	_10_12_20 VARCHAR(16777216),
	_10_13_20 VARCHAR(16777216),
	_10_14_20 VARCHAR(16777216),
	_10_15_20 VARCHAR(16777216),
	_10_16_20 VARCHAR(16777216),
	_10_17_20 VARCHAR(16777216),
	_10_18_20 VARCHAR(16777216),
	_10_19_20 VARCHAR(16777216),
	_10_20_20 VARCHAR(16777216),
	_10_21_20 VARCHAR(16777216),
	_10_22_20 VARCHAR(16777216),
	_10_23_20 VARCHAR(16777216),
	_10_24_20 VARCHAR(16777216),
	_10_25_20 VARCHAR(16777216),
	_10_26_20 VARCHAR(16777216),
	_10_27_20 VARCHAR(16777216),
	_10_28_20 VARCHAR(16777216),
	_10_29_20 VARCHAR(16777216),
	_10_30_20 VARCHAR(16777216),
	_10_31_20 VARCHAR(16777216),
	_11_1_20 VARCHAR(16777216),
	_11_2_20 VARCHAR(16777216),
	_11_3_20 VARCHAR(16777216),
	_11_4_20 VARCHAR(16777216),
	_11_5_20 VARCHAR(16777216),
	_11_6_20 VARCHAR(16777216),
	_11_7_20 VARCHAR(16777216),
	_11_8_20 VARCHAR(16777216),
	_11_9_20 VARCHAR(16777216),
	_11_10_20 VARCHAR(16777216),
	_11_11_20 VARCHAR(16777216),
	_11_12_20 VARCHAR(16777216),
	_11_13_20 VARCHAR(16777216),
	_11_14_20 VARCHAR(16777216),
	_11_15_20 VARCHAR(16777216),
	_11_16_20 VARCHAR(16777216),
	_11_17_20 VARCHAR(16777216),
	_11_18_20 VARCHAR(16777216),
	_11_19_20 VARCHAR(16777216),
	_11_20_20 VARCHAR(16777216),
	_11_21_20 VARCHAR(16777216),
	_11_22_20 VARCHAR(16777216),
	_11_23_20 VARCHAR(16777216),
	_11_24_20 VARCHAR(16777216),
	_11_25_20 VARCHAR(16777216),
	_11_26_20 VARCHAR(16777216),
	_11_27_20 VARCHAR(16777216),
	_11_28_20 VARCHAR(16777216),
	_11_29_20 VARCHAR(16777216),
	_11_30_20 VARCHAR(16777216),
	_12_1_20 VARCHAR(16777216),
	_12_2_20 VARCHAR(16777216),
	_12_3_20 VARCHAR(16777216),
	_12_4_20 VARCHAR(16777216),
	_12_5_20 VARCHAR(16777216),
	_12_6_20 VARCHAR(16777216),
	_12_7_20 VARCHAR(16777216),
	_12_8_20 VARCHAR(16777216),
	_12_9_20 VARCHAR(16777216),
	_12_10_20 VARCHAR(16777216),
	_12_11_20 VARCHAR(16777216),
	_12_12_20 VARCHAR(16777216),
	_12_13_20 VARCHAR(16777216),
	_12_14_20 VARCHAR(16777216),
	_12_15_20 VARCHAR(16777216),
	_12_16_20 VARCHAR(16777216),
	_12_17_20 VARCHAR(16777216),
	_12_18_20 VARCHAR(16777216),
	_12_19_20 VARCHAR(16777216),
	_12_20_20 VARCHAR(16777216),
	_12_21_20 VARCHAR(16777216),
	_12_22_20 VARCHAR(16777216),
	_12_23_20 VARCHAR(16777216),
	_12_24_20 VARCHAR(16777216),
	_12_25_20 VARCHAR(16777216),
	_12_26_20 VARCHAR(16777216),
	_12_27_20 VARCHAR(16777216),
	_12_28_20 VARCHAR(16777216),
	_12_29_20 VARCHAR(16777216),
	_12_30_20 VARCHAR(16777216),
	_12_31_20 VARCHAR(16777216),
	_1_1_21 VARCHAR(16777216),
	_1_2_21 VARCHAR(16777216),
	_1_3_21 VARCHAR(16777216),
	_1_4_21 VARCHAR(16777216),
	_1_5_21 VARCHAR(16777216),
	_1_6_21 VARCHAR(16777216),
	_1_7_21 VARCHAR(16777216),
	_1_8_21 VARCHAR(16777216),
	_1_9_21 VARCHAR(16777216),
	_1_10_21 VARCHAR(16777216),
	_1_11_21 VARCHAR(16777216),
	_1_12_21 VARCHAR(16777216),
	_1_13_21 VARCHAR(16777216),
	_1_14_21 VARCHAR(16777216),
	_1_15_21 VARCHAR(16777216),
	_1_16_21 VARCHAR(16777216),
	_1_17_21 VARCHAR(16777216),
	_1_18_21 VARCHAR(16777216),
	_1_19_21 VARCHAR(16777216),
	_1_20_21 VARCHAR(16777216),
	_1_21_21 VARCHAR(16777216),
	_1_22_21 VARCHAR(16777216),
	_1_23_21 VARCHAR(16777216),
	_1_24_21 VARCHAR(16777216),
	_1_25_21 VARCHAR(16777216),
	_1_26_21 VARCHAR(16777216),
	_1_27_21 VARCHAR(16777216),
	_1_28_21 VARCHAR(16777216),
	_1_29_21 VARCHAR(16777216),
	_1_30_21 VARCHAR(16777216),
	_1_31_21 VARCHAR(16777216),
	_2_1_21 VARCHAR(16777216),
	_2_2_21 VARCHAR(16777216),
	_2_3_21 VARCHAR(16777216),
	_2_4_21 VARCHAR(16777216),
	_2_5_21 VARCHAR(16777216),
	_2_6_21 VARCHAR(16777216),
	_2_7_21 VARCHAR(16777216),
	_2_8_21 VARCHAR(16777216),
	_2_9_21 VARCHAR(16777216),
	_2_10_21 VARCHAR(16777216),
	_2_11_21 VARCHAR(16777216),
	_2_12_21 VARCHAR(16777216),
	_2_13_21 VARCHAR(16777216),
	_2_14_21 VARCHAR(16777216),
	_2_15_21 VARCHAR(16777216),
	_2_16_21 VARCHAR(16777216),
	_2_17_21 VARCHAR(16777216),
	_2_18_21 VARCHAR(16777216),
	_2_19_21 VARCHAR(16777216),
	_2_20_21 VARCHAR(16777216),
	_2_21_21 VARCHAR(16777216),
	_2_22_21 VARCHAR(16777216),
	_2_23_21 VARCHAR(16777216),
	_2_24_21 VARCHAR(16777216),
	_2_25_21 VARCHAR(16777216),
	_2_26_21 VARCHAR(16777216),
	_2_27_21 VARCHAR(16777216),
	_2_28_21 VARCHAR(16777216),
	_3_1_21 VARCHAR(16777216),
	_3_2_21 VARCHAR(16777216),
	_3_3_21 VARCHAR(16777216),
	_3_4_21 VARCHAR(16777216),
	_3_5_21 VARCHAR(16777216),
	_3_6_21 VARCHAR(16777216),
	_3_7_21 VARCHAR(16777216),
	_3_8_21 VARCHAR(16777216),
	_3_9_21 VARCHAR(16777216),
	_3_10_21 VARCHAR(16777216),
	_3_11_21 VARCHAR(16777216),
	_3_12_21 VARCHAR(16777216),
	_3_13_21 VARCHAR(16777216),
	_3_14_21 VARCHAR(16777216),
	_3_15_21 VARCHAR(16777216),
	_3_16_21 VARCHAR(16777216),
	_3_17_21 VARCHAR(16777216),
	_3_18_21 VARCHAR(16777216),
	_3_19_21 VARCHAR(16777216),
	_3_20_21 VARCHAR(16777216),
	_3_21_21 VARCHAR(16777216),
	_3_22_21 VARCHAR(16777216),
	_3_23_21 VARCHAR(16777216),
	_3_24_21 VARCHAR(16777216),
	_3_25_21 VARCHAR(16777216),
	_3_26_21 VARCHAR(16777216),
	_3_27_21 VARCHAR(16777216),
	_3_28_21 VARCHAR(16777216),
	_3_29_21 VARCHAR(16777216),
	_3_30_21 VARCHAR(16777216),
	_3_31_21 VARCHAR(16777216),
	_4_1_21 VARCHAR(16777216),
	_4_2_21 VARCHAR(16777216),
	_4_3_21 VARCHAR(16777216),
	_4_4_21 VARCHAR(16777216),
	_4_5_21 VARCHAR(16777216),
	_4_6_21 VARCHAR(16777216),
	_4_7_21 VARCHAR(16777216),
	_4_8_21 VARCHAR(16777216),
	_4_9_21 VARCHAR(16777216),
	_4_10_21 VARCHAR(16777216),
	_4_11_21 VARCHAR(16777216),
	_4_12_21 VARCHAR(16777216),
	_4_13_21 VARCHAR(16777216),
	_4_14_21 VARCHAR(16777216),
	_4_15_21 VARCHAR(16777216),
	_4_16_21 VARCHAR(16777216),
	_4_17_21 VARCHAR(16777216),
	_4_18_21 VARCHAR(16777216),
	_4_19_21 VARCHAR(16777216),
	_4_20_21 VARCHAR(16777216),
	_4_21_21 VARCHAR(16777216),
	_4_22_21 VARCHAR(16777216),
	_4_23_21 VARCHAR(16777216),
	_4_24_21 VARCHAR(16777216),
	_4_25_21 VARCHAR(16777216),
	_4_26_21 VARCHAR(16777216),
	_4_27_21 VARCHAR(16777216),
	_4_28_21 VARCHAR(16777216),
	_4_29_21 VARCHAR(16777216),
	_4_30_21 VARCHAR(16777216),
	_5_1_21 VARCHAR(16777216),
	_5_2_21 VARCHAR(16777216),
	_5_3_21 VARCHAR(16777216),
	_5_4_21 VARCHAR(16777216),
	_5_5_21 VARCHAR(16777216),
	_5_6_21 VARCHAR(16777216),
	_5_7_21 VARCHAR(16777216),
	_5_8_21 VARCHAR(16777216),
	_5_9_21 VARCHAR(16777216),
	_5_10_21 VARCHAR(16777216),
	_5_11_21 VARCHAR(16777216),
	_5_12_21 VARCHAR(16777216),
	_5_13_21 VARCHAR(16777216),
	_5_14_21 VARCHAR(16777216),
	_5_15_21 VARCHAR(16777216),
	_5_16_21 VARCHAR(16777216),
	_5_17_21 VARCHAR(16777216),
	_5_18_21 VARCHAR(16777216),
	_5_19_21 VARCHAR(16777216),
	_5_20_21 VARCHAR(16777216),
	_5_21_21 VARCHAR(16777216),
	_5_22_21 VARCHAR(16777216),
	_5_23_21 VARCHAR(16777216),
	_5_24_21 VARCHAR(16777216),
	_5_25_21 VARCHAR(16777216),
	_5_26_21 VARCHAR(16777216),
	_5_27_21 VARCHAR(16777216),
	_5_28_21 VARCHAR(16777216),
	_5_29_21 VARCHAR(16777216),
	_5_30_21 VARCHAR(16777216),
	_5_31_21 VARCHAR(16777216),
	_6_1_21 VARCHAR(16777216),
	_6_2_21 VARCHAR(16777216),
	_6_3_21 VARCHAR(16777216),
	_6_4_21 VARCHAR(16777216),
	_6_5_21 VARCHAR(16777216),
	_6_6_21 VARCHAR(16777216),
	_6_7_21 VARCHAR(16777216),
	_6_8_21 VARCHAR(16777216),
	_6_9_21 VARCHAR(16777216),
	_6_10_21 VARCHAR(16777216),
	_6_11_21 VARCHAR(16777216),
	_6_12_21 VARCHAR(16777216),
	_6_13_21 VARCHAR(16777216),
	_6_14_21 VARCHAR(16777216),
	_6_15_21 VARCHAR(16777216),
	_6_16_21 VARCHAR(16777216),
	_6_17_21 VARCHAR(16777216),
	_6_18_21 VARCHAR(16777216),
	_6_19_21 VARCHAR(16777216),
	_6_20_21 VARCHAR(16777216),
	_6_21_21 VARCHAR(16777216),
	_6_22_21 VARCHAR(16777216),
	_6_23_21 VARCHAR(16777216),
	_6_24_21 VARCHAR(16777216),
	_6_25_21 VARCHAR(16777216),
	_6_26_21 VARCHAR(16777216),
	_6_27_21 VARCHAR(16777216),
	_6_28_21 VARCHAR(16777216),
	_6_29_21 VARCHAR(16777216),
	_6_30_21 VARCHAR(16777216),
	_7_1_21 VARCHAR(16777216),
	_7_2_21 VARCHAR(16777216),
	_7_3_21 VARCHAR(16777216),
	_7_4_21 VARCHAR(16777216),
	_7_5_21 VARCHAR(16777216),
	_7_6_21 VARCHAR(16777216),
	_7_7_21 VARCHAR(16777216),
	_7_8_21 VARCHAR(16777216),
	_7_9_21 VARCHAR(16777216),
	_7_10_21 VARCHAR(16777216),
	_7_11_21 VARCHAR(16777216),
	_7_12_21 VARCHAR(16777216),
	_7_13_21 VARCHAR(16777216),
	_7_14_21 VARCHAR(16777216),
	_7_15_21 VARCHAR(16777216),
	_7_16_21 VARCHAR(16777216),
	_7_17_21 VARCHAR(16777216),
	_7_18_21 VARCHAR(16777216),
	_7_19_21 VARCHAR(16777216),
	_7_20_21 VARCHAR(16777216),
	_7_21_21 VARCHAR(16777216),
	_7_22_21 VARCHAR(16777216),
	_7_23_21 VARCHAR(16777216),
	_7_24_21 VARCHAR(16777216),
	_7_25_21 VARCHAR(16777216),
	_7_26_21 VARCHAR(16777216),
	_7_27_21 VARCHAR(16777216),
	_7_28_21 VARCHAR(16777216),
	_7_29_21 VARCHAR(16777216),
	_7_30_21 VARCHAR(16777216),
	_7_31_21 VARCHAR(16777216),
	_8_1_21 VARCHAR(16777216),
	_8_2_21 VARCHAR(16777216),
	_8_3_21 VARCHAR(16777216),
	_8_4_21 VARCHAR(16777216),
	_8_5_21 VARCHAR(16777216),
	_8_6_21 VARCHAR(16777216),
	_8_7_21 VARCHAR(16777216),
	_8_8_21 VARCHAR(16777216),
	_8_9_21 VARCHAR(16777216),
	_8_10_21 VARCHAR(16777216),
	_8_11_21 VARCHAR(16777216),
	_8_12_21 VARCHAR(16777216),
	_8_13_21 VARCHAR(16777216),
	_8_14_21 VARCHAR(16777216),
	_8_15_21 VARCHAR(16777216),
	_8_16_21 VARCHAR(16777216),
	_8_17_21 VARCHAR(16777216),
	_8_18_21 VARCHAR(16777216),
	_8_19_21 VARCHAR(16777216),
	_8_20_21 VARCHAR(16777216),
	_8_21_21 VARCHAR(16777216),
	_8_22_21 VARCHAR(16777216),
	_8_23_21 VARCHAR(16777216),
	_8_24_21 VARCHAR(16777216),
	_8_25_21 VARCHAR(16777216),
	_8_26_21 VARCHAR(16777216),
	_8_27_21 VARCHAR(16777216),
	_8_28_21 VARCHAR(16777216),
	_8_29_21 VARCHAR(16777216),
	_8_30_21 VARCHAR(16777216),
	_8_31_21 VARCHAR(16777216),
	_9_1_21 VARCHAR(16777216),
	_9_2_21 VARCHAR(16777216),
	_9_3_21 VARCHAR(16777216),
	_9_4_21 VARCHAR(16777216),
	_9_5_21 VARCHAR(16777216),
	_9_6_21 VARCHAR(16777216),
	_9_7_21 VARCHAR(16777216),
	_9_8_21 VARCHAR(16777216),
	_9_9_21 VARCHAR(16777216),
	_9_10_21 VARCHAR(16777216),
	_9_11_21 VARCHAR(16777216),
	_9_12_21 VARCHAR(16777216),
	_9_13_21 VARCHAR(16777216),
	_9_14_21 VARCHAR(16777216),
	_9_15_21 VARCHAR(16777216),
	_9_16_21 VARCHAR(16777216),
	_9_17_21 VARCHAR(16777216),
	_9_18_21 VARCHAR(16777216),
	_9_19_21 VARCHAR(16777216),
	_9_20_21 VARCHAR(16777216),
	_9_21_21 VARCHAR(16777216),
	_9_22_21 VARCHAR(16777216),
	_9_23_21 VARCHAR(16777216),
	_9_24_21 VARCHAR(16777216),
	_9_25_21 VARCHAR(16777216),
	_9_26_21 VARCHAR(16777216),
	_9_27_21 VARCHAR(16777216),
	_9_28_21 VARCHAR(16777216),
	_9_29_21 VARCHAR(16777216),
	_9_30_21 VARCHAR(16777216),
	_10_1_21 VARCHAR(16777216),
	_10_2_21 VARCHAR(16777216),
	_10_3_21 VARCHAR(16777216),
	_10_4_21 VARCHAR(16777216),
	_10_5_21 VARCHAR(16777216),
	_10_6_21 VARCHAR(16777216),
	_10_7_21 VARCHAR(16777216),
	_10_8_21 VARCHAR(16777216),
	_10_9_21 VARCHAR(16777216),
	_10_10_21 VARCHAR(16777216),
	_10_11_21 VARCHAR(16777216),
	_10_12_21 VARCHAR(16777216),
	_10_13_21 VARCHAR(16777216),
	_10_14_21 VARCHAR(16777216),
	_10_15_21 VARCHAR(16777216),
	_10_16_21 VARCHAR(16777216),
	_10_17_21 VARCHAR(16777216),
	_10_18_21 VARCHAR(16777216),
	_10_19_21 VARCHAR(16777216),
	_10_20_21 VARCHAR(16777216),
	_10_21_21 VARCHAR(16777216),
	_10_22_21 VARCHAR(16777216),
	_10_23_21 VARCHAR(16777216),
	_10_24_21 VARCHAR(16777216),
	_10_25_21 VARCHAR(16777216),
	_10_26_21 VARCHAR(16777216),
	_10_27_21 VARCHAR(16777216),
	_10_28_21 VARCHAR(16777216),
	_10_29_21 VARCHAR(16777216),
	_10_30_21 VARCHAR(16777216),
	_10_31_21 VARCHAR(16777216),
	_11_1_21 VARCHAR(16777216),
	_11_2_21 VARCHAR(16777216),
	_11_3_21 VARCHAR(16777216),
	_11_4_21 VARCHAR(16777216),
	_11_5_21 VARCHAR(16777216),
	_11_6_21 VARCHAR(16777216),
	_11_7_21 VARCHAR(16777216),
	_11_8_21 VARCHAR(16777216),
	_11_9_21 VARCHAR(16777216),
	_11_10_21 VARCHAR(16777216),
	_11_11_21 VARCHAR(16777216),
	_11_12_21 VARCHAR(16777216),
	_11_13_21 VARCHAR(16777216),
	_11_14_21 VARCHAR(16777216),
	_11_15_21 VARCHAR(16777216),
	_11_16_21 VARCHAR(16777216),
	_11_17_21 VARCHAR(16777216),
	_11_18_21 VARCHAR(16777216),
	_11_19_21 VARCHAR(16777216),
	_11_20_21 VARCHAR(16777216),
	_11_21_21 VARCHAR(16777216),
	_11_22_21 VARCHAR(16777216),
	_11_23_21 VARCHAR(16777216),
	_11_24_21 VARCHAR(16777216),
	_11_25_21 VARCHAR(16777216),
	_11_26_21 VARCHAR(16777216),
	_11_27_21 VARCHAR(16777216),
	_11_28_21 VARCHAR(16777216),
	_11_29_21 VARCHAR(16777216),
	_11_30_21 VARCHAR(16777216),
	_12_1_21 VARCHAR(16777216),
	_12_2_21 VARCHAR(16777216),
	_12_3_21 VARCHAR(16777216),
	_12_4_21 VARCHAR(16777216),
	_12_5_21 VARCHAR(16777216),
	_12_6_21 VARCHAR(16777216),
	_12_7_21 VARCHAR(16777216),
	_12_8_21 VARCHAR(16777216),
	_12_9_21 VARCHAR(16777216),
	_12_10_21 VARCHAR(16777216),
	_12_11_21 VARCHAR(16777216),
	_12_12_21 VARCHAR(16777216),
	_12_13_21 VARCHAR(16777216),
	_12_14_21 VARCHAR(16777216),
	_12_15_21 VARCHAR(16777216),
	_12_16_21 VARCHAR(16777216),
	_12_17_21 VARCHAR(16777216),
	_12_18_21 VARCHAR(16777216),
	_12_19_21 VARCHAR(16777216),
	_12_20_21 VARCHAR(16777216),
	_12_21_21 VARCHAR(16777216),
	_12_22_21 VARCHAR(16777216),
	_12_23_21 VARCHAR(16777216),
	_12_24_21 VARCHAR(16777216),
	_12_25_21 VARCHAR(16777216),
	_12_26_21 VARCHAR(16777216),
	_12_27_21 VARCHAR(16777216),
	_12_28_21 VARCHAR(16777216),
	_12_29_21 VARCHAR(16777216),
	_12_30_21 VARCHAR(16777216),
	_12_31_21 VARCHAR(16777216),
	_1_1_22 VARCHAR(16777216),
	_1_2_22 VARCHAR(16777216),
	_1_3_22 VARCHAR(16777216),
	_1_4_22 VARCHAR(16777216),
	_1_5_22 VARCHAR(16777216),
	_1_6_22 VARCHAR(16777216),
	_1_7_22 VARCHAR(16777216),
	_1_8_22 VARCHAR(16777216),
	_1_9_22 VARCHAR(16777216),
	_1_10_22 VARCHAR(16777216),
	_1_11_22 VARCHAR(16777216),
	_1_12_22 VARCHAR(16777216),
	_1_13_22 VARCHAR(16777216),
	_1_14_22 VARCHAR(16777216),
	_1_15_22 VARCHAR(16777216),
	_1_16_22 VARCHAR(16777216),
	_1_17_22 VARCHAR(16777216),
	_1_18_22 VARCHAR(16777216),
	_1_19_22 VARCHAR(16777216),
	_1_20_22 VARCHAR(16777216),
	_1_21_22 VARCHAR(16777216),
	_1_22_22 VARCHAR(16777216),
	_1_23_22 VARCHAR(16777216),
	_1_24_22 VARCHAR(16777216),
	_1_25_22 VARCHAR(16777216),
	_1_26_22 VARCHAR(16777216),
	_1_27_22 VARCHAR(16777216),
	_1_28_22 VARCHAR(16777216),
	_1_29_22 VARCHAR(16777216),
	_1_30_22 VARCHAR(16777216),
	_1_31_22 VARCHAR(16777216),
	_2_1_22 VARCHAR(16777216),
	_2_2_22 VARCHAR(16777216),
	_2_3_22 VARCHAR(16777216),
	_2_4_22 VARCHAR(16777216),
	_2_5_22 VARCHAR(16777216),
	_2_6_22 VARCHAR(16777216),
	_2_7_22 VARCHAR(16777216),
	_2_8_22 VARCHAR(16777216),
	_2_9_22 VARCHAR(16777216),
	_2_10_22 VARCHAR(16777216),
	_2_11_22 VARCHAR(16777216),
	_2_12_22 VARCHAR(16777216),
	_2_13_22 VARCHAR(16777216),
	_2_14_22 VARCHAR(16777216),
	_2_15_22 VARCHAR(16777216),
	_2_16_22 VARCHAR(16777216),
	_2_17_22 VARCHAR(16777216),
	_2_18_22 VARCHAR(16777216),
	_2_19_22 VARCHAR(16777216),
	_2_20_22 VARCHAR(16777216),
	_2_21_22 VARCHAR(16777216),
	_2_22_22 VARCHAR(16777216),
	_2_23_22 VARCHAR(16777216),
	_2_24_22 VARCHAR(16777216),
	_2_25_22 VARCHAR(16777216),
	_2_26_22 VARCHAR(16777216),
	_2_27_22 VARCHAR(16777216),
	_2_28_22 VARCHAR(16777216),
	_3_1_22 VARCHAR(16777216),
	_3_2_22 VARCHAR(16777216),
	_3_3_22 VARCHAR(16777216),
	_3_4_22 VARCHAR(16777216),
	_3_5_22 VARCHAR(16777216),
	_3_6_22 VARCHAR(16777216),
	_3_7_22 VARCHAR(16777216),
	_3_8_22 VARCHAR(16777216),
	_3_9_22 VARCHAR(16777216),
	_3_10_22 VARCHAR(16777216),
	_3_11_22 VARCHAR(16777216),
	_3_12_22 VARCHAR(16777216),
	_3_13_22 VARCHAR(16777216),
	_3_14_22 VARCHAR(16777216),
	_3_15_22 VARCHAR(16777216),
	_3_16_22 VARCHAR(16777216),
	_3_17_22 VARCHAR(16777216),
	_3_18_22 VARCHAR(16777216),
	_3_19_22 VARCHAR(16777216),
	_3_20_22 VARCHAR(16777216),
	_3_21_22 VARCHAR(16777216),
	_3_22_22 VARCHAR(16777216),
	_3_23_22 VARCHAR(16777216),
	_3_24_22 VARCHAR(16777216),
	_3_25_22 VARCHAR(16777216),
	_3_26_22 VARCHAR(16777216),
	_3_27_22 VARCHAR(16777216),
	_3_28_22 VARCHAR(16777216),
	_3_29_22 VARCHAR(16777216),
	_3_30_22 VARCHAR(16777216),
	_3_31_22 VARCHAR(16777216),
	_4_1_22 VARCHAR(16777216),
	_4_2_22 VARCHAR(16777216),
	_4_3_22 VARCHAR(16777216),
	_4_4_22 VARCHAR(16777216),
	_4_5_22 VARCHAR(16777216),
	_4_6_22 VARCHAR(16777216),
	_4_7_22 VARCHAR(16777216),
	_4_8_22 VARCHAR(16777216),
	_4_9_22 VARCHAR(16777216),
	_4_10_22 VARCHAR(16777216),
	_4_11_22 VARCHAR(16777216),
	_4_12_22 VARCHAR(16777216),
	_4_13_22 VARCHAR(16777216),
	_4_14_22 VARCHAR(16777216),
	_4_15_22 VARCHAR(16777216),
	_4_16_22 VARCHAR(16777216),
	_4_17_22 VARCHAR(16777216),
	_4_18_22 VARCHAR(16777216),
	_4_19_22 VARCHAR(16777216),
	_4_20_22 VARCHAR(16777216),
	_4_21_22 VARCHAR(16777216),
	_4_22_22 VARCHAR(16777216),
	_4_23_22 VARCHAR(16777216),
	_4_24_22 VARCHAR(16777216),
	_4_25_22 VARCHAR(16777216),
	_4_26_22 VARCHAR(16777216),
	_4_27_22 VARCHAR(16777216),
	_4_28_22 VARCHAR(16777216),
	_4_29_22 VARCHAR(16777216),
	_4_30_22 VARCHAR(16777216),
	_5_1_22 VARCHAR(16777216),
	_5_2_22 VARCHAR(16777216),
	_5_3_22 VARCHAR(16777216),
	_5_4_22 VARCHAR(16777216),
	_5_5_22 VARCHAR(16777216),
	_5_6_22 VARCHAR(16777216),
	_5_7_22 VARCHAR(16777216),
	_5_8_22 VARCHAR(16777216),
	_5_9_22 VARCHAR(16777216),
	_5_10_22 VARCHAR(16777216),
	_5_11_22 VARCHAR(16777216),
	_5_12_22 VARCHAR(16777216),
	_5_13_22 VARCHAR(16777216),
	_5_14_22 VARCHAR(16777216),
	_5_15_22 VARCHAR(16777216),
	_5_16_22 VARCHAR(16777216),
	_5_17_22 VARCHAR(16777216),
	_5_18_22 VARCHAR(16777216),
	_5_19_22 VARCHAR(16777216),
	_5_20_22 VARCHAR(16777216),
	_5_21_22 VARCHAR(16777216),
	_5_22_22 VARCHAR(16777216),
	_5_23_22 VARCHAR(16777216),
	_5_24_22 VARCHAR(16777216),
	_5_25_22 VARCHAR(16777216),
	_5_26_22 VARCHAR(16777216),
	_5_27_22 VARCHAR(16777216),
	_5_28_22 VARCHAR(16777216),
	_5_29_22 VARCHAR(16777216),
	_5_30_22 VARCHAR(16777216),
	_5_31_22 VARCHAR(16777216),
	_6_1_22 VARCHAR(16777216),
	_6_2_22 VARCHAR(16777216),
	_6_3_22 VARCHAR(16777216),
	_6_4_22 VARCHAR(16777216),
	_6_5_22 VARCHAR(16777216),
	_6_6_22 VARCHAR(16777216),
	_6_7_22 VARCHAR(16777216),
	_6_8_22 VARCHAR(16777216),
	_6_9_22 VARCHAR(16777216),
	_6_10_22 VARCHAR(16777216),
	_6_11_22 VARCHAR(16777216),
	_6_12_22 VARCHAR(16777216),
	_6_13_22 VARCHAR(16777216),
	_6_14_22 VARCHAR(16777216),
	_6_15_22 VARCHAR(16777216),
	_6_16_22 VARCHAR(16777216),
	_6_17_22 VARCHAR(16777216),
	_6_18_22 VARCHAR(16777216),
	_6_19_22 VARCHAR(16777216),
	_6_20_22 VARCHAR(16777216),
	_6_21_22 VARCHAR(16777216),
	_6_22_22 VARCHAR(16777216),
	_6_23_22 VARCHAR(16777216),
	_6_24_22 VARCHAR(16777216),
	_6_25_22 VARCHAR(16777216),
	_6_26_22 VARCHAR(16777216),
	_6_27_22 VARCHAR(16777216),
	_6_28_22 VARCHAR(16777216),
	_6_29_22 VARCHAR(16777216),
	_6_30_22 VARCHAR(16777216),
	_7_1_22 VARCHAR(16777216),
	_7_2_22 VARCHAR(16777216),
	_7_3_22 VARCHAR(16777216),
	_7_4_22 VARCHAR(16777216),
	_7_5_22 VARCHAR(16777216),
	_7_6_22 VARCHAR(16777216),
	_7_7_22 VARCHAR(16777216),
	_7_8_22 VARCHAR(16777216),
	_7_9_22 VARCHAR(16777216),
	_7_10_22 VARCHAR(16777216),
	_7_11_22 VARCHAR(16777216),
	_7_12_22 VARCHAR(16777216),
	_7_13_22 VARCHAR(16777216),
	_7_14_22 VARCHAR(16777216),
	_7_15_22 VARCHAR(16777216),
	_7_16_22 VARCHAR(16777216),
	_7_17_22 VARCHAR(16777216),
	_7_18_22 VARCHAR(16777216),
	_7_19_22 VARCHAR(16777216),
	_7_20_22 VARCHAR(16777216),
	_7_21_22 VARCHAR(16777216),
	_7_22_22 VARCHAR(16777216),
	_7_23_22 VARCHAR(16777216),
	_7_24_22 VARCHAR(16777216),
	_7_25_22 VARCHAR(16777216),
	_7_26_22 VARCHAR(16777216),
	_7_27_22 VARCHAR(16777216),
	_7_28_22 VARCHAR(16777216),
	_7_29_22 VARCHAR(16777216),
	_7_30_22 VARCHAR(16777216),
	_7_31_22 VARCHAR(16777216),
	_8_1_22 VARCHAR(16777216),
	_8_2_22 VARCHAR(16777216),
	_8_3_22 VARCHAR(16777216),
	_8_4_22 VARCHAR(16777216),
	_8_5_22 VARCHAR(16777216),
	_8_6_22 VARCHAR(16777216),
	_8_7_22 VARCHAR(16777216),
	_8_8_22 VARCHAR(16777216),
	_8_9_22 VARCHAR(16777216),
	_8_10_22 VARCHAR(16777216),
	_8_11_22 VARCHAR(16777216),
	_8_12_22 VARCHAR(16777216),
	_8_13_22 VARCHAR(16777216),
	_8_14_22 VARCHAR(16777216),
	_8_15_22 VARCHAR(16777216),
	_8_16_22 VARCHAR(16777216),
	_8_17_22 VARCHAR(16777216),
	_8_18_22 VARCHAR(16777216),
	_8_19_22 VARCHAR(16777216),
	_8_20_22 VARCHAR(16777216),
	_8_21_22 VARCHAR(16777216),
	_8_22_22 VARCHAR(16777216),
	_8_23_22 VARCHAR(16777216),
	_8_24_22 VARCHAR(16777216),
	_8_25_22 VARCHAR(16777216),
	_8_26_22 VARCHAR(16777216),
	_8_27_22 VARCHAR(16777216),
	_8_28_22 VARCHAR(16777216),
	_8_29_22 VARCHAR(16777216),
	_8_30_22 VARCHAR(16777216),
	_8_31_22 VARCHAR(16777216),
	_9_1_22 VARCHAR(16777216),
	_9_2_22 VARCHAR(16777216),
	_9_3_22 VARCHAR(16777216),
	_9_4_22 VARCHAR(16777216),
	_9_5_22 VARCHAR(16777216),
	_9_6_22 VARCHAR(16777216),
	_9_7_22 VARCHAR(16777216),
	_9_8_22 VARCHAR(16777216),
	_9_9_22 VARCHAR(16777216),
	_9_10_22 VARCHAR(16777216),
	_9_11_22 VARCHAR(16777216),
	_9_12_22 VARCHAR(16777216),
	_9_13_22 VARCHAR(16777216),
	_9_14_22 VARCHAR(16777216),
	_9_15_22 VARCHAR(16777216),
	_9_16_22 VARCHAR(16777216),
	_9_17_22 VARCHAR(16777216),
	_9_18_22 VARCHAR(16777216),
	_9_19_22 VARCHAR(16777216),
	_9_20_22 VARCHAR(16777216),
	_9_21_22 VARCHAR(16777216),
	_9_22_22 VARCHAR(16777216),
	_9_23_22 VARCHAR(16777216),
	_9_24_22 VARCHAR(16777216),
	_9_25_22 VARCHAR(16777216),
	_9_26_22 VARCHAR(16777216),
	_9_27_22 VARCHAR(16777216),
	_9_28_22 VARCHAR(16777216),
	_9_29_22 VARCHAR(16777216),
	_9_30_22 VARCHAR(16777216),
	_10_1_22 VARCHAR(16777216),
	_10_2_22 VARCHAR(16777216),
	_10_3_22 VARCHAR(16777216),
	_10_4_22 VARCHAR(16777216),
	_10_5_22 VARCHAR(16777216),
	_10_6_22 VARCHAR(16777216),
	_10_7_22 VARCHAR(16777216),
	_10_8_22 VARCHAR(16777216),
	_10_9_22 VARCHAR(16777216),
	_10_10_22 VARCHAR(16777216),
	_10_11_22 VARCHAR(16777216),
	_10_12_22 VARCHAR(16777216),
	_10_13_22 VARCHAR(16777216),
	_10_14_22 VARCHAR(16777216),
	_10_15_22 VARCHAR(16777216),
	_10_16_22 VARCHAR(16777216),
	_10_17_22 VARCHAR(16777216),
	_10_18_22 VARCHAR(16777216),
	_10_19_22 VARCHAR(16777216),
	_10_20_22 VARCHAR(16777216),
	_10_21_22 VARCHAR(16777216),
	_10_22_22 VARCHAR(16777216),
	_10_23_22 VARCHAR(16777216),
	_10_24_22 VARCHAR(16777216),
	_10_25_22 VARCHAR(16777216),
	_10_26_22 VARCHAR(16777216),
	_10_27_22 VARCHAR(16777216),
	_10_28_22 VARCHAR(16777216),
	_10_29_22 VARCHAR(16777216),
	_10_30_22 VARCHAR(16777216),
	_10_31_22 VARCHAR(16777216),
	_11_1_22 VARCHAR(16777216),
	_11_2_22 VARCHAR(16777216),
	_11_3_22 VARCHAR(16777216),
	_11_4_22 VARCHAR(16777216),
	_11_5_22 VARCHAR(16777216),
	_11_6_22 VARCHAR(16777216),
	_11_7_22 VARCHAR(16777216),
	_11_8_22 VARCHAR(16777216),
	_11_9_22 VARCHAR(16777216),
	_11_10_22 VARCHAR(16777216),
	_11_11_22 VARCHAR(16777216),
	_11_12_22 VARCHAR(16777216),
	_11_13_22 VARCHAR(16777216),
	_11_14_22 VARCHAR(16777216),
	_11_15_22 VARCHAR(16777216),
	_11_16_22 VARCHAR(16777216),
	_11_17_22 VARCHAR(16777216),
	_11_18_22 VARCHAR(16777216),
	_11_19_22 VARCHAR(16777216),
	_11_20_22 VARCHAR(16777216),
	_11_21_22 VARCHAR(16777216),
	_11_22_22 VARCHAR(16777216),
	_11_23_22 VARCHAR(16777216),
	_11_24_22 VARCHAR(16777216),
	_11_25_22 VARCHAR(16777216),
	_11_26_22 VARCHAR(16777216),
	_11_27_22 VARCHAR(16777216),
	_11_28_22 VARCHAR(16777216),
	_11_29_22 VARCHAR(16777216),
	_11_30_22 VARCHAR(16777216),
	_12_1_22 VARCHAR(16777216),
	_12_2_22 VARCHAR(16777216),
	_12_3_22 VARCHAR(16777216),
	_12_4_22 VARCHAR(16777216),
	_12_5_22 VARCHAR(16777216),
	_12_6_22 VARCHAR(16777216),
	_12_7_22 VARCHAR(16777216),
	_12_8_22 VARCHAR(16777216),
	_12_9_22 VARCHAR(16777216),
	_12_10_22 VARCHAR(16777216),
	_12_11_22 VARCHAR(16777216),
	_12_12_22 VARCHAR(16777216),
	_12_13_22 VARCHAR(16777216),
	_12_14_22 VARCHAR(16777216),
	_12_15_22 VARCHAR(16777216),
	_12_16_22 VARCHAR(16777216),
	_12_17_22 VARCHAR(16777216),
	_12_18_22 VARCHAR(16777216),
	_12_19_22 VARCHAR(16777216),
	_12_20_22 VARCHAR(16777216),
	_12_21_22 VARCHAR(16777216),
	_12_22_22 VARCHAR(16777216),
	_12_23_22 VARCHAR(16777216),
	_12_24_22 VARCHAR(16777216),
	_12_25_22 VARCHAR(16777216),
	_12_26_22 VARCHAR(16777216),
	_12_27_22 VARCHAR(16777216),
	_12_28_22 VARCHAR(16777216),
	_12_29_22 VARCHAR(16777216),
	_12_30_22 VARCHAR(16777216),
	_12_31_22 VARCHAR(16777216),
	_1_1_23 VARCHAR(16777216),
	_1_2_23 VARCHAR(16777216),
	_1_3_23 VARCHAR(16777216),
	_1_4_23 VARCHAR(16777216),
	_1_5_23 VARCHAR(16777216),
	_1_6_23 VARCHAR(16777216),
	_1_7_23 VARCHAR(16777216),
	_1_8_23 VARCHAR(16777216),
	_1_9_23 VARCHAR(16777216),
	_1_10_23 VARCHAR(16777216),
	_1_11_23 VARCHAR(16777216),
	_1_12_23 VARCHAR(16777216),
	_1_13_23 VARCHAR(16777216),
	_1_14_23 VARCHAR(16777216),
	_1_15_23 VARCHAR(16777216),
	_1_16_23 VARCHAR(16777216),
	_1_17_23 VARCHAR(16777216),
	_1_18_23 VARCHAR(16777216),
	_1_19_23 VARCHAR(16777216),
	_1_20_23 VARCHAR(16777216),
	_1_21_23 VARCHAR(16777216),
	_1_22_23 VARCHAR(16777216),
	_1_23_23 VARCHAR(16777216),
	_1_24_23 VARCHAR(16777216),
	_1_25_23 VARCHAR(16777216),
	_1_26_23 VARCHAR(16777216),
	_1_27_23 VARCHAR(16777216),
	_1_28_23 VARCHAR(16777216),
	_1_29_23 VARCHAR(16777216),
	_1_30_23 VARCHAR(16777216),
	_1_31_23 VARCHAR(16777216),
	_2_1_23 VARCHAR(16777216),
	_2_2_23 VARCHAR(16777216),
	_2_3_23 VARCHAR(16777216),
	_2_4_23 VARCHAR(16777216),
	_2_5_23 VARCHAR(16777216),
	_2_6_23 VARCHAR(16777216),
	_2_7_23 VARCHAR(16777216),
	_2_8_23 VARCHAR(16777216),
	_2_9_23 VARCHAR(16777216),
	_2_10_23 VARCHAR(16777216),
	_2_11_23 VARCHAR(16777216),
	_2_12_23 VARCHAR(16777216),
	_2_13_23 VARCHAR(16777216),
	_2_14_23 VARCHAR(16777216),
	_2_15_23 VARCHAR(16777216),
	_2_16_23 VARCHAR(16777216),
	_2_17_23 VARCHAR(16777216),
	_2_18_23 VARCHAR(16777216),
	_2_19_23 VARCHAR(16777216),
	_2_20_23 VARCHAR(16777216),
	_2_21_23 VARCHAR(16777216),
	_2_22_23 VARCHAR(16777216),
	_2_23_23 VARCHAR(16777216),
	_2_24_23 VARCHAR(16777216),
	_2_25_23 VARCHAR(16777216),
	_2_26_23 VARCHAR(16777216),
	_2_27_23 VARCHAR(16777216),
	_2_28_23 VARCHAR(16777216),
	_3_1_23 VARCHAR(16777216),
	_3_2_23 VARCHAR(16777216),
	_3_3_23 VARCHAR(16777216),
	_3_4_23 VARCHAR(16777216),
	_3_5_23 VARCHAR(16777216),
	_3_6_23 VARCHAR(16777216),
	_3_7_23 VARCHAR(16777216),
	_3_8_23 VARCHAR(16777216),
	_3_9_23 VARCHAR(16777216)
);"

,1
table_name,DEATHS
description,
DDL,"create or replace TABLE DEATHS (
	""province_or_state"" VARCHAR(16777216),
	""country_or_region"" VARCHAR(16777216),
	""latitude"" VARCHAR(16777216),
	""longitude"" VARCHAR(16777216),
	""location_geom"" VARCHAR(16777216),
	_1_22_20 VARCHAR(16777216),
	_1_23_20 VARCHAR(16777216),
	_1_24_20 VARCHAR(16777216),
	_1_25_20 VARCHAR(16777216),
	_1_26_20 VARCHAR(16777216),
	_1_27_20 VARCHAR(16777216),
	_1_28_20 VARCHAR(16777216),
	_1_29_20 VARCHAR(16777216),
	_1_30_20 VARCHAR(16777216),
	_1_31_20 VARCHAR(16777216),
	_2_1_20 VARCHAR(16777216),
	_2_2_20 VARCHAR(16777216),
	_2_3_20 VARCHAR(16777216),
	_2_4_20 VARCHAR(16777216),
	_2_5_20 VARCHAR(16777216),
	_2_6_20 VARCHAR(16777216),
	_2_7_20 VARCHAR(16777216),
	_2_8_20 VARCHAR(16777216),
	_2_9_20 VARCHAR(16777216),
	_2_10_20 VARCHAR(16777216),
	_2_11_20 VARCHAR(16777216),
	_2_12_20 VARCHAR(16777216),
	_2_13_20 VARCHAR(16777216),
	_2_14_20 VARCHAR(16777216),
	_2_15_20 VARCHAR(16777216),
	_2_16_20 VARCHAR(16777216),
	_2_17_20 VARCHAR(16777216),
	_2_18_20 VARCHAR(16777216),
	_2_19_20 VARCHAR(16777216),
	_2_20_20 VARCHAR(16777216),
	_2_21_20 VARCHAR(16777216),
	_2_22_20 VARCHAR(16777216),
	_2_23_20 VARCHAR(16777216),
	_2_24_20 VARCHAR(16777216),
	_2_25_20 VARCHAR(16777216),
	_2_26_20 VARCHAR(16777216),
	_2_27_20 VARCHAR(16777216),
	_2_28_20 VARCHAR(16777216),
	_2_29_20 VARCHAR(16777216),
	_3_1_20 VARCHAR(16777216),
	_3_2_20 VARCHAR(16777216),
	_3_3_20 VARCHAR(16777216),
	_3_4_20 VARCHAR(16777216),
	_3_5_20 VARCHAR(16777216),
	_3_6_20 VARCHAR(16777216),
	_3_7_20 VARCHAR(16777216),
	_3_8_20 VARCHAR(16777216),
	_3_9_20 VARCHAR(16777216),
	_3_10_20 VARCHAR(16777216),
	_3_11_20 VARCHAR(16777216),
	_3_12_20 VARCHAR(16777216),
	_3_13_20 VARCHAR(16777216),
	_3_14_20 VARCHAR(16777216),
	_3_15_20 VARCHAR(16777216),
	_3_16_20 VARCHAR(16777216),
	_3_17_20 VARCHAR(16777216),
	_3_18_20 VARCHAR(16777216),
	_3_19_20 VARCHAR(16777216),
	_3_20_20 VARCHAR(16777216),
	_3_21_20 VARCHAR(16777216),
	_3_22_20 VARCHAR(16777216),
	_3_23_20 VARCHAR(16777216),
	_3_24_20 VARCHAR(16777216),
	_3_25_20 VARCHAR(16777216),
	_3_26_20 VARCHAR(16777216),
	_3_27_20 VARCHAR(16777216),
	_3_28_20 VARCHAR(16777216),
	_3_29_20 VARCHAR(16777216),
	_3_30_20 VARCHAR(16777216),
	_3_31_20 VARCHAR(16777216),
	_4_1_20 VARCHAR(16777216),
	_4_2_20 VARCHAR(16777216),
	_4_3_20 VARCHAR(16777216),
	_4_4_20 VARCHAR(16777216),
	_4_5_20 VARCHAR(16777216),
	_4_6_20 VARCHAR(16777216),
	_4_7_20 VARCHAR(16777216),
	_4_8_20 VARCHAR(16777216),
	_4_9_20 VARCHAR(16777216),
	_4_10_20 VARCHAR(16777216),
	_4_11_20 VARCHAR(16777216),
	_4_12_20 VARCHAR(16777216),
	_4_13_20 VARCHAR(16777216),
	_4_14_20 VARCHAR(16777216),
	_4_15_20 VARCHAR(16777216),
	_4_16_20 VARCHAR(16777216),
	_4_17_20 VARCHAR(16777216),
	_4_18_20 VARCHAR(16777216),
	_4_19_20 VARCHAR(16777216),
	_4_20_20 VARCHAR(16777216),
	_4_21_20 VARCHAR(16777216),
	_4_22_20 VARCHAR(16777216),
	_4_23_20 VARCHAR(16777216),
	_4_24_20 VARCHAR(16777216),
	_4_25_20 VARCHAR(16777216),
	_4_26_20 VARCHAR(16777216),
	_4_27_20 VARCHAR(16777216),
	_4_28_20 VARCHAR(16777216),
	_4_29_20 VARCHAR(16777216),
	_4_30_20 VARCHAR(16777216),
	_5_1_20 VARCHAR(16777216),
	_5_2_20 VARCHAR(16777216),
	_5_3_20 VARCHAR(16777216),
	_5_4_20 VARCHAR(16777216),
	_5_5_20 VARCHAR(16777216),
	_5_6_20 VARCHAR(16777216),
	_5_7_20 VARCHAR(16777216),
	_5_8_20 VARCHAR(16777216),
	_5_9_20 VARCHAR(16777216),
	_5_10_20 VARCHAR(16777216),
	_5_11_20 VARCHAR(16777216),
	_5_12_20 VARCHAR(16777216),
	_5_13_20 VARCHAR(16777216),
	_5_14_20 VARCHAR(16777216),
	_5_15_20 VARCHAR(16777216),
	_5_16_20 VARCHAR(16777216),
	_5_17_20 VARCHAR(16777216),
	_5_18_20 VARCHAR(16777216),
	_5_19_20 VARCHAR(16777216),
	_5_20_20 VARCHAR(16777216),
	_5_21_20 VARCHAR(16777216),
	_5_22_20 VARCHAR(16777216),
	_5_23_20 VARCHAR(16777216),
	_5_24_20 VARCHAR(16777216),
	_5_25_20 VARCHAR(16777216),
	_5_26_20 VARCHAR(16777216),
	_5_27_20 VARCHAR(16777216),
	_5_28_20 VARCHAR(16777216),
	_5_29_20 VARCHAR(16777216),
	_5_30_20 VARCHAR(16777216),
	_5_31_20 VARCHAR(16777216),
	_6_1_20 VARCHAR(16777216),
	_6_2_20 VARCHAR(16777216),
	_6_3_20 VARCHAR(16777216),
	_6_4_20 VARCHAR(16777216),
	_6_5_20 VARCHAR(16777216),
	_6_6_20 VARCHAR(16777216),
	_6_7_20 VARCHAR(16777216),
	_6_8_20 VARCHAR(16777216),
	_6_9_20 VARCHAR(16777216),
	_6_10_20 VARCHAR(16777216),
	_6_11_20 VARCHAR(16777216),
	_6_12_20 VARCHAR(16777216),
	_6_13_20 VARCHAR(16777216),
	_6_14_20 VARCHAR(16777216),
	_6_15_20 VARCHAR(16777216),
	_6_16_20 VARCHAR(16777216),
	_6_17_20 VARCHAR(16777216),
	_6_18_20 VARCHAR(16777216),
	_6_19_20 VARCHAR(16777216),
	_6_20_20 VARCHAR(16777216),
	_6_21_20 VARCHAR(16777216),
	_6_22_20 VARCHAR(16777216),
	_6_23_20 VARCHAR(16777216),
	_6_24_20 VARCHAR(16777216),
	_6_25_20 VARCHAR(16777216),
	_6_26_20 VARCHAR(16777216),
	_6_27_20 VARCHAR(16777216),
	_6_28_20 VARCHAR(16777216),
	_6_29_20 VARCHAR(16777216),
	_6_30_20 VARCHAR(16777216),
	_7_1_20 VARCHAR(16777216),
	_7_2_20 VARCHAR(16777216),
	_7_3_20 VARCHAR(16777216),
	_7_4_20 VARCHAR(16777216),
	_7_5_20 VARCHAR(16777216),
	_7_6_20 VARCHAR(16777216),
	_7_7_20 VARCHAR(16777216),
	_7_8_20 VARCHAR(16777216),
	_7_9_20 VARCHAR(16777216),
	_7_10_20 VARCHAR(16777216),
	_7_11_20 VARCHAR(16777216),
	_7_12_20 VARCHAR(16777216),
	_7_13_20 VARCHAR(16777216),
	_7_14_20 VARCHAR(16777216),
	_7_15_20 VARCHAR(16777216),
	_7_16_20 VARCHAR(16777216),
	_7_17_20 VARCHAR(16777216),
	_7_18_20 VARCHAR(16777216),
	_7_19_20 VARCHAR(16777216),
	_7_20_20 VARCHAR(16777216),
	_7_21_20 VARCHAR(16777216),
	_7_22_20 VARCHAR(16777216),
	_7_23_20 VARCHAR(16777216),
	_7_24_20 VARCHAR(16777216),
	_7_25_20 VARCHAR(16777216),
	_7_26_20 VARCHAR(16777216),
	_7_27_20 VARCHAR(16777216),
	_7_28_20 VARCHAR(16777216),
	_7_29_20 VARCHAR(16777216),
	_7_30_20 VARCHAR(16777216),
	_7_31_20 VARCHAR(16777216),
	_8_1_20 VARCHAR(16777216),
	_8_2_20 VARCHAR(16777216),
	_8_3_20 VARCHAR(16777216),
	_8_4_20 VARCHAR(16777216),
	_8_5_20 VARCHAR(16777216),
	_8_6_20 VARCHAR(16777216),
	_8_7_20 VARCHAR(16777216),
	_8_8_20 VARCHAR(16777216),
	_8_9_20 VARCHAR(16777216),
	_8_10_20 VARCHAR(16777216),
	_8_11_20 VARCHAR(16777216),
	_8_12_20 VARCHAR(16777216),
	_8_13_20 VARCHAR(16777216),
	_8_14_20 VARCHAR(16777216),
	_8_15_20 VARCHAR(16777216),
	_8_16_20 VARCHAR(16777216),
	_8_17_20 VARCHAR(16777216),
	_8_18_20 VARCHAR(16777216),
	_8_19_20 VARCHAR(16777216),
	_8_20_20 VARCHAR(16777216),
	_8_21_20 VARCHAR(16777216),
	_8_22_20 VARCHAR(16777216),
	_8_23_20 VARCHAR(16777216),
	_8_24_20 VARCHAR(16777216),
	_8_25_20 VARCHAR(16777216),
	_8_26_20 VARCHAR(16777216),
	_8_27_20 VARCHAR(16777216),
	_8_28_20 VARCHAR(16777216),
	_8_29_20 VARCHAR(16777216),
	_8_30_20 VARCHAR(16777216),
	_8_31_20 VARCHAR(16777216),
	_9_1_20 VARCHAR(16777216),
	_9_2_20 VARCHAR(16777216),
	_9_3_20 VARCHAR(16777216),
	_9_4_20 VARCHAR(16777216),
	_9_5_20 VARCHAR(16777216),
	_9_6_20 VARCHAR(16777216),
	_9_7_20 VARCHAR(16777216),
	_9_8_20 VARCHAR(16777216),
	_9_9_20 VARCHAR(16777216),
	_9_10_20 VARCHAR(16777216),
	_9_11_20 VARCHAR(16777216),
	_9_12_20 VARCHAR(16777216),
	_9_13_20 VARCHAR(16777216),
	_9_14_20 VARCHAR(16777216),
	_9_15_20 VARCHAR(16777216),
	_9_16_20 VARCHAR(16777216),
	_9_17_20 VARCHAR(16777216),
	_9_18_20 VARCHAR(16777216),
	_9_19_20 VARCHAR(16777216),
	_9_20_20 VARCHAR(16777216),
	_9_21_20 VARCHAR(16777216),
	_9_22_20 VARCHAR(16777216),
	_9_23_20 VARCHAR(16777216),
	_9_24_20 VARCHAR(16777216),
	_9_25_20 VARCHAR(16777216),
	_9_26_20 VARCHAR(16777216),
	_9_27_20 VARCHAR(16777216),
	_9_28_20 VARCHAR(16777216),
	_9_29_20 VARCHAR(16777216),
	_9_30_20 VARCHAR(16777216),
	_10_1_20 VARCHAR(16777216),
	_10_2_20 VARCHAR(16777216),
	_10_3_20 VARCHAR(16777216),
	_10_4_20 VARCHAR(16777216),
	_10_5_20 VARCHAR(16777216),
	_10_6_20 VARCHAR(16777216),
	_10_7_20 VARCHAR(16777216),
	_10_8_20 VARCHAR(16777216),
	_10_9_20 VARCHAR(16777216),
	_10_10_20 VARCHAR(16777216),
	_10_11_20 VARCHAR(16777216),
	_10_12_20 VARCHAR(16777216),
	_10_13_20 VARCHAR(16777216),
	_10_14_20 VARCHAR(16777216),
	_10_15_20 VARCHAR(16777216),
	_10_16_20 VARCHAR(16777216),
	_10_17_20 VARCHAR(16777216),
	_10_18_20 VARCHAR(16777216),
	_10_19_20 VARCHAR(16777216),
	_10_20_20 VARCHAR(16777216),
	_10_21_20 VARCHAR(16777216),
	_10_22_20 VARCHAR(16777216),
	_10_23_20 VARCHAR(16777216),
	_10_24_20 VARCHAR(16777216),
	_10_25_20 VARCHAR(16777216),
	_10_26_20 VARCHAR(16777216),
	_10_27_20 VARCHAR(16777216),
	_10_28_20 VARCHAR(16777216),
	_10_29_20 VARCHAR(16777216),
	_10_30_20 VARCHAR(16777216),
	_10_31_20 VARCHAR(16777216),
	_11_1_20 VARCHAR(16777216),
	_11_2_20 VARCHAR(16777216),
	_11_3_20 VARCHAR(16777216),
	_11_4_20 VARCHAR(16777216),
	_11_5_20 VARCHAR(16777216),
	_11_6_20 VARCHAR(16777216),
	_11_7_20 VARCHAR(16777216),
	_11_8_20 VARCHAR(16777216),
	_11_9_20 VARCHAR(16777216),
	_11_10_20 VARCHAR(16777216),
	_11_11_20 VARCHAR(16777216),
	_11_12_20 VARCHAR(16777216),
	_11_13_20 VARCHAR(16777216),
	_11_14_20 VARCHAR(16777216),
	_11_15_20 VARCHAR(16777216),
	_11_16_20 VARCHAR(16777216),
	_11_17_20 VARCHAR(16777216),
	_11_18_20 VARCHAR(16777216),
	_11_19_20 VARCHAR(16777216),
	_11_20_20 VARCHAR(16777216),
	_11_21_20 VARCHAR(16777216),
	_11_22_20 VARCHAR(16777216),
	_11_23_20 VARCHAR(16777216),
	_11_24_20 VARCHAR(16777216),
	_11_25_20 VARCHAR(16777216),
	_11_26_20 VARCHAR(16777216),
	_11_27_20 VARCHAR(16777216),
	_11_28_20 VARCHAR(16777216),
	_11_29_20 VARCHAR(16777216),
	_11_30_20 VARCHAR(16777216),
	_12_1_20 VARCHAR(16777216),
	_12_2_20 VARCHAR(16777216),
	_12_3_20 VARCHAR(16777216),
	_12_4_20 VARCHAR(16777216),
	_12_5_20 VARCHAR(16777216),
	_12_6_20 VARCHAR(16777216),
	_12_7_20 VARCHAR(16777216),
	_12_8_20 VARCHAR(16777216),
	_12_9_20 VARCHAR(16777216),
	_12_10_20 VARCHAR(16777216),
	_12_11_20 VARCHAR(16777216),
	_12_12_20 VARCHAR(16777216),
	_12_13_20 VARCHAR(16777216),
	_12_14_20 VARCHAR(16777216),
	_12_15_20 VARCHAR(16777216),
	_12_16_20 VARCHAR(16777216),
	_12_17_20 VARCHAR(16777216),
	_12_18_20 VARCHAR(16777216),
	_12_19_20 VARCHAR(16777216),
	_12_20_20 VARCHAR(16777216),
	_12_21_20 VARCHAR(16777216),
	_12_22_20 VARCHAR(16777216),
	_12_23_20 VARCHAR(16777216),
	_12_24_20 VARCHAR(16777216),
	_12_25_20 VARCHAR(16777216),
	_12_26_20 VARCHAR(16777216),
	_12_27_20 VARCHAR(16777216),
	_12_28_20 VARCHAR(16777216),
	_12_29_20 VARCHAR(16777216),
	_12_30_20 VARCHAR(16777216),
	_12_31_20 VARCHAR(16777216),
	_1_1_21 VARCHAR(16777216),
	_1_2_21 VARCHAR(16777216),
	_1_3_21 VARCHAR(16777216),
	_1_4_21 VARCHAR(16777216),
	_1_5_21 VARCHAR(16777216),
	_1_6_21 VARCHAR(16777216),
	_1_7_21 VARCHAR(16777216),
	_1_8_21 VARCHAR(16777216),
	_1_9_21 VARCHAR(16777216),
	_1_10_21 VARCHAR(16777216),
	_1_11_21 VARCHAR(16777216),
	_1_12_21 VARCHAR(16777216),
	_1_13_21 VARCHAR(16777216),
	_1_14_21 VARCHAR(16777216),
	_1_15_21 VARCHAR(16777216),
	_1_16_21 VARCHAR(16777216),
	_1_17_21 VARCHAR(16777216),
	_1_18_21 VARCHAR(16777216),
	_1_19_21 VARCHAR(16777216),
	_1_20_21 VARCHAR(16777216),
	_1_21_21 VARCHAR(16777216),
	_1_22_21 VARCHAR(16777216),
	_1_23_21 VARCHAR(16777216),
	_1_24_21 VARCHAR(16777216),
	_1_25_21 VARCHAR(16777216),
	_1_26_21 VARCHAR(16777216),
	_1_27_21 VARCHAR(16777216),
	_1_28_21 VARCHAR(16777216),
	_1_29_21 VARCHAR(16777216),
	_1_30_21 VARCHAR(16777216),
	_1_31_21 VARCHAR(16777216),
	_2_1_21 VARCHAR(16777216),
	_2_2_21 VARCHAR(16777216),
	_2_3_21 VARCHAR(16777216),
	_2_4_21 VARCHAR(16777216),
	_2_5_21 VARCHAR(16777216),
	_2_6_21 VARCHAR(16777216),
	_2_7_21 VARCHAR(16777216),
	_2_8_21 VARCHAR(16777216),
	_2_9_21 VARCHAR(16777216),
	_2_10_21 VARCHAR(16777216),
	_2_11_21 VARCHAR(16777216),
	_2_12_21 VARCHAR(16777216),
	_2_13_21 VARCHAR(16777216),
	_2_14_21 VARCHAR(16777216),
	_2_15_21 VARCHAR(16777216),
	_2_16_21 VARCHAR(16777216),
	_2_17_21 VARCHAR(16777216),
	_2_18_21 VARCHAR(16777216),
	_2_19_21 VARCHAR(16777216),
	_2_20_21 VARCHAR(16777216),
	_2_21_21 VARCHAR(16777216),
	_2_22_21 VARCHAR(16777216),
	_2_23_21 VARCHAR(16777216),
	_2_24_21 VARCHAR(16777216),
	_2_25_21 VARCHAR(16777216),
	_2_26_21 VARCHAR(16777216),
	_2_27_21 VARCHAR(16777216),
	_2_28_21 VARCHAR(16777216),
	_3_1_21 VARCHAR(16777216),
	_3_2_21 VARCHAR(16777216),
	_3_3_21 VARCHAR(16777216),
	_3_4_21 VARCHAR(16777216),
	_3_5_21 VARCHAR(16777216),
	_3_6_21 VARCHAR(16777216),
	_3_7_21 VARCHAR(16777216),
	_3_8_21 VARCHAR(16777216),
	_3_9_21 VARCHAR(16777216),
	_3_10_21 VARCHAR(16777216),
	_3_11_21 VARCHAR(16777216),
	_3_12_21 VARCHAR(16777216),
	_3_13_21 VARCHAR(16777216),
	_3_14_21 VARCHAR(16777216),
	_3_15_21 VARCHAR(16777216),
	_3_16_21 VARCHAR(16777216),
	_3_17_21 VARCHAR(16777216),
	_3_18_21 VARCHAR(16777216),
	_3_19_21 VARCHAR(16777216),
	_3_20_21 VARCHAR(16777216),
	_3_21_21 VARCHAR(16777216),
	_3_22_21 VARCHAR(16777216),
	_3_23_21 VARCHAR(16777216),
	_3_24_21 VARCHAR(16777216),
	_3_25_21 VARCHAR(16777216),
	_3_26_21 VARCHAR(16777216),
	_3_27_21 VARCHAR(16777216),
	_3_28_21 VARCHAR(16777216),
	_3_29_21 VARCHAR(16777216),
	_3_30_21 VARCHAR(16777216),
	_3_31_21 VARCHAR(16777216),
	_4_1_21 VARCHAR(16777216),
	_4_2_21 VARCHAR(16777216),
	_4_3_21 VARCHAR(16777216),
	_4_4_21 VARCHAR(16777216),
	_4_5_21 VARCHAR(16777216),
	_4_6_21 VARCHAR(16777216),
	_4_7_21 VARCHAR(16777216),
	_4_8_21 VARCHAR(16777216),
	_4_9_21 VARCHAR(16777216),
	_4_10_21 VARCHAR(16777216),
	_4_11_21 VARCHAR(16777216),
	_4_12_21 VARCHAR(16777216),
	_4_13_21 VARCHAR(16777216),
	_4_14_21 VARCHAR(16777216),
	_4_15_21 VARCHAR(16777216),
	_4_16_21 VARCHAR(16777216),
	_4_17_21 VARCHAR(16777216),
	_4_18_21 VARCHAR(16777216),
	_4_19_21 VARCHAR(16777216),
	_4_20_21 VARCHAR(16777216),
	_4_21_21 VARCHAR(16777216),
	_4_22_21 VARCHAR(16777216),
	_4_23_21 VARCHAR(16777216),
	_4_24_21 VARCHAR(16777216),
	_4_25_21 VARCHAR(16777216),
	_4_26_21 VARCHAR(16777216),
	_4_27_21 VARCHAR(16777216),
	_4_28_21 VARCHAR(16777216),
	_4_29_21 VARCHAR(16777216),
	_4_30_21 VARCHAR(16777216),
	_5_1_21 VARCHAR(16777216),
	_5_2_21 VARCHAR(16777216),
	_5_3_21 VARCHAR(16777216),
	_5_4_21 VARCHAR(16777216),
	_5_5_21 VARCHAR(16777216),
	_5_6_21 VARCHAR(16777216),
	_5_7_21 VARCHAR(16777216),
	_5_8_21 VARCHAR(16777216),
	_5_9_21 VARCHAR(16777216),
	_5_10_21 VARCHAR(16777216),
	_5_11_21 VARCHAR(16777216),
	_5_12_21 VARCHAR(16777216),
	_5_13_21 VARCHAR(16777216),
	_5_14_21 VARCHAR(16777216),
	_5_15_21 VARCHAR(16777216),
	_5_16_21 VARCHAR(16777216),
	_5_17_21 VARCHAR(16777216),
	_5_18_21 VARCHAR(16777216),
	_5_19_21 VARCHAR(16777216),
	_5_20_21 VARCHAR(16777216),
	_5_21_21 VARCHAR(16777216),
	_5_22_21 VARCHAR(16777216),
	_5_23_21 VARCHAR(16777216),
	_5_24_21 VARCHAR(16777216),
	_5_25_21 VARCHAR(16777216),
	_5_26_21 VARCHAR(16777216),
	_5_27_21 VARCHAR(16777216),
	_5_28_21 VARCHAR(16777216),
	_5_29_21 VARCHAR(16777216),
	_5_30_21 VARCHAR(16777216),
	_5_31_21 VARCHAR(16777216),
	_6_1_21 VARCHAR(16777216),
	_6_2_21 VARCHAR(16777216),
	_6_3_21 VARCHAR(16777216),
	_6_4_21 VARCHAR(16777216),
	_6_5_21 VARCHAR(16777216),
	_6_6_21 VARCHAR(16777216),
	_6_7_21 VARCHAR(16777216),
	_6_8_21 VARCHAR(16777216),
	_6_9_21 VARCHAR(16777216),
	_6_10_21 VARCHAR(16777216),
	_6_11_21 VARCHAR(16777216),
	_6_12_21 VARCHAR(16777216),
	_6_13_21 VARCHAR(16777216),
	_6_14_21 VARCHAR(16777216),
	_6_15_21 VARCHAR(16777216),
	_6_16_21 VARCHAR(16777216),
	_6_17_21 VARCHAR(16777216),
	_6_18_21 VARCHAR(16777216),
	_6_19_21 VARCHAR(16777216),
	_6_20_21 VARCHAR(16777216),
	_6_21_21 VARCHAR(16777216),
	_6_22_21 VARCHAR(16777216),
	_6_23_21 VARCHAR(16777216),
	_6_24_21 VARCHAR(16777216),
	_6_25_21 VARCHAR(16777216),
	_6_26_21 VARCHAR(16777216),
	_6_27_21 VARCHAR(16777216),
	_6_28_21 VARCHAR(16777216),
	_6_29_21 VARCHAR(16777216),
	_6_30_21 VARCHAR(16777216),
	_7_1_21 VARCHAR(16777216),
	_7_2_21 VARCHAR(16777216),
	_7_3_21 VARCHAR(16777216),
	_7_4_21 VARCHAR(16777216),
	_7_5_21 VARCHAR(16777216),
	_7_6_21 VARCHAR(16777216),
	_7_7_21 VARCHAR(16777216),
	_7_8_21 VARCHAR(16777216),
	_7_9_21 VARCHAR(16777216),
	_7_10_21 VARCHAR(16777216),
	_7_11_21 VARCHAR(16777216),
	_7_12_21 VARCHAR(16777216),
	_7_13_21 VARCHAR(16777216),
	_7_14_21 VARCHAR(16777216),
	_7_15_21 VARCHAR(16777216),
	_7_16_21 VARCHAR(16777216),
	_7_17_21 VARCHAR(16777216),
	_7_18_21 VARCHAR(16777216),
	_7_19_21 VARCHAR(16777216),
	_7_20_21 VARCHAR(16777216),
	_7_21_21 VARCHAR(16777216),
	_7_22_21 VARCHAR(16777216),
	_7_23_21 VARCHAR(16777216),
	_7_24_21 VARCHAR(16777216),
	_7_25_21 VARCHAR(16777216),
	_7_26_21 VARCHAR(16777216),
	_7_27_21 VARCHAR(16777216),
	_7_28_21 VARCHAR(16777216),
	_7_29_21 VARCHAR(16777216),
	_7_30_21 VARCHAR(16777216),
	_7_31_21 VARCHAR(16777216),
	_8_1_21 VARCHAR(16777216),
	_8_2_21 VARCHAR(16777216),
	_8_3_21 VARCHAR(16777216),
	_8_4_21 VARCHAR(16777216),
	_8_5_21 VARCHAR(16777216),
	_8_6_21 VARCHAR(16777216),
	_8_7_21 VARCHAR(16777216),
	_8_8_21 VARCHAR(16777216),
	_8_9_21 VARCHAR(16777216),
	_8_10_21 VARCHAR(16777216),
	_8_11_21 VARCHAR(16777216),
	_8_12_21 VARCHAR(16777216),
	_8_13_21 VARCHAR(16777216),
	_8_14_21 VARCHAR(16777216),
	_8_15_21 VARCHAR(16777216),
	_8_16_21 VARCHAR(16777216),
	_8_17_21 VARCHAR(16777216),
	_8_18_21 VARCHAR(16777216),
	_8_19_21 VARCHAR(16777216),
	_8_20_21 VARCHAR(16777216),
	_8_21_21 VARCHAR(16777216),
	_8_22_21 VARCHAR(16777216),
	_8_23_21 VARCHAR(16777216),
	_8_24_21 VARCHAR(16777216),
	_8_25_21 VARCHAR(16777216),
	_8_26_21 VARCHAR(16777216),
	_8_27_21 VARCHAR(16777216),
	_8_28_21 VARCHAR(16777216),
	_8_29_21 VARCHAR(16777216),
	_8_30_21 VARCHAR(16777216),
	_8_31_21 VARCHAR(16777216),
	_9_1_21 VARCHAR(16777216),
	_9_2_21 VARCHAR(16777216),
	_9_3_21 VARCHAR(16777216),
	_9_4_21 VARCHAR(16777216),
	_9_5_21 VARCHAR(16777216),
	_9_6_21 VARCHAR(16777216),
	_9_7_21 VARCHAR(16777216),
	_9_8_21 VARCHAR(16777216),
	_9_9_21 VARCHAR(16777216),
	_9_10_21 VARCHAR(16777216),
	_9_11_21 VARCHAR(16777216),
	_9_12_21 VARCHAR(16777216),
	_9_13_21 VARCHAR(16777216),
	_9_14_21 VARCHAR(16777216),
	_9_15_21 VARCHAR(16777216),
	_9_16_21 VARCHAR(16777216),
	_9_17_21 VARCHAR(16777216),
	_9_18_21 VARCHAR(16777216),
	_9_19_21 VARCHAR(16777216),
	_9_20_21 VARCHAR(16777216),
	_9_21_21 VARCHAR(16777216),
	_9_22_21 VARCHAR(16777216),
	_9_23_21 VARCHAR(16777216),
	_9_24_21 VARCHAR(16777216),
	_9_25_21 VARCHAR(16777216),
	_9_26_21 VARCHAR(16777216),
	_9_27_21 VARCHAR(16777216),
	_9_28_21 VARCHAR(16777216),
	_9_29_21 VARCHAR(16777216),
	_9_30_21 VARCHAR(16777216),
	_10_1_21 VARCHAR(16777216),
	_10_2_21 VARCHAR(16777216),
	_10_3_21 VARCHAR(16777216),
	_10_4_21 VARCHAR(16777216),
	_10_5_21 VARCHAR(16777216),
	_10_6_21 VARCHAR(16777216),
	_10_7_21 VARCHAR(16777216),
	_10_8_21 VARCHAR(16777216),
	_10_9_21 VARCHAR(16777216),
	_10_10_21 VARCHAR(16777216),
	_10_11_21 VARCHAR(16777216),
	_10_12_21 VARCHAR(16777216),
	_10_13_21 VARCHAR(16777216),
	_10_14_21 VARCHAR(16777216),
	_10_15_21 VARCHAR(16777216),
	_10_16_21 VARCHAR(16777216),
	_10_17_21 VARCHAR(16777216),
	_10_18_21 VARCHAR(16777216),
	_10_19_21 VARCHAR(16777216),
	_10_20_21 VARCHAR(16777216),
	_10_21_21 VARCHAR(16777216),
	_10_22_21 VARCHAR(16777216),
	_10_23_21 VARCHAR(16777216),
	_10_24_21 VARCHAR(16777216),
	_10_25_21 VARCHAR(16777216),
	_10_26_21 VARCHAR(16777216),
	_10_27_21 VARCHAR(16777216),
	_10_28_21 VARCHAR(16777216),
	_10_29_21 VARCHAR(16777216),
	_10_30_21 VARCHAR(16777216),
	_10_31_21 VARCHAR(16777216),
	_11_1_21 VARCHAR(16777216),
	_11_2_21 VARCHAR(16777216),
	_11_3_21 VARCHAR(16777216),
	_11_4_21 VARCHAR(16777216),
	_11_5_21 VARCHAR(16777216),
	_11_6_21 VARCHAR(16777216),
	_11_7_21 VARCHAR(16777216),
	_11_8_21 VARCHAR(16777216),
	_11_9_21 VARCHAR(16777216),
	_11_10_21 VARCHAR(16777216),
	_11_11_21 VARCHAR(16777216),
	_11_12_21 VARCHAR(16777216),
	_11_13_21 VARCHAR(16777216),
	_11_14_21 VARCHAR(16777216),
	_11_15_21 VARCHAR(16777216),
	_11_16_21 VARCHAR(16777216),
	_11_17_21 VARCHAR(16777216),
	_11_18_21 VARCHAR(16777216),
	_11_19_21 VARCHAR(16777216),
	_11_20_21 VARCHAR(16777216),
	_11_21_21 VARCHAR(16777216),
	_11_22_21 VARCHAR(16777216),
	_11_23_21 VARCHAR(16777216),
	_11_24_21 VARCHAR(16777216),
	_11_25_21 VARCHAR(16777216),
	_11_26_21 VARCHAR(16777216),
	_11_27_21 VARCHAR(16777216),
	_11_28_21 VARCHAR(16777216),
	_11_29_21 VARCHAR(16777216),
	_11_30_21 VARCHAR(16777216),
	_12_1_21 VARCHAR(16777216),
	_12_2_21 VARCHAR(16777216),
	_12_3_21 VARCHAR(16777216),
	_12_4_21 VARCHAR(16777216),
	_12_5_21 VARCHAR(16777216),
	_12_6_21 VARCHAR(16777216),
	_12_7_21 VARCHAR(16777216),
	_12_8_21 VARCHAR(16777216),
	_12_9_21 VARCHAR(16777216),
	_12_10_21 VARCHAR(16777216),
	_12_11_21 VARCHAR(16777216),
	_12_12_21 VARCHAR(16777216),
	_12_13_21 VARCHAR(16777216),
	_12_14_21 VARCHAR(16777216),
	_12_15_21 VARCHAR(16777216),
	_12_16_21 VARCHAR(16777216),
	_12_17_21 VARCHAR(16777216),
	_12_18_21 VARCHAR(16777216),
	_12_19_21 VARCHAR(16777216),
	_12_20_21 VARCHAR(16777216),
	_12_21_21 VARCHAR(16777216),
	_12_22_21 VARCHAR(16777216),
	_12_23_21 VARCHAR(16777216),
	_12_24_21 VARCHAR(16777216),
	_12_25_21 VARCHAR(16777216),
	_12_26_21 VARCHAR(16777216),
	_12_27_21 VARCHAR(16777216),
	_12_28_21 VARCHAR(16777216),
	_12_29_21 VARCHAR(16777216),
	_12_30_21 VARCHAR(16777216),
	_12_31_21 VARCHAR(16777216),
	_1_1_22 VARCHAR(16777216),
	_1_2_22 VARCHAR(16777216),
	_1_3_22 VARCHAR(16777216),
	_1_4_22 VARCHAR(16777216),
	_1_5_22 VARCHAR(16777216),
	_1_6_22 VARCHAR(16777216),
	_1_7_22 VARCHAR(16777216),
	_1_8_22 VARCHAR(16777216),
	_1_9_22 VARCHAR(16777216),
	_1_10_22 VARCHAR(16777216),
	_1_11_22 VARCHAR(16777216),
	_1_12_22 VARCHAR(16777216),
	_1_13_22 VARCHAR(16777216),
	_1_14_22 VARCHAR(16777216),
	_1_15_22 VARCHAR(16777216),
	_1_16_22 VARCHAR(16777216),
	_1_17_22 VARCHAR(16777216),
	_1_18_22 VARCHAR(16777216),
	_1_19_22 VARCHAR(16777216),
	_1_20_22 VARCHAR(16777216),
	_1_21_22 VARCHAR(16777216),
	_1_22_22 VARCHAR(16777216),
	_1_23_22 VARCHAR(16777216),
	_1_24_22 VARCHAR(16777216),
	_1_25_22 VARCHAR(16777216),
	_1_26_22 VARCHAR(16777216),
	_1_27_22 VARCHAR(16777216),
	_1_28_22 VARCHAR(16777216),
	_1_29_22 VARCHAR(16777216),
	_1_30_22 VARCHAR(16777216),
	_1_31_22 VARCHAR(16777216),
	_2_1_22 VARCHAR(16777216),
	_2_2_22 VARCHAR(16777216),
	_2_3_22 VARCHAR(16777216),
	_2_4_22 VARCHAR(16777216),
	_2_5_22 VARCHAR(16777216),
	_2_6_22 VARCHAR(16777216),
	_2_7_22 VARCHAR(16777216),
	_2_8_22 VARCHAR(16777216),
	_2_9_22 VARCHAR(16777216),
	_2_10_22 VARCHAR(16777216),
	_2_11_22 VARCHAR(16777216),
	_2_12_22 VARCHAR(16777216),
	_2_13_22 VARCHAR(16777216),
	_2_14_22 VARCHAR(16777216),
	_2_15_22 VARCHAR(16777216),
	_2_16_22 VARCHAR(16777216),
	_2_17_22 VARCHAR(16777216),
	_2_18_22 VARCHAR(16777216),
	_2_19_22 VARCHAR(16777216),
	_2_20_22 VARCHAR(16777216),
	_2_21_22 VARCHAR(16777216),
	_2_22_22 VARCHAR(16777216),
	_2_23_22 VARCHAR(16777216),
	_2_24_22 VARCHAR(16777216),
	_2_25_22 VARCHAR(16777216),
	_2_26_22 VARCHAR(16777216),
	_2_27_22 VARCHAR(16777216),
	_2_28_22 VARCHAR(16777216),
	_3_1_22 VARCHAR(16777216),
	_3_2_22 VARCHAR(16777216),
	_3_3_22 VARCHAR(16777216),
	_3_4_22 VARCHAR(16777216),
	_3_5_22 VARCHAR(16777216),
	_3_6_22 VARCHAR(16777216),
	_3_7_22 VARCHAR(16777216),
	_3_8_22 VARCHAR(16777216),
	_3_9_22 VARCHAR(16777216),
	_3_10_22 VARCHAR(16777216),
	_3_11_22 VARCHAR(16777216),
	_3_12_22 VARCHAR(16777216),
	_3_13_22 VARCHAR(16777216),
	_3_14_22 VARCHAR(16777216),
	_3_15_22 VARCHAR(16777216),
	_3_16_22 VARCHAR(16777216),
	_3_17_22 VARCHAR(16777216),
	_3_18_22 VARCHAR(16777216),
	_3_19_22 VARCHAR(16777216),
	_3_20_22 VARCHAR(16777216),
	_3_21_22 VARCHAR(16777216),
	_3_22_22 VARCHAR(16777216),
	_3_23_22 VARCHAR(16777216),
	_3_24_22 VARCHAR(16777216),
	_3_25_22 VARCHAR(16777216),
	_3_26_22 VARCHAR(16777216),
	_3_27_22 VARCHAR(16777216),
	_3_28_22 VARCHAR(16777216),
	_3_29_22 VARCHAR(16777216),
	_3_30_22 VARCHAR(16777216),
	_3_31_22 VARCHAR(16777216),
	_4_1_22 VARCHAR(16777216),
	_4_2_22 VARCHAR(16777216),
	_4_3_22 VARCHAR(16777216),
	_4_4_22 VARCHAR(16777216),
	_4_5_22 VARCHAR(16777216),
	_4_6_22 VARCHAR(16777216),
	_4_7_22 VARCHAR(16777216),
	_4_8_22 VARCHAR(16777216),
	_4_9_22 VARCHAR(16777216),
	_4_10_22 VARCHAR(16777216),
	_4_11_22 VARCHAR(16777216),
	_4_12_22 VARCHAR(16777216),
	_4_13_22 VARCHAR(16777216),
	_4_14_22 VARCHAR(16777216),
	_4_15_22 VARCHAR(16777216),
	_4_16_22 VARCHAR(16777216),
	_4_17_22 VARCHAR(16777216),
	_4_18_22 VARCHAR(16777216),
	_4_19_22 VARCHAR(16777216),
	_4_20_22 VARCHAR(16777216),
	_4_21_22 VARCHAR(16777216),
	_4_22_22 VARCHAR(16777216),
	_4_23_22 VARCHAR(16777216),
	_4_24_22 VARCHAR(16777216),
	_4_25_22 VARCHAR(16777216),
	_4_26_22 VARCHAR(16777216),
	_4_27_22 VARCHAR(16777216),
	_4_28_22 VARCHAR(16777216),
	_4_29_22 VARCHAR(16777216),
	_4_30_22 VARCHAR(16777216),
	_5_1_22 VARCHAR(16777216),
	_5_2_22 VARCHAR(16777216),
	_5_3_22 VARCHAR(16777216),
	_5_4_22 VARCHAR(16777216),
	_5_5_22 VARCHAR(16777216),
	_5_6_22 VARCHAR(16777216),
	_5_7_22 VARCHAR(16777216),
	_5_8_22 VARCHAR(16777216),
	_5_9_22 VARCHAR(16777216),
	_5_10_22 VARCHAR(16777216),
	_5_11_22 VARCHAR(16777216),
	_5_12_22 VARCHAR(16777216),
	_5_13_22 VARCHAR(16777216),
	_5_14_22 VARCHAR(16777216),
	_5_15_22 VARCHAR(16777216),
	_5_16_22 VARCHAR(16777216),
	_5_17_22 VARCHAR(16777216),
	_5_18_22 VARCHAR(16777216),
	_5_19_22 VARCHAR(16777216),
	_5_20_22 VARCHAR(16777216),
	_5_21_22 VARCHAR(16777216),
	_5_22_22 VARCHAR(16777216),
	_5_23_22 VARCHAR(16777216),
	_5_24_22 VARCHAR(16777216),
	_5_25_22 VARCHAR(16777216),
	_5_26_22 VARCHAR(16777216),
	_5_27_22 VARCHAR(16777216),
	_5_28_22 VARCHAR(16777216),
	_5_29_22 VARCHAR(16777216),
	_5_30_22 VARCHAR(16777216),
	_5_31_22 VARCHAR(16777216),
	_6_1_22 VARCHAR(16777216),
	_6_2_22 VARCHAR(16777216),
	_6_3_22 VARCHAR(16777216),
	_6_4_22 VARCHAR(16777216),
	_6_5_22 VARCHAR(16777216),
	_6_6_22 VARCHAR(16777216),
	_6_7_22 VARCHAR(16777216),
	_6_8_22 VARCHAR(16777216),
	_6_9_22 VARCHAR(16777216),
	_6_10_22 VARCHAR(16777216),
	_6_11_22 VARCHAR(16777216),
	_6_12_22 VARCHAR(16777216),
	_6_13_22 VARCHAR(16777216),
	_6_14_22 VARCHAR(16777216),
	_6_15_22 VARCHAR(16777216),
	_6_16_22 VARCHAR(16777216),
	_6_17_22 VARCHAR(16777216),
	_6_18_22 VARCHAR(16777216),
	_6_19_22 VARCHAR(16777216),
	_6_20_22 VARCHAR(16777216),
	_6_21_22 VARCHAR(16777216),
	_6_22_22 VARCHAR(16777216),
	_6_23_22 VARCHAR(16777216),
	_6_24_22 VARCHAR(16777216),
	_6_25_22 VARCHAR(16777216),
	_6_26_22 VARCHAR(16777216),
	_6_27_22 VARCHAR(16777216),
	_6_28_22 VARCHAR(16777216),
	_6_29_22 VARCHAR(16777216),
	_6_30_22 VARCHAR(16777216),
	_7_1_22 VARCHAR(16777216),
	_7_2_22 VARCHAR(16777216),
	_7_3_22 VARCHAR(16777216),
	_7_4_22 VARCHAR(16777216),
	_7_5_22 VARCHAR(16777216),
	_7_6_22 VARCHAR(16777216),
	_7_7_22 VARCHAR(16777216),
	_7_8_22 VARCHAR(16777216),
	_7_9_22 VARCHAR(16777216),
	_7_10_22 VARCHAR(16777216),
	_7_11_22 VARCHAR(16777216),
	_7_12_22 VARCHAR(16777216),
	_7_13_22 VARCHAR(16777216),
	_7_14_22 VARCHAR(16777216),
	_7_15_22 VARCHAR(16777216),
	_7_16_22 VARCHAR(16777216),
	_7_17_22 VARCHAR(16777216),
	_7_18_22 VARCHAR(16777216),
	_7_19_22 VARCHAR(16777216),
	_7_20_22 VARCHAR(16777216),
	_7_21_22 VARCHAR(16777216),
	_7_22_22 VARCHAR(16777216),
	_7_23_22 VARCHAR(16777216),
	_7_24_22 VARCHAR(16777216),
	_7_25_22 VARCHAR(16777216),
	_7_26_22 VARCHAR(16777216),
	_7_27_22 VARCHAR(16777216),
	_7_28_22 VARCHAR(16777216),
	_7_29_22 VARCHAR(16777216),
	_7_30_22 VARCHAR(16777216),
	_7_31_22 VARCHAR(16777216),
	_8_1_22 VARCHAR(16777216),
	_8_2_22 VARCHAR(16777216),
	_8_3_22 VARCHAR(16777216),
	_8_4_22 VARCHAR(16777216),
	_8_5_22 VARCHAR(16777216),
	_8_6_22 VARCHAR(16777216),
	_8_7_22 VARCHAR(16777216),
	_8_8_22 VARCHAR(16777216),
	_8_9_22 VARCHAR(16777216),
	_8_10_22 VARCHAR(16777216),
	_8_11_22 VARCHAR(16777216),
	_8_12_22 VARCHAR(16777216),
	_8_13_22 VARCHAR(16777216),
	_8_14_22 VARCHAR(16777216),
	_8_15_22 VARCHAR(16777216),
	_8_16_22 VARCHAR(16777216),
	_8_17_22 VARCHAR(16777216),
	_8_18_22 VARCHAR(16777216),
	_8_19_22 VARCHAR(16777216),
	_8_20_22 VARCHAR(16777216),
	_8_21_22 VARCHAR(16777216),
	_8_22_22 VARCHAR(16777216),
	_8_23_22 VARCHAR(16777216),
	_8_24_22 VARCHAR(16777216),
	_8_25_22 VARCHAR(16777216),
	_8_26_22 VARCHAR(16777216),
	_8_27_22 VARCHAR(16777216),
	_8_28_22 VARCHAR(16777216),
	_8_29_22 VARCHAR(16777216),
	_8_30_22 VARCHAR(16777216),
	_8_31_22 VARCHAR(16777216),
	_9_1_22 VARCHAR(16777216),
	_9_2_22 VARCHAR(16777216),
	_9_3_22 VARCHAR(16777216),
	_9_4_22 VARCHAR(16777216),
	_9_5_22 VARCHAR(16777216),
	_9_6_22 VARCHAR(16777216),
	_9_7_22 VARCHAR(16777216),
	_9_8_22 VARCHAR(16777216),
	_9_9_22 VARCHAR(16777216),
	_9_10_22 VARCHAR(16777216),
	_9_11_22 VARCHAR(16777216),
	_9_12_22 VARCHAR(16777216),
	_9_13_22 VARCHAR(16777216),
	_9_14_22 VARCHAR(16777216),
	_9_15_22 VARCHAR(16777216),
	_9_16_22 VARCHAR(16777216),
	_9_17_22 VARCHAR(16777216),
	_9_18_22 VARCHAR(16777216),
	_9_19_22 VARCHAR(16777216),
	_9_20_22 VARCHAR(16777216),
	_9_21_22 VARCHAR(16777216),
	_9_22_22 VARCHAR(16777216),
	_9_23_22 VARCHAR(16777216),
	_9_24_22 VARCHAR(16777216),
	_9_25_22 VARCHAR(16777216),
	_9_26_22 VARCHAR(16777216),
	_9_27_22 VARCHAR(16777216),
	_9_28_22 VARCHAR(16777216),
	_9_29_22 VARCHAR(16777216),
	_9_30_22 VARCHAR(16777216),
	_10_1_22 VARCHAR(16777216),
	_10_2_22 VARCHAR(16777216),
	_10_3_22 VARCHAR(16777216),
	_10_4_22 VARCHAR(16777216),
	_10_5_22 VARCHAR(16777216),
	_10_6_22 VARCHAR(16777216),
	_10_7_22 VARCHAR(16777216),
	_10_8_22 VARCHAR(16777216),
	_10_9_22 VARCHAR(16777216),
	_10_10_22 VARCHAR(16777216),
	_10_11_22 VARCHAR(16777216),
	_10_12_22 VARCHAR(16777216),
	_10_13_22 VARCHAR(16777216),
	_10_14_22 VARCHAR(16777216),
	_10_15_22 VARCHAR(16777216),
	_10_16_22 VARCHAR(16777216),
	_10_17_22 VARCHAR(16777216),
	_10_18_22 VARCHAR(16777216),
	_10_19_22 VARCHAR(16777216),
	_10_20_22 VARCHAR(16777216),
	_10_21_22 VARCHAR(16777216),
	_10_22_22 VARCHAR(16777216),
	_10_23_22 VARCHAR(16777216),
	_10_24_22 VARCHAR(16777216),
	_10_25_22 VARCHAR(16777216),
	_10_26_22 VARCHAR(16777216),
	_10_27_22 VARCHAR(16777216),
	_10_28_22 VARCHAR(16777216),
	_10_29_22 VARCHAR(16777216),
	_10_30_22 VARCHAR(16777216),
	_10_31_22 VARCHAR(16777216),
	_11_1_22 VARCHAR(16777216),
	_11_2_22 VARCHAR(16777216),
	_11_3_22 VARCHAR(16777216),
	_11_4_22 VARCHAR(16777216),
	_11_5_22 VARCHAR(16777216),
	_11_6_22 VARCHAR(16777216),
	_11_7_22 VARCHAR(16777216),
	_11_8_22 VARCHAR(16777216),
	_11_9_22 VARCHAR(16777216),
	_11_10_22 VARCHAR(16777216),
	_11_11_22 VARCHAR(16777216),
	_11_12_22 VARCHAR(16777216),
	_11_13_22 VARCHAR(16777216),
	_11_14_22 VARCHAR(16777216),
	_11_15_22 VARCHAR(16777216),
	_11_16_22 VARCHAR(16777216),
	_11_17_22 VARCHAR(16777216),
	_11_18_22 VARCHAR(16777216),
	_11_19_22 VARCHAR(16777216),
	_11_20_22 VARCHAR(16777216),
	_11_21_22 VARCHAR(16777216),
	_11_22_22 VARCHAR(16777216),
	_11_23_22 VARCHAR(16777216),
	_11_24_22 VARCHAR(16777216),
	_11_25_22 VARCHAR(16777216),
	_11_26_22 VARCHAR(16777216),
	_11_27_22 VARCHAR(16777216),
	_11_28_22 VARCHAR(16777216),
	_11_29_22 VARCHAR(16777216),
	_11_30_22 VARCHAR(16777216),
	_12_1_22 VARCHAR(16777216),
	_12_2_22 VARCHAR(16777216),
	_12_3_22 VARCHAR(16777216),
	_12_4_22 VARCHAR(16777216),
	_12_5_22 VARCHAR(16777216),
	_12_6_22 VARCHAR(16777216),
	_12_7_22 VARCHAR(16777216),
	_12_8_22 VARCHAR(16777216),
	_12_9_22 VARCHAR(16777216),
	_12_10_22 VARCHAR(16777216),
	_12_11_22 VARCHAR(16777216),
	_12_12_22 VARCHAR(16777216),
	_12_13_22 VARCHAR(16777216),
	_12_14_22 VARCHAR(16777216),
	_12_15_22 VARCHAR(16777216),
	_12_16_22 VARCHAR(16777216),
	_12_17_22 VARCHAR(16777216),
	_12_18_22 VARCHAR(16777216),
	_12_19_22 VARCHAR(16777216),
	_12_20_22 VARCHAR(16777216),
	_12_21_22 VARCHAR(16777216),
	_12_22_22 VARCHAR(16777216),
	_12_23_22 VARCHAR(16777216),
	_12_24_22 VARCHAR(16777216),
	_12_25_22 VARCHAR(16777216),
	_12_26_22 VARCHAR(16777216),
	_12_27_22 VARCHAR(16777216),
	_12_28_22 VARCHAR(16777216),
	_12_29_22 VARCHAR(16777216),
	_12_30_22 VARCHAR(16777216),
	_12_31_22 VARCHAR(16777216),
	_1_1_23 VARCHAR(16777216),
	_1_2_23 VARCHAR(16777216),
	_1_3_23 VARCHAR(16777216),
	_1_4_23 VARCHAR(16777216),
	_1_5_23 VARCHAR(16777216),
	_1_6_23 VARCHAR(16777216),
	_1_7_23 VARCHAR(16777216),
	_1_8_23 VARCHAR(16777216),
	_1_9_23 VARCHAR(16777216),
	_1_10_23 VARCHAR(16777216),
	_1_11_23 VARCHAR(16777216),
	_1_12_23 VARCHAR(16777216),
	_1_13_23 VARCHAR(16777216),
	_1_14_23 VARCHAR(16777216),
	_1_15_23 VARCHAR(16777216),
	_1_16_23 VARCHAR(16777216),
	_1_17_23 VARCHAR(16777216),
	_1_18_23 VARCHAR(16777216),
	_1_19_23 VARCHAR(16777216),
	_1_20_23 VARCHAR(16777216),
	_1_21_23 VARCHAR(16777216),
	_1_22_23 VARCHAR(16777216),
	_1_23_23 VARCHAR(16777216),
	_1_24_23 VARCHAR(16777216),
	_1_25_23 VARCHAR(16777216),
	_1_26_23 VARCHAR(16777216),
	_1_27_23 VARCHAR(16777216),
	_1_28_23 VARCHAR(16777216),
	_1_29_23 VARCHAR(16777216),
	_1_30_23 VARCHAR(16777216),
	_1_31_23 VARCHAR(16777216),
	_2_1_23 VARCHAR(16777216),
	_2_2_23 VARCHAR(16777216),
	_2_3_23 VARCHAR(16777216),
	_2_4_23 VARCHAR(16777216),
	_2_5_23 VARCHAR(16777216),
	_2_6_23 VARCHAR(16777216),
	_2_7_23 VARCHAR(16777216),
	_2_8_23 VARCHAR(16777216),
	_2_9_23 VARCHAR(16777216),
	_2_10_23 VARCHAR(16777216),
	_2_11_23 VARCHAR(16777216),
	_2_12_23 VARCHAR(16777216),
	_2_13_23 VARCHAR(16777216),
	_2_14_23 VARCHAR(16777216),
	_2_15_23 VARCHAR(16777216),
	_2_16_23 VARCHAR(16777216),
	_2_17_23 VARCHAR(16777216),
	_2_18_23 VARCHAR(16777216),
	_2_19_23 VARCHAR(16777216),
	_2_20_23 VARCHAR(16777216),
	_2_21_23 VARCHAR(16777216),
	_2_22_23 VARCHAR(16777216),
	_2_23_23 VARCHAR(16777216),
	_2_24_23 VARCHAR(16777216),
	_2_25_23 VARCHAR(16777216),
	_2_26_23 VARCHAR(16777216),
	_2_27_23 VARCHAR(16777216),
	_2_28_23 VARCHAR(16777216),
	_3_1_23 VARCHAR(16777216),
	_3_2_23 VARCHAR(16777216),
	_3_3_23 VARCHAR(16777216),
	_3_4_23 VARCHAR(16777216),
	_3_5_23 VARCHAR(16777216),
	_3_6_23 VARCHAR(16777216),
	_3_7_23 VARCHAR(16777216),
	_3_8_23 VARCHAR(16777216),
	_3_9_23 VARCHAR(16777216)
);"

,2
table_name,RECOVERED_CASES
description,
DDL,"create or replace TABLE RECOVERED_CASES (
	""province_or_state"" VARCHAR(16777216),
	""country_or_region"" VARCHAR(16777216),
	""latitude"" VARCHAR(16777216),
	""longitude"" VARCHAR(16777216),
	""location_geom"" VARCHAR(16777216),
	_1_22_20 VARCHAR(16777216),
	_1_23_20 VARCHAR(16777216),
	_1_24_20 VARCHAR(16777216),
	_1_25_20 VARCHAR(16777216),
	_1_26_20 VARCHAR(16777216),
	_1_27_20 VARCHAR(16777216),
	_1_28_20 VARCHAR(16777216),
	_1_29_20 VARCHAR(16777216),
	_1_30_20 VARCHAR(16777216),
	_1_31_20 VARCHAR(16777216),
	_2_1_20 VARCHAR(16777216),
	_2_2_20 VARCHAR(16777216),
	_2_3_20 VARCHAR(16777216),
	_2_4_20 VARCHAR(16777216),
	_2_5_20 VARCHAR(16777216),
	_2_6_20 VARCHAR(16777216),
	_2_7_20 VARCHAR(16777216),
	_2_8_20 VARCHAR(16777216),
	_2_9_20 VARCHAR(16777216),
	_2_10_20 VARCHAR(16777216),
	_2_11_20 VARCHAR(16777216),
	_2_12_20 VARCHAR(16777216),
	_2_13_20 VARCHAR(16777216),
	_2_14_20 VARCHAR(16777216),
	_2_15_20 VARCHAR(16777216),
	_2_16_20 VARCHAR(16777216),
	_2_17_20 VARCHAR(16777216),
	_2_18_20 VARCHAR(16777216),
	_2_19_20 VARCHAR(16777216),
	_2_20_20 VARCHAR(16777216),
	_2_21_20 VARCHAR(16777216),
	_2_22_20 VARCHAR(16777216),
	_2_23_20 VARCHAR(16777216),
	_2_24_20 VARCHAR(16777216),
	_2_25_20 VARCHAR(16777216),
	_2_26_20 VARCHAR(16777216),
	_2_27_20 VARCHAR(16777216),
	_2_28_20 VARCHAR(16777216),
	_2_29_20 VARCHAR(16777216),
	_3_1_20 VARCHAR(16777216),
	_3_2_20 VARCHAR(16777216),
	_3_3_20 VARCHAR(16777216),
	_3_4_20 VARCHAR(16777216),
	_3_5_20 VARCHAR(16777216),
	_3_6_20 VARCHAR(16777216),
	_3_7_20 VARCHAR(16777216),
	_3_8_20 VARCHAR(16777216),
	_3_9_20 VARCHAR(16777216),
	_3_10_20 VARCHAR(16777216),
	_3_11_20 VARCHAR(16777216),
	_3_12_20 VARCHAR(16777216),
	_3_13_20 VARCHAR(16777216),
	_3_14_20 VARCHAR(16777216),
	_3_15_20 VARCHAR(16777216),
	_3_16_20 VARCHAR(16777216),
	_3_17_20 VARCHAR(16777216),
	_3_18_20 VARCHAR(16777216),
	_3_19_20 VARCHAR(16777216),
	_3_20_20 VARCHAR(16777216),
	_3_21_20 VARCHAR(16777216),
	_3_22_20 VARCHAR(16777216),
	_3_23_20 VARCHAR(16777216),
	_3_24_20 VARCHAR(16777216),
	_3_25_20 VARCHAR(16777216),
	_3_26_20 VARCHAR(16777216),
	_3_27_20 VARCHAR(16777216),
	_3_28_20 VARCHAR(16777216),
	_3_29_20 VARCHAR(16777216),
	_3_30_20 VARCHAR(16777216),
	_3_31_20 VARCHAR(16777216),
	_4_1_20 VARCHAR(16777216),
	_4_2_20 VARCHAR(16777216),
	_4_3_20 VARCHAR(16777216),
	_4_4_20 VARCHAR(16777216),
	_4_5_20 VARCHAR(16777216),
	_4_6_20 VARCHAR(16777216),
	_4_7_20 VARCHAR(16777216),
	_4_8_20 VARCHAR(16777216),
	_4_9_20 VARCHAR(16777216),
	_4_10_20 VARCHAR(16777216),
	_4_11_20 VARCHAR(16777216),
	_4_12_20 VARCHAR(16777216),
	_4_13_20 VARCHAR(16777216),
	_4_14_20 VARCHAR(16777216),
	_4_15_20 VARCHAR(16777216),
	_4_16_20 VARCHAR(16777216),
	_4_17_20 VARCHAR(16777216),
	_4_18_20 VARCHAR(16777216),
	_4_19_20 VARCHAR(16777216),
	_4_20_20 VARCHAR(16777216),
	_4_21_20 VARCHAR(16777216),
	_4_22_20 VARCHAR(16777216),
	_4_23_20 VARCHAR(16777216),
	_4_24_20 VARCHAR(16777216),
	_4_25_20 VARCHAR(16777216),
	_4_26_20 VARCHAR(16777216),
	_4_27_20 VARCHAR(16777216),
	_4_28_20 VARCHAR(16777216),
	_4_29_20 VARCHAR(16777216),
	_4_30_20 VARCHAR(16777216),
	_5_1_20 VARCHAR(16777216),
	_5_2_20 VARCHAR(16777216),
	_5_3_20 VARCHAR(16777216),
	_5_4_20 VARCHAR(16777216),
	_5_5_20 VARCHAR(16777216),
	_5_6_20 VARCHAR(16777216),
	_5_7_20 VARCHAR(16777216),
	_5_8_20 VARCHAR(16777216),
	_5_9_20 VARCHAR(16777216),
	_5_10_20 VARCHAR(16777216),
	_5_11_20 VARCHAR(16777216),
	_5_12_20 VARCHAR(16777216),
	_5_13_20 VARCHAR(16777216),
	_5_14_20 VARCHAR(16777216),
	_5_15_20 VARCHAR(16777216),
	_5_16_20 VARCHAR(16777216),
	_5_17_20 VARCHAR(16777216),
	_5_18_20 VARCHAR(16777216),
	_5_19_20 VARCHAR(16777216),
	_5_20_20 VARCHAR(16777216),
	_5_21_20 VARCHAR(16777216),
	_5_22_20 VARCHAR(16777216),
	_5_23_20 VARCHAR(16777216),
	_5_24_20 VARCHAR(16777216),
	_5_25_20 VARCHAR(16777216),
	_5_26_20 VARCHAR(16777216),
	_5_27_20 VARCHAR(16777216),
	_5_28_20 VARCHAR(16777216),
	_5_29_20 VARCHAR(16777216),
	_5_30_20 VARCHAR(16777216),
	_5_31_20 VARCHAR(16777216),
	_6_1_20 VARCHAR(16777216),
	_6_2_20 VARCHAR(16777216),
	_6_3_20 VARCHAR(16777216),
	_6_4_20 VARCHAR(16777216),
	_6_5_20 VARCHAR(16777216),
	_6_6_20 VARCHAR(16777216),
	_6_7_20 VARCHAR(16777216),
	_6_8_20 VARCHAR(16777216),
	_6_9_20 VARCHAR(16777216),
	_6_10_20 VARCHAR(16777216),
	_6_11_20 VARCHAR(16777216),
	_6_12_20 VARCHAR(16777216),
	_6_13_20 VARCHAR(16777216),
	_6_14_20 VARCHAR(16777216),
	_6_15_20 VARCHAR(16777216),
	_6_16_20 VARCHAR(16777216),
	_6_17_20 VARCHAR(16777216),
	_6_18_20 VARCHAR(16777216),
	_6_19_20 VARCHAR(16777216),
	_6_20_20 VARCHAR(16777216),
	_6_21_20 VARCHAR(16777216),
	_6_22_20 VARCHAR(16777216),
	_6_23_20 VARCHAR(16777216),
	_6_24_20 VARCHAR(16777216),
	_6_25_20 VARCHAR(16777216),
	_6_26_20 VARCHAR(16777216),
	_6_27_20 VARCHAR(16777216),
	_6_28_20 VARCHAR(16777216),
	_6_29_20 VARCHAR(16777216),
	_6_30_20 VARCHAR(16777216),
	_7_1_20 VARCHAR(16777216),
	_7_2_20 VARCHAR(16777216),
	_7_3_20 VARCHAR(16777216),
	_7_4_20 VARCHAR(16777216),
	_7_5_20 VARCHAR(16777216),
	_7_6_20 VARCHAR(16777216),
	_7_7_20 VARCHAR(16777216),
	_7_8_20 VARCHAR(16777216),
	_7_9_20 VARCHAR(16777216),
	_7_10_20 VARCHAR(16777216),
	_7_11_20 VARCHAR(16777216),
	_7_12_20 VARCHAR(16777216),
	_7_13_20 VARCHAR(16777216),
	_7_14_20 VARCHAR(16777216),
	_7_15_20 VARCHAR(16777216),
	_7_16_20 VARCHAR(16777216),
	_7_17_20 VARCHAR(16777216),
	_7_18_20 VARCHAR(16777216),
	_7_19_20 VARCHAR(16777216),
	_7_20_20 VARCHAR(16777216),
	_7_21_20 VARCHAR(16777216),
	_7_22_20 VARCHAR(16777216),
	_7_23_20 VARCHAR(16777216),
	_7_24_20 VARCHAR(16777216),
	_7_25_20 VARCHAR(16777216),
	_7_26_20 VARCHAR(16777216),
	_7_27_20 VARCHAR(16777216),
	_7_28_20 VARCHAR(16777216),
	_7_29_20 VARCHAR(16777216),
	_7_30_20 VARCHAR(16777216),
	_7_31_20 VARCHAR(16777216),
	_8_1_20 VARCHAR(16777216),
	_8_2_20 VARCHAR(16777216),
	_8_3_20 VARCHAR(16777216),
	_8_4_20 VARCHAR(16777216),
	_8_5_20 VARCHAR(16777216),
	_8_6_20 VARCHAR(16777216),
	_8_7_20 VARCHAR(16777216),
	_8_8_20 VARCHAR(16777216),
	_8_9_20 VARCHAR(16777216),
	_8_10_20 VARCHAR(16777216),
	_8_11_20 VARCHAR(16777216),
	_8_12_20 VARCHAR(16777216),
	_8_13_20 VARCHAR(16777216),
	_8_14_20 VARCHAR(16777216),
	_8_15_20 VARCHAR(16777216),
	_8_16_20 VARCHAR(16777216),
	_8_17_20 VARCHAR(16777216),
	_8_18_20 VARCHAR(16777216),
	_8_19_20 VARCHAR(16777216),
	_8_20_20 VARCHAR(16777216),
	_8_21_20 VARCHAR(16777216),
	_8_22_20 VARCHAR(16777216),
	_8_23_20 VARCHAR(16777216),
	_8_24_20 VARCHAR(16777216),
	_8_25_20 VARCHAR(16777216),
	_8_26_20 VARCHAR(16777216),
	_8_27_20 VARCHAR(16777216),
	_8_28_20 VARCHAR(16777216),
	_8_29_20 VARCHAR(16777216),
	_8_30_20 VARCHAR(16777216),
	_8_31_20 VARCHAR(16777216),
	_9_1_20 VARCHAR(16777216),
	_9_2_20 VARCHAR(16777216),
	_9_3_20 VARCHAR(16777216),
	_9_4_20 VARCHAR(16777216),
	_9_5_20 VARCHAR(16777216),
	_9_6_20 VARCHAR(16777216),
	_9_7_20 VARCHAR(16777216),
	_9_8_20 VARCHAR(16777216),
	_9_9_20 VARCHAR(16777216),
	_9_10_20 VARCHAR(16777216),
	_9_11_20 VARCHAR(16777216),
	_9_12_20 VARCHAR(16777216),
	_9_13_20 VARCHAR(16777216),
	_9_14_20 VARCHAR(16777216),
	_9_15_20 VARCHAR(16777216),
	_9_16_20 VARCHAR(16777216),
	_9_17_20 VARCHAR(16777216),
	_9_18_20 VARCHAR(16777216),
	_9_19_20 VARCHAR(16777216),
	_9_20_20 VARCHAR(16777216),
	_9_21_20 VARCHAR(16777216),
	_9_22_20 VARCHAR(16777216),
	_9_23_20 VARCHAR(16777216),
	_9_24_20 VARCHAR(16777216),
	_9_25_20 VARCHAR(16777216),
	_9_26_20 VARCHAR(16777216),
	_9_27_20 VARCHAR(16777216),
	_9_28_20 VARCHAR(16777216),
	_9_29_20 VARCHAR(16777216),
	_9_30_20 VARCHAR(16777216),
	_10_1_20 VARCHAR(16777216),
	_10_2_20 VARCHAR(16777216),
	_10_3_20 VARCHAR(16777216),
	_10_4_20 VARCHAR(16777216),
	_10_5_20 VARCHAR(16777216),
	_10_6_20 VARCHAR(16777216),
	_10_7_20 VARCHAR(16777216),
	_10_8_20 VARCHAR(16777216),
	_10_9_20 VARCHAR(16777216),
	_10_10_20 VARCHAR(16777216),
	_10_11_20 VARCHAR(16777216),
	_10_12_20 VARCHAR(16777216),
	_10_13_20 VARCHAR(16777216),
	_10_14_20 VARCHAR(16777216),
	_10_15_20 VARCHAR(16777216),
	_10_16_20 VARCHAR(16777216),
	_10_17_20 VARCHAR(16777216),
	_10_18_20 VARCHAR(16777216),
	_10_19_20 VARCHAR(16777216),
	_10_20_20 VARCHAR(16777216),
	_10_21_20 VARCHAR(16777216),
	_10_22_20 VARCHAR(16777216),
	_10_23_20 VARCHAR(16777216),
	_10_24_20 VARCHAR(16777216),
	_10_25_20 VARCHAR(16777216),
	_10_26_20 VARCHAR(16777216),
	_10_27_20 VARCHAR(16777216),
	_10_28_20 VARCHAR(16777216),
	_10_29_20 VARCHAR(16777216),
	_10_30_20 VARCHAR(16777216),
	_10_31_20 VARCHAR(16777216),
	_11_1_20 VARCHAR(16777216),
	_11_2_20 VARCHAR(16777216),
	_11_3_20 VARCHAR(16777216),
	_11_4_20 VARCHAR(16777216),
	_11_5_20 VARCHAR(16777216),
	_11_6_20 VARCHAR(16777216),
	_11_7_20 VARCHAR(16777216),
	_11_8_20 VARCHAR(16777216),
	_11_9_20 VARCHAR(16777216),
	_11_10_20 VARCHAR(16777216),
	_11_11_20 VARCHAR(16777216),
	_11_12_20 VARCHAR(16777216),
	_11_13_20 VARCHAR(16777216),
	_11_14_20 VARCHAR(16777216),
	_11_15_20 VARCHAR(16777216),
	_11_16_20 VARCHAR(16777216),
	_11_17_20 VARCHAR(16777216),
	_11_18_20 VARCHAR(16777216),
	_11_19_20 VARCHAR(16777216),
	_11_20_20 VARCHAR(16777216),
	_11_21_20 VARCHAR(16777216),
	_11_22_20 VARCHAR(16777216),
	_11_23_20 VARCHAR(16777216),
	_11_24_20 VARCHAR(16777216),
	_11_25_20 VARCHAR(16777216),
	_11_26_20 VARCHAR(16777216),
	_11_27_20 VARCHAR(16777216),
	_11_28_20 VARCHAR(16777216),
	_11_29_20 VARCHAR(16777216),
	_11_30_20 VARCHAR(16777216),
	_12_1_20 VARCHAR(16777216),
	_12_2_20 VARCHAR(16777216),
	_12_3_20 VARCHAR(16777216),
	_12_4_20 VARCHAR(16777216),
	_12_5_20 VARCHAR(16777216),
	_12_6_20 VARCHAR(16777216),
	_12_7_20 VARCHAR(16777216),
	_12_8_20 VARCHAR(16777216),
	_12_9_20 VARCHAR(16777216),
	_12_10_20 VARCHAR(16777216),
	_12_11_20 VARCHAR(16777216),
	_12_12_20 VARCHAR(16777216),
	_12_13_20 VARCHAR(16777216),
	_12_14_20 VARCHAR(16777216),
	_12_15_20 VARCHAR(16777216),
	_12_16_20 VARCHAR(16777216),
	_12_17_20 VARCHAR(16777216),
	_12_18_20 VARCHAR(16777216),
	_12_19_20 VARCHAR(16777216),
	_12_20_20 VARCHAR(16777216),
	_12_21_20 VARCHAR(16777216),
	_12_22_20 VARCHAR(16777216),
	_12_23_20 VARCHAR(16777216),
	_12_24_20 VARCHAR(16777216),
	_12_25_20 VARCHAR(16777216),
	_12_26_20 VARCHAR(16777216),
	_12_27_20 VARCHAR(16777216),
	_12_28_20 VARCHAR(16777216),
	_12_29_20 VARCHAR(16777216),
	_12_30_20 VARCHAR(16777216),
	_12_31_20 VARCHAR(16777216),
	_1_1_21 VARCHAR(16777216),
	_1_2_21 VARCHAR(16777216),
	_1_3_21 VARCHAR(16777216),
	_1_4_21 VARCHAR(16777216),
	_1_5_21 VARCHAR(16777216),
	_1_6_21 VARCHAR(16777216),
	_1_7_21 VARCHAR(16777216),
	_1_8_21 VARCHAR(16777216),
	_1_9_21 VARCHAR(16777216),
	_1_10_21 VARCHAR(16777216),
	_1_11_21 VARCHAR(16777216),
	_1_12_21 VARCHAR(16777216),
	_1_13_21 VARCHAR(16777216),
	_1_14_21 VARCHAR(16777216),
	_1_15_21 VARCHAR(16777216),
	_1_16_21 VARCHAR(16777216),
	_1_17_21 VARCHAR(16777216),
	_1_18_21 VARCHAR(16777216),
	_1_19_21 VARCHAR(16777216),
	_1_20_21 VARCHAR(16777216),
	_1_21_21 VARCHAR(16777216),
	_1_22_21 VARCHAR(16777216),
	_1_23_21 VARCHAR(16777216),
	_1_24_21 VARCHAR(16777216),
	_1_25_21 VARCHAR(16777216),
	_1_26_21 VARCHAR(16777216),
	_1_27_21 VARCHAR(16777216),
	_1_28_21 VARCHAR(16777216),
	_1_29_21 VARCHAR(16777216),
	_1_30_21 VARCHAR(16777216),
	_1_31_21 VARCHAR(16777216),
	_2_1_21 VARCHAR(16777216),
	_2_2_21 VARCHAR(16777216),
	_2_3_21 VARCHAR(16777216),
	_2_4_21 VARCHAR(16777216),
	_2_5_21 VARCHAR(16777216),
	_2_6_21 VARCHAR(16777216),
	_2_7_21 VARCHAR(16777216),
	_2_8_21 VARCHAR(16777216),
	_2_9_21 VARCHAR(16777216),
	_2_10_21 VARCHAR(16777216),
	_2_11_21 VARCHAR(16777216),
	_2_12_21 VARCHAR(16777216),
	_2_13_21 VARCHAR(16777216),
	_2_14_21 VARCHAR(16777216),
	_2_15_21 VARCHAR(16777216),
	_2_16_21 VARCHAR(16777216),
	_2_17_21 VARCHAR(16777216),
	_2_18_21 VARCHAR(16777216),
	_2_19_21 VARCHAR(16777216),
	_2_20_21 VARCHAR(16777216),
	_2_21_21 VARCHAR(16777216),
	_2_22_21 VARCHAR(16777216),
	_2_23_21 VARCHAR(16777216),
	_2_24_21 VARCHAR(16777216),
	_2_25_21 VARCHAR(16777216),
	_2_26_21 VARCHAR(16777216),
	_2_27_21 VARCHAR(16777216),
	_2_28_21 VARCHAR(16777216),
	_3_1_21 VARCHAR(16777216),
	_3_2_21 VARCHAR(16777216),
	_3_3_21 VARCHAR(16777216),
	_3_4_21 VARCHAR(16777216),
	_3_5_21 VARCHAR(16777216),
	_3_6_21 VARCHAR(16777216),
	_3_7_21 VARCHAR(16777216),
	_3_8_21 VARCHAR(16777216),
	_3_9_21 VARCHAR(16777216),
	_3_10_21 VARCHAR(16777216),
	_3_11_21 VARCHAR(16777216),
	_3_12_21 VARCHAR(16777216),
	_3_13_21 VARCHAR(16777216),
	_3_14_21 VARCHAR(16777216),
	_3_15_21 VARCHAR(16777216),
	_3_16_21 VARCHAR(16777216),
	_3_17_21 VARCHAR(16777216),
	_3_18_21 VARCHAR(16777216),
	_3_19_21 VARCHAR(16777216),
	_3_20_21 VARCHAR(16777216),
	_3_21_21 VARCHAR(16777216),
	_3_22_21 VARCHAR(16777216),
	_3_23_21 VARCHAR(16777216),
	_3_24_21 VARCHAR(16777216),
	_3_25_21 VARCHAR(16777216),
	_3_26_21 VARCHAR(16777216),
	_3_27_21 VARCHAR(16777216),
	_3_28_21 VARCHAR(16777216),
	_3_29_21 VARCHAR(16777216),
	_3_30_21 VARCHAR(16777216),
	_3_31_21 VARCHAR(16777216),
	_4_1_21 VARCHAR(16777216),
	_4_2_21 VARCHAR(16777216),
	_4_3_21 VARCHAR(16777216),
	_4_4_21 VARCHAR(16777216),
	_4_5_21 VARCHAR(16777216),
	_4_6_21 VARCHAR(16777216),
	_4_7_21 VARCHAR(16777216),
	_4_8_21 VARCHAR(16777216),
	_4_9_21 VARCHAR(16777216),
	_4_10_21 VARCHAR(16777216),
	_4_11_21 VARCHAR(16777216),
	_4_12_21 VARCHAR(16777216),
	_4_13_21 VARCHAR(16777216),
	_4_14_21 VARCHAR(16777216),
	_4_15_21 VARCHAR(16777216),
	_4_16_21 VARCHAR(16777216),
	_4_17_21 VARCHAR(16777216),
	_4_18_21 VARCHAR(16777216),
	_4_19_21 VARCHAR(16777216),
	_4_20_21 VARCHAR(16777216),
	_4_21_21 VARCHAR(16777216),
	_4_22_21 VARCHAR(16777216),
	_4_23_21 VARCHAR(16777216),
	_4_24_21 VARCHAR(16777216),
	_4_25_21 VARCHAR(16777216),
	_4_26_21 VARCHAR(16777216),
	_4_27_21 VARCHAR(16777216),
	_4_28_21 VARCHAR(16777216),
	_4_29_21 VARCHAR(16777216),
	_4_30_21 VARCHAR(16777216),
	_5_1_21 VARCHAR(16777216),
	_5_2_21 VARCHAR(16777216),
	_5_3_21 VARCHAR(16777216),
	_5_4_21 VARCHAR(16777216),
	_5_5_21 VARCHAR(16777216),
	_5_6_21 VARCHAR(16777216),
	_5_7_21 VARCHAR(16777216),
	_5_8_21 VARCHAR(16777216),
	_5_9_21 VARCHAR(16777216),
	_5_10_21 VARCHAR(16777216),
	_5_11_21 VARCHAR(16777216),
	_5_12_21 VARCHAR(16777216),
	_5_13_21 VARCHAR(16777216),
	_5_14_21 VARCHAR(16777216),
	_5_15_21 VARCHAR(16777216),
	_5_16_21 VARCHAR(16777216),
	_5_17_21 VARCHAR(16777216),
	_5_18_21 VARCHAR(16777216),
	_5_19_21 VARCHAR(16777216),
	_5_20_21 VARCHAR(16777216),
	_5_21_21 VARCHAR(16777216),
	_5_22_21 VARCHAR(16777216),
	_5_23_21 VARCHAR(16777216),
	_5_24_21 VARCHAR(16777216),
	_5_25_21 VARCHAR(16777216),
	_5_26_21 VARCHAR(16777216),
	_5_27_21 VARCHAR(16777216),
	_5_28_21 VARCHAR(16777216),
	_5_29_21 VARCHAR(16777216),
	_5_30_21 VARCHAR(16777216),
	_5_31_21 VARCHAR(16777216),
	_6_1_21 VARCHAR(16777216),
	_6_2_21 VARCHAR(16777216),
	_6_3_21 VARCHAR(16777216),
	_6_4_21 VARCHAR(16777216),
	_6_5_21 VARCHAR(16777216),
	_6_6_21 VARCHAR(16777216),
	_6_7_21 VARCHAR(16777216),
	_6_8_21 VARCHAR(16777216),
	_6_9_21 VARCHAR(16777216),
	_6_10_21 VARCHAR(16777216),
	_6_11_21 VARCHAR(16777216),
	_6_12_21 VARCHAR(16777216),
	_6_13_21 VARCHAR(16777216),
	_6_14_21 VARCHAR(16777216),
	_6_15_21 VARCHAR(16777216),
	_6_16_21 VARCHAR(16777216),
	_6_17_21 VARCHAR(16777216),
	_6_18_21 VARCHAR(16777216),
	_6_19_21 VARCHAR(16777216),
	_6_20_21 VARCHAR(16777216),
	_6_21_21 VARCHAR(16777216),
	_6_22_21 VARCHAR(16777216),
	_6_23_21 VARCHAR(16777216),
	_6_24_21 VARCHAR(16777216),
	_6_25_21 VARCHAR(16777216),
	_6_26_21 VARCHAR(16777216),
	_6_27_21 VARCHAR(16777216),
	_6_28_21 VARCHAR(16777216),
	_6_29_21 VARCHAR(16777216),
	_6_30_21 VARCHAR(16777216),
	_7_1_21 VARCHAR(16777216),
	_7_2_21 VARCHAR(16777216),
	_7_3_21 VARCHAR(16777216),
	_7_4_21 VARCHAR(16777216),
	_7_5_21 VARCHAR(16777216),
	_7_6_21 VARCHAR(16777216),
	_7_7_21 VARCHAR(16777216),
	_7_8_21 VARCHAR(16777216),
	_7_9_21 VARCHAR(16777216),
	_7_10_21 VARCHAR(16777216),
	_7_11_21 VARCHAR(16777216),
	_7_12_21 VARCHAR(16777216),
	_7_13_21 VARCHAR(16777216),
	_7_14_21 VARCHAR(16777216),
	_7_15_21 VARCHAR(16777216),
	_7_16_21 VARCHAR(16777216),
	_7_17_21 VARCHAR(16777216),
	_7_18_21 VARCHAR(16777216),
	_7_19_21 VARCHAR(16777216),
	_7_20_21 VARCHAR(16777216),
	_7_21_21 VARCHAR(16777216),
	_7_22_21 VARCHAR(16777216),
	_7_23_21 VARCHAR(16777216),
	_7_24_21 VARCHAR(16777216),
	_7_25_21 VARCHAR(16777216),
	_7_26_21 VARCHAR(16777216),
	_7_27_21 VARCHAR(16777216),
	_7_28_21 VARCHAR(16777216),
	_7_29_21 VARCHAR(16777216),
	_7_30_21 VARCHAR(16777216),
	_7_31_21 VARCHAR(16777216),
	_8_1_21 VARCHAR(16777216),
	_8_2_21 VARCHAR(16777216),
	_8_3_21 VARCHAR(16777216),
	_8_4_21 VARCHAR(16777216),
	_8_5_21 VARCHAR(16777216),
	_8_6_21 VARCHAR(16777216),
	_8_7_21 VARCHAR(16777216),
	_8_8_21 VARCHAR(16777216),
	_8_9_21 VARCHAR(16777216),
	_8_10_21 VARCHAR(16777216),
	_8_11_21 VARCHAR(16777216),
	_8_12_21 VARCHAR(16777216),
	_8_13_21 VARCHAR(16777216),
	_8_14_21 VARCHAR(16777216),
	_8_15_21 VARCHAR(16777216),
	_8_16_21 VARCHAR(16777216),
	_8_17_21 VARCHAR(16777216),
	_8_18_21 VARCHAR(16777216),
	_8_19_21 VARCHAR(16777216),
	_8_20_21 VARCHAR(16777216),
	_8_21_21 VARCHAR(16777216),
	_8_22_21 VARCHAR(16777216),
	_8_23_21 VARCHAR(16777216),
	_8_24_21 VARCHAR(16777216),
	_8_25_21 VARCHAR(16777216),
	_8_26_21 VARCHAR(16777216),
	_8_27_21 VARCHAR(16777216),
	_8_28_21 VARCHAR(16777216),
	_8_29_21 VARCHAR(16777216),
	_8_30_21 VARCHAR(16777216),
	_8_31_21 VARCHAR(16777216),
	_9_1_21 VARCHAR(16777216),
	_9_2_21 VARCHAR(16777216),
	_9_3_21 VARCHAR(16777216),
	_9_4_21 VARCHAR(16777216),
	_9_5_21 VARCHAR(16777216),
	_9_6_21 VARCHAR(16777216),
	_9_7_21 VARCHAR(16777216),
	_9_8_21 VARCHAR(16777216),
	_9_9_21 VARCHAR(16777216),
	_9_10_21 VARCHAR(16777216),
	_9_11_21 VARCHAR(16777216),
	_9_12_21 VARCHAR(16777216),
	_9_13_21 VARCHAR(16777216),
	_9_14_21 VARCHAR(16777216),
	_9_15_21 VARCHAR(16777216),
	_9_16_21 VARCHAR(16777216),
	_9_17_21 VARCHAR(16777216),
	_9_18_21 VARCHAR(16777216),
	_9_19_21 VARCHAR(16777216),
	_9_20_21 VARCHAR(16777216),
	_9_21_21 VARCHAR(16777216),
	_9_22_21 VARCHAR(16777216),
	_9_23_21 VARCHAR(16777216),
	_9_24_21 VARCHAR(16777216),
	_9_25_21 VARCHAR(16777216),
	_9_26_21 VARCHAR(16777216),
	_9_27_21 VARCHAR(16777216),
	_9_28_21 VARCHAR(16777216),
	_9_29_21 VARCHAR(16777216),
	_9_30_21 VARCHAR(16777216),
	_10_1_21 VARCHAR(16777216),
	_10_2_21 VARCHAR(16777216),
	_10_3_21 VARCHAR(16777216),
	_10_4_21 VARCHAR(16777216),
	_10_5_21 VARCHAR(16777216),
	_10_6_21 VARCHAR(16777216),
	_10_7_21 VARCHAR(16777216),
	_10_8_21 VARCHAR(16777216),
	_10_9_21 VARCHAR(16777216),
	_10_10_21 VARCHAR(16777216),
	_10_11_21 VARCHAR(16777216),
	_10_12_21 VARCHAR(16777216),
	_10_13_21 VARCHAR(16777216),
	_10_14_21 VARCHAR(16777216),
	_10_15_21 VARCHAR(16777216),
	_10_16_21 VARCHAR(16777216),
	_10_17_21 VARCHAR(16777216),
	_10_18_21 VARCHAR(16777216),
	_10_19_21 VARCHAR(16777216),
	_10_20_21 VARCHAR(16777216),
	_10_21_21 VARCHAR(16777216),
	_10_22_21 VARCHAR(16777216),
	_10_23_21 VARCHAR(16777216),
	_10_24_21 VARCHAR(16777216),
	_10_25_21 VARCHAR(16777216),
	_10_26_21 VARCHAR(16777216),
	_10_27_21 VARCHAR(16777216),
	_10_28_21 VARCHAR(16777216),
	_10_29_21 VARCHAR(16777216),
	_10_30_21 VARCHAR(16777216),
	_10_31_21 VARCHAR(16777216),
	_11_1_21 VARCHAR(16777216),
	_11_2_21 VARCHAR(16777216),
	_11_3_21 VARCHAR(16777216),
	_11_4_21 VARCHAR(16777216),
	_11_5_21 VARCHAR(16777216),
	_11_6_21 VARCHAR(16777216),
	_11_7_21 VARCHAR(16777216),
	_11_8_21 VARCHAR(16777216),
	_11_9_21 VARCHAR(16777216),
	_11_10_21 VARCHAR(16777216),
	_11_11_21 VARCHAR(16777216),
	_11_12_21 VARCHAR(16777216),
	_11_13_21 VARCHAR(16777216),
	_11_14_21 VARCHAR(16777216),
	_11_15_21 VARCHAR(16777216),
	_11_16_21 VARCHAR(16777216),
	_11_17_21 VARCHAR(16777216),
	_11_18_21 VARCHAR(16777216),
	_11_19_21 VARCHAR(16777216),
	_11_20_21 VARCHAR(16777216),
	_11_21_21 VARCHAR(16777216),
	_11_22_21 VARCHAR(16777216),
	_11_23_21 VARCHAR(16777216),
	_11_24_21 VARCHAR(16777216),
	_11_25_21 VARCHAR(16777216),
	_11_26_21 VARCHAR(16777216),
	_11_27_21 VARCHAR(16777216),
	_11_28_21 VARCHAR(16777216),
	_11_29_21 VARCHAR(16777216),
	_11_30_21 VARCHAR(16777216),
	_12_1_21 VARCHAR(16777216),
	_12_2_21 VARCHAR(16777216),
	_12_3_21 VARCHAR(16777216),
	_12_4_21 VARCHAR(16777216),
	_12_5_21 VARCHAR(16777216),
	_12_6_21 VARCHAR(16777216),
	_12_7_21 VARCHAR(16777216),
	_12_8_21 VARCHAR(16777216),
	_12_9_21 VARCHAR(16777216),
	_12_10_21 VARCHAR(16777216),
	_12_11_21 VARCHAR(16777216),
	_12_12_21 VARCHAR(16777216),
	_12_13_21 VARCHAR(16777216),
	_12_14_21 VARCHAR(16777216),
	_12_15_21 VARCHAR(16777216),
	_12_16_21 VARCHAR(16777216),
	_12_17_21 VARCHAR(16777216),
	_12_18_21 VARCHAR(16777216),
	_12_19_21 VARCHAR(16777216),
	_12_20_21 VARCHAR(16777216),
	_12_21_21 VARCHAR(16777216),
	_12_22_21 VARCHAR(16777216),
	_12_23_21 VARCHAR(16777216),
	_12_24_21 VARCHAR(16777216),
	_12_25_21 VARCHAR(16777216),
	_12_26_21 VARCHAR(16777216),
	_12_27_21 VARCHAR(16777216),
	_12_28_21 VARCHAR(16777216),
	_12_29_21 VARCHAR(16777216),
	_12_30_21 VARCHAR(16777216),
	_12_31_21 VARCHAR(16777216),
	_1_1_22 VARCHAR(16777216),
	_1_2_22 VARCHAR(16777216),
	_1_3_22 VARCHAR(16777216),
	_1_4_22 VARCHAR(16777216),
	_1_5_22 VARCHAR(16777216),
	_1_6_22 VARCHAR(16777216),
	_1_7_22 VARCHAR(16777216),
	_1_8_22 VARCHAR(16777216),
	_1_9_22 VARCHAR(16777216),
	_1_10_22 VARCHAR(16777216),
	_1_11_22 VARCHAR(16777216),
	_1_12_22 VARCHAR(16777216),
	_1_13_22 VARCHAR(16777216),
	_1_14_22 VARCHAR(16777216),
	_1_15_22 VARCHAR(16777216),
	_1_16_22 VARCHAR(16777216),
	_1_17_22 VARCHAR(16777216),
	_1_18_22 VARCHAR(16777216),
	_1_19_22 VARCHAR(16777216),
	_1_20_22 VARCHAR(16777216),
	_1_21_22 VARCHAR(16777216),
	_1_22_22 VARCHAR(16777216),
	_1_23_22 VARCHAR(16777216),
	_1_24_22 VARCHAR(16777216),
	_1_25_22 VARCHAR(16777216),
	_1_26_22 VARCHAR(16777216),
	_1_27_22 VARCHAR(16777216),
	_1_28_22 VARCHAR(16777216),
	_1_29_22 VARCHAR(16777216),
	_1_30_22 VARCHAR(16777216),
	_1_31_22 VARCHAR(16777216),
	_2_1_22 VARCHAR(16777216),
	_2_2_22 VARCHAR(16777216),
	_2_3_22 VARCHAR(16777216),
	_2_4_22 VARCHAR(16777216),
	_2_5_22 VARCHAR(16777216),
	_2_6_22 VARCHAR(16777216),
	_2_7_22 VARCHAR(16777216),
	_2_8_22 VARCHAR(16777216),
	_2_9_22 VARCHAR(16777216),
	_2_10_22 VARCHAR(16777216),
	_2_11_22 VARCHAR(16777216),
	_2_12_22 VARCHAR(16777216),
	_2_13_22 VARCHAR(16777216),
	_2_14_22 VARCHAR(16777216),
	_2_15_22 VARCHAR(16777216),
	_2_16_22 VARCHAR(16777216),
	_2_17_22 VARCHAR(16777216),
	_2_18_22 VARCHAR(16777216),
	_2_19_22 VARCHAR(16777216),
	_2_20_22 VARCHAR(16777216),
	_2_21_22 VARCHAR(16777216),
	_2_22_22 VARCHAR(16777216),
	_2_23_22 VARCHAR(16777216),
	_2_24_22 VARCHAR(16777216),
	_2_25_22 VARCHAR(16777216),
	_2_26_22 VARCHAR(16777216),
	_2_27_22 VARCHAR(16777216),
	_2_28_22 VARCHAR(16777216),
	_3_1_22 VARCHAR(16777216),
	_3_2_22 VARCHAR(16777216),
	_3_3_22 VARCHAR(16777216),
	_3_4_22 VARCHAR(16777216),
	_3_5_22 VARCHAR(16777216),
	_3_6_22 VARCHAR(16777216),
	_3_7_22 VARCHAR(16777216),
	_3_8_22 VARCHAR(16777216),
	_3_9_22 VARCHAR(16777216),
	_3_10_22 VARCHAR(16777216),
	_3_11_22 VARCHAR(16777216),
	_3_12_22 VARCHAR(16777216),
	_3_13_22 VARCHAR(16777216),
	_3_14_22 VARCHAR(16777216),
	_3_15_22 VARCHAR(16777216),
	_3_16_22 VARCHAR(16777216),
	_3_17_22 VARCHAR(16777216),
	_3_18_22 VARCHAR(16777216),
	_3_19_22 VARCHAR(16777216),
	_3_20_22 VARCHAR(16777216),
	_3_21_22 VARCHAR(16777216),
	_3_22_22 VARCHAR(16777216),
	_3_23_22 VARCHAR(16777216),
	_3_24_22 VARCHAR(16777216),
	_3_25_22 VARCHAR(16777216),
	_3_26_22 VARCHAR(16777216),
	_3_27_22 VARCHAR(16777216),
	_3_28_22 VARCHAR(16777216),
	_3_29_22 VARCHAR(16777216),
	_3_30_22 VARCHAR(16777216),
	_3_31_22 VARCHAR(16777216),
	_4_1_22 VARCHAR(16777216),
	_4_2_22 VARCHAR(16777216),
	_4_3_22 VARCHAR(16777216),
	_4_4_22 VARCHAR(16777216),
	_4_5_22 VARCHAR(16777216),
	_4_6_22 VARCHAR(16777216),
	_4_7_22 VARCHAR(16777216),
	_4_8_22 VARCHAR(16777216),
	_4_9_22 VARCHAR(16777216),
	_4_10_22 VARCHAR(16777216),
	_4_11_22 VARCHAR(16777216),
	_4_12_22 VARCHAR(16777216),
	_4_13_22 VARCHAR(16777216),
	_4_14_22 VARCHAR(16777216),
	_4_15_22 VARCHAR(16777216),
	_4_16_22 VARCHAR(16777216),
	_4_17_22 VARCHAR(16777216),
	_4_18_22 VARCHAR(16777216),
	_4_19_22 VARCHAR(16777216),
	_4_20_22 VARCHAR(16777216),
	_4_21_22 VARCHAR(16777216),
	_4_22_22 VARCHAR(16777216),
	_4_23_22 VARCHAR(16777216),
	_4_24_22 VARCHAR(16777216),
	_4_25_22 VARCHAR(16777216),
	_4_26_22 VARCHAR(16777216),
	_4_27_22 VARCHAR(16777216),
	_4_28_22 VARCHAR(16777216),
	_4_29_22 VARCHAR(16777216),
	_4_30_22 VARCHAR(16777216),
	_5_1_22 VARCHAR(16777216),
	_5_2_22 VARCHAR(16777216),
	_5_3_22 VARCHAR(16777216),
	_5_4_22 VARCHAR(16777216),
	_5_5_22 VARCHAR(16777216),
	_5_6_22 VARCHAR(16777216),
	_5_7_22 VARCHAR(16777216),
	_5_8_22 VARCHAR(16777216),
	_5_9_22 VARCHAR(16777216),
	_5_10_22 VARCHAR(16777216),
	_5_11_22 VARCHAR(16777216),
	_5_12_22 VARCHAR(16777216),
	_5_13_22 VARCHAR(16777216),
	_5_14_22 VARCHAR(16777216),
	_5_15_22 VARCHAR(16777216),
	_5_16_22 VARCHAR(16777216),
	_5_17_22 VARCHAR(16777216),
	_5_18_22 VARCHAR(16777216),
	_5_19_22 VARCHAR(16777216),
	_5_20_22 VARCHAR(16777216),
	_5_21_22 VARCHAR(16777216),
	_5_22_22 VARCHAR(16777216),
	_5_23_22 VARCHAR(16777216),
	_5_24_22 VARCHAR(16777216),
	_5_25_22 VARCHAR(16777216),
	_5_26_22 VARCHAR(16777216),
	_5_27_22 VARCHAR(16777216),
	_5_28_22 VARCHAR(16777216),
	_5_29_22 VARCHAR(16777216),
	_5_30_22 VARCHAR(16777216),
	_5_31_22 VARCHAR(16777216),
	_6_1_22 VARCHAR(16777216),
	_6_2_22 VARCHAR(16777216),
	_6_3_22 VARCHAR(16777216),
	_6_4_22 VARCHAR(16777216),
	_6_5_22 VARCHAR(16777216),
	_6_6_22 VARCHAR(16777216),
	_6_7_22 VARCHAR(16777216),
	_6_8_22 VARCHAR(16777216),
	_6_9_22 VARCHAR(16777216),
	_6_10_22 VARCHAR(16777216),
	_6_11_22 VARCHAR(16777216),
	_6_12_22 VARCHAR(16777216),
	_6_13_22 VARCHAR(16777216),
	_6_14_22 VARCHAR(16777216),
	_6_15_22 VARCHAR(16777216),
	_6_16_22 VARCHAR(16777216),
	_6_17_22 VARCHAR(16777216),
	_6_18_22 VARCHAR(16777216),
	_6_19_22 VARCHAR(16777216),
	_6_20_22 VARCHAR(16777216),
	_6_21_22 VARCHAR(16777216),
	_6_22_22 VARCHAR(16777216),
	_6_23_22 VARCHAR(16777216),
	_6_24_22 VARCHAR(16777216),
	_6_25_22 VARCHAR(16777216),
	_6_26_22 VARCHAR(16777216),
	_6_27_22 VARCHAR(16777216),
	_6_28_22 VARCHAR(16777216),
	_6_29_22 VARCHAR(16777216),
	_6_30_22 VARCHAR(16777216),
	_7_1_22 VARCHAR(16777216),
	_7_2_22 VARCHAR(16777216),
	_7_3_22 VARCHAR(16777216),
	_7_4_22 VARCHAR(16777216),
	_7_5_22 VARCHAR(16777216),
	_7_6_22 VARCHAR(16777216),
	_7_7_22 VARCHAR(16777216),
	_7_8_22 VARCHAR(16777216),
	_7_9_22 VARCHAR(16777216),
	_7_10_22 VARCHAR(16777216),
	_7_11_22 VARCHAR(16777216),
	_7_12_22 VARCHAR(16777216),
	_7_13_22 VARCHAR(16777216),
	_7_14_22 VARCHAR(16777216),
	_7_15_22 VARCHAR(16777216),
	_7_16_22 VARCHAR(16777216),
	_7_17_22 VARCHAR(16777216),
	_7_18_22 VARCHAR(16777216),
	_7_19_22 VARCHAR(16777216),
	_7_20_22 VARCHAR(16777216),
	_7_21_22 VARCHAR(16777216),
	_7_22_22 VARCHAR(16777216),
	_7_23_22 VARCHAR(16777216),
	_7_24_22 VARCHAR(16777216),
	_7_25_22 VARCHAR(16777216),
	_7_26_22 VARCHAR(16777216),
	_7_27_22 VARCHAR(16777216),
	_7_28_22 VARCHAR(16777216),
	_7_29_22 VARCHAR(16777216),
	_7_30_22 VARCHAR(16777216),
	_7_31_22 VARCHAR(16777216),
	_8_1_22 VARCHAR(16777216),
	_8_2_22 VARCHAR(16777216),
	_8_3_22 VARCHAR(16777216),
	_8_4_22 VARCHAR(16777216),
	_8_5_22 VARCHAR(16777216),
	_8_6_22 VARCHAR(16777216),
	_8_7_22 VARCHAR(16777216),
	_8_8_22 VARCHAR(16777216),
	_8_9_22 VARCHAR(16777216),
	_8_10_22 VARCHAR(16777216),
	_8_11_22 VARCHAR(16777216),
	_8_12_22 VARCHAR(16777216),
	_8_13_22 VARCHAR(16777216),
	_8_14_22 VARCHAR(16777216),
	_8_15_22 VARCHAR(16777216),
	_8_16_22 VARCHAR(16777216),
	_8_17_22 VARCHAR(16777216),
	_8_18_22 VARCHAR(16777216),
	_8_19_22 VARCHAR(16777216),
	_8_20_22 VARCHAR(16777216),
	_8_21_22 VARCHAR(16777216),
	_8_22_22 VARCHAR(16777216),
	_8_23_22 VARCHAR(16777216),
	_8_24_22 VARCHAR(16777216),
	_8_25_22 VARCHAR(16777216),
	_8_26_22 VARCHAR(16777216),
	_8_27_22 VARCHAR(16777216),
	_8_28_22 VARCHAR(16777216),
	_8_29_22 VARCHAR(16777216),
	_8_30_22 VARCHAR(16777216),
	_8_31_22 VARCHAR(16777216),
	_9_1_22 VARCHAR(16777216),
	_9_2_22 VARCHAR(16777216),
	_9_3_22 VARCHAR(16777216),
	_9_4_22 VARCHAR(16777216),
	_9_5_22 VARCHAR(16777216),
	_9_6_22 VARCHAR(16777216),
	_9_7_22 VARCHAR(16777216),
	_9_8_22 VARCHAR(16777216),
	_9_9_22 VARCHAR(16777216),
	_9_10_22 VARCHAR(16777216),
	_9_11_22 VARCHAR(16777216),
	_9_12_22 VARCHAR(16777216),
	_9_13_22 VARCHAR(16777216),
	_9_14_22 VARCHAR(16777216),
	_9_15_22 VARCHAR(16777216),
	_9_16_22 VARCHAR(16777216),
	_9_17_22 VARCHAR(16777216),
	_9_18_22 VARCHAR(16777216),
	_9_19_22 VARCHAR(16777216),
	_9_20_22 VARCHAR(16777216),
	_9_21_22 VARCHAR(16777216),
	_9_22_22 VARCHAR(16777216),
	_9_23_22 VARCHAR(16777216),
	_9_24_22 VARCHAR(16777216),
	_9_25_22 VARCHAR(16777216),
	_9_26_22 VARCHAR(16777216),
	_9_27_22 VARCHAR(16777216),
	_9_28_22 VARCHAR(16777216),
	_9_29_22 VARCHAR(16777216),
	_9_30_22 VARCHAR(16777216),
	_10_1_22 VARCHAR(16777216),
	_10_2_22 VARCHAR(16777216),
	_10_3_22 VARCHAR(16777216),
	_10_4_22 VARCHAR(16777216),
	_10_5_22 VARCHAR(16777216),
	_10_6_22 VARCHAR(16777216),
	_10_7_22 VARCHAR(16777216),
	_10_8_22 VARCHAR(16777216),
	_10_9_22 VARCHAR(16777216),
	_10_10_22 VARCHAR(16777216),
	_10_11_22 VARCHAR(16777216),
	_10_12_22 VARCHAR(16777216),
	_10_13_22 VARCHAR(16777216),
	_10_14_22 VARCHAR(16777216),
	_10_15_22 VARCHAR(16777216),
	_10_16_22 VARCHAR(16777216),
	_10_17_22 VARCHAR(16777216),
	_10_18_22 VARCHAR(16777216),
	_10_19_22 VARCHAR(16777216),
	_10_20_22 VARCHAR(16777216),
	_10_21_22 VARCHAR(16777216),
	_10_22_22 VARCHAR(16777216),
	_10_23_22 VARCHAR(16777216),
	_10_24_22 VARCHAR(16777216),
	_10_25_22 VARCHAR(16777216),
	_10_26_22 VARCHAR(16777216),
	_10_27_22 VARCHAR(16777216),
	_10_28_22 VARCHAR(16777216),
	_10_29_22 VARCHAR(16777216),
	_10_30_22 VARCHAR(16777216),
	_10_31_22 VARCHAR(16777216),
	_11_1_22 VARCHAR(16777216),
	_11_2_22 VARCHAR(16777216),
	_11_3_22 VARCHAR(16777216),
	_11_4_22 VARCHAR(16777216),
	_11_5_22 VARCHAR(16777216),
	_11_6_22 VARCHAR(16777216),
	_11_7_22 VARCHAR(16777216),
	_11_8_22 VARCHAR(16777216),
	_11_9_22 VARCHAR(16777216),
	_11_10_22 VARCHAR(16777216),
	_11_11_22 VARCHAR(16777216),
	_11_12_22 VARCHAR(16777216),
	_11_13_22 VARCHAR(16777216),
	_11_14_22 VARCHAR(16777216),
	_11_15_22 VARCHAR(16777216),
	_11_16_22 VARCHAR(16777216),
	_11_17_22 VARCHAR(16777216),
	_11_18_22 VARCHAR(16777216),
	_11_19_22 VARCHAR(16777216),
	_11_20_22 VARCHAR(16777216),
	_11_21_22 VARCHAR(16777216),
	_11_22_22 VARCHAR(16777216),
	_11_23_22 VARCHAR(16777216),
	_11_24_22 VARCHAR(16777216),
	_11_25_22 VARCHAR(16777216),
	_11_26_22 VARCHAR(16777216),
	_11_27_22 VARCHAR(16777216),
	_11_28_22 VARCHAR(16777216),
	_11_29_22 VARCHAR(16777216),
	_11_30_22 VARCHAR(16777216),
	_12_1_22 VARCHAR(16777216),
	_12_2_22 VARCHAR(16777216),
	_12_3_22 VARCHAR(16777216),
	_12_4_22 VARCHAR(16777216),
	_12_5_22 VARCHAR(16777216),
	_12_6_22 VARCHAR(16777216),
	_12_7_22 VARCHAR(16777216),
	_12_8_22 VARCHAR(16777216),
	_12_9_22 VARCHAR(16777216),
	_12_10_22 VARCHAR(16777216),
	_12_11_22 VARCHAR(16777216),
	_12_12_22 VARCHAR(16777216),
	_12_13_22 VARCHAR(16777216),
	_12_14_22 VARCHAR(16777216),
	_12_15_22 VARCHAR(16777216),
	_12_16_22 VARCHAR(16777216),
	_12_17_22 VARCHAR(16777216),
	_12_18_22 VARCHAR(16777216),
	_12_19_22 VARCHAR(16777216),
	_12_20_22 VARCHAR(16777216),
	_12_21_22 VARCHAR(16777216),
	_12_22_22 VARCHAR(16777216),
	_12_23_22 VARCHAR(16777216),
	_12_24_22 VARCHAR(16777216),
	_12_25_22 VARCHAR(16777216),
	_12_26_22 VARCHAR(16777216),
	_12_27_22 VARCHAR(16777216),
	_12_28_22 VARCHAR(16777216),
	_12_29_22 VARCHAR(16777216),
	_12_30_22 VARCHAR(16777216),
	_12_31_22 VARCHAR(16777216),
	_1_1_23 VARCHAR(16777216),
	_1_2_23 VARCHAR(16777216),
	_1_3_23 VARCHAR(16777216),
	_1_4_23 VARCHAR(16777216),
	_1_5_23 VARCHAR(16777216),
	_1_6_23 VARCHAR(16777216),
	_1_7_23 VARCHAR(16777216),
	_1_8_23 VARCHAR(16777216),
	_1_9_23 VARCHAR(16777216),
	_1_10_23 VARCHAR(16777216),
	_1_11_23 VARCHAR(16777216),
	_1_12_23 VARCHAR(16777216),
	_1_13_23 VARCHAR(16777216),
	_1_14_23 VARCHAR(16777216),
	_1_15_23 VARCHAR(16777216),
	_1_16_23 VARCHAR(16777216),
	_1_17_23 VARCHAR(16777216),
	_1_18_23 VARCHAR(16777216),
	_1_19_23 VARCHAR(16777216),
	_1_20_23 VARCHAR(16777216),
	_1_21_23 VARCHAR(16777216),
	_1_22_23 VARCHAR(16777216),
	_1_23_23 VARCHAR(16777216),
	_1_24_23 VARCHAR(16777216),
	_1_25_23 VARCHAR(16777216),
	_1_26_23 VARCHAR(16777216),
	_1_27_23 VARCHAR(16777216),
	_1_28_23 VARCHAR(16777216),
	_1_29_23 VARCHAR(16777216),
	_1_30_23 VARCHAR(16777216),
	_1_31_23 VARCHAR(16777216),
	_2_1_23 VARCHAR(16777216),
	_2_2_23 VARCHAR(16777216),
	_2_3_23 VARCHAR(16777216),
	_2_4_23 VARCHAR(16777216),
	_2_5_23 VARCHAR(16777216),
	_2_6_23 VARCHAR(16777216),
	_2_7_23 VARCHAR(16777216),
	_2_8_23 VARCHAR(16777216),
	_2_9_23 VARCHAR(16777216),
	_2_10_23 VARCHAR(16777216),
	_2_11_23 VARCHAR(16777216),
	_2_12_23 VARCHAR(16777216),
	_2_13_23 VARCHAR(16777216),
	_2_14_23 VARCHAR(16777216),
	_2_15_23 VARCHAR(16777216),
	_2_16_23 VARCHAR(16777216),
	_2_17_23 VARCHAR(16777216),
	_2_18_23 VARCHAR(16777216),
	_2_19_23 VARCHAR(16777216),
	_2_20_23 VARCHAR(16777216),
	_2_21_23 VARCHAR(16777216),
	_2_22_23 VARCHAR(16777216),
	_2_23_23 VARCHAR(16777216),
	_2_24_23 VARCHAR(16777216),
	_2_25_23 VARCHAR(16777216),
	_2_26_23 VARCHAR(16777216),
	_2_27_23 VARCHAR(16777216),
	_2_28_23 VARCHAR(16777216),
	_3_1_23 VARCHAR(16777216),
	_3_2_23 VARCHAR(16777216),
	_3_3_23 VARCHAR(16777216),
	_3_4_23 VARCHAR(16777216),
	_3_5_23 VARCHAR(16777216),
	_3_6_23 VARCHAR(16777216),
	_3_7_23 VARCHAR(16777216),
	_3_8_23 VARCHAR(16777216),
	_3_9_23 VARCHAR(16777216)
);"

,3
table_name,SUMMARY
description,
DDL,"create or replace TABLE SUMMARY (
	""province_state"" VARCHAR(16777216),
	""country_region"" VARCHAR(16777216),
	""date"" DATE,
	""latitude"" FLOAT,
	""longitude"" FLOAT,
	""location_geom"" BINARY(8388608),
	""confirmed"" NUMBER(38,0),
	""deaths"" NUMBER(38,0),
	""recovered"" VARCHAR(16777216),
	""active"" NUMBER(38,0),
	""fips"" VARCHAR(16777216),
	""admin2"" VARCHAR(16777216),
	""combined_key"" VARCHAR(16777216)
);"

Database Name: COVID19_JHU_WORLD_BANK
Schema Name: WORLD_BANK_GLOBAL_POPULATION
DDL describes table information.
,0
table_name,POPULATION_BY_COUNTRY
description,
DDL,"create or replace TABLE POPULATION_BY_COUNTRY (
	""country"" VARCHAR(16777216),
	""country_code"" VARCHAR(16777216),
	""year_1960"" NUMBER(38,0),
	""year_1961"" NUMBER(38,0),
	""year_1962"" NUMBER(38,0),
	""year_1963"" NUMBER(38,0),
	""year_1964"" NUMBER(38,0),
	""year_1965"" NUMBER(38,0),
	""year_1966"" NUMBER(38,0),
	""year_1967"" NUMBER(38,0),
	""year_1968"" NUMBER(38,0),
	""year_1969"" NUMBER(38,0),
	""year_1970"" NUMBER(38,0),
	""year_1971"" NUMBER(38,0),
	""year_1972"" NUMBER(38,0),
	""year_1973"" NUMBER(38,0),
	""year_1974"" NUMBER(38,0),
	""year_1975"" NUMBER(38,0),
	""year_1976"" NUMBER(38,0),
	""year_1977"" NUMBER(38,0),
	""year_1978"" NUMBER(38,0),
	""year_1979"" NUMBER(38,0),
	""year_1980"" NUMBER(38,0),
	""year_1981"" NUMBER(38,0),
	""year_1982"" NUMBER(38,0),
	""year_1983"" NUMBER(38,0),
	""year_1984"" NUMBER(38,0),
	""year_1985"" NUMBER(38,0),
	""year_1986"" NUMBER(38,0),
	""year_1987"" NUMBER(38,0),
	""year_1988"" NUMBER(38,0),
	""year_1989"" NUMBER(38,0),
	""year_1990"" NUMBER(38,0),
	""year_1991"" NUMBER(38,0),
	""year_1992"" NUMBER(38,0),
	""year_1993"" NUMBER(38,0),
	""year_1994"" NUMBER(38,0),
	""year_1995"" NUMBER(38,0),
	""year_1996"" NUMBER(38,0),
	""year_1997"" NUMBER(38,0),
	""year_1998"" NUMBER(38,0),
	""year_1999"" NUMBER(38,0),
	""year_2000"" NUMBER(38,0),
	""year_2001"" NUMBER(38,0),
	""year_2002"" NUMBER(38,0),
	""year_2003"" NUMBER(38,0),
	""year_2004"" NUMBER(38,0),
	""year_2005"" NUMBER(38,0),
	""year_2006"" NUMBER(38,0),
	""year_2007"" NUMBER(38,0),
	""year_2008"" NUMBER(38,0),
	""year_2009"" NUMBER(38,0),
	""year_2010"" NUMBER(38,0),
	""year_2011"" NUMBER(38,0),
	""year_2012"" NUMBER(38,0),
	""year_2013"" NUMBER(38,0),
	""year_2014"" NUMBER(38,0),
	""year_2015"" NUMBER(38,0),
	""year_2016"" NUMBER(38,0),
	""year_2017"" NUMBER(38,0),
	""year_2018"" NUMBER(38,0),
	""year_2019"" NUMBER(38,0)
);"

Database Name: COVID19_JHU_WORLD_BANK
Schema Name: WORLD_BANK_HEALTH_POPULATION
DDL describes table information.
,0
table_name,COUNTRY_SERIES_DEFINITIONS
description,
DDL,"create or replace TABLE COUNTRY_SERIES_DEFINITIONS (
	""country_code"" VARCHAR(16777216),
	""series_code"" VARCHAR(16777216),
	""description"" VARCHAR(16777216)
);"

,1
table_name,COUNTRY_SUMMARY
description,
DDL,"create or replace TABLE COUNTRY_SUMMARY (
	""country_code"" VARCHAR(16777216),
	""short_name"" VARCHAR(16777216),
	""table_name"" VARCHAR(16777216),
	""long_name"" VARCHAR(16777216),
	""two_alpha_code"" VARCHAR(16777216),
	""currency_unit"" VARCHAR(16777216),
	""special_notes"" VARCHAR(16777216),
	""region"" VARCHAR(16777216),
	""income_group"" VARCHAR(16777216),
	""wb_2_code"" VARCHAR(16777216),
	""national_accounts_base_year"" VARCHAR(16777216),
	""national_accounts_reference_year"" VARCHAR(16777216),
	""sna_price_valuation"" VARCHAR(16777216),
	""lending_category"" VARCHAR(16777216),
	""other_groups"" VARCHAR(16777216),
	""system_of_national_accounts"" VARCHAR(16777216),
	""alternative_conversion_factor"" VARCHAR(16777216),
	""ppp_survey_year"" VARCHAR(16777216),
	""balance_of_payments_manual_in_use"" VARCHAR(16777216),
	""external_debt_reporting_status"" VARCHAR(16777216),
	""system_of_trade"" VARCHAR(16777216),
	""government_accounting_concept"" VARCHAR(16777216),
	""imf_data_dissemination_standard"" VARCHAR(16777216),
	""latest_population_census"" VARCHAR(16777216),
	""latest_household_survey"" VARCHAR(16777216),
	""source_of_most_recent_income_and_expenditure_data"" VARCHAR(16777216),
	""vital_registration_complete"" VARCHAR(16777216),
	""latest_agricultural_census"" VARCHAR(16777216),
	""latest_industrial_data"" NUMBER(38,0),
	""latest_trade_data"" NUMBER(38,0)
);"

,2
table_name,HEALTH_NUTRITION_POPULATION
description,
DDL,"create or replace TABLE HEALTH_NUTRITION_POPULATION (
	""country_name"" VARCHAR(16777216),
	""country_code"" VARCHAR(16777216),
	""indicator_name"" VARCHAR(16777216),
	""indicator_code"" VARCHAR(16777216),
	""value"" FLOAT,
	""year"" NUMBER(38,0)
);"

,3
table_name,SERIES_SUMMARY
description,
DDL,"create or replace TABLE SERIES_SUMMARY (
	""series_code"" VARCHAR(16777216),
	""topic"" VARCHAR(16777216),
	""indicator_name"" VARCHAR(16777216),
	""short_definition"" VARCHAR(16777216),
	""long_definition"" VARCHAR(16777216),
	""unit_of_measure"" VARCHAR(16777216),
	""periodicity"" VARCHAR(16777216),
	""base_period"" NUMBER(38,0),
	""other_notes"" VARCHAR(16777216),
	""aggregation_method"" VARCHAR(16777216),
	""limitations_and_exceptions"" VARCHAR(16777216),
	""notes_from_original_source"" VARCHAR(16777216),
	""general_comments"" VARCHAR(16777216),
	""source"" VARCHAR(16777216),
	""statistical_concept_and_methodology"" VARCHAR(16777216),
	""development_relevance"" VARCHAR(16777216),
	""related_source_links"" VARCHAR(16777216),
	""other_web_links"" VARCHAR(16777216),
	""related_indicators"" VARCHAR(16777216),
	""license_type"" VARCHAR(16777216)
);"

,4
table_name,SERIES_TIMES
description,
DDL,"create or replace TABLE SERIES_TIMES (
	""series_code"" VARCHAR(16777216),
	""year"" NUMBER(38,0),
	""description"" VARCHAR(16777216)
);"

Database Name: COVID19_JHU_WORLD_BANK
Schema Name: WORLD_BANK_INTL_DEBT
DDL describes table information.
,0
table_name,COUNTRY_SERIES_DEFINITIONS
description,
DDL,"create or replace TABLE COUNTRY_SERIES_DEFINITIONS (
	""country_code"" VARCHAR(16777216),
	""series_code"" VARCHAR(16777216),
	""description"" VARCHAR(16777216)
);"

,1
table_name,COUNTRY_SUMMARY
description,
DDL,"create or replace TABLE COUNTRY_SUMMARY (
	""country_code"" VARCHAR(16777216),
	""short_name"" VARCHAR(16777216),
	""table_name"" VARCHAR(16777216),
	""long_name"" VARCHAR(16777216),
	""two_alpha_code"" VARCHAR(16777216),
	""currency_unit"" VARCHAR(16777216),
	""special_notes"" VARCHAR(16777216),
	""region"" VARCHAR(16777216),
	""income_group"" VARCHAR(16777216),
	""wb_2_code"" VARCHAR(16777216),
	""national_accounts_base_year"" VARCHAR(16777216),
	""national_accounts_reference_year"" VARCHAR(16777216),
	""sna_price_valuation"" VARCHAR(16777216),
	""lending_category"" VARCHAR(16777216),
	""other_groups"" VARCHAR(16777216),
	""system_of_national_accounts"" VARCHAR(16777216),
	""alternative_conversion_factor"" VARCHAR(16777216),
	""ppp_survey_year"" VARCHAR(16777216),
	""balance_of_payments_manual_in_use"" VARCHAR(16777216),
	""external_debt_reporting_status"" VARCHAR(16777216),
	""system_of_trade"" VARCHAR(16777216),
	""government_accounting_concept"" VARCHAR(16777216),
	""imf_data_dissemination_standard"" VARCHAR(16777216),
	""latest_population_census"" VARCHAR(16777216),
	""latest_household_survey"" VARCHAR(16777216),
	""source_of_most_recent_Income_and_expenditure_data"" VARCHAR(16777216),
	""vital_registration_complete"" VARCHAR(16777216),
	""latest_agricultural_census"" VARCHAR(16777216),
	""latest_industrial_data"" NUMBER(38,0),
	""latest_trade_data"" NUMBER(38,0),
	""latest_water_withdrawal_data"" VARCHAR(16777216)
);"

,2
table_name,SERIES_SUMMARY
description,
DDL,"create or replace TABLE SERIES_SUMMARY (
	""series_code"" VARCHAR(16777216),
	""topic"" VARCHAR(16777216),
	""indicator_name"" VARCHAR(16777216),
	""short_definition"" VARCHAR(16777216),
	""long_definition"" VARCHAR(16777216),
	""unit_of_measure"" VARCHAR(16777216),
	""periodicity"" VARCHAR(16777216),
	""base_period"" VARCHAR(16777216),
	""other_notes"" VARCHAR(16777216),
	""aggregation_method"" VARCHAR(16777216),
	""limitations_and_exceptions"" VARCHAR(16777216),
	""notes_from_original_source"" VARCHAR(16777216),
	""general_comments"" VARCHAR(16777216),
	""source"" VARCHAR(16777216),
	""statistical_concept_and_methodology"" VARCHAR(16777216),
	""development_relevance"" VARCHAR(16777216),
	""related_source_links"" VARCHAR(16777216),
	""other_web_links"" VARCHAR(16777216),
	""related_indicators"" VARCHAR(16777216),
	""license_type"" VARCHAR(16777216)
);"

,3
table_name,SERIES_TIMES
description,
DDL,"create or replace TABLE SERIES_TIMES (
	""series_code"" VARCHAR(16777216),
	""year"" NUMBER(38,0),
	""description"" VARCHAR(16777216)
);"

,4
table_name,INTERNATIONAL_DEBT
description,
DDL,"create or replace TABLE INTERNATIONAL_DEBT (
	""country_name"" VARCHAR(16777216),
	""country_code"" VARCHAR(16777216),
	""indicator_name"" VARCHAR(16777216),
	""indicator_code"" VARCHAR(16777216),
	""value"" FLOAT,
	""year"" NUMBER(38,0)
);"

Database Name: COVID19_JHU_WORLD_BANK
Schema Name: WORLD_BANK_INTL_EDUCATION
DDL describes table information.
,0
table_name,INTERNATIONAL_EDUCATION
description,
DDL,"create or replace TABLE INTERNATIONAL_EDUCATION (
	""country_name"" VARCHAR(16777216),
	""country_code"" VARCHAR(16777216),
	""indicator_name"" VARCHAR(16777216),
	""indicator_code"" VARCHAR(16777216),
	""value"" FLOAT,
	""year"" NUMBER(38,0)
);"

,1
table_name,COUNTRY_SUMMARY
description,
DDL,"create or replace TABLE COUNTRY_SUMMARY (
	""country_code"" VARCHAR(16777216),
	""short_name"" VARCHAR(16777216),
	""table_name"" VARCHAR(16777216),
	""long_name"" VARCHAR(16777216),
	""two_alpha_code"" VARCHAR(16777216),
	""currency_unit"" VARCHAR(16777216),
	""special_notes"" VARCHAR(16777216),
	""region"" VARCHAR(16777216),
	""income_group"" VARCHAR(16777216),
	""wb_two_code"" VARCHAR(16777216),
	""national_accounts_base_year"" VARCHAR(16777216),
	""national_accounts_reference_year"" VARCHAR(16777216),
	""sna_price_valuation"" VARCHAR(16777216),
	""lending_category"" VARCHAR(16777216),
	""other_groups"" VARCHAR(16777216),
	""system_of_national_accounts"" VARCHAR(16777216),
	""alternative_conversion_factor"" VARCHAR(16777216),
	""ppp_survey_year"" VARCHAR(16777216),
	""balance_of_payments_manual_in_use"" VARCHAR(16777216),
	""external_debt_reporting_status"" VARCHAR(16777216),
	""system_of_trade"" VARCHAR(16777216),
	""government_accounting_concept"" VARCHAR(16777216),
	""imf_data_dissemination_standard"" VARCHAR(16777216),
	""latest_population_census"" VARCHAR(16777216),
	""latest_household_survey"" VARCHAR(16777216),
	""source_of_most_recent_income_and_expenditure_data"" VARCHAR(16777216),
	""vital_registration_complete"" VARCHAR(16777216),
	""latest_agricultural_census"" VARCHAR(16777216),
	""latest_industrial_data"" NUMBER(38,0),
	""latest_trade_data"" NUMBER(38,0),
	""latest_water_withdrawal_data"" VARCHAR(16777216)
);"

,2
table_name,COUNTRY_SERIES_DEFINITIONS
description,
DDL,"create or replace TABLE COUNTRY_SERIES_DEFINITIONS (
	""country_code"" VARCHAR(16777216),
	""series_code"" VARCHAR(16777216),
	""description"" VARCHAR(16777216)
);"

,3
table_name,SERIES_SUMMARY
description,
DDL,"create or replace TABLE SERIES_SUMMARY (
	""series_code"" VARCHAR(16777216),
	""topic"" VARCHAR(16777216),
	""indicator_name"" VARCHAR(16777216),
	""short_definition"" VARCHAR(16777216),
	""long_definition"" VARCHAR(16777216),
	""unit_of_measure"" VARCHAR(16777216),
	""periodicity"" VARCHAR(16777216),
	""base_period"" VARCHAR(16777216),
	""other_notes"" VARCHAR(16777216),
	""aggregation_method"" VARCHAR(16777216),
	""limitations_and_exceptions"" VARCHAR(16777216),
	""notes_from_original_source"" VARCHAR(16777216),
	""general_comments"" VARCHAR(16777216),
	""source"" VARCHAR(16777216),
	""statistical_concept_and_methodology"" VARCHAR(16777216),
	""development_relevance"" VARCHAR(16777216),
	""related_source_links"" VARCHAR(16777216),
	""other_web_links"" VARCHAR(16777216),
	""related_indicators"" VARCHAR(16777216),
	""license_type"" VARCHAR(16777216)
);"

Database Name: COVID19_JHU_WORLD_BANK
Schema Name: WORLD_BANK_WDI
DDL describes table information.
,0
table_name,COUNTRY_SERIES_DEFINITIONS
description,
DDL,"create or replace TABLE COUNTRY_SERIES_DEFINITIONS (
	""country_code"" VARCHAR(16777216),
	""series_code"" VARCHAR(16777216),
	""description"" VARCHAR(16777216)
);"

,1
table_name,INDICATORS_DATA
description,
DDL,"create or replace TABLE INDICATORS_DATA (
	""country_name"" VARCHAR(16777216),
	""country_code"" VARCHAR(16777216),
	""indicator_name"" VARCHAR(16777216),
	""indicator_code"" VARCHAR(16777216),
	""value"" FLOAT,
	""year"" NUMBER(38,0)
);"

,2
table_name,SERIES_SUMMARY
description,
DDL,"create or replace TABLE SERIES_SUMMARY (
	""series_code"" VARCHAR(16777216),
	""topic"" VARCHAR(16777216),
	""indicator_name"" VARCHAR(16777216),
	""short_definition"" VARCHAR(16777216),
	""long_definition"" VARCHAR(16777216),
	""unit_of_measure"" VARCHAR(16777216),
	""periodicity"" VARCHAR(16777216),
	""base_period"" VARCHAR(16777216),
	""other_notes"" VARCHAR(16777216),
	""aggregation_method"" VARCHAR(16777216),
	""limitations_and_exceptions"" VARCHAR(16777216),
	""notes_from_original_source"" VARCHAR(16777216),
	""general_comments"" VARCHAR(16777216),
	""source"" VARCHAR(16777216),
	""statistical_concept_and_methodology"" VARCHAR(16777216),
	""development_relevance"" VARCHAR(16777216),
	""related_source_links"" VARCHAR(16777216),
	""other_web_links"" VARCHAR(16777216),
	""related_indicators"" VARCHAR(16777216),
	""license_type"" VARCHAR(16777216)
);"

,3
table_name,SERIES_TIME
description,
DDL,"create or replace TABLE SERIES_TIME (
	""series_code"" VARCHAR(16777216),
	""year"" NUMBER(38,0),
	""description"" VARCHAR(16777216)
);"

,4
table_name,COUNTRY_SUMMARY
description,
DDL,"create or replace TABLE COUNTRY_SUMMARY (
	""country_code"" VARCHAR(16777216),
	""short_name"" VARCHAR(16777216),
	""table_name"" VARCHAR(16777216),
	""long_name"" VARCHAR(16777216),
	""two_alpha_code"" VARCHAR(16777216),
	""currency_unit"" VARCHAR(16777216),
	""special_notes"" VARCHAR(16777216),
	""region"" VARCHAR(16777216),
	""income_group"" VARCHAR(16777216),
	""wb_2_code"" VARCHAR(16777216),
	""national_accounts_base_year"" VARCHAR(16777216),
	""national_accounts_reference_year"" VARCHAR(16777216),
	""sna_price_valuation"" VARCHAR(16777216),
	""lending_category"" VARCHAR(16777216),
	""other_groups"" VARCHAR(16777216),
	""system_of_national_accounts"" VARCHAR(16777216),
	""alternative_conversion_factor"" VARCHAR(16777216),
	""ppp_survey_year"" VARCHAR(16777216),
	""balance_of_payments_manual_in_use"" VARCHAR(16777216),
	""external_debt_reporting_status"" VARCHAR(16777216),
	""system_of_trade"" VARCHAR(16777216),
	""government_accounting_concept"" VARCHAR(16777216),
	""imf_data_dissemination_standard"" VARCHAR(16777216),
	""latest_population_census"" VARCHAR(16777216),
	""latest_household_survey"" VARCHAR(16777216),
	""source_of_most_recent_income_and_expenditure_data"" VARCHAR(16777216),
	""vital_registration_complete"" VARCHAR(16777216),
	""latest_agricultural_census"" VARCHAR(16777216),
	""latest_industrial_data"" VARCHAR(16777216),
	""latest_trade_data"" VARCHAR(16777216)
);"

,5
table_name,FOOTNOTES
description,
DDL,"create or replace TABLE FOOTNOTES (
	""country_code"" VARCHAR(16777216),
	""series_code"" VARCHAR(16777216),
	""year"" VARCHAR(16777216),
	""description"" VARCHAR(16777216)
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'COVID19_JHU_WORLD_BANK': {'COVID19_JHU_CSSE': ['CONFIRMED_CASES', 'DEATHS', 'RECOVERED_CASES', 'SUMMARY'], 'WORLD_BANK_GLOBAL_POPULATION': ['POPULATION_BY_COUNTRY'], 'WORLD_BANK_HEALTH_POPULATION': ['COUNTRY_SERIES_DEFINITIONS', 'COUNTRY_SUMMARY', 'HEALTH_NUTRITION_POPULATION', 'SERIES_SUMMARY', 'SERIES_TIMES'], 'WORLD_BANK_INTL_DEBT': ['COUNTRY_SERIES_DEFINITIONS', 'COUNTRY_SUMMARY', 'INTERNATIONAL_DEBT', 'SERIES_SUMMARY', 'SERIES_TIMES'], 'WORLD_BANK_INTL_EDUCATION': ['COUNTRY_SERIES_DEFINITIONS', 'COUNTRY_SUMMARY', 'INTERNATIONAL_EDUCATION', 'SERIES_SUMMARY'], 'WORLD_BANK_WDI': ['COUNTRY_SERIES_DEFINITIONS', 'COUNTRY_SUMMARY', 'FOOTNOTES', 'INDICATORS_DATA', 'SERIES_SUMMARY', 'SERIES_TIME']}}
Begin Exploring Related Columns
To address the task, we need to identify the relevant tables, columns, and conditions.

**Relevant Tables and Columns:**

1. **Table:** `COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY`
   - `"country_region"`: Used to filter data for specific countries.
   - `"date"`: Used to select data for April 20, 2020.
   - `"confirmed"`: Represents the total number of confirmed cases.
   - `"province_state"`: May need to aggregate data at the country level.

2. **Table:** `COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY`
   - `"country"`: Used to match country names with the `SUMMARY` table.
   - `"year_2019"`: Population data for 2019, used as an approximation for the 2020 population.

**Possible Conditions:**

- Filter records where `"date"` equals `'2020-04-20'`.
- Filter records where `"country_region"` is among the specified countries: `'US'`, `'France'`, `'China'`, `'Italy'`, `'Spain'`, `'Germany'`, `'Iran'`.
- Match `"country"` in the population table with `"country_region"` in the summary table.

**Exploratory SQL Queries:**

1. **Retrieve distinct dates from the `SUMMARY` table to ensure data for April 20, 2020, is available:**

   ```sql
   SELECT DISTINCT "date"
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
   LIMIT 1000;
   ```

2. **List all distinct countries present in the `SUMMARY` table:**

   ```sql
   SELECT DISTINCT "country_region"
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
   LIMIT 1000;
   ```

3. **Retrieve total confirmed cases for each country on April 20, 2020:**

   ```sql
   SELECT "country_region", SUM("confirmed") AS total_confirmed
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
   WHERE "date" = '2020-04-20'
   GROUP BY "country_region"
   LIMIT 1000;
   ```

4. **List all countries available in the `POPULATION_BY_COUNTRY` table:**

   ```sql
   SELECT DISTINCT "country"
   FROM COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
   LIMIT 1000;
   ```

5. **Retrieve population data for the specified countries for the year 2019:**

   ```sql
   SELECT "country", "year_2019" AS population_2019
   FROM COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
   WHERE "country" IN ('United States', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
   LIMIT 1000;
   ```

6. **Check for discrepancies in country naming between the two tables:**

   ```sql
   SELECT s."country_region" AS summary_country, p."country" AS population_country
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY s
   LEFT JOIN COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY p
     ON s."country_region" = p."country"
   WHERE s."country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
   GROUP BY s."country_region", p."country"
   LIMIT 1000;
   ```

7. **Find out how 'US' is represented in the `POPULATION_BY_COUNTRY` table:**

   ```sql
   SELECT DISTINCT "country"
   FROM COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
   WHERE "country" LIKE '%United%'
      OR "country" LIKE '%USA%'
      OR "country" LIKE '%US%'
   LIMIT 1000;
   ```

8. **Retrieve confirmed cases for 'US' on April 20, 2020:**

   ```sql
   SELECT SUM("confirmed") AS total_confirmed
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
   WHERE "country_region" = 'US' AND "date" = '2020-04-20'
   LIMIT 1000;
   ```

9. **Retrieve population data for 'United States':**

   ```sql
   SELECT "country", "year_2019" AS population_2019
   FROM COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
   WHERE "country" = 'United States'
   LIMIT 1000;
   ```

10. **Retrieve confirmed cases and population for 'France' on April 20, 2020:**

    ```sql
    SELECT s."country_region", SUM(s."confirmed") AS total_confirmed, p."year_2019" AS population_2019
    FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY s
    JOIN COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY p
      ON s."country_region" = p."country"
    WHERE s."country_region" = 'France' AND s."date" = '2020-04-20'
    GROUP BY s."country_region", p."year_2019"
    LIMIT 1000;
    ```

11. **Identify all provinces or states under 'China' to check for aggregation needs:**

    ```sql
    SELECT DISTINCT "province_state"
    FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
    WHERE "country_region" = 'China'
    LIMIT 1000;
    ```

12. **Retrieve total confirmed cases for 'China' on April 20, 2020, aggregated over all provinces:**

    ```sql
    SELECT SUM("confirmed") AS total_confirmed
    FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
    WHERE "country_region" = 'China' AND "date" = '2020-04-20'
    LIMIT 1000;
    ```

13. **Check if there are any NULL values in the 'confirmed' cases column on April 20, 2020:**

    ```sql
    SELECT COUNT(*)
    FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
    WHERE "date" = '2020-04-20' AND "confirmed" IS NULL
    LIMIT 1000;
    ```

14. **Retrieve confirmed cases for all specified countries on April 20, 2020:**

    ```sql
    SELECT "country_region", SUM("confirmed") AS total_confirmed
    FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
    WHERE "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran') AND "date" = '2020-04-20'
    GROUP BY "country_region"
    LIMIT 1000;
    ```

15. **Retrieve population data for all countries from the `POPULATION_BY_COUNTRY` table to compare with the `SUMMARY` table:**

    ```sql
    SELECT "country", "year_2019" AS population_2019
    FROM COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
    LIMIT 1000;
    ```

These exploratory queries are designed to:

- Understand the data available in both the `SUMMARY` and `POPULATION_BY_COUNTRY` tables.
- Identify any discrepancies in country names between the two datasets.
- Ensure that data for April 20, 2020, is present and can be accurately retrieved.
- Verify that population data is available for the specified countries.
- Check for data completeness and potential null values that could affect calculations.
- Determine if data aggregation is necessary (e.g., summing over provinces for countries like China).

By executing these queries, we can better prepare to calculate the total confirmed COVID-19 cases and the number of cases per 100,000 people for the specified countries on April 20, 2020.Query:
SELECT DISTINCT "date"
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
   LIMIT 1000;
Answer:
Too long, hard cut:
date
2020-11-06
2020-05-09
2022-01-30
2021-04-08
2021-08-06
2021-06-10
2022-12-31
2020-01-26
2021-03-20
2021-07-26
2020-03-28
2020-04-04
2020-09-19
2021-10-14
2021-01-18
2022-04-13
2021-04-16
2020-12-16
2022-02-10
2022-03-23
2020-07-19
2022-09-03
2022-11-27
2020-10-29
2022-11-12
2021-03-31
2022-03-31
2021-11-05
2021-08-01
2022-03-18
2020-09-18
2021-10-13
2022-11-19
2021-08-15
2021-05-08
2022-09-22
2020-04-05
2022-11-24
2022-01-03
2020-12-21
2021-06-25
2021-09-05
2022-11-22
2021-11-30
2021-10-23
2020-07-18
2020-06-01
2021-10-26
2022-06-28
2021-01-15
2020-04-15
2022-11-04
2021-03-19
2020-05-07
2022-06-15
2021-01-01
2022-07-23
2020-12-02
2021-06-27
2021-02-20
2022-04-01
2021-12-06
2020-02-28
2021-01-03
2020-12-03
2021-07-03
2021-01-21
2022-05-08
2020-03-04
2021-05-12
2022-04-12
2021-01-23
2023-01-18
2022-05-06
2021-06-16
2021-06-23
2022-10-16
2021-08-23
2020-12-04
2021-09-28
2021-01-28
2022-01-08
2020-02-17
2021-07-17
2021-04-27
2020-08-16
2023-01-05
2021-03-01
2020-03-23
2020-01-24
2020-01-31
2021-11-01
2021-08-05
2022-10-14
2021-02-03
2022-01-05
2022-11-25
2020-09-01
2020-08-05
2021-04-05
2021-03-23
2022-06-21
2021-10-03
2022-10-30
2020-08-15
2022-08-21
2020-02-03
2021-09-03
2023-02-01
2023-02-28
2020-04-09
2023-03-07
2020-12-20
2022-09-09
2022-07-30
2022-10-13
2020-06-25
2022-04-16
2020-08-25
2022-04-06
2023-01-21
2021-05-18
2022-03-07
2020-11-21
2020-10-15
2023-02-25
2022-02-13
2021-10-18
2020-08-09
2021-02-24
2020-11-15
2022-08-24
2022-11-13
2021-05-11
2021-09-04
2021-10-19
2022-07-29
2022-03-30
2021-03-02
2022-01-14
2021-04-10
2022-10-25
2021-11-07
2020-08-10
2023-01-13
2020-09-28
2020-07-31
2020-02-11
2022-05-05
2020-02-24
2022-06-13
2022-10-07
2020-09-26
2021-02-04
2021-04-06
2022-04-17
2020-06-21
2021-09-17
2020-03-02
2023-02-12
2021-09-01
2022-05-25
2021-11-25
2020-12-08
2022-02-17
2022-12-01
2020-12-24
2021-03-09
2020-06-12
2022-11-11
2022-06-23
2022-07-16
2020-03-14
2022-12-19
2021-11-29
2021-05-24
2022-01-21
2022-01-04
2020-06-30
2020-07-30
2021-01-24
2022-12-04
2022-03-10
2023-02-27
2020-05-19
2023-01-30
2021-04-09
2021-01-25
2022-11-01
2020-05-06
2020-12-19
2021-04-23
2020-07-14
2021-02-11
2021-12-16
2020-02-27
2022-12-12
2022-07-08
2021-06-11
2022-09-13
2022-03-16
2022-02-23
2022-12-28
2022-11-02
2021-03-18
2021-09-10
2020-07-26
2021-11-19
2022-04-02
2020-09-22
2021-08-27
2020-02-20
2020-03-20
2022-11-30
2022-03-05
2020-10-17
2020-04-16
2022-09-17
2021-10-08
2021-11-03
2021-08-03
2022-03-29
2020-11-16
2021-08-04
2020-09-11
2022-05-10
2021-05-14
2022-12-23
2022-06-14
2020-05-30
2021-12-02
2020-04-21
2021-07-10
2022-02-27
2022-08-30
2020-05-29
2022-05-17
2020-11-17
2020-05-24
2020-03-29
2020-06-24
2021-04-20
2020-05-17
2022-09-02
2022-09-30
2020-07-09
2020-05-25
2020-05-28
2022-08-23
2022-07-19
2022-07-25
2022-10-09
2020-06-10
2021-06-18
2022-05-16
2021-01-10
2021-12-04
2020-09-03
2020-02-01
2021-02-22
2022-01-29
2021-01-14
2023-02-09
2020-12-25
2022-04-10
2020-08-26
2020-08-20
2022-07-20
2021-06-14
2021-12-29
2020-11-27
2023-02-04
2020-04-17
2022-06-30
2021-07-11
2021-07-13
2020-02-22
2020-03-06
2022-09-19
2022-07-09
2023-03-04
2022-11-09
2021-10-12
2022-10-15
2020-06-20
2021-05-02
2022-03-27
2020-09-09
2021-06-19
2021-09-29
2023-01-23
2020-04-01
2020-07-25
2020-04-07
2021-04-29
2022-06-25
2023-01-03
2020-07-07
2020-09-13
2021-07-19
2020-10-28
2021-03-12
2020-10-25
2023-02-14
2020-04-10
2021-03-24
2021-12-08
2021-11-28
2022-12-16
2023-03-08
2020-08-23
2020-02-21
2022-12-14
2020-09-15
2020-10-21
2021-11-21
2020-08-19
2020-12-18
2020-12-28
2022-08-01
2021-12-12
2020-04-12
2020-07-05
2021-12-03
2020-08-11
2021-05-27
2020-03-31
2020-07-06
2020-04-23
2021-05-13
2021-02-21
2023-01-11
2020-10-31
2021-04-25
2022-10-11
2022-07-07
2023-01-14
2022-02-07
2022-11-03
2020-06-19
2020-08-06
2020-05-01
2022-03-03
2021-09-06
2020-08-12
2021-05-19
2020-02-13
2020-12-31
2021-01-31
2022-04-28
2022-03-11
2020-08-29
2021-09-13
2022-06-11
2022-07-28
2021-04-11
2020-03-09
2020-02-07
2023-03-03
2023-02-23
2021-03-21
2023-02-18
2022-08-11
2020-02-19
2020-06-14
2020-11-22
2023-01-08
2022-04-18
2020-01-27
2021-08-07
2021-04-07
2020-11-09
2020-06-04
2022-12-08
2021-08-11
2020-08-04
2022-07-13
2021-04-18
2020-05-16
2020-06-16
2022-10-20
2020-07-16
2021-03-10
2020-12-11
2021-07-24
2021-10-24
2021-12-18
2020-09-23
2021-02-05
2022-07-11
2021-12-26
2021-05-03
2023-03-06
2022-01-26
2022-07-31
2021-05-10
2021-12-23
2020-01-30
2020-10-13
2020-11-28
2020-07-23
2022-04-05
2022-06-05
2021-08-10
2022-12-09
2022-04-22
2022-04-23
2021-04-17
2021-09-27
2023-01-04
2021-07-07
2022-08-05
2022-02-25
2021-06-17
2022-07-18
2021-09-07
2022-06-02
2020-06-08
2021-03-14
2021-06-04
2021-07-04
2021-07-12
2021-03-06
2022-05-01
2022-06-26
2021-01-27
2022-11-29
2022-06-09
2022-07-26
2021-03-27
2021-01-11
2020-12-10
2020-06-28
2021-08-25
2022-07-14
2021-02-17
2022-06-08
2020-09-07
2020-10-16
2022-09-25
2023-02-20
2021-12-15
2021-08-17
2020-11-30
2021-04-26
2021-07-09
2022-07-21
2020-09-12
2021-08-02
2020-03-13
2021-05-06
2022-03-17
2022-02-09
2021-10-11
2
Query:
SELECT DISTINCT "country_region"
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
   LIMIT 1000;
Answer:
country_region
US
Uzbekistan
Yemen
Zimbabwe
Andorra
Angola
Armenia
Benin
Botswana
Brazil
Cabo Verde
Cameroon
Chad
Comoros
Czechia
Fiji
Gabon
Greece
MS Zaandam
Niger
Nigeria
Chile
Congo (Kinshasa)
Costa Rica
Djibouti
Ghana
Ireland
Kenya
Kosovo
Liechtenstein
Mexico
Morocco
Nepal
Nicaragua
Sao Tome and Principe
Sudan
Tanzania
Jersey
Gibraltar
Zambia
Canada
Lithuania
Monaco
Croatia
Cuba
"Korea, South"
Lesotho
Madagascar
Nauru
Spain
Sri Lanka
Sweden
Turkey
Tunisia
Mainland China
"Bahamas, The"
Palestine
Vatican City
Mozambique
Thailand
Hong Kong
North Ireland
Channel Islands
Winter Olympics 2022
Albania
Argentina
United Arab Emirates
Azerbaijan
Bangladesh
Belize
Bosnia and Herzegovina
Brunei
Bulgaria
El Salvador
Indonesia
Italy
Malaysia
China
Dominica
France
Guatemala
Honduras
Iceland
Jordan
Kazakhstan
Mali
Mauritius
Moldova
Palau
Romania
Rwanda
Saint Kitts and Nevis
Saint Lucia
Senegal
Tajikistan
Tonga
Reunion
Estonia
Kyrgyzstan
Kuwait
Libya
Netherlands
Pakistan
Philippines
Portugal
Germany
San Marino
Serbia
Seychelles
Somalia
Summer Olympics 2020
Togo
"Gambia, The"
Puerto Rico
Trinidad and Tobago
Tuvalu
The Gambia
Aruba
Ivory Coast
Cape Verde
Republic of Ireland
Iran (Islamic Republic of)
Taipei and environs
Macao SAR
Saint Martin
Curacao
Vietnam
West Bank and Gaza
Afghanistan
Algeria
Antarctica
Austria
Australia
Bahamas
Barbados
Belarus
Belgium
Burkina Faso
Colombia
Finland
Guinea
India
Luxembourg
Bhutan
Guinea-Bissau
Israel
Jamaica
Japan
Laos
Maldives
Namibia
New Zealand
Norway
Oman
Peru
Eswatini
Lebanon
Saint Vincent and the Grenadines
Switzerland
Western Sahara
Others
Macau
Republic of the Congo
Hungary
Malta
Mauritania
Mongolia
Russia
Dominican Republic
Gambia
North Macedonia
Poland
Slovenia
Taiwan*
Timor-Leste
South Korea
Cruise Ship
Guadeloupe
Martinique
French Guiana
Greenland
occupied Palestinian territory
Guam
The Bahamas
Saint Barthelemy
East Timor
 Azerbaijan
St. Martin
Viet Nam
Cayman Islands
Uganda
Ukraine
United Kingdom
Uruguay
Vanuatu
Venezuela
Antigua and Barbuda
Bahrain
Burundi
Cambodia
Central African Republic
Cote d'Ivoire
Denmark
Diamond Princess
Ecuador
Eritrea
Guyana
Iran
Iraq
Latvia
Cyprus
Georgia
Liberia
Malawi
Marshall Islands
Panama
Paraguay
Qatar
"Korea, North"
Singapore
South Sudan
Taiwan
UK
Mayotte
Faroe Islands
Burma
Equatorial Guinea
Bolivia
Egypt
Ethiopia
Grenada
Haiti
Holy See
Kiribati
Micronesia
Montenegro
Papua New Guinea
Samoa
Saudi Arabia
Sierra Leone
Slovakia
South Africa
Suriname
Syria
Guernsey
Czech Republic
Congo (Brazzaville)
Solomon Islands
""
Republic of Korea
Hong Kong SAR
Russian Federation
Republic of Moldova
Query:
SELECT "country_region", SUM("confirmed") AS total_confirmed
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
   WHERE "date" = '2020-04-20'
   GROUP BY "country_region"
   LIMIT 1000;
Answer:
country_region,TOTAL_CONFIRMED
United Kingdom,125856
Denmark,7711
Antigua and Barbuda,23
Bahrain,1907
Bolivia,564
Burundi,5
Cambodia,122
Central African Republic,12
Cyprus,772
Diamond Princess,712
Equatorial Guinea,79
Grenada,14
Liberia,99
Malawi,17
Montenegro,312
Singapore,8014
Cote d'Ivoire,847
Ecuador,10128
Egypt,3333
Georgia,402
Guyana,65
Haiti,57
Panama,4467
Sierra Leone,43
Syria,39
Uruguay,535
Eritrea,39
Iran,83505
Iraq,1574
Papua New Guinea,7
Paraguay,208
Suriname,10
Uganda,56
Holy See,9
Burma,119
Congo (Brazzaville),160
Ethiopia,111
Slovakia,1173
Ukraine,5710
South Sudan,4
Venezuela,256
Qatar,6015
South Africa,3300
Latvia,739
Saudi Arabia,10484
US,784326
Canada,37658
Andorra,717
Angola,24
Armenia,1339
Benin,54
Botswana,20
Cameroon,1163
Chad,33
Chile,10507
Congo (Kinshasa),332
Croatia,1881
Greece,2245
Kosovo,510
Brazil,40743
Czechia,6900
Djibouti,846
Fiji,18
Gabon,120
Liechtenstein,81
Monaco,94
Mozambique,39
Nepal,31
Nicaragua,10
Niger,648
Tanzania,254
Zimbabwe,25
Cuba,1087
"Korea, South",10674
MS Zaandam,9
Sri Lanka,304
Sudan,107
Thailand,2792
Turkey,90980
Yemen,1
Cabo Verde,67
Ghana,1042
Ireland,15652
Lithuania,1326
Madagascar,121
Mexico,8261
Morocco,3046
Nigeria,665
Spain,200210
Sweden,14777
Tunisia,884
Costa Rica,662
Kenya,281
Sao Tome and Principe,4
Uzbekistan,1627
Zambia,65
China,83817
Netherlands,33588
Albania,584
Argentina,2941
Azerbaijan,1436
Bangladesh,2948
Bosnia and Herzegovina,1309
Brunei,138
El Salvador,218
Estonia,1535
Honduras,477
Somalia,237
Dominica,16
Germany,147065
Iceland,1773
Jordan,425
Kazakhstan,1852
Kuwait,1995
Rwanda,147
Saint Kitts and Nevis,15
San Marino,462
Senegal,377
Serbia,6630
Guatemala,289
Kyrgyzstan,568
Libya,51
Mauritius,328
Moldova,2548
Pakistan,8418
Philippines,6459
Portugal,20863
United Arab Emirates,7265
Malaysia,5425
France,156480
Belize,18
Bulgaria,929
Indonesia,6760
Romania,8936
Seychelles,11
Italy,181228
Mali,246
Saint Lucia,15
Togo,84
Trinidad and Tobago,114
Australia,6547
Afghanistan,1026
Algeria,2718
Austria,14795
Bahamas,60
Belarus,6264
Belgium,39983
Bhutan,5
Burkina Faso,581
Colombia,3977
Hungary,1984
Jamaica,223
Mauritania,7
Switzerland,27944
Guinea,622
Guinea-Bissau,50
India,18539
Israel,13713
Japan,10797
Luxembourg,3558
Maldives,69
Namibia,16
New Zealand,1440
North Macedonia,1225
Oman,1410
Russia,47121
Saint Vincent and the Grenadines,12
Malta,431
Vietnam,268
Western Sahara,6
Timor-Leste,22
Dominican Republic,4964
Laos,19
Barbados,75
Eswatini,24
Finland,3868
Gambia,10
Norway,7156
Peru,16325
West Bank and Gaza,449
Lebanon,677
Slovenia,1335
Mongolia,33
Poland,9593
Taiwan*,422
Query:
SELECT DISTINCT "country"
   FROM COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
   LIMIT 1000;
Answer:
country
Sint Maarten (Dutch part)
Not classified
West Bank and Gaza
Serbia
Cambodia
United Arab Emirates
Cyprus
Low income
Peru
Early-demographic dividend
Fiji
Chad
Middle East & North Africa (excluding high income)
Middle East & North Africa (IDA & IBRD countries)
Dominican Republic
Kenya
"Venezuela, RB"
Guinea
Pakistan
Latvia
Qatar
Nigeria
North Macedonia
Cabo Verde
Palau
Sao Tome and Principe
Pacific island small states
St. Martin (French part)
Faroe Islands
Ireland
Bhutan
Zambia
Isle of Man
Guatemala
Singapore
Finland
Montenegro
Barbados
Syrian Arab Republic
Costa Rica
St. Lucia
Afghanistan
Gibraltar
Low & middle income
Latin America & Caribbean (excluding high income)
World
Canada
Rwanda
Thailand
Solomon Islands
Japan
Albania
Andorra
South Asia
South Sudan
Azerbaijan
Jamaica
Portugal
Mali
"Congo, Dem. Rep."
IDA total
Zimbabwe
Sudan
OECD members
Maldives
Nauru
Namibia
South Africa
Pre-demographic dividend
Sierra Leone
Grenada
Mexico
Niger
Senegal
Trinidad and Tobago
Luxembourg
Indonesia
Cayman Islands
Ghana
Lower middle income
Saudi Arabia
Denmark
United States
Europe & Central Asia (IDA & IBRD countries)
"Yemen, Rep."
Least developed countries: UN classification
Central Europe and the Baltics
Brunei Darussalam
Philippines
Sri Lanka
China
Norway
Kosovo
Oman
Middle East & North Africa
East Asia & Pacific (IDA & IBRD countries)
San Marino
Poland
Fragile and conflict affected situations
Angola
Samoa
Honduras
Channel Islands
Burundi
Madagascar
"Macao SAR, China"
Mongolia
Other small states
Bahrain
United Kingdom
Moldova
Benin
Lebanon
Estonia
Middle income
Europe & Central Asia
Croatia
Mauritius
East Asia & Pacific
North America
Netherlands
Liberia
Lao PDR
Sub-Saharan Africa
Algeria
Armenia
Switzerland
Nepal
"Bahamas, The"
Hungary
Bulgaria
Brazil
Haiti
Germany
Europe & Central Asia (excluding high income)
Morocco
Liechtenstein
Ethiopia
Paraguay
High income
Late-demographic dividend
Tajikistan
Uruguay
Italy
Caribbean small states
Malta
"Korea, Dem. People’s Rep."
Post-demographic dividend
Lithuania
Bangladesh
Gabon
IDA blend
Panama
Vanuatu
Belgium
Spain
Euro area
IBRD only
Togo
Sub-Saharan Africa (excluding high income)
Puerto Rico
Greenland
Turkey
"Micronesia, Fed. Sts."
St. Kitts and Nevis
Slovenia
"Hong Kong SAR, China"
Small states
Tanzania
Tunisia
Marshall Islands
St. Vincent and the Grenadines
Vietnam
Equatorial Guinea
Burkina Faso
Dominica
Belarus
Austria
Antigua and Barbuda
Colombia
Chile
Kyrgyz Republic
Comoros
"Korea, Rep."
Belize
Russian Federation
Guyana
Ecuador
Turkmenistan
Malaysia
Cote d'Ivoire
Mauritania
Heavily indebted poor countries (HIPC)
New Zealand
Jordan
Sweden
Bosnia and Herzegovina
Nicaragua
Cameroon
South Asia (IDA & IBRD)
East Asia & Pacific (excluding high income)
IDA & IBRD total
British Virgin Islands
Arab World
Australia
Suriname
Tonga
"Congo, Rep."
Upper middle income
Lesotho
New Caledonia
Curacao
American Samoa
Iraq
Georgia
"Egypt, Arab Rep."
Turks and Caicos Islands
Aruba
IDA only
Sub-Saharan Africa (IDA & IBRD countries)
Tuvalu
Ukraine
Greece
Malawi
Czech Republic
Iceland
Latin America & the Caribbean (IDA & IBRD countries)
Latin America & Caribbean
Botswana
European Union
India
Libya
"Iran, Islamic Rep."
Israel
Seychelles
France
Mozambique
Eritrea
Myanmar
Kiribati
Argentina
Virgin Islands (U.S.)
Djibouti
Uzbekistan
Kuwait
Papua New Guinea
Eswatini
Uganda
Romania
Northern Mariana Islands
Slovak Republic
Somalia
Bermuda
Cuba
Monaco
Guam
Kazakhstan
Central African Republic
El Salvador
Timor-Leste
Guinea-Bissau
"Gambia, The"
Bolivia
French Polynesia
Query:
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    (cd.total_confirmed_cases / pd."year_2019") * 100000 AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                ELSE "country"
            END AS "country_region",
            "year_2019"
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) pd
    ON cd."country_region" = pd."country_region";
Answer:
COUNTRY,TOTAL_CONFIRMED_CASES,CASES_PER_100000_PEOPLE
China,83817,
US,784326,
Germany,147065,
Italy,181228,
Iran,83505,
France,156480,
Spain,200210,
Query:
SELECT s."country_region" AS summary_country, p."country" AS population_country
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY s
   LEFT JOIN COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY p
     ON s."country_region" = p."country"
   WHERE s."country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
   GROUP BY s."country_region", p."country"
   LIMIT 1000;
Answer:
SUMMARY_COUNTRY,POPULATION_COUNTRY
Germany,Germany
France,France
Spain,Spain
US,
China,China
Iran,
Italy,Italy
Query:
SELECT DISTINCT "country"
   FROM COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
   WHERE "country" LIKE '%United%'
      OR "country" LIKE '%USA%'
      OR "country" LIKE '%US%'
   LIMIT 1000;
Answer:
country
United Arab Emirates
United States
United Kingdom
Query:
SELECT SUM("confirmed") AS total_confirmed
   FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
   WHERE "country_region" = 'US' AND "date" = '2020-04-20'
   LIMIT 1000;
Answer:
TOTAL_CONFIRMED
784326
Query:
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    pd.population,
    ROUND((cd.total_confirmed_cases / pd.population) * 100000, 4) AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
JOIN
    (
        SELECT
            "country",
            COALESCE(
                "year_2019",
                "year_2018",
                "year_2017",
                "year_2016",
                "year_2015"
            ) AS population
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) pd
    ON pd."country" = CASE
        WHEN cd."country_region" = 'US' THEN 'United States'
        WHEN cd."country_region" = 'Iran' THEN 'Iran, Islamic Rep.'
        ELSE cd."country_region"
    END
WHERE
    pd.population IS NOT NULL;
Answer:
COUNTRY,TOTAL_CONFIRMED_CASES,POPULATION,CASES_PER_100000_PEOPLE
US,784326,327167434,239.7000
China,83817,1392730000,6.0000
Germany,147065,82927922,177.3000
Italy,181228,60431283,299.9000
Spain,200210,46723749,428.5000
Iran,83505,81800269,102.1000
France,156480,66987244,233.6000
Query:
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    COALESCE(
        pd."year_2019",
        pd."year_2018",
        pd."year_2017",
        pd."year_2016",
        pd."year_2015",
        pd."year_2014",
        pd."year_2013",
        pd."year_2012",
        pd."year_2011",
        pd."year_2010"
    ) AS population,
    ROUND(
        (cd.total_confirmed_cases / COALESCE(
            pd."year_2019",
            pd."year_2018",
            pd."year_2017",
            pd."year_2016",
            pd."year_2015",
            pd."year_2014",
            pd."year_2013",
            pd."year_2012",
            pd."year_2011",
            pd."year_2010"
        )) * 100000,
        4
    ) AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
LEFT JOIN
    COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY pd
    ON pd."country" = CASE
        WHEN cd."country_region" = 'US' THEN 'United States'
        WHEN cd."country_region" = 'Iran' THEN 'Iran, Islamic Rep.'
        ELSE cd."country_region"
    END
WHERE
    COALESCE(
        pd."year_2019",
        pd."year_2018",
        pd."year_2017",
        pd."year_2016",
        pd."year_2015",
        pd."year_2014",
        pd."year_2013",
        pd."year_2012",
        pd."year_2011",
        pd."year_2010"
    ) IS NOT NULL;
Answer:
COUNTRY,TOTAL_CONFIRMED_CASES,POPULATION,CASES_PER_100000_PEOPLE
US,784326,327167434,239.7000
China,83817,1392730000,6.0000
Germany,147065,82927922,177.3000
Italy,181228,60431283,299.9000
Spain,200210,46723749,428.5000
Iran,83505,81800269,102.1000
France,156480,66987244,233.6000
Query:
SELECT DISTINCT "province_state"
    FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
    WHERE "country_region" = 'China'
    LIMIT 1000;
Answer:
province_state
Beijing
Gansu
Henan
Hong Kong
Liaoning
Shandong
Shanxi
Tibet
Anhui
Hainan
Hebei
Hunan
Xinjiang
Yunnan
Inner Mongolia
Shanghai
Zhejiang
Hubei
Chongqing
Fujian
Guangdong
Heilongjiang
Jiangsu
Jiangxi
Macau
Ningxia
Guangxi
Guizhou
Jilin
Qinghai
Shaanxi
Tianjin
Sichuan
Unknown
Query:
SELECT SUM("confirmed") AS total_confirmed
    FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
    WHERE "country_region" = 'China' AND "date" = '2020-04-20'
    LIMIT 1000;
Answer:
TOTAL_CONFIRMED
83817
Query:
SELECT
    cd."country_region" AS country,
    cd.total_confirmed_cases,
    pd.population,
    ROUND(
        (cd.total_confirmed_cases / pd.population) * 100000,
        4
    ) AS cases_per_100000_people
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                WHEN "country" = 'Egypt, Arab Rep.' THEN 'Egypt'
                WHEN "country" = 'Korea, Rep.' THEN 'Korea, South'
                ELSE "country"
            END AS country_region,
            COALESCE(
                "year_2019",
                "year_2018",
                "year_2017",
                "year_2016",
                "year_2015"
            ) AS population
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) pd
ON
    cd."country_region" = pd.country_region
WHERE
    pd.population IS NOT NULL;
Answer:
COUNTRY,TOTAL_CONFIRMED_CASES,POPULATION,CASES_PER_100000_PEOPLE
China,83817,1392730000,6.0000
US,784326,327167434,239.7000
Germany,147065,82927922,177.3000
Italy,181228,60431283,299.9000
Iran,83505,81800269,102.1000
France,156480,66987244,233.6000
Spain,200210,46723749,428.5000
Query:
SELECT "country_region", SUM("confirmed") AS total_confirmed
    FROM COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
    WHERE "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran') AND "date" = '2020-04-20'
    GROUP BY "country_region"
    LIMIT 1000;
Answer:
country_region,TOTAL_CONFIRMED
US,784326
Spain,200210
China,83817
France,156480
Germany,147065
Italy,181228
Iran,83505
Query:
SELECT
    s."country_region" AS country,
    SUM(s."confirmed") AS total_confirmed,
    p."year_2019" AS population_2019,
    ROUND((SUM(s."confirmed") / p."year_2019") * 100000, 4) AS cases_per_100000_people
FROM
    COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY s
JOIN
    COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY p
    ON (
        s."country_region" = p."country"
        OR (s."country_region" = 'US' AND p."country" = 'United States')
        OR (s."country_region" = 'Iran' AND p."country" = 'Iran, Islamic Rep.')
    )
WHERE
    s."date" = '2020-04-20'
    AND s."country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
GROUP BY
    s."country_region", p."year_2019";
Answer:
COUNTRY,TOTAL_CONFIRMED,POPULATION_2019,CASES_PER_100000_PEOPLE
China,83817,,
US,784326,,
Germany,147065,,
Italy,181228,,
Iran,83505,,
France,156480,,
Spain,200210,,
End Exploring Related Columns
Task: Could you provide the total number of confirmed COVID-19 cases and the number of cases per 100,000 people, based on the 2020 population, on April 20, 2020, for the US, France, China, Italy, Spain, Germany, and Iran?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: SELECT S."Column_Name" FROM {Database Name}.{Schema Name}.{Table_name} (ensure all column names are enclosed in double quotations)
Follow the answer format like: The total number of confirmed COVID-19 cases and the number of cases per 100,000 people as of April 20, 2020, for the specified countries are as follows:

```csv
Country,Total Confirmed Cases,Cases per 100,000 People
US,787,960,240.0784
France,154,098,236.1785
China,82,758,5.7719
Italy,181,228,300.5630
Spain,200,210,428.4529
Germany,145,742,174.5140
Iran,83,505,100.6088
```

To calculate the cases per 100,000 people, we used the formula:

\[ \text{Cases per 100,000 people} = \left( \frac{\text{Total Confirmed Cases}}{\text{Population}} \right) \times 100,000 \]

Population data is based on estimates from 2019 due to the unavailability of 2020 population data in the database..
Here are some useful tips for answering:
When calculating distances between two geometries, use `ST_MakePoint(x, y)` to make a point and `ST_Distance(geometry1 GEOMETRY, geometry2 GEOMETRY)` to compute. No need to convert from meters to miles unless requested. Don't use Haversine like 2 * 6371000 * ASIN(...), use ST_DISTANCE for more precise results.
Please refrain from adding any conditions that are not explicitly specified in the task.
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'COVID19_JHU_WORLD_BANK': {'COVID19_JHU_CSSE': ['CONFIRMED_CASES', 'DEATHS', 'RECOVERED_CASES', 'SUMMARY'], 'WORLD_BANK_GLOBAL_POPULATION': ['POPULATION_BY_COUNTRY'], 'WORLD_BANK_HEALTH_POPULATION': ['COUNTRY_SERIES_DEFINITIONS', 'COUNTRY_SUMMARY', 'HEALTH_NUTRITION_POPULATION', 'SERIES_SUMMARY', 'SERIES_TIMES'], 'WORLD_BANK_INTL_DEBT': ['COUNTRY_SERIES_DEFINITIONS', 'COUNTRY_SUMMARY', 'INTERNATIONAL_DEBT', 'SERIES_SUMMARY', 'SERIES_TIMES'], 'WORLD_BANK_INTL_EDUCATION': ['COUNTRY_SERIES_DEFINITIONS', 'COUNTRY_SUMMARY', 'INTERNATIONAL_EDUCATION', 'SERIES_SUMMARY'], 'WORLD_BANK_WDI': ['COUNTRY_SERIES_DEFINITIONS', 'COUNTRY_SUMMARY', 'FOOTNOTES', 'INDICATORS_DATA', 'SERIES_SUMMARY', 'SERIES_TIME']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book" SQL: WHERE "title" LIKE '%book%'
However, if the string is not decided, you may use ILIKE and %. e.g. Get articles that mention "education": SQL: "body" ILIKE '%education%' OR "title" ILIKE '%education%'
Be careful one country may have different names in different columns in a database.
When handling TO_TIMESTAMP_NTZ conversions, use query like: SELECT CASE WHEN "date" >= 1e15 THEN TO_TIMESTAMP_NTZ("date" / 1000000) WHEN "date" >= 1e12 THEN TO_TIMESTAMP_NTZ("date" / 1000) ELSE TO_TIMESTAMP_NTZ("date") END AS parsed_timestamp FROM my_table;
Be careful of information in nested JSON columns. e.g.1. When it comes to active users, it refers to has engagement_time_msec parameter rather than directly counting users. So the right query is: SELECT DISTINCT USER_PSEUDO_ID FROM all_user_activity, LATERAL FLATTEN(input => event_params) AS flattened_params WHERE flattened_params.value:key = 'engagement_time_msec'
e.g. When it comes to top-selling product, you should pay attention to hits2.value:"eCommerceAction":"action_type"::INTEGER = 6 where 6 means sold product.
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When counting for rows of a column, ensure they are distinct: SELECT COUNT(DISTINCT col_name) FROM table;
Keep all decimals to four decimal places.

2025-01-16 02:18:50 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:18:50 - root - INFO - ```sql
SELECT
    cd."country_region" AS "Country",
    cd.total_confirmed_cases AS "Total Confirmed Cases",
    pd."population" AS "Population",
    ROUND((cd.total_confirmed_cases / pd."population") * 100000, 4) AS "Cases per 100,000 People"
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) AS cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                ELSE "country"
            END AS "country_region",
            "year_2019" AS "population"
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) AS pd
    ON cd."country_region" = pd."country_region";
```
2025-01-16 02:18:50 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:18:50 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:18:50 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:18:51 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-16 02:18:51 - snowflake.connector.connection - INFO - closed
2025-01-16 02:18:52 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:18:52 - root - INFO - itercount: 1
2025-01-16 02:18:52 - root - INFO - 0
2025-01-16 02:18:52 - root - INFO - results: 
Country,Total Confirmed Cases,Population,"Cases per 100,000 People"
China,83817,,
US,784326,,
Germany,147065,,
Italy,181228,,
Iran,83505,,
France,156480,,
Spain,200210,,


2025-01-16 02:18:52 - root - INFO - Please check the answer again by reviewing Could you provide the total number of confirmed COVID-19 cases and the number of cases per 100,000 people, based on the 2020 population, on April 20, 2020, for the US, France, China, Italy, Spain, Germany, and Iran?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: The total number of confirmed COVID-19 cases and the number of cases per 100,000 people as of April 20, 2020, for the specified countries are as follows:

```csv
Country,Total Confirmed Cases,Cases per 100,000 People
US,787,960,240.0784
France,154,098,236.1785
China,82,758,5.7719
Italy,181,228,300.5630
Spain,200,210,428.4529
Germany,145,742,174.5140
Iran,83,505,100.6088
```

To calculate the cases per 100,000 people, we used the formula:

\[ \text{Cases per 100,000 people} = \left( \frac{\text{Total Confirmed Cases}}{\text{Population}} \right) \times 100,000 \]

Population data is based on estimates from 2019 due to the unavailability of 2020 population data in the database. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Country,Total Confirmed Cases,Population,"Cases per 100,000 People"
China,83817,,
US,784326,,
Germany,147065,,
Italy,181228,,
Iran,83505,,
France,156480,,
Spain,200210,,
Current sql:
SELECT
    cd."country_region" AS "Country",
    cd.total_confirmed_cases AS "Total Confirmed Cases",
    pd."population" AS "Population",
    ROUND((cd.total_confirmed_cases / pd."population") * 100000, 4) AS "Cases per 100,000 People"
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) AS cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                ELSE "country"
            END AS "country_region",
            "year_2019" AS "population"
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) AS pd
    ON cd."country_region" = pd."country_region";Empty results in Column ['Population', 'Cases per 100,000 People']. Please correct them.

2025-01-16 02:19:49 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:19:49 - root - INFO - ```sql
SELECT
    cd."country_region" AS "Country",
    cd.total_confirmed_cases AS "Total Confirmed Cases",
    pd."population" AS "Population",
    ROUND((cd.total_confirmed_cases / pd."population") * 100000, 4) AS "Cases per 100,000 People"
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) AS cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                ELSE "country"
            END AS "country_region",
            COALESCE(
                "year_2019",
                "year_2018",
                "year_2017",
                "year_2016",
                "year_2015"
            ) AS "population"
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) AS pd
    ON cd."country_region" = pd."country_region";
```
2025-01-16 02:19:49 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:19:49 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:19:49 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:19:51 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-16 02:19:51 - snowflake.connector.connection - INFO - closed
2025-01-16 02:19:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:19:51 - root - INFO - itercount: 2
2025-01-16 02:19:51 - root - INFO - 0
2025-01-16 02:19:51 - root - INFO - results: 
Country,Total Confirmed Cases,Population,"Cases per 100,000 People"
China,83817,1392730000,6.0000
US,784326,327167434,239.7000
Germany,147065,82927922,177.3000
Italy,181228,60431283,299.9000
Iran,83505,81800269,102.1000
France,156480,66987244,233.6000
Spain,200210,46723749,428.5000


2025-01-16 02:19:51 - root - INFO - Please check the answer again by reviewing Could you provide the total number of confirmed COVID-19 cases and the number of cases per 100,000 people, based on the 2020 population, on April 20, 2020, for the US, France, China, Italy, Spain, Germany, and Iran?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: The total number of confirmed COVID-19 cases and the number of cases per 100,000 people as of April 20, 2020, for the specified countries are as follows:

```csv
Country,Total Confirmed Cases,Cases per 100,000 People
US,787,960,240.0784
France,154,098,236.1785
China,82,758,5.7719
Italy,181,228,300.5630
Spain,200,210,428.4529
Germany,145,742,174.5140
Iran,83,505,100.6088
```

To calculate the cases per 100,000 people, we used the formula:

\[ \text{Cases per 100,000 people} = \left( \frac{\text{Total Confirmed Cases}}{\text{Population}} \right) \times 100,000 \]

Population data is based on estimates from 2019 due to the unavailability of 2020 population data in the database. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Country,Total Confirmed Cases,Population,"Cases per 100,000 People"
China,83817,1392730000,6.0000
US,784326,327167434,239.7000
Germany,147065,82927922,177.3000
Italy,181228,60431283,299.9000
Iran,83505,81800269,102.1000
France,156480,66987244,233.6000
Spain,200210,46723749,428.5000
Current sql:
SELECT
    cd."country_region" AS "Country",
    cd.total_confirmed_cases AS "Total Confirmed Cases",
    pd."population" AS "Population",
    ROUND((cd.total_confirmed_cases / pd."population") * 100000, 4) AS "Cases per 100,000 People"
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) AS cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                ELSE "country"
            END AS "country_region",
            COALESCE(
                "year_2019",
                "year_2018",
                "year_2017",
                "year_2016",
                "year_2015"
            ) AS "population"
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) AS pd
    ON cd."country_region" = pd."country_region";
2025-01-16 02:20:42 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:20:42 - root - INFO - ```sql
SELECT
    cd."country_region" AS "Country",
    cd.total_confirmed_cases AS "Total Confirmed Cases",
    pd."population" AS "Population",
    ROUND((cd.total_confirmed_cases / pd."population") * 100000, 4) AS "Cases per 100,000 People"
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) AS cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                ELSE "country"
            END AS "country_region",
            "year_2019" AS "population"
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) AS pd
    ON cd."country_region" = pd."country_region";
```
2025-01-16 02:20:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:20:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:20:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:20:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-16 02:20:44 - snowflake.connector.connection - INFO - closed
2025-01-16 02:20:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:20:44 - root - INFO - itercount: 3
2025-01-16 02:20:44 - root - INFO - 0
2025-01-16 02:20:44 - root - INFO - results: 
Country,Total Confirmed Cases,Population,"Cases per 100,000 People"
China,83817,,
US,784326,,
Germany,147065,,
Italy,181228,,
Iran,83505,,
France,156480,,
Spain,200210,,


2025-01-16 02:20:44 - root - INFO - Please check the answer again by reviewing Could you provide the total number of confirmed COVID-19 cases and the number of cases per 100,000 people, based on the 2020 population, on April 20, 2020, for the US, France, China, Italy, Spain, Germany, and Iran?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: The total number of confirmed COVID-19 cases and the number of cases per 100,000 people as of April 20, 2020, for the specified countries are as follows:

```csv
Country,Total Confirmed Cases,Cases per 100,000 People
US,787,960,240.0784
France,154,098,236.1785
China,82,758,5.7719
Italy,181,228,300.5630
Spain,200,210,428.4529
Germany,145,742,174.5140
Iran,83,505,100.6088
```

To calculate the cases per 100,000 people, we used the formula:

\[ \text{Cases per 100,000 people} = \left( \frac{\text{Total Confirmed Cases}}{\text{Population}} \right) \times 100,000 \]

Population data is based on estimates from 2019 due to the unavailability of 2020 population data in the database. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Country,Total Confirmed Cases,Population,"Cases per 100,000 People"
China,83817,,
US,784326,,
Germany,147065,,
Italy,181228,,
Iran,83505,,
France,156480,,
Spain,200210,,
Current sql:
SELECT
    cd."country_region" AS "Country",
    cd.total_confirmed_cases AS "Total Confirmed Cases",
    pd."population" AS "Population",
    ROUND((cd.total_confirmed_cases / pd."population") * 100000, 4) AS "Cases per 100,000 People"
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) AS cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                ELSE "country"
            END AS "country_region",
            "year_2019" AS "population"
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) AS pd
    ON cd."country_region" = pd."country_region";Empty results in Column ['Population', 'Cases per 100,000 People']. Please correct them.

2025-01-16 02:21:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-16 02:21:39 - root - INFO - ```sql
SELECT
    cd."country_region" AS "Country",
    cd.total_confirmed_cases AS "Total Confirmed Cases",
    pd."population" AS "Population",
    ROUND((cd.total_confirmed_cases / pd."population") * 100000, 4) AS "Cases per 100,000 People"
FROM
    (
        SELECT
            "country_region",
            SUM("confirmed") AS total_confirmed_cases
        FROM
            COVID19_JHU_WORLD_BANK.COVID19_JHU_CSSE.SUMMARY
        WHERE
            "date" = '2020-04-20'
            AND "country_region" IN ('US', 'France', 'China', 'Italy', 'Spain', 'Germany', 'Iran')
        GROUP BY
            "country_region"
    ) AS cd
JOIN
    (
        SELECT
            CASE
                WHEN "country" = 'United States' THEN 'US'
                WHEN "country" = 'Iran, Islamic Rep.' THEN 'Iran'
                ELSE "country"
            END AS "country_region",
            COALESCE(
                "year_2019",
                "year_2018",
                "year_2017",
                "year_2016",
                "year_2015"
            ) AS "population"
        FROM
            COVID19_JHU_WORLD_BANK.WORLD_BANK_GLOBAL_POPULATION.POPULATION_BY_COUNTRY
        WHERE
            "country" IN (
                'United States',
                'France',
                'China',
                'Italy',
                'Spain',
                'Germany',
                'Iran, Islamic Rep.'
            )
    ) AS pd
ON cd."country_region" = pd."country_region";
```
2025-01-16 02:21:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-16 02:21:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-16 02:21:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-16 02:21:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 7
2025-01-16 02:21:41 - snowflake.connector.connection - INFO - closed
2025-01-16 02:21:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-16 02:21:41 - root - INFO - itercount: 4
2025-01-16 02:21:41 - root - INFO - 0
2025-01-16 02:21:41 - root - INFO - Total iteration counts: 4
