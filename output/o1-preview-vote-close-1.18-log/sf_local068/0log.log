2025-01-18 17:11:41 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 17:12:26 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 17:12:26 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:12:26 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:12:26 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:12:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 943
2025-01-18 17:12:27 - snowflake.connector.connection - INFO - closed
2025-01-18 17:12:27 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:12:28 - root - INFO - SQL:
-- 1. Select distinct insert dates to see the date formats
SELECT DISTINCT "insert_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
LIMIT 1000
Results:
Too long, hard cut:
insert_date
2022-01-12
2021-08-22
2021-03-11
2021-02-24
2023-05-04
2023-03-16
2023-04-25
2021-09-01
2021-04-03
2021-03-15
2023-05-22
2021-12-01
2023-05-31
2021-01-31
2021-05-03
2021-04-15
2023-03-01
2021-12-18
2022-01-02
2022-01-20
2021-09-28
2022-04-10
2022-06-25
2022-04-08
2023-02-28
2021-09-17
2022-12-19
2022-10-31
2023-01-15
2023-04-21
2022-11-06
2021-05-25
2021-02-28
2023-03-09
2021-09-20
2022-11-12
2023-01-25
2022-07-31
2021-03-02
2022-06-22
2021-07-05
2021-12-15
2021-02-08
2023-04-16
2022-05-31
2022-09-10
2023-05-12
2022-02-17
2021-08-06
2021-11-18
2022-05-12
2023-07-01
2021-06-04
2021-01-27
2022-01-03
2022-08-05
2023-01-01
2023-01-21
2022-02-10
2022-05-16
2022-08-08
2023-06-18
2022-03-26
2023-03-31
2023-04-08
2021-12-09
2023-05-10
2022-03-17
2021-05-02
2021-11-25
2021-03-22
2023-01-23
2022-04-12
2022-05-23
2022-01-15
2022-09-20
2021-01-26
2022-02-19
2023-04-13
2023-04-19
2021-01-01
2022-10-29
2021-10-07
2021-06-08
2022-05-21
2022-10-15
2022-06-11
2023-05-18
2022-11-01
2021-09-05
2023-03-03
2022-12-18
2022-01-14
2023-04-09
2022-06-20
2022-09-11
2022-09-17
2021-05-18
2022-07-29
2023-03-07
2021-11-01
2022-10-11
2023-05-20
2022-03-24
2022-10-20
2021-05-04
2022-01-30
2021-12-05
2022-08-20
2022-02-09
2023-04-28
2023-07-29
2022-03-19
2021-04-26
2023-03-20
2021-10-16
2021-02-12
2022-06-29
2021-06-13
2022-08-26
2022-01-29
2022-03-23
2022-10-14
2022-07-08
2023-07-18
2022-08-13
2023-02-22
2021-09-07
2023-02-04
2023-06-08
2021-11-17
2023-07-07
2021-08-21
2021-12-21
2021-08-16
2023-07-14
2021-01-08
2021-07-22
2022-12-30
2022-10-18
2021-06-06
2023-05-24
2023-07-17
2021-10-22
2022-04-01
2021-05-16
2022-12-17
2021-05-09
2022-10-27
2023-02-23
2023-05-28
2021-12-29
2021-12-08
2021-11-14
2021-10-17
2022-09-09
2021-05-05
2022-11-09
2022-11-13
2021-09-04
2022-02-02
2022-09-18
2023-04-20
2021-12-06
2023-05-14
2022-06-08
2021-05-23
2021-01-15
2022-05-11
2023-05-06
2021-10-29
2022-02-23
2021-05-29
2022-03-25
2021-12-20
2022-05-07
2022-04-19
2022-07-27
2021-02-27
2022-10-08
2021-03-01
2021-08-14
2021-03-08
2021-12-16
2023-04-29
2022-04-03
2022-09-23
2021-04-14
2021-02-07
2021-10-08
2022-02-18
2021-10-26
2021-06-15
2021-03-19
2022-06-24
2023-06-27
2021-07-12
2021-02-17
2023-01-12
2023-05-16
2021-07-20
2022-04-27
2022-07-14
2023-01-24
2023-03-15
2021-11-13
2022-01-26
2023-03-26
2021-09-03
2022-03-16
2022-06-18
2021-07-17
2022-02-13
2021-02-23
2021-10-12
2022-03-07
2023-05-02
2022-05-08
2021-01-14
2023-06-24
2022-10-10
2022-01-19
2021-08-13
2022-05-02
2021-08-31
2022-04-13
2021-07-28
2022-01-04
2022-02-11
2021-04-02
2023-07-31
2021-02-22
2021-05-20
2022-02-04
2022-06-05
2022-01-13
2022-02-26
2023-01-19
2023-01-20
2021-08-27
2021-05-12
2022-11-22
2023-05-07
2021-10-14
2021-04-09
2023-07-05
2023-07-15
2021-10-04
2021-10-13
2022-05-03
2023-06-17
2022-01-06
2021-01-19
2021-04-01
2021-10-30
2022-11-10
2022-08-18
2023-02-17
2022-05-29
2021-01-12
2021-09-14
2023-05-08
2021-08-18
2022-12-05
2021-09-09
2022-11-16
2022-10-28
2023-05-27
2021-02-19
2022-11-26
2023-02-09
2021-09-12
2021-11-10
2021-10-09
2022-03-22
2021-10-15
2021-08-04
2022-12-12
2022-03-08
2022-12-01
2022-03-05
2022-08-02
2022-04-14
2021-06-28
2021-04-19
2022-08-24
2022-04-06
2021-11-06
2021-10-10
2021-07-16
2022-12-11
2021-08-26
2022-12-22
2021-01-11
2021-10-20
2023-04-02
2021-05-28
2021-03-29
2022-09-15
2022-10-07
2022-07-13
2021-03-06
2023-05-30
2021-12-03
2022-07-23
2023-06-21
2021-02-16
2021-09-27
2021-08-30
2022-12-02
2023-03-18
2021-10-18
2023-04-30
2021-02-09
2022-08-01
2021-12-24
2021-05-22
2023-03-05
2021-06-03
2021-08-01
2022-04-24
2021-01-22
2021-12-31
2022-08-28
2021-05-11
2022-01-25
2023-01-10
2021-07-04
2023-07-21
2022-04-25
2023-04-27
2021-03-20
2023-03-11
2023-06-01
2023-03-25
2023-06-19
2021-11-20
2022-11-27
2022-09-07
2022-11-11
2023-05-09
2022-06-19
2022-02-16
2021-09-13
2023-02-14
2023-02-08
2022-11-05
2021-10-06
2022-07-22
2023-06-26
2023-01-26
2021-01-25
2021-07-06
2022-10-05
2021-06-26
2021-03-10
2022-07-15
2021-04-27
2021-05-13
2022-04-16
2022-08-17
2021-06-02
2022-12-25
2021-07-31
2021-08-25
2021-08-02
2021-06-01
2022-07-17
2022-09-03
2021-08-11
2023-04-12
2022-01-27
2022-05-30
2021-09-23
2021-05-21
2021-11-15
2021-01-10
2022-06-01
2023-07-24
2022-04-28
2022-08-22
2022-07-09
2023-05-11
2022-12-06
2021-04-05
2021-04-25
2021-05-01
2023-01-02
2023-03-19
2021-12-30
2021-02-13
2022-11-03
2023-01-03
2023-06-16
2021-09-19
2022-09-06
2022-03-10
2021-02-05
2022-03-04
2022-10-25
2022-02-21
2021-12-22
2022-12-21
2021-07-21
2021-10-19
2021-07-19
2021-02-02
2022-12-31
2022-03-12
2021-03-25
2021-08-20
2021-03-24
2022-11-08
2023-07-03
2022-04-17
2022-10-23
2023-04-23
2021-04-29
2022-07-20
2021-03-03
2023-02-13
2021-04-21
2023-07-13
2023-02-06
2023-06-23
2022-07-01
2022-12-08
2022-11-18
2021-04-06
2022-01-31
2021-07-03
2022-07-21
2021-04-13
2022-07-12
2022-06-21
2021-06-21
2023-07-16
2023-01-30
2021-02-25
2021-06-11
2022-01-09
2022-07-28
2022-06-28
2023-05-21
2023-05-19
2022-05-22
2021-09-22
2022-12-15
2021-05-30
2022-06-10
2022-04-21
2021-04-24
2021-08-07
2021-

2025-01-18 17:12:28 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:12:28 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:12:28 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:12:29 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-18 17:12:29 - snowflake.connector.connection - INFO - closed
2025-01-18 17:12:29 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:12:29 - root - INFO - SQL:
-- 2. Count total number of cities in the table
SELECT COUNT(*) AS "total_cities"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
LIMIT 1000
Results:
total_cities
44622

2025-01-18 17:12:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:12:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:12:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:12:31 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 17:12:31 - snowflake.connector.connection - INFO - closed
2025-01-18 17:12:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:12:31 - root - INFO - SQL:
-- 3. Select insert_date and parsed date to check date parsing
SELECT "insert_date", TRY_TO_DATE("insert_date", 'YYYY-MM-DD') AS "parsed_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
LIMIT 1000
Results:
Too long, hard cut:
insert_date,parsed_date
2022-01-12,2022-01-12
2021-08-22,2021-08-22
2021-03-11,2021-03-11
2021-02-24,2021-02-24
2023-05-04,2023-05-04
2023-03-16,2023-03-16
2023-04-25,2023-04-25
2021-10-07,2021-10-07
2021-09-01,2021-09-01
2021-04-03,2021-04-03
2023-04-08,2023-04-08
2021-03-15,2021-03-15
2023-05-22,2023-05-22
2021-12-09,2021-12-09
2021-12-01,2021-12-01
2023-05-10,2023-05-10
2023-05-31,2023-05-31
2021-01-31,2021-01-31
2021-05-03,2021-05-03
2021-06-08,2021-06-08
2021-04-15,2021-04-15
2021-02-22,2021-02-22
2022-03-17,2022-03-17
2023-03-01,2023-03-01
2021-12-18,2021-12-18
2022-01-02,2022-01-02
2022-01-20,2022-01-20
2022-05-21,2022-05-21
2021-03-02,2021-03-02
2022-06-22,2022-06-22
2021-09-28,2021-09-28
2022-04-10,2022-04-10
2022-06-25,2022-06-25
2023-04-08,2023-04-08
2022-04-08,2022-04-08
2021-07-05,2021-07-05
2021-12-15,2021-12-15
2021-05-20,2021-05-20
2021-05-02,2021-05-02
2022-10-15,2022-10-15
2021-11-25,2021-11-25
2023-02-28,2023-02-28
2023-05-04,2023-05-04
2021-07-20,2021-07-20
2022-06-11,2022-06-11
2021-02-08,2021-02-08
2021-11-25,2021-11-25
2021-03-22,2021-03-22
2021-09-17,2021-09-17
2023-01-23,2023-01-23
2023-05-18,2023-05-18
2022-11-01,2022-11-01
2022-08-26,2022-08-26
2022-12-19,2022-12-19
2021-09-05,2021-09-05
2023-05-31,2023-05-31
2022-10-31,2022-10-31
2021-06-15,2021-06-15
2022-04-12,2022-04-12
2023-03-03,2023-03-03
2023-04-16,2023-04-16
2022-05-31,2022-05-31
2022-12-18,2022-12-18
2022-04-27,2022-04-27
2022-05-23,2022-05-23
2022-01-15,2022-01-15
2022-09-20,2022-09-20
2021-01-26,2021-01-26
2022-09-19,2022-09-19
2023-01-15,2023-01-15
2023-01-01,2023-01-01
2022-07-14,2022-07-14
2022-01-14,2022-01-14
2022-02-19,2022-02-19
2023-01-24,2023-01-24
2023-04-09,2023-04-09
2023-03-15,2023-03-15
2022-08-16,2022-08-16
2022-06-20,2022-06-20
2023-01-21,2023-01-21
2022-01-29,2022-01-29
2023-04-21,2023-04-21
2021-12-17,2021-12-17
2022-09-11,2022-09-11
2022-09-17,2022-09-17
2021-03-19,2021-03-19
2021-11-13,2021-11-13
2022-02-04,2022-02-04
2022-09-10,2022-09-10
2023-05-12,2023-05-12
2022-06-05,2022-06-05
2022-01-26,2022-01-26
2022-02-17,2022-02-17
2022-11-06,2022-11-06
2021-05-18,2021-05-18
2023-03-26,2023-03-26
2022-06-24,2022-06-24
2022-01-13,2022-01-13
2022-07-29,2022-07-29
2023-04-21,2023-04-21
2021-09-03,2021-09-03
2023-03-07,2023-03-07
2022-02-26,2022-02-26
2021-08-18,2021-08-18
2021-08-06,2021-08-06
2021-11-18,2021-11-18
2021-11-01,2021-11-01
2022-03-23,2022-03-23
2022-10-11,2022-10-11
2023-01-19,2023-01-19
2022-10-14,2022-10-14
2022-03-16,2022-03-16
2023-01-20,2023-01-20
2023-05-20,2023-05-20
2022-03-24,2022-03-24
2023-04-13,2023-04-13
2022-05-12,2022-05-12
2022-10-20,2022-10-20
2021-05-25,2021-05-25
2023-07-01,2023-07-01
2023-06-27,2023-06-27
2021-05-04,2021-05-04
2023-04-19,2023-04-19
2022-06-18,2022-06-18
2022-07-08,2022-07-08
2022-02-10,2022-02-10
2022-08-26,2022-08-26
2021-08-27,2021-08-27
2023-05-24,2023-05-24
2021-02-28,2021-02-28
2021-05-12,2021-05-12
2022-10-31,2022-10-31
2023-05-18,2023-05-18
2021-07-17,2021-07-17
2022-02-13,2022-02-13
2021-02-23,2021-02-23
2022-07-14,2022-07-14
2022-01-30,2022-01-30
2021-12-05,2021-12-05
2021-11-13,2021-11-13
2023-07-18,2023-07-18
2021-10-12,2021-10-12
2021-07-12,2021-07-12
2021-01-01,2021-01-01
2022-03-07,2022-03-07
2023-05-02,2023-05-02
2022-05-08,2022-05-08
2022-05-16,2022-05-16
2021-08-28,2021-08-28
2022-08-20,2022-08-20
2023-06-27,2023-06-27
2021-01-14,2021-01-14
2022-11-22,2022-11-22
2022-01-13,2022-01-13
2022-08-26,2022-08-26
2022-08-13,2022-08-13
2023-05-07,2023-05-07
2021-02-17,2021-02-17
2021-10-14,2021-10-14
2021-03-09,2021-03-09
2022-02-09,2022-02-09
2023-06-24,2023-06-24
2023-04-28,2023-04-28
2023-07-29,2023-07-29
2023-02-22,2023-02-22
2023-01-12,2023-01-12
2022-03-19,2022-03-19
2022-08-08,2022-08-08
2021-04-26,2021-04-26
2021-09-07,2021-09-07
2022-10-10,2022-10-10
2023-02-04,2023-02-04
2023-06-08,2023-06-08
2023-03-09,2023-03-09
2023-05-16,2023-05-16
2022-01-19,2022-01-19
2022-08-14,2022-08-14
2021-11-17,2021-11-17
2023-06-18,2023-06-18
2023-07-07,2023-07-07
2021-09-20,2021-09-20
2022-12-05,2022-12-05
2021-01-17,2021-01-17
2021-04-09,2021-04-09
2023-03-20,2023-03-20
2021-10-16,2021-10-16
2021-08-13,2021-08-13
2023-07-05,2023-07-05
2021-03-13,2021-03-13
2021-08-21,2021-08-21
2022-01-13,2022-01-13
2022-11-12,2022-11-12
2021-09-09,2021-09-09
2022-10-29,2022-10-29
2022-03-23,2022-03-23
2021-09-17,2021-09-17
2021-06-04,2021-06-04
2023-07-15,2023-07-15
2023-01-24,2023-01-24
2023-01-25,2023-01-25
2022-05-02,2022-05-02
2021-10-04,2021-10-04
2021-10-13,2021-10-13
2022-05-03,2022-05-03
2023-06-17,2023-06-17
2022-07-31,2022-07-31
2022-03-26,2022-03-26
2021-12-21,2021-12-21
2021-01-27,2021-01-27
2022-01-19,2022-01-19
2022-05-24,2022-05-24
2021-02-24,2021-02-24
2022-01-06,2022-01-06
2021-01-19,2021-01-19
2021-08-16,2021-08-16
2021-04-01,2021-04-01
2021-09-07,2021-09-07
2022-01-03,2022-01-03
2022-06-02,2022-06-02
2023-07-14,2023-07-14
2022-04-02,2022-04-02
2021-01-08,2021-01-08
2021-08-06,2021-08-06
2021-10-30,2021-10-30
2022-11-16,2022-11-16
2021-07-22,2021-07-22
2021

2025-01-18 17:12:31 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:12:31 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:12:31 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:12:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 17:12:33 - snowflake.connector.connection - INFO - closed
2025-01-18 17:12:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:13:11 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 17:13:11 - root - INFO - ```sql
SELECT EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Year",
       EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Month",
       COUNT(*) AS "Total number of cities added"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE TRY_TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4, 5, 6)
  AND EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) BETWEEN 2021 AND 2023
GROUP BY EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')),
         EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD"))
ORDER BY "Year", "Month";
```
2025-01-18 17:13:11 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:13:11 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:13:11 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:13:13 - snowflake.connector.connection - INFO - closed
2025-01-18 17:13:13 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:14:28 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 17:14:28 - root - INFO - ```sql
SELECT EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Year",
       EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Month",
       COUNT(*) AS "Total number of cities added"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
  AND EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4, 5, 6)
  AND EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) BETWEEN 2021 AND 2023
GROUP BY EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')),
         EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD'))
ORDER BY "Year", "Month";
```
2025-01-18 17:14:28 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:14:28 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:14:28 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:14:29 - snowflake.connector.cursor - INFO - Number of results in first chunk: 9
2025-01-18 17:14:29 - snowflake.connector.connection - INFO - closed
2025-01-18 17:14:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:14:30 - root - INFO - SQL:
SELECT EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Year",
       EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Month",
       COUNT(*) AS "Total number of cities added"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
  AND EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4, 5, 6)
  AND EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) BETWEEN 2021 AND 2023
GROUP BY EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')),
         EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD'))
ORDER BY "Year", "Month";
Results:
Year,Month,Total number of cities added
2021,4,1508
2021,5,1509
2021,6,1395
2022,4,1437
2022,5,1459
2022,6,1411
2023,4,1402
2023,5,1389
2023,6,1432

2025-01-18 17:14:30 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:14:30 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:14:30 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:14:31 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-18 17:14:31 - snowflake.connector.connection - INFO - closed
2025-01-18 17:14:32 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:14:32 - root - INFO - SQL:
-- 5. Select distinct years from insert_date
SELECT DISTINCT EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) AS "year"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE TRY_TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
LIMIT 1000
Results:
year
2022
2021
2023

2025-01-18 17:14:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:14:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:14:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:14:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 12
2025-01-18 17:14:33 - snowflake.connector.connection - INFO - closed
2025-01-18 17:14:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:14:34 - root - INFO - SQL:
-- 6. Select distinct months from insert_date
SELECT DISTINCT EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) AS "month"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE TRY_TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
LIMIT 1000
Results:
month
1
8
3
2
5
4
10
12
6
7
9
11

2025-01-18 17:14:34 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:14:34 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:14:34 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:14:35 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-18 17:14:35 - snowflake.connector.connection - INFO - closed
2025-01-18 17:14:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:14:35 - root - INFO - SQL:
-- 7. Count number of cities added in April 2021
SELECT COUNT(*) AS "cities_added_in_Apr_2021"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 2021
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 4
LIMIT 1000
Results:
cities_added_in_Apr_2021
1508

2025-01-18 17:14:35 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:14:35 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:14:35 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:14:37 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 17:14:37 - snowflake.connector.connection - INFO - closed
2025-01-18 17:14:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:14:37 - root - INFO - SQL:
-- 8. List city_ids and insert_dates for cities added in May 2022
SELECT "city_id", "insert_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 2022
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 5
LIMIT 1000
Results:
Too long, hard cut:
city_id,insert_date
28,2022-05-21
62,2022-05-31
65,2022-05-23
117,2022-05-12
147,2022-05-08
148,2022-05-16
201,2022-05-02
204,2022-05-03
211,2022-05-24
240,2022-05-29
301,2022-05-14
397,2022-05-11
473,2022-05-05
476,2022-05-07
494,2022-05-24
575,2022-05-15
598,2022-05-16
642,2022-05-30
645,2022-05-11
684,2022-05-30
853,2022-05-24
865,2022-05-29
870,2022-05-19
875,2022-05-22
892,2022-05-06
932,2022-05-26
963,2022-05-04
966,2022-05-29
995,2022-05-24
998,2022-05-03
1042,2022-05-01
1137,2022-05-12
1147,2022-05-06
1182,2022-05-22
1279,2022-05-11
1290,2022-05-21
1292,2022-05-24
1340,2022-05-29
1375,2022-05-02
1437,2022-05-11
1464,2022-05-08
1515,2022-05-10
1572,2022-05-05
1672,2022-05-26
1731,2022-05-26
1792,2022-05-07
1805,2022-05-27
1809,2022-05-24
1831,2022-05-14
1861,2022-05-28
1901,2022-05-06
1951,2022-05-02
1963,2022-05-29
2005,2022-05-30
2035,2022-05-01
2036,2022-05-15
2044,2022-05-16
2049,2022-05-29
2054,2022-05-26
2118,2022-05-19
2135,2022-05-25
2145,2022-05-19
2207,2022-05-11
2240,2022-05-22
2386,2022-05-24
2400,2022-05-29
2418,2022-05-30
2429,2022-05-27
2487,2022-05-15
2489,2022-05-01
2495,2022-05-22
2514,2022-05-09
2528,2022-05-16
2537,2022-05-16
2664,2022-05-11
2737,2022-05-09
2743,2022-05-04
2820,2022-05-28
2827,2022-05-24
2870,2022-05-20
2915,2022-05-22
2941,2022-05-22
2950,2022-05-02
2953,2022-05-03
2977,2022-05-18
3001,2022-05-27
3025,2022-05-27
3032,2022-05-11
3114,2022-05-11
3128,2022-05-24
3150,2022-05-17
3158,2022-05-25
3173,2022-05-02
3204,2022-05-01
3211,2022-05-14
3219,2022-05-18
3231,2022-05-31
3290,2022-05-05
3295,2022-05-02
3402,2022-05-20
3411,2022-05-19
3463,2022-05-19
3488,2022-05-27
3515,2022-05-01
3563,2022-05-31
3600,2022-05-30
3632,2022-05-26
3674,2022-05-12
3703,2022-05-13
3786,2022-05-13
3837,2022-05-24
3844,2022-05-09
3890,2022-05-08
3892,2022-05-31
3940,2022-05-15
3974,2022-05-27
4038,2022-05-17
4063,2022-05-30
4113,2022-05-27
4146,2022-05-10
4270,2022-05-14
4317,2022-05-03
4330,2022-05-05
4362,2022-05-07
4371,2022-05-31
4385,2022-05-22
4506,2022-05-21
4537,2022-05-22
4561,2022-05-07
4569,2022-05-10
4657,2022-05-02
4671,2022-05-24
4696,2022-05-09
4721,2022-05-02
4733,2022-05-04
4850,2022-05-11
4894,2022-05-21
4973,2022-05-08
4978,2022-05-10
5013,2022-05-14
5059,2022-05-19
5099,2022-05-08
5117,2022-05-19
5184,2022-05-12
5212,2022-05-19
5232,2022-05-27
5315,2022-05-18
5385,2022-05-29
5418,2022-05-05
5424,2022-05-23
5431,2022-05-16
5476,2022-05-12
5484,2022-05-09
5524,2022-05-26
5563,2022-05-19
5601,2022-05-24
5627,2022-05-06
5657,2022-05-12
5686,2022-05-23
5728,2022-05-01
5753,2022-05-19
5755,2022-05-16
5781,2022-05-13
5923,2022-05-29
5930,2022-05-08
5931,2022-05-29
5949,2022-05-12
5966,2022-05-20
5979,2022-05-23
6004,2022-05-27
6026,2022-05-01
6128,2022-05-13
6200,2022-05-05
6235,2022-05-10
6279,2022-05-29
6281,2022-05-19
6340,2022-05-28
6463,2022-05-10
6466,2022-05-24
6470,2022-05-18
6523,2022-05-06
6529,2022-05-05
6560,2022-05-04
6646,2022-05-04
6658,2022-05-14
6672,2022-05-29
6679,2022-05-13
6738,2022-05-09
6765,2022-05-30
6767,2022-05-13
6780,2022-05-27
6799,2022-05-29
6808,2022-05-29
6869,2022-05-29
6906,2022-05-02
6908,2022-05-04
6910,2022-05-27
6913,2022-05-07
6918,2022-05-28
6930,2022-05-24
6932,2022-05-05
6983,2022-05-16
6989,2022-05-28
7042,2022-05-09
7098,2022-05-06
7151,2022-05-11
7204,2022-05-01
7224,2022-05-20
7227,2022-05-12
7256,2022-05-24
7283,2022-05-14
7373,2022-05-12
7440,2022-05-03
7448,2022-05-17
7561,2022-05-23
7577,2022-05-12
7632,2022-05-08
7674,2022-05-08
7702,2022-05-30
7721,2022-05-31
7730,2022-05-24
7785,2022-05-08
7806,2022-05-07
7807,2022-05-20
7858,2022-05-29
7866,2022-05-21
7877,2022-05-26
7949,2022-05-19
8044,2022-05-17
8049,2022-05-07
8060,2022-05-04
8096,2022-05-28
8121,2022-05-13
8156,2022-05-27
8159,2022-05-07
8168,2022-05-13
8198,2022-05-30
8206,2022-05-02
8226,2022-05-14
8266,2022-05-02
8299,2022-05-20
8354,2022-05-01
8389,2022-05-01
8520,2022-05-29
8545,2022-05-06
8546,2022-05-26
8550,2022-05-04
8558,2022-05-02
8566,2022-05-12
8623,2022-05-27
8631,2022-05-24
8644,2022-05-31
8661,2022-05-18
8709,2022-05-09
8716,2022-05-06
8766,2022-05-12
8781,2022-05-04
8827,2022-05-29
8832,2022-05-16
8899,2022-05-19
8914,2022-05-14
8934,2022-05-28
9052,2022-05-10
9094,2022-05-28
9101,2022-05-19
9102,2022-05-24
9146,2022-05-21
9148,2022-05-25
9161,2022-05-07
9175,2022-05-01
9186,2022-05-01
9263,2022-05-12
9426,2022-05-31
9464,2022-05-24
9498,2022-05-28
9560,2022-05-11
9589,2022-05-28
9638,2022-05-28
9656,2022-05-31
9676,2022-05-20
9710,2022-05-12
9739,2022-05-02
9745,2022-05-14
9827,2022-05-25
9837,2022-05-16
9847,2022-05-09
9865,2022-05-28
9873,2022-05-01
9905,2022-05-20
9944,2022-05-27
9959,2022-05-23
10027,2022-05-16
10091,2022-05-14
10133,2022-05-19
10158,2022-05-04
10166,2022-05-09
10184,2022-05-18
10192,2022-05-07
10194,2022-05-10
10197,2022-05-03
10208,2022-05-01
10267,2022-05-18
10280,2022-05-25
10376,2022-05-06
10425,2022-05-05
10428,2022-05-19
10431,2022-05-16
10444,2022-05-24
10467,2022-05-24
10526,2022-05-22
10545,2022-05-02
10554,2022-05-04


2025-01-18 17:14:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:14:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:14:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:14:38 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-18 17:14:38 - snowflake.connector.connection - INFO - closed
2025-01-18 17:14:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:14:39 - root - INFO - SQL:
-- 9. Count number of cities added in each month of April, May, June for 2022
SELECT EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) AS "month",
       COUNT(*) AS "num_cities"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 2022
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4,5,6)
GROUP BY EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD'))
LIMIT 1000
Results:
month,num_cities
5,1459
6,1411
4,1437

2025-01-18 17:14:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:14:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:14:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:14:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 17:14:40 - snowflake.connector.connection - INFO - closed
2025-01-18 17:14:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:14:41 - root - INFO - SQL:
-- 10. Select all cities added in June 2023
SELECT "city_id", "city_name", "insert_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 2023
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 6
LIMIT 1000
Results:
Too long, hard cut:
city_id,city_name,insert_date
121,yongzhou,2023-06-27
151,barcelona,2023-06-27
162,timbio,2023-06-24
173,suzhou,2023-06-08
179,luzhou,2023-06-18
205,zaozhuang,2023-06-17
333,huizhou,2023-06-07
361,depok,2023-06-21
368,yanan,2023-06-24
382,shengli,2023-06-16
384,taizhou,2023-06-30
417,sanliurfa,2023-06-24
470,manhattan,2023-06-08
472,kampala,2023-06-01
479,heihe,2023-06-16
495,agra,2023-06-19
547,yangshe,2023-06-26
601,rosario,2023-06-15
604,jabalpur,2023-06-08
643,maiduguri,2023-06-17
699,gongzhuling,2023-06-21
712,ranchi,2023-06-19
750,monrovia,2023-06-23
884,avarua,2023-06-25
914,yingcheng,2023-06-06
924,zamboanga city,2023-06-23
936,setagaya,2023-06-13
950,kitakyushu,2023-06-28
955,marrakech,2023-06-23
956,donetsk,2023-06-18
1034,pasig city,2023-06-16
1047,mediouna,2023-06-24
1124,licheng,2023-06-18
1128,nampula,2023-06-25
1138,rochester,2023-06-01
1178,dasmarinas,2023-06-01
1194,pendik,2023-06-02
1220,shanhu,2023-06-10
1294,rotterdam,2023-06-19
1313,nagercoil,2023-06-19
1315,pontianak,2023-06-16
1318,villa nueva,2023-06-02
1442,nansana,2023-06-28
1476,yazd,2023-06-12
1490,maipu,2023-06-20
1494,port said,2023-06-17
1504,jinghong,2023-06-18
1527,lipetsk,2023-06-06
1561,johor bahru,2023-06-09
1591,yueqing,2023-06-05
1613,kaliningrad,2023-06-01
1623,shekhupura,2023-06-27
1628,jiaojiangcun,2023-06-13
1682,udaipur,2023-06-26
1763,daloa,2023-06-15
1781,takamatsu,2023-06-08
1791,mataram,2023-06-02
1818,yuregir,2023-06-21
1883,plovdiv,2023-06-04
1940,butuan,2023-06-05
1952,bharatpur,2023-06-26
1953,az zubayr,2023-06-05
1965,coventry,2023-06-25
1974,iligan,2023-06-26
1979,utrecht,2023-06-28
2034,itaquaquecetuba,2023-06-14
2066,caruaru,2023-06-14
2069,antonio enes,2023-06-27
2079,kusti,2023-06-25
2081,simferopol,2023-06-07
2083,sumqayit,2023-06-22
2107,beni,2023-06-23
2116,reading,2023-06-17
2153,gungoren,2023-06-12
2167,sukabumi,2023-06-29
2209,timisoara,2023-06-13
2243,bor,2023-06-06
2246,santa rosa,2023-06-17
2248,shahre qods,2023-06-14
2261,alanya,2023-06-18
2310,akita,2023-06-11
2324,praia grande,2023-06-13
2332,stockport,2023-06-26
2361,valparaiso,2023-06-03
2375,mabalacat,2023-06-18
2412,ichalkaranji,2023-06-23
2473,barasat,2023-06-12
2477,kostroma,2023-06-19
2532,maradi,2023-06-02
2538,quilmes,2023-06-17
2551,siddhirganj,2023-06-18
2671,gadda madiral,2023-06-23
2712,gdynia,2023-06-17
2727,parana,2023-06-12
2732,imperatriz,2023-06-09
2761,santa maria,2023-06-28
2856,miri,2023-06-23
2875,raichur,2023-06-06
2920,pathardi,2023-06-08
2979,mallawi,2023-06-12
2996,polokwane,2023-06-22
2998,tchaourou,2023-06-07
3038,oviedo,2023-06-19
3088,babruysk,2023-06-29
3125,pskov,2023-06-01
3161,beersheba,2023-06-27
3169,northcote,2023-06-02
3251,matsue,2023-06-16
3256,huacho,2023-06-22
3266,nema,2023-06-28
3285,drabar,2023-06-27
3308,oradea,2023-06-07
3333,baharampur,2023-06-22
3347,cuautla,2023-06-07
3356,sodo,2023-06-19
3372,nampa,2023-06-17
3391,mus,2023-06-20
3404,pabna,2023-06-07
3458,al hasakah,2023-06-10
3465,san diego,2023-06-07
3473,joetsu,2023-06-21
3491,breda,2023-06-30
3494,guri,2023-06-06
3500,temirtau,2023-06-26
3521,nis,2023-06-30
3540,uji,2023-06-23
3560,kindia,2023-06-20
3604,dagupan city,2023-06-24
3654,burgos,2023-06-06
3664,tebingtinggi,2023-06-19
3693,ha long,2023-06-05
3699,shahin shahr,2023-06-28
3754,as suwayq,2023-06-20
3791,haarlem,2023-06-03
3794,catape,2023-06-06
3809,sampit,2023-06-01
3841,nador,2023-06-29
3842,saqqez,2023-06-30
3854,abengourou,2023-06-02
3867,san marcos,2023-06-17
3921,dhamar,2023-06-20
4036,almetyevsk,2023-06-12
4046,el minie,2023-06-25
4071,balurghat,2023-06-15
4077,bandirma,2023-06-02
4115,moriguchi,2023-06-13
4147,miass,2023-06-14
4180,nimes,2023-06-29
4279,misato,2023-06-29
4313,shillong,2023-06-26
4382,santa maria,2023-06-03
4384,gweru,2023-06-09
4399,fujita,2023-06-22
4541,norzagaray,2023-06-26
4571,ruda slaska,2023-06-22
4586,santa rita,2023-06-24
4588,daraga,2023-06-13
4656,cameta,2023-06-15
4706,kozan,2023-06-14
4726,taldyqorghan,2023-06-10
4730,ponnagyun,2023-06-06
4748,hoshangabad,2023-06-24
4768,zoetermeer,2023-06-25
4785,nahiyat khan bani sad,2023-06-23
4794,nagda,2023-06-26
4905,glazoue,2023-06-14
4931,delgado,2023-06-25
4966,kahta,2023-06-15
4968,machiques,2023-06-27
4984,bento goncalves,2023-06-21
4997,dorud,2023-06-14
5037,barcelos,2023-06-19
5055,poa,2023-06-25
5065,iowa city,2023-06-04
5200,cambridge,2023-06-05
5273,sano,2023-06-15
5275,sloviansk,2023-06-28
5291,erlangen,2023-06-01
5320,materi,2023-06-30
5345,tecpan guatemala,2023-06-11
5361,la gi,2023-06-19
5381,mawanella,2023-06-16
5465,al ahad al masarihah,2023-06-09
5481,ourinhos,2023-06-02
5523,sandacho,2023-06-28
5571,cawayan,2023-06-17
5611,pateros,2023-06-29
5639,moron,2023-06-17
5707,mityana,2023-06-30
5708,presidente franco,2023-06-05
5735,balanga,2023-06-04
5756,sergiyev posad,2023-06-06
5760,olanchito,2023-06-28
5795,paniqui,2023-06-06
5798,dolisie,2023-06-20
5844,miryang,2023-06-17
5847,houzhuang,2023-06-27
5849,hildesheim,2023-06-30
5875,paoy paet,2023-06-20
5879,rio rancho,2023-06-01
5883,igar

2025-01-18 17:14:41 - root - INFO - itercount: 0
2025-01-18 17:14:41 - root - INFO - Database Name: CITY_LEGISLATION
Schema Name: CITY_LEGISLATION
DDL describes table information.
,0
table_name,ALIENS
description,
DDL,"create or replace TABLE ALIENS (
	""id"" NUMBER(38,0),
	""first_name"" VARCHAR(16777216),
	""last_name"" VARCHAR(16777216),
	""email"" VARCHAR(16777216),
	""gender"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""birth_year"" NUMBER(38,0)
);"

,1
table_name,ALIENS_DETAILS
description,
DDL,"create or replace TABLE ALIENS_DETAILS (
	""detail_id"" NUMBER(38,0),
	""favorite_food"" VARCHAR(16777216),
	""feeding_frequency"" VARCHAR(16777216),
	""aggressive"" NUMBER(38,0)
);"

,2
table_name,SKILLS_DIM
description,
DDL,"create or replace TABLE SKILLS_DIM (
	""skill_id"" NUMBER(38,0),
	""skills"" VARCHAR(16777216),
	""type"" VARCHAR(16777216)
);"

,3
table_name,ALIENS_LOCATION
description,
DDL,"create or replace TABLE ALIENS_LOCATION (
	""loc_id"" NUMBER(38,0),
	""current_location"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""country"" VARCHAR(16777216),
	""occupation"" VARCHAR(16777216)
);"

,4
table_name,ALIEN_DATA
description,
DDL,"create or replace TABLE ALIEN_DATA (
	""id"" NUMBER(38,0),
	""first_name"" VARCHAR(16777216),
	""last_name"" VARCHAR(16777216),
	""email"" VARCHAR(16777216),
	""gender"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""birth_year"" NUMBER(38,0),
	""age"" NUMBER(38,0),
	""favorite_food"" VARCHAR(16777216),
	""feeding_frequency"" VARCHAR(16777216),
	""aggressive"" NUMBER(38,0),
	""occupation"" VARCHAR(16777216),
	""current_location"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""us_region"" VARCHAR(16777216),
	""country"" VARCHAR(16777216)
);"

,5
table_name,CITIES
description,
DDL,"create or replace TABLE CITIES (
	""city_id"" NUMBER(38,0),
	""city_name"" VARCHAR(16777216),
	""latitude"" FLOAT,
	""longitude"" FLOAT,
	""country_code_2"" VARCHAR(16777216),
	""capital"" NUMBER(38,0),
	""population"" FLOAT,
	""insert_date"" VARCHAR(16777216)
);"

,6
table_name,CITIES_COUNTRIES
description,
DDL,"create or replace TABLE CITIES_COUNTRIES (
	""country_id"" NUMBER(38,0),
	""country_name"" VARCHAR(16777216),
	""country_code_2"" VARCHAR(16777216),
	""country_code_3"" VARCHAR(16777216),
	""region"" VARCHAR(16777216),
	""sub_region"" VARCHAR(16777216),
	""intermediate_region"" VARCHAR(16777216),
	""created_on"" VARCHAR(16777216)
);"

,7
table_name,CITIES_CURRENCIES
description,
DDL,"create or replace TABLE CITIES_CURRENCIES (
	""currency_id"" NUMBER(38,0),
	""country_code_2"" VARCHAR(16777216),
	""currency_name"" VARCHAR(16777216),
	""currency_code"" VARCHAR(16777216)
);"

,8
table_name,LEGISLATORS
description,
DDL,"create or replace TABLE LEGISLATORS (
	""full_name"" VARCHAR(16777216),
	""first_name"" VARCHAR(16777216),
	""last_name"" VARCHAR(16777216),
	""middle_name"" VARCHAR(16777216),
	""nickname"" VARCHAR(16777216),
	""suffix"" VARCHAR(16777216),
	""other_names_end"" VARCHAR(16777216),
	""other_names_middle"" VARCHAR(16777216),
	""other_names_last"" VARCHAR(16777216),
	""birthday"" VARCHAR(16777216),
	""gender"" VARCHAR(16777216),
	""id_bioguide"" VARCHAR(16777216),
	""id_bioguide_previous_0"" VARCHAR(16777216),
	""id_govtrack"" NUMBER(38,0),
	""id_icpsr"" FLOAT,
	""id_wikipedia"" VARCHAR(16777216),
	""id_wikidata"" VARCHAR(16777216),
	""id_google_entity_id"" VARCHAR(16777216),
	""id_house_history"" FLOAT,
	""id_house_history_alternate"" FLOAT,
	""id_thomas"" FLOAT,
	""id_cspan"" FLOAT,
	""id_votesmart"" FLOAT,
	""id_lis"" VARCHAR(16777216),
	""id_ballotpedia"" VARCHAR(16777216),
	""id_opensecrets"" VARCHAR(16777216),
	""id_fec_0"" VARCHAR(16777216),
	""id_fec_1"" VARCHAR(16777216),
	""id_fec_2"" VARCHAR(16777216)
);"

,9
table_name,LEGISLATORS_TERMS
description,
DDL,"create or replace TABLE LEGISLATORS_TERMS (
	""id_bioguide"" VARCHAR(16777216),
	""term_number"" NUMBER(38,0),
	""term_id"" VARCHAR(16777216),
	""term_type"" VARCHAR(16777216),
	""term_start"" VARCHAR(16777216),
	""term_end"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""district"" FLOAT,
	""class"" FLOAT,
	""party"" VARCHAR(16777216),
	""how"" VARCHAR(16777216),
	""url"" VARCHAR(16777216),
	""address"" VARCHAR(16777216),
	""phone"" VARCHAR(16777216),
	""fax"" VARCHAR(16777216),
	""contact_form"" VARCHAR(16777216),
	""office"" VARCHAR(16777216),
	""state_rank"" VARCHAR(16777216),
	""rss_url"" VARCHAR(16777216),
	""caucus"" VARCHAR(16777216)
);"

,10
table_name,SKILLS_JOB_DIM
description,
DDL,"create or replace TABLE SKILLS_JOB_DIM (
	""job_id"" NUMBER(38,0),
	""skill_id"" NUMBER(38,0)
);"

,11
table_name,CITIES_LANGUAGES
description,
DDL,"create or replace TABLE CITIES_LANGUAGES (
	""language_id"" NUMBER(38,0),
	""language"" VARCHAR(16777216),
	""country_code_2"" VARCHAR(16777216)
);"

,12
table_name,JOB_POSTINGS_FACT
description,
DDL,"create or replace TABLE JOB_POSTINGS_FACT (
	""job_id"" NUMBER(38,0),
	""company_id"" NUMBER(38,0),
	""job_title_short"" VARCHAR(16777216),
	""job_title"" VARCHAR(16777216),
	""job_location"" VARCHAR(16777216),
	""job_via"" VARCHAR(16777216),
	""job_schedule_type"" VARCHAR(16777216),
	""job_work_from_home"" NUMBER(38,0),
	""search_location"" VARCHAR(16777216),
	""job_posted_date"" VARCHAR(16777216),
	""job_no_degree_mention"" NUMBER(38,0),
	""job_health_insurance"" NUMBER(38,0),
	""job_country"" VARCHAR(16777216),
	""salary_rate"" VARCHAR(16777216),
	""salary_year_avg"" FLOAT,
	""salary_hour_avg"" FLOAT
);"

,13
table_name,LEGISLATION_DATE_DIM
description,
DDL,"create or replace TABLE LEGISLATION_DATE_DIM (
	""date"" VARCHAR(16777216),
	""month_name"" VARCHAR(16777216),
	""day_of_month"" NUMBER(38,0)
);"

,14
table_name,JOB_COMPANY
description,
DDL,"create or replace TABLE JOB_COMPANY (
	""company_id"" NUMBER(38,0),
	""name"" VARCHAR(16777216),
	""link"" VARCHAR(16777216),
	""link_google"" VARCHAR(16777216),
	""thumbnail"" VARCHAR(16777216)
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'CITY_LEGISLATION': {'CITY_LEGISLATION': ['ALIENS', 'ALIENS_DETAILS', 'ALIENS_LOCATION', 'ALIEN_DATA', 'CITIES', 'CITIES_COUNTRIES', 'CITIES_CURRENCIES', 'CITIES_LANGUAGES', 'JOB_COMPANY', 'JOB_POSTINGS_FACT', 'LEGISLATION_DATE_DIM', 'LEGISLATORS', 'LEGISLATORS_TERMS', 'SKILLS_DIM', 'SKILLS_JOB_DIM']}}
Begin Exploring Related Columns
Considered tables and columns:

- **Table**: `"CITIES"`
    - **Column**: `"insert_date"`: Used to determine when each city was added; will be parsed to extract year and month for calculating monthly totals and growth percentages.
    - **Column**: `"city_id"`: Unique identifier for each city; used to count the number of new cities added.

**Conditions that may be used**:

- Filter records where `"insert_date"` falls in April, May, or June for the years 2021-2023.
- Exclude data from 2021 in the final output but use it as a baseline for calculating growth rates.
- Parse `"insert_date"` using `TRY_TO_DATE` with appropriate date format.
- Handle cases where `"insert_date"` may be null or in an unexpected format.

Below are 10 simple, short, non-nested SQL queries to understand the values in related columns:

```sql
-- 1. Select distinct insert dates to see the date formats
SELECT DISTINCT "insert_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
LIMIT 1000;

-- 2. Count total number of cities in the table
SELECT COUNT(*) AS "total_cities"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
LIMIT 1000;

-- 3. Select insert_date and parsed date to check date parsing
SELECT "insert_date", TRY_TO_DATE("insert_date", 'YYYY-MM-DD') AS "parsed_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
LIMIT 1000;

-- 4. Select records where insert_date cannot be parsed to date
SELECT "city_id", "insert_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE TRY_TO_DATE("insert_date", 'YYYY-MM-DD') IS NULL
LIMIT 1000;

-- 5. Select distinct years from insert_date
SELECT DISTINCT EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) AS "year"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE TRY_TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
LIMIT 1000;

-- 6. Select distinct months from insert_date
SELECT DISTINCT EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) AS "month"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE TRY_TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
LIMIT 1000;

-- 7. Count number of cities added in April 2021
SELECT COUNT(*) AS "cities_added_in_Apr_2021"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 2021
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 4
LIMIT 1000;

-- 8. List city_ids and insert_dates for cities added in May 2022
SELECT "city_id", "insert_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 2022
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 5
LIMIT 1000;

-- 9. Count number of cities added in each month of April, May, June for 2022
SELECT EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) AS "month",
       COUNT(*) AS "num_cities"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 2022
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4,5,6)
GROUP BY EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD'))
LIMIT 1000;

-- 10. Select all cities added in June 2023
SELECT "city_id", "city_name", "insert_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 2023
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 6
LIMIT 1000;
```

These queries help explore the data in the `"CITIES"` table, particularly focusing on the `"insert_date"` column to understand the date formats, parse dates, extract years and months, and count the number of cities added during specific periods. This exploration is essential for calculating the monthly totals and growth percentages required for the task.Query:
-- 1. Select distinct insert dates to see the date formats
SELECT DISTINCT "insert_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
LIMIT 1000
Answer:
Too long, hard cut:
insert_date
2022-01-12
2021-08-22
2021-03-11
2021-02-24
2023-05-04
2023-03-16
2023-04-25
2021-09-01
2021-04-03
2021-03-15
2023-05-22
2021-12-01
2023-05-31
2021-01-31
2021-05-03
2021-04-15
2023-03-01
2021-12-18
2022-01-02
2022-01-20
2021-09-28
2022-04-10
2022-06-25
2022-04-08
2023-02-28
2021-09-17
2022-12-19
2022-10-31
2023-01-15
2023-04-21
2022-11-06
2021-05-25
2021-02-28
2023-03-09
2021-09-20
2022-11-12
2023-01-25
2022-07-31
2021-03-02
2022-06-22
2021-07-05
2021-12-15
2021-02-08
2023-04-16
2022-05-31
2022-09-10
2023-05-12
2022-02-17
2021-08-06
2021-11-18
2022-05-12
2023-07-01
2021-06-04
2021-01-27
2022-01-03
2022-08-05
2023-01-01
2023-01-21
2022-02-10
2022-05-16
2022-08-08
2023-06-18
2022-03-26
2023-03-31
2023-04-08
2021-12-09
2023-05-10
2022-03-17
2021-05-02
2021-11-25
2021-03-22
2023-01-23
2022-04-12
2022-05-23
2022-01-15
2022-09-20
2021-01-26
2022-02-19
2023-04-13
2023-04-19
2021-01-01
2022-10-29
2021-10-07
2021-06-08
2022-05-21
2022-10-15
2022-06-11
2023-05-18
2022-11-01
2021-09-05
2023-03-03
2022-12-18
2022-01-14
2023-04-09
2022-06-20
2022-09-11
2022-09-17
2021-05-18
2022-07-29
2023-03-07
2021-11-01
2022-10-11
2023-05-20
2022-03-24
2022-10-20
2021-05-04
2022-01-30
2021-12-05
2022-08-20
2022-02-09
2023-04-28
2023-07-29
2022-03-19
2021-04-26
2023-03-20
2021-10-16
2021-02-12
2022-06-29
2021-06-13
2022-08-26
2022-01-29
2022-03-23
2022-10-14
2022-07-08
2023-07-18
2022-08-13
2023-02-22
2021-09-07
2023-02-04
2023-06-08
2021-11-17
2023-07-07
2021-08-21
2021-12-21
2021-08-16
2023-07-14
2021-01-08
2021-07-22
2022-12-30
2022-10-18
2021-06-06
2023-05-24
2023-07-17
2021-10-22
2022-04-01
2021-05-16
2022-12-17
2021-05-09
2022-10-27
2023-02-23
2023-05-28
2021-12-29
2021-12-08
2021-11-14
2021-10-17
2022-09-09
2021-05-05
2022-11-09
2022-11-13
2021-09-04
2022-02-02
2022-09-18
2023-04-20
2021-12-06
2023-05-14
2022-06-08
2021-05-23
2021-01-15
2022-05-11
2023-05-06
2021-10-29
2022-02-23
2021-05-29
2022-03-25
2021-12-20
2022-05-07
2022-04-19
2022-07-27
2021-02-27
2022-10-08
2021-03-01
2021-08-14
2021-03-08
2021-12-16
2023-04-29
2022-04-03
2022-09-23
2021-04-14
2021-02-07
2021-10-08
2022-02-18
2021-10-26
2021-06-15
2021-03-19
2022-06-24
2023-06-27
2021-07-12
2021-02-17
2023-01-12
2023-05-16
2021-07-20
2022-04-27
2022-07-14
2023-01-24
2023-03-15
2021-11-13
2022-01-26
2023-03-26
2021-09-03
2022-03-16
2022-06-18
2021-07-17
2022-02-13
2021-02-23
2021-10-12
2022-03-07
2023-05-02
2022-05-08
2021-01-14
2023-06-24
2022-10-10
2022-01-19
2021-08-13
2022-05-02
2021-08-31
2022-04-13
2021-07-28
2022-01-04
2022-02-11
2021-04-02
2023-07-31
2021-02-22
2021-05-20
2022-02-04
2022-06-05
2022-01-13
2022-02-26
2023-01-19
2023-01-20
2021-08-27
2021-05-12
2022-11-22
2023-05-07
2021-10-14
2021-04-09
2023-07-05
2023-07-15
2021-10-04
2021-10-13
2022-05-03
2023-06-17
2022-01-06
2021-01-19
2021-04-01
2021-10-30
2022-11-10
2022-08-18
2023-02-17
2022-05-29
2021-01-12
2021-09-14
2023-05-08
2021-08-18
2022-12-05
2021-09-09
2022-11-16
2022-10-28
2023-05-27
2021-02-19
2022-11-26
2023-02-09
2021-09-12
2021-11-10
2021-10-09
2022-03-22
2021-10-15
2021-08-04
2022-12-12
2022-03-08
2022-12-01
2022-03-05
2022-08-02
2022-04-14
2021-06-28
2021-04-19
2022-08-24
2022-04-06
2021-11-06
2021-10-10
2021-07-16
2022-12-11
2021-08-26
2022-12-22
2021-01-11
2021-10-20
2023-04-02
2021-05-28
2021-03-29
2022-09-15
2022-10-07
2022-07-13
2021-03-06
2023-05-30
2021-12-03
2022-07-23
2023-06-21
2021-02-16
2021-09-27
2021-08-30
2022-12-02
2023-03-18
2021-10-18
2023-04-30
2021-02-09
2022-08-01
2021-12-24
2021-05-22
2023-03-05
2021-06-03
2021-08-01
2022-04-24
2021-01-22
2021-12-31
2022-08-28
2021-05-11
2022-01-25
2023-01-10
2021-07-04
2023-07-21
2022-04-25
2023-04-27
2021-03-20
2023-03-11
2023-06-01
2023-03-25
2023-06-19
2021-11-20
2022-11-27
2022-09-07
2022-11-11
2023-05-09
2022-06-19
2022-02-16
2021-09-13
2023-02-14
2023-02-08
2022-11-05
2021-10-06
2022-07-22
2023-06-26
2023-01-26
2021-01-25
2021-07-06
2022-10-05
2021-06-26
2021-03-10
2022-07-15
2021-04-27
2021-05-13
2022-04-16
2022-08-17
2021-06-02
2022-12-25
2021-07-31
2021-08-25
2021-08-02
2021-06-01
2022-07-17
2022-09-03
2021-08-11
2023-04-12
2022-01-27
2022-05-30
2021-09-23
2021-05-21
2021-11-15
2021-01-10
2022-06-01
2023-07-24
2022-04-28
2022-08-22
2022-07-09
2023-05-11
2022-12-06
2021-04-05
2021-04-25
2021-05-01
2023-01-02
2023-03-19
2021-12-30
2021-02-13
2022-11-03
2023-01-03
2023-06-16
2021-09-19
2022-09-06
2022-03-10
2021-02-05
2022-03-04
2022-10-25
2022-02-21
2021-12-22
2022-12-21
2021-07-21
2021-10-19
2021-07-19
2021-02-02
2022-12-31
2022-03-12
2021-03-25
2021-08-20
2021-03-24
2022-11-08
2023-07-03
2022-04-17
2022-10-23
2023-04-23
2021-04-29
2022-07-20
2021-03-03
2023-02-13
2021-04-21
2023-07-13
2023-02-06
2023-06-23
2022-07-01
2022-12-08
2022-11-18
2021-04-06
2022-01-31
2021-07-03
2022-07-21
2021-04-13
2022-07-12
2022-06-21
2021-06-21
2023-07-16
2023-01-30
2021-02-25
2021-06-11
2022-01-09
2022-07-28
2022-06-28
2023-05-21
2023-05-19
2022-05-22
2021-09-22
2022-12-15
2021-05-30
2022-06-10
2022-04-21
2021-04-24
2021-08-07
2021-
Query:
-- 2. Count total number of cities in the table
SELECT COUNT(*) AS "total_cities"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
LIMIT 1000
Answer:
total_cities
44622
Query:
-- 3. Select insert_date and parsed date to check date parsing
SELECT "insert_date", TRY_TO_DATE("insert_date", 'YYYY-MM-DD') AS "parsed_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
LIMIT 1000
Answer:
Too long, hard cut:
insert_date,parsed_date
2022-01-12,2022-01-12
2021-08-22,2021-08-22
2021-03-11,2021-03-11
2021-02-24,2021-02-24
2023-05-04,2023-05-04
2023-03-16,2023-03-16
2023-04-25,2023-04-25
2021-10-07,2021-10-07
2021-09-01,2021-09-01
2021-04-03,2021-04-03
2023-04-08,2023-04-08
2021-03-15,2021-03-15
2023-05-22,2023-05-22
2021-12-09,2021-12-09
2021-12-01,2021-12-01
2023-05-10,2023-05-10
2023-05-31,2023-05-31
2021-01-31,2021-01-31
2021-05-03,2021-05-03
2021-06-08,2021-06-08
2021-04-15,2021-04-15
2021-02-22,2021-02-22
2022-03-17,2022-03-17
2023-03-01,2023-03-01
2021-12-18,2021-12-18
2022-01-02,2022-01-02
2022-01-20,2022-01-20
2022-05-21,2022-05-21
2021-03-02,2021-03-02
2022-06-22,2022-06-22
2021-09-28,2021-09-28
2022-04-10,2022-04-10
2022-06-25,2022-06-25
2023-04-08,2023-04-08
2022-04-08,2022-04-08
2021-07-05,2021-07-05
2021-12-15,2021-12-15
2021-05-20,2021-05-20
2021-05-02,2021-05-02
2022-10-15,2022-10-15
2021-11-25,2021-11-25
2023-02-28,2023-02-28
2023-05-04,2023-05-04
2021-07-20,2021-07-20
2022-06-11,2022-06-11
2021-02-08,2021-02-08
2021-11-25,2021-11-25
2021-03-22,2021-03-22
2021-09-17,2021-09-17
2023-01-23,2023-01-23
2023-05-18,2023-05-18
2022-11-01,2022-11-01
2022-08-26,2022-08-26
2022-12-19,2022-12-19
2021-09-05,2021-09-05
2023-05-31,2023-05-31
2022-10-31,2022-10-31
2021-06-15,2021-06-15
2022-04-12,2022-04-12
2023-03-03,2023-03-03
2023-04-16,2023-04-16
2022-05-31,2022-05-31
2022-12-18,2022-12-18
2022-04-27,2022-04-27
2022-05-23,2022-05-23
2022-01-15,2022-01-15
2022-09-20,2022-09-20
2021-01-26,2021-01-26
2022-09-19,2022-09-19
2023-01-15,2023-01-15
2023-01-01,2023-01-01
2022-07-14,2022-07-14
2022-01-14,2022-01-14
2022-02-19,2022-02-19
2023-01-24,2023-01-24
2023-04-09,2023-04-09
2023-03-15,2023-03-15
2022-08-16,2022-08-16
2022-06-20,2022-06-20
2023-01-21,2023-01-21
2022-01-29,2022-01-29
2023-04-21,2023-04-21
2021-12-17,2021-12-17
2022-09-11,2022-09-11
2022-09-17,2022-09-17
2021-03-19,2021-03-19
2021-11-13,2021-11-13
2022-02-04,2022-02-04
2022-09-10,2022-09-10
2023-05-12,2023-05-12
2022-06-05,2022-06-05
2022-01-26,2022-01-26
2022-02-17,2022-02-17
2022-11-06,2022-11-06
2021-05-18,2021-05-18
2023-03-26,2023-03-26
2022-06-24,2022-06-24
2022-01-13,2022-01-13
2022-07-29,2022-07-29
2023-04-21,2023-04-21
2021-09-03,2021-09-03
2023-03-07,2023-03-07
2022-02-26,2022-02-26
2021-08-18,2021-08-18
2021-08-06,2021-08-06
2021-11-18,2021-11-18
2021-11-01,2021-11-01
2022-03-23,2022-03-23
2022-10-11,2022-10-11
2023-01-19,2023-01-19
2022-10-14,2022-10-14
2022-03-16,2022-03-16
2023-01-20,2023-01-20
2023-05-20,2023-05-20
2022-03-24,2022-03-24
2023-04-13,2023-04-13
2022-05-12,2022-05-12
2022-10-20,2022-10-20
2021-05-25,2021-05-25
2023-07-01,2023-07-01
2023-06-27,2023-06-27
2021-05-04,2021-05-04
2023-04-19,2023-04-19
2022-06-18,2022-06-18
2022-07-08,2022-07-08
2022-02-10,2022-02-10
2022-08-26,2022-08-26
2021-08-27,2021-08-27
2023-05-24,2023-05-24
2021-02-28,2021-02-28
2021-05-12,2021-05-12
2022-10-31,2022-10-31
2023-05-18,2023-05-18
2021-07-17,2021-07-17
2022-02-13,2022-02-13
2021-02-23,2021-02-23
2022-07-14,2022-07-14
2022-01-30,2022-01-30
2021-12-05,2021-12-05
2021-11-13,2021-11-13
2023-07-18,2023-07-18
2021-10-12,2021-10-12
2021-07-12,2021-07-12
2021-01-01,2021-01-01
2022-03-07,2022-03-07
2023-05-02,2023-05-02
2022-05-08,2022-05-08
2022-05-16,2022-05-16
2021-08-28,2021-08-28
2022-08-20,2022-08-20
2023-06-27,2023-06-27
2021-01-14,2021-01-14
2022-11-22,2022-11-22
2022-01-13,2022-01-13
2022-08-26,2022-08-26
2022-08-13,2022-08-13
2023-05-07,2023-05-07
2021-02-17,2021-02-17
2021-10-14,2021-10-14
2021-03-09,2021-03-09
2022-02-09,2022-02-09
2023-06-24,2023-06-24
2023-04-28,2023-04-28
2023-07-29,2023-07-29
2023-02-22,2023-02-22
2023-01-12,2023-01-12
2022-03-19,2022-03-19
2022-08-08,2022-08-08
2021-04-26,2021-04-26
2021-09-07,2021-09-07
2022-10-10,2022-10-10
2023-02-04,2023-02-04
2023-06-08,2023-06-08
2023-03-09,2023-03-09
2023-05-16,2023-05-16
2022-01-19,2022-01-19
2022-08-14,2022-08-14
2021-11-17,2021-11-17
2023-06-18,2023-06-18
2023-07-07,2023-07-07
2021-09-20,2021-09-20
2022-12-05,2022-12-05
2021-01-17,2021-01-17
2021-04-09,2021-04-09
2023-03-20,2023-03-20
2021-10-16,2021-10-16
2021-08-13,2021-08-13
2023-07-05,2023-07-05
2021-03-13,2021-03-13
2021-08-21,2021-08-21
2022-01-13,2022-01-13
2022-11-12,2022-11-12
2021-09-09,2021-09-09
2022-10-29,2022-10-29
2022-03-23,2022-03-23
2021-09-17,2021-09-17
2021-06-04,2021-06-04
2023-07-15,2023-07-15
2023-01-24,2023-01-24
2023-01-25,2023-01-25
2022-05-02,2022-05-02
2021-10-04,2021-10-04
2021-10-13,2021-10-13
2022-05-03,2022-05-03
2023-06-17,2023-06-17
2022-07-31,2022-07-31
2022-03-26,2022-03-26
2021-12-21,2021-12-21
2021-01-27,2021-01-27
2022-01-19,2022-01-19
2022-05-24,2022-05-24
2021-02-24,2021-02-24
2022-01-06,2022-01-06
2021-01-19,2021-01-19
2021-08-16,2021-08-16
2021-04-01,2021-04-01
2021-09-07,2021-09-07
2022-01-03,2022-01-03
2022-06-02,2022-06-02
2023-07-14,2023-07-14
2022-04-02,2022-04-02
2021-01-08,2021-01-08
2021-08-06,2021-08-06
2021-10-30,2021-10-30
2022-11-16,2022-11-16
2021-07-22,2021-07-22
2021
Query:
SELECT EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Year",
       EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Month",
       COUNT(*) AS "Total number of cities added"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
  AND EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4, 5, 6)
  AND EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) BETWEEN 2021 AND 2023
GROUP BY EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')),
         EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD'))
ORDER BY "Year", "Month";
Answer:
Year,Month,Total number of cities added
2021,4,1508
2021,5,1509
2021,6,1395
2022,4,1437
2022,5,1459
2022,6,1411
2023,4,1402
2023,5,1389
2023,6,1432
Query:
-- 5. Select distinct years from insert_date
SELECT DISTINCT EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) AS "year"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE TRY_TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
LIMIT 1000
Answer:
year
2022
2021
2023
Query:
-- 6. Select distinct months from insert_date
SELECT DISTINCT EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) AS "month"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE TRY_TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
LIMIT 1000
Answer:
month
1
8
3
2
5
4
10
12
6
7
9
11
Query:
-- 7. Count number of cities added in April 2021
SELECT COUNT(*) AS "cities_added_in_Apr_2021"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 2021
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 4
LIMIT 1000
Answer:
cities_added_in_Apr_2021
1508
Query:
-- 8. List city_ids and insert_dates for cities added in May 2022
SELECT "city_id", "insert_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 2022
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 5
LIMIT 1000
Answer:
Too long, hard cut:
city_id,insert_date
28,2022-05-21
62,2022-05-31
65,2022-05-23
117,2022-05-12
147,2022-05-08
148,2022-05-16
201,2022-05-02
204,2022-05-03
211,2022-05-24
240,2022-05-29
301,2022-05-14
397,2022-05-11
473,2022-05-05
476,2022-05-07
494,2022-05-24
575,2022-05-15
598,2022-05-16
642,2022-05-30
645,2022-05-11
684,2022-05-30
853,2022-05-24
865,2022-05-29
870,2022-05-19
875,2022-05-22
892,2022-05-06
932,2022-05-26
963,2022-05-04
966,2022-05-29
995,2022-05-24
998,2022-05-03
1042,2022-05-01
1137,2022-05-12
1147,2022-05-06
1182,2022-05-22
1279,2022-05-11
1290,2022-05-21
1292,2022-05-24
1340,2022-05-29
1375,2022-05-02
1437,2022-05-11
1464,2022-05-08
1515,2022-05-10
1572,2022-05-05
1672,2022-05-26
1731,2022-05-26
1792,2022-05-07
1805,2022-05-27
1809,2022-05-24
1831,2022-05-14
1861,2022-05-28
1901,2022-05-06
1951,2022-05-02
1963,2022-05-29
2005,2022-05-30
2035,2022-05-01
2036,2022-05-15
2044,2022-05-16
2049,2022-05-29
2054,2022-05-26
2118,2022-05-19
2135,2022-05-25
2145,2022-05-19
2207,2022-05-11
2240,2022-05-22
2386,2022-05-24
2400,2022-05-29
2418,2022-05-30
2429,2022-05-27
2487,2022-05-15
2489,2022-05-01
2495,2022-05-22
2514,2022-05-09
2528,2022-05-16
2537,2022-05-16
2664,2022-05-11
2737,2022-05-09
2743,2022-05-04
2820,2022-05-28
2827,2022-05-24
2870,2022-05-20
2915,2022-05-22
2941,2022-05-22
2950,2022-05-02
2953,2022-05-03
2977,2022-05-18
3001,2022-05-27
3025,2022-05-27
3032,2022-05-11
3114,2022-05-11
3128,2022-05-24
3150,2022-05-17
3158,2022-05-25
3173,2022-05-02
3204,2022-05-01
3211,2022-05-14
3219,2022-05-18
3231,2022-05-31
3290,2022-05-05
3295,2022-05-02
3402,2022-05-20
3411,2022-05-19
3463,2022-05-19
3488,2022-05-27
3515,2022-05-01
3563,2022-05-31
3600,2022-05-30
3632,2022-05-26
3674,2022-05-12
3703,2022-05-13
3786,2022-05-13
3837,2022-05-24
3844,2022-05-09
3890,2022-05-08
3892,2022-05-31
3940,2022-05-15
3974,2022-05-27
4038,2022-05-17
4063,2022-05-30
4113,2022-05-27
4146,2022-05-10
4270,2022-05-14
4317,2022-05-03
4330,2022-05-05
4362,2022-05-07
4371,2022-05-31
4385,2022-05-22
4506,2022-05-21
4537,2022-05-22
4561,2022-05-07
4569,2022-05-10
4657,2022-05-02
4671,2022-05-24
4696,2022-05-09
4721,2022-05-02
4733,2022-05-04
4850,2022-05-11
4894,2022-05-21
4973,2022-05-08
4978,2022-05-10
5013,2022-05-14
5059,2022-05-19
5099,2022-05-08
5117,2022-05-19
5184,2022-05-12
5212,2022-05-19
5232,2022-05-27
5315,2022-05-18
5385,2022-05-29
5418,2022-05-05
5424,2022-05-23
5431,2022-05-16
5476,2022-05-12
5484,2022-05-09
5524,2022-05-26
5563,2022-05-19
5601,2022-05-24
5627,2022-05-06
5657,2022-05-12
5686,2022-05-23
5728,2022-05-01
5753,2022-05-19
5755,2022-05-16
5781,2022-05-13
5923,2022-05-29
5930,2022-05-08
5931,2022-05-29
5949,2022-05-12
5966,2022-05-20
5979,2022-05-23
6004,2022-05-27
6026,2022-05-01
6128,2022-05-13
6200,2022-05-05
6235,2022-05-10
6279,2022-05-29
6281,2022-05-19
6340,2022-05-28
6463,2022-05-10
6466,2022-05-24
6470,2022-05-18
6523,2022-05-06
6529,2022-05-05
6560,2022-05-04
6646,2022-05-04
6658,2022-05-14
6672,2022-05-29
6679,2022-05-13
6738,2022-05-09
6765,2022-05-30
6767,2022-05-13
6780,2022-05-27
6799,2022-05-29
6808,2022-05-29
6869,2022-05-29
6906,2022-05-02
6908,2022-05-04
6910,2022-05-27
6913,2022-05-07
6918,2022-05-28
6930,2022-05-24
6932,2022-05-05
6983,2022-05-16
6989,2022-05-28
7042,2022-05-09
7098,2022-05-06
7151,2022-05-11
7204,2022-05-01
7224,2022-05-20
7227,2022-05-12
7256,2022-05-24
7283,2022-05-14
7373,2022-05-12
7440,2022-05-03
7448,2022-05-17
7561,2022-05-23
7577,2022-05-12
7632,2022-05-08
7674,2022-05-08
7702,2022-05-30
7721,2022-05-31
7730,2022-05-24
7785,2022-05-08
7806,2022-05-07
7807,2022-05-20
7858,2022-05-29
7866,2022-05-21
7877,2022-05-26
7949,2022-05-19
8044,2022-05-17
8049,2022-05-07
8060,2022-05-04
8096,2022-05-28
8121,2022-05-13
8156,2022-05-27
8159,2022-05-07
8168,2022-05-13
8198,2022-05-30
8206,2022-05-02
8226,2022-05-14
8266,2022-05-02
8299,2022-05-20
8354,2022-05-01
8389,2022-05-01
8520,2022-05-29
8545,2022-05-06
8546,2022-05-26
8550,2022-05-04
8558,2022-05-02
8566,2022-05-12
8623,2022-05-27
8631,2022-05-24
8644,2022-05-31
8661,2022-05-18
8709,2022-05-09
8716,2022-05-06
8766,2022-05-12
8781,2022-05-04
8827,2022-05-29
8832,2022-05-16
8899,2022-05-19
8914,2022-05-14
8934,2022-05-28
9052,2022-05-10
9094,2022-05-28
9101,2022-05-19
9102,2022-05-24
9146,2022-05-21
9148,2022-05-25
9161,2022-05-07
9175,2022-05-01
9186,2022-05-01
9263,2022-05-12
9426,2022-05-31
9464,2022-05-24
9498,2022-05-28
9560,2022-05-11
9589,2022-05-28
9638,2022-05-28
9656,2022-05-31
9676,2022-05-20
9710,2022-05-12
9739,2022-05-02
9745,2022-05-14
9827,2022-05-25
9837,2022-05-16
9847,2022-05-09
9865,2022-05-28
9873,2022-05-01
9905,2022-05-20
9944,2022-05-27
9959,2022-05-23
10027,2022-05-16
10091,2022-05-14
10133,2022-05-19
10158,2022-05-04
10166,2022-05-09
10184,2022-05-18
10192,2022-05-07
10194,2022-05-10
10197,2022-05-03
10208,2022-05-01
10267,2022-05-18
10280,2022-05-25
10376,2022-05-06
10425,2022-05-05
10428,2022-05-19
10431,2022-05-16
10444,2022-05-24
10467,2022-05-24
10526,2022-05-22
10545,2022-05-02
10554,2022-05-04

Query:
-- 9. Count number of cities added in each month of April, May, June for 2022
SELECT EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) AS "month",
       COUNT(*) AS "num_cities"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 2022
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4,5,6)
GROUP BY EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD'))
LIMIT 1000
Answer:
month,num_cities
5,1459
6,1411
4,1437
Query:
-- 10. Select all cities added in June 2023
SELECT "city_id", "city_name", "insert_date"
FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
WHERE EXTRACT(YEAR FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 2023
  AND EXTRACT(MONTH FROM TRY_TO_DATE("insert_date", 'YYYY-MM-DD')) = 6
LIMIT 1000
Answer:
Too long, hard cut:
city_id,city_name,insert_date
121,yongzhou,2023-06-27
151,barcelona,2023-06-27
162,timbio,2023-06-24
173,suzhou,2023-06-08
179,luzhou,2023-06-18
205,zaozhuang,2023-06-17
333,huizhou,2023-06-07
361,depok,2023-06-21
368,yanan,2023-06-24
382,shengli,2023-06-16
384,taizhou,2023-06-30
417,sanliurfa,2023-06-24
470,manhattan,2023-06-08
472,kampala,2023-06-01
479,heihe,2023-06-16
495,agra,2023-06-19
547,yangshe,2023-06-26
601,rosario,2023-06-15
604,jabalpur,2023-06-08
643,maiduguri,2023-06-17
699,gongzhuling,2023-06-21
712,ranchi,2023-06-19
750,monrovia,2023-06-23
884,avarua,2023-06-25
914,yingcheng,2023-06-06
924,zamboanga city,2023-06-23
936,setagaya,2023-06-13
950,kitakyushu,2023-06-28
955,marrakech,2023-06-23
956,donetsk,2023-06-18
1034,pasig city,2023-06-16
1047,mediouna,2023-06-24
1124,licheng,2023-06-18
1128,nampula,2023-06-25
1138,rochester,2023-06-01
1178,dasmarinas,2023-06-01
1194,pendik,2023-06-02
1220,shanhu,2023-06-10
1294,rotterdam,2023-06-19
1313,nagercoil,2023-06-19
1315,pontianak,2023-06-16
1318,villa nueva,2023-06-02
1442,nansana,2023-06-28
1476,yazd,2023-06-12
1490,maipu,2023-06-20
1494,port said,2023-06-17
1504,jinghong,2023-06-18
1527,lipetsk,2023-06-06
1561,johor bahru,2023-06-09
1591,yueqing,2023-06-05
1613,kaliningrad,2023-06-01
1623,shekhupura,2023-06-27
1628,jiaojiangcun,2023-06-13
1682,udaipur,2023-06-26
1763,daloa,2023-06-15
1781,takamatsu,2023-06-08
1791,mataram,2023-06-02
1818,yuregir,2023-06-21
1883,plovdiv,2023-06-04
1940,butuan,2023-06-05
1952,bharatpur,2023-06-26
1953,az zubayr,2023-06-05
1965,coventry,2023-06-25
1974,iligan,2023-06-26
1979,utrecht,2023-06-28
2034,itaquaquecetuba,2023-06-14
2066,caruaru,2023-06-14
2069,antonio enes,2023-06-27
2079,kusti,2023-06-25
2081,simferopol,2023-06-07
2083,sumqayit,2023-06-22
2107,beni,2023-06-23
2116,reading,2023-06-17
2153,gungoren,2023-06-12
2167,sukabumi,2023-06-29
2209,timisoara,2023-06-13
2243,bor,2023-06-06
2246,santa rosa,2023-06-17
2248,shahre qods,2023-06-14
2261,alanya,2023-06-18
2310,akita,2023-06-11
2324,praia grande,2023-06-13
2332,stockport,2023-06-26
2361,valparaiso,2023-06-03
2375,mabalacat,2023-06-18
2412,ichalkaranji,2023-06-23
2473,barasat,2023-06-12
2477,kostroma,2023-06-19
2532,maradi,2023-06-02
2538,quilmes,2023-06-17
2551,siddhirganj,2023-06-18
2671,gadda madiral,2023-06-23
2712,gdynia,2023-06-17
2727,parana,2023-06-12
2732,imperatriz,2023-06-09
2761,santa maria,2023-06-28
2856,miri,2023-06-23
2875,raichur,2023-06-06
2920,pathardi,2023-06-08
2979,mallawi,2023-06-12
2996,polokwane,2023-06-22
2998,tchaourou,2023-06-07
3038,oviedo,2023-06-19
3088,babruysk,2023-06-29
3125,pskov,2023-06-01
3161,beersheba,2023-06-27
3169,northcote,2023-06-02
3251,matsue,2023-06-16
3256,huacho,2023-06-22
3266,nema,2023-06-28
3285,drabar,2023-06-27
3308,oradea,2023-06-07
3333,baharampur,2023-06-22
3347,cuautla,2023-06-07
3356,sodo,2023-06-19
3372,nampa,2023-06-17
3391,mus,2023-06-20
3404,pabna,2023-06-07
3458,al hasakah,2023-06-10
3465,san diego,2023-06-07
3473,joetsu,2023-06-21
3491,breda,2023-06-30
3494,guri,2023-06-06
3500,temirtau,2023-06-26
3521,nis,2023-06-30
3540,uji,2023-06-23
3560,kindia,2023-06-20
3604,dagupan city,2023-06-24
3654,burgos,2023-06-06
3664,tebingtinggi,2023-06-19
3693,ha long,2023-06-05
3699,shahin shahr,2023-06-28
3754,as suwayq,2023-06-20
3791,haarlem,2023-06-03
3794,catape,2023-06-06
3809,sampit,2023-06-01
3841,nador,2023-06-29
3842,saqqez,2023-06-30
3854,abengourou,2023-06-02
3867,san marcos,2023-06-17
3921,dhamar,2023-06-20
4036,almetyevsk,2023-06-12
4046,el minie,2023-06-25
4071,balurghat,2023-06-15
4077,bandirma,2023-06-02
4115,moriguchi,2023-06-13
4147,miass,2023-06-14
4180,nimes,2023-06-29
4279,misato,2023-06-29
4313,shillong,2023-06-26
4382,santa maria,2023-06-03
4384,gweru,2023-06-09
4399,fujita,2023-06-22
4541,norzagaray,2023-06-26
4571,ruda slaska,2023-06-22
4586,santa rita,2023-06-24
4588,daraga,2023-06-13
4656,cameta,2023-06-15
4706,kozan,2023-06-14
4726,taldyqorghan,2023-06-10
4730,ponnagyun,2023-06-06
4748,hoshangabad,2023-06-24
4768,zoetermeer,2023-06-25
4785,nahiyat khan bani sad,2023-06-23
4794,nagda,2023-06-26
4905,glazoue,2023-06-14
4931,delgado,2023-06-25
4966,kahta,2023-06-15
4968,machiques,2023-06-27
4984,bento goncalves,2023-06-21
4997,dorud,2023-06-14
5037,barcelos,2023-06-19
5055,poa,2023-06-25
5065,iowa city,2023-06-04
5200,cambridge,2023-06-05
5273,sano,2023-06-15
5275,sloviansk,2023-06-28
5291,erlangen,2023-06-01
5320,materi,2023-06-30
5345,tecpan guatemala,2023-06-11
5361,la gi,2023-06-19
5381,mawanella,2023-06-16
5465,al ahad al masarihah,2023-06-09
5481,ourinhos,2023-06-02
5523,sandacho,2023-06-28
5571,cawayan,2023-06-17
5611,pateros,2023-06-29
5639,moron,2023-06-17
5707,mityana,2023-06-30
5708,presidente franco,2023-06-05
5735,balanga,2023-06-04
5756,sergiyev posad,2023-06-06
5760,olanchito,2023-06-28
5795,paniqui,2023-06-06
5798,dolisie,2023-06-20
5844,miryang,2023-06-17
5847,houzhuang,2023-06-27
5849,hildesheim,2023-06-30
5875,paoy paet,2023-06-20
5879,rio rancho,2023-06-01
5883,igar
End Exploring Related Columns
Task: Calculate the number of new cities inserted each April, May, and June, along with the year-over-year growth percentage for each month from 2021-2023. List the year, month, the total number of cities added, the running cumulative total, and the year-over-year growth percentage (including "%") for both the monthly total and the running total. Ensure that 2021 data is used only as a baseline for calculating growth rates, and exclude it from the final output.

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: SELECT S."Column_Name" FROM {Database Name}.{Schema Name}.{Table_name} (ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
Year,Month,Total number of cities added,Running cumulative total,Year-over-year growth percentage for monthly total (%),Year-over-year growth percentage for running total (%)
2022,April,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2022,May,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2022,June,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2023,April,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2023,May,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2023,June,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
```

This table displays the number of new cities added each April, May, and June in 2022 and 2023. It includes the total number of cities added in each month, the running cumulative total up to that month, and the year-over-year growth percentages for both the monthly totals and the cumulative totals compared to the same month in the previous year. The 2021 data is used as a baseline for calculating growth rates but is not included in the output..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'CITY_LEGISLATION': {'CITY_LEGISLATION': ['ALIENS', 'ALIENS_DETAILS', 'ALIENS_LOCATION', 'ALIEN_DATA', 'CITIES', 'CITIES_COUNTRIES', 'CITIES_CURRENCIES', 'CITIES_LANGUAGES', 'JOB_COMPANY', 'JOB_POSTINGS_FACT', 'LEGISLATION_DATE_DIM', 'LEGISLATORS', 'LEGISLATORS_TERMS', 'SKILLS_DIM', 'SKILLS_JOB_DIM']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book" SQL: WHERE "title" LIKE '%book%'
However, if the string is not decided, you may use ILIKE and %. e.g. Get articles that mention "education": SQL: "body" ILIKE '%education%' OR "title" ILIKE '%education%'
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Keep all decimals to four decimal places.

2025-01-18 17:16:04 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 17:16:04 - root - INFO - ```sql
WITH monthly_totals AS (
    SELECT
        EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Year",
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Month",
        COUNT(*) AS "Total_Cities"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE
        TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
        AND EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4, 5, 6)
        AND EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) BETWEEN 2021 AND 2023
    GROUP BY 1, 2
),
cumulative_totals AS (
    SELECT
        "Year",
        "Month",
        "Total_Cities",
        SUM("Total_Cities") OVER (PARTITION BY "Year" ORDER BY "Month") AS "Running_Cumulative_Total"
    FROM monthly_totals
),
joined_totals AS (
    SELECT
        ct1."Year",
        ct1."Month",
        ct1."Total_Cities",
        ct1."Running_Cumulative_Total",
        ct2."Total_Cities" AS "Prev_Year_Total_Cities",
        ct2."Running_Cumulative_Total" AS "Prev_Year_Running_Cumulative_Total"
    FROM cumulative_totals ct1
    LEFT JOIN cumulative_totals ct2
        ON ct1."Year" = ct2."Year" + 1
        AND ct1."Month" = ct2."Month"
)
SELECT
    CAST("Year" AS VARCHAR) AS "Year",
    CASE "Month"
        WHEN 4 THEN 'April'
        WHEN 5 THEN 'May'
        WHEN 6 THEN 'June'
    END AS "Month",
    "Total_Cities" AS "Total number of cities added",
    "Running_Cumulative_Total" AS "Running cumulative total",
    CASE
        WHEN "Prev_Year_Total_Cities" IS NOT NULL AND "Prev_Year_Total_Cities" != 0 THEN
            TO_CHAR(ROUND((("Total_Cities" - "Prev_Year_Total_Cities") / "Prev_Year_Total_Cities") * 100, 4)) || '%'
        ELSE
            'N/A'
    END AS "Year-over-year growth percentage for monthly total (%)",
    CASE
        WHEN "Prev_Year_Running_Cumulative_Total" IS NOT NULL AND "Prev_Year_Running_Cumulative_Total" != 0 THEN
            TO_CHAR(ROUND((("Running_Cumulative_Total" - "Prev_Year_Running_Cumulative_Total") / "Prev_Year_Running_Cumulative_Total") * 100, 4)) || '%'
        ELSE
            'N/A'
    END AS "Year-over-year growth percentage for running total (%)"
FROM joined_totals
WHERE "Year" > 2021
ORDER BY "Year", "Month";
```
2025-01-18 17:16:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:16:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:16:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:16:06 - snowflake.connector.cursor - INFO - Number of results in first chunk: 6
2025-01-18 17:16:06 - snowflake.connector.connection - INFO - closed
2025-01-18 17:16:06 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:16:06 - root - INFO - itercount: 1
2025-01-18 17:16:06 - root - INFO - 0
2025-01-18 17:16:06 - root - INFO - results: 
Year,Month,Total number of cities added,Running cumulative total,Year-over-year growth percentage for monthly total (%),Year-over-year growth percentage for running total (%)
2022,April,1437,1437,-4.7082%,-4.7082%
2022,June,1411,4307,1.1470%,-2.3799%
2022,May,1459,2896,-3.3135%,-4.0106%
2023,April,1402,1402,-2.4356%,-2.4356%
2023,June,1432,4223,1.4883%,-1.9503%
2023,May,1389,2791,-4.7978%,-3.6257%


2025-01-18 17:16:06 - root - INFO - Please check the answer again by reviewing Calculate the number of new cities inserted each April, May, and June, along with the year-over-year growth percentage for each month from 2021-2023. List the year, month, the total number of cities added, the running cumulative total, and the year-over-year growth percentage (including "%") for both the monthly total and the running total. Ensure that 2021 data is used only as a baseline for calculating growth rates, and exclude it from the final output., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
Year,Month,Total number of cities added,Running cumulative total,Year-over-year growth percentage for monthly total (%),Year-over-year growth percentage for running total (%)
2022,April,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2022,May,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2022,June,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2023,April,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2023,May,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2023,June,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
```

This table displays the number of new cities added each April, May, and June in 2022 and 2023. It includes the total number of cities added in each month, the running cumulative total up to that month, and the year-over-year growth percentages for both the monthly totals and the cumulative totals compared to the same month in the previous year. The 2021 data is used as a baseline for calculating growth rates but is not included in the output. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Year,Month,Total number of cities added,Running cumulative total,Year-over-year growth percentage for monthly total (%),Year-over-year growth percentage for running total (%)
2022,April,1437,1437,-4.7082%,-4.7082%
2022,June,1411,4307,1.1470%,-2.3799%
2022,May,1459,2896,-3.3135%,-4.0106%
2023,April,1402,1402,-2.4356%,-2.4356%
2023,June,1432,4223,1.4883%,-1.9503%
2023,May,1389,2791,-4.7978%,-3.6257%
Current sql:
WITH monthly_totals AS (
    SELECT
        EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Year",
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Month",
        COUNT(*) AS "Total_Cities"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE
        TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
        AND EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4, 5, 6)
        AND EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) BETWEEN 2021 AND 2023
    GROUP BY 1, 2
),
cumulative_totals AS (
    SELECT
        "Year",
        "Month",
        "Total_Cities",
        SUM("Total_Cities") OVER (PARTITION BY "Year" ORDER BY "Month") AS "Running_Cumulative_Total"
    FROM monthly_totals
),
joined_totals AS (
    SELECT
        ct1."Year",
        ct1."Month",
        ct1."Total_Cities",
        ct1."Running_Cumulative_Total",
        ct2."Total_Cities" AS "Prev_Year_Total_Cities",
        ct2."Running_Cumulative_Total" AS "Prev_Year_Running_Cumulative_Total"
    FROM cumulative_totals ct1
    LEFT JOIN cumulative_totals ct2
        ON ct1."Year" = ct2."Year" + 1
        AND ct1."Month" = ct2."Month"
)
SELECT
    CAST("Year" AS VARCHAR) AS "Year",
    CASE "Month"
        WHEN 4 THEN 'April'
        WHEN 5 THEN 'May'
        WHEN 6 THEN 'June'
    END AS "Month",
    "Total_Cities" AS "Total number of cities added",
    "Running_Cumulative_Total" AS "Running cumulative total",
    CASE
        WHEN "Prev_Year_Total_Cities" IS NOT NULL AND "Prev_Year_Total_Cities" != 0 THEN
            TO_CHAR(ROUND((("Total_Cities" - "Prev_Year_Total_Cities") / "Prev_Year_Total_Cities") * 100, 4)) || '%'
        ELSE
            'N/A'
    END AS "Year-over-year growth percentage for monthly total (%)",
    CASE
        WHEN "Prev_Year_Running_Cumulative_Total" IS NOT NULL AND "Prev_Year_Running_Cumulative_Total" != 0 THEN
            TO_CHAR(ROUND((("Running_Cumulative_Total" - "Prev_Year_Running_Cumulative_Total") / "Prev_Year_Running_Cumulative_Total") * 100, 4)) || '%'
        ELSE
            'N/A'
    END AS "Year-over-year growth percentage for running total (%)"
FROM joined_totals
WHERE "Year" > 2021
ORDER BY "Year", "Month";
2025-01-18 17:16:40 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 17:16:40 - root - INFO - ```sql
WITH monthly_totals AS (
    SELECT
        EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Year",
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Month_Num",
        COUNT(*) AS "Total_Cities"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE
        TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
        AND EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4, 5, 6)
        AND EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) BETWEEN 2021 AND 2023
    GROUP BY 1, 2
),
cumulative_totals AS (
    SELECT
        "Year",
        "Month_Num",
        "Total_Cities",
        SUM("Total_Cities") OVER (PARTITION BY "Year" ORDER BY "Month_Num") AS "Running_Cumulative_Total"
    FROM monthly_totals
),
joined_totals AS (
    SELECT
        ct1."Year",
        ct1."Month_Num",
        ct1."Total_Cities",
        ct1."Running_Cumulative_Total",
        ct2."Total_Cities" AS "Prev_Year_Total_Cities",
        ct2."Running_Cumulative_Total" AS "Prev_Year_Running_Cumulative_Total"
    FROM cumulative_totals ct1
    LEFT JOIN cumulative_totals ct2
        ON ct1."Year" = ct2."Year" + 1
        AND ct1."Month_Num" = ct2."Month_Num"
)
SELECT
    CAST("Year" AS VARCHAR) AS "Year",
    CASE "Month_Num"
        WHEN 4 THEN 'April'
        WHEN 5 THEN 'May'
        WHEN 6 THEN 'June'
    END AS "Month",
    "Total_Cities" AS "Total number of cities added",
    "Running_Cumulative_Total" AS "Running cumulative total",
    CASE
        WHEN "Prev_Year_Total_Cities" IS NOT NULL AND "Prev_Year_Total_Cities" != 0 THEN
            TO_CHAR(ROUND((("Total_Cities" - "Prev_Year_Total_Cities") / "Prev_Year_Total_Cities") * 100, 4)) || '%'
        ELSE
            'N/A'
    END AS "Year-over-year growth percentage for monthly total (%)",
    CASE
        WHEN "Prev_Year_Running_Cumulative_Total" IS NOT NULL AND "Prev_Year_Running_Cumulative_Total" != 0 THEN
            TO_CHAR(ROUND((("Running_Cumulative_Total" - "Prev_Year_Running_Cumulative_Total") / "Prev_Year_Running_Cumulative_Total") * 100, 4)) || '%'
        ELSE
            'N/A'
    END AS "Year-over-year growth percentage for running total (%)"
FROM joined_totals
WHERE "Year" > 2021
ORDER BY "Year", "Month_Num";
```
2025-01-18 17:16:40 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:16:40 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:16:40 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:16:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 6
2025-01-18 17:16:41 - snowflake.connector.connection - INFO - closed
2025-01-18 17:16:42 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:16:42 - root - INFO - itercount: 2
2025-01-18 17:16:42 - root - INFO - 0
2025-01-18 17:16:42 - root - INFO - results: 
Year,Month,Total number of cities added,Running cumulative total,Year-over-year growth percentage for monthly total (%),Year-over-year growth percentage for running total (%)
2022,April,1437,1437,-4.7082%,-4.7082%
2022,May,1459,2896,-3.3135%,-4.0106%
2022,June,1411,4307,1.1470%,-2.3799%
2023,April,1402,1402,-2.4356%,-2.4356%
2023,May,1389,2791,-4.7978%,-3.6257%
2023,June,1432,4223,1.4883%,-1.9503%


2025-01-18 17:16:42 - root - INFO - Please check the answer again by reviewing Calculate the number of new cities inserted each April, May, and June, along with the year-over-year growth percentage for each month from 2021-2023. List the year, month, the total number of cities added, the running cumulative total, and the year-over-year growth percentage (including "%") for both the monthly total and the running total. Ensure that 2021 data is used only as a baseline for calculating growth rates, and exclude it from the final output., reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
Year,Month,Total number of cities added,Running cumulative total,Year-over-year growth percentage for monthly total (%),Year-over-year growth percentage for running total (%)
2022,April,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2022,May,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2022,June,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2023,April,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2023,May,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
2023,June,total_added:int,cumulative_total:int,growth_monthly:float%,growth_cumulative:float%
```

This table displays the number of new cities added each April, May, and June in 2022 and 2023. It includes the total number of cities added in each month, the running cumulative total up to that month, and the year-over-year growth percentages for both the monthly totals and the cumulative totals compared to the same month in the previous year. The 2021 data is used as a baseline for calculating growth rates but is not included in the output. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Year,Month,Total number of cities added,Running cumulative total,Year-over-year growth percentage for monthly total (%),Year-over-year growth percentage for running total (%)
2022,April,1437,1437,-4.7082%,-4.7082%
2022,May,1459,2896,-3.3135%,-4.0106%
2022,June,1411,4307,1.1470%,-2.3799%
2023,April,1402,1402,-2.4356%,-2.4356%
2023,May,1389,2791,-4.7978%,-3.6257%
2023,June,1432,4223,1.4883%,-1.9503%
Current sql:
WITH monthly_totals AS (
    SELECT
        EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Year",
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Month_Num",
        COUNT(*) AS "Total_Cities"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE
        TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
        AND EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4, 5, 6)
        AND EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) BETWEEN 2021 AND 2023
    GROUP BY 1, 2
),
cumulative_totals AS (
    SELECT
        "Year",
        "Month_Num",
        "Total_Cities",
        SUM("Total_Cities") OVER (PARTITION BY "Year" ORDER BY "Month_Num") AS "Running_Cumulative_Total"
    FROM monthly_totals
),
joined_totals AS (
    SELECT
        ct1."Year",
        ct1."Month_Num",
        ct1."Total_Cities",
        ct1."Running_Cumulative_Total",
        ct2."Total_Cities" AS "Prev_Year_Total_Cities",
        ct2."Running_Cumulative_Total" AS "Prev_Year_Running_Cumulative_Total"
    FROM cumulative_totals ct1
    LEFT JOIN cumulative_totals ct2
        ON ct1."Year" = ct2."Year" + 1
        AND ct1."Month_Num" = ct2."Month_Num"
)
SELECT
    CAST("Year" AS VARCHAR) AS "Year",
    CASE "Month_Num"
        WHEN 4 THEN 'April'
        WHEN 5 THEN 'May'
        WHEN 6 THEN 'June'
    END AS "Month",
    "Total_Cities" AS "Total number of cities added",
    "Running_Cumulative_Total" AS "Running cumulative total",
    CASE
        WHEN "Prev_Year_Total_Cities" IS NOT NULL AND "Prev_Year_Total_Cities" != 0 THEN
            TO_CHAR(ROUND((("Total_Cities" - "Prev_Year_Total_Cities") / "Prev_Year_Total_Cities") * 100, 4)) || '%'
        ELSE
            'N/A'
    END AS "Year-over-year growth percentage for monthly total (%)",
    CASE
        WHEN "Prev_Year_Running_Cumulative_Total" IS NOT NULL AND "Prev_Year_Running_Cumulative_Total" != 0 THEN
            TO_CHAR(ROUND((("Running_Cumulative_Total" - "Prev_Year_Running_Cumulative_Total") / "Prev_Year_Running_Cumulative_Total") * 100, 4)) || '%'
        ELSE
            'N/A'
    END AS "Year-over-year growth percentage for running total (%)"
FROM joined_totals
WHERE "Year" > 2021
ORDER BY "Year", "Month_Num";
2025-01-18 17:17:20 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 17:17:20 - root - INFO - ```sql
WITH monthly_totals AS (
    SELECT
        EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Year",
        EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) AS "Month_Num",
        COUNT(*) AS "Total_Cities"
    FROM "CITY_LEGISLATION"."CITY_LEGISLATION"."CITIES"
    WHERE
        TO_DATE("insert_date", 'YYYY-MM-DD') IS NOT NULL
        AND EXTRACT(MONTH FROM TO_DATE("insert_date", 'YYYY-MM-DD')) IN (4, 5, 6)
        AND EXTRACT(YEAR FROM TO_DATE("insert_date", 'YYYY-MM-DD')) BETWEEN 2021 AND 2023
    GROUP BY 1, 2
    ORDER BY "Year", "Month_Num"
),
cumulative_totals AS (
    SELECT
        "Year",
        "Month_Num",
        "Total_Cities",
        SUM("Total_Cities") OVER (PARTITION BY "Year" ORDER BY "Month_Num") AS "Running_Cumulative_Total"
    FROM monthly_totals
),
joined_totals AS (
    SELECT
        ct1."Year",
        ct1."Month_Num",
        ct1."Total_Cities",
        ct1."Running_Cumulative_Total",
        ct2."Total_Cities" AS "Prev_Year_Total_Cities",
        ct2."Running_Cumulative_Total" AS "Prev_Year_Running_Cumulative_Total"
    FROM cumulative_totals ct1
    LEFT JOIN cumulative_totals ct2
        ON ct1."Year" = ct2."Year" + 1
        AND ct1."Month_Num" = ct2."Month_Num"
)
SELECT
    CAST("Year" AS VARCHAR) AS "Year",
    CASE "Month_Num"
        WHEN 4 THEN 'April'
        WHEN 5 THEN 'May'
        WHEN 6 THEN 'June'
    END AS "Month",
    "Total_Cities" AS "Total number of cities added",
    "Running_Cumulative_Total" AS "Running cumulative total",
    CASE
        WHEN "Prev_Year_Total_Cities" IS NOT NULL AND "Prev_Year_Total_Cities" != 0 THEN
            TO_CHAR(ROUND((("Total_Cities" - "Prev_Year_Total_Cities") / "Prev_Year_Total_Cities") * 100, 4)) || '%'
        ELSE
            'N/A'
    END AS "Year-over-year growth percentage for monthly total (%)",
    CASE
        WHEN "Prev_Year_Running_Cumulative_Total" IS NOT NULL AND "Prev_Year_Running_Cumulative_Total" != 0 THEN
            TO_CHAR(ROUND((("Running_Cumulative_Total" - "Prev_Year_Running_Cumulative_Total") / "Prev_Year_Running_Cumulative_Total") * 100, 4)) || '%'
        ELSE
            'N/A'
    END AS "Year-over-year growth percentage for running total (%)"
FROM joined_totals
WHERE "Year" > 2021
ORDER BY "Year", "Month_Num";
```
2025-01-18 17:17:20 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 17:17:20 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 17:17:20 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 17:17:21 - snowflake.connector.cursor - INFO - Number of results in first chunk: 6
2025-01-18 17:17:21 - snowflake.connector.connection - INFO - closed
2025-01-18 17:17:21 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 17:17:22 - root - INFO - itercount: 3
2025-01-18 17:17:22 - root - INFO - 0
2025-01-18 17:17:22 - root - INFO - Total iteration counts: 3
