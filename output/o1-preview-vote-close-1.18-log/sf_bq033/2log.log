2025-01-18 05:40:58 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:41:52 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:41:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:41:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:41:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:41:53 - snowflake.connector.cursor - INFO - Number of results in first chunk: 93
2025-01-18 05:41:53 - snowflake.connector.connection - INFO - closed
2025-01-18 05:41:54 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:41:54 - root - INFO - SQL:
SELECT DISTINCT "country_code"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
Results:
country_code
DO
WO
BA
UA
MW
YU
ZM
LT
KR
RO
BG
TR
GR
CH
NO
MX
GE
EE
CZ
SV
HN
PA
EG
AU
CU
CR
PL
IT
CY
OA
GB
SG
CN
MC
JP
HU
DZ
AT
NL
CA
IS
SK
NI
IN
EC
ES
IE
EA
TN
GT
HK
CO
AR
SI
KE
IL
TW
MT
MD
JO
MA
ZA
EP
RS
PE
LU
DK
FI
BE
ZW
DD
DE
US
PH
SA
MN
FR
SU
BR
ID
KZ
HR
RU
SE
AP
ME
SM
NZ
PT
CL
LV
CS
MY

2025-01-18 05:41:54 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:41:54 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:41:54 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:41:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 05:41:55 - snowflake.connector.connection - INFO - closed
2025-01-18 05:41:55 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:41:56 - root - INFO - SQL:
SELECT "filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
Results:
Too long, hard cut:
filing_date
19971015
19990322
0
19830217
19900109
19900101
19860106
0
19480102
19800125
19820209
19820219
19700116
19700224
19700501
0
18901220
19690318
19660117
18940609
18941217
18950125
0
19620924
19650616
19660402
19660506
19660704
19660725
19661121
19600102
19580106
19290107
19400116
19870521
19840705
19920730
19781012
19861030
19910225
19860106
19930106
20150702
19830922
19860626
19730907
19780905
19820512
19880217
19900307
0
19790102
0
0
19710204
19971230
19880317
19820430
19750221
19830503
19810413
19780313
19820518
19820524
19800416
19901205
19860918
19850916
19730328
19851029
19750527
19770706
19750707
19791105
19781012
19721012
19781219
19730906
19731029
19740405
19741216
19750221
19750925
19760105
19760123
19760331
19761125
19770324
19770413
19770802
19771125
19780505
19780613
19780712
19780717
19781020
19790110
19790718
19800918
19520218
19581027
19590724
19590915
19591103
19591202
19600518
19600524
19610929
19620219
19631211
19640430
19670405
0
19701231
19710930
19720218
19720225
19720428
19720619
19741003
19701210
19710528
19710901
19710902
19710924
19711005
19720321
19720428
19720517
19720905
19721106
0
19730129
19730402
0
19730828
19730924
19731009
19731022
0
19731114
19731206
19740325
0
19740523
19740523
19750213
19750507
19750710
19750826
0
0
19760203
19760602
19760630
19760902
19761006
19761214
19770114
19770125
19770211
0
19770407
0
0
19770908
19771103
19780118
0
19780406
0
19790208
19790912
19791002
19791116
19800221
19800312
19800527
19801017
0
19801215
19810209
19810421
19810525
19810603
19810923
19820121
19820720
19821101
19821103
19821222
0
19830503
19830504
19830510
19830524
19830607
19830719
0
19831230
19840503
19840703
19840802
19840906
19840924
19841220
19850409
19850513
19850718
19850919
19851128
19860218
19861105
19870121
19870302
19880929
18991221
19020507
19021112
19030316
19030921
19020820
19040315
19050821
19620127
18951218
18950924
18970331
19690130
18971110
18971027
18980218
18980429
18990624
19000210
19600226
19640227
19011009
19600310
19620309
19610310
19040217
19040615
19040913
19710305
19620326
19720310
19060228
19060723
19071207
19700324
19090220
19710329
19670403
19100617
19100723
19680410
19600516
19620517
19120619
19710429
19720428
19140108
19660509
19720508
19670517
19140731
19690513
19650526
19690519
19680531
19191125
19200412
19210514
19690630
19780912
19800311
0
0
0
0
0
0
0
0
19770401
19770518
19750521
19810716
19770831
19770907
19870813
19841114
0
0
19470908
19490315
0
19860729
19890125
19670616
19670912
19600120
19600707
19611127
19620626
19620705
0
19631224
19631226
19640519
19640708
19641009
19370114
19500120
19340122
19240212
19370209
19530213
19430325
19200218
19520227
19620213
19530226
19510312
19630219
19660216
19570301
19440420
19440422
19510406
19600309
19690217
19520418
19911010
19850415
19840420
19881013
19961007
19970827
19980917
19870108
19760109
19810108
19950109
19770110
19860110
19830112
19830111
19960110
19880111
19711229
19980109
19980109
19870112
19830114
19930112
19850111
19940118
19830112
19840113
19950113
19950113
19790117
19820113
19990111
19770119
19860114
19750111
19850116
19720111
19910122
19780121
19740109
19840117
19780119
19820120
19860114
19870114
19940126
19970117
19770127
19760128
19780125
19920121
19720124
19890117
19980120
19940128
19980120
19950124
19930122
19870120
19870120
19810127
19940131
19980604
19830330
19941206
0
0
19150111
0
0
0
0
0
19870116
0
19930115
19350212
0
0
0
19600208
19480210
0
0
0
19870202
19760504
19910809
19840810
19680814
19790905
19800829
19751008
19791205
19711208
20030401
19991029
19961122
19830119
19961128
19970103
19950112
19880309
19880314
20000713
19920114
19991103
19880211
19750515
19941219
19941229
19970314
19991220
19751008
19830928
19970321
19920811
19920812
19970213
19970218
19990324
19920828
20001222
19970205
19950414
19840105
19830209
19990301
19920828
19950524
19950526
19770725
20000202
19970425
19921130
19890210
20000210
19840629
20000501
20000112
19890201
20000131
19970701
19921218
19780307
19841016
19950816
19680314
19711029
19970725
20000118
19930315
19990402
20000330
19890622
19951011
19780710
19930310
20000404
19930520
19780904
19930420
19990430
19990520
19850411
19951206
19990608
20000327
19890831
19790119
20000414
19930705
19790219
19720810
19891130
19971008
19960119
20000505
19790528
19790614
19990628
19900119
19900103
19711224
19790824
20000519
19851106
19841211
19960312
19960129
19900320
19730228
19791113
20000816
19971212
19940121
19990819
20000530
19900502
19990813
20000615
19800219
19730516
19960607
19980224
19800319
19730612
19800402
19990817
19990830
19900627
19730723
19800619
19960607
20000721
20000627
19860730
19860731
19900810
19800730
19800820
19900827
19990909
20000929
19980203
19991001
19900912
19901018
19980123
20000726
19740314
19960808
19740508
19960823
20000707
20000830
19870319
20000505
19960918
19961008
19980618
19910301
20001207
19961001
19910114
19940727
19960913
19910410
19870622
19980424
19910403
19980528
19980601
19870819
19870908
19870910
19750218
19860

2025-01-18 05:41:56 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:41:56 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:41:56 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:41:57 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 05:41:57 - snowflake.connector.connection - INFO - closed
2025-01-18 05:41:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:41:57 - root - INFO - SQL:
SELECT "filing_date", "publication_date"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
Results:
Too long, hard cut:
filing_date,publication_date
19971015,19980507
19990322,19991217
0,18920810
19830217,19830217
19900109,19900828
19900101,19910910
19860106,19870715
0,18370928
19480102,19501031
19800125,19810215
19820209,19860115
19820219,19860415
19700116,19730213
19700224,19740709
19700501,19730213
0,18780805
18901220,18910815
19690318,19731015
19660117,19670415
18940609,18950131
18941217,18950715
18950125,18950915
0,0
19620924,19630802
19650616,19660708
19660402,19670324
19660506,19670428
19660704,19670623
19660725,19670707
19661121,19680105
19600102,19620404
19580106,19610802
19290107,19300507
19400116,19410228
19870521,19870529
19840705,19840713
19920730,19920807
19781012,19781020
19861030,19861107
19910225,19920330
19860106,19870713
19930106,19940719
20150702,20180509
19830922,19850331
19860626,19880630
19730907,19780530
19780905,19820927
19820512,19850131
19880217,19891218
19900307,19950315
0,18460702
19790102,19801118
0,18490410
0,18520511
19710204,19810430
19971230,19991122
19880317,19891231
19820430,19820831
19750221,19761115
19830503,19880915
19810413,19860215
19780313,19820715
19820518,19830315
19820524,19840315
19800416,19810515
19901205,19920915
19860918,19880115
19850916,19870115
19730328,19760715
19851029,19880615
19750527,19760315
19770706,19791015
19750707,19780315
19791105,19820915
19781012,19800815
19721012,19750915
19781219,19861015
19730906,19740306
19731029,19740215
19740405,19740731
19741216,19750616
19750221,19750616
19750925,19760116
19760105,19760705
19760123,19760514
19760331,19760716
19761125,19770316
19770324,19770718
19770413,19770801
19770802,19771201
19771125,19780525
19780505,19781106
19780613,19781213
19780712,19790112
19780717,19781116
19781020,19790420
19790110,19790710
19790718,19800118
19800918,19810116
19520218,19520315
19581027,19620629
19590724,19591116
19590915,19591231
19591103,19600301
19591202,19600602
19600518,19601118
19600524,19600916
19610929,19620115
19620219,19620820
19631211,19640611
19640430,19641030
19670405,19670615
0,19710401
19701231,19710527
19710930,19720117
19720218,19720818
19720225,19720616
19720428,19720901
19720619,19721219
19741003,19751209
19701210,19730123
19710528,19730220
19710901,19740618
19710902,19740122
19710924,19740806
19711005,19750617
19720321,19741105
19720428,19750318
19720517,19750708
19720905,19750916
19721106,19750701
0,18821218
19730129,19770118
19730402,19761019
0,18830614
19730828,19770517
19730924,19770405
19731009,19770125
19731022,19770412
0,18840125
19731114,19760817
19731206,19770301
19740325,19770705
0,18840809
19740523,19780418
19740523,19770419
19750213,19790306
19750507,19790102
19750710,19790724
19750826,19780110
0,18860327
0,18860628
19760203,19770308
19760602,19810210
19760630,19790313
19760902,19790501
19761006,19790123
19761214,19800909
19770114,19800902
19770125,19791127
19770211,19810217
0,18870723
19770407,19801104
0,18871209
0,18880204
19770908,19801021
19771103,19800226
19780118,19811215
0,18880901
19780406,19810324
0,18890619
19790208,19801230
19790912,19831025
19791002,19820420
19791116,19830111
19800221,19830712
19800312,19811020
19800527,19830426
19801017,19820622
0,18910404
19801215,19821116
19810209,19830927
19810421,19840131
19810525,19841016
19810603,19841120
19810923,19840228
19820121,19850625
19820720,19850514
19821101,19860729
19821103,19851008
19821222,19850430
0,18930208
19830503,19860930
19830504,19850806
19830510,19851203
19830524,19870113
19830607,19860520
19830719,19870707
0,18930620
19831230,19860624
19840503,19871201
19840703,19880315
19840802,19870317
19840906,19871020
19840924,19880913
19841220,19860805
19850409,19891121
19850513,19880524
19850718,19871006
19850919,19890411
19851128,19900313
19860218,19880906
19861105,19900925
19870121,19891205
19870302,19900703
19880929,19891024
18991221,19000406
19020507,19021021
19021112,19021202
19030316,19030407
19030921,19040216
19020820,19040412
19040315,19040823
19050821,19050912
19620127,19640531
18951218,18960715
18950924,18960615
18970331,18971115
19690130,19710228
18971110,18980331
18971027,18980615
18980218,18981130
18980429,18981231
18990624,19000731
19000210,19010515
19600226,19630629
19640227,19660115
19011009,19030215
19600310,19640615
19620309,19651115
19610310,19650131
19040217,19050228
19040615,19050315
19040913,19050531
19710305,19720131
19620326,19650731
19720310,19731115
19060228,19061215
19060723,19070415
19071207,19081001
19700324,19720630
19090220,19091001
19710329,19730515
19670403,19680915
19100617,19120102
19100723,19120316
19680410,19701115
19600516,19640715
19620517,19650615
19120619,19130716
19710429,19730715
19720428,19730831
19140108,19141016
19660509,19680430
19720508,19741015
19670517,19680115
19140731,19160901
19690513,19700515
19650526,19690415
19690519,19711130
19680531,19690531
19191125,19201001
19200412,19201216
19210514,19230102
19690630,19700715
19780912,19850308
19800311,19870116
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
19770401,19771008
19770518,19771123
19750521,19751122
19810716,19830117
19770831,19770831
19770907,19780309
198708

2025-01-18 05:41:57 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:41:57 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:41:57 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:41:59 - snowflake.connector.connection - INFO - closed
2025-01-18 05:41:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:42:39 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:42:39 - root - INFO - **Explanation:**

The error message you're encountering indicates that the `OBJECT_KEYS` function is failing because it's trying to operate on a VARIANT value that is not an object but an array. Specifically, the `abstract_localized` column sometimes contains an **array of objects** rather than a single object. The `OBJECT_KEYS` function can only be applied to a JSON object, not to an array.

For example, in some rows, `abstract_localized` might look like:

```json
[
  {
    "language": "es",
    "text": "consiste en colocar una muestra sólida de cereal o leguminosa..."
  }
]
```

And in other rows, it might be a single object:

```json
{
  "language": "en",
  "text": "A method for processing data in a network..."
}
```

To handle both cases where `abstract_localized` is either an array or an object, we need to adjust the query to account for the data structure. We can do this by using the `IS_ARRAY` and `IS_OBJECT` functions, and by leveraging the `FLATTEN` table function when necessary.

**Adjusted SQL Queries:**

1. **Identify whether `abstract_localized` is an array or object:**

   ```sql
   SELECT
     CASE
       WHEN IS_ARRAY("abstract_localized") THEN 'Array'
       WHEN IS_OBJECT("abstract_localized") THEN 'Object'
       ELSE 'Unknown'
     END AS "abstract_type",
     COUNT(*) AS "count"
   FROM PATENTS.PATENTS.PUBLICATIONS
   GROUP BY "abstract_type";
   ```

   This query will help us understand how many records have `abstract_localized` as an array versus an object.

2. **Extract abstract text when `abstract_localized` is an object:**

   ```sql
   SELECT
     "abstract_localized":"text"::STRING AS "abstract_text"
   FROM PATENTS.PATENTS.PUBLICATIONS
   WHERE IS_OBJECT("abstract_localized")
   LIMIT 1000;
   ```

3. **Extract abstract text when `abstract_localized` is an array:**

   ```sql
   SELECT
     f.value:"text"::STRING AS "abstract_text"
   FROM PATENTS.PATENTS.PUBLICATIONS,
   LATERAL FLATTEN(INPUT => "abstract_localized") f
   WHERE IS_ARRAY("abstract_localized")
   LIMIT 1000;
   ```

4. **Combine both cases to extract abstract text regardless of whether it's an array or object:**

   ```sql
   SELECT
     COALESCE(
       "abstract_localized":"text"::STRING,
       f.value:"text"::STRING
     ) AS "abstract_text"
   FROM PATENTS.PATENTS.PUBLICATIONS
   LEFT JOIN LATERAL FLATTEN(INPUT => "abstract_localized") f ON IS_ARRAY("abstract_localized")
   WHERE IS_OBJECT("abstract_localized") OR IS_ARRAY("abstract_localized")
   LIMIT 1000;
   ```

5. **Find U.S. publications with 'internet of things' in abstracts, handling both arrays and objects:**

   ```sql
   SELECT
     "publication_number",
     COALESCE(
       "abstract_localized":"text"::STRING,
       f.value:"text"::STRING
     ) AS "abstract_text"
   FROM PATENTS.PATENTS.PUBLICATIONS
   LEFT JOIN LATERAL FLATTEN(INPUT => "abstract_localized") f ON IS_ARRAY("abstract_localized")
   WHERE "country_code" = 'US'
     AND (
       ("abstract_localized":"text"::STRING ILIKE '%internet of things%' AND IS_OBJECT("abstract_localized"))
       OR (f.value:"text"::STRING ILIKE '%internet of things%' AND IS_ARRAY("abstract_localized"))
     )
     AND "filing_date" BETWEEN 20080101 AND 20221231
   LIMIT 1000;
   ```

6. **Count filings per month from 2008 to 2022, including months with zero filings:**

   ```sql
   SELECT
     YEAR(TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
     MONTH(TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
     COUNT(DISTINCT "application_number") AS "Number_of_Filings"
   FROM PATENTS.PATENTS.PUBLICATIONS
   LEFT JOIN LATERAL FLATTEN(INPUT => "abstract_localized") f ON IS_ARRAY("abstract_localized")
   WHERE "country_code" = 'US'
     AND ("filing_date" BETWEEN 20080101 AND 20221231)
     AND (
       (IS_OBJECT("abstract_localized") AND "abstract_localized":"text"::STRING ILIKE '%internet of things%')
       OR (IS_ARRAY("abstract_localized") AND f.value:"text"::STRING ILIKE '%internet of things%')
     )
   GROUP BY "Year", "Month"
   ORDER BY "Year", "Month"
   LIMIT 1000;
   ```

   **Note:** This query converts the `filing_date` to a date format and extracts the year and month. It then counts the number of filings per month where the abstract contains 'internet of things', handling both arrays and objects in `abstract_localized`.

7. **Generate a complete list of months from 2008 to 2022, including zero counts:**

   Since some months may have zero filings, we'll need to generate a list of all months in the date range and left join it with our filings data.

   ```sql
   WITH months AS (
     SELECT
       TO_DATE('2008-01-01') + (row_number() OVER ()) * INTERVAL '1 month' - INTERVAL '1 month' AS "Month_Start"
     FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
   )
   SELECT
     YEAR("Month_Start") AS "Year",
     MONTH("Month_Start") AS "Month",
     COALESCE(filings."Number_of_Filings", 0) AS "Number_of_Filings"
   FROM months
   LEFT JOIN (
     SELECT
       DATE_TRUNC('month', TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
       COUNT(DISTINCT "application_number") AS "Number_of_Filings"
     FROM PATENTS.PATENTS.PUBLICATIONS
     LEFT JOIN LATERAL FLATTEN(INPUT => "abstract_localized") f ON IS_ARRAY("abstract_localized")
     WHERE "country_code" = 'US'
       AND ("filing_date" BETWEEN 20080101 AND 20221231)
       AND (
         (IS_OBJECT("abstract_localized") AND "abstract_localized":"text"::STRING ILIKE '%internet of things%')
         OR (IS_ARRAY("abstract_localized") AND f.value:"text"::STRING ILIKE '%internet of things%')
       )
     GROUP BY "Filing_Month"
   ) AS filings
     ON months."Month_Start" = filings."Filing_Month"
   WHERE "Month_Start" BETWEEN TO_DATE('2008-01-01') AND TO_DATE('2022-12-31')
   ORDER BY "Year", "Month";
   ```

   This query generates all months between January 2008 and December 2022 and left joins it with the filings data to ensure months with zero filings are included.

**Summary:**

The error occurred because `OBJECT_KEYS` cannot be applied to an array. To resolve this, we need to:

- Identify whether `abstract_localized` is an array or an object.
- Use `FLATTEN` to handle arrays and extract the necessary fields.
- Adjust the queries to account for both data structures.
- Ensure that date fields are properly converted to date formats for grouping.

**Final Answer:**

Here's the SQL query to generate the number of U.S. publications related to IoT (where the abstract includes the phrase 'internet of things') filed each month from 2008 to 2022, including months with no filings:

```sql
WITH months AS (
  SELECT
    DATEADD(month, seq4(), '2008-01-01') AS "Month_Start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4(), '2008-01-01') <= '2022-12-31'
)
SELECT
  YEAR("Month_Start") AS "Year",
  MONTH("Month_Start") AS "Month",
  COALESCE(filings."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months
LEFT JOIN (
  SELECT
    DATE_TRUNC('month', TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  LEFT JOIN LATERAL FLATTEN(INPUT => "abstract_localized") f ON IS_ARRAY("abstract_localized")
  WHERE "country_code" = 'US'
    AND ("filing_date" BETWEEN 20080101 AND 20221231)
    AND (
      (IS_OBJECT("abstract_localized") AND "abstract_localized":"text"::STRING ILIKE '%internet of things%')
      OR (IS_ARRAY("abstract_localized") AND f.value:"text"::STRING ILIKE '%internet of things%')
    )
  GROUP BY "Filing_Month"
) AS filings
  ON months."Month_Start" = filings."Filing_Month"
ORDER BY "Year", "Month";
```

**Output Format:**

```csv
Year,Month,Number_of_Filings
2008,1,num:int
2008,2,num:int
2008,3,num:int
...
2022,12,num:int
```

*Note:* Replace `num:int` with the actual number of filings for each month. This result includes all months from January 2008 to December 2022, even if the number of filings is zero for a given month.
2025-01-18 05:42:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:42:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:42:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:42:40 - snowflake.connector.connection - INFO - closed
2025-01-18 05:42:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:43:20 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:43:20 - root - INFO - **Explanation:**

The error message you're encountering:

```
002061 (42601): 01b9c996-0004-7985-0001-11c300ee1222: SQL compilation error:
Window function type [ROW_NUMBER] requires ORDER BY in window specification.
```

indicates that the query failed because a window function (`ROW_NUMBER`) requires an `ORDER BY` clause in its window specification. However, your query doesn't explicitly use any window functions. This error may occur due to how Snowflake optimizes queries internally, especially when using functions like `OBJECT_KEYS` along with a `LIMIT` clause without an `ORDER BY`.

**Possible Reasons and Solutions:**

1. **Implicit Use of Window Functions:**

   Snowflake may internally use window functions like `ROW_NUMBER()` when processing certain queries with `LIMIT`. If an `ORDER BY` clause is not specified, it can lead to this error.

2. **Data Structure of `abstract_localized`:**

   As previously discussed, the `abstract_localized` column may contain both **objects** and **arrays**. The `OBJECT_KEYS` function requires an **OBJECT** as input, not an **ARRAY**. If `abstract_localized` is an array in some rows, applying `OBJECT_KEYS` directly on it will cause issues.

**Steps to Resolve:**

1. **Add an `ORDER BY` Clause:**

   To address the window function error, try adding an `ORDER BY` clause to your query. This provides the necessary ordering for the internal `ROW_NUMBER()` function.

   ```sql
   SELECT OBJECT_KEYS("abstract_localized") AS "abstract_keys"
   FROM PATENTS.PATENTS.PUBLICATIONS
   ORDER BY 1
   LIMIT 1000;
   ```

2. **Check the Data Type of `abstract_localized`:**

   Determine whether `abstract_localized` is an object or an array in your data. Use the `IS_OBJECT` and `IS_ARRAY` functions:

   ```sql
   SELECT
     CASE
       WHEN IS_OBJECT("abstract_localized") THEN 'Object'
       WHEN IS_ARRAY("abstract_localized") THEN 'Array'
       ELSE 'Other'
     END AS "Data_Type",
     COUNT(*) AS "Count"
   FROM PATENTS.PATENTS.PUBLICATIONS
   GROUP BY "Data_Type";
   ```

3. **Handle Both Objects and Arrays Separately:**

   Since `OBJECT_KEYS` can only be applied to objects, you need to handle arrays differently. Use `FLATTEN` to handle arrays and extract keys from each object within the array.

   **For Objects:**

   ```sql
   SELECT OBJECT_KEYS("abstract_localized") AS "abstract_keys"
   FROM PATENTS.PATENTS.PUBLICATIONS
   WHERE IS_OBJECT("abstract_localized")
   ORDER BY 1
   LIMIT 1000;
   ```

   **For Arrays:**

   ```sql
   SELECT OBJECT_KEYS(f.value) AS "abstract_keys"
   FROM PATENTS.PATENTS.PUBLICATIONS t,
   LATERAL FLATTEN(input => t."abstract_localized") f
   WHERE IS_ARRAY(t."abstract_localized")
   ORDER BY 1
   LIMIT 1000;
   ```

4. **Combine Results from Both Cases:**

   You can use a `UNION ALL` to combine the results from objects and arrays.

   ```sql
   -- Keys from objects
   SELECT OBJECT_KEYS("abstract_localized") AS "abstract_keys"
   FROM PATENTS.PATENTS.PUBLICATIONS
   WHERE IS_OBJECT("abstract_localized")

   UNION ALL

   -- Keys from arrays
   SELECT OBJECT_KEYS(f.value) AS "abstract_keys"
   FROM PATENTS.PATENTS.PUBLICATIONS t,
   LATERAL FLATTEN(input => t."abstract_localized") f
   WHERE IS_ARRAY(t."abstract_localized")
   ORDER BY 1
   LIMIT 1000;
   ```

   Ensure you add `ORDER BY` after combining the results.

5. **Extract the 'text' Field for Both Cases:**

   Since you're interested in the abstract text, extract the 'text' field from both objects and arrays.

   **Combined Query:**

   ```sql
   SELECT
     COALESCE(
       "abstract_localized":"text"::STRING,
       f.value:"text"::STRING
     ) AS "abstract_text"
   FROM PATENTS.PATENTS.PUBLICATIONS t
   LEFT JOIN LATERAL FLATTEN(input => t."abstract_localized") f ON IS_ARRAY(t."abstract_localized")
   WHERE IS_OBJECT("abstract_localized") OR IS_ARRAY("abstract_localized")
   ORDER BY 1
   LIMIT 1000;
   ```

6. **Find Publications with 'Internet of Things' in Abstracts:**

   Adjust your query to search for abstracts containing 'internet of things', handling both data types.

   ```sql
   SELECT
     "application_number",
     "filing_date",
     COALESCE(
       "abstract_localized":"text"::STRING,
       f.value:"text"::STRING
     ) AS "abstract_text"
   FROM PATENTS.PATENTS.PUBLICATIONS t
   LEFT JOIN LATERAL FLATTEN(input => t."abstract_localized") f ON IS_ARRAY(t."abstract_localized")
   WHERE "country_code" = 'US'
     AND ("filing_date" BETWEEN 20080101 AND 20221231)
     AND (
       (IS_OBJECT("abstract_localized") AND "abstract_localized":"text"::STRING ILIKE '%internet of things%')
       OR (IS_ARRAY("abstract_localized") AND f.value:"text"::STRING ILIKE '%internet of things%')
     )
   ORDER BY 1
   LIMIT 1000;
   ```

7. **Count Filings Per Month Including Zero Filings:**

   Generate a list of all months in the date range and left join with your filings data.

   ```sql
   WITH month_range AS (
     SELECT
       DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
     FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
     WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-01'
   ),
   filings AS (
     SELECT
       DATE_TRUNC('month', TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_month",
       COUNT(DISTINCT t."application_number") AS "number_of_filings"
     FROM PATENTS.PATENTS.PUBLICATIONS t
     LEFT JOIN LATERAL FLATTEN(input => t."abstract_localized") f ON IS_ARRAY(t."abstract_localized")
     WHERE "country_code" = 'US'
       AND ("filing_date" BETWEEN 20080101 AND 20221231)
       AND (
         (IS_OBJECT("abstract_localized") AND "abstract_localized":"text"::STRING ILIKE '%internet of things%')
         OR (IS_ARRAY("abstract_localized") AND f.value:"text"::STRING ILIKE '%internet of things%')
       )
     GROUP BY "filing_month"
   )
   SELECT
     YEAR(m."month_start") AS "Year",
     MONTH(m."month_start") AS "Month",
     COALESCE(f."number_of_filings", 0) AS "Number_of_Filings"
   FROM month_range m
   LEFT JOIN filings f ON m."month_start" = f."filing_month"
   ORDER BY "Year", "Month";
   ```

**Final Output Format:**

Here's the final output in CSV format:

```csv
Year,Month,Number_of_Filings
2008,1,num:int
2008,2,num:int
2008,3,num:int
...
2022,12,num:int
```

*Note:* Replace `num:int` with the actual count of filings for each month. The table includes all months from January 2008 to December 2022, ensuring months with zero filings are included.

**Summary:**

- The error likely originates from internal query optimization in Snowflake when using `LIMIT` without an `ORDER BY`.

- Always include an `ORDER BY` clause when using `LIMIT` to avoid such errors.

- When working with JSON data in columns like `abstract_localized`, handle both objects and arrays appropriately using `IS_OBJECT`, `IS_ARRAY`, and `FLATTEN`.

- Ensure the use of `COALESCE` to combine results from different data structures.

Let me know if you need further assistance or clarification on any of the steps!
2025-01-18 05:43:20 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:43:20 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:43:20 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:43:21 - snowflake.connector.connection - INFO - closed
2025-01-18 05:43:22 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:44:17 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:44:17 - root - INFO - **Explanation:**

The error message you're encountering:

```
000002 (0A000): 01b9c997-0004-7b17-0001-11c300ee027e: Unsupported feature 'lateral table function called with OUTER JOIN syntax or a join predicate (ON clause)'.
```

indicates that Snowflake does not support using a LATERAL table function (like `FLATTEN`) with an **OUTER JOIN** or with a **JOIN predicate** (an `ON` clause). In other words, in Snowflake, you cannot use `LEFT JOIN LATERAL` with an `ON` condition.

**Understanding the Issue:**

In the previous queries, we attempted to handle both cases where `"abstract_localized"` is an object or an array by using a `LEFT JOIN LATERAL` with an `ON` condition, like this:

```sql
LEFT JOIN LATERAL FLATTEN(input => "abstract_localized") f ON IS_ARRAY("abstract_localized")
```

This syntax is not supported in Snowflake. Instead, Snowflake allows LATERAL joins using:

- **Implicit lateral joins**: by listing the table functions in the `FROM` clause separated by commas.
- **Explicit `LATERAL` joins**: using `CROSS JOIN LATERAL` without an `ON` clause.

**Solution:**

To fix this error, we'll adjust the queries to avoid using `LEFT JOIN LATERAL` with an `ON` clause. We'll handle the cases where `"abstract_localized"` is an object and where it is an array separately, and then combine the results using `UNION ALL`.

---

**Step-by-Step Guide:**

**1. Handle Records Where `"abstract_localized"` Is an Object:**

Extract the keys or values directly from the object.

```sql
SELECT OBJECT_KEYS("abstract_localized") AS "abstract_keys"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE IS_OBJECT("abstract_localized")
LIMIT 1000;
```

**2. Handle Records Where `"abstract_localized"` Is an Array:**

Use `LATERAL FLATTEN` to iterate over the array elements.

```sql
SELECT OBJECT_KEYS(f.value) AS "abstract_keys"
FROM PATENTS.PATENTS.PUBLICATIONS,
LATERAL FLATTEN(input => "abstract_localized") f
WHERE IS_ARRAY("abstract_localized")
LIMIT 1000;
```

**3. Combine Both Results Using `UNION ALL`:**

```sql
SELECT OBJECT_KEYS("abstract_localized") AS "abstract_keys"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE IS_OBJECT("abstract_localized")

UNION ALL

SELECT OBJECT_KEYS(f.value) AS "abstract_keys"
FROM PATENTS.PATENTS.PUBLICATIONS,
LATERAL FLATTEN(input => "abstract_localized") f
WHERE IS_ARRAY("abstract_localized")
LIMIT 1000;
```

---

**Handling 'Internet of Things' in Abstract Text:**

We need to search for the phrase 'internet of things' in the `"abstract_localized":"text"` field. Again, we'll handle objects and arrays separately.

**1. Records Where `"abstract_localized"` Is an Object:**

```sql
SELECT
  "application_number",
  TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') AS "filing_date",
  "abstract_localized":"text"::STRING AS "abstract_text"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE 
  "country_code" = 'US' AND
  "filing_date" BETWEEN 20080101 AND 20221231 AND
  IS_OBJECT("abstract_localized") AND
  "abstract_localized":"text"::STRING ILIKE '%internet of things%'
LIMIT 1000;
```

**2. Records Where `"abstract_localized"` Is an Array:**

```sql
SELECT
  "application_number",
  TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') AS "filing_date",
  f.value:"text"::STRING AS "abstract_text"
FROM PATENTS.PATENTS.PUBLICATIONS,
LATERAL FLATTEN(input => "abstract_localized") f
WHERE 
  "country_code" = 'US' AND
  "filing_date" BETWEEN 20080101 AND 20221231 AND
  IS_ARRAY("abstract_localized") AND
  f.value:"text"::STRING ILIKE '%internet of things%'
LIMIT 1000;
```

**3. Combine the Results:**

```sql
SELECT * FROM (
  SELECT
    "application_number",
    TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') AS "filing_date",
    "abstract_localized":"text"::STRING AS "abstract_text"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE 
    "country_code" = 'US' AND
    "filing_date" BETWEEN 20080101 AND 20221231 AND
    IS_OBJECT("abstract_localized") AND
    "abstract_localized":"text"::STRING ILIKE '%internet of things%'

  UNION ALL

  SELECT
    "application_number",
    TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') AS "filing_date",
    f.value:"text"::STRING AS "abstract_text"
  FROM PATENTS.PATENTS.PUBLICATIONS,
  LATERAL FLATTEN(input => "abstract_localized") f
  WHERE 
    "country_code" = 'US' AND
    "filing_date" BETWEEN 20080101 AND 20221231 AND
    IS_ARRAY("abstract_localized") AND
    f.value:"text"::STRING ILIKE '%internet of things%'
) LIMIT 1000;
```

---

**Counting Filings Per Month from 2008 to 2022 Including Months with No Filings:**

**1. Generate a Complete List of Months:**

```sql
WITH months AS (
  SELECT
    DATEADD(month, seq4(), '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4(), '2008-01-01') <= '2022-12-01'
)
```

**2. Count Filings for Records Where `"abstract_localized"` Is an Object:**

```sql
SELECT 
  DATE_TRUNC('month', TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_month",
  COUNT(DISTINCT "application_number") AS "number_of_filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE 
  "country_code" = 'US' AND
  "filing_date" BETWEEN 20080101 AND 20221231 AND
  IS_OBJECT("abstract_localized") AND
  "abstract_localized":"text"::STRING ILIKE '%internet of things%'
GROUP BY "filing_month"
```

**3. Count Filings for Records Where `"abstract_localized"` Is an Array:**

```sql
SELECT 
  DATE_TRUNC('month', TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_month",
  COUNT(DISTINCT "application_number") AS "number_of_filings"
FROM PATENTS.PATENTS.PUBLICATIONS,
LATERAL FLATTEN(input => "abstract_localized") f
WHERE 
  "country_code" = 'US' AND
  "filing_date" BETWEEN 20080101 AND 20221231 AND
  IS_ARRAY("abstract_localized") AND
  f.value:"text"::STRING ILIKE '%internet of things%'
GROUP BY "filing_month"
```

**4. Combine the Filings Data:**

```sql
WITH 
months AS (
  SELECT
    DATEADD(month, seq4(), '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4(), '2008-01-01') <= '2022-12-01'
),
object_filings AS (
  SELECT 
    DATE_TRUNC('month', TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_month",
    COUNT(DISTINCT "application_number") AS "number_of_filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE 
    "country_code" = 'US' AND
    "filing_date" BETWEEN 20080101 AND 20221231 AND
    IS_OBJECT("abstract_localized") AND
    "abstract_localized":"text"::STRING ILIKE '%internet of things%'
  GROUP BY "filing_month"
),
array_filings AS (
  SELECT 
    DATE_TRUNC('month', TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_month",
    COUNT(DISTINCT "application_number") AS "number_of_filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
  LATERAL FLATTEN(input => "abstract_localized") f
  WHERE 
    "country_code" = 'US' AND
    "filing_date" BETWEEN 20080101 AND 20221231 AND
    IS_ARRAY("abstract_localized") AND
    f.value:"text"::STRING ILIKE '%internet of things%'
  GROUP BY "filing_month"
),
combined_filings AS (
  SELECT * FROM object_filings
  UNION ALL
  SELECT * FROM array_filings
),
monthly_filings AS (
  SELECT 
    "filing_month",
    SUM("number_of_filings") AS "total_filings"
  FROM combined_filings
  GROUP BY "filing_month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."total_filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."filing_month"
ORDER BY m."month_start";
```

**Output Format:**

```csv
Year,Month,Number_of_Filings
2008,1,num:int
2008,2,num:int
2008,3,num:int
...
2022,12,num:int
```

*Replace `num:int` with the actual number of filings for each month.*

---

**Summary:**

- The error occurs because Snowflake doesn't support `OUTER JOIN` with `LATERAL` table functions or with a join predicate (`ON` clause).
- We resolved the issue by separating the cases where `"abstract_localized"` is an object or an array and handling them individually.
- We combined the results using `UNION ALL` to get the complete dataset.
- By generating a complete list of months, we ensured that months with zero filings are included in the final result.

---

**Important Notes:**

- **Data Types:** Ensure that the `"filing_date"` field is converted to a date format when using date functions.
- **Performance:** When working with large datasets, consider indexing or partitioning strategies to optimize query performance.
- **Validation:** Always validate the results to ensure that the data aggregation matches expectations.

---

Let me know if you need further assistance or clarification on any of the steps!
2025-01-18 05:44:17 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:44:17 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:44:17 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:44:19 - snowflake.connector.cursor - INFO - Number of results in first chunk: 128
2025-01-18 05:44:19 - snowflake.connector.connection - INFO - closed
2025-01-18 05:44:19 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:44:19 - root - INFO - SQL:
WITH 
months AS (
  SELECT
    DATEADD(month, seq4(), '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4(), '2008-01-01') <= '2022-12-01'
),
object_filings AS (
  SELECT 
    DATE_TRUNC('month', TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_month",
    COUNT(DISTINCT "application_number") AS "number_of_filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE 
    "country_code" = 'US' AND
    "filing_date" BETWEEN 20080101 AND 20221231 AND
    IS_OBJECT("abstract_localized") AND
    "abstract_localized":"text"::STRING ILIKE '%internet of things%'
  GROUP BY "filing_month"
),
array_filings AS (
  SELECT 
    DATE_TRUNC('month', TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_month",
    COUNT(DISTINCT "application_number") AS "number_of_filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
  LATERAL FLATTEN(input => "abstract_localized") f
  WHERE 
    "country_code" = 'US' AND
    "filing_date" BETWEEN 20080101 AND 20221231 AND
    IS_ARRAY("abstract_localized") AND
    f.value:"text"::STRING ILIKE '%internet of things%'
  GROUP BY "filing_month"
),
combined_filings AS (
  SELECT * FROM object_filings
  UNION ALL
  SELECT * FROM array_filings
),
monthly_filings AS (
  SELECT 
    "filing_month",
    SUM("number_of_filings") AS "total_filings"
  FROM combined_filings
  GROUP BY "filing_month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."total_filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."filing_month"
ORDER BY m."month_start";
Results:
Year,Month,Number_of_Filings
2008,1,0
2008,2,0
2008,3,0
2008,4,0
2008,5,0
2008,6,0
2008,7,0
2008,8,0
2008,9,0
2008,10,0
2008,11,0
2008,12,0
2009,1,0
2009,2,0
2009,3,0
2009,4,0
2009,5,0
2009,6,0
2009,7,0
2009,8,0
2009,9,0
2009,10,0
2009,11,0
2009,12,0
2010,1,0
2010,2,0
2010,3,0
2010,4,0
2010,5,0
2010,6,0
2010,7,0
2010,8,0
2010,9,0
2010,10,0
2010,11,0
2010,12,0
2011,1,0
2011,2,0
2011,3,0
2011,4,0
2011,5,0
2011,6,0
2011,7,0
2011,8,0
2011,9,0
2011,10,0
2011,11,0
2011,12,0
2012,1,0
2012,2,0
2012,3,0
2012,4,0
2012,5,0
2012,6,0
2012,7,0
2012,8,0
2012,9,0
2012,10,0
2012,11,0
2012,12,0
2013,1,0
2013,2,0
2013,3,0
2013,4,0
2013,5,0
2013,6,0
2013,7,0
2013,8,0
2013,9,0
2013,10,0
2013,11,0
2013,12,0
2014,1,0
2014,2,0
2014,3,0
2014,4,0
2014,5,0
2014,6,0
2014,7,0
2014,8,0
2014,9,0
2014,10,0
2014,11,0
2014,12,0
2015,1,0
2015,2,0
2015,3,0
2015,4,1
2015,5,0
2015,6,0
2015,7,0
2015,8,0
2015,9,0
2015,10,0
2015,11,0
2015,12,1
2016,1,0
2016,2,0
2016,3,0
2016,4,0
2016,5,0
2016,6,0
2016,7,0
2016,8,0
2016,9,0
2016,10,0
2016,11,0
2016,12,0
2017,1,0
2017,2,0
2017,3,1
2017,4,2
2017,5,0
2017,6,0
2017,7,0
2017,8,0
2017,9,0
2017,10,0
2017,11,0
2017,12,0
2018,1,0
2018,2,1
2018,3,1
2018,4,1
2018,5,0
2018,6,0
2018,7,0
2018,8,0

2025-01-18 05:44:19 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:44:19 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:44:19 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:44:20 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 05:44:20 - snowflake.connector.connection - INFO - closed
2025-01-18 05:44:21 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:45:16 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:45:16 - root - INFO - ```sql
WITH 
months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-01'
),
filings AS (
  SELECT DISTINCT
    "application_number",
    DATE_TRUNC('month', TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_month"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE 
    "country_code" = 'US' 
    AND "filing_date" BETWEEN 20080101 AND 20221231 
    AND (
      -- Check in 'abstract_localized' when it's an object
      (IS_OBJECT("abstract_localized") AND "abstract_localized":"text"::STRING ILIKE '%internet of things%')
      -- Check in 'abstract_localized' when it's an array
      OR EXISTS (
        SELECT 1 FROM LATERAL FLATTEN(INPUT => "abstract_localized") af
        WHERE af.value:"text"::STRING ILIKE '%internet of things%'
      )
      -- Check in 'description_localized' when it's an object
      OR (IS_OBJECT("description_localized") AND "description_localized":"text"::STRING ILIKE '%internet of things%')
      -- Check in 'description_localized' when it's an array
      OR EXISTS (
        SELECT 1 FROM LATERAL FLATTEN(INPUT => "description_localized") df
        WHERE df.value:"text"::STRING ILIKE '%internet of things%'
      )
      -- Check in 'title_localized' when it's an object
      OR (IS_OBJECT("title_localized") AND "title_localized":"text"::STRING ILIKE '%internet of things%')
      -- Check in 'title_localized' when it's an array
      OR EXISTS (
        SELECT 1 FROM LATERAL FLATTEN(INPUT => "title_localized") tf
        WHERE tf.value:"text"::STRING ILIKE '%internet of things%'
      )
    )
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COUNT(f."application_number") AS "Number_of_Filings"
FROM months m
LEFT JOIN filings f ON m."month_start" = f."filing_month"
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
```
2025-01-18 05:45:16 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:45:16 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:45:16 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:45:18 - snowflake.connector.connection - INFO - closed
2025-01-18 05:45:18 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:45:44 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:45:44 - root - INFO - ```sql
SELECT "abstract_text" FROM (
  SELECT "abstract_localized":"text"::STRING AS "abstract_text"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE IS_OBJECT("abstract_localized")

  UNION ALL

  SELECT f.value:"text"::STRING AS "abstract_text"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE IS_ARRAY("abstract_localized")
)
LIMIT 1000;
```
2025-01-18 05:45:44 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:45:44 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:45:44 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:45:46 - snowflake.connector.cursor - INFO - Number of results in first chunk: 145
2025-01-18 05:45:48 - snowflake.connector.connection - INFO - closed
2025-01-18 05:45:48 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:45:48 - root - INFO - SQL:
SELECT "abstract_text" FROM (
  SELECT "abstract_localized":"text"::STRING AS "abstract_text"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE IS_OBJECT("abstract_localized")

  UNION ALL

  SELECT f.value:"text"::STRING AS "abstract_text"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE IS_ARRAY("abstract_localized")
)
LIMIT 1000;
Results:
Too long, hard cut:
abstract_text
"When a bus stop request control unit issues a module-specific bus stop request signal, a bus stop control unit coupled to a bus slave determines a module that serves as a bus master of the bus slave and on which the bus slave is dependent, for example, on the basis of information in a dependence setting register. The bus stop control unit then outputs a prior bus stop request signal to the module on which the bus slave is dependent, so as to stop use of a bus of the module. Upon receipt of a module-specific bus stop completion signal indicating that processing of stop of the bus of the module on which the bus slave is dependent is complete, the bus stop control unit outputs a module-specific bus stop request signal to the module which serves as a bus slave and whose bus is to be stopped."
"According to an embodiment, a half-bridge circuit includes at least two solid-state switching devices connected in series. Each switching device has a high-voltage switching transistor configured to switch a high voltage based on a switching signal and a switching driver circuit operationally connected to the high-voltage switching transistor. The switching driver circuit includes a low-voltage driver transistor having a source, a drain and a gate, connected in series to the high-voltage switching transistor and being configured to transfer the switching signal to the high-voltage switching transistor, wherein the high-voltage switching transistor is arranged source-down on top of the drain of the low-voltage driver transistor."
"An image processing apparatus includes a rotation processing unit, an output image information output unit, and a shared area generation unit. The rotation processing unit performs a rotation process on an image to generate a rotated image. The output image information output unit performs, based on the rotated image, an output image information output process of outputting output image information of an image to be output. The shared area generation unit generates a shared area in a memory in the image processing apparatus shared by the rotation process and the output image information output process. The rotation processing unit stores information of the rotated image in a region in the generated shared area. The output image information that is output in the output image information output process is stored in the region in the shared area storing the information of the rotated image."
"A landing gear assembly having a first part movable relative to a second part, and a spring coupled to the first and second parts via first and second anchor points. A lost motion assembly is provided to enable one of the anchor points to translate along one of the parts. As such, the spring extends less as the first part moves relative to the second part than it would if each anchor point was fixed to a respective part."
"The present invention relates to a novel process for the preparation of printable, high-viscosity oxide media, and to the use thereof in the production of solar cells."
"A price management system can be configured to manage the sale price for one or more content items. For example, the price management system can maintain content item accounts including data pertaining to the content item, such as the sale price and price calculation rules. The price management system can receive and respond to price queries requesting the price of the content item. The price management system can also update the price of the content items based on the price calculation rules corresponding to the content. For example, the price management system can determine whether a specified trigger or condition has been met and, if so, calculate an updated price for the content item. The price management system can also provide metrics regarding sale of copies of a content item."
"A technique implements differential digital logic circuits with a differential clock distribution network using standard cell differential clock gater circuits to reduce area, delay, power consumption in integrated circuits. An apparatus includes a first terminal configured to receive a clock signal, a second terminal configured to receive a complementary clock signal, and a third terminal configured to receive a clock control signal. The apparatus includes a latch circuit configured to generate a latched version of the clock control signal based on a version of the clock control signal, a version of the clock signal, and a version of the complementary clock signal. The apparatus includes a combinatorial circuit configured to generate a gated clock signal and a gated complementary clock signal based on the version of the clock control signal, the version of the clock signal, and the version of the complementary clock signal."
"A piezoelectric element comprises a piezoelectric layer made of a perovskite compound containing sodium, potassium, lithium, niobium and tantalum and bismuth manganate and electrodes for applying a voltage 

2025-01-18 05:45:48 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:45:48 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:45:48 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:45:49 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 05:45:49 - snowflake.connector.connection - INFO - closed
2025-01-18 05:45:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:47:13 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:47:13 - root - INFO - ```sql
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(DISTINCT "application_number") AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
  AND "abstract_localized"::STRING ILIKE '%internet of things%'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
```
2025-01-18 05:47:13 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:47:13 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:47:13 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:47:15 - snowflake.connector.cursor - INFO - Number of results in first chunk: 118
2025-01-18 05:47:15 - snowflake.connector.connection - INFO - closed
2025-01-18 05:47:15 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:47:15 - root - INFO - SQL:
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(DISTINCT "application_number") AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
  AND "abstract_localized"::STRING ILIKE '%internet of things%'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
Results:
Year,Month,Number_of_Filings
2010,4,1
2010,7,1
2010,11,1
2010,12,1
2011,3,1
2011,4,1
2011,7,1
2011,9,1
2011,11,1
2011,12,1
2012,3,1
2012,5,1
2012,6,1
2012,7,1
2012,8,1
2012,9,1
2012,11,1
2012,12,1
2013,3,1
2013,8,3
2013,9,1
2013,11,2
2013,12,2
2014,2,1
2014,4,2
2014,5,1
2014,7,1
2014,8,2
2014,9,1
2014,12,1
2015,2,3
2015,4,3
2015,5,2
2015,6,2
2015,7,2
2015,8,1
2015,9,2
2015,10,1
2015,12,3
2016,1,1
2016,2,1
2016,3,2
2016,4,3
2016,5,1
2016,6,2
2016,7,2
2016,8,7
2016,11,2
2016,12,4
2017,2,3
2017,3,7
2017,4,8
2017,5,3
2017,6,8
2017,7,6
2017,8,3
2017,9,6
2017,10,10
2017,11,9
2017,12,8
2018,1,5
2018,2,6
2018,3,6
2018,4,7
2018,5,8
2018,6,6
2018,7,6
2018,8,2
2018,9,7
2018,10,6
2018,11,10
2018,12,8
2019,1,3
2019,2,3
2019,3,5
2019,4,2
2019,5,2
2019,6,2
2019,7,1
2019,8,5
2019,9,7
2019,10,1
2019,11,5
2019,12,7
2020,1,2
2020,2,2
2020,3,4
2020,4,6
2020,5,2
2020,6,8
2020,7,2
2020,8,7
2020,9,4
2020,10,4
2020,11,9
2020,12,5
2021,1,9
2021,3,2
2021,4,1
2021,5,9
2021,6,6
2021,7,9
2021,8,11
2021,9,4
2021,10,14
2021,11,3
2021,12,14
2022,1,2
2022,2,5
2022,3,6
2022,4,6
2022,5,5
2022,6,3
2022,8,2
2022,9,4
2022,10,3
2022,11,3
2022,12,9

2025-01-18 05:47:15 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:47:15 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:47:15 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:47:16 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 05:47:16 - snowflake.connector.connection - INFO - closed
2025-01-18 05:47:17 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:47:17 - root - INFO - SQL:
SELECT "filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US'
LIMIT 1000;
Results:
Too long, hard cut:
filing_date
20031215
20031216
20031217
20031223
20040123
20040126
20040128
20040202
20040130
20040213
20040224
20040302
20040301
20040310
20040312
20040312
20040316
20040316
20040316
20040323
20040324
20040326
20040402
20040407
20040413
20040414
20040507
20040521
20040524
20040526
20040526
20040602
20040607
20040608
20040615
20040623
20040623
20040628
20040702
20040707
20040716
20040720
20040722
20040802
20050328
20040810
20040817
20040817
20040818
20040823
20040831
20040902
20040907
20040910
20040915
20041022
20041022
20041028
20041028
20041103
20041110
20041110
20041119
20041119
20041201
20041202
20041210
20041210
20041214
20041213
20041217
20041220
20050113
20050113
20050125
20050126
20050131
20050208
20050223
20050304
20050315
20050318
20050331
20050411
20050412
20050415
20050420
20050426
20050426
20050428
20050504
20050531
20050606
20050615
20050616
20050629
20050706
20050712
20050808
20050815
20050817
20050830
20050919
20050919
20050929
20051004
20051006
20051013
20051021
20051101
20051104
20051110
20060331
20060413
20051208
20060727
20051219
20051221
20051230
20060109
20060110
20060113
20060119
20060124
20060123
20060127
20060201
20060213
20060217
20060222
20060227
20060303
20060307
20060314
20060316
20060515
20060515
20060323
20060324
20060403
20060405
20060404
20060522
20060517
20060523
20060525
20060530
20060612
20060724
20060801
20060804
20060622
20060712
20060711
20060714
20060719
20060725
20060809
20060811
20060815
20060814
20060818
20060823
20060831
20060906
20060907
20060911
20060920
20060921
20060926
20060919
20060920
20061005
20061006
20061006
20050407
20061011
20061012
20061014
20061017
20061030
20061019
20061101
20061103
20061120
20061129
20061221
20061228
20070112
20061215
20061218
20050930
20051021
20070220
20070226
20070228
20070307
20070316
20070125
20070206
20070226
20070405
20070403
20070509
20070621
20070717
20070418
20050613
20070518
20070523
20070523
20070530
20070601
20060213
20060210
20070622
20070622
20070802
20070802
20070808
20070827
20070918
20070925
20070925
20071010
20071018
20070725
20070724
20070801
20050131
20060209
20051117
20070814
20070807
20070814
20070816
20070913
20060313
20060418
20060411
20060607
20071029
20071029
20071029
20071031
20071112
20071119
20071203
20071205
20071213
20071227
20080104
20071016
20071101
20071115
20071115
20041228
20041228
20050106
20050112
20050112
20050119
20050128
20050127
20050203
20050204
20050207
20050207
20050209
20050210
20050211
20050216
20050217
20050225
20050225
20050302
20050303
20050304
20050304
20050303
20050314
20050315
20050318
20050322
20050405
20050411
20050413
20050419
20050420
20050422
20050429
20050502
20050519
20050520
20050520
20050519
20050526
20050527
20050526
20050601
20050609
20050609
20050615
20050624
20050624
20050628
20050629
20050708
20050727
20050729
20050801
20050810
20050812
20050812
20050823
20050901
20050907
20050915
20050919
20050928
20051006
20051011
20051013
20051026
20051025
20051028
20051102
20051107
20051108
20051110
20051114
20051114
20060407
20051123
20051128
20051129
20051207
20051208
20051213
20051215
20051219
20060104
20060330
20051222
20051229
20051229
20060109
20060117
20060118
20060118
20060125
20060203
20060207
20060206
20060213
20060215
20060303
20060307
20060315
20060316
20060316
20060317
20060322
20060328
20060406
20060427
20060501
20060524
20060508
20060510
20060515
20060522
20060522
20060524
20060530
20060531
20060601
20060714
20060804
20060815
20060907
20060622
20060622
20060707
20060711
20060713
20060802
20060807
20060809
20060817
20060825
20060824
20060824
20060828
20060829
20060905
20060906
20060911
20060911
20060912
20060925
20060928
20060915
20060921
20061004
20061019
20061103
20061103
20061117
20061206
20040430
20050613
20061013
20061030
20040528
20061219
20061219
20061220
20061222
20070112
20070119
20070126
20050614
20061206
20061219
20061222
20061226
20061228
20070104
20050901
20051103
20070129
20070228
20070308
20070312
20070321
20070201
20070221
20070220
20070313
20070322
20070404
20070402
20070403
20070430
20070501
20070601
20070613
20070614
20070619
20070629
20070629
20070702
20070705
20070725
20070413
20070417
20051213
20070514
20070523
20070515
20070608
20060113
20070614
20070711
20070725
20070727
20070731
20070801
20070806
20070807
20070808
20070816
20070822
20070827
20070904
20070908
20070911
20070927
20070928
20071001
20071009
20071009
20071010
20071017
20071023
20060228
20070809
20070913
20070925
20060424
20060426
20060503
20071029
20071030
20071031
20071112
20071113
20071115
20071116
20071120
20071205
20071205
20071207
20071212
20071213
20071217
20071217
20071219
20080103
20071025
20071106
20071130
20060518
20060717
20071205
20071212
20080109
20080118
20080116
20080124
20080201
20080306
20080321
20080401
20080206
20080215
20080417
20061013
20080409
20080410
20080415
20080417
20080423
20080430
20080519
20080617
20080619
20080417
20080528
20080427
20070202
20080710
20080715
20080729
20080805
20080820
20080820
20080624
20080710
20080721
20080731
20070131
20070514
20

2025-01-18 05:47:17 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:47:17 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:47:17 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:47:18 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 05:47:18 - snowflake.connector.connection - INFO - closed
2025-01-18 05:47:19 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:47:54 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:47:54 - root - INFO - ```sql
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE
    "country_code" = 'US' AND
    TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31' AND
    "abstract_localized"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
```
2025-01-18 05:47:54 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:47:54 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:47:54 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:47:56 - snowflake.connector.cursor - INFO - Number of results in first chunk: 128
2025-01-18 05:47:56 - snowflake.connector.connection - INFO - closed
2025-01-18 05:47:56 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:47:56 - root - INFO - SQL:
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE
    "country_code" = 'US' AND
    TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31' AND
    "abstract_localized"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
Results:
Year,Month,Number_of_Filings
2007,12,0
2008,1,0
2008,2,0
2008,3,0
2008,4,0
2008,5,0
2008,6,0
2008,7,0
2008,8,0
2008,9,0
2008,10,0
2008,11,0
2008,12,0
2009,1,0
2009,2,0
2009,3,0
2009,4,0
2009,5,0
2009,6,0
2009,7,0
2009,8,0
2009,9,0
2009,10,0
2009,11,0
2009,12,0
2010,1,0
2010,2,0
2010,3,0
2010,4,0
2010,5,0
2010,6,0
2010,7,0
2010,8,0
2010,9,0
2010,10,0
2010,11,0
2010,12,0
2011,1,0
2011,2,0
2011,3,0
2011,4,0
2011,5,0
2011,6,0
2011,7,0
2011,8,0
2011,9,0
2011,10,0
2011,11,0
2011,12,0
2012,1,0
2012,2,0
2012,3,0
2012,4,0
2012,5,0
2012,6,0
2012,7,0
2012,8,0
2012,9,0
2012,10,0
2012,11,0
2012,12,0
2013,1,0
2013,2,0
2013,3,0
2013,4,0
2013,5,0
2013,6,0
2013,7,0
2013,8,0
2013,9,0
2013,10,0
2013,11,0
2013,12,0
2014,1,0
2014,2,0
2014,3,0
2014,4,0
2014,5,0
2014,6,0
2014,7,0
2014,8,0
2014,9,0
2014,10,0
2014,11,0
2014,12,0
2015,1,0
2015,2,0
2015,3,0
2015,4,1
2015,5,0
2015,6,0
2015,7,0
2015,8,0
2015,9,0
2015,10,0
2015,11,0
2015,12,1
2016,1,0
2016,2,0
2016,3,0
2016,4,0
2016,5,0
2016,6,0
2016,7,0
2016,8,0
2016,9,0
2016,10,0
2016,11,0
2016,12,0
2017,1,0
2017,2,0
2017,3,1
2017,4,2
2017,5,0
2017,6,0
2017,7,0
2017,8,0
2017,9,0
2017,10,0
2017,11,0
2017,12,0
2018,1,0
2018,2,1
2018,3,1
2018,4,1
2018,5,0
2018,6,0
2018,7,0

2025-01-18 05:47:56 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:47:56 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:47:56 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:47:57 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 05:47:57 - snowflake.connector.connection - INFO - closed
2025-01-18 05:47:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:48:23 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:48:23 - root - INFO - ```sql
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(DISTINCT "application_number") AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS t,
  LATERAL FLATTEN(INPUT => t."abstract_localized") f
WHERE
  TRY_TO_DATE(t."filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31" AND
  f.value:"text"::STRING ILIKE '%internet of things%'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
```
2025-01-18 05:48:23 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:48:23 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:48:23 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:48:24 - snowflake.connector.connection - INFO - closed
2025-01-18 05:48:24 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:49:06 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:49:06 - root - INFO - ```sql
SELECT JSON_VALUE("abstract_localized", '$.text') AS "abstract_text"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' 
  AND JSON_VALUE("abstract_localized", '$.text') ILIKE '%internet of things%'
LIMIT 1000;
```
2025-01-18 05:49:06 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:49:06 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:49:06 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:49:08 - snowflake.connector.connection - INFO - closed
2025-01-18 05:49:08 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:49:51 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:49:51 - root - INFO - It appears that the function `JSON_VALUE` is not recognized in your Snowflake environment. In Snowflake, to extract values from a JSON object stored in a `VARIANT` column, you should use the colon notation or the bracket notation. Here's how you can adjust your query:

**Adjusted SQL Query:**

```sql
SELECT
  "abstract_localized":text::STRING AS "abstract_text"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US'
  AND "abstract_localized":text::STRING ILIKE '%internet of things%'
LIMIT 1000;
```

**Explanation:**

- **Accessing JSON Fields:**
  - In Snowflake, to access a field in a JSON object stored in a `VARIANT` column, use the colon notation without quotes around the key:
    - Correct: `"abstract_localized":text::STRING`
    - Incorrect: `"abstract_localized":"text"::STRING` (having quotes around `text` is invalid in this context)
  
- **Filtering Records:**
  - Use the extracted `abstract_text` in your `WHERE` clause to filter records containing the phrase 'internet of things'.

**Alternative Approach for Arrays in `abstract_localized`:**

If `abstract_localized` can also be an array (i.e., it contains multiple abstracts in an array format), you'll need to handle both objects and arrays. Here's how you can modify your query:

```sql
-- Handle records where 'abstract_localized' is an object
SELECT
  "application_number",
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') AS "filing_date",
  "abstract_localized":text::STRING AS "abstract_text"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US'
  AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
  AND "abstract_localized":text::STRING ILIKE '%internet of things%'

UNION ALL

-- Handle records where 'abstract_localized' is an array
SELECT
  "application_number",
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') AS "filing_date",
  f.value:text::STRING AS "abstract_text"
FROM PATENTS.PATENTS.PUBLICATIONS,
  LATERAL FLATTEN(INPUT => "abstract_localized") f
WHERE "country_code" = 'US'
  AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
  AND f.value:text::STRING ILIKE '%internet of things%'
LIMIT 1000;
```

**Explanation:**

- **First Query (Object Handling):**
  - Handles cases where `abstract_localized` is a JSON object.
  - Extracts `text` directly using colon notation.
  
- **Second Query (Array Handling):**
  - Uses `LATERAL FLATTEN` to handle cases where `abstract_localized` is an array.
  - `f.value` represents each element of the array; we extract `text` from each element.

**Counting Filings Per Month Including Months with Zero Filings:**

To get the number of U.S. publications related to IoT filed each month from 2008 to 2022, including months with no filings, you can use the following query:

```sql
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  -- Handle records where 'abstract_localized' is an object
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND "abstract_localized":text::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"

  UNION ALL

  -- Handle records where 'abstract_localized' is an array
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND f.value:text::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
),
monthly_filings AS (
  SELECT
    "Filing_Month",
    SUM("Number_of_Filings") AS "Total_Filings"
  FROM filings
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Total_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
```

**Explanation:**

- **`months` CTE:**
  - Generates a list of all months between January 2008 and December 2022.
  
- **`filings` CTE:**
  - Combines counts from both object and array cases.
  - Counts distinct application numbers per filing month.
  
- **`monthly_filings` CTE:**
  - Aggregates total filings per month.
  
- **Final SELECT:**
  - Left joins the months with the filings to include months with zero filings.
  - Uses `COALESCE` to replace `NULL` with `0` for months with no filings.

**Ensure Data Types and Functions Are Supported:**

- Verify that your Snowflake environment supports the `LATERAL FLATTEN` function.
- Ensure that the `TRY_TO_DATE` function is used to handle any invalid date formats in `filing_date`.

**Test the Query in Parts:**

1. **Test JSON Extraction:**

   Try extracting the `abstract_text` without filtering to ensure you can access the data:

   ```sql
   SELECT
     "abstract_localized":text::STRING AS "abstract_text"
   FROM PATENTS.PATENTS.PUBLICATIONS
   LIMIT 10;
   ```

2. **Test the Condition:**

   Check whether records are matched when filtering:

   ```sql
   SELECT
     COUNT(*)
   FROM PATENTS.PATENTS.PUBLICATIONS
   WHERE "abstract_localized":text::STRING ILIKE '%internet of things%';
   ```

3. **Verify the Data Structure:**

   If you still get empty results, the data might be structured differently. You can inspect the `abstract_localized` column:

   ```sql
   SELECT
     "abstract_localized"
   FROM PATENTS.PATENTS.PUBLICATIONS
   WHERE "country_code" = 'US'
     AND "abstract_localized" IS NOT NULL
   LIMIT 10;
   ```

**Alternative If `abstract_localized` Is Empty:**

If `abstract_localized` is empty or does not contain the abstracts you're looking for, consider searching in other columns, such as `description_localized` or `title_localized`.

Here's how you can adjust the query to search in `title_localized`:

```sql
SELECT
  "title_localized":text::STRING AS "title_text"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US'
  AND "title_localized":text::STRING ILIKE '%internet of things%'
LIMIT 1000;
```

**Final Notes:**

- **Check Column Availability:** Ensure that the columns `abstract_localized`, `description_localized`, or `title_localized` contain the data you need.
- **Data Updates:** If the data does not include the abstracts, you might need to access a different dataset or update your data source.
- **Assistance from Database Administrator:** If you continue to encounter issues, consider reaching out to your database administrator to verify the data structure and available functions in your Snowflake environment.

Let me know if you need further assistance or if you encounter any other errors!
2025-01-18 05:49:51 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:49:51 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:49:51 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:49:53 - snowflake.connector.cursor - INFO - Number of results in first chunk: 128
2025-01-18 05:49:53 - snowflake.connector.connection - INFO - closed
2025-01-18 05:49:53 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:49:53 - root - INFO - SQL:
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  -- Handle records where 'abstract_localized' is an object
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND "abstract_localized":text::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"

  UNION ALL

  -- Handle records where 'abstract_localized' is an array
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND f.value:text::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
),
monthly_filings AS (
  SELECT
    "Filing_Month",
    SUM("Number_of_Filings") AS "Total_Filings"
  FROM filings
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Total_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
Results:
Year,Month,Number_of_Filings
2007,12,0
2008,1,0
2008,2,0
2008,3,0
2008,4,0
2008,5,0
2008,6,0
2008,7,0
2008,8,0
2008,9,0
2008,10,0
2008,11,0
2008,12,0
2009,1,0
2009,2,0
2009,3,0
2009,4,0
2009,5,0
2009,6,0
2009,7,0
2009,8,0
2009,9,0
2009,10,0
2009,11,0
2009,12,0
2010,1,0
2010,2,0
2010,3,0
2010,4,0
2010,5,0
2010,6,0
2010,7,0
2010,8,0
2010,9,0
2010,10,0
2010,11,0
2010,12,0
2011,1,0
2011,2,0
2011,3,0
2011,4,0
2011,5,0
2011,6,0
2011,7,0
2011,8,0
2011,9,0
2011,10,0
2011,11,0
2011,12,0
2012,1,0
2012,2,0
2012,3,0
2012,4,0
2012,5,0
2012,6,0
2012,7,0
2012,8,0
2012,9,0
2012,10,0
2012,11,0
2012,12,0
2013,1,0
2013,2,0
2013,3,0
2013,4,0
2013,5,0
2013,6,0
2013,7,0
2013,8,0
2013,9,0
2013,10,0
2013,11,0
2013,12,0
2014,1,0
2014,2,0
2014,3,0
2014,4,0
2014,5,0
2014,6,0
2014,7,0
2014,8,0
2014,9,0
2014,10,0
2014,11,0
2014,12,0
2015,1,0
2015,2,0
2015,3,0
2015,4,1
2015,5,0
2015,6,0
2015,7,0
2015,8,0
2015,9,0
2015,10,0
2015,11,0
2015,12,1
2016,1,0
2016,2,0
2016,3,0
2016,4,0
2016,5,0
2016,6,0
2016,7,0
2016,8,0
2016,9,0
2016,10,0
2016,11,0
2016,12,0
2017,1,0
2017,2,0
2017,3,1
2017,4,2
2017,5,0
2017,6,0
2017,7,0
2017,8,0
2017,9,0
2017,10,0
2017,11,0
2017,12,0
2018,1,0
2018,2,1
2018,3,1
2018,4,1
2018,5,0
2018,6,0
2018,7,0

2025-01-18 05:49:53 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:49:53 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:49:53 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:49:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 05:49:55 - snowflake.connector.connection - INFO - closed
2025-01-18 05:49:55 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:49:55 - root - INFO - SQL:
SELECT "filing_date", TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') AS "parsed_filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
Results:
Too long, hard cut:
filing_date,parsed_filing_date
19971015,1997-10-15
19990322,1999-03-22
0,
19830217,1983-02-17
19900109,1990-01-09
19900101,1990-01-01
19860106,1986-01-06
0,
19480102,1948-01-02
19800125,1980-01-25
19820209,1982-02-09
19820219,1982-02-19
19700116,1970-01-16
19700224,1970-02-24
19700501,1970-05-01
0,
18901220,1890-12-20
19690318,1969-03-18
19660117,1966-01-17
18940609,1894-06-09
18941217,1894-12-17
18950125,1895-01-25
0,
19620924,1962-09-24
19650616,1965-06-16
19660402,1966-04-02
19660506,1966-05-06
19660704,1966-07-04
19660725,1966-07-25
19661121,1966-11-21
19600102,1960-01-02
19580106,1958-01-06
19290107,1929-01-07
19400116,1940-01-16
19870521,1987-05-21
19840705,1984-07-05
19920730,1992-07-30
19781012,1978-10-12
19861030,1986-10-30
19910225,1991-02-25
19860106,1986-01-06
19930106,1993-01-06
20150702,2015-07-02
19830922,1983-09-22
19860626,1986-06-26
19730907,1973-09-07
19780905,1978-09-05
19820512,1982-05-12
19880217,1988-02-17
19900307,1990-03-07
0,
19790102,1979-01-02
0,
0,
19710204,1971-02-04
19971230,1997-12-30
19880317,1988-03-17
19820430,1982-04-30
19750221,1975-02-21
19830503,1983-05-03
19810413,1981-04-13
19780313,1978-03-13
19820518,1982-05-18
19820524,1982-05-24
19800416,1980-04-16
19901205,1990-12-05
19860918,1986-09-18
19850916,1985-09-16
19730328,1973-03-28
19851029,1985-10-29
19750527,1975-05-27
19770706,1977-07-06
19750707,1975-07-07
19791105,1979-11-05
19781012,1978-10-12
19721012,1972-10-12
19781219,1978-12-19
19730906,1973-09-06
19731029,1973-10-29
19740405,1974-04-05
19741216,1974-12-16
19750221,1975-02-21
19750925,1975-09-25
19760105,1976-01-05
19760123,1976-01-23
19760331,1976-03-31
19761125,1976-11-25
19770324,1977-03-24
19770413,1977-04-13
19770802,1977-08-02
19771125,1977-11-25
19780505,1978-05-05
19780613,1978-06-13
19780712,1978-07-12
19780717,1978-07-17
19781020,1978-10-20
19790110,1979-01-10
19790718,1979-07-18
19800918,1980-09-18
19520218,1952-02-18
19581027,1958-10-27
19590724,1959-07-24
19590915,1959-09-15
19591103,1959-11-03
19591202,1959-12-02
19600518,1960-05-18
19600524,1960-05-24
19610929,1961-09-29
19620219,1962-02-19
19631211,1963-12-11
19640430,1964-04-30
19670405,1967-04-05
0,
19701231,1970-12-31
19710930,1971-09-30
19720218,1972-02-18
19720225,1972-02-25
19720428,1972-04-28
19720619,1972-06-19
19741003,1974-10-03
19701210,1970-12-10
19710528,1971-05-28
19710901,1971-09-01
19710902,1971-09-02
19710924,1971-09-24
19711005,1971-10-05
19720321,1972-03-21
19720428,1972-04-28
19720517,1972-05-17
19720905,1972-09-05
19721106,1972-11-06
0,
19730129,1973-01-29
19730402,1973-04-02
0,
19730828,1973-08-28
19730924,1973-09-24
19731009,1973-10-09
19731022,1973-10-22
0,
19731114,1973-11-14
19731206,1973-12-06
19740325,1974-03-25
0,
19740523,1974-05-23
19740523,1974-05-23
19750213,1975-02-13
19750507,1975-05-07
19750710,1975-07-10
19750826,1975-08-26
0,
0,
19760203,1976-02-03
19760602,1976-06-02
19760630,1976-06-30
19760902,1976-09-02
19761006,1976-10-06
19761214,1976-12-14
19770114,1977-01-14
19770125,1977-01-25
19770211,1977-02-11
0,
19770407,1977-04-07
0,
0,
19770908,1977-09-08
19771103,1977-11-03
19780118,1978-01-18
0,
19780406,1978-04-06
0,
19790208,1979-02-08
19790912,1979-09-12
19791002,1979-10-02
19791116,1979-11-16
19800221,1980-02-21
19800312,1980-03-12
19800527,1980-05-27
19801017,1980-10-17
0,
19801215,1980-12-15
19810209,1981-02-09
19810421,1981-04-21
19810525,1981-05-25
19810603,1981-06-03
19810923,1981-09-23
19820121,1982-01-21
19820720,1982-07-20
19821101,1982-11-01
19821103,1982-11-03
19821222,1982-12-22
0,
19830503,1983-05-03
19830504,1983-05-04
19830510,1983-05-10
19830524,1983-05-24
19830607,1983-06-07
19830719,1983-07-19
0,
19831230,1983-12-30
19840503,1984-05-03
19840703,1984-07-03
19840802,1984-08-02
19840906,1984-09-06
19840924,1984-09-24
19841220,1984-12-20
19850409,1985-04-09
19850513,1985-05-13
19850718,1985-07-18
19850919,1985-09-19
19851128,1985-11-28
19860218,1986-02-18
19861105,1986-11-05
19870121,1987-01-21
19870302,1987-03-02
19880929,1988-09-29
18991221,1899-12-21
19020507,1902-05-07
19021112,1902-11-12
19030316,1903-03-16
19030921,1903-09-21
19020820,1902-08-20
19040315,1904-03-15
19050821,1905-08-21
19620127,1962-01-27
18951218,1895-12-18
18950924,1895-09-24
18970331,1897-03-31
19690130,1969-01-30
18971110,1897-11-10
18971027,1897-10-27
18980218,1898-02-18
18980429,1898-04-29
18990624,1899-06-24
19000210,1900-02-10
19600226,1960-02-26
19640227,1964-02-27
19011009,1901-10-09
19600310,1960-03-10
19620309,1962-03-09
19610310,1961-03-10
19040217,1904-02-17
19040615,1904-06-15
19040913,1904-09-13
19710305,1971-03-05
19620326,1962-03-26
19720310,1972-03-10
19060228,1906-02-28
19060723,1906-07-23
19071207,1907-12-07
19700324,1970-03-24
19090220,1909-02-20
19710329,1971-03-29
19670403,1967-04-03
19100617,1910-06-17
19100723,1910-07-23
19680410,1968-04-10
19600516,1960-05-16
19620517,1962-05-17
19120619,1912-06-19
19710429,1971-04-29
19720428,1972-04-28
19140108,1914-01-08
19660509,1966-05-09
19720508,1972-05-08
19670517,1967-05-17
19140731,1914-07-31
196

2025-01-18 05:49:55 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:49:55 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:49:55 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:49:57 - snowflake.connector.cursor - INFO - Number of results in first chunk: 12
2025-01-18 05:49:57 - snowflake.connector.connection - INFO - closed
2025-01-18 05:49:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:49:57 - root - INFO - SQL:
SELECT SUBSTRING("filing_date"::VARCHAR, 1, 6) AS "filing_month", COUNT(*) AS "filing_count"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "filing_date" BETWEEN 20080101 AND 20081231
GROUP BY "filing_month"
LIMIT 1000;
Results:
filing_month,filing_count
200812,1036
200802,692
200804,791
200801,614
200808,729
200803,867
200809,792
200811,819
200806,798
200810,814
200807,816
200805,676

2025-01-18 05:49:57 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:49:57 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:49:57 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:49:59 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 05:49:59 - snowflake.connector.connection - INFO - closed
2025-01-18 05:49:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:50:24 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:50:24 - root - INFO - ```sql
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE
    "country_code" = 'US' AND
    TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31' AND
    "title_localized":text::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
```
2025-01-18 05:50:24 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:50:24 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:50:24 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:50:26 - snowflake.connector.cursor - INFO - Number of results in first chunk: 128
2025-01-18 05:50:26 - snowflake.connector.connection - INFO - closed
2025-01-18 05:50:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:50:26 - root - INFO - SQL:
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE
    "country_code" = 'US' AND
    TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31' AND
    "title_localized":text::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
Results:
Year,Month,Number_of_Filings
2007,12,0
2008,1,0
2008,2,0
2008,3,0
2008,4,0
2008,5,0
2008,6,0
2008,7,0
2008,8,0
2008,9,0
2008,10,0
2008,11,0
2008,12,0
2009,1,0
2009,2,0
2009,3,0
2009,4,0
2009,5,0
2009,6,0
2009,7,0
2009,8,0
2009,9,0
2009,10,0
2009,11,0
2009,12,0
2010,1,0
2010,2,0
2010,3,0
2010,4,0
2010,5,0
2010,6,0
2010,7,0
2010,8,0
2010,9,0
2010,10,0
2010,11,0
2010,12,0
2011,1,0
2011,2,0
2011,3,0
2011,4,0
2011,5,0
2011,6,0
2011,7,0
2011,8,0
2011,9,0
2011,10,0
2011,11,0
2011,12,0
2012,1,0
2012,2,0
2012,3,0
2012,4,0
2012,5,0
2012,6,0
2012,7,0
2012,8,0
2012,9,0
2012,10,0
2012,11,0
2012,12,0
2013,1,0
2013,2,0
2013,3,0
2013,4,0
2013,5,0
2013,6,0
2013,7,0
2013,8,0
2013,9,0
2013,10,0
2013,11,0
2013,12,0
2014,1,0
2014,2,0
2014,3,0
2014,4,0
2014,5,0
2014,6,0
2014,7,0
2014,8,0
2014,9,0
2014,10,0
2014,11,0
2014,12,0
2015,1,0
2015,2,0
2015,3,0
2015,4,0
2015,5,0
2015,6,0
2015,7,0
2015,8,0
2015,9,0
2015,10,0
2015,11,0
2015,12,0
2016,1,0
2016,2,0
2016,3,0
2016,4,0
2016,5,0
2016,6,0
2016,7,0
2016,8,0
2016,9,0
2016,10,0
2016,11,0
2016,12,0
2017,1,0
2017,2,0
2017,3,0
2017,4,0
2017,5,0
2017,6,0
2017,7,0
2017,8,0
2017,9,0
2017,10,0
2017,11,0
2017,12,0
2018,1,0
2018,2,0
2018,3,0
2018,4,0
2018,5,0
2018,6,0
2018,7,0

2025-01-18 05:50:26 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:50:26 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:50:26 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:50:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 05:50:27 - snowflake.connector.connection - INFO - closed
2025-01-18 05:50:28 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:50:47 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:50:47 - root - INFO - ```sql
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE
    "country_code" = 'US' AND
    TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31' AND
    "description_localized":text::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
```
2025-01-18 05:50:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:50:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:50:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:50:50 - snowflake.connector.cursor - INFO - Number of results in first chunk: 128
2025-01-18 05:50:50 - snowflake.connector.connection - INFO - closed
2025-01-18 05:50:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:50:50 - root - INFO - SQL:
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE
    "country_code" = 'US' AND
    TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31' AND
    "description_localized":text::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
Results:
Year,Month,Number_of_Filings
2007,12,0
2008,1,0
2008,2,0
2008,3,0
2008,4,0
2008,5,0
2008,6,0
2008,7,0
2008,8,0
2008,9,0
2008,10,0
2008,11,0
2008,12,0
2009,1,0
2009,2,0
2009,3,0
2009,4,0
2009,5,0
2009,6,0
2009,7,0
2009,8,0
2009,9,0
2009,10,0
2009,11,0
2009,12,0
2010,1,0
2010,2,0
2010,3,0
2010,4,0
2010,5,0
2010,6,0
2010,7,0
2010,8,0
2010,9,0
2010,10,0
2010,11,0
2010,12,0
2011,1,0
2011,2,0
2011,3,0
2011,4,0
2011,5,0
2011,6,0
2011,7,0
2011,8,0
2011,9,0
2011,10,0
2011,11,0
2011,12,0
2012,1,0
2012,2,0
2012,3,0
2012,4,0
2012,5,0
2012,6,0
2012,7,0
2012,8,0
2012,9,0
2012,10,0
2012,11,0
2012,12,0
2013,1,0
2013,2,0
2013,3,0
2013,4,0
2013,5,0
2013,6,0
2013,7,0
2013,8,0
2013,9,0
2013,10,0
2013,11,0
2013,12,0
2014,1,0
2014,2,0
2014,3,0
2014,4,0
2014,5,0
2014,6,0
2014,7,0
2014,8,0
2014,9,0
2014,10,0
2014,11,0
2014,12,0
2015,1,0
2015,2,0
2015,3,0
2015,4,0
2015,5,0
2015,6,0
2015,7,0
2015,8,0
2015,9,0
2015,10,0
2015,11,0
2015,12,0
2016,1,0
2016,2,0
2016,3,0
2016,4,0
2016,5,0
2016,6,0
2016,7,0
2016,8,0
2016,9,0
2016,10,0
2016,11,0
2016,12,0
2017,1,0
2017,2,0
2017,3,0
2017,4,0
2017,5,0
2017,6,0
2017,7,0
2017,8,0
2017,9,0
2017,10,0
2017,11,0
2017,12,0
2018,1,0
2018,2,0
2018,3,0
2018,4,0
2018,5,0
2018,6,0
2018,7,0

2025-01-18 05:50:50 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:50:50 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:50:50 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:50:52 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 05:50:52 - snowflake.connector.connection - INFO - closed
2025-01-18 05:50:52 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:51:46 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:51:46 - root - INFO - ```sql
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(DISTINCT "application_number") AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
  AND "abstract_localized"::STRING ILIKE '%internet%'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
```
2025-01-18 05:51:46 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:51:46 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:51:46 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:51:48 - snowflake.connector.cursor - INFO - Number of results in first chunk: 176
2025-01-18 05:51:48 - snowflake.connector.connection - INFO - closed
2025-01-18 05:51:48 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:51:49 - root - INFO - SQL:
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(DISTINCT "application_number") AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
  AND "abstract_localized"::STRING ILIKE '%internet%'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
Results:
Year,Month,Number_of_Filings
2008,1,2
2008,2,6
2008,3,3
2008,4,3
2008,5,3
2008,6,3
2008,7,7
2008,8,2
2008,9,4
2008,10,5
2008,11,5
2008,12,2
2009,1,2
2009,2,1
2009,3,7
2009,4,3
2009,5,1
2009,6,7
2009,7,1
2009,8,4
2009,9,4
2009,10,5
2009,11,3
2009,12,2
2010,1,3
2010,4,3
2010,5,2
2010,6,1
2010,7,1
2010,8,1
2010,9,3
2010,10,2
2010,11,6
2010,12,4
2011,1,4
2011,2,3
2011,3,4
2011,4,5
2011,5,2
2011,6,4
2011,7,3
2011,8,7
2011,9,6
2011,10,6
2011,11,3
2011,12,6
2012,1,2
2012,2,5
2012,3,8
2012,4,5
2012,5,5
2012,6,3
2012,7,3
2012,8,4
2012,9,2
2012,10,3
2012,11,7
2012,12,8
2013,1,2
2013,2,2
2013,3,1
2013,4,5
2013,6,1
2013,7,5
2013,8,7
2013,9,5
2013,10,4
2013,11,3
2013,12,7
2014,1,3
2014,2,4
2014,3,4
2014,4,6
2014,5,2
2014,6,4
2014,7,3
2014,8,7
2014,9,4
2014,10,10
2014,11,1
2014,12,10
2015,2,5
2015,3,4
2015,4,5
2015,5,5
2015,6,7
2015,7,9
2015,8,4
2015,9,8
2015,10,4
2015,11,7
2015,12,12
2016,1,7
2016,2,4
2016,3,9
2016,4,12
2016,5,13
2016,6,11
2016,7,11
2016,8,14
2016,9,3
2016,10,7
2016,11,13
2016,12,12
2017,1,4
2017,2,6
2017,3,9
2017,4,14
2017,5,9
2017,6,20
2017,7,13
2017,8,8
2017,9,13
2017,10,15
2017,11,14
2017,12,16
2018,1,11
2018,2,8
2018,3,11
2018,4,13
2018,5,17
2018,6,14
2018,7,11
2018,8,8
2018,9,12
2018,10,10
2018,11,13
2018,12,12
2019,1,8
2019,2,6
2019,3,6
2019,4,4
2019,5,2
2019,6,3
2019,7,6
2019,8,11
2019,9,7
2019,10,5
2019,11,8
2019,12,12
2020,1,4
2020,2,4
2020,3,5
2020,4,12
2020,5,3
2020,6,14
2020,7,5
2020,8,11
2020,9,11
2020,10,7
2020,11,10
2020,12,8
2021,1,13
2021,2,2
2021,3,8
2021,4,5
2021,5,18
2021,6,10
2021,7,11
2021,8,13
2021,9,12
2021,10,15
2021,11,8
2021,12,24
2022,1,5
2022,2,8
2022,3,10
2022,4,9
2022,5,8
2022,6,6
2022,7,3
2022,8,5
2022,9,5
2022,10,7
2022,11,4
2022,12,13

2025-01-18 05:51:49 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:51:49 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:51:49 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:51:50 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 05:51:50 - snowflake.connector.connection - INFO - closed
2025-01-18 05:51:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:52:22 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:52:22 - root - INFO - ```sql
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(DISTINCT "application_number") AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
  AND (
    "abstract_localized":text::STRING ILIKE '%internet%' OR
    "title_localized":text::STRING ILIKE '%internet%' OR
    "description_localized":text::STRING ILIKE '%internet%'
  )
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
```
2025-01-18 05:52:22 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:52:22 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:52:22 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:52:24 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 05:52:24 - snowflake.connector.connection - INFO - closed
2025-01-18 05:52:24 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:52:48 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:52:48 - root - INFO - ```sql
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(*) AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  "country_code" = 'US'
  AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
```
2025-01-18 05:52:48 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:52:48 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:52:48 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:52:50 - snowflake.connector.cursor - INFO - Number of results in first chunk: 180
2025-01-18 05:52:50 - snowflake.connector.connection - INFO - closed
2025-01-18 05:52:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:52:50 - root - INFO - SQL:
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(*) AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  "country_code" = 'US'
  AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
Results:
Year,Month,Number_of_Filings
2008,1,111
2008,2,130
2008,3,137
2008,4,125
2008,5,116
2008,6,121
2008,7,129
2008,8,118
2008,9,122
2008,10,134
2008,11,105
2008,12,135
2009,1,99
2009,2,96
2009,3,130
2009,4,116
2009,5,88
2009,6,96
2009,7,97
2009,8,100
2009,9,107
2009,10,91
2009,11,69
2009,12,109
2010,1,74
2010,2,70
2010,3,101
2010,4,70
2010,5,85
2010,6,82
2010,7,70
2010,8,70
2010,9,72
2010,10,78
2010,11,64
2010,12,67
2011,1,60
2011,2,65
2011,3,72
2011,4,57
2011,5,65
2011,6,74
2011,7,57
2011,8,56
2011,9,83
2011,10,48
2011,11,54
2011,12,68
2012,1,51
2012,2,42
2012,3,48
2012,4,50
2012,5,49
2012,6,50
2012,7,53
2012,8,45
2012,9,58
2012,10,47
2012,11,57
2012,12,65
2013,1,42
2013,2,50
2013,3,82
2013,4,58
2013,5,47
2013,6,56
2013,7,65
2013,8,52
2013,9,65
2013,10,54
2013,11,75
2013,12,90
2014,1,84
2014,2,71
2014,3,105
2014,4,66
2014,5,88
2014,6,95
2014,7,78
2014,8,73
2014,9,112
2014,10,107
2014,11,83
2014,12,119
2015,1,110
2015,2,102
2015,3,149
2015,4,101
2015,5,105
2015,6,109
2015,7,110
2015,8,114
2015,9,126
2015,10,123
2015,11,101
2015,12,143
2016,1,103
2016,2,135
2016,3,151
2016,4,142
2016,5,141
2016,6,206
2016,7,134
2016,8,150
2016,9,190
2016,10,164
2016,11,162
2016,12,174
2017,1,171
2017,2,158
2017,3,219
2017,4,173
2017,5,195
2017,6,209
2017,7,198
2017,8,183
2017,9,168
2017,10,197
2017,11,207
2017,12,244
2018,1,215
2018,2,209
2018,3,265
2018,4,244
2018,5,255
2018,6,243
2018,7,238
2018,8,274
2018,9,248
2018,10,252
2018,11,262
2018,12,278
2019,1,259
2019,2,257
2019,3,308
2019,4,310
2019,5,328
2019,6,298
2019,7,308
2019,8,298
2019,9,304
2019,10,293
2019,11,269
2019,12,300
2020,1,247
2020,2,273
2020,3,326
2020,4,265
2020,5,213
2020,6,271
2020,7,248
2020,8,210
2020,9,274
2020,10,228
2020,11,244
2020,12,262
2021,1,199
2021,2,185
2021,3,274
2021,4,203
2021,5,202
2021,6,224
2021,7,214
2021,8,206
2021,9,207
2021,10,166
2021,11,189
2021,12,200
2022,1,152
2022,2,139
2022,3,147
2022,4,113
2022,5,136
2022,6,130
2022,7,93
2022,8,112
2022,9,108
2022,10,138
2022,11,129
2022,12,157

2025-01-18 05:52:50 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:52:50 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:52:50 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:52:52 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 05:52:52 - snowflake.connector.connection - INFO - closed
2025-01-18 05:52:52 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:53:32 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:53:32 - root - INFO - ```sql
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(*) AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  "country_code" = 'US' AND
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
```
2025-01-18 05:53:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:53:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:53:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:53:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 180
2025-01-18 05:53:33 - snowflake.connector.connection - INFO - closed
2025-01-18 05:53:34 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:53:34 - root - INFO - SQL:
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(*) AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  "country_code" = 'US' AND
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
Results:
Year,Month,Number_of_Filings
2008,1,111
2008,2,130
2008,3,137
2008,4,125
2008,5,116
2008,6,121
2008,7,129
2008,8,118
2008,9,122
2008,10,134
2008,11,105
2008,12,135
2009,1,99
2009,2,96
2009,3,130
2009,4,116
2009,5,88
2009,6,96
2009,7,97
2009,8,100
2009,9,107
2009,10,91
2009,11,69
2009,12,109
2010,1,74
2010,2,70
2010,3,101
2010,4,70
2010,5,85
2010,6,82
2010,7,70
2010,8,70
2010,9,72
2010,10,78
2010,11,64
2010,12,67
2011,1,60
2011,2,65
2011,3,72
2011,4,57
2011,5,65
2011,6,74
2011,7,57
2011,8,56
2011,9,83
2011,10,48
2011,11,54
2011,12,68
2012,1,51
2012,2,42
2012,3,48
2012,4,50
2012,5,49
2012,6,50
2012,7,53
2012,8,45
2012,9,58
2012,10,47
2012,11,57
2012,12,65
2013,1,42
2013,2,50
2013,3,82
2013,4,58
2013,5,47
2013,6,56
2013,7,65
2013,8,52
2013,9,65
2013,10,54
2013,11,75
2013,12,90
2014,1,84
2014,2,71
2014,3,105
2014,4,66
2014,5,88
2014,6,95
2014,7,78
2014,8,73
2014,9,112
2014,10,107
2014,11,83
2014,12,119
2015,1,110
2015,2,102
2015,3,149
2015,4,101
2015,5,105
2015,6,109
2015,7,110
2015,8,114
2015,9,126
2015,10,123
2015,11,101
2015,12,143
2016,1,103
2016,2,135
2016,3,151
2016,4,142
2016,5,141
2016,6,206
2016,7,134
2016,8,150
2016,9,190
2016,10,164
2016,11,162
2016,12,174
2017,1,171
2017,2,158
2017,3,219
2017,4,173
2017,5,195
2017,6,209
2017,7,198
2017,8,183
2017,9,168
2017,10,197
2017,11,207
2017,12,244
2018,1,215
2018,2,209
2018,3,265
2018,4,244
2018,5,255
2018,6,243
2018,7,238
2018,8,274
2018,9,248
2018,10,252
2018,11,262
2018,12,278
2019,1,259
2019,2,257
2019,3,308
2019,4,310
2019,5,328
2019,6,298
2019,7,308
2019,8,298
2019,9,304
2019,10,293
2019,11,269
2019,12,300
2020,1,247
2020,2,273
2020,3,326
2020,4,265
2020,5,213
2020,6,271
2020,7,248
2020,8,210
2020,9,274
2020,10,228
2020,11,244
2020,12,262
2021,1,199
2021,2,185
2021,3,274
2021,4,203
2021,5,202
2021,6,224
2021,7,214
2021,8,206
2021,9,207
2021,10,166
2021,11,189
2021,12,200
2022,1,152
2022,2,139
2022,3,147
2022,4,113
2022,5,136
2022,6,130
2022,7,93
2022,8,112
2022,9,108
2022,10,138
2022,11,129
2022,12,157

2025-01-18 05:53:34 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:53:34 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:53:34 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:53:35 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-18 05:53:35 - snowflake.connector.connection - INFO - closed
2025-01-18 05:53:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:54:27 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:54:27 - root - INFO - ```sql
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(DISTINCT "application_number") AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  "country_code" = 'US' AND
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL AND
  ("abstract_localized"::STRING ILIKE '%internet%' OR "title_localized"::STRING ILIKE '%internet%' OR "description_localized"::STRING ILIKE '%internet%')
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
```
2025-01-18 05:54:27 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:54:27 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:54:27 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:54:29 - snowflake.connector.cursor - INFO - Number of results in first chunk: 329
2025-01-18 05:54:29 - snowflake.connector.connection - INFO - closed
2025-01-18 05:54:29 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:54:29 - root - INFO - SQL:
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(DISTINCT "application_number") AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  "country_code" = 'US' AND
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL AND
  ("abstract_localized"::STRING ILIKE '%internet%' OR "title_localized"::STRING ILIKE '%internet%' OR "description_localized"::STRING ILIKE '%internet%')
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
Results:
Year,Month,Number_of_Filings
1967,12,1
1994,4,1
1995,5,1
1995,6,1
1996,6,1
1996,7,1
1996,10,2
1996,12,1
1997,1,1
1997,3,1
1997,5,3
1997,6,1
1997,8,2
1997,9,1
1997,12,1
1998,1,1
1998,3,1
1998,4,1
1998,5,1
1998,6,3
1998,8,1
1998,9,2
1998,10,4
1998,11,5
1998,12,4
1999,1,3
1999,2,2
1999,4,2
1999,5,2
1999,6,1
1999,7,2
1999,8,2
1999,9,1
1999,10,5
1999,11,1
1999,12,2
2000,1,3
2000,2,1
2000,3,3
2000,4,1
2000,5,2
2000,6,2
2000,7,1
2000,8,4
2000,9,1
2000,10,2
2000,11,2
2000,12,11
2001,1,6
2001,2,10
2001,3,8
2001,4,9
2001,5,17
2001,6,7
2001,7,9
2001,8,8
2001,9,7
2001,10,13
2001,11,4
2001,12,4
2002,1,5
2002,2,8
2002,3,10
2002,4,9
2002,5,12
2002,6,7
2002,7,6
2002,8,6
2002,9,17
2002,10,5
2002,11,7
2002,12,11
2003,1,10
2003,2,6
2003,3,14
2003,4,7
2003,5,2
2003,6,13
2003,7,7
2003,8,11
2003,9,17
2003,10,13
2003,11,16
2003,12,18
2004,1,20
2004,2,11
2004,3,21
2004,4,10
2004,5,28
2004,6,19
2004,7,16
2004,8,20
2004,9,19
2004,10,13
2004,11,22
2004,12,26
2005,1,19
2005,2,22
2005,3,28
2005,4,27
2005,5,17
2005,6,25
2005,7,22
2005,8,18
2005,9,29
2005,10,11
2005,11,18
2005,12,22
2006,1,15
2006,2,27
2006,3,23
2006,4,24
2006,5,25
2006,6,22
2006,7,23
2006,8,23
2006,9,29
2006,10,19
2006,11,22
2006,12,39
2007,1,25
2007,2,21
2007,3,25
2007,4,18
2007,5,31
2007,6,21
2007,7,11
2007,8,22
2007,9,22
2007,10,42
2007,11,17
2007,12,20
2008,1,26
2008,2,27
2008,3,32
2008,4,24
2008,5,28
2008,6,23
2008,7,22
2008,8,21
2008,9,19
2008,10,23
2008,11,25
2008,12,20
2009,1,17
2009,2,11
2009,3,34
2009,4,21
2009,5,16
2009,6,19
2009,7,14
2009,8,18
2009,9,15
2009,10,21
2009,11,12
2009,12,17
2010,1,13
2010,2,9
2010,3,13
2010,4,14
2010,5,15
2010,6,20
2010,7,6
2010,8,12
2010,9,16
2010,10,19
2010,11,5
2010,12,17
2011,1,7
2011,2,9
2011,3,12
2011,4,9
2011,5,12
2011,6,16
2011,7,15
2011,8,8
2011,9,15
2011,10,9
2011,11,10
2011,12,16
2012,1,5
2012,2,13
2012,3,10
2012,4,10
2012,5,13
2012,6,10
2012,7,21
2012,8,9
2012,9,11
2012,10,13
2012,11,14
2012,12,10
2013,1,18
2013,2,11
2013,3,18
2013,4,6
2013,5,12
2013,6,12
2013,7,14
2013,8,7
2013,9,19
2013,10,7
2013,11,17
2013,12,17
2014,1,18
2014,2,13
2014,3,21
2014,4,12
2014,5,19
2014,6,31
2014,7,18
2014,8,18
2014,9,21
2014,10,18
2014,11,15
2014,12,28
2015,1,19
2015,2,21
2015,3,25
2015,4,19
2015,5,21
2015,6,33
2015,7,28
2015,8,30
2015,9,29
2015,10,27
2015,11,20
2015,12,35
2016,1,22
2016,2,30
2016,3,36
2016,4,30
2016,5,32
2016,6,56
2016,7,28
2016,8,42
2016,9,47
2016,10,34
2016,11,38
2016,12,41
2017,1,40
2017,2,37
2017,3,53
2017,4,51
2017,5,36
2017,6,51
2017,7,33
2017,8,42
2017,9,39
2017,10,51
2017,11,49
2017,12,66
2018,1,45
2018,2,60
2018,3,83
2018,4,61
2018,5,79
2018,6,68
2018,7,51
2018,8,55
2018,9,61
2018,10,66
2018,11,55
2018,12,74
2019,1,77
2019,2,62
2019,3,78
2019,4,84
2019,5,84
2019,6,85
2019,7,85
2019,8,80
2019,9,101
2019,10,77
2019,11,70
2019,12,72
2020,1,93
2020,2,66
2020,3,91
2020,4,68
2020,5,69
2020,6,82
2020,7,73
2020,8,78
2020,9,81
2020,10,65
2020,11,62
2020,12,79
2021,1,61
2021,2,53
2021,3,75
2021,4,62
2021,5,61
2021,6,75
2021,7,61
2021,8,57
2021,9,65
2021,10,49
2021,11,45
2021,12,48
2022,1,49
2022,2,34
2022,3,42
2022,4,29
2022,5,38
2022,6,37
2022,7,30
2022,8,35
2022,9,38
2022,10,45
2022,11,51
2022,12,43
2023,1,41
2023,2,35
2023,3,31
2023,4,21
2023,5,43
2023,6,24
2023,7,16
2023,8,38
2023,9,31
2023,10,32
2023,11,15
2023,12,36
2024,1,25
2024,2,21
2024,3,13
2024,4,12
2024,5,3

2025-01-18 05:54:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:54:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:54:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:54:31 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-18 05:54:31 - snowflake.connector.connection - INFO - closed
2025-01-18 05:54:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:54:31 - root - INFO - SQL:
SELECT DISTINCT "application_kind"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US'
LIMIT 1000;
Results:
application_kind
D
A
V

2025-01-18 05:54:31 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:54:31 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:54:31 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:54:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-18 05:54:33 - snowflake.connector.connection - INFO - closed
2025-01-18 05:54:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:55:52 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:55:52 - root - INFO - ```sql
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date", 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE
    "country_code" = 'US' AND
    TRY_TO_DATE("filing_date", 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
```
2025-01-18 05:55:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:55:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:55:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:55:53 - snowflake.connector.connection - INFO - closed
2025-01-18 05:55:54 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:56:45 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:56:45 - root - INFO - ```sql
SELECT
  SUBSTRING("filing_date"::VARCHAR, 1, 6) AS "filing_month",
  COUNT(*) AS "filing_count"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  "country_code" = 'US' AND
  "filing_date" BETWEEN '20080101' AND '20221231' AND
  "abstract_localized"::STRING ILIKE '%internet%'
GROUP BY "filing_month"
ORDER BY "filing_month"
LIMIT 1000;
```
2025-01-18 05:56:45 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:56:45 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:56:45 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:56:46 - snowflake.connector.cursor - INFO - Number of results in first chunk: 81
2025-01-18 05:56:46 - snowflake.connector.connection - INFO - closed
2025-01-18 05:56:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:56:47 - root - INFO - SQL:
SELECT
  SUBSTRING("filing_date"::VARCHAR, 1, 6) AS "filing_month",
  COUNT(*) AS "filing_count"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  "country_code" = 'US' AND
  "filing_date" BETWEEN '20080101' AND '20221231' AND
  "abstract_localized"::STRING ILIKE '%internet%'
GROUP BY "filing_month"
ORDER BY "filing_month"
LIMIT 1000;
Results:
filing_month,filing_count
200801,1
200802,2
200803,3
200805,1
200806,1
200807,2
200811,1
200906,2
201001,1
201005,1
201010,1
201012,1
201103,1
201106,1
201107,1
201109,1
201112,2
201202,2
201205,1
201302,1
201310,1
201312,1
201404,1
201408,1
201410,1
201502,1
201503,2
201504,1
201507,1
201512,2
201603,1
201604,2
201605,4
201606,3
201607,1
201609,1
201610,1
201611,1
201612,1
201702,2
201703,2
201704,3
201708,2
201710,1
201711,1
201712,1
201801,1
201802,1
201803,2
201804,2
201805,1
201806,2
201807,1
201808,2
201809,1
201810,2
201811,2
201812,1
201902,1
201906,1
201908,2
201909,2
201910,2
201911,2
202001,2
202002,1
202004,5
202006,4
202007,2
202009,1
202011,2
202012,1
202101,2
202102,1
202107,1
202109,1
202111,1
202203,2
202208,1
202209,1
202212,3

2025-01-18 05:56:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:56:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:56:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:56:48 - snowflake.connector.connection - INFO - closed
2025-01-18 05:56:48 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:57:25 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:57:25 - root - INFO - ```sql
SELECT "title_keys" FROM (
  SELECT
    OBJECT_KEYS("title_localized") AS "title_keys"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE IS_OBJECT("title_localized")

  UNION ALL

  SELECT
    OBJECT_KEYS(f.value) AS "title_keys"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(input => "title_localized") f
  WHERE IS_ARRAY("title_localized")
)
LIMIT 1000;
```
2025-01-18 05:57:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:57:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:57:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:57:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-18 05:57:27 - snowflake.connector.connection - INFO - closed
2025-01-18 05:57:27 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:57:27 - root - INFO - SQL:
SELECT "title_keys" FROM (
  SELECT
    OBJECT_KEYS("title_localized") AS "title_keys"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE IS_OBJECT("title_localized")

  UNION ALL

  SELECT
    OBJECT_KEYS(f.value) AS "title_keys"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(input => "title_localized") f
  WHERE IS_ARRAY("title_localized")
)
LIMIT 1000;
Results:
Too long, hard cut:
title_keys
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""trun

2025-01-18 05:57:27 - root - INFO - itercount: 0
2025-01-18 05:57:27 - root - INFO - Database Name: PATENTS
Schema Name: PATENTS
DDL describes table information.
,0
table_name,DISCLOSURES_13
description,
DDL,"create or replace TABLE DISCLOSURES_13 (
	""family_id"" VARCHAR(16777216),
	""record_id"" VARCHAR(16777216),
	""disclosure_event"" VARCHAR(16777216),
	""sso"" VARCHAR(16777216),
	""patent_owner_harmonized"" VARCHAR(16777216),
	""patent_owner_unharmonized"" VARCHAR(16777216),
	""date"" NUMBER(38,0),
	""standard"" VARCHAR(16777216),
	""committee_project"" VARCHAR(16777216),
	""tc_name"" VARCHAR(16777216),
	""sc_name"" VARCHAR(16777216),
	""wg_name"" VARCHAR(16777216),
	""licensing_commitment"" VARCHAR(16777216),
	""copyright"" VARCHAR(16777216),
	""blanket_type"" VARCHAR(16777216),
	""blanket_scope"" VARCHAR(16777216),
	""third_party"" VARCHAR(16777216),
	""reciprocity"" VARCHAR(16777216),
	""serial_cleaned"" VARCHAR(16777216),
	""pub_cleaned"" VARCHAR(16777216)
);"

,1
table_name,PUBLICATIONS
description,
DDL,"create or replace TABLE PUBLICATIONS (
	""publication_number"" VARCHAR(16777216),
	""application_number"" VARCHAR(16777216),
	""country_code"" VARCHAR(16777216),
	""kind_code"" VARCHAR(16777216),
	""application_kind"" VARCHAR(16777216),
	""application_number_formatted"" VARCHAR(16777216),
	""pct_number"" VARCHAR(16777216),
	""family_id"" VARCHAR(16777216),
	""spif_publication_number"" VARCHAR(16777216),
	""spif_application_number"" VARCHAR(16777216),
	""title_localized"" VARIANT,
	""abstract_localized"" VARIANT,
	""claims_localized"" VARIANT,
	""claims_localized_html"" VARIANT,
	""description_localized"" VARIANT,
	""description_localized_html"" VARIANT,
	""publication_date"" NUMBER(38,0),
	""filing_date"" NUMBER(38,0),
	""grant_date"" NUMBER(38,0),
	""priority_date"" NUMBER(38,0),
	""priority_claim"" VARIANT,
	""inventor"" VARIANT,
	""inventor_harmonized"" VARIANT,
	""assignee"" VARIANT,
	""assignee_harmonized"" VARIANT,
	""examiner"" VARIANT,
	""uspc"" VARIANT,
	""ipc"" VARIANT,
	""cpc"" VARIANT,
	""fi"" VARIANT,
	""fterm"" VARIANT,
	""locarno"" VARIANT,
	""citation"" VARIANT,
	""parent"" VARIANT,
	""child"" VARIANT,
	""entity_status"" VARCHAR(16777216),
	""art_unit"" VARCHAR(16777216)
);"

,2
table_name,CPC_DEFINITION
description,
DDL,"create or replace TABLE CPC_DEFINITION (
	""applicationReferences"" VARIANT,
	""breakdownCode"" BOOLEAN,
	""childGroups"" VARIANT,
	""children"" VARIANT,
	""dateRevised"" FLOAT,
	""definition"" VARIANT,
	""glossary"" VARIANT,
	""informativeReferences"" VARIANT,
	""ipcConcordant"" VARCHAR(16777216),
	""level"" FLOAT,
	""limitingReferences"" VARIANT,
	""notAllocatable"" BOOLEAN,
	""parents"" VARIANT,
	""precedenceLimitingReferences"" VARIANT,
	""residualReferences"" VARIANT,
	""rules"" VARIANT,
	""scopeLimitingReferences"" VARIANT,
	""status"" VARCHAR(16777216),
	""symbol"" VARCHAR(16777216),
	""synonyms"" VARIANT,
	""titleFull"" VARCHAR(16777216),
	""titlePart"" VARIANT
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'PATENTS': {'PATENTS': ['CPC_DEFINITION', 'DISCLOSURES_13', 'PUBLICATIONS']}}
Begin Exploring Related Columns
**Relevant Columns and Their Potential Usage:**

1. **"abstract_localized"**: Potential usage - Contains the abstract text; used to search for 'internet of things' within this field.
2. **"filing_date"**: Potential usage - Represents the filing date of the application; used to group filings per month and year.
3. **"country_code"**: Potential usage - Indicates the country of the publication; used to filter for U.S. publications with 'US'.
4. **"publication_date"**: Potential usage - Date of publication; may provide additional date information.
5. **"title_localized"**: Potential usage - Contains the title of the publication; may also be searched for 'internet of things'.
6. **"application_number"**: Potential usage - Unique identifier for the application; may be used for reference.

**Conditions That May Be Used:**

- **"country_code" = 'US'**: To filter for U.S. publications.
- **"filing_date" BETWEEN 20080101 AND 20221231**: To limit filings between 2008 and 2022.
- **"abstract_localized":"text"::STRING ILIKE '%internet of things%'**: To find abstracts containing the phrase 'internet of things'.

**SQL Queries to Explore the Data:**

1. **Retrieve distinct country codes:**

```sql
SELECT DISTINCT "country_code"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
```

2. **View sample filing dates:**

```sql
SELECT "filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
```

3. **Compare filing dates and publication dates:**

```sql
SELECT "filing_date", "publication_date"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
```

4. **Explore the keys in "abstract_localized":**

```sql
SELECT OBJECT_KEYS("abstract_localized") AS "abstract_keys"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
```

5. **Extract abstract text from "abstract_localized":**

```sql
SELECT "abstract_localized":"text"::STRING AS "abstract_text"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
```

6. **List abstracts containing 'internet':**

```sql
SELECT "abstract_localized":"text"::STRING AS "abstract_text"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "abstract_localized":"text"::STRING ILIKE '%internet%'
LIMIT 1000;
```

7. **Retrieve filing dates for U.S. publications:**

```sql
SELECT "filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US'
LIMIT 1000;
```

8. **Extract abstracts for U.S. filings between 2008 and 2022:**

```sql
SELECT "abstract_localized":"text"::STRING AS "abstract_text"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' AND "filing_date" BETWEEN 20080101 AND 20221231
LIMIT 1000;
```

9. **Find U.S. publications with 'internet of things' in abstract:**

```sql
SELECT "abstract_localized":"text"::STRING AS "abstract_text"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' AND "abstract_localized":"text"::STRING ILIKE '%internet of things%'
LIMIT 1000;
```

10. **Verify the format of "filing_date":**

```sql
SELECT "filing_date", TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') AS "parsed_filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
```

11. **Count filings per month in 2008:**

```sql
SELECT SUBSTRING("filing_date"::VARCHAR, 1, 6) AS "filing_month", COUNT(*) AS "filing_count"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "filing_date" BETWEEN 20080101 AND 20081231
GROUP BY "filing_month"
LIMIT 1000;
```

12. **Extract titles of publications with 'internet of things' in abstract:**

```sql
SELECT "title_localized":"text"::STRING AS "title_text"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "abstract_localized":"text"::STRING ILIKE '%internet of things%'
LIMIT 1000;
```

13. **Check languages in "abstract_localized":**

```sql
SELECT "abstract_localized":"language"::STRING AS "abstract_language"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "abstract_localized" IS NOT NULL
LIMIT 1000;
```

14. **Find U.S. applications filed in January 2008 with 'internet of things':**

```sql
SELECT "application_number", "filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' AND "filing_date" BETWEEN 20080101 AND 20080131
  AND "abstract_localized":"text"::STRING ILIKE '%internet of things%'
LIMIT 1000;
```

15. **List publication numbers with 'internet of things' in abstract:**

```sql
SELECT "publication_number"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "abstract_localized":"text"::STRING ILIKE '%internet of things%'
LIMIT 1000;
```

16. **Retrieve U.S. publications with 'internet of things' in title:**

```sql
SELECT "title_localized":"text"::STRING AS "title_text"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' AND "title_localized":"text"::STRING ILIKE '%internet of things%'
LIMIT 1000;
```

17. **Determine the range of filing dates:**

```sql
SELECT MIN("filing_date") AS "min_filing_date", MAX("filing_date") AS "max_filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS;
```

18. **Retrieve distinct application kinds for U.S. publications:**

```sql
SELECT DISTINCT "application_kind"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US'
LIMIT 1000;
```

19. **Count U.S. filings per year with 'internet of things' in abstract:**

```sql
SELECT SUBSTRING("filing_date"::VARCHAR, 1, 4) AS "filing_year", COUNT(*) AS "filing_count"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US' AND "abstract_localized":"text"::STRING ILIKE '%internet of things%'
GROUP BY "filing_year"
LIMIT 1000;
```

20. **Verify the structure of "title_localized":**

```sql
SELECT OBJECT_KEYS("title_localized") AS "title_keys"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
```Query:
SELECT DISTINCT "country_code"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
Answer:
country_code
DO
WO
BA
UA
MW
YU
ZM
LT
KR
RO
BG
TR
GR
CH
NO
MX
GE
EE
CZ
SV
HN
PA
EG
AU
CU
CR
PL
IT
CY
OA
GB
SG
CN
MC
JP
HU
DZ
AT
NL
CA
IS
SK
NI
IN
EC
ES
IE
EA
TN
GT
HK
CO
AR
SI
KE
IL
TW
MT
MD
JO
MA
ZA
EP
RS
PE
LU
DK
FI
BE
ZW
DD
DE
US
PH
SA
MN
FR
SU
BR
ID
KZ
HR
RU
SE
AP
ME
SM
NZ
PT
CL
LV
CS
MY
Query:
SELECT "filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
Answer:
Too long, hard cut:
filing_date
19971015
19990322
0
19830217
19900109
19900101
19860106
0
19480102
19800125
19820209
19820219
19700116
19700224
19700501
0
18901220
19690318
19660117
18940609
18941217
18950125
0
19620924
19650616
19660402
19660506
19660704
19660725
19661121
19600102
19580106
19290107
19400116
19870521
19840705
19920730
19781012
19861030
19910225
19860106
19930106
20150702
19830922
19860626
19730907
19780905
19820512
19880217
19900307
0
19790102
0
0
19710204
19971230
19880317
19820430
19750221
19830503
19810413
19780313
19820518
19820524
19800416
19901205
19860918
19850916
19730328
19851029
19750527
19770706
19750707
19791105
19781012
19721012
19781219
19730906
19731029
19740405
19741216
19750221
19750925
19760105
19760123
19760331
19761125
19770324
19770413
19770802
19771125
19780505
19780613
19780712
19780717
19781020
19790110
19790718
19800918
19520218
19581027
19590724
19590915
19591103
19591202
19600518
19600524
19610929
19620219
19631211
19640430
19670405
0
19701231
19710930
19720218
19720225
19720428
19720619
19741003
19701210
19710528
19710901
19710902
19710924
19711005
19720321
19720428
19720517
19720905
19721106
0
19730129
19730402
0
19730828
19730924
19731009
19731022
0
19731114
19731206
19740325
0
19740523
19740523
19750213
19750507
19750710
19750826
0
0
19760203
19760602
19760630
19760902
19761006
19761214
19770114
19770125
19770211
0
19770407
0
0
19770908
19771103
19780118
0
19780406
0
19790208
19790912
19791002
19791116
19800221
19800312
19800527
19801017
0
19801215
19810209
19810421
19810525
19810603
19810923
19820121
19820720
19821101
19821103
19821222
0
19830503
19830504
19830510
19830524
19830607
19830719
0
19831230
19840503
19840703
19840802
19840906
19840924
19841220
19850409
19850513
19850718
19850919
19851128
19860218
19861105
19870121
19870302
19880929
18991221
19020507
19021112
19030316
19030921
19020820
19040315
19050821
19620127
18951218
18950924
18970331
19690130
18971110
18971027
18980218
18980429
18990624
19000210
19600226
19640227
19011009
19600310
19620309
19610310
19040217
19040615
19040913
19710305
19620326
19720310
19060228
19060723
19071207
19700324
19090220
19710329
19670403
19100617
19100723
19680410
19600516
19620517
19120619
19710429
19720428
19140108
19660509
19720508
19670517
19140731
19690513
19650526
19690519
19680531
19191125
19200412
19210514
19690630
19780912
19800311
0
0
0
0
0
0
0
0
19770401
19770518
19750521
19810716
19770831
19770907
19870813
19841114
0
0
19470908
19490315
0
19860729
19890125
19670616
19670912
19600120
19600707
19611127
19620626
19620705
0
19631224
19631226
19640519
19640708
19641009
19370114
19500120
19340122
19240212
19370209
19530213
19430325
19200218
19520227
19620213
19530226
19510312
19630219
19660216
19570301
19440420
19440422
19510406
19600309
19690217
19520418
19911010
19850415
19840420
19881013
19961007
19970827
19980917
19870108
19760109
19810108
19950109
19770110
19860110
19830112
19830111
19960110
19880111
19711229
19980109
19980109
19870112
19830114
19930112
19850111
19940118
19830112
19840113
19950113
19950113
19790117
19820113
19990111
19770119
19860114
19750111
19850116
19720111
19910122
19780121
19740109
19840117
19780119
19820120
19860114
19870114
19940126
19970117
19770127
19760128
19780125
19920121
19720124
19890117
19980120
19940128
19980120
19950124
19930122
19870120
19870120
19810127
19940131
19980604
19830330
19941206
0
0
19150111
0
0
0
0
0
19870116
0
19930115
19350212
0
0
0
19600208
19480210
0
0
0
19870202
19760504
19910809
19840810
19680814
19790905
19800829
19751008
19791205
19711208
20030401
19991029
19961122
19830119
19961128
19970103
19950112
19880309
19880314
20000713
19920114
19991103
19880211
19750515
19941219
19941229
19970314
19991220
19751008
19830928
19970321
19920811
19920812
19970213
19970218
19990324
19920828
20001222
19970205
19950414
19840105
19830209
19990301
19920828
19950524
19950526
19770725
20000202
19970425
19921130
19890210
20000210
19840629
20000501
20000112
19890201
20000131
19970701
19921218
19780307
19841016
19950816
19680314
19711029
19970725
20000118
19930315
19990402
20000330
19890622
19951011
19780710
19930310
20000404
19930520
19780904
19930420
19990430
19990520
19850411
19951206
19990608
20000327
19890831
19790119
20000414
19930705
19790219
19720810
19891130
19971008
19960119
20000505
19790528
19790614
19990628
19900119
19900103
19711224
19790824
20000519
19851106
19841211
19960312
19960129
19900320
19730228
19791113
20000816
19971212
19940121
19990819
20000530
19900502
19990813
20000615
19800219
19730516
19960607
19980224
19800319
19730612
19800402
19990817
19990830
19900627
19730723
19800619
19960607
20000721
20000627
19860730
19860731
19900810
19800730
19800820
19900827
19990909
20000929
19980203
19991001
19900912
19901018
19980123
20000726
19740314
19960808
19740508
19960823
20000707
20000830
19870319
20000505
19960918
19961008
19980618
19910301
20001207
19961001
19910114
19940727
19960913
19910410
19870622
19980424
19910403
19980528
19980601
19870819
19870908
19870910
19750218
19860
Query:
SELECT "filing_date", "publication_date"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
Answer:
Too long, hard cut:
filing_date,publication_date
19971015,19980507
19990322,19991217
0,18920810
19830217,19830217
19900109,19900828
19900101,19910910
19860106,19870715
0,18370928
19480102,19501031
19800125,19810215
19820209,19860115
19820219,19860415
19700116,19730213
19700224,19740709
19700501,19730213
0,18780805
18901220,18910815
19690318,19731015
19660117,19670415
18940609,18950131
18941217,18950715
18950125,18950915
0,0
19620924,19630802
19650616,19660708
19660402,19670324
19660506,19670428
19660704,19670623
19660725,19670707
19661121,19680105
19600102,19620404
19580106,19610802
19290107,19300507
19400116,19410228
19870521,19870529
19840705,19840713
19920730,19920807
19781012,19781020
19861030,19861107
19910225,19920330
19860106,19870713
19930106,19940719
20150702,20180509
19830922,19850331
19860626,19880630
19730907,19780530
19780905,19820927
19820512,19850131
19880217,19891218
19900307,19950315
0,18460702
19790102,19801118
0,18490410
0,18520511
19710204,19810430
19971230,19991122
19880317,19891231
19820430,19820831
19750221,19761115
19830503,19880915
19810413,19860215
19780313,19820715
19820518,19830315
19820524,19840315
19800416,19810515
19901205,19920915
19860918,19880115
19850916,19870115
19730328,19760715
19851029,19880615
19750527,19760315
19770706,19791015
19750707,19780315
19791105,19820915
19781012,19800815
19721012,19750915
19781219,19861015
19730906,19740306
19731029,19740215
19740405,19740731
19741216,19750616
19750221,19750616
19750925,19760116
19760105,19760705
19760123,19760514
19760331,19760716
19761125,19770316
19770324,19770718
19770413,19770801
19770802,19771201
19771125,19780525
19780505,19781106
19780613,19781213
19780712,19790112
19780717,19781116
19781020,19790420
19790110,19790710
19790718,19800118
19800918,19810116
19520218,19520315
19581027,19620629
19590724,19591116
19590915,19591231
19591103,19600301
19591202,19600602
19600518,19601118
19600524,19600916
19610929,19620115
19620219,19620820
19631211,19640611
19640430,19641030
19670405,19670615
0,19710401
19701231,19710527
19710930,19720117
19720218,19720818
19720225,19720616
19720428,19720901
19720619,19721219
19741003,19751209
19701210,19730123
19710528,19730220
19710901,19740618
19710902,19740122
19710924,19740806
19711005,19750617
19720321,19741105
19720428,19750318
19720517,19750708
19720905,19750916
19721106,19750701
0,18821218
19730129,19770118
19730402,19761019
0,18830614
19730828,19770517
19730924,19770405
19731009,19770125
19731022,19770412
0,18840125
19731114,19760817
19731206,19770301
19740325,19770705
0,18840809
19740523,19780418
19740523,19770419
19750213,19790306
19750507,19790102
19750710,19790724
19750826,19780110
0,18860327
0,18860628
19760203,19770308
19760602,19810210
19760630,19790313
19760902,19790501
19761006,19790123
19761214,19800909
19770114,19800902
19770125,19791127
19770211,19810217
0,18870723
19770407,19801104
0,18871209
0,18880204
19770908,19801021
19771103,19800226
19780118,19811215
0,18880901
19780406,19810324
0,18890619
19790208,19801230
19790912,19831025
19791002,19820420
19791116,19830111
19800221,19830712
19800312,19811020
19800527,19830426
19801017,19820622
0,18910404
19801215,19821116
19810209,19830927
19810421,19840131
19810525,19841016
19810603,19841120
19810923,19840228
19820121,19850625
19820720,19850514
19821101,19860729
19821103,19851008
19821222,19850430
0,18930208
19830503,19860930
19830504,19850806
19830510,19851203
19830524,19870113
19830607,19860520
19830719,19870707
0,18930620
19831230,19860624
19840503,19871201
19840703,19880315
19840802,19870317
19840906,19871020
19840924,19880913
19841220,19860805
19850409,19891121
19850513,19880524
19850718,19871006
19850919,19890411
19851128,19900313
19860218,19880906
19861105,19900925
19870121,19891205
19870302,19900703
19880929,19891024
18991221,19000406
19020507,19021021
19021112,19021202
19030316,19030407
19030921,19040216
19020820,19040412
19040315,19040823
19050821,19050912
19620127,19640531
18951218,18960715
18950924,18960615
18970331,18971115
19690130,19710228
18971110,18980331
18971027,18980615
18980218,18981130
18980429,18981231
18990624,19000731
19000210,19010515
19600226,19630629
19640227,19660115
19011009,19030215
19600310,19640615
19620309,19651115
19610310,19650131
19040217,19050228
19040615,19050315
19040913,19050531
19710305,19720131
19620326,19650731
19720310,19731115
19060228,19061215
19060723,19070415
19071207,19081001
19700324,19720630
19090220,19091001
19710329,19730515
19670403,19680915
19100617,19120102
19100723,19120316
19680410,19701115
19600516,19640715
19620517,19650615
19120619,19130716
19710429,19730715
19720428,19730831
19140108,19141016
19660509,19680430
19720508,19741015
19670517,19680115
19140731,19160901
19690513,19700515
19650526,19690415
19690519,19711130
19680531,19690531
19191125,19201001
19200412,19201216
19210514,19230102
19690630,19700715
19780912,19850308
19800311,19870116
0,0
0,0
0,0
0,0
0,0
0,0
0,0
0,0
19770401,19771008
19770518,19771123
19750521,19751122
19810716,19830117
19770831,19770831
19770907,19780309
198708
Query:
WITH 
months AS (
  SELECT
    DATEADD(month, seq4(), '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4(), '2008-01-01') <= '2022-12-01'
),
object_filings AS (
  SELECT 
    DATE_TRUNC('month', TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_month",
    COUNT(DISTINCT "application_number") AS "number_of_filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE 
    "country_code" = 'US' AND
    "filing_date" BETWEEN 20080101 AND 20221231 AND
    IS_OBJECT("abstract_localized") AND
    "abstract_localized":"text"::STRING ILIKE '%internet of things%'
  GROUP BY "filing_month"
),
array_filings AS (
  SELECT 
    DATE_TRUNC('month', TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "filing_month",
    COUNT(DISTINCT "application_number") AS "number_of_filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
  LATERAL FLATTEN(input => "abstract_localized") f
  WHERE 
    "country_code" = 'US' AND
    "filing_date" BETWEEN 20080101 AND 20221231 AND
    IS_ARRAY("abstract_localized") AND
    f.value:"text"::STRING ILIKE '%internet of things%'
  GROUP BY "filing_month"
),
combined_filings AS (
  SELECT * FROM object_filings
  UNION ALL
  SELECT * FROM array_filings
),
monthly_filings AS (
  SELECT 
    "filing_month",
    SUM("number_of_filings") AS "total_filings"
  FROM combined_filings
  GROUP BY "filing_month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."total_filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."filing_month"
ORDER BY m."month_start";
Answer:
Year,Month,Number_of_Filings
2008,1,0
2008,2,0
2008,3,0
2008,4,0
2008,5,0
2008,6,0
2008,7,0
2008,8,0
2008,9,0
2008,10,0
2008,11,0
2008,12,0
2009,1,0
2009,2,0
2009,3,0
2009,4,0
2009,5,0
2009,6,0
2009,7,0
2009,8,0
2009,9,0
2009,10,0
2009,11,0
2009,12,0
2010,1,0
2010,2,0
2010,3,0
2010,4,0
2010,5,0
2010,6,0
2010,7,0
2010,8,0
2010,9,0
2010,10,0
2010,11,0
2010,12,0
2011,1,0
2011,2,0
2011,3,0
2011,4,0
2011,5,0
2011,6,0
2011,7,0
2011,8,0
2011,9,0
2011,10,0
2011,11,0
2011,12,0
2012,1,0
2012,2,0
2012,3,0
2012,4,0
2012,5,0
2012,6,0
2012,7,0
2012,8,0
2012,9,0
2012,10,0
2012,11,0
2012,12,0
2013,1,0
2013,2,0
2013,3,0
2013,4,0
2013,5,0
2013,6,0
2013,7,0
2013,8,0
2013,9,0
2013,10,0
2013,11,0
2013,12,0
2014,1,0
2014,2,0
2014,3,0
2014,4,0
2014,5,0
2014,6,0
2014,7,0
2014,8,0
2014,9,0
2014,10,0
2014,11,0
2014,12,0
2015,1,0
2015,2,0
2015,3,0
2015,4,1
2015,5,0
2015,6,0
2015,7,0
2015,8,0
2015,9,0
2015,10,0
2015,11,0
2015,12,1
2016,1,0
2016,2,0
2016,3,0
2016,4,0
2016,5,0
2016,6,0
2016,7,0
2016,8,0
2016,9,0
2016,10,0
2016,11,0
2016,12,0
2017,1,0
2017,2,0
2017,3,1
2017,4,2
2017,5,0
2017,6,0
2017,7,0
2017,8,0
2017,9,0
2017,10,0
2017,11,0
2017,12,0
2018,1,0
2018,2,1
2018,3,1
2018,4,1
2018,5,0
2018,6,0
2018,7,0
2018,8,0
Query:
SELECT "abstract_text" FROM (
  SELECT "abstract_localized":"text"::STRING AS "abstract_text"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE IS_OBJECT("abstract_localized")

  UNION ALL

  SELECT f.value:"text"::STRING AS "abstract_text"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE IS_ARRAY("abstract_localized")
)
LIMIT 1000;
Answer:
Too long, hard cut:
abstract_text
"When a bus stop request control unit issues a module-specific bus stop request signal, a bus stop control unit coupled to a bus slave determines a module that serves as a bus master of the bus slave and on which the bus slave is dependent, for example, on the basis of information in a dependence setting register. The bus stop control unit then outputs a prior bus stop request signal to the module on which the bus slave is dependent, so as to stop use of a bus of the module. Upon receipt of a module-specific bus stop completion signal indicating that processing of stop of the bus of the module on which the bus slave is dependent is complete, the bus stop control unit outputs a module-specific bus stop request signal to the module which serves as a bus slave and whose bus is to be stopped."
"According to an embodiment, a half-bridge circuit includes at least two solid-state switching devices connected in series. Each switching device has a high-voltage switching transistor configured to switch a high voltage based on a switching signal and a switching driver circuit operationally connected to the high-voltage switching transistor. The switching driver circuit includes a low-voltage driver transistor having a source, a drain and a gate, connected in series to the high-voltage switching transistor and being configured to transfer the switching signal to the high-voltage switching transistor, wherein the high-voltage switching transistor is arranged source-down on top of the drain of the low-voltage driver transistor."
"An image processing apparatus includes a rotation processing unit, an output image information output unit, and a shared area generation unit. The rotation processing unit performs a rotation process on an image to generate a rotated image. The output image information output unit performs, based on the rotated image, an output image information output process of outputting output image information of an image to be output. The shared area generation unit generates a shared area in a memory in the image processing apparatus shared by the rotation process and the output image information output process. The rotation processing unit stores information of the rotated image in a region in the generated shared area. The output image information that is output in the output image information output process is stored in the region in the shared area storing the information of the rotated image."
"A landing gear assembly having a first part movable relative to a second part, and a spring coupled to the first and second parts via first and second anchor points. A lost motion assembly is provided to enable one of the anchor points to translate along one of the parts. As such, the spring extends less as the first part moves relative to the second part than it would if each anchor point was fixed to a respective part."
"The present invention relates to a novel process for the preparation of printable, high-viscosity oxide media, and to the use thereof in the production of solar cells."
"A price management system can be configured to manage the sale price for one or more content items. For example, the price management system can maintain content item accounts including data pertaining to the content item, such as the sale price and price calculation rules. The price management system can receive and respond to price queries requesting the price of the content item. The price management system can also update the price of the content items based on the price calculation rules corresponding to the content. For example, the price management system can determine whether a specified trigger or condition has been met and, if so, calculate an updated price for the content item. The price management system can also provide metrics regarding sale of copies of a content item."
"A technique implements differential digital logic circuits with a differential clock distribution network using standard cell differential clock gater circuits to reduce area, delay, power consumption in integrated circuits. An apparatus includes a first terminal configured to receive a clock signal, a second terminal configured to receive a complementary clock signal, and a third terminal configured to receive a clock control signal. The apparatus includes a latch circuit configured to generate a latched version of the clock control signal based on a version of the clock control signal, a version of the clock signal, and a version of the complementary clock signal. The apparatus includes a combinatorial circuit configured to generate a gated clock signal and a gated complementary clock signal based on the version of the clock control signal, the version of the clock signal, and the version of the complementary clock signal."
"A piezoelectric element comprises a piezoelectric layer made of a perovskite compound containing sodium, potassium, lithium, niobium and tantalum and bismuth manganate and electrodes for applying a voltage 
Query:
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(DISTINCT "application_number") AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
  AND "abstract_localized"::STRING ILIKE '%internet of things%'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
Answer:
Year,Month,Number_of_Filings
2010,4,1
2010,7,1
2010,11,1
2010,12,1
2011,3,1
2011,4,1
2011,7,1
2011,9,1
2011,11,1
2011,12,1
2012,3,1
2012,5,1
2012,6,1
2012,7,1
2012,8,1
2012,9,1
2012,11,1
2012,12,1
2013,3,1
2013,8,3
2013,9,1
2013,11,2
2013,12,2
2014,2,1
2014,4,2
2014,5,1
2014,7,1
2014,8,2
2014,9,1
2014,12,1
2015,2,3
2015,4,3
2015,5,2
2015,6,2
2015,7,2
2015,8,1
2015,9,2
2015,10,1
2015,12,3
2016,1,1
2016,2,1
2016,3,2
2016,4,3
2016,5,1
2016,6,2
2016,7,2
2016,8,7
2016,11,2
2016,12,4
2017,2,3
2017,3,7
2017,4,8
2017,5,3
2017,6,8
2017,7,6
2017,8,3
2017,9,6
2017,10,10
2017,11,9
2017,12,8
2018,1,5
2018,2,6
2018,3,6
2018,4,7
2018,5,8
2018,6,6
2018,7,6
2018,8,2
2018,9,7
2018,10,6
2018,11,10
2018,12,8
2019,1,3
2019,2,3
2019,3,5
2019,4,2
2019,5,2
2019,6,2
2019,7,1
2019,8,5
2019,9,7
2019,10,1
2019,11,5
2019,12,7
2020,1,2
2020,2,2
2020,3,4
2020,4,6
2020,5,2
2020,6,8
2020,7,2
2020,8,7
2020,9,4
2020,10,4
2020,11,9
2020,12,5
2021,1,9
2021,3,2
2021,4,1
2021,5,9
2021,6,6
2021,7,9
2021,8,11
2021,9,4
2021,10,14
2021,11,3
2021,12,14
2022,1,2
2022,2,5
2022,3,6
2022,4,6
2022,5,5
2022,6,3
2022,8,2
2022,9,4
2022,10,3
2022,11,3
2022,12,9
Query:
SELECT "filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US'
LIMIT 1000;
Answer:
Too long, hard cut:
filing_date
20031215
20031216
20031217
20031223
20040123
20040126
20040128
20040202
20040130
20040213
20040224
20040302
20040301
20040310
20040312
20040312
20040316
20040316
20040316
20040323
20040324
20040326
20040402
20040407
20040413
20040414
20040507
20040521
20040524
20040526
20040526
20040602
20040607
20040608
20040615
20040623
20040623
20040628
20040702
20040707
20040716
20040720
20040722
20040802
20050328
20040810
20040817
20040817
20040818
20040823
20040831
20040902
20040907
20040910
20040915
20041022
20041022
20041028
20041028
20041103
20041110
20041110
20041119
20041119
20041201
20041202
20041210
20041210
20041214
20041213
20041217
20041220
20050113
20050113
20050125
20050126
20050131
20050208
20050223
20050304
20050315
20050318
20050331
20050411
20050412
20050415
20050420
20050426
20050426
20050428
20050504
20050531
20050606
20050615
20050616
20050629
20050706
20050712
20050808
20050815
20050817
20050830
20050919
20050919
20050929
20051004
20051006
20051013
20051021
20051101
20051104
20051110
20060331
20060413
20051208
20060727
20051219
20051221
20051230
20060109
20060110
20060113
20060119
20060124
20060123
20060127
20060201
20060213
20060217
20060222
20060227
20060303
20060307
20060314
20060316
20060515
20060515
20060323
20060324
20060403
20060405
20060404
20060522
20060517
20060523
20060525
20060530
20060612
20060724
20060801
20060804
20060622
20060712
20060711
20060714
20060719
20060725
20060809
20060811
20060815
20060814
20060818
20060823
20060831
20060906
20060907
20060911
20060920
20060921
20060926
20060919
20060920
20061005
20061006
20061006
20050407
20061011
20061012
20061014
20061017
20061030
20061019
20061101
20061103
20061120
20061129
20061221
20061228
20070112
20061215
20061218
20050930
20051021
20070220
20070226
20070228
20070307
20070316
20070125
20070206
20070226
20070405
20070403
20070509
20070621
20070717
20070418
20050613
20070518
20070523
20070523
20070530
20070601
20060213
20060210
20070622
20070622
20070802
20070802
20070808
20070827
20070918
20070925
20070925
20071010
20071018
20070725
20070724
20070801
20050131
20060209
20051117
20070814
20070807
20070814
20070816
20070913
20060313
20060418
20060411
20060607
20071029
20071029
20071029
20071031
20071112
20071119
20071203
20071205
20071213
20071227
20080104
20071016
20071101
20071115
20071115
20041228
20041228
20050106
20050112
20050112
20050119
20050128
20050127
20050203
20050204
20050207
20050207
20050209
20050210
20050211
20050216
20050217
20050225
20050225
20050302
20050303
20050304
20050304
20050303
20050314
20050315
20050318
20050322
20050405
20050411
20050413
20050419
20050420
20050422
20050429
20050502
20050519
20050520
20050520
20050519
20050526
20050527
20050526
20050601
20050609
20050609
20050615
20050624
20050624
20050628
20050629
20050708
20050727
20050729
20050801
20050810
20050812
20050812
20050823
20050901
20050907
20050915
20050919
20050928
20051006
20051011
20051013
20051026
20051025
20051028
20051102
20051107
20051108
20051110
20051114
20051114
20060407
20051123
20051128
20051129
20051207
20051208
20051213
20051215
20051219
20060104
20060330
20051222
20051229
20051229
20060109
20060117
20060118
20060118
20060125
20060203
20060207
20060206
20060213
20060215
20060303
20060307
20060315
20060316
20060316
20060317
20060322
20060328
20060406
20060427
20060501
20060524
20060508
20060510
20060515
20060522
20060522
20060524
20060530
20060531
20060601
20060714
20060804
20060815
20060907
20060622
20060622
20060707
20060711
20060713
20060802
20060807
20060809
20060817
20060825
20060824
20060824
20060828
20060829
20060905
20060906
20060911
20060911
20060912
20060925
20060928
20060915
20060921
20061004
20061019
20061103
20061103
20061117
20061206
20040430
20050613
20061013
20061030
20040528
20061219
20061219
20061220
20061222
20070112
20070119
20070126
20050614
20061206
20061219
20061222
20061226
20061228
20070104
20050901
20051103
20070129
20070228
20070308
20070312
20070321
20070201
20070221
20070220
20070313
20070322
20070404
20070402
20070403
20070430
20070501
20070601
20070613
20070614
20070619
20070629
20070629
20070702
20070705
20070725
20070413
20070417
20051213
20070514
20070523
20070515
20070608
20060113
20070614
20070711
20070725
20070727
20070731
20070801
20070806
20070807
20070808
20070816
20070822
20070827
20070904
20070908
20070911
20070927
20070928
20071001
20071009
20071009
20071010
20071017
20071023
20060228
20070809
20070913
20070925
20060424
20060426
20060503
20071029
20071030
20071031
20071112
20071113
20071115
20071116
20071120
20071205
20071205
20071207
20071212
20071213
20071217
20071217
20071219
20080103
20071025
20071106
20071130
20060518
20060717
20071205
20071212
20080109
20080118
20080116
20080124
20080201
20080306
20080321
20080401
20080206
20080215
20080417
20061013
20080409
20080410
20080415
20080417
20080423
20080430
20080519
20080617
20080619
20080417
20080528
20080427
20070202
20080710
20080715
20080729
20080805
20080820
20080820
20080624
20080710
20080721
20080731
20070131
20070514
20
Query:
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE
    "country_code" = 'US' AND
    TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31' AND
    "abstract_localized"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
Answer:
Year,Month,Number_of_Filings
2007,12,0
2008,1,0
2008,2,0
2008,3,0
2008,4,0
2008,5,0
2008,6,0
2008,7,0
2008,8,0
2008,9,0
2008,10,0
2008,11,0
2008,12,0
2009,1,0
2009,2,0
2009,3,0
2009,4,0
2009,5,0
2009,6,0
2009,7,0
2009,8,0
2009,9,0
2009,10,0
2009,11,0
2009,12,0
2010,1,0
2010,2,0
2010,3,0
2010,4,0
2010,5,0
2010,6,0
2010,7,0
2010,8,0
2010,9,0
2010,10,0
2010,11,0
2010,12,0
2011,1,0
2011,2,0
2011,3,0
2011,4,0
2011,5,0
2011,6,0
2011,7,0
2011,8,0
2011,9,0
2011,10,0
2011,11,0
2011,12,0
2012,1,0
2012,2,0
2012,3,0
2012,4,0
2012,5,0
2012,6,0
2012,7,0
2012,8,0
2012,9,0
2012,10,0
2012,11,0
2012,12,0
2013,1,0
2013,2,0
2013,3,0
2013,4,0
2013,5,0
2013,6,0
2013,7,0
2013,8,0
2013,9,0
2013,10,0
2013,11,0
2013,12,0
2014,1,0
2014,2,0
2014,3,0
2014,4,0
2014,5,0
2014,6,0
2014,7,0
2014,8,0
2014,9,0
2014,10,0
2014,11,0
2014,12,0
2015,1,0
2015,2,0
2015,3,0
2015,4,1
2015,5,0
2015,6,0
2015,7,0
2015,8,0
2015,9,0
2015,10,0
2015,11,0
2015,12,1
2016,1,0
2016,2,0
2016,3,0
2016,4,0
2016,5,0
2016,6,0
2016,7,0
2016,8,0
2016,9,0
2016,10,0
2016,11,0
2016,12,0
2017,1,0
2017,2,0
2017,3,1
2017,4,2
2017,5,0
2017,6,0
2017,7,0
2017,8,0
2017,9,0
2017,10,0
2017,11,0
2017,12,0
2018,1,0
2018,2,1
2018,3,1
2018,4,1
2018,5,0
2018,6,0
2018,7,0
Query:
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  -- Handle records where 'abstract_localized' is an object
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND "abstract_localized":text::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"

  UNION ALL

  -- Handle records where 'abstract_localized' is an array
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND f.value:text::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
),
monthly_filings AS (
  SELECT
    "Filing_Month",
    SUM("Number_of_Filings") AS "Total_Filings"
  FROM filings
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Total_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
Answer:
Year,Month,Number_of_Filings
2007,12,0
2008,1,0
2008,2,0
2008,3,0
2008,4,0
2008,5,0
2008,6,0
2008,7,0
2008,8,0
2008,9,0
2008,10,0
2008,11,0
2008,12,0
2009,1,0
2009,2,0
2009,3,0
2009,4,0
2009,5,0
2009,6,0
2009,7,0
2009,8,0
2009,9,0
2009,10,0
2009,11,0
2009,12,0
2010,1,0
2010,2,0
2010,3,0
2010,4,0
2010,5,0
2010,6,0
2010,7,0
2010,8,0
2010,9,0
2010,10,0
2010,11,0
2010,12,0
2011,1,0
2011,2,0
2011,3,0
2011,4,0
2011,5,0
2011,6,0
2011,7,0
2011,8,0
2011,9,0
2011,10,0
2011,11,0
2011,12,0
2012,1,0
2012,2,0
2012,3,0
2012,4,0
2012,5,0
2012,6,0
2012,7,0
2012,8,0
2012,9,0
2012,10,0
2012,11,0
2012,12,0
2013,1,0
2013,2,0
2013,3,0
2013,4,0
2013,5,0
2013,6,0
2013,7,0
2013,8,0
2013,9,0
2013,10,0
2013,11,0
2013,12,0
2014,1,0
2014,2,0
2014,3,0
2014,4,0
2014,5,0
2014,6,0
2014,7,0
2014,8,0
2014,9,0
2014,10,0
2014,11,0
2014,12,0
2015,1,0
2015,2,0
2015,3,0
2015,4,1
2015,5,0
2015,6,0
2015,7,0
2015,8,0
2015,9,0
2015,10,0
2015,11,0
2015,12,1
2016,1,0
2016,2,0
2016,3,0
2016,4,0
2016,5,0
2016,6,0
2016,7,0
2016,8,0
2016,9,0
2016,10,0
2016,11,0
2016,12,0
2017,1,0
2017,2,0
2017,3,1
2017,4,2
2017,5,0
2017,6,0
2017,7,0
2017,8,0
2017,9,0
2017,10,0
2017,11,0
2017,12,0
2018,1,0
2018,2,1
2018,3,1
2018,4,1
2018,5,0
2018,6,0
2018,7,0
Query:
SELECT "filing_date", TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') AS "parsed_filing_date"
FROM PATENTS.PATENTS.PUBLICATIONS
LIMIT 1000;
Answer:
Too long, hard cut:
filing_date,parsed_filing_date
19971015,1997-10-15
19990322,1999-03-22
0,
19830217,1983-02-17
19900109,1990-01-09
19900101,1990-01-01
19860106,1986-01-06
0,
19480102,1948-01-02
19800125,1980-01-25
19820209,1982-02-09
19820219,1982-02-19
19700116,1970-01-16
19700224,1970-02-24
19700501,1970-05-01
0,
18901220,1890-12-20
19690318,1969-03-18
19660117,1966-01-17
18940609,1894-06-09
18941217,1894-12-17
18950125,1895-01-25
0,
19620924,1962-09-24
19650616,1965-06-16
19660402,1966-04-02
19660506,1966-05-06
19660704,1966-07-04
19660725,1966-07-25
19661121,1966-11-21
19600102,1960-01-02
19580106,1958-01-06
19290107,1929-01-07
19400116,1940-01-16
19870521,1987-05-21
19840705,1984-07-05
19920730,1992-07-30
19781012,1978-10-12
19861030,1986-10-30
19910225,1991-02-25
19860106,1986-01-06
19930106,1993-01-06
20150702,2015-07-02
19830922,1983-09-22
19860626,1986-06-26
19730907,1973-09-07
19780905,1978-09-05
19820512,1982-05-12
19880217,1988-02-17
19900307,1990-03-07
0,
19790102,1979-01-02
0,
0,
19710204,1971-02-04
19971230,1997-12-30
19880317,1988-03-17
19820430,1982-04-30
19750221,1975-02-21
19830503,1983-05-03
19810413,1981-04-13
19780313,1978-03-13
19820518,1982-05-18
19820524,1982-05-24
19800416,1980-04-16
19901205,1990-12-05
19860918,1986-09-18
19850916,1985-09-16
19730328,1973-03-28
19851029,1985-10-29
19750527,1975-05-27
19770706,1977-07-06
19750707,1975-07-07
19791105,1979-11-05
19781012,1978-10-12
19721012,1972-10-12
19781219,1978-12-19
19730906,1973-09-06
19731029,1973-10-29
19740405,1974-04-05
19741216,1974-12-16
19750221,1975-02-21
19750925,1975-09-25
19760105,1976-01-05
19760123,1976-01-23
19760331,1976-03-31
19761125,1976-11-25
19770324,1977-03-24
19770413,1977-04-13
19770802,1977-08-02
19771125,1977-11-25
19780505,1978-05-05
19780613,1978-06-13
19780712,1978-07-12
19780717,1978-07-17
19781020,1978-10-20
19790110,1979-01-10
19790718,1979-07-18
19800918,1980-09-18
19520218,1952-02-18
19581027,1958-10-27
19590724,1959-07-24
19590915,1959-09-15
19591103,1959-11-03
19591202,1959-12-02
19600518,1960-05-18
19600524,1960-05-24
19610929,1961-09-29
19620219,1962-02-19
19631211,1963-12-11
19640430,1964-04-30
19670405,1967-04-05
0,
19701231,1970-12-31
19710930,1971-09-30
19720218,1972-02-18
19720225,1972-02-25
19720428,1972-04-28
19720619,1972-06-19
19741003,1974-10-03
19701210,1970-12-10
19710528,1971-05-28
19710901,1971-09-01
19710902,1971-09-02
19710924,1971-09-24
19711005,1971-10-05
19720321,1972-03-21
19720428,1972-04-28
19720517,1972-05-17
19720905,1972-09-05
19721106,1972-11-06
0,
19730129,1973-01-29
19730402,1973-04-02
0,
19730828,1973-08-28
19730924,1973-09-24
19731009,1973-10-09
19731022,1973-10-22
0,
19731114,1973-11-14
19731206,1973-12-06
19740325,1974-03-25
0,
19740523,1974-05-23
19740523,1974-05-23
19750213,1975-02-13
19750507,1975-05-07
19750710,1975-07-10
19750826,1975-08-26
0,
0,
19760203,1976-02-03
19760602,1976-06-02
19760630,1976-06-30
19760902,1976-09-02
19761006,1976-10-06
19761214,1976-12-14
19770114,1977-01-14
19770125,1977-01-25
19770211,1977-02-11
0,
19770407,1977-04-07
0,
0,
19770908,1977-09-08
19771103,1977-11-03
19780118,1978-01-18
0,
19780406,1978-04-06
0,
19790208,1979-02-08
19790912,1979-09-12
19791002,1979-10-02
19791116,1979-11-16
19800221,1980-02-21
19800312,1980-03-12
19800527,1980-05-27
19801017,1980-10-17
0,
19801215,1980-12-15
19810209,1981-02-09
19810421,1981-04-21
19810525,1981-05-25
19810603,1981-06-03
19810923,1981-09-23
19820121,1982-01-21
19820720,1982-07-20
19821101,1982-11-01
19821103,1982-11-03
19821222,1982-12-22
0,
19830503,1983-05-03
19830504,1983-05-04
19830510,1983-05-10
19830524,1983-05-24
19830607,1983-06-07
19830719,1983-07-19
0,
19831230,1983-12-30
19840503,1984-05-03
19840703,1984-07-03
19840802,1984-08-02
19840906,1984-09-06
19840924,1984-09-24
19841220,1984-12-20
19850409,1985-04-09
19850513,1985-05-13
19850718,1985-07-18
19850919,1985-09-19
19851128,1985-11-28
19860218,1986-02-18
19861105,1986-11-05
19870121,1987-01-21
19870302,1987-03-02
19880929,1988-09-29
18991221,1899-12-21
19020507,1902-05-07
19021112,1902-11-12
19030316,1903-03-16
19030921,1903-09-21
19020820,1902-08-20
19040315,1904-03-15
19050821,1905-08-21
19620127,1962-01-27
18951218,1895-12-18
18950924,1895-09-24
18970331,1897-03-31
19690130,1969-01-30
18971110,1897-11-10
18971027,1897-10-27
18980218,1898-02-18
18980429,1898-04-29
18990624,1899-06-24
19000210,1900-02-10
19600226,1960-02-26
19640227,1964-02-27
19011009,1901-10-09
19600310,1960-03-10
19620309,1962-03-09
19610310,1961-03-10
19040217,1904-02-17
19040615,1904-06-15
19040913,1904-09-13
19710305,1971-03-05
19620326,1962-03-26
19720310,1972-03-10
19060228,1906-02-28
19060723,1906-07-23
19071207,1907-12-07
19700324,1970-03-24
19090220,1909-02-20
19710329,1971-03-29
19670403,1967-04-03
19100617,1910-06-17
19100723,1910-07-23
19680410,1968-04-10
19600516,1960-05-16
19620517,1962-05-17
19120619,1912-06-19
19710429,1971-04-29
19720428,1972-04-28
19140108,1914-01-08
19660509,1966-05-09
19720508,1972-05-08
19670517,1967-05-17
19140731,1914-07-31
196
Query:
SELECT SUBSTRING("filing_date"::VARCHAR, 1, 6) AS "filing_month", COUNT(*) AS "filing_count"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "filing_date" BETWEEN 20080101 AND 20081231
GROUP BY "filing_month"
LIMIT 1000;
Answer:
filing_month,filing_count
200812,1036
200802,692
200804,791
200801,614
200808,729
200803,867
200809,792
200811,819
200806,798
200810,814
200807,816
200805,676
Query:
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE
    "country_code" = 'US' AND
    TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31' AND
    "title_localized":text::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
Answer:
Year,Month,Number_of_Filings
2007,12,0
2008,1,0
2008,2,0
2008,3,0
2008,4,0
2008,5,0
2008,6,0
2008,7,0
2008,8,0
2008,9,0
2008,10,0
2008,11,0
2008,12,0
2009,1,0
2009,2,0
2009,3,0
2009,4,0
2009,5,0
2009,6,0
2009,7,0
2009,8,0
2009,9,0
2009,10,0
2009,11,0
2009,12,0
2010,1,0
2010,2,0
2010,3,0
2010,4,0
2010,5,0
2010,6,0
2010,7,0
2010,8,0
2010,9,0
2010,10,0
2010,11,0
2010,12,0
2011,1,0
2011,2,0
2011,3,0
2011,4,0
2011,5,0
2011,6,0
2011,7,0
2011,8,0
2011,9,0
2011,10,0
2011,11,0
2011,12,0
2012,1,0
2012,2,0
2012,3,0
2012,4,0
2012,5,0
2012,6,0
2012,7,0
2012,8,0
2012,9,0
2012,10,0
2012,11,0
2012,12,0
2013,1,0
2013,2,0
2013,3,0
2013,4,0
2013,5,0
2013,6,0
2013,7,0
2013,8,0
2013,9,0
2013,10,0
2013,11,0
2013,12,0
2014,1,0
2014,2,0
2014,3,0
2014,4,0
2014,5,0
2014,6,0
2014,7,0
2014,8,0
2014,9,0
2014,10,0
2014,11,0
2014,12,0
2015,1,0
2015,2,0
2015,3,0
2015,4,0
2015,5,0
2015,6,0
2015,7,0
2015,8,0
2015,9,0
2015,10,0
2015,11,0
2015,12,0
2016,1,0
2016,2,0
2016,3,0
2016,4,0
2016,5,0
2016,6,0
2016,7,0
2016,8,0
2016,9,0
2016,10,0
2016,11,0
2016,12,0
2017,1,0
2017,2,0
2017,3,0
2017,4,0
2017,5,0
2017,6,0
2017,7,0
2017,8,0
2017,9,0
2017,10,0
2017,11,0
2017,12,0
2018,1,0
2018,2,0
2018,3,0
2018,4,0
2018,5,0
2018,6,0
2018,7,0
Query:
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE
    "country_code" = 'US' AND
    TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31' AND
    "description_localized":text::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTH(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", "Month";
Answer:
Year,Month,Number_of_Filings
2007,12,0
2008,1,0
2008,2,0
2008,3,0
2008,4,0
2008,5,0
2008,6,0
2008,7,0
2008,8,0
2008,9,0
2008,10,0
2008,11,0
2008,12,0
2009,1,0
2009,2,0
2009,3,0
2009,4,0
2009,5,0
2009,6,0
2009,7,0
2009,8,0
2009,9,0
2009,10,0
2009,11,0
2009,12,0
2010,1,0
2010,2,0
2010,3,0
2010,4,0
2010,5,0
2010,6,0
2010,7,0
2010,8,0
2010,9,0
2010,10,0
2010,11,0
2010,12,0
2011,1,0
2011,2,0
2011,3,0
2011,4,0
2011,5,0
2011,6,0
2011,7,0
2011,8,0
2011,9,0
2011,10,0
2011,11,0
2011,12,0
2012,1,0
2012,2,0
2012,3,0
2012,4,0
2012,5,0
2012,6,0
2012,7,0
2012,8,0
2012,9,0
2012,10,0
2012,11,0
2012,12,0
2013,1,0
2013,2,0
2013,3,0
2013,4,0
2013,5,0
2013,6,0
2013,7,0
2013,8,0
2013,9,0
2013,10,0
2013,11,0
2013,12,0
2014,1,0
2014,2,0
2014,3,0
2014,4,0
2014,5,0
2014,6,0
2014,7,0
2014,8,0
2014,9,0
2014,10,0
2014,11,0
2014,12,0
2015,1,0
2015,2,0
2015,3,0
2015,4,0
2015,5,0
2015,6,0
2015,7,0
2015,8,0
2015,9,0
2015,10,0
2015,11,0
2015,12,0
2016,1,0
2016,2,0
2016,3,0
2016,4,0
2016,5,0
2016,6,0
2016,7,0
2016,8,0
2016,9,0
2016,10,0
2016,11,0
2016,12,0
2017,1,0
2017,2,0
2017,3,0
2017,4,0
2017,5,0
2017,6,0
2017,7,0
2017,8,0
2017,9,0
2017,10,0
2017,11,0
2017,12,0
2018,1,0
2018,2,0
2018,3,0
2018,4,0
2018,5,0
2018,6,0
2018,7,0
Query:
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(DISTINCT "application_number") AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
  AND "abstract_localized"::STRING ILIKE '%internet%'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
Answer:
Year,Month,Number_of_Filings
2008,1,2
2008,2,6
2008,3,3
2008,4,3
2008,5,3
2008,6,3
2008,7,7
2008,8,2
2008,9,4
2008,10,5
2008,11,5
2008,12,2
2009,1,2
2009,2,1
2009,3,7
2009,4,3
2009,5,1
2009,6,7
2009,7,1
2009,8,4
2009,9,4
2009,10,5
2009,11,3
2009,12,2
2010,1,3
2010,4,3
2010,5,2
2010,6,1
2010,7,1
2010,8,1
2010,9,3
2010,10,2
2010,11,6
2010,12,4
2011,1,4
2011,2,3
2011,3,4
2011,4,5
2011,5,2
2011,6,4
2011,7,3
2011,8,7
2011,9,6
2011,10,6
2011,11,3
2011,12,6
2012,1,2
2012,2,5
2012,3,8
2012,4,5
2012,5,5
2012,6,3
2012,7,3
2012,8,4
2012,9,2
2012,10,3
2012,11,7
2012,12,8
2013,1,2
2013,2,2
2013,3,1
2013,4,5
2013,6,1
2013,7,5
2013,8,7
2013,9,5
2013,10,4
2013,11,3
2013,12,7
2014,1,3
2014,2,4
2014,3,4
2014,4,6
2014,5,2
2014,6,4
2014,7,3
2014,8,7
2014,9,4
2014,10,10
2014,11,1
2014,12,10
2015,2,5
2015,3,4
2015,4,5
2015,5,5
2015,6,7
2015,7,9
2015,8,4
2015,9,8
2015,10,4
2015,11,7
2015,12,12
2016,1,7
2016,2,4
2016,3,9
2016,4,12
2016,5,13
2016,6,11
2016,7,11
2016,8,14
2016,9,3
2016,10,7
2016,11,13
2016,12,12
2017,1,4
2017,2,6
2017,3,9
2017,4,14
2017,5,9
2017,6,20
2017,7,13
2017,8,8
2017,9,13
2017,10,15
2017,11,14
2017,12,16
2018,1,11
2018,2,8
2018,3,11
2018,4,13
2018,5,17
2018,6,14
2018,7,11
2018,8,8
2018,9,12
2018,10,10
2018,11,13
2018,12,12
2019,1,8
2019,2,6
2019,3,6
2019,4,4
2019,5,2
2019,6,3
2019,7,6
2019,8,11
2019,9,7
2019,10,5
2019,11,8
2019,12,12
2020,1,4
2020,2,4
2020,3,5
2020,4,12
2020,5,3
2020,6,14
2020,7,5
2020,8,11
2020,9,11
2020,10,7
2020,11,10
2020,12,8
2021,1,13
2021,2,2
2021,3,8
2021,4,5
2021,5,18
2021,6,10
2021,7,11
2021,8,13
2021,9,12
2021,10,15
2021,11,8
2021,12,24
2022,1,5
2022,2,8
2022,3,10
2022,4,9
2022,5,8
2022,6,6
2022,7,3
2022,8,5
2022,9,5
2022,10,7
2022,11,4
2022,12,13
Query:
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(*) AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  "country_code" = 'US'
  AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
Answer:
Year,Month,Number_of_Filings
2008,1,111
2008,2,130
2008,3,137
2008,4,125
2008,5,116
2008,6,121
2008,7,129
2008,8,118
2008,9,122
2008,10,134
2008,11,105
2008,12,135
2009,1,99
2009,2,96
2009,3,130
2009,4,116
2009,5,88
2009,6,96
2009,7,97
2009,8,100
2009,9,107
2009,10,91
2009,11,69
2009,12,109
2010,1,74
2010,2,70
2010,3,101
2010,4,70
2010,5,85
2010,6,82
2010,7,70
2010,8,70
2010,9,72
2010,10,78
2010,11,64
2010,12,67
2011,1,60
2011,2,65
2011,3,72
2011,4,57
2011,5,65
2011,6,74
2011,7,57
2011,8,56
2011,9,83
2011,10,48
2011,11,54
2011,12,68
2012,1,51
2012,2,42
2012,3,48
2012,4,50
2012,5,49
2012,6,50
2012,7,53
2012,8,45
2012,9,58
2012,10,47
2012,11,57
2012,12,65
2013,1,42
2013,2,50
2013,3,82
2013,4,58
2013,5,47
2013,6,56
2013,7,65
2013,8,52
2013,9,65
2013,10,54
2013,11,75
2013,12,90
2014,1,84
2014,2,71
2014,3,105
2014,4,66
2014,5,88
2014,6,95
2014,7,78
2014,8,73
2014,9,112
2014,10,107
2014,11,83
2014,12,119
2015,1,110
2015,2,102
2015,3,149
2015,4,101
2015,5,105
2015,6,109
2015,7,110
2015,8,114
2015,9,126
2015,10,123
2015,11,101
2015,12,143
2016,1,103
2016,2,135
2016,3,151
2016,4,142
2016,5,141
2016,6,206
2016,7,134
2016,8,150
2016,9,190
2016,10,164
2016,11,162
2016,12,174
2017,1,171
2017,2,158
2017,3,219
2017,4,173
2017,5,195
2017,6,209
2017,7,198
2017,8,183
2017,9,168
2017,10,197
2017,11,207
2017,12,244
2018,1,215
2018,2,209
2018,3,265
2018,4,244
2018,5,255
2018,6,243
2018,7,238
2018,8,274
2018,9,248
2018,10,252
2018,11,262
2018,12,278
2019,1,259
2019,2,257
2019,3,308
2019,4,310
2019,5,328
2019,6,298
2019,7,308
2019,8,298
2019,9,304
2019,10,293
2019,11,269
2019,12,300
2020,1,247
2020,2,273
2020,3,326
2020,4,265
2020,5,213
2020,6,271
2020,7,248
2020,8,210
2020,9,274
2020,10,228
2020,11,244
2020,12,262
2021,1,199
2021,2,185
2021,3,274
2021,4,203
2021,5,202
2021,6,224
2021,7,214
2021,8,206
2021,9,207
2021,10,166
2021,11,189
2021,12,200
2022,1,152
2022,2,139
2022,3,147
2022,4,113
2022,5,136
2022,6,130
2022,7,93
2022,8,112
2022,9,108
2022,10,138
2022,11,129
2022,12,157
Query:
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(*) AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  "country_code" = 'US' AND
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
Answer:
Year,Month,Number_of_Filings
2008,1,111
2008,2,130
2008,3,137
2008,4,125
2008,5,116
2008,6,121
2008,7,129
2008,8,118
2008,9,122
2008,10,134
2008,11,105
2008,12,135
2009,1,99
2009,2,96
2009,3,130
2009,4,116
2009,5,88
2009,6,96
2009,7,97
2009,8,100
2009,9,107
2009,10,91
2009,11,69
2009,12,109
2010,1,74
2010,2,70
2010,3,101
2010,4,70
2010,5,85
2010,6,82
2010,7,70
2010,8,70
2010,9,72
2010,10,78
2010,11,64
2010,12,67
2011,1,60
2011,2,65
2011,3,72
2011,4,57
2011,5,65
2011,6,74
2011,7,57
2011,8,56
2011,9,83
2011,10,48
2011,11,54
2011,12,68
2012,1,51
2012,2,42
2012,3,48
2012,4,50
2012,5,49
2012,6,50
2012,7,53
2012,8,45
2012,9,58
2012,10,47
2012,11,57
2012,12,65
2013,1,42
2013,2,50
2013,3,82
2013,4,58
2013,5,47
2013,6,56
2013,7,65
2013,8,52
2013,9,65
2013,10,54
2013,11,75
2013,12,90
2014,1,84
2014,2,71
2014,3,105
2014,4,66
2014,5,88
2014,6,95
2014,7,78
2014,8,73
2014,9,112
2014,10,107
2014,11,83
2014,12,119
2015,1,110
2015,2,102
2015,3,149
2015,4,101
2015,5,105
2015,6,109
2015,7,110
2015,8,114
2015,9,126
2015,10,123
2015,11,101
2015,12,143
2016,1,103
2016,2,135
2016,3,151
2016,4,142
2016,5,141
2016,6,206
2016,7,134
2016,8,150
2016,9,190
2016,10,164
2016,11,162
2016,12,174
2017,1,171
2017,2,158
2017,3,219
2017,4,173
2017,5,195
2017,6,209
2017,7,198
2017,8,183
2017,9,168
2017,10,197
2017,11,207
2017,12,244
2018,1,215
2018,2,209
2018,3,265
2018,4,244
2018,5,255
2018,6,243
2018,7,238
2018,8,274
2018,9,248
2018,10,252
2018,11,262
2018,12,278
2019,1,259
2019,2,257
2019,3,308
2019,4,310
2019,5,328
2019,6,298
2019,7,308
2019,8,298
2019,9,304
2019,10,293
2019,11,269
2019,12,300
2020,1,247
2020,2,273
2020,3,326
2020,4,265
2020,5,213
2020,6,271
2020,7,248
2020,8,210
2020,9,274
2020,10,228
2020,11,244
2020,12,262
2021,1,199
2021,2,185
2021,3,274
2021,4,203
2021,5,202
2021,6,224
2021,7,214
2021,8,206
2021,9,207
2021,10,166
2021,11,189
2021,12,200
2022,1,152
2022,2,139
2022,3,147
2022,4,113
2022,5,136
2022,6,130
2022,7,93
2022,8,112
2022,9,108
2022,10,138
2022,11,129
2022,12,157
Query:
SELECT
  YEAR(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Year",
  MONTH(TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Month",
  COUNT(DISTINCT "application_number") AS "Number_of_Filings"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  "country_code" = 'US' AND
  TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') IS NOT NULL AND
  ("abstract_localized"::STRING ILIKE '%internet%' OR "title_localized"::STRING ILIKE '%internet%' OR "description_localized"::STRING ILIKE '%internet%')
GROUP BY "Year", "Month"
ORDER BY "Year", "Month";
Answer:
Year,Month,Number_of_Filings
1967,12,1
1994,4,1
1995,5,1
1995,6,1
1996,6,1
1996,7,1
1996,10,2
1996,12,1
1997,1,1
1997,3,1
1997,5,3
1997,6,1
1997,8,2
1997,9,1
1997,12,1
1998,1,1
1998,3,1
1998,4,1
1998,5,1
1998,6,3
1998,8,1
1998,9,2
1998,10,4
1998,11,5
1998,12,4
1999,1,3
1999,2,2
1999,4,2
1999,5,2
1999,6,1
1999,7,2
1999,8,2
1999,9,1
1999,10,5
1999,11,1
1999,12,2
2000,1,3
2000,2,1
2000,3,3
2000,4,1
2000,5,2
2000,6,2
2000,7,1
2000,8,4
2000,9,1
2000,10,2
2000,11,2
2000,12,11
2001,1,6
2001,2,10
2001,3,8
2001,4,9
2001,5,17
2001,6,7
2001,7,9
2001,8,8
2001,9,7
2001,10,13
2001,11,4
2001,12,4
2002,1,5
2002,2,8
2002,3,10
2002,4,9
2002,5,12
2002,6,7
2002,7,6
2002,8,6
2002,9,17
2002,10,5
2002,11,7
2002,12,11
2003,1,10
2003,2,6
2003,3,14
2003,4,7
2003,5,2
2003,6,13
2003,7,7
2003,8,11
2003,9,17
2003,10,13
2003,11,16
2003,12,18
2004,1,20
2004,2,11
2004,3,21
2004,4,10
2004,5,28
2004,6,19
2004,7,16
2004,8,20
2004,9,19
2004,10,13
2004,11,22
2004,12,26
2005,1,19
2005,2,22
2005,3,28
2005,4,27
2005,5,17
2005,6,25
2005,7,22
2005,8,18
2005,9,29
2005,10,11
2005,11,18
2005,12,22
2006,1,15
2006,2,27
2006,3,23
2006,4,24
2006,5,25
2006,6,22
2006,7,23
2006,8,23
2006,9,29
2006,10,19
2006,11,22
2006,12,39
2007,1,25
2007,2,21
2007,3,25
2007,4,18
2007,5,31
2007,6,21
2007,7,11
2007,8,22
2007,9,22
2007,10,42
2007,11,17
2007,12,20
2008,1,26
2008,2,27
2008,3,32
2008,4,24
2008,5,28
2008,6,23
2008,7,22
2008,8,21
2008,9,19
2008,10,23
2008,11,25
2008,12,20
2009,1,17
2009,2,11
2009,3,34
2009,4,21
2009,5,16
2009,6,19
2009,7,14
2009,8,18
2009,9,15
2009,10,21
2009,11,12
2009,12,17
2010,1,13
2010,2,9
2010,3,13
2010,4,14
2010,5,15
2010,6,20
2010,7,6
2010,8,12
2010,9,16
2010,10,19
2010,11,5
2010,12,17
2011,1,7
2011,2,9
2011,3,12
2011,4,9
2011,5,12
2011,6,16
2011,7,15
2011,8,8
2011,9,15
2011,10,9
2011,11,10
2011,12,16
2012,1,5
2012,2,13
2012,3,10
2012,4,10
2012,5,13
2012,6,10
2012,7,21
2012,8,9
2012,9,11
2012,10,13
2012,11,14
2012,12,10
2013,1,18
2013,2,11
2013,3,18
2013,4,6
2013,5,12
2013,6,12
2013,7,14
2013,8,7
2013,9,19
2013,10,7
2013,11,17
2013,12,17
2014,1,18
2014,2,13
2014,3,21
2014,4,12
2014,5,19
2014,6,31
2014,7,18
2014,8,18
2014,9,21
2014,10,18
2014,11,15
2014,12,28
2015,1,19
2015,2,21
2015,3,25
2015,4,19
2015,5,21
2015,6,33
2015,7,28
2015,8,30
2015,9,29
2015,10,27
2015,11,20
2015,12,35
2016,1,22
2016,2,30
2016,3,36
2016,4,30
2016,5,32
2016,6,56
2016,7,28
2016,8,42
2016,9,47
2016,10,34
2016,11,38
2016,12,41
2017,1,40
2017,2,37
2017,3,53
2017,4,51
2017,5,36
2017,6,51
2017,7,33
2017,8,42
2017,9,39
2017,10,51
2017,11,49
2017,12,66
2018,1,45
2018,2,60
2018,3,83
2018,4,61
2018,5,79
2018,6,68
2018,7,51
2018,8,55
2018,9,61
2018,10,66
2018,11,55
2018,12,74
2019,1,77
2019,2,62
2019,3,78
2019,4,84
2019,5,84
2019,6,85
2019,7,85
2019,8,80
2019,9,101
2019,10,77
2019,11,70
2019,12,72
2020,1,93
2020,2,66
2020,3,91
2020,4,68
2020,5,69
2020,6,82
2020,7,73
2020,8,78
2020,9,81
2020,10,65
2020,11,62
2020,12,79
2021,1,61
2021,2,53
2021,3,75
2021,4,62
2021,5,61
2021,6,75
2021,7,61
2021,8,57
2021,9,65
2021,10,49
2021,11,45
2021,12,48
2022,1,49
2022,2,34
2022,3,42
2022,4,29
2022,5,38
2022,6,37
2022,7,30
2022,8,35
2022,9,38
2022,10,45
2022,11,51
2022,12,43
2023,1,41
2023,2,35
2023,3,31
2023,4,21
2023,5,43
2023,6,24
2023,7,16
2023,8,38
2023,9,31
2023,10,32
2023,11,15
2023,12,36
2024,1,25
2024,2,21
2024,3,13
2024,4,12
2024,5,3
Query:
SELECT DISTINCT "application_kind"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE "country_code" = 'US'
LIMIT 1000;
Answer:
application_kind
D
A
V
Query:
SELECT
  SUBSTRING("filing_date"::VARCHAR, 1, 6) AS "filing_month",
  COUNT(*) AS "filing_count"
FROM PATENTS.PATENTS.PUBLICATIONS
WHERE
  "country_code" = 'US' AND
  "filing_date" BETWEEN '20080101' AND '20221231' AND
  "abstract_localized"::STRING ILIKE '%internet%'
GROUP BY "filing_month"
ORDER BY "filing_month"
LIMIT 1000;
Answer:
filing_month,filing_count
200801,1
200802,2
200803,3
200805,1
200806,1
200807,2
200811,1
200906,2
201001,1
201005,1
201010,1
201012,1
201103,1
201106,1
201107,1
201109,1
201112,2
201202,2
201205,1
201302,1
201310,1
201312,1
201404,1
201408,1
201410,1
201502,1
201503,2
201504,1
201507,1
201512,2
201603,1
201604,2
201605,4
201606,3
201607,1
201609,1
201610,1
201611,1
201612,1
201702,2
201703,2
201704,3
201708,2
201710,1
201711,1
201712,1
201801,1
201802,1
201803,2
201804,2
201805,1
201806,2
201807,1
201808,2
201809,1
201810,2
201811,2
201812,1
201902,1
201906,1
201908,2
201909,2
201910,2
201911,2
202001,2
202002,1
202004,5
202006,4
202007,2
202009,1
202011,2
202012,1
202101,2
202102,1
202107,1
202109,1
202111,1
202203,2
202208,1
202209,1
202212,3
Query:
SELECT "title_keys" FROM (
  SELECT
    OBJECT_KEYS("title_localized") AS "title_keys"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE IS_OBJECT("title_localized")

  UNION ALL

  SELECT
    OBJECT_KEYS(f.value) AS "title_keys"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(input => "title_localized") f
  WHERE IS_ARRAY("title_localized")
)
LIMIT 1000;
Answer:
Too long, hard cut:
title_keys
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""truncated""
]"
"[
  ""language"",
  ""text"",
  ""trun
End Exploring Related Columns
Task: How many U.S. publications related to IoT (where the abstract includes the phrase 'internet of things') were filed each month from 2008 to 2022, including months with no filings?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: SELECT S."Column_Name" FROM {Database Name}.{Schema Name}.{Table_name} (ensure all column names are enclosed in double quotations)
Follow the answer format like: The following table represents the number of U.S. publications related to IoT (where the abstract includes the phrase "internet of things") filed each month from 2008 to 2022, including months with no filings:

```csv
Year,Month,Number_of_Filings
2008,January,num:int
2008,February,num:int
...
2022,December,num:int
```

*Note:* The table includes all months from January 2008 to December 2022. The `Number_of_Filings` column indicates the count of filings for each month, including zeros where applicable..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'PATENTS': {'PATENTS': ['CPC_DEFINITION', 'DISCLOSURES_13', 'PUBLICATIONS']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book" SQL: WHERE "title" LIKE '%book%'
However, if the string is not decided, you may use ILIKE and %. e.g. Get articles that mention "education": SQL: "body" ILIKE '%education%' OR "title" ILIKE '%education%'
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Keep all decimals to four decimal places.

2025-01-18 05:58:05 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:58:05 - root - INFO - The following table represents the number of U.S. publications related to IoT (where the abstract includes the phrase "internet of things") filed each month from 2008 to 2022, including months with no filings:

```sql
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  -- Handle records where 'abstract_localized' is an object
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_OBJECT("abstract_localized")
    AND "abstract_localized":"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"

  UNION ALL

  -- Handle records where 'abstract_localized' is an array
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_ARRAY("abstract_localized")
    AND f.value:"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
),
monthly_filings AS (
  SELECT
    "Filing_Month",
    SUM("Number_of_Filings") AS "Number_of_Filings"
  FROM filings
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTHNAME(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."Filing_Month"
ORDER BY m."Year", MONTH(m."month_start");
```
2025-01-18 05:58:05 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:58:05 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:58:05 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:58:06 - snowflake.connector.connection - INFO - closed
2025-01-18 05:58:07 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:58:07 - root - INFO - itercount: 1
2025-01-18 05:58:07 - root - INFO - 000904 (42000): 01b9c9a6-0004-7985-0001-11c300ee12ca: SQL compilation error: error line 46 at position 9
invalid identifier 'M."Year"'
2025-01-18 05:58:07 - root - INFO - Input sql:
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  -- Handle records where 'abstract_localized' is an object
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_OBJECT("abstract_localized")
    AND "abstract_localized":"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"

  UNION ALL

  -- Handle records where 'abstract_localized' is an array
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_ARRAY("abstract_localized")
    AND f.value:"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
),
monthly_filings AS (
  SELECT
    "Filing_Month",
    SUM("Number_of_Filings") AS "Number_of_Filings"
  FROM filings
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTHNAME(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."Filing_Month"
ORDER BY m."Year", MONTH(m."month_start");
The error information is:
000904 (42000): 01b9c9a6-0004-7985-0001-11c300ee12ca: SQL compilation error: error line 46 at position 9
invalid identifier 'M."Year"'
Please correct it and output only 1 complete SQL query.
2025-01-18 05:58:33 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:58:33 - root - INFO - ```sql
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  -- Handle records where 'abstract_localized' is an object
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_OBJECT("abstract_localized")
    AND "abstract_localized":"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"

  UNION ALL

  -- Handle records where 'abstract_localized' is an array
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_ARRAY("abstract_localized")
    AND f.value:"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
),
monthly_filings AS (
  SELECT
    "Filing_Month",
    SUM("Number_of_Filings") AS "Number_of_Filings"
  FROM filings
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTHNAME(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", MONTH(m."month_start");
```
2025-01-18 05:58:33 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:58:33 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:58:33 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:58:35 - snowflake.connector.cursor - INFO - Number of results in first chunk: 128
2025-01-18 05:58:35 - snowflake.connector.connection - INFO - closed
2025-01-18 05:58:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:58:35 - root - INFO - itercount: 2
2025-01-18 05:58:35 - root - INFO - 0
2025-01-18 05:58:35 - root - INFO - results: 
Year,Month,Number_of_Filings
2007,Dec,0
2008,Jan,0
2008,Feb,0
2008,Mar,0
2008,Apr,0
2008,May,0
2008,Jun,0
2008,Jul,0
2008,Aug,0
2008,Sep,0
2008,Oct,0
2008,Nov,0
2008,Dec,0
2009,Jan,0
2009,Feb,0
2009,Mar,0
2009,Apr,0
2009,May,0
2009,Jun,0
2009,Jul,0
2009,Aug,0
2009,Sep,0
2009,Oct,0
2009,Nov,0
2009,Dec,0
2010,Jan,0
2010,Feb,0
2010,Mar,0
2010,Apr,0
2010,May,0
2010,Jun,0
2010,Jul,0
2010,Aug,0
2010,Sep,0
2010,Oct,0
2010,Nov,0
2010,Dec,0
2011,Jan,0
2011,Feb,0
2011,Mar,0
2011,Apr,0
2011,May,0
2011,Jun,0
2011,Jul,0
2011,Aug,0
2011,Sep,0
2011,Oct,0
2011,Nov,0
2011,Dec,0
2012,Jan,0
2012,Feb,0
2012,Mar,0
2012,Apr,0
2012,May,0
2012,Jun,0
2012,Jul,0
2012,Aug,0
2012,Sep,0
2012,Oct,0
2012,Nov,0
2012,Dec,0
2013,Jan,0
2013,Feb,0
2013,Mar,0
2013,Apr,0
2013,May,0
2013,Jun,0
2013,Jul,0
2013,Aug,0
2013,Sep,0
2013,Oct,0
2013,Nov,0
2013,Dec,0
2014,Jan,0
2014,Feb,0
2014,Mar,0
2014,Apr,0
2014,May,0
2014,Jun,0
2014,Jul,0
2014,Aug,0
2014,Sep,0
2014,Oct,0
2014,Nov,0
2014,Dec,0
2015,Jan,0
2015,Feb,0
2015,Mar,0
2015,Apr,1
2015,May,0
2015,Jun,0
2015,Jul,0
2015,Aug,0
2015,Sep,0
2015,Oct,0
2015,Nov,0
2015,Dec,1
2016,Jan,0
2016,Feb,0
2016,Mar,0
2016,Apr,0
2016,May,0
2016,Jun,0
2016,Jul,0
2016,Aug,0
2016,Sep,0
2016,Oct,0
2016,Nov,0
2016,Dec,0
2017,Jan,0
2017,Feb,0
2017,Mar,1
2017,Apr,2
2017,May,0
2017,Jun,0
2017,Jul,0
2017,Aug,0
2017,Sep,0
2017,Oct,0
2017,Nov,0
2017,Dec,0
2018,Jan,0
2018,Feb,1
2018,Mar,1
2018,Apr,1
2018,May,0
2018,Jun,0
2018,Jul,0


2025-01-18 05:58:35 - root - INFO - Please check the answer again by reviewing How many U.S. publications related to IoT (where the abstract includes the phrase 'internet of things') were filed each month from 2008 to 2022, including months with no filings?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: The following table represents the number of U.S. publications related to IoT (where the abstract includes the phrase "internet of things") filed each month from 2008 to 2022, including months with no filings:

```csv
Year,Month,Number_of_Filings
2008,January,num:int
2008,February,num:int
...
2022,December,num:int
```

*Note:* The table includes all months from January 2008 to December 2022. The `Number_of_Filings` column indicates the count of filings for each month, including zeros where applicable. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Year,Month,Number_of_Filings
2007,Dec,0
2008,Jan,0
2008,Feb,0
2008,Mar,0
2008,Apr,0
2008,May,0
2008,Jun,0
2008,Jul,0
2008,Aug,0
2008,Sep,0
2008,Oct,0
2008,Nov,0
2008,Dec,0
2009,Jan,0
2009,Feb,0
2009,Mar,0
2009,Apr,0
2009,May,0
2009,Jun,0
2009,Jul,0
2009,Aug,0
2009,Sep,0
2009,Oct,0
2009,Nov,0
2009,Dec,0
2010,Jan,0
2010,Feb,0
2010,Mar,0
2010,Apr,0
2010,May,0
2010,Jun,0
2010,Jul,0
2010,Aug,0
2010,Sep,0
2010,Oct,0
2010,Nov,0
2010,Dec,0
2011,Jan,0
2011,Feb,0
2011,Mar,0
2011,Apr,0
2011,May,0
2011,Jun,0
2011,Jul,0
2011,Aug,0
2011,Sep,0
2011,Oct,0
2011,Nov,0
2011,Dec,0
2012,Jan,0
2012,Feb,0
2012,Mar,0
2012,Apr,0
2012,May,0
2012,Jun,0
2012,Jul,0
2012,Aug,0
2012,Sep,0
2012,Oct,0
2012,Nov,0
2012,Dec,0
2013,Jan,0
2013,Feb,0
2013,Mar,0
2013,Apr,0
2013,May,0
2013,Jun,0
2013,Jul,0
2013,Aug,0
2013,Sep,0
2013,Oct,0
2013,Nov,0
2013,Dec,0
2014,Jan,0
2014,Feb,0
2014,Mar,0
2014,Apr,0
2014,May,0
2014,Jun,0
2014,Jul,0
2014,Aug,0
2014,Sep,0
2014,Oct,0
2014,Nov,0
2014,Dec,0
2015,Jan,0
2015,Feb,0
2015,Mar,0
2015,Apr,1
2015,May,0
2015,Jun,0
2015,Jul,0
2015,Aug,0
2015,Sep,0
2015,Oct,0
2015,Nov,0
2015,Dec,1
2016,Jan,0
2016,Feb,0
2016,Mar,0
2016,Apr,0
2016,May,0
2016,Jun,0
2016,Jul,0
2016,Aug,0
2016,Sep,0
2016,Oct,0
2016,Nov,0
2016,Dec,0
2017,Jan,0
2017,Feb,0
2017,Mar,1
2017,Apr,2
2017,May,0
2017,Jun,0
2017,Jul,0
2017,Aug,0
2017,Sep,0
2017,Oct,0
2017,Nov,0
2017,Dec,0
2018,Jan,0
2018,Feb,1
2018,Mar,1
2018,Apr,1
2018,May,0
2018,Jun,0
2018,Jul,0
Current sql:
WITH months AS (
  SELECT
    DATEADD(month, seq4() - 1, '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4() - 1, '2008-01-01') <= '2022-12-31'
),
filings AS (
  -- Handle records where 'abstract_localized' is an object
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_OBJECT("abstract_localized")
    AND "abstract_localized":"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"

  UNION ALL

  -- Handle records where 'abstract_localized' is an array
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_ARRAY("abstract_localized")
    AND f.value:"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
),
monthly_filings AS (
  SELECT
    "Filing_Month",
    SUM("Number_of_Filings") AS "Number_of_Filings"
  FROM filings
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTHNAME(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."Filing_Month"
ORDER BY "Year", MONTH(m."month_start");
2025-01-18 05:59:28 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 05:59:28 - root - INFO - ```sql
WITH months AS (
  SELECT
    DATEADD(month, seq4(), '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4(), '2008-01-01') <= '2022-12-01'
),
filings AS (
  -- Handle records where 'abstract_localized' is an object
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_OBJECT("abstract_localized")
    AND "abstract_localized":"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"

  UNION ALL

  -- Handle records where 'abstract_localized' is an array
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_ARRAY("abstract_localized")
    AND f.value:"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
),
monthly_filings AS (
  SELECT
    "Filing_Month",
    SUM("Number_of_Filings") AS "Number_of_Filings"
  FROM filings
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTHNAME(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."Filing_Month"
ORDER BY m."month_start";
```
2025-01-18 05:59:28 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 05:59:28 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 05:59:28 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 05:59:30 - snowflake.connector.cursor - INFO - Number of results in first chunk: 128
2025-01-18 05:59:30 - snowflake.connector.connection - INFO - closed
2025-01-18 05:59:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 05:59:30 - root - INFO - itercount: 3
2025-01-18 05:59:30 - root - INFO - 0
2025-01-18 05:59:30 - root - INFO - results: 
Year,Month,Number_of_Filings
2008,Jan,0
2008,Feb,0
2008,Mar,0
2008,Apr,0
2008,May,0
2008,Jun,0
2008,Jul,0
2008,Aug,0
2008,Sep,0
2008,Oct,0
2008,Nov,0
2008,Dec,0
2009,Jan,0
2009,Feb,0
2009,Mar,0
2009,Apr,0
2009,May,0
2009,Jun,0
2009,Jul,0
2009,Aug,0
2009,Sep,0
2009,Oct,0
2009,Nov,0
2009,Dec,0
2010,Jan,0
2010,Feb,0
2010,Mar,0
2010,Apr,0
2010,May,0
2010,Jun,0
2010,Jul,0
2010,Aug,0
2010,Sep,0
2010,Oct,0
2010,Nov,0
2010,Dec,0
2011,Jan,0
2011,Feb,0
2011,Mar,0
2011,Apr,0
2011,May,0
2011,Jun,0
2011,Jul,0
2011,Aug,0
2011,Sep,0
2011,Oct,0
2011,Nov,0
2011,Dec,0
2012,Jan,0
2012,Feb,0
2012,Mar,0
2012,Apr,0
2012,May,0
2012,Jun,0
2012,Jul,0
2012,Aug,0
2012,Sep,0
2012,Oct,0
2012,Nov,0
2012,Dec,0
2013,Jan,0
2013,Feb,0
2013,Mar,0
2013,Apr,0
2013,May,0
2013,Jun,0
2013,Jul,0
2013,Aug,0
2013,Sep,0
2013,Oct,0
2013,Nov,0
2013,Dec,0
2014,Jan,0
2014,Feb,0
2014,Mar,0
2014,Apr,0
2014,May,0
2014,Jun,0
2014,Jul,0
2014,Aug,0
2014,Sep,0
2014,Oct,0
2014,Nov,0
2014,Dec,0
2015,Jan,0
2015,Feb,0
2015,Mar,0
2015,Apr,1
2015,May,0
2015,Jun,0
2015,Jul,0
2015,Aug,0
2015,Sep,0
2015,Oct,0
2015,Nov,0
2015,Dec,1
2016,Jan,0
2016,Feb,0
2016,Mar,0
2016,Apr,0
2016,May,0
2016,Jun,0
2016,Jul,0
2016,Aug,0
2016,Sep,0
2016,Oct,0
2016,Nov,0
2016,Dec,0
2017,Jan,0
2017,Feb,0
2017,Mar,1
2017,Apr,2
2017,May,0
2017,Jun,0
2017,Jul,0
2017,Aug,0
2017,Sep,0
2017,Oct,0
2017,Nov,0
2017,Dec,0
2018,Jan,0
2018,Feb,1
2018,Mar,1
2018,Apr,1
2018,May,0
2018,Jun,0
2018,Jul,0
2018,Aug,0


2025-01-18 05:59:30 - root - INFO - Please check the answer again by reviewing How many U.S. publications related to IoT (where the abstract includes the phrase 'internet of things') were filed each month from 2008 to 2022, including months with no filings?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: The following table represents the number of U.S. publications related to IoT (where the abstract includes the phrase "internet of things") filed each month from 2008 to 2022, including months with no filings:

```csv
Year,Month,Number_of_Filings
2008,January,num:int
2008,February,num:int
...
2022,December,num:int
```

*Note:* The table includes all months from January 2008 to December 2022. The `Number_of_Filings` column indicates the count of filings for each month, including zeros where applicable. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
Year,Month,Number_of_Filings
2008,Jan,0
2008,Feb,0
2008,Mar,0
2008,Apr,0
2008,May,0
2008,Jun,0
2008,Jul,0
2008,Aug,0
2008,Sep,0
2008,Oct,0
2008,Nov,0
2008,Dec,0
2009,Jan,0
2009,Feb,0
2009,Mar,0
2009,Apr,0
2009,May,0
2009,Jun,0
2009,Jul,0
2009,Aug,0
2009,Sep,0
2009,Oct,0
2009,Nov,0
2009,Dec,0
2010,Jan,0
2010,Feb,0
2010,Mar,0
2010,Apr,0
2010,May,0
2010,Jun,0
2010,Jul,0
2010,Aug,0
2010,Sep,0
2010,Oct,0
2010,Nov,0
2010,Dec,0
2011,Jan,0
2011,Feb,0
2011,Mar,0
2011,Apr,0
2011,May,0
2011,Jun,0
2011,Jul,0
2011,Aug,0
2011,Sep,0
2011,Oct,0
2011,Nov,0
2011,Dec,0
2012,Jan,0
2012,Feb,0
2012,Mar,0
2012,Apr,0
2012,May,0
2012,Jun,0
2012,Jul,0
2012,Aug,0
2012,Sep,0
2012,Oct,0
2012,Nov,0
2012,Dec,0
2013,Jan,0
2013,Feb,0
2013,Mar,0
2013,Apr,0
2013,May,0
2013,Jun,0
2013,Jul,0
2013,Aug,0
2013,Sep,0
2013,Oct,0
2013,Nov,0
2013,Dec,0
2014,Jan,0
2014,Feb,0
2014,Mar,0
2014,Apr,0
2014,May,0
2014,Jun,0
2014,Jul,0
2014,Aug,0
2014,Sep,0
2014,Oct,0
2014,Nov,0
2014,Dec,0
2015,Jan,0
2015,Feb,0
2015,Mar,0
2015,Apr,1
2015,May,0
2015,Jun,0
2015,Jul,0
2015,Aug,0
2015,Sep,0
2015,Oct,0
2015,Nov,0
2015,Dec,1
2016,Jan,0
2016,Feb,0
2016,Mar,0
2016,Apr,0
2016,May,0
2016,Jun,0
2016,Jul,0
2016,Aug,0
2016,Sep,0
2016,Oct,0
2016,Nov,0
2016,Dec,0
2017,Jan,0
2017,Feb,0
2017,Mar,1
2017,Apr,2
2017,May,0
2017,Jun,0
2017,Jul,0
2017,Aug,0
2017,Sep,0
2017,Oct,0
2017,Nov,0
2017,Dec,0
2018,Jan,0
2018,Feb,1
2018,Mar,1
2018,Apr,1
2018,May,0
2018,Jun,0
2018,Jul,0
2018,Aug,0
Current sql:
WITH months AS (
  SELECT
    DATEADD(month, seq4(), '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4(), '2008-01-01') <= '2022-12-01'
),
filings AS (
  -- Handle records where 'abstract_localized' is an object
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_OBJECT("abstract_localized")
    AND "abstract_localized":"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"

  UNION ALL

  -- Handle records where 'abstract_localized' is an array
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_ARRAY("abstract_localized")
    AND f.value:"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
),
monthly_filings AS (
  SELECT
    "Filing_Month",
    SUM("Number_of_Filings") AS "Number_of_Filings"
  FROM filings
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTHNAME(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."Filing_Month"
ORDER BY m."month_start";
2025-01-18 06:00:10 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 06:00:10 - root - INFO - ```sql
WITH months AS (
  SELECT
    DATEADD(month, seq4(), '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4(), '2008-01-01') <= '2022-12-01'
),
filings AS (
  -- Handle records where 'abstract_localized' is an object
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_OBJECT("abstract_localized")
    AND "abstract_localized":"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"

  UNION ALL

  -- Handle records where 'abstract_localized' is an array
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD") BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_ARRAY("abstract_localized")
    AND f.value:"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
),
monthly_filings AS (
  SELECT
    "Filing_Month",
    SUM("Number_of_Filings") AS "Number_of_Filings"
  FROM filings
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTHNAME(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."Filing_Month"
ORDER BY m."month_start";
```
2025-01-18 06:00:10 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 06:00:10 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 06:00:10 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 06:00:11 - snowflake.connector.connection - INFO - closed
2025-01-18 06:00:11 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 06:00:12 - root - INFO - itercount: 4
2025-01-18 06:00:12 - root - INFO - 001003 (42000): 01b9c9a8-0004-7985-0001-11c300ee12ce: SQL compilation error:
syntax error line 28 at position 65 unexpected '2008'.
syntax error line 28 at position 75 unexpected '' AND ''.
syntax error line 28 at position 92 unexpected ''
    AND IS_ARRAY("abstract_localized")
    AND f.value:"text"::STRING ILIKE ''.
syntax error line 30 at position 48 unexpected 'of'.
parse error line 46 at position 25 near '<EOF>'.
syntax error line 31 at position 2 unexpected 'GROUP'.
2025-01-18 06:00:12 - root - INFO - Input sql:
WITH months AS (
  SELECT
    DATEADD(month, seq4(), '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4(), '2008-01-01') <= '2022-12-01'
),
filings AS (
  -- Handle records where 'abstract_localized' is an object
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_OBJECT("abstract_localized")
    AND "abstract_localized":"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"

  UNION ALL

  -- Handle records where 'abstract_localized' is an array
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD") BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_ARRAY("abstract_localized")
    AND f.value:"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
),
monthly_filings AS (
  SELECT
    "Filing_Month",
    SUM("Number_of_Filings") AS "Number_of_Filings"
  FROM filings
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTHNAME(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."Filing_Month"
ORDER BY m."month_start";
The error information is:
001003 (42000): 01b9c9a8-0004-7985-0001-11c300ee12ce: SQL compilation error:
syntax error line 28 at position 65 unexpected '2008'.
syntax error line 28 at position 75 unexpected '' AND ''.
syntax error line 28 at position 92 unexpected ''
    AND IS_ARRAY("abstract_localized")
    AND f.value:"text"::STRING ILIKE ''.
syntax error line 30 at position 48 unexpected 'of'.
parse error line 46 at position 25 near '<EOF>'.
syntax error line 31 at position 2 unexpected 'GROUP'.
Please correct it and output only 1 complete SQL query.
2025-01-18 06:00:57 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-18 06:00:57 - root - INFO - ```sql
WITH months AS (
  SELECT
    DATEADD(month, seq4(), '2008-01-01') AS "month_start"
  FROM TABLE(GENERATOR(ROWCOUNT => ((2022 - 2008 + 1) * 12)))
  WHERE DATEADD(month, seq4(), '2008-01-01') <= '2022-12-01'
),
filings AS (
  -- Handle records where 'abstract_localized' is an object
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_OBJECT("abstract_localized")
    AND "abstract_localized":"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"

  UNION ALL

  -- Handle records where 'abstract_localized' is an array
  SELECT
    DATE_TRUNC('month', TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD')) AS "Filing_Month",
    COUNT(DISTINCT "application_number") AS "Number_of_Filings"
  FROM PATENTS.PATENTS.PUBLICATIONS,
    LATERAL FLATTEN(INPUT => "abstract_localized") f
  WHERE "country_code" = 'US'
    AND TRY_TO_DATE("filing_date"::VARCHAR, 'YYYYMMDD') BETWEEN '2008-01-01' AND '2022-12-31'
    AND IS_ARRAY("abstract_localized")
    AND f.value:"text"::STRING ILIKE '%internet of things%'
  GROUP BY "Filing_Month"
),
monthly_filings AS (
  SELECT
    "Filing_Month",
    SUM("Number_of_Filings") AS "Number_of_Filings"
  FROM filings
  GROUP BY "Filing_Month"
)
SELECT
  YEAR(m."month_start") AS "Year",
  MONTHNAME(m."month_start") AS "Month",
  COALESCE(f."Number_of_Filings", 0) AS "Number_of_Filings"
FROM months m
LEFT JOIN monthly_filings f ON m."month_start" = f."Filing_Month"
ORDER BY m."month_start";
```
2025-01-18 06:00:57 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-18 06:00:57 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-18 06:00:57 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-18 06:00:59 - snowflake.connector.cursor - INFO - Number of results in first chunk: 128
2025-01-18 06:00:59 - snowflake.connector.connection - INFO - closed
2025-01-18 06:00:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-18 06:00:59 - root - INFO - itercount: 5
2025-01-18 06:00:59 - root - INFO - 0
2025-01-18 06:00:59 - root - INFO - Total iteration counts: 5
