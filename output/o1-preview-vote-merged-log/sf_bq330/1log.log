2025-01-21 09:04:19 - openai._base_client - INFO - Retrying request to /chat/completions in 0.422058 seconds
2025-01-21 09:05:28 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:05:28 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:28 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:28 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:29 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:05:29 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:05:30 - root - INFO - SQL:
SELECT DISTINCT "zip_code", "state_code"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 100;
Results:
zip_code,state_code
80470,CO
80497,CO
81430,CO
81334,CO
80030,CO
80452,CO
80226,CO
81082,CO
80642,CO
81055,CO
80476,CO
81067,CO
80543,CO
80863,CO
81008,CO
81030,CO
80447,CO
81149,CO
80467,CO
80007,CO
80427,CO
80733,CO
80479,CO
80620,CO
80113,CO
81231,CO
81043,CO
80648,CO
80033,CO
80212,CO
81092,CO
80914,CO
80132,CO
80233,CO
80517,CO
80454,CO
80525,CO
80812,CO
80833,CO
81654,CO
80478,CO
80116,CO
80023,CO
80401,CO
80820,CO
80705,CO
80127,CO
81632,CO
81147,CO
80133,CO
81155,CO
80757,CO
80918,CO
81122,CO
80861,CO
81121,CO
80504,CO
80436,CO
80644,CO
81003,CO
80209,CO
80545,CO
81423,CO
81089,CO
80010,CO
81136,CO
81041,CO
80651,CO
81049,CO
81521,CO
81020,CO
80809,CO
81126,CO
80823,CO
80542,CO
80528,CO
80018,CO
80219,CO
81657,CO
80802,CO
80438,CO
81645,CO
80610,CO
81601,CO
80125,CO
81526,CO
81091,CO
80759,CO
81045,CO
80601,CO
81422,CO
81244,CO
81418,CO
80537,CO
80424,CO
80821,CO
81433,CO
80728,CO
80105,CO
80910,CO

2025-01-21 09:05:30 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:30 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:30 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:31 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:05:31 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:05:31 - root - INFO - SQL:
SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   GROUP BY "zip_code"
   LIMIT 100;
Results:
zip_code,bank_locations
80913,2
80920,18
80916,2
80907,7
80922,4
80911,1
80914,1
80923,2
80906,9
80921,9
80817,5
80909,7
80924,1
80840,1
80525,24
80915,6
80537,15
80538,10
81501,13
81521,5
81303,3
81520,4
81505,9
80701,6
80513,3
80526,4
80728,1
80751,7
80424,6
81147,7
81090,1
81201,5
81624,1
81504,2
81422,1
81526,1
81419,2
80734,3
81144,3
80758,3
80014,6
80016,12
81047,1
80304,1
80108,7
80132,4
81301,15
80549,2
81122,2
80720,5
81503,1
81432,2
81057,1
80825,1
80442,3
81092,1
81154,1
80202,31
80218,5
81413,1
80232,1
81620,7
80821,1
80116,1
80918,12
80904,2
80524,13
81302,1
80723,5
80863,3
81137,1
80443,5
80435,3
81082,7
81067,4
80602,4
80122,10
80017,3
80027,8
80207,7
81648,1
80903,24
80521,6
80831,4
80917,1
80517,5
81252,2
81230,5
81089,2
80828,3
81149,1
80933,1
80654,1
81211,5
81416,7
81428,2
81324,1
80482,1
80459,2
80461,3

2025-01-21 09:05:31 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:31 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:31 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:05:33 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:05:33 - root - INFO - SQL:
SELECT "geo_id", "state_fips_code", "county_fips_code", "blockgroup_ce"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 100;
Results:
geo_id,state_fips_code,county_fips_code,blockgroup_ce
080310029012,08,031,2
080519636004,08,051,4
080130137021,08,013,1
080050839001,08,005,1
080690018043,08,069,3
081230014131,08,123,1
080130122041,08,013,1
081230011003,08,123,3
080590098493,08,059,3
080310039023,08,031,3
080410047051,08,041,1
080839694002,08,083,2
081230015002,08,123,2
080299649002,08,029,2
080410071022,08,041,2
080590098071,08,059,1
080130121012,08,013,2
081010023002,08,101,2
080590104022,08,059,2
080410045072,08,041,2
080410060002,08,041,2
081170001005,08,117,5
080310036025,08,031,5
080310013015,08,031,5
080299651002,08,029,2
080590120571,08,059,1
080130132051,08,013,1
080370002001,08,037,1
080410045082,08,041,2
080350145042,08,035,2
080310068112,08,031,2
081010022002,08,101,2
080590111004,08,059,4
081010028015,08,101,5
080350144052,08,035,2
081010028014,08,101,4
080919676004,08,091,4
080310030021,08,031,1
080140302001,08,014,1
080130135053,08,013,3
080839694004,08,083,4
080050807003,08,005,3
080350139102,08,035,2
080310028012,08,031,2
080410064004,08,041,4
080330001002,08,033,2
080310028034,08,031,4
080039602002,08,003,2
080310046021,08,031,1
080410067001,08,041,1
081230019051,08,123,1
080050820002,08,005,2
080590120572,08,059,2
080140308002,08,014,2
081230019071,08,123,1
081230002002,08,123,2
080310037023,08,031,3
080079742001,08,007,1
080410057001,08,041,1
080690005031,08,069,1
081230014041,08,123,1
080310013011,08,031,1
080590098481,08,059,1
080310042011,08,031,1
080350145041,08,035,1
080410023002,08,041,2
081099776001,08,109,1
080310068144,08,031,4
080410051112,08,041,2
080590105021,08,059,1
080050808001,08,005,1
080050823002,08,005,2
080310055021,08,031,1
080590104061,08,059,1
080590098352,08,059,2
081259632001,08,125,1
081070007003,08,107,3
080310030022,08,031,2
080310053001,08,031,1
080859666013,08,085,3
080050056341,08,005,1
080619601002,08,061,2
080590112021,08,059,1
080010093045,08,001,5
080690011042,08,069,2
080050804003,08,005,3
080050056342,08,005,2
080050850001,08,005,1
081230014081,08,123,1
081230012021,08,123,1
080690028012,08,069,2
080490002024,08,049,4
080370004011,08,037,1
080279701002,08,027,2
080590103043,08,059,3
080310013012,08,031,2
080050068154,08,005,4
080050067073,08,005,3
080299650004,08,029,4
080050073024,08,005,4

2025-01-21 09:05:33 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:33 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:33 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:36 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-21 09:05:38 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:38 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:05:38 - root - INFO - SQL:
SELECT "zip_code", "zip_code_geom"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 100;
Results:
Too long, hard cut:
zip_code,zip_code_geom
80621,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x88\x03\x00\x00\x9b\x1f\x7fiQ<Z\xc0\xc2\xd9\xade2\x06D@d\x9b\xe2qQ<Z\xc0Nyt#,\x06D@\xd30|DL<Z\xc0\x85\xdb\xa1a1\x06D@F\xd8\xf0\xf4J<Z\xc0V#\xbb\xd22\x06D@\x9b\x02\x99\x9dE<Z\xc09\xc9V\x97S\x06D@o.\xfe\xb6\'<Z\xc0\x91D/\xa3X\x06D@\xecO\xe2s\'<Z\xc0\xc2\xb5\xda\xc3^\x06D@\x7f\x17\xb6f+<Z\xc0>\x07\x96#d\x06D@\x14{h\x1f+<Z\xc0\x9e`\xffun\x06D@\x96\xebm3\x15<Z\xc0\xca\xe0(yu\x06D@\x1e\x92\xe8e\x14<Z\xc0\xd2\x0f\xea""\x85\x06D@tF\x94\xf6\x06<Z\xc0\x85r\xa2]\x85\x06D@\xe6\x07\xae\xf2\x04<Z\xc0\xe7g\xeau\x8b\x06D@\xfb\x93\xf8\xdc\t<Z\xc0\x93\x8er0\x9b\x06D@""T\xa9\xd9\x03<Z\xc0\xd4\x02{L\xa4\x06D@\x87\x19\x1aO\x04<Z\xc0]\xbb\xb4\xe1\xb0\x06D@\xe3Y\x10\xca\xfb;Z\xc0\xcd\x17{/\xbe\x06D@\x93\x06E\xf3\x00<Z\xc0\xe8}\xe3k\xcf\x06D@\xef\xc8Xm\xfe;Z\xc0\xb2\x8d?Q\xd9\x06D@\xc0\xd4]\xd9\x05<Z\xc0\x7f\xd1\xe5\xcd\xe1\x06D@\xaa\xd5WW\x05<Z\xc0)\xa7=%\xe7\x06D@&r\xc1\x19\xfc;Z\xc0\x13\x04\x8fo\xef\x06D@\xfd7\xbd\x8b\xf7;Z\xc0\xe4U\x9d\xd5\x02\x07D@\xc4\x96\x1eM\xf5;Z\xc0\x1ac\'\xbc\x04\x07D@\xa5\xe9z\xa2\xeb;Z\xc0\xc7\x83-v\xfb\x06D@\x9b\xe6\x1d\xa7\xe8;Z\xc0\xf6\x07\xcam\xfb\x06D@\x97\xab\x1f\x9b\xe4;Z\xc0\xaa\xa8\xc14\x0c\x07D@\xde_\xcb+\xd7;Z\xc0_\x0bzo\x0c\x07D@P\x07@\xdc\xd5;Z\xc0`\x15od\x1e\x07D@\xba\xc5\xfc\xdc\xd0;Z\xc0\xf3\x8eSt$\x07D@P\xc5\x8d[\xcc;Z\xc0\xf3G\x18\x06,\x07D@-\tPS\xcb;Z\xc0\xcd\x05.\x8f5\x07D@\x8f\xc7\x0cT\xc6;Z\xc0\xac\x84\xee\x928\x07D@Q\x1bc\'\xbc;Z\xc0\x8a\x16\xa0m5\x07D@\x07\x82\x8eV\xb5;Z\xc0\x8aPl\x05M\x07D@\xff\xd4\x06\'\xa2;Z\xc0X\xc8\\\x19T\x07D@U\xa6\x98\x83\xa0;Z\xc0\x99\xb1h:;\x07D@\xba?\xa5J\x94;Z\xc0\x84\x0e\xba\x84C\x07D@\xb8\xcc\xe9\xb2\x98;Z\xc0\xe0/fKV\x07D@\x7fj\xbct\x93;Z\xc0\xa7R\xb3\x07Z\x07D@\xe2\\\xc3\x0c\x8d;Z\xc0O\xba\xf4/I\x07D@\xb6\xf6>U\x85;Z\xc0\x0f/\x88HM\x07D@\xe0\xfc\x14\xc7\x81;Z\xc0Kk\xd3\xd8^\x07D@*y\x03\xcc|;Z\xc0h\x1c\xeawa\x07D@\x024\xd8\xd4y;Z\xc0\xaf\x0f\xeb\x8dZ\x07D@\xa6\x85\xcb*l;Z\xc0{j\xf5\xd5U\x07D@z\xaf\xe8\xd6k;Z\xc0\xab\\\xa8\xfck\x07D@7\x19U\x86q;Z\xc0\x99v1\xcdt\x07D@\x96FZ*o;Z\xc0\xfa\x03\xe5\xb6}\x07D@S\x08\xe4\x12G;Z\xc0\xd2p\xca\xdc|\x07D@=HO\x91C;Z\xc00y\x03\xcc|\x07D@G_\xcf\xd7,;Z\xc0\xfc7/N|\x07D@\xd4\r\x14x\';Z\xc0\x8b\xc4\x045|\x07D@~\xac\xe0\xb7!;Z\xc0H\xd5v\x13|\x07D@\x8e\xee\xae\xb3!;Z\xc0\xd6-\x02c}\x07D@\x06\xf7\x03\x1e\x18;Z\xc0e\xba\xd7I}\x07D@\x96\xd1\xc8\xe7\x15;Z\xc0=[\x07\x07{\x07D@s/0+\x14;Z\xc0\x03]\xfb\x02z\x07D@lcz\xc2\x12;Z\xc0\x9e\x97\x8a\x8dy\x07D@\xfdL\xbdn\x11;Z\xc0[\xa8\xfcky\x07D@.t%\x02\xd5:Z\xc0W\xeb\xc4\xe5x\x07D@}\xb8r\xf6\xce:Z\xc0\xe6w\x9a\xccx\x07D@\x91\xa2\\\x1a\xbf:Z\xc0\x91\x1d\x1b\x81x\x07D@\x00\tQ\xbe\xa0:Z\xc0\xba\xe4\x7f\xf2w\x07D@\xc0\x9cg\xecK:Z\xc0\x80\xe6s\xeev\x07D@e9\t\xa5/:Z\xc0]\x10\x91\x9av\x07D@\xb0\xac4)\x05:Z\xc0\x17d\xcb\xf2u\x07D@\x89\x98\x12I\xf49Z\xc0\xa6\xf0\xa0\xd9u\x07D@\x8d\xb6*\x89\xec9Z\xc0Q\x96!\x8eu\x07D@)\xd7\x14\xc8\xec9Z\xc0c\xe4,\xeci\x07D@\xe0\xe7\x86\xa6\xec9Z\xc0Fo\xb8\x8f\xdc\x06D@\xb0c\xea\xae\xec9Z\xc0 r\xfaz\xbe\x06D@V2\x8e\x91\xec9Z\xc0\xc2\xc1\xde\xc4\x90\x06D@V2\x8e\x91\xec9Z\xc0\xdd\xb3\xae\xd1r\x06D@\x8d\xb6*\x89\xec9Z\xc0f\xcfej\x12\x06D@\xeb\x95@J\xec9Z\xc0\x1e\x88,\xd2\xc4\x05D@""\x1a\xddA\xec9Z\xc0\xfd^\n\x0f\x9a\x05D@\x98V\xd1\x1f\x9a9Z\xc0R\xb9\x89Z\x9a\x05D@^\x18w\x83h9Z\xc0\xfd^\n\x0f\x9a\x05D@e\x8dz\x88F9Z\xc0Wv\xc1\xe0\x9a\x05D@\x05s\x82699Z\xc0\x99eO\x02\x9b\x05D@U3k) 9Z\xc0\xc7\xe9\xeb\xf9\x9a\x05D@\x97VC\xe2\x1e9Z\xc0\x17\x873\xbf\x9a\x05D@1\x82T\x8a\x1d9Z\xc0AN\x980\x9a\x05D@\xbc\x94\xbad\x1c9Z\xc0\xe66\xe1^\x99\x05D@(eRC\x1b9Z\xc0\x98\xcd\xe30\x98\x05D@\xb7\x0b\xcdu\x1a9Z\xc0\x94D\xf6A\x96\x05D@\xa6\xba\x80\x97\x199Z\xc0$9`W\x93\x05D@\x8a|%\x90\x129Z\xc0~\x10\xc9\x90c\x05D@\x8c\xd9\x92U\x119Z\xc0\xca\xf4K\xc4[\x05D@\xb5\x91y\xe4\x0f9Z\xc0\xe7T2\x00T\x05D@\xa4Z\xd2Q\x0e9Z\xc0\xb3\xe3\x86\xdfM\x05D@\x18\x11\xc5\xe4\r9Z\xc0V\x0f\x98\x87L\x05D@\xa6\xb7?\x17\r9Z\xc0\x14TT\xfdJ\x05D@\xbd\xea\x8f0\x0c9Z\xc0\xd9UH\xf9I\x05D@B&\x199\x0b9Z\xc0\xc1-\x1fII\x05D@\xfb\x93\xf8\xdc\t9Z\xc0\xfd_u\xe4H\x05D@\x12\xc7H\xf6\x089Z\xc0-\xe4\x11\xdcH\x05D@\xdd\x9f\x19\xc4\x079Z\xc0""6X8I\x05D@\x94\x06E\xf3\x009Z\xc0\x01\xb5\x18<L\x05D@\xbf\xf80{\xd98Z\xc0\xf1\xb7=Ab\x05D@aX\x8c\xba\xd68Z\xc0\x9c)t^c\x05D@k\x0e\x10\xcc\xd18Z\xc0h\x80\x0b\xb2e\x05D@@8-x\xd18Z\xc0\t\xe0f\xf1b\x05D@\x11\xce5\xcc\xd08Z\xc0hP4\x0f`\x05D@\xb4""j\xa2\xcf8Z\xc0\xe8\xd9\xac\xfa\\\x05D@6\x0c\xadN\xce8Z\xc0\xcd(\x96[Z\x05D@\xd9\xb9\xf7p\xc98Z\xc0\xf1\xce\xa1\x0cU\x05D@y`\x8e\x1e\xbf8Z\xc0b\xbdQ+L\x05D@\'T\xfe\xb5\xbc8Z\xc0E\x0c;\x8cI\x05D@;\x1c]\xa5\xbb8Z\xc0\xd4\xccZ\nH\x05D@\xad\xc3\xd1U\xba8Z\xc0\xc9\x865\x95E\x05D@\xad\xddv\xa1\xb98Z\xc04qr\xbfC\x05D@x\x9c\xa2#\xb98Z\xc0\x85B\x04\x1cB\x05D@\xac\xce\xf8\xbe\xb88Z\xc0\xbf\xa8\xa4N@\x05D@\xe8\x00OZ\xb88Z\xc0\xaa\xe8\x0f\xcd<\x05D@G\t\x88I\xb88Z\xc0{\x98\xbdl;\x05D@\xa2}\xac\xe0\xb78Z\xc0sz\xde\x8d\x05\x05D@q\xd0\xec\xba\xb78Z\xc0\rZH\xc0\xe8\x04D@\x89\x12\xbb\xb6\xb78Z\xc06\x89A`\xe5\x04D@\xd8\xf2\xca\xf5\xb68Z\xc0\xbd\xbe\xd6\xa5F\x04D@\x91F\x05N\xb68Z\xc0\xe3\xf1\xb4\xfc\x

2025-01-21 09:05:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 20
2025-01-21 09:05:41 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:05:42 - root - INFO - SQL:
SELECT "geo_id", "blockgroup_geom"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 100;
Results:
Too long, hard cut:
geo_id,blockgroup_geom
080310029012,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x002\x00\x00\x00\xbaq\x1975?Z\xc0?\xe3\xc2\x81\x90\xdaC@\x0f\x0fa\xfc4?Z\xc0\x9c\xce\x15\xa5\x84\xdaC@\xb0 \xcdX4?Z\xc0,\x049(a\xdaC@\xce9x&4?Z\xc0\\k\xefSU\xdaC@\x1b\xd7\xbf\xeb3?Z\xc0:x&4I\xdaC@\x04\xaf\x96;3?Z\xc0\xce\x9e\xcb\xd4$\xdaC@JL\xde\x003?Z\xc0{\'f\xbd\x18\xdaC@\xee\x08\xa7\x05/?Z\xc0\xab\xab\x02\xb5\x18\xdaC@\xad\xfc2\x18#?Z\xc0\n\xb4;\xa4\x18\xdaC@2w-!\x1f?Z\xc0\n\xb4;\xa4\x18\xdaC@\xaa\x1aKX\x1b?Z\xc0\n\xb4;\xa4\x18\xdaC@&\x05\xa4\xfd\x0f?Z\xc0\xab\xab\x02\xb5\x18\xdaC@\x8ff\xf38\x0c?Z\xc0{\'f\xbd\x18\xdaC@$L\xdfk\x08?Z\xc0{\'f\xbd\x18\xdaC@\xc0x\x06\r\xfd>Z\xc0{\'f\xbd\x18\xdaC@?\x1c$D\xf9>Z\xc0|\'f\xbd\x18\xdaC@u\xd0\xb3Y\xf5>Z\xc0z\'f\xbd\x18\xdaC@\x16\xab\x94\x9e\xe9>Z\xc0K\xa3\xc9\xc5\x18\xdaC@`\xe8\x11\xa3\xe7>Z\xc0\x1d\x1f-\xce\x18\xdaC@w5\x07\x08\xe6>Z\xc0\x03\x8fo\xef\x1a\xdaC@\xecm3\x15\xe2>Z\xc0\xd3\n\xd3\xf7\x1a\xdaC@\x14\xd5\xe9@\xd6>Z\xc0\xe5u\xc4!\x1b\xdaC@r\xcbGR\xd2>Z\xc0V\xe9\xee:\x1b\xdaC@05\xd0|\xce>Z\xc0&eRC\x1b\xdaC@s0\x9b\x00\xc3>Z\xc08\xd0Cm\x1b\xdaC@\x1aXU/\xbf>Z\xc0\xd8\xc7\n~\x1b\xdaC@\xf2\xd3\xb87\xbf>Z\xc0&\x828\x0f\'\xdaC@K\x05\x15U\xbf>Z\xc0\x10\xb1\xc1\xc2I\xdaC@\xfc>\xaaa\xbf>Z\xc0\\k\xefSU\xdaC@\xbcx?n\xbf>Z\xc0\xa9%\x1d\xe5`\xdaC@\xce\xe30\x98\xbf>Z\xc0b\xd0\t\xa1\x83\xdaC@g\xdb\xf7\xa8\xbf>Z\xc0\x80\x06\x9b:\x8f\xdaC@\xc0\xb3=z\xc3>Z\xc0Q\x82\xfeB\x8f\xdaC@ev\xa4\xfa\xce>Z\xc03iSu\x8f\xdaC@\xa6\x0c\x1c\xd0\xd2>Z\xc0\xa3\xdc}\x8e\x8f\xdaC@\xc8`\xc5\xa9\xd6>Z\xc0\xa3\xdc}\x8e\x8f\xdaC@\xf6\xd8$?\xe2>Z\xc0\x16P\xa8\xa7\x8f\xdaC@\x00\xeb\xff\x1c\xe6>Z\xc0\xe5\xcb\x0b\xb0\x8f\xdaC@c.7\x18\xea>Z\xc0\xb6Go\xb8\x8f\xdaC@u\xb6\x0e\x0e\xf6>Z\xc0\xf86\xfd\xd9\x8f\xdaC@\xc8\xb7w\r\xfa>Z\xc0\x97.\xc4\xea\x8f\xdaC@q\x98\xf6\xcd\xfd>Z\xc0\xf86\xfd\xd9\x8f\xdaC@+2: \t?Z\xc0\xe5\xcb\x0b\xb0\x8f\xdaC@\xc4\xd0\xea\xe4\x0c?Z\xc0\x16P\xa8\xa7\x8f\xdaC@\xb7\xa0\xf7\xc6\x10?Z\xc0\x87\xc3\xd2\xc0\x8f\xdaC@EJ\xb3y\x1c?Z\xc0\xda\x1dR\x0c\x90\xdaC@\x18\xd8\xf1_ ?Z\xc0\x1a\r\xe0-\x90\xdaC@vDL\x89$?Z\xc0\xbb\x04\xa7>\x90\xdaC@|G\x8d\t1?Z\xc0\x9d\xeb\xfbp\x90\xdaC@\xbaq\x1975?Z\xc0?\xe3\xc2\x81\x90\xdaC@"")"
080519636004,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x9c\t\x00\x00\n\xf6_\xe7\xa6\xbeZ\xc0\x19\xe6\x04mrBC@\x0ep\xcf\xf3\xa7\xbeZ\xc0Gj\xa1drBC@Vj\x84~\xa6\xbeZ\xc0\xe9\xc9\xfc\xa3oBC@\x8e""k\r\xa5\xbeZ\xc0[\xa5\xbb\xeblBC@_\xd2\x18\xad\xa3\xbeZ\xc0\xe3S\x00\x8cgBC@\x012t\xec\xa0\xbeZ\xc0\xf39w\xbb^BC@\x02W@\xa1\x9e\xbeZ\xc0\xa6lXSYBC@\xc2\xde\xc4\x90\x9c\xbeZ\xc08\x95\x0c\x00UBC@E\x16\xf7\x1f\x99\xbeZ\xc0\xb8R\xcf\x82PBC@\xadl\x1f\xf2\x96\xbeZ\xc0\x98\x80_#IBC@\xadl\x1f\xf2\x96\xbeZ\xc0m\x006 BBC@\x9a\xd8\n\x9a\x96\xbeZ\xc0\x9a\xffW\x1d9BC@\xd0M)\xaf\x95\xbeZ\xc0\xe0\x8e7\xf9-BC@\xb4\x91\xeb\xa6\x94\xbeZ\xc0<U\xbeg$BC@P\xccz1\x94\xbeZ\xc0b\x97\xa8\xde\x1aBC@%\xebpt\x95\xbeZ\xc0Z!\xac\xc6\x12BC@\xa6\x86\xc4=\x96\xbeZ\xc0\xdc\xdenI\x0eBC@\xfb#\x0c\x03\x96\xbeZ\xc0\xcdw\xf0\x13\x07BC@8\xbe\xf6\xcc\x92\xbeZ\xc0Nmp""\xfaAC@\xc8\x89=\xb4\x8f\xbeZ\xc0G\xf7s\n\xf2AC@u}\xadK\x8d\xbeZ\xc0]\x9a""\xc0\xe9AC@\x84\x88\xd4\xb4\x8b\xbeZ\xc0\xcb\xec\xf3\x18\xe5AC@\xe8r\x11\xdf\x89\xbeZ\xc0V$&\xa8\xe1AC@\x9df\x81v\x87\xbeZ\xc0\xab\x1a\x84\xb9\xddAC@z\xaaCn\x86\xbeZ\xc0\x11H\x89]\xdbAC@\\\x82\x1a\xbe\x85\xbeZ\xc0\x9e\xb3\x05\x84\xd6AC@\x91\xf78\xd3\x84\xbeZ\xc0:\x8as\xd4\xd1AC@\tv\x8aU\x83\xbeZ\xc0\x95=\tl\xceAC@R\xa4\x89w\x80\xbeZ\xc0Mp\xea\x03\xc9AC@\\Z\r\x89{\xbeZ\xc0\x18\xff>\xe3\xc2AC@\xe6\x9cf\x81v\xbeZ\xc0\x00\x1eQ\xa1\xbaAC@\xafI\xb7%r\xbeZ\xc0\x0b\x13F\xb3\xb2AC@\x86\x1e1zn\xbeZ\xc0\xcb\'+\x86\xabAC@D:\xca\xc1l\xbeZ\xc0\xa4d9\t\xa5AC@\xdftYLl\xbeZ\xc0\x8aO\x010\x9eAC@\xeb\x08n\xa4l\xbeZ\xc0\xa1&\xfa|\x94AC@\x86\x1e1zn\xbeZ\xc0\xcbh\xe4\xf3\x8aAC@\xba\xf7p\xc9q\xbeZ\xc0\xfd$>w\x82AC@\x18\x98\x15\x8at\xbeZ\xc0\xa7\xdd\xaf\x02|AC@\xa0\x19\xc4\x07v\xbeZ\xc0p{\x82\xc4vAC@\xdc\x17\xd0\x0bw\xbeZ\xc0\xcff\xd5\xe7jAC@\xeb?\xf9\xbbw\xbeZ\xc0i\x84~\xa6^AC@P\x05j1x\xbeZ\xc0\xe6\x88|\x97RAC@\xb16\xc6Nx\xbeZ\xc0WZF\xea=AC@\x16\x16\xdc\x0fx\xbeZ\xc0\x8bJ\xea\x044AC@\xc2x\x94Jx\xbeZ\xc0\xcd\xe8G\xc3)AC@\xbd\xe4\x7f\xf2w\xbeZ\xc0\xef9\xb0\x1c!AC@\x93(B\xeav\xbeZ\xc0\x12\xbfb\r\x17AC@\xa5\xe1""\xf7t\xbeZ\xc0\xc6\xf1C\xa5\x11AC@\xdf\xe7\xf8hq\xbeZ\xc0T]\xc0\xcb\x0cAC@\x03e\xe1\xebk\xbeZ\xc0\xf5$\xb09\x07AC@\x95\xc1\xdf/f\xbeZ\xc0V\x95}W\x04AC@\xaa\xf1\xd2Mb\xbeZ\xc0\xbc\xc2\x82\xfb\x01AC@\xa5\xa7V_]\xbeZ\xc0""$\xd26\xfe@C@\xf8q4GV\xbeZ\xc0[\xcd:\xe3\xfb@C@T~\xe0*O\xbeZ\xc0c\xbe\xbc\x00\xfb@C@""[$\xedF\xbeZ\xc0\xbb=\x08\x01\xf9@C@\xc7K7\x89A\xbeZ\xc0\xed)9\'\xf6@C@\xb6S\x01\xf7<\xbeZ\xc0r\xa430\xf2@C@[D\x14\x937\xbeZ\xc0\xa1\\\x1a\xbf\xf0@C@\xec\xab9@0\xbeZ\xc0\xb5\xfbU\x80\xef@C@\xbbc\xb1M*\xbeZ\xc0\xf5\x1e.9\xee@C@QT\xc4\xe9$\xbeZ\xc0\x10\xaf\xeb\x17\xec@C@HQg\xee!\xbeZ\xc0eq\xff\x91\xe9@C@\xf2\xbb\xe9\x96\x1d\xbeZ\xc0\xd8\x80\x08q\xe5@C@\x83\x18\xe8\xda\x17\xbeZ\xc0\xc9\x19\x8a;\xde@C@=\xc58\x7f\x13\xbeZ\xc0\xc8`\xc5\xa9\xd6@C@\x17\x11\xc5\xe4\r\xbeZ\xc0\xe7,\xb3\x08\xc5@C@\x0634\x9e\x08\xbeZ\xc0\x89;\xde\xe4\xb7@C@\

2025-01-21 09:05:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:43 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:05:43 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:05:43 - root - INFO - SQL:
SELECT "branch_fdic_uninum", "branch_address", "branch_city", "zip_code"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 100;
Results:
Too long, hard cut:
branch_fdic_uninum,branch_address,branch_city,zip_code
13482,"6384 Wetzel Avenue, Building 1512",Fort Carson,80913
475970,9265 North Union Boulevard,Colorado Springs,80920
443446,2930 South Academy Boulevard,Colorado Springs,80916
445948,3290 Centennial Boulevard,Colorado Springs,80907
17590,1125 Garden Of The Gods Road,Colorado Springs,80907
16955,1520 Briargate Boulevard,Colorado Springs,80920
422977,6030 Stetson Hills Boulevard,Colorado Springs,80922
12009,1800 South Nevada Avenue,Colorado Springs,80905
15634,560 Garden Of The Gods Road,Colorado Springs,80907
366145,1275 Village Ridge Pt,Monument,80132
247847,502 Security Boulevard,Colorado Springs,80911
647353,"1359 Interquest Parkway, Suite 150",Colorado Springs,80921
430180,15 West Cimarron Street,Colorado Springs,80903
16881,155 Lake Avenue,Colorado Springs,80906
255840,501 South Tejon,Colorado Springs,80903
612121,"104 S. Cascade Avenue, Suite 2014",Colorado Springs,80903
607745,5278 North Nevada Avenue Suite 100,Colorado Springs,80918
472619,"Peterson Air Force Base, 455 W. Paine St., Bldg. 1485",Colorado Springs,80914
428088,7390 Duryea Drive,Colorado Springs,80923
636531,7685 N Academy Blvd,Colorado Springs,80920
418796,3750 Bloomington Street,Colorado Springs,80922
513445,11555 Meridian Market View,Falcon,80831
195957,402 North Tejon Street,Colorado Springs,80903
257589,8620 North Union Boulevard,Colorado Springs,80920
258156,945 Tenderfoot Hill Road,Colorado Springs,80906
290392,2790 Briargate Boulevard,Colorado Springs,80920
18208,"102 North Cascade Avenue, Suite 100",Colorado Springs,80903
480120,3306 Centennial Blvd.,Colorado Springs,80907
256694,El Paso County,Colorado Springs,80915
582452,1146 Interquest Parkway,Colorado Springs,80921
16611,4328 Edison Avenue,Colorado Springs,80915
13728,1521 South 8th Street,Colorado Springs,80906
16584,3085 S Academy Blvd,Colorado Springs,80916
453111,7390 North Academy Boulevard,Colorado Springs,80920
17644,111 South Tejon Street,Colorado Springs,80903
358501,440 Chapel Hills Drive,Colorado Springs,80920
13343,1415 North Academy Boulevard,Colorado Springs,80909
458089,6925 Mesa Ridge Parkway,Fountain,80817
11201,2308 East Pikes Peak Avenue,Colorado Springs,80909
207212,1070 West Baptist Road,Colorado Springs,80921
418610,2870 New Center Pt,Colorado Springs,80922
428508,5470 E. Woodmen Road,Colorado Springs,80920
284259,4151 North Academy Boulevard,Colorado Springs,80918
437134,15844 Jackson Creek Parkway,Monument,80132
647740,7808 N Academy Blvd,Colorado Springs,80920
11734,2401 W Colorado Ave,Colorado Springs,80904
440408,5550 Powers Center Point,Colorado Springs,80920
626742,2768 Northgate Blvd,Colorado Springs,80921
365434,24 South Weber Street Suite 151,Colorado Springs,80903
357141,3201 E.  Platte Avenue,Colorado Springs,80909
477819,"19 North Tejon, Ste 100",Colorado Springs,80903
18193,104 S Cascade Ave,Colorado Springs,80903
14273,730 Citadel Drive East,Colorado Springs,80932
473126,101 North Cascade Avenue,Colorado Springs,80903
270796,1130 North Circle Drive,Colorado Springs,80932
190136,7025 Meridian Rd,Peyton,80831
419922,445 N Ellicott Hwy,Calhan,80808
249214,Coleman And Linstrom Streets,Fort Carson,80913
437905,3175 East Platte Avenue,Colorado Springs,80909
358907,7239 N. Academy Boulevard,Colorado Springs,80920
358787,421 North Tejon Street,Colorado Springs,80903
358545,5710 Constitution Avenue,Colorado Springs,80915
497259,9649 Prominent Point,Colorado Springs,80924
616487,90 South Cascade Avenue,Colorado Springs,80903
469348,13475 Voyager Parkway,Colorado Springs,80921
207167,815 Cheyenne Meadows Road,Colorado Springs,80906
480455,7655 Mclaughlin Road,Peyton,80831
640121,5737 Barnes Road,Colorado Springs,80917
242760,6615 Camden Boulevard,Fountain,80817
429637,434 S. Tejon,Colorado Springs,80903
295013,"2 North Cascade Avenue, Suite 130",Colorado Springs,80903
430043,3992 E. Bijou St,Colorado Springs,80909
629339,"1274 Interquest Pkwy, Ste 100",Colorado Springs,80921
359013,7495  Mclaughlin Road,Peyton,80831
301152,8250 Razorback Road,Colorado Springs,80920
429632,2835 Briargate Blvd,Colorado Springs,80920
429311,1650 Space Center Drive,Colorado Springs,80915
15431,5175 North Academy Boulevard,Colorado Springs,80918
511155,3110 N. Nevada,Colorado Springs,80907
12746,3110 North Nevada Avenue,Colorado Springs,80933
253292,2805 Dublin Boulevard,Colorado Springs,80918
17662,"121 South Tejon Street, Ste 110",Colorado Springs,80903
466677,4330 N Academy Blvd,Colorado Springs,80918
17145,5190 North Academy Boulevard,Colorado Springs,80918
462639,7473 N. Academy Blvd.,Colorado Springs,80920
13032,500 North Circle Drive,Colorado Springs,80909
242759,4790 North Academy Boulevard,Colorado Springs,80918
596305,405 East Cheyenne Mountain Blvd,Colorado Springs,80906
16496,4190 Austin Bluffs Parkway,Colorado Springs,80918
469476,7780 Fountain Mesa Road,Fountain,80817
256662,5725 North Academy Boulevard,Colorado Springs,80918
247845,290 East Cheyenne Mountain Boulevard,Colorado Springs,80915
340793,730

2025-01-21 09:05:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:45 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:06:14 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:06:14 - root - INFO - The error you're encountering occurs because the `ST_AREA` function in Snowflake expects its argument to be of the `GEOGRAPHY` data type, but the `"blockgroup_geom"` column is of type `BINARY(8388608)`. The `BINARY` type represents the geometry in Well-Known Binary (WKB) format, which needs to be converted to a `GEOGRAPHY` object before performing spatial operations.

To fix the error, you can use the `GEOGRAPHY_FROM_WKB` function to convert the `BINARY` data to `GEOGRAPHY`. Here's the corrected SQL query:

```sql
SELECT "geo_id", ST_AREA(GEOGRAPHY_FROM_WKB("blockgroup_geom")) AS "blockgroup_area"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 100;
```

**Explanation:**

- **`GEOGRAPHY_FROM_WKB("blockgroup_geom")`**: This function converts the WKB binary representation of the geometry into a `GEOGRAPHY` object that spatial functions can utilize.

- **`ST_AREA(...)`**: Now that the geometry is in the correct format, `ST_AREA` can calculate the area.

**Additional Considerations:**

- Make sure that the geometries in `"blockgroup_geom"` are valid WKB representations. If they're in a different format, you might need to use a different conversion function.

- Similarly, when working with other spatial functions (e.g., `ST_INTERSECTION`, `ST_INTERSECTS`), ensure that all geometry inputs are of type `GEOGRAPHY`. Apply `GEOGRAPHY_FROM_WKB` as needed for each geometry column.

**Example for Calculating Overlaps:**

If you encounter similar issues when calculating overlaps between ZIP code geometries and block group geometries, you should convert both geometries to `GEOGRAPHY` before performing spatial operations:

```sql
SELECT
    z."zip_code",
    bg."geo_id",
    ST_AREA(
        ST_INTERSECTION(
            GEOGRAPHY_FROM_WKB(z."zip_code_geom"),
            GEOGRAPHY_FROM_WKB(bg."blockgroup_geom")
        )
    ) / ST_AREA(GEOGRAPHY_FROM_WKB(bg."blockgroup_geom")) AS "overlap_ratio"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
  ON ST_INTERSECTS(
         GEOGRAPHY_FROM_WKB(z."zip_code_geom"),
         GEOGRAPHY_FROM_WKB(bg."blockgroup_geom")
     )
WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
LIMIT 100;
```

**Summary:**

- **Problem**: `ST_AREA` cannot accept `BINARY` type as input.

- **Solution**: Convert `BINARY` geometries to `GEOGRAPHY` using `GEOGRAPHY_FROM_WKB`.

By applying this conversion, you should be able to perform spatial calculations without errors.
2025-01-21 09:06:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:06:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:06:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:06:15 - snowflake.connector.connection - INFO - closed
2025-01-21 09:06:15 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:06:41 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:06:41 - root - INFO - The error you're encountering indicates that the function `GEOGRAPHY_FROM_WKB` is not recognized by Snowflake:

```
002140 (42601): 01b9db42-0004-7ed2-0001-11c300f4055a: SQL compilation error:
Unknown function GEOGRAPHY_FROM_WKB
```

**Explanation:**

- **`GEOGRAPHY_FROM_WKB`**: This function is not available in Snowflake. It might be available in other SQL dialects or GIS extensions but not in Snowflake’s SQL.

**Solution:**

In Snowflake, to convert a `BINARY` representation of a geometry (in WKB format) to a `GEOGRAPHY` object, you should use the `TO_GEOGRAPHY` function.

**Corrected SQL Query:**

```sql
SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("blockgroup_geom")) AS "blockgroup_area"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 100;
```

**Explanation of the Corrected Query:**

- **`TO_GEOGRAPHY("blockgroup_geom")`**: Converts the binary WKB geometry in `"blockgroup_geom"` to a Snowflake `GEOGRAPHY` object.

- **`ST_AREA(TO_GEOGRAPHY("blockgroup_geom"))`**: Now that `"blockgroup_geom"` is a `GEOGRAPHY` object, `ST_AREA` can calculate its area.

**Additional Information:**

- **`TO_GEOGRAPHY` Function**: This function can handle inputs of various types and automatically detects the format:

  - **BINARY**: Interpreted as WKB or EWKB format.
  - **VARCHAR**: Interpreted as WKT or EWKT format.
  - **VARIANT**: Interpreted as GeoJSON.

- **Usage**: When dealing with spatial data stored in WKB (Well-Known Binary) format in Snowflake, always use `TO_GEOGRAPHY` to convert it to a `GEOGRAPHY` type before applying spatial functions.

**Applying the Solution to Other Queries:**

For all spatial operations involving geometries stored as `BINARY`, make sure to convert them using `TO_GEOGRAPHY`. For example, when calculating intersections or checking if geometries intersect:

```sql
SELECT
    z."zip_code",
    bg."geo_id",
    ST_AREA(
        ST_INTERSECTION(
            TO_GEOGRAPHY(z."zip_code_geom"),
            TO_GEOGRAPHY(bg."blockgroup_geom")
        )
    ) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom")) AS "overlap_ratio"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
  ON ST_INTERSECTS(
         TO_GEOGRAPHY(z."zip_code_geom"),
         TO_GEOGRAPHY(bg."blockgroup_geom")
     )
WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
LIMIT 100;
```

**Explanation:**

- **Converting Geometries**: Both `"zip_code_geom"` and `"blockgroup_geom"` are converted to `GEOGRAPHY` using `TO_GEOGRAPHY`.

- **Spatial Functions**: After conversion, functions like `ST_INTERSECTS` and `ST_INTERSECTION` can operate on these geometries.

**Summary:**

- **Problem**: Snowflake doesn't recognize the function `GEOGRAPHY_FROM_WKB`.

- **Solution**: Use `TO_GEOGRAPHY` to convert `BINARY` WKB geometries to `GEOGRAPHY` type.

- **Action**: Update your SQL queries to include `TO_GEOGRAPHY` when dealing with spatial operations on `BINARY` geometry columns.

**Example of Corrected Query Execution:**

By executing the corrected query, you should now be able to calculate the area of each block group in Colorado without encountering an error:

```sql
SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("blockgroup_geom")) AS "blockgroup_area"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 100;
```

**Final Note:**

Always consult Snowflake's [documentation on spatial data types and functions](https://docs.snowflake.com/en/sql-reference/functions-spatial) for the most accurate and up-to-date information on working with spatial data in Snowflake. This ensures compatibility and helps avoid errors due to unsupported functions.
2025-01-21 09:06:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:06:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:06:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:06:43 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:06:43 - snowflake.connector.connection - INFO - closed
2025-01-21 09:06:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:08:29 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:08:29 - root - INFO - SQL:
SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("blockgroup_geom")) AS "blockgroup_area"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 100;
Results:
geo_id,blockgroup_area
080010093083,318331.61752397096
080690011111,583054.9679097468
080050806003,267905.0220620807
080310051041,306413.72805241204
080770014041,9128528.483674064
080010093165,386033.77392419835
080410060003,1337106.5254439674
080050846003,421590.5645749973
080350140091,2914655.734860705
081230021011,1350930.1323895925
080590105042,998719.6364283316
080050862001,726487.4643897336
081190101062,170723325.1398792
080410047022,324551.3153352345
080050056331,1154509.4037381432
080410037062,1460002.799462918
080770014032,6276419.148242579
080590104022,946020.0659065758
080410045072,345004.2810497997
080410060002,675148.3563268973
081170001005,3942479.908995065
080310036025,256540.59245767142
080310013015,325889.88978072605
080299651002,4108724.5289947214
080590120571,1841281.2416329617
080130132051,4190363.7452645027
080010085051,479749.9245816316
080130614001,2640824.319196276
080050056113,738161.613303675
080310023003,485829.2271676118
080410045062,477883.5321711704
080130121024,749618.6147005183
080350141321,1424605.1144541304
080050842003,350196.7612965719
080130133072,900728.595082702
080050873001,477050.40367869183
080770007001,1629314.1204170836
080310154001,695267.1068299344
080370002001,360097410.37504876
081230012021,790368.4852403371
080690028012,7358650.851102079
080410045082,2318578.030603743
080350145042,3528201.063393616
080310068112,504249.85020867846
081010022002,380349.0444679671
080590111004,659663.8784227693
080370006001,646835400.7845731
080050873004,120459.91230771886
080050824002,870747.2599331883
080410001021,618676.3950445021
080859664004,2251872.451957094
080050063002,325203.0184357622
081230007041,2016182.429238383
080050062003,305392.34263895755
080140305002,864934.6290092329
080490002024,299892181.10653305
080770009001,18111835.826399114
080010091032,3548567.1324788355
080370004011,91485019.11642735
081230025022,642912549.1619276
080590604001,687458.2752279321
080590120541,637762.3446853977
081010032002,2040387027.2963386
080690020111,1613607.096057084
080050842001,804273.1597537958
080859666014,1352267.9244953669
080050056322,1110120.0913545645
080410056013,484629.63121793384
080410025012,1261584.5314973062
081230025023,704891596.8953162
080050818003,682671.3909965379
080310068133,252726.97840909584
081010032003,67481822.88006857
080050056273,733976.211195482
080310014012,235164.3772468821
080410043003,613931.3408574059
081010017002,1111818.494342747
080590118063,354820.59515841416
080279701002,198837500.85875347
080590103043,543004.4751445533
080310013012,401878.08751258167
080050068154,1922893.6746803073
080050067073,1150476.2307289436
080459519011,346101742.0708595
080310157003,552114.2658844832
080410068012,826964.1228013647
080010087054,471826.4675019469
080350140092,752561.1238554545
081230020131,2620306.880133898
080410013023,914898.9398258835
080010094102,1392992.0731963497
080690016032,329169.7877166399
080690002011,495068.47427451034
080990001001,341923868.8354477
080310040034,731658.4892212141
080299650004,401112055.30159783
080050073024,249349.96175743983
080050816002,636190.2848251675
080590120492,995806.6381914323
080690011141,8613399.96669383

2025-01-21 09:08:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:08:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:08:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:08:31 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:08:31 - snowflake.connector.connection - INFO - closed
2025-01-21 09:08:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:08:31 - root - INFO - SQL:
SELECT "zip_code", ST_AREA(TO_GEOGRAPHY("zip_code_geom")) AS "zip_code_area"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 100
Results:
zip_code,zip_code_area
80621,331679130.7577672
81038,299585.0340667942
81220,623372476.2209235
80219,19616086.40714734
80726,411599591.0101213
81090,1651283384.6124427
80654,600618825.3217548
80116,223936013.10402292
80923,17692104.139015306
80751,1226272498.375824
80019,63608083.11222657
81049,3328619565.449977
80728,938126344.6051099
81321,1091284293.1807826
81232,4947456.774627389
80530,4912757.723788077
80802,1036672752.5219672
80433,212398325.46236232
81223,1032288450.7393758
81624,1448088155.8391185
81325,1475778434.944985
80809,131619929.2079432
80922,15485757.230255606
80825,1712398341.7289999
80204,14385906.86794514
80520,1042614.7637406592
81630,3300373234.921881
81523,855180266.0483283
80024,105775.16164326906
80652,485117451.36980313
80907,25634411.507145386
80750,342283829.5611158
80640,36692055.756575435
80504,266423402.33300716
80804,870484796.8758314
81424,794941600.3937052
80818,751367982.9330723
80747,455107512.58133537
80231,12222702.233403705
80624,81875998.50593518
81058,137156754.34616208
80432,283253058.3307917
80735,765463668.7898595
80026,58819275.37357771
81642,364116864.95363533
81071,1476113238.147014
80928,851041693.3507382
80830,577939778.072055
80012,20122964.54629801
80435,275139605.50523174
81130,2463434342.818319
80207,11815284.057674112
80927,11329008.09390779
81253,333218851.5586522
81131,812557574.6346319
80650,131543406.97073069
81004,425431309.9357352
80112,48139373.54700655
81432,708189799.5333391
81332,156598387.91947085
80438,144537719.72528258
81057,137859229.74076155
80241,17732945.371179037
80759,1670401978.4783788
80136,524787444.19995797
81640,6164667456.973276
80546,198047.36122810742
81652,231880111.17233756
80130,16542472.51802383
81128,473447456.34168345
81073,1657227488.5140135
81224,403745131.89744604
81129,10948911.949980943
80514,17452646.3372185
81632,317418921.382096
81092,218885116.82062295
80615,274951261.63643914
80741,591786359.7875789
81401,604901624.9405158
80457,3983505.5683981045
80465,118087968.70488936
80403,348124915.57819134
80924,14127339.680096451
80820,765745035.0838953
80446,790192132.0620357
80228,28532933.395953063
81126,50421104.52429436
81611,1109745545.0513172
81410,60077785.86411843
80515,157200216.0500317
80133,79739691.36647429
80447,630130640.7307409
80545,734338428.555088
81222,79914854.17689444
81525,308324573.52975106
80223,13627598.520921964
81089,1795939869.2995515
81610,803922339.1928983
81505,261586635.77811518
80101,607660400.7728322

2025-01-21 09:08:31 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:08:31 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:08:31 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:08:34 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:08:34 - snowflake.connector.connection - INFO - closed
2025-01-21 09:08:34 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:08:34 - root - INFO - SQL:
SELECT
   z."zip_code",
   bg."geo_id",
   ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) AS "overlap_area"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
  ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
LIMIT 100
Results:
zip_code,geo_id,overlap_area
81001,081010009041,969172.6261510528
80925,080410045031,13647863.54641641
80916,080410045031,
80911,080410045031,899809.458997037
80911,080410045062,477883.5321711704
80911,080410043003,613931.3408574059
80817,080410043003,
81004,081010026001,552547.2505728322
81005,081010026001,171850.11037037414
80113,080050059513,182195.95847296293
80022,080310015001,0.0
81005,081010017002,1111818.494342747
80916,080410060003,20215.252178127193
80909,080410060003,
80915,080410060003,1316891.2732279298
80817,080410045113,2970730.536633575
80809,081190101062,
81007,081010029161,1486479.4007360006
80916,080410059005,
80915,080410059005,1513314.5526927994
80917,080410001021,
80926,080410044011,
80903,080410018002,303593.07362098305
80913,080410044011,
80860,081190101062,
80909,080410018002,365484.43322145805
81008,081010036001,105067878.41446339
80903,080410015002,
80902,080410044011,4034635.46931842
80907,080410015002,0.0
81001,081010036001,51977680.54695688
80905,080410015002,835355.5905471246
80906,080410044011,
80909,080410001021,618676.3950445021
80917,080410056021,682059.8687701744
80915,080410056021,
80904,080410015002,
80922,080410056021,44680.20431499357
81008,081010030041,408656.08874507155
80813,081190101062,39025634.25678784
81001,081010030041,1765846.796756554
81025,081010036001,
81008,081010030042,
81003,081010030041,0.0
80911,080410045033,
81006,081010036001,55460.98504638372
80817,080410045031,2363505.6385712363
80905,080410030003,565627.6004300824
80907,080410013021,
80905,080410013021,0.0
80863,081190101062,72143047.20928875
80905,080410033032,
81004,081010019001,501992.4005751379
80906,080410033032,1732430.5824006933
80904,080410013021,695243.141219909
81003,081010005002,380427.91011545114
80909,080410019001,706752.8673571547
80903,080410027002,239166.25368726792
80916,080410020001,0.0
80919,080410037093,846318.0001284188
80909,080410027002,178484.68231290733
80906,080410031004,3876834.358208569
80909,080410020001,1025765.38395422
80907,080410037093,
80915,080410051102,371953.68933638174
80922,080410051102,
80907,080410006002,
80905,080410025022,1946924.4452970224
80909,080410006002,536958.7641290138
81001,081010008003,1245622.766958993
80814,081190101062,58638664.75751138
80905,080410031002,
81003,081010008003,33208.85782173045
81004,081010027002,0.0
80904,080410025022,
80906,080410031002,1088172.6668175748
80903,080410008003,209626.3902363703
80819,081190101062,915978.8964100617
81005,081010027002,660491.8660279866
80906,080410025022,
80918,080410047022,324551.3153352345
80926,080410033062,21281370.7604843
80917,080410056011,667725.2134533041
80919,080410037062,1460002.799462918
81006,081010020001,1153175.7410313434
81003,081010020001,
80916,080410061002,
80918,080410047035,772375.1599166077
80923,080410047035,
80909,080410061002,158380.14210392785
80910,080410061002,531525.7654913192
80913,080410033062,
81003,081010003001,1225967.2325319517
80920,080410039064,755500.9628195743
81212,080439782002,
81212,080439791002,2545439.837308326
80927,080410051071,
80906,080410030003,36531.78869578324
81226,080439782002,2554245.891510727
81001,081010009021,1482021.1401526239

2025-01-21 09:08:34 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:08:34 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:08:34 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:08:37 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:08:37 - snowflake.connector.connection - INFO - closed
2025-01-21 09:08:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:08:37 - root - INFO - SQL:
SELECT
    z."zip_code",
    bg."geo_id",
    ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom")) AS "overlap_ratio"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
  ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
LIMIT 100
Results:
zip_code,geo_id,overlap_ratio
80840,080410039061,
80920,080410039061,1.0
80809,080410067003,0.0
81008,081010030042,
81001,081010030042,1.0
80918,080410047034,1.0
80907,080410011041,0.9475126877815575
80911,080410045062,1.0
81005,081010026001,0.2372318283363789
80904,080410011041,0.052487312365375474
80905,080410011041,
81004,081010025003,1.0
81004,081010026001,0.7627681717115145
80113,080050059513,1.0
80817,080410043003,
80022,080310015001,0.0
80911,080410043003,1.0
81005,081010017002,1.0
80909,080410060003,
80915,080410060003,0.9848813450302134
80903,080410010002,0.0
80916,080410060003,0.015118654941434082
81004,081010021001,1.0
80915,080410059005,1.0
80860,081190101062,
80916,080410059005,
80903,080410018002,0.45374873680894795
80909,080410018002,0.5462512629804241
80809,081190101062,
80903,080410015002,
80817,080410045113,1.0
80907,080410015002,0.0
81007,081010029161,1.0
81005,081010018001,0.07617036922229317
80904,080410015002,
80905,080410015002,1.0
80814,081190101062,0.34347189939902356
81008,081010030041,0.18793081006203002
81004,081010018001,0.9238296308822606
80829,080410067003,1.0
81001,081010030041,0.8120691899611451
81001,081010011001,1.0
81003,081010030041,0.0
80863,081190101062,0.42257288012742017
80905,080410031002,
80905,080410033032,
80906,080410031002,1.0
80809,080410034003,0.3448671402558026
80906,080410033032,1.0
81004,081010020003,1.0
80919,080410037073,1.0
81006,081010020001,1.0
80906,080410031004,1.0
80917,080410059001,0.0
81003,081010020001,
80863,080410034003,
80909,080410059001,1.0
80819,080410034003,0.6551328597494901
81005,081010027002,1.0
80915,080410059001,
80918,080410047035,1.0
80923,080410047035,
80907,080410078001,0.0
80813,081190101062,0.22858993769488065
81008,081010036001,0.6687918286601092
80921,080410037073,
80918,080410078001,1.0
81004,081010027002,0.0
81001,081010009041,1.0
80909,080410021022,1.0
80819,081190101062,0.005365282662223046
81226,080439802001,1.0
80905,080410030004,
81025,081010036001,
80917,080410056011,1.0
80910,080410021022,0.0
80918,080410047022,1.0
80916,080410052021,
80910,080410052021,1.0
80906,080410030004,1.0
80917,080410001021,
80905,080410029005,1.0
80919,080410037062,1.0
80917,080410058003,0.9084600414844628
80925,080410045031,0.8070320723209835
81003,081010003001,1.0
80916,080410045031,
81004,081010025001,1.0
80817,080410045083,1.0
80920,080410069011,1.0
80924,080410069011,
80915,080410058003,0.09153995846711242
80922,080410058003,
80902,080410033062,
80905,080410025021,1.0
80910,080410054004,1.0
80817,080410045031,0.13975995927504103
81212,080439791002,1.0
81240,080410044031,
80814,081190101061,0.4089985762661501

2025-01-21 09:08:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:08:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:08:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:08:40 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:08:40 - snowflake.connector.connection - INFO - closed
2025-01-21 09:08:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:08:41 - root - INFO - SQL:
SELECT
    bg."geo_id",
    z."zip_code",
    (bl."bank_locations" * (
        ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
    )) AS "bank_locations_in_blockgroup"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
  ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
JOIN (
    SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
) bl ON z."zip_code" = bl."zip_code"
WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
LIMIT 100
Results:
geo_id,zip_code,bank_locations_in_blockgroup
080050059513,80113,5.0
080639621003,80807,4.89900231264747
080639621003,80810,
080659617002,80461,3.0
081170003004,80424,
080590120372,80433,
080679708001,81301,15.0
081170002001,80424,
081170002001,80444,
080770006013,81506,
080770006013,81501,13.0
080770017052,81504,
081259631001,80824,0.013059868276673098
081259631001,80807,0.38264780743721816
081170001003,80498,0.9995443568938597
081170003003,80424,
081170003003,80498,0.019685939609206893
081170003003,80443,4.901570301978052
080899681003,81067,4.0
081170002001,80435,3.0
081170002004,80424,
080639622002,80824,
080639622002,80810,
080179606003,80807,
081059767003,81144,3.0
080639622002,80836,0.5780309237082667
081170002004,80443,
080770013015,81503,1.0
081139681021,81435,5.0
080770013015,81501,
081170003003,80435,
081170001005,80498,0.9779551235023354
080639621004,80807,6.0
080370005022,81657,
080119667003,81054,1.0
080639623002,80815,1.0
080470138003,80439,0.0004836999706826515
080899683004,81050,6.0
081059767001,81144,3.0
080839693005,81321,8.0
080039602003,81101,8.0
081170004023,80424,6.0
080119667005,81054,1.0
080679707032,81301,15.0
081259632002,80824,0.1466537156291747
081170004023,80443,
080659617006,80461,3.0
080639622002,80825,
080079742003,81147,7.0
081259632002,80807,
080839696003,81321,2.0522270710740806
081059768001,81132,1.0
080259696004,81063,1.0
080190147001,80439,6.365298637218371
081259631001,80836,
080459521002,81650,
081010026001,81005,1.8978546266910312
080310015001,80216,4.0
080679706003,81122,2.0
080839696003,81328,0.539890600186434
080039602004,81101,8.0
080899681002,81067,4.0
080659617005,80461,3.0
080770013011,81503,1.0
080679711003,81301,15.0
080459521002,81624,
080770013011,81501,
080770014032,81503,
080770017052,81520,4.0
080770004003,81505,8.700542962571966
080770004002,81505,
080770004003,81501,0.43254905350788303
080770014032,81505,
080770004002,81501,13.0
080770006022,81501,13.0
081099777002,81125,1.0
080470138004,80403,0.1513334237808139
080770014032,81501,
080770012002,81504,0.0
080770017053,81504,
080770017053,81520,4.0
080770014031,81505,
080259696002,81039,0.008180397040882132
080770013023,81503,1.0
080770017024,81504,
081170004021,80424,6.0
080219749002,81140,0.09601173776944454
080899680001,81039,1.9496795345436704
080839696003,81323,0.2035810159040264
080259696002,81050,
080679708003,81301,15.0
081170002005,80498,
080770002001,81501,13.0
080770015013,81521,5.0
081170002005,80435,3.0
081170004014,80424,6.0
080770015012,81521,5.0
080459521004,81650,0.0739597711145032
080770012002,81503,0.08058663861035928
080470138003,80403,

2025-01-21 09:08:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:08:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:08:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:08:43 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:08:43 - snowflake.connector.connection - INFO - closed
2025-01-21 09:08:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:08:44 - root - INFO - SQL:
SELECT
    bg."geo_id",
    SUM((bl."bank_locations" * (
        ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
    ))) AS "total_bank_locations"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
  ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
JOIN (
    SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
) bl ON z."zip_code" = bl."zip_code"
WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
GROUP BY bg."geo_id"
LIMIT 100
Results:
geo_id,total_bank_locations
080410051041,0.5600286184784362
080619601002,1.0
080459519011,0.5704237676077621
080050075002,9.0
081230016001,2.6476459841249276
080410045071,1.0
080310083062,3.0
080010094102,4.0
080010083082,9.0
080310009044,1.2223030340299759
080130132072,1.0
080410027001,7.792584159537192
080399612061,2.0
080050849001,10.0
081010009023,4.0
080050800001,14.0
080370002002,2.0405675175831575
081259632002,1.7275450039158726
080559606003,2.0
080050071072,12.0
080590120271,4.193787667778352
080310043013,2.0
080050061003,5.0
081010028012,8.0
080310009022,5.0
081010028011,8.0
080010095012,7.0
080310037031,30.0
080130137026,1.0
080140312001,11.989444211683136
080690003002,6.0
080590098482,8.0
080310009054,1.0
080690020112,15.0
081010010003,4.0
080050834002,8.0
081230010052,2.0
080050837001,10.151032669477894
080410025023,3.5842771127759465
080410051052,4.0
080050843001,8.0
080690017042,15.0
080010085341,7.0
081230020202,6.0
080310019012,1.0
080010085401,6.4751080139301385
080410061001,4.81318374765192
080130121032,1.0
080310040023,5.0
080050056291,10.0
080590120431,8.0
080310028022,4.50620209012706
080410038021,1.004078658886006
080590109012,10.73902161269349
080310028031,5.0
080410051112,2.7512551038451445
081230002002,8.0
080410002023,12.0
080050063004,5.0
080079743002,6.133838769264393
081010004003,9.0
080310036024,4.0
081190102021,0.3827225523845887
080590120574,5.400913136552191
080050861002,10.0
080590098461,9.000079555235114
080050819001,9.0
080140311001,9.966743399869216
080130125103,3.0
080310014015,4.800829423419538
080410001021,7.0
080679707031,15.0
080690010081,24.0
080050868002,6.0
080410040081,1.7434589913038956
080459517023,8.0
080459518043,6.0
080140301001,12.0
080050068552,30.211912851702078
080350144031,
081230014161,16.773663438067878
080410010001,7.0
080810005005,3.0
080010087051,8.0
080410038022,1.0
080310045031,5.0
080010085511,4.9710581505152724
080130130052,8.0
080050859002,10.0
080690018074,10.0
080590119041,6.905845305588531
080310043062,2.0000000124876314
081010014001,
080679706003,2.0
081230021022,5.0
080310120103,10.0
080310007022,1.0
081170001004,1.0
080590098432,8.254678131360286
080859666021,0.008047942222860191

2025-01-21 09:08:44 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:08:44 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:08:44 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:08:47 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:08:47 - snowflake.connector.connection - INFO - closed
2025-01-21 09:08:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:08:47 - root - INFO - SQL:
SELECT
    final_results."zip_code",
    SUM(final_results."bank_locations_in_blockgroup") / COUNT(DISTINCT final_results."geo_id") AS "bank_locations_per_block_group"
FROM (
    SELECT
        bg."geo_id",
        z."zip_code",
        (bl."bank_locations" * (
            ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
        )) AS "bank_locations_in_blockgroup"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
      ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
    JOIN (
        SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
        FROM "FDA"."FDIC_BANKS"."LOCATIONS"
        WHERE "state" = 'CO'
        GROUP BY "zip_code"
    ) bl ON z."zip_code" = bl."zip_code"
    WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
) final_results
GROUP BY final_results."zip_code"
ORDER BY "bank_locations_per_block_group" DESC
LIMIT 100
Results:
zip_code,bank_locations_per_block_group
80501,18.6873891486805
80111,17.068163673854947
80206,16.297204155051606
80525,14.842727544554347
80634,14.015905459594485
80202,12.91732977558065
80903,12.132294886351586
80920,11.367265168967105
80112,10.367776635584885
81301,9.748439565286866
80134,9.422549456151348
80302,9.181790430004312
80012,7.999778534376968
80537,7.866030038288092
80601,7.7906037408110205
80020,7.7529740838090175
80211,7.488528104221764
80401,7.4547116504205
80524,7.132350621604972
81501,7.102193879671201
80301,6.699232900785644
81401,6.589507938591672
80918,6.487494976187673
80550,6.250897390024947
80222,6.248878972319733
80538,6.145333932867558
80228,5.996478283662174
81611,5.893868256392074
80104,5.875959617340669
80123,5.7710919449849065
81321,5.700707063206823
80487,5.643333741630031
80015,5.642221806579118
81212,5.587525004385869
80016,5.474326009515052
81082,5.274459425118016
81101,5.2627732664505995
80013,5.1960163323290045
80021,5.182355443460461
80011,5.158648676481493
80751,5.149691483771801
80226,5.091082724091707
80122,5.029838728474487
81005,4.97769292282682
80229,4.963932898897485
80027,4.862772149693504
80022,4.773185679341402
80906,4.726215641126031
80631,4.57760605285956
81601,4.547721575063403
80439,4.494750851793192
80207,4.466841508395423
80129,4.377962455546053
80909,4.186083005368754
81003,4.176384896024974
80126,4.15253355050681
80233,4.074494330133545
80234,3.9552317613137227
80907,3.9332103058918677
81147,3.879530963185763
81620,3.7873003727887746
80701,3.7850182870505433
81050,3.7839493076192685
80127,3.72043883063426
81052,3.715587020823326
80203,3.6397954139125805
80227,3.6255593842996774
80120,3.549578825355534
80521,3.539995115360715
80124,3.4898086474204937
81007,3.392652286134421
80219,3.3778174688236997
81416,3.353631604903271
80108,3.344384295351426
81505,3.267864947896001
80231,3.2198376032820457
80246,3.171128226882365
80110,3.1579349709773945
80002,3.09513763288198
80026,3.0654736213614266
81001,3.052145277067485
80424,3.0
80128,2.998883552590944
80249,2.9114716327999868
81201,2.9054357508057365
80014,2.894658030538612
80517,2.8194939361557494
80033,2.8183627247851084
80504,2.786779379566407
80210,2.782685454346429
80915,2.716061387861674
80723,2.709353609080367
80224,2.6919930237343244
81435,2.6356605896757817
81230,2.6305480075655385
81008,2.602486696165571
80807,2.586850013342743
80004,2.563011290059351
80214,2.559655591560138
81623,2.5545470886098918

2025-01-21 09:08:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:08:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:08:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:08:51 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-21 09:08:51 - snowflake.connector.connection - INFO - closed
2025-01-21 09:08:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:08:51 - root - INFO - SQL:
SELECT
    final_results."zip_code",
    SUM(final_results."bank_locations_in_blockgroup") / COUNT(DISTINCT final_results."geo_id") AS "bank_locations_per_block_group"
FROM (
    SELECT
        bg."geo_id",
        z."zip_code",
        (bl."bank_locations" * (
            ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
        )) AS "bank_locations_in_blockgroup"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
      ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
    JOIN (
        SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
        FROM "FDA"."FDIC_BANKS"."LOCATIONS"
        WHERE "state" = 'CO'
        GROUP BY "zip_code"
    ) bl ON z."zip_code" = bl."zip_code"
    WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
) final_results
GROUP BY final_results."zip_code"
ORDER BY "bank_locations_per_block_group" DESC
LIMIT 1
Results:
zip_code,bank_locations_per_block_group
80501,18.6873891486805

2025-01-21 09:08:51 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:08:51 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:08:51 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:08:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-21 09:08:55 - snowflake.connector.connection - INFO - closed
2025-01-21 09:08:55 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:08:55 - root - INFO - SQL:
SELECT
    "zip_code",
    "bank_locations_per_block_group"
FROM (
    SELECT
        final_results."zip_code",
        SUM(final_results."bank_locations_in_blockgroup") / COUNT(DISTINCT final_results."geo_id") AS "bank_locations_per_block_group"
    FROM (
        SELECT
            bg."geo_id",
            z."zip_code",
            (bl."bank_locations" * (
                ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
            )) AS "bank_locations_in_blockgroup"
        FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
        JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
          ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
        JOIN (
            SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
            FROM "FDA"."FDIC_BANKS"."LOCATIONS"
            WHERE "state" = 'CO'
            GROUP BY "zip_code"
        ) bl ON z."zip_code" = bl."zip_code"
        WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
    ) final_results
    GROUP BY final_results."zip_code"
    ORDER BY "bank_locations_per_block_group" DESC
    LIMIT 1
)
Results:
zip_code,bank_locations_per_block_group
80501,18.687389148680502

2025-01-21 09:08:55 - root - INFO - itercount: 0
2025-01-21 09:08:55 - root - INFO - Database Name: FDA
Schema Name: CENSUS_UTILITY
DDL describes table information.
,0
table_name,FIPS_CLASS_CODE
description,
DDL,"create or replace TABLE FIPS_CLASS_CODE (
	""fips_class_code"" VARCHAR(16777216),
	""code_description"" VARCHAR(16777216)
);"

,1
table_name,FUNCTIONAL_STATUS_CODES
description,
DDL,"create or replace TABLE FUNCTIONAL_STATUS_CODES (
	""functional_status_code"" VARCHAR(16777216),
	""code_description"" VARCHAR(16777216),
	""associated_geographic_entity"" VARCHAR(16777216)
);"

,2
table_name,MTFCC_FEATURE_CLASS_CODES
description,
DDL,"create or replace TABLE MTFCC_FEATURE_CLASS_CODES (
	""feature_class_code"" VARCHAR(16777216),
	""feature_class"" VARCHAR(16777216),
	""superclass"" VARCHAR(16777216),
	""point"" BOOLEAN,
	""linear"" BOOLEAN,
	""areal"" BOOLEAN,
	""description"" VARCHAR(16777216)
);"

,3
table_name,FIPS_CODES_ALL
description,
DDL,"create or replace TABLE FIPS_CODES_ALL (
	""summary_level"" VARCHAR(16777216),
	""summary_level_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_subdivision_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""consolidated_city_fips_code"" VARCHAR(16777216),
	""area_name"" VARCHAR(16777216)
);"

,4
table_name,LSAD_CODES
description,
DDL,"create or replace TABLE LSAD_CODES (
	""lsad_code"" VARCHAR(16777216),
	""lsad_description"" VARCHAR(16777216),
	""associated_geographic_entities"" VARCHAR(16777216)
);"

,5
table_name,FIPS_CODES_STATES
description,
DDL,"create or replace TABLE FIPS_CODES_STATES (
	""state_fips_code"" VARCHAR(16777216),
	""state_postal_abbreviation"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""state_gnisid"" VARCHAR(16777216)
);"

Database Name: FDA
Schema Name: FDA_FOOD
DDL describes table information.
,0
table_name,FOOD_ENFORCEMENT
description,
DDL,"create or replace TABLE FOOD_ENFORCEMENT (
	""classification"" VARCHAR(16777216),
	""center_classification_date"" DATE,
	""report_date"" DATE,
	""postal_code"" VARCHAR(16777216),
	""termination_date"" DATE,
	""recall_initiation_date"" DATE,
	""recall_number"" VARCHAR(16777216),
	""city"" VARCHAR(16777216),
	""event_id"" NUMBER(38,0),
	""distribution_pattern"" VARCHAR(16777216),
	""recalling_firm"" VARCHAR(16777216),
	""voluntary_mandated"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""reason_for_recall"" VARCHAR(16777216),
	""initial_firm_notification"" VARCHAR(16777216),
	""status"" VARCHAR(16777216),
	""product_type"" VARCHAR(16777216),
	""country"" VARCHAR(16777216),
	""product_description"" VARCHAR(16777216),
	""code_info"" VARCHAR(16777216),
	""address_1"" VARCHAR(16777216),
	""address_2"" VARCHAR(16777216),
	""product_quantity"" VARCHAR(16777216),
	""more_code_info"" VARCHAR(16777216)
);"

,1
table_name,FOOD_EVENTS
description,
DDL,"create or replace TABLE FOOD_EVENTS (
	""report_number"" VARCHAR(16777216),
	""reactions"" VARCHAR(16777216),
	""outcomes"" VARCHAR(16777216),
	""products_brand_name"" VARCHAR(16777216),
	""products_industry_code"" VARCHAR(16777216),
	""products_role"" VARCHAR(16777216),
	""products_industry_name"" VARCHAR(16777216),
	""date_created"" DATE,
	""date_started"" DATE,
	""consumer_gender"" VARCHAR(16777216),
	""consumer_age"" FLOAT,
	""consumer_age_unit"" VARCHAR(16777216)
);"

Database Name: FDA
Schema Name: FDIC_BANKS
DDL describes table information.
,0
table_name,INSTITUTIONS
description,
DDL,"create or replace TABLE INSTITUTIONS (
	""fdic_certificate_number"" VARCHAR(16777216),
	""institution_name"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""fdic_id"" VARCHAR(16777216),
	""docket"" VARCHAR(16777216),
	""active"" BOOLEAN,
	""address"" VARCHAR(16777216),
	""total_assets"" NUMBER(38,0),
	""bank_charter_class"" VARCHAR(16777216),
	""change_code_1"" VARCHAR(16777216),
	""change_code_2"" VARCHAR(16777216),
	""change_code_3"" VARCHAR(16777216),
	""change_code_4"" VARCHAR(16777216),
	""change_code_5"" VARCHAR(16777216),
	""change_code_6"" VARCHAR(16777216),
	""change_code_7"" VARCHAR(16777216),
	""change_code_8"" VARCHAR(16777216),
	""change_code_9"" VARCHAR(16777216),
	""change_code_10"" VARCHAR(16777216),
	""change_code_11"" VARCHAR(16777216),
	""change_code_12"" VARCHAR(16777216),
	""change_code_13"" VARCHAR(16777216),
	""change_code_14"" VARCHAR(16777216),
	""change_code_15"" VARCHAR(16777216),
	""occ_charter"" VARCHAR(16777216),
	""chartering_agency"" VARCHAR(16777216),
	""conservatorship"" BOOLEAN,
	""city"" VARCHAR(16777216),
	""category_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""established_date"" DATE,
	""last_updated"" DATE,
	""effective_date"" DATE,
	""end_effective_date"" DATE,
	""denovo_institute"" BOOLEAN,
	""total_deposits"" NUMBER(38,0),
	""equity_capital"" NUMBER(38,0),
	""fdic_geo_region"" VARCHAR(16777216),
	""fdic_supervisory_region"" VARCHAR(16777216),
	""fdic_supervisory_region_code"" VARCHAR(16777216),
	""fed_reserve_district"" VARCHAR(16777216),
	""fed_reserve_district_id"" VARCHAR(16777216),
	""fed_reserve_unique_id"" VARCHAR(16777216),
	""federal_charter"" BOOLEAN,
	""fdic_field_office"" VARCHAR(16777216),
	""iba"" BOOLEAN,
	""inactive_flag"" BOOLEAN,
	""insurance_fund_membership"" VARCHAR(16777216),
	""secondary_insurance_fund"" VARCHAR(16777216),
	""deposit_insurance_date"" DATE,
	""credit_card_institution"" BOOLEAN,
	""bank_insurance_fund_member"" BOOLEAN,
	""insured_commercial_bank"" BOOLEAN,
	""deposit_insurance_fund_member"" BOOLEAN,
	""fdic_insured"" BOOLEAN,
	""saif_insured"" BOOLEAN,
	""insured_savings_institute"" BOOLEAN,
	""new_cert_number"" VARCHAR(16777216),
	""oakar_institute"" BOOLEAN,
	""ots_region"" VARCHAR(16777216),
	""last_structural_change"" DATE,
	""qbp_region"" VARCHAR(16777216),
	""regulator"" VARCHAR(16777216),
	""report_date"" DATE,
	""reporting_period_end_date"" DATE,
	""state_chartered"" BOOLEAN,
	""return_on_assets"" FLOAT,
	""roa_quarterly"" FLOAT,
	""roa_pretax"" FLOAT,
	""row_pretax_quarterly"" FLOAT,
	""return_on_equity"" FLOAT,
	""roe_quarterly"" FLOAT,
	""run_date"" DATE,
	""sasser_institute"" BOOLEAN,
	""law_sasser"" BOOLEAN,
	""state"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""trade_name_1"" VARCHAR(16777216),
	""trade_name_2"" VARCHAR(16777216),
	""trade_name_3"" VARCHAR(16777216),
	""trade_name_4"" VARCHAR(16777216),
	""trade_name_5"" VARCHAR(16777216),
	""trade_name_6"" VARCHAR(16777216),
	""zip_code"" VARCHAR(16777216),
	""occ_district"" VARCHAR(16777216),
	""ultimate_cert_number"" VARCHAR(16777216),
	""cfpb_supervisory_flag"" BOOLEAN,
	""cfpb_supervisory_start_date"" DATE,
	""cfpb_supervisory_end_date"" DATE,
	""offices_count"" NUMBER(38,0),
	""parent_fdic_cert"" VARCHAR(16777216),
	""parent_parcert"" VARCHAR(16777216),
	""high_holder_city"" VARCHAR(16777216),
	""total_domestic_deposits"" NUMBER(38,0),
	""ffiec_call_report_filer"" BOOLEAN,
	""holding_company_flag"" BOOLEAN,
	""ag_lending_flag"" BOOLEAN,
	""ownership_type"" VARCHAR(16777216),
	""top_holder"" VARCHAR(16777216),
	""net_income"" NUMBER(38,0),
	""quarterly_net_income"" NUMBER(38,0),
	""office_count_domestic"" NUMBER(38,0),
	""office_count_foreign"" NUMBER(38,0),
	""office_count_us_territories"" NUMBER(38,0),
	""rssd_id"" VARCHAR(16777216),
	""holding_company_state"" VARCHAR(16777216),
	""subchap_s_indicator"" BOOLEAN,
	""trust_powers_status"" VARCHAR(16777216),
	""asset_concentration_hierarchy"" VARCHAR(16777216),
	""primary_specialization"" VARCHAR(16777216),
	""csa_name"" VARCHAR(16777216),
	""csa_fips_code"" VARCHAR(16777216),
	""csa_indicator"" BOOLEAN,
	""cbsa_name"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""cbsa_metro_flag"" BOOLEAN,
	""cbsa_micro_flag"" BOOLEAN,
	""cbsa_division_name"" VARCHAR(16777216),
	""cbsa_division_fips_code"" VARCHAR(16777216),
	""cbsa_division_flag"" BOOLEAN
);"

,1
table_name,LOCATIONS
description,
DDL,"create or replace TABLE LOCATIONS (
	""fdic_certificate_number"" VARCHAR(16777216),
	""institution_name"" VARCHAR(16777216),
	""branch_name"" VARCHAR(16777216),
	""branch_number"" VARCHAR(16777216),
	""main_office"" BOOLEAN,
	""branch_address"" VARCHAR(16777216),
	""branch_city"" VARCHAR(16777216),
	""zip_code"" VARCHAR(16777216),
	""branch_county"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""institution_class"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""cbsa_name"" VARCHAR(16777216),
	""cbsa_division_flag"" BOOLEAN,
	""cbsa_division_fips_code"" NUMBER(38,0),
	""cbsa_division_name"" VARCHAR(16777216),
	""cbsa_metro_flag"" BOOLEAN,
	""cbsa_metro_fips_code"" VARCHAR(16777216),
	""cbsa_metro_name"" VARCHAR(16777216),
	""cbsa_micro_flag"" BOOLEAN,
	""csa_flag"" BOOLEAN,
	""csa_fips_code"" VARCHAR(16777216),
	""csa_name"" VARCHAR(16777216),
	""date_established"" DATE,
	""fdic_uninum"" VARCHAR(16777216),
	""last_updated"" DATE,
	""service_type"" VARCHAR(16777216),
	""branch_fdic_uninum"" VARCHAR(16777216)
);"

Database Name: FDA
Schema Name: GEO_CENSUS_BLOCKGROUPS
DDL describes table information.
,0
table_name,BLOCKGROUPS_04
description,
DDL,"create or replace TABLE BLOCKGROUPS_04 (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""blockgroup_ce"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""blockgroup_geom"" BINARY(8388608)
);"

Some other tables have the similar structure: ['BLOCKGROUPS_04', 'BLOCKGROUPS_08', 'BLOCKGROUPS_13', 'BLOCKGROUPS_16', 'BLOCKGROUPS_20', 'BLOCKGROUPS_23', 'BLOCKGROUPS_25', 'BLOCKGROUPS_31', 'BLOCKGROUPS_32', 'BLOCKGROUPS_39', 'BLOCKGROUPS_54', 'BLOCKGROUPS_29', 'BLOCKGROUPS_48', 'BLOCKGROUPS_19', 'BLOCKGROUPS_49', 'BLOCKGROUPS_24', 'BLOCKGROUPS_06', 'BLOCKGROUPS_09', 'BLOCKGROUPS_10', 'BLOCKGROUPS_18', 'BLOCKGROUPS_26', 'BLOCKGROUPS_36', 'BLOCKGROUPS_66', 'BLOCKGROUPS_40', 'BLOCKGROUPS_41', 'BLOCKGROUPS_01', 'BLOCKGROUPS_11', 'BLOCKGROUPS_12', 'BLOCKGROUPS_17', 'BLOCKGROUPS_30', 'BLOCKGROUPS_47', 'BLOCKGROUPS_53', 'BLOCKGROUPS_55', 'BLOCKGROUPS_33', 'BLOCKGROUPS_45', 'BLOCKGROUPS_51', 'BLOCKGROUPS_72', 'BLOCKGROUPS_02', 'BLOCKGROUPS_05', 'BLOCKGROUPS_15', 'BLOCKGROUPS_21', 'BLOCKGROUPS_22', 'BLOCKGROUPS_28', 'BLOCKGROUPS_34', 'BLOCKGROUPS_35', 'BLOCKGROUPS_37', 'BLOCKGROUPS_38', 'BLOCKGROUPS_42', 'BLOCKGROUPS_44', 'BLOCKGROUPS_50', 'BLOCKGROUPS_56', 'BLOCKGROUPS_60', 'BLOCKGROUPS_69', 'BLOCKGROUPS_78', 'BLOCKGROUPS_27', 'BLOCKGROUPS_46']
,1
table_name,US_BLOCKGROUPS_NATIONAL
description,
DDL,"create or replace TABLE US_BLOCKGROUPS_NATIONAL (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""blockgroup_ce"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""blockgroup_geom"" BINARY(8388608)
);"

Database Name: FDA
Schema Name: GEO_US_BOUNDARIES
DDL describes table information.
,0
table_name,ADJACENT_COUNTIES
description,
DDL,"create or replace TABLE ADJACENT_COUNTIES (
	""county"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""neighbors"" VARIANT,
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

,1
table_name,ADJACENT_STATES
description,
DDL,"create or replace TABLE ADJACENT_STATES (
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

,2
table_name,CBSA
description,
DDL,"create or replace TABLE CBSA (
	""geo_id"" VARCHAR(16777216),
	""csa_geo_id"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""msa_indicator"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""cbsa_geom"" BINARY(8388608)
);"

,3
table_name,CNECTA
description,
DDL,"create or replace TABLE CNECTA (
	""geo_id"" VARCHAR(16777216),
	""cnecta_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""cnecta_geom"" BINARY(8388608)
);"

,4
table_name,COASTLINE
description,
DDL,"create or replace TABLE COASTLINE (
	""name"" VARCHAR(16777216),
	""coastline_geom"" BINARY(8388608)
);"

,5
table_name,CONGRESS_DISTRICT_115
description,
DDL,"create or replace TABLE CONGRESS_DISTRICT_115 (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""district_fips_code"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""congress_session"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" BOOLEAN,
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""district_geom"" BINARY(8388608)
);"

Some other tables have the similar structure: ['CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116']
,6
table_name,COUNTIES
description,
DDL,"create or replace TABLE COUNTIES (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_gnis_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""csa_fips_code"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""met_div_fips_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""county_geom"" BINARY(8388608)
);"

,7
table_name,NATIONAL_OUTLINE
description,
DDL,"create or replace TABLE NATIONAL_OUTLINE (
	""us_outline_geom"" BINARY(8388608),
	""aff_geo_id"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""name"" VARCHAR(16777216)
);"

,8
table_name,RAILWAYS
description,
DDL,"create or replace TABLE RAILWAYS (
	""geo_id"" NUMBER(38,0),
	""full_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""railway_geom"" VARCHAR(16777216)
);"

,9
table_name,STATES
description,
DDL,"create or replace TABLE STATES (
	""geo_id"" VARCHAR(16777216),
	""region_code"" VARCHAR(16777216),
	""division_code"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_gnis_code"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""state_geom"" BINARY(8388608)
);"

,10
table_name,CSA
description,
DDL,"create or replace TABLE CSA (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""msa_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""csa_geom"" BINARY(8388608)
);"

,11
table_name,METROPOLITAN_DIVISIONS
description,
DDL,"create or replace TABLE METROPOLITAN_DIVISIONS (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""cbsa_code"" VARCHAR(16777216),
	""metdiv_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""metdiv_geom"" BINARY(8388608)
);"

,12
table_name,NWS_FORECAST_REGIONS
description,
DDL,"create or replace TABLE NWS_FORECAST_REGIONS (
	""state"" VARCHAR(16777216),
	""cwa"" VARCHAR(16777216),
	""time_zone"" VARCHAR(16777216),
	""fe_area"" VARCHAR(16777216),
	""zone"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""state_zone"" VARCHAR(16777216),
	""lon"" FLOAT,
	""lat"" FLOAT,
	""shortname"" VARCHAR(16777216),
	""shape_geometry"" BINARY(8388608)
);"

,13
table_name,URBAN_AREAS
description,
DDL,"create or replace TABLE URBAN_AREAS (
	""geo_id"" VARCHAR(16777216),
	""urban_area_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""area_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""urban_area_geom"" BINARY(8388608)
);"

,14
table_name,ZIP_CODES
description,
DDL,"create or replace TABLE ZIP_CODES (
	""zip_code"" VARCHAR(16777216),
	""city"" VARCHAR(16777216),
	""county"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_code"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""zip_code_geom"" BINARY(8388608)
);"

External knowledge that might be helpful: 
# Calculation Method: Overlap Ratio and Bank Location Data

This document describes the method used to calculate the number of bank institutions per postal code area (ZIP code) by combining geospatial data and bank location data, focusing on the overlap between postal code areas and census block groups.

## 1. Geospatial Intersection of Postal Code Areas and Census Block Groups
We are using two geographical units:
- **ZIP Code Areas**: Represented by geometries from the ZIP code boundaries dataset.
- **Census Block Groups**: Represented by geometries from the national census block groups dataset.

### Key Calculation:
- The method calculates the area of overlap between each ZIP code's geometry and each block group's geometry.
- The ratio of this intersection area to the total block group area is computed as the **overlap ratio**.

This overlap ratio represents the proportion of a block group that falls within a given ZIP code.

## 2. Bank Location Distribution Based on Overlap Ratio
The next step involves distributing the number of bank locations to the overlapping census block groups based on the calculated overlap ratio.

### Key Calculation:
- For each block group, the number of bank locations is proportionally assigned based on the overlap size. The total number of bank locations in a ZIP code is distributed to the block groups using the overlap ratio.

This provides the number of bank institutions for each block group, adjusted for the overlap with ZIP code areas.

## 3. Aggregation by ZIP Code Area
Finally, the results are aggregated by ZIP code to determine which postal code has the highest number of bank institutions.

### Key Calculation:
- The process involves grouping by ZIP code and finding the maximum number of bank locations per block group.

The table structure information is ({database name: {schema name: {table name}}}): 
{'FDA': {'CENSUS_UTILITY': ['FIPS_CLASS_CODE', 'FIPS_CODES_ALL', 'FIPS_CODES_STATES', 'FUNCTIONAL_STATUS_CODES', 'LSAD_CODES', 'MTFCC_FEATURE_CLASS_CODES'], 'FDA_FOOD': ['FOOD_ENFORCEMENT', 'FOOD_EVENTS'], 'FDIC_BANKS': ['INSTITUTIONS', 'LOCATIONS'], 'GEO_CENSUS_BLOCKGROUPS': ['BLOCKGROUPS_01', 'BLOCKGROUPS_02', 'BLOCKGROUPS_04', 'BLOCKGROUPS_05', 'BLOCKGROUPS_06', 'BLOCKGROUPS_08', 'BLOCKGROUPS_09', 'BLOCKGROUPS_10', 'BLOCKGROUPS_11', 'BLOCKGROUPS_12', 'BLOCKGROUPS_13', 'BLOCKGROUPS_15', 'BLOCKGROUPS_16', 'BLOCKGROUPS_17', 'BLOCKGROUPS_18', 'BLOCKGROUPS_19', 'BLOCKGROUPS_20', 'BLOCKGROUPS_21', 'BLOCKGROUPS_22', 'BLOCKGROUPS_23', 'BLOCKGROUPS_24', 'BLOCKGROUPS_25', 'BLOCKGROUPS_26', 'BLOCKGROUPS_27', 'BLOCKGROUPS_28', 'BLOCKGROUPS_29', 'BLOCKGROUPS_30', 'BLOCKGROUPS_31', 'BLOCKGROUPS_32', 'BLOCKGROUPS_33', 'BLOCKGROUPS_34', 'BLOCKGROUPS_35', 'BLOCKGROUPS_36', 'BLOCKGROUPS_37', 'BLOCKGROUPS_38', 'BLOCKGROUPS_39', 'BLOCKGROUPS_40', 'BLOCKGROUPS_41', 'BLOCKGROUPS_42', 'BLOCKGROUPS_44', 'BLOCKGROUPS_45', 'BLOCKGROUPS_46', 'BLOCKGROUPS_47', 'BLOCKGROUPS_48', 'BLOCKGROUPS_49', 'BLOCKGROUPS_50', 'BLOCKGROUPS_51', 'BLOCKGROUPS_53', 'BLOCKGROUPS_54', 'BLOCKGROUPS_55', 'BLOCKGROUPS_56', 'BLOCKGROUPS_60', 'BLOCKGROUPS_66', 'BLOCKGROUPS_69', 'BLOCKGROUPS_72', 'BLOCKGROUPS_78', 'US_BLOCKGROUPS_NATIONAL'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'ADJACENT_STATES', 'CBSA', 'CNECTA', 'COASTLINE', 'CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116', 'COUNTIES', 'CSA', 'METROPOLITAN_DIVISIONS', 'NATIONAL_OUTLINE', 'NWS_FORECAST_REGIONS', 'RAILWAYS', 'STATES', 'URBAN_AREAS', 'ZIP_CODES']}}
Begin Exploring Related Columns
The relevant tables and columns for this task are:

**Tables and Columns:**

1. **`FDA.GEO_US_BOUNDARIES.ZIP_CODES`**
   - `"zip_code"`: Identifies the ZIP code area; potential usage: to join with bank locations.
   - `"state_code"`: To filter for Colorado (`"state_code" = 'CO'`).
   - `"zip_code_geom"`: Geometry of the ZIP code area; potential usage: to calculate overlap with block group geometries.

2. **`FDA.GEO_CENSUS_BLOCKGROUPS.US_BLOCKGROUPS_NATIONAL`**
   - `"geo_id"`: Unique identifier for block groups; potential usage: to join overlap calculations.
   - `"state_fips_code"`: To filter for Colorado (`"state_fips_code" = '08'`).
   - `"blockgroup_geom"`: Geometry of the block group; potential usage: to calculate overlap with ZIP code geometries.

3. **`FDA.FDIC_BANKS.LOCATIONS`**
   - `"zip_code"`: ZIP code of bank branches; potential usage: to count bank locations per ZIP code.
   - `"state"`: To filter for Colorado (`"state" = 'CO'`).
   - `"branch_fdic_uninum"`: Unique identifier for bank branches; potential usage: to count the number of bank locations.

**Conditions:**

- Filter records where:
  - ZIP codes and bank locations are in Colorado.
    - For ZIP codes: `"state_code" = 'CO'`.
    - For bank locations: `"state" = 'CO'`.
  - Block groups are in Colorado.
    - `"state_fips_code" = '08'` (FIPS code for Colorado).

---

**SQL Queries:**

1. **List all ZIP codes in Colorado:**

   ```sql
   SELECT DISTINCT "zip_code", "state_code"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 100;
   ```

2. **Count bank locations per ZIP code in Colorado:**

   ```sql
   SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   GROUP BY "zip_code"
   LIMIT 100;
   ```

3. **List block groups in Colorado:**

   ```sql
   SELECT "geo_id", "state_fips_code", "county_fips_code", "blockgroup_ce"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 100;
   ```

4. **Retrieve geometries of ZIP codes in Colorado:**

   ```sql
   SELECT "zip_code", "zip_code_geom"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 100;
   ```

5. **Retrieve geometries of block groups in Colorado:**

   ```sql
   SELECT "geo_id", "blockgroup_geom"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 100;
   ```

6. **Get bank branch addresses and ZIP codes in Colorado:**

   ```sql
   SELECT "branch_fdic_uninum", "branch_address", "branch_city", "zip_code"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 100;
   ```

7. **Calculate the area of each block group in Colorado:**

   ```sql
   SELECT "geo_id", ST_AREA("blockgroup_geom") AS "blockgroup_area"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 100;
   ```

8. **Calculate the area of each ZIP code in Colorado:**

   ```sql
   SELECT "zip_code", ST_AREA("zip_code_geom") AS "zip_code_area"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 100;
   ```

9. **Find overlapping areas between ZIP codes and block groups in Colorado:**

   ```sql
   SELECT
       z."zip_code",
       bg."geo_id",
       ST_AREA(ST_INTERSECTION(z."zip_code_geom", bg."blockgroup_geom")) AS "overlap_area"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
   JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
     ON ST_INTERSECTS(z."zip_code_geom", bg."blockgroup_geom")
   WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
   LIMIT 100;
   ```

10. **Calculate overlap ratio between ZIP codes and block groups in Colorado:**

    ```sql
    SELECT
        z."zip_code",
        bg."geo_id",
        ST_AREA(ST_INTERSECTION(z."zip_code_geom", bg."blockgroup_geom")) / ST_AREA(bg."blockgroup_geom") AS "overlap_ratio"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
      ON ST_INTERSECTS(z."zip_code_geom", bg."blockgroup_geom")
    WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
    LIMIT 100;
    ```

11. **Distribute bank locations to block groups based on overlap ratio:**

    ```sql
    SELECT
        bg."geo_id",
        z."zip_code",
        (bl."bank_locations" * (
            ST_AREA(ST_INTERSECTION(z."zip_code_geom", bg."blockgroup_geom")) / ST_AREA(bg."blockgroup_geom")
        )) AS "bank_locations_in_blockgroup"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
      ON ST_INTERSECTS(z."zip_code_geom", bg."blockgroup_geom")
    JOIN (
        SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
        FROM "FDA"."FDIC_BANKS"."LOCATIONS"
        WHERE "state" = 'CO'
        GROUP BY "zip_code"
    ) bl ON z."zip_code" = bl."zip_code"
    WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
    LIMIT 100;
    ```

12. **Calculate total bank locations per block group in Colorado:**

    ```sql
    SELECT
        bg."geo_id",
        SUM((bl."bank_locations" * (
            ST_AREA(ST_INTERSECTION(z."zip_code_geom", bg."blockgroup_geom")) / ST_AREA(bg."blockgroup_geom")
        ))) AS "total_bank_locations"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
      ON ST_INTERSECTS(z."zip_code_geom", bg."blockgroup_geom")
    JOIN (
        SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
        FROM "FDA"."FDIC_BANKS"."LOCATIONS"
        WHERE "state" = 'CO'
        GROUP BY "zip_code"
    ) bl ON z."zip_code" = bl."zip_code"
    WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
    GROUP BY bg."geo_id"
    LIMIT 100;
    ```

13. **Find the ZIP code in Colorado with the highest concentration of bank locations per block group:**

    ```sql
    SELECT
        final_results."zip_code",
        SUM(final_results."bank_locations_in_blockgroup") / COUNT(DISTINCT final_results."geo_id") AS "bank_locations_per_block_group"
    FROM (
        SELECT
            bg."geo_id",
            z."zip_code",
            (bl."bank_locations" * (
                ST_AREA(ST_INTERSECTION(z."zip_code_geom", bg."blockgroup_geom")) / ST_AREA(bg."blockgroup_geom")
            )) AS "bank_locations_in_blockgroup"
        FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
        JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
          ON ST_INTERSECTS(z."zip_code_geom", bg."blockgroup_geom")
        JOIN (
            SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
            FROM "FDA"."FDIC_BANKS"."LOCATIONS"
            WHERE "state" = 'CO'
            GROUP BY "zip_code"
        ) bl ON z."zip_code" = bl."zip_code"
        WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
    ) final_results
    GROUP BY final_results."zip_code"
    ORDER BY "bank_locations_per_block_group" DESC
    LIMIT 100;
    ```

14. **Retrieve the ZIP code with the highest concentration of bank locations per block group:**

    ```sql
    SELECT
        final_results."zip_code",
        SUM(final_results."bank_locations_in_blockgroup") / COUNT(DISTINCT final_results."geo_id") AS "bank_locations_per_block_group"
    FROM (
        SELECT
            bg."geo_id",
            z."zip_code",
            (bl."bank_locations" * (
                ST_AREA(ST_INTERSECTION(z."zip_code_geom", bg."blockgroup_geom")) / ST_AREA(bg."blockgroup_geom")
            )) AS "bank_locations_in_blockgroup"
        FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
        JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
          ON ST_INTERSECTS(z."zip_code_geom", bg."blockgroup_geom")
        JOIN (
            SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
            FROM "FDA"."FDIC_BANKS"."LOCATIONS"
            WHERE "state" = 'CO'
            GROUP BY "zip_code"
        ) bl ON z."zip_code" = bl."zip_code"
        WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
    ) final_results
    GROUP BY final_results."zip_code"
    ORDER BY "bank_locations_per_block_group" DESC
    LIMIT 1;
    ```

15. **Display the ZIP code and the highest concentration value:**

    ```sql
    SELECT
        "zip_code",
        "bank_locations_per_block_group"
    FROM (
        SELECT
            final_results."zip_code",
            SUM(final_results."bank_locations_in_blockgroup") / COUNT(DISTINCT final_results."geo_id") AS "bank_locations_per_block_group"
        FROM (
            SELECT
                bg."geo_id",
                z."zip_code",
                (bl."bank_locations" * (
                    ST_AREA(ST_INTERSECTION(z."zip_code_geom", bg."blockgroup_geom")) / ST_AREA(bg."blockgroup_geom")
                )) AS "bank_locations_in_blockgroup"
            FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
            JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
              ON ST_INTERSECTS(z."zip_code_geom", bg."blockgroup_geom")
            JOIN (
                SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
                FROM "FDA"."FDIC_BANKS"."LOCATIONS"
                WHERE "state" = 'CO'
                GROUP BY "zip_code"
            ) bl ON z."zip_code" = bl."zip_code"
            WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
        ) final_results
        GROUP BY final_results."zip_code"
        ORDER BY "bank_locations_per_block_group" DESC
        LIMIT 1
    );
    ```

---

These queries progressively explore the relevant data and perform calculations needed to identify the Colorado ZIP code with the highest concentration of bank locations per block group, based on the overlap between ZIP codes and block groups.Query:
SELECT DISTINCT "zip_code", "state_code"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 100;
Answer:
zip_code,state_code
80470,CO
80497,CO
81430,CO
81334,CO
80030,CO
80452,CO
80226,CO
81082,CO
80642,CO
81055,CO
80476,CO
81067,CO
80543,CO
80863,CO
81008,CO
81030,CO
80447,CO
81149,CO
80467,CO
80007,CO
80427,CO
80733,CO
80479,CO
80620,CO
80113,CO
81231,CO
81043,CO
80648,CO
80033,CO
80212,CO
81092,CO
80914,CO
80132,CO
80233,CO
80517,CO
80454,CO
80525,CO
80812,CO
80833,CO
81654,CO
80478,CO
80116,CO
80023,CO
80401,CO
80820,CO
80705,CO
80127,CO
81632,CO
81147,CO
80133,CO
81155,CO
80757,CO
80918,CO
81122,CO
80861,CO
81121,CO
80504,CO
80436,CO
80644,CO
81003,CO
80209,CO
80545,CO
81423,CO
81089,CO
80010,CO
81136,CO
81041,CO
80651,CO
81049,CO
81521,CO
81020,CO
80809,CO
81126,CO
80823,CO
80542,CO
80528,CO
80018,CO
80219,CO
81657,CO
80802,CO
80438,CO
81645,CO
80610,CO
81601,CO
80125,CO
81526,CO
81091,CO
80759,CO
81045,CO
80601,CO
81422,CO
81244,CO
81418,CO
80537,CO
80424,CO
80821,CO
81433,CO
80728,CO
80105,CO
80910,CO
Query:
SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   GROUP BY "zip_code"
   LIMIT 100;
Answer:
zip_code,bank_locations
80913,2
80920,18
80916,2
80907,7
80922,4
80911,1
80914,1
80923,2
80906,9
80921,9
80817,5
80909,7
80924,1
80840,1
80525,24
80915,6
80537,15
80538,10
81501,13
81521,5
81303,3
81520,4
81505,9
80701,6
80513,3
80526,4
80728,1
80751,7
80424,6
81147,7
81090,1
81201,5
81624,1
81504,2
81422,1
81526,1
81419,2
80734,3
81144,3
80758,3
80014,6
80016,12
81047,1
80304,1
80108,7
80132,4
81301,15
80549,2
81122,2
80720,5
81503,1
81432,2
81057,1
80825,1
80442,3
81092,1
81154,1
80202,31
80218,5
81413,1
80232,1
81620,7
80821,1
80116,1
80918,12
80904,2
80524,13
81302,1
80723,5
80863,3
81137,1
80443,5
80435,3
81082,7
81067,4
80602,4
80122,10
80017,3
80027,8
80207,7
81648,1
80903,24
80521,6
80831,4
80917,1
80517,5
81252,2
81230,5
81089,2
80828,3
81149,1
80933,1
80654,1
81211,5
81416,7
81428,2
81324,1
80482,1
80459,2
80461,3
Query:
SELECT "geo_id", "state_fips_code", "county_fips_code", "blockgroup_ce"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 100;
Answer:
geo_id,state_fips_code,county_fips_code,blockgroup_ce
080310029012,08,031,2
080519636004,08,051,4
080130137021,08,013,1
080050839001,08,005,1
080690018043,08,069,3
081230014131,08,123,1
080130122041,08,013,1
081230011003,08,123,3
080590098493,08,059,3
080310039023,08,031,3
080410047051,08,041,1
080839694002,08,083,2
081230015002,08,123,2
080299649002,08,029,2
080410071022,08,041,2
080590098071,08,059,1
080130121012,08,013,2
081010023002,08,101,2
080590104022,08,059,2
080410045072,08,041,2
080410060002,08,041,2
081170001005,08,117,5
080310036025,08,031,5
080310013015,08,031,5
080299651002,08,029,2
080590120571,08,059,1
080130132051,08,013,1
080370002001,08,037,1
080410045082,08,041,2
080350145042,08,035,2
080310068112,08,031,2
081010022002,08,101,2
080590111004,08,059,4
081010028015,08,101,5
080350144052,08,035,2
081010028014,08,101,4
080919676004,08,091,4
080310030021,08,031,1
080140302001,08,014,1
080130135053,08,013,3
080839694004,08,083,4
080050807003,08,005,3
080350139102,08,035,2
080310028012,08,031,2
080410064004,08,041,4
080330001002,08,033,2
080310028034,08,031,4
080039602002,08,003,2
080310046021,08,031,1
080410067001,08,041,1
081230019051,08,123,1
080050820002,08,005,2
080590120572,08,059,2
080140308002,08,014,2
081230019071,08,123,1
081230002002,08,123,2
080310037023,08,031,3
080079742001,08,007,1
080410057001,08,041,1
080690005031,08,069,1
081230014041,08,123,1
080310013011,08,031,1
080590098481,08,059,1
080310042011,08,031,1
080350145041,08,035,1
080410023002,08,041,2
081099776001,08,109,1
080310068144,08,031,4
080410051112,08,041,2
080590105021,08,059,1
080050808001,08,005,1
080050823002,08,005,2
080310055021,08,031,1
080590104061,08,059,1
080590098352,08,059,2
081259632001,08,125,1
081070007003,08,107,3
080310030022,08,031,2
080310053001,08,031,1
080859666013,08,085,3
080050056341,08,005,1
080619601002,08,061,2
080590112021,08,059,1
080010093045,08,001,5
080690011042,08,069,2
080050804003,08,005,3
080050056342,08,005,2
080050850001,08,005,1
081230014081,08,123,1
081230012021,08,123,1
080690028012,08,069,2
080490002024,08,049,4
080370004011,08,037,1
080279701002,08,027,2
080590103043,08,059,3
080310013012,08,031,2
080050068154,08,005,4
080050067073,08,005,3
080299650004,08,029,4
080050073024,08,005,4
Query:
SELECT "zip_code", "zip_code_geom"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 100;
Answer:
Too long, hard cut:
zip_code,zip_code_geom
80621,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x88\x03\x00\x00\x9b\x1f\x7fiQ<Z\xc0\xc2\xd9\xade2\x06D@d\x9b\xe2qQ<Z\xc0Nyt#,\x06D@\xd30|DL<Z\xc0\x85\xdb\xa1a1\x06D@F\xd8\xf0\xf4J<Z\xc0V#\xbb\xd22\x06D@\x9b\x02\x99\x9dE<Z\xc09\xc9V\x97S\x06D@o.\xfe\xb6\'<Z\xc0\x91D/\xa3X\x06D@\xecO\xe2s\'<Z\xc0\xc2\xb5\xda\xc3^\x06D@\x7f\x17\xb6f+<Z\xc0>\x07\x96#d\x06D@\x14{h\x1f+<Z\xc0\x9e`\xffun\x06D@\x96\xebm3\x15<Z\xc0\xca\xe0(yu\x06D@\x1e\x92\xe8e\x14<Z\xc0\xd2\x0f\xea""\x85\x06D@tF\x94\xf6\x06<Z\xc0\x85r\xa2]\x85\x06D@\xe6\x07\xae\xf2\x04<Z\xc0\xe7g\xeau\x8b\x06D@\xfb\x93\xf8\xdc\t<Z\xc0\x93\x8er0\x9b\x06D@""T\xa9\xd9\x03<Z\xc0\xd4\x02{L\xa4\x06D@\x87\x19\x1aO\x04<Z\xc0]\xbb\xb4\xe1\xb0\x06D@\xe3Y\x10\xca\xfb;Z\xc0\xcd\x17{/\xbe\x06D@\x93\x06E\xf3\x00<Z\xc0\xe8}\xe3k\xcf\x06D@\xef\xc8Xm\xfe;Z\xc0\xb2\x8d?Q\xd9\x06D@\xc0\xd4]\xd9\x05<Z\xc0\x7f\xd1\xe5\xcd\xe1\x06D@\xaa\xd5WW\x05<Z\xc0)\xa7=%\xe7\x06D@&r\xc1\x19\xfc;Z\xc0\x13\x04\x8fo\xef\x06D@\xfd7\xbd\x8b\xf7;Z\xc0\xe4U\x9d\xd5\x02\x07D@\xc4\x96\x1eM\xf5;Z\xc0\x1ac\'\xbc\x04\x07D@\xa5\xe9z\xa2\xeb;Z\xc0\xc7\x83-v\xfb\x06D@\x9b\xe6\x1d\xa7\xe8;Z\xc0\xf6\x07\xcam\xfb\x06D@\x97\xab\x1f\x9b\xe4;Z\xc0\xaa\xa8\xc14\x0c\x07D@\xde_\xcb+\xd7;Z\xc0_\x0bzo\x0c\x07D@P\x07@\xdc\xd5;Z\xc0`\x15od\x1e\x07D@\xba\xc5\xfc\xdc\xd0;Z\xc0\xf3\x8eSt$\x07D@P\xc5\x8d[\xcc;Z\xc0\xf3G\x18\x06,\x07D@-\tPS\xcb;Z\xc0\xcd\x05.\x8f5\x07D@\x8f\xc7\x0cT\xc6;Z\xc0\xac\x84\xee\x928\x07D@Q\x1bc\'\xbc;Z\xc0\x8a\x16\xa0m5\x07D@\x07\x82\x8eV\xb5;Z\xc0\x8aPl\x05M\x07D@\xff\xd4\x06\'\xa2;Z\xc0X\xc8\\\x19T\x07D@U\xa6\x98\x83\xa0;Z\xc0\x99\xb1h:;\x07D@\xba?\xa5J\x94;Z\xc0\x84\x0e\xba\x84C\x07D@\xb8\xcc\xe9\xb2\x98;Z\xc0\xe0/fKV\x07D@\x7fj\xbct\x93;Z\xc0\xa7R\xb3\x07Z\x07D@\xe2\\\xc3\x0c\x8d;Z\xc0O\xba\xf4/I\x07D@\xb6\xf6>U\x85;Z\xc0\x0f/\x88HM\x07D@\xe0\xfc\x14\xc7\x81;Z\xc0Kk\xd3\xd8^\x07D@*y\x03\xcc|;Z\xc0h\x1c\xeawa\x07D@\x024\xd8\xd4y;Z\xc0\xaf\x0f\xeb\x8dZ\x07D@\xa6\x85\xcb*l;Z\xc0{j\xf5\xd5U\x07D@z\xaf\xe8\xd6k;Z\xc0\xab\\\xa8\xfck\x07D@7\x19U\x86q;Z\xc0\x99v1\xcdt\x07D@\x96FZ*o;Z\xc0\xfa\x03\xe5\xb6}\x07D@S\x08\xe4\x12G;Z\xc0\xd2p\xca\xdc|\x07D@=HO\x91C;Z\xc00y\x03\xcc|\x07D@G_\xcf\xd7,;Z\xc0\xfc7/N|\x07D@\xd4\r\x14x\';Z\xc0\x8b\xc4\x045|\x07D@~\xac\xe0\xb7!;Z\xc0H\xd5v\x13|\x07D@\x8e\xee\xae\xb3!;Z\xc0\xd6-\x02c}\x07D@\x06\xf7\x03\x1e\x18;Z\xc0e\xba\xd7I}\x07D@\x96\xd1\xc8\xe7\x15;Z\xc0=[\x07\x07{\x07D@s/0+\x14;Z\xc0\x03]\xfb\x02z\x07D@lcz\xc2\x12;Z\xc0\x9e\x97\x8a\x8dy\x07D@\xfdL\xbdn\x11;Z\xc0[\xa8\xfcky\x07D@.t%\x02\xd5:Z\xc0W\xeb\xc4\xe5x\x07D@}\xb8r\xf6\xce:Z\xc0\xe6w\x9a\xccx\x07D@\x91\xa2\\\x1a\xbf:Z\xc0\x91\x1d\x1b\x81x\x07D@\x00\tQ\xbe\xa0:Z\xc0\xba\xe4\x7f\xf2w\x07D@\xc0\x9cg\xecK:Z\xc0\x80\xe6s\xeev\x07D@e9\t\xa5/:Z\xc0]\x10\x91\x9av\x07D@\xb0\xac4)\x05:Z\xc0\x17d\xcb\xf2u\x07D@\x89\x98\x12I\xf49Z\xc0\xa6\xf0\xa0\xd9u\x07D@\x8d\xb6*\x89\xec9Z\xc0Q\x96!\x8eu\x07D@)\xd7\x14\xc8\xec9Z\xc0c\xe4,\xeci\x07D@\xe0\xe7\x86\xa6\xec9Z\xc0Fo\xb8\x8f\xdc\x06D@\xb0c\xea\xae\xec9Z\xc0 r\xfaz\xbe\x06D@V2\x8e\x91\xec9Z\xc0\xc2\xc1\xde\xc4\x90\x06D@V2\x8e\x91\xec9Z\xc0\xdd\xb3\xae\xd1r\x06D@\x8d\xb6*\x89\xec9Z\xc0f\xcfej\x12\x06D@\xeb\x95@J\xec9Z\xc0\x1e\x88,\xd2\xc4\x05D@""\x1a\xddA\xec9Z\xc0\xfd^\n\x0f\x9a\x05D@\x98V\xd1\x1f\x9a9Z\xc0R\xb9\x89Z\x9a\x05D@^\x18w\x83h9Z\xc0\xfd^\n\x0f\x9a\x05D@e\x8dz\x88F9Z\xc0Wv\xc1\xe0\x9a\x05D@\x05s\x82699Z\xc0\x99eO\x02\x9b\x05D@U3k) 9Z\xc0\xc7\xe9\xeb\xf9\x9a\x05D@\x97VC\xe2\x1e9Z\xc0\x17\x873\xbf\x9a\x05D@1\x82T\x8a\x1d9Z\xc0AN\x980\x9a\x05D@\xbc\x94\xbad\x1c9Z\xc0\xe66\xe1^\x99\x05D@(eRC\x1b9Z\xc0\x98\xcd\xe30\x98\x05D@\xb7\x0b\xcdu\x1a9Z\xc0\x94D\xf6A\x96\x05D@\xa6\xba\x80\x97\x199Z\xc0$9`W\x93\x05D@\x8a|%\x90\x129Z\xc0~\x10\xc9\x90c\x05D@\x8c\xd9\x92U\x119Z\xc0\xca\xf4K\xc4[\x05D@\xb5\x91y\xe4\x0f9Z\xc0\xe7T2\x00T\x05D@\xa4Z\xd2Q\x0e9Z\xc0\xb3\xe3\x86\xdfM\x05D@\x18\x11\xc5\xe4\r9Z\xc0V\x0f\x98\x87L\x05D@\xa6\xb7?\x17\r9Z\xc0\x14TT\xfdJ\x05D@\xbd\xea\x8f0\x0c9Z\xc0\xd9UH\xf9I\x05D@B&\x199\x0b9Z\xc0\xc1-\x1fII\x05D@\xfb\x93\xf8\xdc\t9Z\xc0\xfd_u\xe4H\x05D@\x12\xc7H\xf6\x089Z\xc0-\xe4\x11\xdcH\x05D@\xdd\x9f\x19\xc4\x079Z\xc0""6X8I\x05D@\x94\x06E\xf3\x009Z\xc0\x01\xb5\x18<L\x05D@\xbf\xf80{\xd98Z\xc0\xf1\xb7=Ab\x05D@aX\x8c\xba\xd68Z\xc0\x9c)t^c\x05D@k\x0e\x10\xcc\xd18Z\xc0h\x80\x0b\xb2e\x05D@@8-x\xd18Z\xc0\t\xe0f\xf1b\x05D@\x11\xce5\xcc\xd08Z\xc0hP4\x0f`\x05D@\xb4""j\xa2\xcf8Z\xc0\xe8\xd9\xac\xfa\\\x05D@6\x0c\xadN\xce8Z\xc0\xcd(\x96[Z\x05D@\xd9\xb9\xf7p\xc98Z\xc0\xf1\xce\xa1\x0cU\x05D@y`\x8e\x1e\xbf8Z\xc0b\xbdQ+L\x05D@\'T\xfe\xb5\xbc8Z\xc0E\x0c;\x8cI\x05D@;\x1c]\xa5\xbb8Z\xc0\xd4\xccZ\nH\x05D@\xad\xc3\xd1U\xba8Z\xc0\xc9\x865\x95E\x05D@\xad\xddv\xa1\xb98Z\xc04qr\xbfC\x05D@x\x9c\xa2#\xb98Z\xc0\x85B\x04\x1cB\x05D@\xac\xce\xf8\xbe\xb88Z\xc0\xbf\xa8\xa4N@\x05D@\xe8\x00OZ\xb88Z\xc0\xaa\xe8\x0f\xcd<\x05D@G\t\x88I\xb88Z\xc0{\x98\xbdl;\x05D@\xa2}\xac\xe0\xb78Z\xc0sz\xde\x8d\x05\x05D@q\xd0\xec\xba\xb78Z\xc0\rZH\xc0\xe8\x04D@\x89\x12\xbb\xb6\xb78Z\xc06\x89A`\xe5\x04D@\xd8\xf2\xca\xf5\xb68Z\xc0\xbd\xbe\xd6\xa5F\x04D@\x91F\x05N\xb68Z\xc0\xe3\xf1\xb4\xfc\x
Query:
SELECT "geo_id", "blockgroup_geom"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 100;
Answer:
Too long, hard cut:
geo_id,blockgroup_geom
080310029012,"bytearray(b""\x01\x03\x00\x00\x00\x01\x00\x00\x002\x00\x00\x00\xbaq\x1975?Z\xc0?\xe3\xc2\x81\x90\xdaC@\x0f\x0fa\xfc4?Z\xc0\x9c\xce\x15\xa5\x84\xdaC@\xb0 \xcdX4?Z\xc0,\x049(a\xdaC@\xce9x&4?Z\xc0\\k\xefSU\xdaC@\x1b\xd7\xbf\xeb3?Z\xc0:x&4I\xdaC@\x04\xaf\x96;3?Z\xc0\xce\x9e\xcb\xd4$\xdaC@JL\xde\x003?Z\xc0{\'f\xbd\x18\xdaC@\xee\x08\xa7\x05/?Z\xc0\xab\xab\x02\xb5\x18\xdaC@\xad\xfc2\x18#?Z\xc0\n\xb4;\xa4\x18\xdaC@2w-!\x1f?Z\xc0\n\xb4;\xa4\x18\xdaC@\xaa\x1aKX\x1b?Z\xc0\n\xb4;\xa4\x18\xdaC@&\x05\xa4\xfd\x0f?Z\xc0\xab\xab\x02\xb5\x18\xdaC@\x8ff\xf38\x0c?Z\xc0{\'f\xbd\x18\xdaC@$L\xdfk\x08?Z\xc0{\'f\xbd\x18\xdaC@\xc0x\x06\r\xfd>Z\xc0{\'f\xbd\x18\xdaC@?\x1c$D\xf9>Z\xc0|\'f\xbd\x18\xdaC@u\xd0\xb3Y\xf5>Z\xc0z\'f\xbd\x18\xdaC@\x16\xab\x94\x9e\xe9>Z\xc0K\xa3\xc9\xc5\x18\xdaC@`\xe8\x11\xa3\xe7>Z\xc0\x1d\x1f-\xce\x18\xdaC@w5\x07\x08\xe6>Z\xc0\x03\x8fo\xef\x1a\xdaC@\xecm3\x15\xe2>Z\xc0\xd3\n\xd3\xf7\x1a\xdaC@\x14\xd5\xe9@\xd6>Z\xc0\xe5u\xc4!\x1b\xdaC@r\xcbGR\xd2>Z\xc0V\xe9\xee:\x1b\xdaC@05\xd0|\xce>Z\xc0&eRC\x1b\xdaC@s0\x9b\x00\xc3>Z\xc08\xd0Cm\x1b\xdaC@\x1aXU/\xbf>Z\xc0\xd8\xc7\n~\x1b\xdaC@\xf2\xd3\xb87\xbf>Z\xc0&\x828\x0f\'\xdaC@K\x05\x15U\xbf>Z\xc0\x10\xb1\xc1\xc2I\xdaC@\xfc>\xaaa\xbf>Z\xc0\\k\xefSU\xdaC@\xbcx?n\xbf>Z\xc0\xa9%\x1d\xe5`\xdaC@\xce\xe30\x98\xbf>Z\xc0b\xd0\t\xa1\x83\xdaC@g\xdb\xf7\xa8\xbf>Z\xc0\x80\x06\x9b:\x8f\xdaC@\xc0\xb3=z\xc3>Z\xc0Q\x82\xfeB\x8f\xdaC@ev\xa4\xfa\xce>Z\xc03iSu\x8f\xdaC@\xa6\x0c\x1c\xd0\xd2>Z\xc0\xa3\xdc}\x8e\x8f\xdaC@\xc8`\xc5\xa9\xd6>Z\xc0\xa3\xdc}\x8e\x8f\xdaC@\xf6\xd8$?\xe2>Z\xc0\x16P\xa8\xa7\x8f\xdaC@\x00\xeb\xff\x1c\xe6>Z\xc0\xe5\xcb\x0b\xb0\x8f\xdaC@c.7\x18\xea>Z\xc0\xb6Go\xb8\x8f\xdaC@u\xb6\x0e\x0e\xf6>Z\xc0\xf86\xfd\xd9\x8f\xdaC@\xc8\xb7w\r\xfa>Z\xc0\x97.\xc4\xea\x8f\xdaC@q\x98\xf6\xcd\xfd>Z\xc0\xf86\xfd\xd9\x8f\xdaC@+2: \t?Z\xc0\xe5\xcb\x0b\xb0\x8f\xdaC@\xc4\xd0\xea\xe4\x0c?Z\xc0\x16P\xa8\xa7\x8f\xdaC@\xb7\xa0\xf7\xc6\x10?Z\xc0\x87\xc3\xd2\xc0\x8f\xdaC@EJ\xb3y\x1c?Z\xc0\xda\x1dR\x0c\x90\xdaC@\x18\xd8\xf1_ ?Z\xc0\x1a\r\xe0-\x90\xdaC@vDL\x89$?Z\xc0\xbb\x04\xa7>\x90\xdaC@|G\x8d\t1?Z\xc0\x9d\xeb\xfbp\x90\xdaC@\xbaq\x1975?Z\xc0?\xe3\xc2\x81\x90\xdaC@"")"
080519636004,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x9c\t\x00\x00\n\xf6_\xe7\xa6\xbeZ\xc0\x19\xe6\x04mrBC@\x0ep\xcf\xf3\xa7\xbeZ\xc0Gj\xa1drBC@Vj\x84~\xa6\xbeZ\xc0\xe9\xc9\xfc\xa3oBC@\x8e""k\r\xa5\xbeZ\xc0[\xa5\xbb\xeblBC@_\xd2\x18\xad\xa3\xbeZ\xc0\xe3S\x00\x8cgBC@\x012t\xec\xa0\xbeZ\xc0\xf39w\xbb^BC@\x02W@\xa1\x9e\xbeZ\xc0\xa6lXSYBC@\xc2\xde\xc4\x90\x9c\xbeZ\xc08\x95\x0c\x00UBC@E\x16\xf7\x1f\x99\xbeZ\xc0\xb8R\xcf\x82PBC@\xadl\x1f\xf2\x96\xbeZ\xc0\x98\x80_#IBC@\xadl\x1f\xf2\x96\xbeZ\xc0m\x006 BBC@\x9a\xd8\n\x9a\x96\xbeZ\xc0\x9a\xffW\x1d9BC@\xd0M)\xaf\x95\xbeZ\xc0\xe0\x8e7\xf9-BC@\xb4\x91\xeb\xa6\x94\xbeZ\xc0<U\xbeg$BC@P\xccz1\x94\xbeZ\xc0b\x97\xa8\xde\x1aBC@%\xebpt\x95\xbeZ\xc0Z!\xac\xc6\x12BC@\xa6\x86\xc4=\x96\xbeZ\xc0\xdc\xdenI\x0eBC@\xfb#\x0c\x03\x96\xbeZ\xc0\xcdw\xf0\x13\x07BC@8\xbe\xf6\xcc\x92\xbeZ\xc0Nmp""\xfaAC@\xc8\x89=\xb4\x8f\xbeZ\xc0G\xf7s\n\xf2AC@u}\xadK\x8d\xbeZ\xc0]\x9a""\xc0\xe9AC@\x84\x88\xd4\xb4\x8b\xbeZ\xc0\xcb\xec\xf3\x18\xe5AC@\xe8r\x11\xdf\x89\xbeZ\xc0V$&\xa8\xe1AC@\x9df\x81v\x87\xbeZ\xc0\xab\x1a\x84\xb9\xddAC@z\xaaCn\x86\xbeZ\xc0\x11H\x89]\xdbAC@\\\x82\x1a\xbe\x85\xbeZ\xc0\x9e\xb3\x05\x84\xd6AC@\x91\xf78\xd3\x84\xbeZ\xc0:\x8as\xd4\xd1AC@\tv\x8aU\x83\xbeZ\xc0\x95=\tl\xceAC@R\xa4\x89w\x80\xbeZ\xc0Mp\xea\x03\xc9AC@\\Z\r\x89{\xbeZ\xc0\x18\xff>\xe3\xc2AC@\xe6\x9cf\x81v\xbeZ\xc0\x00\x1eQ\xa1\xbaAC@\xafI\xb7%r\xbeZ\xc0\x0b\x13F\xb3\xb2AC@\x86\x1e1zn\xbeZ\xc0\xcb\'+\x86\xabAC@D:\xca\xc1l\xbeZ\xc0\xa4d9\t\xa5AC@\xdftYLl\xbeZ\xc0\x8aO\x010\x9eAC@\xeb\x08n\xa4l\xbeZ\xc0\xa1&\xfa|\x94AC@\x86\x1e1zn\xbeZ\xc0\xcbh\xe4\xf3\x8aAC@\xba\xf7p\xc9q\xbeZ\xc0\xfd$>w\x82AC@\x18\x98\x15\x8at\xbeZ\xc0\xa7\xdd\xaf\x02|AC@\xa0\x19\xc4\x07v\xbeZ\xc0p{\x82\xc4vAC@\xdc\x17\xd0\x0bw\xbeZ\xc0\xcff\xd5\xe7jAC@\xeb?\xf9\xbbw\xbeZ\xc0i\x84~\xa6^AC@P\x05j1x\xbeZ\xc0\xe6\x88|\x97RAC@\xb16\xc6Nx\xbeZ\xc0WZF\xea=AC@\x16\x16\xdc\x0fx\xbeZ\xc0\x8bJ\xea\x044AC@\xc2x\x94Jx\xbeZ\xc0\xcd\xe8G\xc3)AC@\xbd\xe4\x7f\xf2w\xbeZ\xc0\xef9\xb0\x1c!AC@\x93(B\xeav\xbeZ\xc0\x12\xbfb\r\x17AC@\xa5\xe1""\xf7t\xbeZ\xc0\xc6\xf1C\xa5\x11AC@\xdf\xe7\xf8hq\xbeZ\xc0T]\xc0\xcb\x0cAC@\x03e\xe1\xebk\xbeZ\xc0\xf5$\xb09\x07AC@\x95\xc1\xdf/f\xbeZ\xc0V\x95}W\x04AC@\xaa\xf1\xd2Mb\xbeZ\xc0\xbc\xc2\x82\xfb\x01AC@\xa5\xa7V_]\xbeZ\xc0""$\xd26\xfe@C@\xf8q4GV\xbeZ\xc0[\xcd:\xe3\xfb@C@T~\xe0*O\xbeZ\xc0c\xbe\xbc\x00\xfb@C@""[$\xedF\xbeZ\xc0\xbb=\x08\x01\xf9@C@\xc7K7\x89A\xbeZ\xc0\xed)9\'\xf6@C@\xb6S\x01\xf7<\xbeZ\xc0r\xa430\xf2@C@[D\x14\x937\xbeZ\xc0\xa1\\\x1a\xbf\xf0@C@\xec\xab9@0\xbeZ\xc0\xb5\xfbU\x80\xef@C@\xbbc\xb1M*\xbeZ\xc0\xf5\x1e.9\xee@C@QT\xc4\xe9$\xbeZ\xc0\x10\xaf\xeb\x17\xec@C@HQg\xee!\xbeZ\xc0eq\xff\x91\xe9@C@\xf2\xbb\xe9\x96\x1d\xbeZ\xc0\xd8\x80\x08q\xe5@C@\x83\x18\xe8\xda\x17\xbeZ\xc0\xc9\x19\x8a;\xde@C@=\xc58\x7f\x13\xbeZ\xc0\xc8`\xc5\xa9\xd6@C@\x17\x11\xc5\xe4\r\xbeZ\xc0\xe7,\xb3\x08\xc5@C@\x0634\x9e\x08\xbeZ\xc0\x89;\xde\xe4\xb7@C@\
Query:
SELECT "branch_fdic_uninum", "branch_address", "branch_city", "zip_code"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 100;
Answer:
Too long, hard cut:
branch_fdic_uninum,branch_address,branch_city,zip_code
13482,"6384 Wetzel Avenue, Building 1512",Fort Carson,80913
475970,9265 North Union Boulevard,Colorado Springs,80920
443446,2930 South Academy Boulevard,Colorado Springs,80916
445948,3290 Centennial Boulevard,Colorado Springs,80907
17590,1125 Garden Of The Gods Road,Colorado Springs,80907
16955,1520 Briargate Boulevard,Colorado Springs,80920
422977,6030 Stetson Hills Boulevard,Colorado Springs,80922
12009,1800 South Nevada Avenue,Colorado Springs,80905
15634,560 Garden Of The Gods Road,Colorado Springs,80907
366145,1275 Village Ridge Pt,Monument,80132
247847,502 Security Boulevard,Colorado Springs,80911
647353,"1359 Interquest Parkway, Suite 150",Colorado Springs,80921
430180,15 West Cimarron Street,Colorado Springs,80903
16881,155 Lake Avenue,Colorado Springs,80906
255840,501 South Tejon,Colorado Springs,80903
612121,"104 S. Cascade Avenue, Suite 2014",Colorado Springs,80903
607745,5278 North Nevada Avenue Suite 100,Colorado Springs,80918
472619,"Peterson Air Force Base, 455 W. Paine St., Bldg. 1485",Colorado Springs,80914
428088,7390 Duryea Drive,Colorado Springs,80923
636531,7685 N Academy Blvd,Colorado Springs,80920
418796,3750 Bloomington Street,Colorado Springs,80922
513445,11555 Meridian Market View,Falcon,80831
195957,402 North Tejon Street,Colorado Springs,80903
257589,8620 North Union Boulevard,Colorado Springs,80920
258156,945 Tenderfoot Hill Road,Colorado Springs,80906
290392,2790 Briargate Boulevard,Colorado Springs,80920
18208,"102 North Cascade Avenue, Suite 100",Colorado Springs,80903
480120,3306 Centennial Blvd.,Colorado Springs,80907
256694,El Paso County,Colorado Springs,80915
582452,1146 Interquest Parkway,Colorado Springs,80921
16611,4328 Edison Avenue,Colorado Springs,80915
13728,1521 South 8th Street,Colorado Springs,80906
16584,3085 S Academy Blvd,Colorado Springs,80916
453111,7390 North Academy Boulevard,Colorado Springs,80920
17644,111 South Tejon Street,Colorado Springs,80903
358501,440 Chapel Hills Drive,Colorado Springs,80920
13343,1415 North Academy Boulevard,Colorado Springs,80909
458089,6925 Mesa Ridge Parkway,Fountain,80817
11201,2308 East Pikes Peak Avenue,Colorado Springs,80909
207212,1070 West Baptist Road,Colorado Springs,80921
418610,2870 New Center Pt,Colorado Springs,80922
428508,5470 E. Woodmen Road,Colorado Springs,80920
284259,4151 North Academy Boulevard,Colorado Springs,80918
437134,15844 Jackson Creek Parkway,Monument,80132
647740,7808 N Academy Blvd,Colorado Springs,80920
11734,2401 W Colorado Ave,Colorado Springs,80904
440408,5550 Powers Center Point,Colorado Springs,80920
626742,2768 Northgate Blvd,Colorado Springs,80921
365434,24 South Weber Street Suite 151,Colorado Springs,80903
357141,3201 E.  Platte Avenue,Colorado Springs,80909
477819,"19 North Tejon, Ste 100",Colorado Springs,80903
18193,104 S Cascade Ave,Colorado Springs,80903
14273,730 Citadel Drive East,Colorado Springs,80932
473126,101 North Cascade Avenue,Colorado Springs,80903
270796,1130 North Circle Drive,Colorado Springs,80932
190136,7025 Meridian Rd,Peyton,80831
419922,445 N Ellicott Hwy,Calhan,80808
249214,Coleman And Linstrom Streets,Fort Carson,80913
437905,3175 East Platte Avenue,Colorado Springs,80909
358907,7239 N. Academy Boulevard,Colorado Springs,80920
358787,421 North Tejon Street,Colorado Springs,80903
358545,5710 Constitution Avenue,Colorado Springs,80915
497259,9649 Prominent Point,Colorado Springs,80924
616487,90 South Cascade Avenue,Colorado Springs,80903
469348,13475 Voyager Parkway,Colorado Springs,80921
207167,815 Cheyenne Meadows Road,Colorado Springs,80906
480455,7655 Mclaughlin Road,Peyton,80831
640121,5737 Barnes Road,Colorado Springs,80917
242760,6615 Camden Boulevard,Fountain,80817
429637,434 S. Tejon,Colorado Springs,80903
295013,"2 North Cascade Avenue, Suite 130",Colorado Springs,80903
430043,3992 E. Bijou St,Colorado Springs,80909
629339,"1274 Interquest Pkwy, Ste 100",Colorado Springs,80921
359013,7495  Mclaughlin Road,Peyton,80831
301152,8250 Razorback Road,Colorado Springs,80920
429632,2835 Briargate Blvd,Colorado Springs,80920
429311,1650 Space Center Drive,Colorado Springs,80915
15431,5175 North Academy Boulevard,Colorado Springs,80918
511155,3110 N. Nevada,Colorado Springs,80907
12746,3110 North Nevada Avenue,Colorado Springs,80933
253292,2805 Dublin Boulevard,Colorado Springs,80918
17662,"121 South Tejon Street, Ste 110",Colorado Springs,80903
466677,4330 N Academy Blvd,Colorado Springs,80918
17145,5190 North Academy Boulevard,Colorado Springs,80918
462639,7473 N. Academy Blvd.,Colorado Springs,80920
13032,500 North Circle Drive,Colorado Springs,80909
242759,4790 North Academy Boulevard,Colorado Springs,80918
596305,405 East Cheyenne Mountain Blvd,Colorado Springs,80906
16496,4190 Austin Bluffs Parkway,Colorado Springs,80918
469476,7780 Fountain Mesa Road,Fountain,80817
256662,5725 North Academy Boulevard,Colorado Springs,80918
247845,290 East Cheyenne Mountain Boulevard,Colorado Springs,80915
340793,730
Query:
SELECT "geo_id", ST_AREA(TO_GEOGRAPHY("blockgroup_geom")) AS "blockgroup_area"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL"
   WHERE "state_fips_code" = '08'
   LIMIT 100;
Answer:
geo_id,blockgroup_area
080010093083,318331.61752397096
080690011111,583054.9679097468
080050806003,267905.0220620807
080310051041,306413.72805241204
080770014041,9128528.483674064
080010093165,386033.77392419835
080410060003,1337106.5254439674
080050846003,421590.5645749973
080350140091,2914655.734860705
081230021011,1350930.1323895925
080590105042,998719.6364283316
080050862001,726487.4643897336
081190101062,170723325.1398792
080410047022,324551.3153352345
080050056331,1154509.4037381432
080410037062,1460002.799462918
080770014032,6276419.148242579
080590104022,946020.0659065758
080410045072,345004.2810497997
080410060002,675148.3563268973
081170001005,3942479.908995065
080310036025,256540.59245767142
080310013015,325889.88978072605
080299651002,4108724.5289947214
080590120571,1841281.2416329617
080130132051,4190363.7452645027
080010085051,479749.9245816316
080130614001,2640824.319196276
080050056113,738161.613303675
080310023003,485829.2271676118
080410045062,477883.5321711704
080130121024,749618.6147005183
080350141321,1424605.1144541304
080050842003,350196.7612965719
080130133072,900728.595082702
080050873001,477050.40367869183
080770007001,1629314.1204170836
080310154001,695267.1068299344
080370002001,360097410.37504876
081230012021,790368.4852403371
080690028012,7358650.851102079
080410045082,2318578.030603743
080350145042,3528201.063393616
080310068112,504249.85020867846
081010022002,380349.0444679671
080590111004,659663.8784227693
080370006001,646835400.7845731
080050873004,120459.91230771886
080050824002,870747.2599331883
080410001021,618676.3950445021
080859664004,2251872.451957094
080050063002,325203.0184357622
081230007041,2016182.429238383
080050062003,305392.34263895755
080140305002,864934.6290092329
080490002024,299892181.10653305
080770009001,18111835.826399114
080010091032,3548567.1324788355
080370004011,91485019.11642735
081230025022,642912549.1619276
080590604001,687458.2752279321
080590120541,637762.3446853977
081010032002,2040387027.2963386
080690020111,1613607.096057084
080050842001,804273.1597537958
080859666014,1352267.9244953669
080050056322,1110120.0913545645
080410056013,484629.63121793384
080410025012,1261584.5314973062
081230025023,704891596.8953162
080050818003,682671.3909965379
080310068133,252726.97840909584
081010032003,67481822.88006857
080050056273,733976.211195482
080310014012,235164.3772468821
080410043003,613931.3408574059
081010017002,1111818.494342747
080590118063,354820.59515841416
080279701002,198837500.85875347
080590103043,543004.4751445533
080310013012,401878.08751258167
080050068154,1922893.6746803073
080050067073,1150476.2307289436
080459519011,346101742.0708595
080310157003,552114.2658844832
080410068012,826964.1228013647
080010087054,471826.4675019469
080350140092,752561.1238554545
081230020131,2620306.880133898
080410013023,914898.9398258835
080010094102,1392992.0731963497
080690016032,329169.7877166399
080690002011,495068.47427451034
080990001001,341923868.8354477
080310040034,731658.4892212141
080299650004,401112055.30159783
080050073024,249349.96175743983
080050816002,636190.2848251675
080590120492,995806.6381914323
080690011141,8613399.96669383
Query:
SELECT "zip_code", ST_AREA(TO_GEOGRAPHY("zip_code_geom")) AS "zip_code_area"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 100
Answer:
zip_code,zip_code_area
80621,331679130.7577672
81038,299585.0340667942
81220,623372476.2209235
80219,19616086.40714734
80726,411599591.0101213
81090,1651283384.6124427
80654,600618825.3217548
80116,223936013.10402292
80923,17692104.139015306
80751,1226272498.375824
80019,63608083.11222657
81049,3328619565.449977
80728,938126344.6051099
81321,1091284293.1807826
81232,4947456.774627389
80530,4912757.723788077
80802,1036672752.5219672
80433,212398325.46236232
81223,1032288450.7393758
81624,1448088155.8391185
81325,1475778434.944985
80809,131619929.2079432
80922,15485757.230255606
80825,1712398341.7289999
80204,14385906.86794514
80520,1042614.7637406592
81630,3300373234.921881
81523,855180266.0483283
80024,105775.16164326906
80652,485117451.36980313
80907,25634411.507145386
80750,342283829.5611158
80640,36692055.756575435
80504,266423402.33300716
80804,870484796.8758314
81424,794941600.3937052
80818,751367982.9330723
80747,455107512.58133537
80231,12222702.233403705
80624,81875998.50593518
81058,137156754.34616208
80432,283253058.3307917
80735,765463668.7898595
80026,58819275.37357771
81642,364116864.95363533
81071,1476113238.147014
80928,851041693.3507382
80830,577939778.072055
80012,20122964.54629801
80435,275139605.50523174
81130,2463434342.818319
80207,11815284.057674112
80927,11329008.09390779
81253,333218851.5586522
81131,812557574.6346319
80650,131543406.97073069
81004,425431309.9357352
80112,48139373.54700655
81432,708189799.5333391
81332,156598387.91947085
80438,144537719.72528258
81057,137859229.74076155
80241,17732945.371179037
80759,1670401978.4783788
80136,524787444.19995797
81640,6164667456.973276
80546,198047.36122810742
81652,231880111.17233756
80130,16542472.51802383
81128,473447456.34168345
81073,1657227488.5140135
81224,403745131.89744604
81129,10948911.949980943
80514,17452646.3372185
81632,317418921.382096
81092,218885116.82062295
80615,274951261.63643914
80741,591786359.7875789
81401,604901624.9405158
80457,3983505.5683981045
80465,118087968.70488936
80403,348124915.57819134
80924,14127339.680096451
80820,765745035.0838953
80446,790192132.0620357
80228,28532933.395953063
81126,50421104.52429436
81611,1109745545.0513172
81410,60077785.86411843
80515,157200216.0500317
80133,79739691.36647429
80447,630130640.7307409
80545,734338428.555088
81222,79914854.17689444
81525,308324573.52975106
80223,13627598.520921964
81089,1795939869.2995515
81610,803922339.1928983
81505,261586635.77811518
80101,607660400.7728322
Query:
SELECT
   z."zip_code",
   bg."geo_id",
   ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) AS "overlap_area"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
  ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
LIMIT 100
Answer:
zip_code,geo_id,overlap_area
81001,081010009041,969172.6261510528
80925,080410045031,13647863.54641641
80916,080410045031,
80911,080410045031,899809.458997037
80911,080410045062,477883.5321711704
80911,080410043003,613931.3408574059
80817,080410043003,
81004,081010026001,552547.2505728322
81005,081010026001,171850.11037037414
80113,080050059513,182195.95847296293
80022,080310015001,0.0
81005,081010017002,1111818.494342747
80916,080410060003,20215.252178127193
80909,080410060003,
80915,080410060003,1316891.2732279298
80817,080410045113,2970730.536633575
80809,081190101062,
81007,081010029161,1486479.4007360006
80916,080410059005,
80915,080410059005,1513314.5526927994
80917,080410001021,
80926,080410044011,
80903,080410018002,303593.07362098305
80913,080410044011,
80860,081190101062,
80909,080410018002,365484.43322145805
81008,081010036001,105067878.41446339
80903,080410015002,
80902,080410044011,4034635.46931842
80907,080410015002,0.0
81001,081010036001,51977680.54695688
80905,080410015002,835355.5905471246
80906,080410044011,
80909,080410001021,618676.3950445021
80917,080410056021,682059.8687701744
80915,080410056021,
80904,080410015002,
80922,080410056021,44680.20431499357
81008,081010030041,408656.08874507155
80813,081190101062,39025634.25678784
81001,081010030041,1765846.796756554
81025,081010036001,
81008,081010030042,
81003,081010030041,0.0
80911,080410045033,
81006,081010036001,55460.98504638372
80817,080410045031,2363505.6385712363
80905,080410030003,565627.6004300824
80907,080410013021,
80905,080410013021,0.0
80863,081190101062,72143047.20928875
80905,080410033032,
81004,081010019001,501992.4005751379
80906,080410033032,1732430.5824006933
80904,080410013021,695243.141219909
81003,081010005002,380427.91011545114
80909,080410019001,706752.8673571547
80903,080410027002,239166.25368726792
80916,080410020001,0.0
80919,080410037093,846318.0001284188
80909,080410027002,178484.68231290733
80906,080410031004,3876834.358208569
80909,080410020001,1025765.38395422
80907,080410037093,
80915,080410051102,371953.68933638174
80922,080410051102,
80907,080410006002,
80905,080410025022,1946924.4452970224
80909,080410006002,536958.7641290138
81001,081010008003,1245622.766958993
80814,081190101062,58638664.75751138
80905,080410031002,
81003,081010008003,33208.85782173045
81004,081010027002,0.0
80904,080410025022,
80906,080410031002,1088172.6668175748
80903,080410008003,209626.3902363703
80819,081190101062,915978.8964100617
81005,081010027002,660491.8660279866
80906,080410025022,
80918,080410047022,324551.3153352345
80926,080410033062,21281370.7604843
80917,080410056011,667725.2134533041
80919,080410037062,1460002.799462918
81006,081010020001,1153175.7410313434
81003,081010020001,
80916,080410061002,
80918,080410047035,772375.1599166077
80923,080410047035,
80909,080410061002,158380.14210392785
80910,080410061002,531525.7654913192
80913,080410033062,
81003,081010003001,1225967.2325319517
80920,080410039064,755500.9628195743
81212,080439782002,
81212,080439791002,2545439.837308326
80927,080410051071,
80906,080410030003,36531.78869578324
81226,080439782002,2554245.891510727
81001,081010009021,1482021.1401526239
Query:
SELECT
    z."zip_code",
    bg."geo_id",
    ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom")) AS "overlap_ratio"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
  ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
LIMIT 100
Answer:
zip_code,geo_id,overlap_ratio
80840,080410039061,
80920,080410039061,1.0
80809,080410067003,0.0
81008,081010030042,
81001,081010030042,1.0
80918,080410047034,1.0
80907,080410011041,0.9475126877815575
80911,080410045062,1.0
81005,081010026001,0.2372318283363789
80904,080410011041,0.052487312365375474
80905,080410011041,
81004,081010025003,1.0
81004,081010026001,0.7627681717115145
80113,080050059513,1.0
80817,080410043003,
80022,080310015001,0.0
80911,080410043003,1.0
81005,081010017002,1.0
80909,080410060003,
80915,080410060003,0.9848813450302134
80903,080410010002,0.0
80916,080410060003,0.015118654941434082
81004,081010021001,1.0
80915,080410059005,1.0
80860,081190101062,
80916,080410059005,
80903,080410018002,0.45374873680894795
80909,080410018002,0.5462512629804241
80809,081190101062,
80903,080410015002,
80817,080410045113,1.0
80907,080410015002,0.0
81007,081010029161,1.0
81005,081010018001,0.07617036922229317
80904,080410015002,
80905,080410015002,1.0
80814,081190101062,0.34347189939902356
81008,081010030041,0.18793081006203002
81004,081010018001,0.9238296308822606
80829,080410067003,1.0
81001,081010030041,0.8120691899611451
81001,081010011001,1.0
81003,081010030041,0.0
80863,081190101062,0.42257288012742017
80905,080410031002,
80905,080410033032,
80906,080410031002,1.0
80809,080410034003,0.3448671402558026
80906,080410033032,1.0
81004,081010020003,1.0
80919,080410037073,1.0
81006,081010020001,1.0
80906,080410031004,1.0
80917,080410059001,0.0
81003,081010020001,
80863,080410034003,
80909,080410059001,1.0
80819,080410034003,0.6551328597494901
81005,081010027002,1.0
80915,080410059001,
80918,080410047035,1.0
80923,080410047035,
80907,080410078001,0.0
80813,081190101062,0.22858993769488065
81008,081010036001,0.6687918286601092
80921,080410037073,
80918,080410078001,1.0
81004,081010027002,0.0
81001,081010009041,1.0
80909,080410021022,1.0
80819,081190101062,0.005365282662223046
81226,080439802001,1.0
80905,080410030004,
81025,081010036001,
80917,080410056011,1.0
80910,080410021022,0.0
80918,080410047022,1.0
80916,080410052021,
80910,080410052021,1.0
80906,080410030004,1.0
80917,080410001021,
80905,080410029005,1.0
80919,080410037062,1.0
80917,080410058003,0.9084600414844628
80925,080410045031,0.8070320723209835
81003,081010003001,1.0
80916,080410045031,
81004,081010025001,1.0
80817,080410045083,1.0
80920,080410069011,1.0
80924,080410069011,
80915,080410058003,0.09153995846711242
80922,080410058003,
80902,080410033062,
80905,080410025021,1.0
80910,080410054004,1.0
80817,080410045031,0.13975995927504103
81212,080439791002,1.0
81240,080410044031,
80814,081190101061,0.4089985762661501
Query:
SELECT
    bg."geo_id",
    z."zip_code",
    (bl."bank_locations" * (
        ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
    )) AS "bank_locations_in_blockgroup"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
  ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
JOIN (
    SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
) bl ON z."zip_code" = bl."zip_code"
WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
LIMIT 100
Answer:
geo_id,zip_code,bank_locations_in_blockgroup
080050059513,80113,5.0
080639621003,80807,4.89900231264747
080639621003,80810,
080659617002,80461,3.0
081170003004,80424,
080590120372,80433,
080679708001,81301,15.0
081170002001,80424,
081170002001,80444,
080770006013,81506,
080770006013,81501,13.0
080770017052,81504,
081259631001,80824,0.013059868276673098
081259631001,80807,0.38264780743721816
081170001003,80498,0.9995443568938597
081170003003,80424,
081170003003,80498,0.019685939609206893
081170003003,80443,4.901570301978052
080899681003,81067,4.0
081170002001,80435,3.0
081170002004,80424,
080639622002,80824,
080639622002,80810,
080179606003,80807,
081059767003,81144,3.0
080639622002,80836,0.5780309237082667
081170002004,80443,
080770013015,81503,1.0
081139681021,81435,5.0
080770013015,81501,
081170003003,80435,
081170001005,80498,0.9779551235023354
080639621004,80807,6.0
080370005022,81657,
080119667003,81054,1.0
080639623002,80815,1.0
080470138003,80439,0.0004836999706826515
080899683004,81050,6.0
081059767001,81144,3.0
080839693005,81321,8.0
080039602003,81101,8.0
081170004023,80424,6.0
080119667005,81054,1.0
080679707032,81301,15.0
081259632002,80824,0.1466537156291747
081170004023,80443,
080659617006,80461,3.0
080639622002,80825,
080079742003,81147,7.0
081259632002,80807,
080839696003,81321,2.0522270710740806
081059768001,81132,1.0
080259696004,81063,1.0
080190147001,80439,6.365298637218371
081259631001,80836,
080459521002,81650,
081010026001,81005,1.8978546266910312
080310015001,80216,4.0
080679706003,81122,2.0
080839696003,81328,0.539890600186434
080039602004,81101,8.0
080899681002,81067,4.0
080659617005,80461,3.0
080770013011,81503,1.0
080679711003,81301,15.0
080459521002,81624,
080770013011,81501,
080770014032,81503,
080770017052,81520,4.0
080770004003,81505,8.700542962571966
080770004002,81505,
080770004003,81501,0.43254905350788303
080770014032,81505,
080770004002,81501,13.0
080770006022,81501,13.0
081099777002,81125,1.0
080470138004,80403,0.1513334237808139
080770014032,81501,
080770012002,81504,0.0
080770017053,81504,
080770017053,81520,4.0
080770014031,81505,
080259696002,81039,0.008180397040882132
080770013023,81503,1.0
080770017024,81504,
081170004021,80424,6.0
080219749002,81140,0.09601173776944454
080899680001,81039,1.9496795345436704
080839696003,81323,0.2035810159040264
080259696002,81050,
080679708003,81301,15.0
081170002005,80498,
080770002001,81501,13.0
080770015013,81521,5.0
081170002005,80435,3.0
081170004014,80424,6.0
080770015012,81521,5.0
080459521004,81650,0.0739597711145032
080770012002,81503,0.08058663861035928
080470138003,80403,
Query:
SELECT
    bg."geo_id",
    SUM((bl."bank_locations" * (
        ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
    ))) AS "total_bank_locations"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
  ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
JOIN (
    SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
) bl ON z."zip_code" = bl."zip_code"
WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
GROUP BY bg."geo_id"
LIMIT 100
Answer:
geo_id,total_bank_locations
080410051041,0.5600286184784362
080619601002,1.0
080459519011,0.5704237676077621
080050075002,9.0
081230016001,2.6476459841249276
080410045071,1.0
080310083062,3.0
080010094102,4.0
080010083082,9.0
080310009044,1.2223030340299759
080130132072,1.0
080410027001,7.792584159537192
080399612061,2.0
080050849001,10.0
081010009023,4.0
080050800001,14.0
080370002002,2.0405675175831575
081259632002,1.7275450039158726
080559606003,2.0
080050071072,12.0
080590120271,4.193787667778352
080310043013,2.0
080050061003,5.0
081010028012,8.0
080310009022,5.0
081010028011,8.0
080010095012,7.0
080310037031,30.0
080130137026,1.0
080140312001,11.989444211683136
080690003002,6.0
080590098482,8.0
080310009054,1.0
080690020112,15.0
081010010003,4.0
080050834002,8.0
081230010052,2.0
080050837001,10.151032669477894
080410025023,3.5842771127759465
080410051052,4.0
080050843001,8.0
080690017042,15.0
080010085341,7.0
081230020202,6.0
080310019012,1.0
080010085401,6.4751080139301385
080410061001,4.81318374765192
080130121032,1.0
080310040023,5.0
080050056291,10.0
080590120431,8.0
080310028022,4.50620209012706
080410038021,1.004078658886006
080590109012,10.73902161269349
080310028031,5.0
080410051112,2.7512551038451445
081230002002,8.0
080410002023,12.0
080050063004,5.0
080079743002,6.133838769264393
081010004003,9.0
080310036024,4.0
081190102021,0.3827225523845887
080590120574,5.400913136552191
080050861002,10.0
080590098461,9.000079555235114
080050819001,9.0
080140311001,9.966743399869216
080130125103,3.0
080310014015,4.800829423419538
080410001021,7.0
080679707031,15.0
080690010081,24.0
080050868002,6.0
080410040081,1.7434589913038956
080459517023,8.0
080459518043,6.0
080140301001,12.0
080050068552,30.211912851702078
080350144031,
081230014161,16.773663438067878
080410010001,7.0
080810005005,3.0
080010087051,8.0
080410038022,1.0
080310045031,5.0
080010085511,4.9710581505152724
080130130052,8.0
080050859002,10.0
080690018074,10.0
080590119041,6.905845305588531
080310043062,2.0000000124876314
081010014001,
080679706003,2.0
081230021022,5.0
080310120103,10.0
080310007022,1.0
081170001004,1.0
080590098432,8.254678131360286
080859666021,0.008047942222860191
Query:
SELECT
    final_results."zip_code",
    SUM(final_results."bank_locations_in_blockgroup") / COUNT(DISTINCT final_results."geo_id") AS "bank_locations_per_block_group"
FROM (
    SELECT
        bg."geo_id",
        z."zip_code",
        (bl."bank_locations" * (
            ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
        )) AS "bank_locations_in_blockgroup"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
      ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
    JOIN (
        SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
        FROM "FDA"."FDIC_BANKS"."LOCATIONS"
        WHERE "state" = 'CO'
        GROUP BY "zip_code"
    ) bl ON z."zip_code" = bl."zip_code"
    WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
) final_results
GROUP BY final_results."zip_code"
ORDER BY "bank_locations_per_block_group" DESC
LIMIT 100
Answer:
zip_code,bank_locations_per_block_group
80501,18.6873891486805
80111,17.068163673854947
80206,16.297204155051606
80525,14.842727544554347
80634,14.015905459594485
80202,12.91732977558065
80903,12.132294886351586
80920,11.367265168967105
80112,10.367776635584885
81301,9.748439565286866
80134,9.422549456151348
80302,9.181790430004312
80012,7.999778534376968
80537,7.866030038288092
80601,7.7906037408110205
80020,7.7529740838090175
80211,7.488528104221764
80401,7.4547116504205
80524,7.132350621604972
81501,7.102193879671201
80301,6.699232900785644
81401,6.589507938591672
80918,6.487494976187673
80550,6.250897390024947
80222,6.248878972319733
80538,6.145333932867558
80228,5.996478283662174
81611,5.893868256392074
80104,5.875959617340669
80123,5.7710919449849065
81321,5.700707063206823
80487,5.643333741630031
80015,5.642221806579118
81212,5.587525004385869
80016,5.474326009515052
81082,5.274459425118016
81101,5.2627732664505995
80013,5.1960163323290045
80021,5.182355443460461
80011,5.158648676481493
80751,5.149691483771801
80226,5.091082724091707
80122,5.029838728474487
81005,4.97769292282682
80229,4.963932898897485
80027,4.862772149693504
80022,4.773185679341402
80906,4.726215641126031
80631,4.57760605285956
81601,4.547721575063403
80439,4.494750851793192
80207,4.466841508395423
80129,4.377962455546053
80909,4.186083005368754
81003,4.176384896024974
80126,4.15253355050681
80233,4.074494330133545
80234,3.9552317613137227
80907,3.9332103058918677
81147,3.879530963185763
81620,3.7873003727887746
80701,3.7850182870505433
81050,3.7839493076192685
80127,3.72043883063426
81052,3.715587020823326
80203,3.6397954139125805
80227,3.6255593842996774
80120,3.549578825355534
80521,3.539995115360715
80124,3.4898086474204937
81007,3.392652286134421
80219,3.3778174688236997
81416,3.353631604903271
80108,3.344384295351426
81505,3.267864947896001
80231,3.2198376032820457
80246,3.171128226882365
80110,3.1579349709773945
80002,3.09513763288198
80026,3.0654736213614266
81001,3.052145277067485
80424,3.0
80128,2.998883552590944
80249,2.9114716327999868
81201,2.9054357508057365
80014,2.894658030538612
80517,2.8194939361557494
80033,2.8183627247851084
80504,2.786779379566407
80210,2.782685454346429
80915,2.716061387861674
80723,2.709353609080367
80224,2.6919930237343244
81435,2.6356605896757817
81230,2.6305480075655385
81008,2.602486696165571
80807,2.586850013342743
80004,2.563011290059351
80214,2.559655591560138
81623,2.5545470886098918
Query:
SELECT
    final_results."zip_code",
    SUM(final_results."bank_locations_in_blockgroup") / COUNT(DISTINCT final_results."geo_id") AS "bank_locations_per_block_group"
FROM (
    SELECT
        bg."geo_id",
        z."zip_code",
        (bl."bank_locations" * (
            ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
        )) AS "bank_locations_in_blockgroup"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
      ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
    JOIN (
        SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
        FROM "FDA"."FDIC_BANKS"."LOCATIONS"
        WHERE "state" = 'CO'
        GROUP BY "zip_code"
    ) bl ON z."zip_code" = bl."zip_code"
    WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
) final_results
GROUP BY final_results."zip_code"
ORDER BY "bank_locations_per_block_group" DESC
LIMIT 1
Answer:
zip_code,bank_locations_per_block_group
80501,18.6873891486805
Query:
SELECT
    "zip_code",
    "bank_locations_per_block_group"
FROM (
    SELECT
        final_results."zip_code",
        SUM(final_results."bank_locations_in_blockgroup") / COUNT(DISTINCT final_results."geo_id") AS "bank_locations_per_block_group"
    FROM (
        SELECT
            bg."geo_id",
            z."zip_code",
            (bl."bank_locations" * (
                ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))) / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
            )) AS "bank_locations_in_blockgroup"
        FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
        JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
          ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
        JOIN (
            SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
            FROM "FDA"."FDIC_BANKS"."LOCATIONS"
            WHERE "state" = 'CO'
            GROUP BY "zip_code"
        ) bl ON z."zip_code" = bl."zip_code"
        WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
    ) final_results
    GROUP BY final_results."zip_code"
    ORDER BY "bank_locations_per_block_group" DESC
    LIMIT 1
)
Answer:
zip_code,bank_locations_per_block_group
80501,18.687389148680502
End Exploring Related Columns
Task: Which Colorado zip code has the highest concentration of bank locations per block group, based on the overlap between zip codes and block groups?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
Zip_Code,Bank_Locations_per_Block_Group
zip_code:str,bank_locations_per_block_group:float
(Attention: answer in one row)
```

This result represents the Colorado zip code that has the highest concentration of bank locations per block group, calculated based on the overlap between zip code areas and census block groups..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'FDA': {'CENSUS_UTILITY': ['FIPS_CLASS_CODE', 'FIPS_CODES_ALL', 'FIPS_CODES_STATES', 'FUNCTIONAL_STATUS_CODES', 'LSAD_CODES', 'MTFCC_FEATURE_CLASS_CODES'], 'FDA_FOOD': ['FOOD_ENFORCEMENT', 'FOOD_EVENTS'], 'FDIC_BANKS': ['INSTITUTIONS', 'LOCATIONS'], 'GEO_CENSUS_BLOCKGROUPS': ['BLOCKGROUPS_01', 'BLOCKGROUPS_02', 'BLOCKGROUPS_04', 'BLOCKGROUPS_05', 'BLOCKGROUPS_06', 'BLOCKGROUPS_08', 'BLOCKGROUPS_09', 'BLOCKGROUPS_10', 'BLOCKGROUPS_11', 'BLOCKGROUPS_12', 'BLOCKGROUPS_13', 'BLOCKGROUPS_15', 'BLOCKGROUPS_16', 'BLOCKGROUPS_17', 'BLOCKGROUPS_18', 'BLOCKGROUPS_19', 'BLOCKGROUPS_20', 'BLOCKGROUPS_21', 'BLOCKGROUPS_22', 'BLOCKGROUPS_23', 'BLOCKGROUPS_24', 'BLOCKGROUPS_25', 'BLOCKGROUPS_26', 'BLOCKGROUPS_27', 'BLOCKGROUPS_28', 'BLOCKGROUPS_29', 'BLOCKGROUPS_30', 'BLOCKGROUPS_31', 'BLOCKGROUPS_32', 'BLOCKGROUPS_33', 'BLOCKGROUPS_34', 'BLOCKGROUPS_35', 'BLOCKGROUPS_36', 'BLOCKGROUPS_37', 'BLOCKGROUPS_38', 'BLOCKGROUPS_39', 'BLOCKGROUPS_40', 'BLOCKGROUPS_41', 'BLOCKGROUPS_42', 'BLOCKGROUPS_44', 'BLOCKGROUPS_45', 'BLOCKGROUPS_46', 'BLOCKGROUPS_47', 'BLOCKGROUPS_48', 'BLOCKGROUPS_49', 'BLOCKGROUPS_50', 'BLOCKGROUPS_51', 'BLOCKGROUPS_53', 'BLOCKGROUPS_54', 'BLOCKGROUPS_55', 'BLOCKGROUPS_56', 'BLOCKGROUPS_60', 'BLOCKGROUPS_66', 'BLOCKGROUPS_69', 'BLOCKGROUPS_72', 'BLOCKGROUPS_78', 'US_BLOCKGROUPS_NATIONAL'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'ADJACENT_STATES', 'CBSA', 'CNECTA', 'COASTLINE', 'CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116', 'COUNTIES', 'CSA', 'METROPOLITAN_DIVISIONS', 'NATIONAL_OUTLINE', 'NWS_FORECAST_REGIONS', 'RAILWAYS', 'STATES', 'URBAN_AREAS', 'ZIP_CODES']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-21 09:09:34 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:09:34 - root - INFO - ```sql
SELECT
    final_results."zip_code",
    SUM(final_results."bank_locations_in_blockgroup") / COUNT(DISTINCT final_results."geo_id") AS "bank_locations_per_block_group"
FROM (
    SELECT
        bg."geo_id",
        z."zip_code",
        (
            bl."bank_locations" * (
                ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom")))
                / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
            )
        ) AS "bank_locations_in_blockgroup"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
        ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
    JOIN (
        SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
        FROM "FDA"."FDIC_BANKS"."LOCATIONS"
        WHERE "state" = 'CO'
        GROUP BY "zip_code"
    ) bl ON z."zip_code" = bl."zip_code"
    WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
) final_results
GROUP BY final_results."zip_code"
ORDER BY "bank_locations_per_block_group" DESC NULLS LAST
LIMIT 1;
```
2025-01-21 09:09:34 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:09:34 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:09:34 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:09:37 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-21 09:09:37 - snowflake.connector.connection - INFO - closed
2025-01-21 09:09:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:09:38 - root - INFO - itercount: 1
2025-01-21 09:09:38 - root - INFO - 0
2025-01-21 09:09:38 - root - INFO - results: 
zip_code,bank_locations_per_block_group
80501,18.6873891486805


2025-01-21 09:09:38 - root - INFO - Please check the answer again by reviewing Which Colorado zip code has the highest concentration of bank locations per block group, based on the overlap between zip codes and block groups?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
Zip_Code,Bank_Locations_per_Block_Group
zip_code:str,bank_locations_per_block_group:float
(Attention: answer in one row)
```

This result represents the Colorado zip code that has the highest concentration of bank locations per block group, calculated based on the overlap between zip code areas and census block groups. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
zip_code,bank_locations_per_block_group
80501,18.6873891486805
Current sql:
SELECT
    final_results."zip_code",
    SUM(final_results."bank_locations_in_blockgroup") / COUNT(DISTINCT final_results."geo_id") AS "bank_locations_per_block_group"
FROM (
    SELECT
        bg."geo_id",
        z."zip_code",
        (
            bl."bank_locations" * (
                ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom")))
                / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
            )
        ) AS "bank_locations_in_blockgroup"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
        ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
    JOIN (
        SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
        FROM "FDA"."FDIC_BANKS"."LOCATIONS"
        WHERE "state" = 'CO'
        GROUP BY "zip_code"
    ) bl ON z."zip_code" = bl."zip_code"
    WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
) final_results
GROUP BY final_results."zip_code"
ORDER BY "bank_locations_per_block_group" DESC NULLS LAST
LIMIT 1;Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-21 09:10:07 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:10:07 - root - INFO - ```sql
SELECT
    final_results."zip_code",
    ROUND(SUM(final_results."bank_locations_in_blockgroup") / COUNT(DISTINCT final_results."geo_id"), 4) AS "bank_locations_per_block_group"
FROM (
    SELECT
        bg."geo_id",
        z."zip_code",
        (
            bl."bank_locations" * (
                ST_AREA(ST_INTERSECTION(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom")))
                / ST_AREA(TO_GEOGRAPHY(bg."blockgroup_geom"))
            )
        ) AS "bank_locations_in_blockgroup"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" z
    JOIN "FDA"."GEO_CENSUS_BLOCKGROUPS"."US_BLOCKGROUPS_NATIONAL" bg
        ON ST_INTERSECTS(TO_GEOGRAPHY(z."zip_code_geom"), TO_GEOGRAPHY(bg."blockgroup_geom"))
    JOIN (
        SELECT "zip_code", COUNT(DISTINCT "branch_fdic_uninum") AS "bank_locations"
        FROM "FDA"."FDIC_BANKS"."LOCATIONS"
        WHERE "state" = 'CO'
        GROUP BY "zip_code"
    ) bl ON z."zip_code" = bl."zip_code"
    WHERE z."state_code" = 'CO' AND bg."state_fips_code" = '08'
) final_results
GROUP BY final_results."zip_code"
ORDER BY "bank_locations_per_block_group" DESC NULLS LAST
LIMIT 1;
```
2025-01-21 09:10:07 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:10:07 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:10:07 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:10:10 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-21 09:10:10 - snowflake.connector.connection - INFO - closed
2025-01-21 09:10:11 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:10:11 - root - INFO - itercount: 2
2025-01-21 09:10:11 - root - INFO - 0
2025-01-21 09:10:11 - root - INFO - Total iteration counts: 2
