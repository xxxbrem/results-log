2025-01-21 09:04:19 - openai._base_client - INFO - Retrying request to /chat/completions in 0.418720 seconds
2025-01-21 09:05:41 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:05:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:43 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:05:43 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:05:43 - root - INFO - SQL:
SELECT "fdic_certificate_number", "branch_name", "zip_code", "state"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 100;
Results:
fdic_certificate_number,branch_name,zip_code,state
4666,FORT CARSON FACILITY,80913,CO
6560,BRIARGATE CROSSING BRANCH,80920,CO
6560,HANDCOCK & ACADEMY BRANCH,80916,CO
6560,CENTENNIAL & FILLMORE BRANCH,80907,CO
6548,GARDEN OF THE GODS BRANCH,80907,CO
6548,CHAPEL HILLS BRANCH,80920,CO
6548,POWER AND STETSON KING SOOPERS BRANC,80922,CO
3511,COLORADO SPRINGS SOUTH BRANCH,80905,CO
3511,GARDEN OF THE GODS BRANCH,80907,CO
57587,Integrity Bank & Trust,80132,CO
8273,VALLEY BANKING CENTER,80911,CO
18489,Interquest Branch,80921,CO
19220,CASCADE BRANCH,80903,CO
3076,COLORADO SPRINGS BROADMOOR,80906,CO
3076,DOWNTOWN BANK,80903,CO
3076,CASCADE AVENUE LPO,80903,CO
12633,COLORADO SPRINGS BRANCH,80918,CO
91005,5 STAR BANK - DOWNTOWN BRANCH,80914,CO
628,NORWOOD BANKING CENTER BRANCH,80923,CO
628,Briargate and Academy Branch,80920,CO
628,SPRINGS RANCH BRANCH,80922,CO
628,MERIDIAN & WOODMAN BNKING CTR BRANCH,80831,CO
628,UPTOWN COLORADO SPRINGS BRANCH,80903,CO
3511,BRIARGATE BRANCH,80920,CO
11492,MOBILE BRANCH,80906,CO
18714,BRIARGATE/UNION BRANCH,80920,CO
20156,CO SPRINGS BRANCH,80903,CO
628,CENTENNIAL FILLMORE BNKG CTR BRANCH,80907,CO
16980,7OLORADO SPRINGS MESSENGER BRANCH,80915,CO
16980,Colorado Springs Interquest Branch,80921,CO
16980,Colorado Springs Edison Branch,80915,CO
17534,BROADMOOR SKYWAY BRANCH,80906,CO
17534,ACADEMY AT HANCOCK BRANCH,80916,CO
2270,ACADEMY BOULEVARD BRANCH,80920,CO
2270,COLORADO SPRINGS BRANCH,80903,CO
3076,BRIARGATE BANK,80920,CO
6548,ACADEMY BRANCH,80909,CO
6548,FOUNTAIN SAFEWAY BRANCH,80817,CO
6548,PIKES PEAK BRANCH,80909,CO
6548,MONUMENT KING SOOPERS BRANCH,80921,CO
6560,Powers Branch,80922,CO
6560,Powers Peak Branch,80920,CO
3511,AUSTIN BLUFFS & ACADEMY BRANCH,80918,CO
3511,MONUMENT MARKETPLACE BRANCH,80132,CO
3510,North Academy Branch,80920,CO
17782,Pikes Peak National Bank,80904,CO
57587,POWERS CENTER POINT BRANCH,80920,CO
3034,Flying Horse Branch,80921,CO
5394,MOUNTAIN VIEW BRANCH,80903,CO
19600,PLATTE BRANCH,80909,CO
59052,NORTH TEJON BRANCH,80903,CO
91005,5Star Bank,80903,CO
8273,THE CITADEL BANK BRANCH,80932,CO
8273,DOWNTOWN BANKING CENTER,80903,CO
19220,CIRCLE DRIVE BRANCH,80932,CO
1780,FALCON BRANCH,80831,CO
1780,ELLICOTT BRANCH,80808,CO
4666,DRIVE-UP FACILITY,80913,CO
6560,Chelton And Platte Branch,80909,CO
6560,ACADEMY BRANCH,80920,CO
16980,Colorado Springs Tejon Branch,80903,CO
3511,POWERS & CONSTITUTION BRANCH,80915,CO
3511,CORDERA BRANCH,80924,CO
3511,COLORADO SPRINGS BRANCH,80903,CO
57587,VOYAGER PARKWAY BRANCH,80921,CO
6548,CHEYENNE MEADOWS KING SOOPERS BRANCH,80906,CO
6548,FALCON SAFEWAY BRANCH,80831,CO
3510,Powers Pointe Branch,80917,CO
17782,VALLEY BRANCH,80817,CO
18609,COLORADO SPRINGS BRANCH,80903,CO
18714,CASCADE & PIKES PEAK BRANCH,80903,CO
91005,5 STAR BANK MESSENGER SERVICE,80909,CO
628,Interquest and Federal Branch,80921,CO
1778,FALCON BRANCH,80831,CO
19600,RAZORBACK ROAD BRANCH,80920,CO
19600,BRIARGATE OFFICE,80920,CO
19600,PALMER PARK BRANCH,80915,CO
59052,COLORADO SPRINGS BRANCH,80918,CO
5568,MESSENGER SERVICE,80907,CO
5568,COLORADO NATIONAL BANK BRANCH,80933,CO
6384,COLORADO SPRINGS BRANCH,80918,CO
1105,COLORADO SPRINGS - TEJON BRANCH,80903,CO
6560,Academy & Morning Sun Branch,80918,CO
3511,ACADEMY PLACE BRANCH,80918,CO
3511,FALCON LANDING BRANCH,80920,CO
3511,COLORADO SPRINGS EAST BRANCH,80909,CO
17782,ACADEMY BOULEVARD BRANCH,80918,CO
18714,CHEYENNE MOUNTAIN AND HWY 115 BRANCH,80906,CO
628,AUSTIN BLUFFS BRANCH,80918,CO
628,MESA RIDGE & FOUNTAIN MESA BANKING CENTER BRANCH,80817,CO
17534,NORTH ACADEMY BOULEVARD BRANCH,80918,CO
8273,BROADMOOR BRANCH,80915,CO
8273,MESSENGER SERVICE,80932,CO
19220,BRIARGATE BRANCH,80920,CO
6384,TEJON BRANCH,80903,CO
6548,EXCHANGE BRANCH,80903,CO
6548,AUSTIN BLUFF BRANCH,80918,CO
6548,BRIARGATE BRANCH,80920,CO
57716,FOUNTAIN BRANCH,80817,CO
19600,HWY 85/87 BRANCH,80817,CO

2025-01-21 09:05:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:05:44 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:44 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:05:45 - root - INFO - SQL:
SELECT "zip_code", COUNT(*) AS "bank_count"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   GROUP BY "zip_code"
   ORDER BY "bank_count" DESC
   LIMIT 100;
Results:
zip_code,bank_count
80111,33
80202,31
80206,30
80501,30
80525,24
80112,24
80634,24
80903,24
80302,20
80920,18
80134,16
80537,15
81301,15
80012,14
80301,14
80601,13
81501,13
80524,13
80401,13
80020,12
80918,12
80222,12
80016,12
81401,11
81611,11
80226,11
80015,10
80021,10
80550,10
80538,10
80123,10
80211,10
80104,10
80122,10
81212,9
80234,9
80921,9
81003,9
80228,9
80124,9
81505,9
80011,9
80002,9
80906,9
81008,8
80013,8
80203,8
80126,8
81101,8
80439,8
81005,8
80229,8
80129,8
81321,8
80631,8
80127,8
80027,8
80022,8
81601,8
80487,8
80907,7
81416,7
80751,7
81147,7
80528,7
81620,7
81632,7
80233,7
80224,7
80909,7
80030,7
80108,7
80110,7
81082,7
80207,7
80227,7
80026,7
80246,6
80504,6
81050,6
80424,6
80014,6
80033,6
80521,6
81657,6
81623,6
80807,6
80915,6
81007,6
81052,6
80120,6
80231,6
80701,6
81621,6
80817,5
81521,5
80214,5
80249,5
80723,5
80516,5

2025-01-21 09:05:45 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:45 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:45 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:46 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:05:46 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:46 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:05:47 - root - INFO - SQL:
SELECT DISTINCT "zip_code"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 100;
Results:
zip_code
80913
80920
80916
80907
80922
80905
80132
80921
80903
80906
80918
80914
80923
80915
80909
80932
80808
80917
80933
80840
81301
81303
81122
80524
80549
80517
80538
81501
81504
81503
81422
80723
80654
80701
80863
80911
80831
81137
80525
80537
80534
81506
81427
80424
80443
81624
81090
81428
80446
80482
81230
80815
81130
81321
81052
81132
81067
80924
81302
80526
81526
81432
80498
80817
80904
80521
80513
80728
81520
81521
81425
80435
80813
80528
81505
81401
81147
81073
81054
81201
80810
81140
81063
81416
81324
80442
80447
80459
81224
81036
80807
80828
80821
81328
81323
80731
81041
81047
81144
81433

2025-01-21 09:05:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:49 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-21 09:05:51 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:51 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:05:51 - root - INFO - SQL:
SELECT "zip_code", "zip_code_geom", "state_code"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 100;
Results:
Too long, hard cut:
zip_code,zip_code_geom,state_code
80621,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x88\x03\x00\x00\x9b\x1f\x7fiQ<Z\xc0\xc2\xd9\xade2\x06D@d\x9b\xe2qQ<Z\xc0Nyt#,\x06D@\xd30|DL<Z\xc0\x85\xdb\xa1a1\x06D@F\xd8\xf0\xf4J<Z\xc0V#\xbb\xd22\x06D@\x9b\x02\x99\x9dE<Z\xc09\xc9V\x97S\x06D@o.\xfe\xb6\'<Z\xc0\x91D/\xa3X\x06D@\xecO\xe2s\'<Z\xc0\xc2\xb5\xda\xc3^\x06D@\x7f\x17\xb6f+<Z\xc0>\x07\x96#d\x06D@\x14{h\x1f+<Z\xc0\x9e`\xffun\x06D@\x96\xebm3\x15<Z\xc0\xca\xe0(yu\x06D@\x1e\x92\xe8e\x14<Z\xc0\xd2\x0f\xea""\x85\x06D@tF\x94\xf6\x06<Z\xc0\x85r\xa2]\x85\x06D@\xe6\x07\xae\xf2\x04<Z\xc0\xe7g\xeau\x8b\x06D@\xfb\x93\xf8\xdc\t<Z\xc0\x93\x8er0\x9b\x06D@""T\xa9\xd9\x03<Z\xc0\xd4\x02{L\xa4\x06D@\x87\x19\x1aO\x04<Z\xc0]\xbb\xb4\xe1\xb0\x06D@\xe3Y\x10\xca\xfb;Z\xc0\xcd\x17{/\xbe\x06D@\x93\x06E\xf3\x00<Z\xc0\xe8}\xe3k\xcf\x06D@\xef\xc8Xm\xfe;Z\xc0\xb2\x8d?Q\xd9\x06D@\xc0\xd4]\xd9\x05<Z\xc0\x7f\xd1\xe5\xcd\xe1\x06D@\xaa\xd5WW\x05<Z\xc0)\xa7=%\xe7\x06D@&r\xc1\x19\xfc;Z\xc0\x13\x04\x8fo\xef\x06D@\xfd7\xbd\x8b\xf7;Z\xc0\xe4U\x9d\xd5\x02\x07D@\xc4\x96\x1eM\xf5;Z\xc0\x1ac\'\xbc\x04\x07D@\xa5\xe9z\xa2\xeb;Z\xc0\xc7\x83-v\xfb\x06D@\x9b\xe6\x1d\xa7\xe8;Z\xc0\xf6\x07\xcam\xfb\x06D@\x97\xab\x1f\x9b\xe4;Z\xc0\xaa\xa8\xc14\x0c\x07D@\xde_\xcb+\xd7;Z\xc0_\x0bzo\x0c\x07D@P\x07@\xdc\xd5;Z\xc0`\x15od\x1e\x07D@\xba\xc5\xfc\xdc\xd0;Z\xc0\xf3\x8eSt$\x07D@P\xc5\x8d[\xcc;Z\xc0\xf3G\x18\x06,\x07D@-\tPS\xcb;Z\xc0\xcd\x05.\x8f5\x07D@\x8f\xc7\x0cT\xc6;Z\xc0\xac\x84\xee\x928\x07D@Q\x1bc\'\xbc;Z\xc0\x8a\x16\xa0m5\x07D@\x07\x82\x8eV\xb5;Z\xc0\x8aPl\x05M\x07D@\xff\xd4\x06\'\xa2;Z\xc0X\xc8\\\x19T\x07D@U\xa6\x98\x83\xa0;Z\xc0\x99\xb1h:;\x07D@\xba?\xa5J\x94;Z\xc0\x84\x0e\xba\x84C\x07D@\xb8\xcc\xe9\xb2\x98;Z\xc0\xe0/fKV\x07D@\x7fj\xbct\x93;Z\xc0\xa7R\xb3\x07Z\x07D@\xe2\\\xc3\x0c\x8d;Z\xc0O\xba\xf4/I\x07D@\xb6\xf6>U\x85;Z\xc0\x0f/\x88HM\x07D@\xe0\xfc\x14\xc7\x81;Z\xc0Kk\xd3\xd8^\x07D@*y\x03\xcc|;Z\xc0h\x1c\xeawa\x07D@\x024\xd8\xd4y;Z\xc0\xaf\x0f\xeb\x8dZ\x07D@\xa6\x85\xcb*l;Z\xc0{j\xf5\xd5U\x07D@z\xaf\xe8\xd6k;Z\xc0\xab\\\xa8\xfck\x07D@7\x19U\x86q;Z\xc0\x99v1\xcdt\x07D@\x96FZ*o;Z\xc0\xfa\x03\xe5\xb6}\x07D@S\x08\xe4\x12G;Z\xc0\xd2p\xca\xdc|\x07D@=HO\x91C;Z\xc00y\x03\xcc|\x07D@G_\xcf\xd7,;Z\xc0\xfc7/N|\x07D@\xd4\r\x14x\';Z\xc0\x8b\xc4\x045|\x07D@~\xac\xe0\xb7!;Z\xc0H\xd5v\x13|\x07D@\x8e\xee\xae\xb3!;Z\xc0\xd6-\x02c}\x07D@\x06\xf7\x03\x1e\x18;Z\xc0e\xba\xd7I}\x07D@\x96\xd1\xc8\xe7\x15;Z\xc0=[\x07\x07{\x07D@s/0+\x14;Z\xc0\x03]\xfb\x02z\x07D@lcz\xc2\x12;Z\xc0\x9e\x97\x8a\x8dy\x07D@\xfdL\xbdn\x11;Z\xc0[\xa8\xfcky\x07D@.t%\x02\xd5:Z\xc0W\xeb\xc4\xe5x\x07D@}\xb8r\xf6\xce:Z\xc0\xe6w\x9a\xccx\x07D@\x91\xa2\\\x1a\xbf:Z\xc0\x91\x1d\x1b\x81x\x07D@\x00\tQ\xbe\xa0:Z\xc0\xba\xe4\x7f\xf2w\x07D@\xc0\x9cg\xecK:Z\xc0\x80\xe6s\xeev\x07D@e9\t\xa5/:Z\xc0]\x10\x91\x9av\x07D@\xb0\xac4)\x05:Z\xc0\x17d\xcb\xf2u\x07D@\x89\x98\x12I\xf49Z\xc0\xa6\xf0\xa0\xd9u\x07D@\x8d\xb6*\x89\xec9Z\xc0Q\x96!\x8eu\x07D@)\xd7\x14\xc8\xec9Z\xc0c\xe4,\xeci\x07D@\xe0\xe7\x86\xa6\xec9Z\xc0Fo\xb8\x8f\xdc\x06D@\xb0c\xea\xae\xec9Z\xc0 r\xfaz\xbe\x06D@V2\x8e\x91\xec9Z\xc0\xc2\xc1\xde\xc4\x90\x06D@V2\x8e\x91\xec9Z\xc0\xdd\xb3\xae\xd1r\x06D@\x8d\xb6*\x89\xec9Z\xc0f\xcfej\x12\x06D@\xeb\x95@J\xec9Z\xc0\x1e\x88,\xd2\xc4\x05D@""\x1a\xddA\xec9Z\xc0\xfd^\n\x0f\x9a\x05D@\x98V\xd1\x1f\x9a9Z\xc0R\xb9\x89Z\x9a\x05D@^\x18w\x83h9Z\xc0\xfd^\n\x0f\x9a\x05D@e\x8dz\x88F9Z\xc0Wv\xc1\xe0\x9a\x05D@\x05s\x82699Z\xc0\x99eO\x02\x9b\x05D@U3k) 9Z\xc0\xc7\xe9\xeb\xf9\x9a\x05D@\x97VC\xe2\x1e9Z\xc0\x17\x873\xbf\x9a\x05D@1\x82T\x8a\x1d9Z\xc0AN\x980\x9a\x05D@\xbc\x94\xbad\x1c9Z\xc0\xe66\xe1^\x99\x05D@(eRC\x1b9Z\xc0\x98\xcd\xe30\x98\x05D@\xb7\x0b\xcdu\x1a9Z\xc0\x94D\xf6A\x96\x05D@\xa6\xba\x80\x97\x199Z\xc0$9`W\x93\x05D@\x8a|%\x90\x129Z\xc0~\x10\xc9\x90c\x05D@\x8c\xd9\x92U\x119Z\xc0\xca\xf4K\xc4[\x05D@\xb5\x91y\xe4\x0f9Z\xc0\xe7T2\x00T\x05D@\xa4Z\xd2Q\x0e9Z\xc0\xb3\xe3\x86\xdfM\x05D@\x18\x11\xc5\xe4\r9Z\xc0V\x0f\x98\x87L\x05D@\xa6\xb7?\x17\r9Z\xc0\x14TT\xfdJ\x05D@\xbd\xea\x8f0\x0c9Z\xc0\xd9UH\xf9I\x05D@B&\x199\x0b9Z\xc0\xc1-\x1fII\x05D@\xfb\x93\xf8\xdc\t9Z\xc0\xfd_u\xe4H\x05D@\x12\xc7H\xf6\x089Z\xc0-\xe4\x11\xdcH\x05D@\xdd\x9f\x19\xc4\x079Z\xc0""6X8I\x05D@\x94\x06E\xf3\x009Z\xc0\x01\xb5\x18<L\x05D@\xbf\xf80{\xd98Z\xc0\xf1\xb7=Ab\x05D@aX\x8c\xba\xd68Z\xc0\x9c)t^c\x05D@k\x0e\x10\xcc\xd18Z\xc0h\x80\x0b\xb2e\x05D@@8-x\xd18Z\xc0\t\xe0f\xf1b\x05D@\x11\xce5\xcc\xd08Z\xc0hP4\x0f`\x05D@\xb4""j\xa2\xcf8Z\xc0\xe8\xd9\xac\xfa\\\x05D@6\x0c\xadN\xce8Z\xc0\xcd(\x96[Z\x05D@\xd9\xb9\xf7p\xc98Z\xc0\xf1\xce\xa1\x0cU\x05D@y`\x8e\x1e\xbf8Z\xc0b\xbdQ+L\x05D@\'T\xfe\xb5\xbc8Z\xc0E\x0c;\x8cI\x05D@;\x1c]\xa5\xbb8Z\xc0\xd4\xccZ\nH\x05D@\xad\xc3\xd1U\xba8Z\xc0\xc9\x865\x95E\x05D@\xad\xddv\xa1\xb98Z\xc04qr\xbfC\x05D@x\x9c\xa2#\xb98Z\xc0\x85B\x04\x1cB\x05D@\xac\xce\xf8\xbe\xb88Z\xc0\xbf\xa8\xa4N@\x05D@\xe8\x00OZ\xb88Z\xc0\xaa\xe8\x0f\xcd<\x05D@G\t\x88I\xb88Z\xc0{\x98\xbdl;\x05D@\xa2}\xac\xe0\xb78Z\xc0sz\xde\x8d\x05\x05D@q\xd0\xec\xba\xb78Z\xc0\rZH\xc0\xe8\x04D@\x89\x12\xbb\xb6\xb78Z\xc06\x89A`\xe5\x04D@\xd8\xf2\xca\xf5\xb68Z\xc0\xbd\xbe\xd6\xa5F\x04D@\x91F\x05N\xb68Z\xc0\xe3\xf

2025-01-21 09:05:51 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:51 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:51 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:54 - snowflake.connector.cursor - INFO - Number of results in first chunk: 32
2025-01-21 09:05:56 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:56 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:05:56 - root - INFO - SQL:
SELECT "geo_id", "blockgroup_geom"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08"
   LIMIT 100;
Results:
Too long, hard cut:
geo_id,blockgroup_geom
080010089011,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\xc2\x01\x00\x00u\xd3\xf4\xd9\x01>Z\xc0h\xe2\x1d\xe0I\xe5C@\xacW\x91\xd1\x01>Z\xc0>\xfe\xd2\xa2>\xe5C@\xe3\x0b!\xe7\xfd=Z\xc0>\xfe\xd2\xa2>\xe5C@\xdfR\xce\x17{=Z\xc0Qi\xc4\xcc>\xe5C@8\xa9\xf6\xe9x=Z\xc0>\xfe\xd2\xa2>\xe5C@F\xd9\xe9\x07u=Z\xc0\xbb\x1f\xb7_>\xe5C@R6sHj=Z\xc0\xdcv\xa1\xb9N\xe5C@\xe5\xc6\xbb#c=Z\xc0t\x11\xdf\x89Y\xe5C@\xb1\x1e\x85\xebQ=Z\xc0\xec\x04\xfb\xafs\xe5C@\x97\xecfF?=Z\xc0PhY\xf7\x8f\xe5C@\tR)v4=Z\xc0\x13\xb7\nb\xa0\xe5C@\xeb@d\x91&=Z\xc08/N|\xb5\xe5C@]\x02~\x8d$=Z\xc0eKVE\xb8\xe5C@\xa5\xc5\xa7\x00\x18=Z\xc0eKVE\xb8\xe5C@7\xa9h\xac\xfd<Z\xc05\xc7\xb9M\xb8\xe5C@\xe78\xb7\t\xf7<Z\xc0x\xb6Go\xb8\xe5C@\x0f/\x16\x86\xc8<Z\xc05\xc7\xb9M\xb8\xe5C@\x99\x18Y2\xc7<Z\xc05\xc7\xb9M\xb8\xe5C@\xee\xcfEC\xc6<Z\xc05\xc7\xb9M\xb8\xe5C@\x9c\xa6\xcf\x0e\xb8<Z\xc0\xb2\xe8\x9d\n\xb8\xe5C@\xa4>W[\xb1<Z\xc0\x90\x12\xbb\xb6\xb7\xe5C@fS<.\xaa<Z\xc01\n\x82\xc7\xb7\xe5C@\x95G7\xc2\xa2<Z\xc0\\\xd1\xe68\xb7\xe5C@\xb9\xfd\xf2\xc9\x8a<Z\xc08/N|\xb5\xe5C@0P\xe0\x9d|<Z\xc0\x967\x87k\xb5\xe5C@\xe0\xa8\xa3\xe3j<Z\xc0%\xc4\\R\xb5\xe5C@\xf1f\r\xdeW<Z\xc0VH\xf9I\xb5\xe5C@\xf2\xb4\xfc\xc0U<Z\xc0\x01\xeey\xfe\xb4\xe5C@i\xf0\x85\xc9T<Z\xc0\x07\xab\xb1\x84\xb5\xe5C@\xa9\x8e\xe3\x87J<Z\xc08/N|\xb5\xe5C@\xf4$w\xd8D<Z\xc08/N|\xb5\xe5C@\xb1\x8b\xa2\x07><Z\xc08/N|\xb5\xe5C@\xdf\xc95\x052<Z\xc08/N|\xb5\xe5C@\x12\xab?\xc20<Z\xc08/N|\xb5\xe5C@\xc2\xe4\xd4\xce0<Z\xc0s><K\x90\xe5C@\x9a`8\xd70<Z\xc0CL\x89$z\xe5C@\x82\x1ej\xdb0<Z\xc0o\xe3\x16\xf3s\xe5C@\x82\x1ej\xdb0<Z\xc0\xac\\\xa8\xfck\xe5C@j\xdc\x9b\xdf0<Z\xc0fL\xc1\x1ag\xe5C@K\x9a\xcd\xe30<Z\xc0_\n\x0f\x9a]\xe5C@3X\xff\xe70<Z\xc0X\xc8\\\x19T\xe5C@\x0b\xd4b\xf00<Z\xc0e\xf5\x0e\xb7C\xe5C@\x0b\xd4b\xf00<Z\xc0BSv\xfaA\xe5C@\x0b\xd4b\xf00<Z\xc0\x08\x89\xb4\x8d?\xe5C@\xfb)\x1cA*<Z\xc0:\rQ\x85?\xe5C@\xb6\xda\xc3^(<Z\xc0\x08\x89\xb4\x8d?\xe5C@P\x06\xd5\x06\'<Z\xc0\x85\xaa\x98J?\xe5C@\x89\x0c\xabx#<Z\xc0]\xb9\xde6S\xe5C@\xd8\xdd<\xd5!<Z\xc0\xf5\xbb\xb05[\xe5C@\xe4\xfe\xb1\x10\x1d<Z\xc0\x94\xedC\xder\xe5C@\'1\x08\xac\x1c<Z\xc0\x89\x0b@\xa3t\xe5C@]\x02~\x8d$<Z\xc0?\x89\xcf\x9d`\xe5C@\xd8P\xf8l\x1d<Z\xc0*\xd9\xb1\x11\x88\xe5C@6\x95Ea\x17<Z\xc0/\x7f\x85\xcc\x95\xe5C@F\xba-\x91\x0b<Z\xc0jO\xc99\xb1\xe5C@\xaa\xd5WW\x05<Z\xc0\x1a\x9b\x1d\xa9\xbe\xe5C@\n\x12\xdb\xdd\x03<Z\xc0Cb\x82\x1a\xbe\xe5C@\x05\xae\xb9\xa3\xff;Z\xc0?\xf6z\xf7\xc7\xe5C@\x12?\x8d{\xf3;Z\xc0%l?\x19\xe3\xe5C@a\x92XR\xee;Z\xc0y\xafZ\x99\xf0\xe5C@j\xfa\xec\x80\xeb;Z\xc08y\x91\t\xf8\xe5C@\x89a\x871\xe9;Z\xc0\xfb\xaa\\\xa8\xfc\xe5C@\xc0\xd6\xa5F\xe8;Z\xc0/\xb8\xe6\x8e\xfe\xe5C@,\x0f\xd2S\xe4;Z\xc0%\xc3\xf1|\x06\xe6C@\xa4\x8d#\xd6\xe2;Z\xc0\xe8(\x07\xb3\t\xe6C@Jg\xee!\xe1;Z\xc0\xafKTo\r\xe6C@\xa08\x80~\xdf;Z\xc0\x08\xfbv\x12\x11\xe6C@\x16\x8e\xae\xd2\xdd;Z\xc01&\xfd\xbd\x14\xe6C@\x885#\x83\xdc;Z\xc0\xce\xb5/\xa0\x17\xe6C@\rq\xac\x8b\xdb;Z\xc0\xb5%r\xc1\x19\xe6C@\xc3\x16I\xbb\xd1;Z\xc0\x9ek_@/\xe6C@\xce\x1a\xbc\xaf\xca;Z\xc0""\xcb\x82\x89?\xe6C@(I\xd7L\xbe;Z\xc0\xad\xf5EB[\xe6C@M\xa1\xf3\x1a\xbb;Z\xc0\xde2\xa7\xcbb\xe6C@\x13\xf1\xd6\xf9\xb7;Z\xc0\xa0\xfc\xdd;j\xe6C@-\xb5\xdeo\xb4;Z\xc0Z\xd5\x92\x8er\xe6C@t\xa0\x15\x18\xb2;Z\xc0t\xea\xcagy\xe6C@\xe2\xe7\xbf\x07\xaf;Z\xc0\t\xb9R\xcf\x82\xe6C@`=\xee[\xad;Z\xc0J\xd8\xb7\x93\x88\xe6C@\x984F\xeb\xa8;Z\xc0p\xec\xd9s\x99\xe6C@:z\xfc\xde\xa6;Z\xc0\x10i\x1b\x7f\xa2\xe6C@\x9a\xb6\x7fe\xa5;Z\xc0\re\xa8\x8a\xa9\xe6C@\xb1\x03u\xca\xa3;Z\xc0\x86N\xcf\xbb\xb1\xe6C@$\xd4\x0c\xa9\xa2;Z\xc0\xa0c\x07\x95\xb8\xe6C@\xd6[\x91\x98\xa0;Z\xc0R{\x11m\xc7\xe6C@\x06\xbba\xdb\xa2;Z\xc0\xe7I\x99\xd4\xd0\xe6C@H\xc4\x94H\xa2;Z\xc0\xb6\xf5\xd3\x7f\xd6\xe6C@%\x08W@\xa1;Z\xc0*\xdb\x87\xbc\xe5\xe6C@Sc\xd0\t\xa1;Z\xc0\xf1\x95@J\xec\xe6C@\xfbZ\x97\x1a\xa1;Z\xc0\x1c\xd1=\xeb\x1a\xe7C@\xe0mlv\xa4;Z\xc0\x1c\xd1=\xeb\x1a\xe7C@\xc9ZC\xa9\xbd;Z\xc0\x8eDh\x04\x1b\xe7C@\xdf\xad\xba\x0e\xd5;Z\xc0\xfd\xb7\x92\x1d\x1b\xe7C@\x0eod\x1e\xf9;Z\xc0V\x03\x94\x86\x1a\xe7C@g\xf9\xba\x0c\xff;Z\xc0s\x1c?T\x1a\xe7C@\x10()\xb0\x00<Z\xc0\x925\xea!\x1a\xe7C@\xd4\xdb-\xc9\x01<Z\xc0@\xdbj\xd6\x19\xe7C@E5\xb3\x96\x02<Z\xc0K\x89$z\x19\xe7C@e]\xdcF\x03<Z\xc0\xa6\xd4%\xe3\x18\xe7C@\x94\xc7\xd3\xf2\x03<Z\xc0\x1c9\xd2\x19\x18\xe7C@\xe0Jvl\x04<Z\xc0c\x19\xe2X\x17\xe7C@\x02\xde\x90F\x05<Z\xc0\x11\xf3\xac\xa4\x15\xe7C@-\xb4s\x9a\x05<Z\xc0\xa8p\x04\xa9\x14\xe7C@J\x8aV\xee\x05<Z\xc0x \xb2H\x13\xe7C@C\xb3y\x1c\x06<Z\xc0\xfc2\x18#\x12\xe7C@%\x9a\xceN\x06<Z\xc0\x19\x12\xf7X\xfa\xe6C@\xf1\x81\x1d\xff\x05<Z\xc0\xca\xbb\xea\x01\xf3\xe6C@\'\xdd\x96\xc8\x05<Z\xc0ze\xde\xaa\xeb\xe6C@\'\xdd\x96\xc8\x05<Z\xc0\x11\xb3^\x0c\xe5\xe6C@\xe5\xf0I\'\x12<Z\xc0>Pn\xdb\xf7\xe6C@ \x0c<\xf7\x1e<Z\xc0\xed\xcb\x99\xed\n\xe7C@$d \xcf.<Z\xc0\x84Os\xf2""\xe7C@\xc6\x1f\xd3\xda4<Z\xc0\x8b\x91%s,\xe7C@\x12U\x86q7<Z\xc0\xdc\xeb\xa4\xbe,\xe7C@\x17\x9f\x02`<<Z\xc0 \xc8A\t3\xe7C@\xe7\x00\xc1\x1c=<Z\xc0A\xce\xfb\xff8\xe7C@\xb6m\xa6B<<Z\xc0\x93\xf40\xb4:\xe7C@\xad\x1cZd;<Z\xc0\x93\xc0\xe6\x1c<\xe7C@\xf5JY\x868<Z\xc0O5z5@\xe7C@\x8f?\xdf\x16,<Z\xc0LN\xed\x0cS\xe7C@\xc7\x11k\xf1)<Z\xc0\\\x1d\x00qW\xe7C@\x13\x86\x8f\x88)<Z

2025-01-21 09:05:56 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:56 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:56 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:57 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-21 09:05:57 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:05:58 - root - INFO - SQL:
SELECT COUNT(*) AS "blockgroup_count"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08";
Results:
blockgroup_count
3532

2025-01-21 09:05:58 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:05:58 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:05:58 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:05:59 - snowflake.connector.connection - INFO - closed
2025-01-21 09:05:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:06:23 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:06:23 - root - INFO - The error you're encountering occurs because the `ST_INTERSECTS` function requires inputs of the `GEOGRAPHY` data type, but your geometry columns are stored as `BINARY` (Well-Known Binary or WKB format). To perform spatial operations, you need to convert these binary geometry data into `GEOGRAPHY` objects using the `TO_GEOGRAPHY` function, specifying the format as `'WKB'`.

**Here's the corrected SQL query:**

```sql
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    TO_GEOGRAPHY(bg."blockgroup_geom", 'WKB'),
    TO_GEOGRAPHY(zc."zip_code_geom", 'WKB')
  )
LIMIT 100;
```

**Explanation:**

- **Conversion to GEOGRAPHY:**
  - Use `TO_GEOGRAPHY(bg."blockgroup_geom", 'WKB')` to convert the block group geometry from `BINARY` to `GEOGRAPHY`.
  - Use `TO_GEOGRAPHY(zc."zip_code_geom", 'WKB')` to convert the ZIP code geometry from `BINARY` to `GEOGRAPHY`.

- **ST_INTERSECTS Function:**
  - Now that both geometries are of type `GEOGRAPHY`, the `ST_INTERSECTS` function can properly evaluate the spatial intersection between the block groups and ZIP codes.

By applying these conversions, the query should run without errors and return the overlapping block groups and ZIP codes in Colorado.

Let me know if you have any more questions or need further assistance!
2025-01-21 09:06:23 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:06:23 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:06:23 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:06:30 - snowflake.connector.connection - INFO - closed
2025-01-21 09:06:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:06:52 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:06:52 - root - INFO - I apologize for the confusion earlier. The error occurs because the `TO_GEOGRAPHY` function does not accept a second argument `'WKB'`. In Snowflake, to convert Well-Known Binary (WKB) geometry data stored as `BINARY` to `GEOGRAPHY`, you should use the `GEOGRAPHY_FROM_WKB` function instead.

**Here's the corrected SQL query:**

```sql
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    GEOGRAPHY_FROM_WKB(bg."blockgroup_geom"),
    GEOGRAPHY_FROM_WKB(zc."zip_code_geom")
  )
LIMIT 100;
```

**Explanation:**

- **Using GEOGRAPHY_FROM_WKB:**
  - `GEOGRAPHY_FROM_WKB(expression)` converts a `BINARY` value containing WKB geometry data into a `GEOGRAPHY` object.
  - This function is specifically designed to handle Well-Known Binary inputs and does not require a format specifier.

- **Why the Error Occurred:**
  - The previous query used `TO_GEOGRAPHY(bg."blockgroup_geom", 'WKB')`, but `TO_GEOGRAPHY` does not accept a format argument.
  - Passing `'WKB'` as a second argument caused the function to misinterpret the value, leading to the error: **"Boolean value 'WKB' is not recognized"**.

- **ST_INTERSECTS Function:**
  - Now that both geometries are correctly converted to `GEOGRAPHY` objects using `GEOGRAPHY_FROM_WKB`, the `ST_INTERSECTS` function can properly evaluate the spatial intersection.

**Additional Note:**

If for any reason `GEOGRAPHY_FROM_WKB` does not work, you can also use `ST_GEOGFROMWKB` as an alternative function to convert WKB to `GEOGRAPHY`:

```sql
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
LIMIT 100;
```

Both `GEOGRAPHY_FROM_WKB` and `ST_GEOGFROMWKB` serve the same purpose in this context.

**Let me know if this resolves the issue or if you encounter any further errors!**
2025-01-21 09:06:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:06:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:06:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:06:54 - snowflake.connector.connection - INFO - closed
2025-01-21 09:06:54 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:07:53 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:07:53 - root - INFO - I apologize for the confusion.

From the error message, it appears that the functions `GEOGRAPHY_FROM_WKB` and `ST_GEOGFROMWKB` are not recognized in your Snowflake environment. This may be due to the spatial functions not being enabled or available in your Snowflake instance.

**Alternative Solution Using GEOMETRY Data Type:**

Let's try using the `GEOMETRY` data type instead of `GEOGRAPHY`. In Snowflake, you can convert Well-Known Binary (WKB) data into a `GEOMETRY` object using the `ST_GEOMETRYFROMWKB` function. The `ST_INTERSECTS` function works with both `GEOMETRY` and `GEOGRAPHY` data types.

**Revised SQL Query:**

```sql
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOMETRYFROMWKB(bg."blockgroup_geom"),
    ST_GEOMETRYFROMWKB(zc."zip_code_geom")
  )
LIMIT 100;
```

**Explanation:**

- **ST_GEOMETRYFROMWKB Function:**
  - Converts WKB (`BINARY` data) into a `GEOMETRY` object.
  - Syntax: `ST_GEOMETRYFROMWKB(<binary_expression>)`
  - No need for additional arguments.

- **ST_INTERSECTS Function:**
  - Determines if two `GEOMETRY` objects intersect.
  - Works with `GEOMETRY` data types.

**Possible Reasons for Previous Errors:**

- **Spatial Functions Not Enabled:**
  - Your Snowflake environment might not have the spatial data processing features enabled.
  - Some spatial functions are available by default, but others may require additional setup.

- **Function Availability:**
  - Functions like `GEOGRAPHY_FROM_WKB` and `ST_GEOGFROMWKB` might not be available in all Snowflake editions or might require enabling a feature or extension.

**Next Steps:**

1. **Run the Revised Query:**
   - Try executing the query above to see if it resolves the error.

2. **Check Function Availability:**
   - If you receive an error like `Unknown function ST_GEOMETRYFROMWKB`, it indicates that spatial functions are not available.
   - You can check available functions using:
     ```sql
     SHOW USER FUNCTIONS;
     ```

3. **Enable Spatial Data Processing:**
   - Contact your Snowflake account administrator to ensure that spatial data types and functions are enabled.
   - In some cases, you might need to install an add-on or enable a feature flag.

4. **Alternative Approach:**

   - **Verify Data Format:**
     - Confirm whether your geometry data is stored in WKB (Well-Known Binary) or WKT (Well-Known Text) format.
     - If it's in WKT format, you can use `ST_GEOMETRYFROMTEXT` instead:
       ```sql
       ST_GEOMETRYFROMTEXT(bg."blockgroup_geom")
       ```
   - **Casting to STRING:**
     - If the `BINARY` data can be converted to a `VARCHAR`, you might attempt to cast it:
       ```sql
       ST_GEOMETRYFROMWKB(TO_BINARY(bg."blockgroup_geom"))
       ```

**Example Using ST_GEOMETRYFROMTEXT (if data is in WKT format):**

```sql
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOMETRYFROMTEXT(bg."blockgroup_geom"),
    ST_GEOMETRYFROMTEXT(zc."zip_code_geom")
  )
LIMIT 100;
```

**Important Notes:**

- **Data Type Compatibility:**
  - Ensure that the data types of the geometries match the functions you're using.
  - `ST_GEOMETRYFROMWKB` expects `BINARY` WKB data.
  - `ST_GEOMETRYFROMTEXT` expects `VARCHAR` WKT data.

- **Function Names:**
  - Function names in Snowflake are case-insensitive, but it's a good practice to use uppercase for built-in functions.

**If Errors Persist:**

- **Consult Documentation:**
  - Refer to the [Snowflake Spatial Data Types and Functions](https://docs.snowflake.com/en/sql-reference/functions-geospatial) documentation for more details.

- **Contact Support:**
  - If you're unable to enable the required functions, consider reaching out to Snowflake support or your database administrator.

**Let me know if you continue to experience issues, and I'll be happy to assist further!**
2025-01-21 09:07:53 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:07:53 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:07:53 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:07:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:07:55 - snowflake.connector.connection - INFO - closed
2025-01-21 09:07:55 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:09:15 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:09:15 - root - INFO - SQL:
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOMETRYFROMWKB(bg."blockgroup_geom"),
    ST_GEOMETRYFROMWKB(zc."zip_code_geom")
  )
LIMIT 100;
Results:
blockgroup_id,zip_code
081230019053,80621
081230010053,80631
081230010053,80620
081230010053,80634
081230022053,80550
081230004023,80631
081230004023,80634
081230015003,80615
081230001003,80631
080010085434,80603
080010085434,80601
080010093044,80229
080010093044,80260
080010093044,80233
080010089011,80022
080010089011,80216
080010089011,80640
080010089011,80229
080010093251,80234
080010085451,80241
080010085261,80602
080010085261,80241
080010085261,80023
080010085261,80234
080010085481,80602
080010085481,80241
080010092061,80229
080010092061,80233
080010081001,80239
080010081001,80010
080010081001,80045
080010081001,80011
080010085501,80602
080010085501,80241
080010085501,80233
080010093044,80234
080010090024,80221
080010090024,80229
080010090024,80260
080010093274,80234
080010085244,80602
080010085244,80241
080050056194,80123
080050056304,80122
080050067044,80222
080050067044,80113
080050067044,80210
080050066014,80110
080050066014,80121
080050066014,80120
080050066014,80113
080050071014,80105
080050071014,80102
080050071014,80828
080050071014,80103
080050071014,80101
080010091031,80229
080010091031,80233
080010094101,80031
080010085341,80233
080010096061,80030
080010096061,80003
080010096061,80221
080010602001,80241
080010602001,80233
080010602001,80234
080010094081,80031
080010094081,80020
080010094081,80234
080010150001,80022
080010150001,80640
080010150001,80229
080010085291,80241
080010085231,80602
080010085231,80603
080010085231,80640
080010085231,80601
080010600001,80602
080010600001,80023
080010085331,80229
080010085331,80233
080010085241,80602
080010085241,80241
080010082001,80011
080010096081,80030
080010096081,80003
080010085061,80241
080010085061,80233
080010085371,80022
080010085371,80603
080010085371,80640
080050071014,80136
080050062004,80110
080130137014,80446
080130137014,80466
080130137014,80455
080130137014,80302
080130137014,80481
080130137014,80540
080130128004,80026

2025-01-21 09:09:15 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:09:15 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:09:15 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:09:16 - snowflake.connector.connection - INFO - closed
2025-01-21 09:09:16 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:09:58 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:09:58 - root - INFO - The error you're encountering is due to passing `BINARY` data directly into spatial functions like `ST_INTERSECTION` and `ST_AREA`, which expect inputs of type `GEOMETRY`. To resolve this issue, you need to convert your `BINARY` geometry columns into `GEOMETRY` objects using the `ST_GEOMETRYFROMWKB` function before using them in spatial operations.

**Here's the corrected SQL query:**

```sql
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code",
  ST_AREA(
    ST_INTERSECTION(
      ST_GEOMETRYFROMWKB(bg."blockgroup_geom"),
      ST_GEOMETRYFROMWKB(zc."zip_code_geom")
    )
  ) AS "overlap_area",
  ST_AREA(
    ST_GEOMETRYFROMWKB(bg."blockgroup_geom")
  ) AS "blockgroup_area"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOMETRYFROMWKB(bg."blockgroup_geom"),
    ST_GEOMETRYFROMWKB(zc."zip_code_geom")
  )
LIMIT 100;
```

**Explanation:**

- **Converting BINARY to GEOMETRY:**
  - Use `ST_GEOMETRYFROMWKB(bg."blockgroup_geom")` to convert the block group geometry from `BINARY` to `GEOMETRY`.
  - Use `ST_GEOMETRYFROMWKB(zc."zip_code_geom")` to convert the ZIP code geometry from `BINARY` to `GEOMETRY`.
  - Apply these conversions wherever the geometry columns are used in spatial functions.

- **Spatial Functions Adjusted:**
  - **`ST_INTERSECTION`** and **`ST_INTERSECTS`** now receive `GEOMETRY` inputs, resolving the type mismatch error.
  - **`ST_AREA`** calculates the area of a `GEOMETRY` object, so we wrap the geometry columns with `ST_GEOMETRYFROMWKB` before passing them to `ST_AREA`.

**Updated Query for Other SQL Statements:**

Similarly, for your other SQL queries that are experiencing the same error, you need to apply the `ST_GEOMETRYFROMWKB` function to convert the geometry columns before using them in spatial functions. Here’s the adjusted version of your SQL queries:

---

```sql
-- Corrected Query 2
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code",
  (
    ST_AREA(
      ST_INTERSECTION(
        ST_GEOMETRYFROMWKB(bg."blockgroup_geom"),
        ST_GEOMETRYFROMWKB(zc."zip_code_geom")
      )
    ) / ST_AREA(ST_GEOMETRYFROMWKB(bg."blockgroup_geom"))
  ) AS "overlap_ratio"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOMETRYFROMWKB(bg."blockgroup_geom"),
    ST_GEOMETRYFROMWKB(zc."zip_code_geom")
  )
LIMIT 100;
```

---

```sql
-- Corrected Query 3
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code",
  bc."bank_count",
  (
    ST_AREA(
      ST_INTERSECTION(
        ST_GEOMETRYFROMWKB(bg."blockgroup_geom"),
        ST_GEOMETRYFROMWKB(zc."zip_code_geom")
      )
    ) / ST_AREA(ST_GEOMETRYFROMWKB(bg."blockgroup_geom"))
  ) AS "overlap_ratio"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
JOIN
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
  ON ST_INTERSECTS(
    ST_GEOMETRYFROMWKB(bg."blockgroup_geom"),
    ST_GEOMETRYFROMWKB(zc."zip_code_geom")
  )
JOIN
  (
    SELECT "zip_code", COUNT(*) AS "bank_count"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
  ) bc
  ON zc."zip_code" = bc."zip_code"
WHERE
  zc."state_code" = 'CO'
LIMIT 100;
```

---

```sql
-- Corrected Query 5
SELECT
  zc."zip_code",
  COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOMETRYFROMWKB(bg."blockgroup_geom"),
    ST_GEOMETRYFROMWKB(zc."zip_code_geom")
  )
GROUP BY
  zc."zip_code"
LIMIT 100;
```

---

```sql
-- Corrected Query 7
SELECT
  zc."zip_code",
  COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
FROM
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
LEFT JOIN
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
  ON ST_INTERSECTS(
    ST_GEOMETRYFROMWKB(bg."blockgroup_geom"),
    ST_GEOMETRYFROMWKB(zc."zip_code_geom")
  )
WHERE
  zc."state_code" = 'CO'
GROUP BY
  zc."zip_code"
LIMIT 100;
```

**Notes:**

- **Function `ST_GEOMETRYFROMWKB`:**
  - Converts Well-Known Binary (WKB) geometry data stored as `BINARY` into `GEOMETRY` objects suitable for spatial functions.
  - Ensure that you wrap each geometry column with this function wherever it's used in spatial operations.

- **Why Conversion is Necessary:**
  - Spatial functions like `ST_INTERSECTS`, `ST_INTERSECTION`, and `ST_AREA` require inputs of type `GEOMETRY` or `GEOGRAPHY`.
  - Passing `BINARY` data directly into these functions results in a type mismatch error.

**Additional Reminder:**

- **Check Other Queries:**
  - For any other SQL statements using spatial functions with geometry columns, ensure that you apply `ST_GEOMETRYFROMWKB` to the geometry columns.

- **Performance Consideration:**
  - Converting geometry columns on the fly can be resource-intensive. If you frequently perform spatial operations, consider creating views or materialized views with the geometry columns already converted.

**Example:**

```sql
CREATE VIEW "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08_VIEW" AS
SELECT
  "geo_id",
  ST_GEOMETRYFROMWKB("blockgroup_geom") AS "geom"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08";
```

- Now, you can use `"geom"` directly in your spatial queries without repeatedly converting it.

**Let me know if you have any more questions or need further assistance!**
2025-01-21 09:09:58 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:09:58 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:09:58 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:09:59 - snowflake.connector.connection - INFO - closed
2025-01-21 09:10:00 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:11:00 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:11:00 - root - INFO - I understand that you're encountering a persistent error, and I'll help you resolve it.

**Error Explanation:**

The error message:

```
Invalid argument types for function 'ST_INTERSECTION': (GEOMETRY, GEOMETRY)
```

indicates that the `ST_INTERSECTION` function does not accept `GEOMETRY` data types as inputs in Snowflake. In Snowflake, the `ST_INTERSECTION` function is designed to work with the `GEOGRAPHY` data type.

**Solution:**

To fix this error, you need to:

1. **Convert your binary geometries to the `GEOGRAPHY` data type** using `ST_GEOGFROMWKB` instead of `ST_GEOMETRYFROMWKB`.

2. **Use `ST_INTERSECTION` with `GEOGRAPHY` data types**, as it supports this data type.

3. **Adjust your queries accordingly** to perform spatial operations using `GEOGRAPHY`.

**Corrected SQL Query:**

Here's the corrected version of your query:

```sql
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code",
  ST_AREA(
    ST_INTERSECTION(
      ST_GEOGFROMWKB(bg."blockgroup_geom"),
      ST_GEOGFROMWKB(zc."zip_code_geom")
    )
  ) AS "overlap_area",
  ST_AREA(
    ST_GEOGFROMWKB(bg."blockgroup_geom")
  ) AS "blockgroup_area"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
LIMIT 100;
```

**Explanation:**

- **Conversion to GEOGRAPHY:**
  - Use `ST_GEOGFROMWKB(bg."blockgroup_geom")` to convert the block group geometry from `BINARY` to `GEOGRAPHY`.
  - Use `ST_GEOGFROMWKB(zc."zip_code_geom")` to convert the ZIP code geometry from `BINARY` to `GEOGRAPHY`.

- **Spatial Functions with GEOGRAPHY:**
  - `ST_INTERSECTION` operates on `GEOGRAPHY` types, so converting your geometries allows you to use this function without type mismatch errors.
  - `ST_AREA` computes the area of a `GEOGRAPHY` object.

**Adjustments for Other SQL Queries:**

Similarly, you should adjust your other queries by converting geometries to `GEOGRAPHY` using `ST_GEOGFROMWKB` and using spatial functions compatible with the `GEOGRAPHY` data type.

**Examples:**

---

```sql
-- Corrected Query 1
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code",
  ST_AREA(
    ST_INTERSECTION(
      ST_GEOGFROMWKB(bg."blockgroup_geom"),
      ST_GEOGFROMWKB(zc."zip_code_geom")
    )
  ) AS "overlap_area",
  ST_AREA(
    ST_GEOGFROMWKB(bg."blockgroup_geom")
  ) AS "blockgroup_area"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
LIMIT 100;
```

---

```sql
-- Corrected Query 2
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code",
  (
    ST_AREA(
      ST_INTERSECTION(
        ST_GEOGFROMWKB(bg."blockgroup_geom"),
        ST_GEOGFROMWKB(zc."zip_code_geom")
      )
    ) / ST_AREA(ST_GEOGFROMWKB(bg."blockgroup_geom"))
  ) AS "overlap_ratio"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
LIMIT 100;
```

---

```sql
-- Corrected Query 3
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code",
  bc."bank_count",
  (
    ST_AREA(
      ST_INTERSECTION(
        ST_GEOGFROMWKB(bg."blockgroup_geom"),
        ST_GEOGFROMWKB(zc."zip_code_geom")
      )
    ) / ST_AREA(ST_GEOGFROMWKB(bg."blockgroup_geom"))
  ) AS "overlap_ratio"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
JOIN
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
  ON ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
JOIN
  (
    SELECT "zip_code", COUNT(*) AS "bank_count"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
  ) bc
  ON zc."zip_code" = bc."zip_code"
WHERE
  zc."state_code" = 'CO'
LIMIT 100;
```

---

```sql
-- Corrected Query 5
SELECT
  zc."zip_code",
  COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
GROUP BY
  zc."zip_code"
LIMIT 100;
```

---

```sql
-- Corrected Query 7
SELECT
  zc."zip_code",
  COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
FROM
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
LEFT JOIN
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
  ON ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
WHERE
  zc."state_code" = 'CO'
GROUP BY
  zc."zip_code"
LIMIT 100;
```

**Key Points:**

- **Use `ST_GEOGFROMWKB`**: Converts WKB (`BINARY` data) to `GEOGRAPHY`. This function is recognized in Snowflake and should be available in your environment.

- **Spatial Functions with `GEOGRAPHY`**: Functions like `ST_INTERSECTION`, `ST_INTERSECTS`, and `ST_AREA` work with `GEOGRAPHY` data types.

- **Check Function Availability**: If you encounter errors like `Unknown function ST_GEOGFROMWKB`, it might indicate that your Snowflake account doesn't have the geospatial features enabled. In that case, you should:

  - Ensure that your Snowflake edition supports geospatial functions.
  - Contact your Snowflake account administrator to enable spatial data processing.

**Additional Notes:**

- **Performance Consideration**: Converting geometries on the fly can be resource-intensive. If you frequently perform spatial operations, consider creating views or materialized views with the geometries already converted to `GEOGRAPHY`.

- **Example of Creating a View**:

  ```sql
  CREATE OR REPLACE VIEW "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08_GEOGRAPHY" AS
  SELECT
    "geo_id",
    ST_GEOGFROMWKB("blockgroup_geom") AS "blockgroup_geog"
  FROM
    "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08";
  ```

  You can then use `"blockgroup_geog"` directly in your spatial queries.

**Let Me Know If You Need Further Assistance**

If you continue to experience issues, please provide the exact error messages, and I'll be happy to help you troubleshoot further.
2025-01-21 09:11:00 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:11:00 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:11:00 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:11:05 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:11:05 - snowflake.connector.connection - INFO - closed
2025-01-21 09:11:05 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:12:42 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:12:42 - root - INFO - SQL:
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code",
  ST_AREA(
    ST_INTERSECTION(
      ST_GEOGFROMWKB(bg."blockgroup_geom"),
      ST_GEOGFROMWKB(zc."zip_code_geom")
    )
  ) AS "overlap_area",
  ST_AREA(
    ST_GEOGFROMWKB(bg."blockgroup_geom")
  ) AS "blockgroup_area"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
LIMIT 100;
Results:
Too long, hard cut:
blockgroup_id,zip_code,overlap_area,blockgroup_area
080899683004,81050,16703045.836551026,16703045.836551026
080459517021,81601,491922.98054666066,491922.98054666066
080970001004,81623,606492746.8290609,606492746.8290609
080970005001,81611,41903917.11501591,48027251.57104667
080970005001,81656,734946.5514559802,48027251.57104667
080970005001,81615,5388387.899059592,48027251.57104667
080970004011,81611,3802348.8558318,3802348.8558318
080970004021,81612,,87229069.51595777
080970004021,81611,87229069.50799012,87229069.51595777
080970004021,81225,,87229069.51595777
080370005032,81620,8346035.418428726,8346035.418608725
080370005032,81655,,8346035.418608725
080370004022,81631,,107219288.7873091
080370004022,81632,107219288.66659668,107219288.7873091
080370004022,81620,,107219288.7873091
080370004022,81645,,107219288.7873091
080370004032,81631,198180545.80669147,206465104.78178665
080370004032,81637,,206465104.78178665
080370004032,81632,8284558.975078789,206465104.78178665
080370004032,81645,,206465104.78178665
080370004032,81621,,206465104.78178665
080370003012,81623,6561353.748339678,6561353.748339678
080370002002,81631,182984.43973194697,13531843.997251868
080370002002,81637,13348859.554706233,13531843.997251868
080370003022,81621,3227314.633250454,3227314.633250454
080370004012,81632,44093858.171053976,100969263.414904
080459518032,81637,,91913340.2262655
080459518032,81623,80267633.9358969,91913340.2262655
080459518032,81601,11645706.290865378,91913340.2262655
080459518022,81637,,188294780.38296518
080459518022,81623,6512764.87331747,188294780.38296518
080459518022,81601,181782015.52917683,188294780.38296518
080459519022,81601,,180553796.8622243
080459517012,81601,4729250.638176315,4729250.638176315
080899683002,81050,49453054.13826318,50644046.397800915
080899683002,81067,0.0,50644046.397800915
080899683002,81077,1190992.2611823676,50644046.397800915
080899682002,81077,,86254078.43386766
080899686002,81050,873000.5257680685,873000.5257680685
080899685002,81050,9148633.192821246,9148633.192821246
080899685002,81067,,9148633.192821246
080970005002,81612,6970111.2213839535,1143883639.2259972
080970005002,81621,,1143883639.2259972
080970005002,81654,4811569.099306671,1143883639.2259972
080970005002,81656,1979765.9455290393,1143883639.2259972
080970005002,81615,,1143883639.2259972
080970001002,81611,8327377.716249071,215625382.2388422
080970001002,81623,,215625382.2388422
081190101034,80863,8013978.469048232,8013978.468989503
080970001002,81621,,215625382.2388422
080970001002,81654,207298004.52238902,215625382.2388422
080299647002,81643,,287180410.6041281
080459518042,81623,4683882.270556881,4683882.270556881
080439790003,81223,618169344.766808,1966192715.143997
080770019002,81507,,486106739.0459643
080459517022,81601,372156.5039514844,372156.5039514844
081010032002,81022,1068727004.8628829,2040387027.2963386
080410071022,80924,,5654062.510698323
080010085232,80642,2106768.5246151593,164558428.56108773
080410039092,80831,35841962.67504959,468883591.4594922
080770015013,81521,3521503.0993375494,3521503.0992563292
080459516002,81601,1012955.7231363072,1012955.7231363072
080130125104,80302,4459228.1576768905,49026422.646385945
080859665013,81415,,549723249.8349552
080590098483,80439,3331939.658900121,3331939.658900121
080970004022,81611,1013118.2418040902,1013118.2418040902
080330001002,81320,486050560.6796273,2718567594.0476766
081010028063,81005,72090803.0983348,248093937.61803743
080410076011,80908,21127203.71769051,37368277.609374024
080319800001,80642,,110169478.55470705
080970004012,81611,532760.412776815,532760.412776815
080710005002,81081,,72037167.5398562
080119667002,81050,124874047.11389206,525877397.3033636
080279701004,81223,,869487267.7383407
080410039093,80808,132749083.66053712,238602339.50608236
080370003013,81623,4043354.570377305,7042747.798194184
080459519011,81647,197424659.67830306,346101742.0708595
080370006001,81642,,646835400.7845731
080370003013,81621,2999393.227131095,7042747.798194184
080919676003,81433,,322714349.18204206
080370005033,81632,,471764.0435753285
080370005033,81620,471764.04360919446,471764.0435753285
080410038021,80920,9762.906187444838,40692151.46310781
080370005034,81620,1457971.433966775,54318970.00585513
080370004033,81631,144363277.18975532,145221368.74870774
080370001001,80423,314306243.6696778,1407908306.040784
080370005022,81645,,26998318.335462224
080319800001,80022,4787.936199059084,110169478.55470705
080399612051,80117,203721693.56154802,424391738.3664124
080859665013,81220,155333103.5188506,549723249.8349552
080370004033,81637,858091.5589879375,145221368.74870774
080299647002,81413,244581176.45665982,287180410.6041281
080919676003,81427,209865476.31927085,322714349.18204206
080919676004,81432,279223155.3391579,334946386.6830528
080439792001,81252,,210410446.6979121
080590098084,80439,,69849204.76690096
080459518043,81623,87216477.1129215,87216477.1129215
081190101052,80816,41168930.70079318,94860154.49687244
080899682002,81050,10449959.971330816,86254078.43386

2025-01-21 09:12:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:12:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:12:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:12:43 - snowflake.connector.connection - INFO - closed
2025-01-21 09:12:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:13:46 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:13:46 - root - INFO - I understand that you're still encountering the same error, and I apologize for the frustration. Let's work through this step by step to resolve the issue.

**Error Recap:**

The error message you're receiving is:

```
Invalid argument types for function 'ST_INTERSECTION': (BINARY(8388608), BINARY(8388608))
```

This indicates that the `ST_INTERSECTION` function is receiving `BINARY` data types instead of the expected spatial data types (`GEOGRAPHY` or `GEOMETRY`).

**Possible Reasons and Solutions:**

1. **Data Format Mismatch:**

   - Your geometry columns (`bg."blockgroup_geom"` and `zc."zip_code_geom"`) are stored as `BINARY(8388608)`.
   - The spatial functions require inputs of type `GEOGRAPHY` or `GEOMETRY`.
   - We need to ensure that we're correctly converting the `BINARY` data into a spatial data type before using it in spatial functions.

2. **Incorrect Conversion Functions:**

   - Previously, we attempted to use `ST_GEOGFROMWKB` to convert the binary data to `GEOGRAPHY`.
   - If the binary data is not in the expected format or coordinate system, this conversion might fail or produce invalid geometries.

**Steps to Resolve the Issue:**

1. **Verify the Geometry Data:**

   - Let's check if the binary data in your geometry columns can be successfully converted to `GEOGRAPHY` or `GEOMETRY`.

   ```sql
   SELECT
     bg."geo_id",
     ST_ISVALID(ST_GEOGFROMWKB(bg."blockgroup_geom")) AS "is_valid_geography",
     ST_ISVALID(ST_GEOMFROMWKB(bg."blockgroup_geom")) AS "is_valid_geometry"
   FROM
     "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
   LIMIT 10;
   ```

   - This query checks whether the geometries can be converted and are valid.

2. **Check for Coordinate System Compatibility:**

   - The `GEOGRAPHY` data type in Snowflake uses the WGS 84 coordinate system.
   - If your geometries are in a different coordinate system (e.g., a projected coordinate system like UTM), the conversion may not work correctly.
   - Try converting to `GEOMETRY` instead, which can handle various coordinate systems.

3. **Use `GEOMETRY` Data Type and Functions:**

   - Let's attempt to use `GEOMETRY` functions instead of `GEOGRAPHY`.

   **Rewritten SQL Query:**

   ```sql
   SELECT
     bg."geo_id" AS "blockgroup_id",
     zc."zip_code",
     (
       ST_AREA(
         ST_INTERSECTION(
           ST_GEOMFROMWKB(bg."blockgroup_geom"),
           ST_GEOMFROMWKB(zc."zip_code_geom")
         )
       ) / ST_AREA(
         ST_GEOMFROMWKB(bg."blockgroup_geom")
       )
     ) AS "overlap_ratio"
   FROM
     "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
     "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
   WHERE
     zc."state_code" = 'CO'
     AND ST_INTERSECTS(
       ST_GEOMFROMWKB(bg."blockgroup_geom"),
       ST_GEOMFROMWKB(zc."zip_code_geom")
     )
   LIMIT 100;
   ```

   **Explanation:**

   - **Conversion to `GEOMETRY`:**
     - Use `ST_GEOMFROMWKB` to convert the binary data to `GEOMETRY`.
     - `ST_GEOMFROMWKB(bg."blockgroup_geom")` converts the block group geometry.
     - `ST_GEOMFROMWKB(zc."zip_code_geom")` converts the ZIP code geometry.

   - **Spatial Functions with `GEOMETRY`:**
     - Use `ST_INTERSECTION`, `ST_AREA`, and `ST_INTERSECTS` with `GEOMETRY` data types.
     - Ensure all geometry operations are performed on the converted `GEOMETRY` objects.

4. **Verify the Validity of Geometries:**

   - It's possible that some geometries are invalid or contain errors.
   - You can check the validity of geometries using `ST_ISVALID`.

   ```sql
   SELECT
     bg."geo_id",
     ST_ISVALID(ST_GEOMFROMWKB(bg."blockgroup_geom")) AS "is_valid_geometry"
   FROM
     "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
   WHERE
     ST_ISVALID(ST_GEOMFROMWKB(bg."blockgroup_geom")) = FALSE
   LIMIT 10;
   ```

   - If invalid geometries are found, they may need to be repaired using `ST_MAKEVALID`.

5. **Handle Invalid Geometries (if any):**

   - If there are invalid geometries, you can attempt to make them valid:

   ```sql
   SELECT
     bg."geo_id" AS "blockgroup_id",
     zc."zip_code",
     (
       ST_AREA(
         ST_INTERSECTION(
           ST_MAKEVALID(ST_GEOMFROMWKB(bg."blockgroup_geom")),
           ST_MAKEVALID(ST_GEOMFROMWKB(zc."zip_code_geom"))
         )
       ) / ST_AREA(
         ST_MAKEVALID(ST_GEOMFROMWKB(bg."blockgroup_geom"))
       )
     ) AS "overlap_ratio"
   FROM
     "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
     "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
   WHERE
     zc."state_code" = 'CO'
     AND ST_INTERSECTS(
       ST_MAKEVALID(ST_GEOMFROMWKB(bg."blockgroup_geom")),
       ST_MAKEVALID(ST_GEOMFROMWKB(zc."zip_code_geom"))
     )
   LIMIT 100;
   ```

6. **Test with a Smaller Dataset:**

   - Try running the query with a limited number of records to isolate the issue.

   ```sql
   SELECT
     bg."geo_id" AS "blockgroup_id",
     zc."zip_code",
     (
       ST_AREA(
         ST_INTERSECTION(
           ST_GEOMFROMWKB(bg."blockgroup_geom"),
           ST_GEOMFROMWKB(zc."zip_code_geom")
         )
       ) / ST_AREA(
         ST_GEOMFROMWKB(bg."blockgroup_geom")
       )
     ) AS "overlap_ratio"
   FROM
     (
       SELECT *
       FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08"
       LIMIT 10
     ) bg,
     (
       SELECT *
       FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
       WHERE "state_code" = 'CO'
       LIMIT 10
     ) zc
   WHERE
     ST_INTERSECTS(
       ST_GEOMFROMWKB(bg."blockgroup_geom"),
       ST_GEOMFROMWKB(zc."zip_code_geom")
     )
   LIMIT 100;
   ```

7. **Check for Null or Corrupted Data:**

   - Ensure that the geometry columns do not contain null values or corrupted data.

   ```sql
   SELECT COUNT(*)
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08"
   WHERE "blockgroup_geom" IS NULL;

   SELECT COUNT(*)
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "zip_code_geom" IS NULL;
   ```

**Summary:**

- The error occurs because the geometry columns are of type `BINARY`, but spatial functions expect `GEOGRAPHY` or `GEOMETRY`.
- Converting the binary data to `GEOMETRY` using `ST_GEOMFROMWKB` may resolve the issue, especially if the data is in a projected coordinate system.
- If geometries are invalid, use `ST_MAKEVALID` to repair them.
- Testing with a smaller dataset can help identify specific records causing errors.

**Next Steps:**

- Try the adjusted query using `ST_GEOMFROMWKB`.
- If errors persist, check for invalid geometries and attempt to repair them.
- Verify that the geometries are in the correct coordinate system expected by the functions.

Please let me know if this helps or if you need further assistance!
2025-01-21 09:13:46 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:13:46 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:13:46 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:13:48 - snowflake.connector.cursor - INFO - Number of results in first chunk: 10
2025-01-21 09:13:48 - snowflake.connector.connection - INFO - closed
2025-01-21 09:13:48 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:14:59 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:14:59 - root - INFO - SQL:
SELECT
     bg."geo_id",
     ST_ISVALID(ST_GEOGFROMWKB(bg."blockgroup_geom")) AS "is_valid_geography",
     ST_ISVALID(ST_GEOMFROMWKB(bg."blockgroup_geom")) AS "is_valid_geometry"
   FROM
     "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
   LIMIT 10;
Results:
geo_id,is_valid_geography,is_valid_geometry
080010089011,True,True
080010093251,True,True
080010085451,True,True
080010085261,True,True
080010085481,True,True
080010092061,True,True
080010081001,True,True
080010085501,True,True
080010091031,True,True
080010094101,True,True

2025-01-21 09:14:59 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:14:59 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:14:59 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:15:00 - snowflake.connector.connection - INFO - closed
2025-01-21 09:15:00 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:15:42 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:15:42 - root - INFO - The error you're encountering indicates that the `ST_INTERSECTS` function is being called with inputs of type `BINARY`, whereas it expects inputs of type `GEOGRAPHY` or `GEOMETRY`. To resolve this issue, you need to convert your `BINARY` geometry columns into `GEOGRAPHY` objects using the `ST_GEOGFROMWKB` function before using them in spatial operations.

**Here is the corrected SQL query:**

```sql
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code",
  bc."bank_count",
  (
    ST_AREA(
      ST_INTERSECTION(
        ST_GEOGFROMWKB(bg."blockgroup_geom"),
        ST_GEOGFROMWKB(zc."zip_code_geom")
      )
    ) / ST_AREA(
      ST_GEOGFROMWKB(bg."blockgroup_geom")
    )
  ) AS "overlap_ratio"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
JOIN
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
  ON ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
JOIN
  (
    SELECT "zip_code", COUNT(*) AS "bank_count"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
  ) bc
  ON zc."zip_code" = bc."zip_code"
WHERE
  zc."state_code" = 'CO'
LIMIT 100;
```

**Explanation:**

- **Convert Geometry Columns:**
  - Use `ST_GEOGFROMWKB(bg."blockgroup_geom")` to convert the block group geometry from `BINARY` to `GEOGRAPHY`.
  - Use `ST_GEOGFROMWKB(zc."zip_code_geom")` to convert the ZIP code geometry from `BINARY` to `GEOGRAPHY`.

- **Spatial Functions with GEOGRAPHY:**
  - The functions `ST_INTERSECTS`, `ST_INTERSECTION`, and `ST_AREA` are designed to work with the `GEOGRAPHY` data type in Snowflake.
  - By converting your geometries to `GEOGRAPHY`, these functions can process them correctly.

- **Adjust the JOIN Condition:**
  - In the `JOIN` clause, ensure that you use the converted geometries within the `ST_INTERSECTS` function.

- **Calculate the Overlap Ratio:**
  - The `overlap_ratio` is calculated by dividing the area of the intersection by the area of the block group, both computed using `GEOGRAPHY` types.

**Additional Notes:**

- **Data Validity:**
  - From your previous query results, the geometries are valid when converted using `ST_GEOGFROMWKB`.
  - This suggests that the geometries are in a coordinate system compatible with the `GEOGRAPHY` data type (WGS 84).

- **Consistency:**
  - Ensure that all spatial functions in your query are using the converted `GEOGRAPHY` geometries.
  - This includes the `ST_INTERSECTS` function in the `JOIN` condition and the `ST_INTERSECTION` and `ST_AREA` functions in the `SELECT` clause.

**Corrected SQL for Other Queries:**

For your other queries that involve spatial functions, you'll need to apply similar conversions.

---

**Corrected Query 1:**

```sql
SELECT
  zc."zip_code",
  COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
GROUP BY
  zc."zip_code"
LIMIT 100;
```

---

**Corrected Query 2:**

```sql
SELECT
  zc."zip_code",
  COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
FROM
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
LEFT JOIN
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
  ON ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
WHERE
  zc."state_code" = 'CO'
GROUP BY
  zc."zip_code"
LIMIT 100;
```

---

**Explanation for Other Queries:**

- **Convert Geometries:**
  - Always convert the `BINARY` geometry columns using `ST_GEOGFROMWKB` before using them in spatial functions.
  - This applies to both the block group geometries and ZIP code geometries.

- **Use GEOGRAPHY Functions:**
  - Spatial functions like `ST_INTERSECTS` and `ST_AREA` should operate on `GEOGRAPHY` data types.

- **No Correction Needed for Non-Spatial Queries:**
  - Queries that do not use spatial functions or geometry columns (e.g., counting bank locations per ZIP code) do not require corrections related to geometry conversions.

**Verify the Changes:**

- **Test the Query:**
  - Run the corrected query to ensure it executes without errors.
  - If you encounter any further errors, double-check that all instances of geometry columns used in spatial functions are properly converted.

- **Check Data Consistency:**
  - Ensure that the coordinate systems of your geometries are consistent and compatible with the `GEOGRAPHY` data type.

**Final Steps to Complete the Task:**

Once you have the corrected queries running successfully, you can proceed to calculate the concentration of bank locations per block group based on the overlap between ZIP codes and block groups. Here's a high-level overview of the steps:

1. **Calculate Overlap Ratios:**
   - Use the corrected queries to calculate the overlap ratio of each block group within each ZIP code.

2. **Distribute Bank Locations:**
   - Multiply the total number of bank locations in each ZIP code by the overlap ratio to estimate the number of bank locations per block group.

3. **Aggregate Results:**
   - Sum the estimated number of bank locations per block group for each ZIP code.

4. **Determine the Highest Concentration:**
   - Identify the ZIP code with the highest concentration of bank locations per block group.

**Example Query to Find the ZIP Code with the Highest Concentration:**

```sql
WITH overlap_data AS (
  SELECT
    bg."geo_id" AS "blockgroup_id",
    zc."zip_code",
    bc."bank_count",
    (
      ST_AREA(
        ST_INTERSECTION(
          ST_GEOGFROMWKB(bg."blockgroup_geom"),
          ST_GEOGFROMWKB(zc."zip_code_geom")
        )
      ) / ST_AREA(
        ST_GEOGFROMWKB(bg."blockgroup_geom")
      )
    ) AS "overlap_ratio"
  FROM
    "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
  JOIN
    "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
    ON ST_INTERSECTS(
      ST_GEOGFROMWKB(bg."blockgroup_geom"),
      ST_GEOGFROMWKB(zc."zip_code_geom")
    )
  JOIN
    (
      SELECT "zip_code", COUNT(*) AS "bank_count"
      FROM "FDA"."FDIC_BANKS"."LOCATIONS"
      WHERE "state" = 'CO'
      GROUP BY "zip_code"
    ) bc
    ON zc."zip_code" = bc."zip_code"
  WHERE
    zc."state_code" = 'CO'
)

SELECT
  "zip_code",
  SUM("overlap_ratio" * "bank_count") / COUNT(DISTINCT "blockgroup_id") AS "bank_locations_per_block_group"
FROM
  overlap_data
GROUP BY
  "zip_code"
ORDER BY
  "bank_locations_per_block_group" DESC
LIMIT 1;
```

**Explanation:**

- **Calculate Weighted Bank Locations:**
  - Multiply the `overlap_ratio` by the `bank_count` to estimate the bank locations attributable to each block group.

- **Compute Concentration:**
  - Sum the weighted bank locations per ZIP code and divide by the number of block groups overlapping with the ZIP code to get the concentration.

- **Find the ZIP Code with the Highest Concentration:**
  - Order the results in descending order of `bank_locations_per_block_group` and limit the output to the top result.

**Final Result Format:**

```csv
Zip_Code,Bank_Locations_per_Block_Group
zip_code:str,bank_locations_per_block_group:float
(Attention: answer in one row)
```

This will provide the Colorado ZIP code with the highest concentration of bank locations per block group, based on the overlap between ZIP codes and block groups.

**Let me know if you have any further questions or need additional assistance!**
2025-01-21 09:15:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:15:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:15:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:15:47 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:15:47 - snowflake.connector.connection - INFO - closed
2025-01-21 09:15:47 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:17:12 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:17:12 - root - INFO - SQL:
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code",
  bc."bank_count",
  (
    ST_AREA(
      ST_INTERSECTION(
        ST_GEOGFROMWKB(bg."blockgroup_geom"),
        ST_GEOGFROMWKB(zc."zip_code_geom")
      )
    ) / ST_AREA(
      ST_GEOGFROMWKB(bg."blockgroup_geom")
    )
  ) AS "overlap_ratio"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
JOIN
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
  ON ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
JOIN
  (
    SELECT "zip_code", COUNT(*) AS "bank_count"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
  ) bc
  ON zc."zip_code" = bc."zip_code"
WHERE
  zc."state_code" = 'CO'
LIMIT 100;
Results:
blockgroup_id,zip_code,bank_count,overlap_ratio
080130137014,80446,2,
080579556002,80480,1,1.0
080690028024,80517,5,0.9968509835052842
080690028024,80540,1,
080130137025,80466,1,1.0000000005782683
080130137026,80466,1,1.0
080130137027,80302,20,
080130137027,80446,2,
080130137027,80466,1,1.0
080130137027,80482,1,
080219749004,81101,8,0.06389279851283088
080219749004,81140,1,0.919945865500026
080219749004,81144,3,
080899683004,81050,6,1.0
081059770004,81101,8,
081059770004,81140,1,
081059770004,81144,3,1.0
081059770004,81132,1,
080039603004,81101,8,1.0
080039602004,81101,8,1.0
080639621004,80807,6,1.0
080899686004,81050,6,1.0
081059767004,81144,3,1.0
080490002023,80442,3,0.07054559201337184
080039602005,81101,8,1.0
080490002023,80466,1,
080899686005,81050,6,1.0
080490002023,80482,1,0.9294544080037835
080039602006,81101,8,1.0
080690028023,80517,5,1.0
080690028013,80517,5,1.0
081070005004,80487,8,0.9997190284318301
081259631004,80758,3,1.0
080690019033,80517,5,0.09539162418188737
081259632004,80759,4,1.0
080810004004,81625,3,1.0
080130136022,80517,5,
080130136022,80446,2,
080810005004,81625,3,1.0
080959676004,80734,3,1.0
080130136022,80447,1,
081259632005,80759,4,1.0
080130136022,80540,1,0.11716473214238082
080130137022,80466,1,0.5719481129350521
080810004005,81625,3,1.0
080330001002,81324,1,0.19290173962180523
080490002012,80517,5,
080810005005,81625,3,1.0
080099646002,81047,1,
080490002012,80446,2,0.15485436938932404
080810005006,81625,3,1.0
080179606003,80810,2,0.18496270305305754
080759661004,80751,7,1.0
080410069022,80920,18,0.3474519821681488
080759663004,80751,7,1.0
080870006004,80701,6,1.0
080130137024,80466,1,
080899682002,81067,4,0.8788467726596423
080459521001,81648,1,
080870007004,80723,5,1.0
080930004002,80461,3,
080490002012,80480,1,
080130137023,80302,20,0.3245292168504172
080859665013,81415,1,
081039511004,81641,2,1.0
080590120304,80433,5,
081219241002,80720,5,0.21629204105995994
080870007005,80723,5,1.0
080130137023,80466,1,0.6405278070000536
080759661005,80751,7,1.0
080490002012,80447,1,0.8451456306000682
080870006005,80701,6,1.0
080299650004,81428,2,0.06066205397281802
080299650004,81416,7,
080370005034,81620,7,0.026840925625239542
080299652004,81413,1,1.0
080899685002,81050,6,1.0
080759664002,80743,1,
080490001002,80459,2,1.0
080150004022,81211,5,0.9060670506163697
080859666014,81401,11,0.49560400527225285
080130137013,80302,20,0.9774518969539058
080490002022,80442,3,0.2041616697946604
080759664002,80720,5,
080539731001,81147,7,0.35777748572421175
080130137024,80302,20,
080859663004,81401,11,1.0
080919676004,81427,4,0.16636462896787965
080130137014,80302,20,0.21712828879982743
081259632002,80759,4,0.3952228220156083
080490002022,80446,2,0.41715213715274907
080130137024,80403,2,1.0000000000055032
080690019033,80537,15,0.15937951238366085
080679706006,81433,1,
080859664004,81401,11,1.0
080179606002,80815,1,
080470138002,80482,1,
080130137022,80302,20,0.26567810828900273
080759664002,80751,7,0.977833049248815
081070001002,81639,1,0.3699991125245106

2025-01-21 09:17:12 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:17:12 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:17:12 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:17:14 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:17:14 - snowflake.connector.connection - INFO - closed
2025-01-21 09:17:14 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:17:14 - root - INFO - SQL:
-- Query 1: No correction needed
SELECT "zip_code", COUNT(*) AS "bank_count"
FROM "FDA"."FDIC_BANKS"."LOCATIONS"
WHERE "state" = 'CO'
GROUP BY "zip_code"
LIMIT 100
Results:
zip_code,bank_count
80913,2
80920,18
80916,2
80907,7
80922,4
80905,3
80132,4
80921,9
80903,24
80906,9
80918,12
80914,1
80923,2
80915,6
80909,7
80932,3
80808,2
80917,1
80933,1
80840,1
81301,15
81303,3
81122,2
80524,13
80549,2
80517,5
80538,10
81501,13
81504,2
81503,1
81422,1
80723,5
80654,1
80701,6
80863,3
80911,1
80831,4
81137,1
80525,24
80537,15
80534,5
81506,2
81427,4
80424,6
80443,5
81624,1
81090,1
81428,2
80446,2
80482,1
81230,5
80815,1
81130,1
81321,8
81052,6
81132,1
81067,4
80031,4
80221,2
80301,14
80265,1
80125,1
80021,10
81621,6
80924,1
81302,1
80526,4
81526,1
81432,2
80498,1
80817,5
80904,2
80521,6
80513,3
80728,1
81520,4
81521,5
81425,2
80435,3
80813,1
80528,7
81505,9
81401,11
81147,7
81073,3
81054,1
81201,5
80810,2
81140,1
81063,1
81416,7
81324,1
80442,3
80447,1
80459,2
81224,3
81036,1
80807,6
80828,3
80821,1

2025-01-21 09:17:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:17:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:17:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:17:18 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:17:18 - snowflake.connector.connection - INFO - closed
2025-01-21 09:17:18 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:17:18 - root - INFO - SQL:
-- Corrected Query 2
SELECT
  zc."zip_code",
  COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
GROUP BY
  zc."zip_code"
LIMIT 100
Results:
zip_code,blockgroup_count
81092,4
80822,4
80103,8
80544,2
80550,21
80524,39
81418,6
80821,7
81006,26
81067,14
80545,4
80515,7
80138,32
81326,10
80218,33
80905,34
80224,40
80451,2
80513,16
80642,8
80290,3
80497,8
80133,7
80260,41
80631,71
80219,73
80920,29
80829,11
81623,21
80510,6
80824,4
80426,3
80231,43
80640,12
80247,39
80512,13
80922,22
80517,14
81652,7
81120,8
80727,4
81141,4
81243,4
81239,3
80488,1
80602,30
80438,4
81020,8
80428,3
80835,4
81426,6
80446,10
81419,11
80530,8
80031,49
81003,33
80303,34
80128,47
80654,7
80477,2
81656,2
81152,6
81044,3
80468,7
80124,26
81052,17
80440,9
81154,5
80482,9
80815,5
80546,2
80467,6
80721,2
81038,1
80129,26
80110,43
80216,30
81507,15
80232,39
81122,14
80757,6
80751,18
80536,6
81024,3
81090,4
81087,2
80122,44
80759,10
81151,10
81023,5
80737,4
80831,15
80653,4
81081,4
80435,11
81323,15
81431,3
81526,10
81146,6
80209,33

2025-01-21 09:17:18 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:17:18 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:17:18 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:17:19 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:17:19 - snowflake.connector.connection - INFO - closed
2025-01-21 09:17:20 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:17:20 - root - INFO - SQL:
-- Query 3: No correction needed
SELECT "branch_name", "branch_city", "zip_code"
FROM "FDA"."FDIC_BANKS"."LOCATIONS"
WHERE "state" = 'CO'
LIMIT 100
Results:
branch_name,branch_city,zip_code
FORT CARSON FACILITY,Fort Carson,80913
BRIARGATE CROSSING BRANCH,Colorado Springs,80920
HANDCOCK & ACADEMY BRANCH,Colorado Springs,80916
CENTENNIAL & FILLMORE BRANCH,Colorado Springs,80907
GARDEN OF THE GODS BRANCH,Colorado Springs,80907
CHAPEL HILLS BRANCH,Colorado Springs,80920
POWER AND STETSON KING SOOPERS BRANC,Colorado Springs,80922
COLORADO SPRINGS SOUTH BRANCH,Colorado Springs,80905
GARDEN OF THE GODS BRANCH,Colorado Springs,80907
Integrity Bank & Trust,Monument,80132
VALLEY BANKING CENTER,Colorado Springs,80911
Interquest Branch,Colorado Springs,80921
CASCADE BRANCH,Colorado Springs,80903
COLORADO SPRINGS BROADMOOR,Colorado Springs,80906
DOWNTOWN BANK,Colorado Springs,80903
CASCADE AVENUE LPO,Colorado Springs,80903
COLORADO SPRINGS BRANCH,Colorado Springs,80918
5 STAR BANK - DOWNTOWN BRANCH,Colorado Springs,80914
NORWOOD BANKING CENTER BRANCH,Colorado Springs,80923
Briargate and Academy Branch,Colorado Springs,80920
SPRINGS RANCH BRANCH,Colorado Springs,80922
MERIDIAN & WOODMAN BNKING CTR BRANCH,Falcon,80831
UPTOWN COLORADO SPRINGS BRANCH,Colorado Springs,80903
BRIARGATE BRANCH,Colorado Springs,80920
MOBILE BRANCH,Colorado Springs,80906
BRIARGATE/UNION BRANCH,Colorado Springs,80920
CO SPRINGS BRANCH,Colorado Springs,80903
CENTENNIAL FILLMORE BNKG CTR BRANCH,Colorado Springs,80907
7OLORADO SPRINGS MESSENGER BRANCH,Colorado Springs,80915
Colorado Springs Interquest Branch,Colorado Springs,80921
Colorado Springs Edison Branch,Colorado Springs,80915
BROADMOOR SKYWAY BRANCH,Colorado Springs,80906
ACADEMY AT HANCOCK BRANCH,Colorado Springs,80916
ACADEMY BOULEVARD BRANCH,Colorado Springs,80920
COLORADO SPRINGS BRANCH,Colorado Springs,80903
BRIARGATE BANK,Colorado Springs,80920
ACADEMY BRANCH,Colorado Springs,80909
FOUNTAIN SAFEWAY BRANCH,Fountain,80817
PIKES PEAK BRANCH,Colorado Springs,80909
MONUMENT KING SOOPERS BRANCH,Colorado Springs,80921
Powers Branch,Colorado Springs,80922
Powers Peak Branch,Colorado Springs,80920
AUSTIN BLUFFS & ACADEMY BRANCH,Colorado Springs,80918
MONUMENT MARKETPLACE BRANCH,Monument,80132
North Academy Branch,Colorado Springs,80920
Pikes Peak National Bank,Colorado Springs,80904
POWERS CENTER POINT BRANCH,Colorado Springs,80920
Flying Horse Branch,Colorado Springs,80921
MOUNTAIN VIEW BRANCH,Colorado Springs,80903
PLATTE BRANCH,Colorado Springs,80909
NORTH TEJON BRANCH,Colorado Springs,80903
5Star Bank,Colorado Springs,80903
THE CITADEL BANK BRANCH,Colorado Springs,80932
DOWNTOWN BANKING CENTER,Colorado Springs,80903
CIRCLE DRIVE BRANCH,Colorado Springs,80932
FALCON BRANCH,Peyton,80831
ELLICOTT BRANCH,Calhan,80808
DRIVE-UP FACILITY,Fort Carson,80913
Chelton And Platte Branch,Colorado Springs,80909
ACADEMY BRANCH,Colorado Springs,80920
Colorado Springs Tejon Branch,Colorado Springs,80903
POWERS & CONSTITUTION BRANCH,Colorado Springs,80915
CORDERA BRANCH,Colorado Springs,80924
COLORADO SPRINGS BRANCH,Colorado Springs,80903
VOYAGER PARKWAY BRANCH,Colorado Springs,80921
CHEYENNE MEADOWS KING SOOPERS BRANCH,Colorado Springs,80906
FALCON SAFEWAY BRANCH,Peyton,80831
Powers Pointe Branch,Colorado Springs,80917
VALLEY BRANCH,Fountain,80817
COLORADO SPRINGS BRANCH,Colorado Springs,80903
CASCADE & PIKES PEAK BRANCH,Colorado Springs,80903
5 STAR BANK MESSENGER SERVICE,Colorado Springs,80909
Interquest and Federal Branch,Colorado Springs,80921
FALCON BRANCH,Peyton,80831
RAZORBACK ROAD BRANCH,Colorado Springs,80920
BRIARGATE OFFICE,Colorado Springs,80920
PALMER PARK BRANCH,Colorado Springs,80915
COLORADO SPRINGS BRANCH,Colorado Springs,80918
MESSENGER SERVICE,Colorado Springs,80907
COLORADO NATIONAL BANK BRANCH,Colorado Springs,80933
COLORADO SPRINGS BRANCH,Colorado Springs,80918
COLORADO SPRINGS - TEJON BRANCH,Colorado Springs,80903
Academy & Morning Sun Branch,Colorado Springs,80918
ACADEMY PLACE BRANCH,Colorado Springs,80918
FALCON LANDING BRANCH,Colorado Springs,80920
COLORADO SPRINGS EAST BRANCH,Colorado Springs,80909
ACADEMY BOULEVARD BRANCH,Colorado Springs,80918
CHEYENNE MOUNTAIN AND HWY 115 BRANCH,Colorado Springs,80906
AUSTIN BLUFFS BRANCH,Colorado Springs,80918
MESA RIDGE & FOUNTAIN MESA BANKING CENTER BRANCH,Fountain,80817
NORTH ACADEMY BOULEVARD BRANCH,Colorado Springs,80918
BROADMOOR BRANCH,Colorado Springs,80915
MESSENGER SERVICE,Colorado Springs,80932
BRIARGATE BRANCH,Colorado Springs,80920
TEJON BRANCH,Colorado Springs,80903
EXCHANGE BRANCH,Colorado Springs,80903
AUSTIN BLUFF BRANCH,Colorado Springs,80918
BRIARGATE BRANCH,Colorado Springs,80920
FOUNTAIN BRANCH,Fountain,80817
HWY 85/87 BRANCH,Fountain,80817

2025-01-21 09:17:20 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:17:20 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:17:20 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:17:23 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:17:23 - snowflake.connector.connection - INFO - closed
2025-01-21 09:17:23 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:17:23 - root - INFO - SQL:
-- Corrected Query 4
SELECT
  zc."zip_code",
  COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
FROM
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
LEFT JOIN
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
  ON ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
WHERE
  zc."state_code" = 'CO'
GROUP BY
  zc."zip_code"
LIMIT 100
Results:
zip_code,blockgroup_count
81092,4
80544,2
80822,4
80103,8
80123,60
80204,52
80237,31
80443,16
80909,49
80449,10
80476,4
80117,8
80423,4
80419,4
80524,39
80550,21
81067,14
81418,6
81006,26
80821,7
80515,7
80545,4
81239,3
80640,12
80231,43
80922,22
80517,14
81120,8
81652,7
80247,39
81243,4
80512,13
81141,4
80727,4
81044,3
80468,7
81152,6
81419,11
80530,8
81426,6
80446,10
80128,47
80031,49
80303,34
80654,7
81003,33
80477,2
81656,2
81050,18
80211,47
80010,55
81635,8
81125,8
81642,6
81330,3
80137,9
81019,3
80015,73
81062,9
80033,41
81244,3
81084,5
81410,8
80828,8
81654,7
80442,5
80930,5
80650,5
80814,8
81140,8
80481,6
80107,15
81133,6
80444,3
80746,2
81640,4
81049,4
80840,13
80624,2
81138,1
80729,2
80528,16
81433,9
81411,2
80862,3
81231,1
80220,54
80016,51
80475,3
81646,5
80241,40
81611,16
80469,5
80911,32
80480,9
80863,15
80813,8
81620,11
81625,17
81624,11

2025-01-21 09:17:23 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:17:23 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:17:23 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:17:25 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:17:25 - snowflake.connector.connection - INFO - closed
2025-01-21 09:17:25 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:17:25 - root - INFO - SQL:
-- Query 5: No correction needed
SELECT "zip_code", "area_land_meters", "area_water_meters"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
WHERE "state_code" = 'CO'
LIMIT 100
Results:
zip_code,area_land_meters,area_water_meters
81527,2013828956.0,3761019.0
81320,486262421.0,49255.0
81077,1178482.0,13232.0
80921,225235379.0,1933822.0
81326,646195392.0,585496.0
80729,1869864493.0,630674.0
80476,148827819.0,36623.0
80649,472905780.0,26195929.0
81003,20808310.0,700796.0
81239,132545965.0,0.0
80123,30718205.0,4203411.0
81154,691579419.0,339724.0
81089,1792207970.0,4670090.0
80027,50407761.0,508327.0
80919,37206784.0,5329.0
80264,19282.0,0.0
80926,167420627.0,6609.0
80862,356006004.0,1236283.0
80216,27283319.0,210198.0
81063,1066786807.0,13238742.0
81231,162539.0,0.0
80483,225266312.0,175822.0
80905,12846991.0,5052.0
81506,33346100.0,12515.0
80468,994175408.0,6657257.0
80477,69519.0,0.0
81123,679331745.0,3012690.0
80737,628357939.0,36263.0
80237,9315313.0,17849.0
81237,90228249.0,0.0
80436,31776171.0,76332.0
81050,1391243908.0,14353301.0
81043,3729228.0,0.0
80103,727997211.0,16611904.0
80128,31430494.0,4554369.0
80911,31278565.0,1216253.0
81148,604499.0,0.0
81416,872337882.0,4987541.0
80421,357136638.0,580527.0
81503,90870769.0,1092236.0
81610,804607159.0,222970.0
81027,1604236717.0,0.0
80218,4136533.0,0.0
81144,732605020.0,547738.0
80015,37159546.0,525772.0
81226,212781912.0,1080383.0
80294,15459.0,0.0
81235,1398023748.0,2319184.0
80013,36210108.0,0.0
80136,523926849.0,1391139.0
81632,316309956.0,1418332.0
81092,218776942.0,249500.0
80457,3987401.0,0.0
81611,1109670122.0,1033980.0
81155,820384512.0,28248.0
80003,17597628.0,723907.0
80471,1991365.0,0.0
81334,920409289.0,15568.0
81639,1554243737.0,1816426.0
80461,749122508.0,8719758.0
80463,313269509.0,840311.0
80249,123611764.0,31164.0
80290,19489.0,0.0
81415,722175238.0,3900442.0
80728,939260049.0,0.0
80907,25609319.0,45627.0
80750,340238877.0,2440033.0
80928,851544772.0,134015.0
80830,578422326.0,12560.0
80012,20142891.0,0.0
80435,268622166.0,6783584.0
81131,812405978.0,616122.0
80650,131364187.0,338246.0
81224,403554855.0,513253.0
81129,10953265.0,0.0
80514,17455077.0,16325.0
80615,272626231.0,2650980.0
80741,589419746.0,3071613.0
80515,157013908.0,368974.0
80829,55830400.0,46993.0
80125,109118487.0,3801743.0
80220,13562573.0,0.0
81143,853395939.0,351197.0
80224,8155947.0,0.0
81526,134199630.0,1897599.0
81248,666918255.0,30778.0
80542,23222464.0,767121.0
80743,1202700878.0,55257.0
80827,625907809.0,12582453.0
81635,753553682.0,3266018.0
80138,163770333.0,163252.0
81023,326406896.0,274906.0
80634,96495292.0,271217.0
80023,45593279.0,538763.0
80419,258039.0,0.0
80426,344815727.0,1200832.0
80721,223730398.0,0.0
80206,6379350.0,0.0
80030,6832691.0,187610.0
80910,14985607.0,222162.0

2025-01-21 09:17:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:17:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:17:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:17:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:17:27 - snowflake.connector.connection - INFO - closed
2025-01-21 09:17:27 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:17:27 - root - INFO - SQL:
-- Query 6: No correction needed
SELECT "geo_id", "area_land_meters", "area_water_meters"
FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08"
LIMIT 100
Results:
geo_id,area_land_meters,area_water_meters
080010089011,6362241,566422
080010093251,1287314,2131
080010085451,729291,9265
080010085261,5303216,31690
080010085481,1244440,6215
080010092061,1295355,11050
080010081001,2695015,6599
080010085501,678027,12802
080010091031,1574941,14553
080010094101,1384324,6486
080010085341,858369,9035
080010096061,974868,439
080010602001,1167117,9865
080010094081,3815938,50182
080010150001,3188348,531379
080010085291,1273581,298340
080010085231,14822474,430315
080010600001,16531242,245190
080010085331,1199768,9570
080010085241,983834,30346
080010082001,918845,27621
080010096081,528151,132762
080010085061,438783,39928
080010085371,11972043,99634
080010093201,1269332,5472
080010085411,36314275,789287
080010088021,5813423,136378
080010085351,15324196,754192
080010097511,1880296,369396
080010084021,1730915904,17051819
080010086031,1862820,67422
080010083081,3109704,13394
080010094011,1690226,2680
080010085361,7255394,38685
080010085391,12476751,26960
080010085441,2608402,21323
080010085401,13074273,628800
080010612001,10613359,154585
080010092041,1259929,44618
080010083531,77606503,430605
080010086041,1502294,5539
080010085511,8739314,259101
080010084011,477831641,3437355
080010601001,3318758,261666
080010083091,10819573,22102
080019887001,67545120,1117152
080039600001,289292770,258623
080039601001,91868200,157940
080039602001,10166947,80646
080050056121,2564752,7516
080050056251,602718,6454
080050065011,1681545,54299
080050820001,1545434,22279
080050071061,163765074,80408
080050049511,157730,5724
080050862001,726327,866
080050056231,2485929,39887
080050056271,1189541,3101
080050068541,8440936,3138094
080050056241,1998744,2603
080050067051,5057809,31511
080050067121,2589155,2864
080050056201,426621,6148
080050858001,975972,517614
080050056221,3100537,83414
080050060001,1771406,51185
080050056211,1167421,19519
080050056111,1474530,2002
080050055521,1551589,62055
080050056191,2128913,447717
080050071031,165400293,461714
080050071011,192632341,1957401
080050067081,904463,2871
080050055531,1405887,147867
080050067041,1221300,5967
080050056361,5113457,19853
080079404001,607252571,10999693
080079742001,56162360,351699
080079743001,661107701,108251
080079744001,1339185197,677830
080099647001,661515845,4925063
080119667001,3376823501,37332795
080130128001,5790132,47409
080130609001,3333356,20572
080130130031,4229652,12579
080130127091,9706908,154534
080130132051,4192987,1911
080130125011,3197023,24163
080130127101,5033978,1042984
080130132011,58546097,3906167
080130132121,4262108,590332
080130127011,11132873,167940
080130129071,5205919,3037
080130137011,36367949,34929
080130614001,2634682,8890
080130132071,4497765,1058335
080130136021,231889483,997347
080130132101,1154080,27899
080130127071,15065957,3523622
080130132131,9723384,13066

2025-01-21 09:17:27 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:17:27 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:17:27 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:17:28 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:17:28 - snowflake.connector.connection - INFO - closed
2025-01-21 09:17:28 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:17:29 - root - INFO - SQL:
-- Query 7: No correction needed
SELECT "geo_id", "internal_point_lat", "internal_point_lon"
FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08"
LIMIT 100
Results:
geo_id,internal_point_lat,internal_point_lon
080010089011,39.809069,-104.94656
080010093251,39.9039526,-105.0003533
080010085451,39.929704,-104.951255
080010085261,39.9487613,-104.9743823
080010085481,39.9253879,-104.9115056
080010092061,39.8812623,-104.9476403
080010081001,39.7466612,-104.8372242
080010085501,39.9111268,-104.9276615
080010091031,39.8796042,-104.9290526
080010094101,39.8787745,-105.0359483
080010085341,39.8959673,-104.9251715
080010096061,39.8223866,-105.0300046
080010602001,39.9247561,-104.9911464
080010094081,39.9091796,-105.0361172
080010150001,39.846683,-104.9508103
080010085291,39.9251409,-104.9531166
080010085231,39.9320194,-104.8302064
080010600001,39.9699792,-104.9640075
080010085331,39.8905907,-104.9470867
080010085241,39.9345346,-104.925421
080010082001,39.7586812,-104.8236326
080010096081,39.8166412,-105.0496947
080010085061,39.9109497,-104.9818068
080010085371,39.9106145,-104.8396108
080010093201,39.8542829,-105.0107306
080010085411,39.9777625,-104.8802348
080010088021,39.8608596,-104.8883156
080010085351,39.8938043,-104.8801138
080010097511,39.7983183,-105.0412999
080010084021,39.8772581,-104.0658666
080010086031,39.9926025,-104.8202075
080010083081,39.7629318,-104.8167416
080010094011,39.8464404,-105.026772
080010085361,39.9041827,-104.7947714
080010085391,39.8746752,-104.8206625
080010085441,39.9555985,-104.9537605
080010085401,39.9394959,-104.8910262
080010612001,39.9911848,-104.94997
080010092041,39.8838998,-104.968095
080010083531,39.7785643,-104.6847111
080010086041,39.9958411,-104.8058541
080010085511,39.9058627,-104.8996895
080010084011,39.869555,-104.5174306
080010601001,39.9492942,-105.0006416
080010083091,39.7591891,-104.7870038
080019887001,39.8353129,-104.8409337
080039600001,37.6567995,-105.9522431
080039601001,37.5388743,-105.914286
080039602001,37.4982906,-105.9156688
080050056121,39.6159029,-104.9684277
080050056251,39.5930685,-104.9834425
080050065011,39.6123447,-105.0191615
080050820001,39.7105075,-104.8030143
080050071061,39.6012893,-104.5738022
080050049511,39.6975484,-104.9300106
080050862001,39.6210447,-104.7490594
080050056231,39.5887514,-105.0272166
080050056271,39.5843145,-104.9495578
080050068541,39.6313485,-104.8638179
080050056241,39.585713,-104.9996187
080050067051,39.6378062,-104.9681018
080050067121,39.6176347,-104.9115205
080050056201,39.6230587,-105.0238944
080050858001,39.6358131,-104.7715859
080050056221,39.6013109,-105.0332729
080050060001,39.6467824,-105.0040851
080050056211,39.6038333,-105.044184
080050056111,39.6028206,-104.964366
080050055521,39.6477575,-105.0174566
080050056191,39.6181708,-105.0463678
080050071031,39.6880444,-104.5189211
080050071011,39.6879332,-104.3316961
080050067081,39.573987,-104.9185975
080050055531,39.6350107,-105.020282
080050067041,39.6464583,-104.9365194
080050056361,39.6186086,-104.9435393
080079404001,37.1111345,-107.3566967
080079742001,37.2731463,-107.1497672
080079743001,37.3220853,-107.2665636
080079744001,37.2009843,-106.7384504
080099647001,37.4204841,-102.4880544
080119667001,37.9269043,-103.0351028
080130128001,40.0263725,-105.1198967
080130609001,39.9813019,-105.1108598
080130130031,40.0105693,-105.1523386
080130127091,40.0579438,-105.1579995
080130132051,40.0955969,-105.1755981
080130125011,39.9901057,-105.2202002
080130127101,40.0086772,-105.1912533
080130132011,40.2307503,-105.1083
080130132121,40.1652759,-105.1472667
080130127011,40.1110164,-105.2283981
080130129071,40.0068802,-105.0656836
080130137011,40.0946642,-105.3248929
080130614001,39.9209698,-105.1567997
080130132071,40.1905286,-105.1535318
080130136021,40.1924374,-105.4166962
080130132101,40.1502409,-105.1083745
080130127071,40.033795,-105.198836
080130132131,40.1212737,-105.1743897

2025-01-21 09:17:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:17:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:17:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:17:30 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:17:30 - snowflake.connector.connection - INFO - closed
2025-01-21 09:17:30 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:17:30 - root - INFO - SQL:
-- Query 8: No correction needed
SELECT "zip_code", "internal_point_lat", "internal_point_lon"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
WHERE "state_code" = 'CO'
LIMIT 100
Results:
zip_code,internal_point_lat,internal_point_lon
81123,37.3997311,-105.5718149
80737,40.8761403,-102.1779795
80237,39.6398707,-104.901711
81237,38.6030675,-106.6140515
80436,39.781044,-105.6402024
81050,37.9423538,-103.5151603
81043,38.1309477,-102.2209147
80103,39.7800102,-104.142596
80128,39.564053,-105.078838
80911,38.7529163,-104.7234774
81148,37.1718223,-105.9854148
81416,38.7520741,-108.1369587
80421,39.4609316,-105.5011988
81503,39.0299602,-108.4338772
81141,37.1622985,-105.8583377
80456,39.2483221,-105.5368488
80602,39.966162,-104.9088878
80705,40.2703264,-103.8294877
81091,37.1490904,-104.9647034
80293,39.7462533,-104.9899347
81029,37.0829091,-102.508878
80840,38.9946919,-104.8619476
81649,39.5302267,-106.2781625
80025,39.9398484,-105.2839419
80951,38.898118,-104.652428
80238,39.7715923,-104.8824004
80631,40.4428679,-104.6730721
80621,40.1072393,-104.8012902
81038,38.0792429,-103.1404196
81220,38.3082435,-107.480574
80219,39.6952933,-105.0356013
81020,37.5488542,-104.4910197
81007,38.3600416,-104.7731981
81655,39.7703573,-106.7731841
80727,40.0758287,-102.5109885
80525,40.5298611,-105.0366412
80117,39.3696118,-104.3429014
80443,39.5563891,-106.1702399
80754,40.7217546,-103.6654688
81428,38.9629875,-107.5995784
80434,40.8432515,-106.2867888
80131,39.4764403,-105.007544
80917,38.8861678,-104.7452638
80118,39.192431,-104.9052646
80427,39.7802888,-105.4949767
80757,39.7910269,-103.5831298
80864,38.6976664,-104.1867385
80033,39.7726754,-105.1048006
80420,39.3244006,-106.1161097
80301,40.0494681,-105.2014214
80938,38.9047619,-104.6633153
80126,39.540594,-104.9586396
80136,39.7919777,-104.2799287
81632,39.6292021,-106.6076332
81092,38.1938187,-102.7522464
80457,39.6482986,-105.290959
81611,39.1581733,-106.6686317
81155,38.28645,-106.0655169
80003,39.8254168,-105.0635606
80471,39.9352078,-105.4209125
81334,37.1461289,-108.6129503
81639,40.5069191,-107.2392298
80461,39.2317419,-106.3131574
80463,39.9705443,-106.7204875
80249,39.8547459,-104.695804
80290,39.7440923,-104.9867543
81415,38.6255118,-107.6275851
80720,40.0782522,-103.2198809
80111,39.6122715,-104.8778283
80824,39.6505749,-102.4987348
81230,38.3950649,-106.9536827
81236,38.6762575,-106.2637033
80929,38.8247103,-104.626967
81301,37.446857,-107.8557779
81331,37.4458683,-108.9072908
80121,39.6107024,-104.9490125
80810,38.8222875,-102.4287077
80832,39.0171771,-104.0128738
80828,39.327663,-103.747875
80425,39.3501549,-105.2055906
80209,39.7065813,-104.9657498
80534,40.3318627,-104.9374671
81653,40.9697543,-107.2271896
80202,39.7519076,-104.9976332
81024,37.2493543,-104.7347126
80222,39.6710192,-104.9278953
81650,39.7510374,-108.1137223
80303,39.9732218,-105.2092762
81233,38.4259741,-105.8248777
80423,39.8848239,-106.5867343
81411,38.2507316,-108.9801706
80815,39.3967208,-103.0634047
81087,37.3659002,-102.4090033
81623,39.2460271,-107.1629123
80480,40.6728876,-106.3415656
81621,39.402005,-106.8068244
80733,40.3713864,-103.4505354
81124,37.3062445,-106.1605883
81430,38.0227844,-108.0212965
81201,38.5548319,-106.0660381

2025-01-21 09:17:30 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:17:30 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:17:30 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:17:32 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:17:32 - snowflake.connector.connection - INFO - closed
2025-01-21 09:17:32 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:17:32 - root - INFO - SQL:
-- Query 9: No correction needed
SELECT "zip_code", COUNT(*) AS "bank_count"
FROM "FDA"."FDIC_BANKS"."LOCATIONS"
WHERE "state" = 'CO'
GROUP BY "zip_code"
ORDER BY "bank_count" DESC
LIMIT 100
Results:
zip_code,bank_count
80111,33
80202,31
80206,30
80501,30
80525,24
80112,24
80634,24
80903,24
80302,20
80920,18
80134,16
80537,15
81301,15
80012,14
80301,14
80601,13
81501,13
80524,13
80401,13
80020,12
80918,12
80222,12
80016,12
81401,11
81611,11
80226,11
80015,10
80021,10
80550,10
80538,10
80123,10
80211,10
80104,10
80122,10
81212,9
80234,9
80921,9
81003,9
80228,9
80124,9
81505,9
80011,9
80002,9
80906,9
81008,8
80013,8
80203,8
80126,8
81101,8
80439,8
81005,8
80229,8
80129,8
81321,8
80631,8
80127,8
80027,8
80022,8
81601,8
80487,8
80907,7
81416,7
80751,7
81147,7
80528,7
81620,7
81632,7
80233,7
80224,7
80909,7
80030,7
80108,7
80110,7
81082,7
80207,7
80227,7
80026,7
80246,6
80504,6
81050,6
80424,6
80014,6
80033,6
80521,6
81657,6
81623,6
80807,6
80915,6
81007,6
81052,6
80120,6
80231,6
80701,6
81621,6
80817,5
81521,5
80214,5
80249,5
80723,5
80516,5

2025-01-21 09:17:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:17:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:17:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:17:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-21 09:17:33 - snowflake.connector.connection - INFO - closed
2025-01-21 09:17:34 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:17:34 - root - INFO - SQL:
-- Query 10: No correction needed
SELECT "institution_name", "branch_address", "zip_code"
FROM "FDA"."FDIC_BANKS"."LOCATIONS"
WHERE "state" = 'CO'
LIMIT 100
Results:
Too long, hard cut:
institution_name,branch_address,zip_code
"Armed Forces Bank, National Association","6384 Wetzel Avenue, Building 1512",80913
The Huntington National Bank,9265 North Union Boulevard,80920
The Huntington National Bank,2930 South Academy Boulevard,80916
The Huntington National Bank,3290 Centennial Boulevard,80907
U.S. Bank National Association,1125 Garden Of The Gods Road,80907
U.S. Bank National Association,1520 Briargate Boulevard,80920
U.S. Bank National Association,6030 Stetson Hills Boulevard,80922
"Wells Fargo Bank, National Association",1800 South Nevada Avenue,80905
"Wells Fargo Bank, National Association",560 Garden Of The Gods Road,80907
Integrity Bank & Trust,1275 Village Ridge Pt,80132
"UMB Bank, National Association",502 Security Boulevard,80911
Adams Bank & Trust,"1359 Interquest Parkway, Suite 150",80921
ANB Bank,15 West Cimarron Street,80903
Independent Bank,155 Lake Avenue,80906
Independent Bank,501 South Tejon,80903
Independent Bank,"104 S. Cascade Avenue, Suite 2014",80903
The Central Trust Bank,5278 North Nevada Avenue Suite 100,80918
5Star Bank,"Peterson Air Force Base, 455 W. Paine St., Bldg. 1485",80914
"JPMorgan Chase Bank, National Association",7390 Duryea Drive,80923
"JPMorgan Chase Bank, National Association",7685 N Academy Blvd,80920
"JPMorgan Chase Bank, National Association",3750 Bloomington Street,80922
"JPMorgan Chase Bank, National Association",11555 Meridian Market View,80831
"JPMorgan Chase Bank, National Association",402 North Tejon Street,80903
"Wells Fargo Bank, National Association",8620 North Union Boulevard,80920
InBank,945 Tenderfoot Hill Road,80906
FirstBank,2790 Briargate Boulevard,80920
Kirkpatrick Bank,"102 North Cascade Avenue, Suite 100",80903
"JPMorgan Chase Bank, National Association",3306 Centennial Blvd.,80907
Bank of Colorado,El Paso County,80915
Bank of Colorado,1146 Interquest Parkway,80921
Bank of Colorado,4328 Edison Avenue,80915
KeyBank National Association,1521 South 8th Street,80906
KeyBank National Association,3085 S Academy Blvd,80916
"Zions Bancorporation, N.A.",7390 North Academy Boulevard,80920
"Zions Bancorporation, N.A.",111 South Tejon Street,80903
Independent Bank,440 Chapel Hills Drive,80920
U.S. Bank National Association,1415 North Academy Boulevard,80909
U.S. Bank National Association,6925 Mesa Ridge Parkway,80817
U.S. Bank National Association,2308 East Pikes Peak Avenue,80909
U.S. Bank National Association,1070 West Baptist Road,80921
The Huntington National Bank,2870 New Center Pt,80922
The Huntington National Bank,5470 E. Woodmen Road,80920
"Wells Fargo Bank, National Association",4151 North Academy Boulevard,80918
"Wells Fargo Bank, National Association",15844 Jackson Creek Parkway,80132
"Bank of America, National Association",7808 N Academy Blvd,80920
Pikes Peak National Bank,2401 W Colorado Ave,80904
Integrity Bank & Trust,5550 Powers Center Point,80920
The First National Bank of Las Animas,2768 Northgate Blvd,80921
Waypoint Bank,24 South Weber Street Suite 151,80903
"Academy Bank, National Association",3201 E.  Platte Avenue,80909
NBH Bank,"19 North Tejon, Ste 100",80903
5Star Bank,104 S Cascade Ave,80903
"UMB Bank, National Association",730 Citadel Drive East,80932
"UMB Bank, National Association",101 North Cascade Avenue,80903
ANB Bank,1130 North Circle Drive,80932
Farmers State Bank of Calhan,7025 Meridian Rd,80831
Farmers State Bank of Calhan,445 N Ellicott Hwy,80808
"Armed Forces Bank, National Association",Coleman And Linstrom Streets,80913
The Huntington National Bank,3175 East Platte Avenue,80909
The Huntington National Bank,7239 N. Academy Boulevard,80920
Bank of Colorado,421 North Tejon Street,80903
"Wells Fargo Bank, National Association",5710 Constitution Avenue,80915
"Wells Fargo Bank, National Association",9649 Prominent Point,80924
"Wells Fargo Bank, National Association",90 South Cascade Avenue,80903
Integrity Bank & Trust,13475 Voyager Parkway,80921
U.S. Bank National Association,815 Cheyenne Meadows Road,80906
U.S. Bank National Association,7655 Mclaughlin Road,80831
"Bank of America, National Association",5737 Barnes Road,80917
Pikes Peak National Bank,6615 Camden Boulevard,80817
American Bank of Commerce,434 S. Tejon,80903
FirstBank,"2 North Cascade Avenue, Suite 130",80903
5Star Bank,3992 E. Bijou St,80909
"JPMorgan Chase Bank, National Association","1274 Interquest Pkwy, Ste 100",80921
The State Bank,7495  Mclaughlin Road,80831
"Academy Bank, National Association",8250 Razorback Road,80920
"Academy Bank, National Association",2835 Briargate Blvd,80920
"Academy Bank, National Association",1650 Space Center Drive,80915
NBH Bank,5175 North Academy Boulevard,80918
Herring Bank,3110 N. Nevada,80907
Herring Bank,3110 North Nevada Avenue,80933
"PNC Bank, National Association",2805 Dublin Boulevard,80918
First Interstate Bank,"121 South Tejon Street, Ste 110",80903
The Huntington National Bank,4330 N Academy Blvd,80918
"Wells Fargo Bank, National Association",5190 North Academy Boulevard,80918
"Wells Fargo Bank, Natio

2025-01-21 09:17:34 - root - INFO - itercount: 0
2025-01-21 09:17:34 - root - INFO - Database Name: FDA
Schema Name: CENSUS_UTILITY
DDL describes table information.
,0
table_name,FIPS_CLASS_CODE
description,
DDL,"create or replace TABLE FIPS_CLASS_CODE (
	""fips_class_code"" VARCHAR(16777216),
	""code_description"" VARCHAR(16777216)
);"

,1
table_name,FUNCTIONAL_STATUS_CODES
description,
DDL,"create or replace TABLE FUNCTIONAL_STATUS_CODES (
	""functional_status_code"" VARCHAR(16777216),
	""code_description"" VARCHAR(16777216),
	""associated_geographic_entity"" VARCHAR(16777216)
);"

,2
table_name,MTFCC_FEATURE_CLASS_CODES
description,
DDL,"create or replace TABLE MTFCC_FEATURE_CLASS_CODES (
	""feature_class_code"" VARCHAR(16777216),
	""feature_class"" VARCHAR(16777216),
	""superclass"" VARCHAR(16777216),
	""point"" BOOLEAN,
	""linear"" BOOLEAN,
	""areal"" BOOLEAN,
	""description"" VARCHAR(16777216)
);"

,3
table_name,FIPS_CODES_ALL
description,
DDL,"create or replace TABLE FIPS_CODES_ALL (
	""summary_level"" VARCHAR(16777216),
	""summary_level_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_subdivision_fips_code"" VARCHAR(16777216),
	""place_fips_code"" VARCHAR(16777216),
	""consolidated_city_fips_code"" VARCHAR(16777216),
	""area_name"" VARCHAR(16777216)
);"

,4
table_name,LSAD_CODES
description,
DDL,"create or replace TABLE LSAD_CODES (
	""lsad_code"" VARCHAR(16777216),
	""lsad_description"" VARCHAR(16777216),
	""associated_geographic_entities"" VARCHAR(16777216)
);"

,5
table_name,FIPS_CODES_STATES
description,
DDL,"create or replace TABLE FIPS_CODES_STATES (
	""state_fips_code"" VARCHAR(16777216),
	""state_postal_abbreviation"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""state_gnisid"" VARCHAR(16777216)
);"

Database Name: FDA
Schema Name: FDA_FOOD
DDL describes table information.
,0
table_name,FOOD_ENFORCEMENT
description,
DDL,"create or replace TABLE FOOD_ENFORCEMENT (
	""classification"" VARCHAR(16777216),
	""center_classification_date"" DATE,
	""report_date"" DATE,
	""postal_code"" VARCHAR(16777216),
	""termination_date"" DATE,
	""recall_initiation_date"" DATE,
	""recall_number"" VARCHAR(16777216),
	""city"" VARCHAR(16777216),
	""event_id"" NUMBER(38,0),
	""distribution_pattern"" VARCHAR(16777216),
	""recalling_firm"" VARCHAR(16777216),
	""voluntary_mandated"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""reason_for_recall"" VARCHAR(16777216),
	""initial_firm_notification"" VARCHAR(16777216),
	""status"" VARCHAR(16777216),
	""product_type"" VARCHAR(16777216),
	""country"" VARCHAR(16777216),
	""product_description"" VARCHAR(16777216),
	""code_info"" VARCHAR(16777216),
	""address_1"" VARCHAR(16777216),
	""address_2"" VARCHAR(16777216),
	""product_quantity"" VARCHAR(16777216),
	""more_code_info"" VARCHAR(16777216)
);"

,1
table_name,FOOD_EVENTS
description,
DDL,"create or replace TABLE FOOD_EVENTS (
	""report_number"" VARCHAR(16777216),
	""reactions"" VARCHAR(16777216),
	""outcomes"" VARCHAR(16777216),
	""products_brand_name"" VARCHAR(16777216),
	""products_industry_code"" VARCHAR(16777216),
	""products_role"" VARCHAR(16777216),
	""products_industry_name"" VARCHAR(16777216),
	""date_created"" DATE,
	""date_started"" DATE,
	""consumer_gender"" VARCHAR(16777216),
	""consumer_age"" FLOAT,
	""consumer_age_unit"" VARCHAR(16777216)
);"

Database Name: FDA
Schema Name: FDIC_BANKS
DDL describes table information.
,0
table_name,INSTITUTIONS
description,
DDL,"create or replace TABLE INSTITUTIONS (
	""fdic_certificate_number"" VARCHAR(16777216),
	""institution_name"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""fdic_id"" VARCHAR(16777216),
	""docket"" VARCHAR(16777216),
	""active"" BOOLEAN,
	""address"" VARCHAR(16777216),
	""total_assets"" NUMBER(38,0),
	""bank_charter_class"" VARCHAR(16777216),
	""change_code_1"" VARCHAR(16777216),
	""change_code_2"" VARCHAR(16777216),
	""change_code_3"" VARCHAR(16777216),
	""change_code_4"" VARCHAR(16777216),
	""change_code_5"" VARCHAR(16777216),
	""change_code_6"" VARCHAR(16777216),
	""change_code_7"" VARCHAR(16777216),
	""change_code_8"" VARCHAR(16777216),
	""change_code_9"" VARCHAR(16777216),
	""change_code_10"" VARCHAR(16777216),
	""change_code_11"" VARCHAR(16777216),
	""change_code_12"" VARCHAR(16777216),
	""change_code_13"" VARCHAR(16777216),
	""change_code_14"" VARCHAR(16777216),
	""change_code_15"" VARCHAR(16777216),
	""occ_charter"" VARCHAR(16777216),
	""chartering_agency"" VARCHAR(16777216),
	""conservatorship"" BOOLEAN,
	""city"" VARCHAR(16777216),
	""category_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""established_date"" DATE,
	""last_updated"" DATE,
	""effective_date"" DATE,
	""end_effective_date"" DATE,
	""denovo_institute"" BOOLEAN,
	""total_deposits"" NUMBER(38,0),
	""equity_capital"" NUMBER(38,0),
	""fdic_geo_region"" VARCHAR(16777216),
	""fdic_supervisory_region"" VARCHAR(16777216),
	""fdic_supervisory_region_code"" VARCHAR(16777216),
	""fed_reserve_district"" VARCHAR(16777216),
	""fed_reserve_district_id"" VARCHAR(16777216),
	""fed_reserve_unique_id"" VARCHAR(16777216),
	""federal_charter"" BOOLEAN,
	""fdic_field_office"" VARCHAR(16777216),
	""iba"" BOOLEAN,
	""inactive_flag"" BOOLEAN,
	""insurance_fund_membership"" VARCHAR(16777216),
	""secondary_insurance_fund"" VARCHAR(16777216),
	""deposit_insurance_date"" DATE,
	""credit_card_institution"" BOOLEAN,
	""bank_insurance_fund_member"" BOOLEAN,
	""insured_commercial_bank"" BOOLEAN,
	""deposit_insurance_fund_member"" BOOLEAN,
	""fdic_insured"" BOOLEAN,
	""saif_insured"" BOOLEAN,
	""insured_savings_institute"" BOOLEAN,
	""new_cert_number"" VARCHAR(16777216),
	""oakar_institute"" BOOLEAN,
	""ots_region"" VARCHAR(16777216),
	""last_structural_change"" DATE,
	""qbp_region"" VARCHAR(16777216),
	""regulator"" VARCHAR(16777216),
	""report_date"" DATE,
	""reporting_period_end_date"" DATE,
	""state_chartered"" BOOLEAN,
	""return_on_assets"" FLOAT,
	""roa_quarterly"" FLOAT,
	""roa_pretax"" FLOAT,
	""row_pretax_quarterly"" FLOAT,
	""return_on_equity"" FLOAT,
	""roe_quarterly"" FLOAT,
	""run_date"" DATE,
	""sasser_institute"" BOOLEAN,
	""law_sasser"" BOOLEAN,
	""state"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""trade_name_1"" VARCHAR(16777216),
	""trade_name_2"" VARCHAR(16777216),
	""trade_name_3"" VARCHAR(16777216),
	""trade_name_4"" VARCHAR(16777216),
	""trade_name_5"" VARCHAR(16777216),
	""trade_name_6"" VARCHAR(16777216),
	""zip_code"" VARCHAR(16777216),
	""occ_district"" VARCHAR(16777216),
	""ultimate_cert_number"" VARCHAR(16777216),
	""cfpb_supervisory_flag"" BOOLEAN,
	""cfpb_supervisory_start_date"" DATE,
	""cfpb_supervisory_end_date"" DATE,
	""offices_count"" NUMBER(38,0),
	""parent_fdic_cert"" VARCHAR(16777216),
	""parent_parcert"" VARCHAR(16777216),
	""high_holder_city"" VARCHAR(16777216),
	""total_domestic_deposits"" NUMBER(38,0),
	""ffiec_call_report_filer"" BOOLEAN,
	""holding_company_flag"" BOOLEAN,
	""ag_lending_flag"" BOOLEAN,
	""ownership_type"" VARCHAR(16777216),
	""top_holder"" VARCHAR(16777216),
	""net_income"" NUMBER(38,0),
	""quarterly_net_income"" NUMBER(38,0),
	""office_count_domestic"" NUMBER(38,0),
	""office_count_foreign"" NUMBER(38,0),
	""office_count_us_territories"" NUMBER(38,0),
	""rssd_id"" VARCHAR(16777216),
	""holding_company_state"" VARCHAR(16777216),
	""subchap_s_indicator"" BOOLEAN,
	""trust_powers_status"" VARCHAR(16777216),
	""asset_concentration_hierarchy"" VARCHAR(16777216),
	""primary_specialization"" VARCHAR(16777216),
	""csa_name"" VARCHAR(16777216),
	""csa_fips_code"" VARCHAR(16777216),
	""csa_indicator"" BOOLEAN,
	""cbsa_name"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""cbsa_metro_flag"" BOOLEAN,
	""cbsa_micro_flag"" BOOLEAN,
	""cbsa_division_name"" VARCHAR(16777216),
	""cbsa_division_fips_code"" VARCHAR(16777216),
	""cbsa_division_flag"" BOOLEAN
);"

,1
table_name,LOCATIONS
description,
DDL,"create or replace TABLE LOCATIONS (
	""fdic_certificate_number"" VARCHAR(16777216),
	""institution_name"" VARCHAR(16777216),
	""branch_name"" VARCHAR(16777216),
	""branch_number"" VARCHAR(16777216),
	""main_office"" BOOLEAN,
	""branch_address"" VARCHAR(16777216),
	""branch_city"" VARCHAR(16777216),
	""zip_code"" VARCHAR(16777216),
	""branch_county"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""institution_class"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""cbsa_name"" VARCHAR(16777216),
	""cbsa_division_flag"" BOOLEAN,
	""cbsa_division_fips_code"" NUMBER(38,0),
	""cbsa_division_name"" VARCHAR(16777216),
	""cbsa_metro_flag"" BOOLEAN,
	""cbsa_metro_fips_code"" VARCHAR(16777216),
	""cbsa_metro_name"" VARCHAR(16777216),
	""cbsa_micro_flag"" BOOLEAN,
	""csa_flag"" BOOLEAN,
	""csa_fips_code"" VARCHAR(16777216),
	""csa_name"" VARCHAR(16777216),
	""date_established"" DATE,
	""fdic_uninum"" VARCHAR(16777216),
	""last_updated"" DATE,
	""service_type"" VARCHAR(16777216),
	""branch_fdic_uninum"" VARCHAR(16777216)
);"

Database Name: FDA
Schema Name: GEO_CENSUS_BLOCKGROUPS
DDL describes table information.
,0
table_name,BLOCKGROUPS_04
description,
DDL,"create or replace TABLE BLOCKGROUPS_04 (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""blockgroup_ce"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""blockgroup_geom"" BINARY(8388608)
);"

Some other tables have the similar structure: ['BLOCKGROUPS_04', 'BLOCKGROUPS_08', 'BLOCKGROUPS_13', 'BLOCKGROUPS_16', 'BLOCKGROUPS_20', 'BLOCKGROUPS_23', 'BLOCKGROUPS_25', 'BLOCKGROUPS_31', 'BLOCKGROUPS_32', 'BLOCKGROUPS_39', 'BLOCKGROUPS_54', 'BLOCKGROUPS_29', 'BLOCKGROUPS_48', 'BLOCKGROUPS_19', 'BLOCKGROUPS_49', 'BLOCKGROUPS_24', 'BLOCKGROUPS_06', 'BLOCKGROUPS_09', 'BLOCKGROUPS_10', 'BLOCKGROUPS_18', 'BLOCKGROUPS_26', 'BLOCKGROUPS_36', 'BLOCKGROUPS_66', 'BLOCKGROUPS_40', 'BLOCKGROUPS_41', 'BLOCKGROUPS_01', 'BLOCKGROUPS_11', 'BLOCKGROUPS_12', 'BLOCKGROUPS_17', 'BLOCKGROUPS_30', 'BLOCKGROUPS_47', 'BLOCKGROUPS_53', 'BLOCKGROUPS_55', 'BLOCKGROUPS_33', 'BLOCKGROUPS_45', 'BLOCKGROUPS_51', 'BLOCKGROUPS_72', 'BLOCKGROUPS_02', 'BLOCKGROUPS_05', 'BLOCKGROUPS_15', 'BLOCKGROUPS_21', 'BLOCKGROUPS_22', 'BLOCKGROUPS_28', 'BLOCKGROUPS_34', 'BLOCKGROUPS_35', 'BLOCKGROUPS_37', 'BLOCKGROUPS_38', 'BLOCKGROUPS_42', 'BLOCKGROUPS_44', 'BLOCKGROUPS_50', 'BLOCKGROUPS_56', 'BLOCKGROUPS_60', 'BLOCKGROUPS_69', 'BLOCKGROUPS_78', 'BLOCKGROUPS_27', 'BLOCKGROUPS_46']
,1
table_name,US_BLOCKGROUPS_NATIONAL
description,
DDL,"create or replace TABLE US_BLOCKGROUPS_NATIONAL (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""tract_ce"" VARCHAR(16777216),
	""blockgroup_ce"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""blockgroup_geom"" BINARY(8388608)
);"

Database Name: FDA
Schema Name: GEO_US_BOUNDARIES
DDL describes table information.
,0
table_name,ADJACENT_COUNTIES
description,
DDL,"create or replace TABLE ADJACENT_COUNTIES (
	""county"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""neighbors"" VARIANT,
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

,1
table_name,ADJACENT_STATES
description,
DDL,"create or replace TABLE ADJACENT_STATES (
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

,2
table_name,CBSA
description,
DDL,"create or replace TABLE CBSA (
	""geo_id"" VARCHAR(16777216),
	""csa_geo_id"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""msa_indicator"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""cbsa_geom"" BINARY(8388608)
);"

,3
table_name,CNECTA
description,
DDL,"create or replace TABLE CNECTA (
	""geo_id"" VARCHAR(16777216),
	""cnecta_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""cnecta_geom"" BINARY(8388608)
);"

,4
table_name,COASTLINE
description,
DDL,"create or replace TABLE COASTLINE (
	""name"" VARCHAR(16777216),
	""coastline_geom"" BINARY(8388608)
);"

,5
table_name,CONGRESS_DISTRICT_115
description,
DDL,"create or replace TABLE CONGRESS_DISTRICT_115 (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""district_fips_code"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""congress_session"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" BOOLEAN,
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""district_geom"" BINARY(8388608)
);"

Some other tables have the similar structure: ['CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116']
,6
table_name,COUNTIES
description,
DDL,"create or replace TABLE COUNTIES (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_gnis_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""csa_fips_code"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""met_div_fips_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""county_geom"" BINARY(8388608)
);"

,7
table_name,NATIONAL_OUTLINE
description,
DDL,"create or replace TABLE NATIONAL_OUTLINE (
	""us_outline_geom"" BINARY(8388608),
	""aff_geo_id"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""name"" VARCHAR(16777216)
);"

,8
table_name,RAILWAYS
description,
DDL,"create or replace TABLE RAILWAYS (
	""geo_id"" NUMBER(38,0),
	""full_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""railway_geom"" VARCHAR(16777216)
);"

,9
table_name,STATES
description,
DDL,"create or replace TABLE STATES (
	""geo_id"" VARCHAR(16777216),
	""region_code"" VARCHAR(16777216),
	""division_code"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_gnis_code"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""state_geom"" BINARY(8388608)
);"

,10
table_name,CSA
description,
DDL,"create or replace TABLE CSA (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""msa_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""csa_geom"" BINARY(8388608)
);"

,11
table_name,METROPOLITAN_DIVISIONS
description,
DDL,"create or replace TABLE METROPOLITAN_DIVISIONS (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""cbsa_code"" VARCHAR(16777216),
	""metdiv_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""metdiv_geom"" BINARY(8388608)
);"

,12
table_name,NWS_FORECAST_REGIONS
description,
DDL,"create or replace TABLE NWS_FORECAST_REGIONS (
	""state"" VARCHAR(16777216),
	""cwa"" VARCHAR(16777216),
	""time_zone"" VARCHAR(16777216),
	""fe_area"" VARCHAR(16777216),
	""zone"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""state_zone"" VARCHAR(16777216),
	""lon"" FLOAT,
	""lat"" FLOAT,
	""shortname"" VARCHAR(16777216),
	""shape_geometry"" BINARY(8388608)
);"

,13
table_name,URBAN_AREAS
description,
DDL,"create or replace TABLE URBAN_AREAS (
	""geo_id"" VARCHAR(16777216),
	""urban_area_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""area_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""urban_area_geom"" BINARY(8388608)
);"

,14
table_name,ZIP_CODES
description,
DDL,"create or replace TABLE ZIP_CODES (
	""zip_code"" VARCHAR(16777216),
	""city"" VARCHAR(16777216),
	""county"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_code"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""zip_code_geom"" BINARY(8388608)
);"

External knowledge that might be helpful: 
# Calculation Method: Overlap Ratio and Bank Location Data

This document describes the method used to calculate the number of bank institutions per postal code area (ZIP code) by combining geospatial data and bank location data, focusing on the overlap between postal code areas and census block groups.

## 1. Geospatial Intersection of Postal Code Areas and Census Block Groups
We are using two geographical units:
- **ZIP Code Areas**: Represented by geometries from the ZIP code boundaries dataset.
- **Census Block Groups**: Represented by geometries from the national census block groups dataset.

### Key Calculation:
- The method calculates the area of overlap between each ZIP code's geometry and each block group's geometry.
- The ratio of this intersection area to the total block group area is computed as the **overlap ratio**.

This overlap ratio represents the proportion of a block group that falls within a given ZIP code.

## 2. Bank Location Distribution Based on Overlap Ratio
The next step involves distributing the number of bank locations to the overlapping census block groups based on the calculated overlap ratio.

### Key Calculation:
- For each block group, the number of bank locations is proportionally assigned based on the overlap size. The total number of bank locations in a ZIP code is distributed to the block groups using the overlap ratio.

This provides the number of bank institutions for each block group, adjusted for the overlap with ZIP code areas.

## 3. Aggregation by ZIP Code Area
Finally, the results are aggregated by ZIP code to determine which postal code has the highest number of bank institutions.

### Key Calculation:
- The process involves grouping by ZIP code and finding the maximum number of bank locations per block group.

The table structure information is ({database name: {schema name: {table name}}}): 
{'FDA': {'CENSUS_UTILITY': ['FIPS_CLASS_CODE', 'FIPS_CODES_ALL', 'FIPS_CODES_STATES', 'FUNCTIONAL_STATUS_CODES', 'LSAD_CODES', 'MTFCC_FEATURE_CLASS_CODES'], 'FDA_FOOD': ['FOOD_ENFORCEMENT', 'FOOD_EVENTS'], 'FDIC_BANKS': ['INSTITUTIONS', 'LOCATIONS'], 'GEO_CENSUS_BLOCKGROUPS': ['BLOCKGROUPS_01', 'BLOCKGROUPS_02', 'BLOCKGROUPS_04', 'BLOCKGROUPS_05', 'BLOCKGROUPS_06', 'BLOCKGROUPS_08', 'BLOCKGROUPS_09', 'BLOCKGROUPS_10', 'BLOCKGROUPS_11', 'BLOCKGROUPS_12', 'BLOCKGROUPS_13', 'BLOCKGROUPS_15', 'BLOCKGROUPS_16', 'BLOCKGROUPS_17', 'BLOCKGROUPS_18', 'BLOCKGROUPS_19', 'BLOCKGROUPS_20', 'BLOCKGROUPS_21', 'BLOCKGROUPS_22', 'BLOCKGROUPS_23', 'BLOCKGROUPS_24', 'BLOCKGROUPS_25', 'BLOCKGROUPS_26', 'BLOCKGROUPS_27', 'BLOCKGROUPS_28', 'BLOCKGROUPS_29', 'BLOCKGROUPS_30', 'BLOCKGROUPS_31', 'BLOCKGROUPS_32', 'BLOCKGROUPS_33', 'BLOCKGROUPS_34', 'BLOCKGROUPS_35', 'BLOCKGROUPS_36', 'BLOCKGROUPS_37', 'BLOCKGROUPS_38', 'BLOCKGROUPS_39', 'BLOCKGROUPS_40', 'BLOCKGROUPS_41', 'BLOCKGROUPS_42', 'BLOCKGROUPS_44', 'BLOCKGROUPS_45', 'BLOCKGROUPS_46', 'BLOCKGROUPS_47', 'BLOCKGROUPS_48', 'BLOCKGROUPS_49', 'BLOCKGROUPS_50', 'BLOCKGROUPS_51', 'BLOCKGROUPS_53', 'BLOCKGROUPS_54', 'BLOCKGROUPS_55', 'BLOCKGROUPS_56', 'BLOCKGROUPS_60', 'BLOCKGROUPS_66', 'BLOCKGROUPS_69', 'BLOCKGROUPS_72', 'BLOCKGROUPS_78', 'US_BLOCKGROUPS_NATIONAL'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'ADJACENT_STATES', 'CBSA', 'CNECTA', 'COASTLINE', 'CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116', 'COUNTIES', 'CSA', 'METROPOLITAN_DIVISIONS', 'NATIONAL_OUTLINE', 'NWS_FORECAST_REGIONS', 'RAILWAYS', 'STATES', 'URBAN_AREAS', 'ZIP_CODES']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

1. **FDA.FDIC_BANKS.LOCATIONS**
   - `"zip_code"`: To group and count bank locations by ZIP code.
   - `"state"`: To filter bank locations within Colorado (`'CO'`).
   - `"fdic_certificate_number"`: Unique identifier for bank institutions; used to count bank locations.
   - `"branch_name"`: May help identify individual bank branches.
   - **Conditions:**
     - `"state"` = 'CO'

2. **FDA.GEO_US_BOUNDARIES.ZIP_CODES**
   - `"zip_code"`: To join with bank locations and perform spatial operations.
   - `"state_code"`: To filter ZIP codes within Colorado (`'CO'`).
   - `"zip_code_geom"`: Geometry of the ZIP code area; used for spatial intersections.
   - **Conditions:**
     - `"state_code"` = 'CO'

3. **FDA.GEO_CENSUS_BLOCKGROUPS.BLOCKGROUPS_08**
   - `"geo_id"`: Identifier for each block group.
   - `"blockgroup_geom"`: Geometry of the block group; used for spatial operations.
   - `"state_fips_code"`: FIPS code for Colorado (`'08'`).
   - **Conditions:**
     - `"state_fips_code"` = '08' (implied by the table name `BLOCKGROUPS_08`)

---

**Sample Snowflake SQL Queries:**

1. **List bank locations in Colorado:**

   ```sql
   SELECT "fdic_certificate_number", "branch_name", "zip_code", "state"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 100;
   ```

2. **Count bank locations per ZIP code in Colorado:**

   ```sql
   SELECT "zip_code", COUNT(*) AS "bank_count"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   GROUP BY "zip_code"
   ORDER BY "bank_count" DESC
   LIMIT 100;
   ```

3. **Get distinct ZIP codes of bank locations in Colorado:**

   ```sql
   SELECT DISTINCT "zip_code"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 100;
   ```

4. **Retrieve ZIP codes and their geometries in Colorado:**

   ```sql
   SELECT "zip_code", "zip_code_geom", "state_code"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 100;
   ```

5. **List block groups and their geometries in Colorado:**

   ```sql
   SELECT "geo_id", "blockgroup_geom"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08"
   LIMIT 100;
   ```

6. **Count the total number of block groups in Colorado:**

   ```sql
   SELECT COUNT(*) AS "blockgroup_count"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08";
   ```

7. **Find overlapping block groups and ZIP codes in Colorado:**

   ```sql
   SELECT
     bg."geo_id" AS "blockgroup_id",
     zc."zip_code"
   FROM
     "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
     "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
   WHERE
     zc."state_code" = 'CO'
     AND ST_INTERSECTS(bg."blockgroup_geom", zc."zip_code_geom")
   LIMIT 100;
   ```

8. **Calculate the area of overlap between block groups and ZIP codes:**

   ```sql
   SELECT
     bg."geo_id" AS "blockgroup_id",
     zc."zip_code",
     ST_AREA(ST_INTERSECTION(bg."blockgroup_geom", zc."zip_code_geom")) AS "overlap_area",
     ST_AREA(bg."blockgroup_geom") AS "blockgroup_area"
   FROM
     "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
     "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
   WHERE
     zc."state_code" = 'CO'
     AND ST_INTERSECTS(bg."blockgroup_geom", zc."zip_code_geom")
   LIMIT 100;
   ```

9. **Compute overlap ratios for block groups and ZIP codes:**

   ```sql
   SELECT
     bg."geo_id" AS "blockgroup_id",
     zc."zip_code",
     (ST_AREA(ST_INTERSECTION(bg."blockgroup_geom", zc."zip_code_geom")) / ST_AREA(bg."blockgroup_geom")) AS "overlap_ratio"
   FROM
     "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
     "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
   WHERE
     zc."state_code" = 'CO'
     AND ST_INTERSECTS(bg."blockgroup_geom", zc."zip_code_geom")
   LIMIT 100;
   ```

10. **List bank counts and overlap ratios for block groups and ZIP codes:**

    ```sql
    SELECT
      bg."geo_id" AS "blockgroup_id",
      zc."zip_code",
      bc."bank_count",
      (ST_AREA(ST_INTERSECTION(bg."blockgroup_geom", zc."zip_code_geom")) / ST_AREA(bg."blockgroup_geom")) AS "overlap_ratio"
    FROM
      "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
    JOIN
      "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
      ON ST_INTERSECTS(bg."blockgroup_geom", zc."zip_code_geom")
    JOIN
      (
        SELECT "zip_code", COUNT(*) AS "bank_count"
        FROM "FDA"."FDIC_BANKS"."LOCATIONS"
        WHERE "state" = 'CO'
        GROUP BY "zip_code"
      ) bc
      ON zc."zip_code" = bc."zip_code"
    WHERE
      zc."state_code" = 'CO'
    LIMIT 100;
    ```

11. **List the number of bank locations per ZIP code in Colorado:**

    ```sql
    SELECT "zip_code", COUNT(*) AS "bank_count"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
    LIMIT 100;
    ```

12. **Count the number of block groups per ZIP code in Colorado:**

    ```sql
    SELECT
      zc."zip_code",
      COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
    FROM
      "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
      "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
    WHERE
      zc."state_code" = 'CO'
      AND ST_INTERSECTS(bg."blockgroup_geom", zc."zip_code_geom")
    GROUP BY
      zc."zip_code"
    LIMIT 100;
    ```

13. **List bank locations with their branch city and ZIP code in Colorado:**

    ```sql
    SELECT "branch_name", "branch_city", "zip_code"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    LIMIT 100;
    ```

14. **List ZIP codes in Colorado with their corresponding block group counts:**

    ```sql
    SELECT
      zc."zip_code",
      COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
    FROM
      "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
    LEFT JOIN
      "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
      ON ST_INTERSECTS(bg."blockgroup_geom", zc."zip_code_geom")
    WHERE
      zc."state_code" = 'CO'
    GROUP BY
      zc."zip_code"
    LIMIT 100;
    ```

15. **Retrieve the area of each ZIP code in Colorado:**

    ```sql
    SELECT "zip_code", "area_land_meters", "area_water_meters"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
    WHERE "state_code" = 'CO'
    LIMIT 100;
    ```

16. **Retrieve the area of each block group in Colorado:**

    ```sql
    SELECT "geo_id", "area_land_meters", "area_water_meters"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08"
    LIMIT 100;
    ```

17. **List block groups with their centroid coordinates in Colorado:**

    ```sql
    SELECT "geo_id", "internal_point_lat", "internal_point_lon"
    FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08"
    LIMIT 100;
    ```

18. **List ZIP codes with their centroid coordinates in Colorado:**

    ```sql
    SELECT "zip_code", "internal_point_lat", "internal_point_lon"
    FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
    WHERE "state_code" = 'CO'
    LIMIT 100;
    ```

19. **Find the ZIP codes with the highest bank counts in Colorado:**

    ```sql
    SELECT "zip_code", COUNT(*) AS "bank_count"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
    ORDER BY "bank_count" DESC
    LIMIT 100;
    ```

20. **List bank institutions with their addresses and ZIP codes in Colorado:**

    ```sql
    SELECT "institution_name", "branch_address", "zip_code"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    LIMIT 100;
    ```

These queries are designed to explore the relevant data and understand how bank locations, ZIP codes, and block groups relate to each other within the state of Colorado. They help in assessing the distribution of bank locations across ZIP codes and block groups, as well as preparing for calculations involving spatial overlaps and concentration metrics.Query:
SELECT "fdic_certificate_number", "branch_name", "zip_code", "state"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 100;
Answer:
fdic_certificate_number,branch_name,zip_code,state
4666,FORT CARSON FACILITY,80913,CO
6560,BRIARGATE CROSSING BRANCH,80920,CO
6560,HANDCOCK & ACADEMY BRANCH,80916,CO
6560,CENTENNIAL & FILLMORE BRANCH,80907,CO
6548,GARDEN OF THE GODS BRANCH,80907,CO
6548,CHAPEL HILLS BRANCH,80920,CO
6548,POWER AND STETSON KING SOOPERS BRANC,80922,CO
3511,COLORADO SPRINGS SOUTH BRANCH,80905,CO
3511,GARDEN OF THE GODS BRANCH,80907,CO
57587,Integrity Bank & Trust,80132,CO
8273,VALLEY BANKING CENTER,80911,CO
18489,Interquest Branch,80921,CO
19220,CASCADE BRANCH,80903,CO
3076,COLORADO SPRINGS BROADMOOR,80906,CO
3076,DOWNTOWN BANK,80903,CO
3076,CASCADE AVENUE LPO,80903,CO
12633,COLORADO SPRINGS BRANCH,80918,CO
91005,5 STAR BANK - DOWNTOWN BRANCH,80914,CO
628,NORWOOD BANKING CENTER BRANCH,80923,CO
628,Briargate and Academy Branch,80920,CO
628,SPRINGS RANCH BRANCH,80922,CO
628,MERIDIAN & WOODMAN BNKING CTR BRANCH,80831,CO
628,UPTOWN COLORADO SPRINGS BRANCH,80903,CO
3511,BRIARGATE BRANCH,80920,CO
11492,MOBILE BRANCH,80906,CO
18714,BRIARGATE/UNION BRANCH,80920,CO
20156,CO SPRINGS BRANCH,80903,CO
628,CENTENNIAL FILLMORE BNKG CTR BRANCH,80907,CO
16980,7OLORADO SPRINGS MESSENGER BRANCH,80915,CO
16980,Colorado Springs Interquest Branch,80921,CO
16980,Colorado Springs Edison Branch,80915,CO
17534,BROADMOOR SKYWAY BRANCH,80906,CO
17534,ACADEMY AT HANCOCK BRANCH,80916,CO
2270,ACADEMY BOULEVARD BRANCH,80920,CO
2270,COLORADO SPRINGS BRANCH,80903,CO
3076,BRIARGATE BANK,80920,CO
6548,ACADEMY BRANCH,80909,CO
6548,FOUNTAIN SAFEWAY BRANCH,80817,CO
6548,PIKES PEAK BRANCH,80909,CO
6548,MONUMENT KING SOOPERS BRANCH,80921,CO
6560,Powers Branch,80922,CO
6560,Powers Peak Branch,80920,CO
3511,AUSTIN BLUFFS & ACADEMY BRANCH,80918,CO
3511,MONUMENT MARKETPLACE BRANCH,80132,CO
3510,North Academy Branch,80920,CO
17782,Pikes Peak National Bank,80904,CO
57587,POWERS CENTER POINT BRANCH,80920,CO
3034,Flying Horse Branch,80921,CO
5394,MOUNTAIN VIEW BRANCH,80903,CO
19600,PLATTE BRANCH,80909,CO
59052,NORTH TEJON BRANCH,80903,CO
91005,5Star Bank,80903,CO
8273,THE CITADEL BANK BRANCH,80932,CO
8273,DOWNTOWN BANKING CENTER,80903,CO
19220,CIRCLE DRIVE BRANCH,80932,CO
1780,FALCON BRANCH,80831,CO
1780,ELLICOTT BRANCH,80808,CO
4666,DRIVE-UP FACILITY,80913,CO
6560,Chelton And Platte Branch,80909,CO
6560,ACADEMY BRANCH,80920,CO
16980,Colorado Springs Tejon Branch,80903,CO
3511,POWERS & CONSTITUTION BRANCH,80915,CO
3511,CORDERA BRANCH,80924,CO
3511,COLORADO SPRINGS BRANCH,80903,CO
57587,VOYAGER PARKWAY BRANCH,80921,CO
6548,CHEYENNE MEADOWS KING SOOPERS BRANCH,80906,CO
6548,FALCON SAFEWAY BRANCH,80831,CO
3510,Powers Pointe Branch,80917,CO
17782,VALLEY BRANCH,80817,CO
18609,COLORADO SPRINGS BRANCH,80903,CO
18714,CASCADE & PIKES PEAK BRANCH,80903,CO
91005,5 STAR BANK MESSENGER SERVICE,80909,CO
628,Interquest and Federal Branch,80921,CO
1778,FALCON BRANCH,80831,CO
19600,RAZORBACK ROAD BRANCH,80920,CO
19600,BRIARGATE OFFICE,80920,CO
19600,PALMER PARK BRANCH,80915,CO
59052,COLORADO SPRINGS BRANCH,80918,CO
5568,MESSENGER SERVICE,80907,CO
5568,COLORADO NATIONAL BANK BRANCH,80933,CO
6384,COLORADO SPRINGS BRANCH,80918,CO
1105,COLORADO SPRINGS - TEJON BRANCH,80903,CO
6560,Academy & Morning Sun Branch,80918,CO
3511,ACADEMY PLACE BRANCH,80918,CO
3511,FALCON LANDING BRANCH,80920,CO
3511,COLORADO SPRINGS EAST BRANCH,80909,CO
17782,ACADEMY BOULEVARD BRANCH,80918,CO
18714,CHEYENNE MOUNTAIN AND HWY 115 BRANCH,80906,CO
628,AUSTIN BLUFFS BRANCH,80918,CO
628,MESA RIDGE & FOUNTAIN MESA BANKING CENTER BRANCH,80817,CO
17534,NORTH ACADEMY BOULEVARD BRANCH,80918,CO
8273,BROADMOOR BRANCH,80915,CO
8273,MESSENGER SERVICE,80932,CO
19220,BRIARGATE BRANCH,80920,CO
6384,TEJON BRANCH,80903,CO
6548,EXCHANGE BRANCH,80903,CO
6548,AUSTIN BLUFF BRANCH,80918,CO
6548,BRIARGATE BRANCH,80920,CO
57716,FOUNTAIN BRANCH,80817,CO
19600,HWY 85/87 BRANCH,80817,CO
Query:
SELECT "zip_code", COUNT(*) AS "bank_count"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   GROUP BY "zip_code"
   ORDER BY "bank_count" DESC
   LIMIT 100;
Answer:
zip_code,bank_count
80111,33
80202,31
80206,30
80501,30
80525,24
80112,24
80634,24
80903,24
80302,20
80920,18
80134,16
80537,15
81301,15
80012,14
80301,14
80601,13
81501,13
80524,13
80401,13
80020,12
80918,12
80222,12
80016,12
81401,11
81611,11
80226,11
80015,10
80021,10
80550,10
80538,10
80123,10
80211,10
80104,10
80122,10
81212,9
80234,9
80921,9
81003,9
80228,9
80124,9
81505,9
80011,9
80002,9
80906,9
81008,8
80013,8
80203,8
80126,8
81101,8
80439,8
81005,8
80229,8
80129,8
81321,8
80631,8
80127,8
80027,8
80022,8
81601,8
80487,8
80907,7
81416,7
80751,7
81147,7
80528,7
81620,7
81632,7
80233,7
80224,7
80909,7
80030,7
80108,7
80110,7
81082,7
80207,7
80227,7
80026,7
80246,6
80504,6
81050,6
80424,6
80014,6
80033,6
80521,6
81657,6
81623,6
80807,6
80915,6
81007,6
81052,6
80120,6
80231,6
80701,6
81621,6
80817,5
81521,5
80214,5
80249,5
80723,5
80516,5
Query:
SELECT DISTINCT "zip_code"
   FROM "FDA"."FDIC_BANKS"."LOCATIONS"
   WHERE "state" = 'CO'
   LIMIT 100;
Answer:
zip_code
80913
80920
80916
80907
80922
80905
80132
80921
80903
80906
80918
80914
80923
80915
80909
80932
80808
80917
80933
80840
81301
81303
81122
80524
80549
80517
80538
81501
81504
81503
81422
80723
80654
80701
80863
80911
80831
81137
80525
80537
80534
81506
81427
80424
80443
81624
81090
81428
80446
80482
81230
80815
81130
81321
81052
81132
81067
80924
81302
80526
81526
81432
80498
80817
80904
80521
80513
80728
81520
81521
81425
80435
80813
80528
81505
81401
81147
81073
81054
81201
80810
81140
81063
81416
81324
80442
80447
80459
81224
81036
80807
80828
80821
81328
81323
80731
81041
81047
81144
81433
Query:
SELECT "zip_code", "zip_code_geom", "state_code"
   FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
   WHERE "state_code" = 'CO'
   LIMIT 100;
Answer:
Too long, hard cut:
zip_code,zip_code_geom,state_code
80621,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\x88\x03\x00\x00\x9b\x1f\x7fiQ<Z\xc0\xc2\xd9\xade2\x06D@d\x9b\xe2qQ<Z\xc0Nyt#,\x06D@\xd30|DL<Z\xc0\x85\xdb\xa1a1\x06D@F\xd8\xf0\xf4J<Z\xc0V#\xbb\xd22\x06D@\x9b\x02\x99\x9dE<Z\xc09\xc9V\x97S\x06D@o.\xfe\xb6\'<Z\xc0\x91D/\xa3X\x06D@\xecO\xe2s\'<Z\xc0\xc2\xb5\xda\xc3^\x06D@\x7f\x17\xb6f+<Z\xc0>\x07\x96#d\x06D@\x14{h\x1f+<Z\xc0\x9e`\xffun\x06D@\x96\xebm3\x15<Z\xc0\xca\xe0(yu\x06D@\x1e\x92\xe8e\x14<Z\xc0\xd2\x0f\xea""\x85\x06D@tF\x94\xf6\x06<Z\xc0\x85r\xa2]\x85\x06D@\xe6\x07\xae\xf2\x04<Z\xc0\xe7g\xeau\x8b\x06D@\xfb\x93\xf8\xdc\t<Z\xc0\x93\x8er0\x9b\x06D@""T\xa9\xd9\x03<Z\xc0\xd4\x02{L\xa4\x06D@\x87\x19\x1aO\x04<Z\xc0]\xbb\xb4\xe1\xb0\x06D@\xe3Y\x10\xca\xfb;Z\xc0\xcd\x17{/\xbe\x06D@\x93\x06E\xf3\x00<Z\xc0\xe8}\xe3k\xcf\x06D@\xef\xc8Xm\xfe;Z\xc0\xb2\x8d?Q\xd9\x06D@\xc0\xd4]\xd9\x05<Z\xc0\x7f\xd1\xe5\xcd\xe1\x06D@\xaa\xd5WW\x05<Z\xc0)\xa7=%\xe7\x06D@&r\xc1\x19\xfc;Z\xc0\x13\x04\x8fo\xef\x06D@\xfd7\xbd\x8b\xf7;Z\xc0\xe4U\x9d\xd5\x02\x07D@\xc4\x96\x1eM\xf5;Z\xc0\x1ac\'\xbc\x04\x07D@\xa5\xe9z\xa2\xeb;Z\xc0\xc7\x83-v\xfb\x06D@\x9b\xe6\x1d\xa7\xe8;Z\xc0\xf6\x07\xcam\xfb\x06D@\x97\xab\x1f\x9b\xe4;Z\xc0\xaa\xa8\xc14\x0c\x07D@\xde_\xcb+\xd7;Z\xc0_\x0bzo\x0c\x07D@P\x07@\xdc\xd5;Z\xc0`\x15od\x1e\x07D@\xba\xc5\xfc\xdc\xd0;Z\xc0\xf3\x8eSt$\x07D@P\xc5\x8d[\xcc;Z\xc0\xf3G\x18\x06,\x07D@-\tPS\xcb;Z\xc0\xcd\x05.\x8f5\x07D@\x8f\xc7\x0cT\xc6;Z\xc0\xac\x84\xee\x928\x07D@Q\x1bc\'\xbc;Z\xc0\x8a\x16\xa0m5\x07D@\x07\x82\x8eV\xb5;Z\xc0\x8aPl\x05M\x07D@\xff\xd4\x06\'\xa2;Z\xc0X\xc8\\\x19T\x07D@U\xa6\x98\x83\xa0;Z\xc0\x99\xb1h:;\x07D@\xba?\xa5J\x94;Z\xc0\x84\x0e\xba\x84C\x07D@\xb8\xcc\xe9\xb2\x98;Z\xc0\xe0/fKV\x07D@\x7fj\xbct\x93;Z\xc0\xa7R\xb3\x07Z\x07D@\xe2\\\xc3\x0c\x8d;Z\xc0O\xba\xf4/I\x07D@\xb6\xf6>U\x85;Z\xc0\x0f/\x88HM\x07D@\xe0\xfc\x14\xc7\x81;Z\xc0Kk\xd3\xd8^\x07D@*y\x03\xcc|;Z\xc0h\x1c\xeawa\x07D@\x024\xd8\xd4y;Z\xc0\xaf\x0f\xeb\x8dZ\x07D@\xa6\x85\xcb*l;Z\xc0{j\xf5\xd5U\x07D@z\xaf\xe8\xd6k;Z\xc0\xab\\\xa8\xfck\x07D@7\x19U\x86q;Z\xc0\x99v1\xcdt\x07D@\x96FZ*o;Z\xc0\xfa\x03\xe5\xb6}\x07D@S\x08\xe4\x12G;Z\xc0\xd2p\xca\xdc|\x07D@=HO\x91C;Z\xc00y\x03\xcc|\x07D@G_\xcf\xd7,;Z\xc0\xfc7/N|\x07D@\xd4\r\x14x\';Z\xc0\x8b\xc4\x045|\x07D@~\xac\xe0\xb7!;Z\xc0H\xd5v\x13|\x07D@\x8e\xee\xae\xb3!;Z\xc0\xd6-\x02c}\x07D@\x06\xf7\x03\x1e\x18;Z\xc0e\xba\xd7I}\x07D@\x96\xd1\xc8\xe7\x15;Z\xc0=[\x07\x07{\x07D@s/0+\x14;Z\xc0\x03]\xfb\x02z\x07D@lcz\xc2\x12;Z\xc0\x9e\x97\x8a\x8dy\x07D@\xfdL\xbdn\x11;Z\xc0[\xa8\xfcky\x07D@.t%\x02\xd5:Z\xc0W\xeb\xc4\xe5x\x07D@}\xb8r\xf6\xce:Z\xc0\xe6w\x9a\xccx\x07D@\x91\xa2\\\x1a\xbf:Z\xc0\x91\x1d\x1b\x81x\x07D@\x00\tQ\xbe\xa0:Z\xc0\xba\xe4\x7f\xf2w\x07D@\xc0\x9cg\xecK:Z\xc0\x80\xe6s\xeev\x07D@e9\t\xa5/:Z\xc0]\x10\x91\x9av\x07D@\xb0\xac4)\x05:Z\xc0\x17d\xcb\xf2u\x07D@\x89\x98\x12I\xf49Z\xc0\xa6\xf0\xa0\xd9u\x07D@\x8d\xb6*\x89\xec9Z\xc0Q\x96!\x8eu\x07D@)\xd7\x14\xc8\xec9Z\xc0c\xe4,\xeci\x07D@\xe0\xe7\x86\xa6\xec9Z\xc0Fo\xb8\x8f\xdc\x06D@\xb0c\xea\xae\xec9Z\xc0 r\xfaz\xbe\x06D@V2\x8e\x91\xec9Z\xc0\xc2\xc1\xde\xc4\x90\x06D@V2\x8e\x91\xec9Z\xc0\xdd\xb3\xae\xd1r\x06D@\x8d\xb6*\x89\xec9Z\xc0f\xcfej\x12\x06D@\xeb\x95@J\xec9Z\xc0\x1e\x88,\xd2\xc4\x05D@""\x1a\xddA\xec9Z\xc0\xfd^\n\x0f\x9a\x05D@\x98V\xd1\x1f\x9a9Z\xc0R\xb9\x89Z\x9a\x05D@^\x18w\x83h9Z\xc0\xfd^\n\x0f\x9a\x05D@e\x8dz\x88F9Z\xc0Wv\xc1\xe0\x9a\x05D@\x05s\x82699Z\xc0\x99eO\x02\x9b\x05D@U3k) 9Z\xc0\xc7\xe9\xeb\xf9\x9a\x05D@\x97VC\xe2\x1e9Z\xc0\x17\x873\xbf\x9a\x05D@1\x82T\x8a\x1d9Z\xc0AN\x980\x9a\x05D@\xbc\x94\xbad\x1c9Z\xc0\xe66\xe1^\x99\x05D@(eRC\x1b9Z\xc0\x98\xcd\xe30\x98\x05D@\xb7\x0b\xcdu\x1a9Z\xc0\x94D\xf6A\x96\x05D@\xa6\xba\x80\x97\x199Z\xc0$9`W\x93\x05D@\x8a|%\x90\x129Z\xc0~\x10\xc9\x90c\x05D@\x8c\xd9\x92U\x119Z\xc0\xca\xf4K\xc4[\x05D@\xb5\x91y\xe4\x0f9Z\xc0\xe7T2\x00T\x05D@\xa4Z\xd2Q\x0e9Z\xc0\xb3\xe3\x86\xdfM\x05D@\x18\x11\xc5\xe4\r9Z\xc0V\x0f\x98\x87L\x05D@\xa6\xb7?\x17\r9Z\xc0\x14TT\xfdJ\x05D@\xbd\xea\x8f0\x0c9Z\xc0\xd9UH\xf9I\x05D@B&\x199\x0b9Z\xc0\xc1-\x1fII\x05D@\xfb\x93\xf8\xdc\t9Z\xc0\xfd_u\xe4H\x05D@\x12\xc7H\xf6\x089Z\xc0-\xe4\x11\xdcH\x05D@\xdd\x9f\x19\xc4\x079Z\xc0""6X8I\x05D@\x94\x06E\xf3\x009Z\xc0\x01\xb5\x18<L\x05D@\xbf\xf80{\xd98Z\xc0\xf1\xb7=Ab\x05D@aX\x8c\xba\xd68Z\xc0\x9c)t^c\x05D@k\x0e\x10\xcc\xd18Z\xc0h\x80\x0b\xb2e\x05D@@8-x\xd18Z\xc0\t\xe0f\xf1b\x05D@\x11\xce5\xcc\xd08Z\xc0hP4\x0f`\x05D@\xb4""j\xa2\xcf8Z\xc0\xe8\xd9\xac\xfa\\\x05D@6\x0c\xadN\xce8Z\xc0\xcd(\x96[Z\x05D@\xd9\xb9\xf7p\xc98Z\xc0\xf1\xce\xa1\x0cU\x05D@y`\x8e\x1e\xbf8Z\xc0b\xbdQ+L\x05D@\'T\xfe\xb5\xbc8Z\xc0E\x0c;\x8cI\x05D@;\x1c]\xa5\xbb8Z\xc0\xd4\xccZ\nH\x05D@\xad\xc3\xd1U\xba8Z\xc0\xc9\x865\x95E\x05D@\xad\xddv\xa1\xb98Z\xc04qr\xbfC\x05D@x\x9c\xa2#\xb98Z\xc0\x85B\x04\x1cB\x05D@\xac\xce\xf8\xbe\xb88Z\xc0\xbf\xa8\xa4N@\x05D@\xe8\x00OZ\xb88Z\xc0\xaa\xe8\x0f\xcd<\x05D@G\t\x88I\xb88Z\xc0{\x98\xbdl;\x05D@\xa2}\xac\xe0\xb78Z\xc0sz\xde\x8d\x05\x05D@q\xd0\xec\xba\xb78Z\xc0\rZH\xc0\xe8\x04D@\x89\x12\xbb\xb6\xb78Z\xc06\x89A`\xe5\x04D@\xd8\xf2\xca\xf5\xb68Z\xc0\xbd\xbe\xd6\xa5F\x04D@\x91F\x05N\xb68Z\xc0\xe3\xf
Query:
SELECT "geo_id", "blockgroup_geom"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08"
   LIMIT 100;
Answer:
Too long, hard cut:
geo_id,blockgroup_geom
080010089011,"bytearray(b'\x01\x03\x00\x00\x00\x01\x00\x00\x00\xc2\x01\x00\x00u\xd3\xf4\xd9\x01>Z\xc0h\xe2\x1d\xe0I\xe5C@\xacW\x91\xd1\x01>Z\xc0>\xfe\xd2\xa2>\xe5C@\xe3\x0b!\xe7\xfd=Z\xc0>\xfe\xd2\xa2>\xe5C@\xdfR\xce\x17{=Z\xc0Qi\xc4\xcc>\xe5C@8\xa9\xf6\xe9x=Z\xc0>\xfe\xd2\xa2>\xe5C@F\xd9\xe9\x07u=Z\xc0\xbb\x1f\xb7_>\xe5C@R6sHj=Z\xc0\xdcv\xa1\xb9N\xe5C@\xe5\xc6\xbb#c=Z\xc0t\x11\xdf\x89Y\xe5C@\xb1\x1e\x85\xebQ=Z\xc0\xec\x04\xfb\xafs\xe5C@\x97\xecfF?=Z\xc0PhY\xf7\x8f\xe5C@\tR)v4=Z\xc0\x13\xb7\nb\xa0\xe5C@\xeb@d\x91&=Z\xc08/N|\xb5\xe5C@]\x02~\x8d$=Z\xc0eKVE\xb8\xe5C@\xa5\xc5\xa7\x00\x18=Z\xc0eKVE\xb8\xe5C@7\xa9h\xac\xfd<Z\xc05\xc7\xb9M\xb8\xe5C@\xe78\xb7\t\xf7<Z\xc0x\xb6Go\xb8\xe5C@\x0f/\x16\x86\xc8<Z\xc05\xc7\xb9M\xb8\xe5C@\x99\x18Y2\xc7<Z\xc05\xc7\xb9M\xb8\xe5C@\xee\xcfEC\xc6<Z\xc05\xc7\xb9M\xb8\xe5C@\x9c\xa6\xcf\x0e\xb8<Z\xc0\xb2\xe8\x9d\n\xb8\xe5C@\xa4>W[\xb1<Z\xc0\x90\x12\xbb\xb6\xb7\xe5C@fS<.\xaa<Z\xc01\n\x82\xc7\xb7\xe5C@\x95G7\xc2\xa2<Z\xc0\\\xd1\xe68\xb7\xe5C@\xb9\xfd\xf2\xc9\x8a<Z\xc08/N|\xb5\xe5C@0P\xe0\x9d|<Z\xc0\x967\x87k\xb5\xe5C@\xe0\xa8\xa3\xe3j<Z\xc0%\xc4\\R\xb5\xe5C@\xf1f\r\xdeW<Z\xc0VH\xf9I\xb5\xe5C@\xf2\xb4\xfc\xc0U<Z\xc0\x01\xeey\xfe\xb4\xe5C@i\xf0\x85\xc9T<Z\xc0\x07\xab\xb1\x84\xb5\xe5C@\xa9\x8e\xe3\x87J<Z\xc08/N|\xb5\xe5C@\xf4$w\xd8D<Z\xc08/N|\xb5\xe5C@\xb1\x8b\xa2\x07><Z\xc08/N|\xb5\xe5C@\xdf\xc95\x052<Z\xc08/N|\xb5\xe5C@\x12\xab?\xc20<Z\xc08/N|\xb5\xe5C@\xc2\xe4\xd4\xce0<Z\xc0s><K\x90\xe5C@\x9a`8\xd70<Z\xc0CL\x89$z\xe5C@\x82\x1ej\xdb0<Z\xc0o\xe3\x16\xf3s\xe5C@\x82\x1ej\xdb0<Z\xc0\xac\\\xa8\xfck\xe5C@j\xdc\x9b\xdf0<Z\xc0fL\xc1\x1ag\xe5C@K\x9a\xcd\xe30<Z\xc0_\n\x0f\x9a]\xe5C@3X\xff\xe70<Z\xc0X\xc8\\\x19T\xe5C@\x0b\xd4b\xf00<Z\xc0e\xf5\x0e\xb7C\xe5C@\x0b\xd4b\xf00<Z\xc0BSv\xfaA\xe5C@\x0b\xd4b\xf00<Z\xc0\x08\x89\xb4\x8d?\xe5C@\xfb)\x1cA*<Z\xc0:\rQ\x85?\xe5C@\xb6\xda\xc3^(<Z\xc0\x08\x89\xb4\x8d?\xe5C@P\x06\xd5\x06\'<Z\xc0\x85\xaa\x98J?\xe5C@\x89\x0c\xabx#<Z\xc0]\xb9\xde6S\xe5C@\xd8\xdd<\xd5!<Z\xc0\xf5\xbb\xb05[\xe5C@\xe4\xfe\xb1\x10\x1d<Z\xc0\x94\xedC\xder\xe5C@\'1\x08\xac\x1c<Z\xc0\x89\x0b@\xa3t\xe5C@]\x02~\x8d$<Z\xc0?\x89\xcf\x9d`\xe5C@\xd8P\xf8l\x1d<Z\xc0*\xd9\xb1\x11\x88\xe5C@6\x95Ea\x17<Z\xc0/\x7f\x85\xcc\x95\xe5C@F\xba-\x91\x0b<Z\xc0jO\xc99\xb1\xe5C@\xaa\xd5WW\x05<Z\xc0\x1a\x9b\x1d\xa9\xbe\xe5C@\n\x12\xdb\xdd\x03<Z\xc0Cb\x82\x1a\xbe\xe5C@\x05\xae\xb9\xa3\xff;Z\xc0?\xf6z\xf7\xc7\xe5C@\x12?\x8d{\xf3;Z\xc0%l?\x19\xe3\xe5C@a\x92XR\xee;Z\xc0y\xafZ\x99\xf0\xe5C@j\xfa\xec\x80\xeb;Z\xc08y\x91\t\xf8\xe5C@\x89a\x871\xe9;Z\xc0\xfb\xaa\\\xa8\xfc\xe5C@\xc0\xd6\xa5F\xe8;Z\xc0/\xb8\xe6\x8e\xfe\xe5C@,\x0f\xd2S\xe4;Z\xc0%\xc3\xf1|\x06\xe6C@\xa4\x8d#\xd6\xe2;Z\xc0\xe8(\x07\xb3\t\xe6C@Jg\xee!\xe1;Z\xc0\xafKTo\r\xe6C@\xa08\x80~\xdf;Z\xc0\x08\xfbv\x12\x11\xe6C@\x16\x8e\xae\xd2\xdd;Z\xc01&\xfd\xbd\x14\xe6C@\x885#\x83\xdc;Z\xc0\xce\xb5/\xa0\x17\xe6C@\rq\xac\x8b\xdb;Z\xc0\xb5%r\xc1\x19\xe6C@\xc3\x16I\xbb\xd1;Z\xc0\x9ek_@/\xe6C@\xce\x1a\xbc\xaf\xca;Z\xc0""\xcb\x82\x89?\xe6C@(I\xd7L\xbe;Z\xc0\xad\xf5EB[\xe6C@M\xa1\xf3\x1a\xbb;Z\xc0\xde2\xa7\xcbb\xe6C@\x13\xf1\xd6\xf9\xb7;Z\xc0\xa0\xfc\xdd;j\xe6C@-\xb5\xdeo\xb4;Z\xc0Z\xd5\x92\x8er\xe6C@t\xa0\x15\x18\xb2;Z\xc0t\xea\xcagy\xe6C@\xe2\xe7\xbf\x07\xaf;Z\xc0\t\xb9R\xcf\x82\xe6C@`=\xee[\xad;Z\xc0J\xd8\xb7\x93\x88\xe6C@\x984F\xeb\xa8;Z\xc0p\xec\xd9s\x99\xe6C@:z\xfc\xde\xa6;Z\xc0\x10i\x1b\x7f\xa2\xe6C@\x9a\xb6\x7fe\xa5;Z\xc0\re\xa8\x8a\xa9\xe6C@\xb1\x03u\xca\xa3;Z\xc0\x86N\xcf\xbb\xb1\xe6C@$\xd4\x0c\xa9\xa2;Z\xc0\xa0c\x07\x95\xb8\xe6C@\xd6[\x91\x98\xa0;Z\xc0R{\x11m\xc7\xe6C@\x06\xbba\xdb\xa2;Z\xc0\xe7I\x99\xd4\xd0\xe6C@H\xc4\x94H\xa2;Z\xc0\xb6\xf5\xd3\x7f\xd6\xe6C@%\x08W@\xa1;Z\xc0*\xdb\x87\xbc\xe5\xe6C@Sc\xd0\t\xa1;Z\xc0\xf1\x95@J\xec\xe6C@\xfbZ\x97\x1a\xa1;Z\xc0\x1c\xd1=\xeb\x1a\xe7C@\xe0mlv\xa4;Z\xc0\x1c\xd1=\xeb\x1a\xe7C@\xc9ZC\xa9\xbd;Z\xc0\x8eDh\x04\x1b\xe7C@\xdf\xad\xba\x0e\xd5;Z\xc0\xfd\xb7\x92\x1d\x1b\xe7C@\x0eod\x1e\xf9;Z\xc0V\x03\x94\x86\x1a\xe7C@g\xf9\xba\x0c\xff;Z\xc0s\x1c?T\x1a\xe7C@\x10()\xb0\x00<Z\xc0\x925\xea!\x1a\xe7C@\xd4\xdb-\xc9\x01<Z\xc0@\xdbj\xd6\x19\xe7C@E5\xb3\x96\x02<Z\xc0K\x89$z\x19\xe7C@e]\xdcF\x03<Z\xc0\xa6\xd4%\xe3\x18\xe7C@\x94\xc7\xd3\xf2\x03<Z\xc0\x1c9\xd2\x19\x18\xe7C@\xe0Jvl\x04<Z\xc0c\x19\xe2X\x17\xe7C@\x02\xde\x90F\x05<Z\xc0\x11\xf3\xac\xa4\x15\xe7C@-\xb4s\x9a\x05<Z\xc0\xa8p\x04\xa9\x14\xe7C@J\x8aV\xee\x05<Z\xc0x \xb2H\x13\xe7C@C\xb3y\x1c\x06<Z\xc0\xfc2\x18#\x12\xe7C@%\x9a\xceN\x06<Z\xc0\x19\x12\xf7X\xfa\xe6C@\xf1\x81\x1d\xff\x05<Z\xc0\xca\xbb\xea\x01\xf3\xe6C@\'\xdd\x96\xc8\x05<Z\xc0ze\xde\xaa\xeb\xe6C@\'\xdd\x96\xc8\x05<Z\xc0\x11\xb3^\x0c\xe5\xe6C@\xe5\xf0I\'\x12<Z\xc0>Pn\xdb\xf7\xe6C@ \x0c<\xf7\x1e<Z\xc0\xed\xcb\x99\xed\n\xe7C@$d \xcf.<Z\xc0\x84Os\xf2""\xe7C@\xc6\x1f\xd3\xda4<Z\xc0\x8b\x91%s,\xe7C@\x12U\x86q7<Z\xc0\xdc\xeb\xa4\xbe,\xe7C@\x17\x9f\x02`<<Z\xc0 \xc8A\t3\xe7C@\xe7\x00\xc1\x1c=<Z\xc0A\xce\xfb\xff8\xe7C@\xb6m\xa6B<<Z\xc0\x93\xf40\xb4:\xe7C@\xad\x1cZd;<Z\xc0\x93\xc0\xe6\x1c<\xe7C@\xf5JY\x868<Z\xc0O5z5@\xe7C@\x8f?\xdf\x16,<Z\xc0LN\xed\x0cS\xe7C@\xc7\x11k\xf1)<Z\xc0\\\x1d\x00qW\xe7C@\x13\x86\x8f\x88)<Z
Query:
SELECT COUNT(*) AS "blockgroup_count"
   FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08";
Answer:
blockgroup_count
3532
Query:
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOMETRYFROMWKB(bg."blockgroup_geom"),
    ST_GEOMETRYFROMWKB(zc."zip_code_geom")
  )
LIMIT 100;
Answer:
blockgroup_id,zip_code
081230019053,80621
081230010053,80631
081230010053,80620
081230010053,80634
081230022053,80550
081230004023,80631
081230004023,80634
081230015003,80615
081230001003,80631
080010085434,80603
080010085434,80601
080010093044,80229
080010093044,80260
080010093044,80233
080010089011,80022
080010089011,80216
080010089011,80640
080010089011,80229
080010093251,80234
080010085451,80241
080010085261,80602
080010085261,80241
080010085261,80023
080010085261,80234
080010085481,80602
080010085481,80241
080010092061,80229
080010092061,80233
080010081001,80239
080010081001,80010
080010081001,80045
080010081001,80011
080010085501,80602
080010085501,80241
080010085501,80233
080010093044,80234
080010090024,80221
080010090024,80229
080010090024,80260
080010093274,80234
080010085244,80602
080010085244,80241
080050056194,80123
080050056304,80122
080050067044,80222
080050067044,80113
080050067044,80210
080050066014,80110
080050066014,80121
080050066014,80120
080050066014,80113
080050071014,80105
080050071014,80102
080050071014,80828
080050071014,80103
080050071014,80101
080010091031,80229
080010091031,80233
080010094101,80031
080010085341,80233
080010096061,80030
080010096061,80003
080010096061,80221
080010602001,80241
080010602001,80233
080010602001,80234
080010094081,80031
080010094081,80020
080010094081,80234
080010150001,80022
080010150001,80640
080010150001,80229
080010085291,80241
080010085231,80602
080010085231,80603
080010085231,80640
080010085231,80601
080010600001,80602
080010600001,80023
080010085331,80229
080010085331,80233
080010085241,80602
080010085241,80241
080010082001,80011
080010096081,80030
080010096081,80003
080010085061,80241
080010085061,80233
080010085371,80022
080010085371,80603
080010085371,80640
080050071014,80136
080050062004,80110
080130137014,80446
080130137014,80466
080130137014,80455
080130137014,80302
080130137014,80481
080130137014,80540
080130128004,80026
Query:
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code",
  ST_AREA(
    ST_INTERSECTION(
      ST_GEOGFROMWKB(bg."blockgroup_geom"),
      ST_GEOGFROMWKB(zc."zip_code_geom")
    )
  ) AS "overlap_area",
  ST_AREA(
    ST_GEOGFROMWKB(bg."blockgroup_geom")
  ) AS "blockgroup_area"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
LIMIT 100;
Answer:
Too long, hard cut:
blockgroup_id,zip_code,overlap_area,blockgroup_area
080899683004,81050,16703045.836551026,16703045.836551026
080459517021,81601,491922.98054666066,491922.98054666066
080970001004,81623,606492746.8290609,606492746.8290609
080970005001,81611,41903917.11501591,48027251.57104667
080970005001,81656,734946.5514559802,48027251.57104667
080970005001,81615,5388387.899059592,48027251.57104667
080970004011,81611,3802348.8558318,3802348.8558318
080970004021,81612,,87229069.51595777
080970004021,81611,87229069.50799012,87229069.51595777
080970004021,81225,,87229069.51595777
080370005032,81620,8346035.418428726,8346035.418608725
080370005032,81655,,8346035.418608725
080370004022,81631,,107219288.7873091
080370004022,81632,107219288.66659668,107219288.7873091
080370004022,81620,,107219288.7873091
080370004022,81645,,107219288.7873091
080370004032,81631,198180545.80669147,206465104.78178665
080370004032,81637,,206465104.78178665
080370004032,81632,8284558.975078789,206465104.78178665
080370004032,81645,,206465104.78178665
080370004032,81621,,206465104.78178665
080370003012,81623,6561353.748339678,6561353.748339678
080370002002,81631,182984.43973194697,13531843.997251868
080370002002,81637,13348859.554706233,13531843.997251868
080370003022,81621,3227314.633250454,3227314.633250454
080370004012,81632,44093858.171053976,100969263.414904
080459518032,81637,,91913340.2262655
080459518032,81623,80267633.9358969,91913340.2262655
080459518032,81601,11645706.290865378,91913340.2262655
080459518022,81637,,188294780.38296518
080459518022,81623,6512764.87331747,188294780.38296518
080459518022,81601,181782015.52917683,188294780.38296518
080459519022,81601,,180553796.8622243
080459517012,81601,4729250.638176315,4729250.638176315
080899683002,81050,49453054.13826318,50644046.397800915
080899683002,81067,0.0,50644046.397800915
080899683002,81077,1190992.2611823676,50644046.397800915
080899682002,81077,,86254078.43386766
080899686002,81050,873000.5257680685,873000.5257680685
080899685002,81050,9148633.192821246,9148633.192821246
080899685002,81067,,9148633.192821246
080970005002,81612,6970111.2213839535,1143883639.2259972
080970005002,81621,,1143883639.2259972
080970005002,81654,4811569.099306671,1143883639.2259972
080970005002,81656,1979765.9455290393,1143883639.2259972
080970005002,81615,,1143883639.2259972
080970001002,81611,8327377.716249071,215625382.2388422
080970001002,81623,,215625382.2388422
081190101034,80863,8013978.469048232,8013978.468989503
080970001002,81621,,215625382.2388422
080970001002,81654,207298004.52238902,215625382.2388422
080299647002,81643,,287180410.6041281
080459518042,81623,4683882.270556881,4683882.270556881
080439790003,81223,618169344.766808,1966192715.143997
080770019002,81507,,486106739.0459643
080459517022,81601,372156.5039514844,372156.5039514844
081010032002,81022,1068727004.8628829,2040387027.2963386
080410071022,80924,,5654062.510698323
080010085232,80642,2106768.5246151593,164558428.56108773
080410039092,80831,35841962.67504959,468883591.4594922
080770015013,81521,3521503.0993375494,3521503.0992563292
080459516002,81601,1012955.7231363072,1012955.7231363072
080130125104,80302,4459228.1576768905,49026422.646385945
080859665013,81415,,549723249.8349552
080590098483,80439,3331939.658900121,3331939.658900121
080970004022,81611,1013118.2418040902,1013118.2418040902
080330001002,81320,486050560.6796273,2718567594.0476766
081010028063,81005,72090803.0983348,248093937.61803743
080410076011,80908,21127203.71769051,37368277.609374024
080319800001,80642,,110169478.55470705
080970004012,81611,532760.412776815,532760.412776815
080710005002,81081,,72037167.5398562
080119667002,81050,124874047.11389206,525877397.3033636
080279701004,81223,,869487267.7383407
080410039093,80808,132749083.66053712,238602339.50608236
080370003013,81623,4043354.570377305,7042747.798194184
080459519011,81647,197424659.67830306,346101742.0708595
080370006001,81642,,646835400.7845731
080370003013,81621,2999393.227131095,7042747.798194184
080919676003,81433,,322714349.18204206
080370005033,81632,,471764.0435753285
080370005033,81620,471764.04360919446,471764.0435753285
080410038021,80920,9762.906187444838,40692151.46310781
080370005034,81620,1457971.433966775,54318970.00585513
080370004033,81631,144363277.18975532,145221368.74870774
080370001001,80423,314306243.6696778,1407908306.040784
080370005022,81645,,26998318.335462224
080319800001,80022,4787.936199059084,110169478.55470705
080399612051,80117,203721693.56154802,424391738.3664124
080859665013,81220,155333103.5188506,549723249.8349552
080370004033,81637,858091.5589879375,145221368.74870774
080299647002,81413,244581176.45665982,287180410.6041281
080919676003,81427,209865476.31927085,322714349.18204206
080919676004,81432,279223155.3391579,334946386.6830528
080439792001,81252,,210410446.6979121
080590098084,80439,,69849204.76690096
080459518043,81623,87216477.1129215,87216477.1129215
081190101052,80816,41168930.70079318,94860154.49687244
080899682002,81050,10449959.971330816,86254078.43386
Query:
SELECT
     bg."geo_id",
     ST_ISVALID(ST_GEOGFROMWKB(bg."blockgroup_geom")) AS "is_valid_geography",
     ST_ISVALID(ST_GEOMFROMWKB(bg."blockgroup_geom")) AS "is_valid_geometry"
   FROM
     "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
   LIMIT 10;
Answer:
geo_id,is_valid_geography,is_valid_geometry
080010089011,True,True
080010093251,True,True
080010085451,True,True
080010085261,True,True
080010085481,True,True
080010092061,True,True
080010081001,True,True
080010085501,True,True
080010091031,True,True
080010094101,True,True
Query:
SELECT
  bg."geo_id" AS "blockgroup_id",
  zc."zip_code",
  bc."bank_count",
  (
    ST_AREA(
      ST_INTERSECTION(
        ST_GEOGFROMWKB(bg."blockgroup_geom"),
        ST_GEOGFROMWKB(zc."zip_code_geom")
      )
    ) / ST_AREA(
      ST_GEOGFROMWKB(bg."blockgroup_geom")
    )
  ) AS "overlap_ratio"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
JOIN
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
  ON ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
JOIN
  (
    SELECT "zip_code", COUNT(*) AS "bank_count"
    FROM "FDA"."FDIC_BANKS"."LOCATIONS"
    WHERE "state" = 'CO'
    GROUP BY "zip_code"
  ) bc
  ON zc."zip_code" = bc."zip_code"
WHERE
  zc."state_code" = 'CO'
LIMIT 100;
Answer:
blockgroup_id,zip_code,bank_count,overlap_ratio
080130137014,80446,2,
080579556002,80480,1,1.0
080690028024,80517,5,0.9968509835052842
080690028024,80540,1,
080130137025,80466,1,1.0000000005782683
080130137026,80466,1,1.0
080130137027,80302,20,
080130137027,80446,2,
080130137027,80466,1,1.0
080130137027,80482,1,
080219749004,81101,8,0.06389279851283088
080219749004,81140,1,0.919945865500026
080219749004,81144,3,
080899683004,81050,6,1.0
081059770004,81101,8,
081059770004,81140,1,
081059770004,81144,3,1.0
081059770004,81132,1,
080039603004,81101,8,1.0
080039602004,81101,8,1.0
080639621004,80807,6,1.0
080899686004,81050,6,1.0
081059767004,81144,3,1.0
080490002023,80442,3,0.07054559201337184
080039602005,81101,8,1.0
080490002023,80466,1,
080899686005,81050,6,1.0
080490002023,80482,1,0.9294544080037835
080039602006,81101,8,1.0
080690028023,80517,5,1.0
080690028013,80517,5,1.0
081070005004,80487,8,0.9997190284318301
081259631004,80758,3,1.0
080690019033,80517,5,0.09539162418188737
081259632004,80759,4,1.0
080810004004,81625,3,1.0
080130136022,80517,5,
080130136022,80446,2,
080810005004,81625,3,1.0
080959676004,80734,3,1.0
080130136022,80447,1,
081259632005,80759,4,1.0
080130136022,80540,1,0.11716473214238082
080130137022,80466,1,0.5719481129350521
080810004005,81625,3,1.0
080330001002,81324,1,0.19290173962180523
080490002012,80517,5,
080810005005,81625,3,1.0
080099646002,81047,1,
080490002012,80446,2,0.15485436938932404
080810005006,81625,3,1.0
080179606003,80810,2,0.18496270305305754
080759661004,80751,7,1.0
080410069022,80920,18,0.3474519821681488
080759663004,80751,7,1.0
080870006004,80701,6,1.0
080130137024,80466,1,
080899682002,81067,4,0.8788467726596423
080459521001,81648,1,
080870007004,80723,5,1.0
080930004002,80461,3,
080490002012,80480,1,
080130137023,80302,20,0.3245292168504172
080859665013,81415,1,
081039511004,81641,2,1.0
080590120304,80433,5,
081219241002,80720,5,0.21629204105995994
080870007005,80723,5,1.0
080130137023,80466,1,0.6405278070000536
080759661005,80751,7,1.0
080490002012,80447,1,0.8451456306000682
080870006005,80701,6,1.0
080299650004,81428,2,0.06066205397281802
080299650004,81416,7,
080370005034,81620,7,0.026840925625239542
080299652004,81413,1,1.0
080899685002,81050,6,1.0
080759664002,80743,1,
080490001002,80459,2,1.0
080150004022,81211,5,0.9060670506163697
080859666014,81401,11,0.49560400527225285
080130137013,80302,20,0.9774518969539058
080490002022,80442,3,0.2041616697946604
080759664002,80720,5,
080539731001,81147,7,0.35777748572421175
080130137024,80302,20,
080859663004,81401,11,1.0
080919676004,81427,4,0.16636462896787965
080130137014,80302,20,0.21712828879982743
081259632002,80759,4,0.3952228220156083
080490002022,80446,2,0.41715213715274907
080130137024,80403,2,1.0000000000055032
080690019033,80537,15,0.15937951238366085
080679706006,81433,1,
080859664004,81401,11,1.0
080179606002,80815,1,
080470138002,80482,1,
080130137022,80302,20,0.26567810828900273
080759664002,80751,7,0.977833049248815
081070001002,81639,1,0.3699991125245106
Query:
-- Query 1: No correction needed
SELECT "zip_code", COUNT(*) AS "bank_count"
FROM "FDA"."FDIC_BANKS"."LOCATIONS"
WHERE "state" = 'CO'
GROUP BY "zip_code"
LIMIT 100
Answer:
zip_code,bank_count
80913,2
80920,18
80916,2
80907,7
80922,4
80905,3
80132,4
80921,9
80903,24
80906,9
80918,12
80914,1
80923,2
80915,6
80909,7
80932,3
80808,2
80917,1
80933,1
80840,1
81301,15
81303,3
81122,2
80524,13
80549,2
80517,5
80538,10
81501,13
81504,2
81503,1
81422,1
80723,5
80654,1
80701,6
80863,3
80911,1
80831,4
81137,1
80525,24
80537,15
80534,5
81506,2
81427,4
80424,6
80443,5
81624,1
81090,1
81428,2
80446,2
80482,1
81230,5
80815,1
81130,1
81321,8
81052,6
81132,1
81067,4
80031,4
80221,2
80301,14
80265,1
80125,1
80021,10
81621,6
80924,1
81302,1
80526,4
81526,1
81432,2
80498,1
80817,5
80904,2
80521,6
80513,3
80728,1
81520,4
81521,5
81425,2
80435,3
80813,1
80528,7
81505,9
81401,11
81147,7
81073,3
81054,1
81201,5
80810,2
81140,1
81063,1
81416,7
81324,1
80442,3
80447,1
80459,2
81224,3
81036,1
80807,6
80828,3
80821,1
Query:
-- Corrected Query 2
SELECT
  zc."zip_code",
  COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
FROM
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg,
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
WHERE
  zc."state_code" = 'CO'
  AND ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
GROUP BY
  zc."zip_code"
LIMIT 100
Answer:
zip_code,blockgroup_count
81092,4
80822,4
80103,8
80544,2
80550,21
80524,39
81418,6
80821,7
81006,26
81067,14
80545,4
80515,7
80138,32
81326,10
80218,33
80905,34
80224,40
80451,2
80513,16
80642,8
80290,3
80497,8
80133,7
80260,41
80631,71
80219,73
80920,29
80829,11
81623,21
80510,6
80824,4
80426,3
80231,43
80640,12
80247,39
80512,13
80922,22
80517,14
81652,7
81120,8
80727,4
81141,4
81243,4
81239,3
80488,1
80602,30
80438,4
81020,8
80428,3
80835,4
81426,6
80446,10
81419,11
80530,8
80031,49
81003,33
80303,34
80128,47
80654,7
80477,2
81656,2
81152,6
81044,3
80468,7
80124,26
81052,17
80440,9
81154,5
80482,9
80815,5
80546,2
80467,6
80721,2
81038,1
80129,26
80110,43
80216,30
81507,15
80232,39
81122,14
80757,6
80751,18
80536,6
81024,3
81090,4
81087,2
80122,44
80759,10
81151,10
81023,5
80737,4
80831,15
80653,4
81081,4
80435,11
81323,15
81431,3
81526,10
81146,6
80209,33
Query:
-- Query 3: No correction needed
SELECT "branch_name", "branch_city", "zip_code"
FROM "FDA"."FDIC_BANKS"."LOCATIONS"
WHERE "state" = 'CO'
LIMIT 100
Answer:
branch_name,branch_city,zip_code
FORT CARSON FACILITY,Fort Carson,80913
BRIARGATE CROSSING BRANCH,Colorado Springs,80920
HANDCOCK & ACADEMY BRANCH,Colorado Springs,80916
CENTENNIAL & FILLMORE BRANCH,Colorado Springs,80907
GARDEN OF THE GODS BRANCH,Colorado Springs,80907
CHAPEL HILLS BRANCH,Colorado Springs,80920
POWER AND STETSON KING SOOPERS BRANC,Colorado Springs,80922
COLORADO SPRINGS SOUTH BRANCH,Colorado Springs,80905
GARDEN OF THE GODS BRANCH,Colorado Springs,80907
Integrity Bank & Trust,Monument,80132
VALLEY BANKING CENTER,Colorado Springs,80911
Interquest Branch,Colorado Springs,80921
CASCADE BRANCH,Colorado Springs,80903
COLORADO SPRINGS BROADMOOR,Colorado Springs,80906
DOWNTOWN BANK,Colorado Springs,80903
CASCADE AVENUE LPO,Colorado Springs,80903
COLORADO SPRINGS BRANCH,Colorado Springs,80918
5 STAR BANK - DOWNTOWN BRANCH,Colorado Springs,80914
NORWOOD BANKING CENTER BRANCH,Colorado Springs,80923
Briargate and Academy Branch,Colorado Springs,80920
SPRINGS RANCH BRANCH,Colorado Springs,80922
MERIDIAN & WOODMAN BNKING CTR BRANCH,Falcon,80831
UPTOWN COLORADO SPRINGS BRANCH,Colorado Springs,80903
BRIARGATE BRANCH,Colorado Springs,80920
MOBILE BRANCH,Colorado Springs,80906
BRIARGATE/UNION BRANCH,Colorado Springs,80920
CO SPRINGS BRANCH,Colorado Springs,80903
CENTENNIAL FILLMORE BNKG CTR BRANCH,Colorado Springs,80907
7OLORADO SPRINGS MESSENGER BRANCH,Colorado Springs,80915
Colorado Springs Interquest Branch,Colorado Springs,80921
Colorado Springs Edison Branch,Colorado Springs,80915
BROADMOOR SKYWAY BRANCH,Colorado Springs,80906
ACADEMY AT HANCOCK BRANCH,Colorado Springs,80916
ACADEMY BOULEVARD BRANCH,Colorado Springs,80920
COLORADO SPRINGS BRANCH,Colorado Springs,80903
BRIARGATE BANK,Colorado Springs,80920
ACADEMY BRANCH,Colorado Springs,80909
FOUNTAIN SAFEWAY BRANCH,Fountain,80817
PIKES PEAK BRANCH,Colorado Springs,80909
MONUMENT KING SOOPERS BRANCH,Colorado Springs,80921
Powers Branch,Colorado Springs,80922
Powers Peak Branch,Colorado Springs,80920
AUSTIN BLUFFS & ACADEMY BRANCH,Colorado Springs,80918
MONUMENT MARKETPLACE BRANCH,Monument,80132
North Academy Branch,Colorado Springs,80920
Pikes Peak National Bank,Colorado Springs,80904
POWERS CENTER POINT BRANCH,Colorado Springs,80920
Flying Horse Branch,Colorado Springs,80921
MOUNTAIN VIEW BRANCH,Colorado Springs,80903
PLATTE BRANCH,Colorado Springs,80909
NORTH TEJON BRANCH,Colorado Springs,80903
5Star Bank,Colorado Springs,80903
THE CITADEL BANK BRANCH,Colorado Springs,80932
DOWNTOWN BANKING CENTER,Colorado Springs,80903
CIRCLE DRIVE BRANCH,Colorado Springs,80932
FALCON BRANCH,Peyton,80831
ELLICOTT BRANCH,Calhan,80808
DRIVE-UP FACILITY,Fort Carson,80913
Chelton And Platte Branch,Colorado Springs,80909
ACADEMY BRANCH,Colorado Springs,80920
Colorado Springs Tejon Branch,Colorado Springs,80903
POWERS & CONSTITUTION BRANCH,Colorado Springs,80915
CORDERA BRANCH,Colorado Springs,80924
COLORADO SPRINGS BRANCH,Colorado Springs,80903
VOYAGER PARKWAY BRANCH,Colorado Springs,80921
CHEYENNE MEADOWS KING SOOPERS BRANCH,Colorado Springs,80906
FALCON SAFEWAY BRANCH,Peyton,80831
Powers Pointe Branch,Colorado Springs,80917
VALLEY BRANCH,Fountain,80817
COLORADO SPRINGS BRANCH,Colorado Springs,80903
CASCADE & PIKES PEAK BRANCH,Colorado Springs,80903
5 STAR BANK MESSENGER SERVICE,Colorado Springs,80909
Interquest and Federal Branch,Colorado Springs,80921
FALCON BRANCH,Peyton,80831
RAZORBACK ROAD BRANCH,Colorado Springs,80920
BRIARGATE OFFICE,Colorado Springs,80920
PALMER PARK BRANCH,Colorado Springs,80915
COLORADO SPRINGS BRANCH,Colorado Springs,80918
MESSENGER SERVICE,Colorado Springs,80907
COLORADO NATIONAL BANK BRANCH,Colorado Springs,80933
COLORADO SPRINGS BRANCH,Colorado Springs,80918
COLORADO SPRINGS - TEJON BRANCH,Colorado Springs,80903
Academy & Morning Sun Branch,Colorado Springs,80918
ACADEMY PLACE BRANCH,Colorado Springs,80918
FALCON LANDING BRANCH,Colorado Springs,80920
COLORADO SPRINGS EAST BRANCH,Colorado Springs,80909
ACADEMY BOULEVARD BRANCH,Colorado Springs,80918
CHEYENNE MOUNTAIN AND HWY 115 BRANCH,Colorado Springs,80906
AUSTIN BLUFFS BRANCH,Colorado Springs,80918
MESA RIDGE & FOUNTAIN MESA BANKING CENTER BRANCH,Fountain,80817
NORTH ACADEMY BOULEVARD BRANCH,Colorado Springs,80918
BROADMOOR BRANCH,Colorado Springs,80915
MESSENGER SERVICE,Colorado Springs,80932
BRIARGATE BRANCH,Colorado Springs,80920
TEJON BRANCH,Colorado Springs,80903
EXCHANGE BRANCH,Colorado Springs,80903
AUSTIN BLUFF BRANCH,Colorado Springs,80918
BRIARGATE BRANCH,Colorado Springs,80920
FOUNTAIN BRANCH,Fountain,80817
HWY 85/87 BRANCH,Fountain,80817
Query:
-- Corrected Query 4
SELECT
  zc."zip_code",
  COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
FROM
  "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
LEFT JOIN
  "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
  ON ST_INTERSECTS(
    ST_GEOGFROMWKB(bg."blockgroup_geom"),
    ST_GEOGFROMWKB(zc."zip_code_geom")
  )
WHERE
  zc."state_code" = 'CO'
GROUP BY
  zc."zip_code"
LIMIT 100
Answer:
zip_code,blockgroup_count
81092,4
80544,2
80822,4
80103,8
80123,60
80204,52
80237,31
80443,16
80909,49
80449,10
80476,4
80117,8
80423,4
80419,4
80524,39
80550,21
81067,14
81418,6
81006,26
80821,7
80515,7
80545,4
81239,3
80640,12
80231,43
80922,22
80517,14
81120,8
81652,7
80247,39
81243,4
80512,13
81141,4
80727,4
81044,3
80468,7
81152,6
81419,11
80530,8
81426,6
80446,10
80128,47
80031,49
80303,34
80654,7
81003,33
80477,2
81656,2
81050,18
80211,47
80010,55
81635,8
81125,8
81642,6
81330,3
80137,9
81019,3
80015,73
81062,9
80033,41
81244,3
81084,5
81410,8
80828,8
81654,7
80442,5
80930,5
80650,5
80814,8
81140,8
80481,6
80107,15
81133,6
80444,3
80746,2
81640,4
81049,4
80840,13
80624,2
81138,1
80729,2
80528,16
81433,9
81411,2
80862,3
81231,1
80220,54
80016,51
80475,3
81646,5
80241,40
81611,16
80469,5
80911,32
80480,9
80863,15
80813,8
81620,11
81625,17
81624,11
Query:
-- Query 5: No correction needed
SELECT "zip_code", "area_land_meters", "area_water_meters"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
WHERE "state_code" = 'CO'
LIMIT 100
Answer:
zip_code,area_land_meters,area_water_meters
81527,2013828956.0,3761019.0
81320,486262421.0,49255.0
81077,1178482.0,13232.0
80921,225235379.0,1933822.0
81326,646195392.0,585496.0
80729,1869864493.0,630674.0
80476,148827819.0,36623.0
80649,472905780.0,26195929.0
81003,20808310.0,700796.0
81239,132545965.0,0.0
80123,30718205.0,4203411.0
81154,691579419.0,339724.0
81089,1792207970.0,4670090.0
80027,50407761.0,508327.0
80919,37206784.0,5329.0
80264,19282.0,0.0
80926,167420627.0,6609.0
80862,356006004.0,1236283.0
80216,27283319.0,210198.0
81063,1066786807.0,13238742.0
81231,162539.0,0.0
80483,225266312.0,175822.0
80905,12846991.0,5052.0
81506,33346100.0,12515.0
80468,994175408.0,6657257.0
80477,69519.0,0.0
81123,679331745.0,3012690.0
80737,628357939.0,36263.0
80237,9315313.0,17849.0
81237,90228249.0,0.0
80436,31776171.0,76332.0
81050,1391243908.0,14353301.0
81043,3729228.0,0.0
80103,727997211.0,16611904.0
80128,31430494.0,4554369.0
80911,31278565.0,1216253.0
81148,604499.0,0.0
81416,872337882.0,4987541.0
80421,357136638.0,580527.0
81503,90870769.0,1092236.0
81610,804607159.0,222970.0
81027,1604236717.0,0.0
80218,4136533.0,0.0
81144,732605020.0,547738.0
80015,37159546.0,525772.0
81226,212781912.0,1080383.0
80294,15459.0,0.0
81235,1398023748.0,2319184.0
80013,36210108.0,0.0
80136,523926849.0,1391139.0
81632,316309956.0,1418332.0
81092,218776942.0,249500.0
80457,3987401.0,0.0
81611,1109670122.0,1033980.0
81155,820384512.0,28248.0
80003,17597628.0,723907.0
80471,1991365.0,0.0
81334,920409289.0,15568.0
81639,1554243737.0,1816426.0
80461,749122508.0,8719758.0
80463,313269509.0,840311.0
80249,123611764.0,31164.0
80290,19489.0,0.0
81415,722175238.0,3900442.0
80728,939260049.0,0.0
80907,25609319.0,45627.0
80750,340238877.0,2440033.0
80928,851544772.0,134015.0
80830,578422326.0,12560.0
80012,20142891.0,0.0
80435,268622166.0,6783584.0
81131,812405978.0,616122.0
80650,131364187.0,338246.0
81224,403554855.0,513253.0
81129,10953265.0,0.0
80514,17455077.0,16325.0
80615,272626231.0,2650980.0
80741,589419746.0,3071613.0
80515,157013908.0,368974.0
80829,55830400.0,46993.0
80125,109118487.0,3801743.0
80220,13562573.0,0.0
81143,853395939.0,351197.0
80224,8155947.0,0.0
81526,134199630.0,1897599.0
81248,666918255.0,30778.0
80542,23222464.0,767121.0
80743,1202700878.0,55257.0
80827,625907809.0,12582453.0
81635,753553682.0,3266018.0
80138,163770333.0,163252.0
81023,326406896.0,274906.0
80634,96495292.0,271217.0
80023,45593279.0,538763.0
80419,258039.0,0.0
80426,344815727.0,1200832.0
80721,223730398.0,0.0
80206,6379350.0,0.0
80030,6832691.0,187610.0
80910,14985607.0,222162.0
Query:
-- Query 6: No correction needed
SELECT "geo_id", "area_land_meters", "area_water_meters"
FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08"
LIMIT 100
Answer:
geo_id,area_land_meters,area_water_meters
080010089011,6362241,566422
080010093251,1287314,2131
080010085451,729291,9265
080010085261,5303216,31690
080010085481,1244440,6215
080010092061,1295355,11050
080010081001,2695015,6599
080010085501,678027,12802
080010091031,1574941,14553
080010094101,1384324,6486
080010085341,858369,9035
080010096061,974868,439
080010602001,1167117,9865
080010094081,3815938,50182
080010150001,3188348,531379
080010085291,1273581,298340
080010085231,14822474,430315
080010600001,16531242,245190
080010085331,1199768,9570
080010085241,983834,30346
080010082001,918845,27621
080010096081,528151,132762
080010085061,438783,39928
080010085371,11972043,99634
080010093201,1269332,5472
080010085411,36314275,789287
080010088021,5813423,136378
080010085351,15324196,754192
080010097511,1880296,369396
080010084021,1730915904,17051819
080010086031,1862820,67422
080010083081,3109704,13394
080010094011,1690226,2680
080010085361,7255394,38685
080010085391,12476751,26960
080010085441,2608402,21323
080010085401,13074273,628800
080010612001,10613359,154585
080010092041,1259929,44618
080010083531,77606503,430605
080010086041,1502294,5539
080010085511,8739314,259101
080010084011,477831641,3437355
080010601001,3318758,261666
080010083091,10819573,22102
080019887001,67545120,1117152
080039600001,289292770,258623
080039601001,91868200,157940
080039602001,10166947,80646
080050056121,2564752,7516
080050056251,602718,6454
080050065011,1681545,54299
080050820001,1545434,22279
080050071061,163765074,80408
080050049511,157730,5724
080050862001,726327,866
080050056231,2485929,39887
080050056271,1189541,3101
080050068541,8440936,3138094
080050056241,1998744,2603
080050067051,5057809,31511
080050067121,2589155,2864
080050056201,426621,6148
080050858001,975972,517614
080050056221,3100537,83414
080050060001,1771406,51185
080050056211,1167421,19519
080050056111,1474530,2002
080050055521,1551589,62055
080050056191,2128913,447717
080050071031,165400293,461714
080050071011,192632341,1957401
080050067081,904463,2871
080050055531,1405887,147867
080050067041,1221300,5967
080050056361,5113457,19853
080079404001,607252571,10999693
080079742001,56162360,351699
080079743001,661107701,108251
080079744001,1339185197,677830
080099647001,661515845,4925063
080119667001,3376823501,37332795
080130128001,5790132,47409
080130609001,3333356,20572
080130130031,4229652,12579
080130127091,9706908,154534
080130132051,4192987,1911
080130125011,3197023,24163
080130127101,5033978,1042984
080130132011,58546097,3906167
080130132121,4262108,590332
080130127011,11132873,167940
080130129071,5205919,3037
080130137011,36367949,34929
080130614001,2634682,8890
080130132071,4497765,1058335
080130136021,231889483,997347
080130132101,1154080,27899
080130127071,15065957,3523622
080130132131,9723384,13066
Query:
-- Query 7: No correction needed
SELECT "geo_id", "internal_point_lat", "internal_point_lon"
FROM "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08"
LIMIT 100
Answer:
geo_id,internal_point_lat,internal_point_lon
080010089011,39.809069,-104.94656
080010093251,39.9039526,-105.0003533
080010085451,39.929704,-104.951255
080010085261,39.9487613,-104.9743823
080010085481,39.9253879,-104.9115056
080010092061,39.8812623,-104.9476403
080010081001,39.7466612,-104.8372242
080010085501,39.9111268,-104.9276615
080010091031,39.8796042,-104.9290526
080010094101,39.8787745,-105.0359483
080010085341,39.8959673,-104.9251715
080010096061,39.8223866,-105.0300046
080010602001,39.9247561,-104.9911464
080010094081,39.9091796,-105.0361172
080010150001,39.846683,-104.9508103
080010085291,39.9251409,-104.9531166
080010085231,39.9320194,-104.8302064
080010600001,39.9699792,-104.9640075
080010085331,39.8905907,-104.9470867
080010085241,39.9345346,-104.925421
080010082001,39.7586812,-104.8236326
080010096081,39.8166412,-105.0496947
080010085061,39.9109497,-104.9818068
080010085371,39.9106145,-104.8396108
080010093201,39.8542829,-105.0107306
080010085411,39.9777625,-104.8802348
080010088021,39.8608596,-104.8883156
080010085351,39.8938043,-104.8801138
080010097511,39.7983183,-105.0412999
080010084021,39.8772581,-104.0658666
080010086031,39.9926025,-104.8202075
080010083081,39.7629318,-104.8167416
080010094011,39.8464404,-105.026772
080010085361,39.9041827,-104.7947714
080010085391,39.8746752,-104.8206625
080010085441,39.9555985,-104.9537605
080010085401,39.9394959,-104.8910262
080010612001,39.9911848,-104.94997
080010092041,39.8838998,-104.968095
080010083531,39.7785643,-104.6847111
080010086041,39.9958411,-104.8058541
080010085511,39.9058627,-104.8996895
080010084011,39.869555,-104.5174306
080010601001,39.9492942,-105.0006416
080010083091,39.7591891,-104.7870038
080019887001,39.8353129,-104.8409337
080039600001,37.6567995,-105.9522431
080039601001,37.5388743,-105.914286
080039602001,37.4982906,-105.9156688
080050056121,39.6159029,-104.9684277
080050056251,39.5930685,-104.9834425
080050065011,39.6123447,-105.0191615
080050820001,39.7105075,-104.8030143
080050071061,39.6012893,-104.5738022
080050049511,39.6975484,-104.9300106
080050862001,39.6210447,-104.7490594
080050056231,39.5887514,-105.0272166
080050056271,39.5843145,-104.9495578
080050068541,39.6313485,-104.8638179
080050056241,39.585713,-104.9996187
080050067051,39.6378062,-104.9681018
080050067121,39.6176347,-104.9115205
080050056201,39.6230587,-105.0238944
080050858001,39.6358131,-104.7715859
080050056221,39.6013109,-105.0332729
080050060001,39.6467824,-105.0040851
080050056211,39.6038333,-105.044184
080050056111,39.6028206,-104.964366
080050055521,39.6477575,-105.0174566
080050056191,39.6181708,-105.0463678
080050071031,39.6880444,-104.5189211
080050071011,39.6879332,-104.3316961
080050067081,39.573987,-104.9185975
080050055531,39.6350107,-105.020282
080050067041,39.6464583,-104.9365194
080050056361,39.6186086,-104.9435393
080079404001,37.1111345,-107.3566967
080079742001,37.2731463,-107.1497672
080079743001,37.3220853,-107.2665636
080079744001,37.2009843,-106.7384504
080099647001,37.4204841,-102.4880544
080119667001,37.9269043,-103.0351028
080130128001,40.0263725,-105.1198967
080130609001,39.9813019,-105.1108598
080130130031,40.0105693,-105.1523386
080130127091,40.0579438,-105.1579995
080130132051,40.0955969,-105.1755981
080130125011,39.9901057,-105.2202002
080130127101,40.0086772,-105.1912533
080130132011,40.2307503,-105.1083
080130132121,40.1652759,-105.1472667
080130127011,40.1110164,-105.2283981
080130129071,40.0068802,-105.0656836
080130137011,40.0946642,-105.3248929
080130614001,39.9209698,-105.1567997
080130132071,40.1905286,-105.1535318
080130136021,40.1924374,-105.4166962
080130132101,40.1502409,-105.1083745
080130127071,40.033795,-105.198836
080130132131,40.1212737,-105.1743897
Query:
-- Query 8: No correction needed
SELECT "zip_code", "internal_point_lat", "internal_point_lon"
FROM "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES"
WHERE "state_code" = 'CO'
LIMIT 100
Answer:
zip_code,internal_point_lat,internal_point_lon
81123,37.3997311,-105.5718149
80737,40.8761403,-102.1779795
80237,39.6398707,-104.901711
81237,38.6030675,-106.6140515
80436,39.781044,-105.6402024
81050,37.9423538,-103.5151603
81043,38.1309477,-102.2209147
80103,39.7800102,-104.142596
80128,39.564053,-105.078838
80911,38.7529163,-104.7234774
81148,37.1718223,-105.9854148
81416,38.7520741,-108.1369587
80421,39.4609316,-105.5011988
81503,39.0299602,-108.4338772
81141,37.1622985,-105.8583377
80456,39.2483221,-105.5368488
80602,39.966162,-104.9088878
80705,40.2703264,-103.8294877
81091,37.1490904,-104.9647034
80293,39.7462533,-104.9899347
81029,37.0829091,-102.508878
80840,38.9946919,-104.8619476
81649,39.5302267,-106.2781625
80025,39.9398484,-105.2839419
80951,38.898118,-104.652428
80238,39.7715923,-104.8824004
80631,40.4428679,-104.6730721
80621,40.1072393,-104.8012902
81038,38.0792429,-103.1404196
81220,38.3082435,-107.480574
80219,39.6952933,-105.0356013
81020,37.5488542,-104.4910197
81007,38.3600416,-104.7731981
81655,39.7703573,-106.7731841
80727,40.0758287,-102.5109885
80525,40.5298611,-105.0366412
80117,39.3696118,-104.3429014
80443,39.5563891,-106.1702399
80754,40.7217546,-103.6654688
81428,38.9629875,-107.5995784
80434,40.8432515,-106.2867888
80131,39.4764403,-105.007544
80917,38.8861678,-104.7452638
80118,39.192431,-104.9052646
80427,39.7802888,-105.4949767
80757,39.7910269,-103.5831298
80864,38.6976664,-104.1867385
80033,39.7726754,-105.1048006
80420,39.3244006,-106.1161097
80301,40.0494681,-105.2014214
80938,38.9047619,-104.6633153
80126,39.540594,-104.9586396
80136,39.7919777,-104.2799287
81632,39.6292021,-106.6076332
81092,38.1938187,-102.7522464
80457,39.6482986,-105.290959
81611,39.1581733,-106.6686317
81155,38.28645,-106.0655169
80003,39.8254168,-105.0635606
80471,39.9352078,-105.4209125
81334,37.1461289,-108.6129503
81639,40.5069191,-107.2392298
80461,39.2317419,-106.3131574
80463,39.9705443,-106.7204875
80249,39.8547459,-104.695804
80290,39.7440923,-104.9867543
81415,38.6255118,-107.6275851
80720,40.0782522,-103.2198809
80111,39.6122715,-104.8778283
80824,39.6505749,-102.4987348
81230,38.3950649,-106.9536827
81236,38.6762575,-106.2637033
80929,38.8247103,-104.626967
81301,37.446857,-107.8557779
81331,37.4458683,-108.9072908
80121,39.6107024,-104.9490125
80810,38.8222875,-102.4287077
80832,39.0171771,-104.0128738
80828,39.327663,-103.747875
80425,39.3501549,-105.2055906
80209,39.7065813,-104.9657498
80534,40.3318627,-104.9374671
81653,40.9697543,-107.2271896
80202,39.7519076,-104.9976332
81024,37.2493543,-104.7347126
80222,39.6710192,-104.9278953
81650,39.7510374,-108.1137223
80303,39.9732218,-105.2092762
81233,38.4259741,-105.8248777
80423,39.8848239,-106.5867343
81411,38.2507316,-108.9801706
80815,39.3967208,-103.0634047
81087,37.3659002,-102.4090033
81623,39.2460271,-107.1629123
80480,40.6728876,-106.3415656
81621,39.402005,-106.8068244
80733,40.3713864,-103.4505354
81124,37.3062445,-106.1605883
81430,38.0227844,-108.0212965
81201,38.5548319,-106.0660381
Query:
-- Query 9: No correction needed
SELECT "zip_code", COUNT(*) AS "bank_count"
FROM "FDA"."FDIC_BANKS"."LOCATIONS"
WHERE "state" = 'CO'
GROUP BY "zip_code"
ORDER BY "bank_count" DESC
LIMIT 100
Answer:
zip_code,bank_count
80111,33
80202,31
80206,30
80501,30
80525,24
80112,24
80634,24
80903,24
80302,20
80920,18
80134,16
80537,15
81301,15
80012,14
80301,14
80601,13
81501,13
80524,13
80401,13
80020,12
80918,12
80222,12
80016,12
81401,11
81611,11
80226,11
80015,10
80021,10
80550,10
80538,10
80123,10
80211,10
80104,10
80122,10
81212,9
80234,9
80921,9
81003,9
80228,9
80124,9
81505,9
80011,9
80002,9
80906,9
81008,8
80013,8
80203,8
80126,8
81101,8
80439,8
81005,8
80229,8
80129,8
81321,8
80631,8
80127,8
80027,8
80022,8
81601,8
80487,8
80907,7
81416,7
80751,7
81147,7
80528,7
81620,7
81632,7
80233,7
80224,7
80909,7
80030,7
80108,7
80110,7
81082,7
80207,7
80227,7
80026,7
80246,6
80504,6
81050,6
80424,6
80014,6
80033,6
80521,6
81657,6
81623,6
80807,6
80915,6
81007,6
81052,6
80120,6
80231,6
80701,6
81621,6
80817,5
81521,5
80214,5
80249,5
80723,5
80516,5
Query:
-- Query 10: No correction needed
SELECT "institution_name", "branch_address", "zip_code"
FROM "FDA"."FDIC_BANKS"."LOCATIONS"
WHERE "state" = 'CO'
LIMIT 100
Answer:
Too long, hard cut:
institution_name,branch_address,zip_code
"Armed Forces Bank, National Association","6384 Wetzel Avenue, Building 1512",80913
The Huntington National Bank,9265 North Union Boulevard,80920
The Huntington National Bank,2930 South Academy Boulevard,80916
The Huntington National Bank,3290 Centennial Boulevard,80907
U.S. Bank National Association,1125 Garden Of The Gods Road,80907
U.S. Bank National Association,1520 Briargate Boulevard,80920
U.S. Bank National Association,6030 Stetson Hills Boulevard,80922
"Wells Fargo Bank, National Association",1800 South Nevada Avenue,80905
"Wells Fargo Bank, National Association",560 Garden Of The Gods Road,80907
Integrity Bank & Trust,1275 Village Ridge Pt,80132
"UMB Bank, National Association",502 Security Boulevard,80911
Adams Bank & Trust,"1359 Interquest Parkway, Suite 150",80921
ANB Bank,15 West Cimarron Street,80903
Independent Bank,155 Lake Avenue,80906
Independent Bank,501 South Tejon,80903
Independent Bank,"104 S. Cascade Avenue, Suite 2014",80903
The Central Trust Bank,5278 North Nevada Avenue Suite 100,80918
5Star Bank,"Peterson Air Force Base, 455 W. Paine St., Bldg. 1485",80914
"JPMorgan Chase Bank, National Association",7390 Duryea Drive,80923
"JPMorgan Chase Bank, National Association",7685 N Academy Blvd,80920
"JPMorgan Chase Bank, National Association",3750 Bloomington Street,80922
"JPMorgan Chase Bank, National Association",11555 Meridian Market View,80831
"JPMorgan Chase Bank, National Association",402 North Tejon Street,80903
"Wells Fargo Bank, National Association",8620 North Union Boulevard,80920
InBank,945 Tenderfoot Hill Road,80906
FirstBank,2790 Briargate Boulevard,80920
Kirkpatrick Bank,"102 North Cascade Avenue, Suite 100",80903
"JPMorgan Chase Bank, National Association",3306 Centennial Blvd.,80907
Bank of Colorado,El Paso County,80915
Bank of Colorado,1146 Interquest Parkway,80921
Bank of Colorado,4328 Edison Avenue,80915
KeyBank National Association,1521 South 8th Street,80906
KeyBank National Association,3085 S Academy Blvd,80916
"Zions Bancorporation, N.A.",7390 North Academy Boulevard,80920
"Zions Bancorporation, N.A.",111 South Tejon Street,80903
Independent Bank,440 Chapel Hills Drive,80920
U.S. Bank National Association,1415 North Academy Boulevard,80909
U.S. Bank National Association,6925 Mesa Ridge Parkway,80817
U.S. Bank National Association,2308 East Pikes Peak Avenue,80909
U.S. Bank National Association,1070 West Baptist Road,80921
The Huntington National Bank,2870 New Center Pt,80922
The Huntington National Bank,5470 E. Woodmen Road,80920
"Wells Fargo Bank, National Association",4151 North Academy Boulevard,80918
"Wells Fargo Bank, National Association",15844 Jackson Creek Parkway,80132
"Bank of America, National Association",7808 N Academy Blvd,80920
Pikes Peak National Bank,2401 W Colorado Ave,80904
Integrity Bank & Trust,5550 Powers Center Point,80920
The First National Bank of Las Animas,2768 Northgate Blvd,80921
Waypoint Bank,24 South Weber Street Suite 151,80903
"Academy Bank, National Association",3201 E.  Platte Avenue,80909
NBH Bank,"19 North Tejon, Ste 100",80903
5Star Bank,104 S Cascade Ave,80903
"UMB Bank, National Association",730 Citadel Drive East,80932
"UMB Bank, National Association",101 North Cascade Avenue,80903
ANB Bank,1130 North Circle Drive,80932
Farmers State Bank of Calhan,7025 Meridian Rd,80831
Farmers State Bank of Calhan,445 N Ellicott Hwy,80808
"Armed Forces Bank, National Association",Coleman And Linstrom Streets,80913
The Huntington National Bank,3175 East Platte Avenue,80909
The Huntington National Bank,7239 N. Academy Boulevard,80920
Bank of Colorado,421 North Tejon Street,80903
"Wells Fargo Bank, National Association",5710 Constitution Avenue,80915
"Wells Fargo Bank, National Association",9649 Prominent Point,80924
"Wells Fargo Bank, National Association",90 South Cascade Avenue,80903
Integrity Bank & Trust,13475 Voyager Parkway,80921
U.S. Bank National Association,815 Cheyenne Meadows Road,80906
U.S. Bank National Association,7655 Mclaughlin Road,80831
"Bank of America, National Association",5737 Barnes Road,80917
Pikes Peak National Bank,6615 Camden Boulevard,80817
American Bank of Commerce,434 S. Tejon,80903
FirstBank,"2 North Cascade Avenue, Suite 130",80903
5Star Bank,3992 E. Bijou St,80909
"JPMorgan Chase Bank, National Association","1274 Interquest Pkwy, Ste 100",80921
The State Bank,7495  Mclaughlin Road,80831
"Academy Bank, National Association",8250 Razorback Road,80920
"Academy Bank, National Association",2835 Briargate Blvd,80920
"Academy Bank, National Association",1650 Space Center Drive,80915
NBH Bank,5175 North Academy Boulevard,80918
Herring Bank,3110 N. Nevada,80907
Herring Bank,3110 North Nevada Avenue,80933
"PNC Bank, National Association",2805 Dublin Boulevard,80918
First Interstate Bank,"121 South Tejon Street, Ste 110",80903
The Huntington National Bank,4330 N Academy Blvd,80918
"Wells Fargo Bank, National Association",5190 North Academy Boulevard,80918
"Wells Fargo Bank, Natio
End Exploring Related Columns
Task: Which Colorado zip code has the highest concentration of bank locations per block group, based on the overlap between zip codes and block groups?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
Zip_Code,Bank_Locations_per_Block_Group
zip_code:str,bank_locations_per_block_group:float
(Attention: answer in one row)
```

This result represents the Colorado zip code that has the highest concentration of bank locations per block group, calculated based on the overlap between zip code areas and census block groups..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'FDA': {'CENSUS_UTILITY': ['FIPS_CLASS_CODE', 'FIPS_CODES_ALL', 'FIPS_CODES_STATES', 'FUNCTIONAL_STATUS_CODES', 'LSAD_CODES', 'MTFCC_FEATURE_CLASS_CODES'], 'FDA_FOOD': ['FOOD_ENFORCEMENT', 'FOOD_EVENTS'], 'FDIC_BANKS': ['INSTITUTIONS', 'LOCATIONS'], 'GEO_CENSUS_BLOCKGROUPS': ['BLOCKGROUPS_01', 'BLOCKGROUPS_02', 'BLOCKGROUPS_04', 'BLOCKGROUPS_05', 'BLOCKGROUPS_06', 'BLOCKGROUPS_08', 'BLOCKGROUPS_09', 'BLOCKGROUPS_10', 'BLOCKGROUPS_11', 'BLOCKGROUPS_12', 'BLOCKGROUPS_13', 'BLOCKGROUPS_15', 'BLOCKGROUPS_16', 'BLOCKGROUPS_17', 'BLOCKGROUPS_18', 'BLOCKGROUPS_19', 'BLOCKGROUPS_20', 'BLOCKGROUPS_21', 'BLOCKGROUPS_22', 'BLOCKGROUPS_23', 'BLOCKGROUPS_24', 'BLOCKGROUPS_25', 'BLOCKGROUPS_26', 'BLOCKGROUPS_27', 'BLOCKGROUPS_28', 'BLOCKGROUPS_29', 'BLOCKGROUPS_30', 'BLOCKGROUPS_31', 'BLOCKGROUPS_32', 'BLOCKGROUPS_33', 'BLOCKGROUPS_34', 'BLOCKGROUPS_35', 'BLOCKGROUPS_36', 'BLOCKGROUPS_37', 'BLOCKGROUPS_38', 'BLOCKGROUPS_39', 'BLOCKGROUPS_40', 'BLOCKGROUPS_41', 'BLOCKGROUPS_42', 'BLOCKGROUPS_44', 'BLOCKGROUPS_45', 'BLOCKGROUPS_46', 'BLOCKGROUPS_47', 'BLOCKGROUPS_48', 'BLOCKGROUPS_49', 'BLOCKGROUPS_50', 'BLOCKGROUPS_51', 'BLOCKGROUPS_53', 'BLOCKGROUPS_54', 'BLOCKGROUPS_55', 'BLOCKGROUPS_56', 'BLOCKGROUPS_60', 'BLOCKGROUPS_66', 'BLOCKGROUPS_69', 'BLOCKGROUPS_72', 'BLOCKGROUPS_78', 'US_BLOCKGROUPS_NATIONAL'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'ADJACENT_STATES', 'CBSA', 'CNECTA', 'COASTLINE', 'CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116', 'COUNTIES', 'CSA', 'METROPOLITAN_DIVISIONS', 'NATIONAL_OUTLINE', 'NWS_FORECAST_REGIONS', 'RAILWAYS', 'STATES', 'URBAN_AREAS', 'ZIP_CODES']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-21 09:18:42 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:18:42 - root - INFO - ```sql
WITH bank_counts AS (
  SELECT 
    "zip_code", 
    COUNT(*) AS "bank_count"
  FROM 
    "FDA"."FDIC_BANKS"."LOCATIONS"
  WHERE 
    "state" = 'CO'
  GROUP BY 
    "zip_code"
),
blockgroup_counts AS (
  SELECT 
    zc."zip_code",
    COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
  FROM
    "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
  INNER JOIN
    "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
    ON ST_INTERSECTS(
      ST_GEOGFROMWKB(zc."zip_code_geom"),
      ST_GEOGFROMWKB(bg."blockgroup_geom")
    )
  WHERE
    zc."state_code" = 'CO'
  GROUP BY
    zc."zip_code"
)
SELECT
  bc."zip_code",
  (bc."bank_count" / bgc."blockgroup_count") AS "bank_locations_per_block_group"
FROM
  bank_counts bc
JOIN
  blockgroup_counts bgc
ON
  bc."zip_code" = bgc."zip_code"
ORDER BY
  "bank_locations_per_block_group" DESC
LIMIT 1;
```
2025-01-21 09:18:42 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:18:42 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:18:42 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:18:45 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-21 09:18:45 - snowflake.connector.connection - INFO - closed
2025-01-21 09:18:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:18:46 - root - INFO - itercount: 1
2025-01-21 09:18:46 - root - INFO - 0
2025-01-21 09:18:46 - root - INFO - results: 
zip_code,bank_locations_per_block_group
80202,1.631579


2025-01-21 09:18:46 - root - INFO - Please check the answer again by reviewing Which Colorado zip code has the highest concentration of bank locations per block group, based on the overlap between zip codes and block groups?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
Zip_Code,Bank_Locations_per_Block_Group
zip_code:str,bank_locations_per_block_group:float
(Attention: answer in one row)
```

This result represents the Colorado zip code that has the highest concentration of bank locations per block group, calculated based on the overlap between zip code areas and census block groups. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
zip_code,bank_locations_per_block_group
80202,1.631579
Current sql:
WITH bank_counts AS (
  SELECT 
    "zip_code", 
    COUNT(*) AS "bank_count"
  FROM 
    "FDA"."FDIC_BANKS"."LOCATIONS"
  WHERE 
    "state" = 'CO'
  GROUP BY 
    "zip_code"
),
blockgroup_counts AS (
  SELECT 
    zc."zip_code",
    COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
  FROM
    "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
  INNER JOIN
    "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
    ON ST_INTERSECTS(
      ST_GEOGFROMWKB(zc."zip_code_geom"),
      ST_GEOGFROMWKB(bg."blockgroup_geom")
    )
  WHERE
    zc."state_code" = 'CO'
  GROUP BY
    zc."zip_code"
)
SELECT
  bc."zip_code",
  (bc."bank_count" / bgc."blockgroup_count") AS "bank_locations_per_block_group"
FROM
  bank_counts bc
JOIN
  blockgroup_counts bgc
ON
  bc."zip_code" = bgc."zip_code"
ORDER BY
  "bank_locations_per_block_group" DESC
LIMIT 1;When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-21 09:19:24 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-21 09:19:24 - root - INFO - ```sql
WITH bank_counts AS (
  SELECT 
    "zip_code", 
    COUNT(*) AS "bank_count"
  FROM 
    "FDA"."FDIC_BANKS"."LOCATIONS"
  WHERE 
    "state" = 'CO'
  GROUP BY 
    "zip_code"
),
blockgroup_counts AS (
  SELECT 
    zc."zip_code",
    COUNT(DISTINCT bg."geo_id") AS "blockgroup_count"
  FROM
    "FDA"."GEO_US_BOUNDARIES"."ZIP_CODES" zc
  INNER JOIN
    "FDA"."GEO_CENSUS_BLOCKGROUPS"."BLOCKGROUPS_08" bg
    ON ST_INTERSECTS(
      ST_GEOGFROMWKB(zc."zip_code_geom"),
      ST_GEOGFROMWKB(bg."blockgroup_geom")
    )
  WHERE
    zc."state_code" = 'CO'
  GROUP BY
    zc."zip_code"
)
SELECT
  bc."zip_code",
  ROUND(bc."bank_count" / bgc."blockgroup_count", 4) AS "bank_locations_per_block_group"
FROM
  bank_counts bc
JOIN
  blockgroup_counts bgc
ON
  bc."zip_code" = bgc."zip_code"
ORDER BY
  "bank_locations_per_block_group" DESC NULLS LAST
LIMIT 1;
```
2025-01-21 09:19:24 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.38-x86_64-with-glibc2.31
2025-01-21 09:19:24 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-21 09:19:24 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-21 09:19:28 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-21 09:19:28 - snowflake.connector.connection - INFO - closed
2025-01-21 09:19:28 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-21 09:19:28 - root - INFO - itercount: 2
2025-01-21 09:19:28 - root - INFO - 0
2025-01-21 09:19:28 - root - INFO - Total iteration counts: 2
