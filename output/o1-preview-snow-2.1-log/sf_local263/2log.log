2025-01-24 18:39:30 - openai._base_client - INFO - Retrying request to /chat/completions in 0.433693 seconds
2025-01-24 18:41:32 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 18:41:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 18:41:33 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:34 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:34 - root - INFO - SQL:
SELECT *
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   LIMIT 100;
Results:
name,version,step,model,train_score,test_score
iris,1,1,DTCG,0.96,0.66
iris,1,1,DTCE,0.96,0.74
iris,1,1,RFCG,0.96,0.74
iris,1,1,RFCE,0.96,0.74
iris,1,1,ABC,0.74,0.74
iris,1,1,LOGRL,0.79,0.82
iris,1,1,LOGRS,0.79,0.82
iris,1,1,LOGRLCV,0.78,0.78
iris,1,1,LOGRSCV,0.78,0.78
iris,1,1,MLPC1,0.21,0.18
iris,1,1,MLPC2,0.34,0.32
iris,1,1,KNCU,0.85,0.78
iris,1,1,KNCD,0.96,0.74
iris,1,1,Stack,0.79,0.78
iris,1,2,ABC,0.74,0.74
iris,1,2,LOGRL,0.79,0.82
iris,1,2,LOGRS,0.79,0.82
iris,1,2,KNCU,0.85,0.78
iris,1,2,KNCD,0.96,0.74
iris,1,2,Stack,0.81,0.8
iris,1,3,ABC,0.74,0.74
iris,1,3,LOGRL,0.79,0.82
iris,1,3,LOGRS,0.79,0.82
iris,1,3,KNCU,0.85,0.78
iris,1,3,KNCD,0.96,0.74
iris,1,3,Stack,0.81,0.8
iris,2,1,DTCG,0.96,0.66
iris,2,1,DTCE,0.96,0.74
iris,2,1,RFCG,0.96,0.74
iris,2,1,RFCE,0.96,0.74
iris,2,1,ABC,0.74,0.74
iris,2,1,LOGRL,0.79,0.82
iris,2,1,LOGRS,0.79,0.82
iris,2,1,LOGRLCV,0.78,0.78
iris,2,1,LOGRSCV,0.78,0.78
iris,2,1,MLPC1,0.21,0.18
iris,2,1,MLPC2,0.34,0.32
iris,2,1,KNCU,0.85,0.78
iris,2,1,KNCD,0.96,0.74
iris,2,1,Stack,0.79,0.78
iris,2,2,ABC,0.74,0.74
iris,2,2,LOGRS,0.79,0.82
iris,2,2,Stack,0.82,0.8
iris,2,3,ABC,0.74,0.74
iris,2,3,LOGRS,0.79,0.82
iris,2,3,Stack,0.82,0.8
iris,3,1,DTCG,0.96,0.66
iris,3,1,DTCE,0.96,0.74
iris,3,1,RFCG,0.96,0.74
iris,3,1,RFCE,0.96,0.74
iris,3,1,ABC,0.74,0.74
iris,3,1,LOGRL,0.79,0.82
iris,3,1,LOGRLCV,0.78,0.78
iris,3,1,MLPC1,0.21,0.18
iris,3,1,MLPC2,0.34,0.32
iris,3,1,KNCU,0.85,0.78
iris,3,1,KNCD,0.96,0.74
iris,3,1,Stack,0.8,0.78
iris,3,2,ABC,0.74,0.74
iris,3,2,LOGRL,0.79,0.82
iris,3,2,Stack,0.82,0.8
iris,3,3,ABC,0.74,0.74
iris,3,3,LOGRL,0.79,0.82
iris,3,3,Stack,0.82,0.8
concrete,1,1,GPRQ,0.941564586755376,0.8645246650525136
concrete,1,1,DTRF,0.9967293997009053,0.7730221399127792
concrete,1,1,DTRA,0.9967293997009053,0.750903499864533
concrete,1,1,DTRP,0.9967293997009053,0.7667845100320249
concrete,1,1,RFRS,0.9842454230229145,0.8542442968763078
concrete,1,1,RFRA,0.9820925643636313,0.8530848503734989
concrete,1,1,RFRP,0.9836664767304603,0.8468371056049129
concrete,1,1,ABR,0.7346194026325938,0.5501433922826775
concrete,1,1,HGBR,0.9742544377623932,0.8884068368127706
concrete,1,1,MLPR1,0.7060758211423152,0.6172737606465106
concrete,1,1,KNRU,0.7456425827094404,0.5161682780869268
concrete,1,1,KNRD,0.9967293997009053,0.6291811573603894
concrete,1,1,Stack,0.9398935764539665,0.7491240941067063
concrete,1,2,GPRQ,0.941564586755376,0.8645246650525136
concrete,1,2,DTRF,0.9967293997009053,0.7730221399127792
concrete,1,2,DTRA,0.9967293997009053,0.750903499864533
concrete,1,2,RFRP,0.9836664767304603,0.8468371056049129
concrete,1,2,HGBR,0.9742544377623932,0.8884068368127706
concrete,1,2,Stack,0.9360275819177686,0.7478259090713758
concrete,1,3,GPRQ,0.9858772820161913,-7.09267714466483
concrete,1,3,DTRF,0.9951640513131715,0.7897656878487402
concrete,1,3,DTRA,0.9950724249564536,0.7678098487937882
concrete,1,3,RFRP,0.982546336539216,0.8620411609279719
concrete,1,3,HGBR,0.9631886037718241,0.8885222604143914
concrete,1,3,Stack,0.9770427190401804,0.8952049262695958
concrete,2,1,GPRQ,0.941564586755376,0.8645246650525136
concrete,2,1,DTRF,0.9967293997009053,0.7730221399127792
concrete,2,1,DTRA,0.9967293997009053,0.750903499864533
concrete,2,1,DTRP,0.9967293997009053,0.7667845100320249
concrete,2,1,RFRS,0.9842454230229145,0.8542442968763078
concrete,2,1,RFRA,0.9820925643636313,0.8530848503734989
concrete,2,1,RFRP,0.9836664767304603,0.8468371056049129
concrete,2,1,ABR,0.7346194026325938,0.5501433922826775
concrete,2,1,HGBR,0.9742544377623932,0.8884068368127706
concrete,2,1,MLPR1,0.7060758211423152,0.6172737606465106
concrete,2,1,KNRU,0.7456425827094404,0.5161682780869268

2025-01-24 18:41:34 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:34 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:34 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:35 - snowflake.connector.cursor - INFO - Number of results in first chunk: 46
2025-01-24 18:41:35 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:35 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:36 - root - INFO - SQL:
SELECT DISTINCT "model"
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   LIMIT 100;
Results:
model
DTCG
DTCE
RFCG
RFCE
ABC
LOGRS
LOGRLCV
LOGRSCV
MLPC1
MLPC2
KNCU
KNCD
DTRF
RFRS
ABR
HGBR
MLPR1
KNRU
GPCQ
HGBC
GNB
ELNE
ELNECV
Stack
GPRQ
RFRA
KNRD
GPCL
GPRL
LINR
MLPR2
SGDCH
SGDCLL
SVCL
SVCG
LOGRL
DTRP
RFRP
GPCR
GPRR
DTRA
SGDCMH
SVCP
SVCS
KERC
KERR

2025-01-24 18:41:36 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:36 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:36 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:37 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 18:41:37 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:37 - root - INFO - SQL:
SELECT "name", "version", "step", "test_score"
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   WHERE "model" = 'Stack'
   LIMIT 100;
Results:
name,version,step,test_score
iris,1,1,0.78
iris,1,2,0.8
iris,1,3,0.8
iris,2,1,0.78
iris,2,2,0.8
iris,2,3,0.8
iris,3,1,0.78
iris,3,2,0.8
iris,3,3,0.8
concrete,1,1,0.7491240941067063
concrete,1,2,0.7478259090713758
concrete,1,3,0.8952049262695958
concrete,2,1,0.7491240941067063
concrete,2,2,0.5153723438701945
concrete,2,3,0.7550913523238763
concrete,3,1,0.7491240941067063
concrete,3,2,0.6204357065145107
concrete,3,3,0.7624137560765165
concrete,4,1,0.7418636266993917
concrete,4,2,0.7943036798259414
concrete,4,3,0.7999917844923515
concrete,5,1,0.7418636266993917
concrete,5,2,0.8280251862560624
concrete,5,3,0.6465132269043822
iris,4,1,0.8
iris,4,2,0.74
iris,4,3,0.74
iris,5,1,0.8
iris,5,2,0.72
iris,5,3,0.72
Delaney solubility,1,1,0.8603318218230251
Delaney solubility,1,2,0.8709068763294372
Delaney solubility,1,3,0.8709068763294372
Delaney solubility,2,1,0.8603318218230251
Delaney solubility,2,2,0.8676115461542331
Delaney solubility,2,3,0.8676115461542331
Delaney solubility,3,1,0.7361578456024362
Delaney solubility,3,2,0.7688278804396981
Delaney solubility,3,3,0.7688278804396981
Delaney solubility,4,1,0.7361578456024362
Delaney solubility,4,2,0.7370747785614673
Delaney solubility,4,3,0.7370747785614673
Critical Heat Flux,1,1,0.8767667331999809
Critical Heat Flux,1,2,0.8860441283949297
Critical Heat Flux,1,3,0.8913847510635327
Critical Heat Flux,2,1,0.8767667331999809
Critical Heat Flux,2,2,0.8906124602518019
Critical Heat Flux,2,3,0.896051215319373
Critical Heat Flux,3,1,0.8470847778663093
Critical Heat Flux,3,2,0.8580739277704147
Critical Heat Flux,3,3,0.820001186352687
Critical Heat Flux,4,1,0.8470847778663093
Critical Heat Flux,4,2,0.8212042575388446
Critical Heat Flux,4,3,0.8249690699279786
Liver disease prediction,1,1,0.7696969696969697
Liver disease prediction,1,2,0.7636363636363637
Liver disease prediction,1,3,0.8
Liver disease prediction,2,1,0.8121212121212121
Liver disease prediction,2,2,0.8181818181818182
Liver disease prediction,2,3,0.8787878787878788
Liver disease prediction,3,1,0.793939393939394
Liver disease prediction,3,2,0.793939393939394
Liver disease prediction,3,3,0.7757575757575758
Liver disease prediction,4,1,0.8424242424242424
Liver disease prediction,4,2,0.8606060606060606
Liver disease prediction,4,3,0.8484848484848485
Liver disease prediction,5,1,0.8121212121212121
Liver disease prediction,5,2,0.9090909090909091
Liver disease prediction,5,3,0.8545454545454545
Pumpkin Seeds,1,1,0.8812121212121212
Pumpkin Seeds,1,2,0.8751515151515151
Pumpkin Seeds,1,3,0.8751515151515151
Pumpkin Seeds,2,1,0.8812121212121212
Pumpkin Seeds,2,2,0.8751515151515151
Pumpkin Seeds,2,3,0.8751515151515151
Pumpkin Seeds,3,1,0.7927272727272727
Pumpkin Seeds,3,2,0.806060606060606
Pumpkin Seeds,3,3,0.806060606060606
Pumpkin Seeds,4,1,0.7927272727272727
Pumpkin Seeds,4,2,0.8315151515151515
Pumpkin Seeds,4,3,0.7927272727272727
water quality,1,1,0.9545454545454546
water quality,1,2,0.9628099173553719
water quality,1,3,0.9421875
water quality,2,1,0.9545454545454546
water quality,2,2,0.9628099173553719
water quality,2,3,0.9615076182838813
water quality,3,1,0.9545454545454546
water quality,3,2,0.9628099173553719
water quality,3,3,0.9626926196269262
lithium ion batteries,1,1,1.0
lithium ion batteries,1,2,1.0
lithium ion batteries,1,3,0.9642857142857143
lithium ion batteries,2,1,0.9821428571428571
lithium ion batteries,2,2,0.9553571428571429
lithium ion batteries,2,3,0.9732142857142857
lithium ion batteries,3,1,1.0
lithium ion batteries,3,2,0.9732142857142857
lithium ion batteries,3,3,1.0
diabetes,1,1,0.7677165354330708

2025-01-24 18:41:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:39 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 18:41:39 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:39 - root - INFO - SQL:
SELECT "name", "version", "step", "model", "test_score"
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   WHERE "model" != 'Stack'
   LIMIT 100;
Results:
name,version,step,model,test_score
iris,1,1,DTCG,0.66
iris,1,1,DTCE,0.74
iris,1,1,RFCG,0.74
iris,1,1,RFCE,0.74
iris,1,1,ABC,0.74
iris,1,1,LOGRL,0.82
iris,1,1,LOGRS,0.82
iris,1,1,LOGRLCV,0.78
iris,1,1,LOGRSCV,0.78
iris,1,1,MLPC1,0.18
iris,1,1,MLPC2,0.32
iris,1,1,KNCU,0.78
iris,1,1,KNCD,0.74
iris,1,2,ABC,0.74
iris,1,2,LOGRL,0.82
iris,1,2,LOGRS,0.82
iris,1,2,KNCU,0.78
iris,1,2,KNCD,0.74
iris,1,3,ABC,0.74
iris,1,3,LOGRL,0.82
iris,1,3,LOGRS,0.82
iris,1,3,KNCU,0.78
iris,1,3,KNCD,0.74
iris,2,1,DTCG,0.66
iris,2,1,DTCE,0.74
iris,2,1,RFCG,0.74
iris,2,1,RFCE,0.74
iris,2,1,ABC,0.74
iris,2,1,LOGRL,0.82
iris,2,1,LOGRS,0.82
iris,2,1,LOGRLCV,0.78
iris,2,1,LOGRSCV,0.78
iris,2,1,MLPC1,0.18
iris,2,1,MLPC2,0.32
iris,2,1,KNCU,0.78
iris,2,1,KNCD,0.74
iris,2,2,ABC,0.74
iris,2,2,LOGRS,0.82
iris,2,3,ABC,0.74
iris,2,3,LOGRS,0.82
iris,3,1,DTCG,0.66
iris,3,1,DTCE,0.74
iris,3,1,RFCG,0.74
iris,3,1,RFCE,0.74
iris,3,1,ABC,0.74
iris,3,1,LOGRL,0.82
iris,3,1,LOGRLCV,0.78
iris,3,1,MLPC1,0.18
iris,3,1,MLPC2,0.32
iris,3,1,KNCU,0.78
iris,3,1,KNCD,0.74
iris,3,2,ABC,0.74
iris,3,2,LOGRL,0.82
iris,3,3,ABC,0.74
iris,3,3,LOGRL,0.82
concrete,1,1,GPRQ,0.8645246650525136
concrete,1,1,DTRF,0.7730221399127792
concrete,1,1,DTRA,0.750903499864533
concrete,1,1,DTRP,0.7667845100320249
concrete,1,1,RFRS,0.8542442968763078
concrete,1,1,RFRA,0.8530848503734989
concrete,1,1,RFRP,0.8468371056049129
concrete,1,1,ABR,0.5501433922826775
concrete,1,1,HGBR,0.8884068368127706
concrete,1,1,MLPR1,0.6172737606465106
concrete,1,1,KNRU,0.5161682780869268
concrete,1,1,KNRD,0.6291811573603894
concrete,1,2,GPRQ,0.8645246650525136
concrete,1,2,DTRF,0.7730221399127792
concrete,1,2,DTRA,0.750903499864533
concrete,1,2,RFRP,0.8468371056049129
concrete,1,2,HGBR,0.8884068368127706
concrete,1,3,GPRQ,-7.09267714466483
concrete,1,3,DTRF,0.7897656878487402
concrete,1,3,DTRA,0.7678098487937882
concrete,1,3,RFRP,0.8620411609279719
concrete,1,3,HGBR,0.8885222604143914
concrete,2,1,GPRQ,0.8645246650525136
concrete,2,1,DTRF,0.7730221399127792
concrete,2,1,DTRA,0.750903499864533
concrete,2,1,DTRP,0.7667845100320249
concrete,2,1,RFRS,0.8542442968763078
concrete,2,1,RFRA,0.8530848503734989
concrete,2,1,RFRP,0.8468371056049129
concrete,2,1,ABR,0.5501433922826775
concrete,2,1,HGBR,0.8884068368127706
concrete,2,1,MLPR1,0.6172737606465106
concrete,2,1,KNRU,0.5161682780869268
concrete,2,1,KNRD,0.6291811573603894
concrete,2,2,GPRQ,0.8645246650525136
concrete,2,2,RFRP,0.8468371056049129
concrete,2,2,HGBR,0.8884068368127706
concrete,2,3,GPRQ,-6.162223676037567
concrete,2,3,RFRP,0.7294831008781688
concrete,2,3,HGBR,0.754951518145837
concrete,3,1,GPRQ,0.8645246650525136
concrete,3,1,DTRF,0.7730221399127792
concrete,3,1,DTRA,0.750903499864533
concrete,3,1,DTRP,0.7667845100320249
concrete,3,1,RFRS,0.8542442968763078

2025-01-24 18:41:39 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:39 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:39 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:41 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 18:41:41 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:41 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:41 - root - INFO - SQL:
SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   WHERE "model" != 'Stack'
   GROUP BY "name", "version", "step"
   LIMIT 100;
Results:
name,version,step,max_non_stack_test_score
iris,1,1,0.82
iris,1,2,0.82
iris,1,3,0.82
iris,2,1,0.82
iris,2,2,0.82
iris,2,3,0.82
iris,3,1,0.82
iris,3,2,0.82
iris,3,3,0.82
concrete,1,1,0.8884068368127706
concrete,1,3,0.8885222604143914
concrete,2,1,0.8884068368127706
concrete,2,2,0.8884068368127706
concrete,2,3,0.754951518145837
concrete,3,1,0.8884068368127706
concrete,3,2,0.8884068368127706
concrete,4,2,0.8884068368127706
concrete,4,3,0.8885222604143914
concrete,5,3,0.754951518145837
iris,4,2,0.78
iris,5,2,0.74
concrete,3,3,0.754951518145837
concrete,5,2,0.8884068368127706
Delaney solubility,1,1,0.8498776981484352
Delaney solubility,2,3,0.8498776981484352
Delaney solubility,3,2,0.8498776981484352
Delaney solubility,3,3,0.8498776981484352
Delaney solubility,4,3,0.8438965054489642
Critical Heat Flux,1,3,0.8868161892955251
Critical Heat Flux,3,1,0.8836410197441006
Critical Heat Flux,3,3,0.8868161892955251
Critical Heat Flux,4,1,0.8836410197441006
Critical Heat Flux,4,2,0.8836410197441006
Liver disease prediction,1,1,0.8121212121212121
Liver disease prediction,2,1,0.8666666666666667
Liver disease prediction,4,1,0.8727272727272727
Liver disease prediction,4,3,0.8666666666666667
Liver disease prediction,5,1,0.9212121212121213
Pumpkin Seeds,1,3,0.8848484848484849
Pumpkin Seeds,3,1,0.8848484848484849
Pumpkin Seeds,4,1,0.8848484848484849
Pumpkin Seeds,4,2,0.8812121212121212
Pumpkin Seeds,4,3,0.8666666666666667
water quality,1,3,0.94453125
water quality,2,3,0.9615076182838813
Critical Heat Flux,4,3,0.8868161892955251
Liver disease prediction,3,2,0.8424242424242424
Pumpkin Seeds,1,2,0.8848484848484849
Pumpkin Seeds,3,3,0.8812121212121212
water quality,2,1,0.9652892561983472
lithium ion batteries,1,2,1.0
lithium ion batteries,2,2,1.0
diabetes,2,1,0.7598425196850394
diabetes,3,2,0.7598425196850394
diabetes,3,3,0.7677165354330708
Franck-Hertz,3,3,0.46929699248120293
Franck-Hertz,4,2,0.46929699248120293
Franck-Hertz,4,3,0.46929699248120293
Franck-Hertz,5,1,0.46929699248120293
Tunnel diode,3,1,0.941733622559653
oil spill,2,3,0.9862068965517241
Tunnel diode,4,2,0.9103733110925771
survey lung cancer,3,1,0.9862068965517241
PSS3E5,1,1,0.6142270861833106
concrete,5,1,0.8884068368127706
iris,4,3,0.78
iris,5,1,0.82
iris,5,3,0.74
Delaney solubility,1,3,0.8498776981484352
concrete,4,1,0.8884068368127706
iris,4,1,0.82
Delaney solubility,1,2,0.8498776981484352
Delaney solubility,2,2,0.8498776981484352
Delaney solubility,3,1,0.8498776981484352
Delaney solubility,4,1,0.8498776981484352
Delaney solubility,4,2,0.8438965054489642
Critical Heat Flux,1,1,0.8836410197441006
Critical Heat Flux,1,2,0.8836410197441006
Critical Heat Flux,2,1,0.8836410197441006
Critical Heat Flux,2,3,0.8868161892955251
Critical Heat Flux,3,2,0.8836410197441006
Liver disease prediction,1,2,0.8121212121212121
Liver disease prediction,1,3,0.8303030303030303
Liver disease prediction,2,2,0.8666666666666667
Liver disease prediction,5,3,0.8909090909090909
Pumpkin Seeds,2,1,0.8848484848484849
Pumpkin Seeds,3,2,0.8812121212121212
water quality,1,1,0.9652892561983472
Liver disease prediction,2,3,0.8666666666666667
Liver disease prediction,3,3,0.8121212121212121
Pumpkin Seeds,2,3,0.8812121212121212
water quality,1,2,0.9652892561983472
water quality,2,2,0.9652892561983472
Pumpkin Seeds,1,1,0.8848484848484849
water quality,3,3,0.9651257096512571
lithium ion batteries,1,1,1.0
lithium ion batteries,1,3,1.0
lithium ion batteries,2,3,1.0
lithium ion batteries,3,3,1.0
diabetes,1,1,0.7598425196850394

2025-01-24 18:41:41 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:41 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:41 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:42 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 18:41:42 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:43 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:43 - root - INFO - SQL:
SELECT s."name", s."version", s."step", s."test_score" AS "stack_test_score", n."max_non_stack_test_score"
   FROM "STACKING"."STACKING"."MODEL_SCORE" s
   INNER JOIN (
       SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
       FROM "STACKING"."STACKING"."MODEL_SCORE"
       WHERE "model" != 'Stack'
       GROUP BY "name", "version", "step"
   ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
   WHERE s."model" = 'Stack'
   LIMIT 100;
Results:
Too long, hard cut:
name,version,step,stack_test_score,max_non_stack_test_score
iris,1,1,0.78,0.82
iris,1,2,0.8,0.82
iris,1,3,0.8,0.82
iris,2,1,0.78,0.82
iris,2,3,0.8,0.82
iris,3,1,0.78,0.82
iris,3,2,0.8,0.82
iris,3,3,0.8,0.82
concrete,1,2,0.7478259090713758,0.8884068368127706
concrete,1,3,0.8952049262695958,0.8885222604143914
concrete,2,1,0.7491240941067063,0.8884068368127706
concrete,2,3,0.7550913523238763,0.754951518145837
concrete,3,2,0.6204357065145107,0.8884068368127706
concrete,3,3,0.7624137560765165,0.754951518145837
concrete,4,2,0.7943036798259414,0.8884068368127706
concrete,4,3,0.7999917844923515,0.8885222604143914
concrete,5,1,0.7418636266993917,0.8884068368127706
concrete,5,2,0.8280251862560624,0.8884068368127706
iris,4,1,0.8,0.82
Delaney solubility,1,2,0.8709068763294372,0.8498776981484352
concrete,2,2,0.5153723438701945,0.8884068368127706
iris,4,2,0.74,0.78
iris,4,3,0.74,0.78
iris,5,1,0.8,0.82
iris,5,2,0.72,0.74
iris,5,3,0.72,0.74
Delaney solubility,1,1,0.8603318218230251,0.8498776981484352
Delaney solubility,2,1,0.8603318218230251,0.8498776981484352
Delaney solubility,2,3,0.8676115461542331,0.8498776981484352
Delaney solubility,3,2,0.7688278804396981,0.8498776981484352
Delaney solubility,4,2,0.7370747785614673,0.8438965054489642
Critical Heat Flux,1,2,0.8860441283949297,0.8836410197441006
Critical Heat Flux,2,3,0.896051215319373,0.8868161892955251
Critical Heat Flux,3,2,0.8580739277704147,0.8836410197441006
Critical Heat Flux,3,3,0.820001186352687,0.8868161892955251
Liver disease prediction,1,3,0.8,0.8303030303030303
Liver disease prediction,2,3,0.8787878787878788,0.8666666666666667
Liver disease prediction,3,3,0.7757575757575758,0.8121212121212121
Pumpkin Seeds,1,3,0.8751515151515151,0.8848484848484849
Pumpkin Seeds,3,1,0.7927272727272727,0.8848484848484849
Critical Heat Flux,4,2,0.8212042575388446,0.8836410197441006
Liver disease prediction,5,3,0.8545454545454545,0.8909090909090909
Liver disease prediction,1,1,0.7696969696969697,0.8121212121212121
lithium ion batteries,3,3,1.0,1.0
diabetes,2,1,0.7677165354330708,0.7598425196850394
diabetes,4,3,0.65748031496063,0.7677165354330708
Franck-Hertz,1,2,0.42050978805796646,0.46929699248120293
Franck-Hertz,1,3,0.5283474448268917,0.46929699248120293
Franck-Hertz,3,3,0.8055712562976802,0.46929699248120293
Franck-Hertz,4,2,0.9755456808767655,0.46929699248120293
Franck-Hertz,4,3,0.9755456808767655,0.46929699248120293
Franck-Hertz,5,1,0.9769293646328994,0.46929699248120293
Tunnel diode,3,2,0.9758336487780627,0.941733622559653
Tunnel diode,4,1,0.9163396138783252,0.941733622559653
Tunnel diode,4,2,0.8935135661670219,0.9103733110925771
Tunnel diode,4,3,0.8935135661670219,0.9103733110925771
survey lung cancer,1,2,0.9724137931034482,0.9724137931034482
oil spill,2,1,0.9862068965517241,0.9862068965517241
Solar Power Generation,3,2,0.9275548438410961,0.9221791895515516
oil spill,4,1,0.993103448275862,0.9862068965517241
PCOS,1,2,0.8770949720670391,0.888268156424581
kindey stone urine analysis,1,3,0.7777777777777778,0.8518518518518519
Hospital Mortality Prediction,2,3,0.8545454545454545,0.8727272727272727
concrete,7,1,0.9060142115891809,0.8881812593695267
iris,2,2,0.8,0.82
concrete,3,1,0.7491240941067063,0.8884068368127706
concrete,4,1,0.7418636266993917,0.8884068368127706
Delaney solubility,1,3,0.8709068763294372,0.8498776981484352
concrete,5,3,0.6465132269043822,0.754951518145837
Delaney solubility,2,2,0.8676115461542331,0.8498776981484352
Delaney solubility,3,1,0.7361578456024362,0.8498776981484352
Delaney solubility,3,3,0.7688278804396981,0.8498776981484352
Delaney solubility,4,1,0.7361578456024362,0.8498776981484352
Delaney solubility,4,3,0.7370747785614673,0.8438965054489642
Critical Heat Flux,1,1,0.8767667331999809,0.8836410197441006
Critical Heat Flux,1,3,0.8913847510635327,0.8868161892955251
Critical Heat Flux,2,1,0.8767667331999809,0.8836410197441006
Critical Heat Flux,2,2,0.8906124602518019,0.8836410197441006
Critical Heat Flux,3,1,0.8470847778663093,0.8836410197441006
Critical Heat Flux,4,3,0.8249690699279786,0.8868161892955251
Liver disease prediction,1,2,0.7636363636363637,0.8121212121212121
Liver disease prediction,2,2,0.8181818181818182,0.8666666666666667
Liver disease prediction,3,2,0.793939393939394,0.8424242424242424
Liver disease prediction,4,2,0.8606060606060606,0.8727272727272727
Liver disease prediction,4,3,0.8484848484848485,0.8666666666666667
Liver disease prediction,5,1,0.8121212121212121,0.9212121212121213
Pumpkin Seeds,1,1,0.8812121212121212,0.8848484848484849
Pumpkin Seeds,2,1,0.8812121212121212,0.8848484848484849
Pumpkin Seeds,2,3,0.8751515151515151,0.8812121212121212
Pumpkin Seeds,3,2,0.806060606060606,0.8812121212121212
Pumpkin Seeds,3,3,0.806060606060606,0.8812121212121212
Pumpkin Seeds,4,1,0.7927272727272727,0.8848484848484849
Pumpkin Seeds,4,2,0.8315151515151515,0.8812121212121212
water quality,1,1,0.9545454545454546,0.9652892561983472
water quality,1,2,0.9628099173553719,0.9652892561983472
water quality,1,3,0.9421875,0.94453125
water quality,3,1,0.

2025-01-24 18:41:43 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:43 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:43 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:44 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 18:41:44 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:45 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:45 - root - INFO - SQL:
SELECT s."name", s."version", s."step",
       CASE
           WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
           WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
           ELSE 'other'
       END AS "status"
   FROM "STACKING"."STACKING"."MODEL_SCORE" s
   INNER JOIN (
       SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
       FROM "STACKING"."STACKING"."MODEL_SCORE"
       WHERE "model" != 'Stack'
       GROUP BY "name", "version", "step"
   ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
   WHERE s."model" = 'Stack'
   LIMIT 100;
Results:
name,version,step,status
iris,1,1,other
iris,1,2,other
iris,1,3,other
iris,2,1,other
iris,2,3,other
iris,3,1,other
iris,3,2,other
iris,3,3,other
concrete,1,2,other
concrete,1,3,strong
concrete,2,1,other
concrete,2,3,strong
concrete,3,2,other
concrete,3,3,strong
concrete,4,2,other
concrete,4,3,other
concrete,5,1,other
concrete,5,2,other
iris,4,1,other
Delaney solubility,1,2,strong
concrete,2,2,other
iris,4,2,other
iris,4,3,other
iris,5,1,other
iris,5,2,other
iris,5,3,other
Delaney solubility,1,1,strong
Delaney solubility,2,1,strong
Delaney solubility,2,3,strong
Delaney solubility,3,2,other
Delaney solubility,4,2,other
Critical Heat Flux,1,2,strong
Critical Heat Flux,2,3,strong
Critical Heat Flux,3,2,other
Critical Heat Flux,3,3,other
Liver disease prediction,1,3,other
Liver disease prediction,2,3,strong
Liver disease prediction,3,3,other
Pumpkin Seeds,1,3,other
Pumpkin Seeds,3,1,other
Critical Heat Flux,4,2,other
Liver disease prediction,5,3,other
Liver disease prediction,1,1,other
lithium ion batteries,3,3,soft
diabetes,2,1,strong
diabetes,4,3,other
Franck-Hertz,1,2,other
Franck-Hertz,1,3,strong
Franck-Hertz,3,3,strong
Franck-Hertz,4,2,strong
Franck-Hertz,4,3,strong
Franck-Hertz,5,1,strong
Tunnel diode,3,2,strong
Tunnel diode,4,1,other
Tunnel diode,4,2,other
Tunnel diode,4,3,other
survey lung cancer,1,2,soft
oil spill,2,1,soft
Solar Power Generation,3,2,strong
oil spill,4,1,strong
PCOS,1,2,other
kindey stone urine analysis,1,3,other
Hospital Mortality Prediction,2,3,other
concrete,7,1,strong
iris,2,2,other
concrete,3,1,other
concrete,4,1,other
Delaney solubility,1,3,strong
concrete,5,3,other
Delaney solubility,2,2,strong
Delaney solubility,3,1,other
Delaney solubility,3,3,other
Delaney solubility,4,1,other
Delaney solubility,4,3,other
Critical Heat Flux,1,1,other
Critical Heat Flux,1,3,strong
Critical Heat Flux,2,1,other
Critical Heat Flux,2,2,strong
Critical Heat Flux,3,1,other
Critical Heat Flux,4,3,other
Liver disease prediction,1,2,other
Liver disease prediction,2,2,other
Liver disease prediction,3,2,other
Liver disease prediction,4,2,other
Liver disease prediction,4,3,other
Liver disease prediction,5,1,other
Pumpkin Seeds,1,1,other
Pumpkin Seeds,2,1,other
Pumpkin Seeds,2,3,other
Pumpkin Seeds,3,2,other
Pumpkin Seeds,3,3,other
Pumpkin Seeds,4,1,other
Pumpkin Seeds,4,2,other
water quality,1,1,other
water quality,1,2,other
water quality,1,3,other
water quality,3,1,other
Pumpkin Seeds,2,2,other
lithium ion batteries,1,1,soft
lithium ion batteries,1,2,soft

2025-01-24 18:41:45 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:45 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:45 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:46 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 18:41:46 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:46 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:47 - root - INFO - SQL:
SELECT *
   FROM "STACKING"."STACKING"."MODEL"
   LIMIT 100;
Results:
name,version,step,L1_model
iris,1,1,regression
iris,1,2,regression
iris,1,3,regression
iris,2,1,regression
iris,2,2,regression
iris,2,3,regression
iris,3,1,regression
iris,3,2,regression
iris,3,3,regression
concrete,1,1,regression
concrete,1,2,regression
concrete,1,3,regression
concrete,2,1,regression
concrete,2,2,regression
concrete,2,3,regression
concrete,3,1,regression
concrete,3,2,regression
concrete,3,3,regression
concrete,4,1,tree
concrete,4,2,tree
concrete,4,3,tree
concrete,5,1,tree
concrete,5,2,tree
concrete,5,3,tree
iris,4,1,tree
iris,4,2,tree
iris,4,3,tree
iris,5,1,tree
iris,5,2,tree
iris,5,3,tree
Delaney solubility,1,1,regression
Delaney solubility,1,2,regression
Delaney solubility,1,3,regression
Delaney solubility,2,1,regression
Delaney solubility,2,2,regression
Delaney solubility,2,3,regression
Delaney solubility,3,1,tree
Delaney solubility,3,2,tree
Delaney solubility,3,3,tree
Delaney solubility,4,1,tree
Delaney solubility,4,2,tree
Delaney solubility,4,3,tree
Critical Heat Flux,1,1,regression
Critical Heat Flux,1,2,regression
Critical Heat Flux,1,3,regression
Critical Heat Flux,2,1,regression
Critical Heat Flux,2,2,regression
Critical Heat Flux,2,3,regression
Critical Heat Flux,3,1,tree
Critical Heat Flux,3,2,tree
Critical Heat Flux,3,3,tree
Critical Heat Flux,4,1,tree
Critical Heat Flux,4,2,tree
Critical Heat Flux,4,3,tree
Liver disease prediction,1,1,regression
Liver disease prediction,1,2,regression
Liver disease prediction,1,3,regression
Liver disease prediction,2,1,regression
Liver disease prediction,2,2,regression
Liver disease prediction,2,3,regression
Liver disease prediction,3,1,regression
Liver disease prediction,3,2,regression
Liver disease prediction,3,3,regression
Liver disease prediction,4,1,regression
Liver disease prediction,4,2,regression
Liver disease prediction,4,3,regression
Liver disease prediction,5,1,tree
Liver disease prediction,5,2,tree
Liver disease prediction,5,3,tree
Pumpkin Seeds,1,1,regression
Pumpkin Seeds,1,2,regression
Pumpkin Seeds,1,3,regression
Pumpkin Seeds,2,1,regression
Pumpkin Seeds,2,2,regression
Pumpkin Seeds,2,3,regression
Pumpkin Seeds,3,1,tree
Pumpkin Seeds,3,2,tree
Pumpkin Seeds,3,3,tree
Pumpkin Seeds,4,1,tree
Pumpkin Seeds,4,2,tree
Pumpkin Seeds,4,3,tree
water quality,1,1,regression
water quality,1,2,regression
water quality,1,3,regression
water quality,2,1,regression
water quality,2,2,regression
water quality,2,3,regression
water quality,3,1,regression
water quality,3,2,regression
water quality,3,3,regression
lithium ion batteries,1,1,regression
lithium ion batteries,1,2,regression
lithium ion batteries,1,3,regression
lithium ion batteries,2,1,regression
lithium ion batteries,2,2,regression
lithium ion batteries,2,3,regression
lithium ion batteries,3,1,regression
lithium ion batteries,3,2,regression
lithium ion batteries,3,3,regression
diabetes,1,1,regression

2025-01-24 18:41:47 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:47 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:47 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:48 - snowflake.connector.cursor - INFO - Number of results in first chunk: 100
2025-01-24 18:41:48 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:48 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:48 - root - INFO - SQL:
SELECT m."L1_model", status_table."status"
   FROM "STACKING"."STACKING"."MODEL" m
   INNER JOIN (
       SELECT s."name", s."version", s."step",
           CASE
               WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
               WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
               ELSE 'other'
           END AS "status"
       FROM "STACKING"."STACKING"."MODEL_SCORE" s
       INNER JOIN (
           SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
           FROM "STACKING"."STACKING"."MODEL_SCORE"
           WHERE "model" != 'Stack'
           GROUP BY "name", "version", "step"
       ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
       WHERE s."model" = 'Stack'
   ) status_table ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
   LIMIT 100;
Results:
L1_model,status
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,strong
regression,other
regression,other
regression,strong
regression,other
regression,other
regression,strong
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
regression,strong
regression,strong
regression,strong
regression,strong
regression,strong
regression,strong
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
regression,other
regression,strong
regression,strong
regression,other
regression,strong
regression,strong
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,strong
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
tree,other
tree,other
tree,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,soft
regression,other
regression,other
regression,other
regression,soft
regression,soft
regression,other
regression,other
regression,other
regression,other
regression,soft
regression,other
regression,soft
regression,strong

2025-01-24 18:41:48 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:48 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:48 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:50 - snowflake.connector.cursor - INFO - Number of results in first chunk: 6
2025-01-24 18:41:50 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:50 - root - INFO - SQL:
SELECT status_table."status", m."L1_model", COUNT(*) AS "occurrences"
    FROM "STACKING"."STACKING"."MODEL" m
    INNER JOIN (
        SELECT s."name", s."version", s."step",
            CASE
                WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
                WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
                ELSE 'other'
            END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) status_table ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
    GROUP BY status_table."status", m."L1_model"
    LIMIT 100;
Results:
status,L1_model,occurrences
strong,regression,78
strong,tree,14
other,regression,99
other,tree,65
soft,regression,36
soft,tree,11

2025-01-24 18:41:50 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:50 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:50 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:52 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-24 18:41:52 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:52 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:52 - root - INFO - SQL:
SELECT sub."status", sub."L1_model", sub."occurrences"
    FROM (
        SELECT status_table."status", m."L1_model", COUNT(*) AS "occurrences",
               ROW_NUMBER() OVER (PARTITION BY status_table."status" ORDER BY COUNT(*) DESC) AS rn
        FROM "STACKING"."STACKING"."MODEL" m
        INNER JOIN (
            SELECT s."name", s."version", s."step",
                CASE
                    WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
                    WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
                    ELSE 'other'
                END AS "status"
            FROM "STACKING"."STACKING"."MODEL_SCORE" s
            INNER JOIN (
                SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
                FROM "STACKING"."STACKING"."MODEL_SCORE"
                WHERE "model" != 'Stack'
                GROUP BY "name", "version", "step"
            ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
            WHERE s."model" = 'Stack'
        ) status_table ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
        GROUP BY status_table."status", m."L1_model"
    ) sub
    WHERE sub.rn = 1
    LIMIT 100;
Results:
status,L1_model,occurrences
other,regression,99
soft,regression,36
strong,regression,78

2025-01-24 18:41:52 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:52 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:52 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:54 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-24 18:41:54 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:54 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:54 - root - INFO - SQL:
SELECT DISTINCT "status"
    FROM (
        SELECT CASE
            WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
            WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
            ELSE 'other'
        END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) t
    LIMIT 100;
Results:
status
other
strong
soft

2025-01-24 18:41:54 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:54 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:54 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 3
2025-01-24 18:41:55 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:56 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:56 - root - INFO - SQL:
SELECT "status", COUNT(*) AS "count"
    FROM (
        SELECT CASE
            WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
            WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
            ELSE 'other'
        END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) t
    GROUP BY "status"
    LIMIT 100;
Results:
status,count
other,164
strong,92
soft,47

2025-01-24 18:41:56 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:56 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:56 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:57 - snowflake.connector.cursor - INFO - Number of results in first chunk: 2
2025-01-24 18:41:57 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:41:58 - root - INFO - SQL:
SELECT "L1_model", COUNT(*) AS "occurrences"
    FROM "STACKING"."STACKING"."MODEL"
    GROUP BY "L1_model"
    ORDER BY "occurrences" DESC
    LIMIT 100;
Results:
L1_model,occurrences
regression,213
tree,90

2025-01-24 18:41:58 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:41:58 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:41:58 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:41:59 - snowflake.connector.cursor - INFO - Number of results in first chunk: 6
2025-01-24 18:41:59 - snowflake.connector.connection - INFO - closed
2025-01-24 18:41:59 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:42:00 - root - INFO - SQL:
SELECT status_table."status", m."L1_model", COUNT(*) AS "occurrences"
    FROM "STACKING"."STACKING"."MODEL" m
    INNER JOIN (
        SELECT s."name", s."version", s."step",
            CASE
                WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
                WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
                ELSE 'other'
            END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) status_table ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
    GROUP BY status_table."status", m."L1_model"
    ORDER BY status_table."status", "occurrences" DESC
    LIMIT 100;
Results:
status,L1_model,occurrences
other,regression,99
other,tree,65
soft,regression,36
soft,tree,11
strong,regression,78
strong,tree,14

2025-01-24 18:42:00 - root - INFO - itercount: 0
2025-01-24 18:42:00 - root - INFO - Database Name: STACKING
Schema Name: STACKING
DDL describes table information.
,0
table_name,FEATURE_IMPORTANCE
description,
DDL,"create or replace TABLE FEATURE_IMPORTANCE (
	""name"" VARCHAR(16777216),
	""version"" NUMBER(38,0),
	""step"" NUMBER(38,0),
	""feature"" VARCHAR(16777216),
	""importance"" FLOAT
);"

,1
table_name,PROBLEM
description,
DDL,"create or replace TABLE PROBLEM (
	""name"" VARCHAR(16777216),
	""path"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""target"" VARCHAR(16777216)
);"

,2
table_name,SOLUTION
description,
DDL,"create or replace TABLE SOLUTION (
	""name"" VARCHAR(16777216),
	""version"" NUMBER(38,0),
	""correlation"" FLOAT,
	""nb_model"" NUMBER(38,0),
	""nb_feature"" NUMBER(38,0),
	""score"" FLOAT,
	""test_size"" FLOAT,
	""resampling"" NUMBER(38,0)
);"

,3
table_name,MODEL
description,
DDL,"create or replace TABLE MODEL (
	""name"" VARCHAR(16777216),
	""version"" NUMBER(38,0),
	""step"" NUMBER(38,0),
	""L1_model"" VARCHAR(16777216)
);"

,4
table_name,MODEL_IMPORTANCE
description,
DDL,"create or replace TABLE MODEL_IMPORTANCE (
	""name"" VARCHAR(16777216),
	""version"" NUMBER(38,0),
	""step"" NUMBER(38,0),
	""model"" VARCHAR(16777216),
	""importance"" FLOAT
);"

,5
table_name,EDA
description,
DDL,"create or replace TABLE EDA (
	""name"" VARCHAR(16777216),
	""version"" NUMBER(38,0),
	""feature"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""range"" VARCHAR(16777216),
	""drop_user"" NUMBER(38,0),
	""drop_correlation"" NUMBER(38,0),
	""target"" NUMBER(38,0)
);"

,6
table_name,MODEL_SCORE
description,
DDL,"create or replace TABLE MODEL_SCORE (
	""name"" VARCHAR(16777216),
	""version"" NUMBER(38,0),
	""step"" NUMBER(38,0),
	""model"" VARCHAR(16777216),
	""train_score"" FLOAT,
	""test_score"" FLOAT
);"

External knowledge that might be helpful: 
None
The table structure information is ({database name: {schema name: {table name}}}): 
{'STACKING': {'STACKING': ['EDA', 'FEATURE_IMPORTANCE', 'MODEL', 'MODEL_IMPORTANCE', 'MODEL_SCORE', 'PROBLEM', 'SOLUTION']}}
Begin Exploring Related Columns
First, let's identify the tables and columns relevant to the task.

**Relevant Tables and Columns:**

1. **"STACKING"."STACKING"."MODEL_SCORE"**

   - `"name"`: Used to identify the experiment or problem.
   - `"version"`: The version number of the model or solution.
   - `"step"`: Indicates the modeling step or iteration.
   - `"model"`: Name of the model ('Stack' or other models).
   - `"test_score"`: The test score of the model; used to evaluate performance.

2. **"STACKING"."STACKING"."MODEL"**

   - `"name"`: Same as above, used to join with `"MODEL_SCORE"`.
   - `"version"`: Same as above.
   - `"step"`: Same as above.
   - `"L1_model"`: The base model used in the stacking ensemble.

**Potential Conditions to Use:**

- `WHERE "model" = 'Stack'`: To select records related to the 'Stack' model.
- `WHERE "model" != 'Stack'`: To select records of non-'Stack' models.
- Grouping by `"name"`, `"version"`, `"step"` to aggregate data.
- Calculating the maximum `"test_score"` among non-'Stack' models.
- Comparing test scores between 'Stack' and non-'Stack' models to determine 'strong' or 'soft' status.
- Joining tables on `"name"`, `"version"`, and `"step"` to combine data.
- Counting occurrences of `"L1_model"` per status.

---

**SQL Queries:**

1. **Select all records from the `"MODEL_SCORE"` table (limited to 100 rows):**

   ```sql
   SELECT *
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   LIMIT 100;
   ```

2. **List distinct models in the `"MODEL_SCORE"` table:**

   ```sql
   SELECT DISTINCT "model"
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   LIMIT 100;
   ```

3. **Retrieve test scores for the 'Stack' model:**

   ```sql
   SELECT "name", "version", "step", "test_score"
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   WHERE "model" = 'Stack'
   LIMIT 100;
   ```

4. **Retrieve test scores for non-'Stack' models:**

   ```sql
   SELECT "name", "version", "step", "model", "test_score"
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   WHERE "model" != 'Stack'
   LIMIT 100;
   ```

5. **Find the maximum test score of non-'Stack' models for each combination of `"name"`, `"version"`, and `"step"`:**

   ```sql
   SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   WHERE "model" != 'Stack'
   GROUP BY "name", "version", "step"
   LIMIT 100;
   ```

6. **Compare 'Stack' model test scores with maximum non-'Stack' model test scores:**

   ```sql
   SELECT s."name", s."version", s."step", s."test_score" AS "stack_test_score", n."max_non_stack_test_score"
   FROM "STACKING"."STACKING"."MODEL_SCORE" s
   INNER JOIN (
       SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
       FROM "STACKING"."STACKING"."MODEL_SCORE"
       WHERE "model" != 'Stack'
       GROUP BY "name", "version", "step"
   ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
   WHERE s."model" = 'Stack'
   LIMIT 100;
   ```

7. **Determine the status ('strong' or 'soft') for each 'Stack' model entry:**

   ```sql
   SELECT s."name", s."version", s."step",
       CASE
           WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
           WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
           ELSE 'other'
       END AS "status"
   FROM "STACKING"."STACKING"."MODEL_SCORE" s
   INNER JOIN (
       SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
       FROM "STACKING"."STACKING"."MODEL_SCORE"
       WHERE "model" != 'Stack'
       GROUP BY "name", "version", "step"
   ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
   WHERE s."model" = 'Stack'
   LIMIT 100;
   ```

8. **List all entries from the `"MODEL"` table to view `"L1_model"` data:**

   ```sql
   SELECT *
   FROM "STACKING"."STACKING"."MODEL"
   LIMIT 100;
   ```

9. **Join the status of 'Stack' models with their corresponding `"L1_model"`:**

   ```sql
   SELECT m."L1_model", status_table."status"
   FROM "STACKING"."STACKING"."MODEL" m
   INNER JOIN (
       SELECT s."name", s."version", s."step",
           CASE
               WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
               WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
               ELSE 'other'
           END AS "status"
       FROM "STACKING"."STACKING"."MODEL_SCORE" s
       INNER JOIN (
           SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
           FROM "STACKING"."STACKING"."MODEL_SCORE"
           WHERE "model" != 'Stack'
           GROUP BY "name", "version", "step"
       ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
       WHERE s."model" = 'Stack'
   ) status_table ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
   LIMIT 100;
   ```

10. **Count the occurrences of each `"L1_model"` per status ('strong' or 'soft'):**

    ```sql
    SELECT status_table."status", m."L1_model", COUNT(*) AS "occurrences"
    FROM "STACKING"."STACKING"."MODEL" m
    INNER JOIN (
        SELECT s."name", s."version", s."step",
            CASE
                WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
                WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
                ELSE 'other'
            END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) status_table ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
    GROUP BY status_table."status", m."L1_model"
    LIMIT 100;
    ```

11. **Identify the `"L1_model"` with the highest occurrence for each status:**

    ```sql
    SELECT sub."status", sub."L1_model", sub."occurrences"
    FROM (
        SELECT status_table."status", m."L1_model", COUNT(*) AS "occurrences",
               ROW_NUMBER() OVER (PARTITION BY status_table."status" ORDER BY COUNT(*) DESC) AS rn
        FROM "STACKING"."STACKING"."MODEL" m
        INNER JOIN (
            SELECT s."name", s."version", s."step",
                CASE
                    WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
                    WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
                    ELSE 'other'
                END AS "status"
            FROM "STACKING"."STACKING"."MODEL_SCORE" s
            INNER JOIN (
                SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
                FROM "STACKING"."STACKING"."MODEL_SCORE"
                WHERE "model" != 'Stack'
                GROUP BY "name", "version", "step"
            ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
            WHERE s."model" = 'Stack'
        ) status_table ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
        GROUP BY status_table."status", m."L1_model"
    ) sub
    WHERE sub.rn = 1
    LIMIT 100;
    ```

12. **List distinct statuses determined from the data:**

    ```sql
    SELECT DISTINCT "status"
    FROM (
        SELECT CASE
            WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
            WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
            ELSE 'other'
        END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) t
    LIMIT 100;
    ```

13. **Count the number of occurrences for each status ('strong' and 'soft'):**

    ```sql
    SELECT "status", COUNT(*) AS "count"
    FROM (
        SELECT CASE
            WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
            WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
            ELSE 'other'
        END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) t
    GROUP BY "status"
    LIMIT 100;
    ```

14. **List all `"L1_model"` values and their total occurrences:**

    ```sql
    SELECT "L1_model", COUNT(*) AS "occurrences"
    FROM "STACKING"."STACKING"."MODEL"
    GROUP BY "L1_model"
    ORDER BY "occurrences" DESC
    LIMIT 100;
    ```

15. **Get the distribution of `"L1_model"` occurrences across statuses:**

    ```sql
    SELECT status_table."status", m."L1_model", COUNT(*) AS "occurrences"
    FROM "STACKING"."STACKING"."MODEL" m
    INNER JOIN (
        SELECT s."name", s."version", s."step",
            CASE
                WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
                WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
                ELSE 'other'
            END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) status_table ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
    GROUP BY status_table."status", m."L1_model"
    ORDER BY status_table."status", "occurrences" DESC
    LIMIT 100;
    ```

These queries progressively explore the data from the basic structure of the tables to the more complex relationships needed to understand which `"L1_model"` has the highest occurrence for each status. By running these queries, you can gain insights into the distribution of models, their performance, and how they relate to the defined 'strong' and 'soft' statuses.Query:
SELECT *
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   LIMIT 100;
Answer:
name,version,step,model,train_score,test_score
iris,1,1,DTCG,0.96,0.66
iris,1,1,DTCE,0.96,0.74
iris,1,1,RFCG,0.96,0.74
iris,1,1,RFCE,0.96,0.74
iris,1,1,ABC,0.74,0.74
iris,1,1,LOGRL,0.79,0.82
iris,1,1,LOGRS,0.79,0.82
iris,1,1,LOGRLCV,0.78,0.78
iris,1,1,LOGRSCV,0.78,0.78
iris,1,1,MLPC1,0.21,0.18
iris,1,1,MLPC2,0.34,0.32
iris,1,1,KNCU,0.85,0.78
iris,1,1,KNCD,0.96,0.74
iris,1,1,Stack,0.79,0.78
iris,1,2,ABC,0.74,0.74
iris,1,2,LOGRL,0.79,0.82
iris,1,2,LOGRS,0.79,0.82
iris,1,2,KNCU,0.85,0.78
iris,1,2,KNCD,0.96,0.74
iris,1,2,Stack,0.81,0.8
iris,1,3,ABC,0.74,0.74
iris,1,3,LOGRL,0.79,0.82
iris,1,3,LOGRS,0.79,0.82
iris,1,3,KNCU,0.85,0.78
iris,1,3,KNCD,0.96,0.74
iris,1,3,Stack,0.81,0.8
iris,2,1,DTCG,0.96,0.66
iris,2,1,DTCE,0.96,0.74
iris,2,1,RFCG,0.96,0.74
iris,2,1,RFCE,0.96,0.74
iris,2,1,ABC,0.74,0.74
iris,2,1,LOGRL,0.79,0.82
iris,2,1,LOGRS,0.79,0.82
iris,2,1,LOGRLCV,0.78,0.78
iris,2,1,LOGRSCV,0.78,0.78
iris,2,1,MLPC1,0.21,0.18
iris,2,1,MLPC2,0.34,0.32
iris,2,1,KNCU,0.85,0.78
iris,2,1,KNCD,0.96,0.74
iris,2,1,Stack,0.79,0.78
iris,2,2,ABC,0.74,0.74
iris,2,2,LOGRS,0.79,0.82
iris,2,2,Stack,0.82,0.8
iris,2,3,ABC,0.74,0.74
iris,2,3,LOGRS,0.79,0.82
iris,2,3,Stack,0.82,0.8
iris,3,1,DTCG,0.96,0.66
iris,3,1,DTCE,0.96,0.74
iris,3,1,RFCG,0.96,0.74
iris,3,1,RFCE,0.96,0.74
iris,3,1,ABC,0.74,0.74
iris,3,1,LOGRL,0.79,0.82
iris,3,1,LOGRLCV,0.78,0.78
iris,3,1,MLPC1,0.21,0.18
iris,3,1,MLPC2,0.34,0.32
iris,3,1,KNCU,0.85,0.78
iris,3,1,KNCD,0.96,0.74
iris,3,1,Stack,0.8,0.78
iris,3,2,ABC,0.74,0.74
iris,3,2,LOGRL,0.79,0.82
iris,3,2,Stack,0.82,0.8
iris,3,3,ABC,0.74,0.74
iris,3,3,LOGRL,0.79,0.82
iris,3,3,Stack,0.82,0.8
concrete,1,1,GPRQ,0.941564586755376,0.8645246650525136
concrete,1,1,DTRF,0.9967293997009053,0.7730221399127792
concrete,1,1,DTRA,0.9967293997009053,0.750903499864533
concrete,1,1,DTRP,0.9967293997009053,0.7667845100320249
concrete,1,1,RFRS,0.9842454230229145,0.8542442968763078
concrete,1,1,RFRA,0.9820925643636313,0.8530848503734989
concrete,1,1,RFRP,0.9836664767304603,0.8468371056049129
concrete,1,1,ABR,0.7346194026325938,0.5501433922826775
concrete,1,1,HGBR,0.9742544377623932,0.8884068368127706
concrete,1,1,MLPR1,0.7060758211423152,0.6172737606465106
concrete,1,1,KNRU,0.7456425827094404,0.5161682780869268
concrete,1,1,KNRD,0.9967293997009053,0.6291811573603894
concrete,1,1,Stack,0.9398935764539665,0.7491240941067063
concrete,1,2,GPRQ,0.941564586755376,0.8645246650525136
concrete,1,2,DTRF,0.9967293997009053,0.7730221399127792
concrete,1,2,DTRA,0.9967293997009053,0.750903499864533
concrete,1,2,RFRP,0.9836664767304603,0.8468371056049129
concrete,1,2,HGBR,0.9742544377623932,0.8884068368127706
concrete,1,2,Stack,0.9360275819177686,0.7478259090713758
concrete,1,3,GPRQ,0.9858772820161913,-7.09267714466483
concrete,1,3,DTRF,0.9951640513131715,0.7897656878487402
concrete,1,3,DTRA,0.9950724249564536,0.7678098487937882
concrete,1,3,RFRP,0.982546336539216,0.8620411609279719
concrete,1,3,HGBR,0.9631886037718241,0.8885222604143914
concrete,1,3,Stack,0.9770427190401804,0.8952049262695958
concrete,2,1,GPRQ,0.941564586755376,0.8645246650525136
concrete,2,1,DTRF,0.9967293997009053,0.7730221399127792
concrete,2,1,DTRA,0.9967293997009053,0.750903499864533
concrete,2,1,DTRP,0.9967293997009053,0.7667845100320249
concrete,2,1,RFRS,0.9842454230229145,0.8542442968763078
concrete,2,1,RFRA,0.9820925643636313,0.8530848503734989
concrete,2,1,RFRP,0.9836664767304603,0.8468371056049129
concrete,2,1,ABR,0.7346194026325938,0.5501433922826775
concrete,2,1,HGBR,0.9742544377623932,0.8884068368127706
concrete,2,1,MLPR1,0.7060758211423152,0.6172737606465106
concrete,2,1,KNRU,0.7456425827094404,0.5161682780869268
Query:
SELECT DISTINCT "model"
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   LIMIT 100;
Answer:
model
DTCG
DTCE
RFCG
RFCE
ABC
LOGRS
LOGRLCV
LOGRSCV
MLPC1
MLPC2
KNCU
KNCD
DTRF
RFRS
ABR
HGBR
MLPR1
KNRU
GPCQ
HGBC
GNB
ELNE
ELNECV
Stack
GPRQ
RFRA
KNRD
GPCL
GPRL
LINR
MLPR2
SGDCH
SGDCLL
SVCL
SVCG
LOGRL
DTRP
RFRP
GPCR
GPRR
DTRA
SGDCMH
SVCP
SVCS
KERC
KERR
Query:
SELECT "name", "version", "step", "test_score"
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   WHERE "model" = 'Stack'
   LIMIT 100;
Answer:
name,version,step,test_score
iris,1,1,0.78
iris,1,2,0.8
iris,1,3,0.8
iris,2,1,0.78
iris,2,2,0.8
iris,2,3,0.8
iris,3,1,0.78
iris,3,2,0.8
iris,3,3,0.8
concrete,1,1,0.7491240941067063
concrete,1,2,0.7478259090713758
concrete,1,3,0.8952049262695958
concrete,2,1,0.7491240941067063
concrete,2,2,0.5153723438701945
concrete,2,3,0.7550913523238763
concrete,3,1,0.7491240941067063
concrete,3,2,0.6204357065145107
concrete,3,3,0.7624137560765165
concrete,4,1,0.7418636266993917
concrete,4,2,0.7943036798259414
concrete,4,3,0.7999917844923515
concrete,5,1,0.7418636266993917
concrete,5,2,0.8280251862560624
concrete,5,3,0.6465132269043822
iris,4,1,0.8
iris,4,2,0.74
iris,4,3,0.74
iris,5,1,0.8
iris,5,2,0.72
iris,5,3,0.72
Delaney solubility,1,1,0.8603318218230251
Delaney solubility,1,2,0.8709068763294372
Delaney solubility,1,3,0.8709068763294372
Delaney solubility,2,1,0.8603318218230251
Delaney solubility,2,2,0.8676115461542331
Delaney solubility,2,3,0.8676115461542331
Delaney solubility,3,1,0.7361578456024362
Delaney solubility,3,2,0.7688278804396981
Delaney solubility,3,3,0.7688278804396981
Delaney solubility,4,1,0.7361578456024362
Delaney solubility,4,2,0.7370747785614673
Delaney solubility,4,3,0.7370747785614673
Critical Heat Flux,1,1,0.8767667331999809
Critical Heat Flux,1,2,0.8860441283949297
Critical Heat Flux,1,3,0.8913847510635327
Critical Heat Flux,2,1,0.8767667331999809
Critical Heat Flux,2,2,0.8906124602518019
Critical Heat Flux,2,3,0.896051215319373
Critical Heat Flux,3,1,0.8470847778663093
Critical Heat Flux,3,2,0.8580739277704147
Critical Heat Flux,3,3,0.820001186352687
Critical Heat Flux,4,1,0.8470847778663093
Critical Heat Flux,4,2,0.8212042575388446
Critical Heat Flux,4,3,0.8249690699279786
Liver disease prediction,1,1,0.7696969696969697
Liver disease prediction,1,2,0.7636363636363637
Liver disease prediction,1,3,0.8
Liver disease prediction,2,1,0.8121212121212121
Liver disease prediction,2,2,0.8181818181818182
Liver disease prediction,2,3,0.8787878787878788
Liver disease prediction,3,1,0.793939393939394
Liver disease prediction,3,2,0.793939393939394
Liver disease prediction,3,3,0.7757575757575758
Liver disease prediction,4,1,0.8424242424242424
Liver disease prediction,4,2,0.8606060606060606
Liver disease prediction,4,3,0.8484848484848485
Liver disease prediction,5,1,0.8121212121212121
Liver disease prediction,5,2,0.9090909090909091
Liver disease prediction,5,3,0.8545454545454545
Pumpkin Seeds,1,1,0.8812121212121212
Pumpkin Seeds,1,2,0.8751515151515151
Pumpkin Seeds,1,3,0.8751515151515151
Pumpkin Seeds,2,1,0.8812121212121212
Pumpkin Seeds,2,2,0.8751515151515151
Pumpkin Seeds,2,3,0.8751515151515151
Pumpkin Seeds,3,1,0.7927272727272727
Pumpkin Seeds,3,2,0.806060606060606
Pumpkin Seeds,3,3,0.806060606060606
Pumpkin Seeds,4,1,0.7927272727272727
Pumpkin Seeds,4,2,0.8315151515151515
Pumpkin Seeds,4,3,0.7927272727272727
water quality,1,1,0.9545454545454546
water quality,1,2,0.9628099173553719
water quality,1,3,0.9421875
water quality,2,1,0.9545454545454546
water quality,2,2,0.9628099173553719
water quality,2,3,0.9615076182838813
water quality,3,1,0.9545454545454546
water quality,3,2,0.9628099173553719
water quality,3,3,0.9626926196269262
lithium ion batteries,1,1,1.0
lithium ion batteries,1,2,1.0
lithium ion batteries,1,3,0.9642857142857143
lithium ion batteries,2,1,0.9821428571428571
lithium ion batteries,2,2,0.9553571428571429
lithium ion batteries,2,3,0.9732142857142857
lithium ion batteries,3,1,1.0
lithium ion batteries,3,2,0.9732142857142857
lithium ion batteries,3,3,1.0
diabetes,1,1,0.7677165354330708
Query:
SELECT "name", "version", "step", "model", "test_score"
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   WHERE "model" != 'Stack'
   LIMIT 100;
Answer:
name,version,step,model,test_score
iris,1,1,DTCG,0.66
iris,1,1,DTCE,0.74
iris,1,1,RFCG,0.74
iris,1,1,RFCE,0.74
iris,1,1,ABC,0.74
iris,1,1,LOGRL,0.82
iris,1,1,LOGRS,0.82
iris,1,1,LOGRLCV,0.78
iris,1,1,LOGRSCV,0.78
iris,1,1,MLPC1,0.18
iris,1,1,MLPC2,0.32
iris,1,1,KNCU,0.78
iris,1,1,KNCD,0.74
iris,1,2,ABC,0.74
iris,1,2,LOGRL,0.82
iris,1,2,LOGRS,0.82
iris,1,2,KNCU,0.78
iris,1,2,KNCD,0.74
iris,1,3,ABC,0.74
iris,1,3,LOGRL,0.82
iris,1,3,LOGRS,0.82
iris,1,3,KNCU,0.78
iris,1,3,KNCD,0.74
iris,2,1,DTCG,0.66
iris,2,1,DTCE,0.74
iris,2,1,RFCG,0.74
iris,2,1,RFCE,0.74
iris,2,1,ABC,0.74
iris,2,1,LOGRL,0.82
iris,2,1,LOGRS,0.82
iris,2,1,LOGRLCV,0.78
iris,2,1,LOGRSCV,0.78
iris,2,1,MLPC1,0.18
iris,2,1,MLPC2,0.32
iris,2,1,KNCU,0.78
iris,2,1,KNCD,0.74
iris,2,2,ABC,0.74
iris,2,2,LOGRS,0.82
iris,2,3,ABC,0.74
iris,2,3,LOGRS,0.82
iris,3,1,DTCG,0.66
iris,3,1,DTCE,0.74
iris,3,1,RFCG,0.74
iris,3,1,RFCE,0.74
iris,3,1,ABC,0.74
iris,3,1,LOGRL,0.82
iris,3,1,LOGRLCV,0.78
iris,3,1,MLPC1,0.18
iris,3,1,MLPC2,0.32
iris,3,1,KNCU,0.78
iris,3,1,KNCD,0.74
iris,3,2,ABC,0.74
iris,3,2,LOGRL,0.82
iris,3,3,ABC,0.74
iris,3,3,LOGRL,0.82
concrete,1,1,GPRQ,0.8645246650525136
concrete,1,1,DTRF,0.7730221399127792
concrete,1,1,DTRA,0.750903499864533
concrete,1,1,DTRP,0.7667845100320249
concrete,1,1,RFRS,0.8542442968763078
concrete,1,1,RFRA,0.8530848503734989
concrete,1,1,RFRP,0.8468371056049129
concrete,1,1,ABR,0.5501433922826775
concrete,1,1,HGBR,0.8884068368127706
concrete,1,1,MLPR1,0.6172737606465106
concrete,1,1,KNRU,0.5161682780869268
concrete,1,1,KNRD,0.6291811573603894
concrete,1,2,GPRQ,0.8645246650525136
concrete,1,2,DTRF,0.7730221399127792
concrete,1,2,DTRA,0.750903499864533
concrete,1,2,RFRP,0.8468371056049129
concrete,1,2,HGBR,0.8884068368127706
concrete,1,3,GPRQ,-7.09267714466483
concrete,1,3,DTRF,0.7897656878487402
concrete,1,3,DTRA,0.7678098487937882
concrete,1,3,RFRP,0.8620411609279719
concrete,1,3,HGBR,0.8885222604143914
concrete,2,1,GPRQ,0.8645246650525136
concrete,2,1,DTRF,0.7730221399127792
concrete,2,1,DTRA,0.750903499864533
concrete,2,1,DTRP,0.7667845100320249
concrete,2,1,RFRS,0.8542442968763078
concrete,2,1,RFRA,0.8530848503734989
concrete,2,1,RFRP,0.8468371056049129
concrete,2,1,ABR,0.5501433922826775
concrete,2,1,HGBR,0.8884068368127706
concrete,2,1,MLPR1,0.6172737606465106
concrete,2,1,KNRU,0.5161682780869268
concrete,2,1,KNRD,0.6291811573603894
concrete,2,2,GPRQ,0.8645246650525136
concrete,2,2,RFRP,0.8468371056049129
concrete,2,2,HGBR,0.8884068368127706
concrete,2,3,GPRQ,-6.162223676037567
concrete,2,3,RFRP,0.7294831008781688
concrete,2,3,HGBR,0.754951518145837
concrete,3,1,GPRQ,0.8645246650525136
concrete,3,1,DTRF,0.7730221399127792
concrete,3,1,DTRA,0.750903499864533
concrete,3,1,DTRP,0.7667845100320249
concrete,3,1,RFRS,0.8542442968763078
Query:
SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
   FROM "STACKING"."STACKING"."MODEL_SCORE"
   WHERE "model" != 'Stack'
   GROUP BY "name", "version", "step"
   LIMIT 100;
Answer:
name,version,step,max_non_stack_test_score
iris,1,1,0.82
iris,1,2,0.82
iris,1,3,0.82
iris,2,1,0.82
iris,2,2,0.82
iris,2,3,0.82
iris,3,1,0.82
iris,3,2,0.82
iris,3,3,0.82
concrete,1,1,0.8884068368127706
concrete,1,3,0.8885222604143914
concrete,2,1,0.8884068368127706
concrete,2,2,0.8884068368127706
concrete,2,3,0.754951518145837
concrete,3,1,0.8884068368127706
concrete,3,2,0.8884068368127706
concrete,4,2,0.8884068368127706
concrete,4,3,0.8885222604143914
concrete,5,3,0.754951518145837
iris,4,2,0.78
iris,5,2,0.74
concrete,3,3,0.754951518145837
concrete,5,2,0.8884068368127706
Delaney solubility,1,1,0.8498776981484352
Delaney solubility,2,3,0.8498776981484352
Delaney solubility,3,2,0.8498776981484352
Delaney solubility,3,3,0.8498776981484352
Delaney solubility,4,3,0.8438965054489642
Critical Heat Flux,1,3,0.8868161892955251
Critical Heat Flux,3,1,0.8836410197441006
Critical Heat Flux,3,3,0.8868161892955251
Critical Heat Flux,4,1,0.8836410197441006
Critical Heat Flux,4,2,0.8836410197441006
Liver disease prediction,1,1,0.8121212121212121
Liver disease prediction,2,1,0.8666666666666667
Liver disease prediction,4,1,0.8727272727272727
Liver disease prediction,4,3,0.8666666666666667
Liver disease prediction,5,1,0.9212121212121213
Pumpkin Seeds,1,3,0.8848484848484849
Pumpkin Seeds,3,1,0.8848484848484849
Pumpkin Seeds,4,1,0.8848484848484849
Pumpkin Seeds,4,2,0.8812121212121212
Pumpkin Seeds,4,3,0.8666666666666667
water quality,1,3,0.94453125
water quality,2,3,0.9615076182838813
Critical Heat Flux,4,3,0.8868161892955251
Liver disease prediction,3,2,0.8424242424242424
Pumpkin Seeds,1,2,0.8848484848484849
Pumpkin Seeds,3,3,0.8812121212121212
water quality,2,1,0.9652892561983472
lithium ion batteries,1,2,1.0
lithium ion batteries,2,2,1.0
diabetes,2,1,0.7598425196850394
diabetes,3,2,0.7598425196850394
diabetes,3,3,0.7677165354330708
Franck-Hertz,3,3,0.46929699248120293
Franck-Hertz,4,2,0.46929699248120293
Franck-Hertz,4,3,0.46929699248120293
Franck-Hertz,5,1,0.46929699248120293
Tunnel diode,3,1,0.941733622559653
oil spill,2,3,0.9862068965517241
Tunnel diode,4,2,0.9103733110925771
survey lung cancer,3,1,0.9862068965517241
PSS3E5,1,1,0.6142270861833106
concrete,5,1,0.8884068368127706
iris,4,3,0.78
iris,5,1,0.82
iris,5,3,0.74
Delaney solubility,1,3,0.8498776981484352
concrete,4,1,0.8884068368127706
iris,4,1,0.82
Delaney solubility,1,2,0.8498776981484352
Delaney solubility,2,2,0.8498776981484352
Delaney solubility,3,1,0.8498776981484352
Delaney solubility,4,1,0.8498776981484352
Delaney solubility,4,2,0.8438965054489642
Critical Heat Flux,1,1,0.8836410197441006
Critical Heat Flux,1,2,0.8836410197441006
Critical Heat Flux,2,1,0.8836410197441006
Critical Heat Flux,2,3,0.8868161892955251
Critical Heat Flux,3,2,0.8836410197441006
Liver disease prediction,1,2,0.8121212121212121
Liver disease prediction,1,3,0.8303030303030303
Liver disease prediction,2,2,0.8666666666666667
Liver disease prediction,5,3,0.8909090909090909
Pumpkin Seeds,2,1,0.8848484848484849
Pumpkin Seeds,3,2,0.8812121212121212
water quality,1,1,0.9652892561983472
Liver disease prediction,2,3,0.8666666666666667
Liver disease prediction,3,3,0.8121212121212121
Pumpkin Seeds,2,3,0.8812121212121212
water quality,1,2,0.9652892561983472
water quality,2,2,0.9652892561983472
Pumpkin Seeds,1,1,0.8848484848484849
water quality,3,3,0.9651257096512571
lithium ion batteries,1,1,1.0
lithium ion batteries,1,3,1.0
lithium ion batteries,2,3,1.0
lithium ion batteries,3,3,1.0
diabetes,1,1,0.7598425196850394
Query:
SELECT s."name", s."version", s."step", s."test_score" AS "stack_test_score", n."max_non_stack_test_score"
   FROM "STACKING"."STACKING"."MODEL_SCORE" s
   INNER JOIN (
       SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
       FROM "STACKING"."STACKING"."MODEL_SCORE"
       WHERE "model" != 'Stack'
       GROUP BY "name", "version", "step"
   ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
   WHERE s."model" = 'Stack'
   LIMIT 100;
Answer:
Too long, hard cut:
name,version,step,stack_test_score,max_non_stack_test_score
iris,1,1,0.78,0.82
iris,1,2,0.8,0.82
iris,1,3,0.8,0.82
iris,2,1,0.78,0.82
iris,2,3,0.8,0.82
iris,3,1,0.78,0.82
iris,3,2,0.8,0.82
iris,3,3,0.8,0.82
concrete,1,2,0.7478259090713758,0.8884068368127706
concrete,1,3,0.8952049262695958,0.8885222604143914
concrete,2,1,0.7491240941067063,0.8884068368127706
concrete,2,3,0.7550913523238763,0.754951518145837
concrete,3,2,0.6204357065145107,0.8884068368127706
concrete,3,3,0.7624137560765165,0.754951518145837
concrete,4,2,0.7943036798259414,0.8884068368127706
concrete,4,3,0.7999917844923515,0.8885222604143914
concrete,5,1,0.7418636266993917,0.8884068368127706
concrete,5,2,0.8280251862560624,0.8884068368127706
iris,4,1,0.8,0.82
Delaney solubility,1,2,0.8709068763294372,0.8498776981484352
concrete,2,2,0.5153723438701945,0.8884068368127706
iris,4,2,0.74,0.78
iris,4,3,0.74,0.78
iris,5,1,0.8,0.82
iris,5,2,0.72,0.74
iris,5,3,0.72,0.74
Delaney solubility,1,1,0.8603318218230251,0.8498776981484352
Delaney solubility,2,1,0.8603318218230251,0.8498776981484352
Delaney solubility,2,3,0.8676115461542331,0.8498776981484352
Delaney solubility,3,2,0.7688278804396981,0.8498776981484352
Delaney solubility,4,2,0.7370747785614673,0.8438965054489642
Critical Heat Flux,1,2,0.8860441283949297,0.8836410197441006
Critical Heat Flux,2,3,0.896051215319373,0.8868161892955251
Critical Heat Flux,3,2,0.8580739277704147,0.8836410197441006
Critical Heat Flux,3,3,0.820001186352687,0.8868161892955251
Liver disease prediction,1,3,0.8,0.8303030303030303
Liver disease prediction,2,3,0.8787878787878788,0.8666666666666667
Liver disease prediction,3,3,0.7757575757575758,0.8121212121212121
Pumpkin Seeds,1,3,0.8751515151515151,0.8848484848484849
Pumpkin Seeds,3,1,0.7927272727272727,0.8848484848484849
Critical Heat Flux,4,2,0.8212042575388446,0.8836410197441006
Liver disease prediction,5,3,0.8545454545454545,0.8909090909090909
Liver disease prediction,1,1,0.7696969696969697,0.8121212121212121
lithium ion batteries,3,3,1.0,1.0
diabetes,2,1,0.7677165354330708,0.7598425196850394
diabetes,4,3,0.65748031496063,0.7677165354330708
Franck-Hertz,1,2,0.42050978805796646,0.46929699248120293
Franck-Hertz,1,3,0.5283474448268917,0.46929699248120293
Franck-Hertz,3,3,0.8055712562976802,0.46929699248120293
Franck-Hertz,4,2,0.9755456808767655,0.46929699248120293
Franck-Hertz,4,3,0.9755456808767655,0.46929699248120293
Franck-Hertz,5,1,0.9769293646328994,0.46929699248120293
Tunnel diode,3,2,0.9758336487780627,0.941733622559653
Tunnel diode,4,1,0.9163396138783252,0.941733622559653
Tunnel diode,4,2,0.8935135661670219,0.9103733110925771
Tunnel diode,4,3,0.8935135661670219,0.9103733110925771
survey lung cancer,1,2,0.9724137931034482,0.9724137931034482
oil spill,2,1,0.9862068965517241,0.9862068965517241
Solar Power Generation,3,2,0.9275548438410961,0.9221791895515516
oil spill,4,1,0.993103448275862,0.9862068965517241
PCOS,1,2,0.8770949720670391,0.888268156424581
kindey stone urine analysis,1,3,0.7777777777777778,0.8518518518518519
Hospital Mortality Prediction,2,3,0.8545454545454545,0.8727272727272727
concrete,7,1,0.9060142115891809,0.8881812593695267
iris,2,2,0.8,0.82
concrete,3,1,0.7491240941067063,0.8884068368127706
concrete,4,1,0.7418636266993917,0.8884068368127706
Delaney solubility,1,3,0.8709068763294372,0.8498776981484352
concrete,5,3,0.6465132269043822,0.754951518145837
Delaney solubility,2,2,0.8676115461542331,0.8498776981484352
Delaney solubility,3,1,0.7361578456024362,0.8498776981484352
Delaney solubility,3,3,0.7688278804396981,0.8498776981484352
Delaney solubility,4,1,0.7361578456024362,0.8498776981484352
Delaney solubility,4,3,0.7370747785614673,0.8438965054489642
Critical Heat Flux,1,1,0.8767667331999809,0.8836410197441006
Critical Heat Flux,1,3,0.8913847510635327,0.8868161892955251
Critical Heat Flux,2,1,0.8767667331999809,0.8836410197441006
Critical Heat Flux,2,2,0.8906124602518019,0.8836410197441006
Critical Heat Flux,3,1,0.8470847778663093,0.8836410197441006
Critical Heat Flux,4,3,0.8249690699279786,0.8868161892955251
Liver disease prediction,1,2,0.7636363636363637,0.8121212121212121
Liver disease prediction,2,2,0.8181818181818182,0.8666666666666667
Liver disease prediction,3,2,0.793939393939394,0.8424242424242424
Liver disease prediction,4,2,0.8606060606060606,0.8727272727272727
Liver disease prediction,4,3,0.8484848484848485,0.8666666666666667
Liver disease prediction,5,1,0.8121212121212121,0.9212121212121213
Pumpkin Seeds,1,1,0.8812121212121212,0.8848484848484849
Pumpkin Seeds,2,1,0.8812121212121212,0.8848484848484849
Pumpkin Seeds,2,3,0.8751515151515151,0.8812121212121212
Pumpkin Seeds,3,2,0.806060606060606,0.8812121212121212
Pumpkin Seeds,3,3,0.806060606060606,0.8812121212121212
Pumpkin Seeds,4,1,0.7927272727272727,0.8848484848484849
Pumpkin Seeds,4,2,0.8315151515151515,0.8812121212121212
water quality,1,1,0.9545454545454546,0.9652892561983472
water quality,1,2,0.9628099173553719,0.9652892561983472
water quality,1,3,0.9421875,0.94453125
water quality,3,1,0.
Query:
SELECT s."name", s."version", s."step",
       CASE
           WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
           WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
           ELSE 'other'
       END AS "status"
   FROM "STACKING"."STACKING"."MODEL_SCORE" s
   INNER JOIN (
       SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
       FROM "STACKING"."STACKING"."MODEL_SCORE"
       WHERE "model" != 'Stack'
       GROUP BY "name", "version", "step"
   ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
   WHERE s."model" = 'Stack'
   LIMIT 100;
Answer:
name,version,step,status
iris,1,1,other
iris,1,2,other
iris,1,3,other
iris,2,1,other
iris,2,3,other
iris,3,1,other
iris,3,2,other
iris,3,3,other
concrete,1,2,other
concrete,1,3,strong
concrete,2,1,other
concrete,2,3,strong
concrete,3,2,other
concrete,3,3,strong
concrete,4,2,other
concrete,4,3,other
concrete,5,1,other
concrete,5,2,other
iris,4,1,other
Delaney solubility,1,2,strong
concrete,2,2,other
iris,4,2,other
iris,4,3,other
iris,5,1,other
iris,5,2,other
iris,5,3,other
Delaney solubility,1,1,strong
Delaney solubility,2,1,strong
Delaney solubility,2,3,strong
Delaney solubility,3,2,other
Delaney solubility,4,2,other
Critical Heat Flux,1,2,strong
Critical Heat Flux,2,3,strong
Critical Heat Flux,3,2,other
Critical Heat Flux,3,3,other
Liver disease prediction,1,3,other
Liver disease prediction,2,3,strong
Liver disease prediction,3,3,other
Pumpkin Seeds,1,3,other
Pumpkin Seeds,3,1,other
Critical Heat Flux,4,2,other
Liver disease prediction,5,3,other
Liver disease prediction,1,1,other
lithium ion batteries,3,3,soft
diabetes,2,1,strong
diabetes,4,3,other
Franck-Hertz,1,2,other
Franck-Hertz,1,3,strong
Franck-Hertz,3,3,strong
Franck-Hertz,4,2,strong
Franck-Hertz,4,3,strong
Franck-Hertz,5,1,strong
Tunnel diode,3,2,strong
Tunnel diode,4,1,other
Tunnel diode,4,2,other
Tunnel diode,4,3,other
survey lung cancer,1,2,soft
oil spill,2,1,soft
Solar Power Generation,3,2,strong
oil spill,4,1,strong
PCOS,1,2,other
kindey stone urine analysis,1,3,other
Hospital Mortality Prediction,2,3,other
concrete,7,1,strong
iris,2,2,other
concrete,3,1,other
concrete,4,1,other
Delaney solubility,1,3,strong
concrete,5,3,other
Delaney solubility,2,2,strong
Delaney solubility,3,1,other
Delaney solubility,3,3,other
Delaney solubility,4,1,other
Delaney solubility,4,3,other
Critical Heat Flux,1,1,other
Critical Heat Flux,1,3,strong
Critical Heat Flux,2,1,other
Critical Heat Flux,2,2,strong
Critical Heat Flux,3,1,other
Critical Heat Flux,4,3,other
Liver disease prediction,1,2,other
Liver disease prediction,2,2,other
Liver disease prediction,3,2,other
Liver disease prediction,4,2,other
Liver disease prediction,4,3,other
Liver disease prediction,5,1,other
Pumpkin Seeds,1,1,other
Pumpkin Seeds,2,1,other
Pumpkin Seeds,2,3,other
Pumpkin Seeds,3,2,other
Pumpkin Seeds,3,3,other
Pumpkin Seeds,4,1,other
Pumpkin Seeds,4,2,other
water quality,1,1,other
water quality,1,2,other
water quality,1,3,other
water quality,3,1,other
Pumpkin Seeds,2,2,other
lithium ion batteries,1,1,soft
lithium ion batteries,1,2,soft
Query:
SELECT *
   FROM "STACKING"."STACKING"."MODEL"
   LIMIT 100;
Answer:
name,version,step,L1_model
iris,1,1,regression
iris,1,2,regression
iris,1,3,regression
iris,2,1,regression
iris,2,2,regression
iris,2,3,regression
iris,3,1,regression
iris,3,2,regression
iris,3,3,regression
concrete,1,1,regression
concrete,1,2,regression
concrete,1,3,regression
concrete,2,1,regression
concrete,2,2,regression
concrete,2,3,regression
concrete,3,1,regression
concrete,3,2,regression
concrete,3,3,regression
concrete,4,1,tree
concrete,4,2,tree
concrete,4,3,tree
concrete,5,1,tree
concrete,5,2,tree
concrete,5,3,tree
iris,4,1,tree
iris,4,2,tree
iris,4,3,tree
iris,5,1,tree
iris,5,2,tree
iris,5,3,tree
Delaney solubility,1,1,regression
Delaney solubility,1,2,regression
Delaney solubility,1,3,regression
Delaney solubility,2,1,regression
Delaney solubility,2,2,regression
Delaney solubility,2,3,regression
Delaney solubility,3,1,tree
Delaney solubility,3,2,tree
Delaney solubility,3,3,tree
Delaney solubility,4,1,tree
Delaney solubility,4,2,tree
Delaney solubility,4,3,tree
Critical Heat Flux,1,1,regression
Critical Heat Flux,1,2,regression
Critical Heat Flux,1,3,regression
Critical Heat Flux,2,1,regression
Critical Heat Flux,2,2,regression
Critical Heat Flux,2,3,regression
Critical Heat Flux,3,1,tree
Critical Heat Flux,3,2,tree
Critical Heat Flux,3,3,tree
Critical Heat Flux,4,1,tree
Critical Heat Flux,4,2,tree
Critical Heat Flux,4,3,tree
Liver disease prediction,1,1,regression
Liver disease prediction,1,2,regression
Liver disease prediction,1,3,regression
Liver disease prediction,2,1,regression
Liver disease prediction,2,2,regression
Liver disease prediction,2,3,regression
Liver disease prediction,3,1,regression
Liver disease prediction,3,2,regression
Liver disease prediction,3,3,regression
Liver disease prediction,4,1,regression
Liver disease prediction,4,2,regression
Liver disease prediction,4,3,regression
Liver disease prediction,5,1,tree
Liver disease prediction,5,2,tree
Liver disease prediction,5,3,tree
Pumpkin Seeds,1,1,regression
Pumpkin Seeds,1,2,regression
Pumpkin Seeds,1,3,regression
Pumpkin Seeds,2,1,regression
Pumpkin Seeds,2,2,regression
Pumpkin Seeds,2,3,regression
Pumpkin Seeds,3,1,tree
Pumpkin Seeds,3,2,tree
Pumpkin Seeds,3,3,tree
Pumpkin Seeds,4,1,tree
Pumpkin Seeds,4,2,tree
Pumpkin Seeds,4,3,tree
water quality,1,1,regression
water quality,1,2,regression
water quality,1,3,regression
water quality,2,1,regression
water quality,2,2,regression
water quality,2,3,regression
water quality,3,1,regression
water quality,3,2,regression
water quality,3,3,regression
lithium ion batteries,1,1,regression
lithium ion batteries,1,2,regression
lithium ion batteries,1,3,regression
lithium ion batteries,2,1,regression
lithium ion batteries,2,2,regression
lithium ion batteries,2,3,regression
lithium ion batteries,3,1,regression
lithium ion batteries,3,2,regression
lithium ion batteries,3,3,regression
diabetes,1,1,regression
Query:
SELECT m."L1_model", status_table."status"
   FROM "STACKING"."STACKING"."MODEL" m
   INNER JOIN (
       SELECT s."name", s."version", s."step",
           CASE
               WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
               WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
               ELSE 'other'
           END AS "status"
       FROM "STACKING"."STACKING"."MODEL_SCORE" s
       INNER JOIN (
           SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
           FROM "STACKING"."STACKING"."MODEL_SCORE"
           WHERE "model" != 'Stack'
           GROUP BY "name", "version", "step"
       ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
       WHERE s."model" = 'Stack'
   ) status_table ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
   LIMIT 100;
Answer:
L1_model,status
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,strong
regression,other
regression,other
regression,strong
regression,other
regression,other
regression,strong
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
regression,strong
regression,strong
regression,strong
regression,strong
regression,strong
regression,strong
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
regression,other
regression,strong
regression,strong
regression,other
regression,strong
regression,strong
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,strong
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
tree,other
tree,other
tree,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,other
tree,other
tree,other
tree,other
tree,other
tree,other
tree,other
regression,other
regression,other
regression,other
regression,other
regression,other
regression,soft
regression,other
regression,other
regression,other
regression,soft
regression,soft
regression,other
regression,other
regression,other
regression,other
regression,soft
regression,other
regression,soft
regression,strong
Query:
SELECT status_table."status", m."L1_model", COUNT(*) AS "occurrences"
    FROM "STACKING"."STACKING"."MODEL" m
    INNER JOIN (
        SELECT s."name", s."version", s."step",
            CASE
                WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
                WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
                ELSE 'other'
            END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) status_table ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
    GROUP BY status_table."status", m."L1_model"
    LIMIT 100;
Answer:
status,L1_model,occurrences
strong,regression,78
strong,tree,14
other,regression,99
other,tree,65
soft,regression,36
soft,tree,11
Query:
SELECT sub."status", sub."L1_model", sub."occurrences"
    FROM (
        SELECT status_table."status", m."L1_model", COUNT(*) AS "occurrences",
               ROW_NUMBER() OVER (PARTITION BY status_table."status" ORDER BY COUNT(*) DESC) AS rn
        FROM "STACKING"."STACKING"."MODEL" m
        INNER JOIN (
            SELECT s."name", s."version", s."step",
                CASE
                    WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
                    WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
                    ELSE 'other'
                END AS "status"
            FROM "STACKING"."STACKING"."MODEL_SCORE" s
            INNER JOIN (
                SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
                FROM "STACKING"."STACKING"."MODEL_SCORE"
                WHERE "model" != 'Stack'
                GROUP BY "name", "version", "step"
            ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
            WHERE s."model" = 'Stack'
        ) status_table ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
        GROUP BY status_table."status", m."L1_model"
    ) sub
    WHERE sub.rn = 1
    LIMIT 100;
Answer:
status,L1_model,occurrences
other,regression,99
soft,regression,36
strong,regression,78
Query:
SELECT DISTINCT "status"
    FROM (
        SELECT CASE
            WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
            WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
            ELSE 'other'
        END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) t
    LIMIT 100;
Answer:
status
other
strong
soft
Query:
SELECT "status", COUNT(*) AS "count"
    FROM (
        SELECT CASE
            WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
            WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
            ELSE 'other'
        END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) t
    GROUP BY "status"
    LIMIT 100;
Answer:
status,count
other,164
strong,92
soft,47
Query:
SELECT "L1_model", COUNT(*) AS "occurrences"
    FROM "STACKING"."STACKING"."MODEL"
    GROUP BY "L1_model"
    ORDER BY "occurrences" DESC
    LIMIT 100;
Answer:
L1_model,occurrences
regression,213
tree,90
Query:
SELECT status_table."status", m."L1_model", COUNT(*) AS "occurrences"
    FROM "STACKING"."STACKING"."MODEL" m
    INNER JOIN (
        SELECT s."name", s."version", s."step",
            CASE
                WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
                WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
                ELSE 'other'
            END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT "name", "version", "step", MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) status_table ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
    GROUP BY status_table."status", m."L1_model"
    ORDER BY status_table."status", "occurrences" DESC
    LIMIT 100;
Answer:
status,L1_model,occurrences
other,regression,99
other,tree,65
soft,regression,36
soft,tree,11
strong,regression,78
strong,tree,14
End Exploring Related Columns
Task: Which L1_model has the highest occurrence for each status ('strong,' where the maximum test score for non-'Stack' models is less than the 'Stack' score, and 'soft,' where it equals the 'Stack' score), and how many times does it occur?

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
Status,L1_model,Occurrences
strong,L1_model_name:str,num:int>0
soft,L1_model_name:str,num:int>0
(Attention: answer in two rows)
```

In this table, for each status ('strong' and 'soft'), we list the **L1_model** with the highest occurrence and the number of times (**Occurrences**) it occurs. Since we do not have the actual data, we've specified the data types for each field..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'STACKING': {'STACKING': ['EDA', 'FEATURE_IMPORTANCE', 'MODEL', 'MODEL_IMPORTANCE', 'MODEL_SCORE', 'PROBLEM', 'SOLUTION']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.
Be careful of information in nested columns. e.g. When it comes to completed purchase, `hits.eCommerceAction.action_type` Indicates the type of ecommerce action and '6' represents completed purchases.
Be careful one country may have different country_name and country_region in different columns in a database.
Don't be misled by examples. For instance, a question related to Android development on StackOverflow might include tags like 'android-layout,' 'android-activity,' or 'android-intent.' However, you should not limit your analysis to just these three tags; instead, consider all tags related to Android: "tags" LIKE '%android%'.

2025-01-24 18:42:38 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 18:42:38 - root - INFO - ```sql
SELECT sub."status", sub."L1_model", sub."occurrences"
FROM (
    SELECT 
        status_table."status", 
        m."L1_model", 
        COUNT(*) AS "occurrences",
        ROW_NUMBER() OVER (PARTITION BY status_table."status" ORDER BY COUNT(*) DESC) AS rn
    FROM "STACKING"."STACKING"."MODEL" m
    INNER JOIN (
        SELECT 
            s."name", 
            s."version", 
            s."step",
            CASE
                WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
                WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
                ELSE 'other'
            END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT 
                "name", "version", "step", 
                MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n 
        ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) status_table 
    ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
    WHERE status_table."status" IN ('strong', 'soft')
    GROUP BY status_table."status", m."L1_model"
) sub
WHERE sub.rn = 1
ORDER BY sub."status";
```
2025-01-24 18:42:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:42:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:42:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:42:39 - snowflake.connector.cursor - INFO - Number of results in first chunk: 2
2025-01-24 18:42:39 - snowflake.connector.connection - INFO - closed
2025-01-24 18:42:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:42:40 - root - INFO - itercount: 1
2025-01-24 18:42:40 - root - INFO - 0
2025-01-24 18:42:40 - root - INFO - results: 
status,L1_model,occurrences
soft,regression,36
strong,regression,78


2025-01-24 18:42:40 - root - INFO - Please check the answer again by reviewing Which L1_model has the highest occurrence for each status ('strong,' where the maximum test score for non-'Stack' models is less than the 'Stack' score, and 'soft,' where it equals the 'Stack' score), and how many times does it occur?, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
Status,L1_model,Occurrences
strong,L1_model_name:str,num:int>0
soft,L1_model_name:str,num:int>0
(Attention: answer in two rows)
```

In this table, for each status ('strong' and 'soft'), we list the **L1_model** with the highest occurrence and the number of times (**Occurrences**) it occurs. Since we do not have the actual data, we've specified the data types for each field. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
status,L1_model,occurrences
soft,regression,36
strong,regression,78
Current sql:
SELECT sub."status", sub."L1_model", sub."occurrences"
FROM (
    SELECT 
        status_table."status", 
        m."L1_model", 
        COUNT(*) AS "occurrences",
        ROW_NUMBER() OVER (PARTITION BY status_table."status" ORDER BY COUNT(*) DESC) AS rn
    FROM "STACKING"."STACKING"."MODEL" m
    INNER JOIN (
        SELECT 
            s."name", 
            s."version", 
            s."step",
            CASE
                WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
                WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
                ELSE 'other'
            END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT 
                "name", "version", "step", 
                MAX("test_score") AS "max_non_stack_test_score"
            FROM "STACKING"."STACKING"."MODEL_SCORE"
            WHERE "model" != 'Stack'
            GROUP BY "name", "version", "step"
        ) n 
        ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) status_table 
    ON m."name" = status_table."name" AND m."version" = status_table."version" AND m."step" = status_table."step"
    WHERE status_table."status" IN ('strong', 'soft')
    GROUP BY status_table."status", m."L1_model"
) sub
WHERE sub.rn = 1
ORDER BY sub."status";When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.

2025-01-24 18:43:08 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-12-01-preview "HTTP/1.1 200 OK"
2025-01-24 18:43:08 - root - INFO - ```sql
SELECT sub."status", sub."L1_model", sub."occurrences"
FROM (
    SELECT 
        status_table."status", 
        m."L1_model", 
        COUNT(*) AS "occurrences",
        ROW_NUMBER() OVER (
            PARTITION BY status_table."status" 
            ORDER BY COUNT(*) DESC NULLS LAST
        ) AS rn
    FROM "STACKING"."STACKING"."MODEL" m
    INNER JOIN (
        SELECT 
            s."name", 
            s."version", 
            s."step",
            CASE
                WHEN n."max_non_stack_test_score" < s."test_score" THEN 'strong'
                WHEN n."max_non_stack_test_score" = s."test_score" THEN 'soft'
                ELSE 'other'
            END AS "status"
        FROM "STACKING"."STACKING"."MODEL_SCORE" s
        INNER JOIN (
            SELECT 
                "name", "version", "step", 
                MAX("test_score") AS "max_non_stack_test_score"
                FROM "STACKING"."STACKING"."MODEL_SCORE"
                WHERE "model" != 'Stack'
                GROUP BY "name", "version", "step"
        ) n 
        ON s."name" = n."name" AND s."version" = n."version" AND s."step" = n."step"
        WHERE s."model" = 'Stack'
    ) status_table 
    ON m."name" = status_table."name" 
    AND m."version" = status_table."version" 
    AND m."step" = status_table."step"
    WHERE status_table."status" IN ('strong', 'soft')
    GROUP BY status_table."status", m."L1_model"
) sub
WHERE sub.rn = 1
ORDER BY sub."status";
```
2025-01-24 18:43:08 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-24 18:43:08 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-24 18:43:08 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-24 18:43:09 - snowflake.connector.cursor - INFO - Number of results in first chunk: 2
2025-01-24 18:43:09 - snowflake.connector.connection - INFO - closed
2025-01-24 18:43:09 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-24 18:43:10 - root - INFO - itercount: 2
2025-01-24 18:43:10 - root - INFO - 0
2025-01-24 18:43:10 - root - INFO - Total iteration counts: 2
