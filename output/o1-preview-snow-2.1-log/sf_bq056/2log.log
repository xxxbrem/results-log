2025-01-19 22:51:51 - openai._base_client - INFO - Retrying request to /chat/completions in 0.415743 seconds
2025-01-19 22:52:32 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:52:32 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:52:32 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:52:32 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:52:34 - snowflake.connector.cursor - INFO - Number of results in first chunk: 56
2025-01-19 22:52:34 - snowflake.connector.connection - INFO - closed
2025-01-19 22:52:34 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:52:34 - root - INFO - SQL:
-- 1. List the state names to confirm the presence of 'California'.
SELECT "state_name"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
LIMIT 1000;
Results:
state_name
Guam
Puerto Rico
Commonwealth of the Northern Mariana Islands
United States Virgin Islands
American Samoa
Rhode Island
Massachusetts
Connecticut
Vermont
New Hampshire
Maine
New York
New Jersey
Pennsylvania
Wisconsin
Indiana
Illinois
Ohio
Michigan
South Dakota
Nebraska
Kansas
North Dakota
Iowa
Minnesota
Missouri
Florida
Virginia
South Carolina
Delaware
North Carolina
District of Columbia
Georgia
West Virginia
Maryland
Mississippi
Kentucky
Alabama
Tennessee
Oklahoma
Arkansas
Louisiana
Texas
Utah
Montana
New Mexico
Idaho
Wyoming
Colorado
Arizona
Nevada
Oregon
California
Alaska
Washington
Hawaii

2025-01-19 22:52:34 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:52:34 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:52:34 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:52:37 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 22:52:37 - snowflake.connector.connection - INFO - closed
2025-01-19 22:52:37 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:52:37 - root - INFO - SQL:
-- 2. Retrieve the geometry of California.
SELECT "state_geom"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
WHERE "state_name" = 'California'
LIMIT 1000;
Results:
Too long, hard cut:
state_geom
"bytearray(b'\x01\x06\x00\x00\x00\x07\x00\x00\x00\x01\x03\x00\x00\x00\x01\x00\x00\x00\x88\x01\x00\x00\xcf\x1b\xb5\xc2\xf4\xdd]\xc0\x12\rR\xf0\x14\x08A@\x99\x87\xda6\x8c\xde]\xc0R\x80(\x981\tA@\xb2\xf6w\xb6G\xdf]\xc0\xdc\x80\xcf\x0f#\nA@\x8b\x05L\xe0\xd6\xdf]\xc0LJA\xb7\x97\nA@""q\x8f\xa5\x0f\xe0]\xc0\xf4\xd3\x7f\xd6\xfc\nA@w\x85>X\xc6\xe0]\xc0\xf8\xbdM\x7f\xf6\x0bA@\xbf\xa41ZG\xe1]\xc0r1\x06\xd6q\x0cA@\xe9\xf7\x8b\xd9\x92\xe1]\xc0\x11i\x1b\x7f\xa2\x0cA@\x1e\xe7\xc4\x1e\xda\xe1]\xc0\xa7\xb1\xbd\x16\xf4\x0cA@\xe2""\xf7tu\xe2]\xc0_\xc9U,~\rA@\xed\xbf\\\x8b\x16\xe3]\xc0H\x08V\xd5\xcb\rA@#\xfc\x19\xde\xac\xe3]\xc0\xac\x9f\xfe\xb3\xe6\rA@\xc9\xca/\x831\xe4]\xc0WA\x0ct\xed\rA@\x10\x07\tQ\xbe\xe4]\xc0\xde\xa2\x93\xa5\xd6\rA@\xec\x89\xae\x0b?\xe5]\xc0\x00\x12M\xa0\x88\rA@u_\xcelW\xe5]\xc0\xa6*mq\x8d\rA@1\x9dd\xab\xcb\xe5]\xc0\x7f\x9b\xc5\x8b\x85\rA@lHj\xa1d\xe6]\xc0\x0b\xc7\xf3\x19P\rA@\xa6\xbe\xba*P\xe7]\xc0\x83\x16\x120\xba\x0cA@\xcd\xd3G\xe0\x0f\xe8]\xc0\xfa\xb7\xcb~\xdd\x0bA@\xaf\xd7\x82\xde\x1b\xe8]\xc0\xec~\x15\xe0\xbb\x0bA@i\x8e\xac\xfc2\xe8]\xc0r\xb9\xc1P\x87\x0bA@i\xfc\xc2+I\xe8]\xc0\xe3\x0f\x06\x9e{\x0bA@\x1a\x1e\x89\x97\xa7\xe8]\xc0!\xc2\xbf\x08\x1a\x0bA@?$\n-\xeb\xe8]\xc0\x0b~\x1bb\xbc\nA@ \xd9\xearJ\xe9]\xc0\xcep\x03>?\nA@\xef\xc9\xc3B\xad\xe9]\xc06Y\xa3\x1e\xa2\tA@\xbf\x88\xb6c\xea\xe9]\xc0zq\xe2\xab\x1d\tA@(\x9f\x1e\xdb2\xea]\xc0\xc1\xa1\xb7xx\tA@\xaf\xdeo\xb4\xe3\xea]\xc0\x19\xac8\xd5Z\nA@A_z\xfbs\xeb]\xc0\x91|%\x90\x12\x0bA@S\xf7\x8f\x85\xe8\xeb]\xc0h\xc4\xcc>\x8f\x0bA@\x839\x08:Z\xec]\xc0\x87\xf2\x05-$\x0cA@\xc8\xff\xe4\xef\xde\xec]\xc0\x11\xb4\xc9\xe1\x93\x0cA@6\xae\x7f\xd7g\xed]\xc0gur\x86\xe2\x0cA@\xdb\xc9nf\xf4\xed]\xc0\x18/\xdd$\x06\rA@\xd51uWv\xee]\xc0\xd2\x9f\xfdH\x11\rA@%\x13~\xa9\x9f\xee]\xc0\xf9\xed\xeb\xc09\rA@\x99\xcc?\xfa&\xef]\xc0\xebJ\xcbH\xbd\rA@\x98\x90\x9d\xb7\xb1\xef]\xc0\x03\xc9;\x872\x0eA@\xaf\xba\x9c\x12\x10\xf0]\xc0""\x0fD\x16i\x0eA@\x97x\xce\x16\x10\xf0]\xc0P8\xbb\xb5L\x0eA@_\xa1\x0f\x96\xb1\xf0]\xc0\xa0\xfc\xdd;j\x0eA@\xeed\xfe\xd17\xf1]\xc0\x0f\x02\xf2%T\x0eA@Q\xf9\xd7\xf2\xca\xf1]\xc0tI\xd5v\x13\x0eA@\x99\xa42\xc5\x1c\xf2]\xc0W\xc6\x86n\xf6\rA@\xb2\xa1\x9b\xfd\x81\xf2]\xc0Y\x868\xd6\xc5\rA@\xb2q\x8b\xf9\xb9\xf2]\xc0V\x0e-\xb2\x9d\rA@\x8f\x05\x13\x7f\x14\xf3]\xc0\xe5\x01,\xf2\xeb\rA@\xb3\x9e\xe8\xba\xf0\xf3]\xc0\n\x85\x088\x84\x0eA@\x15L\xc3\xf0\x11\xf5]\xc0!\xfc\x8b\xa01\x0fA@\x14\x9de\x16\xa1\xf5]\xc0C\x12\xbd\x8cb\x0fA@A\xc1\xc5\x8a\x1a\xf6]\xc0n\xc2\xbd2o\x0fA@+\x96\xe9\x97\x88\xf6]\xc0r\x9c\xdb\x84{\x0fA@\xba\xc6\xf5\xef\xfa\xf6]\xc0\x04\xdb\x88\'\xbb\x0fA@Wv\xc1\xe0\x9a\xf7]\xc0\x9f\xf7\xc6\x10\x00\x10A@W\xb2c#\x10\xf8]\xc0U\xd2\x8ao(\x10A@W\xb2c#\x10\xf8]\xc0x:W\x94\x12\x10A@\x0b\x9e\xd0\xebO\xf8]\xc0p\xca\xdc|#\x10A@\xde Z+\xda\xf8]\xc0\xd6\x14\xc8\xec,\x10A@X\xb3\\6:\xf9]\xc0Q`\x01L\x19\x10A@\x8d\xa2\x95{\x81\xf9]\xc0\xee\xaa\x07\xccC\x10A@\xc9D\xd8\xf0\xf4\xf9]\xc0zIc\xb4\x8e\x10A@\x01VG\x8et\xfa]\xc0\xe4\xd1\x8d\xb0\xa8\x10A@\x81\xeb\x8a\x19\xe1\xfa]\xc0}\xeb\xc3z\xa3\x10A@\x05l\x95`q\xfb]\xc0\xae\xd7\xf4\xa0\xa0\x10A@""?\xa9\xf6\xe9\xfb]\xc04/\x87\xddw\x10A@Y\xae\xb7\xcdT\xfc]\xc0\xbb\xe8+H3\x10A@>\xc0!T\xa9\xfc]\xc0.\x84\x9c\xf7\xff\x0fA@\xc6Q\xb9\x89Z\xfd]\xc0j\xb93\x13\x0c\x0fA@!\x8f\xe0F\xca\xfd]\xc0<k\xb7]h\x0eA@%\x80)\x03\x07\xfe]\xc0""\xc6k^\xd5\rA@\xfb\xb9\xa1);\xfe]\xc0R\x05\xa3\x92:\rA@\xfb\xb7Y\xbcX\xfe]\xc0L\xd5=\xb2\xb9\x0cA@\x83\xeb\x18W\\\xfe]\xc0\xf6\x8e\x1a\x13b\x0cA@\xea\xd9:8\xd8\xfe]\xc0\xdd\x01\x9e\xb4p\x0bA@\xb6\x86R{\x11\xff]\xc0\x8en\x84EE\nA@\x18ip[[\xff]\xc0\x8e>\xe6\x03\x02\tA@\xa4\x933\x14w\xff]\xc0GG9\x98M\x08A@\\`\x1d\xc7\x0f\x00^\xc0\x10[z4\xd5\tA@\\`\x1d\xc7\x0f\x00^\xc0b\x12.\xe4\x11\nA@\xd3o\xedDI\x00^\xc0\x92[\x93nK\nA@\xe6\x05\xd8G\xa7\x00^\xc0\x97:\xc8\xeb\xc1\nA@""\xcb\x82\x89?\x01^\xc0\x9e\xa2\xeaW:\x0bA@\xbcf\x80\x0b\xb2\x01^\xc0\xfb\xfdb\xb6d\x0bA@\xad\xa4\x15\xdfP\x02^\xc0\x15\xe5\xd2\xf8\x85\x0bA@ R\x9a\xcd\xe3\x02^\xc0#i7\xfa\x98\x0bA@a\x02E,b\x03^\xc0\xf6\x1cX\x8e\x90\x0bA@\x0c}\xb0\x8c\r\x04^\xc0&\xff\x93\xbf{\x0bA@\x06\x81\x95C\x8b\x04^\xc0\xf266;R\x0bA@\xffV\xb2c#\x05^\xc0\xbb\xab\x1e0\x0f\x0bA@\xbe\x8e\xc6\xa1~\x05^\xc0\xbe1\x04\x00\xc7\nA@\x065|\x0b\xeb\x05^\xc0\x8f\xf3\xfe?N\nA@\xbf\x00\x89&P\x06^\xc0\xfa\x02z\xe1\xce\tA@\xdd\na5\x96\x06^\xc0\xc6\xdf\xf6\x04\x89\tA@D\x08V\xd5\xcb\x06^\xc0\xb3\xff\x01\xd6\xaa\tA@E\xe4\x823\xf8\x06^\xc0\xc7@\x9e]\xbe\tA@_|\xd1\x1e/\x07^\xc0\xf8\xe1 !\xca\tA@*\xd4a\x85[\x07^\xc0\x96\xb1\xa1\x9b\xfd\tA@\xf8\xcc >\xb0\x07^\xc0\xf1#~\xc5\x1a\nA@\x05X\xe4\xd7\x0f\x08^\xc0\x94\xb7#\x9c\x16\nA@\xf5\x84%\x1eP\x08^\xc0U\xc8\x95z\x16\nA@\xe2\xb04\xf0\xa3\x08^\xc0\x82L2r\x16\nA@\xadE\xd2n\xf4\x08^\xc0\x0f C\xc7\x0e\nA@\x03\xcf\xbd\x87K\t^\xc0\xd6O\xffY\xf3\tA@\x9d\xf9cZ\x9b\t^\xc03+\xdb\x87\xbc\tA@r5\xb2+-\n^\xc0\xe1\xb3up\xb0\tA@{\xdb\xda\xc2\xf3\n^\xc0\xa4\x1a\xf6{b\tA@""\xc4\x95\xb3w\x0b^\xc0-\x0f\xd2S\xe4\x08A@\xbdk\xd0\x97\xde\x0b^\xc0\xa9+\x9f\xe5y\x08A@`\x99\xb7\xea:\x0c^\xc0;\x0f\xee\xce\xda\x07A@\x81l ]l\x0c^\xc0PKs+\x84\x07A@X\x9e\xce\x15\xa5\x0c^\xc0\x95!\x8euq\x07A@\x

2025-01-19 22:52:37 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:52:37 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:52:37 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:52:39 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-19 22:52:39 - snowflake.connector.connection - INFO - closed
2025-01-19 22:52:39 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:53:25 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:53:25 - root - INFO - ```sql
SELECT "id", "all_tags":"highway" AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":"highway" IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
LIMIT 1000;
```
2025-01-19 22:53:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:53:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:53:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:53:26 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-19 22:53:26 - snowflake.connector.connection - INFO - closed
2025-01-19 22:53:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:54:00 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:54:00 - root - INFO - ```sql
SELECT t."id", t."all_tags"['highway']::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t
WHERE t."all_tags"['highway']::STRING IS NOT NULL
LIMIT 1000;
```
2025-01-19 22:54:00 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:54:00 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:54:00 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:54:02 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-19 22:54:02 - snowflake.connector.connection - INFO - closed
2025-01-19 22:54:02 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:54:59 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:54:59 - root - INFO - ```sql
SELECT t."id", t."all_tags"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t
LIMIT 1000;
```
2025-01-19 22:54:59 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:54:59 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:54:59 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:55:01 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-19 22:55:02 - snowflake.connector.connection - INFO - closed
2025-01-19 22:55:02 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:55:54 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:55:54 - root - INFO - SQL:
SELECT t."id", t."all_tags"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t
LIMIT 1000;
Results:
Too long, hard cut:
id,all_tags
173040551,"[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
173040548,"[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
173040547,"[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
10674916,"[
  {
    ""key"": ""NHS"",
    ""value"": ""yes""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""trunk""
  },
  {
    ""key"": ""lanes"",
    ""value"": ""2""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 65""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  },
  {
    ""key"": ""tiger:cfcc"",
    ""value"": ""A21; A31""
  },
  {
    ""key"": ""tiger:county"",
    ""value"": ""Tulare, CA""
  },
  {
    ""key"": ""tiger:name_base"",
    ""value"": ""State Highway 65; Highway 65; State Highway 65""
  },
  {
    ""key"": ""tiger:name_base_1"",
    ""value"": ""State Highway 65""
  },
  {
    ""key"": ""tiger:name_direction_prefix"",
    ""value"": ""N""
  },
  {
    ""key"": ""tiger:reviewed"",
    ""value"": ""no""
  }
]"
242834036,"[
  {
    ""key"": ""NHS"",
    ""value"": ""yes""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""trunk""
  },
  {
    ""key"": ""lanes"",
    ""value"": ""2""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 65""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  },
  {
    ""key"": ""tiger:cfcc"",
    ""value"": ""A21; A31""
  },
  {
    ""key"": ""tiger:county"",
    ""value"": ""Tulare, CA""
  },
  {
    ""key"": ""tiger:name_base"",
    ""value"": ""State Highway 65; Highway 65; State Highway 65""
  },
  {
    ""key"": ""tiger:name_base_1"",
    ""value"": ""State Highway 65""
  },
  {
    ""key"": ""tiger:name_direction_prefix"",
    ""value"": ""N""
  },
  {
    ""key"": ""tiger:reviewed"",
    ""value"": ""no""
  }
]"
184549563,"[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""lanes"",
    ""value"": ""2""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 43;CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
41501711,"[
  {
    ""key"": ""NHS"",
    ""value"": ""yes""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""trunk""
  },
  {
    ""key"": ""lanes"",
    ""value"": ""2""
  },
  {
    ""key"": ""name"",
    ""value"": ""Porterville Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 65""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  },
  {
    ""key"": ""tiger:cfcc"",
    ""value"": ""A31""
  },
  {
    ""key"": ""tiger:county"",
    ""value"": ""Kern, CA""
  },
  {
    ""key"": ""tiger:name_base"",
    ""value"": ""State Route 65""
  },
  {
    

2025-01-19 22:55:54 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:55:54 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:55:54 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:55:55 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-19 22:55:55 - snowflake.connector.connection - INFO - closed
2025-01-19 22:55:56 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:55:56 - root - INFO - SQL:
-- 4. Extract the 'highway' type for each way.
SELECT "id", "all_tags":highway::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000
Results:
Too long, hard cut:
id,highway_type
173040551,
173040548,
173040547,
10674916,
242834036,
184549563,
41501711,
211929584,
196505970,
420253598,
306458161,
172557065,
10441459,
10570561,
329397904,
329397905,
614148150,
10441460,
167891278,
167891286,
10441474,
268669674,
988752632,
172557067,
854182808,
988752631,
988752640,
167891268,
432591061,
988752635,
988752630,
988752634,
988752638,
119334084,
115023390,
128133647,
215373337,
416730752,
211929583,
215373338,
527757555,
119334044,
27054486,
119334050,
922801797,
416730770,
119334023,
674108455,
674108452,
435488138,
435488159,
119334087,
10400404,
306458163,
306458175,
306458178,
10562019,
10441397,
115016149,
345650208,
306458186,
720592801,
720592802,
720592803,
306458181,
16256056,
117809218,
33194954,
184247603,
16263509,
261460910,
268669675,
268782634,
268669673,
268782631,
306458158,
306458157,
306458159,
306458160,
306458155,
306458156,
242834035,
420253599,
10406392,
215373335,
215373336,
172557070,
988752636,
432591052,
988752639,
178944703,
527757553,
115016200,
306458184,
160263703,
268782632,
268782633,
173040552,
173040550,
173040549,
42047223,
119237663,
119237652,
806364008,
172998476,
614148157,
614148186,
614148189,
614148156,
178685971,
178685967,
184198340,
178685970,
178685966,
178685973,
178685974,
178685969,
184198337,
178685956,
716004770,
716004900,
970314297,
835417674,
716004764,
970314300,
751812640,
716004898,
184081688,
716004771,
835417673,
970314299,
970314298,
184081700,
716005664,
186248362,
42046405,
184081692,
716004901,
42046402,
119237655,
716005662,
172211747,
172211755,
60417032,
253128477,
60417191,
435094876,
435094874,
184081598,
185142210,
106447192,
119524714,
184081698,
106801230,
751753003,
751753002,
184081694,
119237654,
184549524,
60920112,
844750910,
60920183,
844750920,
184549516,
60920256,
844750906,
844750922,
172777678,
64378425,
30613315,
435580191,
106871218,
33194941,
33194942,
106871216,
186090924,
206524851,
175178755,
206524855,
206524854,
41288977,
175178758,
614148188,
806364007,
614148167,
48759000,
614148165,
419726772,
48754610,
48768739,
36055571,
36055569,
173041187,
48768736,
48754613,
48754623,
48759039,
246449638,
117445687,
48754621,
117445694,
867614403,
867174737,
435094863,
10561000,
435094864,
60418055,
32869993,
435094862,
60418057,
32870277,
435094866,
188720945,
751753004,
60417029,
751753005,
867174736,
60418170,
435094861,
867313404,
867313401,
867313403,
32869991,
32870280,
60418168,
253128480,
60417602,
751753009,
66165269,
751753008,
60417498,
751753007,
184081657,
188720933,
184081651,
45536127,
106447194,
170080273,
184081618,
170080277,
185142209,
172050957,
106706501,
106706503,
106735170,
10570562,
115023385,
306458174,
306458171,
306458173,
171255338,
306458166,
306458169,
306458172,
306458165,
306458170,
778166637,
306458162,
27190718,
119334077,
346085717,
346085707,
184515005,
115020617,
306458167,
525602185,
525602182,
178685962,
178685961,
178685963,
178685960,
178685964,
178685958,
106706502,
106706500,
173041190,
806364005,
42046404,
42046406,
178685957,
178685959,
253128478,
32870276,
172211751,
435094875,
435094873,
172211745,
106801329,
106801242,
60920245,
844750921,
844750911,
232438352,
844750907,
844750923,
64378435,
64378426,
64378423,
64378429,
30613302,
30613316,
41288907,
175178757,
175178756,
41288978,
206524852,
206524853,
806364006,
48768740,
48768738,
173041186,
419726773,
48754633,
48754628,
48759038,
48754625,
48754634,
48759043,
106871212,
106871211,
253128479,
188720938,
60615868,
188720941,
32870279,
60418175,
32869992,
60418167,
60418056,
60417598,
172211742,
60417031,
435094867,
32869990,
106447196,
106447193,
172050955,
172050956,
306458164,
171255346,
115020618,
16234409,
186090931,
306458185,
16256106,
186837200,
16261077,
322886707,
210933416,
196505960,
60615708,
10564867,
184247605,
60418461,
346547493,
867313400,
60615707,
60418479,
60418460,
16249605,
210933437,
210933402,
210933429,
210933415,
322886708,
322886709,
33194946,
574424565,
210933419,
841932509,
44580796,
73965789,
175370308,
175355315,
72854930,
72950236,
72947355,
72951344,
72950740,
527212979,
857504156,
73964711,
329397918,
329397919,
73975726,
73975239,
75127005,
75133252,
75126854,
75124656,
75129487,
75132484,
75125164,
75126666,
75119572,
75122001,
75120999,
75121771,
75133436,
75122590,
75118668,
75127336,
75122302,
73966595,
73966225,
73970011,
73966592,
75123472,
73969462,
73966393,
73966165,
73969363,
73967189,
73970989,
73965813,
73967411,
73966508,
73967834,
73969091,
75142119,
75140704,
75142576,
75140850,
72848399,
72948282,
72854282,
72848495,
72848961,
73975397,
75142107,
73974635,
73975244,
72853338,
72948914,
72951313,
72853797,
72853430,
72853530,
72853322,
72852955,
75126237,
75123801,
75133031,
75120959,
75131815,
72949183,
72950693,
72949962,
75119193,
75131906,
75123722,
75123686,
72947681,
72855309,
72855017,
73970389,
73966651,
73970305,
73966769,
73971042,
73966534,
73966081,
75133682,
72949916,
72946474,
72950593,
72947649,
72947815,
72948976,
75123752,
7

2025-01-19 22:55:56 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:55:56 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:55:56 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:55:57 - snowflake.connector.cursor - INFO - Number of results in first chunk: 0
2025-01-19 22:55:57 - snowflake.connector.connection - INFO - closed
2025-01-19 22:55:57 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:56:49 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:56:49 - root - INFO - ```sql
-- 4. Extract the 'highway' type for each way.
SELECT "id", "all_tags":'highway'::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000;
```

```sql
-- 5. List distinct highway types available in the data.
SELECT DISTINCT "all_tags":'highway'::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":'highway' IS NOT NULL
LIMIT 1000;
```

```sql
-- 6. Find ways that have a 'bridge' tag.
SELECT "id", "all_tags":'bridge'::STRING AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":'bridge' IS NOT NULL
LIMIT 1000;
```

```sql
-- 7. Retrieve the nodes associated with each way.
SELECT "id", "nodes"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000;
```

```sql
-- 8. Get the geometry data for ways.
SELECT "id", "geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000;
```

```sql
-- 9. Select ways classified as 'motorway'.
SELECT "id", "all_tags":'highway'::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":'highway'::STRING = 'motorway'
LIMIT 1000;
```

```sql
-- 10. Find ways that have 'bridge' set to 'yes'.
SELECT "id", "all_tags":'bridge'::STRING AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":'bridge'::STRING = 'yes'
LIMIT 1000;
```

```sql
-- 11. Retrieve ways classified as 'primary' roads.
SELECT "id", "all_tags":'highway'::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":'highway'::STRING = 'primary'
LIMIT 1000;
```

```sql
-- 12. List ways with their 'highway' and 'bridge' tags.
SELECT "id",
       "all_tags":'highway'::STRING AS "highway_type",
       "all_tags":'bridge'::STRING AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000;
```

```sql
-- 13. Get ways classified as 'residential'.
SELECT "id", "all_tags":'highway'::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":'highway'::STRING = 'residential'
LIMIT 1000;
```

```sql
-- 14. Retrieve ways with 'highway' classifications and their geometries.
SELECT "id",
       "all_tags":'highway'::STRING AS "highway_type",
       "geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":'highway' IS NOT NULL
LIMIT 1000;
```

```sql
-- 15. List all available state names to verify state data.
SELECT DISTINCT "state_name"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
LIMIT 1000;
```

These corrected queries address the syntax issues by enclosing the keys (e.g., `'highway'`, `'bridge'`) in single quotes when accessing elements within the `VARIANT` column `"all_tags"`. This is the proper syntax for extracting values from a `VARIANT` column in Snowflake SQL.

Additionally, when comparing values in the `WHERE` clause, the keys are correctly cast to `STRING` to ensure accurate comparisons. These adjustments should allow the queries to return data without errors.
2025-01-19 22:56:49 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:56:49 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:56:49 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:56:50 - snowflake.connector.connection - INFO - closed
2025-01-19 22:56:50 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:57:19 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:57:19 - root - INFO - ```sql
SELECT DISTINCT s.value:"value"::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'highway'
LIMIT 1000;
```
2025-01-19 22:57:19 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:57:19 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:57:19 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:57:21 - snowflake.connector.cursor - INFO - Number of results in first chunk: 28
2025-01-19 22:57:21 - snowflake.connector.connection - INFO - closed
2025-01-19 22:57:21 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:58:12 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:58:12 - root - INFO - SQL:
SELECT DISTINCT s.value:"value"::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'highway'
LIMIT 1000;
Results:
highway_type
rest_area
path
motorway_link
primary
footway
unclassified
trunk
services
raceway
tertiary_link
escape
platform
trunk_link
service
secondary
track
cycleway
bridleway
steps
primary_link
residential
motorway
tertiary
pedestrian
construction
secondary_link
living_street
road

2025-01-19 22:58:12 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:58:12 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:58:12 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:58:14 - snowflake.connector.cursor - INFO - Number of results in first chunk: 735
2025-01-19 22:58:14 - snowflake.connector.connection - INFO - closed
2025-01-19 22:58:14 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:58:14 - root - INFO - SQL:
-- 6. Find ways that have a 'bridge' tag.
SELECT t."id", s.value:"value"::STRING AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'bridge'
LIMIT 1000
Results:
Too long, hard cut:
id,bridge_tag
242834035,yes
420253599,yes
10406392,yes
215373335,yes
215373336,yes
172557070,yes
988752636,yes
432591052,yes
988752639,yes
178944703,yes
527757553,yes
115016200,yes
306458184,yes
160263703,yes
268782632,yes
268782633,yes
173040552,yes
173040550,yes
173040549,yes
42047223,yes
178685962,yes
178685961,yes
178685963,yes
178685960,yes
178685964,yes
178685958,yes
106706502,yes
106706500,yes
173041190,yes
806364005,yes
42046404,yes
42046406,yes
178685957,yes
178685959,yes
253128478,yes
32870276,yes
172211751,yes
435094875,yes
435094873,yes
172211745,yes
106801329,yes
106801242,yes
60920245,yes
844750921,yes
844750911,yes
232438352,yes
844750907,yes
844750923,yes
64378435,yes
64378426,yes
64378423,yes
64378429,yes
30613302,yes
30613316,yes
41288907,yes
175178757,yes
175178756,yes
41288978,yes
206524852,yes
206524853,yes
806364006,yes
48768740,yes
48768738,yes
173041186,yes
419726773,yes
48754633,yes
48754628,yes
48759038,yes
48754625,yes
48754634,yes
48759043,yes
106871212,yes
106871211,yes
253128479,yes
188720938,yes
60615868,yes
188720941,yes
32870279,yes
60418175,yes
32869992,yes
60418167,yes
60418056,yes
60417598,yes
172211742,yes
60417031,yes
435094867,yes
32869990,yes
106447196,yes
106447193,yes
172050955,yes
172050956,yes
306458164,yes
171255346,yes
115020618,yes
60418479,yes
60418460,yes
48768379,yes
10681439,yes
10682073,yes
943852270,yes
169402960,yes
916207541,yes
252712493,yes
502746645,yes
115016167,yes
527212933,yes
917372520,yes
872385512,yes
527446097,yes
844750996,yes
844750943,yes
844750941,yes
844740474,yes
844750883,yes
367485926,yes
479615868,yes
458160892,yes
479615870,yes
399698033,yes
270779701,yes
27054754,yes
220802168,yes
177353927,yes
173192914,yes
10562381,yes
205022502,yes
435580580,yes
435580578,yes
173188818,yes
41503090,yes
385776470,yes
60417718,yes
32122176,yes
173964341,yes
475170377,yes
204582274,yes
204596980,yes
32122207,yes
204596978,yes
10561582,yes
204568775,yes
32122182,yes
231825180,yes
173965462,yes
432578120,yes
10561597,yes
204586757,yes
227760260,yes
234869325,yes
206501927,yes
905577535,yes
239429542,yes
239429553,yes
239429543,yes
239429552,yes
111136757,yes
178685977,yes
186248346,yes
276456955,yes
427572072,yes
526981504,yes
304002371,yes
972376946,yes
304002294,yes
304002303,yes
972776271,yes
944242755,yes
347169106,yes
347169112,yes
817278336,yes
766276869,yes
179861110,yes
179861108,yes
179861106,yes
347766863,trestle
326126628,yes
697267657,yes
697267655,yes
844750992,yes
697268470,yes
270367342,yes
178094512,yes
369138735,yes
220771286,yes
458330188,yes
458330179,yes
458330184,yes
385080797,yes
210272474,yes
286681032,yes
410073217,yes
221151320,boardwalk
175764191,yes
464790274,yes
287774543,yes
399553039,yes
331307995,yes
262468076,yes
320838299,yes
364964169,yes
403686650,yes
273356384,yes
252712470,yes
761924556,yes
253003136,yes
252847903,yes
284646993,yes
355535354,yes
329344786,yes
48759011,yes
253128482,yes
364964153,yes
253003154,yes
170977876,yes
447082958,yes
364026057,yes
253003118,yes
253003135,yes
252776645,yes
252776625,yes
10575744,yes
252776614,yes
253003123,yes
252776613,yes
210272460,yes
252776612,yes
252776647,yes
252776642,yes
253003181,yes
253003120,yes
385924718,yes
252776640,yes
252776636,yes
252776651,yes
252776650,yes
253128485,yes
385484592,yes
252712466,yes
60418149,yes
32869989,yes
401493932,yes
206511975,yes
200173941,yes
10562010,yes
231085364,yes
231085365,yes
207010763,yes
943830878,yes
215798184,yes
215798172,yes
204764151,yes
204764143,yes
196474289,yes
246449633,yes
246449632,yes
216604377,yes
219879949,yes
200283888,yes
216950690,yes
241755252,yes
241755249,yes
215999958,yes
215999967,yes
215589765,yes
215373330,yes
204764158,yes
204764161,yes
204764159,yes
200177368,yes
204764162,yes
200177366,yes
944171945,yes
200173922,yes
936696413,yes
215041660,yes
213514381,yes
213735078,yes
239435184,yes
64378430,yes
196474253,yes
242599721,yes
206501938,yes
196474228,yes
649498207,yes
106443455,yes
678970349,yes
252712494,yes
435225676,yes
173195028,yes
678970350,yes
178094465,yes
917344348,yes
248595302,yes
791959169,yes
186263617,yes
254286132,yes
254286104,yes
254286129,yes
196474239,yes
435579497,yes
164754707,yes
253128498,yes
188720930,yes
778966215,yes
778966212,yes
348400712,yes
173216107,yes
10567028,yes
200167278,yes
791959167,yes
972083263,yes
796770743,yes
797374653,yes
348433032,yes
968202936,yes
968202926,yes
968202931,yes
764333248,yes
805398646,yes
968153274,yes
968153278,yes
968153280,yes
968153272,yes
800394635,yes
527757548,yes
419436090,yes
794269821,yes
221151318,yes
345650211,yes
985817970,yes
978487091,yes
844750749,yes
844750751,yes
967900437,yes
967900434,yes
950288311,yes
809556768,yes
118625991,yes
180906599,yes
181323831,yes
347754885,yes
804049351,yes
804069766,yes
817278326,yes
798438377,yes
527446103,yes
832069938,yes
951976453,yes
951976451,yes
882476910,yes
944614187,yes
968202939,yes
182471288,yes
968425558,yes
968425556,yes
968425554,yes
276461637,yes
30737228,viaduct
534759539,yes

2025-01-19 22:58:14 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:58:14 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:58:14 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:58:16 - snowflake.connector.cursor - INFO - Number of results in first chunk: 191
2025-01-19 22:58:17 - snowflake.connector.connection - INFO - closed
2025-01-19 22:58:18 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:58:18 - root - INFO - SQL:
-- 7. Retrieve the nodes associated with each way.
SELECT "id", "nodes"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000
Results:
Too long, hard cut:
id,nodes
173040551,"[
  {
    ""id"": 1838668185
  },
  {
    ""id"": 1838668181
  },
  {
    ""id"": 1838668180
  },
  {
    ""id"": 87858841
  },
  {
    ""id"": 88194718
  },
  {
    ""id"": 1838668176
  }
]"
173040548,"[
  {
    ""id"": 1838668177
  },
  {
    ""id"": 1838668178
  },
  {
    ""id"": 88623927
  },
  {
    ""id"": 88298455
  },
  {
    ""id"": 1838668175
  },
  {
    ""id"": 87919839
  },
  {
    ""id"": 88429304
  },
  {
    ""id"": 1838668174
  },
  {
    ""id"": 88474960
  },
  {
    ""id"": 88496672
  },
  {
    ""id"": 88915381
  },
  {
    ""id"": 88539904
  },
  {
    ""id"": 88954641
  }
]"
173040547,"[
  {
    ""id"": 1838668183
  },
  {
    ""id"": 1838668187
  },
  {
    ""id"": 88411534
  },
  {
    ""id"": 1838668189
  },
  {
    ""id"": 2474579817
  },
  {
    ""id"": 89411891
  },
  {
    ""id"": 88524028
  },
  {
    ""id"": 6594013791
  },
  {
    ""id"": 1838668200
  },
  {
    ""id"": 392496627
  },
  {
    ""id"": 1838668206
  }
]"
10674916,"[
  {
    ""id"": 89419435
  },
  {
    ""id"": 94555770
  },
  {
    ""id"": 94555771
  },
  {
    ""id"": 94555773
  },
  {
    ""id"": 94008743
  },
  {
    ""id"": 94555776
  },
  {
    ""id"": 94555777
  },
  {
    ""id"": 94555778
  },
  {
    ""id"": 94024064
  },
  {
    ""id"": 94555779
  },
  {
    ""id"": 94555780
  },
  {
    ""id"": 94555781
  },
  {
    ""id"": 94555784
  },
  {
    ""id"": 94555785
  },
  {
    ""id"": 94001720
  },
  {
    ""id"": 5121015985
  },
  {
    ""id"": 5121015986
  },
  {
    ""id"": 5121015987
  },
  {
    ""id"": 94555787
  },
  {
    ""id"": 94555788
  },
  {
    ""id"": 94555789
  },
  {
    ""id"": 94555790
  },
  {
    ""id"": 94555791
  },
  {
    ""id"": 94555792
  }
]"
242834036,"[
  {
    ""id"": 94555793
  },
  {
    ""id"": 94555794
  },
  {
    ""id"": 3037671617
  },
  {
    ""id"": 3037671618
  },
  {
    ""id"": 3037671620
  },
  {
    ""id"": 94555795
  },
  {
    ""id"": 94555796
  },
  {
    ""id"": 94555797
  },
  {
    ""id"": 94555798
  },
  {
    ""id"": 94555799
  },
  {
    ""id"": 94555800
  },
  {
    ""id"": 3037671622
  },
  {
    ""id"": 3037671623
  },
  {
    ""id"": 94555801
  },
  {
    ""id"": 3037671624
  },
  {
    ""id"": 94555802
  },
  {
    ""id"": 94555803
  },
  {
    ""id"": 94056505
  },
  {
    ""id"": 94555804
  },
  {
    ""id"": 94555805
  },
  {
    ""id"": 94555806
  },
  {
    ""id"": 94552771
  },
  {
    ""id"": 94555807
  },
  {
    ""id"": 94555808
  },
  {
    ""id"": 94555809
  },
  {
    ""id"": 94555810
  },
  {
    ""id"": 94555811
  },
  {
    ""id"": 94555812
  },
  {
    ""id"": 94555813
  },
  {
    ""id"": 94555814
  },
  {
    ""id"": 94555815
  },
  {
    ""id"": 94555816
  },
  {
    ""id"": 8675464814
  },
  {
    ""id"": 94031520
  },
  {
    ""id"": 94555817
  },
  {
    ""id"": 94555818
  }
]"
184549563,"[
  {
    ""id"": 88954641
  },
  {
    ""id"": 2466367062
  },
  {
    ""id"": 2466367063
  },
  {
    ""id"": 2466367064
  },
  {
    ""id"": 2466367065
  },
  {
    ""id"": 89039603
  }
]"
41501711,"[
  {
    ""id"": 89419435
  },
  {
    ""id"": 88319804
  },
  {
    ""id"": 89419434
  },
  {
    ""id"": 88319785
  },
  {
    ""id"": 89419433
  },
  {
    ""id"": 89419432
  },
  {
    ""id"": 89242729
  },
  {
    ""id"": 89419431
  },
  {
    ""id"": 89419430
  },
  {
    ""id"": 89419429
  },
  {
    ""id"": 89419428
  },
  {
    ""id"": 89419427
  },
  {
    ""id"": 89419425
  },
  {
    ""id"": 89419423
  },
  {
    ""id"": 89419421
  },
  {
    ""id"": 89419419
  },
  {
    ""id"": 89419417
  },
  {
    ""id"": 89419415
  },
  {
    ""id"": 89419412
  },
  {
    ""id"": 89419402
  },
  {
    ""id"": 89419400
  },
  {
    ""id"": 89419397
  },
  {
    ""id"": 89419394
  },
  {
    ""id"": 89419391
  },
  {
    ""id"": 89419389
  },
  {
    ""id"": 87958577
  },
  {
    ""id"": 89419386
  },
  {
    ""id"": 89419383
  },
  {
    ""id"": 89419382
  },
  {
    ""id"": 88540806
  },
  {
    ""id"": 88205040
  },
  {
    ""id"": 89419344
  },
  {
    ""id"": 89419342
  },
  {
    ""id"": 89419341
  },
  {
    ""id"": 89419339
  },
  {
    ""id"": 89419335
  },
  {
    ""id"": 89419333
  },
  {
    ""id"": 89419329
  },
  {
    ""id"": 89419326
  },
  {
    ""id"": 3977502996
  },
  {
    ""id"": 3977502995
  },
  {
    ""id"": 89419324
  },
  {
    ""id"": 88720806
  },
  {
    ""id"": 89419318
  },
  {
    ""id"": 89271860
  },
  {
    ""id"": 89419316
  },
  {
    ""id"": 89419313
  },
  {
    ""id"": 89419310
  },
  {
    ""id"": 89419308
  },
  {
    ""id"": 89419306
  },
  {
    ""id"": 89419304
  },
  {
    ""id"": 89419302
  },
  {
    ""id"": 89419300
  },
  {
    ""id"": 89419298
  },
  {
    ""id"": 88902187
  },
  {
    ""id"": 89419296
  },
  {
    ""id"": 89419294
  },
  {
    ""id"": 89419292
  },
  {
    ""id"": 89419290
  },
  {
    ""id"": 89419287
  },
  {
    ""id"": 89419285
  },
  {
    ""id"": 89419282
  },
  {
    ""id"": 89419281
  },
  {
    ""id"": 89419279
  },
  {
    ""id"": 89419277
  

2025-01-19 22:58:18 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:58:18 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:58:18 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:58:20 - snowflake.connector.cursor - INFO - Number of results in first chunk: 381
2025-01-19 22:58:21 - snowflake.connector.connection - INFO - closed
2025-01-19 22:58:21 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:58:22 - root - INFO - SQL:
-- 8. Get the geometry data for ways.
SELECT "id", "geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000
Results:
Too long, hard cut:
id,geometry
173040551,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x000\xf9\x9f\xfc]\xcf]\xc0Mx\xae\x94\n\xcdA@\xe0\xa3Y4x\xcf]\xc0\x01\x7fB\x87\n\xcdA@\xbe\xa9\xa3>$\xd0]\xc0\xc6\xf6\xff\x16\t\xcdA@\x17\tm9\x97\xd0]\xc0\x91+\xf5,\x08\xcdA@\x9a[!\xac\xc6\xd0]\xc0\xcc]K\xc8\x07\xcdA@\xf9\xe1 !\xca\xd0]\xc0U\xe51\xb9\x07\xcdA@')"
173040548,"bytearray(b""\x01\x02\x00\x00\x00\r\x00\x00\x00\x05\x7f\xael\xd5\xd0]\xc0U\xe51\xb9\x07\xcdA@ \xd7<\xfd\xd6\xd0]\xc0\xd8\x95;\xd8\x07\xcdA@\xc7,{\x12\xd8\xd0]\xc0\xbb\xf2Y\x9e\x07\xcdA@\x87p\xcc\xb2\'\xd1]\xc0tF\x94\xf6\x06\xcdA@%\xcb\xeen\x8a\xd1]\xc0\\\x1ekF\x06\xcdA@\xb3\xce\xf8\xbe\xb8\xd1]\xc0\x86\xe5\xcf\xb7\x05\xcdA@\xd9\xed\xb3\xcaL\xd2]\xc0i\x00o\x81\x04\xcdA@\x04~\xe8\xdd\xb3\xd2]\xc04\xab-+\x03\xcdA@q\x1cx\xb5\xdc\xd2]\xc0\xec\x12\xd5[\x03\xcdA@\x14\xab\x06an\xd3]\xc0\xa0\xa9\xd7-\x02\xcdA@1\x84\x9c\xf7\xff\xd3]\xc0S@\xda\xff\x00\xcdA@\x1b\xbf\xf0J\x92\xd4]\xc0d\xdf\x15\xc1\xff\xccA@\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@"")"
173040547,"bytearray(b""\x01\x02\x00\x00\x00\x0b\x00\x00\x00\xc5\xe0\xabgR\xcf]\xc0\xd8-\xa7\xa9\n\xcdA@\x99\x94\'\xb5<\xcf]\xc00\x17LW\x0b\xcdA@\xf0f\xb2$\xe5\xce]\xc0*\xca\xa5\xf1\x0b\xcdA@\x1b^\xb5\xd7\xa7\xce]\xc04\x8c\xccm\x0c\xcdA@\xe7& \xdcS\xce]\xc0;\x1b\xf2\xcf\x0c\xcdA@m\xcf,\tP\xce]\xc0$\xd9#\xd4\x0c\xcdA@C\x8e\xadg\x08\xce]\xc0)\x96[Z\r\xcdA@y\xe2\x83\xe8\xda\xcd]\xc0/\xf7n\x98\r\xcdA@\xd1]\x12g\xc5\xcd]\xc0\x89\\\x15M\x0c\xcdA@\xcd\x9a\x0eS\x91\xcd]\xc0\xd1\xe68\xb7\t\xcdA@\x8a\x90_\xe4\x8a\xcd]\xc0NdA\xbc\t\xcdA@"")"
10674916,"bytearray(b'\x01\x02\x00\x00\x00\x18\x00\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@_\xab\xf3^k\xc3]\xc0@\xdd@\x81w\xe5A@d\xde\xf4xk\xc3]\xc0@,@\x80\xb1\xe5A@\x93\xbb\x19\x7fl\xc3]\xc0;\xac\xcb\x84\xba\xe6A@\xce\xbc\xc1\xbcl\xc3]\xc0vA\x8e\xf7\xf4\xe6A@\xcf\x18\xe6\x04m\xc3]\xc0\x84\x89\x9aC\xad\xe7A@\xc9\x9d-{m\xc3]\xc0rKPh\xfe\xe7A@\x04\x9f\xd5\xb8m\xc3]\xc0|\x7f\x83\xf6\xea\xe8A@:\xc9\xa0$n\xc3]\xc0\xc2\xd7|\x01b\xe9A@7\x81\xe9\xb4n\xc3]\xc0\x03\x16e\xdb\x0e\xeaA@n}\xa2\xfcn\xc3]\xc0:tz\xde\x8d\xeaA@W\xdc\x13\x7fo\xc3]\xc0T\xaf[\x04\xc6\xeaA@n\xd9\xc6Do\xc3]\xc0\x08k\xady\x9f\xebA@\xa3\x8d\xc8\x1cp\xc3]\xc0\x01\xd6O\xa4\xa0\xecA@\xd2j\xed""q\xc3]\xc0\xdbx\xc1\xf1\xc6\xedA@,\x9cI@q\xc3]\xc00\x19\xc7H\xf6\xedA@%\x83\xedqp\xc3]\xc0\xcb\xdeR\xce\x17\xeeA@\x1aQ5\xd5n\xc3]\xc0\xabO(\xfa2\xeeA@o\xcb\x91\xdfl\xc3]\xc0\x1e#4\xddF\xeeA@\xae\xb0\xcfRh\xc3]\xc0\x88\x164\x88j\xeeA@\xe0\xfe\\4d\xc3]\xc0\xa0\x08\x98\xaf\x81\xeeA@{\xfd\xa45a\xc3]\xc0\xbb\xd0\\\xa7\x91\xeeA@\xf9\xb4/E^\xc3]\xc0In\xa8s\xa0\xeeA@\xd1D\x8ecZ\xc3]\xc0\x93\xc8>\xc8\xb2\xeeA@')"
242834036,"bytearray(b'\x01\x02\x00\x00\x00$\x00\x00\x00\xf0cq\xa4X\xc3]\xc0;\xfc\x7f\xe6\xbd\xeeA@\\\xadnPV\xc3]\xc0\x14T\xf9C\xd8\xeeA@\x0b\xb2\xaf\x86U\xc3]\xc0\xd5&\xa9\xa7\xea\xeeA@\xc20`\xc9U\xc3]\xc0b\xe6\x96\xb1\xfc\xeeA@\t\xda\x897W\xc3]\xc0_\x95\xb0\xdb\x0c\xefA@\xcd.\xce\xceX\xc3]\xc0]\xba\x93\x99\x1c\xefA@%\xc7\xe7_\\\xc3]\xc0\xb7E\x99\r2\xefA@v\x15\xf7\xc4_\xc3]\xc0\xcd\xd4$xC\xefA@J\xfd\x067c\xc3]\xc0\xca\xc5\xbd\x9eT\xefA@\xf0\x1e\xfb\xb4e\xc3]\xc0\xbbB\x1f,c\xefA@A\x8aK\x9fg\xc3]\xc0\xaf\x8390o\xefA@5\x07\x08\xe6h\xc3]\xc0\xdb\x11\x98\x98x\xefA@\x82\xb5 Jj\xc3]\xc0\x87r\xa2]\x85\xefA@\xac\x8dVZk\xc3]\xc0\xb4\x9f \x0c\x97\xefA@\xc3\x87m\xe6k\xc3]\xc0\x8cr\x1fo\xa8\xefA@F\x977\x87k\xc3]\xc0\xef\xc8Xm\xfe\xefA@W\x02)\xb1k\xc3]\xc0\x9e\xb5\xdb.4\xf1A@\xd5\th""l\xc3]\xc0\x03\xd1\x932\xa9\xf1A@\xa5\x85\xcb*l\xc3]\xc0s-Z\x80\xb6\xf1A@\xe6tYLl\xc3]\xc0xADj\xda\xf1A@\x10""\x19rl\xc3]\xc0\xb3b\xb8:\x00\xf2A@5\xe1\xf2\xb3l\xc3]\xc0e\xee\x10\xb5#\xf2A@\xce\xea\xd3\xe0l\xc3]\xc0:\x16%2\xbd\xf2A@\xce\xbc\xc1\xbcl\xc3]\xc0\x0c[\x0eO\n\xf5A@\x05C\xb1pm\xc3]\xc0\xdf \x10\x9e\xbf\xf5A@7\x81\xe9\xb4n\xc3]\xc0\xfc1R\x94\xf0\xf6A@9\xf7\xb2Hn\xc3]\xc0\x0461n\xb4\xf7A@m5\xeb\x8co\xc3]\xc0x\xb1\xd5\x8a\xdb\xf8A@\xa41\xa4\xd4o\xc3]\xc0u\xee\x87\xe9\x8c\xf9A@:S\xd7\x90n\xc3]\xc0)\x07\xb3\t0\xfbA@\x03\x15\x9fLm\xc3]\xc0\xa1F|\x82\x1f\xfcA@\xcd`\x9dtl\xc3]\xc0\xcdDl\x0b*\xfdA@\x99d\xe4,l\xc3]\xc0Z\x9a\x00h9\xfdA@\xe0\x89\x0f\xa2k\xc3]\xc0\xa1\xb9\x98\xb0G\xfdA@\x99\xaf7\xd6j\xc3]\xc0\xf7\xe1\xc5gW\xfdA@:7m\xc6i\xc3]\xc0\xa1\xa6\xf1fh\xfdA@')"
184549563,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x00\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@\x19\xe4\xd3\x08""\xd5]\xc0\xa8\x02\xeey\xfe\xccA@\xf4u\xcfp9\xd5]\xc0$\x80\xf6~\xfe\xccA@\x80I*SL\xd5]\xc0\x89Eg\xf4\xfe\xccA@\x1a\x111\xcaX\xd5]\xc0\xd1\x0b\xd2\xe7\xfe\xccA@x\xb4q\xc4Z\xd5]\xc0\xe9M\xa0\xe3\xfe\xccA@')"
41501711,"bytearray(b'\x01\x02\x00\x00\x00H\x01\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@.\xfc\xe0|j\xc3]\xc0Z\xba\'\xb4Q\xe4A@\x00\x05\x17+j\xc3]\xc0\xc4B\xadi\xde\xe3A@:7m\xc6i\xc3]\xc0!\x08\x90\xa1c\xe3A@\x88\xeeY\xd7h\xc3]\xc0\xd6\xc9\x19\x8a;\xe2A@e\x18w\x83h\xc3]\xc0\xe6\x93\x15\xc3\xd5\xe1A@\x8f\xb1\xc9\xd0g\xc3]\xc0\x01\x82\xde\xc0\x89\xe1A@s\xe0\xd5rg\xc3]\xc0\xf0ne\x89\xce\xe0A@[\xcf\xb5\xd4f\xc3]\xc0(\xab3\x08\xbd\xe0A@$I\xc6 f\xc3]\xc0\x89@\x9aV\xaf\xe0A@\xf0\xc2\xd6le\xc3]\xc0\xd9b\x12\x

2025-01-19 22:58:22 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:58:22 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:58:22 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:58:23 - snowflake.connector.cursor - INFO - Number of results in first chunk: 241
2025-01-19 22:58:23 - snowflake.connector.connection - INFO - closed
2025-01-19 22:58:23 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:58:24 - root - INFO - SQL:
-- 9. Select ways classified as 'motorway'.
SELECT t."id", s.value:"value"::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'highway' AND s.value:"value"::STRING = 'motorway'
LIMIT 1000
Results:
id,highway_type
184198343,motorway
178685955,motorway
685026600,motorway
685026598,motorway
685026601,motorway
178685976,motorway
685026599,motorway
211929582,motorway
435094869,motorway
435094865,motorway
791598378,motorway
184081612,motorway
416730770,motorway
806364008,motorway
172998476,motorway
614148157,motorway
614148186,motorway
614148189,motorway
614148156,motorway
178685971,motorway
178685967,motorway
184198340,motorway
178685970,motorway
178685966,motorway
178685973,motorway
178685974,motorway
178685969,motorway
184198337,motorway
178685956,motorway
172211747,motorway
172211755,motorway
60417032,motorway
253128477,motorway
60417191,motorway
435094876,motorway
435094874,motorway
184081598,motorway
185142210,motorway
106447192,motorway
119524714,motorway
184081698,motorway
106801230,motorway
751753003,motorway
751753002,motorway
184081694,motorway
119237654,motorway
184549524,motorway
60920112,motorway
844750910,motorway
60920183,motorway
844750920,motorway
184549516,motorway
60920256,motorway
844750906,motorway
844750922,motorway
172777678,motorway
64378425,motorway
30613315,motorway
206524851,motorway
175178755,motorway
206524855,motorway
206524854,motorway
41288977,motorway
175178758,motorway
614148188,motorway
806364007,motorway
614148167,motorway
48759000,motorway
614148165,motorway
419726772,motorway
48754610,motorway
48768739,motorway
36055571,motorway
36055569,motorway
173041187,motorway
48768736,motorway
48754613,motorway
48754623,motorway
48759039,motorway
246449638,motorway
117445687,motorway
48754621,motorway
117445694,motorway
867614403,motorway
867174737,motorway
435094863,motorway
10561000,motorway
435094864,motorway
60418055,motorway
32869993,motorway
435094862,motorway
60418057,motorway
32870277,motorway
435094866,motorway
188720945,motorway
751753004,motorway
60417029,motorway
751753005,motorway
867174736,motorway
60418170,motorway
435094861,motorway
867313404,motorway
867313401,motorway
867313403,motorway
32869991,motorway
32870280,motorway
60418168,motorway
253128480,motorway
60417602,motorway
751753009,motorway
66165269,motorway
751753008,motorway
60417498,motorway
751753007,motorway
184081657,motorway
188720933,motorway
184081651,motorway
45536127,motorway
106447194,motorway
170080273,motorway
184081618,motorway
170080277,motorway
185142209,motorway
172050957,motorway
106706501,motorway
106706503,motorway
106735170,motorway
178685962,motorway
178685961,motorway
178685963,motorway
178685960,motorway
178685964,motorway
178685958,motorway
106706502,motorway
106706500,motorway
173041190,motorway
806364005,motorway
178685957,motorway
178685959,motorway
253128478,motorway
32870276,motorway
172211751,motorway
435094875,motorway
435094873,motorway
172211745,motorway
106801329,motorway
106801242,motorway
60920245,motorway
844750921,motorway
844750911,motorway
232438352,motorway
844750907,motorway
844750923,motorway
64378435,motorway
64378426,motorway
64378423,motorway
64378429,motorway
30613302,motorway
30613316,motorway
41288907,motorway
175178757,motorway
175178756,motorway
41288978,motorway
206524852,motorway
206524853,motorway
806364006,motorway
48768740,motorway
48768738,motorway
173041186,motorway
419726773,motorway
48754633,motorway
48754628,motorway
48759038,motorway
48754625,motorway
48754634,motorway
48759043,motorway
253128479,motorway
188720938,motorway
60615868,motorway
188720941,motorway
32870279,motorway
60418175,motorway
32869992,motorway
60418167,motorway
60418056,motorway
60417598,motorway
172211742,motorway
60417031,motorway
435094867,motorway
32869990,motorway
106447196,motorway
106447193,motorway
172050955,motorway
172050956,motorway
60615708,motorway
10564867,motorway
184247605,motorway
60418461,motorway
346547493,motorway
867313400,motorway
60615707,motorway
60418479,motorway
60418460,motorway
184081615,motorway
158629154,motorway
32671447,motorway
158976528,motorway
158976546,motorway
158976547,motorway
674108456,motorway
674189163,motorway
158976539,motorway
674189159,motorway
158976536,motorway
111063162,motorway
344628969,motorway
275350451,motorway
30613306,motorway
867614592,motorway
867614594,motorway
164754807,motorway
867614591,motorway
867614593,motorway
844750876,motorway
607816010,motorway
867625207,motorway
844750872,motorway
660008776,motorway
184081669,motorway
27054543,motorway
158976617,motorway
158976531,motorway
158976537,motorway
158976549,motorway
158976550,motorway
344628973,motorway
344628967,motorway
275350445,motorway
844750873,motorway
844750877,motorway
275350448,motorway

2025-01-19 22:58:24 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:58:24 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:58:24 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:58:25 - snowflake.connector.cursor - INFO - Number of results in first chunk: 732
2025-01-19 22:58:25 - snowflake.connector.connection - INFO - closed
2025-01-19 22:58:25 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:58:25 - root - INFO - SQL:
-- 10. Find ways that have 'bridge' set to 'yes'.
SELECT t."id", s.value:"value"::STRING AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'bridge' AND s.value:"value"::STRING = 'yes'
LIMIT 1000
Results:
Too long, hard cut:
id,bridge_tag
242834035,yes
420253599,yes
10406392,yes
215373335,yes
215373336,yes
172557070,yes
988752636,yes
432591052,yes
988752639,yes
178944703,yes
527757553,yes
115016200,yes
306458184,yes
160263703,yes
268782632,yes
268782633,yes
173040552,yes
173040550,yes
173040549,yes
42047223,yes
178685962,yes
178685961,yes
178685963,yes
178685960,yes
178685964,yes
178685958,yes
106706502,yes
106706500,yes
173041190,yes
806364005,yes
42046404,yes
42046406,yes
178685957,yes
178685959,yes
253128478,yes
32870276,yes
172211751,yes
435094875,yes
435094873,yes
172211745,yes
106801329,yes
106801242,yes
60920245,yes
844750921,yes
844750911,yes
232438352,yes
844750907,yes
844750923,yes
64378435,yes
64378426,yes
64378423,yes
64378429,yes
30613302,yes
30613316,yes
41288907,yes
175178757,yes
175178756,yes
41288978,yes
206524852,yes
206524853,yes
806364006,yes
48768740,yes
48768738,yes
173041186,yes
419726773,yes
48754633,yes
48754628,yes
48759038,yes
48754625,yes
48754634,yes
48759043,yes
106871212,yes
106871211,yes
253128479,yes
188720938,yes
60615868,yes
188720941,yes
32870279,yes
60418175,yes
32869992,yes
60418167,yes
60418056,yes
60417598,yes
172211742,yes
60417031,yes
435094867,yes
32869990,yes
106447196,yes
106447193,yes
172050955,yes
172050956,yes
306458164,yes
171255346,yes
115020618,yes
60418479,yes
60418460,yes
48768379,yes
10681439,yes
10682073,yes
943852270,yes
169402960,yes
916207541,yes
252712493,yes
502746645,yes
115016167,yes
527212933,yes
917372520,yes
872385512,yes
527446097,yes
844750996,yes
844750943,yes
844750941,yes
844740474,yes
844750883,yes
367485926,yes
479615868,yes
458160892,yes
479615870,yes
399698033,yes
270779701,yes
27054754,yes
220802168,yes
177353927,yes
173192914,yes
10562381,yes
205022502,yes
435580580,yes
435580578,yes
173188818,yes
41503090,yes
385776470,yes
60417718,yes
32122176,yes
173964341,yes
475170377,yes
204582274,yes
204596980,yes
32122207,yes
204596978,yes
10561582,yes
204568775,yes
32122182,yes
231825180,yes
173965462,yes
432578120,yes
10561597,yes
204586757,yes
227760260,yes
234869325,yes
206501927,yes
905577535,yes
239429542,yes
239429553,yes
239429543,yes
239429552,yes
111136757,yes
178685977,yes
186248346,yes
276456955,yes
427572072,yes
526981504,yes
304002371,yes
972376946,yes
304002294,yes
304002303,yes
972776271,yes
944242755,yes
347169106,yes
347169112,yes
817278336,yes
766276869,yes
179861110,yes
179861108,yes
179861106,yes
326126628,yes
697267657,yes
697267655,yes
844750992,yes
697268470,yes
270367342,yes
178094512,yes
369138735,yes
220771286,yes
458330188,yes
458330179,yes
458330184,yes
385080797,yes
210272474,yes
286681032,yes
410073217,yes
175764191,yes
464790274,yes
287774543,yes
399553039,yes
331307995,yes
262468076,yes
320838299,yes
364964169,yes
403686650,yes
273356384,yes
252712470,yes
761924556,yes
253003136,yes
252847903,yes
284646993,yes
355535354,yes
329344786,yes
48759011,yes
253128482,yes
364964153,yes
253003154,yes
170977876,yes
447082958,yes
364026057,yes
253003118,yes
253003135,yes
252776645,yes
252776625,yes
10575744,yes
252776614,yes
253003123,yes
252776613,yes
210272460,yes
252776612,yes
252776647,yes
252776642,yes
253003181,yes
253003120,yes
385924718,yes
252776640,yes
252776636,yes
252776651,yes
252776650,yes
253128485,yes
385484592,yes
252712466,yes
60418149,yes
32869989,yes
401493932,yes
206511975,yes
200173941,yes
10562010,yes
231085364,yes
231085365,yes
207010763,yes
943830878,yes
215798184,yes
215798172,yes
204764151,yes
204764143,yes
196474289,yes
246449633,yes
246449632,yes
216604377,yes
219879949,yes
200283888,yes
216950690,yes
241755252,yes
241755249,yes
215999958,yes
215999967,yes
215589765,yes
215373330,yes
204764158,yes
204764161,yes
204764159,yes
200177368,yes
204764162,yes
200177366,yes
944171945,yes
200173922,yes
936696413,yes
215041660,yes
213514381,yes
213735078,yes
239435184,yes
64378430,yes
196474253,yes
242599721,yes
206501938,yes
196474228,yes
649498207,yes
106443455,yes
678970349,yes
252712494,yes
435225676,yes
173195028,yes
678970350,yes
178094465,yes
917344348,yes
248595302,yes
791959169,yes
186263617,yes
254286132,yes
254286104,yes
254286129,yes
196474239,yes
435579497,yes
164754707,yes
253128498,yes
188720930,yes
778966215,yes
778966212,yes
348400712,yes
173216107,yes
10567028,yes
200167278,yes
791959167,yes
972083263,yes
796770743,yes
797374653,yes
348433032,yes
968202936,yes
968202926,yes
968202931,yes
764333248,yes
805398646,yes
968153274,yes
968153278,yes
968153280,yes
968153272,yes
800394635,yes
527757548,yes
419436090,yes
794269821,yes
221151318,yes
345650211,yes
985817970,yes
978487091,yes
844750749,yes
844750751,yes
967900437,yes
967900434,yes
950288311,yes
809556768,yes
118625991,yes
180906599,yes
181323831,yes
347754885,yes
804049351,yes
804069766,yes
817278326,yes
798438377,yes
527446103,yes
832069938,yes
951976453,yes
951976451,yes
882476910,yes
944614187,yes
968202939,yes
182471288,yes
968425558,yes
968425556,yes
968425554,yes
276461637,yes
534759539,yes
968182223,yes
196474234,yes
528934834,yes
528934826,ye

2025-01-19 22:58:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:58:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:58:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:58:27 - snowflake.connector.cursor - INFO - Number of results in first chunk: 446
2025-01-19 22:58:27 - snowflake.connector.connection - INFO - closed
2025-01-19 22:58:27 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:58:28 - root - INFO - SQL:
-- 11. Retrieve ways classified as 'primary' roads.
SELECT t."id", s.value:"value"::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'highway' AND s.value:"value"::STRING = 'primary'
LIMIT 1000
Results:
Too long, hard cut:
id,highway_type
173040551,primary
173040548,primary
173040547,primary
184549563,primary
10441460,primary
167891278,primary
167891286,primary
10441474,primary
988752631,primary
167891268,primary
432591061,primary
988752635,primary
988752634,primary
119334084,primary
115023390,primary
527757555,primary
119334044,primary
27054486,primary
119334050,primary
119334023,primary
674108455,primary
674108452,primary
435488138,primary
435488159,primary
119334087,primary
10400404,primary
10562019,primary
10441397,primary
988752636,primary
432591052,primary
178944703,primary
527757553,primary
173040552,primary
173040550,primary
173040549,primary
45535678,primary
16256091,primary
26945875,primary
41502888,primary
41503093,primary
16259187,primary
385776471,primary
10431038,primary
10400403,primary
184877579,primary
205258666,primary
16256494,primary
593605189,primary
119524739,primary
593605186,primary
205258665,primary
16249557,primary
766276906,primary
754172337,primary
766294501,primary
766276905,primary
766294500,primary
754172338,primary
766294502,primary
766294499,primary
766294498,primary
10577385,primary
435579495,primary
435579493,primary
173192913,primary
173192915,primary
867174731,primary
867164208,primary
173193532,primary
867164205,primary
867164206,primary
10577386,primary
867164201,primary
173192916,primary
867164202,primary
435579494,primary
173188817,primary
173200700,primary
867167193,primary
286682017,primary
10561458,primary
205022499,primary
435580581,primary
33194938,primary
184255633,primary
435580579,primary
286682016,primary
867174746,primary
10561459,primary
10558015,primary
588882728,primary
754175761,primary
754175760,primary
754175762,primary
754175756,primary
588882730,primary
754175758,primary
754175759,primary
754175757,primary
16263628,primary
867624853,primary
60417719,primary
16259421,primary
761128372,primary
972776270,primary
754239539,primary
184549532,primary
754239535,primary
754239536,primary
754239537,primary
754216373,primary
754239538,primary
754216374,primary
16249843,primary
10561592,primary
10557761,primary
204568336,primary
204596979,primary
204582275,primary
16249874,primary
32122142,primary
16249864,primary
10561598,primary
320751633,primary
16249870,primary
320751504,primary
320751969,primary
16249819,primary
10561601,primary
32122177,primary
215039707,primary
231983716,primary
173965459,primary
10561581,primary
320753544,primary
348427463,primary
231983717,primary
432578121,primary
41374219,primary
231825181,primary
173964340,primary
10681271,primary
320749508,primary
204586756,primary
320750207,primary
320750432,primary
227760259,primary
204586755,primary
475170378,primary
320750948,primary
320750878,primary
239184624,primary
910476689,primary
206501925,primary
206501928,primary
213759986,primary
206501929,primary
111052222,primary
10441437,primary
234869326,primary
893061654,primary
893061668,primary
10394169,primary
893061669,primary
910476687,primary
910476686,primary
910476682,primary
910476688,primary
905577534,primary
239189635,primary
10560089,primary
613130929,primary
185027655,primary
186248347,primary
16264423,primary
119334045,primary
119334036,primary
41374217,primary
119334081,primary
41374221,primary
119334034,primary
761128364,primary
761128365,primary
761128366,primary
809871982,primary
276456956,primary
936334482,primary
10675520,primary
427572073,primary
10400303,primary
10674755,primary
312146330,primary
359004962,primary
526981509,primary
178094352,primary
312146325,primary
312146327,primary
306447628,primary
10422226,primary
612836102,primary
254269566,primary
304002365,primary
10422208,primary
254269571,primary
119323783,primary
254269565,primary
10408233,primary
614148139,primary
854026107,primary
614148140,primary
306447538,primary
10429958,primary
992135759,primary
972376945,primary
306447630,primary
31979890,primary
901276714,primary
601952540,primary
16259902,primary
901276716,primary
901276713,primary
901276711,primary
901276709,primary
901276710,primary
16259903,primary
901276707,primary
10422187,primary
306447625,primary
306447621,primary
306447633,primary
254269568,primary
254269569,primary
641817154,primary
304002354,primary
304002289,primary
304002331,primary
614148144,primary
304002313,primary
614148141,primary
10445075,primary
306447620,primary
936334479,primary
936334478,primary
936334473,primary
936334480,primary
26446459,primary
992135758,primary
119323838,primary
992096485,primary
992096486,primary
992096484,primary
306447623,primary
306447634,primary
306447627,primary
893061670,primary
910476685,primary
867614597,primary
867614598,primary
119334076,primary
173192914,primary
10562381,primary
205022502,primary
435580580,primary
435580578,primary
173188818,primary
41503090,primary
385776470,primary
60417718,primary
32122176,primary
173964341,primary
475170377,primary
204582274,primary
204596980,primary
32122207,primary
204596978,primary
10561582,primary
204568775,primary
32122182,primary
231825180,primary
173965462,primary
432578120

2025-01-19 22:58:28 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:58:28 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:58:28 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:58:29 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-19 22:58:29 - snowflake.connector.connection - INFO - closed
2025-01-19 22:58:29 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:58:29 - root - INFO - SQL:
-- 12. List ways with their 'highway' and 'bridge' tags.
SELECT t."id",
       MAX(CASE WHEN s.value:"key"::STRING = 'highway' THEN s.value:"value"::STRING END) AS "highway_type",
       MAX(CASE WHEN s.value:"key"::STRING = 'bridge' THEN s.value:"value"::STRING END) AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
GROUP BY t."id"
LIMIT 1000
Results:
Too long, hard cut:
id,highway_type,bridge_tag
79489443,,
75282261,,
73977643,,
73997363,,
75227015,,
75141325,,
73534440,,
75279128,,
73963690,,
73939714,,
73938089,,
75213906,,
75140554,,
79488082,,
73186840,,
73534830,,
73963897,,
79497721,,
74114919,,
73932325,,
73996696,,
75140399,,
75219177,,
75145160,,
75215507,,
73932373,,
73963269,,
73077059,,
72990165,,
75204096,,
73932819,,
73963510,,
73963855,,
73928829,,
943833246,,
73932663,,
288961503,,
936190315,,
79490070,,
79494028,,
73994598,,
79488471,,
73933603,,
772345867,,
73998077,,
75233890,,
74114341,,
72960290,,
75228845,,
75215389,,
75218778,,
73998363,,
72957805,,
73934559,,
75281729,,
73996203,,
75235400,,
73934099,,
288842287,,
75265810,,
73935726,,
79488729,,
79495185,,
73184369,,
72955594,,
75142506,,
73963681,,
74122132,,
73999320,,
74123990,,
75215267,,
73536085,,
75206025,,
75205354,,
73940258,,
73071983,,
774714967,,
75205048,,
74119446,,
72955176,,
73182299,,
73185357,,
79488594,,
73535514,,
72992391,,
75283500,,
75282413,,
75204774,,
75281962,,
75201822,,
72968344,,
73937427,,
73994659,,
73932986,,
74113877,,
75141586,,
79497764,,
74124576,,
75232158,,
75226890,,
73940213,,
72984144,,
73071459,,
73931221,,
75218481,,
73994895,,
75206006,,
73975558,,
75214136,,
75283590,,
75231643,,
75199640,,
73975998,,
75231175,,
73535268,,
72997422,,
75230968,,
72969745,,
75205904,,
75283358,,
75205695,,
73963597,,
73933420,,
285997494,,
75214318,,
79490170,,
75226710,,
73932564,,
75279871,,
75145574,,
79495352,,
73535010,,
73179506,,
73939931,,
72993819,,
73933861,,
75206612,,
75203846,,
73932526,,
75217884,,
73995949,,
73997047,,
73994654,,
75284148,,
73936533,,
75213118,,
75216295,,
79488254,,
73161816,,
75203694,,
73181940,,
328051739,,
73940603,,
73196801,,
73996554,,
75284181,,
75267355,,
73933496,,
73183932,,
75233830,,
74115312,,
75202584,,
75227284,,
73936492,,
73994921,,
73182748,,
74115011,,
72984922,,
72994222,,
332573788,,
73938938,,
73935696,,
944220486,,
72968054,,
75283439,,
73936704,,
75124830,,
73967429,,
73967531,,
73970482,,
73966464,,
72853389,,
73969779,,
73965871,,
73966675,,
73970944,,
73966262,,
73969406,,
73965865,,
79477917,,
79478683,,
73966914,,
73970815,,
72947944,,
73966304,,
73966257,,
72853347,,
72852836,,
75206735,,
44580709,,
44580751,,
531784201,,
197281567,,
48995663,,
414672912,,
414711337,,
414711334,,
414634594,,
414666969,,
44581340,,
414672923,,
414666947,,
23144827,,
414672920,,
23144957,,
23144842,,
23144514,,
23144515,,
52979609,,
55877368,,
54120554,,
52893189,,
52893165,,
52892338,,
55019210,,
55015800,,
55019204,,
54853912,,
55015881,,
450131930,,
54853942,,
54853918,,
53649275,,
52637284,,
52979591,,
54625716,,
54625495,,
54534183,,
54534047,,
54625484,,
54625589,,
55015374,,
54534294,,
72948273,,
218906296,,
332471403,,
332573781,,
197293043,,
207770354,,
201845513,,
340211446,,
335598283,,
288842505,,
286681048,,
287640974,,
203502392,,
202853165,,
72951295,,
201797742,,
335606847,,
288993718,,
262617221,,
263742518,,
425779628,,
246779003,,
246462457,,
239192421,,
231825183,,
246603539,,
53188394,,
641766405,,
10541616,,
344628975,,
181381721,,
205384924,,
934895553,,
934895552,,
201508983,,
332350479,,
332604829,,
684831424,,
721901121,,
75282808,,
73967256,,
72951419,,
612117718,,
160266480,,
414666958,,
414672922,,
23144392,,
52893198,,
53052045,,
54625517,,
54534093,,
72950824,,
332568131,,
203376469,,
203378586,,
196512063,,
849907407,,
641766491,,
844750884,,
205384923,,
988092632,,
202456904,,
332209000,,
201508307,,
204468573,,
79494781,,
229543085,motorway_link,
131191535,,
131191016,,
131191555,,
176722490,,
512408203,,
131190373,,
131192242,,
131197555,,
131195624,,
131214777,,
131194859,,
131196565,,
131190801,,
131192855,,
131195951,,
148201435,,
148201203,,
131193972,,
131198948,,
131197236,,
131197150,,
131191596,,
131191581,,
131195234,,
131197123,,
131193945,,
131198785,,
131191000,,
131191745,,
131195899,,
131198606,,
131193867,,
131196282,,
131191928,,
131190845,,
174574965,,
131196256,,
131198175,,
175834437,,
176910145,,
131198591,,
131194766,,
131199895,,
131196340,,
131191615,,
131196283,,
175834459,,
131190432,,
133585912,,
131193185,,
175660618,,
175660630,,
133586750,,
133585828,,
175822328,,
175503054,,
131197615,,
133588646,,
175631628,,
131206322,,
131218592,,
131214342,,
131214920,,
131214397,,
148202764,,
133589280,,
133588910,,
133589134,,
133589208,,
175503688,,
580960536,,
133586424,,
131197231,,
131193021,,
133586164,,
131197240,,
133585805,,
133586015,,
133586850,,
148201428,,
196465218,,
175764291,,
248952500,,
261054174,secondary,
755140422,primary,
601932229,tertiary,
896882522,tertiary,
161341327,,
161341314,,
364962241,,
364962246,,
359435150,,
364962255,,
556833628,,
556833626,,
307944574,,
556830385,,
551734340,,
556830371,,
551734319,,
344375320,,
307807262,,
307807291,,
162145582,,
162145591,,
162145580,,
176049938,,
262468054,,
307799075,,
169875617,,
270028171,,
363188301,,
308313416,,
308313393,,
308313421,,
308752452,,
308752459,,
308319975,,
161082014,,
361792409,,
2625

2025-01-19 22:58:29 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:58:29 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:58:29 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:58:31 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1000
2025-01-19 22:58:31 - snowflake.connector.connection - INFO - closed
2025-01-19 22:58:31 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:58:31 - root - INFO - SQL:
-- 13. Get ways classified as 'residential'.
SELECT t."id", s.value:"value"::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'highway' AND s.value:"value"::STRING = 'residential'
LIMIT 1000
Results:
Too long, hard cut:
id,highway_type
359895486,residential
207083813,residential
205746000,residential
196503882,residential
196503870,residential
196503859,residential
196503888,residential
196503877,residential
196503835,residential
196503849,residential
196503839,residential
216615367,residential
502746645,residential
844750996,residential
151678965,residential
151679025,residential
396308900,residential
205277733,residential
169092068,residential
169092075,residential
194347081,residential
169092078,residential
169092060,residential
169095449,residential
169095448,residential
169094716,residential
169092750,residential
169092050,residential
169092061,residential
169092080,residential
169092053,residential
170404277,residential
170403769,residential
170404279,residential
210936845,residential
765909388,residential
333923125,residential
169094714,residential
169096542,residential
169092083,residential
284847134,residential
169092085,residential
169095451,residential
169094717,residential
284847135,residential
361060245,residential
169099613,residential
194090538,residential
169092057,residential
204764165,residential
197768450,residential
169095447,residential
194090547,residential
194090540,residential
194090548,residential
10677534,residential
648987754,residential
16255636,residential
169092051,residential
169095450,residential
169092748,residential
169092071,residential
169099065,residential
169099614,residential
169099611,residential
169099612,residential
194090546,residential
194090544,residential
194091709,residential
194090542,residential
289468819,residential
10551683,residential
406477061,residential
406477060,residential
362153124,residential
362153121,residential
360804194,residential
360804195,residential
362153129,residential
16254227,residential
16254228,residential
16261996,residential
170403767,residential
170404278,residential
16255809,residential
16260344,residential
16261997,residential
16256161,residential
16255811,residential
170077300,residential
16255069,residential
207791086,residential
207791084,residential
207790284,residential
16238476,residential
207791087,residential
272941443,residential
424185797,residential
16223228,residential
106619479,residential
16223232,residential
16230239,residential
106619478,residential
10574234,residential
10564533,residential
363240424,residential
261306471,residential
10574951,residential
10560761,residential
10567041,residential
339819698,residential
10569429,residential
10562661,residential
10574301,residential
16261252,residential
200876509,residential
345405114,residential
345405113,residential
10558863,residential
10559491,residential
366406839,residential
10557170,residential
10558420,residential
10565563,residential
406477059,residential
10546087,residential
290927451,residential
10560641,residential
10566561,residential
194347077,residential
10414670,residential
313517854,residential
10577517,residential
10563878,residential
10567593,residential
10568226,residential
10427201,residential
10564889,residential
16256763,residential
797536803,residential
16253906,residential
10567978,residential
10573863,residential
16259697,residential
844750995,residential
357522999,residential
362153127,residential
194261921,residential
10577891,residential
502746638,residential
16257179,residential
10560003,residential
385299762,residential
16258927,residential
10561732,residential
10570141,residential
10561078,residential
10570919,residential
10572815,residential
10565855,residential
10569353,residential
10576267,residential
10574820,residential
10573543,residential
10577519,residential
10562389,residential
357510083,residential
10569334,residential
16249994,residential
16250004,residential
170403765,residential
16254351,residential
261306915,residential
10564088,residential
16253915,residential
16260572,residential
16249587,residential
16258750,residential
10573975,residential
16254496,residential
16258528,residential
16254879,residential
16253497,residential
16256512,residential
16253751,residential
16262045,residential
16256511,residential
16264198,residential
207704181,residential
16249395,residential
16258988,residential
172609344,residential
16253440,residential
10560526,residential
10577069,residential
16262092,residential
10565630,residential
10569323,residential
16250491,residential
170077572,residential
16255067,residential
83669496,residential
10559129,residential
10561583,residential
10571773,residential
108291872,residential
202491885,residential
202491878,residential
203530852,residential
16225442,residential
39224562,residential
10394719,residential
10534342,residential
10554025,residential
10538454,residential
10556697,residential
16227413,residential
10395513,residential
10557925,residential
10537701,residential
293234628,residential
10360409,residential
16243638,residential
16231939,residential
16227224,residential
473624872,residential
16241328,residential
16224638,residential
16247572,residential
16229277,residential
16228327,residential
16235424,residen

2025-01-19 22:58:31 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:58:31 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:58:31 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:58:33 - snowflake.connector.cursor - INFO - Number of results in first chunk: 376
2025-01-19 22:58:34 - snowflake.connector.connection - INFO - closed
2025-01-19 22:58:34 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:58:35 - root - INFO - SQL:
-- 14. Retrieve ways with 'highway' classifications and their geometries.
SELECT t."id",
       s.value:"value"::STRING AS "highway_type",
       t."geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'highway'
LIMIT 1000
Results:
Too long, hard cut:
id,highway_type,geometry
173040551,primary,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x000\xf9\x9f\xfc]\xcf]\xc0Mx\xae\x94\n\xcdA@\xe0\xa3Y4x\xcf]\xc0\x01\x7fB\x87\n\xcdA@\xbe\xa9\xa3>$\xd0]\xc0\xc6\xf6\xff\x16\t\xcdA@\x17\tm9\x97\xd0]\xc0\x91+\xf5,\x08\xcdA@\x9a[!\xac\xc6\xd0]\xc0\xcc]K\xc8\x07\xcdA@\xf9\xe1 !\xca\xd0]\xc0U\xe51\xb9\x07\xcdA@')"
173040548,primary,"bytearray(b""\x01\x02\x00\x00\x00\r\x00\x00\x00\x05\x7f\xael\xd5\xd0]\xc0U\xe51\xb9\x07\xcdA@ \xd7<\xfd\xd6\xd0]\xc0\xd8\x95;\xd8\x07\xcdA@\xc7,{\x12\xd8\xd0]\xc0\xbb\xf2Y\x9e\x07\xcdA@\x87p\xcc\xb2\'\xd1]\xc0tF\x94\xf6\x06\xcdA@%\xcb\xeen\x8a\xd1]\xc0\\\x1ekF\x06\xcdA@\xb3\xce\xf8\xbe\xb8\xd1]\xc0\x86\xe5\xcf\xb7\x05\xcdA@\xd9\xed\xb3\xcaL\xd2]\xc0i\x00o\x81\x04\xcdA@\x04~\xe8\xdd\xb3\xd2]\xc04\xab-+\x03\xcdA@q\x1cx\xb5\xdc\xd2]\xc0\xec\x12\xd5[\x03\xcdA@\x14\xab\x06an\xd3]\xc0\xa0\xa9\xd7-\x02\xcdA@1\x84\x9c\xf7\xff\xd3]\xc0S@\xda\xff\x00\xcdA@\x1b\xbf\xf0J\x92\xd4]\xc0d\xdf\x15\xc1\xff\xccA@\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@"")"
173040547,primary,"bytearray(b""\x01\x02\x00\x00\x00\x0b\x00\x00\x00\xc5\xe0\xabgR\xcf]\xc0\xd8-\xa7\xa9\n\xcdA@\x99\x94\'\xb5<\xcf]\xc00\x17LW\x0b\xcdA@\xf0f\xb2$\xe5\xce]\xc0*\xca\xa5\xf1\x0b\xcdA@\x1b^\xb5\xd7\xa7\xce]\xc04\x8c\xccm\x0c\xcdA@\xe7& \xdcS\xce]\xc0;\x1b\xf2\xcf\x0c\xcdA@m\xcf,\tP\xce]\xc0$\xd9#\xd4\x0c\xcdA@C\x8e\xadg\x08\xce]\xc0)\x96[Z\r\xcdA@y\xe2\x83\xe8\xda\xcd]\xc0/\xf7n\x98\r\xcdA@\xd1]\x12g\xc5\xcd]\xc0\x89\\\x15M\x0c\xcdA@\xcd\x9a\x0eS\x91\xcd]\xc0\xd1\xe68\xb7\t\xcdA@\x8a\x90_\xe4\x8a\xcd]\xc0NdA\xbc\t\xcdA@"")"
10674916,trunk,"bytearray(b'\x01\x02\x00\x00\x00\x18\x00\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@_\xab\xf3^k\xc3]\xc0@\xdd@\x81w\xe5A@d\xde\xf4xk\xc3]\xc0@,@\x80\xb1\xe5A@\x93\xbb\x19\x7fl\xc3]\xc0;\xac\xcb\x84\xba\xe6A@\xce\xbc\xc1\xbcl\xc3]\xc0vA\x8e\xf7\xf4\xe6A@\xcf\x18\xe6\x04m\xc3]\xc0\x84\x89\x9aC\xad\xe7A@\xc9\x9d-{m\xc3]\xc0rKPh\xfe\xe7A@\x04\x9f\xd5\xb8m\xc3]\xc0|\x7f\x83\xf6\xea\xe8A@:\xc9\xa0$n\xc3]\xc0\xc2\xd7|\x01b\xe9A@7\x81\xe9\xb4n\xc3]\xc0\x03\x16e\xdb\x0e\xeaA@n}\xa2\xfcn\xc3]\xc0:tz\xde\x8d\xeaA@W\xdc\x13\x7fo\xc3]\xc0T\xaf[\x04\xc6\xeaA@n\xd9\xc6Do\xc3]\xc0\x08k\xady\x9f\xebA@\xa3\x8d\xc8\x1cp\xc3]\xc0\x01\xd6O\xa4\xa0\xecA@\xd2j\xed""q\xc3]\xc0\xdbx\xc1\xf1\xc6\xedA@,\x9cI@q\xc3]\xc00\x19\xc7H\xf6\xedA@%\x83\xedqp\xc3]\xc0\xcb\xdeR\xce\x17\xeeA@\x1aQ5\xd5n\xc3]\xc0\xabO(\xfa2\xeeA@o\xcb\x91\xdfl\xc3]\xc0\x1e#4\xddF\xeeA@\xae\xb0\xcfRh\xc3]\xc0\x88\x164\x88j\xeeA@\xe0\xfe\\4d\xc3]\xc0\xa0\x08\x98\xaf\x81\xeeA@{\xfd\xa45a\xc3]\xc0\xbb\xd0\\\xa7\x91\xeeA@\xf9\xb4/E^\xc3]\xc0In\xa8s\xa0\xeeA@\xd1D\x8ecZ\xc3]\xc0\x93\xc8>\xc8\xb2\xeeA@')"
242834036,trunk,"bytearray(b'\x01\x02\x00\x00\x00$\x00\x00\x00\xf0cq\xa4X\xc3]\xc0;\xfc\x7f\xe6\xbd\xeeA@\\\xadnPV\xc3]\xc0\x14T\xf9C\xd8\xeeA@\x0b\xb2\xaf\x86U\xc3]\xc0\xd5&\xa9\xa7\xea\xeeA@\xc20`\xc9U\xc3]\xc0b\xe6\x96\xb1\xfc\xeeA@\t\xda\x897W\xc3]\xc0_\x95\xb0\xdb\x0c\xefA@\xcd.\xce\xceX\xc3]\xc0]\xba\x93\x99\x1c\xefA@%\xc7\xe7_\\\xc3]\xc0\xb7E\x99\r2\xefA@v\x15\xf7\xc4_\xc3]\xc0\xcd\xd4$xC\xefA@J\xfd\x067c\xc3]\xc0\xca\xc5\xbd\x9eT\xefA@\xf0\x1e\xfb\xb4e\xc3]\xc0\xbbB\x1f,c\xefA@A\x8aK\x9fg\xc3]\xc0\xaf\x8390o\xefA@5\x07\x08\xe6h\xc3]\xc0\xdb\x11\x98\x98x\xefA@\x82\xb5 Jj\xc3]\xc0\x87r\xa2]\x85\xefA@\xac\x8dVZk\xc3]\xc0\xb4\x9f \x0c\x97\xefA@\xc3\x87m\xe6k\xc3]\xc0\x8cr\x1fo\xa8\xefA@F\x977\x87k\xc3]\xc0\xef\xc8Xm\xfe\xefA@W\x02)\xb1k\xc3]\xc0\x9e\xb5\xdb.4\xf1A@\xd5\th""l\xc3]\xc0\x03\xd1\x932\xa9\xf1A@\xa5\x85\xcb*l\xc3]\xc0s-Z\x80\xb6\xf1A@\xe6tYLl\xc3]\xc0xADj\xda\xf1A@\x10""\x19rl\xc3]\xc0\xb3b\xb8:\x00\xf2A@5\xe1\xf2\xb3l\xc3]\xc0e\xee\x10\xb5#\xf2A@\xce\xea\xd3\xe0l\xc3]\xc0:\x16%2\xbd\xf2A@\xce\xbc\xc1\xbcl\xc3]\xc0\x0c[\x0eO\n\xf5A@\x05C\xb1pm\xc3]\xc0\xdf \x10\x9e\xbf\xf5A@7\x81\xe9\xb4n\xc3]\xc0\xfc1R\x94\xf0\xf6A@9\xf7\xb2Hn\xc3]\xc0\x0461n\xb4\xf7A@m5\xeb\x8co\xc3]\xc0x\xb1\xd5\x8a\xdb\xf8A@\xa41\xa4\xd4o\xc3]\xc0u\xee\x87\xe9\x8c\xf9A@:S\xd7\x90n\xc3]\xc0)\x07\xb3\t0\xfbA@\x03\x15\x9fLm\xc3]\xc0\xa1F|\x82\x1f\xfcA@\xcd`\x9dtl\xc3]\xc0\xcdDl\x0b*\xfdA@\x99d\xe4,l\xc3]\xc0Z\x9a\x00h9\xfdA@\xe0\x89\x0f\xa2k\xc3]\xc0\xa1\xb9\x98\xb0G\xfdA@\x99\xaf7\xd6j\xc3]\xc0\xf7\xe1\xc5gW\xfdA@:7m\xc6i\xc3]\xc0\xa1\xa6\xf1fh\xfdA@')"
184549563,primary,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x00\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@\x19\xe4\xd3\x08""\xd5]\xc0\xa8\x02\xeey\xfe\xccA@\xf4u\xcfp9\xd5]\xc0$\x80\xf6~\xfe\xccA@\x80I*SL\xd5]\xc0\x89Eg\xf4\xfe\xccA@\x1a\x111\xcaX\xd5]\xc0\xd1\x0b\xd2\xe7\xfe\xccA@x\xb4q\xc4Z\xd5]\xc0\xe9M\xa0\xe3\xfe\xccA@')"
41501711,trunk,"bytearray(b'\x01\x02\x00\x00\x00H\x01\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@.\xfc\xe0|j\xc3]\xc0Z\xba\'\xb4Q\xe4A@\x00\x05\x17+j\xc3]\xc0\xc4B\xadi\xde\xe3A@:7m\xc6i\xc3]\xc0!\x08\x90\xa1c\xe3A@\x88\xeeY\xd7h\xc3]\xc0\xd6\xc9\x19\x8a;\xe2A@e\x18w\x83h\xc3]\xc0\xe6\x93\x15\xc3\xd5\xe1A@\x8f\xb1\xc9\xd0g\xc3]\xc0\x01\x82\xde\xc0\x89\xe1A@s\xe0\xd5rg\xc3]\xc0\xf0ne\x89\xce\xe0A@[\xcf\xb5\xd4f\xc3]\xc0(\xab3\x08\xbd\xe0A@$I\xc6 f

2025-01-19 22:58:35 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:58:35 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:58:35 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:58:36 - snowflake.connector.cursor - INFO - Number of results in first chunk: 56
2025-01-19 22:58:36 - snowflake.connector.connection - INFO - closed
2025-01-19 22:58:36 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:58:36 - root - INFO - SQL:
-- 15. List all available state names to verify state data.
SELECT DISTINCT "state_name"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
LIMIT 1000
Results:
state_name
Guam
Puerto Rico
Commonwealth of the Northern Mariana Islands
United States Virgin Islands
American Samoa
Rhode Island
Vermont
New Hampshire
Maine
New York
New Jersey
Pennsylvania
Wisconsin
Indiana
Michigan
Nebraska
Kansas
Iowa
Minnesota
Virginia
North Carolina
District of Columbia
Louisiana
New Mexico
Wyoming
Colorado
Hawaii
Illinois
Florida
South Carolina
West Virginia
Mississippi
Tennessee
Arkansas
Texas
Nevada
California
Alaska
Maryland
Alabama
Connecticut
Ohio
South Dakota
North Dakota
Missouri
Delaware
Kentucky
Utah
Massachusetts
Oklahoma
Arizona
Idaho
Oregon
Georgia
Washington
Montana

2025-01-19 22:58:36 - root - INFO - itercount: 0
2025-01-19 22:58:36 - root - INFO - Database Name: GEO_OPENSTREETMAP_BOUNDARIES
Schema Name: GEO_OPENSTREETMAP
DDL describes table information.
,0
table_name,HISTORY_NODES
description,
DDL,"create or replace TABLE HISTORY_NODES (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT,
	""latitude"" NUMBER(38,9),
	""longitude"" NUMBER(38,9)
);"

,1
table_name,HISTORY_RELATIONS
description,
DDL,"create or replace TABLE HISTORY_RELATIONS (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""members"" VARIANT,
	""all_tags"" VARIANT
);"

,2
table_name,PLANET_LAYERS
description,
DDL,"create or replace TABLE PLANET_LAYERS (
	""layer_code"" NUMBER(38,0),
	""layer_class"" VARCHAR(16777216),
	""layer_name"" VARCHAR(16777216),
	""gdal_type"" VARCHAR(16777216),
	""osm_id"" NUMBER(38,0),
	""osm_way_id"" NUMBER(38,0),
	""osm_timestamp"" NUMBER(38,0),
	""osm_version"" NUMBER(38,0),
	""all_tags"" VARIANT,
	""geometry"" BINARY(8388608)
);"

,3
table_name,PLANET_FEATURES_POINTS
description,
DDL,"create or replace TABLE PLANET_FEATURES_POINTS (
	""osm_id"" NUMBER(38,0),
	""osm_version"" NUMBER(38,0),
	""osm_way_id"" NUMBER(38,0),
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT
);"

,4
table_name,PLANET_WAYS
description,
DDL,"create or replace TABLE PLANET_WAYS (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT,
	""nodes"" VARIANT
);"

,5
table_name,HISTORY_CHANGESETS
description,
DDL,"create or replace TABLE HISTORY_CHANGESETS (
	""id"" NUMBER(38,0),
	""osm_timestamp_min"" NUMBER(38,0),
	""osm_timestamp_max"" NUMBER(38,0),
	""relations"" VARIANT,
	""ways"" VARIANT,
	""nodes"" VARIANT
);"

,6
table_name,HISTORY_LAYERS
description,
DDL,"create or replace TABLE HISTORY_LAYERS (
	""layer_code"" NUMBER(38,0),
	""layer_class"" VARCHAR(16777216),
	""layer_name"" VARCHAR(16777216),
	""osm_id"" NUMBER(38,0),
	""osm_way_id"" NUMBER(38,0),
	""osm_timestamp"" NUMBER(38,0),
	""osm_version"" NUMBER(38,0),
	""all_tags"" VARIANT,
	""geometry"" BINARY(8388608),
	""gdal_type"" VARCHAR(16777216)
);"

,7
table_name,PLANET_NODES
description,
DDL,"create or replace TABLE PLANET_NODES (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT,
	""latitude"" NUMBER(38,9),
	""longitude"" NUMBER(38,9)
);"

,8
table_name,PLANET_RELATIONS
description,
DDL,"create or replace TABLE PLANET_RELATIONS (
	""id"" NUMBER(38,0),
	""version"" NUMBER(38,0),
	""username"" VARCHAR(16777216),
	""changeset"" NUMBER(38,0),
	""visible"" BOOLEAN,
	""osm_timestamp"" NUMBER(38,0),
	""geometry"" BINARY(8388608),
	""all_tags"" VARIANT,
	""members"" VARIANT
);"

,9
table_name,PLANET_FEATURES
description,
DDL,"create or replace TABLE PLANET_FEATURES (
	""feature_type"" VARCHAR(16777216),
	""osm_id"" NUMBER(38,0),
	""osm_way_id"" NUMBER(38,0),
	""osm_version"" NUMBER(38,0),
	""osm_timestamp"" NUMBER(38,0),
	""all_tags"" VARIANT,
	""geometry"" BINARY(8388608)
);"

Database Name: GEO_OPENSTREETMAP_BOUNDARIES
Schema Name: GEO_US_BOUNDARIES
DDL describes table information.
,0
table_name,ADJACENT_COUNTIES
description,
DDL,"create or replace TABLE ADJACENT_COUNTIES (
	""county"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""neighbors"" VARIANT,
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

,1
table_name,NWS_FORECAST_REGIONS
description,
DDL,"create or replace TABLE NWS_FORECAST_REGIONS (
	""state"" VARCHAR(16777216),
	""cwa"" VARCHAR(16777216),
	""time_zone"" VARCHAR(16777216),
	""fe_area"" VARCHAR(16777216),
	""zone"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""state_zone"" VARCHAR(16777216),
	""lon"" FLOAT,
	""lat"" FLOAT,
	""shortname"" VARCHAR(16777216),
	""shape_geometry"" BINARY(8388608)
);"

,2
table_name,ZIP_CODES
description,
DDL,"create or replace TABLE ZIP_CODES (
	""zip_code"" VARCHAR(16777216),
	""city"" VARCHAR(16777216),
	""county"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_code"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""zip_code_geom"" BINARY(8388608)
);"

,3
table_name,COASTLINE
description,
DDL,"create or replace TABLE COASTLINE (
	""name"" VARCHAR(16777216),
	""coastline_geom"" BINARY(8388608)
);"

,4
table_name,CONGRESS_DISTRICT_115
description,
DDL,"create or replace TABLE CONGRESS_DISTRICT_115 (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""district_fips_code"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""congress_session"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" BOOLEAN,
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""district_geom"" BINARY(8388608)
);"

Some other tables have the similar structure: ['CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116']
,5
table_name,COUNTIES
description,
DDL,"create or replace TABLE COUNTIES (
	""geo_id"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""county_fips_code"" VARCHAR(16777216),
	""county_gnis_code"" VARCHAR(16777216),
	""county_name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""fips_class_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""csa_fips_code"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""met_div_fips_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""county_geom"" BINARY(8388608)
);"

,6
table_name,METROPOLITAN_DIVISIONS
description,
DDL,"create or replace TABLE METROPOLITAN_DIVISIONS (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""cbsa_code"" VARCHAR(16777216),
	""metdiv_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""metdiv_geom"" BINARY(8388608)
);"

,7
table_name,NATIONAL_OUTLINE
description,
DDL,"create or replace TABLE NATIONAL_OUTLINE (
	""us_outline_geom"" BINARY(8388608),
	""aff_geo_id"" VARCHAR(16777216),
	""geo_id"" VARCHAR(16777216),
	""name"" VARCHAR(16777216)
);"

,8
table_name,URBAN_AREAS
description,
DDL,"create or replace TABLE URBAN_AREAS (
	""geo_id"" VARCHAR(16777216),
	""urban_area_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""area_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""type"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""urban_area_geom"" BINARY(8388608)
);"

,9
table_name,ADJACENT_STATES
description,
DDL,"create or replace TABLE ADJACENT_STATES (
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""neighbors_state"" VARIANT,
	""neighbors_fips_code"" VARIANT
);"

,10
table_name,CNECTA
description,
DDL,"create or replace TABLE CNECTA (
	""geo_id"" VARCHAR(16777216),
	""cnecta_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""name_lsad"" VARCHAR(16777216),
	""lsad"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""cnecta_geom"" BINARY(8388608)
);"

,11
table_name,CSA
description,
DDL,"create or replace TABLE CSA (
	""geo_id"" VARCHAR(16777216),
	""csa_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""msa_lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_lon"" FLOAT,
	""internal_point_lat"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""csa_geom"" BINARY(8388608)
);"

,12
table_name,RAILWAYS
description,
DDL,"create or replace TABLE RAILWAYS (
	""geo_id"" NUMBER(38,0),
	""full_name"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""railway_geom"" VARCHAR(16777216)
);"

,13
table_name,CBSA
description,
DDL,"create or replace TABLE CBSA (
	""geo_id"" VARCHAR(16777216),
	""csa_geo_id"" VARCHAR(16777216),
	""cbsa_fips_code"" VARCHAR(16777216),
	""name"" VARCHAR(16777216),
	""lsad_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""msa_indicator"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""area_land_meters"" FLOAT,
	""area_water_meters"" FLOAT,
	""internal_point_latitude"" FLOAT,
	""internal_point_longitude"" FLOAT,
	""internal_point_geom"" BINARY(8388608),
	""cbsa_geom"" BINARY(8388608)
);"

,14
table_name,STATES
description,
DDL,"create or replace TABLE STATES (
	""geo_id"" VARCHAR(16777216),
	""region_code"" VARCHAR(16777216),
	""division_code"" VARCHAR(16777216),
	""state_fips_code"" VARCHAR(16777216),
	""state_gnis_code"" VARCHAR(16777216),
	""state"" VARCHAR(16777216),
	""state_name"" VARCHAR(16777216),
	""lsad_code"" VARCHAR(16777216),
	""mtfcc_feature_class_code"" VARCHAR(16777216),
	""functional_status"" VARCHAR(16777216),
	""area_land_meters"" NUMBER(38,0),
	""area_water_meters"" NUMBER(38,0),
	""int_point_lat"" FLOAT,
	""int_point_lon"" FLOAT,
	""int_point_geom"" BINARY(8388608),
	""state_geom"" BINARY(8388608)
);"

External knowledge that might be helpful: 
Categories: Geospatial functions


## ST_INTERSECTS

Returns TRUE if the two GEOGRAPHY objects or the two GEOMETRY objects intersect (i.e. share any portion of space).

Note This function does not support using a GeometryCollection or FeatureCollection as input values.

Tip You can use the search optimization service to improve the performance of queries that call this function.
For details, see Search Optimization Service.

See also:ST_DISJOINT


## Syntax

ST_INTERSECTS( <geography_expression_1> , <geography_expression_2> )

ST_INTERSECTS( <geometry_expression_1> , <geometry_expression_2> )


## Arguments


geography_expression_1A GEOGRAPHY object.

geography_expression_2A GEOGRAPHY object.

geometry_expression_1A GEOMETRY object.

geometry_expression_2A GEOMETRY object.


## Returns

BOOLEAN.

## Usage notes


For GEOMETRY objects, the function reports an error if the two input GEOMETRY objects have different SRIDs.


## Examples


## GEOGRAPHY examples

This shows a simple use of the ST_INTERSECTS function:

SELECT ST_INTERSECTS(
    TO_GEOGRAPHY('POLYGON((0 0, 2 0, 2 2, 0 2, 0 0))'),
    TO_GEOGRAPHY('POLYGON((1 1, 3 1, 3 3, 1 3, 1 1))')
    );
+---------------------------------------------------------+
| ST_INTERSECTS(                                          |
|     TO_GEOGRAPHY('POLYGON((0 0, 2 0, 2 2, 0 2, 0 0))'), |
|     TO_GEOGRAPHY('POLYGON((1 1, 3 1, 3 3, 1 3, 1 1))')  |
|     )                                                   |
|---------------------------------------------------------|
| True                                                    |
+---------------------------------------------------------+



## GEOMETRY examples

This shows a simple use of the ST_INTERSECTS function:

SELECT ST_INTERSECTS(
  TO_GEOMETRY('POLYGON((0 0, 0 2, 2 2, 2 0, 0 0))'),
  TO_GEOMETRY('POLYGON((1 1, 3 1, 3 3, 1 3, 1 1))') );

+------------------------------------------------------+
| ST_INTERSECTS(                                       |
|   TO_GEOMETRY('POLYGON((0 0, 0 2, 2 2, 2 0, 0 0))'), |
|   TO_GEOMETRY('POLYGON((1 1, 3 1, 3 3, 1 3, 1 1))')  |
| )                                                    |
|------------------------------------------------------|
| True                                                 |
+------------------------------------------------------+
The table structure information is ({database name: {schema name: {table name}}}): 
{'GEO_OPENSTREETMAP_BOUNDARIES': {'GEO_OPENSTREETMAP': ['HISTORY_CHANGESETS', 'HISTORY_LAYERS', 'HISTORY_NODES', 'HISTORY_RELATIONS', 'PLANET_FEATURES', 'PLANET_FEATURES_POINTS', 'PLANET_LAYERS', 'PLANET_NODES', 'PLANET_RELATIONS', 'PLANET_WAYS'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'ADJACENT_STATES', 'CBSA', 'CNECTA', 'COASTLINE', 'CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116', 'COUNTIES', 'CSA', 'METROPOLITAN_DIVISIONS', 'NATIONAL_OUTLINE', 'NWS_FORECAST_REGIONS', 'RAILWAYS', 'STATES', 'URBAN_AREAS', 'ZIP_CODES']}}
Begin Exploring Related Columns
**Relevant Tables and Columns:**

- **Table:** `"GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"`
  - **"id"**: Unique identifier for each way; used to reference specific roads.
  - **"geometry"**: Spatial data of the roads; used for spatial operations like intersection.
  - **"all_tags"**: Contains the tags (in VARIANT/JSON format) associated with each way; used to extract 'highway' classifications and 'bridge' information.
  - **"nodes"**: List of node IDs that make up the way; used to determine if two ways share nodes.

- **Table:** `"GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"`
  - **"state_name"**: Name of the state; used to filter for 'California'.
  - **"state_geom"**: Geometry of the state; used to identify roads located within California.

**Conditions to be Used:**

- Extract roads where `"all_tags":"highway"` is one of 'motorway', 'trunk', 'primary', 'secondary', or 'residential'.
- Exclude roads where `"all_tags":"bridge"` exists or is set to 'yes'.
- Ensure the road's `"geometry"` intersects with California's `"state_geom"`.
- Identify roads that do not share nodes (from the `"nodes"` column).
- Use spatial functions like `ST_INTERSECTS` to determine overlapping geometries.

---

**Sample SQL Queries:**

```sql
-- 1. List the state names to confirm the presence of 'California'.
SELECT "state_name"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
LIMIT 1000;
```

```sql
-- 2. Retrieve the geometry of California.
SELECT "state_geom"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
WHERE "state_name" = 'California'
LIMIT 1000;
```

```sql
-- 3. Select ways that have a 'highway' tag.
SELECT "id", "all_tags"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":"highway" IS NOT NULL
LIMIT 1000;
```

```sql
-- 4. Extract the 'highway' type for each way.
SELECT "id", "all_tags":"highway" AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000;
```

```sql
-- 5. List distinct highway types available in the data.
SELECT DISTINCT "all_tags":"highway" AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000;
```

```sql
-- 6. Find ways that have a 'bridge' tag.
SELECT "id", "all_tags":"bridge" AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":"bridge" IS NOT NULL
LIMIT 1000;
```

```sql
-- 7. Retrieve the nodes associated with each way.
SELECT "id", "nodes"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000;
```

```sql
-- 8. Get the geometry data for ways.
SELECT "id", "geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000;
```

```sql
-- 9. Select ways classified as 'motorway'.
SELECT "id", "all_tags":"highway" AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":"highway" = 'motorway'
LIMIT 1000;
```

```sql
-- 10. Find ways that have 'bridge' set to 'yes'.
SELECT "id", "all_tags":"bridge" AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":"bridge" = 'yes'
LIMIT 1000;
```

```sql
-- 11. Retrieve ways classified as 'primary' roads.
SELECT "id", "all_tags":"highway" AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":"highway" = 'primary'
LIMIT 1000;
```

```sql
-- 12. List ways with their 'highway' and 'bridge' tags.
SELECT "id", "all_tags":"highway" AS "highway_type", "all_tags":"bridge" AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000;
```

```sql
-- 13. Get ways classified as 'residential'.
SELECT "id", "all_tags":"highway" AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":"highway" = 'residential'
LIMIT 1000;
```

```sql
-- 14. Retrieve ways with 'highway' classifications and their geometries.
SELECT "id", "all_tags":"highway" AS "highway_type", "geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
WHERE "all_tags":"highway" IS NOT NULL
LIMIT 1000;
```

```sql
-- 15. List all available state names to verify state data.
SELECT DISTINCT "state_name"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
LIMIT 1000;
```

---

These queries help in understanding the data structure and contents of the relevant tables and columns, facilitating the analysis required to address the task.Query:
-- 1. List the state names to confirm the presence of 'California'.
SELECT "state_name"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
LIMIT 1000;
Answer:
state_name
Guam
Puerto Rico
Commonwealth of the Northern Mariana Islands
United States Virgin Islands
American Samoa
Rhode Island
Massachusetts
Connecticut
Vermont
New Hampshire
Maine
New York
New Jersey
Pennsylvania
Wisconsin
Indiana
Illinois
Ohio
Michigan
South Dakota
Nebraska
Kansas
North Dakota
Iowa
Minnesota
Missouri
Florida
Virginia
South Carolina
Delaware
North Carolina
District of Columbia
Georgia
West Virginia
Maryland
Mississippi
Kentucky
Alabama
Tennessee
Oklahoma
Arkansas
Louisiana
Texas
Utah
Montana
New Mexico
Idaho
Wyoming
Colorado
Arizona
Nevada
Oregon
California
Alaska
Washington
Hawaii
Query:
-- 2. Retrieve the geometry of California.
SELECT "state_geom"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
WHERE "state_name" = 'California'
LIMIT 1000;
Answer:
Too long, hard cut:
state_geom
"bytearray(b'\x01\x06\x00\x00\x00\x07\x00\x00\x00\x01\x03\x00\x00\x00\x01\x00\x00\x00\x88\x01\x00\x00\xcf\x1b\xb5\xc2\xf4\xdd]\xc0\x12\rR\xf0\x14\x08A@\x99\x87\xda6\x8c\xde]\xc0R\x80(\x981\tA@\xb2\xf6w\xb6G\xdf]\xc0\xdc\x80\xcf\x0f#\nA@\x8b\x05L\xe0\xd6\xdf]\xc0LJA\xb7\x97\nA@""q\x8f\xa5\x0f\xe0]\xc0\xf4\xd3\x7f\xd6\xfc\nA@w\x85>X\xc6\xe0]\xc0\xf8\xbdM\x7f\xf6\x0bA@\xbf\xa41ZG\xe1]\xc0r1\x06\xd6q\x0cA@\xe9\xf7\x8b\xd9\x92\xe1]\xc0\x11i\x1b\x7f\xa2\x0cA@\x1e\xe7\xc4\x1e\xda\xe1]\xc0\xa7\xb1\xbd\x16\xf4\x0cA@\xe2""\xf7tu\xe2]\xc0_\xc9U,~\rA@\xed\xbf\\\x8b\x16\xe3]\xc0H\x08V\xd5\xcb\rA@#\xfc\x19\xde\xac\xe3]\xc0\xac\x9f\xfe\xb3\xe6\rA@\xc9\xca/\x831\xe4]\xc0WA\x0ct\xed\rA@\x10\x07\tQ\xbe\xe4]\xc0\xde\xa2\x93\xa5\xd6\rA@\xec\x89\xae\x0b?\xe5]\xc0\x00\x12M\xa0\x88\rA@u_\xcelW\xe5]\xc0\xa6*mq\x8d\rA@1\x9dd\xab\xcb\xe5]\xc0\x7f\x9b\xc5\x8b\x85\rA@lHj\xa1d\xe6]\xc0\x0b\xc7\xf3\x19P\rA@\xa6\xbe\xba*P\xe7]\xc0\x83\x16\x120\xba\x0cA@\xcd\xd3G\xe0\x0f\xe8]\xc0\xfa\xb7\xcb~\xdd\x0bA@\xaf\xd7\x82\xde\x1b\xe8]\xc0\xec~\x15\xe0\xbb\x0bA@i\x8e\xac\xfc2\xe8]\xc0r\xb9\xc1P\x87\x0bA@i\xfc\xc2+I\xe8]\xc0\xe3\x0f\x06\x9e{\x0bA@\x1a\x1e\x89\x97\xa7\xe8]\xc0!\xc2\xbf\x08\x1a\x0bA@?$\n-\xeb\xe8]\xc0\x0b~\x1bb\xbc\nA@ \xd9\xearJ\xe9]\xc0\xcep\x03>?\nA@\xef\xc9\xc3B\xad\xe9]\xc06Y\xa3\x1e\xa2\tA@\xbf\x88\xb6c\xea\xe9]\xc0zq\xe2\xab\x1d\tA@(\x9f\x1e\xdb2\xea]\xc0\xc1\xa1\xb7xx\tA@\xaf\xdeo\xb4\xe3\xea]\xc0\x19\xac8\xd5Z\nA@A_z\xfbs\xeb]\xc0\x91|%\x90\x12\x0bA@S\xf7\x8f\x85\xe8\xeb]\xc0h\xc4\xcc>\x8f\x0bA@\x839\x08:Z\xec]\xc0\x87\xf2\x05-$\x0cA@\xc8\xff\xe4\xef\xde\xec]\xc0\x11\xb4\xc9\xe1\x93\x0cA@6\xae\x7f\xd7g\xed]\xc0gur\x86\xe2\x0cA@\xdb\xc9nf\xf4\xed]\xc0\x18/\xdd$\x06\rA@\xd51uWv\xee]\xc0\xd2\x9f\xfdH\x11\rA@%\x13~\xa9\x9f\xee]\xc0\xf9\xed\xeb\xc09\rA@\x99\xcc?\xfa&\xef]\xc0\xebJ\xcbH\xbd\rA@\x98\x90\x9d\xb7\xb1\xef]\xc0\x03\xc9;\x872\x0eA@\xaf\xba\x9c\x12\x10\xf0]\xc0""\x0fD\x16i\x0eA@\x97x\xce\x16\x10\xf0]\xc0P8\xbb\xb5L\x0eA@_\xa1\x0f\x96\xb1\xf0]\xc0\xa0\xfc\xdd;j\x0eA@\xeed\xfe\xd17\xf1]\xc0\x0f\x02\xf2%T\x0eA@Q\xf9\xd7\xf2\xca\xf1]\xc0tI\xd5v\x13\x0eA@\x99\xa42\xc5\x1c\xf2]\xc0W\xc6\x86n\xf6\rA@\xb2\xa1\x9b\xfd\x81\xf2]\xc0Y\x868\xd6\xc5\rA@\xb2q\x8b\xf9\xb9\xf2]\xc0V\x0e-\xb2\x9d\rA@\x8f\x05\x13\x7f\x14\xf3]\xc0\xe5\x01,\xf2\xeb\rA@\xb3\x9e\xe8\xba\xf0\xf3]\xc0\n\x85\x088\x84\x0eA@\x15L\xc3\xf0\x11\xf5]\xc0!\xfc\x8b\xa01\x0fA@\x14\x9de\x16\xa1\xf5]\xc0C\x12\xbd\x8cb\x0fA@A\xc1\xc5\x8a\x1a\xf6]\xc0n\xc2\xbd2o\x0fA@+\x96\xe9\x97\x88\xf6]\xc0r\x9c\xdb\x84{\x0fA@\xba\xc6\xf5\xef\xfa\xf6]\xc0\x04\xdb\x88\'\xbb\x0fA@Wv\xc1\xe0\x9a\xf7]\xc0\x9f\xf7\xc6\x10\x00\x10A@W\xb2c#\x10\xf8]\xc0U\xd2\x8ao(\x10A@W\xb2c#\x10\xf8]\xc0x:W\x94\x12\x10A@\x0b\x9e\xd0\xebO\xf8]\xc0p\xca\xdc|#\x10A@\xde Z+\xda\xf8]\xc0\xd6\x14\xc8\xec,\x10A@X\xb3\\6:\xf9]\xc0Q`\x01L\x19\x10A@\x8d\xa2\x95{\x81\xf9]\xc0\xee\xaa\x07\xccC\x10A@\xc9D\xd8\xf0\xf4\xf9]\xc0zIc\xb4\x8e\x10A@\x01VG\x8et\xfa]\xc0\xe4\xd1\x8d\xb0\xa8\x10A@\x81\xeb\x8a\x19\xe1\xfa]\xc0}\xeb\xc3z\xa3\x10A@\x05l\x95`q\xfb]\xc0\xae\xd7\xf4\xa0\xa0\x10A@""?\xa9\xf6\xe9\xfb]\xc04/\x87\xddw\x10A@Y\xae\xb7\xcdT\xfc]\xc0\xbb\xe8+H3\x10A@>\xc0!T\xa9\xfc]\xc0.\x84\x9c\xf7\xff\x0fA@\xc6Q\xb9\x89Z\xfd]\xc0j\xb93\x13\x0c\x0fA@!\x8f\xe0F\xca\xfd]\xc0<k\xb7]h\x0eA@%\x80)\x03\x07\xfe]\xc0""\xc6k^\xd5\rA@\xfb\xb9\xa1);\xfe]\xc0R\x05\xa3\x92:\rA@\xfb\xb7Y\xbcX\xfe]\xc0L\xd5=\xb2\xb9\x0cA@\x83\xeb\x18W\\\xfe]\xc0\xf6\x8e\x1a\x13b\x0cA@\xea\xd9:8\xd8\xfe]\xc0\xdd\x01\x9e\xb4p\x0bA@\xb6\x86R{\x11\xff]\xc0\x8en\x84EE\nA@\x18ip[[\xff]\xc0\x8e>\xe6\x03\x02\tA@\xa4\x933\x14w\xff]\xc0GG9\x98M\x08A@\\`\x1d\xc7\x0f\x00^\xc0\x10[z4\xd5\tA@\\`\x1d\xc7\x0f\x00^\xc0b\x12.\xe4\x11\nA@\xd3o\xedDI\x00^\xc0\x92[\x93nK\nA@\xe6\x05\xd8G\xa7\x00^\xc0\x97:\xc8\xeb\xc1\nA@""\xcb\x82\x89?\x01^\xc0\x9e\xa2\xeaW:\x0bA@\xbcf\x80\x0b\xb2\x01^\xc0\xfb\xfdb\xb6d\x0bA@\xad\xa4\x15\xdfP\x02^\xc0\x15\xe5\xd2\xf8\x85\x0bA@ R\x9a\xcd\xe3\x02^\xc0#i7\xfa\x98\x0bA@a\x02E,b\x03^\xc0\xf6\x1cX\x8e\x90\x0bA@\x0c}\xb0\x8c\r\x04^\xc0&\xff\x93\xbf{\x0bA@\x06\x81\x95C\x8b\x04^\xc0\xf266;R\x0bA@\xffV\xb2c#\x05^\xc0\xbb\xab\x1e0\x0f\x0bA@\xbe\x8e\xc6\xa1~\x05^\xc0\xbe1\x04\x00\xc7\nA@\x065|\x0b\xeb\x05^\xc0\x8f\xf3\xfe?N\nA@\xbf\x00\x89&P\x06^\xc0\xfa\x02z\xe1\xce\tA@\xdd\na5\x96\x06^\xc0\xc6\xdf\xf6\x04\x89\tA@D\x08V\xd5\xcb\x06^\xc0\xb3\xff\x01\xd6\xaa\tA@E\xe4\x823\xf8\x06^\xc0\xc7@\x9e]\xbe\tA@_|\xd1\x1e/\x07^\xc0\xf8\xe1 !\xca\tA@*\xd4a\x85[\x07^\xc0\x96\xb1\xa1\x9b\xfd\tA@\xf8\xcc >\xb0\x07^\xc0\xf1#~\xc5\x1a\nA@\x05X\xe4\xd7\x0f\x08^\xc0\x94\xb7#\x9c\x16\nA@\xf5\x84%\x1eP\x08^\xc0U\xc8\x95z\x16\nA@\xe2\xb04\xf0\xa3\x08^\xc0\x82L2r\x16\nA@\xadE\xd2n\xf4\x08^\xc0\x0f C\xc7\x0e\nA@\x03\xcf\xbd\x87K\t^\xc0\xd6O\xffY\xf3\tA@\x9d\xf9cZ\x9b\t^\xc03+\xdb\x87\xbc\tA@r5\xb2+-\n^\xc0\xe1\xb3up\xb0\tA@{\xdb\xda\xc2\xf3\n^\xc0\xa4\x1a\xf6{b\tA@""\xc4\x95\xb3w\x0b^\xc0-\x0f\xd2S\xe4\x08A@\xbdk\xd0\x97\xde\x0b^\xc0\xa9+\x9f\xe5y\x08A@`\x99\xb7\xea:\x0c^\xc0;\x0f\xee\xce\xda\x07A@\x81l ]l\x0c^\xc0PKs+\x84\x07A@X\x9e\xce\x15\xa5\x0c^\xc0\x95!\x8euq\x07A@\x
Query:
SELECT t."id", t."all_tags"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t
LIMIT 1000;
Answer:
Too long, hard cut:
id,all_tags
173040551,"[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
173040548,"[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
173040547,"[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
10674916,"[
  {
    ""key"": ""NHS"",
    ""value"": ""yes""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""trunk""
  },
  {
    ""key"": ""lanes"",
    ""value"": ""2""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 65""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  },
  {
    ""key"": ""tiger:cfcc"",
    ""value"": ""A21; A31""
  },
  {
    ""key"": ""tiger:county"",
    ""value"": ""Tulare, CA""
  },
  {
    ""key"": ""tiger:name_base"",
    ""value"": ""State Highway 65; Highway 65; State Highway 65""
  },
  {
    ""key"": ""tiger:name_base_1"",
    ""value"": ""State Highway 65""
  },
  {
    ""key"": ""tiger:name_direction_prefix"",
    ""value"": ""N""
  },
  {
    ""key"": ""tiger:reviewed"",
    ""value"": ""no""
  }
]"
242834036,"[
  {
    ""key"": ""NHS"",
    ""value"": ""yes""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""trunk""
  },
  {
    ""key"": ""lanes"",
    ""value"": ""2""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 65""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  },
  {
    ""key"": ""tiger:cfcc"",
    ""value"": ""A21; A31""
  },
  {
    ""key"": ""tiger:county"",
    ""value"": ""Tulare, CA""
  },
  {
    ""key"": ""tiger:name_base"",
    ""value"": ""State Highway 65; Highway 65; State Highway 65""
  },
  {
    ""key"": ""tiger:name_base_1"",
    ""value"": ""State Highway 65""
  },
  {
    ""key"": ""tiger:name_direction_prefix"",
    ""value"": ""N""
  },
  {
    ""key"": ""tiger:reviewed"",
    ""value"": ""no""
  }
]"
184549563,"[
  {
    ""key"": ""NHS"",
    ""value"": ""STRAHNET""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""primary""
  },
  {
    ""key"": ""lanes"",
    ""value"": ""2""
  },
  {
    ""key"": ""name"",
    ""value"": ""Paso Robles Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 43;CA 46""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  }
]"
41501711,"[
  {
    ""key"": ""NHS"",
    ""value"": ""yes""
  },
  {
    ""key"": ""hgv"",
    ""value"": ""designated""
  },
  {
    ""key"": ""hgv:national_network"",
    ""value"": ""terminal_access""
  },
  {
    ""key"": ""highway"",
    ""value"": ""trunk""
  },
  {
    ""key"": ""lanes"",
    ""value"": ""2""
  },
  {
    ""key"": ""name"",
    ""value"": ""Porterville Highway""
  },
  {
    ""key"": ""ref"",
    ""value"": ""CA 65""
  },
  {
    ""key"": ""source:hgv:national_network"",
    ""value"": ""Caltrans http://www.dot.ca.gov/hq/traffops/trucks/truckmap/""
  },
  {
    ""key"": ""tiger:cfcc"",
    ""value"": ""A31""
  },
  {
    ""key"": ""tiger:county"",
    ""value"": ""Kern, CA""
  },
  {
    ""key"": ""tiger:name_base"",
    ""value"": ""State Route 65""
  },
  {
    
Query:
-- 4. Extract the 'highway' type for each way.
SELECT "id", "all_tags":highway::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000
Answer:
Too long, hard cut:
id,highway_type
173040551,
173040548,
173040547,
10674916,
242834036,
184549563,
41501711,
211929584,
196505970,
420253598,
306458161,
172557065,
10441459,
10570561,
329397904,
329397905,
614148150,
10441460,
167891278,
167891286,
10441474,
268669674,
988752632,
172557067,
854182808,
988752631,
988752640,
167891268,
432591061,
988752635,
988752630,
988752634,
988752638,
119334084,
115023390,
128133647,
215373337,
416730752,
211929583,
215373338,
527757555,
119334044,
27054486,
119334050,
922801797,
416730770,
119334023,
674108455,
674108452,
435488138,
435488159,
119334087,
10400404,
306458163,
306458175,
306458178,
10562019,
10441397,
115016149,
345650208,
306458186,
720592801,
720592802,
720592803,
306458181,
16256056,
117809218,
33194954,
184247603,
16263509,
261460910,
268669675,
268782634,
268669673,
268782631,
306458158,
306458157,
306458159,
306458160,
306458155,
306458156,
242834035,
420253599,
10406392,
215373335,
215373336,
172557070,
988752636,
432591052,
988752639,
178944703,
527757553,
115016200,
306458184,
160263703,
268782632,
268782633,
173040552,
173040550,
173040549,
42047223,
119237663,
119237652,
806364008,
172998476,
614148157,
614148186,
614148189,
614148156,
178685971,
178685967,
184198340,
178685970,
178685966,
178685973,
178685974,
178685969,
184198337,
178685956,
716004770,
716004900,
970314297,
835417674,
716004764,
970314300,
751812640,
716004898,
184081688,
716004771,
835417673,
970314299,
970314298,
184081700,
716005664,
186248362,
42046405,
184081692,
716004901,
42046402,
119237655,
716005662,
172211747,
172211755,
60417032,
253128477,
60417191,
435094876,
435094874,
184081598,
185142210,
106447192,
119524714,
184081698,
106801230,
751753003,
751753002,
184081694,
119237654,
184549524,
60920112,
844750910,
60920183,
844750920,
184549516,
60920256,
844750906,
844750922,
172777678,
64378425,
30613315,
435580191,
106871218,
33194941,
33194942,
106871216,
186090924,
206524851,
175178755,
206524855,
206524854,
41288977,
175178758,
614148188,
806364007,
614148167,
48759000,
614148165,
419726772,
48754610,
48768739,
36055571,
36055569,
173041187,
48768736,
48754613,
48754623,
48759039,
246449638,
117445687,
48754621,
117445694,
867614403,
867174737,
435094863,
10561000,
435094864,
60418055,
32869993,
435094862,
60418057,
32870277,
435094866,
188720945,
751753004,
60417029,
751753005,
867174736,
60418170,
435094861,
867313404,
867313401,
867313403,
32869991,
32870280,
60418168,
253128480,
60417602,
751753009,
66165269,
751753008,
60417498,
751753007,
184081657,
188720933,
184081651,
45536127,
106447194,
170080273,
184081618,
170080277,
185142209,
172050957,
106706501,
106706503,
106735170,
10570562,
115023385,
306458174,
306458171,
306458173,
171255338,
306458166,
306458169,
306458172,
306458165,
306458170,
778166637,
306458162,
27190718,
119334077,
346085717,
346085707,
184515005,
115020617,
306458167,
525602185,
525602182,
178685962,
178685961,
178685963,
178685960,
178685964,
178685958,
106706502,
106706500,
173041190,
806364005,
42046404,
42046406,
178685957,
178685959,
253128478,
32870276,
172211751,
435094875,
435094873,
172211745,
106801329,
106801242,
60920245,
844750921,
844750911,
232438352,
844750907,
844750923,
64378435,
64378426,
64378423,
64378429,
30613302,
30613316,
41288907,
175178757,
175178756,
41288978,
206524852,
206524853,
806364006,
48768740,
48768738,
173041186,
419726773,
48754633,
48754628,
48759038,
48754625,
48754634,
48759043,
106871212,
106871211,
253128479,
188720938,
60615868,
188720941,
32870279,
60418175,
32869992,
60418167,
60418056,
60417598,
172211742,
60417031,
435094867,
32869990,
106447196,
106447193,
172050955,
172050956,
306458164,
171255346,
115020618,
16234409,
186090931,
306458185,
16256106,
186837200,
16261077,
322886707,
210933416,
196505960,
60615708,
10564867,
184247605,
60418461,
346547493,
867313400,
60615707,
60418479,
60418460,
16249605,
210933437,
210933402,
210933429,
210933415,
322886708,
322886709,
33194946,
574424565,
210933419,
841932509,
44580796,
73965789,
175370308,
175355315,
72854930,
72950236,
72947355,
72951344,
72950740,
527212979,
857504156,
73964711,
329397918,
329397919,
73975726,
73975239,
75127005,
75133252,
75126854,
75124656,
75129487,
75132484,
75125164,
75126666,
75119572,
75122001,
75120999,
75121771,
75133436,
75122590,
75118668,
75127336,
75122302,
73966595,
73966225,
73970011,
73966592,
75123472,
73969462,
73966393,
73966165,
73969363,
73967189,
73970989,
73965813,
73967411,
73966508,
73967834,
73969091,
75142119,
75140704,
75142576,
75140850,
72848399,
72948282,
72854282,
72848495,
72848961,
73975397,
75142107,
73974635,
73975244,
72853338,
72948914,
72951313,
72853797,
72853430,
72853530,
72853322,
72852955,
75126237,
75123801,
75133031,
75120959,
75131815,
72949183,
72950693,
72949962,
75119193,
75131906,
75123722,
75123686,
72947681,
72855309,
72855017,
73970389,
73966651,
73970305,
73966769,
73971042,
73966534,
73966081,
75133682,
72949916,
72946474,
72950593,
72947649,
72947815,
72948976,
75123752,
7
Query:
SELECT DISTINCT s.value:"value"::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'highway'
LIMIT 1000;
Answer:
highway_type
rest_area
path
motorway_link
primary
footway
unclassified
trunk
services
raceway
tertiary_link
escape
platform
trunk_link
service
secondary
track
cycleway
bridleway
steps
primary_link
residential
motorway
tertiary
pedestrian
construction
secondary_link
living_street
road
Query:
-- 6. Find ways that have a 'bridge' tag.
SELECT t."id", s.value:"value"::STRING AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'bridge'
LIMIT 1000
Answer:
Too long, hard cut:
id,bridge_tag
242834035,yes
420253599,yes
10406392,yes
215373335,yes
215373336,yes
172557070,yes
988752636,yes
432591052,yes
988752639,yes
178944703,yes
527757553,yes
115016200,yes
306458184,yes
160263703,yes
268782632,yes
268782633,yes
173040552,yes
173040550,yes
173040549,yes
42047223,yes
178685962,yes
178685961,yes
178685963,yes
178685960,yes
178685964,yes
178685958,yes
106706502,yes
106706500,yes
173041190,yes
806364005,yes
42046404,yes
42046406,yes
178685957,yes
178685959,yes
253128478,yes
32870276,yes
172211751,yes
435094875,yes
435094873,yes
172211745,yes
106801329,yes
106801242,yes
60920245,yes
844750921,yes
844750911,yes
232438352,yes
844750907,yes
844750923,yes
64378435,yes
64378426,yes
64378423,yes
64378429,yes
30613302,yes
30613316,yes
41288907,yes
175178757,yes
175178756,yes
41288978,yes
206524852,yes
206524853,yes
806364006,yes
48768740,yes
48768738,yes
173041186,yes
419726773,yes
48754633,yes
48754628,yes
48759038,yes
48754625,yes
48754634,yes
48759043,yes
106871212,yes
106871211,yes
253128479,yes
188720938,yes
60615868,yes
188720941,yes
32870279,yes
60418175,yes
32869992,yes
60418167,yes
60418056,yes
60417598,yes
172211742,yes
60417031,yes
435094867,yes
32869990,yes
106447196,yes
106447193,yes
172050955,yes
172050956,yes
306458164,yes
171255346,yes
115020618,yes
60418479,yes
60418460,yes
48768379,yes
10681439,yes
10682073,yes
943852270,yes
169402960,yes
916207541,yes
252712493,yes
502746645,yes
115016167,yes
527212933,yes
917372520,yes
872385512,yes
527446097,yes
844750996,yes
844750943,yes
844750941,yes
844740474,yes
844750883,yes
367485926,yes
479615868,yes
458160892,yes
479615870,yes
399698033,yes
270779701,yes
27054754,yes
220802168,yes
177353927,yes
173192914,yes
10562381,yes
205022502,yes
435580580,yes
435580578,yes
173188818,yes
41503090,yes
385776470,yes
60417718,yes
32122176,yes
173964341,yes
475170377,yes
204582274,yes
204596980,yes
32122207,yes
204596978,yes
10561582,yes
204568775,yes
32122182,yes
231825180,yes
173965462,yes
432578120,yes
10561597,yes
204586757,yes
227760260,yes
234869325,yes
206501927,yes
905577535,yes
239429542,yes
239429553,yes
239429543,yes
239429552,yes
111136757,yes
178685977,yes
186248346,yes
276456955,yes
427572072,yes
526981504,yes
304002371,yes
972376946,yes
304002294,yes
304002303,yes
972776271,yes
944242755,yes
347169106,yes
347169112,yes
817278336,yes
766276869,yes
179861110,yes
179861108,yes
179861106,yes
347766863,trestle
326126628,yes
697267657,yes
697267655,yes
844750992,yes
697268470,yes
270367342,yes
178094512,yes
369138735,yes
220771286,yes
458330188,yes
458330179,yes
458330184,yes
385080797,yes
210272474,yes
286681032,yes
410073217,yes
221151320,boardwalk
175764191,yes
464790274,yes
287774543,yes
399553039,yes
331307995,yes
262468076,yes
320838299,yes
364964169,yes
403686650,yes
273356384,yes
252712470,yes
761924556,yes
253003136,yes
252847903,yes
284646993,yes
355535354,yes
329344786,yes
48759011,yes
253128482,yes
364964153,yes
253003154,yes
170977876,yes
447082958,yes
364026057,yes
253003118,yes
253003135,yes
252776645,yes
252776625,yes
10575744,yes
252776614,yes
253003123,yes
252776613,yes
210272460,yes
252776612,yes
252776647,yes
252776642,yes
253003181,yes
253003120,yes
385924718,yes
252776640,yes
252776636,yes
252776651,yes
252776650,yes
253128485,yes
385484592,yes
252712466,yes
60418149,yes
32869989,yes
401493932,yes
206511975,yes
200173941,yes
10562010,yes
231085364,yes
231085365,yes
207010763,yes
943830878,yes
215798184,yes
215798172,yes
204764151,yes
204764143,yes
196474289,yes
246449633,yes
246449632,yes
216604377,yes
219879949,yes
200283888,yes
216950690,yes
241755252,yes
241755249,yes
215999958,yes
215999967,yes
215589765,yes
215373330,yes
204764158,yes
204764161,yes
204764159,yes
200177368,yes
204764162,yes
200177366,yes
944171945,yes
200173922,yes
936696413,yes
215041660,yes
213514381,yes
213735078,yes
239435184,yes
64378430,yes
196474253,yes
242599721,yes
206501938,yes
196474228,yes
649498207,yes
106443455,yes
678970349,yes
252712494,yes
435225676,yes
173195028,yes
678970350,yes
178094465,yes
917344348,yes
248595302,yes
791959169,yes
186263617,yes
254286132,yes
254286104,yes
254286129,yes
196474239,yes
435579497,yes
164754707,yes
253128498,yes
188720930,yes
778966215,yes
778966212,yes
348400712,yes
173216107,yes
10567028,yes
200167278,yes
791959167,yes
972083263,yes
796770743,yes
797374653,yes
348433032,yes
968202936,yes
968202926,yes
968202931,yes
764333248,yes
805398646,yes
968153274,yes
968153278,yes
968153280,yes
968153272,yes
800394635,yes
527757548,yes
419436090,yes
794269821,yes
221151318,yes
345650211,yes
985817970,yes
978487091,yes
844750749,yes
844750751,yes
967900437,yes
967900434,yes
950288311,yes
809556768,yes
118625991,yes
180906599,yes
181323831,yes
347754885,yes
804049351,yes
804069766,yes
817278326,yes
798438377,yes
527446103,yes
832069938,yes
951976453,yes
951976451,yes
882476910,yes
944614187,yes
968202939,yes
182471288,yes
968425558,yes
968425556,yes
968425554,yes
276461637,yes
30737228,viaduct
534759539,yes
Query:
-- 7. Retrieve the nodes associated with each way.
SELECT "id", "nodes"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000
Answer:
Too long, hard cut:
id,nodes
173040551,"[
  {
    ""id"": 1838668185
  },
  {
    ""id"": 1838668181
  },
  {
    ""id"": 1838668180
  },
  {
    ""id"": 87858841
  },
  {
    ""id"": 88194718
  },
  {
    ""id"": 1838668176
  }
]"
173040548,"[
  {
    ""id"": 1838668177
  },
  {
    ""id"": 1838668178
  },
  {
    ""id"": 88623927
  },
  {
    ""id"": 88298455
  },
  {
    ""id"": 1838668175
  },
  {
    ""id"": 87919839
  },
  {
    ""id"": 88429304
  },
  {
    ""id"": 1838668174
  },
  {
    ""id"": 88474960
  },
  {
    ""id"": 88496672
  },
  {
    ""id"": 88915381
  },
  {
    ""id"": 88539904
  },
  {
    ""id"": 88954641
  }
]"
173040547,"[
  {
    ""id"": 1838668183
  },
  {
    ""id"": 1838668187
  },
  {
    ""id"": 88411534
  },
  {
    ""id"": 1838668189
  },
  {
    ""id"": 2474579817
  },
  {
    ""id"": 89411891
  },
  {
    ""id"": 88524028
  },
  {
    ""id"": 6594013791
  },
  {
    ""id"": 1838668200
  },
  {
    ""id"": 392496627
  },
  {
    ""id"": 1838668206
  }
]"
10674916,"[
  {
    ""id"": 89419435
  },
  {
    ""id"": 94555770
  },
  {
    ""id"": 94555771
  },
  {
    ""id"": 94555773
  },
  {
    ""id"": 94008743
  },
  {
    ""id"": 94555776
  },
  {
    ""id"": 94555777
  },
  {
    ""id"": 94555778
  },
  {
    ""id"": 94024064
  },
  {
    ""id"": 94555779
  },
  {
    ""id"": 94555780
  },
  {
    ""id"": 94555781
  },
  {
    ""id"": 94555784
  },
  {
    ""id"": 94555785
  },
  {
    ""id"": 94001720
  },
  {
    ""id"": 5121015985
  },
  {
    ""id"": 5121015986
  },
  {
    ""id"": 5121015987
  },
  {
    ""id"": 94555787
  },
  {
    ""id"": 94555788
  },
  {
    ""id"": 94555789
  },
  {
    ""id"": 94555790
  },
  {
    ""id"": 94555791
  },
  {
    ""id"": 94555792
  }
]"
242834036,"[
  {
    ""id"": 94555793
  },
  {
    ""id"": 94555794
  },
  {
    ""id"": 3037671617
  },
  {
    ""id"": 3037671618
  },
  {
    ""id"": 3037671620
  },
  {
    ""id"": 94555795
  },
  {
    ""id"": 94555796
  },
  {
    ""id"": 94555797
  },
  {
    ""id"": 94555798
  },
  {
    ""id"": 94555799
  },
  {
    ""id"": 94555800
  },
  {
    ""id"": 3037671622
  },
  {
    ""id"": 3037671623
  },
  {
    ""id"": 94555801
  },
  {
    ""id"": 3037671624
  },
  {
    ""id"": 94555802
  },
  {
    ""id"": 94555803
  },
  {
    ""id"": 94056505
  },
  {
    ""id"": 94555804
  },
  {
    ""id"": 94555805
  },
  {
    ""id"": 94555806
  },
  {
    ""id"": 94552771
  },
  {
    ""id"": 94555807
  },
  {
    ""id"": 94555808
  },
  {
    ""id"": 94555809
  },
  {
    ""id"": 94555810
  },
  {
    ""id"": 94555811
  },
  {
    ""id"": 94555812
  },
  {
    ""id"": 94555813
  },
  {
    ""id"": 94555814
  },
  {
    ""id"": 94555815
  },
  {
    ""id"": 94555816
  },
  {
    ""id"": 8675464814
  },
  {
    ""id"": 94031520
  },
  {
    ""id"": 94555817
  },
  {
    ""id"": 94555818
  }
]"
184549563,"[
  {
    ""id"": 88954641
  },
  {
    ""id"": 2466367062
  },
  {
    ""id"": 2466367063
  },
  {
    ""id"": 2466367064
  },
  {
    ""id"": 2466367065
  },
  {
    ""id"": 89039603
  }
]"
41501711,"[
  {
    ""id"": 89419435
  },
  {
    ""id"": 88319804
  },
  {
    ""id"": 89419434
  },
  {
    ""id"": 88319785
  },
  {
    ""id"": 89419433
  },
  {
    ""id"": 89419432
  },
  {
    ""id"": 89242729
  },
  {
    ""id"": 89419431
  },
  {
    ""id"": 89419430
  },
  {
    ""id"": 89419429
  },
  {
    ""id"": 89419428
  },
  {
    ""id"": 89419427
  },
  {
    ""id"": 89419425
  },
  {
    ""id"": 89419423
  },
  {
    ""id"": 89419421
  },
  {
    ""id"": 89419419
  },
  {
    ""id"": 89419417
  },
  {
    ""id"": 89419415
  },
  {
    ""id"": 89419412
  },
  {
    ""id"": 89419402
  },
  {
    ""id"": 89419400
  },
  {
    ""id"": 89419397
  },
  {
    ""id"": 89419394
  },
  {
    ""id"": 89419391
  },
  {
    ""id"": 89419389
  },
  {
    ""id"": 87958577
  },
  {
    ""id"": 89419386
  },
  {
    ""id"": 89419383
  },
  {
    ""id"": 89419382
  },
  {
    ""id"": 88540806
  },
  {
    ""id"": 88205040
  },
  {
    ""id"": 89419344
  },
  {
    ""id"": 89419342
  },
  {
    ""id"": 89419341
  },
  {
    ""id"": 89419339
  },
  {
    ""id"": 89419335
  },
  {
    ""id"": 89419333
  },
  {
    ""id"": 89419329
  },
  {
    ""id"": 89419326
  },
  {
    ""id"": 3977502996
  },
  {
    ""id"": 3977502995
  },
  {
    ""id"": 89419324
  },
  {
    ""id"": 88720806
  },
  {
    ""id"": 89419318
  },
  {
    ""id"": 89271860
  },
  {
    ""id"": 89419316
  },
  {
    ""id"": 89419313
  },
  {
    ""id"": 89419310
  },
  {
    ""id"": 89419308
  },
  {
    ""id"": 89419306
  },
  {
    ""id"": 89419304
  },
  {
    ""id"": 89419302
  },
  {
    ""id"": 89419300
  },
  {
    ""id"": 89419298
  },
  {
    ""id"": 88902187
  },
  {
    ""id"": 89419296
  },
  {
    ""id"": 89419294
  },
  {
    ""id"": 89419292
  },
  {
    ""id"": 89419290
  },
  {
    ""id"": 89419287
  },
  {
    ""id"": 89419285
  },
  {
    ""id"": 89419282
  },
  {
    ""id"": 89419281
  },
  {
    ""id"": 89419279
  },
  {
    ""id"": 89419277
  
Query:
-- 8. Get the geometry data for ways.
SELECT "id", "geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS"
LIMIT 1000
Answer:
Too long, hard cut:
id,geometry
173040551,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x000\xf9\x9f\xfc]\xcf]\xc0Mx\xae\x94\n\xcdA@\xe0\xa3Y4x\xcf]\xc0\x01\x7fB\x87\n\xcdA@\xbe\xa9\xa3>$\xd0]\xc0\xc6\xf6\xff\x16\t\xcdA@\x17\tm9\x97\xd0]\xc0\x91+\xf5,\x08\xcdA@\x9a[!\xac\xc6\xd0]\xc0\xcc]K\xc8\x07\xcdA@\xf9\xe1 !\xca\xd0]\xc0U\xe51\xb9\x07\xcdA@')"
173040548,"bytearray(b""\x01\x02\x00\x00\x00\r\x00\x00\x00\x05\x7f\xael\xd5\xd0]\xc0U\xe51\xb9\x07\xcdA@ \xd7<\xfd\xd6\xd0]\xc0\xd8\x95;\xd8\x07\xcdA@\xc7,{\x12\xd8\xd0]\xc0\xbb\xf2Y\x9e\x07\xcdA@\x87p\xcc\xb2\'\xd1]\xc0tF\x94\xf6\x06\xcdA@%\xcb\xeen\x8a\xd1]\xc0\\\x1ekF\x06\xcdA@\xb3\xce\xf8\xbe\xb8\xd1]\xc0\x86\xe5\xcf\xb7\x05\xcdA@\xd9\xed\xb3\xcaL\xd2]\xc0i\x00o\x81\x04\xcdA@\x04~\xe8\xdd\xb3\xd2]\xc04\xab-+\x03\xcdA@q\x1cx\xb5\xdc\xd2]\xc0\xec\x12\xd5[\x03\xcdA@\x14\xab\x06an\xd3]\xc0\xa0\xa9\xd7-\x02\xcdA@1\x84\x9c\xf7\xff\xd3]\xc0S@\xda\xff\x00\xcdA@\x1b\xbf\xf0J\x92\xd4]\xc0d\xdf\x15\xc1\xff\xccA@\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@"")"
173040547,"bytearray(b""\x01\x02\x00\x00\x00\x0b\x00\x00\x00\xc5\xe0\xabgR\xcf]\xc0\xd8-\xa7\xa9\n\xcdA@\x99\x94\'\xb5<\xcf]\xc00\x17LW\x0b\xcdA@\xf0f\xb2$\xe5\xce]\xc0*\xca\xa5\xf1\x0b\xcdA@\x1b^\xb5\xd7\xa7\xce]\xc04\x8c\xccm\x0c\xcdA@\xe7& \xdcS\xce]\xc0;\x1b\xf2\xcf\x0c\xcdA@m\xcf,\tP\xce]\xc0$\xd9#\xd4\x0c\xcdA@C\x8e\xadg\x08\xce]\xc0)\x96[Z\r\xcdA@y\xe2\x83\xe8\xda\xcd]\xc0/\xf7n\x98\r\xcdA@\xd1]\x12g\xc5\xcd]\xc0\x89\\\x15M\x0c\xcdA@\xcd\x9a\x0eS\x91\xcd]\xc0\xd1\xe68\xb7\t\xcdA@\x8a\x90_\xe4\x8a\xcd]\xc0NdA\xbc\t\xcdA@"")"
10674916,"bytearray(b'\x01\x02\x00\x00\x00\x18\x00\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@_\xab\xf3^k\xc3]\xc0@\xdd@\x81w\xe5A@d\xde\xf4xk\xc3]\xc0@,@\x80\xb1\xe5A@\x93\xbb\x19\x7fl\xc3]\xc0;\xac\xcb\x84\xba\xe6A@\xce\xbc\xc1\xbcl\xc3]\xc0vA\x8e\xf7\xf4\xe6A@\xcf\x18\xe6\x04m\xc3]\xc0\x84\x89\x9aC\xad\xe7A@\xc9\x9d-{m\xc3]\xc0rKPh\xfe\xe7A@\x04\x9f\xd5\xb8m\xc3]\xc0|\x7f\x83\xf6\xea\xe8A@:\xc9\xa0$n\xc3]\xc0\xc2\xd7|\x01b\xe9A@7\x81\xe9\xb4n\xc3]\xc0\x03\x16e\xdb\x0e\xeaA@n}\xa2\xfcn\xc3]\xc0:tz\xde\x8d\xeaA@W\xdc\x13\x7fo\xc3]\xc0T\xaf[\x04\xc6\xeaA@n\xd9\xc6Do\xc3]\xc0\x08k\xady\x9f\xebA@\xa3\x8d\xc8\x1cp\xc3]\xc0\x01\xd6O\xa4\xa0\xecA@\xd2j\xed""q\xc3]\xc0\xdbx\xc1\xf1\xc6\xedA@,\x9cI@q\xc3]\xc00\x19\xc7H\xf6\xedA@%\x83\xedqp\xc3]\xc0\xcb\xdeR\xce\x17\xeeA@\x1aQ5\xd5n\xc3]\xc0\xabO(\xfa2\xeeA@o\xcb\x91\xdfl\xc3]\xc0\x1e#4\xddF\xeeA@\xae\xb0\xcfRh\xc3]\xc0\x88\x164\x88j\xeeA@\xe0\xfe\\4d\xc3]\xc0\xa0\x08\x98\xaf\x81\xeeA@{\xfd\xa45a\xc3]\xc0\xbb\xd0\\\xa7\x91\xeeA@\xf9\xb4/E^\xc3]\xc0In\xa8s\xa0\xeeA@\xd1D\x8ecZ\xc3]\xc0\x93\xc8>\xc8\xb2\xeeA@')"
242834036,"bytearray(b'\x01\x02\x00\x00\x00$\x00\x00\x00\xf0cq\xa4X\xc3]\xc0;\xfc\x7f\xe6\xbd\xeeA@\\\xadnPV\xc3]\xc0\x14T\xf9C\xd8\xeeA@\x0b\xb2\xaf\x86U\xc3]\xc0\xd5&\xa9\xa7\xea\xeeA@\xc20`\xc9U\xc3]\xc0b\xe6\x96\xb1\xfc\xeeA@\t\xda\x897W\xc3]\xc0_\x95\xb0\xdb\x0c\xefA@\xcd.\xce\xceX\xc3]\xc0]\xba\x93\x99\x1c\xefA@%\xc7\xe7_\\\xc3]\xc0\xb7E\x99\r2\xefA@v\x15\xf7\xc4_\xc3]\xc0\xcd\xd4$xC\xefA@J\xfd\x067c\xc3]\xc0\xca\xc5\xbd\x9eT\xefA@\xf0\x1e\xfb\xb4e\xc3]\xc0\xbbB\x1f,c\xefA@A\x8aK\x9fg\xc3]\xc0\xaf\x8390o\xefA@5\x07\x08\xe6h\xc3]\xc0\xdb\x11\x98\x98x\xefA@\x82\xb5 Jj\xc3]\xc0\x87r\xa2]\x85\xefA@\xac\x8dVZk\xc3]\xc0\xb4\x9f \x0c\x97\xefA@\xc3\x87m\xe6k\xc3]\xc0\x8cr\x1fo\xa8\xefA@F\x977\x87k\xc3]\xc0\xef\xc8Xm\xfe\xefA@W\x02)\xb1k\xc3]\xc0\x9e\xb5\xdb.4\xf1A@\xd5\th""l\xc3]\xc0\x03\xd1\x932\xa9\xf1A@\xa5\x85\xcb*l\xc3]\xc0s-Z\x80\xb6\xf1A@\xe6tYLl\xc3]\xc0xADj\xda\xf1A@\x10""\x19rl\xc3]\xc0\xb3b\xb8:\x00\xf2A@5\xe1\xf2\xb3l\xc3]\xc0e\xee\x10\xb5#\xf2A@\xce\xea\xd3\xe0l\xc3]\xc0:\x16%2\xbd\xf2A@\xce\xbc\xc1\xbcl\xc3]\xc0\x0c[\x0eO\n\xf5A@\x05C\xb1pm\xc3]\xc0\xdf \x10\x9e\xbf\xf5A@7\x81\xe9\xb4n\xc3]\xc0\xfc1R\x94\xf0\xf6A@9\xf7\xb2Hn\xc3]\xc0\x0461n\xb4\xf7A@m5\xeb\x8co\xc3]\xc0x\xb1\xd5\x8a\xdb\xf8A@\xa41\xa4\xd4o\xc3]\xc0u\xee\x87\xe9\x8c\xf9A@:S\xd7\x90n\xc3]\xc0)\x07\xb3\t0\xfbA@\x03\x15\x9fLm\xc3]\xc0\xa1F|\x82\x1f\xfcA@\xcd`\x9dtl\xc3]\xc0\xcdDl\x0b*\xfdA@\x99d\xe4,l\xc3]\xc0Z\x9a\x00h9\xfdA@\xe0\x89\x0f\xa2k\xc3]\xc0\xa1\xb9\x98\xb0G\xfdA@\x99\xaf7\xd6j\xc3]\xc0\xf7\xe1\xc5gW\xfdA@:7m\xc6i\xc3]\xc0\xa1\xa6\xf1fh\xfdA@')"
184549563,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x00\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@\x19\xe4\xd3\x08""\xd5]\xc0\xa8\x02\xeey\xfe\xccA@\xf4u\xcfp9\xd5]\xc0$\x80\xf6~\xfe\xccA@\x80I*SL\xd5]\xc0\x89Eg\xf4\xfe\xccA@\x1a\x111\xcaX\xd5]\xc0\xd1\x0b\xd2\xe7\xfe\xccA@x\xb4q\xc4Z\xd5]\xc0\xe9M\xa0\xe3\xfe\xccA@')"
41501711,"bytearray(b'\x01\x02\x00\x00\x00H\x01\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@.\xfc\xe0|j\xc3]\xc0Z\xba\'\xb4Q\xe4A@\x00\x05\x17+j\xc3]\xc0\xc4B\xadi\xde\xe3A@:7m\xc6i\xc3]\xc0!\x08\x90\xa1c\xe3A@\x88\xeeY\xd7h\xc3]\xc0\xd6\xc9\x19\x8a;\xe2A@e\x18w\x83h\xc3]\xc0\xe6\x93\x15\xc3\xd5\xe1A@\x8f\xb1\xc9\xd0g\xc3]\xc0\x01\x82\xde\xc0\x89\xe1A@s\xe0\xd5rg\xc3]\xc0\xf0ne\x89\xce\xe0A@[\xcf\xb5\xd4f\xc3]\xc0(\xab3\x08\xbd\xe0A@$I\xc6 f\xc3]\xc0\x89@\x9aV\xaf\xe0A@\xf0\xc2\xd6le\xc3]\xc0\xd9b\x12\x
Query:
-- 9. Select ways classified as 'motorway'.
SELECT t."id", s.value:"value"::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'highway' AND s.value:"value"::STRING = 'motorway'
LIMIT 1000
Answer:
id,highway_type
184198343,motorway
178685955,motorway
685026600,motorway
685026598,motorway
685026601,motorway
178685976,motorway
685026599,motorway
211929582,motorway
435094869,motorway
435094865,motorway
791598378,motorway
184081612,motorway
416730770,motorway
806364008,motorway
172998476,motorway
614148157,motorway
614148186,motorway
614148189,motorway
614148156,motorway
178685971,motorway
178685967,motorway
184198340,motorway
178685970,motorway
178685966,motorway
178685973,motorway
178685974,motorway
178685969,motorway
184198337,motorway
178685956,motorway
172211747,motorway
172211755,motorway
60417032,motorway
253128477,motorway
60417191,motorway
435094876,motorway
435094874,motorway
184081598,motorway
185142210,motorway
106447192,motorway
119524714,motorway
184081698,motorway
106801230,motorway
751753003,motorway
751753002,motorway
184081694,motorway
119237654,motorway
184549524,motorway
60920112,motorway
844750910,motorway
60920183,motorway
844750920,motorway
184549516,motorway
60920256,motorway
844750906,motorway
844750922,motorway
172777678,motorway
64378425,motorway
30613315,motorway
206524851,motorway
175178755,motorway
206524855,motorway
206524854,motorway
41288977,motorway
175178758,motorway
614148188,motorway
806364007,motorway
614148167,motorway
48759000,motorway
614148165,motorway
419726772,motorway
48754610,motorway
48768739,motorway
36055571,motorway
36055569,motorway
173041187,motorway
48768736,motorway
48754613,motorway
48754623,motorway
48759039,motorway
246449638,motorway
117445687,motorway
48754621,motorway
117445694,motorway
867614403,motorway
867174737,motorway
435094863,motorway
10561000,motorway
435094864,motorway
60418055,motorway
32869993,motorway
435094862,motorway
60418057,motorway
32870277,motorway
435094866,motorway
188720945,motorway
751753004,motorway
60417029,motorway
751753005,motorway
867174736,motorway
60418170,motorway
435094861,motorway
867313404,motorway
867313401,motorway
867313403,motorway
32869991,motorway
32870280,motorway
60418168,motorway
253128480,motorway
60417602,motorway
751753009,motorway
66165269,motorway
751753008,motorway
60417498,motorway
751753007,motorway
184081657,motorway
188720933,motorway
184081651,motorway
45536127,motorway
106447194,motorway
170080273,motorway
184081618,motorway
170080277,motorway
185142209,motorway
172050957,motorway
106706501,motorway
106706503,motorway
106735170,motorway
178685962,motorway
178685961,motorway
178685963,motorway
178685960,motorway
178685964,motorway
178685958,motorway
106706502,motorway
106706500,motorway
173041190,motorway
806364005,motorway
178685957,motorway
178685959,motorway
253128478,motorway
32870276,motorway
172211751,motorway
435094875,motorway
435094873,motorway
172211745,motorway
106801329,motorway
106801242,motorway
60920245,motorway
844750921,motorway
844750911,motorway
232438352,motorway
844750907,motorway
844750923,motorway
64378435,motorway
64378426,motorway
64378423,motorway
64378429,motorway
30613302,motorway
30613316,motorway
41288907,motorway
175178757,motorway
175178756,motorway
41288978,motorway
206524852,motorway
206524853,motorway
806364006,motorway
48768740,motorway
48768738,motorway
173041186,motorway
419726773,motorway
48754633,motorway
48754628,motorway
48759038,motorway
48754625,motorway
48754634,motorway
48759043,motorway
253128479,motorway
188720938,motorway
60615868,motorway
188720941,motorway
32870279,motorway
60418175,motorway
32869992,motorway
60418167,motorway
60418056,motorway
60417598,motorway
172211742,motorway
60417031,motorway
435094867,motorway
32869990,motorway
106447196,motorway
106447193,motorway
172050955,motorway
172050956,motorway
60615708,motorway
10564867,motorway
184247605,motorway
60418461,motorway
346547493,motorway
867313400,motorway
60615707,motorway
60418479,motorway
60418460,motorway
184081615,motorway
158629154,motorway
32671447,motorway
158976528,motorway
158976546,motorway
158976547,motorway
674108456,motorway
674189163,motorway
158976539,motorway
674189159,motorway
158976536,motorway
111063162,motorway
344628969,motorway
275350451,motorway
30613306,motorway
867614592,motorway
867614594,motorway
164754807,motorway
867614591,motorway
867614593,motorway
844750876,motorway
607816010,motorway
867625207,motorway
844750872,motorway
660008776,motorway
184081669,motorway
27054543,motorway
158976617,motorway
158976531,motorway
158976537,motorway
158976549,motorway
158976550,motorway
344628973,motorway
344628967,motorway
275350445,motorway
844750873,motorway
844750877,motorway
275350448,motorway
Query:
-- 10. Find ways that have 'bridge' set to 'yes'.
SELECT t."id", s.value:"value"::STRING AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'bridge' AND s.value:"value"::STRING = 'yes'
LIMIT 1000
Answer:
Too long, hard cut:
id,bridge_tag
242834035,yes
420253599,yes
10406392,yes
215373335,yes
215373336,yes
172557070,yes
988752636,yes
432591052,yes
988752639,yes
178944703,yes
527757553,yes
115016200,yes
306458184,yes
160263703,yes
268782632,yes
268782633,yes
173040552,yes
173040550,yes
173040549,yes
42047223,yes
178685962,yes
178685961,yes
178685963,yes
178685960,yes
178685964,yes
178685958,yes
106706502,yes
106706500,yes
173041190,yes
806364005,yes
42046404,yes
42046406,yes
178685957,yes
178685959,yes
253128478,yes
32870276,yes
172211751,yes
435094875,yes
435094873,yes
172211745,yes
106801329,yes
106801242,yes
60920245,yes
844750921,yes
844750911,yes
232438352,yes
844750907,yes
844750923,yes
64378435,yes
64378426,yes
64378423,yes
64378429,yes
30613302,yes
30613316,yes
41288907,yes
175178757,yes
175178756,yes
41288978,yes
206524852,yes
206524853,yes
806364006,yes
48768740,yes
48768738,yes
173041186,yes
419726773,yes
48754633,yes
48754628,yes
48759038,yes
48754625,yes
48754634,yes
48759043,yes
106871212,yes
106871211,yes
253128479,yes
188720938,yes
60615868,yes
188720941,yes
32870279,yes
60418175,yes
32869992,yes
60418167,yes
60418056,yes
60417598,yes
172211742,yes
60417031,yes
435094867,yes
32869990,yes
106447196,yes
106447193,yes
172050955,yes
172050956,yes
306458164,yes
171255346,yes
115020618,yes
60418479,yes
60418460,yes
48768379,yes
10681439,yes
10682073,yes
943852270,yes
169402960,yes
916207541,yes
252712493,yes
502746645,yes
115016167,yes
527212933,yes
917372520,yes
872385512,yes
527446097,yes
844750996,yes
844750943,yes
844750941,yes
844740474,yes
844750883,yes
367485926,yes
479615868,yes
458160892,yes
479615870,yes
399698033,yes
270779701,yes
27054754,yes
220802168,yes
177353927,yes
173192914,yes
10562381,yes
205022502,yes
435580580,yes
435580578,yes
173188818,yes
41503090,yes
385776470,yes
60417718,yes
32122176,yes
173964341,yes
475170377,yes
204582274,yes
204596980,yes
32122207,yes
204596978,yes
10561582,yes
204568775,yes
32122182,yes
231825180,yes
173965462,yes
432578120,yes
10561597,yes
204586757,yes
227760260,yes
234869325,yes
206501927,yes
905577535,yes
239429542,yes
239429553,yes
239429543,yes
239429552,yes
111136757,yes
178685977,yes
186248346,yes
276456955,yes
427572072,yes
526981504,yes
304002371,yes
972376946,yes
304002294,yes
304002303,yes
972776271,yes
944242755,yes
347169106,yes
347169112,yes
817278336,yes
766276869,yes
179861110,yes
179861108,yes
179861106,yes
326126628,yes
697267657,yes
697267655,yes
844750992,yes
697268470,yes
270367342,yes
178094512,yes
369138735,yes
220771286,yes
458330188,yes
458330179,yes
458330184,yes
385080797,yes
210272474,yes
286681032,yes
410073217,yes
175764191,yes
464790274,yes
287774543,yes
399553039,yes
331307995,yes
262468076,yes
320838299,yes
364964169,yes
403686650,yes
273356384,yes
252712470,yes
761924556,yes
253003136,yes
252847903,yes
284646993,yes
355535354,yes
329344786,yes
48759011,yes
253128482,yes
364964153,yes
253003154,yes
170977876,yes
447082958,yes
364026057,yes
253003118,yes
253003135,yes
252776645,yes
252776625,yes
10575744,yes
252776614,yes
253003123,yes
252776613,yes
210272460,yes
252776612,yes
252776647,yes
252776642,yes
253003181,yes
253003120,yes
385924718,yes
252776640,yes
252776636,yes
252776651,yes
252776650,yes
253128485,yes
385484592,yes
252712466,yes
60418149,yes
32869989,yes
401493932,yes
206511975,yes
200173941,yes
10562010,yes
231085364,yes
231085365,yes
207010763,yes
943830878,yes
215798184,yes
215798172,yes
204764151,yes
204764143,yes
196474289,yes
246449633,yes
246449632,yes
216604377,yes
219879949,yes
200283888,yes
216950690,yes
241755252,yes
241755249,yes
215999958,yes
215999967,yes
215589765,yes
215373330,yes
204764158,yes
204764161,yes
204764159,yes
200177368,yes
204764162,yes
200177366,yes
944171945,yes
200173922,yes
936696413,yes
215041660,yes
213514381,yes
213735078,yes
239435184,yes
64378430,yes
196474253,yes
242599721,yes
206501938,yes
196474228,yes
649498207,yes
106443455,yes
678970349,yes
252712494,yes
435225676,yes
173195028,yes
678970350,yes
178094465,yes
917344348,yes
248595302,yes
791959169,yes
186263617,yes
254286132,yes
254286104,yes
254286129,yes
196474239,yes
435579497,yes
164754707,yes
253128498,yes
188720930,yes
778966215,yes
778966212,yes
348400712,yes
173216107,yes
10567028,yes
200167278,yes
791959167,yes
972083263,yes
796770743,yes
797374653,yes
348433032,yes
968202936,yes
968202926,yes
968202931,yes
764333248,yes
805398646,yes
968153274,yes
968153278,yes
968153280,yes
968153272,yes
800394635,yes
527757548,yes
419436090,yes
794269821,yes
221151318,yes
345650211,yes
985817970,yes
978487091,yes
844750749,yes
844750751,yes
967900437,yes
967900434,yes
950288311,yes
809556768,yes
118625991,yes
180906599,yes
181323831,yes
347754885,yes
804049351,yes
804069766,yes
817278326,yes
798438377,yes
527446103,yes
832069938,yes
951976453,yes
951976451,yes
882476910,yes
944614187,yes
968202939,yes
182471288,yes
968425558,yes
968425556,yes
968425554,yes
276461637,yes
534759539,yes
968182223,yes
196474234,yes
528934834,yes
528934826,ye
Query:
-- 11. Retrieve ways classified as 'primary' roads.
SELECT t."id", s.value:"value"::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'highway' AND s.value:"value"::STRING = 'primary'
LIMIT 1000
Answer:
Too long, hard cut:
id,highway_type
173040551,primary
173040548,primary
173040547,primary
184549563,primary
10441460,primary
167891278,primary
167891286,primary
10441474,primary
988752631,primary
167891268,primary
432591061,primary
988752635,primary
988752634,primary
119334084,primary
115023390,primary
527757555,primary
119334044,primary
27054486,primary
119334050,primary
119334023,primary
674108455,primary
674108452,primary
435488138,primary
435488159,primary
119334087,primary
10400404,primary
10562019,primary
10441397,primary
988752636,primary
432591052,primary
178944703,primary
527757553,primary
173040552,primary
173040550,primary
173040549,primary
45535678,primary
16256091,primary
26945875,primary
41502888,primary
41503093,primary
16259187,primary
385776471,primary
10431038,primary
10400403,primary
184877579,primary
205258666,primary
16256494,primary
593605189,primary
119524739,primary
593605186,primary
205258665,primary
16249557,primary
766276906,primary
754172337,primary
766294501,primary
766276905,primary
766294500,primary
754172338,primary
766294502,primary
766294499,primary
766294498,primary
10577385,primary
435579495,primary
435579493,primary
173192913,primary
173192915,primary
867174731,primary
867164208,primary
173193532,primary
867164205,primary
867164206,primary
10577386,primary
867164201,primary
173192916,primary
867164202,primary
435579494,primary
173188817,primary
173200700,primary
867167193,primary
286682017,primary
10561458,primary
205022499,primary
435580581,primary
33194938,primary
184255633,primary
435580579,primary
286682016,primary
867174746,primary
10561459,primary
10558015,primary
588882728,primary
754175761,primary
754175760,primary
754175762,primary
754175756,primary
588882730,primary
754175758,primary
754175759,primary
754175757,primary
16263628,primary
867624853,primary
60417719,primary
16259421,primary
761128372,primary
972776270,primary
754239539,primary
184549532,primary
754239535,primary
754239536,primary
754239537,primary
754216373,primary
754239538,primary
754216374,primary
16249843,primary
10561592,primary
10557761,primary
204568336,primary
204596979,primary
204582275,primary
16249874,primary
32122142,primary
16249864,primary
10561598,primary
320751633,primary
16249870,primary
320751504,primary
320751969,primary
16249819,primary
10561601,primary
32122177,primary
215039707,primary
231983716,primary
173965459,primary
10561581,primary
320753544,primary
348427463,primary
231983717,primary
432578121,primary
41374219,primary
231825181,primary
173964340,primary
10681271,primary
320749508,primary
204586756,primary
320750207,primary
320750432,primary
227760259,primary
204586755,primary
475170378,primary
320750948,primary
320750878,primary
239184624,primary
910476689,primary
206501925,primary
206501928,primary
213759986,primary
206501929,primary
111052222,primary
10441437,primary
234869326,primary
893061654,primary
893061668,primary
10394169,primary
893061669,primary
910476687,primary
910476686,primary
910476682,primary
910476688,primary
905577534,primary
239189635,primary
10560089,primary
613130929,primary
185027655,primary
186248347,primary
16264423,primary
119334045,primary
119334036,primary
41374217,primary
119334081,primary
41374221,primary
119334034,primary
761128364,primary
761128365,primary
761128366,primary
809871982,primary
276456956,primary
936334482,primary
10675520,primary
427572073,primary
10400303,primary
10674755,primary
312146330,primary
359004962,primary
526981509,primary
178094352,primary
312146325,primary
312146327,primary
306447628,primary
10422226,primary
612836102,primary
254269566,primary
304002365,primary
10422208,primary
254269571,primary
119323783,primary
254269565,primary
10408233,primary
614148139,primary
854026107,primary
614148140,primary
306447538,primary
10429958,primary
992135759,primary
972376945,primary
306447630,primary
31979890,primary
901276714,primary
601952540,primary
16259902,primary
901276716,primary
901276713,primary
901276711,primary
901276709,primary
901276710,primary
16259903,primary
901276707,primary
10422187,primary
306447625,primary
306447621,primary
306447633,primary
254269568,primary
254269569,primary
641817154,primary
304002354,primary
304002289,primary
304002331,primary
614148144,primary
304002313,primary
614148141,primary
10445075,primary
306447620,primary
936334479,primary
936334478,primary
936334473,primary
936334480,primary
26446459,primary
992135758,primary
119323838,primary
992096485,primary
992096486,primary
992096484,primary
306447623,primary
306447634,primary
306447627,primary
893061670,primary
910476685,primary
867614597,primary
867614598,primary
119334076,primary
173192914,primary
10562381,primary
205022502,primary
435580580,primary
435580578,primary
173188818,primary
41503090,primary
385776470,primary
60417718,primary
32122176,primary
173964341,primary
475170377,primary
204582274,primary
204596980,primary
32122207,primary
204596978,primary
10561582,primary
204568775,primary
32122182,primary
231825180,primary
173965462,primary
432578120
Query:
-- 12. List ways with their 'highway' and 'bridge' tags.
SELECT t."id",
       MAX(CASE WHEN s.value:"key"::STRING = 'highway' THEN s.value:"value"::STRING END) AS "highway_type",
       MAX(CASE WHEN s.value:"key"::STRING = 'bridge' THEN s.value:"value"::STRING END) AS "bridge_tag"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
GROUP BY t."id"
LIMIT 1000
Answer:
Too long, hard cut:
id,highway_type,bridge_tag
79489443,,
75282261,,
73977643,,
73997363,,
75227015,,
75141325,,
73534440,,
75279128,,
73963690,,
73939714,,
73938089,,
75213906,,
75140554,,
79488082,,
73186840,,
73534830,,
73963897,,
79497721,,
74114919,,
73932325,,
73996696,,
75140399,,
75219177,,
75145160,,
75215507,,
73932373,,
73963269,,
73077059,,
72990165,,
75204096,,
73932819,,
73963510,,
73963855,,
73928829,,
943833246,,
73932663,,
288961503,,
936190315,,
79490070,,
79494028,,
73994598,,
79488471,,
73933603,,
772345867,,
73998077,,
75233890,,
74114341,,
72960290,,
75228845,,
75215389,,
75218778,,
73998363,,
72957805,,
73934559,,
75281729,,
73996203,,
75235400,,
73934099,,
288842287,,
75265810,,
73935726,,
79488729,,
79495185,,
73184369,,
72955594,,
75142506,,
73963681,,
74122132,,
73999320,,
74123990,,
75215267,,
73536085,,
75206025,,
75205354,,
73940258,,
73071983,,
774714967,,
75205048,,
74119446,,
72955176,,
73182299,,
73185357,,
79488594,,
73535514,,
72992391,,
75283500,,
75282413,,
75204774,,
75281962,,
75201822,,
72968344,,
73937427,,
73994659,,
73932986,,
74113877,,
75141586,,
79497764,,
74124576,,
75232158,,
75226890,,
73940213,,
72984144,,
73071459,,
73931221,,
75218481,,
73994895,,
75206006,,
73975558,,
75214136,,
75283590,,
75231643,,
75199640,,
73975998,,
75231175,,
73535268,,
72997422,,
75230968,,
72969745,,
75205904,,
75283358,,
75205695,,
73963597,,
73933420,,
285997494,,
75214318,,
79490170,,
75226710,,
73932564,,
75279871,,
75145574,,
79495352,,
73535010,,
73179506,,
73939931,,
72993819,,
73933861,,
75206612,,
75203846,,
73932526,,
75217884,,
73995949,,
73997047,,
73994654,,
75284148,,
73936533,,
75213118,,
75216295,,
79488254,,
73161816,,
75203694,,
73181940,,
328051739,,
73940603,,
73196801,,
73996554,,
75284181,,
75267355,,
73933496,,
73183932,,
75233830,,
74115312,,
75202584,,
75227284,,
73936492,,
73994921,,
73182748,,
74115011,,
72984922,,
72994222,,
332573788,,
73938938,,
73935696,,
944220486,,
72968054,,
75283439,,
73936704,,
75124830,,
73967429,,
73967531,,
73970482,,
73966464,,
72853389,,
73969779,,
73965871,,
73966675,,
73970944,,
73966262,,
73969406,,
73965865,,
79477917,,
79478683,,
73966914,,
73970815,,
72947944,,
73966304,,
73966257,,
72853347,,
72852836,,
75206735,,
44580709,,
44580751,,
531784201,,
197281567,,
48995663,,
414672912,,
414711337,,
414711334,,
414634594,,
414666969,,
44581340,,
414672923,,
414666947,,
23144827,,
414672920,,
23144957,,
23144842,,
23144514,,
23144515,,
52979609,,
55877368,,
54120554,,
52893189,,
52893165,,
52892338,,
55019210,,
55015800,,
55019204,,
54853912,,
55015881,,
450131930,,
54853942,,
54853918,,
53649275,,
52637284,,
52979591,,
54625716,,
54625495,,
54534183,,
54534047,,
54625484,,
54625589,,
55015374,,
54534294,,
72948273,,
218906296,,
332471403,,
332573781,,
197293043,,
207770354,,
201845513,,
340211446,,
335598283,,
288842505,,
286681048,,
287640974,,
203502392,,
202853165,,
72951295,,
201797742,,
335606847,,
288993718,,
262617221,,
263742518,,
425779628,,
246779003,,
246462457,,
239192421,,
231825183,,
246603539,,
53188394,,
641766405,,
10541616,,
344628975,,
181381721,,
205384924,,
934895553,,
934895552,,
201508983,,
332350479,,
332604829,,
684831424,,
721901121,,
75282808,,
73967256,,
72951419,,
612117718,,
160266480,,
414666958,,
414672922,,
23144392,,
52893198,,
53052045,,
54625517,,
54534093,,
72950824,,
332568131,,
203376469,,
203378586,,
196512063,,
849907407,,
641766491,,
844750884,,
205384923,,
988092632,,
202456904,,
332209000,,
201508307,,
204468573,,
79494781,,
229543085,motorway_link,
131191535,,
131191016,,
131191555,,
176722490,,
512408203,,
131190373,,
131192242,,
131197555,,
131195624,,
131214777,,
131194859,,
131196565,,
131190801,,
131192855,,
131195951,,
148201435,,
148201203,,
131193972,,
131198948,,
131197236,,
131197150,,
131191596,,
131191581,,
131195234,,
131197123,,
131193945,,
131198785,,
131191000,,
131191745,,
131195899,,
131198606,,
131193867,,
131196282,,
131191928,,
131190845,,
174574965,,
131196256,,
131198175,,
175834437,,
176910145,,
131198591,,
131194766,,
131199895,,
131196340,,
131191615,,
131196283,,
175834459,,
131190432,,
133585912,,
131193185,,
175660618,,
175660630,,
133586750,,
133585828,,
175822328,,
175503054,,
131197615,,
133588646,,
175631628,,
131206322,,
131218592,,
131214342,,
131214920,,
131214397,,
148202764,,
133589280,,
133588910,,
133589134,,
133589208,,
175503688,,
580960536,,
133586424,,
131197231,,
131193021,,
133586164,,
131197240,,
133585805,,
133586015,,
133586850,,
148201428,,
196465218,,
175764291,,
248952500,,
261054174,secondary,
755140422,primary,
601932229,tertiary,
896882522,tertiary,
161341327,,
161341314,,
364962241,,
364962246,,
359435150,,
364962255,,
556833628,,
556833626,,
307944574,,
556830385,,
551734340,,
556830371,,
551734319,,
344375320,,
307807262,,
307807291,,
162145582,,
162145591,,
162145580,,
176049938,,
262468054,,
307799075,,
169875617,,
270028171,,
363188301,,
308313416,,
308313393,,
308313421,,
308752452,,
308752459,,
308319975,,
161082014,,
361792409,,
2625
Query:
-- 13. Get ways classified as 'residential'.
SELECT t."id", s.value:"value"::STRING AS "highway_type"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'highway' AND s.value:"value"::STRING = 'residential'
LIMIT 1000
Answer:
Too long, hard cut:
id,highway_type
359895486,residential
207083813,residential
205746000,residential
196503882,residential
196503870,residential
196503859,residential
196503888,residential
196503877,residential
196503835,residential
196503849,residential
196503839,residential
216615367,residential
502746645,residential
844750996,residential
151678965,residential
151679025,residential
396308900,residential
205277733,residential
169092068,residential
169092075,residential
194347081,residential
169092078,residential
169092060,residential
169095449,residential
169095448,residential
169094716,residential
169092750,residential
169092050,residential
169092061,residential
169092080,residential
169092053,residential
170404277,residential
170403769,residential
170404279,residential
210936845,residential
765909388,residential
333923125,residential
169094714,residential
169096542,residential
169092083,residential
284847134,residential
169092085,residential
169095451,residential
169094717,residential
284847135,residential
361060245,residential
169099613,residential
194090538,residential
169092057,residential
204764165,residential
197768450,residential
169095447,residential
194090547,residential
194090540,residential
194090548,residential
10677534,residential
648987754,residential
16255636,residential
169092051,residential
169095450,residential
169092748,residential
169092071,residential
169099065,residential
169099614,residential
169099611,residential
169099612,residential
194090546,residential
194090544,residential
194091709,residential
194090542,residential
289468819,residential
10551683,residential
406477061,residential
406477060,residential
362153124,residential
362153121,residential
360804194,residential
360804195,residential
362153129,residential
16254227,residential
16254228,residential
16261996,residential
170403767,residential
170404278,residential
16255809,residential
16260344,residential
16261997,residential
16256161,residential
16255811,residential
170077300,residential
16255069,residential
207791086,residential
207791084,residential
207790284,residential
16238476,residential
207791087,residential
272941443,residential
424185797,residential
16223228,residential
106619479,residential
16223232,residential
16230239,residential
106619478,residential
10574234,residential
10564533,residential
363240424,residential
261306471,residential
10574951,residential
10560761,residential
10567041,residential
339819698,residential
10569429,residential
10562661,residential
10574301,residential
16261252,residential
200876509,residential
345405114,residential
345405113,residential
10558863,residential
10559491,residential
366406839,residential
10557170,residential
10558420,residential
10565563,residential
406477059,residential
10546087,residential
290927451,residential
10560641,residential
10566561,residential
194347077,residential
10414670,residential
313517854,residential
10577517,residential
10563878,residential
10567593,residential
10568226,residential
10427201,residential
10564889,residential
16256763,residential
797536803,residential
16253906,residential
10567978,residential
10573863,residential
16259697,residential
844750995,residential
357522999,residential
362153127,residential
194261921,residential
10577891,residential
502746638,residential
16257179,residential
10560003,residential
385299762,residential
16258927,residential
10561732,residential
10570141,residential
10561078,residential
10570919,residential
10572815,residential
10565855,residential
10569353,residential
10576267,residential
10574820,residential
10573543,residential
10577519,residential
10562389,residential
357510083,residential
10569334,residential
16249994,residential
16250004,residential
170403765,residential
16254351,residential
261306915,residential
10564088,residential
16253915,residential
16260572,residential
16249587,residential
16258750,residential
10573975,residential
16254496,residential
16258528,residential
16254879,residential
16253497,residential
16256512,residential
16253751,residential
16262045,residential
16256511,residential
16264198,residential
207704181,residential
16249395,residential
16258988,residential
172609344,residential
16253440,residential
10560526,residential
10577069,residential
16262092,residential
10565630,residential
10569323,residential
16250491,residential
170077572,residential
16255067,residential
83669496,residential
10559129,residential
10561583,residential
10571773,residential
108291872,residential
202491885,residential
202491878,residential
203530852,residential
16225442,residential
39224562,residential
10394719,residential
10534342,residential
10554025,residential
10538454,residential
10556697,residential
16227413,residential
10395513,residential
10557925,residential
10537701,residential
293234628,residential
10360409,residential
16243638,residential
16231939,residential
16227224,residential
473624872,residential
16241328,residential
16224638,residential
16247572,residential
16229277,residential
16228327,residential
16235424,residen
Query:
-- 14. Retrieve ways with 'highway' classifications and their geometries.
SELECT t."id",
       s.value:"value"::STRING AS "highway_type",
       t."geometry"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
     LATERAL FLATTEN(input => t."all_tags") s
WHERE s.value:"key"::STRING = 'highway'
LIMIT 1000
Answer:
Too long, hard cut:
id,highway_type,geometry
173040551,primary,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x000\xf9\x9f\xfc]\xcf]\xc0Mx\xae\x94\n\xcdA@\xe0\xa3Y4x\xcf]\xc0\x01\x7fB\x87\n\xcdA@\xbe\xa9\xa3>$\xd0]\xc0\xc6\xf6\xff\x16\t\xcdA@\x17\tm9\x97\xd0]\xc0\x91+\xf5,\x08\xcdA@\x9a[!\xac\xc6\xd0]\xc0\xcc]K\xc8\x07\xcdA@\xf9\xe1 !\xca\xd0]\xc0U\xe51\xb9\x07\xcdA@')"
173040548,primary,"bytearray(b""\x01\x02\x00\x00\x00\r\x00\x00\x00\x05\x7f\xael\xd5\xd0]\xc0U\xe51\xb9\x07\xcdA@ \xd7<\xfd\xd6\xd0]\xc0\xd8\x95;\xd8\x07\xcdA@\xc7,{\x12\xd8\xd0]\xc0\xbb\xf2Y\x9e\x07\xcdA@\x87p\xcc\xb2\'\xd1]\xc0tF\x94\xf6\x06\xcdA@%\xcb\xeen\x8a\xd1]\xc0\\\x1ekF\x06\xcdA@\xb3\xce\xf8\xbe\xb8\xd1]\xc0\x86\xe5\xcf\xb7\x05\xcdA@\xd9\xed\xb3\xcaL\xd2]\xc0i\x00o\x81\x04\xcdA@\x04~\xe8\xdd\xb3\xd2]\xc04\xab-+\x03\xcdA@q\x1cx\xb5\xdc\xd2]\xc0\xec\x12\xd5[\x03\xcdA@\x14\xab\x06an\xd3]\xc0\xa0\xa9\xd7-\x02\xcdA@1\x84\x9c\xf7\xff\xd3]\xc0S@\xda\xff\x00\xcdA@\x1b\xbf\xf0J\x92\xd4]\xc0d\xdf\x15\xc1\xff\xccA@\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@"")"
173040547,primary,"bytearray(b""\x01\x02\x00\x00\x00\x0b\x00\x00\x00\xc5\xe0\xabgR\xcf]\xc0\xd8-\xa7\xa9\n\xcdA@\x99\x94\'\xb5<\xcf]\xc00\x17LW\x0b\xcdA@\xf0f\xb2$\xe5\xce]\xc0*\xca\xa5\xf1\x0b\xcdA@\x1b^\xb5\xd7\xa7\xce]\xc04\x8c\xccm\x0c\xcdA@\xe7& \xdcS\xce]\xc0;\x1b\xf2\xcf\x0c\xcdA@m\xcf,\tP\xce]\xc0$\xd9#\xd4\x0c\xcdA@C\x8e\xadg\x08\xce]\xc0)\x96[Z\r\xcdA@y\xe2\x83\xe8\xda\xcd]\xc0/\xf7n\x98\r\xcdA@\xd1]\x12g\xc5\xcd]\xc0\x89\\\x15M\x0c\xcdA@\xcd\x9a\x0eS\x91\xcd]\xc0\xd1\xe68\xb7\t\xcdA@\x8a\x90_\xe4\x8a\xcd]\xc0NdA\xbc\t\xcdA@"")"
10674916,trunk,"bytearray(b'\x01\x02\x00\x00\x00\x18\x00\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@_\xab\xf3^k\xc3]\xc0@\xdd@\x81w\xe5A@d\xde\xf4xk\xc3]\xc0@,@\x80\xb1\xe5A@\x93\xbb\x19\x7fl\xc3]\xc0;\xac\xcb\x84\xba\xe6A@\xce\xbc\xc1\xbcl\xc3]\xc0vA\x8e\xf7\xf4\xe6A@\xcf\x18\xe6\x04m\xc3]\xc0\x84\x89\x9aC\xad\xe7A@\xc9\x9d-{m\xc3]\xc0rKPh\xfe\xe7A@\x04\x9f\xd5\xb8m\xc3]\xc0|\x7f\x83\xf6\xea\xe8A@:\xc9\xa0$n\xc3]\xc0\xc2\xd7|\x01b\xe9A@7\x81\xe9\xb4n\xc3]\xc0\x03\x16e\xdb\x0e\xeaA@n}\xa2\xfcn\xc3]\xc0:tz\xde\x8d\xeaA@W\xdc\x13\x7fo\xc3]\xc0T\xaf[\x04\xc6\xeaA@n\xd9\xc6Do\xc3]\xc0\x08k\xady\x9f\xebA@\xa3\x8d\xc8\x1cp\xc3]\xc0\x01\xd6O\xa4\xa0\xecA@\xd2j\xed""q\xc3]\xc0\xdbx\xc1\xf1\xc6\xedA@,\x9cI@q\xc3]\xc00\x19\xc7H\xf6\xedA@%\x83\xedqp\xc3]\xc0\xcb\xdeR\xce\x17\xeeA@\x1aQ5\xd5n\xc3]\xc0\xabO(\xfa2\xeeA@o\xcb\x91\xdfl\xc3]\xc0\x1e#4\xddF\xeeA@\xae\xb0\xcfRh\xc3]\xc0\x88\x164\x88j\xeeA@\xe0\xfe\\4d\xc3]\xc0\xa0\x08\x98\xaf\x81\xeeA@{\xfd\xa45a\xc3]\xc0\xbb\xd0\\\xa7\x91\xeeA@\xf9\xb4/E^\xc3]\xc0In\xa8s\xa0\xeeA@\xd1D\x8ecZ\xc3]\xc0\x93\xc8>\xc8\xb2\xeeA@')"
242834036,trunk,"bytearray(b'\x01\x02\x00\x00\x00$\x00\x00\x00\xf0cq\xa4X\xc3]\xc0;\xfc\x7f\xe6\xbd\xeeA@\\\xadnPV\xc3]\xc0\x14T\xf9C\xd8\xeeA@\x0b\xb2\xaf\x86U\xc3]\xc0\xd5&\xa9\xa7\xea\xeeA@\xc20`\xc9U\xc3]\xc0b\xe6\x96\xb1\xfc\xeeA@\t\xda\x897W\xc3]\xc0_\x95\xb0\xdb\x0c\xefA@\xcd.\xce\xceX\xc3]\xc0]\xba\x93\x99\x1c\xefA@%\xc7\xe7_\\\xc3]\xc0\xb7E\x99\r2\xefA@v\x15\xf7\xc4_\xc3]\xc0\xcd\xd4$xC\xefA@J\xfd\x067c\xc3]\xc0\xca\xc5\xbd\x9eT\xefA@\xf0\x1e\xfb\xb4e\xc3]\xc0\xbbB\x1f,c\xefA@A\x8aK\x9fg\xc3]\xc0\xaf\x8390o\xefA@5\x07\x08\xe6h\xc3]\xc0\xdb\x11\x98\x98x\xefA@\x82\xb5 Jj\xc3]\xc0\x87r\xa2]\x85\xefA@\xac\x8dVZk\xc3]\xc0\xb4\x9f \x0c\x97\xefA@\xc3\x87m\xe6k\xc3]\xc0\x8cr\x1fo\xa8\xefA@F\x977\x87k\xc3]\xc0\xef\xc8Xm\xfe\xefA@W\x02)\xb1k\xc3]\xc0\x9e\xb5\xdb.4\xf1A@\xd5\th""l\xc3]\xc0\x03\xd1\x932\xa9\xf1A@\xa5\x85\xcb*l\xc3]\xc0s-Z\x80\xb6\xf1A@\xe6tYLl\xc3]\xc0xADj\xda\xf1A@\x10""\x19rl\xc3]\xc0\xb3b\xb8:\x00\xf2A@5\xe1\xf2\xb3l\xc3]\xc0e\xee\x10\xb5#\xf2A@\xce\xea\xd3\xe0l\xc3]\xc0:\x16%2\xbd\xf2A@\xce\xbc\xc1\xbcl\xc3]\xc0\x0c[\x0eO\n\xf5A@\x05C\xb1pm\xc3]\xc0\xdf \x10\x9e\xbf\xf5A@7\x81\xe9\xb4n\xc3]\xc0\xfc1R\x94\xf0\xf6A@9\xf7\xb2Hn\xc3]\xc0\x0461n\xb4\xf7A@m5\xeb\x8co\xc3]\xc0x\xb1\xd5\x8a\xdb\xf8A@\xa41\xa4\xd4o\xc3]\xc0u\xee\x87\xe9\x8c\xf9A@:S\xd7\x90n\xc3]\xc0)\x07\xb3\t0\xfbA@\x03\x15\x9fLm\xc3]\xc0\xa1F|\x82\x1f\xfcA@\xcd`\x9dtl\xc3]\xc0\xcdDl\x0b*\xfdA@\x99d\xe4,l\xc3]\xc0Z\x9a\x00h9\xfdA@\xe0\x89\x0f\xa2k\xc3]\xc0\xa1\xb9\x98\xb0G\xfdA@\x99\xaf7\xd6j\xc3]\xc0\xf7\xe1\xc5gW\xfdA@:7m\xc6i\xc3]\xc0\xa1\xa6\xf1fh\xfdA@')"
184549563,primary,"bytearray(b'\x01\x02\x00\x00\x00\x06\x00\x00\x00\x90-\x15e\x00\xd5]\xc0*\x0f\x1c\xe1\xfe\xccA@\x19\xe4\xd3\x08""\xd5]\xc0\xa8\x02\xeey\xfe\xccA@\xf4u\xcfp9\xd5]\xc0$\x80\xf6~\xfe\xccA@\x80I*SL\xd5]\xc0\x89Eg\xf4\xfe\xccA@\x1a\x111\xcaX\xd5]\xc0\xd1\x0b\xd2\xe7\xfe\xccA@x\xb4q\xc4Z\xd5]\xc0\xe9M\xa0\xe3\xfe\xccA@')"
41501711,trunk,"bytearray(b'\x01\x02\x00\x00\x00H\x01\x00\x00c\x82\xd00k\xc3]\xc0>\x03\x8f\x146\xe5A@.\xfc\xe0|j\xc3]\xc0Z\xba\'\xb4Q\xe4A@\x00\x05\x17+j\xc3]\xc0\xc4B\xadi\xde\xe3A@:7m\xc6i\xc3]\xc0!\x08\x90\xa1c\xe3A@\x88\xeeY\xd7h\xc3]\xc0\xd6\xc9\x19\x8a;\xe2A@e\x18w\x83h\xc3]\xc0\xe6\x93\x15\xc3\xd5\xe1A@\x8f\xb1\xc9\xd0g\xc3]\xc0\x01\x82\xde\xc0\x89\xe1A@s\xe0\xd5rg\xc3]\xc0\xf0ne\x89\xce\xe0A@[\xcf\xb5\xd4f\xc3]\xc0(\xab3\x08\xbd\xe0A@$I\xc6 f
Query:
-- 15. List all available state names to verify state data.
SELECT DISTINCT "state_name"
FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
LIMIT 1000
Answer:
state_name
Guam
Puerto Rico
Commonwealth of the Northern Mariana Islands
United States Virgin Islands
American Samoa
Rhode Island
Vermont
New Hampshire
Maine
New York
New Jersey
Pennsylvania
Wisconsin
Indiana
Michigan
Nebraska
Kansas
Iowa
Minnesota
Virginia
North Carolina
District of Columbia
Louisiana
New Mexico
Wyoming
Colorado
Hawaii
Illinois
Florida
South Carolina
West Virginia
Mississippi
Tennessee
Arkansas
Texas
Nevada
California
Alaska
Maryland
Alabama
Connecticut
Ohio
South Dakota
North Dakota
Missouri
Delaware
Kentucky
Utah
Massachusetts
Oklahoma
Arizona
Idaho
Oregon
Georgia
Washington
Montana
End Exploring Related Columns
Task: How many different pairs of roads classified as motorway, trunk, primary, secondary, or residential in California overlap each other without sharing nodes and do not have a bridge tag, where these roads are tagged with 'highway', analyzed through planet ways

Please answer only one complete SQL in snowflake dialect in ```sql``` format.
Usage example: ```sql
SELECT "COLUMN_NAME" FROM DATABASE.SCHEMA.TABLE WHERE ... ``` (Adjust "DATABASE", "SCHEMA", and "TABLE" to match actual names, ensure all column names are enclosed in double quotations)
Follow the answer format like: ```csv
number_of_pairs
value:int
(Attention: answer in one row)
```

The number of different pairs of roads in California classified as motorway, trunk, primary, secondary, or residential that overlap each other without sharing nodes and do not have a bridge tag is represented above. This count reflects the pairs of roads tagged with 'highway' in the `PLANET_WAYS` table, meeting the specified criteria..
Here are some useful tips for answering:
When performing a UNION operation on many tables, ensure that all table names are explicitly listed. Union first and then add condition and selection. e.g. SELECT "col1", "col2" FROM (TABLE1 UNION ALL TABLE2) WHERE ...; Don't write sqls as (SELECT col1, col2 FROM TABLE1 WHERE ...) UNION ALL (SELECT col1, col2 FROM TABLE2 WHERE ...); Don't use ['-- Include all', '-- Omit', '-- Continue', '-- Union all', '-- ...', '-- List all', '-- Replace this', '-- Each table', '-- Add other'] to omit any table. Table names here: ({database name: {schema name: {table name}}}): 
{'GEO_OPENSTREETMAP_BOUNDARIES': {'GEO_OPENSTREETMAP': ['HISTORY_CHANGESETS', 'HISTORY_LAYERS', 'HISTORY_NODES', 'HISTORY_RELATIONS', 'PLANET_FEATURES', 'PLANET_FEATURES_POINTS', 'PLANET_LAYERS', 'PLANET_NODES', 'PLANET_RELATIONS', 'PLANET_WAYS'], 'GEO_US_BOUNDARIES': ['ADJACENT_COUNTIES', 'ADJACENT_STATES', 'CBSA', 'CNECTA', 'COASTLINE', 'CONGRESS_DISTRICT_115', 'CONGRESS_DISTRICT_116', 'COUNTIES', 'CSA', 'METROPOLITAN_DIVISIONS', 'NATIONAL_OUTLINE', 'NWS_FORECAST_REGIONS', 'RAILWAYS', 'STATES', 'URBAN_AREAS', 'ZIP_CODES']}}

For string-matching scenarios, if the string is decided, don't use fuzzy query, and avoid using REGEXP. e.g. Get the object's title contains the word "book"
However, if the string is not decided, you may use fuzzy query and ignore upper or lower case. e.g. Get articles that mention "education".
When using ORDER BY xxx DESC, add NULLS LAST to exclude null records: ORDER BY xxx DESC NULLS LAST.
When using ORDER BY, if there are duplicate values in the primary sort column, sort by an additional column as a secondary criterion.Keep all decimals to four decimal places.

2025-01-19 22:59:31 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 22:59:31 - root - INFO - ```sql
WITH california AS (
    SELECT "state_geom" AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
    WHERE "state_name" = 'California'
),
selected_ways AS (
    SELECT t."id", t."geometry", t."nodes"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t
    WHERE
        EXISTS (
            SELECT 1
            FROM LATERAL FLATTEN(input => t."all_tags") s
            WHERE s.value:"key"::STRING = 'highway' AND s.value:"value"::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
        )
        AND NOT EXISTS (
            SELECT 1
            FROM LATERAL FLATTEN(input => t."all_tags") s
            WHERE s.value:"key"::STRING = 'bridge' AND s.value:"value"::STRING = 'yes'
        )
        AND ST_INTERSECTS(t."geometry", (SELECT "geom" FROM california))
),
pairs AS (
    SELECT w1."id" AS way_id1, w2."id" AS way_id2
    FROM selected_ways w1
    JOIN selected_ways w2 ON w1."id" < w2."id"
    WHERE ST_INTERSECTS(w1."geometry", w2."geometry")
),
nodes_per_way AS (
    SELECT w."id" AS way_id, n.value:"id"::NUMBER AS node_id
    FROM selected_ways w,
    LATERAL FLATTEN(input => w."nodes") n
),
pairs_with_common_nodes AS (
    SELECT DISTINCT p.way_id1, p.way_id2
    FROM pairs p
    JOIN nodes_per_way np1 ON np1.way_id = p.way_id1
    JOIN nodes_per_way np2 ON np2.way_id = p.way_id2
    WHERE np1.node_id = np2.node_id
)
SELECT COUNT(*) AS number_of_pairs
FROM pairs p
LEFT JOIN pairs_with_common_nodes pc
  ON p.way_id1 = pc.way_id1 AND p.way_id2 = pc.way_id2
WHERE pc.way_id1 IS NULL;
```
2025-01-19 22:59:31 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 22:59:31 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 22:59:31 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 22:59:33 - snowflake.connector.connection - INFO - closed
2025-01-19 22:59:33 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 22:59:33 - root - INFO - itercount: 1
2025-01-19 22:59:33 - root - INFO - 001044 (42P13): 01b9d343-0004-7d02-0001-11c300f01b96: SQL compilation error: error line 20 at position 12
Invalid argument types for function 'ST_INTERSECTS': (BINARY(8388608), BINARY(8388608))
2025-01-19 22:59:33 - root - INFO - Input sql:
WITH california AS (
    SELECT "state_geom" AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
    WHERE "state_name" = 'California'
),
selected_ways AS (
    SELECT t."id", t."geometry", t."nodes"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t
    WHERE
        EXISTS (
            SELECT 1
            FROM LATERAL FLATTEN(input => t."all_tags") s
            WHERE s.value:"key"::STRING = 'highway' AND s.value:"value"::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
        )
        AND NOT EXISTS (
            SELECT 1
            FROM LATERAL FLATTEN(input => t."all_tags") s
            WHERE s.value:"key"::STRING = 'bridge' AND s.value:"value"::STRING = 'yes'
        )
        AND ST_INTERSECTS(t."geometry", (SELECT "geom" FROM california))
),
pairs AS (
    SELECT w1."id" AS way_id1, w2."id" AS way_id2
    FROM selected_ways w1
    JOIN selected_ways w2 ON w1."id" < w2."id"
    WHERE ST_INTERSECTS(w1."geometry", w2."geometry")
),
nodes_per_way AS (
    SELECT w."id" AS way_id, n.value:"id"::NUMBER AS node_id
    FROM selected_ways w,
    LATERAL FLATTEN(input => w."nodes") n
),
pairs_with_common_nodes AS (
    SELECT DISTINCT p.way_id1, p.way_id2
    FROM pairs p
    JOIN nodes_per_way np1 ON np1.way_id = p.way_id1
    JOIN nodes_per_way np2 ON np2.way_id = p.way_id2
    WHERE np1.node_id = np2.node_id
)
SELECT COUNT(*) AS number_of_pairs
FROM pairs p
LEFT JOIN pairs_with_common_nodes pc
  ON p.way_id1 = pc.way_id1 AND p.way_id2 = pc.way_id2
WHERE pc.way_id1 IS NULL;
The error information is:
001044 (42P13): 01b9d343-0004-7d02-0001-11c300f01b96: SQL compilation error: error line 20 at position 12
Invalid argument types for function 'ST_INTERSECTS': (BINARY(8388608), BINARY(8388608))
Please correct it and output only 1 complete SQL query.Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:00:26 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:00:26 - root - INFO - ```sql
WITH california AS (
    SELECT ST_GEOGFROMWKB("state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
    WHERE "state_name" = 'California'
),
selected_ways AS (
    SELECT t."id", ST_GEOGFROMWKB(t."geometry") AS "geometry", t."nodes"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t
    WHERE
        EXISTS (
            SELECT 1
            FROM LATERAL FLATTEN(input => t."all_tags") s
            WHERE s.value:"key"::STRING = 'highway' AND s.value:"value"::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
        )
        AND NOT EXISTS (
            SELECT 1
            FROM LATERAL FLATTEN(input => t."all_tags") s
            WHERE s.value:"key"::STRING = 'bridge' AND s.value:"value"::STRING = 'yes'
        )
        AND ST_INTERSECTS(ST_GEOGFROMWKB(t."geometry"), (SELECT "geom" FROM california))
),
pairs AS (
    SELECT w1."id" AS way_id1, w2."id" AS way_id2
    FROM selected_ways w1
    JOIN selected_ways w2 ON w1."id" < w2."id"
    WHERE ST_INTERSECTS(w1."geometry", w2."geometry")
),
nodes_per_way AS (
    SELECT w."id" AS way_id, n.value:"id"::NUMBER AS node_id
    FROM selected_ways w,
    LATERAL FLATTEN(input => w."nodes") n
),
pairs_with_common_nodes AS (
    SELECT DISTINCT p.way_id1, p.way_id2
    FROM pairs p
    JOIN nodes_per_way np1 ON np1.way_id = p.way_id1
    JOIN nodes_per_way np2 ON np2.way_id = p.way_id2
    WHERE np1.node_id = np2.node_id
)
SELECT COUNT(*) AS number_of_pairs
FROM pairs p
LEFT JOIN pairs_with_common_nodes pc
  ON p.way_id1 = pc.way_id1 AND p.way_id2 = pc.way_id2
WHERE pc.way_id1 IS NULL;
```
2025-01-19 23:00:26 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:00:26 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:00:26 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:00:28 - snowflake.connector.connection - INFO - closed
2025-01-19 23:00:28 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:00:28 - root - INFO - itercount: 2
2025-01-19 23:00:28 - root - INFO - 002031 (42601): 01b9d344-0004-7d02-0001-11c300f01ba2: SQL compilation error:
Unsupported subquery type cannot be evaluated
2025-01-19 23:00:28 - root - INFO - Input sql:
WITH california AS (
    SELECT ST_GEOGFROMWKB("state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
    WHERE "state_name" = 'California'
),
selected_ways AS (
    SELECT t."id", ST_GEOGFROMWKB(t."geometry") AS "geometry", t."nodes"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t
    WHERE
        EXISTS (
            SELECT 1
            FROM LATERAL FLATTEN(input => t."all_tags") s
            WHERE s.value:"key"::STRING = 'highway' AND s.value:"value"::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
        )
        AND NOT EXISTS (
            SELECT 1
            FROM LATERAL FLATTEN(input => t."all_tags") s
            WHERE s.value:"key"::STRING = 'bridge' AND s.value:"value"::STRING = 'yes'
        )
        AND ST_INTERSECTS(ST_GEOGFROMWKB(t."geometry"), (SELECT "geom" FROM california))
),
pairs AS (
    SELECT w1."id" AS way_id1, w2."id" AS way_id2
    FROM selected_ways w1
    JOIN selected_ways w2 ON w1."id" < w2."id"
    WHERE ST_INTERSECTS(w1."geometry", w2."geometry")
),
nodes_per_way AS (
    SELECT w."id" AS way_id, n.value:"id"::NUMBER AS node_id
    FROM selected_ways w,
    LATERAL FLATTEN(input => w."nodes") n
),
pairs_with_common_nodes AS (
    SELECT DISTINCT p.way_id1, p.way_id2
    FROM pairs p
    JOIN nodes_per_way np1 ON np1.way_id = p.way_id1
    JOIN nodes_per_way np2 ON np2.way_id = p.way_id2
    WHERE np1.node_id = np2.node_id
)
SELECT COUNT(*) AS number_of_pairs
FROM pairs p
LEFT JOIN pairs_with_common_nodes pc
  ON p.way_id1 = pc.way_id1 AND p.way_id2 = pc.way_id2
WHERE pc.way_id1 IS NULL;
The error information is:
002031 (42601): 01b9d344-0004-7d02-0001-11c300f01ba2: SQL compilation error:
Unsupported subquery type cannot be evaluated
Please correct it and output only 1 complete SQL query.Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:01:04 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:01:04 - root - INFO - ```sql
WITH california AS (
    SELECT ST_GEOGFROMWKB("state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
    WHERE "state_name" = 'California'
),
selected_ways AS (
    SELECT t."id", ST_GEOGFROMWKB(t."geometry") AS "geometry", t."nodes"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t
    CROSS JOIN california c
    WHERE
        EXISTS (
            SELECT 1
            FROM LATERAL FLATTEN(input => t."all_tags") s
            WHERE s.value:"key"::STRING = 'highway' 
              AND s.value:"value"::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
        )
        AND NOT EXISTS (
            SELECT 1
            FROM LATERAL FLATTEN(input => t."all_tags") s
            WHERE s.value:"key"::STRING = 'bridge' 
              AND s.value:"value"::STRING = 'yes'
        )
        AND ST_INTERSECTS(ST_GEOGFROMWKB(t."geometry"), c."geom")
),
nodes_per_way AS (
    SELECT w."id" AS way_id, n.value:"id"::NUMBER AS node_id
    FROM selected_ways w,
    LATERAL FLATTEN(input => w."nodes") n
),
pairs AS (
    SELECT w1."id" AS way_id1, w2."id" AS way_id2, w1."geometry" AS geom1, w2."geometry" AS geom2
    FROM selected_ways w1
    JOIN selected_ways w2 ON w1."id" < w2."id"
    WHERE ST_INTERSECTS(w1."geometry", w2."geometry")
),
pairs_with_common_nodes AS (
    SELECT DISTINCT p.way_id1, p.way_id2
    FROM pairs p
    JOIN nodes_per_way np1 ON np1.way_id = p.way_id1
    JOIN nodes_per_way np2 ON np2.way_id = p.way_id2
    WHERE np1.node_id = np2.node_id
)
SELECT COUNT(*) AS number_of_pairs
FROM pairs p
LEFT JOIN pairs_with_common_nodes pc
  ON p.way_id1 = pc.way_id1 AND p.way_id2 = pc.way_id2
WHERE pc.way_id1 IS NULL;
```
2025-01-19 23:01:04 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:01:04 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:01:04 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:01:05 - snowflake.connector.connection - INFO - closed
2025-01-19 23:01:06 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:01:06 - root - INFO - itercount: 3
2025-01-19 23:01:06 - root - INFO - 002031 (42601): 01b9d345-0004-7d02-0001-11c300f01bc6: SQL compilation error:
Unsupported subquery type cannot be evaluated
2025-01-19 23:01:06 - root - INFO - Input sql:
WITH california AS (
    SELECT ST_GEOGFROMWKB("state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
    WHERE "state_name" = 'California'
),
selected_ways AS (
    SELECT t."id", ST_GEOGFROMWKB(t."geometry") AS "geometry", t."nodes"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t
    CROSS JOIN california c
    WHERE
        EXISTS (
            SELECT 1
            FROM LATERAL FLATTEN(input => t."all_tags") s
            WHERE s.value:"key"::STRING = 'highway' 
              AND s.value:"value"::STRING IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
        )
        AND NOT EXISTS (
            SELECT 1
            FROM LATERAL FLATTEN(input => t."all_tags") s
            WHERE s.value:"key"::STRING = 'bridge' 
              AND s.value:"value"::STRING = 'yes'
        )
        AND ST_INTERSECTS(ST_GEOGFROMWKB(t."geometry"), c."geom")
),
nodes_per_way AS (
    SELECT w."id" AS way_id, n.value:"id"::NUMBER AS node_id
    FROM selected_ways w,
    LATERAL FLATTEN(input => w."nodes") n
),
pairs AS (
    SELECT w1."id" AS way_id1, w2."id" AS way_id2, w1."geometry" AS geom1, w2."geometry" AS geom2
    FROM selected_ways w1
    JOIN selected_ways w2 ON w1."id" < w2."id"
    WHERE ST_INTERSECTS(w1."geometry", w2."geometry")
),
pairs_with_common_nodes AS (
    SELECT DISTINCT p.way_id1, p.way_id2
    FROM pairs p
    JOIN nodes_per_way np1 ON np1.way_id = p.way_id1
    JOIN nodes_per_way np2 ON np2.way_id = p.way_id2
    WHERE np1.node_id = np2.node_id
)
SELECT COUNT(*) AS number_of_pairs
FROM pairs p
LEFT JOIN pairs_with_common_nodes pc
  ON p.way_id1 = pc.way_id1 AND p.way_id2 = pc.way_id2
WHERE pc.way_id1 IS NULL;
The error information is:
002031 (42601): 01b9d345-0004-7d02-0001-11c300f01bc6: SQL compilation error:
Unsupported subquery type cannot be evaluated
Please correct it and output only 1 complete SQL query.Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:01:38 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:01:38 - root - INFO - ```sql
WITH california AS (
    SELECT ST_GEOGFROMWKB("state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
    WHERE "state_name" = 'California'
),
tags AS (
    SELECT t."id", t."nodes", t."geometry",
        MAX(CASE WHEN s.value:"key"::STRING = 'highway' THEN s.value:"value"::STRING END) AS "highway",
        MAX(CASE WHEN s.value:"key"::STRING = 'bridge' THEN s.value:"value"::STRING END) AS "bridge"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
         LATERAL FLATTEN(input => t."all_tags") s
    GROUP BY t."id", t."nodes", t."geometry"
),
selected_ways AS (
    SELECT t."id", ST_GEOGFROMWKB(t."geometry") AS "geometry", t."nodes"
    FROM tags t
    CROSS JOIN california c
    WHERE t."highway" IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (t."bridge" IS NULL OR t."bridge" != 'yes')
      AND ST_INTERSECTS(ST_GEOGFROMWKB(t."geometry"), c."geom")
),
nodes_per_way AS (
    SELECT w."id" AS way_id, n.value:"id"::NUMBER AS node_id
    FROM selected_ways w,
         LATERAL FLATTEN(input => w."nodes") n
),
pairs AS (
    SELECT w1."id" AS way_id1, w2."id" AS way_id2
    FROM selected_ways w1
    JOIN selected_ways w2 ON w1."id" < w2."id"
    WHERE ST_INTERSECTS(w1."geometry", w2."geometry")
),
pairs_with_common_nodes AS (
    SELECT DISTINCT p.way_id1, p.way_id2
    FROM pairs p
    JOIN nodes_per_way np1 ON np1.way_id = p.way_id1
    JOIN nodes_per_way np2 ON np2.way_id = p.way_id2
    WHERE np1.node_id = np2.node_id
)
SELECT COUNT(*) AS number_of_pairs
FROM pairs p
LEFT JOIN pairs_with_common_nodes pc
  ON p.way_id1 = pc.way_id1 AND p.way_id2 = pc.way_id2
WHERE pc.way_id1 IS NULL;
```
2025-01-19 23:01:38 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:01:38 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:01:38 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:01:42 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:01:42 - snowflake.connector.connection - INFO - closed
2025-01-19 23:01:42 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:01:42 - root - INFO - itercount: 4
2025-01-19 23:01:42 - root - INFO - 0
2025-01-19 23:01:42 - root - INFO - results: 
NUMBER_OF_PAIRS
13


2025-01-19 23:01:42 - root - INFO - Please check the answer again by reviewing How many different pairs of roads classified as motorway, trunk, primary, secondary, or residential in California overlap each other without sharing nodes and do not have a bridge tag, where these roads are tagged with 'highway', analyzed through planet ways, reviewing Relevant Tables and Columns and Possible Conditions and then give the final SQL query. Don't output other queries. If you think the answer is right, just output the current SQL.
Keep all decimals to four decimal places.
The answer format should be like: ```csv
number_of_pairs
value:int
(Attention: answer in one row)
```

The number of different pairs of roads in California classified as motorway, trunk, primary, secondary, or residential that overlap each other without sharing nodes and do not have a bridge tag is represented above. This count reflects the pairs of roads tagged with 'highway' in the `PLANET_WAYS` table, meeting the specified criteria. The answer should match the number of rows, the column name of the format and the filled values in the format (e.g. filled year or month). Don't output extra rows or nested rows!
Current snswer: 
NUMBER_OF_PAIRS
13
Current sql:
WITH california AS (
    SELECT ST_GEOGFROMWKB("state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
    WHERE "state_name" = 'California'
),
tags AS (
    SELECT t."id", t."nodes", t."geometry",
        MAX(CASE WHEN s.value:"key"::STRING = 'highway' THEN s.value:"value"::STRING END) AS "highway",
        MAX(CASE WHEN s.value:"key"::STRING = 'bridge' THEN s.value:"value"::STRING END) AS "bridge"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
         LATERAL FLATTEN(input => t."all_tags") s
    GROUP BY t."id", t."nodes", t."geometry"
),
selected_ways AS (
    SELECT t."id", ST_GEOGFROMWKB(t."geometry") AS "geometry", t."nodes"
    FROM tags t
    CROSS JOIN california c
    WHERE t."highway" IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (t."bridge" IS NULL OR t."bridge" != 'yes')
      AND ST_INTERSECTS(ST_GEOGFROMWKB(t."geometry"), c."geom")
),
nodes_per_way AS (
    SELECT w."id" AS way_id, n.value:"id"::NUMBER AS node_id
    FROM selected_ways w,
         LATERAL FLATTEN(input => w."nodes") n
),
pairs AS (
    SELECT w1."id" AS way_id1, w2."id" AS way_id2
    FROM selected_ways w1
    JOIN selected_ways w2 ON w1."id" < w2."id"
    WHERE ST_INTERSECTS(w1."geometry", w2."geometry")
),
pairs_with_common_nodes AS (
    SELECT DISTINCT p.way_id1, p.way_id2
    FROM pairs p
    JOIN nodes_per_way np1 ON np1.way_id = p.way_id1
    JOIN nodes_per_way np2 ON np2.way_id = p.way_id2
    WHERE np1.node_id = np2.node_id
)
SELECT COUNT(*) AS number_of_pairs
FROM pairs p
LEFT JOIN pairs_with_common_nodes pc
  ON p.way_id1 = pc.way_id1 AND p.way_id2 = pc.way_id2
WHERE pc.way_id1 IS NULL;Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:02:25 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:02:25 - root - INFO - ```sql
WITH california AS (
    SELECT ST_GEOGFROMWKB("state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
    WHERE "state_name" = 'California'
),
tags AS (
    SELECT t."id", t."nodes", t."geometry",
        MAX(CASE WHEN s.value:"key"::STRING = 'highway' THEN s.value:"value"::STRING END) AS "highway",
        MAX(CASE WHEN s.value:"key"::STRING = 'bridge' THEN s.value:"value"::STRING END) AS "bridge"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
         LATERAL FLATTEN(input => t."all_tags") s
    GROUP BY t."id", t."nodes", t."geometry"
),
selected_ways AS (
    SELECT t."id", ST_GEOGFROMWKB(t."geometry") AS "geometry", t."nodes"
    FROM tags t
    CROSS JOIN california c
    WHERE t."highway" IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (t."bridge" IS NULL OR t."bridge" != 'yes')
      AND ST_INTERSECTS(t."geometry", c."geom")
),
nodes_per_way AS (
    SELECT w."id" AS way_id, n.value:"id"::NUMBER AS node_id
    FROM selected_ways w,
         LATERAL FLATTEN(input => w."nodes") n
),
pairs AS (
    SELECT w1."id" AS way_id1, w2."id" AS way_id2
    FROM selected_ways w1
    JOIN selected_ways w2 ON w1."id" < w2."id"
    WHERE ST_INTERSECTS(w1."geometry", w2."geometry")
),
pairs_with_common_nodes AS (
    SELECT DISTINCT p.way_id1, p.way_id2
    FROM pairs p
    JOIN nodes_per_way np1 ON np1.way_id = p.way_id1
    JOIN nodes_per_way np2 ON np2.way_id = p.way_id2
    WHERE np1.node_id = np2.node_id
)
SELECT COUNT(*) AS number_of_pairs
FROM pairs p
LEFT JOIN pairs_with_common_nodes pc
  ON p.way_id1 = pc.way_id1 AND p.way_id2 = pc.way_id2
WHERE pc.way_id1 IS NULL;
```
2025-01-19 23:02:25 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:02:25 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:02:25 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:02:26 - snowflake.connector.connection - INFO - closed
2025-01-19 23:02:26 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:02:26 - root - INFO - itercount: 5
2025-01-19 23:02:26 - root - INFO - 001044 (42P13): 01b9d346-0004-7b17-0001-11c300f0298a: SQL compilation error: error line 20 at position 10
Invalid argument types for function 'ST_INTERSECTS': (BINARY(8388608), GEOGRAPHY)
2025-01-19 23:02:26 - root - INFO - Input sql:
WITH california AS (
    SELECT ST_GEOGFROMWKB("state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
    WHERE "state_name" = 'California'
),
tags AS (
    SELECT t."id", t."nodes", t."geometry",
        MAX(CASE WHEN s.value:"key"::STRING = 'highway' THEN s.value:"value"::STRING END) AS "highway",
        MAX(CASE WHEN s.value:"key"::STRING = 'bridge' THEN s.value:"value"::STRING END) AS "bridge"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
         LATERAL FLATTEN(input => t."all_tags") s
    GROUP BY t."id", t."nodes", t."geometry"
),
selected_ways AS (
    SELECT t."id", ST_GEOGFROMWKB(t."geometry") AS "geometry", t."nodes"
    FROM tags t
    CROSS JOIN california c
    WHERE t."highway" IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (t."bridge" IS NULL OR t."bridge" != 'yes')
      AND ST_INTERSECTS(t."geometry", c."geom")
),
nodes_per_way AS (
    SELECT w."id" AS way_id, n.value:"id"::NUMBER AS node_id
    FROM selected_ways w,
         LATERAL FLATTEN(input => w."nodes") n
),
pairs AS (
    SELECT w1."id" AS way_id1, w2."id" AS way_id2
    FROM selected_ways w1
    JOIN selected_ways w2 ON w1."id" < w2."id"
    WHERE ST_INTERSECTS(w1."geometry", w2."geometry")
),
pairs_with_common_nodes AS (
    SELECT DISTINCT p.way_id1, p.way_id2
    FROM pairs p
    JOIN nodes_per_way np1 ON np1.way_id = p.way_id1
    JOIN nodes_per_way np2 ON np2.way_id = p.way_id2
    WHERE np1.node_id = np2.node_id
)
SELECT COUNT(*) AS number_of_pairs
FROM pairs p
LEFT JOIN pairs_with_common_nodes pc
  ON p.way_id1 = pc.way_id1 AND p.way_id2 = pc.way_id2
WHERE pc.way_id1 IS NULL;
The error information is:
001044 (42P13): 01b9d346-0004-7b17-0001-11c300f0298a: SQL compilation error: error line 20 at position 10
Invalid argument types for function 'ST_INTERSECTS': (BINARY(8388608), GEOGRAPHY)
Please correct it and output only 1 complete SQL query.Usage of ST_INTERSECTS: ST_INTERSECTS(geometry1, ST_GEOGFROMWKB(geometry2)) This function checks if the two geometries intersect. The first argument, geometry1, is compared with the second argument, geometry2, which is converted from its WKB (Well-Known Binary) representation to a geography type using ST_GEOGFROMWKB. If the two geometries share any portion of space, the function returns TRUE; otherwise, it returns FALSE. Usage of ST_CONTAINS: ST_CONTAINS(r1.geometry, r2.geometry) This function checks if the geometry r1.geometry completely contains the geometry r2.geometry. It returns TRUE if all points of r2.geometry are within r1.geometry and FALSE otherwise. This is useful for spatial containment queries, such as verifying whether one region is entirely within another. ARRAY_INTERSECTION(nodes1, nodes2): This function computes the intersection of the two arrays, returning a new array containing only the elements that are present in both nodes1 and nodes2. ARRAY_SIZE(...): This function then determines the size (or number of elements) in the resulting array from the intersection.

2025-01-19 23:03:20 - httpx - INFO - HTTP Request: POST https://sfc-ml-sweden.openai.azure.com/openai/deployments/o1-preview/chat/completions?api-version=2024-02-15-preview "HTTP/1.1 200 OK"
2025-01-19 23:03:20 - root - INFO - ```sql
WITH california AS (
    SELECT ST_GEOGFROMWKB("state_geom") AS "geom"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_US_BOUNDARIES"."STATES"
    WHERE "state_name" = 'California'
),
tags AS (
    SELECT t."id", t."nodes", t."geometry",
        MAX(CASE WHEN s.value:"key"::STRING = 'highway' THEN s.value:"value"::STRING END) AS "highway",
        MAX(CASE WHEN s.value:"key"::STRING = 'bridge' THEN s.value:"value"::STRING END) AS "bridge"
    FROM "GEO_OPENSTREETMAP_BOUNDARIES"."GEO_OPENSTREETMAP"."PLANET_WAYS" t,
         LATERAL FLATTEN(input => t."all_tags") s
    GROUP BY t."id", t."nodes", t."geometry"
),
tags_with_geom AS (
    SELECT t.*, ST_GEOGFROMWKB(t."geometry") AS "geom"
    FROM tags t
),
selected_ways AS (
    SELECT t."id", t."geom" AS "geometry", t."nodes"
    FROM tags_with_geom t
    CROSS JOIN california c
    WHERE t."highway" IN ('motorway', 'trunk', 'primary', 'secondary', 'residential')
      AND (t."bridge" IS NULL OR t."bridge" != 'yes')
      AND ST_INTERSECTS(t."geom", c."geom")
),
nodes_per_way AS (
    SELECT w."id" AS way_id, n.value:"id"::NUMBER AS node_id
    FROM selected_ways w,
         LATERAL FLATTEN(input => w."nodes") n
),
pairs AS (
    SELECT w1."id" AS way_id1, w2."id" AS way_id2
    FROM selected_ways w1
    JOIN selected_ways w2 ON w1."id" < w2."id"
    WHERE ST_INTERSECTS(w1."geometry", w2."geometry")
),
pairs_with_common_nodes AS (
    SELECT DISTINCT p.way_id1, p.way_id2
    FROM pairs p
    JOIN nodes_per_way np1 ON p.way_id1 = np1.way_id
    JOIN nodes_per_way np2 ON p.way_id2 = np2.way_id
    WHERE np1.node_id = np2.node_id
)
SELECT COUNT(*) AS number_of_pairs
FROM pairs p
LEFT JOIN pairs_with_common_nodes pc
  ON p.way_id1 = pc.way_id1 AND p.way_id2 = pc.way_id2
WHERE pc.way_id1 IS NULL;
```
2025-01-19 23:03:20 - snowflake.connector.connection - INFO - Snowflake Connector for Python Version: 3.12.4, Python Version: 3.11.11, Platform: Linux-6.1.62-x86_64-with-glibc2.31
2025-01-19 23:03:20 - snowflake.connector.connection - INFO - Connecting to GLOBAL Snowflake domain
2025-01-19 23:03:20 - snowflake.connector.connection - INFO - This connection is in OCSP Fail Open Mode. TLS Certificates would be checked for validity and revocation status. Any other Certificate Revocation related exceptions or OCSP Responder failures would be disregarded in favor of connectivity.
2025-01-19 23:03:23 - snowflake.connector.cursor - INFO - Number of results in first chunk: 1
2025-01-19 23:03:23 - snowflake.connector.connection - INFO - closed
2025-01-19 23:03:23 - snowflake.connector.connection - INFO - No async queries seem to be running, deleting session
2025-01-19 23:03:23 - root - INFO - itercount: 6
2025-01-19 23:03:23 - root - INFO - 0
2025-01-19 23:03:23 - root - INFO - Total iteration counts: 6
